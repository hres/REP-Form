!function(){"use strict";function MainController($translate,getCountryAndProvinces){var vm=this;vm.formType="INT"}angular.module("dossierApp",["pascalprecht.translate","dossierLoadModule","dossierModule","dataLists","translations"]).controller("MainController",MainController),MainController.$inject=["$translate","getCountryAndProvinces"]}(),function(){"use strict";angular.module("dossierApp").config(["$translateProvider","$locationProvider","$httpProvider",function($translateProvider,$locationProvider,$httpProvider){$locationProvider.html5Mode({enabled:!0,requireBase:!1,rewriteLinks:!1}),$translateProvider.directivePriority(1),$translateProvider.preferredLanguage("en"),$translateProvider.useLoader("customLoad"),$translateProvider.useSanitizeValueStrategy(null),$translateProvider.forceAsyncReload(!0),$httpProvider.defaults.headers.get||($httpProvider.defaults.headers.get={}),$httpProvider.defaults.headers.get["If-Modified-Since"]="Mon, 26 Jul 1997 05:00:00 GMT",$httpProvider.defaults.headers.get["Cache-Control"]="no-cache",$httpProvider.defaults.headers.get.Pragma="no-cache"}])}(),angular.module("translations",[]).config(["$translateProvider",function($translateProvider){$translateProvider.translations("en",{AEROSOL:"Areosol",BOLUS:"Bolus",CAPSULE:"Capsule",CAPSULE_DELAYED_RELEASE:"Capsule, Delayed Release",CAPSULE_EXTENDED_RELEASE:"Capsule, Delayed Release",CREAM:"Cream",EMULSION:"Emulsion",GAS:"Gas",GEL:"Gel",IMPLANT:"Implant",LOTION:"Lotion",LOZENGE:"Lozenge",OINTMENT:"Ointment",PATCH:"Patch",PATCH_EXTENDED_RELEASE:"Patch Extended-Release",POWDER:"Powder",POWDER_FOR_SOLUTION:"Powder for Solution",POWDER_FOR_SUSPENSION:"Powder for Suspension",SHAMPOO:"Shampoo",SOLUTION:"Solution",SPRAY:"Spray",SPRAY_BAG_ON_VALVE:"Spray, Bag-On-Valve",SPRAY_METERED_DOSE:"Spray, Metered Dose",STICK:"Stick",STRIP:"Strip",SUPPOSITORY:"Suppository",SUSPENSION:"Suspension",SYRUP:"Syrup",TABLET:"Tablet",TABLET_CHEWABLE:"Tablet, Chewable",TABLET_DELAYED_RELEASE:"Tablet, Delayed Release",TABLET_EXTENDED_RELEASE:"Tablet, Extended Release",TABLET_ORALLY_DISINTEGRATING:"Tablet, Orally Disintegrating",WIPE:"Wipe"}),$translateProvider.translations("fr",{AEROSOL:"Aérosol",BOLUS:"Bol",CAPSULE:"Capsule",CAPSULE_DELAYED_RELEASE:"Capsule (à libération retardée)",CAPSULE_EXTENDED_RELEASE:"Capsule (à libération prolongée)",CREAM:"Crème",EMULSION:"Émulsion",GAS:"Gaz",GEL:"Gel",IMPLANT:"Implant",LOTION:"Lotion",LOZENGE:"Pastille",OINTMENT:"Pommade",PATCH:"Timbre",PATCH_EXTENDED_RELEASE:"Timbre (à libération prolongée)",POWDER:"Poudre",POWDER_FOR_SOLUTION:"Poudre pour solution",POWDER_FOR_SUSPENSION:"Poudre pour suspension",SHAMPOO:"Shampoing",SOLUTION:"Solution",SPRAY:"Pulvérisation",SPRAY_BAG_ON_VALVE:"Pulvérisation, sac-sur-valve",SPRAY_METERED_DOSE:"Pulvérisation, à dose mesurée",STICK:"Bâton",STRIP:"Bandelette",SUPPOSITORY:"Suppositoire",SUSPENSION:"Suspension",SYRUP:"Sirop",TABLET:"Comprimé",TABLET_CHEWABLE:"Comprimé (à croquer)",TABLET_DELAYED_RELEASE:"Comprimé (à libération retardée)",TABLET_EXTENDED_RELEASE:"Comprimé (à libération prolongée)",TABLET_ORALLY_DISINTEGRATING:"Comprimé (à désintégration orale)",WIPE:"Serviette"}),$translateProvider.translations("en",{LOAD_DOSSIER:"Load a Dossier Enrolment File",DOSSIER_HDING:"Regulatory Dossier Enrolment",INGRED_LIST:"Ingredients List",INGRED_NAME:"Ingredient Name",SOURCED:"Source From",HUMAN:"Human",ANIMAL:"Animal",IS_ANIMAL_HUMAN:"Is there a Animal/Human Material?",TISSUES_ORIGIN:"Tissues or fluids of Origin",ADD_PRODUCT:"Add Product",AMEND_REF:"Amend Canadian Reference Product",BRAND_NAME:"Brand Name",MEDICINAL_INGREDIENT:" Medicinal Ingredient",STRENGTH:"Strength(s)",DOSAGE_FORM:"Dosage Form",DOSAGE_FORM_OTHER:"Dosage Form Other Details",CDN_REF_PRODUCT:" Canadian Reference Product",COMPANY_NAME:"Company Name",COUNTRY_NAME:"Country Name",SAVE:"Save",CANCEL:"Cancel",DELETE:"Delete",SCHED_A:"Schedule A Claims",DIN_FULL:"Drug Identification Number (DIN), if issued",THERA_CLASS:"Therapeutic Classifications",THERA_CLASS_ADD:"Add Therapeutic Classification",THERA_CLASS_NAME:"Therapeutic Classification Name",PROPNAME:"Brand or Proprietary or Product Name (should be the same as the brand name on the product label)",DRUG_PRODUCT:"Product Information",SIGNED_THIRD:"The submission will be signed or filed by a third party on behalf of the manufacturer or sponsor",INCLUDE_AUTH:"Please include the Third Party Authorization letter in the REP folder when submitting via the  Common Electonic Submissions Gateway (CESG)",RELATED_INFO:"Related Information",PROPER_NAME:"Proper, Common or Non-Proprietary Name",DRUG_USE:"Drug Use",SCHEDA_DESCRIPTION:"Provide information below for non prescription products that have associated Schedule A claims only.",DELETE_CLASS:"Delete Classification",SOURCED_ANIMAL:"Provide the animal types used for this ingredient",SPECIFY:"Please specify",DETAILS:"Details",REF_PRODUCTS:"Canadian Reference Product(s)",RADIOPHARM:"Radiopharmaceutical",VETERINARY:"Veterinary",DISINFECTANT:"Disinfectant",ADD_A:"Add a ",COUNTRY_MAN:"Country of Manufacture",DELETE_COUNTRY:"Delete Country",ADD_CRP:"Add Canadian Reference Product",IS_CDN_REF:"Is there a Canadian Reference Product or Canadian Reference Biologic Drug for Biosimilars?",INGRED_MAT_NAME:"Ingredient or Material Name",HELP_DOSSIER:"Dossier Information Instructions",HELP_thera:"Therapeutic Classification Instructions",HELP_REFPRODUCTS:"Reference Product Instructions",ADD_FORMULATION:"Add Formulation",SAVE_INSTRUCT:"Dossier File Save Instructions",DOSSIER_TYPE_HELP:"Dossier Type Instructions","REFPRODCTRL.PRODUCTDETAILSFORM":"in the Canadian Reference Product Record","CONTACTREC.CONTACTRECFORM":"in the regulatory enrolment process contact record",DOSSIER:"Dossier",FIELDID:"Dossier Id"}),$translateProvider.translations("fr",{LOAD_DOSSIER:"fr_Load a Dossier Enrolment File",DOSSIER_HDING:"fr_Regulatory Dossier Enrolment",INGRED_LIST:"Ingredients List",INGRED_NAME:"Ingredient Name",SOURCED:"Source From",HUMAN:"Human",ANIMAL:"Animal",IS_ANIMAL_HUMAN:"fr_Is there a Animal/Human Material?",TISSUES_ORIGIN:"Tissues or fluids of Origin",ADD_PRODUCT:"fr_Add Product",AMEND_REF:"fr_Amend Canadian Reference Product",BRAND_NAME:"Marque nominative",MEDICINAL_INGREDIENT:"Ingrédient Médicinaux",STRENGTH:"Concentration",DOSAGE_FORM:"Forme posologique",DOSAGE_FORM_OTHER:"Dosage Form Other Details",CDN_REF_PRODUCT:" Canadian Reference Product",COMPANY_NAME:"Nom du fabricant ou promoteur",COUNTRY_NAME:"fr_Country Name",SAVE:"fr_Save",CANCEL:"fr_Cancel",DELETE:"fr_Delete",SCHED_A:"fr_Schedule A Claims",DIN_FULL:"fr_Drug Identification Number (DIN), if issued",THERA_CLASS:"fr_Therapeutic Classification(s)",THERA_CLASS_ADD:"fr_Add Therapeutic Classification",THERA_CLASS_NAME:"fr_Therapeutic Classification Name",PROPNAME:"fr_Brand or Proprietary or Product Name (should be the same as the brand name on the product label)",DRUG_PRODUCT:"fr_Product Information",SIGNED_THIRD:"fr_The submission will be signed or filed by a third party on behalf of the manufacturer or sponsor",INCLUDE_AUTH:"fr_Please include the Third Party Authorization letter in the REP folder when submitting via the  Common Electonic Submissions Gateway (CESG)",RELATED_INFO:"fr_Related Information",PROPER_NAME:"fr_Proper, Common or Non-Proprietary Name",DRUG_USE:"fr_Drug Use",SCHEDA_DESCRIPTION:"fr_",DELETE_CLASS:"fr_Delete Classification",SOURCED_ANIMAL:"fr_Provide the animal types used for this ingredient",SPECIFY:"fr_Please specify the Other",DETAILS:"fr_Details",REF_PRODUCTS:"fr_Canadian Reference Product(s)",RADIOPHARM:"",VETERINARY:"",DISINFECTANT:"",ADD_A:"fr_Add a ",COUNTRY_MAN:"fr_Country of Manufacture",DELETE_COUNTRY:"fr_Delete Country",ADD_CRP:"fr_Add Canadian Reference Product",IS_CDN_REF:"fr_Is there a Canadian Reference Product or Canadian Reference Biologic Drug for Biosimilars?",INGRED_MAT_NAME:"fr_Ingredient or Material Name",HELP_DOSSIER:"fr_Dossier Instructions",HELP_thera:"fr_Therapeutic Classification Instructions",HELP_REFPRODUCTS:"fr_Reference Product Instructions",ADD_FORMULATION:"fr_Add Formulation",SAVE_INSTRUCT:"fr_Dossier File Save Instructions",DOSSIER_TYPE_HELP:"fr_Dossier Type Instructions","REFPRODCTRL.PRODUCTDETAILSFORM":"","CONTACTREC.CONTACTRECFORM":"",DOSSIER:"Dossier",FIELDID:"fr_Dossier Id"}),$translateProvider.translations("en",{Y:"Yes",N:"No",UNK:"Unknown",REQUIRED:"(required)",DOSSIER_NUMBER:"Dossier ID",SAVE:"Save",CANCEL:"Cancel",DELETE:"Delete",EDIT:"Edit",CAN_REF_PRODUCTS:"Canadian Reference Products",CAN_REF_PRODUCT:"Canadian Reference Product"}),$translateProvider.translations("fr",{Y:"Oui",N:"Non",UNK:"Inconnu",REQUIRED:"(requis)",DOSSIER_ID:"fr_Dossier ID",SAVE:"fr_Save",CANCEL:"fr_Cancel",DELETE:"fr_Delete",EDIT:"fr_Edit",CAN_REF_PRODUCTS:"fr_Canadian Reference Products"}),$translateProvider.translations("en",{MSG_APP4_TYPE:"At least one source must be selected",MSG_ERR_ONE_SYSTEM:"At least one tissue or fluid of origin must be selected",MSG_ERR_ONE_ANIMAL:"At least one animal source must be selected",MSG_ERR_ONE_ANIMAL_TYPE:"At least one animal type must be selected",MSG_ERR_DRUG_USE:"At least one drug use must be selected",MSG_ONE_SCHEDA:"At least one disease or disorder must be selected",MSG_IS_REQUIRED:"is a required field.",MSG_ERR_INVALID_NUM:"This is not a valid number.",NO_ANIMAL:"At least one animal source must be selected",NO_ACTIVE:"At least one medicinal ingredient is required.",NO_CONTAINER:"At least one container type is required.",NO_FORMULATION:"At least one formulation is required.",NO_COUNTRY:"At least one country of manufacture record is required",NO_COUNTRY_ORIGIN:"At least one Country of Origin is required",NO_ROA:"At least one Route of Administation is required",NO_THERAVAL:"At least one therapeutic classification record must be provided",NO_TISSUE:"Require at least one Tissue or fluid source",MSG_ERR_ONE_COUNTRY:"At least one country of origin is required",MSG_ERR_ONE_TISSUE:"Require at least one Tissue or fluid source",MSG_ERR_ONE_CNTRY_ORIGIN:"At least one Country of origin is required",MSG_ERR_ONE_CDN_REF:"At least one Canadian Reference product is required",MSG_ERR_INVALID_NUM_MIN:"The value must be greater than -273",MSG_ERR_INVALID_NUM_MAX:"The value must be less than 999",MSG_ERR_INVALID_NUM_MIN0:"The value must be greater than 0",MSG_ERR_INVALID_NUM_MIN_LOWER:"The value must be equal to or greater than Lower Limit",MSG_TISSUE_SYS_USED:"This system has been already been selected, please select another."}),$translateProvider.translations("fr",{MSG_APP4_TYPE:"fr_At least one source must be selected",MSG_ERR_ONE_SYSTEM:"fr_At least one tissue or fluid of origin must be selected",MSG_ERR_ONE_ANIMAL:"fr_At least one animal source must be selected",MSG_ERR_ONE_ANIMAL_TYPE:"fr_At least one animal type must be selected",MSG_ERR_DRUG_USE:"fr_At least one drug use must be selected",MSG_ONE_SCHEDA:"fr_At least one disease or disorder must be selected",MSG_IS_REQUIRED:"fr_is a required field.",MSG_ERR_INVALID_NUM:"fr_This is not a valid number.",NO_ANIMAL:"fr_At least one animal source must be selected",NO_ACTIVE:"fr_At least one medicinal ingredient is required.",NO_CONTAINER:"fr_At least one container type is required.",NO_FORMULATION:"fr_At least one formulation is required.",NO_COUNTRY:"fr_At least one country of manufacture record is required",NO_COUNTRY_ORIGIN:"fr_At least one Country of Origin is required",NO_ROA:"fr_At least one Route of Administation is required",NO_THERAVAL:"fr_At least one therapeutic classification is required",NO_TISSUE:"fr_Require at least one Tissue or fluid source",MSG_ERR_ONE_COUNTRY:"fr_At least one country of origin is required",MSG_ERR_ONE_TISSUE:"fr_Require at least one Tissue or fluid source",MSG_ERR_ONE_CNTRY_ORIGIN:"fr_At least one Country of origin is required",MSG_ERR_ONE_CDN_REF:"fr_At least one Canadian Reference product is required",MSG_ERR_INVALID_NUM_MIN:"fr_The value must be greater than -273",MSG_ERR_INVALID_NUM_MAX:"fr_The value must be less than 999",MSG_ERR_INVALID_NUM_MIN0:"fr_The value must be greater than 0",MSG_TISSUE_SYS_USED:"fr_This system has been already been selected, please select another."}),$translateProvider.translations("en",{NERVOUS_SYSTEM:"Nervous System",BRAIN:"brain",BRAINSTEM:"brain stem",CEREBELLUM:"cerebellum",CEROFLUID:"cerebrospinal fluid",DORSALROOT:"dorsal root ganglia",DURAMATER:"dura mater",HYPOTHALAMUS:"hypothalamus",RETINA:"retina or optic nerve",SPINALCORD:"spinal cord",TRIGEMINAL:"trigerminal ganglia",NERVOUS_OTHER:"other nervous system",DIGESTIVE_SYSTEM:"Digestive",APPENDIX:"appendix",BILE:"bile",DISTALILEUM:"distal ileum",LARGEINTEST:"large intestine",SALIVA:"saliva or salivary gland",SMALLINTESTINE:"small intestine other than distal ileum",STOMACH:"stomach",DIGESTIVE_OTHER:"other digestive system",REPRODUCT_SYSTEM:"Reproductive and urinary",MILK:"milk or milk products",KIDNEY:"kidney",COLOSTRUM:"colostrum",MAMMARY:"mammary glands",OVARIES:"ovaries",PLACENTA:"placenta",PLACENTAFLUID:"placental fluid",SEMEN:"semen",TESTES:"testes",URINE:"urine",REPROD_OTHER:"other reproductive system",CARDIO_SYSTEM:"Cardio-Respiratory",HEART:"Heart or pericardium",LUNG:"lung",NASALFLUID:"nasal fluid",TRACHEA:"trachea",PLACENTALFLUID:"placental fluid",CARDIO_OTHER:"other cardio-respiratory system",IMMUNE_SYSTEM:"Immune",LYMPH:"lymph nodes",SPLEEN:"spleen",THYMUS:"thymus",TONSILS:"tonsils",IMMUNE_OTHER:"other immune system",SKINGLAND_SYSTEM:"Skin and Glandular",ADRENAL:"adrenal gland or tissue",HAIR:"hair, feathers, hooves",LIVER:"liver",PANCREAS:"pancreas",PITUARYGLAND:"pituitary gland",SKINHIDES:"skin or hides",THYROID:"thyroid or parathyroid",SKIN_OTHER:"other skin or glandular system",MUSCULO_SYSTEM:"Musculo-Skeletal",ABDOMEN:"abdomen",SKULL:"skull",BONES:"bones other than vertebral column or skull",COLLAGEN:"collagen",TENDONS:"tendons or ligaments",VERTEBRALCOLUMN:"vertebral column",MUSCLE:"muscle",MUSCLE_OTHER:"other musculo-skeletal system",OTHERTISSUE_SYSTEM:"Other Tissues or Fluids",ADIPOSE:"adipose or omentum",ASCITES:"acscites",ANTLERV:"antler velvet",SERUM:"serum",WHOLEBLOOD:"whole blood",PLASMA:"plasma",EMBRYONICTISS:"embryonic tissue",FETALTISS:"fetal tissue",BONEMARROW:"bone marrow",EYESCORNEA:"eyes or cornea",GALL:"gall bladder",FLUIDS_OTHER:"other types of tissues or fluids",NONHUMANPRIMATE_TYPE:"Non-human primate type",AQUATIC_TYPE:"Aquatic species such as fish, molluscs and crustacean",AVIAN_TYPE:"Avian such as chicken, turkey and duck",BOVINE_TYPE:"Bovine such as cattle, bison type",CANINE_TYPE:"Canine type",CAPRINE_TYPE:"Caprine such as goat type",CERVIDAE_TYPE:"Cervidae such as deer, elk(wapiti) and moose type",EQUINE_TYPE:"Equine such as horse type",FELINE_TYPE:"Feline such as cat type",OVINE_TYPE:"Ovine type",PORCINE_TYPE:"Porcine such as pig type",RODENT_TYPE:"Rodents such as mouse, hamster, rat and rabbit type",OTHERANIMAL_TYPE:"Other animal type",CONTROLLEDPOP:"Controlled Population",BIOTECHDERIVED:"Biotechnology Derived Animal",CELLLINE:"Cell line",IS_AGE_KNOWN:"Is age of animals known?",AGEANIMALS:"Age of animals in months",COUNTRYORIGIN:"Country of origin",SPECIFY_THE:"Specify the other ",HUMAN_ANIMAL_SOURCE:"Human / Animal Sourced?",APPENDIX4:"Animal / Human Sourced",HUMAN_ANIMAL_SOURCED_TAB:"Animal / Human Sourced Tab",MISSING_APPENDIX:"Missing Animal / Human Sourced Ingredients",UNKNOWN_COUNTRY_DETAILS:"Unknown Country Details",ING_DETAILS:"Human / Animal Sourced Record",ANIMAL_TYPE_LBL:"Animal Type Details",ANIMAL_TYPE:"Animal Type",ANIMAL_DETAILS:"Provide the animal type description",ANIMAL_SOURCE:"Animal Source",ANIMAL_TYPE_DETAILS:"Animal Type Details",ANIMAL_SRCS:"Animal Sources",ANIMAL_CTRIES_ORIGIN:"Animal Countries of Origin",ANIMAL_SRC_ADD:"Add Animal Source",TISSUES_FLUIDS_LBL:"Tissues or Fluids Details",SYSTEM_TYPE:"System",SYSTEM_DETAILS:"System Details",SYSTEM_OTHER:"Other Details",TISSUES_FLUIDS_ADD:"Add Tissues or Fluids",TISSUES_FLUIDS_SRCS:"Tissues or Fluids sources",TISSUE_FLUID:"Tissue or Fluid",ANIMAL_SRC:"Animal Source",EXTRA_APPENDIX:"Human / Animal Sourced Records not Referenced in any Formulation",CARDIO_LEGEND:"Select one or more Cardio-Respiratory System selections",NERVOUS_LEGEND:"Select one or more Nervous System selections",OTHER_LEGEND:"Select one or more Other System selections",IMMUNE_LEGEND:"Select one or more Immune System selections",DIGESTIVE_LEGEND:"Select one or more Digestive System selections",REPRODUCTIVE_LEGEND:"Select one or more Reproductive System selections",MUSCLE_LEGEND:"Select one or more Musculo-Skeletal System selections",SKIN_LEGEND:"Select one or more Skin and Glandular System selections",CARDIO_DETAILS:"Other cardio-respiratory system  details",DIGESTIVE_DETAILS:"Other digestive system  details",IMMUNE_DETAILS:"Other immune system  details",MUSCLE_DETAILS:"Other musculo-skeletal system  details",NERVOUS_DETAILS:"Other nervous system  details",OTHERTISS_DETAILS:"Other tissue or fluids details",REPRODUCTIVE_DETAILS:"Other reproductive system details",SKIN_DETAILS:"Other skin and glandular system details",ADD_SOURCED:"Add Animal / Human Sourced",DELETE_SOURCED:"Delete Animal / Human Sourced","AP4CTRL.APPENDIXFORM":"in the appendix tab","CMP-APPENDIX-FOUR-RECORD":"Human / Animal Sourced Record",ADD_TISSUES_FLUIDS:"Add Tissues or Fluids",ADD_ANIMAL_SOURCES:"Add Animal Sources",ADD_COUNTRY_ORIGIN:"Add Animal Countries"}),$translateProvider.translations("fr",{NERVOUS_SYSTEM:"fr_Nervous System",BRAIN:"Cerveau",BRAINSTEM:"Tronc cérébral",CEREBELLUM:"Cervelet",CEROFLUID:"Liquide céphalorachidien (LCR)",DORSALROOT:"Ganglion de la racine dorsale",DURAMATER:"Dure-mère",HYPOTHALAMUS:"Hypothalamus",RETINA:"Moelle épinière",SPINALCORD:"Moelle épinière",TRIGEMINAL:"Ganglion de Gasser",NERVOUS_OTHER:"Veuillez spécifier le système nerveux",DIGESTIVE_SYSTEM:"Système digestif",APPENDIX:"Appendice",BILE:"Bile",DISTALILEUM:"Iléon distal",LARGEINTEST:"Gros intestin",SALIVA:"Salive ou glande salivaire",SMALLINTESTINE:"Intestin grêle, autre que l’iléon distal",STOMACH:"Estomac",DIGESTIVE_OTHER:"Veuillez spécifier le système digestif",REPRODUCT_SYSTEM:"Systèmes reproductif et urinaire",MILK:"Lait ou Produits laitiers",KIDNEY:"Reins",COLOSTRUM:"Reins",MAMMARY:"Glandes mammaires",OVARIES:"Ovaires",PLACENTA:"Placenta",PLACENTAFLUID:"Fluide du placenta",SEMEN:"Sperme",TESTES:"Testicules",URINE:"Testicules",REPROD_OTHER:"Veuillez spécifier le système reproducteur",CARDIO_SYSTEM:"Système cardio-respiratoire",HEART:"Cœur ou péricarde",LUNG:"Cœur/péricarde",NASALFLUID:"Fluide nasal",TRACHEA:"Trachée",PLACENTALFLUID:"Fluide du placenta",CARDIO_OTHER:"Veuillez spécifier le système cardiorespiratoire",IMMUNE_SYSTEM:"Système immunitaire",LYMPH:"Ganglions lymphatiques",SPLEEN:"Rate",THYMUS:"Thymus",TONSILS:"Amygdales","IMMUNE_OTHER ":"Veuillez spécifier le système immunitaire",SKINGLAND_SYSTEM:"Peau et système glandulaire",ADRENAL:"Glande ou tissu surrénalien",HAIR:"Cheveu, plumes, sabots",LIVER:"Foie",PANCREAS:"Pancréas",PITUARYGLAND:"Hypophyse",SKINHIDES:"Peau ou cuirs",THYROID:"Thyroïde ou parathyroïde",SKIN_OTHER:"Veuillez spécifier la peau ou le système glandulaire",ABDOMEN:"Abdomen",SKULL:"Crâne",BONES:"Os autre que la colonne vertébrale et le crâne",COLLAGEN:"Collagène",TENDONS:"Tendons ou ligaments",VERTEBRALCOLUMN:"Colonne vertébrale",MUSCLE:"Colonne vertébrale",MUSCLEDETAIL:"Veuillez spécifier le système musculosquelettique",OTHERTISSUE_SYSTEM:"Autres tissus ou fluides",ADIPOSE:"Veuillez spécifier les tissus adipeux ou épiploon",ASCITES:"Ascite",ANTLERV:"Velours de cervidé",SERUM:"Sérum",WHOLEBLOOD:"Sang entier",PLASMA:"Plasma",EMBRYONICTISS:"Tissu embryonnaire",FETALTISS:"Tissu fœtal",BONEMARROW:"Moelle osseuse",EYESCORNEA:"Yeux ou cornée",GALL:"Vésicule biliaire",FLUIDS_OTHER:"Veuillez spécifier les autres types de tissus ou de fluides d'origine",NONHUMANPRIMATE_TYPE:"fr_Non-human primate type",AQUATIC_TYPE:"fr_Aquatic species such as fish, molluscs and crustacean",AVIAN_TYPE:"fr_Avian such as chicken, turkey and duck",BOVINE_TYPE:"fr_Bovine such as cattle, bison type",CANINE_TYPE:"fr_Canine type",CAPRINE_TYPE:"fr_Caprine such as goat type",CERVIDAE_TYPE:"fr_Cervidae such as deer, elk(wapiti) and moose type",EQUINE_TYPE:"fr_Equine such as horse type",FELINE_TYPE:"fr_Feline such as cat type",OVINE_TYPE:"fr_Ovine type",PORCINE_TYPE:"fr_Porcine such as pig type",RODENT_TYPE:"fr_Rodents such as mouse, hamster, rat and rabbit type",OTHERANIMAL_TYPE:"fr_Other animal type",CONTROLLEDPOP:"fr_Controlled Population",BIOTECHDERIVED:"fr_Biotechnology Derived Animal",CELLLINE:"fr_Cell line",IS_AGE_KNOWN:"fr_Is age of animals known?",AGEANIMALS:"fr_Age of animals in months",COUNTRYORIGIN:"fr_Country of origin",SPECIFY_THE:"Spécifiez l'autre",MISSING_APPENDIX:"fr_Missing Animal / Human Sourced Ingredients",UNKNOWN_COUNTRY_DETAILS:"fr_Unknown Country Details",ING_DETAILS:"fr_Human / Animal Source Record",APPENDIX4:"fr_Animal / Human Sourced",HUMAN_ANIMAL_SOURCED_TAB:"fr_Animal / Human Sourced Tab",ANIMAL_TYPE_LBL:"fr_Animal Type Details",ANIMAL_TYPE:"fr_Animal Type",ANIMAL_DETAILS:"fr_Provide the animal type description",ANIMAL_SOURCE:"fr_Animal Source",ANIMAL_TYPE_DETAILS:"fr_Animal Type Details",ANIMAL_SRCS:"fr_Animal Sources",ANIMAL_CTRIES_ORIGIN:"fr_Animal Countries of Origin",ANIMAL_SRC_ADD:"fr_Add Animal Source",TISSUES_FLUIDS_LBL:"fr_Tissues or Fluids Details",SYSTEM_TYPE:"fr_System",SYSTEM_DETAILS:"fr_System Details",SYSTEM_OTHER:"fr_Other Details",TISSUES_FLUIDS_ADD:"fr_Add Tissues or Fluids",TISSUES_FLUIDS_SRCS:"fr_Tissues or Fluids sources",ANIMAL_SRC:"fr_Animal Source",EXTRA_APPENDIX:"fr_Human / Animal Sourced Records not Referenced in any Formulation",CARDIO_DETAILS:"fr_Other cardio-respiratory system  details",DIGESTIVE_DETAILS:"fr_Other digestive system  details",IMMUNE_DETAILS:"fr_Other immune system  details",MUSCLE_DETAILS:"fr_Other musculo-akeletal system  details",NERVOUS_DETAILS:"fr_Other nervous system  details",OTHERTISS_DETAILS:"fr_Other tissue details",REPRODUCTIVE_DETAILS:"Other reproductive system details",SKIN_DETAILS:"fr_Other skin and glandular system details",ADD_SOURCED:"fr_Add Sourced Ingredient",DELETE_SOURCED:"fr_Delete Sourced Ingredient"}),$translateProvider.translations("en",{ACUTEALCOHOL:"Acute Alcoholism",ACUTEANXIETY:"Acute anxiety state",ACUTERESP:"Acute infectious respiratory syndromes",ACUTEINFLAM:"Acute inflammatory and debilitating arthiritis",ACUTEPSYCHOTIC:"Acute psychotic conditions",ADDICTION:"Addiction (except nicotine addiction)",ATERIOSCLEROSIS:"Ateriosclerosis",APPENDICITIS:"Appendicitis",ASTHMA:"Asthma",CANCER:"Cancer",HEARTCONGEST:"Congestive heart failure",CONVULSIONS:"Convulsions",DEMENTIA:"Dementia",DEPRESSION:"Depresssion",DIABETES:"Diabetes",GANGRENE:"Gangrene",GLAUCOMA:"Glaucoma",BLEEDINGDISORDERS:"Haematologic bleeding disorders",HEPATITIS:"Hepatitis",HYPERTENSION:"Hypertension",NAUSEAPREG:"Nausea and vomiting of pregnancy",OBESITY:"Obesity",RHEUMATICFEVER:"Rheumatic fever",SEPTICEMIA:"Septicemia",SEXDISEASE:"Sexually transmitted disease",STRANGHERNIA:"Strangulated hernia",THROMBOTICDISORDER:"Thrombotic and Embolic Disorder",THYROIDDISEASE:"Thyroid disease",UCLERGASTRO:"Ulcer of gastro-intestinal tract",SCHEDA_CLAIMS:"Please list the schedule A Claims and Indications associated with this product",SCHEDA_DISEASE:"Please check the diseases and disorders that apply to the claims made (select at least one)",ISSCHEDA:"This is a non-prescription drug to which one or more Schedule A claims apply",SCHEDA_DETAILS:"Schedule A Claim Details"}),$translateProvider.translations("fr",{ACUTEANXIETY:"État anxieux aigu",ACUTERESP:"Syndromes respiratoires infectieux aigus",ACUTEINFLAM:"Arthrite aiguë, inflammatoire et débilitante",ACUTEPSYCHOTIC:"Troubles psychotiques aigus",ADDICTION:"Dépendance (sauf la dépendance à la nicotine)",ATERIOSCLEROSIS:"Artériosclérose",APPENDICITIS:"Appendicite",ASTHMA:"Asthme",CANCER:"Cancer",HEARTCONGEST:"Insuffisance cardiaque congestive",CONVULSIONS:"Convulsions",DEMENTIA:"Démence",DEPRESSION:"Dépression",DIABETES:"Diabète",GANGRENE:"Gangrène",GLAUCOMA:"Glaucome",BLEEDINGDISORDERS:"Affections hématologiques hémorragiques",HEPATITIS:"Hépatite",HYPERTENSION:"Hypertension",NAUSEAPREG:"Nausées et vomissements liés à la grossesse",OBESITY:"Obésité",RHEUMATICFEVER:"Fièvre rhumatismale",SEPTICEMIA:"Septicémie",SEXDISEASE:"Maladies transmises sexuellement",STRANGHERNIA:"Hernie étranglée",THROMBOTICDISORDER:"Maladies thrombotiques et emboliques",THYROIDDISEASE:"Maladie thyroïdienne",UCLERGASTRO:"Ulcères des voies gastro-intestinales",SCHEDA_CLAIMS:"Indiquer les allégations et indications de l’annexe A associées avec ce produit",SCHEDA_DISEASE:"fr_Please check the diseases and disorders that apply to the claims made (select at least one)",ISSCHEDA:"Ce médicament en vente libre auquel une ou plusieurs allégations de l’annexe A s’appliquent",SCHEDA_DETAILS:"fr_Schedule A Claim Details"}),$translateProvider.translations("en",{ING_NAME:"Ingredient Name",N_ING_NAME:"Ingredient Name",ING_ROLE:"Ingredient Role",CAS_NUM:"Chemical Abstract Services",CAS_FULL:"Chemical Abstract Services Number",STANDARD:"Standard",STRENGTH:"Strength",OPERATOR:"Operator",VALUE:"Value",EQUALS:"Equals",NOT_GREAT_THAN:"Not More Than",NOT_LESS_THAN:"Not Less Than",RANGE_LOWER_LIMIT:"Lower Limit",RANGE_UPPER_LIMIT:"Upper Limit",STRENGTH_OPERATOR:"Strength - Operator",STRENGTH_VALUE:"Strength - Value",STRENGTH_RANGE_LOWER_LIMIT:"Strength - Value (lower limit)",STRENGTH_DATA2:"Strength - Value (upper limit)",UNITS:"Units",UNIT:"Unit",UNIT_PRESENTATION:"Unit of Presentation",UNIT_MEASURE:"Unit of Measure",OTHER_UNIT_PRESENTATION:"Unit of Presentation Other Details",OTHER_UNIT_MEASURE:"Unit of Measure Other Details",PER_STRENGTH:"Per",PER_VALUE:"Per - Value",ISBASE:"Calculated as Base?",IS_NANO_MATERIAL:"Is this a nanomaterial?",NANO_MATERIAL:"Nanomaterial",NANO_MATERIAL_OTHER:"Indicate the type of nanomaterial",ANIMAL_HUMAN_SOURCED:"Animal or Human Sourced?",INGREDIENT_LIST:"Ingredient List",ROLE:"Role",INGREDIENT:"Ingredient",INGREDIENTS:"Ingredients",MED:"Medicinal Ingredient",NONMED:"Non-Medicinal Ingredient",VARIANT_NAME:"Variant Name",PURPOSE:"Purpose",CONTAINER_TYPE:"Container Type",PACKAGE_SIZE:"Package Size",MATERIAL_NAME:"Material Name",PRESENT_IN_FINAL:"Present in final Container",INGRED_DETAILS:"Ingredient Details",MEDICINAL_INGRED_DETAILS:"Medicinal (Active) Ingredient Details",NONMEDICINAL_INGRED_DETAILS:"Non-Medicinal Ingredient Details",CONTAINER_TYPE_DETAILS:"Container Type Details",MATERIAL_DETAILS:"Animal and / or Human Sourced Materials Details",CALCULATED_AS_BASE:"Calculated as Base?",SHELF_LIFE_NUMBERS:"Number of Units",MIN_TEMP:"Minimum, Celsius",MAX_TEMP:"Maximum, Celsius",TEMP_RANGE:"Temperature Range",SHELF_LIFE:"Shelf Life",IN_FINAL_CONTAINER:"Present in Final Container?",OTHER_ROA_DETAILS:"Other Route of Administration Details",ROA_LBL:"Route of Administration",ROA_ABREV:"ROA",FORMULATION:"Formulation",FORMULATIONS:"Formulations",FORMULATION_DETAILS:"Formulation Record",FORMULATION_NAME:"Formulation Name",FORM_ID:"ID",ANIMAL_CTRY_ORIGIN:"Country of Origin of the Animals",ADD_ROA:"Add Route of Administration",MEDICINAL_INGRED:"A. Medicinal (Active) Ingredients",NONMEDICINAL_INGRED:"B. Non-Medicinal Ingredients",IS_ANIMAL_HUMAN_MATERIAL:"Was Animal and/or Human Sourced Material used at any stage in the manufacturing of the drug?",CONTAINER_TYPES:"Container Types, Package Size and Shelf Life",ANIMAL_HUMAN_HDING:"Animal and / or Human Sourced Materials used at any stage in the manufacture of the drug",ROA_TITLE:"Routes of Administration",COUNTRIES_MANUFACT:"Countries of manufacture for this product",IN_LIST:"In list",UNITS_SRCH:"Select or Search Units",SOURCED_INFO:"Please provide additional details of this ingredient / material on the Animal / Human Source tab.",DELETE_FORMULATION:"Delete Formulation",COPY_FORMULATION:"Copy formulation",ADD_FORMULATION:"Add formulation",SELECT_DOSAGE:"Select a dosage form",SELECT_ROA:"Choose a Route of Administration",ADD_INGREDIENT:"Add Ingredient",ADD_CONTAINER:"Add Container Type",ADD_ROUTES_ADMINISTRATION:"Add Routes of Administration",ADD_COUNTRY_MANUFACTURE:"Add Countries of manufacture",ADD_ANIMAL_HUMAN_MATERIAL:"Add Animal and / or Human Sourced Materials",ADD_MATERIAL:"Add Material",AH_SOURCED_INSTRUCT:"Animal / Human Sourced Instructions",INGREDIENT_NAME_INSTRUCT:"Ingredient Name Instructions",FORM_REC_INSTRUCT:"Formulation Record Instructions",MATERIALS_INSTRUCT:"Sourced Materials Instructions",COUNTRIES_MANUFACT_INSTRUCT:"Countries of manufacture Instructions",CONTAINER_INSTRUCT:"Container Type Instructions",PACKAGE_SIZE_INSTRUCT:"Package Size Instructions",SHELF_LIFE_INSTRUCT:"Shelf Life Instructions",STANDARD_INSTRUCT:"Standard Instructions",IS_NANO_INSTRUCT:"Is Nanomaterial Instructions",VARIANT_INSTRUCT:"Variant Name Instructions",PURPOSE_INSTRUCT:"Purpose Instructions",IMPORTER_INSTRUCT:"Importer Instructions","CMP-FORMULATION-RECORD":"in formulation record","INGRECCTRL.ACTIVEINGFORM":"in the active ingredient details","NINGRECCTRL.NONMEDINGFORM":"in the non-medicinal ingredient details","CTRCTRL.CONTAINERTYPEFORM":"in the container type details","FORMULCTRL.FORMULATIONSFORM":"in the formulations tab",INGREDIENT_INSTRUCT:"Ingredient Instructions"}),$translateProvider.translations("fr",{ING_NAME:"Nom de l’ingrédient",N_ING_NAME:"Nom de l’ingrédient",ING_ROLE:"fr_Ingredient Role",CAS_NUM:"CAS",CAS_FULL:"Numéro Chemical Abstracts Service",STANDARD:"Norme",STRENGTH:"Concentration",OPERATOR:"fr_Operator",VALUE:"fr_Value",EQUALS:"fr_Equals",NOT_GREAT_THAN:"fr_Not More Than",NOT_LESS_THAN:"fr_Not Less Than",RANGE_LOWER_LIMIT:"fr_Lower Limit",RANGE_UPPER_LIMIT:"fr_Upper Limit",STRENGTH_OPERATOR:"fr_Strength - Operator",STRENGTH_VALUE:"fr_Strength - Value",STRENGTH_RANGE_LOWER_LIMIT:"fr_Strength - Value (lower limit)",STRENGTH_DATA2:"fr_Strength - Value (upper limit)",UNITS:"Unités",UNIT:"fr_Unit",UNIT_PRESENTATION:"fr_Unit of Presentation",UNIT_MEASURE:"fr_Unit of Measure",OTHER_UNIT_PRESENTATION:"fr_Unit of Presentation Other Details",OTHER_UNIT_MEASURE:"fr_Unit of Measure Other Details",PER_STRENGTH:"Par",PER_VALUE:"fr_Per - Value",ISBASE:"Calculé sous forme de base?",IS_NANO_MATERIAL:"fr_Is this a nanomaterial?",NANO_MATERIAL:"Nanomatériau?",NANO_MATERIAL_OTHER:"Indiquer le type de nanomatériau",ANIMAL_HUMAN_SOURCED:"fr_Animal or Human Sourced?",INGREDIENT_LIST:"fr_Ingredient List",ROLE:"fr_Role",INGREDIENT:"fr_Ingredient",INGREDIENTS:"Ingredients",MED:"fr_Medicinal Ingredient",NONMED:" fr_NonMedicinal Ingredient",VARIANT_NAME:"fr_Variant Name",PURPOSE_INSTRUCT:"Purpose Instructions",PURPOSE:"fr_Purpose",CONTAINER_TYPE:"fr_Container Type",PACKAGE_SIZE:"fr_Package Size",MATERIAL_NAME:"fr_Material Name",PRESENT_IN_FINAL:"fr_Present in final Container",INGRED_DETAILS:"fr_Ingredient Details",MEDICINAL_INGRED_DETAILS:"fr_Medicinal (Active) Ingredient Details",NONMEDICINAL_INGRED_DETAILS:"Non-Medicinal Ingredient Details",CONTAINER_TYPE_DETAILS:"Container Type Details",MATERIAL_DETAILS:"Animal and / or Human Sourced Materials Details",CALCULATED_AS_BASE:"fr_Calculated as Base?",SHELF_LIFE_NUMBERS:"fr_Number of Units",MIN_TEMP:"fr_Minimum, Celsius",MAX_TEMP:"fr_Maximum, Celsius",TEMP_RANGE:"fr_Temperature Range",SHELF_LIFE:"fr_Shelf Life",IN_FINAL_CONTAINER:"fr_Present in Final Container?",OTHER_ROA_DETAILS:"fr_Other Route of Administration Details",ROA_LBL:"fr_Route of Administration",ROA_ABREV:"ROA",FORMULATION:"fr_Formulation",FORMULATIONS:"Formulations",APPENDIX4:"Annexe 4",FORMULATION_DETAILS:"fr_Formulation Record",FORMULATION_NAME:"fr_Formulation Name",FORM_ID:"ID",ANIMAL_CTRY_ORIGIN:"fr_Country of Origin of the Animals",ADD_ROA:"fr_Add Route of Administration",MEDICINAL_INGRED:"A. fr_Medicinal (Active) Ingredients",NONMEDICINAL_INGRED:"B. fr_Non-Medicinal Ingredients",IS_ANIMAL_HUMAN_MATERIAL:"D. fr_Was Animal and/or Human Sourced Material used at any stage in the manufacturing of the drug?",CONTAINER_TYPES:"E. fr_Container Types, Package Size and Shelf Life",
ANIMAL_HUMAN_HDING:"fr_Animal and / or Human Sourced Materials used at any stage in the manufacture of the drug",ROA_TITLE:"F. fr_Routes of Administration",COUNTRIES_MANUFACT:"G. fr_Countries of manufacture for this product",NOT_IN_LIST:"fr_Not in list",UNITS_SRCH:"fr_Select or Search Units",SOURCED_INFO:"fr_Please provide additional details of this ingredient/material on the Animal/Human Source tab.",DELETE_FORMULATION:"fr_Delete Formulation",COPY_FORMULATION:"fr_Copy formulation",ADD_FORMULATION:"fr_Add formulation",SELECT_DOSAGE:"fr_Select a dosage form",SELECT_ROA:"fr_Choose a Route of Administration",ADD_CONTAINER:"fr_Add Container Type",ADD_INGREDIENT:"fr_Add Ingredient",AH_SOURCED_INSTRUCT:"fr_Animal / Human Sourced Instructions",INGREDIENT_NAME_INSTRUCT:"fr_Ingredient Name Instructions",FORM_REC_INSTRUCT:"fr_Formulation Record Instructions",MATERIALS_INSTRUCT:"fr_Sourced Materials Instructions",COUNTRIES_MANUFACT_INSTRUCT:"fr_Countries of manufacture Instructions",CONTAINER_INSTRUCT:"fr_Container Type Instructions",PACKAGE_SIZE_INSTRUCT:"fr_Package Size Instructions",SHELF_LIFE_INSTRUCT:"fr_Shelf Life Instructions",STANDARD_INSTRUCT:"fr_Standard Instructions",IS_NANO_INSTRUCT:"fr_Is Nanomaterial Instructions",VARIANT_INSTRUCT:"fr_Variant Name Instructions",IMPORTER_INSTRUCT:"fr_Importer Instructions","CMP-FORMULATION-RECORD":"fr_ in formulation record","INGRECCTRL.ACTIVEINGFORM":"fr_in the active ingredient details","NINGRECCTRL.NONMEDINGFORM":"fr_in the nom-medicinal ingredient details","FORMULCTRL.FORMULATIONSFORM":"in the formulations tab"}),$translateProvider.translations("en",{Y:"Yes",N:"No",ADD:"Add",DELETEROW:"Delete Row",SELECTEDROW:"Selected Row",REQUIRED:"(required)",ROLES_SELECT:"Select one or more roles for this record",NEW:"New",AMEND:"Amend",APPROVED:"Approved",FINAL:"Final",CLICK_TOGGLE:"Click to toggle the collapse or expand details for this address.",AMEND_RECORD:"Amend Record",en:"English",fr:"French",ADD_RECORD:"Add Record",SAVE_RECORD:"Save Record",DELETE_RECORD:"Delete Record",COPY_RECORD:"Copy Record",DISCARD_CHANGES:"Discard Changes",REPSECONDARY:"Alternate Regulatory Enrolment Process contact",REPPRIMARY:"Primary Regulatory Enrolment Process contact",MAILING:"Regulatory Mailing / Annual Contact Address",BILLING:"Billing Address",MANUFACTURER:"Manufacturer / Sponsor Mailing Address",IMPORTER_ADDRESS:"Canadian Importer Mailing Address",CONTACT_MAILING:"Regulatory Mailing / Annual Contact",CONTACT_BILLING:"Billing Contact",CONTACT_MANUFACTURER:"Manufacturer / Sponsor Contact",CONTACT_IMPORTER:"Importer Contact",APPROVE_FINAL:"Generate Final XML",SAVE_DRAFT:"Save Draft XML",PRIMARY:"Primary",SECONDARY:"Alternate",TOGGLE_EXPAND:"Click to toggle collapse or expand details of row",CONTROL_NUMBER:"Control Number",REP_CONTACT_INFO:"Regulatory Enrolment Process Contact Information",SAVE_CONTACT:"Save Contact",DELETE_CONTACT:"Delete Contact",COMPANY_ID:"Company ID",DOSSIER_ID:"Dossier ID",IMPORTER:"Importer",IMPORTERID:"Importer Company ID",IMPORTER_COMPANY_NAME:"Importer Company Name",IMPORTER_COMPANY_ID_IF:"Importer Company ID (if applicable)",IMPORTER_COMPANY_NAME_IF:"Importer Company Name (if applicable)",ERRORS:"Errors",UNKNOWN:"Unknown",BIOLOGIC:"Biologic",PHARMACEUTICAL:"Pharmaceutical",VETERINARY:"Veterinary",CLINICAL_TRIAL:"Clinical Trial",HELP_FILE_LOAD:"file load instructions",EXPAND:"Expand",HELP_ACTIVITY_MAIN:"Activity Instructions",HELP_ACTIVITY_REP:"Regulatory Enrolment Process Contact Instructions",CALENDAR:"Pick date from calendar",HIDE_CALENDAR:"Hide Calendar (escape key)",OTHER:"Other",HELP_REP_CONTACT:"Regulatory Enrolment Process Contact Instructions",OTHER_UNITS:"Units other details",COMPANYNAME:"Company Name (Full legal name - no abbreviations)",ACOMPANYNAME:"Company Name (Full legal name - no abbreviations)",COPY:"Copy",DELETE:"Delete",SAVE_WORKING:"Save Working Copy",COMPANY_NOABBREV:"Company Name (Full legal Name - no abbreviations)",CLOSE_ALERT:"Collapse instructions",COLLAPSE:"Collapse",CONTROL_NUM:"Control Number",OTHER_DETAILS:"Other - specify",PROD_NAME:"Product Name",PROD_NAME_HELP:"Product Name Instructions",PROP_NAME_HELP:"Proper, Common or Non-proprietary Name Instructions",RELATED_INFO_HELP:"Related Information Instructions",DOSSIER_TYPE:"Dossier Type",LEAST_5_CHAR:" (5 characters)",LEAST_6_CHAR:" (6 characters)",LEAST_7_CHAR:" (7 characters)",INCLUDE_AREA_CODE:" (including area code)",LEAST_6_DIGIT:" (6 digits only)",INSTRUCTION:"Instruction",RETURN_INSTRUCTION:"Return to instruction",PRIVACY_NOTICE_STATEMENT:"Privacy Notice Statement",PRIVACY_STATEMENT:"By submitting your personal information, you are consenting to its collection, use and disclosure in accordance with the Privacy Notice Statement.",FOOTNOTE_INSTRUCTION:"Instructions for completing sections on form",SECTION_IS_NOT_VISIBLE:"[ This section may not be visible. ]",FAX_NOT_AVAILABLE:" (Use 0000000000 if not available)",NOT_APPLICABLE:"Not applicable"}),$translateProvider.translations("fr",{Y:"Oui",N:"Non",ADD:"fr_Add",DELETEROW:"fr_Delete Row",SELECTEDROW:"Selected Row",REQUIRED:"(requis)",ROLES_SELECT:"fr_Select one or more roles for this record",NEW:"fr_New",AMEND:"fr_Amend",APPROVED:"fr_Approved",CLICK_TOGGLE:"fr_Click to toggle the collapse or expand details for this address.",AMEND_RECORD:"fr_Amend Record",en:"Anglais",fr:"Français",DISCARD_CHANGES:"fr_Discard Changes",REPSECONDARY:"fr_Alternate Regulatory Enrolment Process contact",REPPRIMARY:"fr_Primary Regulatory Enrolment Process contact",MAILING:"Contact pour le courrier réglementaire",BILLING:"fr_Billing",MANUFACTURER:"fr_Manufacturer",IMPORTER_ADDRESS:"fr_Canadian Importer Mailing Address",CONTACT_MAILING:"fr_Regulatory Mailing / Annual Contact",CONTACT_BILLING:"fr_Billing Contact",CONTACT_MANUFACTURER:"fr_Manufacturer / Sponsor Contact",CONTACT_IMPORTER:"fr_Importer Contact",APPROVE_FINAL:"fr_Generate XML final",PRIMARY:"fr_Primary",SECONDARY:"fr_Alternate",TOGGLE_EXPAND:"fr_Click to toggle collapse or expand details of row",SAVE_DRAFT:"fr_Save Draft XML",CONTROL_NUMBER:"fr_Control Number",REP_CONTACT_INFO:"fr_Main Contact Information",SAVE_CONTACT:"fr_Save Contact",DELETE_CONTACT:"fr_Delete Contact",COMPANY_ID:"fr_Company Id",DOSSIER_ID:"fr_Dossier Id",IMPORTER:"fr_Importer",IMPORTERID:"fr_Importer Company ID",IMPORTER_COMPANY_NAME:"fr_Importer Company Name",IMPORTER_COMPANY_ID_IF:"fr_Importer Company ID (if applicable)",IMPORTER_COMPANY_NAME_IF:"fr_Importer Company Name (if applicable)",ERRORS:"Erreurs",UNKNOWN:"Inconnu",BIOLOGIC:"fr_Biologic",PHARMACEUTICAL:"fr_Pharmaceutical",HELP_FILE_LOAD:"fr_File Load Instructions",EXPAND:"fr_Expand",HELP_ACTIVITY_MAIN:"fr_Activity Instructions",HELP_ACTIVITY_REP:"Regulatory Enrolment Process Contact Instructions",CALENDAR:"fr_Pick date from calendar",HIDE_CALENDAR:"fr_Hide Calendar (escape key)",OTHER:"Autre",HELP_REP_CONTACT:"Regulatory Enrolment Process Contact Instructions",OTHER_UNITS:"fr_Units other details",COMPANYNAME:"fr_Company Name (Full legal name - no abbreviations)",COPY:"fr_Copy",DELETE:"fr_Delete",SAVE_WORKING:"Enregistrer une copie de travail",COMPANY_NOABBREV:"fr_Company Name (Full legal Name - no abbreviations)",CLOSE_ALERT:"Minimiser les instructions",COLLAPSE:"Minimiser les",SAVE_RECORD:"fr_Save Record",DELETE_RECORD:"fr_Delete Record",CONTROL_NUM:"fr_Control Number",OTHER_DETAILS:"fr_Other Details - Specify",PROD_NAME:"fr_Product Name",PROD_NAME_HELP:"fr_Product Name Instructions",PROP_NAME_HELP:"fr_Proper, Common or Non-proprietary Name Instructions",RELATED_INFO_HELP:"fr_Related Information Instructions",DOSSIER_TYPE:"fr_Dossier Type",LEAST_5_CHAR:" (at least 5 characters)",LEAST_7_CHAR:" (at least 7 characters)",INCLUDE_AREA_CODE:" (including area code)",LEAST_6_DIGIT:" (6 digits only)",INSTRUCTION:"Instruction",RETURN_INSTRUCTION:"Return to instruction",PRIVACY_STATEMENT_HELP:"View Privacy Notice Statement",PRIVACY_STATEMENT:"By submitting your personal information, you are consenting to its collection, use and disclosure in accordance with the Privacy Notice Statement."}),$translateProvider.translations("en",{SELECT_LOAD:"Select a file to load",MSG_SUCCESS_LOAD:"The file was loaded successfully",MSG_ERR_JSONPARSE:"Error: there was an error parsing the working file.",MSG_ERR_XMLPARSE:"Error: there was an error parsing the draft XML file.",MSG_ERR_FILE_LOAD:"Error: there was a problem loading the file.",MSG_ERR_FILE_TYPE:"Error: An invalid file type was selected.",MSG_ERR_FORM_TYPE:"Error: the wrong form type was selected for this form.",MSG_ERR_CHECKSUM_FAIL:"Error: the checksum in the file does not match the calculated checksum"}),$translateProvider.translations("fr",{SELECT_LOAD:"Sélectionnez un fichier à charger",MSG_SUCCESS_LOAD:"Le fichier a été chargé avec succès",MSG_ERR_JSONPARSE:"Erreur: il y a eu une erreur en analysant le fichier de travail.",MSG_ERR_XMLPARSE:"Erreur: il y avait une erreur d'analyse du projet de fichier XML,",MSG_ERR_FILE_LOAD:"Erreur: il y a eu un problème lors du chargement du fichier.",MSG_ERR_FILE_TYPE:"Erreur: un type de fichier invalide a été sélectionné.",MSG_ERR_FORM_TYPE:"Erreur: le type de formulaire incorrect a été sélectionné pour ce formulaire.",MSG_ERR_CHECKSUM_FAIL:"Erreur: La somme de contrôle dans le fichier ne correspond pas à la somme de contrôle calculée."}),$translateProvider.translations("en",{APPL_STATUS:"Enrolment Status",ENROL_VERSION:"Enrolment Version",DATE_SAVED:"Date Last Saved",AMEND_ENROL:"Amend Enrolment",AMEND_MSG:"Edit records to be amended below.",REASON_AMEND:"Reason for amendment"}),$translateProvider.translations("fr",{APPL_STATUS:"fr_Enrolment Status",ENROL_VERSION:"Version d’inscription",DATE_SAVED:"Date du dernier enregistrement",AMEND_ENROL:"fr_Amend Enrolment",AMEND_MSG:"fr_Edit records to be amended below.",REASON_AMEND:"fr_Reason for amendment"}),$translateProvider.translations("en",{MSG_ERR_MAND:"This field is required",MSG_ERR_EMAIL_FORMAT:"Please enter a valid email address.",MSG_ERR_ROLE:"This field is required",MSG_ERR_DISITYPE:"Please select at least one disinfectant type",MSG_ERR_ADDRESS:"Please select at least one address",MSG_ERR_CONTACT_NUM:"All the roles have to be used for the contacts",MSG_ERR_PHONE_FORMAT:"The format is not valid",MSG_ERR_FAX_FORMAT:"The format is not valid",MSG_ERR_ALLROLE:"The roles of manufacturer, mailing, billing, and primary REP contact  have not all been selected among the list of contacts",MSG_ERR_ADDRESSSROLE:"The roles of manufacturer, mailing, and billing have not all been selected among the list of addresses",MSG_ERR_POSTAL:"Please specify a valid postal code.",MSG_ERR_ZIP:"Please specify a valid zip code.",MSG_ERR_DATE_FORMAT:"Please enter a valid date.",MAILING_SEL:"Mailing Role already Selected",MANUFACT_SEL:"Manufacturer Role already Selected",MAIL_SEL:"Mailing Role already Selected",BILLING_SEL:"Billing Role already Selected",IMPORTER_SEL:"Importer Role already Selected",REPPRIM_SEL:"REP Primary Role already Selected",REPALT_SEL:"REP Alternate Role already Selected",MSG_LENGTH_MIN5:"Less than minimum length",MSG_LENGTH_6:"Less than minimum length.",MSG_LENGTH_6NUM:"Less than minimum length.",MSG_LENGTH_8NUM:"Less than minimum length.",MSG_LENGTH_7:"Less than minimum length.",MSG_LENGTH_7NUM:"Less than minimum length.",ONE_REP:"At least one contact is required.",MSG_ERR_NOTIF_SEL:"Please select at least one notifiable change.",MSG_ERR_MIN_POS:"Must be a positive number",MSG_ERR_MAX:"Exceeds the maximum",MSG_FORMAT_CHAR_6DIGITS:"ID should be a letter plus 6 digits."}),$translateProvider.translations("fr",{MSG_ERR_MAND:"Ce champ est obligatoire.",MSG_ERR_ROLE:"fr_Please select at least one role",MSG_ERR_DISITYPE:"fr_Please select at least one disinfectant type",MSG_ERR_ADDRESS:"fr_Please select at least one address",MSG_ERR_EMAIL_FORMAT:"Veuillez fournir une adresse électronique valide.",MSG_ERR_CONTACT_NUM:"fr_All the roles have to be used for the company contacts",MSG_ERR_PHONE_FORMAT:"Veuillez fournir un numéro de téléphone valide.",MSG_ERR_FAX_FORMAT:"Veuillez fournir un numéro de télécopieur valide.",MSG_ERR_ALLROLE:"fr_Across the contact records, the roles of manufacturer, mailing, billing, and REP primary contact must be selected",MSG_ERR_ADDRESSSROLE:"fr_The roles of manufacturer, mailing, and billing have not all been selected among the list of addresses",MSG_ERR_POSTAL:"Veuillez fournir un code postal valide.",MSG_ERR_ZIP:"Veuillez fournir un code postal valide.",MSG_ERR_DATE_FORMAT:"Veuillez fournir une une date valide.",MANUFACT_SEL:"fr_Manufacturer Role already Selected",MAIL_SEL:"fr_Mailing Role already Selected",BILLING_SEL:"fr_Billing Role already Selected",IMPORTER_SEL:"fr_Importer Role already Selected",REPPRIM_SEL:"fr_REP Primary Role already Selected",REPALT_SEL:"fr_REP Alternate Role already Selected",MSG_LENGTH_MIN5:"Veuillez fournir au moins 5 chiffres.",MSG_LENGTH_6:"Veuillez fournir au moins 6 caractères.",MSG_LENGTH_6NUM:"Veuillez fournir 6 chiffres.",MSG_LENGTH_8NUM:"Veuillez fournir 8 chiffres.",MSG_LENGTH_7:"Veuillez fournir 7 caractères.",MSG_LENGTH_7NUM:"Veuillez fournir  7 chiffres.",ONE_REP:"Au moins un contact est requis",MSG_ERR_NOTIF_SEL:"Sélectionnez au moins un changement de déclaration",MSG_ERR_MIN_POS:"Doit être un nombre positif",MSG_ERR_MAX:"Dépasse le maximum.",MSG_FORMAT_CHAR_6DIGITS:"fr_ID should be a letter plus 6 digits."}),$translateProvider.translations("en",{FIRSTNAME:"First Name",LASTNAME:"Last Name",INITIALS:"Initials",LANGCORRESPOND:"Language of Correspondance",JOBTITLE:"Job Title",SALUTATION:"Salutation",SALUT_MR:"Mr.",SALUT_MS:"Ms.",SALUT_DR:"Dr.",SALUT_MRS:"Mrs.",ROLE_PRIMARY:"Primary",ROLE_SECONDARY:"Alternate",CONTACTEMAIL:"Email",FAX_NUMBER:"Fax Number",PHONE_EXT:"Phone Extension",ROLES:"Roles",PHONENUMBER:"Phone Number",CONTACT_INFO:"Company Representative Information",AMEND:"Amend",REP_CONTACT:"Regulatory Enrolment Process Contact",ONE_ROLE:"Role",CONTACT_DETAILS:"Company Representative Details",ADD_CONTACT:"Add REP Contact",CONTACT_ROLE_LEGEND:"Select one or more roles for this company representative",CONTACT_ROLE_INSTRUCT:"Company Representative Role Instructions",ADD_REPRES:"Add Company Representative",DELETE_REPRES:"Delete Company Rep.",SAVE_REPRES:"Save Company Rep."}),$translateProvider.translations("fr",{FIRSTNAME:"Prénom",LASTNAME:"Nom",INITIALS:"Initiales",LANGCORRESPOND:"Langue de correspondance",JOBTITLE:"Titre de poste",SALUTATION:"Titre de civilité",SALUT_MR:"M.",SALUT_MS:"Mme",SALUT_DR:"Dr.",SALUT_MRS:"Mlle",ROLE_PRIMARY:"Primaire",ROLE_SECONDARY:"Alterner",CONTACTEMAIL:"Adresse électronique",FAX_NUMBER:"Numéro de télécopieur",PHONE_EXT:"Poste",ADDR_ROLES:"fr_Roles",PHONENUMBER:"Numéro de téléphone",CONTACT_INFO:"fr_Company Representative Information",AMEND:"fr_Amend",REP_CONTACT:"fr_REP Contact",ONE_ROLE:"fr_Role",CONTACT_DETAILS:"fr_Company Representative Details",ADD_CONTACT:"fr_Add REP Contact",CONTACT_ROLE_LEGEND:"fr_Select one or more roles for this company representative",CONTACT_ROLE_INSTRUCT:"fr_Company Representative Role Instructions",ADD_REPRES:"fr_Add Company Representative",DELETE_REPRES:"fr_Delete Company Rep.",SAVE_REPRES:"fr_Save Company Rep."}),$translateProvider.translations("en",{FOR_THE:"The ",THERE_ARE_ERRORS:"There are errors",FORM_NOT_SAVED:"The form could not be saved because ",NOT_SAVED:" could not be saved because ",ERRORS_FOUND:" errors were found.",ERROR_FOUND:"error was found.",TYPE_REQUIRED:"This field is required.",TYPE_EMAIL:"Please enter a valid email address.",TYPE_DUPLICATEROLE:"This role has already been selected.",TYPE_MINLENGTH:"Less than minimum length",POSTAL_FORMAT:"Please enter a valid format",TYPE_MIN:"Must be greater than the minimum",TYPE_DATE:"Please enter a valid date",TYPE_NUMBER:"Please enter a valid number",TYPE_PATTERN:"The format is not valid"}),$translateProvider.translations("fr",{FOR_THE:"Pour le ",THERE_ARE_ERRORS:"Il y a des erreurs",ERRORS_FOUND:"erreurs ont été trouvées.",ERROR_FOUND:"erreur a été trouvée.",TYPE_REQUIRED:"Ce champ est obligatoire.",TYPE_EMAIL:"Veuillez fournir une adresse électronique valide.",TYPE_DUPLICATEROLE:"Ce rôle a déjà été sélectionné.",TYPE_MINLENGTH:"Moins de longueur minimale.",POSTAL_FORMAT:"Entrez un format valide.",TYPE_MIN:"Doit être supérieur au minimum.",TYPE_DATE:"Veuillez fournir une une date valide.",TYPE_NUMBER:"Veuillez fournir un numéro valide.",TYPE_PATTERN:"fr_The format is not valid"})}]),function(){"use strict";angular.module("numberFormat",[])}(),function(){"use strict";function digitsCtrl(){function link(scope,element,attrs,modelCtrl){modelCtrl.$parsers.push(function(inputValue){if(void 0==inputValue)return"";var isNumber=!1,max=-1,ignore=!1,tempVal=""+inputValue;attrs.type&&"number"===attrs.type&&(isNumber=!0),attrs.onlyMax&&(max=parseInt(attrs.onlyMax));var regexIntNeg=/[^0-9-]/g,integerReg=/[^0-9]/g,regexValue=integerReg;if("intNeg"==attrs.onlyDigits?regexValue=regexIntNeg:"false"===attrs.onlyDigits?ignore=!0:regexValue=integerReg,ignore)return inputValue;var transformedInput=tempVal.replace(regexValue,"");return max>0&&(transformedInput=transformedInput.substring(0,max)),transformedInput!==tempVal&&(isNumber&&transformedInput&&(transformedInput=parseFloat(transformedInput)),modelCtrl.$setViewValue(transformedInput),modelCtrl.$render()),transformedInput})}var directive={link:link,restrict:"A",require:"?ngModel"};return directive}angular.module("numberFormat").directive("onlyDigits",digitsCtrl)}(),function(){"use strict";angular.module("hpfbConstants",[]),angular.module("hpfbConstants").constant("SOFTWARE_VERSION","1.3.0").constant("CANADA","CAN").constant("OTHER","OTHER").constant("YES","Y").constant("NO","N").constant("USA","USA").constant("UNKNOWN","UNKNOWN").constant("NEW","New").constant("EXISTING","Existing").constant("ENGLISH","en").constant("FRENCH","fr").constant("NEW_TYPE","NEW").constant("APPROVED_TYPE","FINAL").constant("DEPRECATED_APPROVED_TYPE","APPROVED").constant("AMEND_TYPE","AMEND").constant("INTERNAL_TYPE","INT").constant("EXTERNAL_TYPE","EXT").constant("PHARMA_TYPE","PHARMA").constant("RELATIVE_FOLDER_DATA","../data/").constant("CSP_XSL","CSP_Enrolment.xsl").constant("HCSC","hcsc").constant("XML","xml").constant("ADVANCE_FEE_PAYMENT_EN","https://www.canada.ca/content/dam/hc-sc/migration/hc-sc/dhp-mps/alt_formats/pdf/prodpharma/applic-demande/form/adv-pa-av2-eng.pdf").constant("ADVANCE_FEE_PAYMENT_FR","https://www.canada.ca/content/dam/hc-sc/migration/hc-sc/dhp-mps/alt_formats/pdf/prodpharma/applic-demande/form/adv-pa-av2-fra.pdf")}(),function(){"use strict";angular.module("repContactService",[])}(),function(){"use strict";function RepContactService(){function RepContactService(){}return RepContactService.prototype={_default:{}},RepContactService.prototype.getPrimaryRole=function(){return"PRIMARY"},RepContactService.prototype.getSecondaryRole=function(){return"SECONDARY"},RepContactService.prototype.createRepContact=function(repContactList){if(repContactList){var PRIMARY=this.getPrimaryRole(),SECONDARY=this.getSecondaryRole(),contact=_createDefaultRepContact(),currentContacts=repContactList;if(0==currentContacts.length)contact.repRole=PRIMARY;else{contact.repRole=PRIMARY;for(var i=0;i<currentContacts.length;i++)if(currentContacts[i].repRole==PRIMARY){contact.repRole=SECONDARY;break}}return contact}},RepContactService}function _createDefaultRepContact(){var repcontact=_createContactModel();return repcontact.repRole="",repcontact.amend=!1,repcontact}function _createContactModel(){var contact={};return contact.salutation="",contact.givenName="",contact.initials="",contact.surname="",contact.title="",contact.language="",contact.phone="",contact.phoneExt="",contact.fax="",contact.email="",contact}angular.module("repContactService").factory("RepContactService",RepContactService)}(),function(){"use strict";angular.module("filterLists",["hpfbConstants"])}(),function(){"use strict";function orderByTranslatedCountry($translate,$filter,CANADA,USA){return function(array,objKey){var result=[],translated=[];return angular.forEach(array,function(value){translated.push({key:value,label:$translate.instant(value)})}),result.push(CANADA),result.push(USA),angular.forEach($filter("orderBy")(translated,"label"),function(sortedObject){sortedObject.key!==CANADA&&sortedObject.key!==USA&&result.push(sortedObject.key)}),result}}function orderByTranslatedCountryAndLabel($translate,$filter,CANADA,USA){return function(array){var result=[],translated=[];return angular.forEach(array,function(value){translated.push({key:value,label:$translate.instant(value)})}),result.push({key:CANADA,label:$translate.instant(CANADA)}),result.push({key:USA,label:$translate.instant(USA)}),angular.forEach($filter("orderBy")(translated,"label"),function(sortedObject){sortedObject.key!==CANADA&&sortedObject.key!==USA&&result.push(sortedObject)}),result}}function findCountryObj(){return function(array,targetKey){for(var i=0;i<array.length;i++)if(array[i].key===targetKey)return array[i];return null}}function orderByTranslated($translate,$filter){return function(array){var result=[],translated=[];return angular.forEach(array,function(value){translated.push({key:value,label:$translate.instant(value)})}),angular.forEach($filter("orderBy")(translated,"label"),function(sortedObject){result.push(sortedObject.key)}),result}}function sequenceOrderBy($filter){return function(array){var result=[];return angular.forEach($filter("orderBy")(array,"sequence",!0),function(sortedObject){result.push(sortedObject)}),result}}function orderByTranslatedOtherFirst($translate,$filter,OTHER){return function(array){var result=[],translated=[];return angular.forEach(array,function(value){translated.push({key:value,label:$translate.instant(value)})}),result.push(OTHER),angular.forEach($filter("orderBy")(translated,"label"),function(sortedObject){sortedObject.key!==OTHER&&result.push(sortedObject.key)}),result}}function _orderByLocale(){return function(items,lang){return items.sort(function(a,b){return a[lang].localeCompare(b[lang],lang)}),items}}function _findById($filter){return function(array,searchJson){var initialResult=$filter("filter")(array,searchJson);if(!initialResult)return null;if(1===initialResult.length)return initialResult[0];for(var i=0;i<initialResult.length;i++)if(initialResult[i].id===searchJson.id)return initialResult[i];return null}}angular.module("filterLists").filter("orderByTranslatedCountry",orderByTranslatedCountry).filter("orderByTranslated",orderByTranslated).filter("orderByTranslatedOtherFirst",orderByTranslatedOtherFirst).filter("orderByCountryAndLabel",orderByTranslatedCountryAndLabel).filter("orderByLocale",_orderByLocale).filter("findCountryObject",findCountryObj).filter("findListItemById",_findById).filter("sequenceOrderDescending",sequenceOrderBy),orderByTranslatedCountry.$inject=["$translate","$filter","CANADA","USA"],orderByTranslated.$inject=["$translate","$filter"],orderByTranslatedOtherFirst.$inject=["$translate","$filter","OTHER"],_findById.$inject=["$filter"]}(),function(){"use strict";angular.module("dataLists",["hpfbConstants"])}(),function(){"use strict";function getService(UNKNOWN){function _createCountryArray(translateJson){vm.countryList=translateJson}function _getUnknownCountryRec(){return{id:UNKNOWN,en:"Unknown",fr:"Inconnu"}}function getCountryValuesArray(){return vm.countryList}function getProvinceValuesArray(){return["AB","BC","MB","NB","NL","NT","NS","NU","ON","PE","QC","SK","YT"]}function getUSStatesValueArray(){return["AL","AK","AZ","AR","CA","CO","CT","DE","DC","FL","GA","HI","ID","IL","IN","IA","KS","KY","LA","ME","MD","MA","MI","MN","MS","MO","MT","NE","NV","NH","NJ","NM","NY","NC","ND","OH","OK","OR","PA","RI","SC","SD","TN","TX","UT","VT","VA","WA","WV","WI","WY"]}var vm=this;vm.countryList=[];var service={getCountries:getCountryValuesArray,getProvinces:getProvinceValuesArray,getUSStates:getUSStatesValueArray,createCountryList:_createCountryArray,getUnknownCountryRecord:_getUnknownCountryRec};return service}angular.module("dataLists").factory("getCountryAndProvinces",getService),getService.inject=["UNKNOWN"]}(),function(){"use strict";function getSalService($filter,$q,$http,$translate,OTHER,FRENCH,RELATIVE_FOLDER_DATA){function getSalValuesArray(){return["SALUT_DR","SALUT_MR","SALUT_MRS","SALUT_MS"]}function getLanguagesValuesArray(){return["en","fr"]}function _createInternalContacts(){var deferred=$q.defer(),contactsUrl=RELATIVE_FOLDER_DATA+"internalContacts.json";return vm.internalContacts&&0!==vm.internalContacts.length?deferred.resolve(vm.internalContacts):$http.get(contactsUrl).success(function(data,status,headers,config){var newList=_createSortedArray(data,"en"),lang=$translate.proposedLanguage()||$translate.use(),otherRec={id:OTHER,en:"Other"};lang===FRENCH&&(otherRec.en="Autre"),newList.unshift(otherRec),vm.internalContacts=newList,deferred.resolve(newList)}).error(function(data,status,headers,config){deferred.reject(status)}),deferred.promise}function _getInternalContacts(){return _createInternalContacts()}function _getInternalContactsWithoutOther(){var deferred=$q.defer(),contactsUrl=RELATIVE_FOLDER_DATA+"internalContacts.json";return vm.internalContacts&&0!==vm.internalContacts.length?deferred.resolve(vm.internalContacts):$http.get(contactsUrl).success(function(data,status,headers,config){var newList=_createSortedArray(data,"en");vm.internalContacts=newList,deferred.resolve(newList)}).error(function(data,status,headers,config){deferred.reject(status)}),deferred.promise}function _createSortedArray(jsonList,lang){var result=[];return angular.forEach($filter("orderByLocale")(jsonList,lang),function(sortedObject){result.push(sortedObject)}),result}function _getAdminSubType(){return vm.adminSubTypeArray&&0!==vm.adminSubTypeArray.length?vm.adminSubTypeArray:_loadAdminType()}function _loadAdminType(){var deferred=$q.defer(),url=RELATIVE_FOLDER_DATA+"adminSubType.json";return $http.get(url).success(function(data,status,headers,config){var lang=$translate.proposedLanguage()||$translate.use(),newList=_createSortedArray(data,lang);vm.adminSubTypeArray=newList,deferred.resolve(newList)}).error(function(data,status,headers,config){deferred.reject(status)}),deferred.promise}var vm=this;vm.internalContacts=[],vm.adminSubTypeArray=[];var service={getSalutationList:getSalValuesArray,getLanguages:getLanguagesValuesArray,createInternalContacts:_createInternalContacts,getInternalContacts:_getInternalContacts,getInternalContactsWithoutOther:_getInternalContactsWithoutOther,getAdminSubType:_getAdminSubType};return service}angular.module("dataLists").factory("getContactLists",getSalService),getSalService.$inject=["$filter","$q","$http","$translate","OTHER","FRENCH","RELATIVE_FOLDER_DATA"]}(),function(){"use strict";function getRolesService(){function getRoleValuesArray(){return["","ROLE_PRIMARY","ROLE_SECONDARY"]}function _getFormTypes(){return[_biologic,_pharma]}function _getBiologic(){return _biologic}function _getPharmaceutical(){return _pharma}var _biologic="BIOLOGIC",_pharma="PHARMACEUTICAL",service={getContactRoles:getRoleValuesArray,getFormTypes:_getFormTypes,getBiologicType:_getBiologic,getPharmaType:_getPharmaceutical};return service}angular.module("dataLists").factory("getRoleLists",getRolesService)}(),function(){"use strict";angular.module("services",[])}(),function(){"use strict";function getTransactionSeq($http,$q){function yesNoArray(){return["Y","N"]}function _createRaArray(value){vm.raTypeArray=value}function _createFeeArray(value){vm.feeTypeArray=value}function _createMitigationArray(value){vm.mitigationTypeArray=value}function getTransactionDescriptionsArray(){return vm.allActivities}function getActivityArray(){return vm.raTypeArray}function _getfeeTypeArray(){return vm.feeTypeArray}function _getMitigationTypeArray(){return vm.mitigationTypeArray}function getPresubArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE]}function getANDSArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.COMMENTS_NOC,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.INITIAL,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.PRISTINE_PM,vm.allActivities.PRISTINE_PM_2LANG,vm.allActivities.BE_CLARIF_RESPONSE,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.NOC_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.NON_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.CORR_PATENT_MED,vm.allActivities.ALLEGATION_NOTICE,vm.allActivities.FORM_IV,vm.allActivities.FORM_V,vm.allActivities.CONSENT_LTR,vm.allActivities.DATA_PROTECT_CORRESP]}function getDINAArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.INITIAL,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRISTINE_PM,vm.allActivities.PRISTINE_PM_2LANG,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.NON_RESPONSE,vm.allActivities.NOD_RESPONSE]}function getDINBArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.INITIAL,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRISTINE_PM,vm.allActivities.PRISTINE_PM_2LANG,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.NON_RESPONSE,vm.allActivities.NOD_RESPONSE]}function getEUNDSArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.BE_CLARIF_RESPONSE,vm.allActivities.CANCEL_LETTER,vm.allActivities.COMMENTS_NOC,vm.allActivities.COMMENTS_SUMMARY_BASIS,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.INITIAL,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.PRISTINE_PM,vm.allActivities.PRISTINE_PM_2LANG,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.NOC_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.NON_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.CORR_PATENT_MED,vm.allActivities.ALLEGATION_NOTICE,vm.allActivities.FORM_IV,vm.allActivities.FORM_V,vm.allActivities.CONSENT_LTR,vm.allActivities.DATA_PROTECT_CORRESP,vm.allActivities.NONCLIN_CLARIF_RESPONSE];
}function getEUSNDSArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.BE_CLARIF_RESPONSE,vm.allActivities.CANCEL_LETTER,vm.allActivities.COMMENTS_NOC,vm.allActivities.COMMENTS_SUMMARY_BASIS,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.POST_NOC_CHANGE,vm.allActivities.PRISTINE_PM,vm.allActivities.PRISTINE_PM_2LANG,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.NOC_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.NON_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.CORR_PATENT_MED,vm.allActivities.ALLEGATION_NOTICE,vm.allActivities.FORM_IV,vm.allActivities.FORM_V,vm.allActivities.CONSENT_LTR,vm.allActivities.DATA_PROTECT_CORRESP,vm.allActivities.NONCLIN_CLARIF_RESPONSE]}function getLevel3Array(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.YEAR_LIST_OF_CHANGE,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE]}function getNCArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.COMMENTS_SUMMARY_BASIS,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.POST_NOC_CHANGE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.PRISTINE_PM,vm.allActivities.PRISTINE_PM_2LANG,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.NOL_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA]}function getNDSArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.COMMENTS_NOC,vm.allActivities.COMMENTS_SUMMARY_BASIS,vm.allActivities.COMMENTS_REGULARTORY_DECISION,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.INITIAL,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.PRISTINE_PM,vm.allActivities.PRISTINE_PM_2LANG,vm.allActivities.BE_CLARIF_RESPONSE,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.NOC_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.NON_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.CORR_PATENT_MED,vm.allActivities.ALLEGATION_NOTICE,vm.allActivities.FORM_IV,vm.allActivities.FORM_V,vm.allActivities.CONSENT_LTR,vm.allActivities.DATA_PROTECT_CORRESP,vm.allActivities.NONCLIN_CLARIF_RESPONSE]}function getPSURCArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.COMMENTS_SUMMARY_BASIS,vm.allActivities.FOR_PERIOD,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.MEETING_MINUTES,vm.allActivities.MHPD_RQ_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.PHONE_RQ_RESPONSE]}function getPSURPVArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.FOR_PERIOD,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.MEETING_MINUTES,vm.allActivities.MHPD_RQ_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.CLIN_CLARIF_RESPONSE]}function getRMPPVArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.MEETING_MINUTES,vm.allActivities.MHPD_RQ_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.RMP_VERSION_DATE,vm.allActivities.CLIN_CLARIF_RESPONSE]}function getSANDSArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.COMMENTS_NOC,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.POST_NOC_CHANGE,vm.allActivities.PRISTINE_PM,vm.allActivities.PRISTINE_PM_2LANG,vm.allActivities.BE_CLARIF_RESPONSE,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.NOC_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.NON_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.CORR_PATENT_MED,vm.allActivities.ALLEGATION_NOTICE,vm.allActivities.FORM_IV,vm.allActivities.FORM_V,vm.allActivities.CONSENT_LTR,vm.allActivities.DATA_PROTECT_CORRESP]}function getSNDSArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.COMMENTS_NOC,vm.allActivities.COMMENTS_SUMMARY_BASIS,vm.allActivities.COMMENTS_REGULARTORY_DECISION,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.MEETING_MINUTES,vm.allActivities.PANDEMIC_APPL,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.POST_NOC_CHANGE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.PRISTINE_PM,vm.allActivities.PRISTINE_PM_2LANG,vm.allActivities.BE_CLARIF_RESPONSE,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.NOC_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.NON_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.CORR_PATENT_MED,vm.allActivities.ALLEGATION_NOTICE,vm.allActivities.FORM_IV,vm.allActivities.FORM_V,vm.allActivities.CONSENT_LTR,vm.allActivities.DATA_PROTECT_CORRESP,vm.allActivities.NONCLIN_CLARIF_RESPONSE]}function getSNDSCArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.COMMENTS_NOC,vm.allActivities.COMMENTS_SUMMARY_BASIS,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_NOC_CHANGE,vm.allActivities.PRISTINE_PM,vm.allActivities.PRISTINE_PM_2LANG,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.NOC_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.NON_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.CORR_PATENT_MED,vm.allActivities.ALLEGATION_NOTICE,vm.allActivities.FORM_IV,vm.allActivities.FORM_V,vm.allActivities.CONSENT_LTR,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.DATA_PROTECT_CORRESP]}function getUDPVArray(){return[vm.allActivities.BENEFIT_RISK_ASSESS,vm.allActivities.CANCEL_LETTER,vm.allActivities.NOTIFICATION_CHANGE,vm.allActivities.POST_MARKET_SURV,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.MEETING_MINUTES,vm.allActivities.MHPD_RQ_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.RISK_COMMUN_DOC,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.SIGNAL_WORK_UP]}function getUDRAArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.DIN_DISCONTINUED,vm.allActivities.ADVISEMENT_LETTER_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.MEETING_MINUTES,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.NOTIFICATION_INTERRUPT_SALE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.SEQUENCE_CLEANUP]}function getConsultArray(){return[vm.allActivities.PANDEMIC_APPL]}function _getMPNCArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ]}function _getMPNDSArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ]}function _getMPSNDSArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ]}function _getPANDArray(){return[vm.allActivities.BE_CLARIF_RESPONSE,vm.allActivities.CANCEL_LETTER,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.COMMENTS_NOC,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.INITIAL,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PANDEMIC_APPL,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.PRISTINE_PM_2LANG,vm.allActivities.PRISTINE_PM,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.NOC_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.NON_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.CORR_PATENT_MED,vm.allActivities.ALLEGATION_NOTICE,vm.allActivities.FORM_IV,vm.allActivities.FORM_V,vm.allActivities.CONSENT_LTR,vm.allActivities.DATA_PROTECT_CORRESP,vm.allActivities.NONCLIN_CLARIF_RESPONSE]}function _getPBRERCArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.COMMENTS_SUMMARY_BASIS,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.FOR_PERIOD,vm.allActivities.MEETING_MINUTES,vm.allActivities.MHPD_RQ_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.PHONE_RQ_RESPONSE]}function _getPBRERPVArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.FOR_PERIOD,vm.allActivities.MEETING_MINUTES,vm.allActivities.MHPD_RQ_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.CLIN_CLARIF_RESPONSE]}function _getPRNDSArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.MEETING_MINUTES,vm.allActivities.PRIORITY_REVIEW_RQ,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.RECON_DECIS_OTHER_INFO]}function _getPRSNDSArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.MEETING_MINUTES,vm.allActivities.PRIORITY_REVIEW_RQ,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.RECON_DECIS_OTHER_INFO]}function getYBPRArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.FOR_PERIOD,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.MEETING_MINUTES,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE]}function getDSurArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.FOR_PERIOD,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.MEETING_MINUTES,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.PHONE_RQ_RESPONSE]}function getDINAArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.CHANGE_TO_DIN,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.INITIAL,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.PRISTINE_PM,vm.allActivities.PRISTINE_PM_2LANG,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.BE_CLARIF_RESPONSE,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.NON_RESPONSE,vm.allActivities.NOD_RESPONSE]}function getDINBArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.CHANGE_TO_DIN,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.INITIAL,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.PRISTINE_PM,vm.allActivities.PRISTINE_PM_2LANG,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.YEAR_LIST_OF_CHANGE,vm.allActivities.NON_RESPONSE,vm.allActivities.NOD_RESPONSE]}function getDINDArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.CHANGE_TO_DIN,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.INITIAL,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.NON_RESPONSE,vm.allActivities.NOD_RESPONSE]}function getDINFArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.CHANGE_TO_DIN,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.INITIAL,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.LABEL_PREAPPROVAL_2LANG]}function getMPDINArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE]}function getPDCArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_AUTH_DIV1_CHANGE,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.PRISTINE_PM,vm.allActivities.PRISTINE_PM_2LANG,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.NOL_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO]}function getPDCBArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_AUTH_DIV1_CHANGE,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.PRISTINE_PM,vm.allActivities.PRISTINE_PM_2LANG,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.NOL_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO]}function _getActivityLeadArray(){return[vm.PHARMA,vm.BIOLOGICAL,vm.POSTMARKET,vm.CONSUMERHEALTH]}function _getBiologicalLead(){return vm.BIOLOGICAL}function _getPharmaLead(){return vm.PHARMA}function _getPostMarketLead(){return vm.POSTMARKET}function _getConsumHealthLead(){return vm.CONSUMERHEALTH}var vm=this;vm.raTypeArray=[],vm.feeTypeArray=[],vm.mitigationTypeArray=[],vm.BIOLOGICAL="B14-20160301-02",vm.CONSUMERHEALTH="B14-20160301-06",vm.PHARMA="B14-20160301-09",vm.POSTMARKET="B14-20160301-10",vm.allActivities={ADMINISTRATIVE:"ADMINISTRATIVE",BENEFIT_RISK_ASSESS:"BENEFIT_RISK_ASSESS",CANCEL_LETTER:"CANCEL_LETTER",CHANGE_TO_DIN:"CHANGE_TO_DIN",COMMENTS_NOC:"COMMENTS_NOC",COMMENTS_SUMMARY_BASIS:"COMMENTS_SUMMARY_BASIS",COMMENTS_REGULARTORY_DECISION:"COMMENTS_REGULARTORY_DECISION",DIN_DISCONTINUED:"DIN_DISCONTINUED",DRUG_NOTIF_FORM:"DRUG_NOTIF_FORM",FOR_PERIOD:"FOR_PERIOD",INITIAL:"INITIAL",MEETING_MINUTES:"MEETING_MINUTES",NOTIFICATION_CHANGE:"NOTIFICATION_CHANGE",NOTIFICATION_INTERRUPT_SALE:"NOTIFICATION_INTERRUPT_SALE",PANDEMIC_APPL:"PANDEMIC_APPL",POST_CLEARANCE_DATA:"POST_CLEARANCE_DATA",POST_MARKET_SURV:"POST_MARKET_SURV",POST_NOC_CHANGE:"POST_NOC_CHANGE",POST_AUTH_DIV1_CHANGE:"POST_AUTH_DIV1_CHANGE",PRESUB_MEETING_PKG:"PRESUB_MEETING_PKG",PRESUB_MEETING_RQ:"PRESUB_MEETING_RQ",PRIORITY_REVIEW_RQ:"PRIORITY_REVIEW_RQ",PRISTINE_PM:"PRISTINE_PM",PRISTINE_PM_2LANG:"PRISTINE_PM_2LANG",ADVISEMENT_LETTER_RESPONSE:"ADVISEMENT_LETTER_RESPONSE",CLIN_CLARIF_RESPONSE:"CLIN_CLARIF_RESPONSE",EMAIL_RQ_RESPONSE:"EMAIL_RQ_RESPONSE",LABEL_CLARIF_RESPONSE:"LABEL_CLARIF_RESPONSE",MHPD_RQ_RESPONSE:"MHPD_RQ_RESPONSE",NOC_RESPONSE:"NOC_RESPONSE",NOD_RESPONSE:"NOD_RESPONSE",NOL_RESPONSE:"NOL_RESPONSE",NON_RESPONSE:"NON_RESPONSE",PROCESSING_CLARIF_RESPONSE:"PROCESSING_CLARIF_RESPONSE",QUAL_CLIN_CLARIF_RESPONSE:"QUAL_CLIN_CLARIF_RESPONSE",QUAL_CLARIF_RESPONSE:"QUAL_CLARIF_RESPONSE",RECON_DECIS_LTR_INTENT:"RECON_DECIS_LTR_INTENT",RECON_DECIS_RQ_RECON:"RECON_DECIS_RQ_RECON",RECON_DECIS_OTHER_INFO:"RECON_DECIS_OTHER_INFO",SCREENING_ACCEPT_RESPONSE:"SCREENING_ACCEPT_RESPONSE",SCREENING_CLARIF_RESPONSE:"SCREENING_CLARIF_RESPONSE",SDN_RESPONSE:"SDN_RESPONSE",LABEL_PREAPPROVAL_2LANG:"LABEL_PREAPPROVAL_2LANG",PHONE_RQ_RESPONSE:"PHONE_RQ_RESPONSE",RISK_COMMUN_DOC:"RISK_COMMUN_DOC",RMP_VERSION_DATE:"RMP_VERSION_DATE",SIGNAL_WORK_UP:"SIGNAL_WORK_UP",UNSOLICITED_DATA:"UNSOLICITED_DATA",YEAR_LIST_OF_CHANGE:"YEAR_LIST_OF_CHANGE",BE_CLARIF_RESPONSE:"BE_CLARIF_RESPONSE",CORR_PATENT_MED:"CORR_PATENT_MED",ALLEGATION_NOTICE:"ALLEGATION_NOTICE",FORM_IV:"FORM_IV",FORM_V:"FORM_V",CONSENT_LTR:"CONSENT_LTR",DATA_PROTECT_CORRESP:"DATA_PROTECT_CORRESP",NONCLIN_CLARIF_RESPONSE:"NONCLIN_CLARIF_RESPONSE",SEQUENCE_CLEANUP:"SEQUENCE_CLEANUP"};var service={getTransactionDescriptions:getTransactionDescriptionsArray,getActivityTypes:getActivityArray,createRaTypes:_createRaArray,getBiologicalLeadValue:_getBiologicalLead,getPharmaLeadValue:_getPharmaLead,getPostMarketLeadValue:_getPostMarketLead,getConsumHealthLeadValue:_getConsumHealthLead,getPresubTypes:getPresubArray,getAndsType:getANDSArray,getDinaType:getDINAArray,getDinbType:getDINBArray,getDindType:getDINDArray,getDinfType:getDINFArray,getDSurType:getDSurArray,getEundsType:getEUNDSArray,getEusndsType:getEUSNDSArray,getLevel3Type:getLevel3Array,getMPDINType:getMPDINArray,getNcType:getNCArray,getNdsType:getNDSArray,getPdcType:getPDCArray,getPdcBType:getPDCBArray,getPresubType:getPresubArray,getpSurCType:getPSURCArray,getpSurPvType:getPSURPVArray,getRmpPvType:getRMPPVArray,getSandsType:getSANDSArray,getSndsType:getSNDSArray,getSndsCArray:getSNDSCArray,getUdpvType:getUDPVArray,getUdraType:getUDRAArray,getYbprType:getYBPRArray,getConsultType:getConsultArray,getMPNCType:_getMPNCArray,getMPNDSType:_getMPNDSArray,getMPSNDSType:_getMPSNDSArray,getPANDType:_getPANDArray,getPBRERCType:_getPBRERCArray,getPBRERPVType:_getPBRERPVArray,getPRNDSType:_getPRNDSArray,getPRSNDSType:_getPRSNDSArray,getYesNoList:yesNoArray,getFeeList:_getfeeTypeArray,createFeeTypes:_createFeeArray,getMitigationList:_getMitigationTypeArray,createMitigationList:_createMitigationArray,getActivityLeadList:_getActivityLeadArray};return service}angular.module("services").factory("TransactionLists",getTransactionSeq),getTransactionSeq.inject=["$http","$q"]}(),function(){"use strict";angular.module("applicationInfoService",[])}(),function(){"use strict";function ApplicationInfoService(){function ApplicationInfoService(){}return ApplicationInfoService.prototype.getTodayDate=function(){function pad(n){return n<10?"0"+n:n}var d=new Date,isoDate=d.getFullYear()+"-"+pad(d.getMonth()+1)+"-"+pad(d.getDate());return isoDate},ApplicationInfoService.prototype.incrementMinorVersion=function(enrolmentVersion){var result;if(enrolmentVersion){var parts=enrolmentVersion.split("."),dec=parseInt(parts[1]);result=parts[0]+"."+(dec+1)}else result="0.1";return result},ApplicationInfoService.prototype.incrementMajorVersion=function(enrolmentVersion){var result;if(enrolmentVersion){var parts=enrolmentVersion.split("."),whole=parseInt(parts[0]);result=whole+1+".0"}else result="1.0";return result},ApplicationInfoService.prototype.getApplicationStatusList=function(){return["NEW","AMEND","FINAL"]},ApplicationInfoService.prototype.getApprovedType=function(){return"FINAL"},ApplicationInfoService.prototype.getAmendType=function(){return"AMEND"},ApplicationInfoService}angular.module("applicationInfoService").factory("ApplicationInfoService",ApplicationInfoService)}(),function(){"use strict";angular.module("dossierService",["dossierDataLists","hpfbConstants","dataLists"])}(),function(){"use strict";function DossierService(DossierLists,$translate,$filter,getCountryAndProvinces,SOFTWARE_VERSION,OTHER,UNKNOWN,YES,NO){function DossierService(){}function DossierService(dossierData){angular.extend(this._default,dossierData)}function getContactList(contacts){var list=[];if(0==contacts.length)return list;if(angular.isDefined(contacts)){contacts instanceof Array||(contacts=[contacts]);for(var i=0;i<contacts.length;i++){var contact={};contact.amend="Y"===contacts[i].amend_record,contact.repRole=contacts[i].rep_contact_role,contact.salutation=contacts[i].rep_contact_details.salutation,contact.givenName=contacts[i].rep_contact_details.given_name,contact.surname=contacts[i].rep_contact_details.surname,contact.initials=contacts[i].rep_contact_details.initials,contact.title=contacts[i].rep_contact_details.job_title,contact.phone=contacts[i].rep_contact_details.phone_num,contact.phoneExt=contacts[i].rep_contact_details.phone_ext,contact.fax=contacts[i].rep_contact_details.fax_num,contact.email=contacts[i].rep_contact_details.email,contact.language=contacts[i].rep_contact_details.language_correspondance,list.push(contact)}}return list}function getTherapeuticList(input){var list="";if(input instanceof Array||(input=[input]),input){list=[];for(var i=0;i<input.length;i++)if(angular.isString(input[i])&&input[i].length>0){var item={id:i+1,name:input[i]};list.push(item)}}return list}function canRefProductToOutput(info){var result={};return angular.isDefined(info)&&(result.brand_name=info.brandName,result.company_name=info.companyName),result}function repContactToOutput(contactList){var resultList=[];return angular.forEach(contactList,function(item){var obj={};obj.amend_record=item.amend?"Y":"N",obj.rep_contact_role=item.repRole,obj.rep_contact_details={},obj.rep_contact_details.salutation=item.salutation,obj.rep_contact_details.given_name=item.givenName,obj.rep_contact_details.initials=item.initials,obj.rep_contact_details.surname=item.surname,obj.rep_contact_details.job_title=item.title,obj.rep_contact_details.language_correspondance=item.language,obj.rep_contact_details.phone_num=item.phone,obj.rep_contact_details.phone_ext=item.phoneExt,obj.rep_contact_details.fax_num=item.fax,obj.rep_contact_details.email=item.email,resultList.push(obj)}),resultList}function therapeuticClassToOutput(jsonObj){for(var resultList=[],i=0;i<jsonObj.length;i++)angular.isString(jsonObj[i].name)&&jsonObj[i].name.length>0&&resultList.push(jsonObj[i].name);return resultList}function getAppendiceData(appendices){var result={};if(!appendices)return result;for(var i=0;i<appendices.length;i++){var appendix=appendices[i];result[appendix.ingredientName]=i+1}return result}function getAnimalIngredients(formulations){for(var yesValue="Y",allAnimalSourcedNames=[],uniqueList={},i=0;i<formulations.length;i++){var oneFormulation=formulations[i];if(oneFormulation.activeIngList)for(var j=0;j<oneFormulation.activeIngList.length;j++){var oneActive=oneFormulation.activeIngList[j];oneActive.humanAnimalSourced===yesValue&&allAnimalSourcedNames.push(oneActive.ingLabel)}if(oneFormulation.nMedIngList)for(var j=0;j<oneFormulation.nMedIngList.length;j++){var oneActive1=oneFormulation.nMedIngList[j];oneActive1.humanAnimalSourced===yesValue&&allAnimalSourcedNames.push(oneActive1.ingName)}if(oneFormulation.animalHumanMaterials)for(var j=0;j<oneFormulation.animalHumanMaterials.length;j++){var oneActive2=oneFormulation.animalHumanMaterials[j];allAnimalSourcedNames.push(oneActive2.ingredientName)}}return uniqueList=getUniqueList(allAnimalSourcedNames)}function getMissingAppendices(appendiceList,ingredientJsonList){for(var missingList=[],i=0;i<ingredientJsonList.length;i++)appendiceList.hasOwnProperty(ingredientJsonList[i])?appendiceList[ingredientJsonList[i]]=0:missingList.push(ingredientJsonList[i]);return missingList}function findExtraApppendices(appendixJson){for(var extraList=[],keys=Object.keys(appendixJson),i=0;i<keys.length;i++){var val=appendixJson[keys[i]];val>0&&extraList.push(keys[i])}return extraList}function getUniqueList(arr){for(var u={},a=[],i=0,l=arr.length;i<l;++i)u.hasOwnProperty(arr[i])||(a.push(arr[i]),u[arr[i]]=1);return a}function getDefaultSchedA(){var schedA={};return schedA.drugIdNumber="",schedA.scheduleAClaimsIndDetails="",schedA.diseaseDisorderList=getDefaultDiseaseDisorderList(),schedA}function getDefaultDiseaseDisorderList(){return{acute_alcohol:!1,acute_anxiety:!1,acute_infectious:!1,acute_inflammatory:!1,acute_psychotic:!1,addiction:!1,ateriosclerosis:!1,appendicitis:!1,asthma:!1,cancer:!1,congest_heart_fail:!1,convulsions:!1,dementia:!1,depression:!1,diabetes:!1,gangrene:!1,glaucoma:!1,haematologic_bleeding:!1,hepatitis:!1,hypertension:!1,nausea_pregnancy:!1,obesity:!1,rheumatic_fever:!1,septicemia:!1,sex_transmit_disease:!1,strangulated_hernia:!1,thrombotic_embolic_disorder:!1,thyroid_disease:!1,ulcer_gastro:!1}}function _createEmptyNervousSystemModel(){var record={};return record.brain=!1,record.brainStem=!1,record.cerebellum=!1,record.ceroFluid=!1,record.dorsalRoot=!1,record.duraMater=!1,record.hypothalamus=!1,record.retina=!1,record.spinalCord=!1,record.trigeminal=!1,record.otherNervous=!1,record.otherDetails="",record}function _createEmptyDigestiveSystemModel(){var record={};return record.appendix=!1,record.bile=!1,record.distalIleum=!1,record.largeIntestine=!1,record.salivaSalivary=!1,record.smallIntestine=!1,record.stomach=!1,record.otherDigestive=!1,record.otherDetails="",record}function _createEmptyImmuneSystemModel(){var record={};return record.lymphNodes=!1,record.spleen=!1,record.thymus=!1,record.tonsils=!1,record.otherImmune=!1,record.otherDetails="",record}function _createEmptyMuscleSystemModel(){var record={};return record.abdomen=!1,record.skull=!1,record.bones=!1,record.collagen=!1,record.tendonsLigaments=!1,record.vertebralColumn=!1,record.muscle=!1,record.otherMuscle=!1,record.otherDetails="",record}function _createEmptyReproductiveSystemModel(){var record={};return record.milkProducts=!1,record.kidney=!1,record.colostrum=!1,record.mammaryGlands=!1,record.ovaries=!1,record.placenta=!1,record.placentalFluid=!1,record.semen=!1,record.testes=!1,record.urine=!1,record.otherReproductive=!1,record.otherDetails="",record}function _createEmptySkinSystemModel(){var record={};return record.adrenalGland=!1,record.hairHoovesFeathers=!1,record.liver=!1,record.pancreas=!1,record.pituitary=!1,record.skinHides=!1,record.thyroidParathyroid=!1,record.otherSkin=!1,record.otherDetails="",record}function _createEmptyOtherSystemModel(){var record={};return record.adipose=!1,record.ascites=!1,record.antlerVelvet=!1,record.serum=!1,record.wholeBlood=!1,record.plasma=!1,
record.embryonicTissue=!1,record.fetalTissue=!1,record.boneMarrow=!1,record.eyesCornea=!1,record.gallBladder=!1,record.otherFluids=!1,record.otherDetails="",record}function _createEmptyCardioSystemModel(){var record={};return record.heartPericardium=!1,record.lung=!1,record.nasalFluid=!1,record.trachea=!1,record.otherCardio=!1,record.otherDetails="",record}return DossierService.prototype={_default:{dossierID:"",companyID:"",relatedInfo:"",enrolmentVersion:"0.00",dateSaved:"",applicationType:"NEW",softwareVersion:SOFTWARE_VERSION,xslFileName:"REP_DO_2_0.xsl",dataChecksum:"",dossierType:"",productName:"",properName:"",isRefProduct:"",privacyStat:"",drugProduct:{drugUse:"",therapeutic:[],canRefProduct:{brandName:"",companyName:""}},contactList:[]},getDefaultObject:function(){return this._default},getXSLFileName:function(){return this._default.xslFileName},loadFromFile:function(info){var rootTag=this.getRootTagName();if(!info)return this._default;if(!info[rootTag])return this._default;info=info[rootTag];var drugUseValue="";info.drug_use&&(drugUseValue=info.drug_use.__text);var dossierModel={dossierID:info.dossier_id,companyID:info.company_id,relatedInfo:info.related_information,enrolmentVersion:info.enrolment_version,dateSaved:info.date_saved,applicationType:info.application_type,softwareVersion:info.software_version,dataChecksum:info.data_checksum,dossierType:info.dossier_type,productName:info.product_name,properName:info.common_name,isRefProduct:info.is_ref_product,drugProduct:{drugUse:$filter("findListItemById")(DossierLists.getDrugUseList(),{id:drugUseValue}),therapeutic:[],canRefProduct:""},contactList:getContactList(info.contact_record)};return info.is_ref_product===YES&&(dossierModel.drugProduct.canRefProduct={brandName:info.cdn_ref_product.brand_name,companyName:info.cdn_ref_product.company_name}),info.therapeutic_class_list.therapeutic_class&&(dossierModel.drugProduct.therapeutic=getTherapeuticList(info.therapeutic_class_list.therapeutic_class)),dossierModel}},DossierService.prototype.dossierToOutput=function(jsonObj){if(!jsonObj)return null;var baseDossier={};return baseDossier.template_type="PHARMA",baseDossier.company_id=jsonObj.companyID,baseDossier.dossier_id=jsonObj.dossierID,baseDossier.related_information=jsonObj.relatedInfo,baseDossier.enrolment_version=jsonObj.enrolmentVersion,baseDossier.date_saved=jsonObj.dateSaved,baseDossier.application_type=jsonObj.applicationType,baseDossier.software_version=SOFTWARE_VERSION,baseDossier.data_checksum="",jsonObj.contactList&&(baseDossier.contact_record=repContactToOutput(jsonObj.contactList)),baseDossier.dossier_type=jsonObj.dossierType,baseDossier.product_name=jsonObj.productName,baseDossier.common_name=jsonObj.properName,baseDossier.is_ref_product=jsonObj.isRefProduct,"Y"===jsonObj.isRefProduct&&jsonObj.drugProduct.canRefProduct&&(baseDossier.cdn_ref_product=canRefProductToOutput(jsonObj.drugProduct.canRefProduct)),jsonObj.drugProduct.drugUse?baseDossier.drug_use={_label_en:jsonObj.drugProduct.drugUse.en,_label_fr:jsonObj.drugProduct.drugUse.fr,__text:jsonObj.drugProduct.drugUse.id}:baseDossier.drug_use="",baseDossier.therapeutic_class_list={},jsonObj.drugProduct.therapeutic&&jsonObj.drugProduct.therapeutic.length>0&&(baseDossier.therapeutic_class_list.therapeutic_class=therapeuticClassToOutput(jsonObj.drugProduct.therapeutic)),{DOSSIER_ENROL:baseDossier}},DossierService.prototype.getMissingAppendix4=function(dossierModel){var extraAppendices,missingAppendices=[],results={};if(!dossierModel||!dossierModel.drugProduct)return missingAppendices;var appendices=getAppendiceData(dossierModel.drugProduct.appendixFourList),ingredients=getAnimalIngredients(dossierModel.drugProduct.formulations);return missingAppendices=getMissingAppendices(appendices,ingredients),extraAppendices=findExtraApppendices(appendices),results.missing=missingAppendices,results.extra=extraAppendices,results},DossierService.prototype.getDefaultDiseaseDisorderList=function(){return getDefaultDiseaseDisorderList()},DossierService.prototype.getDefaultNervousSystem=function(){return _createEmptyNervousSystemModel()},DossierService.prototype.getDefaultImmuneSystem=function(){return _createEmptyImmuneSystemModel()},DossierService.prototype.getDefaultDigestiveSystem=function(){return _createEmptyDigestiveSystemModel()},DossierService.prototype.getDefaultMuscleSystem=function(){return _createEmptyMuscleSystemModel()},DossierService.prototype.getDefaultOtherSystem=function(){return _createEmptyOtherSystemModel()},DossierService.prototype.getDefaultReproductiveSystem=function(){return _createEmptyReproductiveSystemModel()},DossierService.prototype.getDefaultCardioSystem=function(){return _createEmptyCardioSystemModel()},DossierService.prototype.getDefaultSkinSystem=function(){return _createEmptySkinSystemModel()},DossierService.prototype.getDefaultScheduleA=function(){return getDefaultSchedA()},DossierService.prototype.getRootTagName=function(){return"DOSSIER_ENROL"},DossierService}angular.module("dossierService").factory("DossierService",DossierService),DossierService.$inject=["DossierLists","$translate","$filter","getCountryAndProvinces","SOFTWARE_VERSION","OTHER","UNKNOWN","YES","NO"]}(),function(){"use strict";angular.module("dossierLoadModule",["dataLists","dossierDataLists","hpfbConstants"])}(),function(){"use strict";angular.module("dossierLoadModule").factory("customLoad",["$http","$q","$filter","getCountryAndProvinces","DossierLists","OTHER","RELATIVE_FOLDER_DATA",function($http,$q,$filter,getCountryAndProvinces,DossierLists,OTHER,RELATIVE_FOLDER_DATA){function _createTranslateList(jsonList,lang){lang||(lang="en");for(var resultList={},i=0;i<jsonList.length;i++)resultList[jsonList[i].id]=jsonList[i][lang];return resultList}function _createNewSortedArrayWithOther(jsonList,prefix,lang){var newList=_createNewPrefixList(jsonList,prefix);lang||(lang="en");var result=_createSortedArray(newList,lang);return result.unshift({id:OTHER,en:"Other",fr:"Autre"}),result}function _createSortedArray(jsonList,lang){var result=[];return angular.forEach($filter("orderByLocale")(jsonList,lang),function(sortedObject){sortedObject.key!==OTHER&&result.push(sortedObject)}),result}function _createNewPrefixList(jsonList,prefix){for(var newList=[],i=0;i<jsonList.length;i++){var newRec=angular.copy(jsonList[i]);newRec.id=prefix+newRec.id,newList.push(newRec)}return newList}return function(options){var deferred=$q.defer(),roaUrl=RELATIVE_FOLDER_DATA+"roa.json",countryUrl=RELATIVE_FOLDER_DATA+"countries.json",nanoUrl=RELATIVE_FOLDER_DATA+"nanomaterials.json",unitsUrl=RELATIVE_FOLDER_DATA+"units.json",presentationUnitsUrl=RELATIVE_FOLDER_DATA+"presentationUnits.json",measureUnitsUrl=RELATIVE_FOLDER_DATA+"measureUnits.json",dosageFormUrl=RELATIVE_FOLDER_DATA+"dosageForm.json",activeUrl=RELATIVE_FOLDER_DATA+"activeIngred.json",resultTranslateList={};return $http.get(unitsUrl).then(function(response){var newList=_createNewSortedArrayWithOther(response.data,DossierLists.getUnitsPrefix(),options.key);DossierLists.createUnitsList(newList)}),$http.get(presentationUnitsUrl).then(function(response){var newList=_createNewSortedArrayWithOther(response.data,DossierLists.getUnitsPrefix(),options.key);DossierLists.createUnitsPresentationList(newList)}),$http.get(measureUnitsUrl).then(function(response){var newList=_createNewSortedArrayWithOther(response.data,DossierLists.getUnitsPrefix(),options.key);DossierLists.createUnitsMeasureList(newList)}),$http.get(countryUrl).then(function(response){var newList=_createSortedArray(response.data,options.key),translateList=_createTranslateList(newList,options.key);getCountryAndProvinces.createCountryList(newList),angular.extend(resultTranslateList,translateList)}),$http.get(nanoUrl).then(function(response){var newList=_createNewSortedArrayWithOther(response.data,DossierLists.getNanoPrefix(),options.key),translateList=_createTranslateList(newList,options.key);DossierLists.createNanomaterialList(newList),angular.extend(resultTranslateList,translateList)}),$http.get(dosageFormUrl).then(function(response){var newList=_createNewSortedArrayWithOther(response.data,DossierLists.getDosageFormPrefix(),options.key),translateList=_createTranslateList(newList,options.key);DossierLists.createDosageFormList(newList),angular.extend(resultTranslateList,translateList);var newList2=_createNewSortedArrayWithOther(response.data,"",options.key),translateList2=_createTranslateList(newList2,options.key);angular.extend(resultTranslateList,translateList2)}),$http.get(activeUrl).then(function(response){DossierLists.setActiveList(response.data)}),$http.get(roaUrl).then(function(response){var newList=_createNewSortedArrayWithOther(response.data,DossierLists.getRoaPrefix(),options.key),translateList=_createTranslateList(newList,options.key);DossierLists.createRoaList(newList),angular.extend(resultTranslateList,translateList)})["catch"](function(error){console.warn("An error occurred with Dossier List Load: "+error),deferred.reject(resultTranslateList)})["finally"](function(){deferred.resolve(resultTranslateList)}),deferred.promise}}])}(),function(){"use strict";angular.module("dossierDataLists",[])}(),function(){"use strict";function getService(){function _setActiveArray(data){vm.activeList=data}function _getActiveArray(){return vm.activeList}function getDoseOtherValue(){return OTHER}function getYesValue(){return YES}function getUnknownValue(){return"UNLKNOWN"}function getOtherValue(){return getDoseOtherValue()}function _createNanoArray(translateJson){vm.nanoList=translateJson}function _createDosageFormArray(translateJson){vm.dosageFormList=translateJson}function _createUnitsPresentationArray(translateJson){vm.unitsPresentationList=translateJson}function _createUnitsMeasureArray(translateJson){vm.unitsMeasureList=translateJson}function _createRoaArray(translateJson){vm.roaList=translateJson}function _createUnitsArray(translateJson){vm.unitsList=translateJson}function _getUnitsArray(){return vm.unitsList}function _getRoaListPrefix(){return"ROA_"}function _getDosagePrefix(){return"DOSFORM_"}function _getUnitsPrefix(){return"UNITS_"}function _getNanoPrefix(){return"NANOMAT_"}function _getDrugUseArray(){return[{id:"HUMAN",en:"Human",fr:"fr_Human"},{id:"RADIO",en:"Radiopharmaceutical",fr:"fr_Radiopharmaceutical"},{id:"VET",en:"Veterinary",fr:"fr_Veterinary"},{id:"DISINFECT",en:"Disinfectant",fr:"fr_Disinfectant"},{id:"DM",en:"Drug and Medical Device",fr:"fr_Drug and Medical Device"}]}function _getDisinfectantTypeArray(){return[{id:"HOSPITAL",en:"Hospital",fr:"fr_Hospital"},{id:"FP",en:"Food Processing",fr:"fr_Food Processing"},{id:"MI",en:"Medical Instruments",fr:"fr_Medical Instruments"},{id:"DOMESTIC",en:"Domestic",fr:"fr_Domestic"},{id:"BARN",en:"Barn",fr:"fr_Barn"},{id:"II",en:"Institutional/Industrial",fr:"fr_Institutional/Industrial"}]}function _getIngRoleArray(){return[{id:"MED",en:"Medicinal Ingredient",fr:"fr_Medicinal Ingredient"},{id:"NONMED",en:"Non-medicinal Ingredient",fr:"fr_Non-medicinal Ingredient"}]}function _getPerArray(){return[{id:"UP",en:"Unit of Presentation",fr:"fr_Unit of Presentation"},{id:"UM",en:"Unit of Measure",fr:"fr_Unit of Measure"}]}function _getStrengthArray(){return[{id:"EQ",en:"Equals",fr:"fr_Equals"},{id:"NGT",en:"Not more than",fr:"fr_Not_greater_than"},{id:"NLT",en:"Not less than",fr:"fr_Not_less_than"},{id:"RA",en:"Range",fr:"fr_Range"}]}function _getShelfLifeUnitsArray(){return[{id:"YR",en:"Years",fr:"fr_Years"},{id:"MO",en:"Months",fr:"fr_Months"},{id:"DA",en:"Days",fr:"fr_Days"},{id:"HR",en:"Hours",fr:"fr_Hours"},{id:"MI",en:"Minutes",fr:"fr_Minutes"}]}function _getDosageFormsArray(){return vm.dosageFormList}function _getUnitsPresentationArray(){return vm.unitsPresentationList}function _getUnitsMeasureArray(){return vm.unitsMeasureList}function getNanoMaterialArray(){return vm.nanoList}function getRoaArray(){return vm.roaList}function yesNoArray(){return["Y","N"]}function yesNoUnknownArray(){return["Y","N","UNKNOWN"]}function animalSourcesArray(){return["NONHUMANPRIMATE_TYPE","AQUATIC_TYPE","AVIAN_TYPE","BOVINE_TYPE","CANINE_TYPE","CAPRINE_TYPE","CERVIDAE_TYPE","EQUINE_TYPE","FELINE_TYPE","OVINE_TYPE","PORCINE_TYPE","RODENT_TYPE","OTHERANIMAL_TYPE"]}function tissuesSystemArray(){return[_getDigestiveSystemValue(),_getNervousSystemValue(),_getReproductiveSystemValue(),_getCardioSystemValue(),_getImmuneSystemValue(),_getSkinSystemValue(),_getMuscleSystemValue(),_getOtherTissuesSystemValue()]}function _getDigestiveSystemValue(){return"DIGESTIVE_SYSTEM"}function _getNervousSystemValue(){return"NERVOUS_SYSTEM"}function _getReproductiveSystemValue(){return"REPRODUCT_SYSTEM"}function _getCardioSystemValue(){return"CARDIO_SYSTEM"}function _getImmuneSystemValue(){return"IMMUNE_SYSTEM"}function _getSkinSystemValue(){return"SKINGLAND_SYSTEM"}function _getMuscleSystemValue(){return"MUSCULO_SYSTEM"}function _getOtherTissuesSystemValue(){return"OTHERTISSUE_SYSTEM"}function nervousSystemArray(){return["BRAIN","BRAINSTEM","CEREBELLUM","CEROFLUID","DORSALROOT","DURAMATER","HYPOTHALAMUS","RETINA","SPINALCORD","TRIGEMINAL","NERVOUS_OTHER"]}function digestiveSystemArray(){return["APPENDIX","BILE","DISTALILEUM","LARGEINTEST","SALIVA","SMALLINTESTINE","STOMACH","DIGESTIVE_OTHER"]}function reprodSystemArray(){return["MILK","KIDNEY","COLOSTRUM","MAMMARY","OVARIES","PLACENTA","PLACENTAFLUID","SEMEN","TESTES","URINE","REPROD_OTHER"]}function cardioSystemArray(){return["HEART","LUNG","NASALFLUID","TRACHEA","PLACENTALFLUID","CARDIO_OTHER"]}function immuneSystemArray(){return["LYMPH","SPLEEN","THYMUS","TONSILS","IMMUNE_OTHER"]}function skinSystemArray(){return["ADRENAL","HAIR","LIVER","PANCREAS","PITUARYGLAND","SKINHIDES","THYROID","SKIN_OTHER"]}function muscleSystemArray(){return["ABDOMEN","SKULL","BONES","COLLAGEN","TENDONS","VERTEBRALCOLUMN","MUSCLE_OTHER"]}function otherSystemArray(){return["ADIPOSE","ASCITES","ANTLERV","SERUM","WHOLEBLOOD","PLASMA","EMBRYONICTISS","FETALTISS","BONEMARROW","EYESCORNEA","GALL","FLUIDS_OTHER"]}function _getTissuesFluidsLabels(){return{brain:"BRAIN",brainStem:"BRAINSTEM",cerebellum:"CEREBELLUM",ceroFluid:"CEROFLUID",dorsalRoot:"DORSALROOT",duraMater:"DURAMATER",hypothalmus:"HYPOTHALAMUS",retina:"RETINA",spinalCord:"SPINALCORD",trigeminal:"TRIGEMINAL",appendix:"APPENDIX",bile:"BILE",distalIleum:"DISTALILEUM",largeIntestine:"LARGEINTEST",salivaSalivary:"SALIVA",smallIntestine:"SMALLINTESTINE",stomach:"STOMACH",milkProducts:"MILK",kidney:"KIDNEY",colostrum:"COLOSTRUM",mammaryGlands:"MAMMARY",ovaries:"OVARIES",placenta:"PLACENTA",placentalFluid:"PLACENTAFLUID",semen:"SEMEN",testes:"TESTES",urine:"URINE",heartPericardium:"HEART",lung:"LUNG",nasalFluid:"NASALFLUID",trachea:"TRACHEA",lymphNodes:"LYMPH",spleen:"SPLEEN",thymus:"THYMUS",tonsils:"TONSILS",adrenalGland:"ADRENAL",hairHoovesFeathers:"HAIR",liver:"LIVER",pancreas:"PANCREAS",pituitary:"PITUARYGLAND",skinHides:"SKINHIDES",thyroidParathyroid:"THYROID",abdomen:"ABDOMEN",skull:"SKULL",bones:"BONES",collagen:"COLLAGEN",tendonsLigaments:"TENDONS",vertebralColumn:"VERTEBRALCOLUMN",muscle:"MUSCLE",adipose:"ADIPOSE",ascites:"ASCITES",antlerVelvet:"ANTLERV",serum:"SERUM",wholeBlood:"WHOLEBLOOD",plasma:"PLASMA",embryonicTissue:"EMBRYONICTISS",fetalTissue:"FETALTISS",boneMarrow:"BONEMARROW",eyesCornea:"EYESCORNEA",gallBladder:"GALL"}}var OTHER="OTHER",YES="Y",vm=this;vm.roaList=[],vm.nanoList=[],vm.dosageFormList=[],vm.unitsPresentationList=[],vm.unitsMeasureList=[],vm.activeList=[],vm.unitsList=[];var service={setActiveList:_setActiveArray,getActiveList:_getActiveArray,createRoaList:_createRoaArray,createUnitsList:_createUnitsArray,createUnitsPresentationList:_createUnitsPresentationArray,createUnitsMeasureList:_createUnitsMeasureArray,createNanomaterialList:_createNanoArray,createDosageFormList:_createDosageFormArray,getDosageFormList:_getDosageFormsArray,getUnitsPresentationList:_getUnitsPresentationArray,getUnitsMeasureList:_getUnitsMeasureArray,getDrugUseList:_getDrugUseArray,getDisinfectantTypeList:_getDisinfectantTypeArray,getIngRoleList:_getIngRoleArray,getPerList:_getPerArray,getStrengthList:_getStrengthArray,getUnitsList:_getUnitsArray,getShelfLifeUnitsList:_getShelfLifeUnitsArray,getDosageOther:getDoseOtherValue,getNanoMaterials:getNanoMaterialArray,getRoa:getRoaArray,getOtherValue:getOtherValue,getUnknownValue:getUnknownValue,getYesNoList:yesNoArray,getYesNoUnknownList:yesNoUnknownArray,getAnimalSources:animalSourcesArray,getTissuesSystem:tissuesSystemArray,getNervousSystem:nervousSystemArray,getDigestiveSystem:digestiveSystemArray,getImmuneSystem:immuneSystemArray,getSkinSystem:skinSystemArray,getReprodSystem:reprodSystemArray,getOtherSystem:otherSystemArray,getMuscleSystem:muscleSystemArray,getCardioSystem:cardioSystemArray,getDigestiveSystemValue:_getDigestiveSystemValue,getNervousSystemValue:_getNervousSystemValue,getReproductiveSystemValue:_getReproductiveSystemValue,getCardioSystemValue:_getCardioSystemValue,getImmuneSystemValue:_getImmuneSystemValue,getSkinSystemValue:_getSkinSystemValue,getMuscleSystemValue:_getMuscleSystemValue,getOtherTissuesSystemValue:_getOtherTissuesSystemValue,getYesValue:getYesValue,getTissuesFluidsLabels:_getTissuesFluidsLabels,getRoaPrefix:_getRoaListPrefix,getDosageFormPrefix:_getDosagePrefix,getUnitsPrefix:_getUnitsPrefix,getNanoPrefix:_getNanoPrefix};return service}angular.module("dossierDataLists").factory("DossierLists",getService)}(),function(){"use strict";angular.module("alertModule",[])}(),function(){"use strict";function alertController(){var vm=this;vm.alertVisible=!1,vm.closeMsgAlias="CLOSE_ALERT",vm.anchor=null,vm.$onInit=function(){vm.alertVisible=!1},vm.$onChanges=function(changes){changes.msg&&(vm.closeMsgAlias=changes.msg.currentValue),changes.uiState&&(vm.alertVisible=changes.uiState.currentValue),changes.myAnchor&&(vm.anchor=changes.myAnchor.currentValue)},vm.open=function(){vm.updateState()},vm.close=function(){vm.updateState(),document.getElementById(vm.anchor).focus()},vm.isAlertVisible=function(){return vm.alertVisible}}angular.module("alertModule").component("cmpAlert",{templateUrl:"app/scripts/components/alertComponent/tpl-alert_20190321_1400.html",transclude:!0,bindings:{uiState:"<",msg:"@",myAnchor:"<",updateState:"&",type:"@"},controller:alertController,controllerAs:"alertCtrl"}),alertController.$inject=[]}(),function(){"use strict";angular.module("errorSummaryModule",["focus-if"])}(),function(){"use strict";function errorSummaryController($scope,$location,$anchorScroll){function _isErrorSummaryVisible(){return vm.isVisible&&vm.errorArray&&vm.errorArray.length>0}function _getErr(errorObj,resultsList,parent){for(var keys=Object.keys(errorObj),i=0;i<keys.length;i++){var record=errorObj[keys[i]];record instanceof Array||(record=[record]);for(var j=0;j<record.length;j++){var numIndex=record[j].$name.lastIndexOf("_"),transcludeName="";if(numIndex>0&&(transcludeName=record[j].$name.substring(0,numIndex)),record[j].$invalid===!0&&record[j].$name.indexOf(".")>0)if(vm.exclusions&&vm.exclusions.hasOwnProperty(record[j].$name)){var tabIndex=vm.exclusions[record[j].$name].indexOf("tab_"),tabId=-1;tabIndex>-1&&(tabId=vm.exclusions[record[j].$name].substr(tabIndex+4),tabId=parseInt(tabId)),angular.merge(resultsList,_createSummaryRecord(record[j].$name,keys[i],parent,tabId))}else _getErr(record[j].$error,resultsList,record[j].$name);else if(vm.transcludeNames.hasOwnProperty(transcludeName)){var exIndex=record[j].$name.indexOf(transcludeName),expandIndex=record[j].$name.substring(exIndex+transcludeName.length+1);angular.merge(resultsList,_createExpanderRecord(record[j].$name,transcludeName,keys[i],parent,expandIndex))}else if(record[j].$invalid===!0&&!resultsList.hasOwnProperty(record[j].$name)){var result=_processRecord(record[j].$name,keys[i],parent);angular.merge(resultsList,result)}}}}function _scrubFieldName(rawName){var separator="_",index=rawName.lastIndexOf(separator),cleanedName="";return cleanedName=index>-1?rawName.substring(0,index):rawName}function _getElementScope(rawName){var separator="_",nameSplit=rawName.split(separator),scopeId=parseInt(nameSplit[nameSplit.length-1]);return angular.isNumber(scopeId)||(scopeId=""),scopeId}function _processRecord(error_Name,errorType,parent){var result={},scrubName=_scrubFieldName(error_Name),scopeId=_getElementScope(error_Name),errorKey="TYPE_"+errorType.toUpperCase(),destId=error_Name;if(vm.alias&&vm.alias.hasOwnProperty(scrubName)){var aliasRec=vm.alias[scrubName];switch(aliasRec.type.toLowerCase()){case"fieldset":var searchId=aliasRec.parent+"_"+scopeId,destObj=$("#"+searchId).find("input:visible:first");destObj.length>0&&(destId=destObj[0].id);break;case"element":destId=aliasRec.target+"_"+scopeId;break;case"elementnoid":destId=aliasRec.target;break;case"pattern":"pattern"===errorType&&(errorKey=aliasRec.errorType);break;case"select2":var searchId=aliasRec.name+"_match"+scopeId,destObj=$("#"+searchId);destObj.length>0&&(destId=searchId);break;case"min":"min"===errorType&&(errorKey=aliasRec.errorType);break;case"max":"max"===errorType&&(errorKey=aliasRec.errorType);break;case"minlength":"minlength"===errorType&&(errorKey=aliasRec.errorType);break;case"maxlength":"maxlength"===errorType&&(errorKey=aliasRec.errorType);break;case"buttonsearch":errorKey="TYPE_REQUIRED",$.each($("button","#"+vm.startFormId),function(k){var temp_attr=$(this).attr("id");temp_attr&&temp_attr.indexOf(aliasRec.buttonName)>-1&&(destId=temp_attr)});break;default:console.warn("No type found "+aliasRec.type)}}return result[error_Name]={name:destId,translateKey:scrubName.toUpperCase(),type:errorKey,parent:parent,concat:parent+"."+error_Name,isSummary:!1},result}function _sortErrorsByDomOrder(){var domFieldList={};$.each($("input, select ,textarea"),function(k){var temp_attr=$(this).attr("id");temp_attr&&(domFieldList[temp_attr]=k)});for(var keyList=Object.keys(domFieldList),p=0;p<keyList.length;p++){if(keyList[p].indexOf("focusser-")>-1){var parentName=angular.element(document.querySelector("#"+keyList[p])).parent().attr("name");parentName&&(keyList[p]=parentName)}vm.uniqueErrorList[keyList[p]]||(keyList.splice(p,1),p--)}for(var sortedDomJsonList={},v=0;v<keyList.length;v++)keyList[v].startsWith("no_")&&(keyList[v]=keyList[v].replace("no_","list_")),sortedDomJsonList[keyList[v]]=v;var newErrors=Object.keys(vm.uniqueErrorList).map(function(k){return vm.uniqueErrorList[k]}),notDefined={};if(newErrors.length>0)for(var i=0;i<newErrors.length;){var currRec=newErrors[i],targetName=currRec.name,destIndex=sortedDomJsonList[targetName];if(angular.isDefined(destIndex)&&destIndex!==i){var tempRec=angular.copy(newErrors[destIndex]);newErrors[destIndex]=angular.copy(currRec),newErrors[i]=angular.copy(tempRec)}else angular.isDefined(destIndex)||(notDefined[currRec.name]={rec:currRec,pos:i}),i++}return _sortUnknowns(notDefined,newErrors),newErrors}function _sortUnknowns(unknownJson,sortList){for(var unknownArray=Object.keys(unknownJson).map(function(k){return unknownJson[k]}),i=0;i<unknownArray.length;i++){var unknownRec=unknownArray[i],unknownName=unknownRec.rec.name,scopeIndex=_getElementScope(unknownName);if(angular.isNumber(scopeIndex))for(var g=sortList.length-1;g>=0;g--){var sortRec=sortList[g],sortScope=_getElementScope(sortRec.name);if(angular.isNumber(sortScope)&&sortScope===scopeIndex&&unknownName!==sortRec.name){sortList.move(unknownRec.pos,g+1);break}}}}function _createSummaryRecord(name,type,parent,tabId){var result={};return angular.isDefined(tabId)||(tabId=-1),result[name]={name:name,type:type,translateKey:name.toUpperCase(),parent:parent,concat:parent+"."+name,tabId:tabId,isSummary:!0},result}function _createExpanderRecord(name,transcludeName,type,parent,expanderIndex){var result={};return result[name]={name:name,type:type,translateKey:transcludeName.toUpperCase(),parent:parent,concat:parent+"."+name,isSummary:!0,toExpand:!0,exIndex:parseInt(expanderIndex)},result}var vm=this;vm.parentRef=null,vm.errorArray=[],vm.uniqueErrorList={},vm.isVisible=!1,vm.nameAddendum="",vm.rootError="",vm.isFocusInput=0,vm.exclusions={},vm.alias={},vm.transcludeNames={},vm.headingPreamble="",vm.headerLevel="",vm.startFormId="",vm.$onInit=function(){},vm.$onChanges=function(changes){changes.setHeadingLevel&&angular.isDefined(changes.setHeadingLevel.currentValue)&&(vm.headerLevel=changes.setHeadingLevel.currentValue.toLowerCase()),changes.nameSuffix&&(vm.nameAddendum="-"+changes.nameSuffix.currentValue),changes.formPreamble&&(vm.headingPreamble=changes.formPreamble.currentValue),changes.exclusionList&&(vm.exclusions=changes.exclusionList.currentValue),changes.aliasList&&(vm.alias=changes.aliasList.currentValue),changes.formRef&&vm.getErrorsSumm(changes.formRef.currentValue.$error,changes.formRef.currentValue.$name),changes.showErrors&&(vm.isVisible=changes.showErrors.currentValue),changes.updateErrors&&vm.formRef&&vm.isVisible&&vm.getErrorsSumm(vm.formRef.$error,vm.formRef.$name),changes.makeFocused&&changes.makeFocused.currentValue&&(vm.isFocusInput=vm.isFocusInput+1),changes.formId&&(vm.startFormId=changes.formId.currentValue),changes.transcludeList&&changes.transcludeList.currentValue&&(vm.transcludeNames=changes.transcludeList.currentValue)},vm.calcIsVisible=function(){var summaryIsVisible=_isErrorSummaryVisible();return summaryIsVisible||$scope.$emit("childErrorSummaryHide",+vm.nameAddendum),summaryIsVisible},vm.scrollTo=function(errorRecord){var hashId="";errorRecord&&(hashId=errorRecord.isSummary?"errors-summary-"+errorRecord.name:errorRecord.name,vm.expandRecord({index:errorRecord.exIndex}),$location.hash(hashId),$anchorScroll())},vm.selectVisibleTab=function(errorRecord){"errors-summary-"+errorRecord.name;vm.selectTab({index:errorRecord.tabId})},vm.isSummaryLink=function(errorRecord){return errorRecord.isSummary&&!angular.isDefined(errorRecord.toExpand)&&angular.isDefined(errorRecord.tabId)&&parseInt(errorRecord.tabId)<0},vm.isTabLink=function(errorRecord){return errorRecord.isSummary&&angular.isDefined(errorRecord.tabId)&&parseInt(errorRecord.tabId)>-1},vm.isExpanderLink=function(errorRecord){return angular.isDefined(errorRecord.toExpand)},$scope.$on("childErrorSummaryHide",function(event,data){if(_isErrorSummaryVisible())for(var errorSummaryBroadcastName=data.message,i=0;i<vm.errorArray.length;i++){var errorRecord=errorArray[i];errorRecord.isSummary&&errorRecord.name===errorSummaryBroadcastName&&vm.errorArray.splice(i,1)}}),vm.getErrorsSumm=function(myformErrors,name){vm.errorArray=[],vm.uniqueErrorList={},_getErr(myformErrors,vm.uniqueErrorList,name),console.log("vm.uniqueErrorList"),console.log(vm.uniqueErrorList);var newErrors=_sortErrorsByDomOrder();console.log("newErrors"),console.log(newErrors),angular.equals(vm.errorArray,newErrors)||(vm.errorArray=newErrors)},Array.prototype.move=function(from,to){to<0&&(to=0),to>=this.length&&(to=this.length-1),this.splice(to,0,this.splice(from,1)[0])}}angular.module("errorSummaryModule").component("cmpErrorSummary",{templateUrl:"app/scripts/components/error-summary/tpl-error-summary_20190321_1400.html",controller:errorSummaryController,controllerAs:"errSummaryCtrl",bindings:{formRef:"<",showErrors:"<",updateErrors:"<",nameSuffix:"@",formPreamble:"@",makeFocused:"<",setHeadingLevel:"@",exclusionList:"<",transcludeList:"<",formId:"<",aliasList:"<",expandRecord:"&",selectTab:"&"}}),errorSummaryController.$inject=["$scope","$location","$anchorScroll"]}(),function(){"use strict";angular.module("errorMessageModule",[])}(),function(){"use strict";function errorMessageController(){var vm=this;vm.field_name="",vm.form_ref=null,vm.fieldRecords=[],vm.$onChanges=function(changes){changes.fieldName&&(vm.field_name=changes.fieldName.currentValue),changes.formRef&&(vm.form_ref=changes.formRef.currentValue),changes.errorTypes&&(vm.fieldRecords=changes.errorTypes.currentValue)},vm.showErrorMessage=function(){return!!vm.form_ref&&(angular.isUndefined(vm.fieldName)?(console.warn("No field name for: "+vm.form_ref.$name),!1):angular.isUndefined(vm.form_ref[vm.fieldName])?(console.warn("lookup undefined "+vm.form_ref.$name+"."+vm.fieldName),!1):vm.showError()&&vm.form_ref[vm.fieldName].$invalid||vm.form_ref[vm.fieldName].$touched&&vm.form_ref[vm.fieldName].$invalid)}}angular.module("errorMessageModule").component("cmpErrorMessage",{templateUrl:"app/scripts/components/error-message/tpl-error-message_20190321_1400.html",controller:errorMessageController,controllerAs:"errMessageCtrl",bindings:{fieldName:"<",formRef:"<",showError:"&",errorTypes:"<"}})}(),function(){"use strict";angular.module("expandingTable",[])}(),function(){"use strict";function expandingTableCtrl($filter,$scope){function _setNumberColumns(){vm.disableErrorCol&&(vm.numberCols=vm.numberCols+1)}function _recalculateColumnDefs(colDefs,numCols){var caretWidth=2,errorWidth=5,totalWidth=caretWidth+errorWidth,toSubtract=totalWidth/numCols,result=[];if(vm.disableErrorCol)return colDefs;for(var i=0;i<numCols;i++){var oneDef=angular.copy(colDefs[i]);oneDef.width>toSubtract&&(oneDef.width=oneDef.width-toSubtract),result.push(oneDef)}return result}function updateTableRow(textIndex){var selectIndex=parseInt(textIndex);selectIndex>=0&&vm.selectTableRow(selectIndex)}function _createArray(arraySize,initialVal){for(var anArray=[],i=0;i<arraySize;i++)anArray.push(initialVal);return anArray}var vm=this;vm.focused=!1,vm.columnDefinitions={},vm.disableExpand=!1,vm.tableRowExpanded=!1,vm.tableRowIndexCurrExpanded="",vm.tableRowIndexPrevExpanded="",vm.numberCols=1,vm.disableErrorCol=!1,vm.dayDataCollapse=_createArray(0,!0),vm.formName="expandTblCtrl.transcludeForm",vm.$onInit=function(){vm.listItems&&(vm.dayDataCollapse=_createArray(vm.listItems.length,!0))},vm.getExpandedState=function(row){return row===vm.tableRowIndexCurrExpanded},vm.$onChanges=function(changes){if(changes.listItems&&(vm.listItems?vm.dayDataCollapse=_createArray(vm.listItems.length,!0):vm.dayDataCollapse=_createArray(0,!0),vm.resetTableRow()),changes.tname&&changes.tname.currentValue&&(vm.formName=changes.tname.currentValue),changes.resetToCollapsed&&(vm.resetTableRow(),changes.selectRecord||updateTableRow(vm.selectRecord)),changes.selectRecord){var selectIndex=parseInt(changes.selectRecord.currentValue);selectIndex>=0?vm.selectTableRow(selectIndex):vm.resetTableRow()}changes.disableSelection&&(vm.disableExpand=changes.disableSelection.currentValue),changes.columnDef&&(vm.numberCols=changes.columnDef.currentValue.length,vm.columnDefinitions=_recalculateColumnDefs(changes.columnDef.currentValue,vm.numberCols),_setNumberColumns()),changes.disableErrColumn&&(vm.disableErrorCol=changes.disableErrColumn.currentValue,vm.numberCols=vm.columnDef.length,vm.disableErrorCol=!0,_setNumberColumns())},vm.formInError=function(aForm){return aForm&&aForm.$invalid?"Y":"N"},vm.deletedRow=function(){vm.tableRowExpanded=!1,vm.tableRowIndexCurrExpanded=""},vm.resetTableRow=function(){vm.tableRowIndexPrevExpanded="",vm.tableRowExpanded=!1,vm.tableRowIndexCurrExpanded="",vm.listItems?vm.dayDataCollapse=_createArray(vm.listItems.length,!0):_createArray(0,!0)},vm.dayDataCollapseFn=function(){for(var i=0;vm.listItems.length-1;i+=1)vm.dayDataCollapse.append("true")},vm.selectTableRow=function(index){vm.disableExpand||("undefined"===vm.dayDataCollapse?vm.dayDataCollapse=vm.dayDataCollapseFn():vm.tableRowExpanded===!1&&""===vm.tableRowIndexCurrExpanded?(vm.tableRowIndexPrevExpanded="",vm.tableRowExpanded=!0,vm.tableRowIndexCurrExpanded=index,vm.dayDataCollapse[index]=!1):vm.tableRowExpanded===!0&&(vm.tableRowIndexCurrExpanded===index?(vm.tableRowExpanded=!1,vm.tableRowIndexCurrExpanded="",vm.dayDataCollapse[index]=!0):(vm.tableRowIndexPrevExpanded=vm.tableRowIndexCurrExpanded,vm.tableRowIndexCurrExpanded=index,vm.dayDataCollapse[vm.tableRowIndexPrevExpanded]=!0,vm.dayDataCollapse[vm.tableRowIndexCurrExpanded]=!1)))},vm.isRequiredRecordSet=function(){return!(!vm.isRequiredRecord||vm.isInternal)},vm.isRecordShowsOutside=function(row){return vm.isInternal?!vm.dayDataCollapse[row]:!(vm.dayDataCollapse[row]&&(!vm.transcludeForm[row]||vm.transcludeForm[row].$valid))||vm.isRequiredRecordSet();
},vm.isRecordShowsInside=function(row){return!vm.isInternal||!(vm.dayDataCollapse[row]&&vm.transcludeForm[row].$valid)}}angular.module("expandingTable").component("cmpExpandingTable",{templateUrl:"app/scripts/components/expandingTable/tpl-expanding-table_20190321_1400.html",controller:expandingTableCtrl,controllerAs:"expandTblCtrl",transclude:!0,bindings:{title:"@",preId:"@",listItems:"<",columnDef:"<",disableSelection:"<",isRequiredRecord:"<",isInternal:"<",selectRecord:"<",resetToCollapsed:"<",disableErrColumn:"@",tname:"@"}}),expandingTableCtrl.$inject=["$filter","$scope"]}(),function(){"use strict";angular.module("applicationInfo",["numberFormat","hpfbConstants","errorSummaryModule","errorMessageModule"])}(),function(){"use strict";function ApplInfoCtrl($scope,NEW_TYPE,AMEND_TYPE,APPROVED_TYPE,EXTERNAL_TYPE){function _setConfigItems(configJson){vm.fieldIdLabel=configJson.label,vm.fieldLength=configJson.fieldLength,vm.tagName=configJson.tagName,configJson.minFieldLength?vm.minFieldLength=configJson.minFieldLength:vm.minFieldLength=configJson.fieldLength,vm.errorMsg=configJson.errorMsg,configJson.minErrorMsg?vm.minErrorMsg=configJson.minErrorMsg:vm.minErrorMsg=configJson.errorMsg,configJson.isNumber&&(vm.isNumber=configJson.isNumber),vm.isDossier=configJson.isDossier,angular.isUndefined(vm.isDossier)&&(vm.isDossier=!1)}function _setIdNames(){var scopeId="_"+$scope.$id;vm.fieldId="fieldId"+scopeId,vm.reasonAmend="reasonAmend"+scopeId,vm.compId="company_id"+scopeId,vm.dossierId="dossier_id"+scopeId}var vm=this;vm.applTypes=[NEW_TYPE,AMEND_TYPE,APPROVED_TYPE],vm.formType=EXTERNAL_TYPE,vm.infoModel={applicationType:"NEW",enrolmentVersion:"0.0",dateSaved:"",reasonAmend:"",dossierType:""},vm.fieldIdLabel="",vm.minFieldLength="",vm.isNumber=!1,vm.fieldLength="",vm.tagName="fieldId",vm.setAsIncomplete=!0,vm.errorMsg="",vm.maxErrorMsg="",vm.isDossier=!1,vm.isNumber=!1,vm.isAmend=!1,vm.min6Error=[{type:"required",displayAlias:"MSG_ERR_MAND"},{type:"minlength",displayAlias:"MSG_LENGTH_MIN5"}],vm.min7Error=[{type:"required",displayAlias:"MSG_ERR_MAND"},{type:"minlength",displayAlias:"MSG_LENGTH_MIN5"},{type:"pattern",displayAlias:"MSG_FORMAT_CHAR_6DIGITS"}],vm.$onInit=function(){_setIdNames()},vm.$onChanges=function(changes){changes.userType&&(vm.formType=changes.userType.currentValue),changes.record&&(vm.infoModel=changes.record.currentValue,vm.infoModel.applicationType===AMEND_TYPE?vm.isAmend=!0:vm.infoModel.applicationType!==APPROVED_TYPE||vm.isEmpty(vm.infoModel.reasonAmend)?vm.isAmend=!1:vm.isAmend=!0),changes.isIncomplete&&(vm.setAsIncomplete=changes.isIncomplete.currentValue),changes.configureIdField&&_setConfigItems(changes.configureIdField.currentValue),changes.showErrorSummary&&(vm.showSummary=changes.showErrorSummary.currentValue,vm.updateErrorSummaryState())},vm.showAmendMsg=function(){return!!vm.record&&vm.record.applicationType===AMEND_TYPE},vm.showAmendButton=function(){return!vm.isHide},vm.isExtern=function(){return vm.formType===EXTERNAL_TYPE},vm.setAmendState=function(){vm.setType({type:AMEND_TYPE}),vm.isAmend=!0},vm.isEmpty=function(aValue){return"undefined"==typeof aValue||null===aValue||""===aValue},vm.showError=function(ctrl){return!!ctrl&&(ctrl.$invalid&&ctrl.$touched||vm.showSummary&&ctrl.$invalid)}}angular.module("applicationInfo").component("cmpApplicationInfo",{templateUrl:"app/scripts/components/applicationInfo/tpl-application-info_20190321_1400.html",controller:ApplInfoCtrl,controllerAs:"infoCtrl",bindings:{record:"<",userType:"<",isIncomplete:"<",isHide:"<",configureIdField:"<",setType:"&"}}),ApplInfoCtrl.$inject=["$scope","NEW_TYPE","AMEND_TYPE","APPROVED_TYPE","EXTERNAL_TYPE"]}(),function(){"use strict";angular.module("contactModule",["dataLists","hpfbConstants","errorMessageModule"])}(),function(){"use strict";function contactCtrl(getContactLists,ENGLISH,FRENCH,$scope){function _setIdNames(){var scopeId=vm.fldId+"_"+$scope.$id;vm.salutationId="salutation"+scopeId,vm.firstNameId="firstName"+scopeId,vm.lastNameId="lastName"+scopeId,vm.langCorrespondId="langCorrespond"+scopeId,vm.jobTitleId="jobTitle"+scopeId,vm.faxId="fax_number"+scopeId,vm.phoneNumberId="phoneNumber"+scopeId,vm.phoneExtId="phoneExt"+scopeId,vm.contactEmailId="contactEmail"+scopeId}var vm=this;vm.isEditable=!0,vm.ngModelOptSetting={updateOn:"blur"},vm.salutationList=getContactLists.getSalutationList(),vm.langCorresppond=[ENGLISH,FRENCH],vm.faxRequired=!1,vm.phoneReg=/\(?([0-9]{3})\)?([ .-]?)([0-9]{3})\2([0-9]{4})/,vm.contactModel={salutation:"",givenName:"",surname:"",initials:"",title:"",phone:"",phoneExt:"",fax:""},vm.inputModelOptions={updateOn:"blur"},vm.fldId="",vm.requiredOnly=[{type:"required",displayAlias:"MSG_ERR_MAND"}],vm.emailError=[{type:"required",displayAlias:"MSG_ERR_MAND"},{type:"email",displayAlias:"MSG_ERR_EMAIL_FORMAT"}],vm.phoneError=[{type:"required",displayAlias:"MSG_ERR_MAND"},{type:"pattern",displayAlias:"MSG_ERR_PHONE_FORMAT"}],vm.faxError=[{type:"required",displayAlias:"MSG_ERR_MAND"},{type:"pattern",displayAlias:"MSG_ERR_FAX_FORMAT"}],vm.$onInit=function(){vm.langList=[ENGLISH,FRENCH],_setIdNames()},vm.$onChanges=function(changes){changes.contactRecord&&(vm.contactModel=changes.contactRecord.currentValue),changes.isAmend&&(vm.isEditable=changes.isAmend.currentValue),changes.faxMandatory&&(vm.faxRequired=changes.faxMandatory.currentValue),changes.fieldSuffix&&(vm.fldId=changes.fieldSuffix.currentValue,vm.fldId||(vm.fldId=""))},vm.showError=function(ctrl){return!!ctrl&&!!(ctrl.$invalid&&ctrl.$touched||vm.showErrors()&&ctrl.$invalid)},$scope.$watch("contCtrl.contactForm.$error",function(){vm.updateErrorSummary()},!0)}angular.module("contactModule").component("cmpContactDetails",{templateUrl:"app/scripts/components/contactDetails/tpl-contact-details_20190321_1400.html",controller:contactCtrl,controllerAs:"contCtrl",bindings:{contactRecord:"<",onUpdate:"&",isAmend:"<",showErrors:"&",faxMandatory:"@",updateErrorSummary:"&",fieldSuffix:"<"}}),contactCtrl.$inject=["getContactLists","ENGLISH","FRENCH","$scope"]}(),function(){"use strict";angular.module("contactModule25",["contactModule","errorSummaryModule","errorMessageModule"])}(),function(){"use strict";function contactRecCtrl($scope){function _setIdNames(){var scopeId="_"+$scope.$id;vm.repContactFormId="rep_contact_form"+scopeId}var vm=this;vm.savePressed=!1,vm.formAmend=!1,vm.isContact=!0,vm.isNotEditable=!1,vm.contactModel={},vm.editState=!0,vm.updateSummary=0,vm.setSummaryFocus=0,vm.requiredOnly=[{type:"required",displayAlias:"MSG_ERR_MAND"}],vm.showSummary=!1,vm.$onInit=function(){_setIdNames(),vm.updateErrorSummaryState()},vm.updateErrorSummaryState=function(){vm.updateSummary=vm.updateSummary+1},vm.focusOnSummary=function(){vm.setSummaryFocus=vm.setSummaryFocus+1},vm.showRecordSummary=function(){return vm.savePressed||vm.showSummary},vm.$onChanges=function(changes){changes.contactRecord&&(vm.contactModel=angular.copy(changes.contactRecord.currentValue)),changes.isAmend&&(vm.formAmend=changes.isAmend.currentValue),changes.showErrorSummary&&(vm.showSummary=changes.showErrorSummary.currentValue,vm.updateErrorSummaryState())},vm["delete"]=function(){vm.onDelete({contactId:vm.contactModel.repRole})},vm.discardChanges=function(){if(!vm.contactRecForm.$pristine){var currRecord=vm.contactRecord;vm.contactModel=angular.copy(currRecord),vm.contactRecForm.$setPristine(),vm.isDetailValid({state:vm.contactRecForm.$valid}),vm.savePressed=!1}},vm.updateValid=function(){vm.isDetailValid({state:vm.contactRecForm.$valid&&!vm.contactRecForm.$dirty})},$scope.$watch("contactRec.contactRecForm.$dirty",function(){vm.contactRecForm.$dirty&&vm.isDetailValid({state:!1})},!0),vm.updateContactModel=function(){vm.contactRecForm.$valid?(vm.isDetailValid({state:!0}),vm.contactRecForm.$setPristine(),vm.onUpdate({contact:vm.contactModel}),vm.savePressed=!1,vm.errorSummaryUpdate()):(vm.savePressed=!0,vm.errorSummaryUpdate(),vm.updateErrorSummaryState(),vm.focusOnSummary())},vm.showErrors=function(){return vm.savePressed||vm.showSummary},vm.setEditableState=function(){vm.formAmend?vm.formAmend&&vm.contactModel.amend?vm.editState=!0:vm.editState=!1:vm.editState=!0},$scope.$watch("contactRec.contactRecForm.$error",function(){vm.updateErrorSummaryState()},!0)}angular.module("contactModule25").component("cmpRepContactRecord",{templateUrl:"app/scripts/components/rep-contact-record/tpl-rep-contact-record_20190321_1400.html",controller:contactRecCtrl,controllerAs:"contactRec",bindings:{contactRecord:"<",onUpdate:"&",onDelete:"&",isDetailValid:"&",isAmend:"<",errorSummaryUpdate:"&",showErrorSummary:"<"}}),contactRecCtrl.$inject=["$scope"]}(),function(){"use strict";angular.module("contactModule26",["contactModule25","expandingTable","repContactService"])}(),function(){"use strict";function contactListCtrl($filter,RepContactService){var vm=this;vm.selectRecord=-1,vm.isDetailValid=!0,vm.contactList=[],vm.oneRecord="",vm.isParentDirty=!1,vm.formAmend=!1,vm.resetCollapsed=!1;var repContactService=new RepContactService;vm.columnDef=[{label:"FIRSTNAME",binding:"givenName",width:"40"},{label:"LASTNAME",binding:"surname",width:"40"},{label:"ONE_ROLE",binding:"repRole",width:"20"}],vm.$onInit=function(){vm.focused=!1},vm.$onChanges=function(changes){changes.contacts&&(vm.contactList=changes.contacts.currentValue,vm.isDetailValid=!0,vm.updateErrorState()),changes.parentDirty&&(vm.isParentDirty=changes.parentDirty.currentValue),changes.isAmend&&(vm.formAmend=changes.isAmend.currentValue),changes.showErrorSummary&&(vm.showSummmary=changes.showErrorSummary.currentValue)},vm.isAddContact=function(){return!(vm.contactList.length>1)&&vm.isDetailValid},vm.showNoRecordError=function(isInvalid){return vm.isParentDirty&&isInvalid||vm.showListErrors()&&isInvalid},vm.setValid=function(value){vm.isDetailValid=value},vm.showError=function(){return vm.contactListForm.$invalid&&!vm.contactListForm.$pristine||vm.contactListForm.$invalid&&vm.showListErrors()},vm.onUpdateContactRecord=function(record){var idx=vm.contactList.indexOf($filter("filter")(vm.contactList,{repRole:record.repRole},!0)[0]);vm.contactList[idx]=angular.copy(record),vm.updateErrorState(),vm.contactListForm.$setPristine(),vm.resetCollapsed=!vm.resetCollapsed,vm.disableAdd()},vm.updateErrorState=function(){vm.contactList&&vm.contactList.length>0?vm.oneRecord="is value":vm.oneRecord=""},vm.deleteContact=function(cID){var idx=vm.contactList.indexOf($filter("filter")(vm.contactList,{repRole:cID},!0)[0]);if(vm.contactList.splice(idx,1),1===vm.contactList.length&&"PRIMARY"!==vm.contactList[0].repRole){vm.contactList[0].repRole="PRIMARY";var temp=angular.copy(vm.contactList);vm.contactList=[],vm.contactList=temp}vm.updateErrorState(),vm.disableAdd(),vm.setValid(!0),vm.selectRecord=-1,vm.resetCollapsed=!vm.resetCollapsed},vm.addContact=function(){var defaultContact=repContactService.createRepContact(vm.contactList);vm.contactList.push(defaultContact),vm.selectRecord=vm.contactList.length-1,vm.setValid(!1)},vm.disableAdd=function(){if(!vm.contactList)return!1;var isInvalid=!vm.isDetailValid||2==vm.contactList.length||vm.contactList.length>0&&vm.contactListForm.$invalid;return isInvalid}}angular.module("contactModule26").component("cmpRepContactList",{templateUrl:"app/scripts/components/repContactList/tpl-rep-contact-list_20190321_1400.html",controller:contactListCtrl,controllerAs:"contactListCtrl",bindings:{contacts:"<",showListErrors:"&",parentDirty:"<",isAmend:"<",showErrorSummary:"<"}}),contactListCtrl.$inject=["$filter","RepContactService"]}(),function(){"use strict";angular.module("fileIO",[])}(),function(){"use strict";function ngFileSelect(hpfbFileReader){function link(scope,element,attrs){scope.rootTag=attrs.rootTag,element.bind("change",function(e){scope.file=(e.srcElement||e.target).files[0],hpfbFileReader.readAsDataText(scope.file,scope).then(function(result){scope.hpfbFileSelect({fileContent:result})})})}var directive={link:link,restrict:"A",scope:{hpfbFileSelect:"&"}};return directive}angular.module("fileIO").directive("hpfbFileSelect",ngFileSelect),ngFileSelect.$inject=["hpfbFileProcessing"]}(),function(){"use strict";function FileSelectController(hpfbFileProcessing){var vm=this;vm.fileTypes=".xml, .hcsc",vm.modelCallback=function(fileContent){vm.status="",fileContent&&(vm.status=fileContent.messages),vm.updateModelRoot({fileContent:fileContent}),angular.element(fileLoad).trigger("focus")}}angular.module("fileIO").component("hpfbFileSelect",{templateUrl:"app/scripts/components/fileIO/fileSelect_20190321_1400.html",controller:FileSelectController,bindings:{updateModelRoot:"&",rootElem:"@"}}),FileSelectController.$inject=["hpfbFileProcessing"]}(),function(){"use strict";function FileWriteController(hpfbFileProcessing){function _generateFile(){"JSON"===vm.saveType.toUpperCase()?hpfbFileProcessing.writeAsJson(vm.jsonToSave,vm.fileName,vm.rootTag):"XML"===vm.saveType.toUpperCase()&&hpfbFileProcessing.writeAsXml(vm.jsonToSave,vm.fileName,vm.rootTag)}function _init(){vm.buttonDisabled?"true"===vm.buttonDisabled.toLowerCase()?vm.buttonDisabled=!0:"false"===vm.buttonDisabled.toLowerCase()?vm.buttonDisabled=!1:vm.buttonDisabled=!1:vm.buttonDisabled=!1}var vm=this;vm.$onInit=_init,vm.generate=_generateFile}angular.module("fileIO").component("hpfbFileSave",{templateUrl:"app/scripts/components/fileIO/fileSave_20190321_1400.html",controller:FileWriteController,bindings:{jsonToSave:"<",rootTag:"@",saveType:"@",buttonLabel:"@",buttonDisabled:"@"}}),FileWriteController.$inject=["hpfbFileProcessing"]}(),function(){"use strict";function fileReader($q){function onLoad(reader,deferred,scope,file){return function(){scope.$apply(function(){if(file){var splitFile=file.name.split("."),fileType=splitFile[splitFile.length-1];fileType.toLowerCase()==draft_file_type?(convertToJSONObjects(reader,scope),checkRootTagMatch(reader,scope)):"xml"===fileType.toLowerCase()?(convertXMLToJSONObjects(reader,scope),checkRootTagMatch(reader,scope)):(convertResult.parseResult=null,convertResult.messages=msg_err_fileType,reader.parseResult=convertResult)}deferred.resolve(reader.parseResult)})}}function onError(reader,deferred,scope){return function(){scope.$apply(function(){deferred.reject(msg_err_load)})}}function getReader(deferred,scope,file){var reader=new FileReader;return reader.onload=onLoad(reader,deferred,scope,file),reader.onError=onError(reader,deferred,scope),reader.parseResult=null,reader}function readAsDataText(file,scope){var deferred=$q.defer(),reader=getReader(deferred,scope,file);return file?reader.readAsText(file):(reader.parseResult=convertResult,reader.parseResult.messages="",reader.parseResult.jsonResult=null,deferred.resolve(reader.parseResult)),deferred.promise}function convertToJSONObjects(reader,scope){try{convertResult.jsonResult=JSON.parse(reader.result),convertResult.jsonResult[scope.rootTag].importFileType=draft_file_type,convertResult.messages=msg_success,reader.parseResult=convertResult}catch(e){convertResult.jsonResult=null,convertResult.messages=msg_err_jsonparse,reader.parseResult=convertResult}}function convertXMLToJSONObjects(reader,scope){var xmlConfig={escapeMode:!0,emptyNodeForm:"text",useDoubleQuotes:!0},xmlConverter=new X2JS(xmlConfig);convertResult.jsonResult=xmlConverter.xml_str2json(reader.result),convertResult.jsonResult&&convertResult.jsonResult[scope.rootTag]?(convertResult.messages=msg_success,convertResult.jsonResult[scope.rootTag].importFileType="xml"):convertResult.messages=msg_err_xmlparse,reader.parseResult=convertResult}function convertJSONObjectsToXML(jsonObj){var xmlConfig={escapeMode:!0,emptyNodeForm:"text",useDoubleQuotes:!0},jsonConverter=new X2JS(xmlConfig),xmlResult=null;return xmlResult=jsonConverter.json2xml_str(jsonObj)}function checkRootTagMatch(reader,scope){scope.rootTag&&reader.parseResult&&reader.parseResult.jsonResult&&(reader.parseResult.jsonResult[scope.rootTag]||(reader.parseResult.jsonResult=null,reader.parseResult.messages=msg_err_formType))}function jsonToFile(jsonObj,fileName,rootTag){if(jsonObj){var makeStrSave=JSON.stringify(jsonObj),blob=new Blob([makeStrSave],{type:"text/plain;charset=utf-8"});fileName?fileName+="."+draft_file_type:fileName="hpfbDraft."+draft_file_type,saveAs(blob,fileName)}}function xmlToFile(jsonObj,fileName,rootTag,xslName){if(jsonObj){var xmlResult=convertJSONObjectsToXML(jsonObj);xmlResult=xslName?'<?xml version="1.0" encoding="UTF-8"?><?xml-stylesheet  type="text/xsl" href="'+xslName+'"?>'+xmlResult:'<?xml version="1.0" encoding="UTF-8"?><?xml-stylesheet  type="text/xsl" href="REP_Combined.xsl"?>'+xmlResult;var blob=new Blob([xmlResult],{type:"text/plain;charset=utf-8"});fileName?fileName+=".xml":fileName="hpfbXML.xml",saveAs(blob,fileName)}}var msg_success="MSG_SUCCESS_LOAD",msg_err_jsonparse="MSG_ERR_JSONPARSE",msg_err_xmlparse="MSG_ERR_XMLPARSE",msg_err_load="MSG_ERR_FILE_LOAD",msg_err_fileType="MSG_ERR_FILE_TYPE",msg_err_formType="MSG_ERR_FORM_TYPE",draft_file_type="hcsc",convertResult={jsonResult:"",messages:""},service={readAsDataText:readAsDataText,writeAsJson:jsonToFile,writeAsXml:xmlToFile};return service}angular.module("fileIO").factory("hpfbFileProcessing",fileReader),fileReader.$inject=["$q"]}(),function(){"use strict";angular.module("nonMedIngRecordModule",["dossierDataLists","hpfbConstants","ui.select","errorSummaryModule","errorMessageModule"])}(),function(){"use strict";function nonMedIngRecCtrl(DossierLists,$scope,$translate,OTHER,YES){function _setIdNames(){var scopeId="_"+$scope.$id;vm.variantId="variant_name"+scopeId,vm.nmiFormId="nmiRecordForm"+scopeId,vm.ingredName="ing_name"+scopeId,vm.casId="cas"+scopeId,vm.standardId="standard"+scopeId,vm.strengthId="strength"+scopeId,vm.strengthData1Id=scopeId,vm.strengthData2Id="strength_data2"+scopeId,vm.unitsId="units"+scopeId,vm.otherUnitsId="other_units"+scopeId,vm.perMeasureUnitId="unit_measure"+scopeId,vm.perMeasureOtherUnitId="other_unit_measure"+scopeId,vm.perId="per_strength"+scopeId,vm.presentationId="unit_presentation"+scopeId,vm.isNanoMaterialId="is_nano_material"+scopeId,vm.nanoId="nano_material"+scopeId,vm.nanoOtherId="nano_material_other"+scopeId,vm.asBaseId="calculated_as_base"+scopeId,vm.animalHumanSrcId="animal_human_sourced"+scopeId}var vm=this;vm.nanoMaterialList=DossierLists.getNanoMaterials(),vm.yesNoList=DossierLists.getYesNoList(),vm.unitsList=DossierLists.getUnitsList(),vm.strengthList=DossierLists.getStrengthList(),vm.perList=DossierLists.getPerList(),vm.presentationList=DossierLists.getDosageFormList(),vm.lang=$translate.proposedLanguage()||$translate.use(),vm.requiredOnly=[{type:"required",displayAlias:"MSG_ERR_MAND"}],vm.numberMinError=[{type:"required",displayAlias:"MSG_ERR_MAND"},{type:"min",displayAlias:"MSG_ERR_INVALID_NUM_MIN0"},{type:"number",displayAlias:"MSG_ERR_INVALID_NUM"}],vm.numberMinLowerError=[{type:"required",displayAlias:"MSG_ERR_MAND"},{type:"min",displayAlias:"MSG_ERR_INVALID_NUM_MIN_LOWER"},{type:"number",displayAlias:"MSG_ERR_INVALID_NUM"}],vm.ingModel={varId:"",ingName:"",cas:"",standard:"",strength:{operator:"",data1:null,data2:null},units:"",otherUnits:"",per:"",unitsPresentation:"",perMeasureUnits:"",perMeasureOtherUnits:"",calcAsBase:"",isNano:"",nanoMaterial:"",nanoMaterialOther:"",humanAnimalSourced:""},vm.strengthData1Title="",vm.exclusions={},vm.alias={},vm.updateSummary=0,vm.showSummary=!1,vm.$onInit=function(){vm.savePressed=!1,vm.backup=angular.copy(vm.ingModel),_setIdNames(),vm.summaryName="cmp-non-med-ing-record_"+vm.recordIndex},vm.$onChanges=function(changes){changes.record&&changes.record.currentValue&&(vm.ingModel=angular.copy(changes.record.currentValue)),changes.showErrorSummary&&(vm.showSummary=changes.showErrorSummary.currentValue,vm.updateErrorSummaryState()),changes.errorSummaryUpdate&&vm.updateErrorSummaryState(),changes.recordIndex&&(vm.summaryName="cmp-non-med-ing-record_"+vm.recordIndex.currentValue)},vm.saveIng=function(){vm.nonMedIngForm.$valid?(vm.record?vm.onUpdate({ing:vm.ingModel}):vm.onAddIng({ing:vm.ingModel}),vm.nonMedIngForm.$setPristine(),vm.showSummary=!1,vm.updateErrorSummaryState()):(vm.showSummary=!0,vm.makeFocused(),vm.updateErrorSummaryState())},vm.makeFocused=function(){vm.focusSummary=vm.focusSummary+1},vm.discardChanges=function(){vm.ingModel=angular.copy(vm.backup),vm.nonMedIngForm.$setPristine(),vm.updateErrorSummaryState(),vm.onCancel()},vm["delete"]=function(){vm.record&&vm.onDelete()},vm.isAnimalHumanSourced=function(){return!!vm.ingModel&&vm.ingModel.humanAnimalSourced===YES},vm.copy=function(){var ingredientCopy=angular.copy(vm.ingModel);vm.onAddIng({ing:ingredientCopy})},vm.showError=function(ctrl){return!!ctrl&&(ctrl.$invalid&&ctrl.$touched||ctrl.$invalid&&vm.showSummary)},vm.isNanoOther=function(){return vm.ingModel.nanoMaterial.id===DossierLists.getOtherValue()||(vm.ingModel.nanoMaterialOther="",!1)},vm.isUnitsOther=function(){return!(!vm.ingModel||!vm.ingModel.units)&&(vm.ingModel.units.id===OTHER||(vm.ingModel.otherUnits="",!1))},vm.updateErrorSummaryState=function(){vm.updateSummary=vm.updateSummary+1},$scope.$watch("nIngRecCtrl.nonMedIngForm.$dirty",function(){vm.isDetailValid({state:!vm.nonMedIngForm.$dirty})},!0),vm.strengthSelectionUpdated=function(){if(""!==vm.ingModel.strength.operator.id)switch(vm.ingModel.strength.operator.id){case"EQ":vm.strengthData1Title="EQUALS";break;case"NGT":vm.strengthData1Title="NOT_GREAT_THAN";break;case"NLT":vm.strengthData1Title="NOT_LESS_THAN";break;case"RA":vm.strengthData1Title="RANGE_LOWER_LIMIT"}},vm.isPerPresentation=function(){return"UP"===vm.ingModel.per.id},vm.isPerMeasure=function(){return"UM"===vm.ingModel.per.id},vm.isStrengthSet=function(){var isSet=!1;if(void 0!==vm.ingModel.strength.operator.id&&""!==vm.ingModel.strength.operator.id){switch(isSet=!0,vm.ingModel.strength.operator.id){case"EQ":vm.strengthData1Title="EQUALS";break;case"NGT":vm.strengthData1Title="NOT_GREAT_THAN";break;case"NLT":vm.strengthData1Title="NOT_LESS_THAN";break;case"RA":vm.strengthData1Title="RANGE_LOWER_LIMIT"}vm.strengthData1Id="strength_"+vm.strengthData1Title+"_"+$scope.$id}return isSet},vm.isMeasureUnitsOther=function(){return!(!vm.ingModel||!vm.ingModel.perMeasureUnits)&&(vm.ingModel.perMeasureUnits.id===OTHER||(vm.ingModel.perMeasureOtherUnits="",!1))},vm.isRange=function(){return"RA"===vm.ingModel.strength.operator.id},vm.isNanoMaterial=function(){return vm.ingModel.isNano===YES},vm.unitsChange=function(){for(var found=!1,i=0;i<vm.unitsList.length;i++){var option=vm.unitsList[i];if(option[vm.lang]===vm.ingModel.unitsHtml){vm.ingModel.units=option,found=!0;break}}if(!found)for(var i=0;i<vm.unitsList.length;i++){var option=vm.unitList[i];if(option.id===vm.ingModel.units.id){vm.ingModel.unitsHtml=option[vm.lang];break}}},vm.perMeasUnitsChange=function(){for(var found=!1,i=0;i<vm.unitsList.length;i++){var option=vm.unitsList[i];if(option[vm.lang]===vm.ingModel.perMeasUnitsHtml){vm.ingModel.perMeasUnits=option,found=!0;break}}if(!found)for(var i=0;i<vm.unitsList.length;i++){var option=vm.unitsList[i];if(option.id===vm.ingModel.perMeasUnits.id){vm.ingModel.perMeasUnitsHtml=option[vm.lang];break}}}}angular.module("nonMedIngRecordModule").component("cmpNonMedIngRecord",{templateUrl:"app/scripts/components/formulations/tpl-non-med-ing-record_20190321_1400.html",controllerAs:"nIngRecCtrl",controller:nonMedIngRecCtrl,bindings:{deleteBtn:"<",record:"<",showErrors:"&",onAddIng:"&",onUpdate:"&",onDelete:"&",onCancel:"&",isDetailValid:"&",recordIndex:"<",errorSummaryUpdate:"<",showErrorSummary:"<"}}),nonMedIngRecCtrl.$inject=["DossierLists","$scope","$translate","OTHER","YES"]}(),function(){"use strict";angular.module("nonMedIngListModule",["expandingTable","nonMedIngRecordModule"])}(),function(){"use strict";function nonMedIngListCtrl(){function setRecord(value){vm.selectRecord=value}var vm=this;vm.isDetailValid=!0,vm.selectRecord=-1,vm.resetToCollapsed=!1,vm.newIngFormShown=!1,vm.$onInit=function(){vm.newIngFormShown=!1,vm.isDetailValid=!0,vm.selectRecord=-1,vm.colNames=[{label:"VARIANT_NAME",binding:"varId",width:"15"},{label:"NONMEDICINAL_INGREDIENT",binding:"ingName",width:"65"},{label:"CAS_NUM",binding:"cas",width:"15"},{label:"HUMAN_ANIMAL_SOURCE",binding:"humanAnimalSourced",width:"10"}],vm.ingList=[],vm.ingredients&&(vm.ingList=vm.ingredients)},vm.addIng=function(ing){vm.setValid(!0),vm.ingList.push(ing),vm.newIngFormShown=!1,vm.resetToCollapsed=!vm.resetToCollapsed,vm.onUpdate({list:vm.ingList}),setRecord(-1)},vm.updateIng=function(idx,ing){vm.ingList[idx]=angular.copy(ing),vm.onUpdate({list:vm.ingList}),vm.setValid(!0)},vm.deleteIng=function(idx){vm.ingList.splice(idx,1),vm.onUpdate({list:vm.ingList}),vm.setValid(!0),setRecord(-1),vm.resetToCollapsed=!vm.resetToCollapsed},vm.addNewIngredientState=function(){return vm.resetToCollapsed=!vm.resetToCollapsed,vm.newIngFormShown=!0,vm.unitsHtml="",vm.perMeasureUnitsHtml="",vm.setValid(!1),vm.newIngFormShown},vm.addNewDisabled=function(){return vm.newIngFormShown||!vm.isDetailValid},vm.setValid=function(value){vm.isDetailValid=value},vm.onNewCancel=function(){vm.setValid(!0),vm.newIngFormShown=!1}}angular.module("nonMedIngListModule").component("cmpNonMedIngList",{templateUrl:"app/scripts/components/formulations/tpl-non-med-ing-list_20190321_1400.html",controller:nonMedIngListCtrl,controllerAs:"nmilCtrl",bindings:{ingredients:"<",onUpdate:"&",errorSummaryUpdate:"<",showErrorSummary:"<"}})}(),function(){"use strict";angular.module("materialIngRecordModule",["dossierDataLists","errorSummaryModule","errorMessageModule"])}(),function(){"use strict";function materialIngRecCtrl(DossierLists,$scope){function _setIdNames(){var scopeId="_"+$scope.$id;vm.materialFormId="materialRecordForm"+scopeId,vm.nameId="material_name"+scopeId,vm.casId="cas_num"+scopeId,vm.standardId="standard"+scopeId,vm.inFinalId="in_final_container"+scopeId}var vm=this;vm.yesNoList=DossierLists.getYesNoList(),vm.requiredOnly=[{type:"required",displayAlias:"MSG_ERR_MAND"}],vm.updateSummary=0,vm.showSummary=!1,vm.focusSummary=0,vm.$onInit=function(){vm.mirModel={},vm.showSummary=!1,vm.summaryName="cmp-material-ing-record_"+vm.recordIndex,_setIdNames(),vm.record&&(vm.mirModel=vm.record),vm.backup=angular.copy(vm.mirModel)},vm.$onChanges=function(changes){changes.showErrorSummary&&(vm.showSummary=changes.showErrorSummary.currentValue,vm.updateErrorSummaryState()),changes.errorSummaryUpdate&&vm.updateErrorSummaryState()},vm.showError=function(ctrl){return!!ctrl&&(ctrl.$invalid&&ctrl.$touched||vm.showSummary&&ctrl.$invalid)},vm.save=function(){vm.materialIngRecordForm.$valid?(vm.record?(vm.onUpdate({ing:vm.mirModel}),vm.materialIngRecordForm.$setPristine()):vm.onAddNew({ing:vm.mirModel}),vm.materialIngRecordForm.$setPristine(),vm.showSummary=!1):(vm.showSummary=!0,vm.makeFocused(),vm.updateErrorSummaryState())},vm.makeFocused=function(){vm.focusSummary=vm.focusSummary+1},vm.discardChanges=function(){vm.mirModel=angular.copy(vm.backup),vm.materialIngRecordForm.$setPristine(),vm.onCancel()},vm["delete"]=function(){vm.record&&vm.onDelete()},$scope.$watch("mirCtrl.materialIngRecordForm.$dirty",function(){vm.isDetailValid({state:!vm.materialIngRecordForm.$dirty})},!0),vm.updateErrorSummaryState=function(){vm.updateSummary=vm.updateSummary+1}}angular.module("materialIngRecordModule").component("cmpMaterialIngRecord",{templateUrl:"app/scripts/components/formulations/tpl-material-ing-record_20190321_1400.html",controllerAs:"mirCtrl",controller:materialIngRecCtrl,bindings:{deleteBtn:"<",record:"<",showErrors:"&",onAddNew:"&",onUpdate:"&",onDelete:"&",onCancel:"&",isDetailValid:"&",recordIndex:"<",errorSummaryUpdate:"<",showErrorSummary:"<"}}),materialIngRecCtrl.$inject=["DossierLists","$scope"]}(),function(){"use strict";angular.module("materialIngListModule",["expandingTable","materialIngRecordModule"])}(),function(){"use strict";function materialIngListCtrl(){function setRecord(value){vm.selectRecord=value}var vm=this;vm.isDetailValid=!0,vm.selectRecord=-1,vm.resetToCollapsed=!1,vm.newIngFormShown=!1,vm.colNames=[{label:"MATERIAL_NAME",binding:"ingredientName",width:"70",isHtml:"true"},{label:"CAS_NUM",binding:"cas",width:"15",isHtml:"true"},{label:"PRESENT_IN_FINAL",binding:"inFinalContainer",width:"15"}],vm.$onInit=function(){vm.newIngFormShown=!1,vm.isDetailValid=!0,vm.selectRecord=-1,vm.ingList=[],vm.ingredients&&(vm.ingList=vm.ingredients)},vm.$onChanges=function(changes){changes.ingredients&&(vm.ingList=changes.ingredients.currentValue),changes.isFileLoaded&&changes.isFileLoaded.currentValue&&(vm.newIngFormShown=!1)},vm.$postLink=function(){vm.isFileLoaded||vm.addNewIngredientState()},vm.addNew=function(ing){vm.setValid(!0),vm.ingList.push(ing),vm.newIngFormShown=!1,vm.resetToCollapsed=!vm.resetToCollapsed,vm.onUpdate({list:vm.ingList}),setRecord(-1)},vm.updateIng=function(idx,ing){vm.ingList[idx]=angular.copy(ing),vm.onUpdate({list:vm.ingList}),vm.setValid(!0)},vm.deleteIng=function(idx){vm.ingList.splice(idx,1),vm.onUpdate({list:vm.ingList}),vm.setValid(!0),setRecord(-1),vm.resetToCollapsed=!vm.resetToCollapsed},vm.addNewIngredientState=function(){return vm.resetToCollapsed=!vm.resetToCollapsed,vm.newIngFormShown=!0,vm.setValid(!1),vm.newIngFormShown},vm.addNewDisabled=function(){return vm.newIngFormShown||!vm.isDetailValid},vm.setValid=function(value){vm.isDetailValid=value},vm.onNewCancel=function(){vm.setValid(!0),vm.newIngFormShown=!1}}angular.module("materialIngListModule").component("cmpMaterialIngList",{templateUrl:"app/scripts/components/formulations/tpl-material-ing-list_20190321_1400.html",controller:materialIngListCtrl,controllerAs:"milCtrl",bindings:{ingredients:"<",onUpdate:"&",errorSummaryUpdate:"<",isFileLoaded:"<",showErrorSummary:"<"}})}(),function(){"use strict";angular.module("formulationRecordModule",["activeIngListModule","nonMedIngListModule","containerTypeListModule","materialIngListModule","roaListModule","countryListModule","dossierDataLists","hpfbConstants","ui.select","errorSummaryModule","errorMessageModule","alertModule"])}(),function(){"use strict";function formulationRecCtrl(DossierLists,$translate,$scope,FRENCH){function _setIdNames(){var scopeId="_"+$scope.$id;vm.formulationFormRecordId="formulationRecord"+scopeId,vm.dosageId="dosage_form"+scopeId,vm.dosageOtherId="dosage_form_other"+scopeId,vm.noActiveId="no_active"+scopeId,vm.noContainerId="no_container"+scopeId,vm.noRoaId="no_roa"+scopeId,vm.noCountryId="no_country"+scopeId,vm.isAnimalHumanMaterialId="is_animal_human_material"+scopeId}var vm=this;vm.noCountries="",vm.noROAValues="",vm.noActiveValues="",vm.dosageFormList=DossierLists.getDosageFormList(),vm.otherValue=DossierLists.getDosageOther(),vm.yesNoList=DossierLists.getYesNoList(),vm.updateSummary=0,vm.showSummary=!1,vm.alerts=[!1,!1,!1,!1],vm.summaryName="",vm.requiredOnly=[{type:"required",displayAlias:"MSG_ERR_MAND"}],vm.lang=$translate.proposedLanguage()||$translate.use(),vm.frmModel={isAnimalHumanMaterial:""},vm.exclusions={"ingRecCtrl.activeIngForm":"true","nIngRecCtrl.nonMedIngForm":"true","mirCtrl.materialIngRecordForm":"true","ctrCtrl.containerTypeForm":"true"},vm.alias={no_country:{type:"elementnoid",target:"list_country"},no_roa:{type:"element",target:"list_roa"},no_active:{type:"element",target:"list_active"},no_container:{type:"element",target:"list_container"}},vm.transcludeList={},vm.$onInit=function(){_setIdNames(),vm.noCountry()},vm.$onChanges=function(changes){changes.record&&(vm.frmModel=changes.record.currentValue,vm.summaryName="cmp-formulation-record_"+(vm.frmModel.formulationId-1)),changes.showErrorSummary&&(vm.showSummary=changes.showErrorSummary.currentValue,vm.updateErrorSummaryState()),changes.errorSummaryUpdate&&vm.updateErrorSummaryState()},vm["delete"]=function(){vm.record&&vm.onDelete()},vm.copy=function(){if(vm.record){var formulationCopy=angular.copy(vm.record);vm.addCopy({record:formulationCopy})}},vm.showError=function(isInvalid,isTouched){return isInvalid&&isTouched||isInvalid&&vm.showSummary},vm.noCountry=function(){return vm.frmModel?vm.frmModel.countryList&&0!==vm.frmModel.countryList.length?(vm.noCountries=vm.frmModel.countryList.length,
!1):(vm.noCountries="",!0):(vm.noCountries="",!1)},vm.noROA=function(){return vm.frmModel?vm.frmModel.routeAdmins&&0!==vm.frmModel.routeAdmins.length?(vm.noROAValues="values",!1):(vm.noROAValues="",!0):(vm.noROAValues="",!1)},vm.noContainers=function(){return vm.frmModel&&vm.frmModel.containerTypes&&0!==vm.frmModel.containerTypes.length?(vm.noContainerValues="values",!1):(vm.noContainerValues="",!0)},vm.updateActiveIngList=function(list){list&&(vm.frmModel.activeIngList=list,vm.recordChanged())},vm.updateNonMedIngList=function(list){list&&(vm.frmModel.nMedIngList=list,vm.recordChanged())},vm.updateContainerTypeList=function(list){list&&(vm.frmModel.containerTypes=list)},vm.updateMaterialList=function(list){list&&(vm.frmModel.animalHumanMaterials=list,vm.recordChanged())},vm.updateRoaList=function(list){list&&(vm.frmModel.routeAdmins=list)},vm.updateCountryList=function(list){list&&(vm.frmModel.countryList=list,vm.noCountry())},vm.isDosageOther=function(){return!(!vm.frmModel||!vm.frmModel.dosageForm)&&(vm.frmModel.dosageForm.id===vm.otherValue||(vm.frmModel.dosageFormOther="",!1))},vm.updateErrorSummaryState=function(){vm.updateSummary=vm.updateSummary+1},vm.addInstruct=function(value){angular.isUndefined(value)||value<vm.alerts.length&&(vm.alerts[value]=!0)},vm.closeAlert=function(value){angular.isUndefined(value)||value<vm.alerts.length&&(vm.alerts[value]=!1)},vm.isFrench=function(){return vm.lang===FRENCH},vm.dosageFormChange=function(){for(var found=!1,i=0;i<vm.dosageFormList.length;i++){var option=vm.dosageFormList[i];if(option[vm.lang]===vm.frmModel.dosageFormHtml){vm.frmModel.dosageForm=option,found=!0;break}}if(!found)for(var i=0;i<vm.dosageFormList.length;i++){var option=vm.dosageFormList[i];if(option.id===vm.frmModel.dosageForm.id){vm.frmModel.dosageFormHtml=option[vm.lang];break}}},$scope.$watch("formulRecCtrl.formulationForm.$error",function(){vm.updateErrorSummary()},!0)}angular.module("formulationRecordModule").config(function(uiSelectConfig){uiSelectConfig.theme="select2"}).component("cmpFormulationRecord",{templateUrl:"app/scripts/components/formulations/tpl-formulation-record_20190321_1400.html",controllerAs:"formulRecCtrl",controller:formulationRecCtrl,bindings:{deleteBtn:"<",record:"<",onUpdate:"&",onDelete:"&",onCancel:"&",showErrors:"&",recordChanged:"&",addCopy:"&",errorSummaryUpdate:"<",isFileLoaded:"<",showErrorSummary:"<",updateErrorSummary:"&"}}),formulationRecCtrl.$inject=["DossierLists","$translate","$scope","FRENCH"]}(),function(){"use strict";angular.module("formulationsModule",["expandingTable","formulationRecordModule","errorSummaryModule"])}(),function(){"use strict";function formulationsCtrl($scope){function resetMe(){vm.resetToCollapsed=!vm.resetToCollapsed}function getMaxFormulationId(){var out=0,list=vm.formulationList;if(list)for(var i=0;i<list.length;i++)parseInt(list[i].formulationId)>out&&(out=parseInt(list[i].formulationId));return out}var vm=this;vm.isDetailValid=!0,vm.selectRecord=-1,vm.resetToCollapsed=!1,vm.noFormulations="",vm.updateSummary=0,vm.showSummary=!1,vm.requiredFlag=!0,vm.exclusions={},vm.transcludeList={"cmp-formulation-record":"true"},vm.alias={no_formulation:{type:"element",target:"list_formulation"}},vm.$onInit=function(){vm.newFormShown=!1,vm.formulationListId="formulation-list-form",vm.colNames=[{label:"FORM_ID",binding:"formulationId",width:"15",isHtml:"true"},{label:"FORMULATION_NAME",binding:"formulationName",width:"85",isHtml:"true"}],vm.formulationList=[],vm.formulations&&(vm.formulationList=vm.formulations),vm.updateFormulationsError()},vm.$onChanges=function(changes){changes.formulations&&(vm.formulationList=changes.formulations.currentValue,vm.updateFormulationsError()),changes.showErrorSummary&&(vm.showSummary=changes.showErrorSummary.currentValue,vm.updateErrorSummaryState()),changes.errorSummaryUpdate&&vm.updateErrorSummaryState(),changes.isFileLoaded&&changes.isFileLoaded.currentValue&&(vm.requiredFlag=!1)},vm.$postLink=function(){vm.addNew()},vm.addNew=function(){var newRecord={formulationId:getMaxFormulationId()+1,formulationName:"",dosageForm:"",dosageFormHtml:"",dosageFormOther:"",activeIngList:[],nMedIngList:[],containerTypes:[],isAnimalHumanMaterial:"",animalHumanMaterials:[],routeAdmins:[],countryList:[]};vm.formulationList.push(newRecord),vm.setRecord(vm.formulationList.length-1),vm.resetToCollapsed=!vm.resetToCollapsed,vm.updateFormulationsError()},vm.addCopy=function(formulation){formulation&&(formulation.formulationId=getMaxFormulationId()+1,vm.formulationList.push(formulation),vm.requiredFlag=!1,vm.setRecord(-1))},vm.update=function(idx,frm){vm.formulationList[idx]=angular.copy(frm)},vm.updateFormulationRecord=function(){vm.recordChanged(),vm.requiredFlag=!1},vm["delete"]=function(idx){vm.formulationList.splice(idx,1)&&vm.setRecord(-1),vm.resetToCollapsed=!vm.resetToCollapsed,vm.updateFormulationsError(),vm.requiredFlag=!1},vm.updateFormulationsError=function(){return vm.formulationList&&vm.formulationList.length>0?(vm.noFormulations=vm.formulationList.length,!1):(vm.noFormulations="",!0)},vm.updateErrorSummaryState=function(){vm.updateSummary=vm.updateSummary+1},vm.setRecord=function(value){resetMe(),vm.selectRecord=-1,vm.selectRecord=value},$scope.$watch("formulCtrl.formulationsForm.$error",function(){vm.updateErrorSummary()},!0)}angular.module("formulationsModule").component("cmpFormulations",{templateUrl:"app/scripts/components/formulations/tpl-formulation-list_20190321_1400.html",controller:formulationsCtrl,controllerAs:"formulCtrl",bindings:{formulations:"<",recordChanged:"&",errorSummaryUpdate:"<",showErrorSummary:"<",isFileLoaded:"<",updateErrorSummary:"&"}}),formulationsCtrl.$inject=["$scope"]}(),function(){"use strict";angular.module("containerTypeRecordModule",["dossierDataLists","hpfbConstants","errorSummaryModule","errorMessageModule"])}(),function(){"use strict";function containerTypeRecCtrl(DossierLists,$scope,FRENCH){function _setIdNames(){var scopeId="_"+$scope.$id;vm.containerFormId="containerRecordForm"+scopeId,vm.containerTypeId="container_type"+scopeId,vm.packageSizeId="package_size"+scopeId,vm.shelfLifeUnitId="shelf_life_unit"+scopeId,vm.shelfLifeNumberId="shelf_life_number"+scopeId,vm.tempMinId="min_temp"+scopeId,vm.tempMaxId="max_temp"+scopeId}var vm=this;vm.lang="en",vm.selfLifeUnitsList=DossierLists.getShelfLifeUnitsList(),vm.ctModel={containerType:"",packageSize:"",shelfLifeUnit:void 0,shelfLifeNumber:void 0,tempMin:void 0,tempMax:void 0},vm.backup=angular.copy(vm.ctModel),vm.requiredOnly=[{type:"required",displayAlias:"MSG_ERR_MAND"}],vm.numberError=[{type:"number",displayAlias:"MSG_ERR_INVALID_NUM"}],vm.numberInvalidMinMax=[{type:"number",displayAlias:"MSG_ERR_INVALID_NUM"},{type:"min",displayAlias:"MSG_ERR_INVALID_NUM_MIN"},{type:"max",displayAlias:"MSG_ERR_INVALID_NUM_MAX"}],vm.updateSummary=0,vm.showSummary=!1,vm.focusSummary=0,vm.alerts=[!1,!1,!1],vm.$onInit=function(){_setIdNames()},vm.$onChanges=function(changes){changes.record&&changes.record.currentValue&&(vm.ctModel=angular.copy(changes.record.currentValue),vm.ctModel.shelfLifeUnit=angular.copy(changes.record.currentValue.shelfLifeUnit),vm.ctModel.shelfLifeNumber=Number(changes.record.currentValue.shelfLifeNumber),vm.ctModel.tempMin=Number(changes.record.currentValue.tempMin),vm.ctModel.tempMax=Number(changes.record.currentValue.tempMax),vm.backup=angular.copy(vm.ctModel)),changes.showErrorSummary&&(vm.showSummary=changes.showErrorSummary.currentValue,vm.updateErrorSummaryState()),changes.errorSummaryUpdate&&vm.updateErrorSummaryState()},vm.save=function(){vm.containerTypeForm.$valid?(vm.record?vm.onUpdate({cType:vm.ctModel}):vm.onAddIng({cType:vm.ctModel}),vm.containerTypeForm.$setPristine(),vm.showSummary=!1,vm.updateErrorSummaryState()):(vm.showSummary=!0,vm.makeFocused(),vm.updateErrorSummaryState())},vm.discardChanges=function(){vm.ctModel=angular.copy(vm.backup),vm.containerTypeForm.$setPristine(),vm.onCancel()},vm["delete"]=function(){vm.record&&vm.onDelete()},vm.showError=function(ctrl){return!!ctrl&&(ctrl.$invalid&&ctrl.$touched||ctrl.$invalid&&vm.showSummary)},vm.addInstruct=function(value){angular.isUndefined(value)||value<vm.alerts.length&&(vm.alerts[value]=!0)},vm.closeAlert=function(value){angular.isUndefined(value)||value<vm.alerts.length&&(vm.alerts[value]=!1)},vm.isFrench=function(){return vm.lang===FRENCH},$scope.$watch("ctrCtrl.containerTypeForm.$dirty",function(){vm.isDetailValid({state:!vm.containerTypeForm.$dirty})},!0),$scope.$watch("ctrCtrl.containerTypeForm.$error",function(){vm.updateErrorSummaryState()},!0),vm.makeFocused=function(){vm.focusSummary=vm.focusSummary+1},vm.updateErrorSummaryState=function(){vm.updateSummary=vm.updateSummary+1}}angular.module("containerTypeRecordModule").component("cmpContainerTypeRecord",{templateUrl:"app/scripts/components/formulations/tpl-container-type-record_20190321_1400.html",controllerAs:"ctrCtrl",controller:containerTypeRecCtrl,bindings:{deleteBtn:"<",record:"<",onAddIng:"&",onUpdate:"&",onDelete:"&",onCancel:"&",showErrors:"&",isDetailValid:"&",recordIndex:"<",errorSummaryUpdate:"<",showErrorSummary:"<"}}),containerTypeRecCtrl.$inject=["DossierLists","$scope","FRENCH"]}(),function(){"use strict";angular.module("containerTypeListModule",["expandingTable","containerTypeRecordModule"])}(),function(){"use strict";function containerTypeListCtrl($scope){function setRecord(value){vm.selectRecord=value}function _setIdNames(){var scopeId="_"+$scope.$id;vm.noContainerId="no_container"+scopeId}var vm=this;vm.isDetailValid=!0,vm.selectRecord=-1,vm.resetToCollapsed=!1,vm.isDetailValid=!0,vm.newIngFormShown=!1,vm.noContainerValues="",vm.$onInit=function(){vm.selectRecord=-1,vm.resetToCollapsed=!1,vm.isDetailValid=!0,vm.newIngFormShown=!1,_setIdNames(),vm.colNames=[{label:"CONTAINER_TYPE",binding:"containerType",width:"50",isHtml:"true"},{label:"PACKAGE_SIZE",binding:"packageSize",width:"50",isHtml:"true"}],vm.containerList=[],vm.containers&&(vm.containerList=vm.containers)},vm.$onChanges=function(changes){changes.containers&&(vm.containerList=changes.containers.currentValue,vm.noContainers()),changes.isFileLoaded&&changes.isFileLoaded.currentValue&&(vm.newIngFormShown=!1)},vm.$postLink=function(){vm.isFileLoaded||vm.addNewIngredientState()},vm.addNew=function(ing){vm.setValid(!0),vm.containerList.push(ing),vm.newIngFormShown=!1,vm.resetToCollapsed=!vm.resetToCollapsed,vm.onUpdate({list:vm.containerList}),setRecord(-1),vm.noContainers()},vm.updateRec=function(idx,ing){vm.containerList[idx]=angular.copy(ing),vm.onUpdate({list:vm.containerList}),vm.setValid(!0)},vm.deleteRec=function(idx){vm.containerList.splice(idx,1),vm.onUpdate({list:vm.containerList}),vm.setValid(!0),vm.noContainers(),setRecord(-1),vm.resetToCollapsed=!vm.resetToCollapsed},vm.setValid=function(value){vm.isDetailValid=value},vm.addNewDisabled=function(){return vm.newIngFormShown||!vm.isDetailValid},vm.addNewIngredientState=function(){return vm.resetToCollapsed=!vm.resetToCollapsed,vm.newIngFormShown=!0,vm.setValid(!1),vm.noContainers(),vm.newIngFormShown},vm.onNewCancel=function(){vm.setValid(!0),vm.newIngFormShown=!1,vm.noContainers()},vm.noContainers=function(){return vm.containerList&&0!==vm.containerList.length?(vm.noContainerValues="values",!1):(vm.noContainerValues="",!0)}}angular.module("containerTypeListModule").component("cmpContainerTypeList",{templateUrl:"app/scripts/components/formulations/tpl-container-type-list_20190321_1400.html",controller:containerTypeListCtrl,controllerAs:"ctlCtrl",bindings:{containers:"<",onUpdate:"&",errorSummaryUpdate:"<",isFileLoaded:"<",showErrorSummary:"<"}}),containerTypeListCtrl.$inject=["$scope"]}(),function(){"use strict";angular.module("activeIngRecordModule",["dossierDataLists","hpfbConstants","ui.select","errorSummaryModule","errorMessageModule"])}(),function(){"use strict";function activeIngRecCtrl(DossierLists,$scope,$translate,OTHER,YES,NO,FRENCH){function _setIdNames(){var scopeId="_"+$scope.$id;vm.activeFormId="activeRecordForm"+scopeId,vm.ingredRoleId="ing_role"+scopeId,vm.ingredName="ing_name"+scopeId,vm.nIngredName="n_ing_name"+scopeId,vm.casId="cas"+scopeId,vm.standardId="standard"+scopeId,vm.strengthId="strength_operator"+scopeId,vm.strengthData1Id=scopeId,vm.strengthData2Id="strength_data2"+scopeId,vm.unitsId="units"+scopeId,vm.otherUnitsId="other_units"+scopeId,vm.perMeasureUnitId="unit_measure"+scopeId,vm.perPresOtherUnitId="other_unit_presentation"+scopeId,vm.perMeasureOtherUnitId="other_unit_measure"+scopeId,vm.perId="per_strength"+scopeId,vm.perPreValueId="per_value"+scopeId,vm.perMeaValueId="per_value"+scopeId,vm.presentationId="unit_presentation"+scopeId,vm.isNanoMaterialId="is_nano_material"+scopeId,vm.nanoId="nano_material"+scopeId,vm.nanoOtherId="nano_material_other"+scopeId,vm.asBaseId="calculated_as_base"+scopeId,vm.animalHumanSrcId="animal_human_sourced"+scopeId,vm.purposeId="purpose"+scopeId}var vm=this;vm.ingRoleList=DossierLists.getIngRoleList(),vm.nanoMaterialList=DossierLists.getNanoMaterials(),vm.yesNoList=DossierLists.getYesNoList(),vm.activeList=DossierLists.getActiveList(),vm.unitsList=DossierLists.getUnitsList(),vm.strengthList=DossierLists.getStrengthList(),vm.perList=DossierLists.getPerList(),vm.presentationList=DossierLists.getUnitsPresentationList(),vm.measureList=DossierLists.getUnitsMeasureList(),vm.lang=$translate.proposedLanguage()||$translate.use(),vm.requiredOnly=[{type:"required",displayAlias:"MSG_ERR_MAND"}],vm.alerts=[!1,!1,!1,!1,!1,!1],vm.numberMinError=[{type:"required",displayAlias:"MSG_ERR_MAND"},{type:"min",displayAlias:"MSG_ERR_INVALID_NUM_MIN0"},{type:"number",displayAlias:"MSG_ERR_INVALID_NUM"}],vm.numberMinLowerError=[{type:"required",displayAlias:"MSG_ERR_MAND"},{type:"min",displayAlias:"MSG_ERR_INVALID_NUM_MIN_LOWER"},{type:"number",displayAlias:"MSG_ERR_INVALID_NUM"}],vm.ingModel={autoIngred:NO,ingRole:"",ingId:"",variant:"",purpose:"",ingLabel:"",cas:"",standard:"",strength:{operator:"",data1:null,data2:null},units:"",otherUnits:"",per:"",perPresentationValue:1,perMeasureValue:null,perPresUnits:"",perPresOtherUnits:"",perMeasUnits:"",perMeasOtherUnits:"",isNano:"",nanoMaterial:"",nanoMaterialOther:"",calcAsBase:"",humanAnimalSourced:""},vm.strengthData1Title="",vm.exclusions={},vm.alias={},vm.updateSummary=0,vm.showSummary=!1,vm.focusSummary=0,vm.$onInit=function(){vm.showSummary=!1,vm.backup=angular.copy(vm.ingModel),_setIdNames()},vm.$onChanges=function(changes){changes.record&&changes.record.currentValue&&(vm.ingModel=angular.copy(changes.record.currentValue),vm.ingModel.ingId?vm.ingModel.autoIngred=YES:vm.ingModel.autoIngred=NO),changes.showErrorSummary&&(vm.showSummary=changes.showErrorSummary.currentValue,vm.updateErrorSummaryState()),changes.errorSummaryUpdate&&vm.updateErrorSummaryState(),changes.recordIndex&&(vm.summaryName="cmp-active-ing-record_"+vm.recordIndex.currentValue),(!vm.activeList||vm.activeList.length<=0)&&(vm.activeList=DossierLists.getActiveList())},vm.isAnimalHumanSourced=function(){return!!vm.ingModel&&vm.ingModel.humanAnimalSourced===YES},vm.ingredSelectionUpdated=function(item,model,label,event){item?(vm.ingModel.ingId=item.id,vm.ingModel.autoIngred=YES):(vm.ingModel.ingId="",vm.ingModel.autoIngred=NO)},vm.isRoleChosen=function(){return"MED"===vm.ingModel.ingRole||"NONMED"===vm.ingModel.ingRole},vm.isMedIng=function(){return"MED"===vm.ingModel.ingRole},vm.isPerPresentation=function(){return"UP"===vm.ingModel.per.id},vm.isPerMeasure=function(){return"UM"===vm.ingModel.per.id},vm.isStrengthSet=function(){var isSet=!1;return void 0!==vm.ingModel.strength.operator.id&&""!==vm.ingModel.strength.operator.id&&(isSet=!0,"RA"===vm.ingModel.strength.operator.id?vm.strengthData1Title="RANGE_LOWER_LIMIT":vm.strengthData1Title="VALUE",vm.strengthData1Id="strength_"+vm.strengthData1Title+"_"+$scope.$id),isSet},vm.isRange=function(){return"RA"===vm.ingModel.strength.operator.id},vm.isNanoMaterial=function(){return vm.ingModel.isNano===YES},vm.saveIng=function(){vm.activeIngForm.$valid?(vm.record?vm.onUpdate({ing:vm.ingModel}):vm.onAddIng({ing:vm.ingModel}),vm.activeIngForm.$setPristine(),vm.showSummary=!1,vm.updateErrorSummaryState()):(vm.showSummary=!0,vm.makeFocused(),vm.updateErrorSummaryState())},vm.makeFocused=function(){vm.focusSummary=vm.focusSummary+1},vm.discardChanges=function(){vm.ingModel=angular.copy(vm.backup),vm.activeIngForm.$setPristine(),vm.updateErrorSummaryState(),vm.onCancel()},vm["delete"]=function(){vm.record&&vm.onDelete()},vm.copy=function(){var ingredientCopy=angular.copy(vm.ingModel);vm.onAddIng({ing:ingredientCopy})},vm.showError=function(ctrl){return!!ctrl&&(ctrl.$invalid&&ctrl.$touched||ctrl.$invalid&&vm.showSummary)},vm.isNanoOther=function(){return vm.ingModel.nanoMaterial.id===DossierLists.getOtherValue()||(vm.ingModel.nanoMaterialOther="",!1)},vm.isUnitsOther=function(){return!(!vm.ingModel||!vm.ingModel.units)&&(vm.ingModel.units.id===OTHER||(vm.ingModel.otherUnits="",!1))},vm.isPerPresUnitsOther=function(){return!(!vm.ingModel||!vm.ingModel.perPresUnits)&&(vm.ingModel.perPresUnits.id===OTHER||(vm.ingModel.perPresOtherUnits="",!1))},vm.isPerMeasUnitsOther=function(){return!(!vm.ingModel||!vm.ingModel.perMeasUnits)&&(vm.ingModel.perMeasUnits.id===OTHER||(vm.ingModel.perMeasOtherUnits="",!1))},vm.addInstruct=function(value){angular.isUndefined(value)||value<vm.alerts.length&&(vm.alerts[value]=!0)},vm.closeAlert=function(value){angular.isUndefined(value)||value<vm.alerts.length&&(vm.alerts[value]=!1)},vm.isFrench=function(){return vm.lang===FRENCH},vm.unitsChange=function(){for(var found=!1,i=0;i<vm.unitsList.length;i++){var option=vm.unitsList[i];if(option[vm.lang]===vm.ingModel.unitsHtml){vm.ingModel.units=option,found=!0;break}}if(!found)for(var i=0;i<vm.unitsList.length;i++){var option=vm.unitsList[i];if(option.id===vm.ingModel.units.id){vm.ingModel.unitsHtml=option[vm.lang];break}}},vm.perMeasUnitsChange=function(){for(var found=!1,i=0;i<vm.unitsList.length;i++){var option=vm.unitsList[i];if(option[vm.lang]===vm.ingModel.perMeasUnitsHtml){vm.ingModel.perMeasUnits=option,found=!0;break}}if(!found)for(var i=0;i<vm.unitsList.length;i++){var option=vm.unitsList[i];if(option.id===vm.ingModel.perMeasUnits.id){vm.ingModel.perMeasUnitsHtml=option[vm.lang];break}}},$scope.$watch("ingRecCtrl.activeIngForm.$dirty",function(){vm.isDetailValid({state:!vm.activeIngForm.$dirty})},!0),vm.updateErrorSummaryState=function(){vm.updateSummary=vm.updateSummary+1},$scope.$watch("ingRecCtrl.activeIngForm.$error",function(){vm.updateErrorSummaryState(),vm.updateErrorSummary()},!0)}angular.module("activeIngRecordModule").component("cmpActiveIngRecord",{templateUrl:"app/scripts/components/formulations/tpl-active-ing-record_20190321_1400.html",controllerAs:"ingRecCtrl",controller:activeIngRecCtrl,bindings:{deleteBtn:"<",record:"<",onAddIng:"&",onUpdate:"&",onDelete:"&",onCancel:"&",isDetailValid:"&",recordIndex:"<",errorSummaryUpdate:"<",showErrorSummary:"<",updateErrorSummary:"&"}}),activeIngRecCtrl.$inject=["DossierLists","$scope","$translate","OTHER","YES","NO","FRENCH"]}(),function(){"use strict";angular.module("activeIngListModule",["expandingTable","hpfbConstants","activeIngRecordModule"])}(),function(){"use strict";function activeIngListCtrl($scope,FRENCH){function setRecord(value){vm.selectRecord=value}function _setIdNames(){var scopeId="_"+$scope.$id;vm.noActiveId="no_active"+scopeId}var vm=this;vm.selectRecord=-1,vm.resetToCollapsed=!1,vm.isDetailValid=!0,vm.newIngFormShown=!1,vm.isDetailValid=!0,vm.selectRecord=-1,vm.alerts=[!1],vm.noActiveValues="",vm.colNames=[{label:"ROLE",binding:"ingRole",width:"19"},{label:"INGREDIENT",binding:"ingLabel",width:"40"},{label:"VARIANT_NAME",binding:"variant",width:"25"},{label:"IN_LIST",binding:"autoIngred",width:"4"},{label:"CAS_NUM",binding:"cas",width:"9",isHtml:"true"},{label:"HUMAN_ANIMAL_SOURCE",binding:"humanAnimalSourced",width:"4"}],vm.ingList=[],vm.$onInit=function(){_setIdNames()},vm.$onChanges=function(changes){changes.ingredients&&changes.ingredients.currentValue&&(vm.ingList=vm.ingredients,vm.isDetailValid=!0,vm.noActives()),changes.isFileLoaded&&changes.isFileLoaded.currentValue&&(vm.newIngFormShown=!1)},vm.$postLink=function(){vm.isFileLoaded||vm.addNewIngredientState()},vm.addIng=function(ing){vm.setValid(!0),vm.ingList.push(ing),vm.newIngFormShown=!1,vm.resetToCollapsed=!vm.resetToCollapsed,vm.onUpdate({list:vm.ingList}),setRecord(-1),vm.noActives()},vm.updateIng=function(idx,ing){vm.ingList[idx]=angular.copy(ing),vm.onUpdate({list:vm.ingList}),vm.setValid(!0),vm.noActives()},vm.deleteIng=function(idx){vm.ingList.splice(idx,1),vm.onUpdate({list:vm.ingList}),vm.setValid(!0),setRecord(-1),vm.resetToCollapsed=!vm.resetToCollapsed,vm.noActives()},vm.setValid=function(value){vm.isDetailValid=value},vm.addNewDisabled=function(){return vm.newIngFormShown||!vm.isDetailValid},vm.addNewIngredientState=function(){return vm.resetToCollapsed=!vm.resetToCollapsed,vm.newIngFormShown=!0,vm.setValid(!1),vm.perMeasUnitsHtml="",vm.unitsHtml="",vm.newIngFormShown},vm.onNewCancel=function(){vm.setValid(!0),vm.newIngFormShown=!1},$scope.$watch("ailCtrl.activeIngListForm.$error",function(){vm.updateErrorSummary()},!0),vm.noActives=function(){if(vm.ingList&&0!==vm.ingList.length){for(var i=0;i<vm.ingList.length;i++)if("MED"===vm.ingList[i].ingRole)return vm.noActiveValues="values",!1;return vm.noActiveValues="",!0}return vm.noActiveValues="",!0},vm.addInstruct=function(value){angular.isUndefined(value)||value<vm.alerts.length&&(vm.alerts[value]=!0)},vm.closeAlert=function(value){angular.isUndefined(value)||value<vm.alerts.length&&(vm.alerts[value]=!1)},vm.isFrench=function(){return vm.lang===FRENCH}}angular.module("activeIngListModule").component("cmpActiveIngList",{templateUrl:"app/scripts/components/formulations/tpl-active-ing-list_20190321_1400.html",controller:activeIngListCtrl,controllerAs:"ailCtrl",bindings:{ingredients:"<",onUpdate:"&",errorSummaryUpdate:"<",isFileLoaded:"<",showErrorSummary:"<",updateErrorSummary:"&"}}),activeIngListCtrl.$inject=["$scope","FRENCH"]}(),function(){"use strict";angular.module("theraClass",["theraClassRecord","hpfbConstants"])}(),function(){"use strict";function theraListCtrl($filter,$scope,EXTERNAL_TYPE){function getMaxID(){for(var id=0,i=0;i<vm.model.theraList.length;i++)parseInt(vm.model.theraList[i].id)>id&&(id=vm.model.theraList[i].id);return id}function _setIdNames(){var scopeId="_"+$scope.$id;vm.theraListId="thera_list"+scopeId,vm.noTheraId="no_theraVal"+scopeId,vm.addTheraId="addTheraClass"+scopeId}var vm=this;vm.selectRecord=-1,vm.resetToCollapsed=!0,vm.noThera="",vm.model={},vm.requiredFlag=!0,vm.model.theraList=[],vm.columnDef=[{label:"THERA_CLASS_NAME",binding:"name",width:"100"}],vm.$onInit=function(){_setIdNames()},vm.$onChanges=function(changes){changes.records&&(vm.model.theraList=changes.records.currentValue,vm.noTheraRecs()),changes.isFileLoaded&&changes.isFileLoaded.currentValue&&(vm.requiredFlag=!1)},vm.$postLink=function(){vm.userType===EXTERNAL_TYPE&&vm.addNew()},vm.showError=function(isTouched,isInvalid){return!0},vm.addNew=function(){var maxID=getMaxID();maxID+=1;var item={id:maxID,name:""};vm.model.theraList.push(item),vm.resetToCollapsed=!vm.resetToCollapsed,vm.selectRecord=0,vm.selectRecord=vm.model.theraList.length-1,vm.noTheraRecs()},vm.recordUpdated=function(){vm.requiredFlag=!1,vm.resetToCollapsed=!vm.resetToCollapsed},vm.deleteRecord=function(recId){var idx=vm.model.theraList.indexOf($filter("filter")(vm.model.theraList,{id:recId},!0)[0]);vm.model.theraList.splice(idx,1),vm.noTheraRecs(),vm.requiredFlag=!1},vm.disableAddButton=function(){return!vm.noTheraRecs()&&vm.theraListForm.$invalid},vm.noTheraRecs=function(){return vm.model&&vm.model.theraList?0===vm.model.theraList.length?(vm.noThera="",!0):(vm.noThera="theraVals",!1):(vm.noThera="",!1)}}angular.module("theraClass").component("cmpTheraList",{templateUrl:"app/scripts/components/therapeutic-classification/tpl-thera-list_20190321_1400.html",bindings:{records:"<",isFileLoaded:"<",showErrors:"&",userType:"<"},controller:theraListCtrl,controllerAs:"theraCtrl"}),theraListCtrl.$inject=["$filter","$scope","EXTERNAL_TYPE"]}(),function(){"use strict";angular.module("theraClassRecord",["errorMessageModule"])}(),function(){"use strict";function therapeuticClassCtrl($scope){function _setIdNames(){var scopeId="_"+$scope.$id;vm.theraNameId="thera_class_name"+scopeId}var vm=this;vm.requiredOnly=[{type:"required",displayAlias:"MSG_ERR_MAND"}],vm.model={},vm.$onInit=function(){_setIdNames()},vm.$onChanges=function(changes){changes.record&&(vm.model=changes.record.currentValue)},vm.updateState=function(){vm.onUpdate()},vm.deleteRecord=function(){vm.onDelete({id:vm.model.id})},vm.showError=function(isInvalid,isTouched){return isInvalid&&isTouched||isInvalid&&vm.showErrors()}}angular.module("theraClass").component("cmpTheraRecord",{templateUrl:"app/scripts/components/therapeutic-classification/tpl-thera-record_20190321_1400.html",controller:therapeuticClassCtrl,controllerAs:"theraRecCtrl",bindings:{record:"<",onDelete:"&",onUpdate:"&",showErrors:"&"}}),therapeuticClassCtrl.$inject=["$scope"]}(),function(){"use strict";angular.module("roaRecord",["ui.select","hpfbConstants","errorMessageModule"])}(),function(){"use strict";function roaRecordController(DossierLists,$translate,$scope,ENGLISH){function _setIdNames(){var scopeId="_"+$scope.$id;vm.roaId="roa_lbl"+scopeId,vm.unknownRoaId="other_roa_details"+scopeId}var vm=this;vm.roaList=DossierLists.getRoa(),vm.model={},vm.lang=$translate.proposedLanguage()||$translate.use(),vm.showDetailErrors=!1,vm.requiredOnly=[{type:"required",displayAlias:"MSG_ERR_MAND"}],vm.$onInit=function(){vm.lang=$translate.proposedLanguage()||$translate.use(),vm.lang||(vm.lang=ENGLISH),_setIdNames(),vm.showDetailErrors=!1},vm.$onChanges=function(changes){changes.record&&(vm.model=changes.record.currentValue,vm.updateRecord()),changes.showErrors&&(vm.showDetailErrors=changes.showErrors.currentValue)},vm.roaChanged=function(item,model){for(var found=!1,i=0;i<vm.roaList.length;i++){var option=vm.roaList[i];if(option[vm.lang]===vm.display){vm.roa=option,found=!0;break}}if(!found)for(var i=0;i<vm.roaList.length;i++){var option=vm.roaList[i];if(option.id===vm.display){vm.display=option[vm.lang];break}}vm.updateRecord()},vm.deleteRecord=function(){vm.onDelete({id:vm.model.id})},vm.showError=function(ctrl){return!!ctrl&&(ctrl.$invalid&&ctrl.$touched||ctrl.$invalid&&vm.showDetailErrors)},vm.isRoaOther=function(){return vm.model.roa.id==DossierLists.getOtherValue()||(vm.model.otherRoaDetails="",!1)}}angular.module("roaRecord").config(function(uiSelectConfig){uiSelectConfig.theme="select2"}).component("cmpRoaRecord",{templateUrl:"app/scripts/components/route-admin/tpl-roa-record_20190321_1400.html",controller:roaRecordController,controllerAs:"roaRecCtrl",bindings:{record:"<",onDelete:"&",updateRecord:"&",showErrors:"<"}}),roaRecordController.$inject=["DossierLists","$translate","$scope","ENGLISH"]}(),function(){"use strict";angular.module("roaListModule",["roaRecord"])}(),function(){"use strict";function roaListCtrl($filter,$scope){function getMaxID(){var id=0;if(!vm.model||!vm.model.roaList)return id;for(var i=0;i<vm.model.roaList.length;i++)vm.model.roaList[i].id>id&&(id=vm.model.roaList[i].id);return id}function _setIdNames(){var scopeId="_"+$scope.$id;vm.noRoaId="no_roa"+scopeId}function resetMe(){vm.requiredFlag=!1,vm.resetToCollapsed=!vm.resetToCollapsed}var vm=this;vm.selectRecord=-1,vm.isDetailValid=!0,vm.resetToCollapsed=!0,vm.noROAValues="",vm.showDetailErrors=!1,vm.requiredFlag=!0,vm.model={},vm.model.roaList=[],vm.columnDef=[{label:"ROA_LBL",binding:"display",width:"40"},{label:"OTHER_ROA_DETAILS",binding:"otherRoaDetails",width:"60",isHtml:"true"}],vm.$onInit=function(){_setIdNames(),vm.showDetailErrors=!1},vm.$onChanges=function(changes){changes.records&&changes.records.currentValue&&(vm.model.roaList=changes.records.currentValue,vm.noROA()),changes.showErrors&&(vm.showDetailErrors=changes.showErrors.currentValue),changes.isFileLoaded&&changes.isFileLoaded.currentValue&&(vm.requiredFlag=!1)},vm.$postLink=function(){vm.isFileLoaded||vm.addNew()},vm.setValid=function(value){vm.isDetailValid=value},vm.addNew=function(){var maxID=getMaxID(),item={id:maxID+1,roa:"",otherRoaDetails:"",display:""};vm.model.roaList.push(item),vm.resetToCollapsed=!vm.resetToCollapsed,vm.selectRecord=0,vm.selectRecord=vm.model.roaList.length-1,vm.noROA()},vm.noROA=function(){return vm.model.roaList&&0!==vm.model.roaList.length?(vm.noROAValues="values",!1):(vm.noROAValues="",!0)},vm.deleteRecord=function(recId){var idx=vm.model.roaList.indexOf($filter("filter")(vm.model.roaList,{id:recId},!0)[0]);vm.model.roaList.splice(idx,1),vm.noROA(),vm.requiredFlag=!1},vm.disableAddButton=function(){return!vm.noROA()&&vm.roaListForm.$invalid},vm.setRecord=function(value){resetMe(),vm.selectRecord=value},vm.updateRecord=function(){vm.resetToCollapsed=!vm.resetToCollapsed,vm.requiredFlag=!1,vm.resetToCollapsed=!vm.resetToCollapsed}}angular.module("roaListModule").component("cmpRoaList",{templateUrl:"app/scripts/components/route-admin/tpl-roa-list_20190321_1400.html",bindings:{records:"<",showErrors:"<",isFileLoaded:"<",updateErrorSummary:"&"},controller:roaListCtrl,controllerAs:"roaCtrl"}),roaListCtrl.$inject=["$filter","$scope"]}(),function(){"use strict";var dependencies=["refProductListModule","dossierDataLists","dataLists","filterLists","fileIO","contactModule26","applicationInfoService","applicationInfo","ui.bootstrap","numberFormat","ngMessages","ngAria","theraClass","dossierService","ngSanitize","errorSummaryModule","alertModule","errorMessageModule"];angular.module("dossierModule",dependencies)}(),function(){"use strict";function dossierCtrl($scope,hpfbFileProcessing,ApplicationInfoService,DossierService,DossierLists,getRoleLists,YES,INTERNAL_TYPE,EXTERNAL_TYPE,APPROVED_TYPE,FRENCH,$translate){function _loadFileContent(fileContent){if(fileContent){var resultJson=fileContent.jsonResult;resultJson&&(vm.dossierModel=vm.dossierService.loadFromFile(resultJson),vm.dossierForm.$setDirty()),_setComplete(),vm.isFileLoaded=!0,disableXMLSave()}}function getAppendix4Errors(){}function _setComplete(){vm.isIncomplete=!vm.dossierModel.dossierID}function disableXMLSave(){vm.disableXML=vm.dossierModel.applicationType===vm.applicationInfoService.getApprovedType()&&vm.isExtern()}function _transformFile(){return updateDate(),vm.isExtern()?vm.dossierModel.enrolmentVersion=vm.applicationInfoService.incrementMinorVersion(vm.dossierModel.enrolmentVersion):vm.dossierForm.$pristine||(vm.dossierModel.enrolmentVersion=vm.applicationInfoService.incrementMajorVersion(vm.dossierModel.enrolmentVersion),vm.dossierModel.applicationType=ApplicationInfoService.prototype.getApprovedType()),vm.dossierService.dossierToOutput(vm.dossierModel)}function _createFilename(){var draft_prefix="DRAFTREPDO",final_prefix="HCREPDO",filename="",separator="-";return vm.setVisibleTabIndex=-1,filename=vm.userType===INTERNAL_TYPE?final_prefix:draft_prefix,vm.dossierModel&&vm.dossierModel.dossierID&&(filename=filename+separator+vm.dossierModel.dossierID),vm.dossierModel.enrolmentVersion&&(filename=filename+separator+vm.dossierModel.enrolmentVersion),filename=filename.replace(".",separator),filename.toLowerCase()}function updateDate(){vm.dossierModel&&(vm.dossierModel.dateSaved=vm.applicationInfoService.getTodayDate())}function _setIdNames(){var scopeId="_"+$scope.$id;vm.dossierFormId="dossier_form"+scopeId,vm.typeId="dossier_type"+scopeId,vm.compId="company_id"+scopeId,vm.thirdId="signed_third"+scopeId,vm.prodNameId="prod_name"+scopeId,vm.properNameId="proper_name"+scopeId,vm.isRefId="is_cdn_ref"+scopeId,vm.noTheraId="no_theraVal"+scopeId,vm.drugUseId="drug_use"+scopeId,vm.brandId="brand"+scopeId,vm.companyId="company"+scopeId,vm.relatedInfoId="related_info"+scopeId,vm.privacyStatementID="privacy_statement"+scopeId}var vm=this;vm.showContent=_loadFileContent,vm.applicationInfoService=new ApplicationInfoService,
vm.userType=EXTERNAL_TYPE,vm.saveXMLLabel="SAVE_DRAFT",vm.yesNoList=DossierLists.getYesNoList(),vm.yesValue=YES,vm.formTypeList=getRoleLists.getFormTypes(),vm.configField={label:"DOSSIER_ID",fieldLength:"7",tagName:"dossierID",errorMsg:"MSG_LENGTH_7",isDossier:!0},vm.isIncomplete=!0,vm.formAmend=!1,vm.errorAppendix=[],vm.extraAppendix=[],vm.noThera="",vm.drugUseList=[],vm.updateSummary=0,vm.showSummary=!1,vm.disableXML=!1,vm.isFileLoaded=!1,vm.focusSummary=0,vm.exclusions={"formulCtrl.formulationsForm":"tab_0","contactRec.contactRecForm":"true","ap4Ctrl.appendixForm":"tab_1","refProdCtrl.productDetailsForm":"true"},vm.transcludeList={},vm.alias={no_theraVal:{type:"element",target:"thera_list"},one_rep:{type:"element",target:"rep_contact_list"},msg_err_one_cdn_ref:{type:"elementNoId",target:"addRefProductBtn"}},vm.requiredOnly=[{type:"required",displayAlias:"MSG_ERR_MAND"}],vm.min5Error=[{type:"required",displayAlias:"MSG_ERR_MAND"},{type:"minlength",displayAlias:"MSG_LENGTH_MIN5"}],vm.lang=$translate.proposedLanguage()||$translate.use(),vm.$onInit=function(){vm.showSummary=!1,vm.drugUseList=DossierLists.getDrugUseList(),_setIdNames(),vm.dossierService=new DossierService,vm.dossierModel=vm.dossierService.getDefaultObject(),vm.setVisibleTabIndex=-1},vm.$onChanges=function(changes){changes.formType&&(vm.userType=changes.formType.currentValue,vm.userType===INTERNAL_TYPE?vm.saveXMLLabel="APPROVE_FINAL":vm.saveXMLLabel="SAVE_DRAFT")},vm.updateErrorSummaryState=function(){vm.updateSummary=vm.updateSummary+1},vm.appendixMissingError=function(){return vm.errorAppendix&&vm.errorAppendix.length>0},vm.appendixExtraError=function(){return vm.extraAppendix&&vm.extraAppendix.length>0},vm.thirdPartySignedChanged=function(){return vm.dossierModel.drugProduct.thirdPartySigned===YES},vm.recordsChanged=function(){getAppendix4Errors()},vm.isRefProduct=function(){return vm.dossierModel.isRefProduct===YES||(vm.dossierModel.drugProduct.canRefProduct={},!1)},vm.isPharmaBioType=function(){return"BIOLOGIC"===vm.dossierModel.dossierType||"PHARMACEUTICAL"===vm.dossierModel.dossierType||(vm.dossierModel.drugProduct.canRefProduct={},!1)},vm.setApplicationType=function(value){vm.dossierModel.applicationType=value,vm.formAmend=vm.dossierModel.applicationType===vm.applicationInfoService.getAmendType(),disableXMLSave()},vm.cdnRefUpdated=function(list){},vm.disableJSONSave=function(){return vm.dossierModel.applicationType===APPROVED_TYPE&&vm.isExtern()},$scope.$watch("dos.dossierForm.$error",function(){vm.updateErrorSummaryState()},!0),vm.isExtern=function(){return vm.userType===EXTERNAL_TYPE},self.showErrors=function(){return self.showAllErrors},vm.showError=function(ctrl){return!!ctrl&&(ctrl.$invalid&&ctrl.$touched||vm.showSummary&&ctrl.$invalid)},vm.isSchedA=function(){return!!(vm.dossierModel&&vm.dossierModel.drugProduct&&vm.dossierService)&&(!!vm.dossierModel.drugProduct.isScheduleA||(vm.dossierModel.drugProduct.scheduleAGroup=vm.dossierService.getDefaultScheduleA(),!1))},vm.saveJson=function(){var writeResult=_transformFile();hpfbFileProcessing.writeAsJson(writeResult,_createFilename(),vm.dossierService.getRootTagName())},vm.saveXML=function(){if(vm.dossierForm.$invalid)vm.showSummary=!0,vm.focusSummary++,vm.updateErrorSummaryState();else{var writeResult=_transformFile();hpfbFileProcessing.writeAsXml(writeResult,_createFilename(),vm.dossierService.getRootTagName(),vm.dossierService.getXSLFileName()),vm.dossierForm.$setPristine(),vm.showSummary=!1}},vm.noTheraRecs=function(){return vm.dossierModel&&vm.dossierModel.drugProduct?vm.dossierModel.drugProduct.therapeutic&&0!==vm.dossierModel.drugProduct.therapeutic.length?(vm.noThera=vm.dossierModel.drugProduct.therapeutic.length,!1):(vm.noThera="",!0):(vm.noThera="",!1)},vm.addInstruct=function(value){angular.isUndefined(value)||value<vm.alerts.length&&(vm.alerts[value]=!0)},vm.closeAlert=function(value){angular.isUndefined(value)||value<vm.alerts.length&&(vm.alerts[value]=!1)},vm.isFrench=function(){return vm.lang===FRENCH},vm.selectTab=function(index){vm.setVisibleTabIndex={id:index}}}angular.module("dossierModule").component("cmpDossier",{templateUrl:"app/scripts/components/dossier/tpl-dossier_20190321_1400.html",controller:dossierCtrl,controllerAs:"dos",bindings:{dossierRecordInput:"<",onUpdateDossier:"&",onDeleteDossier:"&",formType:"@",service:"<"}}),dossierCtrl.$inject=["$scope","hpfbFileProcessing","ApplicationInfoService","DossierService","DossierLists","getRoleLists","YES","INTERNAL_TYPE","EXTERNAL_TYPE","APPROVED_TYPE","FRENCH","$translate"]}(),function(){"use strict";angular.module("countryRecordModule",["ui.select","hpfbConstants","errorMessageModule"])}(),function(){"use strict";function countryRecordController($scope,$filter,$translate,UNKNOWN){function _setIdNames(){var scopeId="_"+$scope.$id;vm.countryId="country_name"+scopeId,vm.unknownCountryId="unknown_country_details"+scopeId}var vm=this;vm.model={id:"",country:"",unknownCountryDetails:"",display:""},vm.countries=[],vm.onChangeCount=0,vm.lang=$translate.proposedLanguage()||$translate.use(),vm.showDetailErrors=!1,vm.requiredOnly=[{type:"required",displayAlias:"MSG_ERR_MAND"}],vm.$onInit=function(){vm.showDetailErrors=!1,_setIdNames()},vm.countryChanged=function($item,$model){for(var i=0;vm.countries.length;i++)if(vm.countries[i][vm.lang]===vm.model.display){vm.model.country=vm.countries[i];break}vm.updateCountryList()},vm.$onChanges=function(changes){changes.countryList&&vm.onChangeCount<2?(vm.updateCountryList(),vm.countries=changes.countryList.currentValue,vm.onChangeCount++):vm.onChangeCount=0,changes.record&&changes.record.currentValue&&(vm.model=changes.record.currentValue),changes.showErrors&&(vm.showDetailErrors=changes.showErrors.currentValue)},vm.deleteRecord=function(){vm.onDelete({id:vm.model.id})},vm.showError=function(ctrl){return!!ctrl&&(ctrl.$invalid&&ctrl.$touched||ctrl.$invalid&&vm.showDetailErrors)},vm.isUnknown=function(){return!(!vm.model||!vm.model.country)&&vm.model.country.id===UNKNOWN}}angular.module("countryRecordModule").config(function(uiSelectConfig){uiSelectConfig.theme="select2"}).component("cmpCountryRecord",{templateUrl:"app/scripts/components/country-list/tpl-country-record_20190321_1400.html",controller:countryRecordController,controllerAs:"countryRecCtrl",bindings:{record:"<",onDelete:"&",showErrors:"<",countryList:"<",updateCountryList:"<",fieldsetLabel:"@"}}),countryRecordController.$inject=["$scope","$filter","$translate","UNKNOWN"]}(),function(){"use strict";angular.module("countryListModule",["dataLists","countryRecordModule","ui.select","hpfbConstants"])}(),function(){"use strict";function countryListController($filter,getCountryAndProvinces,UNKNOWN,$scope){function setUnknownCountryState(isUnknown){if(isUnknown){var unknownRec=getCountryAndProvinces.getUnknownCountryRecord();vm.countries.unshift(unknownRec),vm.countryList=vm.countries,vm.hasUnknown=!0,vm.columnDef=[{label:vm.fieldLabel,binding:"display",width:"50"},{label:"UNKNOWN_COUNTRY_DETAILS",binding:"unknownCountryDetails",width:"50",isHtml:"true"}]}else vm.countryList=vm.countries,vm.hasUnknown=!1,vm.emptyModel={id:"",country:"",unknownCountryDetails:"",display:""},vm.columnDef=[{label:vm.fieldLabel,binding:"display",width:"100"}]}function setRecord(value){vm.selectRecord=value}function getListMaxID(){var out=0,list=vm.model.list;if(list)for(var i=0;i<list.length;i++)list[i].id>out&&(out=list[i].id);return out}function _setIdNames(){var scopeId="_"+$scope.$id;vm.noCountryId="no_country"+scopeId}var vm=this;vm.baseCountries=getCountryAndProvinces.getCountries(),vm.countries=angular.copy(vm.baseCountries),vm.countryList="",vm.model={},vm.isDetailValid=!0,vm.resetToCollapsed=!0,vm.noCountries="",vm.showDetailErrors=!1,vm.requiredFlag=!0,vm.selectRecord=-1,vm.columnDef=[{label:vm.fieldLabel,binding:"display",width:"100"}],vm.hasUnknown=!1,vm.emptyModel={id:"",country:"",unknownCountryDetails:"",display:""},vm.$onInit=function(){_setIdNames(),vm.showDetailErrors=!1,angular.isUndefined(vm.model.list)&&(vm.model.list=[]),angular.isUndefined(vm.countryList)&&setUnknownCountryState(vm.withUnknown),vm.updateCountryList()},vm.$onChanges=function(changes){changes.withUnknown,changes.listItems&&(vm.model.list=changes.listItems.currentValue),changes.showErrors&&(vm.showDetailErrors=changes.showErrors.currentValue),changes.isFileLoaded&&changes.isFileLoaded.currentValue&&(vm.requiredFlag=!1)},vm.$postLink=function(){vm.isFileLoaded||vm.addNew()},vm.addNew=function(){var item=(getListMaxID(),angular.copy(vm.emptyModel));item.id=getListMaxID()+1,vm.model.list.push(item),setRecord(-1),vm.resetToCollapsed=!vm.resetToCollapsed,setRecord(vm.model.list.length-1),vm.onUpdate({list:vm.model.list})},vm.deleteRecord=function(_id){var aList=vm.deleteRecFromList(vm.model.list,_id);vm.updateCountryList(),vm.onUpdate({list:aList}),vm.requiredFlag=!1},vm.deleteRecFromList=function(_list,_id){var idx=_list.indexOf($filter("filter")(_list,{id:_id},!0)[0]);return idx>=0&&_list.splice(idx,1),_list},vm.updateCountryList=function(){var base=angular.copy(vm.baseCountries);if(vm.model.list&&vm.model.list.length>0){for(var idx,j=0;j<vm.model.list.length;j++)vm.model.list[j].country.id&&(idx=base.indexOf($filter("filter")(base,{id:vm.model.list[j].country.id},!0)[0]),idx>=0&&base.splice(idx,1));vm.countryList=base}},vm.noCountry=function(){return vm.model.list&&0!==vm.model.list.length?(vm.noCountries="values",!1):(vm.noCountries="",!0)},vm.disableAddButton=function(){return!vm.noCountry()&&vm.countryListForm.$invalid}}angular.module("countryListModule").component("cmpCountryList",{templateUrl:"app/scripts/components/country-list/tpl-country-list_20190321_1400.html",controller:countryListController,controllerAs:"countryListCtrl",bindings:{withUnknown:"<",listItems:"<",onUpdate:"&",onDelete:"&",showErrors:"<",fieldLabel:"@",isFileLoaded:"<",updateErrorSummary:"&"}}),countryListController.$inject=["$filter","getCountryAndProvinces","UNKNOWN","$scope"]}(),function(){"use strict";angular.module("checkBoxListModule",[])}(),function(){"use strict";function checkBoxListCtrl(){var self=this;self.numberColumns=4,self.colWidth=3,self.$onInit=function(){},self.$onChanges=function(changes){changes.listItems&&(self.currentModel=changes.listItems.currentValue),changes.numberCols&&changes.numberCols.currentValue&&(self.numberColumns=changes.numberCols.currentValue,self.colWidth=Math.ceil(12/self.numberColumns))},self.someSelected=function(){var object=self.roleModel;return!!object&&Object.keys(object).some(function(key){return object[key]})},self.updateState=function(item){item.value||(item.value=!1,item.hasOtherDetails&&(item.otherText=""))}}angular.module("checkBoxListModule").component("cmpCheckboxList",{templateUrl:"app/scripts/components/checkbox-list/tpl-checkbox-list_20190321_1400.html",controller:checkBoxListCtrl,controllerAs:"chkl",bindings:{title:"@",commonName:"@",listItems:"<",numberCols:"@",onUpdate:"&"}})}(),function(){"use strict";angular.module("refProductListModule",["expandingTable","refProductDetailsModule"])}(),function(){"use strict";function refProductListCtrl($scope){function setRecord(value){vm.selectRecord=value}function _setIdNames(){var scopeId="_"+$scope.$id;vm.oneCdnRefId="msg_err_one_cdn_ref"+scopeId}var vm=this;vm.isDetailValid=!0,vm.selectRecord=-1,vm.resetToCollapsed=!1,vm.newProductFormShown=!1,vm.showSummmary=!1,vm.$onInit=function(){vm.newProductFormShown=!1,vm.isDetailValid=!0,vm.selectRecord=-1,vm.colNames=[{label:"BRAND_NAME",binding:"brandName",width:"50"},{label:"COMPANY_NAME",binding:"companyName",width:"50"}],vm.productList=[],vm.newProductFormShown=!1,vm.products&&(vm.productList=vm.products),_setIdNames()},vm.$onChanges=function(changes){changes.products&&(vm.productList=changes.products.currentValue),changes.showErrorSummary&&(vm.showSummmary=changes.showErrorSummary.currentValue)},vm.addProduct=function(product){vm.setValid(!0),vm.resetToCollapsed=!vm.resetToCollapsed,vm.productList.push(product),vm.newProductFormShown=!1,vm.onUpdate({recs:vm.productList}),setRecord(-1),vm.showNoRefReError()},vm.updateProduct=function(idx,product){vm.productList[idx]=angular.copy(product),vm.setValid(!0),vm.onUpdate({recs:vm.productList})},vm.deleteProduct=function(idx){vm.productList.splice(idx,1),vm.setValid(!0),setRecord(-1),vm.onUpdate({recs:vm.productList}),vm.resetToCollapsed=!vm.resetToCollapsed,vm.showNoRefReError()},vm.addNewProductState=function(){return vm.resetToCollapsed=!vm.resetToCollapsed,vm.newProductFormShown=!0,vm.setValid(!1),vm.showNoRefReError(),vm.newProductFormShown},vm.addNewDisabled=function(){return vm.newProductFormShown||!vm.isDetailValid},vm.setValid=function(value){vm.isDetailValid=value},vm.onNewCancel=function(){vm.setValid(!0),vm.newProductFormShown=!1},vm.showNoRefReError=function(){return vm.productList.length>0?(vm.oneRefSelected="sel",!1):(vm.oneRefSelected="",!0)}}angular.module("refProductListModule").component("cmpRefProductList",{templateUrl:"app/scripts/components/can-ref-products/tpl-ref-product-list_20190321_1400.html",controller:refProductListCtrl,controllerAs:"crpl",bindings:{products:"<",onUpdate:"&",showErrorSummary:"<",errorSummaryUpdate:"&"}}),refProductListCtrl.$inject=["$scope"]}(),function(){"use strict";angular.module("refProductDetailsModule",["expandingTable","dossierDataLists","filterLists","ui.select","hpfbConstants","errorSummaryModule","errorMessageModule"])}(),function(){"use strict";function refProductDetailsCtrl(DossierLists,$scope,$translate,OTHER){function _setIdNames(){var scopeId="_"+$scope.$id;vm.repProductFormId="productDetailsForm"+scopeId,vm.brandId="brand_name"+scopeId,vm.ingredNameId="medicinal_ingredient"+scopeId,vm.strengthId="strength"+scopeId,vm.unitsId="units"+scopeId,vm.otherId="other_units"+scopeId,vm.perId="per_strength"+scopeId,vm.dosageFormId="dosage_form"+scopeId,vm.dosageFormOtherId="dosage_form_other"+scopeId,vm.companyId="company_noabbrev"+scopeId}var vm=this;vm.dosageFormList=DossierLists.getDosageFormList(),vm.unitsList=DossierLists.getUnitsList(),vm.activeList=DossierLists.getActiveList(),vm.savePressed=!1,vm.lang=$translate.proposedLanguage()||$translate.use(),vm.productModel={brandName:"",newIngred:"Y",ingId:"",ingLabel:"",autoIngred:"N",strengths:"",units:"",otherUnits:"",per:"",dosageForm:"",dosageFormOther:"",companyName:""},vm.summaryName="",vm.updateSummary=0,vm.setSummaryFocus=0,vm.requiredOnly=[{type:"required",displayAlias:"MSG_ERR_MAND"}],vm.numberError=[{type:"required",displayAlias:"MSG_ERR_MAND"},{type:"number",displayAlias:"MSG_ERR_INVALID_NUM"},{type:"min",displayAlias:"MSG_ERR_INVALID_NUM_MIN0"}],vm.showSummary=!1,vm.$onInit=function(){_setIdNames()},vm.$onChanges=function(changes){changes.productRecord&&changes.productRecord.currentValue&&(vm.productModel=angular.copy(vm.productRecord),vm.backup=angular.copy(vm.productModel),vm.savePressed=!1,vm.summaryName="cmp-ref-product-details_"+(vm.productModel.id-1)),changes.showErrorSummary&&(vm.showSummary=changes.showErrorSummary.currentValue,vm.showSummary&&vm.updateErrorSummaryState())},vm.isDosageOther=function(){return!!vm.productModel.dosageForm&&(vm.productModel.dosageForm.id===OTHER||(vm.productModel.dosageFormOther="",!1))},vm.showError=function(ctrl){return ctrl.$touched&&ctrl.$invalid||ctrl.$invalid&&vm.showRecordSummary()},vm.saveProduct=function(){vm.productDetailsForm.$valid?(vm.productRecord?vm.onUpdate({product:vm.productModel}):vm.onAddProduct({product:vm.productModel}),vm.productDetailsForm.$setPristine(),vm.savePressed=!1):(vm.savePressed=!0,vm.updateErrorSummaryState(),vm.focusOnSummary())},vm.updateErrorSummaryState=function(){vm.updateSummary=vm.updateSummary+1},vm.focusOnSummary=function(){vm.setSummaryFocus=vm.setSummaryFocus+1},vm.showRecordSummary=function(){return vm.savePressed||vm.showSummary},vm.ingredSelectionUpdated=function(item,model,label,event){item?(vm.productModel.ingId=item.id,vm.productModel.autoIngred="Y"):(vm.productModel.ingId="",vm.productModel.autoIngred="N")},vm.discardChanges=function(){vm.productModel=angular.copy(vm.backup),vm.productDetailsForm.$setPristine(),vm.onCancel()},vm["delete"]=function(){vm.productRecord&&vm.onDelete()},vm.isUnitsOther=function(){return!!vm.productModel&&(vm.productModel.units.id===OTHER||(vm.productModel.otherUnits="",!1))},$scope.$watch("refProdCtrl.productDetailsForm.$dirty",function(){vm.isDetailValid({state:!vm.productDetailsForm.$dirty})},!0),$scope.$watch("refProdCtrl.productDetailsForm.$error",function(){vm.updateErrorSummaryState()},!0)}angular.module("refProductDetailsModule").config(function(uiSelectConfig){uiSelectConfig.theme="select2"}).component("cmpRefProductDetails",{templateUrl:"app/scripts/components/can-ref-products/tpl-ref-product-details_20190321_1400.html",controller:refProductDetailsCtrl,controllerAs:"refProdCtrl",bindings:{productRecord:"<",deleteBtn:"<",onAddProduct:"&",onUpdate:"&",onDelete:"&",onCancel:"&",isDetailValid:"&",recordIndex:"<",showErrorSummary:"<",errorSummaryUpdate:"&"}}),refProductDetailsCtrl.$inject=["DossierLists","$scope","$translate","OTHER"]}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,

!function(){"use strict";angular.module("transactionApp",["transactionMainModule","pascalprecht.translate","ngMessages","ngAria","ui.bootstrap","translations","ngSanitize"])}(),function(){"use strict";function MainController(){var vm=this;vm.userType}angular.module("transactionApp").controller("MainController",MainController)}(),function(){"use strict";angular.module("transactionApp").config(["$translateProvider","$httpProvider","$locationProvider",function($translateProvider,$httpProvider,$locationProvider){$locationProvider.html5Mode({enabled:!0,requireBase:!1,rewriteLinks:!1}),$translateProvider.directivePriority(1),$translateProvider.preferredLanguage("en"),$translateProvider.useLoader("customLoad"),$translateProvider.useSanitizeValueStrategy(null),$translateProvider.forceAsyncReload(!0),$httpProvider.defaults.headers.get||($httpProvider.defaults.headers.get={}),$httpProvider.defaults.headers.get["If-Modified-Since"]="Mon, 26 Jul 1997 05:00:00 GMT",$httpProvider.defaults.headers.get["Cache-Control"]="no-cache",$httpProvider.defaults.headers.get.Pragma="no-cache"}])}(),angular.module("translations",[]).config(["$translateProvider",function($translateProvider){$translateProvider.translations("en",{CITY:"City or Town",COUNTRY:"Country",PROVINCE:"Province or State",POSTAL:"Postal Code or Zip code",PROVSTATE:"Province or State",STATE:"Province or State",STREET:"Street Address",ZIP:"Postal Code or Zip code",COMPANY:"Company",ADD_ADDRESS:"Add Address",CITY_TOWN:"City or Town",SAVE_ADDR:"Save Address",DELETE_ADDR:"Delete Address",ADDR_INFO:"Address Information",ADDR_DETAILS:"Address Details",ADDR_ROLE_LEGEND:"Select one or more roles for this company",ADDR_REP_ROLE_LEGEND:"Select one or more roles for this company representative",PRODUCTS_IMPORTED:"Imported Products",PRODUCT_TYPES:"Products imported by this Company",ALL_PRODUCTS:"All Products",SELECTED_PRODUCTS:"Some Products",IDENTIFY_PRODUCTS:"Provide the Dossier Identifiers for the products that are imported by this Company",ADD_DOSSIER_ID:"Add Dossier ID",IMPORTER_NONCDN:"Please ensure you indicate a Canadian Importer on your Product Information REP XML",COUNTRY_CHOOSE:"Choose a country",COUNTRY_SEARCH:"Select or Search for country",PROVINCELIST:"Province or State"}),$translateProvider.translations("fr",{CITY:"Ville",COUNTRY:"Pays",PROVINCE:"Province",POSTAL:"Code postal",PROVSTATE:"Province ou état",STATE:"Etat",STREET:"Adresse",ZIP:"Zip Code",COMPANY:"Compagnie",ADD_ADDRESS:"Ajouter Addresse",CITY_TOWN:"Ville",SAVE_ADDR:"fr_Save Address",DELETE_ADDR:"Supprimer Addresse",ADDR_INFO:"Informations d'adresses",ADDR_DETAILS:"Détails de l'adresse",ADDR_ROLE_LEGEND:"fr_Select one or more roles for this company",IMPORTER_NONCDN:"fr_There should be a Canadian Importer when the Manufacturer / Sponsor is not a Canadian Address",COUNTRY_CHOOSE:"Choisir un pays",COUNTRY_SEARCH:"fr_Select or Search for country",PROVINCELIST:"Province"}),$translateProvider.translations("en",{AB:"Alberta",BC:"British Columbia",MB:"Manitoba",NB:"New Brunswick",NL:"Newfoundland and Labrador",NT:"Northwest Territories",NS:"Nova Scotia",NU:"Nunavut",ON:"Ontario",PE:"Prince Edward Island",QC:"Quebec",SK:"Saskatchewan",YT:"Yukon",AL:"Alabama",AK:"Alaska",AZ:"Arizona",AR:"Arkansas",CA:"California",CO:"Colorado",CT:"Connecticut",DE:"Delaware",DC:"District of Columbia",FL:"Florida",GA:"Georgia",HI:"Hawaii",ID:"Idaho",IL:"Illinois",IN:"Indiana",IA:"Iowa",KS:"Kansas",KY:"Kentucky",LA:"Louisiana",ME:"Maine",MD:"Maryland",MA:"Massachusetts",MI:"Michigan",MN:"Minnesota",MS:"Mississippi",MO:"Missouri",MT:"Montana",NE:"Nebraska",NV:"Nevada",NH:"New Hampshire",NJ:"New Jersey",NM:"New Mexico",NY:"New York",NC:"North Carolina",ND:"North Dakota",OH:"Ohio",OK:"Oklahoma",OR:"Oregon",PA:"Pennsylvania",RI:"Rhode Island",SC:"South Carolina",SD:"South Dakota",TN:"Tennessee",TX:"Texas",UT:"Utah",VT:"Vermont",VA:"Virginia",WA:"Washington",WV:"West Virginia",WI:"Wisconsin",WY:"Wyoming"}),$translateProvider.translations("fr",{AB:"Alberta",BC:"Colombie-Britannique",PE:"Île-du-Prince-Édouard",MB:"Manitoba",NB:"Nouveau-Brunswick",NS:"Nouvelle-Écosse",NU:"Nunavut",ON:"Ontario",QC:"Québec",SK:"Saskatchewan",NL:"Terre-Neuve et Labrador",NT:"Territoires du Nord-Ouest",YT:"Yukon",AL:"Alabama",AK:"Alaska",AZ:"Arizona",AR:"Arkansas",CA:"Californie",NC:"Caroline du nord",SC:"Caroline du sud",CO:"Colorado",CT:"Connecticut",ND:"Dakota du nord",SD:"Dakota du sud",DE:"Delaware",DC:"District de Columbia",FL:"Floride",GA:"Géorgie",HI:"Hawaii",ID:"Idaho",IL:"Illinois",IN:"Indiana",IA:"Iowa",KS:"Kansas",KY:"Kentucky",NY:"L'état de New York",WA:"L'état de washington",LA:"Louisiane",ME:"Maine",MD:"Maryland",MA:"Massachusetts",MI:"Michigan",MN:"Minnesota",MS:"Mississippi",MO:"Missouri",MT:"Montana",NE:"Nebraska",NV:"Nevada",NH:"New Hampshire",NJ:"New Jersey",NM:"Nouveau-mexique",OH:"Ohio",OK:"Oklahoma",OR:"Oregon",PA:"Pennsylvanie",RI:"Rhode Island",TN:"Tennessee",TX:"Texas",UT:"Utah",VT:"Vermont",VA:"Virginie",WV:"Virginie-occidentale",WI:"Wisconsin",WY:"Wyoming"}),$translateProvider.translations("en",{FIRSTNAME:"First Name",LASTNAME:"Last Name",INITIALS:"Initials",LANGCORRESPOND:"Language of Correspondance",JOBTITLE:"Job Title",SALUTATION:"Salutation",SALUT_MR:"Mr.",SALUT_MS:"Ms.",SALUT_DR:"Dr.",SALUT_MRS:"Mrs.",ROLE_PRIMARY:"Primary",ROLE_SECONDARY:"Alternate",CONTACTEMAIL:"Email",FAX_NUMBER:"Fax Number",PHONE_EXT:"Phone Extension",ROLES:"Roles",PHONENUMBER:"Phone Number",CONTACT_INFO:"Company Representative Information",AMEND:"Amend",REP_CONTACT:"Regulatory Enrolment Process Contact",ONE_ROLE:"Role",CONTACT_DETAILS:"Company Representative Details",ADD_CONTACT:"Add REP Contact",CONTACT_ROLE_LEGEND:"Select one or more roles for this company representative",CONTACT_ROLE_INSTRUCT:"Company Representative Role Instructions",ADD_REPRES:"Add Company Representative",DELETE_REPRES:"Delete Company Rep.",SAVE_REPRES:"Save Company Rep."}),$translateProvider.translations("fr",{FIRSTNAME:"Prénom",LASTNAME:"Nom",INITIALS:"Initiales",LANGCORRESPOND:"Langue de correspondance",JOBTITLE:"Titre de poste",SALUTATION:"Titre de civilité",SALUT_MR:"M.",SALUT_MS:"Mme",SALUT_DR:"Dr.",SALUT_MRS:"Mlle",ROLE_PRIMARY:"Primaire",ROLE_SECONDARY:"Alterner",CONTACTEMAIL:"Adresse électronique",FAX_NUMBER:"Numéro de télécopieur",PHONE_EXT:"Poste",ADDR_ROLES:"fr_Roles",PHONENUMBER:"Numéro de téléphone",CONTACT_INFO:"fr_Company Representative Information",AMEND:"fr_Amend",REP_CONTACT:"fr_REP Contact",ONE_ROLE:"fr_Role",CONTACT_DETAILS:"fr_Company Representative Details",ADD_CONTACT:"fr_Add REP Contact",CONTACT_ROLE_LEGEND:"fr_Select one or more roles for this company representative",CONTACT_ROLE_INSTRUCT:"fr_Company Representative Role Instructions",ADD_REPRES:"fr_Add Company Representative",DELETE_REPRES:"fr_Delete Company Rep.",SAVE_REPRES:"fr_Save Company Rep."}),$translateProvider.translations("en",{APPL_STATUS:"Enrolment Status",ENROL_VERSION:"Enrolment Version",DATE_SAVED:"Date Last Saved",AMEND_ENROL:"Amend Enrolment",AMEND_MSG:"Edit records to be amended below.",REASON_AMEND:"Reason for amendment"}),$translateProvider.translations("fr",{APPL_STATUS:"fr_Enrolment Status",ENROL_VERSION:"Version d’inscription",DATE_SAVED:"Date du dernier enregistrement",AMEND_ENROL:"fr_Amend Enrolment",AMEND_MSG:"fr_Edit records to be amended below.",REASON_AMEND:"fr_Reason for amendment"}),$translateProvider.translations("en",{SELECT_LOAD:"Select a file to load",MSG_SUCCESS_LOAD:"The file was loaded successfully",MSG_ERR_JSONPARSE:"Error: there was an error parsing the working file.",MSG_ERR_XMLPARSE:"Error: there was an error parsing the draft XML file.",MSG_ERR_FILE_LOAD:"Error: there was a problem loading the file.",MSG_ERR_FILE_TYPE:"Error: An invalid file type was selected.",MSG_ERR_FORM_TYPE:"Error: the wrong form type was selected for this form.",MSG_ERR_CHECKSUM_FAIL:"Error: the checksum in the file does not match the calculated checksum"}),$translateProvider.translations("fr",{SELECT_LOAD:"Sélectionnez un fichier à charger",MSG_SUCCESS_LOAD:"Le fichier a été chargé avec succès",MSG_ERR_JSONPARSE:"Erreur: il y a eu une erreur en analysant le fichier de travail.",MSG_ERR_XMLPARSE:"Erreur: il y avait une erreur d'analyse du projet de fichier XML,",MSG_ERR_FILE_LOAD:"Erreur: il y a eu un problème lors du chargement du fichier.",MSG_ERR_FILE_TYPE:"Erreur: un type de fichier invalide a été sélectionné.",MSG_ERR_FORM_TYPE:"Erreur: le type de formulaire incorrect a été sélectionné pour ce formulaire.",MSG_ERR_CHECKSUM_FAIL:"Erreur: La somme de contrôle dans le fichier ne correspond pas à la somme de contrôle calculée."}),$translateProvider.translations("en",{Y:"Yes",N:"No",ADD:"Add",DELETEROW:"Delete Row",SELECTEDROW:"Selected Row",REQUIRED:"(required)",ROLES_SELECT:"Select one or more roles for this record",NEW:"New",AMEND:"Amend",APPROVED:"Approved",FINAL:"Final",CLICK_TOGGLE:"Click to toggle the collapse or expand details for this address.",AMEND_RECORD:"Amend Record",en:"English",fr:"French",ADD_RECORD:"Add Record",SAVE_RECORD:"Save Record",DELETE_RECORD:"Delete Record",COPY_RECORD:"Copy Record",DISCARD_CHANGES:"Discard Changes",REPSECONDARY:"Alternate Regulatory Enrolment Process contact",REPPRIMARY:"Primary Regulatory Enrolment Process contact",MAILING:"Regulatory Mailing / Annual Contact Address",BILLING:"Billing Address",MANUFACTURER:"Manufacturer / Sponsor Mailing Address",IMPORTER_ADDRESS:"Canadian Importer Mailing Address",CONTACT_MAILING:"Regulatory Mailing / Annual Contact",CONTACT_BILLING:"Billing Contact",CONTACT_MANUFACTURER:"Manufacturer / Sponsor Contact",CONTACT_IMPORTER:"Importer Contact",APPROVE_FINAL:"Generate Final XML",SAVE_DRAFT:"Save Draft XML",PRIMARY:"Primary",SECONDARY:"Alternate",TOGGLE_EXPAND:"Click to toggle collapse or expand details of row",CONTROL_NUMBER:"Control Number",REP_CONTACT_INFO:"Regulatory Enrolment Process Contact Information",SAVE_CONTACT:"Save Contact",DELETE_CONTACT:"Delete Contact",COMPANY_ID:"Company ID",DOSSIER_ID:"Dossier ID",IMPORTER:"Importer",IMPORTERID:"Importer Company ID",IMPORTER_COMPANY_NAME:"Importer Company Name",IMPORTER_COMPANY_ID_IF:"Importer Company ID (if applicable)",IMPORTER_COMPANY_NAME_IF:"Importer Company Name (if applicable)",ERRORS:"Errors",UNKNOWN:"Unknown",BIOLOGIC:"Biologic",PHARMACEUTICAL:"Pharmaceutical",VETERINARY:"Veterinary",CLINICAL_TRIAL:"Clinical Trial",HELP_FILE_LOAD:"file load instructions",EXPAND:"Expand",HELP_ACTIVITY_MAIN:"Activity Instructions",HELP_ACTIVITY_REP:"Regulatory Enrolment Process Contact Instructions",CALENDAR:"Pick date from calendar",HIDE_CALENDAR:"Hide Calendar (escape key)",OTHER:"Other",HELP_REP_CONTACT:"Regulatory Enrolment Process Contact Instructions",OTHER_UNITS:"Units other details",COMPANYNAME:"Company Name (Full legal name - no abbreviations)",ACOMPANYNAME:"Company Name (Full legal name - no abbreviations)",COPY:"Copy",DELETE:"Delete",SAVE_WORKING:"Save Working Copy",COMPANY_NOABBREV:"Company Name (Full legal Name - no abbreviations)",CLOSE_ALERT:"Collapse instructions",COLLAPSE:"Collapse",CONTROL_NUM:"Control Number",OTHER_DETAILS:"Other - specify",PROD_NAME:"Product Name",PROD_NAME_HELP:"Product Name Instructions",PROP_NAME_HELP:"Proper, Common or Non-proprietary Name Instructions",RELATED_INFO_HELP:"Related Information Instructions",DOSSIER_TYPE:"Dossier Type",LEAST_5_CHAR:" (5 characters)",LEAST_6_CHAR:" (6 characters)",LEAST_7_CHAR:" (7 characters)",INCLUDE_AREA_CODE:" (including area code)",LEAST_6_DIGIT:" (6 digits only)",INSTRUCTION:"Instruction",RETURN_INSTRUCTION:"Return to instruction",PRIVACY_NOTICE_STATEMENT:"Privacy Notice Statement",PRIVACY_STATEMENT:"By submitting your personal information, you are consenting to its collection, use and disclosure in accordance with the Privacy Notice Statement.",FOOTNOTE_INSTRUCTION:"Instructions for completing sections on form",SECTION_IS_NOT_VISIBLE:"[ This section may not be visible. ]",FAX_NOT_AVAILABLE:" (Use 0000000000 if not available)",NOT_APPLICABLE:"Not applicable"}),$translateProvider.translations("fr",{Y:"Oui",N:"Non",ADD:"fr_Add",DELETEROW:"fr_Delete Row",SELECTEDROW:"Selected Row",REQUIRED:"(requis)",ROLES_SELECT:"fr_Select one or more roles for this record",NEW:"fr_New",AMEND:"fr_Amend",APPROVED:"fr_Approved",CLICK_TOGGLE:"fr_Click to toggle the collapse or expand details for this address.",AMEND_RECORD:"fr_Amend Record",en:"Anglais",fr:"Français",DISCARD_CHANGES:"fr_Discard Changes",REPSECONDARY:"fr_Alternate Regulatory Enrolment Process contact",REPPRIMARY:"fr_Primary Regulatory Enrolment Process contact",MAILING:"Contact pour le courrier réglementaire",BILLING:"fr_Billing",MANUFACTURER:"fr_Manufacturer",IMPORTER_ADDRESS:"fr_Canadian Importer Mailing Address",CONTACT_MAILING:"fr_Regulatory Mailing / Annual Contact",CONTACT_BILLING:"fr_Billing Contact",CONTACT_MANUFACTURER:"fr_Manufacturer / Sponsor Contact",CONTACT_IMPORTER:"fr_Importer Contact",APPROVE_FINAL:"fr_Generate XML final",PRIMARY:"fr_Primary",SECONDARY:"fr_Alternate",TOGGLE_EXPAND:"fr_Click to toggle collapse or expand details of row",SAVE_DRAFT:"fr_Save Draft XML",CONTROL_NUMBER:"fr_Control Number",REP_CONTACT_INFO:"fr_Main Contact Information",SAVE_CONTACT:"fr_Save Contact",DELETE_CONTACT:"fr_Delete Contact",COMPANY_ID:"fr_Company Id",DOSSIER_ID:"fr_Dossier Id",IMPORTER:"fr_Importer",IMPORTERID:"fr_Importer Company ID",IMPORTER_COMPANY_NAME:"fr_Importer Company Name",IMPORTER_COMPANY_ID_IF:"fr_Importer Company ID (if applicable)",IMPORTER_COMPANY_NAME_IF:"fr_Importer Company Name (if applicable)",ERRORS:"Erreurs",UNKNOWN:"Inconnu",BIOLOGIC:"fr_Biologic",PHARMACEUTICAL:"fr_Pharmaceutical",HELP_FILE_LOAD:"fr_File Load Instructions",EXPAND:"fr_Expand",HELP_ACTIVITY_MAIN:"fr_Activity Instructions",HELP_ACTIVITY_REP:"Regulatory Enrolment Process Contact Instructions",CALENDAR:"fr_Pick date from calendar",HIDE_CALENDAR:"fr_Hide Calendar (escape key)",OTHER:"Autre",HELP_REP_CONTACT:"Regulatory Enrolment Process Contact Instructions",OTHER_UNITS:"fr_Units other details",COMPANYNAME:"fr_Company Name (Full legal name - no abbreviations)",COPY:"fr_Copy",DELETE:"fr_Delete",SAVE_WORKING:"Enregistrer une copie de travail",COMPANY_NOABBREV:"fr_Company Name (Full legal Name - no abbreviations)",CLOSE_ALERT:"Minimiser les instructions",COLLAPSE:"Minimiser les",SAVE_RECORD:"fr_Save Record",DELETE_RECORD:"fr_Delete Record",CONTROL_NUM:"fr_Control Number",OTHER_DETAILS:"fr_Other Details - Specify",PROD_NAME:"fr_Product Name",PROD_NAME_HELP:"fr_Product Name Instructions",PROP_NAME_HELP:"fr_Proper, Common or Non-proprietary Name Instructions",RELATED_INFO_HELP:"fr_Related Information Instructions",DOSSIER_TYPE:"fr_Dossier Type",LEAST_5_CHAR:" (at least 5 characters)",LEAST_7_CHAR:" (at least 7 characters)",INCLUDE_AREA_CODE:" (including area code)",LEAST_6_DIGIT:" (6 digits only)",INSTRUCTION:"Instruction",RETURN_INSTRUCTION:"Return to instruction",PRIVACY_STATEMENT_HELP:"View Privacy Notice Statement",PRIVACY_STATEMENT:"By submitting your personal information, you are consenting to its collection, use and disclosure in accordance with the Privacy Notice Statement."}),$translateProvider.translations("en",{MSG_ERR_MAND:"This field is required",MSG_ERR_EMAIL_FORMAT:"Please enter a valid email address.",MSG_ERR_ROLE:"This field is required",MSG_ERR_DISITYPE:"Please select at least one disinfectant type",MSG_ERR_ADDRESS:"Please select at least one address",MSG_ERR_CONTACT_NUM:"All the roles have to be used for the contacts",MSG_ERR_PHONE_FORMAT:"The format is not valid",MSG_ERR_FAX_FORMAT:"The format is not valid",MSG_ERR_ALLROLE:"The roles of manufacturer, mailing, billing, and primary REP contact  have not all been selected among the list of contacts",MSG_ERR_ADDRESSSROLE:"The roles of manufacturer, mailing, and billing have not all been selected among the list of addresses",MSG_ERR_POSTAL:"Please specify a valid postal code.",MSG_ERR_ZIP:"Please specify a valid zip code.",MSG_ERR_DATE_FORMAT:"Please enter a valid date.",MAILING_SEL:"Mailing Role already Selected",MANUFACT_SEL:"Manufacturer Role already Selected",MAIL_SEL:"Mailing Role already Selected",BILLING_SEL:"Billing Role already Selected",IMPORTER_SEL:"Importer Role already Selected",REPPRIM_SEL:"REP Primary Role already Selected",REPALT_SEL:"REP Alternate Role already Selected",MSG_LENGTH_MIN5:"Less than minimum length",MSG_LENGTH_6:"Less than minimum length.",MSG_LENGTH_6NUM:"Less than minimum length.",MSG_LENGTH_8NUM:"Less than minimum length.",MSG_LENGTH_7:"Less than minimum length.",MSG_LENGTH_7NUM:"Less than minimum length.",ONE_REP:"At least one contact is required.",MSG_ERR_NOTIF_SEL:"Please select at least one notifiable change.",MSG_ERR_MIN_POS:"Must be a positive number",MSG_ERR_MAX:"Exceeds the maximum",MSG_FORMAT_CHAR_6DIGITS:"ID should be a letter plus 6 digits."}),$translateProvider.translations("fr",{MSG_ERR_MAND:"Ce champ est obligatoire.",MSG_ERR_ROLE:"fr_Please select at least one role",MSG_ERR_DISITYPE:"fr_Please select at least one disinfectant type",MSG_ERR_ADDRESS:"fr_Please select at least one address",MSG_ERR_EMAIL_FORMAT:"Veuillez fournir une adresse électronique valide.",MSG_ERR_CONTACT_NUM:"fr_All the roles have to be used for the company contacts",MSG_ERR_PHONE_FORMAT:"Veuillez fournir un numéro de téléphone valide.",MSG_ERR_FAX_FORMAT:"Veuillez fournir un numéro de télécopieur valide.",MSG_ERR_ALLROLE:"fr_Across the contact records, the roles of manufacturer, mailing, billing, and REP primary contact must be selected",MSG_ERR_ADDRESSSROLE:"fr_The roles of manufacturer, mailing, and billing have not all been selected among the list of addresses",MSG_ERR_POSTAL:"Veuillez fournir un code postal valide.",MSG_ERR_ZIP:"Veuillez fournir un code postal valide.",MSG_ERR_DATE_FORMAT:"Veuillez fournir une une date valide.",MANUFACT_SEL:"fr_Manufacturer Role already Selected",MAIL_SEL:"fr_Mailing Role already Selected",BILLING_SEL:"fr_Billing Role already Selected",IMPORTER_SEL:"fr_Importer Role already Selected",REPPRIM_SEL:"fr_REP Primary Role already Selected",REPALT_SEL:"fr_REP Alternate Role already Selected",MSG_LENGTH_MIN5:"Veuillez fournir au moins 5 chiffres.",MSG_LENGTH_6:"Veuillez fournir au moins 6 caractères.",MSG_LENGTH_6NUM:"Veuillez fournir 6 chiffres.",MSG_LENGTH_8NUM:"Veuillez fournir 8 chiffres.",MSG_LENGTH_7:"Veuillez fournir 7 caractères.",MSG_LENGTH_7NUM:"Veuillez fournir  7 chiffres.",ONE_REP:"Au moins un contact est requis",MSG_ERR_NOTIF_SEL:"Sélectionnez au moins un changement de déclaration",MSG_ERR_MIN_POS:"Doit être un nombre positif",MSG_ERR_MAX:"Dépasse le maximum.",MSG_FORMAT_CHAR_6DIGITS:"fr_ID should be a letter plus 6 digits."}),$translateProvider.translations("en",{ADD_TRANSACTION:"New Record",SEQUENCE_NUM:"Sequence Number",DATE_SUBMITTED:"Date Submitted (YYYY-MM-DD)",SEQUENCE_DESCRIPT:"Regulatory Transaction Description",IS_ACTCHANGES:"Same as Regulatory Activity Contact for this Submission?",COMPANY_ID:"Company ID",DOSSIER_ID:"Dossier ID",DOSSIER_NAME:"Dossier Name",IS_ECTD:"Is this an eCTD transaction?",IS_SOLICITED:"Is this solicited information?",SOLICITED_RQ:"Requester of Solicited Information",SOLICITED_RQ_OTHER:"Other Requester Details",REP_CONTACT_INFO:"Main Contact Information",PROJ_MANAGER_NAME:"Name of Regulatory Project Manager, if known",DATED:"Dated (DD/MM/YYYY)",START_DATE:"Start Date (DD/MM/YYYY)",END_DATE:"End Date (DD/MM/YYYY)",REG_ACTIVITY:"Regulatory Activity",REG_ACTIVITY_TYPE:"Regulatory Activity Type",SEQUENCE_TYPE:"Regulatory Transaction Description",VERSION_NO:"Version Number",BRIEF_DESC:"Brief Description",ADMINISTRATIVE:"Administrative",BENEFIT_RISK_ASSESS:"Benefit Risk Assessment",CANCEL_LETTER:"Cancellation Letter",CHANGE_TO_DIN:"Change to DIN",COMMENTS_NOC:"Comments on Notice of Decision",COMMENTS_SUMMARY_BASIS:"Comments on Summary Basis of Decision (SBD)",COMMENTS_REGULARTORY_DECISION:"Comments on Regulatory Decision Summary",DIN_DISCONTINUED:"Notification of Discontinued Sale (DIN Cancellation)",DRUG_NOTIF_FORM:"Drug Notification Form",FOR_PERIOD:"For Period",INITIAL:"INITIAL",MEETING_MINUTES:"Minutes of Meeting",NOTIFICATION_CHANGE:"Notification of Change in Benefit-Risk Profile",NOTIFICATION_INTERRUPT_SALE:"Notification Interruption of Sale",PANDEMIC_APPL:"Pandemic Application",POST_CLEARANCE_DATA:"Post Clearance Data",POST_MARKET_SURV:"Post Marketing Surveillance",POST_NOC_CHANGE:"Post NOC Change",POST_AUTH_DIV1_CHANGE:"Post-Authorization Division 1 Change",PRESUB_MEETING_PKG:"Submission Meeting Package",PRESUB_MEETING_RQ:"Submission Meeting Request",PRIORITY_REVIEW_RQ:"Priority Review Request",PRISTINE_PM:"Pristine PM",PRISTINE_PM_2LANG:"Pristine PM - Second Language",ADVISEMENT_LETTER_RESPONSE:"Response to Advisement Letter",CLIN_CLARIF_RESPONSE:"Response to Clinical Clarification Request",EMAIL_RQ_RESPONSE:"Response to e-mail Request ",LABEL_CLARIF_RESPONSE:"Response to Labeling Clarification Request",MHPD_RQ_RESPONSE:"Response to MHPD Request",NOC_RESPONSE:"Response to NOC/c-QN",NOD_RESPONSE:"Response to NOD",NON_RESPONSE:"Response to NON",NOL_RESPONSE:"Response to NOL",PROCESSING_CLARIF_RESPONSE:"Response to Processing Clarification Request",QUAL_CLIN_CLARIF_RESPONSE:"Response to Quality and Clinical Clarification Request",QUAL_CLARIF_RESPONSE:"Response to Quality Clarification Request",SCREENING_ACCEPT_RESPONSE:"Response to Screening Acceptance Letter",SCREENING_CLARIF_RESPONSE:"Response to Screening Clarification Request",SDN_RESPONSE:"Response to SDN",PHONE_RQ_RESPONSE:"Response to Telephone Request",RISK_COMMUN_DOC:"Risk Communication Document",RMP_VERSION_DATE:"RMP version #",SIGNAL_WORK_UP:"Signal Work Up",UNSOLICITED_DATA:"Unsolicited Data",YEAR_LIST_OF_CHANGE:"Year, list of change number (for example: 2012, 15, 19a,….)",NONCLIN_CLARIF_RESPONSE:"Response to Non-clinical Clarification Request ",BE_CLARIF_RESPONSE:"Response to BE Clarification Request",RECON_DECIS_LTR_INTENT:"Reconsideration of Decision - Letter of Intent",RECON_DECIS_RQ_RECON:"Reconsideration of Decision - Request for Reconsideration",RECON_DECIS_OTHER_INFO:"Reconsideration of Decision - Other Information",LABEL_PREAPPROVAL_2LANG:"Second Language Label - Pre-Approval",LIFECYCLE_TITLE:"Transaction Details",REG_CONTACT_THIS:"Regulatory Activity Contact for THIS transaction",REG_ACT_CONTACT:"Regulatory Activity Contact",TRANSACTION_HDING:"Regulatory Information",LOAD_TRANSACTION:"Load a Regulatory Transaction File",COMPANY_INFO:"A. Company Information",ADDRESS_INFO:"B. Address Information",COMPANY_REP_THIS:"C. Company Representative",GENERATE_FINAL:"Generate Final XML",CONFIRM_CONTACT_VALID:"I confirm that the above regulatory activity contact information is valid.",YEAR_CHANGE:"Year of the change",REG_ACTIVITY_INSTRUCT:"Regulatory Activity Contact Instructions",SAVE_INSTRUCT:"Transaction File Save Instructions",CLARIF_RESPONSE:"Response to Clarification Request",CORR_PATENT_MED:"Correspondence - Patented Medicines",ALLEGATION_NOTICE:"Notice of allegation",FORM_IV:"Form IV",FORM_V:"Form V",CONSENT_LTR:"Consent Letter",DATA_PROTECT_CORRESP:"Correspondence - Data Protection",CHOOSE_REQUEST:"Choose a requester",TRANSACT_INSTRUCT:"Regulatory Transaction Instructions",LIST_DESCRIPT:"List Description",SEQUENCE_CLEANUP:"eCTD Dossier Clean-up",DEFER_FEES:" A deferral of payment is requested with this transaction.",DEFER_STATEMENT:"The statement supporting the deferral request is included.",FEE_REMISSION:"Fee Remission is requested with this transaction",STATEMENT_REVENUE:"A statement signed by the individual responsible for the applicant's financial affairs is included to certify that the fee payable is greater than 10% of the anticipated gross revenue",SUB_CLASS:"Submission Class",FEE_AMOUNT:"Fees",FEE_DESCRIPTION:"Submission Description",REMISSION_ELIGIBLE:"You are eligible to apply for fee remission. The submission fee is greater than 10% of anticipated gross revenues.",REMISSION_INELIGIBLE:"You are not eligible to apply for fee remission. The submission fee is less than 10% of anticipated gross revenues.",IS_FEE_TRANSACTION:"Are new or revised fees associated with this transaction?",REGULATORY_FEES:"Fees",MITIGATION_MEASURES:"Mitigation Measures",GROSS_REVENUE:"Anticipated gross revenue for this drug product during the fee verification period",TEN_PERCENT_REVENUE:"10% of anticipated gross revenue",REQUIRED_DOC:"Required Documentation",SUPPORTING_DOC:"Please include the required signed statement AND at least one of the support documentation to establish that the applicable fee payable is greater than 10% of the anticipated gross revenue from sales of the drug product in Canada during the fee verification period.",EST_MARKET_SHARE:"Estimated market share (that is [i.e.], product's market potential compared to the total market for similar products in Canada)",SIMILAR_PRODUCT:"Comparison to similar products on the Canadian market or other similar markets (e.g., United States, European Union)",SALES_HISTORY:"Sales history prior to product upgrades or sales history of similar products",MARKETING_PLAN:"Marketing plan/product plan for the drug product",AVG_SALES:"Average sale price and demand",FEES_LESS10K:"Fees of $10,000 or less must be paid at the time of filing of the submission, supplement or application. Please complete the",ADVANCE_PAYMENT:"Advance Payment Details for Drug Submissions and Master Files.",SPONSOR_INVOICE:"Review fees must not be included with the submission, supplement or application. Sponsors will be invoiced for fees of more than $10,000.",PAYMENT_METHODS:"Please select all the payment methods you intend to use",ONE_PAYMENT_METHOD:"Please select all the payment methods you intend to use",DEFER_INSTRUCT:"Deferral of Payment Instructions",REMISSION_INSTRUCT:"Fee Remission Instructions",CLASS_INSTRUCT:"Submission Class Instructions",PRODUCT_INSTRUCT:"Product Name Instructions",LIFECYCLE_INSTRUCT:"Lifecycle Management Table Instructions",SEQUENCE_INSTRUCT:"Sequence Number Instructions",CONTROL_INSTRUCT:"Control Number Instructions",COMPANY_INSTRUCT:"Company Name Instructions",COMPANY_ID_INSTRUCT:"Company ID Instructions",DOSSIER_ID_INSTRUCT:"Dossier ID Instructions",ADMIN_COMP_INSTRUCT:"Administrative Submission or Component Instructions",PLEASE_REMIT:"Please pay the remission processing fee of $578 using the Advance Payment Details for Drug Submissions and Master Files.",APPLY_DEFER:"You are applying for a deferral. Please send no payment with this form.",BANK_DRAFT:"International Bank Draft",MONEY_ORDER:"Money Order",CHEQUE:"Cheque",CREDIT:"Mastercard / Visa / Amex / Visa Debit / JCB International",BANK_WIRE:"Wire (include bank confirmation)",EXISTING_CREDIT:"Existing credit",PREFEERED_OPTION:"Bill Payment Service Option (preferred method)",REG_TRANSACT:"Regulatory Transaction",LIFE_REC:"Transaction Details Record",ONELIFEREC:"One transaction details record is required.",SAVELIFEREC:"One transaction details record is required to save.","LIFECYCLECTRL.LIFECYCLEDETAILSFORM":"with a Transaction Details Record",IS_NEW_ACTIVITY:"Is this transaction for a new or existing regulatory activity?",IS_SIGNED_3RD_PARTY:"Will the submission be signed / filed by a third party on behalf of the manufacturer / sponsor?",AUT_LETTER_NOTE:"A letter of authorization signed by the manufacturer/sponsor company must be provided in section 1.2.6 of the regulatory transaction.",IS_PRIORITY:"Was this regulatory activity approved for priority review?",IS_NOC:"Was this regulatory activity approved for NOC/C review?",IS_ADMIN_SUBMISSION:"Is this regulatory activity an Administrative Submission or does this regulatory activity contain an administrative component?",ADMIN_DESCRIPT:"Administrative Submission or administrative component description",ADMIN_SUB_TYPE:"Reason for Administrative Submission or administrative component",ACTIVITY_LEAD:"Regulatory Activity Lead",OTHER_DOC_DETAILS:"Other Documentation Details","B14-20160301-09":"Pharmaceutical","B14-20160301-02":"Biological","B14-20160301-10":"Post-Market Vigilance","B14-20160301-06":"Consumer Health Product",RESET:"RESET",RESET_INFO:"To enable the 'generate final XML' button, select the 'RESET' button to clear transaction specific fields.",FEE_REMIT_NO_PAYMENT:"Please remit no payment with this transaction. Payment of the fees will be required upon issuance of an invoice",MITIGATION_TYPE:"The following mitigation measures are available (select one). Sponsors must certify that they meet the criteria as outlined in the Food and Drug Regulations.",CERTIFY_ORGANIZATION:"We certify that our organization, including its affiliates, has",CERTIFY_ORGANIZATION_A:"a) a total number of employees less than 100 people, or",CERTIFY_ORGANIZATION_B:"b) a total annual gross revenue between $30,000 and $5 million.",SMALL_BUSINESS_FEE_APPLICATION:"We have completed the Small Business Fee Mitigation Application and attached it with our submission/application.",FIRST_SUBMISSION:"This is my first submission/application",CERTIFY_GOVERMENT_ORGANIZATION:"We certify that our organization is a branch or agency of the Government of Canada or of a province or territory",CERTIFY_URGENT_HEALTH_NEED:"We certify that the drug in our submission/application is on the List of Drugs for an Urgent Public Health Need as per the Access to Drugs in Exceptional Circumstances Regulations AND",DRUG_THE_SAME_INGREDIENT:"a) the drug has the same medicinal ingredient, strength and route of administration, and is in a comparable dosage form, as a drug that may be imported under subsection C.10.001(2) of those Regulations;",NO_DRUG_IDENTIFICATION_NUMBER:"b) no drug identification number has been assigned under section C.01.014.2 of those Regulations for the drug or for another drug that has the same medicinal ingredient, strength and route of administration and is in a comparable dosage form; and",NO_NOTICE_COMPLIANCE:"c) no notice of compliance has been issued under section C.08.004 of those Regulations in respect of the drug or another drug that has the same medicinal ingredient, strength and route of administration and is in a comparable dosage form.",CERTIFY_FUNDED_HEALTH_INSTITUTION:"We certify that our institution is funded by the Government of Canada or the government of a province or territory and that it is",CERTIFY_FUNDED_HEALTH_INSTITUTION_A:"a) licensed, approved or designated by a province in accordance with the laws of the province to provide care or treatment to persons or animals suffering from any form of disease or illness; or",CERTIFY_FUNDED_HEALTH_INSTITUTION_B:"b) owned or operated by the Government of Canada or the government of a province and that provides health services."}),$translateProvider.translations("fr",{ADD_TRANSACTION:"fr_Add Record",SEQUENCE_NUM:"fr_Sequence Number",DATE_SUBMITTED:"fr_Date Submitted",SEQUENCE_DESCRIPT:"fr_Regulatory Transaction Description",IS_ACTCHANGES:"fr_Same as Regulatory Activity Contact for this Submission?",PROJ_MANAGER_NAME:"fr_Name of Regulatory Project Manager, if known",COMPANY_ID:"fr_Company Id",DOSSIER_ID:"fr_Dossier Id",DOSSIER_NAME:"fr_Dossier Name",IS_ECTD:"fr_Is this an eCTD transaction?",IS_SOLICITED:"fr_Is this solicited information",SOLICITED_RQ:"fr_Requester of Solicited Information",SOLICITED_RQ_OTHER:"fr_Other Requester Details",REP_CONTACT_INFO:"Main Contact Information",DATED:"fr_Dated",START_DATE:"fr_Start Date",END_DATE:"fr_End Date",REG_ACTIVITY:"fr_Regulatory Activity",REG_ACTIVITY_TYPE:"fr_Regulatory Activity Type",SEQUENCE_TYPE:"fr_Regulatory Transaction Description ",VERSION_NO:"fr_Version No.",BRIEF_DESC:"fr_Brief Description",ADMINISTRATIVE:"fr_Administrative",BENEFIT_RISK_ASSESS:"fr_Benefit Risk Assessment",CANCEL_LETTER:"fr_Cancellation Letter",CHANGE_TO_DIN:"fr_Change to DIN",COMMENTS_NOC:"fr_Comments on Notice of Decision",COMMENTS_SUMMARY_BASIS:"fr_Comments on Summary Basis of Decision",DIN_DISCONTINUED:"fr_Notification of Discontinued Sale (DIN Cancellation)",DRUG_NOTIF_FORM:"fr_Drug Notification Form",FOR_PERIOD:"fr_For Period",INITIAL:"fr_INITIAL",
MEETING_MINUTES:"fr_Minutes of Meeting",NOTIFICATION_CHANGE:"fr_Notification of Change in benefit-risk profile",NOTIFICATION_INTERRUPT_SALE:"fr_Notification Interruption of Sale",PANDEMIC_APPL:"fr_Pandemic Application",POST_CLEARANCE_DATA:"fr_Post Clearance Data",POST_MARKET_SURV:"fr_Post Marketing Surveillance",POST_NOC_CHANGE:"fr_Post NOC Change",POST_AUTH_DIV1_CHANGE:"fr_Post-Authorization Division 1 Change",PRESUB_MEETING_PKG:"fr_Submission Meeting Package",PRESUB_MEETING_RQ:"fr_Submission Meeting Request",PRIORITY_REVIEW_RQ:"fr_Priority Review Request",PRISTINE_PM:"fr_Pristine PM",PRISTINE_PM_2LANG:"fr_Pristine PM - Second Language",ADVISEMENT_LETTER_RESPONSE:"fr_Response to Advisement Letter ",CLIN_CLARIF_RESPONSE:"fr_Response to Clinical Clarification Request ",EMAIL_RQ_RESPONSE:"fr_Response to e-mail Request ",LABEL_CLARIF_RESPONSE:"fr_Response to Labeling Clarification Request",MHPD_RQ_RESPONSE:"fr_Response to MHPD Requests",NOC_RESPONSE:"fr_Response to NOC/c-QN",NOD_RESPONSE:"fr_Response to NOD",NON_RESPONSE:"fr_Response to NON",PROCESSING_CLARIF_RESPONSE:"fr_Response to Processing Clarification Request",QUAL_CLIN_CLARIF_RESPONSE:"fr_Response to Quality and Clinical Clarification Request",QUAL_CLARIF_RESPONSE:"fr_Response to Quality Clarification Request",SCREENING_ACCEPT_RESPONSE:"fr_Response to Screening Acceptance Letter",SCREENING_CLARIF_RESPONSE:"fr_Response to Screening Clarification Request",SDN_RESPONSE:"fr_Response to SDN",RECON_DECIS_LTR_INTENT:"fr_Reconsideration of Decision - Letter of Intent",RECON_DECIS_RQ_RECON:"fr_Reconsideration of Decision - Request for Reconsideration",RECON_DECIS_OTHER_INFO:"fr_Reconsideration of Decision - Other Information",LABEL_PREAPPROVAL_2LANG:"fr_Second Language Label - Pre-Approval",PHONE_RQ_RESPONSE:"fr_Response to Telephone Request",RISK_COMMUN_DOC:"fr_Risk communication document",RMP_VERSION_DATE:"fr_RMP version number",SIGNAL_WORK_UP:"fr_Signal Work Up",UNSOLICITED_DATA:"fr_Unsolicited Data",YEAR_LIST_OF_CHANGE:"fr_Year, list of change number (for example: 2012, 15, 19a,….)",BE_CLARIF_RESPONSE:"fr_Response to BE Clarification Request",LIFECYCLE_TITLE:"fr_Transaction Details",REG_CONTACT_THIS:"fr_Regulatory Activity Contact for THIS transaction",REG_ACT_CONTACT:"fr_Regulatory Activity Contact",TRANSACTION_HDING:"fr_Regulatory Information",LOAD_TRANSACTION:"fr_Load a Regulatory Transaction File",GENERATE_FINAL:"fr_Generate Final XML",CONFIRM_CONTACT_VALID:"fr_I confirm that the above regulatory activity contact information is valid.",YEAR_CHANGE:"fr_Year of the change, List Description",COMPANY_INFO:"A. Company Information",ADDRESS_INFO:"B. Address Information",COMPANY_REP_THIS:"C. Company Representative",REG_ACTIVITY_INSTRUCT:"fr_Regulatory Activity Contact Instructions",SAVE_INSTRUCT:"fr_Transaction File Save Instructions",CLARIF_RESPONSE:"fr_Response to Clarification Request",NONCLIN_CLARIF_RESPONSE:"fr_Response to Non-clinical Clarification Request ",CORR_PATENT_MED:"fr_Correspondence - Patented Medicines",ALLEGATION_NOTICE:"fr_Notice of allegation",FORM_IV:"fr_Form IV",FORM_V:"fr_Form V",CONSENT_LTR:"fr_Consent Letter",DATA_PROTECT_CORRESP:"fr_Correspondence - Data Protection",CHOOSE_REQUEST:"fr_Choose a requester",TRANSACT_INSTRUCT:"fr_Regulatory Transaction Instructions",LIST_DESCRIPT:"fr_List Description",SEQUENCE_CLEANUP:"fr_eCTD Dossier Clean-up",FEE_REMISSION:"fr_Fee Remission is requested with this transaction",STATEMENT_REVENUE:"fr_A statement signed by the individual responsible for the applicant's financial affairs is included to certify that the fee payable is greater than 10% of the anticipated gross revenue",DEFER_INSTRUCT:"fr_Deferral of payment Instructions",REMISSION_INSTRUCT:"fr_Fee remission Instructions",CLASS_INSTRUCT:"fr_Submission Class Instructions",PRODUCT_INSTRUCT:"fr_Product Name Instructions",LIFECYCLE_INSTRUCT:"fr_Lifecycle Management Table Instructions",SEQUENCE_INSTRUCT:"fr_Sequence Number Instructions",CONTROL_INSTRUCT:"fr_Control Number Instructions",COMPANY_INSTRUCT:"fr_Company Name Instructions",COMPANY_ID_INSTRUCT:"fr_Company ID Instructions",DOSSIER_ID_INSTRUCT:"fr_Dossier ID Instructions",ADMIN_COMP_INSTRUCT:"fr_Administrative Submission or Component Instructions",PLEASE_REMIT:"fr_Please pay the remission processing fee of $578 using the Advance Payment Details for Drug Submissions and Master Files.",APPLY_DEFER:"fr_You are applying for a deferral. Please send no payment with this form.",BANK_DRAFT:"fr_International Bank Draft",MONEY_ORDER:"fr_Money Order",CHEQUE:"fr_Cheque",CREDIT:"fr_Mastercard / Visa / Amex / Visa Debit / JCB International",BANK_WIRE:"fr_Wire (include bank confirmation)",EXISTING_CREDIT:"fr_Existing credit",PREFEERED_OPTION:"fr_Bill Payment Service Option (preferred method)",SUPPORTING_DOC:"fr_Please include the required signed statement AND at least one of the support documentation to establish that the applicable fee payable is greater than 10% of the anticipated gross revenue from sales of the drug product in Canada during the fee verification period.",REG_TRANSACT:"fr_Regulatory Transaction",LIFE_REC:"fr_Transaction details record",ONELIFEREC:"fr_At least one transaction details record is required.",SAVELIFEREC:"fr_At least one transaction details record is required to save.","LIFECYCLECTRL.LIFECYCLEDETAILSFORM":"fr_with a Transaction Details Record",IS_FEE_TRANSACTION:"fr_Are new or revised fees associated with this transaction?",IS_NEW_ACTIVITY:"fr_Is this transaction for a new or existing regulatory activity?",IS_SIGNED_3RD_PARTY:"fr_Will the submission be signed / filed by a third party on behalf of the manufacturer / sponsor?",AUT_LETTER_NOTE:"fr_A letter of authorization signed by the manufacturer/sponsor company must be provided in section 1.2.6 of the regulatory transaction.",IS_PRIORITY:"fr_Was this regulatory activity approved for priority review?",IS_NOC:"fr_Was this regulatory activity approved for NOC/C review?",IS_ADMIN_SUBMISSION:"fr_Is this regulatory activity an Administrative Submission or does this regulatory activity contain an administrative component?",ADMIN_DESCRIPT:"fr_Administrative Submission or administrative component description",ADMIN_SUB_TYPE:"fr_Reason for Administrative Submission or administrative component",ACTIVITY_LEAD:"fr_Regulatory Activity Lead",OTHER_DOC_DETAILS:"fr_Other Documentation Details",SPONSOR_INVOICE:"fr_Review fees must not be included with the submission, supplement or application. Sponsors will be invoiced for fees of more than $10,000.","B14-20160301-09":"fr_Pharmaceutical","B14-20160301-02":"fr_Biological","B14-20160301-10":"fr_Post-Market Vigilance","B14-20160301-06":"fr_Consumer Health Product",COMMENTS_REGULARTORY_DECISION:"Comments on Regulatory Decision Summary"}),$translateProvider.translations("en",{FOR_THE:"The ",THERE_ARE_ERRORS:"There are errors",FORM_NOT_SAVED:"The form could not be saved because ",NOT_SAVED:" could not be saved because ",ERRORS_FOUND:" errors were found.",ERROR_FOUND:"error was found.",TYPE_REQUIRED:"This field is required.",TYPE_EMAIL:"Please enter a valid email address.",TYPE_DUPLICATEROLE:"This role has already been selected.",TYPE_MINLENGTH:"Less than minimum length",POSTAL_FORMAT:"Please enter a valid format",TYPE_MIN:"Must be greater than the minimum",TYPE_DATE:"Please enter a valid date",TYPE_NUMBER:"Please enter a valid number",TYPE_PATTERN:"The format is not valid"}),$translateProvider.translations("fr",{FOR_THE:"Pour le ",THERE_ARE_ERRORS:"Il y a des erreurs",ERRORS_FOUND:"erreurs ont été trouvées.",ERROR_FOUND:"erreur a été trouvée.",TYPE_REQUIRED:"Ce champ est obligatoire.",TYPE_EMAIL:"Veuillez fournir une adresse électronique valide.",TYPE_DUPLICATEROLE:"Ce rôle a déjà été sélectionné.",TYPE_MINLENGTH:"Moins de longueur minimale.",POSTAL_FORMAT:"Entrez un format valide.",TYPE_MIN:"Doit être supérieur au minimum.",TYPE_DATE:"Veuillez fournir une une date valide.",TYPE_NUMBER:"Veuillez fournir un numéro valide.",TYPE_PATTERN:"fr_The format is not valid"})}]),function(){"use strict";angular.module("numberFormat",[])}(),function(){"use strict";function digitsCtrl(){function link(scope,element,attrs,modelCtrl){modelCtrl.$parsers.push(function(inputValue){if(void 0==inputValue)return"";var isNumber=!1,max=-1,ignore=!1,tempVal=""+inputValue;attrs.type&&"number"===attrs.type&&(isNumber=!0),attrs.onlyMax&&(max=parseInt(attrs.onlyMax));var regexIntNeg=/[^0-9-]/g,integerReg=/[^0-9]/g,regexValue=integerReg;if("intNeg"==attrs.onlyDigits?regexValue=regexIntNeg:"false"===attrs.onlyDigits?ignore=!0:regexValue=integerReg,ignore)return inputValue;var transformedInput=tempVal.replace(regexValue,"");return max>0&&(transformedInput=transformedInput.substring(0,max)),transformedInput!==tempVal&&(isNumber&&transformedInput&&(transformedInput=parseFloat(transformedInput)),modelCtrl.$setViewValue(transformedInput),modelCtrl.$render()),transformedInput})}var directive={link:link,restrict:"A",require:"?ngModel"};return directive}angular.module("numberFormat").directive("onlyDigits",digitsCtrl)}(),function(){angular.module("activityFormFilterModule",["hpfbConstants"])}(),function(){function getService(){function _getPharmaRAList(raList){for(var newList=[],i=0;i<raList.length;i++)switch(raList[i].id){case"B02-20160301-001":newList.push(raList[i]);break;case"B02-20160301-031":newList.push(raList[i]);break;case"B02-20160301-032":newList.push(raList[i]);break;case"B02-20160301-038":newList.push(raList[i]);break;case"B02-20160301-046":newList.push(raList[i]);break;case"B02-20160301-047":newList.push(raList[i]);break;case"B02-20160301-049":newList.push(raList[i]);break;case"B02-20160301-050":newList.push(raList[i]);break;case"B02-20160301-051":newList.push(raList[i]);break;case"B02-20160301-067":newList.push(raList[i]);break;case"B02-20160301-068":newList.push(raList[i]);break;case"B02-20160301-075":newList.push(raList[i]);break;case"B02-20160301-077":newList.push(raList[i]);break;case"B02-20160301-078":newList.push(raList[i]);break;case"B02-20160301-082":newList.push(raList[i]);break;case"B02-20160301-084":newList.push(raList[i]);break;case"B02-20160301-085":newList.push(raList[i]);break;case"B02-20160301-088":newList.push(raList[i]);break;case"B02-20160301-028":newList.push(raList[i]);break;case"B02-20160301-018":newList.push(raList[i]);break;case"B02-20160301-020":newList.push(raList[i]);break;case"B02-20160301-021":newList.push(raList[i]);break;case"B02-20160301-043":newList.push(raList[i]);break;case"B02-20160301-070":newList.push(raList[i])}return newList}function _getBiolRAList(raList){for(var newList=[],i=0;i<raList.length;i++)switch(raList[i].id){case"B02-20160301-031":newList.push(raList[i]);break;case"B02-20160301-032":newList.push(raList[i]);break;case"B02-20160301-038":newList.push(raList[i]);break;case"B02-20160301-046":newList.push(raList[i]);break;case"B02-20160301-047":newList.push(raList[i]);break;case"B02-20160301-049":newList.push(raList[i]);break;case"B02-20160301-050":newList.push(raList[i]);break;case"B02-20160301-051":newList.push(raList[i]);break;case"B02-20160301-067":newList.push(raList[i]);break;case"B02-20160301-068":newList.push(raList[i]);break;case"B02-20160301-075":newList.push(raList[i]);break;case"B02-20160301-077":newList.push(raList[i]);break;case"B02-20160301-078":newList.push(raList[i]);break;case"B02-20160301-084":newList.push(raList[i]);break;case"B02-20160301-085":newList.push(raList[i]);break;case"B02-20160301-088":newList.push(raList[i]);break;case"B02-20160301-089":newList.push(raList[i]);break;case"B02-20160301-028":newList.push(raList[i]);break;case"B02-20160301-019":newList.push(raList[i]);break;case"B02-20160301-043":newList.push(raList[i]);break;case"B02-20160301-071":newList.push(raList[i])}return newList}function _getPostMarketRAList(raList){for(var newList=[],i=0;i<raList.length;i++)switch(raList[i].id){case"B02-20160301-069":newList.push(raList[i]);break;case"B02-20160301-079":newList.push(raList[i]);break;case"B02-20160301-080":newList.push(raList[i]);break;case"B02-20160301-087":newList.push(raList[i])}return newList}function _getConsumHealthList(raList){for(var newList=[],i=0;i<raList.length;i++)switch(raList[i].id){case"B02-20160301-001":newList.push(raList[i]);break;case"B02-20160301-031":newList.push(raList[i]);break;case"B02-20160301-032":newList.push(raList[i]);break;case"B02-20160301-038":newList.push(raList[i]);break;case"B02-20160301-046":newList.push(raList[i]);break;case"B02-20160301-047":newList.push(raList[i]);break;case"B02-20160301-049":newList.push(raList[i]);break;case"B02-20160301-050":newList.push(raList[i]);break;case"B02-20160301-051":newList.push(raList[i]);break;case"B02-20160301-067":newList.push(raList[i]);break;case"B02-20160301-068":newList.push(raList[i]);break;case"B02-20160301-075":newList.push(raList[i]);break;case"B02-20160301-077":newList.push(raList[i]);break;case"B02-20160301-078":newList.push(raList[i]);break;case"B02-20160301-082":newList.push(raList[i]);break;case"B02-20160301-084":newList.push(raList[i]);break;case"B02-20160301-085":newList.push(raList[i]);break;case"B02-20160301-088":newList.push(raList[i]);break;case"B02-20160301-028":newList.push(raList[i]);break;case"B02-20160301-018":newList.push(raList[i]);break;case"B02-20160301-020":newList.push(raList[i]);break;case"B02-20160301-021":newList.push(raList[i]);break;case"B02-20160301-043":newList.push(raList[i]);break;case"B02-20160301-070":newList.push(raList[i])}return newList}var service={getPharmaRAList:_getPharmaRAList,getBiolRAList:_getBiolRAList,getConsumHealthList:_getConsumHealthList,getPostMarketRAList:_getPostMarketRAList};return service}angular.module("activityFormFilterModule").factory("ActivityFormFilterService",getService),getService.inject=[]}(),function(){"use strict";angular.module("hpfbConstants",[]),angular.module("hpfbConstants").constant("SOFTWARE_VERSION","1.3.0").constant("CANADA","CAN").constant("OTHER","OTHER").constant("YES","Y").constant("NO","N").constant("USA","USA").constant("UNKNOWN","UNKNOWN").constant("NEW","New").constant("EXISTING","Existing").constant("ENGLISH","en").constant("FRENCH","fr").constant("NEW_TYPE","NEW").constant("APPROVED_TYPE","FINAL").constant("DEPRECATED_APPROVED_TYPE","APPROVED").constant("AMEND_TYPE","AMEND").constant("INTERNAL_TYPE","INT").constant("EXTERNAL_TYPE","EXT").constant("PHARMA_TYPE","PHARMA").constant("RELATIVE_FOLDER_DATA","../data/").constant("CSP_XSL","CSP_Enrolment.xsl").constant("HCSC","hcsc").constant("XML","xml").constant("ADVANCE_FEE_PAYMENT_EN","https://www.canada.ca/content/dam/hc-sc/migration/hc-sc/dhp-mps/alt_formats/pdf/prodpharma/applic-demande/form/adv-pa-av2-eng.pdf").constant("ADVANCE_FEE_PAYMENT_FR","https://www.canada.ca/content/dam/hc-sc/migration/hc-sc/dhp-mps/alt_formats/pdf/prodpharma/applic-demande/form/adv-pa-av2-fra.pdf")}(),function(){"use strict";angular.module("filterLists",["hpfbConstants"])}(),function(){"use strict";function orderByTranslatedCountry($translate,$filter,CANADA,USA){return function(array,objKey){var result=[],translated=[];return angular.forEach(array,function(value){translated.push({key:value,label:$translate.instant(value)})}),result.push(CANADA),result.push(USA),angular.forEach($filter("orderBy")(translated,"label"),function(sortedObject){sortedObject.key!==CANADA&&sortedObject.key!==USA&&result.push(sortedObject.key)}),result}}function orderByTranslatedCountryAndLabel($translate,$filter,CANADA,USA){return function(array){var result=[],translated=[];return angular.forEach(array,function(value){translated.push({key:value,label:$translate.instant(value)})}),result.push({key:CANADA,label:$translate.instant(CANADA)}),result.push({key:USA,label:$translate.instant(USA)}),angular.forEach($filter("orderBy")(translated,"label"),function(sortedObject){sortedObject.key!==CANADA&&sortedObject.key!==USA&&result.push(sortedObject)}),result}}function findCountryObj(){return function(array,targetKey){for(var i=0;i<array.length;i++)if(array[i].key===targetKey)return array[i];return null}}function orderByTranslated($translate,$filter){return function(array){var result=[],translated=[];return angular.forEach(array,function(value){translated.push({key:value,label:$translate.instant(value)})}),angular.forEach($filter("orderBy")(translated,"label"),function(sortedObject){result.push(sortedObject.key)}),result}}function sequenceOrderBy($filter){return function(array){var result=[];return angular.forEach($filter("orderBy")(array,"sequence",!0),function(sortedObject){result.push(sortedObject)}),result}}function orderByTranslatedOtherFirst($translate,$filter,OTHER){return function(array){var result=[],translated=[];return angular.forEach(array,function(value){translated.push({key:value,label:$translate.instant(value)})}),result.push(OTHER),angular.forEach($filter("orderBy")(translated,"label"),function(sortedObject){sortedObject.key!==OTHER&&result.push(sortedObject.key)}),result}}function _orderByLocale(){return function(items,lang){return items.sort(function(a,b){return a[lang].localeCompare(b[lang],lang)}),items}}function _findById($filter){return function(array,searchJson){var initialResult=$filter("filter")(array,searchJson);if(!initialResult)return null;if(1===initialResult.length)return initialResult[0];for(var i=0;i<initialResult.length;i++)if(initialResult[i].id===searchJson.id)return initialResult[i];return null}}angular.module("filterLists").filter("orderByTranslatedCountry",orderByTranslatedCountry).filter("orderByTranslated",orderByTranslated).filter("orderByTranslatedOtherFirst",orderByTranslatedOtherFirst).filter("orderByCountryAndLabel",orderByTranslatedCountryAndLabel).filter("orderByLocale",_orderByLocale).filter("findCountryObject",findCountryObj).filter("findListItemById",_findById).filter("sequenceOrderDescending",sequenceOrderBy),orderByTranslatedCountry.$inject=["$translate","$filter","CANADA","USA"],orderByTranslated.$inject=["$translate","$filter"],orderByTranslatedOtherFirst.$inject=["$translate","$filter","OTHER"],_findById.$inject=["$filter"]}(),function(){"use strict";angular.module("dataLists",["hpfbConstants"])}(),function(){"use strict";function getService(UNKNOWN){function _createCountryArray(translateJson){vm.countryList=translateJson}function _getUnknownCountryRec(){return{id:UNKNOWN,en:"Unknown",fr:"Inconnu"}}function getCountryValuesArray(){return vm.countryList}function getProvinceValuesArray(){return["AB","BC","MB","NB","NL","NT","NS","NU","ON","PE","QC","SK","YT"]}function getUSStatesValueArray(){return["AL","AK","AZ","AR","CA","CO","CT","DE","DC","FL","GA","HI","ID","IL","IN","IA","KS","KY","LA","ME","MD","MA","MI","MN","MS","MO","MT","NE","NV","NH","NJ","NM","NY","NC","ND","OH","OK","OR","PA","RI","SC","SD","TN","TX","UT","VT","VA","WA","WV","WI","WY"]}var vm=this;vm.countryList=[];var service={getCountries:getCountryValuesArray,getProvinces:getProvinceValuesArray,getUSStates:getUSStatesValueArray,createCountryList:_createCountryArray,getUnknownCountryRecord:_getUnknownCountryRec};return service}angular.module("dataLists").factory("getCountryAndProvinces",getService),getService.inject=["UNKNOWN"]}(),function(){"use strict";function getSalService($filter,$q,$http,$translate,OTHER,FRENCH,RELATIVE_FOLDER_DATA){function getSalValuesArray(){return["SALUT_DR","SALUT_MR","SALUT_MRS","SALUT_MS"]}function getLanguagesValuesArray(){return["en","fr"]}function _createInternalContacts(){var deferred=$q.defer(),contactsUrl=RELATIVE_FOLDER_DATA+"internalContacts.json";return vm.internalContacts&&0!==vm.internalContacts.length?deferred.resolve(vm.internalContacts):$http.get(contactsUrl).success(function(data,status,headers,config){var newList=_createSortedArray(data,"en"),lang=$translate.proposedLanguage()||$translate.use(),otherRec={id:OTHER,en:"Other"};lang===FRENCH&&(otherRec.en="Autre"),newList.unshift(otherRec),vm.internalContacts=newList,deferred.resolve(newList)}).error(function(data,status,headers,config){deferred.reject(status)}),deferred.promise}function _getInternalContacts(){return _createInternalContacts()}function _getInternalContactsWithoutOther(){var deferred=$q.defer(),contactsUrl=RELATIVE_FOLDER_DATA+"internalContacts.json";return vm.internalContacts&&0!==vm.internalContacts.length?deferred.resolve(vm.internalContacts):$http.get(contactsUrl).success(function(data,status,headers,config){var newList=_createSortedArray(data,"en");vm.internalContacts=newList,deferred.resolve(newList)}).error(function(data,status,headers,config){deferred.reject(status)}),deferred.promise}function _createSortedArray(jsonList,lang){var result=[];return angular.forEach($filter("orderByLocale")(jsonList,lang),function(sortedObject){result.push(sortedObject)}),result}function _getAdminSubType(){return vm.adminSubTypeArray&&0!==vm.adminSubTypeArray.length?vm.adminSubTypeArray:_loadAdminType()}function _loadAdminType(){var deferred=$q.defer(),url=RELATIVE_FOLDER_DATA+"adminSubType.json";return $http.get(url).success(function(data,status,headers,config){var lang=$translate.proposedLanguage()||$translate.use(),newList=_createSortedArray(data,lang);vm.adminSubTypeArray=newList,deferred.resolve(newList)}).error(function(data,status,headers,config){deferred.reject(status)}),deferred.promise}var vm=this;vm.internalContacts=[],vm.adminSubTypeArray=[];var service={getSalutationList:getSalValuesArray,getLanguages:getLanguagesValuesArray,createInternalContacts:_createInternalContacts,getInternalContacts:_getInternalContacts,getInternalContactsWithoutOther:_getInternalContactsWithoutOther,getAdminSubType:_getAdminSubType};return service}angular.module("dataLists").factory("getContactLists",getSalService),getSalService.$inject=["$filter","$q","$http","$translate","OTHER","FRENCH","RELATIVE_FOLDER_DATA"]}(),function(){"use strict";function getRolesService(){function getRoleValuesArray(){return["","ROLE_PRIMARY","ROLE_SECONDARY"]}function _getFormTypes(){return[_biologic,_pharma]}function _getBiologic(){return _biologic}function _getPharmaceutical(){return _pharma}var _biologic="BIOLOGIC",_pharma="PHARMACEUTICAL",service={getContactRoles:getRoleValuesArray,getFormTypes:_getFormTypes,getBiologicType:_getBiologic,getPharmaType:_getPharmaceutical};return service}angular.module("dataLists").factory("getRoleLists",getRolesService)}(),function(){"use strict";angular.module("services",[])}(),function(){"use strict";function getTransactionSeq($http,$q){function yesNoArray(){return["Y","N"]}function _createRaArray(value){vm.raTypeArray=value}function _createFeeArray(value){vm.feeTypeArray=value}function _createMitigationArray(value){vm.mitigationTypeArray=value}function getTransactionDescriptionsArray(){return vm.allActivities}function getActivityArray(){return vm.raTypeArray}function _getfeeTypeArray(){return vm.feeTypeArray}function _getMitigationTypeArray(){return vm.mitigationTypeArray}function getPresubArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE]}function getANDSArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.COMMENTS_NOC,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.INITIAL,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.PRISTINE_PM,vm.allActivities.PRISTINE_PM_2LANG,vm.allActivities.BE_CLARIF_RESPONSE,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.NOC_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.NON_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.CORR_PATENT_MED,vm.allActivities.ALLEGATION_NOTICE,vm.allActivities.FORM_IV,vm.allActivities.FORM_V,vm.allActivities.CONSENT_LTR,vm.allActivities.DATA_PROTECT_CORRESP]}function getDINAArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.INITIAL,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRISTINE_PM,vm.allActivities.PRISTINE_PM_2LANG,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.NON_RESPONSE,vm.allActivities.NOD_RESPONSE]}function getDINBArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.INITIAL,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRISTINE_PM,vm.allActivities.PRISTINE_PM_2LANG,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.NON_RESPONSE,vm.allActivities.NOD_RESPONSE]}function getEUNDSArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.BE_CLARIF_RESPONSE,vm.allActivities.CANCEL_LETTER,vm.allActivities.COMMENTS_NOC,vm.allActivities.COMMENTS_SUMMARY_BASIS,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.INITIAL,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.PRISTINE_PM,vm.allActivities.PRISTINE_PM_2LANG,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.NOC_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.NON_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.CORR_PATENT_MED,vm.allActivities.ALLEGATION_NOTICE,vm.allActivities.FORM_IV,vm.allActivities.FORM_V,vm.allActivities.CONSENT_LTR,vm.allActivities.DATA_PROTECT_CORRESP,vm.allActivities.NONCLIN_CLARIF_RESPONSE]}function getEUSNDSArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.BE_CLARIF_RESPONSE,vm.allActivities.CANCEL_LETTER,vm.allActivities.COMMENTS_NOC,vm.allActivities.COMMENTS_SUMMARY_BASIS,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.POST_NOC_CHANGE,vm.allActivities.PRISTINE_PM,vm.allActivities.PRISTINE_PM_2LANG,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.NOC_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.NON_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.CORR_PATENT_MED,vm.allActivities.ALLEGATION_NOTICE,vm.allActivities.FORM_IV,vm.allActivities.FORM_V,vm.allActivities.CONSENT_LTR,vm.allActivities.DATA_PROTECT_CORRESP,vm.allActivities.NONCLIN_CLARIF_RESPONSE]}function getLevel3Array(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.YEAR_LIST_OF_CHANGE,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE]}function getNCArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.COMMENTS_SUMMARY_BASIS,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.POST_NOC_CHANGE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.PRISTINE_PM,vm.allActivities.PRISTINE_PM_2LANG,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.NOL_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA]}function getNDSArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.COMMENTS_NOC,vm.allActivities.COMMENTS_SUMMARY_BASIS,vm.allActivities.COMMENTS_REGULARTORY_DECISION,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.INITIAL,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.PRISTINE_PM,vm.allActivities.PRISTINE_PM_2LANG,vm.allActivities.BE_CLARIF_RESPONSE,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.NOC_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.NON_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.CORR_PATENT_MED,vm.allActivities.ALLEGATION_NOTICE,vm.allActivities.FORM_IV,vm.allActivities.FORM_V,vm.allActivities.CONSENT_LTR,vm.allActivities.DATA_PROTECT_CORRESP,vm.allActivities.NONCLIN_CLARIF_RESPONSE]}function getPSURCArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.COMMENTS_SUMMARY_BASIS,vm.allActivities.FOR_PERIOD,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.MEETING_MINUTES,vm.allActivities.MHPD_RQ_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.PHONE_RQ_RESPONSE]}function getPSURPVArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.FOR_PERIOD,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.MEETING_MINUTES,vm.allActivities.MHPD_RQ_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.CLIN_CLARIF_RESPONSE]}function getRMPPVArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.MEETING_MINUTES,vm.allActivities.MHPD_RQ_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.RMP_VERSION_DATE,vm.allActivities.CLIN_CLARIF_RESPONSE];
}function getSANDSArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.COMMENTS_NOC,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.POST_NOC_CHANGE,vm.allActivities.PRISTINE_PM,vm.allActivities.PRISTINE_PM_2LANG,vm.allActivities.BE_CLARIF_RESPONSE,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.NOC_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.NON_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.CORR_PATENT_MED,vm.allActivities.ALLEGATION_NOTICE,vm.allActivities.FORM_IV,vm.allActivities.FORM_V,vm.allActivities.CONSENT_LTR,vm.allActivities.DATA_PROTECT_CORRESP]}function getSNDSArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.COMMENTS_NOC,vm.allActivities.COMMENTS_SUMMARY_BASIS,vm.allActivities.COMMENTS_REGULARTORY_DECISION,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.MEETING_MINUTES,vm.allActivities.PANDEMIC_APPL,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.POST_NOC_CHANGE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.PRISTINE_PM,vm.allActivities.PRISTINE_PM_2LANG,vm.allActivities.BE_CLARIF_RESPONSE,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.NOC_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.NON_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.CORR_PATENT_MED,vm.allActivities.ALLEGATION_NOTICE,vm.allActivities.FORM_IV,vm.allActivities.FORM_V,vm.allActivities.CONSENT_LTR,vm.allActivities.DATA_PROTECT_CORRESP,vm.allActivities.NONCLIN_CLARIF_RESPONSE]}function getSNDSCArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.COMMENTS_NOC,vm.allActivities.COMMENTS_SUMMARY_BASIS,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_NOC_CHANGE,vm.allActivities.PRISTINE_PM,vm.allActivities.PRISTINE_PM_2LANG,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.NOC_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.NON_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.CORR_PATENT_MED,vm.allActivities.ALLEGATION_NOTICE,vm.allActivities.FORM_IV,vm.allActivities.FORM_V,vm.allActivities.CONSENT_LTR,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.DATA_PROTECT_CORRESP]}function getUDPVArray(){return[vm.allActivities.BENEFIT_RISK_ASSESS,vm.allActivities.CANCEL_LETTER,vm.allActivities.NOTIFICATION_CHANGE,vm.allActivities.POST_MARKET_SURV,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.MEETING_MINUTES,vm.allActivities.MHPD_RQ_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.RISK_COMMUN_DOC,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.SIGNAL_WORK_UP]}function getUDRAArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.DIN_DISCONTINUED,vm.allActivities.ADVISEMENT_LETTER_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.MEETING_MINUTES,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.NOTIFICATION_INTERRUPT_SALE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.SEQUENCE_CLEANUP]}function getConsultArray(){return[vm.allActivities.PANDEMIC_APPL]}function _getMPNCArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ]}function _getMPNDSArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ]}function _getMPSNDSArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ]}function _getPANDArray(){return[vm.allActivities.BE_CLARIF_RESPONSE,vm.allActivities.CANCEL_LETTER,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.COMMENTS_NOC,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.INITIAL,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PANDEMIC_APPL,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.PRISTINE_PM_2LANG,vm.allActivities.PRISTINE_PM,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.NOC_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.NON_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.CORR_PATENT_MED,vm.allActivities.ALLEGATION_NOTICE,vm.allActivities.FORM_IV,vm.allActivities.FORM_V,vm.allActivities.CONSENT_LTR,vm.allActivities.DATA_PROTECT_CORRESP,vm.allActivities.NONCLIN_CLARIF_RESPONSE]}function _getPBRERCArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.COMMENTS_SUMMARY_BASIS,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.FOR_PERIOD,vm.allActivities.MEETING_MINUTES,vm.allActivities.MHPD_RQ_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.PHONE_RQ_RESPONSE]}function _getPBRERPVArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.FOR_PERIOD,vm.allActivities.MEETING_MINUTES,vm.allActivities.MHPD_RQ_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.CLIN_CLARIF_RESPONSE]}function _getPRNDSArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.MEETING_MINUTES,vm.allActivities.PRIORITY_REVIEW_RQ,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.RECON_DECIS_OTHER_INFO]}function _getPRSNDSArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.MEETING_MINUTES,vm.allActivities.PRIORITY_REVIEW_RQ,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.RECON_DECIS_OTHER_INFO]}function getYBPRArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.FOR_PERIOD,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.MEETING_MINUTES,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE]}function getDSurArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.FOR_PERIOD,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.MEETING_MINUTES,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.PHONE_RQ_RESPONSE]}function getDINAArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.CHANGE_TO_DIN,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.INITIAL,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.PRISTINE_PM,vm.allActivities.PRISTINE_PM_2LANG,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.BE_CLARIF_RESPONSE,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.NON_RESPONSE,vm.allActivities.NOD_RESPONSE]}function getDINBArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.CHANGE_TO_DIN,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.INITIAL,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.PRISTINE_PM,vm.allActivities.PRISTINE_PM_2LANG,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.YEAR_LIST_OF_CHANGE,vm.allActivities.NON_RESPONSE,vm.allActivities.NOD_RESPONSE]}function getDINDArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.CHANGE_TO_DIN,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.INITIAL,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.NON_RESPONSE,vm.allActivities.NOD_RESPONSE]}function getDINFArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.CHANGE_TO_DIN,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.INITIAL,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.LABEL_PREAPPROVAL_2LANG]}function getMPDINArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE]}function getPDCArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_AUTH_DIV1_CHANGE,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.PRISTINE_PM,vm.allActivities.PRISTINE_PM_2LANG,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.NOL_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO]}function getPDCBArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_AUTH_DIV1_CHANGE,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.PRISTINE_PM,vm.allActivities.PRISTINE_PM_2LANG,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.NOL_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO]}function _getActivityLeadArray(){return[vm.PHARMA,vm.BIOLOGICAL,vm.POSTMARKET,vm.CONSUMERHEALTH]}function _getBiologicalLead(){return vm.BIOLOGICAL}function _getPharmaLead(){return vm.PHARMA}function _getPostMarketLead(){return vm.POSTMARKET}function _getConsumHealthLead(){return vm.CONSUMERHEALTH}var vm=this;vm.raTypeArray=[],vm.feeTypeArray=[],vm.mitigationTypeArray=[],vm.BIOLOGICAL="B14-20160301-02",vm.CONSUMERHEALTH="B14-20160301-06",vm.PHARMA="B14-20160301-09",vm.POSTMARKET="B14-20160301-10",vm.allActivities={ADMINISTRATIVE:"ADMINISTRATIVE",BENEFIT_RISK_ASSESS:"BENEFIT_RISK_ASSESS",CANCEL_LETTER:"CANCEL_LETTER",CHANGE_TO_DIN:"CHANGE_TO_DIN",COMMENTS_NOC:"COMMENTS_NOC",COMMENTS_SUMMARY_BASIS:"COMMENTS_SUMMARY_BASIS",COMMENTS_REGULARTORY_DECISION:"COMMENTS_REGULARTORY_DECISION",DIN_DISCONTINUED:"DIN_DISCONTINUED",DRUG_NOTIF_FORM:"DRUG_NOTIF_FORM",FOR_PERIOD:"FOR_PERIOD",INITIAL:"INITIAL",MEETING_MINUTES:"MEETING_MINUTES",NOTIFICATION_CHANGE:"NOTIFICATION_CHANGE",NOTIFICATION_INTERRUPT_SALE:"NOTIFICATION_INTERRUPT_SALE",PANDEMIC_APPL:"PANDEMIC_APPL",POST_CLEARANCE_DATA:"POST_CLEARANCE_DATA",POST_MARKET_SURV:"POST_MARKET_SURV",POST_NOC_CHANGE:"POST_NOC_CHANGE",POST_AUTH_DIV1_CHANGE:"POST_AUTH_DIV1_CHANGE",PRESUB_MEETING_PKG:"PRESUB_MEETING_PKG",PRESUB_MEETING_RQ:"PRESUB_MEETING_RQ",PRIORITY_REVIEW_RQ:"PRIORITY_REVIEW_RQ",PRISTINE_PM:"PRISTINE_PM",PRISTINE_PM_2LANG:"PRISTINE_PM_2LANG",ADVISEMENT_LETTER_RESPONSE:"ADVISEMENT_LETTER_RESPONSE",CLIN_CLARIF_RESPONSE:"CLIN_CLARIF_RESPONSE",EMAIL_RQ_RESPONSE:"EMAIL_RQ_RESPONSE",LABEL_CLARIF_RESPONSE:"LABEL_CLARIF_RESPONSE",MHPD_RQ_RESPONSE:"MHPD_RQ_RESPONSE",NOC_RESPONSE:"NOC_RESPONSE",NOD_RESPONSE:"NOD_RESPONSE",NOL_RESPONSE:"NOL_RESPONSE",NON_RESPONSE:"NON_RESPONSE",PROCESSING_CLARIF_RESPONSE:"PROCESSING_CLARIF_RESPONSE",QUAL_CLIN_CLARIF_RESPONSE:"QUAL_CLIN_CLARIF_RESPONSE",QUAL_CLARIF_RESPONSE:"QUAL_CLARIF_RESPONSE",RECON_DECIS_LTR_INTENT:"RECON_DECIS_LTR_INTENT",RECON_DECIS_RQ_RECON:"RECON_DECIS_RQ_RECON",RECON_DECIS_OTHER_INFO:"RECON_DECIS_OTHER_INFO",SCREENING_ACCEPT_RESPONSE:"SCREENING_ACCEPT_RESPONSE",SCREENING_CLARIF_RESPONSE:"SCREENING_CLARIF_RESPONSE",SDN_RESPONSE:"SDN_RESPONSE",LABEL_PREAPPROVAL_2LANG:"LABEL_PREAPPROVAL_2LANG",PHONE_RQ_RESPONSE:"PHONE_RQ_RESPONSE",RISK_COMMUN_DOC:"RISK_COMMUN_DOC",RMP_VERSION_DATE:"RMP_VERSION_DATE",SIGNAL_WORK_UP:"SIGNAL_WORK_UP",UNSOLICITED_DATA:"UNSOLICITED_DATA",YEAR_LIST_OF_CHANGE:"YEAR_LIST_OF_CHANGE",BE_CLARIF_RESPONSE:"BE_CLARIF_RESPONSE",CORR_PATENT_MED:"CORR_PATENT_MED",ALLEGATION_NOTICE:"ALLEGATION_NOTICE",FORM_IV:"FORM_IV",FORM_V:"FORM_V",CONSENT_LTR:"CONSENT_LTR",DATA_PROTECT_CORRESP:"DATA_PROTECT_CORRESP",NONCLIN_CLARIF_RESPONSE:"NONCLIN_CLARIF_RESPONSE",SEQUENCE_CLEANUP:"SEQUENCE_CLEANUP"};var service={getTransactionDescriptions:getTransactionDescriptionsArray,getActivityTypes:getActivityArray,createRaTypes:_createRaArray,getBiologicalLeadValue:_getBiologicalLead,getPharmaLeadValue:_getPharmaLead,getPostMarketLeadValue:_getPostMarketLead,getConsumHealthLeadValue:_getConsumHealthLead,getPresubTypes:getPresubArray,getAndsType:getANDSArray,getDinaType:getDINAArray,getDinbType:getDINBArray,getDindType:getDINDArray,getDinfType:getDINFArray,getDSurType:getDSurArray,getEundsType:getEUNDSArray,getEusndsType:getEUSNDSArray,getLevel3Type:getLevel3Array,getMPDINType:getMPDINArray,getNcType:getNCArray,getNdsType:getNDSArray,getPdcType:getPDCArray,getPdcBType:getPDCBArray,getPresubType:getPresubArray,getpSurCType:getPSURCArray,getpSurPvType:getPSURPVArray,getRmpPvType:getRMPPVArray,getSandsType:getSANDSArray,getSndsType:getSNDSArray,getSndsCArray:getSNDSCArray,getUdpvType:getUDPVArray,getUdraType:getUDRAArray,getYbprType:getYBPRArray,getConsultType:getConsultArray,getMPNCType:_getMPNCArray,getMPNDSType:_getMPNDSArray,getMPSNDSType:_getMPSNDSArray,getPANDType:_getPANDArray,getPBRERCType:_getPBRERCArray,getPBRERPVType:_getPBRERPVArray,getPRNDSType:_getPRNDSArray,getPRSNDSType:_getPRSNDSArray,getYesNoList:yesNoArray,getFeeList:_getfeeTypeArray,createFeeTypes:_createFeeArray,getMitigationList:_getMitigationTypeArray,createMitigationList:_createMitigationArray,getActivityLeadList:_getActivityLeadArray};return service}angular.module("services").factory("TransactionLists",getTransactionSeq),getTransactionSeq.inject=["$http","$q"]}(),function(){"use strict";angular.module("transactionLoadService",["dataLists","hpfbConstants","services"])}(),function(){"use strict";angular.module("transactionLoadService").factory("customLoad",["$http","$q","$filter","getCountryAndProvinces","CANADA","USA","OTHER","RELATIVE_FOLDER_DATA","getContactLists","TransactionLists",function($http,$q,$filter,getCountryAndProvinces,CANADA,USA,OTHER,RELATIVE_FOLDER_DATA,getContactLists,TransactionLists){function _createTranslateList(jsonList,lang){lang||(lang="en");for(var resultList={},i=0;i<jsonList.length;i++)resultList[jsonList[i].id]=jsonList[i][lang];return resultList}function _createSortedArrayNAFirst(jsonList,lang){var result=[],canadaRecord=null,usaRecord=null;return angular.forEach($filter("orderByLocale")(jsonList,lang),function(sortedObject){sortedObject.id===USA?usaRecord=sortedObject:sortedObject.id===CANADA?canadaRecord=sortedObject:result.push(sortedObject)}),usaRecord&&result.unshift(usaRecord),canadaRecord&&result.unshift(canadaRecord),result}function _createSortedArray(jsonList,lang){var result=[];return angular.forEach($filter("orderByLocale")(jsonList,lang),function(sortedObject){result.push(sortedObject)}),result}return function(options){var deferred=$q.defer(),countryUrl=RELATIVE_FOLDER_DATA+"countries.json",raTypeUrl=RELATIVE_FOLDER_DATA+"raType.json",feeUrl=RELATIVE_FOLDER_DATA+"feeClass.json",mitigationUrl=RELATIVE_FOLDER_DATA+"mitigationType.json",resultTranslateList={};return $http.get(countryUrl).then(function(response){var newList=_createSortedArrayNAFirst(response.data,options.key),translateList=_createTranslateList(newList,options.key);return getCountryAndProvinces.createCountryList(newList),angular.extend(resultTranslateList,translateList),$http.get(raTypeUrl)}).then(function(response){var newList=_createSortedArray(response.data,options.key),translateList=_createTranslateList(newList,options.key);return TransactionLists.createRaTypes(newList),angular.extend(resultTranslateList,translateList),$http.get(feeUrl)}).then(function(response){var newList=_createSortedArray(response.data,options.key),translateList=_createTranslateList(newList,options.key);return TransactionLists.createFeeTypes(newList),angular.extend(resultTranslateList,translateList),$http.get(mitigationUrl)}).then(function(response){var newList=_createSortedArray(response.data,options.key);return TransactionLists.createMitigationList(newList),response.data})["catch"](function(error){console.warn("An error occurred with transaction List Load: "+error.status),deferred.reject(resultTranslateList)})["finally"](function(){deferred.resolve(resultTranslateList)}),deferred.promise}}])}(),function(){"use strict";angular.module("transactionService",["dataLists","services","hpfbConstants"])}(),function(){"use strict";function TransactionService($filter,getCountryAndProvinces,getContactLists,TransactionLists,YES,NO,HCSC){function TransactionService(){var defaultTransactionData=_getEmptyTransactionModel();angular.extend(this._default,defaultTransactionData),this.rootTag="TRANSACTION_ENROL",this.currSequence=0,this.xslFileName="REP_RT_2_1.xsl"}function loadContactData(){getContactLists.getInternalContacts().then(function(data){return this.baseRequesters=data,!0})}function loadUserListData(){getContactLists.getInternalContactsWithoutOther().then(function(data){return this.userList=data,!0})}return this.baseRequesters=[],this.userList=[],this.isFinal=!1,this.$onInit=function(){loadContactData(),loadUserListData()},TransactionService.prototype={_default:{},isFinal:!1,getRootTag:function(){return"TRANSACTION_ENROL"},getXSLFileName:function(){return this.xslFileName},transformFromFileObj:function(jsonObj){var transactionInfo=this.getTransactionInfo(jsonObj[this.rootTag]);this._default={},this._default=transactionInfo},transformToFileObj:function(jsonObj){var today=_getToday(),resultJson={TRANSACTION_ENROL:{template_type:"PHARMA",date_saved:today,software_version:"2.0.0",data_checksum:jsonObj.dataChecksum,transaction_type:jsonObj.transactionType,is_third_party:jsonObj.isThirdParty,is_priority:jsonObj.isPriority,is_noc:jsonObj.isNoc,is_admin_sub:jsonObj.isAdminSub,sub_type:jsonObj.subType}},ectd=this._transformEctdToFile(jsonObj.ectd);return resultJson.TRANSACTION_ENROL.ectd=ectd,resultJson.TRANSACTION_ENROL.is_solicited=jsonObj.isSolicited,resultJson.TRANSACTION_ENROL.solicited_requester_record=this._transformReqToFile(jsonObj.solicitedRequesterReord),resultJson.TRANSACTION_ENROL.regulatory_project_manager1=jsonObj.projectManager1,resultJson.TRANSACTION_ENROL.regulatory_project_manager2=jsonObj.projectManager2,resultJson.TRANSACTION_ENROL.is_fees=jsonObj.isFees,jsonObj.isFees===YES&&(resultJson.TRANSACTION_ENROL.fee_details=this._mapFeeDetailsToOutput(jsonObj.feeDetails,YES,NO,$filter)),resultJson.TRANSACTION_ENROL.is_activity_changes=jsonObj.isActivityChanges,resultJson.TRANSACTION_ENROL.company_name=jsonObj.companyName,resultJson.TRANSACTION_ENROL.regulatory_activity_address=_mapAddressToOutput(jsonObj.activityAddress),resultJson.TRANSACTION_ENROL.regulatory_activity_contact=_mapContactToOutput(jsonObj.activityContact),resultJson.TRANSACTION_ENROL.confirm_regulatory_contact=jsonObj.confirmContactValid===!0?"Y":"N",resultJson},_transformReqToFile:function(jsonObj){var requesters=[];if(!jsonObj)return requesters;jsonObj instanceof Array||(jsonObj=[jsonObj]);for(var i=0;i<jsonObj.length;i++){var record=_mapRequesterRecToOutput(jsonObj[i]);if(1==jsonObj.length)return record;requesters.push(record)}return requesters},_transformReqFromFile:function(model,jsonObj){if(model.solicitedRequesterReord=[],model.isSolicited){if(!jsonObj)return model.solicitedRequesterReord;jsonObj instanceof Array||(jsonObj=[jsonObj]);for(var i=0;i<jsonObj.length;i++){var record={};record.sequenceNumber=Number(jsonObj[i].solicited_requester_sequence),record.solicitedRequester=jsonObj[i].solicited_requester,model.solicitedRequesterReord.push(record)}}},_transformEctdToFile:function(jsonObj){var ectd={};return ectd.company_id=jsonObj.companyId,ectd.dossier_id=jsonObj.dossierId,ectd.dossier_type=jsonObj.dossierType,ectd.product_name=jsonObj.productName,ectd.lifecycle_record=this._mapLifecycleListToOutput(jsonObj.lifecycleRecord),ectd},_transformEctdFromFile:function(model,jsonObj){model.ectd=_getEmptyEctdSection(),model.ectd.companyId=jsonObj.company_id,model.ectd.dossierId=jsonObj.dossier_id,model.ectd.dossierType=jsonObj.dossier_type,model.ectd.productName=jsonObj.product_name,model.ectd.lifecycleRecord=this._mapLifecycleList(jsonObj.lifecycle_record)},getModelInfo:function(){return this._default},getTransactionInfo:function(jsonObj){if(!jsonObj)return this._default;var model=_getEmptyTransactionModel();return model.dateSaved=jsonObj.date_saved,model.dataChecksum=jsonObj.data_checksum,model.transactionType=jsonObj.transaction_type,model.isThirdParty=jsonObj.is_third_party,model.isPriority=jsonObj.is_priority,model.isNoc=jsonObj.is_noc,model.isAdminSub=jsonObj.is_admin_sub,model.subType=jsonObj.sub_type,model.isSolicited=jsonObj.is_solicited,this._transformReqFromFile(model,jsonObj.solicited_requester_record),model.projectManager1=jsonObj.regulatory_project_manager1,model.projectManager2=jsonObj.regulatory_project_manager2,model.isFees=jsonObj.is_fees,model.feeDetails=null,model.isFees&&(model.feeDetails=this._mapFeeDetailsFromOutput(jsonObj.fee_details)),jsonObj.importFileType===HCSC?(this.isFinal=!1,model.confirmContactValid=!1):(this.isFinal=!0,model.confirmContactValid=!0),model.isActivityChanges=jsonObj.is_activity_changes,model.companyName=jsonObj.company_name,model.activityContact=_transformContactFromFileObj(jsonObj.regulatory_activity_contact),model.activityAddress=_transformAddressFromFileObj($filter,getCountryAndProvinces,jsonObj.regulatory_activity_address),this._transformEctdFromFile(model,jsonObj.ectd),model},getNewTransaction:function(isEctd){var model=_createLifeCycleModel(),sequenceNum=this.getNextSequenceNumber();return isEctd?model.sequence=sequenceNum:model.sequence="",model},getCurrentSequence:function(){return this.currSequence},setSequenceNumber:function(startVal){if(null===startVal)return!1;var converted=parseInt(startVal);if(isNaN(converted))return this.currSequence=0,!1;this.currSequence=converted;var model=this.getModelInfo();if(model.ectd.lifecycleRecord&&model.ectd.lifecycleRecord.length>0)for(var i=model.ectd.lifecycleRecord.length-1;i>=0;i--){var rec=model.ectd.lifecycleRecord[i];rec.sequence=this.getNextSequenceNumber()}return!0},getNextSequenceNumber:function(){for(var seqText=""+this.currSequence,pad=4-seqText.length,padText="",i=0;i<pad;i++)padText+="0";return seqText=padText+seqText,this.currSequence++,seqText},deprecateSequenceNumber:function(){this.currSequence--},_mapLifecycleList:function(jsonObj){var result=[];if(this.currSequence=0,!jsonObj)return result;jsonObj instanceof Array||(jsonObj=[jsonObj]);for(var i=0;i<jsonObj.length;i++){var record=_transformLifecycleRecFromFileObj(jsonObj[i],$filter,TransactionLists);this._setNextSequenceOnLoad(parseInt(record.sequence)),result.push(record)}return result},_setNextSequenceOnLoad:function(sequence){this.currSequence<0&&(this.currSequence=0),isNaN(sequence)||sequence>=this.currSequence&&(this.currSequence=sequence+1)},_mapLifecycleListToOutput:function(jsonObj){var result=[];if(!jsonObj)return result;jsonObj instanceof Array||(jsonObj=[jsonObj]);for(var i=0;i<jsonObj.length;i++){var record=_mapLifecycleRecToOutput(jsonObj[i]);if(1===jsonObj.length)return record;result.push(record)}return result},resetEctdSection:function(){this._default.hasOwnProperty("ectd")&&(this._default.ectd.companyId="",this._default.ectd.dossierId="",this._default.ectd.dossierType="",this._default.ectd.productName="",this._default.ectd.lifecycleRecord&&this._default.ectd.lifecycleRecord>0&&(this._default.ectd.lifecycleRecord=[this._default.ectd.lifecycleRecord[0]]))},createFeeDetails:function(){return _createFeeDetails(NO)}},TransactionService.prototype._mapFeeDetailsToOutput=function(feeObj){var result=_createEmptyFeeDetailsForOutput(NO);return angular.isUndefined(feeObj)?null:(result.submission_class="",feeObj.submissionClass&&feeObj.submissionClass.id&&(result.submission_class=angular.fromJson(angular.toJson(feeObj.submissionClass))),result.mitigation.mitigation_type="",feeObj.mitigation.mitigationType&&feeObj.mitigation.mitigationType.id&&(result.mitigation.mitigation_type=angular.fromJson(angular.toJson(feeObj.mitigation.mitigationType))),result.mitigation.certify_organization=feeObj.mitigation.certifyOrganization===!0?"Y":"N",result.mitigation.small_business_fee_application=feeObj.mitigation.smallBusinessFeeApplication===!0?"Y":"N",result.mitigation.first_submission=feeObj.mitigation.firstSubmission,result.mitigation.certify_goverment_organization=feeObj.mitigation.certifyGovermentOrganization===!0?"Y":"N",result.mitigation.certify_urgent_health_need=feeObj.mitigation.certifyUrgentHealthNeed===!0?"Y":"N",result.mitigation.certify_funded_health_institution=feeObj.mitigation.certifyFundedHealthInstitution===!0?"Y":"N",result)},TransactionService.prototype._mapFeeDetailsFromOutput=function(feeObj){var result=_createFeeDetails(NO);return angular.isUndefined(feeObj)?null:(feeObj.submission_class&&feeObj.submission_class.id&&(result.submissionClass=$filter("findListItemById")(TransactionLists.getFeeList(),{id:feeObj.submission_class.id})),feeObj.mitigation.mitigation_type&&feeObj.mitigation.mitigation_type.id&&(result.mitigation.mitigationType=$filter("findListItemById")(TransactionLists.getMitigationList(),{id:feeObj.mitigation.mitigation_type.id})),result.mitigation.certifyOrganization=feeObj.mitigation.certify_organization===YES,result.mitigation.smallBusinessFeeApplication=feeObj.mitigation.small_business_fee_application===YES,result.mitigation.firstSubmission=feeObj.mitigation.first_submission,result.mitigation.certifyGovermentOrganization=feeObj.mitigation.certify_goverment_organization===YES,result.mitigation.certifyUrgentHealthNeed=feeObj.mitigation.certify_urgent_health_need===YES,result.mitigation.certifyFundedHealthInstitution=feeObj.mitigation.certify_funded_health_institution===YES,result)},TransactionService}function _transformLifecycleRecFromFileObj(lifecycleObj,$filter,TransactionLists){var lifecycleRec=_createLifeCycleModel();return lifecycleRec.controlNumber=lifecycleObj.control_number,lifecycleRec.activityLead=lifecycleObj.sequence_activity_lead,lifecycleRec.activityType="",lifecycleObj.sequence_activity_type&&(lifecycleRec.activityType=$filter("filter")(TransactionLists.getActivityTypes(),{id:lifecycleObj.sequence_activity_type.__text})[0],lifecycleRec.activityTypeDisplay=lifecycleRec.activityType.id),lifecycleRec.descriptionValue=lifecycleObj.sequence_description_value,lifecycleRec.startDate=lifecycleObj.sequence_from_date,lifecycleRec.endDate=lifecycleObj.sequence_to_date,lifecycleRec.details=lifecycleObj.sequence_details,lifecycleRec.sequenceVersion=lifecycleObj.sequence_version,lifecycleRec.year=lifecycleObj.sequence_year,lifecycleRec.sequenceConcat=lifecycleObj.sequence_concat,lifecycleRec.isSaved=!0,
lifecycleRec}function _mapLifecycleRecToOutput(lifecycleObj){var lifecycleRec={};return lifecycleRec.control_number=lifecycleObj.controlNumber,lifecycleRec.sequence_activity_lead=lifecycleObj.activityLead,lifecycleRec.sequence_activity_type="",lifecycleObj.activityType&&(lifecycleRec.sequence_activity_type={},_setActivityTypeValuesForOutput(lifecycleObj.activityType,lifecycleRec.sequence_activity_type)),lifecycleRec.sequence_description_value=lifecycleObj.descriptionValue,lifecycleRec.sequence_from_date=lifecycleObj.startDate,lifecycleRec.sequence_to_date=lifecycleObj.endDate,lifecycleRec.sequence_details=lifecycleObj.details,lifecycleRec.sequence_version=lifecycleObj.sequenceVersion,lifecycleRec.sequence_year=lifecycleObj.year,lifecycleRec.sequence_concat=lifecycleObj.sequenceConcat,lifecycleRec}function _mapRequesterRecToOutput(requesterObj){var requesterRec={};return requesterObj&&(requesterRec={solicited_requester_sequence:requesterObj.sequenceNumber,solicited_requester:requesterObj.solicitedRequester}),requesterRec}function _setActivityTypeValuesForOutput(srcActivityTypeRec,destActivityTypeRec){var stringIndex=srcActivityTypeRec.en.indexOf(" (");destActivityTypeRec.__text=srcActivityTypeRec.id,stringIndex>-1?destActivityTypeRec._label_en=srcActivityTypeRec.en.substring(0,stringIndex):destActivityTypeRec._label_en=srcActivityTypeRec.en,stringIndex=srcActivityTypeRec.fr.indexOf("("),stringIndex>-1?destActivityTypeRec._label_fr=srcActivityTypeRec.fr.substring(0,stringIndex-1):destActivityTypeRec._label_fr=srcActivityTypeRec.fr}function _getEmptyEctdSection(){var ectd={};return ectd.companyId="",ectd.dossierId="",ectd.dossierType="",ectd.productName="",ectd.lifecycleRecord=[],ectd}function _transformContactFromFileObj(contactObj){var contact={};return contactObj?(contact.salutation=contactObj.salutation,contact.givenName=contactObj.given_name,contact.initials=contactObj.initials,contact.surname=contactObj.surname,contact.title=contactObj.job_title,contact.language=contactObj.language_correspondance,contact.phone=contactObj.phone_num,contact.phoneExt=contactObj.phone_ext,contact.fax=contactObj.fax_num,contact.email=contactObj.email,contact):(console.error("There is no contact object"),contact)}function _mapContactToOutput(contactObj){var contact={};return contact.salutation=contactObj.salutation,contact.given_name=contactObj.givenName,contact.initials=contactObj.initials,contact.surname=contactObj.surname,contact.job_title=contactObj.title,contact.language_correspondance=contactObj.language,contact.phone_num=contactObj.phone,contact.phone_ext=contactObj.phoneExt,contact.fax_num=contactObj.fax,contact.email=contactObj.email,contact}function _mapAddressToOutput(addressObj){var address={};return address.street_address=addressObj.street,address.city=addressObj.city,address.province_lov=addressObj.stateList,address.province_text=addressObj.stateText,address.country="",addressObj.country&&(address.country={_label_en:addressObj.country.en,_label_fr:addressObj.country.fr,__text:addressObj.country.id}),address.postal_code=addressObj.postalCode,address}function _transformAddressFromFileObj($filter,getCountryAndProvinces,addressObj){var address={};return address.street=addressObj.street_address,address.city=addressObj.city,address.stateList=addressObj.province_lov,address.stateText=addressObj.province_text,address.country="",addressObj.country.__text&&(address.country=$filter("filter")(getCountryAndProvinces.getCountries(),{id:addressObj.country.__text})[0],address.countryHtml=address.country.en,address.countryDisplay=addressObj.country.id),address.postalCode=addressObj.postal_code,address}function _createLifeCycleModel(){var defaultRecord={controlNumber:"",activityLead:"",activityType:"",activityTypeDisplay:"",descriptionValue:"",startDate:"",endDate:"",details:"",sequenceVersion:"",sequenceConcat:"",isSaved:!1};return defaultRecord}function _createAddressModel(){return{street:"",city:"",stateList:"",stateText:"",country:"",countryDisplay:"",postalCode:""}}function _createContactModel(){var contact={};return contact.salutation="",contact.givenName="",contact.initials="",contact.surname="",contact.jobTitle="",contact.languageCorrespondance="",contact.phoneNum="",contact.phoneExt="",contact.fax="",contact.email="",contact}function _getToday(){function pad(n){return n<10?"0"+n:n}var d=new Date,isoDate=d.getFullYear()+"-"+pad(d.getMonth()+1)+"-"+pad(d.getDate());return isoDate}function _getEmptyTransactionModel(){var defaultTransactionData={dataChecksum:"",dateSaved:"",softwareVersion:"2.0.0",transactionType:"",isThirdParty:"",isPriority:"",isNoc:"",isAdminSub:"",subType:"",ectd:{companyId:"",dossierId:"",dossierType:"",productName:"",lifecycleRecord:[]},isSolicited:"",solicitedRequesterReord:[],projectManager1:"",projectManager2:"",isFees:"",resetBtnClicked:!1,feeDetails:null,isActivityChanges:"Y",companyName:"",activityAddress:_createAddressModel(),confirmContactValid:!1,activityContact:_createContactModel()};return defaultTransactionData}function _createFeeDetails(NO){var feeObj={submissionClass:null,feeRemitNoPayment:null,mitigation:{mitigationType:"",certifyOrganization:!1,smallBusinessFeeApplication:!1,firstSubmission:null,certifyGovermentOrganization:!1,certifyUrgentHealthNeed:!1,certifyFundedHealthInstitution:!1}};return feeObj}function _createEmptyFeeDetailsForOutput(NO){var feeObj={submission_class:null,mitigation:{mitigation_type:"",certify_organization:NO,small_business_fee_application:NO,first_submission:NO,certify_goverment_organization:NO,certify_urgent_health_need:NO,certify_funded_health_institution:NO}};return feeObj}angular.module("transactionService").factory("TransactionService",TransactionService),TransactionService.$inject=["$filter","getCountryAndProvinces","getContactLists","TransactionLists","YES","NO","HCSC"]}(),function(){"use strict";angular.module("transactionFeesModule",["services","hpfbConstants","errorMessageModule"])}(),function(){"use strict";function transactionFeesController($scope,$window,TransactionLists,YES,NO,ENGLISH,FRENCH,ADVANCE_FEE_PAYMENT_EN,ADVANCE_FEE_PAYMENT_FR){function _setIdNames(){var scopeId="_"+$scope.$id;vm.submClassId="sub_class"+scopeId,vm.descriptId="fee_description"+scopeId,vm.feeId="fee_amount"+scopeId,vm.mitigationTypeId="mitigation_type"+scopeId,vm.certifyOrganizationId="certify_organization"+scopeId,vm.smallBusinessFeeApplicationId="small_business_fee_application"+scopeId,vm.firstSubmissionId="first_submission"+scopeId,vm.certifyFundedHealthInstitutionId="certify_funded_health_institution"+scopeId,vm.certifyUrgentHealthNeedId="certify_urgent_health_need"+scopeId,vm.certifyGovermentOrganizationId="certify_goverment_organization"+scopeId}var vm=this;vm.model={},vm.submissionType={},vm.mitigationList={},vm.yesNoList=[YES,NO],vm.requiredOnlyError=[{type:"required",displayAlias:"MSG_ERR_MAND"}],vm.alerts=[!1,!1,!1],vm.lang=ENGLISH,vm.$onInit=function(){_setIdNames(),vm.submissionType=TransactionLists.getFeeList(),vm.mitigationList=TransactionLists.getMitigationList(),vm.alerts=[!1,!1,!1]},vm.errorsTemp=function(){return!0},vm.$onChanges=function(changes){changes.language&&(vm.lang=changes.language.currentValue),changes.feeRecord&&(vm.model=changes.feeRecord.currentValue),changes.showErrorSummary&&(vm.showSummary=changes.showErrorSummary.currentValue)},vm.showError=function(ctrl){return!!ctrl&&(!!(ctrl.$invalid&&ctrl.$touched||vm.showSummary&&ctrl.$invalid)||void 0)},vm.closeAlert=function(value){angular.isUndefined(value)||value<vm.alerts.length&&(vm.alerts[value]=!1)},vm.addInstruct=function(value){angular.isUndefined(value)||value<vm.alerts.length&&(vm.alerts[value]=!0)},vm.isSmallBusiness=function(){return"SMALL_BUSINESS"===vm.model.mitigation.mitigationType.id||(vm.model.mitigation.certifyOrganization=!1,vm.model.mitigation.smallBusinessFeeApplication=!1,vm.model.mitigation.firstSubmission=null,!1)},vm.isUrgentHealthNeed=function(){return"URGENT_HEALTH_NEED"===vm.model.mitigation.mitigationType.id||(vm.model.mitigation.certifyUrgentHealthNeed=!1,!1)},vm.isFundedHealthInstitution=function(){return"FUNDED_INSTITUTION"===vm.model.mitigation.mitigationType.id||(vm.model.mitigation.certifyFundedHealthInstitution=!1,!1)},vm.isGovermentOrganization=function(){return"GOVERMENT_ORGANIZATION"===vm.model.mitigation.mitigationType.id||(vm.model.mitigation.certifyGovermentOrganization=!1,!1)}}angular.module("transactionFeesModule").component("cmpTransactionFees",{templateUrl:"app/scripts/components/transactionFees/tpl-transaction-fees_20190311_0949.html",controller:transactionFeesController,controllerAs:"transFeeCtrl",bindings:{feeRecord:"<",language:"<",showErrorSummary:"<",updateErrorSummary:"&"}}),transactionFeesController.$inject=["$scope","$window","TransactionLists","YES","NO","ENGLISH","FRENCH","ADVANCE_FEE_PAYMENT_EN","ADVANCE_FEE_PAYMENT_FR"]}(),function(){"use strict";angular.module("errorSummaryModule",["focus-if"])}(),function(){"use strict";function errorSummaryController($scope,$location,$anchorScroll){function _isErrorSummaryVisible(){return vm.isVisible&&vm.errorArray&&vm.errorArray.length>0}function _getErr(errorObj,resultsList,parent){for(var keys=Object.keys(errorObj),i=0;i<keys.length;i++){var record=errorObj[keys[i]];record instanceof Array||(record=[record]);for(var j=0;j<record.length;j++){var numIndex=record[j].$name.lastIndexOf("_"),transcludeName="";if(numIndex>0&&(transcludeName=record[j].$name.substring(0,numIndex)),record[j].$invalid===!0&&record[j].$name.indexOf(".")>0)if(vm.exclusions&&vm.exclusions.hasOwnProperty(record[j].$name)){var tabIndex=vm.exclusions[record[j].$name].indexOf("tab_"),tabId=-1;tabIndex>-1&&(tabId=vm.exclusions[record[j].$name].substr(tabIndex+4),tabId=parseInt(tabId)),angular.merge(resultsList,_createSummaryRecord(record[j].$name,keys[i],parent,tabId))}else _getErr(record[j].$error,resultsList,record[j].$name);else if(vm.transcludeNames.hasOwnProperty(transcludeName)){var exIndex=record[j].$name.indexOf(transcludeName),expandIndex=record[j].$name.substring(exIndex+transcludeName.length+1);angular.merge(resultsList,_createExpanderRecord(record[j].$name,transcludeName,keys[i],parent,expandIndex))}else if(record[j].$invalid===!0&&!resultsList.hasOwnProperty(record[j].$name)){var result=_processRecord(record[j].$name,keys[i],parent);angular.merge(resultsList,result)}}}}function _scrubFieldName(rawName){var separator="_",index=rawName.lastIndexOf(separator),cleanedName="";return cleanedName=index>-1?rawName.substring(0,index):rawName}function _getElementScope(rawName){var separator="_",nameSplit=rawName.split(separator),scopeId=parseInt(nameSplit[nameSplit.length-1]);return angular.isNumber(scopeId)||(scopeId=""),scopeId}function _processRecord(error_Name,errorType,parent){var result={},scrubName=_scrubFieldName(error_Name),scopeId=_getElementScope(error_Name),errorKey="TYPE_"+errorType.toUpperCase(),destId=error_Name;if(vm.alias&&vm.alias.hasOwnProperty(scrubName)){var aliasRec=vm.alias[scrubName];switch(aliasRec.type.toLowerCase()){case"fieldset":var searchId=aliasRec.parent+"_"+scopeId,destObj=$("#"+searchId).find("input:visible:first");destObj.length>0&&(destId=destObj[0].id);break;case"element":destId=aliasRec.target+"_"+scopeId;break;case"elementnoid":destId=aliasRec.target;break;case"pattern":"pattern"===errorType&&(errorKey=aliasRec.errorType);break;case"select2":var searchId=aliasRec.name+"_match"+scopeId,destObj=$("#"+searchId);destObj.length>0&&(destId=searchId);break;case"min":"min"===errorType&&(errorKey=aliasRec.errorType);break;case"max":"max"===errorType&&(errorKey=aliasRec.errorType);break;case"minlength":"minlength"===errorType&&(errorKey=aliasRec.errorType);break;case"maxlength":"maxlength"===errorType&&(errorKey=aliasRec.errorType);break;case"buttonsearch":errorKey="TYPE_REQUIRED",$.each($("button","#"+vm.startFormId),function(k){var temp_attr=$(this).attr("id");temp_attr&&temp_attr.indexOf(aliasRec.buttonName)>-1&&(destId=temp_attr)});break;default:console.warn("No type found "+aliasRec.type)}}return result[error_Name]={name:destId,translateKey:scrubName.toUpperCase(),type:errorKey,parent:parent,concat:parent+"."+error_Name,isSummary:!1},result}function _sortErrorsByDomOrder(){var domFieldList={};$.each($("input, select ,textarea"),function(k){var temp_attr=$(this).attr("id");temp_attr&&(domFieldList[temp_attr]=k)});for(var keyList=Object.keys(domFieldList),p=0;p<keyList.length;p++){if(keyList[p].indexOf("focusser-")>-1){var parentName=angular.element(document.querySelector("#"+keyList[p])).parent().attr("name");parentName&&(keyList[p]=parentName)}vm.uniqueErrorList[keyList[p]]||(keyList.splice(p,1),p--)}for(var sortedDomJsonList={},v=0;v<keyList.length;v++)keyList[v].startsWith("no_")&&(keyList[v]=keyList[v].replace("no_","list_")),sortedDomJsonList[keyList[v]]=v;var newErrors=Object.keys(vm.uniqueErrorList).map(function(k){return vm.uniqueErrorList[k]}),notDefined={};if(newErrors.length>0)for(var i=0;i<newErrors.length;){var currRec=newErrors[i],targetName=currRec.name,destIndex=sortedDomJsonList[targetName];if(angular.isDefined(destIndex)&&destIndex!==i){var tempRec=angular.copy(newErrors[destIndex]);newErrors[destIndex]=angular.copy(currRec),newErrors[i]=angular.copy(tempRec)}else angular.isDefined(destIndex)||(notDefined[currRec.name]={rec:currRec,pos:i}),i++}return _sortUnknowns(notDefined,newErrors),newErrors}function _sortUnknowns(unknownJson,sortList){for(var unknownArray=Object.keys(unknownJson).map(function(k){return unknownJson[k]}),i=0;i<unknownArray.length;i++){var unknownRec=unknownArray[i],unknownName=unknownRec.rec.name,scopeIndex=_getElementScope(unknownName);if(angular.isNumber(scopeIndex))for(var g=sortList.length-1;g>=0;g--){var sortRec=sortList[g],sortScope=_getElementScope(sortRec.name);if(angular.isNumber(sortScope)&&sortScope===scopeIndex&&unknownName!==sortRec.name){sortList.move(unknownRec.pos,g+1);break}}}}function _createSummaryRecord(name,type,parent,tabId){var result={};return angular.isDefined(tabId)||(tabId=-1),result[name]={name:name,type:type,translateKey:name.toUpperCase(),parent:parent,concat:parent+"."+name,tabId:tabId,isSummary:!0},result}function _createExpanderRecord(name,transcludeName,type,parent,expanderIndex){var result={};return result[name]={name:name,type:type,translateKey:transcludeName.toUpperCase(),parent:parent,concat:parent+"."+name,isSummary:!0,toExpand:!0,exIndex:parseInt(expanderIndex)},result}var vm=this;vm.parentRef=null,vm.errorArray=[],vm.uniqueErrorList={},vm.isVisible=!1,vm.nameAddendum="",vm.rootError="",vm.isFocusInput=0,vm.exclusions={},vm.alias={},vm.transcludeNames={},vm.headingPreamble="",vm.headerLevel="",vm.startFormId="",vm.$onInit=function(){},vm.$onChanges=function(changes){changes.setHeadingLevel&&angular.isDefined(changes.setHeadingLevel.currentValue)&&(vm.headerLevel=changes.setHeadingLevel.currentValue.toLowerCase()),changes.nameSuffix&&(vm.nameAddendum="-"+changes.nameSuffix.currentValue),changes.formPreamble&&(vm.headingPreamble=changes.formPreamble.currentValue),changes.exclusionList&&(vm.exclusions=changes.exclusionList.currentValue),changes.aliasList&&(vm.alias=changes.aliasList.currentValue),changes.formRef&&vm.getErrorsSumm(changes.formRef.currentValue.$error,changes.formRef.currentValue.$name),changes.showErrors&&(vm.isVisible=changes.showErrors.currentValue),changes.updateErrors&&vm.formRef&&vm.isVisible&&vm.getErrorsSumm(vm.formRef.$error,vm.formRef.$name),changes.makeFocused&&changes.makeFocused.currentValue&&(vm.isFocusInput=vm.isFocusInput+1),changes.formId&&(vm.startFormId=changes.formId.currentValue),changes.transcludeList&&changes.transcludeList.currentValue&&(vm.transcludeNames=changes.transcludeList.currentValue)},vm.calcIsVisible=function(){var summaryIsVisible=_isErrorSummaryVisible();return summaryIsVisible||$scope.$emit("childErrorSummaryHide",+vm.nameAddendum),summaryIsVisible},vm.scrollTo=function(errorRecord){var hashId="";errorRecord&&(hashId=errorRecord.isSummary?"errors-summary-"+errorRecord.name:errorRecord.name,vm.expandRecord({index:errorRecord.exIndex}),$location.hash(hashId),$anchorScroll())},vm.selectVisibleTab=function(errorRecord){"errors-summary-"+errorRecord.name;vm.selectTab({index:errorRecord.tabId})},vm.isSummaryLink=function(errorRecord){return errorRecord.isSummary&&!angular.isDefined(errorRecord.toExpand)&&angular.isDefined(errorRecord.tabId)&&parseInt(errorRecord.tabId)<0},vm.isTabLink=function(errorRecord){return errorRecord.isSummary&&angular.isDefined(errorRecord.tabId)&&parseInt(errorRecord.tabId)>-1},vm.isExpanderLink=function(errorRecord){return angular.isDefined(errorRecord.toExpand)},$scope.$on("childErrorSummaryHide",function(event,data){if(_isErrorSummaryVisible())for(var errorSummaryBroadcastName=data.message,i=0;i<vm.errorArray.length;i++){var errorRecord=errorArray[i];errorRecord.isSummary&&errorRecord.name===errorSummaryBroadcastName&&vm.errorArray.splice(i,1)}}),vm.getErrorsSumm=function(myformErrors,name){vm.errorArray=[],vm.uniqueErrorList={},_getErr(myformErrors,vm.uniqueErrorList,name),console.log("vm.uniqueErrorList"),console.log(vm.uniqueErrorList);var newErrors=_sortErrorsByDomOrder();console.log("newErrors"),console.log(newErrors),angular.equals(vm.errorArray,newErrors)||(vm.errorArray=newErrors)},Array.prototype.move=function(from,to){to<0&&(to=0),to>=this.length&&(to=this.length-1),this.splice(to,0,this.splice(from,1)[0])}}angular.module("errorSummaryModule").component("cmpErrorSummary",{templateUrl:"app/scripts/components/error-summary/tpl-error-summary_20190311_0949.html",controller:errorSummaryController,controllerAs:"errSummaryCtrl",bindings:{formRef:"<",showErrors:"<",updateErrors:"<",nameSuffix:"@",formPreamble:"@",makeFocused:"<",setHeadingLevel:"@",exclusionList:"<",transcludeList:"<",formId:"<",aliasList:"<",expandRecord:"&",selectTab:"&"}}),errorSummaryController.$inject=["$scope","$location","$anchorScroll"]}(),function(){"use strict";angular.module("errorMessageModule",[])}(),function(){"use strict";function errorMessageController(){var vm=this;vm.field_name="",vm.form_ref=null,vm.fieldRecords=[],vm.$onChanges=function(changes){changes.fieldName&&(vm.field_name=changes.fieldName.currentValue),changes.formRef&&(vm.form_ref=changes.formRef.currentValue),changes.errorTypes&&(vm.fieldRecords=changes.errorTypes.currentValue)},vm.showErrorMessage=function(){return!!vm.form_ref&&(angular.isUndefined(vm.fieldName)?(console.warn("No field name for: "+vm.form_ref.$name),!1):angular.isUndefined(vm.form_ref[vm.fieldName])?(console.warn("lookup undefined "+vm.form_ref.$name+"."+vm.fieldName),!1):vm.showError()&&vm.form_ref[vm.fieldName].$invalid||vm.form_ref[vm.fieldName].$touched&&vm.form_ref[vm.fieldName].$invalid)}}angular.module("errorMessageModule").component("cmpErrorMessage",{templateUrl:"app/scripts/components/error-message/tpl-error-message_20190311_0949.html",controller:errorMessageController,controllerAs:"errMessageCtrl",bindings:{fieldName:"<",formRef:"<",showError:"&",errorTypes:"<"}})}(),function(){"use strict";angular.module("alertModule",[])}(),function(){"use strict";function alertController(){var vm=this;vm.alertVisible=!1,vm.closeMsgAlias="CLOSE_ALERT",vm.anchor=null,vm.$onInit=function(){vm.alertVisible=!1},vm.$onChanges=function(changes){changes.msg&&(vm.closeMsgAlias=changes.msg.currentValue),changes.uiState&&(vm.alertVisible=changes.uiState.currentValue),changes.myAnchor&&(vm.anchor=changes.myAnchor.currentValue)},vm.open=function(){vm.updateState()},vm.close=function(){vm.updateState(),document.getElementById(vm.anchor).focus()},vm.isAlertVisible=function(){return vm.alertVisible}}angular.module("alertModule").component("cmpAlert",{templateUrl:"app/scripts/components/alertComponent/tpl-alert_20190311_0949.html",transclude:!0,bindings:{uiState:"<",msg:"@",myAnchor:"<",updateState:"&",type:"@"},controller:alertController,controllerAs:"alertCtrl"}),alertController.$inject=[]}(),function(){"use strict";angular.module("addressModule",["hpfbConstants","dataLists","filterLists","ui.select","errorMessageModule"])}(),function(){"use strict";function addressCtrl(getCountryAndProvinces,$translate,CANADA,USA,$scope){function _setIdNames(){var scopeId=vm.fldId+"_"+$scope.$id;vm.streetId="STREET"+scopeId,vm.cityId="CITY"+scopeId,vm.countryId="COUNTRY"+scopeId,vm.stateTextId="proveState"+scopeId,vm.stateListId="provinceList"+scopeId,vm.postalId="postal"+scopeId}var vm=this;vm.isEditable=!0,vm.ngModelOptSetting={updateOn:"blur"},vm.lang=$translate.proposedLanguage()||$translate.use(),vm.addressModel={addressID:"",isDetailValid:!1,street:"",city:"",country:"",countryHtml:"",countryDisplay:"",stateLov:"",stateText:"",postalCode:""},vm.countryIsEditable=!0,vm.canadianPostalCodePattern="^(?!.*[DFIOQU])[A-VXYa-vxy][0-9][A-Za-z] ?[0-9][A-Za-z][0-9]$",vm.usaZipCode="^[0-9]{5}(?:-[0-9]{4})?$",vm.hideProvinceText=!1,vm.countryList=getCountryAndProvinces.getCountries(),vm.fdId="",vm.requiredOnly=[{type:"required",displayAlias:"MSG_ERR_MAND"}],vm.postalErrorList=[{type:"required",displayAlias:"MSG_ERR_MAND"},{type:"pattern",displayAlias:"MSG_ERR_POSTAL"}],vm.$onInit=function(){vm.addressRecord&&(vm.addressModel=vm.addressRecord,vm.provListLabel=getProvinceListLabel(),vm.postalLabel=getPostalLabel(),vm.isPostalRequired=isPostalRequiredFn(),vm.provinces=getProvinceStateList(),vm.hideProvinceText=getProvinceTextState(),vm.postalPattern=getPostalPattern(),vm.hideProvinceDdl=!vm.hideProvinceText),_setIdNames()},vm.$onChanges=function(changes){changes.addressRecord&&(vm.addressModel=changes.addressRecord.currentValue,vm.countryChanged()),changes.isAmend&&(vm.isEditable=changes.isAmend.currentValue),changes.fieldSuffix&&(vm.fldId=changes.fieldSuffix.currentValue,vm.fldId||(vm.fldId="")),changes.updateCountry&&vm.countryChanged(),changes.countryEditable&&(vm.countryIsEditable=changes.countryEditable.currentValue,angular.isUndefined(vm.countryIsEditable)&&(vm.countryIsEditable=!0))},vm.countryChanged=function(){vm.addressModel.countryDisplay=vm.addressModel.country.id,vm.provListLabel=getProvinceListLabel(),vm.postalLabel=getPostalLabel(),vm.isPostalRequired=isPostalRequiredFn(),vm.provinces=getProvinceStateList(),vm.hideProvinceText=getProvinceTextState(),vm.postalPattern=getPostalPattern(),vm.hideProvinceDdl=!vm.hideProvinceText,vm.isCountryCanada(),vm.updateErrorSummary()},vm.isCountryCanada=function(){return vm.addressModel&&vm.addressModel.country?vm.addressModel.country.id===CANADA?(vm.postalErrorList=[{type:"required",displayAlias:"MSG_ERR_MAND"},{type:"pattern",displayAlias:"MSG_ERR_POSTAL"}],!0):(vm.postalErrorList=[{type:"required",displayAlias:"MSG_ERR_MAND"},{type:"pattern",displayAlias:"MSG_ERR_ZIP"}],!1):(vm.postalErrorList=[{type:"required",displayAlias:"MSG_ERR_MAND"},{type:"pattern",displayAlias:"MSG_ERR_POSTAL"}],!1)},vm.showError=function(ctrl){return!!ctrl&&!!(ctrl.$invalid&&ctrl.$touched||vm.showErrors()&&ctrl.$invalid)},vm.onDeleteButtonClick=function(){vm.onDelete({addressId:vm.addressModel.addressID})},vm.onDiscardButtonClick=function(){vm.addressModel=angular.extend({},vm.addressRecord),vm.addressForm.$setPristine()},vm.isCountryEditable=function(){return vm.isEditable&&vm.countryIsEditable},vm.postalCodeChanged=function(){var postal=vm.addressModel.postalCode;postal&&(postal=postal.toUpperCase(),6==postal.length&&vm.addressModel.country.id===CANADA&&(postal=postal.substring(0,3)+" "+postal.substring(3,postal.length)),vm.addressModel.postalCode=postal,vm.updateErrorSummary())};var getProvinceTextState=function(){var isCanOrUsa=isPostalRequiredFn();return isCanOrUsa?vm.addressModel.stateText="":vm.addressModel.stateList="",isCanOrUsa},isPostalRequiredFn=function(){return vm.addressModel.country.id===CANADA||vm.addressModel.country.id===USA},getProvinceStateList=function(){return vm.addressModel.country.id===CANADA?getCountryAndProvinces.getProvinces():vm.addressModel.country.id===USA?getCountryAndProvinces.getUSStates():void 0},getProvinceListLabel=function(){var label=vm.addressModel.country.id===USA?"STATE":"PROVINCE";return label},getPostalLabel=function(){var label=vm.addressModel.country.id===USA?"ZIP":"POSTAL";return label},getPostalPattern=function(){var postalPtrn=null;return vm.addressModel.country.id===USA?postalPtrn=/^[0-9]{5}(?:-[0-9]{4})?$/:vm.addressModel.country.id===CANADA&&(postalPtrn=/^(?!.*[DFIOQU])[A-VXYa-vxy][0-9][A-Za-z] ?[0-9][A-Za-z][0-9]$/),postalPtrn};vm.countryChange=function(){for(var found=!1,i=0;i<vm.countryList.length;i++){var option=vm.countryList[i];if(option[vm.lang]===vm.addressModel.countryHtml){vm.addressModel.country=option,found=!0;break}}if(!found)for(var i=0;i<vm.countryList.length;i++){var option=vm.countryList[i];if(option.id===vm.addressModel.country.id){vm.addressModel.countryHtml=option[vm.lang];break}}vm.countryChanged()},$scope.$watch("adr.addressForm.$error",function(){vm.updateErrorSummary()},!0)}angular.module("addressModule").config(function(uiSelectConfig){uiSelectConfig.theme="select2"}).component("cmpAddressDetails",{templateUrl:"app/scripts/components/addressDetails/tpl-address-details_20190311_0949.html",controller:addressCtrl,controllerAs:"adr",bindings:{addressRecord:"<",onUpdate:"&",showErrors:"&",isAmend:"<",updateErrorSummary:"&",fieldSuffix:"<",countryEditable:"<",updateCountry:"<"}}),addressCtrl.$inject=["getCountryAndProvinces","$translate","CANADA","USA","$scope"]}(),function(){"use strict";angular.module("lcDetailsModule",["ui.bootstrap","activityFormFilterModule","errorSummaryModule","errorMessageModule"])}(),function(){"use strict";function lifecycleRecCtrl(ActivityFormFilterService,TransactionLists,$filter,$translate,$scope){function _updateLocalModel(record){vm.lifecycleModel=angular.copy(record),convertToDate(),vm.setSequenceList(),vm.setDetailsState(),vm.selectActivityList()}function setAsDescriptionYear(){vm.endDateVisible=!1,vm.startDateVisible=!1,vm.descriptionVisible=!0,vm.versionVisible=!1,vm.yearVisible=!0,vm.lifecycleModel.startDate="",vm.lifecycleModel.endDate="",vm.lifecycleModel.sequenceVersion="",vm.descriptionLabel="LIST_DESCRIPT"}function setDetailsAsNone(){vm.endDateVisible=!1,vm.startDateVisible=!1,vm.descriptionVisible=!1,vm.versionVisible=!1,vm.yearVisible=!1,vm.lifecycleModel.year="",vm.lifecycleModel.startDate="",vm.lifecycleModel.endDate="",vm.lifecycleModel.details="",vm.lifecycleModel.sequenceVersion=""}function setAsDescription(){vm.endDateVisible=!1,vm.startDateVisible=!1,vm.descriptionVisible=!0,vm.versionVisible=!1,vm.yearVisible=!1,vm.descriptionLabel="BRIEF_DESC",vm.lifecycleModel.year="",vm.lifecycleModel.startDate="",vm.lifecycleModel.endDate="",vm.lifecycleModel.sequenceVersion=""}function setAsStartDate(){vm.endDateVisible=!1,vm.startDateVisible=!0,vm.descriptionVisible=!1,vm.versionVisible=!1,vm.yearVisible=!1,vm.lifecycleModel.year="",vm.lifecycleModel.endDate="",vm.lifecycleModel.details="",vm.lifecycleModel.sequenceVersion=""}function setVersionAndDate(){vm.endDateVisible=!1,vm.startDateVisible=!0,vm.descriptionVisible=!1,vm.versionVisible=!0,vm.versionLabel="VERSION_NO",vm.yearVisible=!1,vm.lifecycleModel.year="",vm.lifecycleModel.endDate="",vm.lifecycleModel.details=""}function setAsDatePeriod(){vm.endDateVisible=!0,vm.startDateVisible=!0,vm.descriptionVisible=!1,vm.versionVisible=!1,vm.yearVisible=!1,vm.lifecycleModel.year="",vm.lifecycleModel.details="",vm.lifecycleModel.sequenceVersion=""}function translateToEnglish(key){var translateText="";return translateText=$translate.instant(key,"","","en")}function convertDate(value){if(!value)return"";var date=new Date(value),m_names=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],result="";return result=m_names[date.getMonth()]+". "+date.getDate()+", "+date.getFullYear()}function convertToDate(){vm.lifecycleModel.dateFiled&&(vm.lifecycleModel.dateFiled=_parseDate(vm.lifecycleModel.dateFiled)),vm.lifecycleModel.startDate&&(vm.lifecycleModel.startDate=_parseDate(vm.lifecycleModel.startDate)),vm.lifecycleModel.endDate&&(vm.lifecycleModel.endDate=_parseDate(vm.lifecycleModel.endDate))}function _parseDate(value){var dateArray=value.split("-");3!=dateArray.length&&console.error("_parseDate error not 3 parts");var aDate=new Date(dateArray[0],dateArray[1]-1,dateArray[2]);return aDate}function _createYearList(){for(var start=1980,end=(new Date).getFullYear(),result=[],i=start;i<=end;i++)result.push(""+i);return result}function _setIdNames(){var scopeId="_"+$scope.$id;vm.lifecycleDetailsFormId="life_detail_form"+scopeId,vm.dateSubId="date_submitted"+scopeId,vm.controlNumId="control_num"+scopeId,vm.regActivityId="reg_activity_type"+scopeId,vm.seqDescriptId="sequence_type"+scopeId,vm.startDateId="start_date"+scopeId,vm.dateId="dated"+scopeId,vm.endDateId="end_date"+scopeId,vm.yearId="year_change"+scopeId,vm.descriptId="brief_desc"+scopeId,vm.versionId="version_no"+scopeId,vm.activityLeadId="activity_lead"+scopeId}var vm=this;vm.activityList=[],vm.activityTypeList=[],vm.pharmaList=[],vm.biolList=[],vm.postMarketList=[],vm.consumHealthList=[],vm.sequenceList=[],vm.descriptionList=[],vm.lifecycleModel={},vm.endDateVisible=!1,vm.yearVisible=!1,vm.descriptionVisible=!1,vm.versionVisible=!1,vm.ectd=!1,vm.popOpened=!1,vm.alerts=[!1,!1],vm.dateOptions={showWeeks:!1},vm.lang=$translate.proposedLanguage()||$translate.use(),vm.yearList=_createYearList(),vm.descriptionObj=TransactionLists.getTransactionDescriptions(),vm.leadList=TransactionLists.getActivityLeadList(),vm.updateSummary=0,vm.showSummary=!1,vm.focusSummary=0,vm.dateFormatError=[{type:"required",displayAlias:"MSG_ERR_MAND"},{type:"date",displayAlias:"MSG_ERR_DATE_FORMAT"}],vm.minLength6Error=[{type:"required",displayAlias:"MSG_ERR_MAND"},{type:"minlength",displayAlias:"MSG_LENGTH_6NUM"}],vm.requiredOnly=[{type:"required",displayAlias:"MSG_ERR_MAND"}],vm.$onInit=function(){_setIdNames(),vm.yearList&&0!==vm.yearList.length||(vm.yearList=_createYearList()),vm.selectActivityList()},vm.$onChanges=function(changes){changes.activityTypes&&(vm.activityList=changes.activityTypes.currentValue,vm.activityList&&(vm.pharmaList=ActivityFormFilterService.getPharmaRAList(vm.activityList),vm.biolList=ActivityFormFilterService.getBiolRAList(vm.activityList),vm.postMarketList=ActivityFormFilterService.getPostMarketRAList(vm.activityList),vm.consumHealthList=ActivityFormFilterService.getConsumHealthList(vm.activityList))),changes.lifecycleRecord&&_updateLocalModel(changes.lifecycleRecord.currentValue),changes.isEctd&&(vm.ectd=changes.isEctd.currentValue),changes.sequenceUpdated&&!changes.lifecycleRecord&&vm.lifecycleRecord&&(vm.lifecycleModel.sequence=vm.lifecycleRecord.sequence),changes.showErrorSummary&&(vm.showSummary=changes.showErrorSummary.currentValue,vm.updateErrorSummaryState()),changes.errorSummaryUpdate&&vm.updateErrorSummaryState()},$scope.$watch("lifecycleCtrl.lifecycleDetailsForm.$dirty",function(){vm.lifecycleDetailsForm.$dirty&&vm.isDetailValid({state:!1})},!0),$scope.$watch("lifecycleCtrl.lifecycleDetailsForm.$error",function(){vm.updateErrorSummaryState(),vm.updateErrorSummary()},!0),vm.updateErrorSummaryState=function(){vm.updateSummary=vm.updateSummary+1},vm.openStartDate=function(){vm.startDateOpen=!0},vm.openEndDate=function(){vm.endDateOpen=!0},vm.openFiledDate=function(){vm.filedDateOpen=!0},vm.disableDeleteState=function(){if(!vm.ectd)return!0;var value=parseInt(vm.lifecycleModel.sequence);return value!=vm.enableDeleteIndex()},vm.selectActivityList=function(){if(!vm.lifecycleModel.activityLead)return void(vm.activityTypeList=[]);switch(vm.lifecycleModel.activityLead){case TransactionLists.getBiologicalLeadValue():vm.activityTypeList=vm.biolList;break;case TransactionLists.getPharmaLeadValue():vm.activityTypeList=vm.pharmaList;break;case TransactionLists.getPostMarketLeadValue():vm.activityTypeList=vm.postMarketList;break;case TransactionLists.getConsumHealthLeadValue():vm.activityTypeList=vm.consumHealthList;break;default:vm.lifecycleModel.activityLead&&console.warn("Not a valid lead choice"),vm.activityTypeList=[];
}if(vm.lifecycleModel.activityType){var temp=$filter("filter")(vm.activityTypeList,{id:vm.lifecycleModel.activityType.id})[0];vm.lifecycleModel.activityType=temp}vm.updateErrorSummaryState()},vm.setSequenceList=function(){var value=vm.lifecycleModel.activityType.id,temp=vm.lifecycleModel.descriptionValue;switch(vm.lifecycleModel.activityTypeDisplay=vm.lifecycleModel.activityType.id,vm.lifecycleModel.descriptionValue="",value){case"B02-20160301-001":vm.descriptionList=TransactionLists.getAndsType();break;case"B02-20160301-018":vm.descriptionList=TransactionLists.getDinaType();break;case"B02-20160301-019":vm.descriptionList=TransactionLists.getDinbType();break;case"B02-20160301-031":vm.descriptionList=TransactionLists.getEundsType();break;case"B02-20160301-032":vm.descriptionList=TransactionLists.getEusndsType();break;case"B02-20160301-038":vm.descriptionList=TransactionLists.getLevel3Type();break;case"B02-20160301-046":vm.descriptionList=TransactionLists.getMPNCType();break;case"B02-20160301-047":vm.descriptionList=TransactionLists.getMPNDSType();break;case"B02-20160301-049":vm.descriptionList=TransactionLists.getMPSNDSType();break;case"B02-20160301-050":vm.descriptionList=TransactionLists.getNcType();break;case"B02-20160301-051":vm.descriptionList=TransactionLists.getNdsType();break;case"B02-20160301-070":vm.descriptionList=TransactionLists.getPdcType();break;case"B02-20160301-071":vm.descriptionList=TransactionLists.getPdcBType();break;case"B02-20160301-067":vm.descriptionList=TransactionLists.getPANDType();break;case"B02-20160301-068":vm.descriptionList=TransactionLists.getPBRERCType();break;case"B02-20160301-069":vm.descriptionList=TransactionLists.getPBRERPVType();break;case"B02-20160301-075":vm.descriptionList=TransactionLists.getPRNDSType();break;case"B02-20160301-077":vm.descriptionList=TransactionLists.getPRSNDSType();break;case"B02-20160301-078":vm.descriptionList=TransactionLists.getpSurCType();break;case"B02-20160301-079":vm.descriptionList=TransactionLists.getpSurPvType();break;case"B02-20160301-080":vm.descriptionList=TransactionLists.getRmpPvType();break;case"B02-20160301-082":vm.descriptionList=TransactionLists.getSandsType();break;case"B02-20160301-084":vm.descriptionList=TransactionLists.getSndsType();break;case"B02-20160301-085":vm.descriptionList=TransactionLists.getSndsCArray();break;case"B02-20160301-087":vm.descriptionList=TransactionLists.getUdpvType();break;case"B02-20160301-088":vm.descriptionList=TransactionLists.getUdraType();break;case"B02-20160301-089":vm.descriptionList=TransactionLists.getYbprType();break;case"B02-20160301-028":vm.descriptionList=TransactionLists.getDSurType();break;case"B02-20160301-043":vm.descriptionList=TransactionLists.getMPDINType();break;case"B02-20160301-070":vm.descriptionList=TransactionLists.getPdcType();break;case"B02-20160301-071":vm.descriptionList=TransactionLists.getPdcBType();break;case"B02-20160301-020":vm.descriptionList=TransactionLists.getDindType();break;case"B02-20160301-021":vm.descriptionList=TransactionLists.getDinfType();break;default:vm.descriptionList=""}temp&&vm.descriptionList.indexOf(temp)!==-1?vm.lifecycleModel.descriptionValue=temp:setDetailsAsNone()},vm.setDetailsState=function(){var value=vm.lifecycleModel.descriptionValue;if(!value)return void(vm.descriptionList=[]);switch(value){case vm.descriptionObj.ADMINISTRATIVE:case vm.descriptionObj.BENEFIT_RISK_ASSESS:case vm.descriptionObj.CANCEL_LETTER:case vm.descriptionObj.CHANGE_TO_DIN:case vm.descriptionObj.DIN_DISCONTINUED:case vm.descriptionObj.DRUG_NOTIF_FORM:case vm.descriptionObj.INITIAL:case vm.descriptionObj.NOTIFICATION_CHANGE:case vm.descriptionObj.NOTIFICATION_INTERRUPT_SALE:case vm.descriptionObj.PANDEMIC_APPL:case vm.descriptionObj.POST_CLEARANCE_DATA:case vm.descriptionObj.POST_MARKET_SURV:case vm.descriptionObj.POST_NOC_CHANGE:case vm.descriptionObj.POST_AUTH_DIV1_CHANGE:case vm.descriptionObj.PRESUB_MEETING_PKG:case vm.descriptionObj.PRIORITY_REVIEW_RQ:case vm.descriptionObj.PRISTINE_PM:case vm.descriptionObj.PRISTINE_PM_2LANG:case vm.descriptionObj.RECON_DECIS_LTR_INTENT:case vm.descriptionObj.RECON_DECIS_RQ_RECON:case vm.descriptionObj.RECON_DECIS_OTHER_INFO:case vm.descriptionObj.LABEL_PREAPPROVAL_2LANG:case vm.descriptionObj.RISK_COMMUN_DOC:case vm.descriptionObj.SIGNAL_WORK_UP:case vm.descriptionObj.PRESUB_MEETING_RQ:case vm.descriptionObj.CORR_PATENT_MED:case vm.descriptionObj.ALLEGATION_NOTICE:case vm.descriptionObj.FORM_IV:case vm.descriptionObj.FORM_V:case vm.descriptionObj.CONSENT_LTR:case vm.descriptionObj.DATA_PROTECT_CORRESP:case vm.descriptionObj.SEQUENCE_CLEANUP:setDetailsAsNone(),vm.setConcatDetails();break;case vm.descriptionObj.COMMENTS_NOC:case vm.descriptionObj.COMMENTS_SUMMARY_BASIS:case vm.descriptionObj.COMMENTS_REGULARTORY_DECISION:case vm.descriptionObj.MEETING_MINUTES:case vm.descriptionObj.ADVISEMENT_LETTER_RESPONSE:case vm.descriptionObj.CLIN_CLARIF_RESPONSE:case vm.descriptionObj.EMAIL_RQ_RESPONSE:case vm.descriptionObj.LABEL_CLARIF_RESPONSE:case vm.descriptionObj.MHPD_RQ_RESPONSE:case vm.descriptionObj.NOC_RESPONSE:case vm.descriptionObj.NOD_RESPONSE:case vm.descriptionObj.NON_RESPONSE:case vm.descriptionObj.PROCESSING_CLARIF_RESPONSE:case vm.descriptionObj.QUAL_CLIN_CLARIF_RESPONSE:case vm.descriptionObj.QUAL_CLARIF_RESPONSE:case vm.descriptionObj.SDN_RESPONSE:case vm.descriptionObj.PHONE_RQ_RESPONSE:case vm.descriptionObj.BE_CLARIF_RESPONSE:case vm.descriptionObj.SCREENING_ACCEPT_RESPONSE:case vm.descriptionObj.SCREENING_CLARIF_RESPONSE:case vm.descriptionObj.NOL_RESPONSE:case vm.descriptionObj.CLARIF_RESPONSE:case vm.descriptionObj.NONCLIN_CLARIF_RESPONSE:setAsStartDate(),vm.setConcatDetails();break;case vm.descriptionObj.RMP_VERSION_DATE:setVersionAndDate(),vm.setConcatDetails();break;case vm.descriptionObj.FOR_PERIOD:setAsDatePeriod(),vm.setConcatDetails();break;case vm.descriptionObj.UNSOLICITED_DATA:setAsDescription(),vm.setConcatDetails();break;case vm.descriptionObj.YEAR_LIST_OF_CHANGE:setAsDescriptionYear(),vm.setConcatDetails();break;default:console.warn("Lifecycle Details activity not found: "+value)}},vm.setConcatDetails=function(){var startDate="",endDate="",concatText="",enDescription=translateToEnglish(vm.lifecycleModel.descriptionValue);vm.startDateVisible&&(startDate=convertDate(vm.lifecycleModel.startDate),concatText=vm.versionVisible?" dated "+startDate:enDescription+" dated "+startDate),vm.endDateVisible&&(endDate=convertDate(vm.lifecycleModel.endDate),concatText=enDescription+" of "+startDate+" to "+endDate),vm.descriptionVisible&&!vm.yearVisible&&(concatText=enDescription+"\n"+vm.lifecycleModel.details),vm.versionVisible&&(concatText=enDescription+" "+vm.lifecycleModel.sequenceVersion+concatText),vm.yearVisible&&(concatText=vm.lifecycleModel.year+", "+vm.lifecycleModel.details),concatText||(concatText=enDescription),vm.lifecycleModel.sequenceConcat=concatText},vm["delete"]=function(){vm.onDelete({id:vm.lifecycleModel.sequence})},vm.discardChanges=function(){vm.lifecycleDetailsForm.$pristine||(_updateLocalModel(vm.lifecycleRecord),vm.lifecycleDetailsForm.$setPristine(),vm.isDetailValid({state:vm.lifecycleDetailsForm.$valid}))},vm.updateValid=function(){vm.isDetailValid({state:vm.lifecycleDetailsForm.$valid&&!vm.lifecycleDetailsForm.$dirty})},vm.updateLivecycleModel=function(){vm.lifecycleDetailsForm.$valid?(vm.isDetailValid({state:!0}),vm.lifecycleDetailsForm.$setPristine(),vm.onUpdate({record:vm.lifecycleModel})):(vm.showSummary=!0,vm.makeFocused(),vm.updateErrorSummaryState())},vm.makeFocused=function(){vm.focusSummary=vm.focusSummary+1},vm.showError=function(ctrl){return!!ctrl&&!!(ctrl.$invalid&&ctrl.$touched||vm.showSummary&&ctrl.$invalid)},vm.addInstruct=function(value){angular.isUndefined(value)||value<vm.alerts.length&&(vm.alerts[value]=!0)},vm.closeAlert=function(value){angular.isUndefined(value)||value<vm.alerts.length&&(vm.alerts[value]=!1)}}angular.module("lcDetailsModule").component("cmpLifecycleDetails",{templateUrl:"app/scripts/components/lifecycleDetails/tpl-lifecycle-details_20190311_0949.html",controller:lifecycleRecCtrl,controllerAs:"lifecycleCtrl",bindings:{lifecycleRecord:"<",onUpdate:"&",isDetailValid:"&",onDelete:"&",enableDeleteIndex:"&",isEctd:"<",activityTypes:"<",sequenceUpdated:"<",errorSummaryUpdate:"<",showErrorSummary:"<",updateErrorSummary:"&"}}),lifecycleRecCtrl.$inject=["ActivityFormFilterService","TransactionLists","$filter","$translate","$scope"]}(),function(){"use strict";angular.module("lifecycleList",["filterLists","lcDetailsModule","expandingTable"])}(),function(){"use strict";function lifecycleListCtrl($filter,TransactionLists){function _checkFirstRecord(){if(vm.lifecycleList&&0!==vm.lifecycleList.length&&!(vm.lifecycleList.length>1)){var record=angular.copy(vm.lifecycleList[0]);if(vm.ectdValue){for(var seqText=""+vm.startingSequence,pad=4-seqText.length,padText="",i=0;i<pad;i++)padText+="0";seqText=padText+seqText,record.sequence=seqText}else record.sequence="";vm.lifecycleList[0]=record}}function convertDate(value){if(!value)return value;var aDate=new Date(value),month=+(aDate.getMonth()+1);month<10&&(month="0"+month);var day=aDate.getDate();day<10&&(day="0"+day);var result=aDate.getFullYear()+"-"+month+"-"+day;return result}var vm=this;vm.selectRecord=-1,vm.isDetailsValid=!0,vm.lifecycleList=[],vm.setCollapsed=0,vm.deletableIndex=0,vm.oneRecord="",vm.ectdValue=!1,vm.isParentDirty=!1,vm.addFocused=!1,vm.resetCollapsed=!1,vm.activityTypes=[],vm.startingSequence=0,vm.seqUpdated=!1,vm.showSummary=!1,vm.finalState=!1,vm.finalRecNum=0,vm.columnDef=[{label:"CONTROL_NUMBER",binding:"controlNumber",width:"8"},{label:"ACTIVITY_LEAD",binding:"activityLead",width:"12"},{label:"REG_ACTIVITY_TYPE",binding:"activityTypeDisplay",width:"30"},{label:"SEQUENCE_TYPE",binding:"sequenceConcat",width:"48"}],vm.$onInit=function(){vm.activityTypes=TransactionLists.getActivityTypes(),vm.selectRecord=-1,vm.addFocused=!1,vm.startingSequence=0},vm.$onChanges=function(changes){changes.records&&(vm.lifecycleList=changes.records.currentValue,vm.isDetailsValid=!0,vm.updateErrorState(),vm.startingSequence=0),changes.parentDirty&&(vm.isParentDirty=changes.parentDirty.currentValue),changes.isEctd&&(vm.ectdValue=changes.isEctd.currentValue,_checkFirstRecord()),changes.sequenceUpdated&&(vm.seqUpdated=changes.sequenceUpdated.currentValue),changes.showErrorSummary&&(vm.showSummary=changes.showErrorSummary.currentValue),changes.isFinal&&(vm.finalState=changes.isFinal.currentValue,vm.finalRecNum=0)},vm.deleteRecord=function(aID){var idx=vm.lifecycleList.indexOf($filter("filter")(vm.lifecycleList,{sequence:aID},!0)[0]);vm.lifecycleList.splice(idx,1),vm.onUpdate({newList:vm.lifecycleList}),vm.selectRecord=-1,vm.isDetailsValid=!0,vm.deprecateSequence(),vm.updateErrorState(),vm.resetCollapsed=!vm.resetCollapsed,vm.addFocused=!1},vm.lastRecordSequence=function(){return vm.getCurrentSequence()-1},vm.updateErrorState=function(){if(vm.lifecycleList&&0!==vm.lifecycleList.length){for(var i=0;i<vm.lifecycleList.length;i++)if(vm.lifecycleList[i].isSaved)return void(vm.oneRecord="is value");vm.oneRecord=""}else vm.oneRecord=""},vm.addTransaction=function(){var defaultTransaction=vm.getNewTransaction();vm.lifecycleList.unshift(defaultTransaction),vm.resetCollapsed=!vm.resetCollapsed,vm.selectRecord=0,vm.finalState&&vm.finalRecNum++,vm.addFocused=!1,vm.setValid(!1),vm.updateErrorState()},vm.setStartingSequence=function(){(isNaN(vm.startingSequence)||null===vm.startingSequence)&&(vm.startingSequence=0),vm.setSequenceValue({start:vm.startingSequence})},vm.isSelectedRecord=function(){return 0===vm.selectRecord},vm.isAddDisabled=function(){return vm.lifecycleList.length>0},vm.setValid=function(detailValid){vm.isDetailsValid=detailValid},vm.onUpdateLifecycleRecord=function(record){var idx=vm.lifecycleList.indexOf($filter("filter")(vm.lifecycleList,{sequence:record.sequence},!0)[0]);record.dateFiled=convertDate(record.dateFiled),record.startDate=convertDate(record.startDate),record.endDate=convertDate(record.endDate),record.isSaved=!0,vm.lifecycleList[idx]=angular.copy(record),vm.setValid(!0),vm.selectRecord=-1,vm.resetCollapsed=!vm.resetCollapsed,vm.addFocused=!0,vm.updateErrorState()}}angular.module("lifecycleList").component("cmpLifecycleList",{templateUrl:"app/scripts/components/lifecycleList/tpl-lifecycle-list_20190311_0949.html",bindings:{records:"<",onUpdate:"&",isAmend:"&",isFinal:"<",getNewTransaction:"&",setSequenceValue:"&",deprecateSequence:"&",showErrorSummary:"<",isEctd:"<",parentDirty:"<",sequenceUpdated:"<",getCurrentSequence:"&"},controller:lifecycleListCtrl,controllerAs:"lifeListCtrl"}),lifecycleListCtrl.$inject=["$filter","TransactionLists"]}(),function(){"use strict";angular.module("requesterRecordModule",["ui.select","hpfbConstants","errorMessageModule"])}(),function(){"use strict";function requesterRecordController($scope,$translate){function _setIdNames(){var scopeId="_"+$scope.$id;vm.solictedRqId="solicited_rq"+scopeId}var vm=this;vm.model={sequenceNumber:"",solicitedRequester:"",otherRequesterDetails:"",display:""},vm.lang=$translate.proposedLanguage()||$translate.use(),vm.showDetailErrors=!1,vm.requiredOnly=[{type:"required",displayAlias:"MSG_ERR_MAND"}],vm.$onInit=function(){vm.showDetailErrors=!1,_setIdNames()},vm.$onChanges=function(changes){changes.record&&changes.record.currentValue&&(vm.model=changes.record.currentValue),changes.showErrors&&(vm.showDetailErrors=changes.showErrors.currentValue)},vm.deleteRecord=function(){vm.onDelete({id:vm.model.sequenceNumber})},vm.showError=function(ctrl){return!!ctrl&&(ctrl.$invalid&&ctrl.$touched||ctrl.$invalid&&vm.showDetailErrors)}}angular.module("requesterRecordModule").config(function(uiSelectConfig){uiSelectConfig.theme="select2"}).component("cmpRequesterRecord",{templateUrl:"app/scripts/components/requesterRecord/tpl-requester-record_20190311_0949.html",controller:requesterRecordController,controllerAs:"requesterRecCtrl",bindings:{record:"<",onDelete:"&",showErrors:"<",requesterList:"<"}}),requesterRecordController.$inject=["$scope","$translate"]}(),function(){"use strict";angular.module("requesterListModule",["dataLists","requesterRecordModule","ui.select","hpfbConstants"])}(),function(){"use strict";function requesterListController($filter,getContactLists,$scope){function setRecord(value){vm.selectRecord=value}function loadContactData(){getContactLists.getInternalContactsWithoutOther().then(function(data){return vm.baseRequesters=data,!0})}function getListMaxID(){var out=0,list=vm.model.list;if(list)for(var i=0;i<list.length;i++)list[i].sequenceNumber>out&&(out=list[i].sequenceNumber);return out}function _setIdNames(){"_"+$scope.$id}var vm=this;vm.baseRequesters=[],vm.model={},vm.isDetailValid=!0,vm.resetToCollapsed=!0,vm.showDetailErrors=!1,vm.selectRecord=-1,vm.columnDef=[{label:"Requester Name",binding:"solicitedRequester",width:"100"}],vm.emptyModel={sequenceNumber:"",solicitedRequester:"",otherRequesterDetails:"",display:""},vm.$onInit=function(){_setIdNames(),vm.showDetailErrors=!1,angular.isUndefined(vm.model.list)&&(vm.model.list=[]),loadContactData()},vm.$onChanges=function(changes){changes.listItems&&(vm.model.list=changes.listItems.currentValue),changes.showErrors&&(vm.showDetailErrors=changes.showErrors.currentValue)},vm.addNew=function(){var item=(getListMaxID(),angular.copy(vm.emptyModel));item.sequenceNumber=getListMaxID()+1,vm.model.list.push(item),setRecord(-1),vm.resetToCollapsed=!vm.resetToCollapsed,setRecord(vm.model.list.length-1),vm.onUpdate({list:vm.model.list})},vm.deleteRecord=function(_id){var idx=vm.model.list.indexOf($filter("filter")(vm.model.list,{sequenceNumber:_id},!0)[0]);idx<0||(vm.model.list.splice(idx,1),vm.onUpdate({list:vm.model.list}))},vm.disableAddButton=function(){return 0!==vm.model.list.length&&vm.requesterListForm.$invalid}}angular.module("requesterListModule").component("cmpRequesterList",{templateUrl:"app/scripts/components/requesterList/tpl-requester-list_20190311_0949.html",controller:requesterListController,controllerAs:"requesterListCtrl",bindings:{listItems:"<",onUpdate:"&",onDelete:"&",showErrors:"<",updateErrorSummary:"&"}}),requesterListController.$inject=["$filter","getContactLists","$scope"]}(),function(){"use strict";angular.module("fileIO",[])}(),function(){"use strict";function ngFileSelect(hpfbFileReader){function link(scope,element,attrs){scope.rootTag=attrs.rootTag,element.bind("change",function(e){scope.file=(e.srcElement||e.target).files[0],hpfbFileReader.readAsDataText(scope.file,scope).then(function(result){scope.hpfbFileSelect({fileContent:result})})})}var directive={link:link,restrict:"A",scope:{hpfbFileSelect:"&"}};return directive}angular.module("fileIO").directive("hpfbFileSelect",ngFileSelect),ngFileSelect.$inject=["hpfbFileProcessing"]}(),function(){"use strict";function FileSelectController(hpfbFileProcessing){var vm=this;vm.fileTypes=".xml, .hcsc",vm.modelCallback=function(fileContent){vm.status="",fileContent&&(vm.status=fileContent.messages),vm.updateModelRoot({fileContent:fileContent}),angular.element(fileLoad).trigger("focus")}}angular.module("fileIO").component("hpfbFileSelect",{templateUrl:"app/scripts/components/fileIO/fileSelect_20190311_0949.html",controller:FileSelectController,bindings:{updateModelRoot:"&",rootElem:"@"}}),FileSelectController.$inject=["hpfbFileProcessing"]}(),function(){"use strict";function FileWriteController(hpfbFileProcessing){function _generateFile(){"JSON"===vm.saveType.toUpperCase()?hpfbFileProcessing.writeAsJson(vm.jsonToSave,vm.fileName,vm.rootTag):"XML"===vm.saveType.toUpperCase()&&hpfbFileProcessing.writeAsXml(vm.jsonToSave,vm.fileName,vm.rootTag)}function _init(){vm.buttonDisabled?"true"===vm.buttonDisabled.toLowerCase()?vm.buttonDisabled=!0:"false"===vm.buttonDisabled.toLowerCase()?vm.buttonDisabled=!1:vm.buttonDisabled=!1:vm.buttonDisabled=!1}var vm=this;vm.$onInit=_init,vm.generate=_generateFile}angular.module("fileIO").component("hpfbFileSave",{templateUrl:"app/scripts/components/fileIO/fileSave_20190311_0949.html",controller:FileWriteController,bindings:{jsonToSave:"<",rootTag:"@",saveType:"@",buttonLabel:"@",buttonDisabled:"@"}}),FileWriteController.$inject=["hpfbFileProcessing"]}(),function(){"use strict";function fileReader($q){function onLoad(reader,deferred,scope,file){return function(){scope.$apply(function(){if(file){var splitFile=file.name.split("."),fileType=splitFile[splitFile.length-1];fileType.toLowerCase()==draft_file_type?(convertToJSONObjects(reader,scope),checkRootTagMatch(reader,scope)):"xml"===fileType.toLowerCase()?(convertXMLToJSONObjects(reader,scope),checkRootTagMatch(reader,scope)):(convertResult.parseResult=null,convertResult.messages=msg_err_fileType,reader.parseResult=convertResult)}deferred.resolve(reader.parseResult)})}}function onError(reader,deferred,scope){return function(){scope.$apply(function(){deferred.reject(msg_err_load)})}}function getReader(deferred,scope,file){var reader=new FileReader;return reader.onload=onLoad(reader,deferred,scope,file),reader.onError=onError(reader,deferred,scope),reader.parseResult=null,reader}function readAsDataText(file,scope){var deferred=$q.defer(),reader=getReader(deferred,scope,file);return file?reader.readAsText(file):(reader.parseResult=convertResult,reader.parseResult.messages="",reader.parseResult.jsonResult=null,deferred.resolve(reader.parseResult)),deferred.promise}function convertToJSONObjects(reader,scope){try{convertResult.jsonResult=JSON.parse(reader.result),convertResult.jsonResult[scope.rootTag].importFileType=draft_file_type,convertResult.messages=msg_success,reader.parseResult=convertResult}catch(e){convertResult.jsonResult=null,convertResult.messages=msg_err_jsonparse,reader.parseResult=convertResult}}function convertXMLToJSONObjects(reader,scope){var xmlConfig={escapeMode:!0,emptyNodeForm:"text",useDoubleQuotes:!0},xmlConverter=new X2JS(xmlConfig);convertResult.jsonResult=xmlConverter.xml_str2json(reader.result),convertResult.jsonResult&&convertResult.jsonResult[scope.rootTag]?(convertResult.messages=msg_success,convertResult.jsonResult[scope.rootTag].importFileType="xml"):convertResult.messages=msg_err_xmlparse,reader.parseResult=convertResult}function convertJSONObjectsToXML(jsonObj){var xmlConfig={escapeMode:!0,emptyNodeForm:"text",useDoubleQuotes:!0},jsonConverter=new X2JS(xmlConfig),xmlResult=null;return xmlResult=jsonConverter.json2xml_str(jsonObj)}function checkRootTagMatch(reader,scope){scope.rootTag&&reader.parseResult&&reader.parseResult.jsonResult&&(reader.parseResult.jsonResult[scope.rootTag]||(reader.parseResult.jsonResult=null,reader.parseResult.messages=msg_err_formType))}function jsonToFile(jsonObj,fileName,rootTag){if(jsonObj){var makeStrSave=JSON.stringify(jsonObj),blob=new Blob([makeStrSave],{type:"text/plain;charset=utf-8"});fileName?fileName+="."+draft_file_type:fileName="hpfbDraft."+draft_file_type,saveAs(blob,fileName)}}function xmlToFile(jsonObj,fileName,rootTag,xslName){if(jsonObj){var xmlResult=convertJSONObjectsToXML(jsonObj);xmlResult=xslName?'<?xml version="1.0" encoding="UTF-8"?><?xml-stylesheet  type="text/xsl" href="'+xslName+'"?>'+xmlResult:'<?xml version="1.0" encoding="UTF-8"?><?xml-stylesheet  type="text/xsl" href="REP_Combined.xsl"?>'+xmlResult;var blob=new Blob([xmlResult],{type:"text/plain;charset=utf-8"});fileName?fileName+=".xml":fileName="hpfbXML.xml",saveAs(blob,fileName)}}var msg_success="MSG_SUCCESS_LOAD",msg_err_jsonparse="MSG_ERR_JSONPARSE",msg_err_xmlparse="MSG_ERR_XMLPARSE",msg_err_load="MSG_ERR_FILE_LOAD",msg_err_fileType="MSG_ERR_FILE_TYPE",msg_err_formType="MSG_ERR_FORM_TYPE",draft_file_type="hcsc",convertResult={jsonResult:"",messages:""},service={readAsDataText:readAsDataText,writeAsJson:jsonToFile,writeAsXml:xmlToFile};return service}angular.module("fileIO").factory("hpfbFileProcessing",fileReader),fileReader.$inject=["$q"]}(),function(){"use strict";angular.module("expandingTable",[])}(),function(){"use strict";function expandingTableCtrl($filter,$scope){function _setNumberColumns(){vm.disableErrorCol&&(vm.numberCols=vm.numberCols+1)}function _recalculateColumnDefs(colDefs,numCols){var caretWidth=2,errorWidth=5,totalWidth=caretWidth+errorWidth,toSubtract=totalWidth/numCols,result=[];if(vm.disableErrorCol)return colDefs;for(var i=0;i<numCols;i++){var oneDef=angular.copy(colDefs[i]);oneDef.width>toSubtract&&(oneDef.width=oneDef.width-toSubtract),result.push(oneDef)}return result}function updateTableRow(textIndex){var selectIndex=parseInt(textIndex);selectIndex>=0&&vm.selectTableRow(selectIndex)}function _createArray(arraySize,initialVal){for(var anArray=[],i=0;i<arraySize;i++)anArray.push(initialVal);return anArray}var vm=this;vm.focused=!1,vm.columnDefinitions={},vm.disableExpand=!1,vm.tableRowExpanded=!1,vm.tableRowIndexCurrExpanded="",vm.tableRowIndexPrevExpanded="",vm.numberCols=1,vm.disableErrorCol=!1,vm.dayDataCollapse=_createArray(0,!0),vm.formName="expandTblCtrl.transcludeForm",vm.$onInit=function(){vm.listItems&&(vm.dayDataCollapse=_createArray(vm.listItems.length,!0))},vm.getExpandedState=function(row){return row===vm.tableRowIndexCurrExpanded},vm.$onChanges=function(changes){if(changes.listItems&&(vm.listItems?vm.dayDataCollapse=_createArray(vm.listItems.length,!0):vm.dayDataCollapse=_createArray(0,!0),vm.resetTableRow()),changes.tname&&changes.tname.currentValue&&(vm.formName=changes.tname.currentValue),changes.resetToCollapsed&&(vm.resetTableRow(),changes.selectRecord||updateTableRow(vm.selectRecord)),changes.selectRecord){var selectIndex=parseInt(changes.selectRecord.currentValue);selectIndex>=0?vm.selectTableRow(selectIndex):vm.resetTableRow()}changes.disableSelection&&(vm.disableExpand=changes.disableSelection.currentValue),changes.columnDef&&(vm.numberCols=changes.columnDef.currentValue.length,vm.columnDefinitions=_recalculateColumnDefs(changes.columnDef.currentValue,vm.numberCols),_setNumberColumns()),changes.disableErrColumn&&(vm.disableErrorCol=changes.disableErrColumn.currentValue,vm.numberCols=vm.columnDef.length,vm.disableErrorCol=!0,_setNumberColumns())},vm.formInError=function(aForm){return aForm&&aForm.$invalid?"Y":"N"},vm.deletedRow=function(){vm.tableRowExpanded=!1,vm.tableRowIndexCurrExpanded=""},vm.resetTableRow=function(){vm.tableRowIndexPrevExpanded="",vm.tableRowExpanded=!1,vm.tableRowIndexCurrExpanded="",vm.listItems?vm.dayDataCollapse=_createArray(vm.listItems.length,!0):_createArray(0,!0)},vm.dayDataCollapseFn=function(){for(var i=0;vm.listItems.length-1;i+=1)vm.dayDataCollapse.append("true")},vm.selectTableRow=function(index){vm.disableExpand||("undefined"===vm.dayDataCollapse?vm.dayDataCollapse=vm.dayDataCollapseFn():vm.tableRowExpanded===!1&&""===vm.tableRowIndexCurrExpanded?(vm.tableRowIndexPrevExpanded="",vm.tableRowExpanded=!0,vm.tableRowIndexCurrExpanded=index,vm.dayDataCollapse[index]=!1):vm.tableRowExpanded===!0&&(vm.tableRowIndexCurrExpanded===index?(vm.tableRowExpanded=!1,vm.tableRowIndexCurrExpanded="",vm.dayDataCollapse[index]=!0):(vm.tableRowIndexPrevExpanded=vm.tableRowIndexCurrExpanded,vm.tableRowIndexCurrExpanded=index,vm.dayDataCollapse[vm.tableRowIndexPrevExpanded]=!0,vm.dayDataCollapse[vm.tableRowIndexCurrExpanded]=!1)))}}angular.module("expandingTable").component("cmpExpandingTable",{templateUrl:"app/scripts/components/expandingTable/tpl-expanding-table_20190311_0949.html",controller:expandingTableCtrl,controllerAs:"expandTblCtrl",transclude:!0,bindings:{title:"@",preId:"@",listItems:"<",columnDef:"<",disableSelection:"<",selectRecord:"<",resetToCollapsed:"<",disableErrColumn:"@",tname:"@"}}),expandingTableCtrl.$inject=["$filter","$scope"]}(),function(){"use strict";angular.module("contactModule",["dataLists","hpfbConstants","errorMessageModule"])}(),function(){"use strict";function contactCtrl(getContactLists,ENGLISH,FRENCH,$scope){function _setIdNames(){var scopeId=vm.fldId+"_"+$scope.$id;vm.salutationId="salutation"+scopeId,vm.firstNameId="firstName"+scopeId,vm.lastNameId="lastName"+scopeId,vm.langCorrespondId="langCorrespond"+scopeId,vm.jobTitleId="jobTitle"+scopeId,vm.faxId="fax_number"+scopeId,vm.phoneNumberId="phoneNumber"+scopeId,vm.phoneExtId="phoneExt"+scopeId,vm.contactEmailId="contactEmail"+scopeId}var vm=this;vm.isEditable=!0,vm.ngModelOptSetting={updateOn:"blur"},vm.salutationList=getContactLists.getSalutationList(),vm.langCorresppond=[ENGLISH,FRENCH],vm.faxRequired=!1,vm.phoneReg=/\(?([0-9]{3})\)?([ .-]?)([0-9]{3})\2([0-9]{4})/,vm.contactModel={salutation:"",givenName:"",surname:"",initials:"",title:"",phone:"",phoneExt:"",fax:""},vm.inputModelOptions={updateOn:"blur"},vm.fldId="",vm.requiredOnly=[{type:"required",displayAlias:"MSG_ERR_MAND"}],vm.emailError=[{type:"required",displayAlias:"MSG_ERR_MAND"},{type:"email",displayAlias:"MSG_ERR_EMAIL_FORMAT"}],vm.phoneError=[{type:"required",displayAlias:"MSG_ERR_MAND"},{type:"pattern",displayAlias:"MSG_ERR_PHONE_FORMAT"}],vm.faxError=[{type:"required",displayAlias:"MSG_ERR_MAND"},{type:"pattern",displayAlias:"MSG_ERR_FAX_FORMAT"}],vm.$onInit=function(){vm.langList=[ENGLISH,FRENCH],_setIdNames()},vm.$onChanges=function(changes){changes.contactRecord&&(vm.contactModel=changes.contactRecord.currentValue),changes.isAmend&&(vm.isEditable=changes.isAmend.currentValue),changes.faxMandatory&&(vm.faxRequired=changes.faxMandatory.currentValue),changes.fieldSuffix&&(vm.fldId=changes.fieldSuffix.currentValue,vm.fldId||(vm.fldId=""))},vm.showError=function(ctrl){return!!ctrl&&!!(ctrl.$invalid&&ctrl.$touched||vm.showErrors()&&ctrl.$invalid)},$scope.$watch("contCtrl.contactForm.$error",function(){vm.updateErrorSummary()},!0)}angular.module("contactModule").component("cmpContactDetails",{templateUrl:"app/scripts/components/contactDetails/tpl-contact-details_20190311_0949.html",controller:contactCtrl,controllerAs:"contCtrl",bindings:{contactRecord:"<",onUpdate:"&",isAmend:"<",showErrors:"&",faxMandatory:"@",updateErrorSummary:"&",fieldSuffix:"<"}}),contactCtrl.$inject=["getContactLists","ENGLISH","FRENCH","$scope"]}(),function(){"use strict";angular.module("transactionInfo",["lifecycleList","requesterListModule","filterLists","hpfbConstants","ui.bootstrap","dataLists","ui.select","addressModule","contactModule","transactionFeesModule","alertModule","errorMessageModule"])}(),function(){"use strict";function transactionInfoCtrl($scope,OTHER,YES,NO,NEW,EXISTING,getContactLists,getRoleLists,ENGLISH,FRENCH){function isEctdValue(){return vm.transactionModel.isEctd===YES}function isSolicitedValue(){return vm.transactionModel.isSolicited===YES}function isActivityChangesValue(){return vm.transactionModel.isActivityChanges===YES}function isNewActivity(){return vm.transactionModel.transactionType===NEW}function loadAdminSubData(){getContactLists.getAdminSubType().then(function(data){return vm.adminSubTypeList=data,!0})}function loadUserListData(){getContactLists.getInternalContactsWithoutOther().then(function(data){return vm.userList=data,!0})}function _setIdNames(){var scopeId="_"+$scope.$id;vm.companyId="company_id"+scopeId,vm.dossierId="dossier_id"+scopeId,vm.productNameId="prod_name"+scopeId,vm.isEctdId="is_ectd"+scopeId,vm.isSolicitedId="is_solicited"+scopeId,vm.solictedRqId="solicited_rq"+scopeId,vm.solicitedOtherId="solicited_rq_other"+scopeId,vm.companyNameId="company_noabbrev"+scopeId,vm.contactSameId="confirm_contact_valid"+scopeId,vm.isFeesId="is_fee_transaction"+scopeId,vm.typeId="dossier_type"+scopeId,vm.isNewActivityId="is_new_activity"+scopeId,vm.thirdPartyId="is_signed_3rd_party"+scopeId,vm.isAdminSubId="is_admin_submission"+scopeId,vm.adminSubTypeId="admin_sub_type"+scopeId,vm.isPriorityId="is_priority"+scopeId,vm.isNocId="is_noc"+scopeId}var vm=this;vm.ngModelOptSetting={updateOn:"blur"},vm.transactionModel={},vm.yesNoList=[YES,NO],vm.newExistingList=[NEW,EXISTING],vm.showNewActivityFields=!1,vm.showThirdPartyNote=!1,vm.showAdminSub=!1,vm.showEctdSection=!0,vm.showSolicitedDetail=!1,vm.showOtherSolicitedDetail=!1,vm.activityEditable=!0,vm.isEctd=!1,vm.alerts=[!1,!1,!1,!1,!1,!1,!1,!1,!1],vm.requesterList=[],vm.userList=[],vm.formTypeList=getRoleLists.getFormTypes(),vm.lang=ENGLISH,vm.sequenceChange=!1,vm.requiredOnly=[{type:"required",displayAlias:"MSG_ERR_MAND"}],vm.min5Error=[{type:"required",displayAlias:"MSG_ERR_MAND"},{type:"minlength",displayAlias:"MSG_LENGTH_MIN5"}],vm.min7Error=[{type:"required",displayAlias:"MSG_ERR_MAND"},{type:"minlength",displayAlias:"MSG_LENGTH_7"},{type:"pattern",displayAlias:"MSG_FORMAT_CHAR_6DIGITS"}],vm.showSummary=!1,vm.$onInit=function(){_setIdNames(),vm.updateActivityType(),vm.setThirdParty(),vm.setAdminSubmission(),vm.updateEctdState(),vm.setSolicitedState(),loadAdminSubData(),loadUserListData(),vm.finalState=!1,vm.displayResetBtn=!1},vm.$onChanges=function(changes){changes.transactionRoot&&(vm.transactionModel=changes.transactionRoot.currentValue,vm.updateActivityType(),vm.setThirdParty(),vm.setAdminSubmission(),vm.updateEctdState(),vm.setSolicitedState()),changes.language&&(vm.lang=changes.language.currentValue),changes.sequenceUpdated&&(vm.sequenceChange=changes.sequenceUpdated.currentValue),changes.showErrorSummary&&(vm.showSummary=changes.showErrorSummary.currentValue),changes.isFinal&&(vm.finalState=changes.isFinal.currentValue)},vm.isFeesIndicated=function(){return vm.transactionModel.isFees===YES},vm.getNewTransaction=function(){return vm.getTransaction()},vm.setSequence=function(start){(isNaN(start)||null===start)&&(start=0),vm.setStartingSequence({startVal:start})},vm.getNewRepContact=function(){return vm.getRepContact()},vm.subtractSequence=function(){vm.deprecateSequence()},vm.showFormErrors=function(){},vm.showErrors=function(){return vm.showSummary},vm.showError=function(ctrl){if(ctrl)return!!(ctrl.$invalid&&ctrl.$touched||vm.showSummary&&ctrl.$invalid)},vm.updateActivityType=function(){vm.showNewActivityFields=isNewActivity(),vm.showNewActivityFields||(vm.transactionModel.isThirdParty="",vm.transactionModel.isPriority="",vm.transactionModel.isNoc="",vm.transactionModel.isAdminSub="",vm.transactionModel.subType="",
vm.showThirdPartyNote=!1,vm.showAdminSub=!1)},vm.setThirdParty=function(){vm.showThirdPartyNote=vm.transactionModel.isThirdParty===YES},vm.updateEctdState=function(){isEctdValue()?vm.isEctd=!0:vm.isEctd=!1},vm.updateFeeState=function(){vm.transactionModel.isFees===YES?vm.transactionModel.feeDetails=vm.getFee():vm.transactionModel.feeDetails=null},vm.setSolicitedState=function(){isSolicitedValue()?vm.showSolicitedDetail=!0:(vm.showSolicitedDetail=!1,vm.transactionModel.solicitedRequesterReord=[])},vm.updateActivityChanges=function(){vm.activityEditable=isActivityChangesValue()},vm.updateRequesterList=function(list){list&&(vm.transactionModel.solicitedRequesterReord=list)},vm.setAdminSubmission=function(){vm.transactionModel.isAdminSub===YES?vm.showAdminSub=!0:(vm.showAdminSub=!1,vm.transactionModel.subType="")},vm.addInstruct=function(value){angular.isUndefined(value)||value<vm.alerts.length&&(vm.alerts[value]=!0)},vm.closeAlert=function(value){angular.isUndefined(value)||value<vm.alerts.length&&(vm.alerts[value]=!1)},vm.isFrench=function(){return vm.lang===FRENCH},vm.resetSpecificValues=function(){vm.finalState&&(vm.transactionModel.transactionType="",vm.updateActivityType(),vm.setThirdParty(),vm.setAdminSubmission(),vm.transactionModel.isSolicited="",vm.setSolicitedState(),vm.transactionModel.ectd.lifecycleRecord=[],vm.transactionModel.projectManager1="",vm.transactionModel.projectManager2="",vm.transactionModel.isFees="",vm.transactionModel.feeDetails=null,vm.transactionModel.confirmContactValid=!1,vm.transactionModel.resetBtnClicked=!0)},vm.disableProductName=function(){return vm.finalState},$scope.$watch("transInfoCtrl.transInfoForm.$error",function(){vm.updateErrorSummary()},!0)}angular.module("transactionInfo").config(function(uiSelectConfig){uiSelectConfig.theme="select2"}).component("cmpTransactionInfo",{templateUrl:"app/scripts/components/transactionInfo/tpl-transaction-info_20190311_0949.html",controller:transactionInfoCtrl,controllerAs:"transInfoCtrl",bindings:{transactionRoot:"<",isAmend:"<",isFinal:"<",getTransaction:"&",setStartingSequence:"&",getRepContact:"&",getFee:"&",resetEctd:"&",deprecateSequence:"&",language:"<",sequenceUpdated:"<",getCurrentSequence:"&",showErrorSummary:"<",updateErrorSummary:"&"}}),transactionInfoCtrl.$inject=["$scope","OTHER","YES","NO","NEW","EXISTING","getContactLists","getRoleLists","ENGLISH","FRENCH"]}(),function(){"use strict";angular.module("transactionMainModule",["transactionInfo","transactionService","transactionLoadService","fileIO","services","dataLists","filterLists","numberFormat","errorSummaryModule","errorMessageModule"])}(),function(){"use strict";function TransactionMainCtrl(TransactionService,hpfbFileProcessing,$filter,$translate,$scope,ENGLISH,EXTERNAL_TYPE){function _getFileName(){var date=new Date,filename="HCREPRT",month=date.getMonth()+1,day=date.getDate(),hours=date.getHours(),minutes=date.getMinutes(),separator="-";return month<10&&(month="0"+month),day<10&&(day="0"+day),hours<10&&(hours="0"+hours),minutes<10&&(minutes="0"+minutes),filename=filename+separator+date.getFullYear()+separator+month+separator+day+separator+hours+minutes,filename.toLowerCase()}function _transformFile(){return vm.transactionService.transformToFileObj(vm.transaction)}function _loadFileContent(fileContent){if(fileContent){var resultJson=fileContent.jsonResult;resultJson&&(vm.transactionService.transformFromFileObj(resultJson),vm.transaction={},vm.transaction=vm.transactionService.getModelInfo(),vm.isFinal=vm.transactionService.isFinal)}}function _setIdNames(){var scopeId="_"+$scope.$id;vm.formId="transaction_form"+scopeId,vm.privacyStatementID="privacy_statement"+scopeId}var vm=this;vm.savePressed=!1,vm.userType=EXTERNAL_TYPE,vm.transactionService=new TransactionService,vm.rootTag=vm.transactionService.getRootTag(),vm.transaction=vm.transactionService.getModelInfo(),vm.showContent=_loadFileContent,vm.alerts=[!1,!1,!1],vm.lang=$translate.proposedLanguage()||$translate.use(),vm.sequenceUpdated=!1,vm.isFinal=!1,vm.updateSummary=0,vm.focusSummary=0,vm.exclusions={"lifecycleCtrl.lifecycleDetailsForm":"true"},vm.transcludeList={},vm.alias={saveLifeRec:{type:"buttonSearch",buttonName:"saveLifecycleRec"},oneLifeRec:{type:"elementnoid",target:"transactionList"},one_payment_method:{type:"fieldset",parent:"fs_payment_methods"}},vm.requiredOnly=[{type:"required",displayAlias:"MSG_ERR_MAND"}],vm.privacyStat=!1,vm.$onInit=function(){vm.updateSummary=vm.updateSummary+1,vm.updateSummary=vm.updateSummary+1,_setIdNames()},vm.saveJson=function(){var writeResult=_transformFile();vm.rootTag=vm.transactionService.getRootTag(),hpfbFileProcessing.writeAsJson(writeResult,_getFileName(),vm.rootTag),vm.savePressed=!0},vm.saveXML=function(){if(vm.transactionEnrolForm.$invalid)vm.focusSummary++,vm.updateErrorSummaryState(),vm.savePressed=!0;else{var writeResult=_transformFile();hpfbFileProcessing.writeAsXml(writeResult,_getFileName(),vm.rootTag,vm.transactionService.getXSLFileName()),vm.savePressed=!1}},vm.updateErrorSummaryState=function(){vm.updateSummary=vm.updateSummary+1},vm.disableFinalXmlBtn=function(){return!!vm.isFinal&&!vm.transaction.resetBtnClicked},vm.getNewRepContact=function(){return vm.transactionService.createRepContact()},vm.setSequenceNumber=function(startVal){vm.transactionService.setSequenceNumber(startVal);vm.sequenceUpdated=!vm.sequenceUpdated},vm.updateAddressRecord=function(address){if(address){var idx=vm.company.addressList.indexOf($filter("filter")(vm.company.addressList,{addressID:address.addressID},!0)[0]);vm.company.addressList[idx]=address;var temp=vm.company.addressList;vm.company.addressList=[],vm.company.addressList=temp}},vm.isExtern=function(){return vm.userType==EXTERNAL_TYPE},vm.showErrors=function(){return vm.savePressed},vm.addInstruct=function(value){angular.isUndefined(value)||value<vm.alerts.length&&(vm.alerts[value]=!0)},vm.closeAlert=function(value){angular.isUndefined(value)||value<vm.alerts.length&&(vm.alerts[value]=!1)},vm.isFrench=function(){return vm.lang!==ENGLISH},vm.showError=function(ctrl){return!!vm.savePressed||!(!ctrl||ctrl.$untouched)&&(ctrl.$invalid&&ctrl.$touched||vm.savePressed&&ctrl.$invalid)}}angular.module("transactionMainModule").component("cmpTransactionMain",{templateUrl:"app/scripts/components/transactionMain/tpl-transaction-main_20190311_0949.html",controller:TransactionMainCtrl,controllerAs:"main"}),TransactionMainCtrl.$inject=["TransactionService","hpfbFileProcessing","$filter","$translate","$scope","ENGLISH","EXTERNAL_TYPE"]}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,

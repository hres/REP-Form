!function(){"use strict";angular.module("transactionApp",["transactionMainModule","pascalprecht.translate","ngMessages","ngAria","ui.bootstrap","translations","ngSanitize"])}(),function(){"use strict";function MainController(){var vm=this;vm.userType}angular.module("transactionApp").controller("MainController",MainController)}(),function(){"use strict";angular.module("transactionApp").config(["$translateProvider","$httpProvider","$locationProvider",function($translateProvider,$httpProvider,$locationProvider){$locationProvider.html5Mode({enabled:!0,requireBase:!1,rewriteLinks:!1}),$translateProvider.directivePriority(1),$translateProvider.preferredLanguage("fr"),$translateProvider.useLoader("customLoad"),$translateProvider.useSanitizeValueStrategy(null),$translateProvider.forceAsyncReload(!0),$httpProvider.defaults.headers.get||($httpProvider.defaults.headers.get={}),$httpProvider.defaults.headers.get["If-Modified-Since"]="Mon, 26 Jul 1997 05:00:00 GMT",$httpProvider.defaults.headers.get["Cache-Control"]="no-cache",$httpProvider.defaults.headers.get.Pragma="no-cache"}])}(),angular.module("translations",[]).config(["$translateProvider",function($translateProvider){$translateProvider.translations("en",{CITY:"City or Town",COUNTRY:"Country",PROVINCE:"Province",POSTAL:"Postal Code",PROVSTATE:"Province or State",STATE:"State",STREET:"Street Address",ZIP:"Zip Code",COMPANY:"Company",ADD_ADDRESS:"Add Address",CITY_TOWN:"City or Town",SAVE_ADDR:"Save Address",DELETE_ADDR:"Delete Address",ADDR_INFO:"Address Information",ADDR_DETAILS:"Address Details",ADDR_ROLE_LEGEND:"Select one or more roles for this company",ADDR_REP_ROLE_LEGEND:"Select one or more roles for this company representative",PRODUCTS_IMPORTED:"Imported Products",PRODUCT_TYPES:"Products imported by this Company",ALL_PRODUCTS:"All Products",SELECTED_PRODUCTS:"Some Products",IDENTIFY_PRODUCTS:"Provide the Dossier Identifiers for the products that are imported by this Company",ADD_DOSSIER_ID:"Add Dossier ID",IMPORTER_NONCDN:"Please add Canadian Importer company record, if known.",COUNTRY_CHOOSE:"Choose a country",COUNTRY_SEARCH:"Select or Search for country",PROVINCELIST:"Province or State"}),$translateProvider.translations("fr",{CITY:"Ville",COUNTRY:"Pays",PROVINCE:"Province",POSTAL:"Code postal",PROVSTATE:"Province ou état",STATE:"État",STREET:"Rue",ZIP:"Code ZIP",COMPANY:"Compagnie",ADD_ADDRESS:"Ajouter Addresse",CITY_TOWN:"Ville",SAVE_ADDR:"fr_Save Address",DELETE_ADDR:"Supprimer Addresse",ADDR_INFO:"Information d'adresse",ADDR_DETAILS:"Détails de l'adresse",ADDR_ROLE_LEGEND:"Sélectionner un ou plusieurs rôles pour cette entreprise",ADDR_REP_ROLE_LEGEND:"fr_Select one or more roles for this company representative",PRODUCTS_IMPORTED:"fr_Imported Products",PRODUCT_TYPES:"fr_Products imported by this Company",ALL_PRODUCTS:"fr_All Products",SELECTED_PRODUCTS:"fr_Some Products",IDENTIFY_PRODUCTS:"fr_Provide the Dossier Identifiers for the products that are imported by this Company",ADD_DOSSIER_ID:"fr_Add Dossier ID",IMPORTER_NONCDN:"Veuillez vous assurer d'indiquer un importateur canadien.",COUNTRY_CHOOSE:"Choisir un pays",COUNTRY_SEARCH:"fr_Select or Search for country",PROVINCELIST:"Province or State"}),$translateProvider.translations("en",{AB:"Alberta",BC:"British Columbia",MB:"Manitoba",NB:"New Brunswick",NL:"Newfoundland and Labrador",NT:"Northwest Territories",NS:"Nova Scotia",NU:"Nunavut",ON:"Ontario",PE:"Prince Edward Island",QC:"Quebec",SK:"Saskatchewan",YT:"Yukon",AL:"Alabama",AK:"Alaska",AZ:"Arizona",AR:"Arkansas",CA:"California",CO:"Colorado",CT:"Connecticut",DE:"Delaware",DC:"District of Columbia",FL:"Florida",GA:"Georgia",HI:"Hawaii",ID:"Idaho",IL:"Illinois",IN:"Indiana",IA:"Iowa",KS:"Kansas",KY:"Kentucky",LA:"Louisiana",ME:"Maine",MD:"Maryland",MA:"Massachusetts",MI:"Michigan",MN:"Minnesota",MS:"Mississippi",MO:"Missouri",MT:"Montana",NE:"Nebraska",NV:"Nevada",NH:"New Hampshire",NJ:"New Jersey",NM:"New Mexico",NY:"New York",NC:"North Carolina",ND:"North Dakota",OH:"Ohio",OK:"Oklahoma",OR:"Oregon",PA:"Pennsylvania",RI:"Rhode Island",SC:"South Carolina",SD:"South Dakota",TN:"Tennessee",TX:"Texas",UT:"Utah",VT:"Vermont",VA:"Virginia",WA:"Washington",WV:"West Virginia",WI:"Wisconsin",WY:"Wyoming"}),$translateProvider.translations("fr",{AB:"Alberta",BC:"Colombie-Britannique",PE:"Île-du-Prince-Édouard",MB:"Manitoba",NB:"Nouveau-Brunswick",NS:"Nouvelle-Écosse",NU:"Nunavut",ON:"Ontario",QC:"Québec",SK:"Saskatchewan",NL:"Terre-Neuve et Labrador",NT:"Territoires du Nord-Ouest",YT:"Yukon",AL:"Alabama",AK:"Alaska",AZ:"Arizona",AR:"Arkansas",CA:"Californie",NC:"Caroline du nord",SC:"Caroline du sud",CO:"Colorado",CT:"Connecticut",ND:"Dakota du nord",SD:"Dakota du sud",DE:"Delaware",DC:"District de Columbia",FL:"Floride",GA:"Géorgie",HI:"Hawaii",ID:"Idaho",IL:"Illinois",IN:"Indiana",IA:"Iowa",KS:"Kansas",KY:"Kentucky",NY:"L'état de New York",WA:"L'état de washington",LA:"Louisiane",ME:"Maine",MD:"Maryland",MA:"Massachusetts",MI:"Michigan",MN:"Minnesota",MS:"Mississippi",MO:"Missouri",MT:"Montana",NE:"Nebraska",NV:"Nevada",NH:"New Hampshire",NJ:"New Jersey",NM:"Nouveau-mexique",OH:"Ohio",OK:"Oklahoma",OR:"Oregon",PA:"Pennsylvanie",RI:"Rhode Island",TN:"Tennessee",TX:"Texas",UT:"Utah",VT:"Vermont",VA:"Virginie",WV:"Virginie-occidentale",WI:"Wisconsin",WY:"Wyoming"}),$translateProvider.translations("en",{FIRSTNAME:"First Name",LASTNAME:"Last Name",INITIALS:"Initials",LANGCORRESPOND:"Language of Correspondence",JOBTITLE:"Job Title",SALUTATION:"Salutation",SALUT_MR:"Mr.",SALUT_MS:"Ms.",SALUT_DR:"Dr.",SALUT_MRS:"Mrs.",ROLE_PRIMARY:"Primary",ROLE_SECONDARY:"Alternate",CONTACTEMAIL:"Email",FAX_NUMBER:"Fax Number",PHONE_EXT:"Phone Extension",ROLES:"Roles",PHONENUMBER:"Phone Number",CONTACT_INFO:"Company Representative Information",REP_CONTACT:"Regulatory Enrolment Process Contact",ONE_ROLE:"Role",CONTACT_DETAILS:"Company Representative Details",ADD_CONTACT:"Add REP Contact",CONTACT_ROLE_LEGEND:"Select one or more roles for this company representative",CONTACT_ROLE_INSTRUCT:"Company Representative Role Instructions",ADD_REPRES:"Add Company Representative",DELETE_REPRES:"Delete Company Rep.",SAVE_REPRES:"Save Company Rep."}),$translateProvider.translations("fr",{FIRSTNAME:"Prénom",LASTNAME:"Nom de famille",INITIALS:"Initiales",LANGCORRESPOND:"Langue de correspondance",JOBTITLE:"Titre",SALUTATION:"Appel",SALUT_MR:"M.",SALUT_MS:"Mme",SALUT_DR:"Dr.",SALUT_MRS:"Mlle",ROLE_PRIMARY:"Primaire",ROLE_SECONDARY:"Alterner",CONTACTEMAIL:"Courriel",FAX_NUMBER:"Numéro de télécopieur",PHONE_EXT:"Extension de téléphone",ADDR_ROLES:"Rôles",PHONENUMBER:"Numéro de téléphone",CONTACT_INFO:"Renseignements sur le représentant de l’entreprise",REP_CONTACT:"fr_REP Contact",ONE_ROLE:"fr_Role",CONTACT_DETAILS:"Détails du représentant de l'entreprise",ADD_CONTACT:"fr_Add REP Contact",CONTACT_ROLE_LEGEND:"Sélectionner un ou plusieurs rôles pour ce représentant de l'entreprise",CONTACT_ROLE_INSTRUCT:"fr_Company Representative Role Instructions",ADD_REPRES:"fr_Add Company Representative",DELETE_REPRES:"fr_Delete Company Rep.",SAVE_REPRES:"fr_Save Company Rep.",ROLES:"Rôles"}),$translateProvider.translations("en",{APPL_STATUS:"Enrolment Status",ENROL_VERSION:"Enrolment Version",DATE_SAVED:"Date Last Saved",AMEND_ENROL:"Amend Enrolment",AMEND_MSG:"Edit records to be amended below.",REASON_AMEND:"Reason for amendment"}),$translateProvider.translations("fr",{APPL_STATUS:"Statut de l'insciption",ENROL_VERSION:"Version de l'inscription",DATE_SAVED:" Date du dernier enregistrement",AMEND_ENROL:"Modifier l'inscription",AMEND_MSG:"Changer les enregistrements à modifier ci-dessous.",REASON_AMEND:"Raison pour la modification"}),$translateProvider.translations("en",{SELECT_LOAD:"Select a file to load",MSG_SUCCESS_LOAD:"The file was loaded successfully",MSG_ERR_JSONPARSE:"Error: there was an error parsing the working file.",MSG_ERR_XMLPARSE:"Error: there was an error parsing the draft XML file.",MSG_ERR_FILE_LOAD:"Error: there was a problem loading the file.",MSG_ERR_FILE_TYPE:"Error: An invalid file type was selected.",MSG_ERR_FORM_TYPE:"Error: the wrong form type was selected for this form.",MSG_ERR_CHECKSUM_FAIL:"Error: the checksum in the file does not match the calculated checksum",MSG_ERR_FILE_VERSION:"Error: An invalid file version was selected."}),$translateProvider.translations("fr",{SELECT_LOAD:"Sélectionnez un fichier à charger",MSG_SUCCESS_LOAD:"Le fichier a été chargé avec succès",MSG_ERR_JSONPARSE:"Erreur: il y a eu une erreur en analysant le fichier de travail.",MSG_ERR_XMLPARSE:"Erreur: il y avait une erreur d'analyse du projet de fichier XML,",MSG_ERR_FILE_LOAD:"Erreur: il y a eu un problème lors du chargement du fichier.",MSG_ERR_FILE_TYPE:"Erreur: un type de fichier invalide a été sélectionné.",MSG_ERR_FORM_TYPE:"Erreur: le type de formulaire incorrect a été sélectionné pour ce formulaire.",MSG_ERR_CHECKSUM_FAIL:"Erreur: La somme de contrôle dans le fichier ne correspond pas à la somme de contrôle calculée.",MSG_ERR_FILE_VERSION:"Erreur: un version de fichier invalide a été sélectionné."}),$translateProvider.translations("en",{Y:"Yes",N:"No",ADD:"Add",DELETEROW:"Delete Row",SELECTEDROW:"Selected Row",REQUIRED:"(required)",ROLES_SELECT:"Select one or more roles for this record",NEW:"New",AMEND:"Amend",APPROVED:"Approved",FINAL:"Final",CLICK_TOGGLE:"Click to toggle the collapse or expand details for this address.",AMEND_RECORD:"Amend Record",en:"English",fr:"French",ADD_RECORD:"Add Record",SAVE_RECORD:"Save Record",DELETE_RECORD:"Delete Record",COPY_RECORD:"Copy Record",DISCARD_CHANGES:"Discard Changes",REPSECONDARY:"Alternate Regulatory Enrolment Process contact",REPPRIMARY:"Primary Regulatory Enrolment Process contact",MAILING:"Regulatory Mailing / Annual Contact Address",BILLING:"Billing Address",MANUFACTURER:"Manufacturer / Sponsor Mailing Address",IMPORTER_ADDRESS:"Canadian Importer Mailing Address",CONTACTMAILING:"Regulatory Mailing / Annual Contact",CONTACTBILLING:"Billing Contact",CONTACTMANUFACTURER:"Manufacturer / Sponsor Contact",CONTACT_IMPORTER:"Importer Contact",APPROVE_FINAL:"Generate Final XML",SAVE_DRAFT:"Save Draft XML",PRIMARY:"Primary",SECONDARY:"Alternate",TOGGLE_EXPAND:"Click to toggle collapse or expand details of row",CONTROL_NUMBER:"Control Number",REP_CONTACT_INFO:"Regulatory Enrolment Process Contact Information",SAVE_CONTACT:"Save Contact",DELETE_CONTACT:"Delete Contact",COMPANY_ID:"Company ID",DOSSIER_ID:"Dossier ID",IMPORTER:"Importer",IMPORTERID:"Importer Company ID",IMPORTER_COMPANY_NAME:"Importer Company Name",IMPORTER_COMPANY_ID_IF:"Importer Company ID (if applicable)",IMPORTER_COMPANY_NAME_IF:"Importer Company Name (if applicable)",ERRORS:"Errors",UNKNOWN:"Unknown",BIOLOGIC:"Biologic",PHARMACEUTICAL:"Pharmaceutical",VETERINARY:"Veterinary",CLINICAL_TRIAL:"Clinical Trial",HELP_FILE_LOAD:"file load instructions",EXPAND:"Expand",HELP_ACTIVITY_MAIN:"Activity Instructions",HELP_ACTIVITY_REP:"Regulatory Enrolment Process Contact Instructions",CALENDAR:"Pick date from calendar",HIDE_CALENDAR:"Hide Calendar (escape key)",OTHER:"Other",HELP_REP_CONTACT:"Regulatory Enrolment Process Contact Instructions",OTHER_UNITS:"Units other details",COMPANYNAME:"Company Name (Full legal name - no abbreviations)",ACOMPANYNAME:"Company Name (Full legal name - no abbreviations)",COPY:"Copy",DELETE:"Delete",SAVE_WORKING:"Save Working Copy",COMPANY_NOABBREV:"Company Name (Full legal Name - no abbreviations)",CLOSE_ALERT:"Collapse instructions",COLLAPSE:"Collapse",CONTROL_NUM:"Control Number",OTHER_DETAILS:"Other - specify",PROD_NAME:"Product Name",PROD_NAME_HELP:"Product Name Instructions",PROP_NAME_HELP:"Proper, Common or Non-proprietary Name Instructions",RELATED_INFO_HELP:"Related Information Instructions",DOSSIER_TYPE:"Dossier Type",LEAST_5_CHAR:" (5 characters)","5_OR_6_CHAR":" ( 5 or 6 characters)",LEAST_7_CHAR:" (7 characters)",INCLUDE_AREA_CODE:" (including area code)",LEAST_6_DIGIT:" (6 digits only)",LEAST_5_DIGIT:" (5 digits only)",INSTRUCTION:"Instruction",RETURN_INSTRUCTION:"Return to instruction ",PRIVACY_NOTICE_STATEMENT:"Privacy Notice Statement",SECURITY_DISCLAIMER:"Security Disclaimer",PRIVACY_STATEMENT:"By submitting your personal information, you are consenting to its collection, use and disclosure in accordance with the Privacy Notice Statement.",FOOTNOTE_INSTRUCTION:"Instructions for completing sections on form",SECTION_IS_NOT_VISIBLE:"[ This section may not be visible. ]",FAX_NOT_AVAILABLE:" (Use 0000000000 if not available)",NOT_APPLICABLE:"Not applicable",D21:"Biologic",D22:"Pharmaceutical",D24:"Veterinary",D26:"Clinical Trial",BROWSER:"Browser",TABLE_EXPANDED_STATE:"Expanded State",PROTECTED_B:'Protected "B" when completed'}),$translateProvider.translations("fr",{Y:"Oui",N:"Non",ADD:"fr_Add",DELETEROW:"fr_Delete Row",SELECTEDROW:"fr_Selected Row",REQUIRED:"(obligatoire)",ROLES_SELECT:"fr_Select one or more roles for this record",NEW:"Nouvelle",AMEND:"Modification",APPROVED:"fr_Approved",FINAL:"Finale",CLICK_TOGGLE:"fr_Click to toggle the collapse or expand details for this address.",AMEND_RECORD:"fr_Amend Record",en:"Anglais",fr:"Français",ADD_RECORD:"Ajouter un enregistrement",SAVE_RECORD:"Enregistrer",DELETE_RECORD:"Supprimer l'enregistrement",COPY_RECORD:"Copier",DISCARD_CHANGES:"Éliminer les modifications",REPSECONDARY:"Personne-resource supplémentaire pour le processus d'inscription réglemetaire",REPPRIMARY:"Personne-resource principale pour le processus d'inscription réglemetaire",MAILING:"Contact pour le l'address courrier réglementaire / adresse pour l'annuelle",BILLING:"Adresse de facturation",MANUFACTURER:"Adresse postale du fabricant / promoteur",IMPORTER_ADDRESS:"Adresse postale de l'importateur canadien",CONTACTMAILING:"Courrier réglementaire / adresse de personne-ressource pour l'annuelle",CONTACTBILLING:"Personne-ressource de facturation",CONTACTMANUFACTURER:"Personne-ressource du fabricant/promoteur",CONTACT_IMPORTER:"Personne-ressource de l'importateur",APPROVE_FINAL:"Générer le XML finale",SAVE_DRAFT:"Enregistrer le brouillon XML",PRIMARY:"fr_Primary",SECONDARY:"fr_Alternate",TOGGLE_EXPAND:"Cliquez pour réduire ou ouvrir les détails de la ligne ",CONTROL_NUMBER:"Numéro de contrôle",REP_CONTACT_INFO:"fr_Main Contact Information",SAVE_CONTACT:"fr_Save Contact",DELETE_CONTACT:"fr_Delete Contact",COMPANY_ID:"ID d'entreprise",DOSSIER_ID:"ID de dossier",IMPORTER:"Importateur",IMPORTERID:"ID d'entreprise de l'importateur",IMPORTER_COMPANY_NAME:"Nom d'entreprise de l'importateur",IMPORTER_COMPANY_ID_IF:"fr_Importer Company ID (if applicable)",IMPORTER_COMPANY_NAME_IF:"fr_Importer Company Name (if applicable)",ERRORS:"Erreurs",UNKNOWN:"Inconnu",BIOLOGIC:"fr_Biologic",PHARMACEUTICAL:"fr_Pharmaceutical",HELP_FILE_LOAD:"fr_File Load Instructions",EXPAND:"fr_Expand",HELP_ACTIVITY_MAIN:"fr_Activity Instructions",HELP_ACTIVITY_REP:"fr_Regulatory Enrolment Process Contact Instructions",CALENDAR:"fr_Pick date from calendar",HIDE_CALENDAR:"fr_Hide Calendar (escape key)",OTHER:"Autre",HELP_REP_CONTACT:"Regulatory Enrolment Process Contact Instructions",OTHER_UNITS:"Unités, autre détails",COMPANYNAME:"Nom d’entreprise (nom légal complet – sans abréviation)",ACOMPANYNAME:"Nom d’entreprise (nom légal complet – sans abréviation)",COPY:"fr_Copy",DELETE:"Supprimer",SAVE_WORKING:"Enregistrer une copie de travail",COMPANY_NOABBREV:"Nom d’entreprise (nom légal complet – sans abréviation)",CLOSE_ALERT:"Minimiser les instructions",COLLAPSE:"Minimiser les",CONTROL_NUM:"Numéro de contrôle",OTHER_DETAILS:"Autre détails",PROD_NAME:"Nom du produit",PROD_NAME_HELP:"fr_Product Name Instructions",PROP_NAME_HELP:"fr_Proper, Common or Non-proprietary Name Instructions",RELATED_INFO_HELP:"fr_Related Information Instructions",DOSSIER_TYPE:"Type de dossier",LEAST_5_CHAR:" fr_(at least 5 characters)","5_OR_6_CHAR":" (5 ou 6 caractères)",LEAST_7_CHAR:" (7 caractères)",INCLUDE_AREA_CODE:" (y compris indicatif régional)",LEAST_6_DIGIT:" (6 chiffres seulement)",LEAST_5_DIGIT:" (5 chiffres seulement)",INSTRUCTION:"Instructions",RETURN_INSTRUCTION:"Retourne aux instructions ",PRIVACY_STATEMENT_HELP:"fr_View Privacy Notice Statement",PRIVACY_NOTICE_STATEMENT:"Énoncé de confidentialité",SECURITY_DISCLAIMER:"Avis de non-responsabilité concernant la sécurité",PRIVACY_STATEMENT:"En soumettant vos renseignements personnels, vous consentez à sa collecte, à son utilisation et à sa divulgation conformément à l'énoncé de confidentialité.",FOOTNOTE_INSTRUCTION:"Instructions pour compléter les sections du formulaire",SECTION_IS_NOT_VISIBLE:"[ Cette section peut ne pas être visible. ]",FAX_NOT_AVAILABLE:" (Si pas disponible, utilisez 0000000000)",NOT_APPLICABLE:"fr_Not applicable",D21:"Biologique",D22:"Pharmaceutique",D24:"fr_Veterinary",D26:"fr_Clinical Trial",BROWSER:"Navigateur",TABLE_EXPANDED_STATE:"État ouvert",PROTECTED_B:'Protégé "B" une fois rempli'}),$translateProvider.translations("en",{MSG_ERR_MAND:"This field is required",MSG_ERR_EMAIL_FORMAT:"Please enter a valid email.",MSG_ERR_ROLE:"This field is required",MSG_ERR_DISITYPE:"Please select at least one disinfectant type",MSG_ERR_ADDRESS:"Please select at least one address",MSG_ERR_CONTACT_NUM:"All the roles have to be used for the contacts",MSG_ERR_PHONE_FORMAT:"The format is not valid",MSG_ERR_FAX_FORMAT:"The format is not valid",MSG_ERR_ALLROLE:"The roles of manufacturer, mailing, billing, and primary REP contact  have not all been selected among the list of contacts",MSG_ERR_ADDRESSSROLE:"The roles of manufacturer, mailing, and billing have not all been selected among the list of addresses",MSG_ERR_POSTAL:"Please specify a valid postal code.",MSG_ERR_ZIP:"Please specify a valid zip code.",MSG_ERR_DATE_FORMAT:"Please enter a valid date.",MANUFACT_SEL:"Role already Selected",MAIL_SEL:"Role already Selected",BILLING_SEL:"Role already Selected",IMPORTER_SEL:"Role already Selected",REPPRIM_SEL:"Role already Selected",REPALT_SEL:"Role already Selected",MSG_LENGTH_MIN5:"Less than minimum length",MSG_LENGTH_6:"Less than minimum length.",MSG_LENGTH_6NUM:"Less than minimum length.",MSG_LENGTH_8NUM:"Less than minimum length.",MSG_LENGTH_7:"Less than minimum length.",MSG_LENGTH_7NUM:"Less than minimum length.",ONE_REP:"At least one contact is required.",MSG_ERR_NOTIF_SEL:"Please select at least one notifiable change.",MSG_ERR_MIN_POS:"Must be a positive number",MSG_ERR_MAX:"Exceeds the maximum",MSG_FORMAT_CHAR_6DIGITS:"ID should be a letter plus 6 digits.",MSG_ERR_DUPLICATED_SYSTEM:"Duplicated System.",MSG_FORMAT_ALPHA_NUMBERIC:"Alpha numeric",MSG_ERR_INVALID_END_DATE:"End Date should not be earlier than Start Date."}),$translateProvider.translations("fr",{MSG_ERR_MAND:"Ce champ est obligatoire.",MSG_ERR_ROLE:"fr_Please select at least one role",MSG_ERR_DISITYPE:"Veuillez sélectionner au moins un type de désinfectant",MSG_ERR_ADDRESS:"fr_Please select at least one address",MSG_ERR_EMAIL_FORMAT:"Veuillez fournir une courriel valide.",MSG_ERR_CONTACT_NUM:"fr_All the roles have to be used for the company contacts",MSG_ERR_PHONE_FORMAT:"Veuillez fournir un numéro de téléphone valide.",MSG_ERR_FAX_FORMAT:"Veuillez fournir un numéro de télécopieur valide.",MSG_ERR_ALLROLE:"fr_Across the contact records, the roles of manufacturer, mailing, billing, and REP primary contact must be selected",MSG_ERR_ADDRESSSROLE:"fr_The roles of manufacturer, mailing, and billing have not all been selected among the list of addresses",MSG_ERR_POSTAL:"Veuillez fournir un code postal valide.",MSG_ERR_ZIP:"Veuillez fournir un code postal valide.",MSG_ERR_DATE_FORMAT:"Veuillez fournir une une date valide.",MANUFACT_SEL:"Rôle déjà sélectionné",MAIL_SEL:"Rôle déjà sélectionné",BILLING_SEL:"Rôle déjà sélectionné",IMPORTER_SEL:"fr_Importer Role already Selected",REPPRIM_SEL:"Rôle déjà sélectionné",REPALT_SEL:"Rôle déjà sélectionné",MSG_LENGTH_MIN5:"Veuillez fournir 5 chiffres.",MSG_LENGTH_6:"Veuillez fournir au moins 6 caractères.",MSG_LENGTH_6NUM:"Veuillez fournir 6 chiffres.",MSG_LENGTH_8NUM:"Veuillez fournir 8 chiffres.",MSG_LENGTH_7:"Veuillez fournir 7 caractères.",MSG_LENGTH_7NUM:"Veuillez fournir  7 chiffres.",ONE_REP:"Au moins un contact est requis",MSG_ERR_NOTIF_SEL:"Sélectionnez au moins un changement de déclaration",MSG_ERR_MIN_POS:"Doit être un nombre positif",MSG_ERR_MAX:"Dépasse le maximum.",MSG_FORMAT_CHAR_6DIGITS:"fr_ID should be a letter plus 6 digits.",MSG_ERR_DUPLICATED_SYSTEM:"fr_Duplicated System.",MSG_FORMAT_ALPHA_NUMBERIC:"Alphanumérique seulement",MSG_ERR_INVALID_END_DATE:"La date de fin ne doit pas être antérieure à la date de début"}),$translateProvider.translations("en",{ADD_TRANSACTION:"New Record",SEQUENCE_NUM:"Sequence Number",NEW:"NEW",EXISTING:"EXISTING",DATE_SUBMITTED:"Date Submitted (YYYY-MM-DD)",SEQUENCE_DESCRIPT:"Regulatory Transaction Description",IS_ACTCHANGES:"Same as Regulatory Activity Contact for this Submission?",COMPANY_ID:"Company ID",DOSSIER_ID:"Dossier ID",DOSSIER_NAME:"Dossier Name",IS_ECTD:"Is this an eCTD transaction?",IS_SOLICITED:"Is this solicited information?",SOLICITED_RQ:"Requester of Solicited Information",SOLICITED_RQ_OTHER:"Other Requester Details",REP_CONTACT_INFO:"Main Contact Information",PROJ_MANAGER_NAME:"Name of Regulatory Project Manager, if known",DATED:"Dated (YYYY-MM-DD)",START_DATE:"Start Date (YYYY-MM-DD)",END_DATE:"End Date (YYYY-MM-DD)",REG_ACTIVITY:"Regulatory Activity",REG_ACTIVITY_TYPE:"Regulatory Activity Type",SEQUENCE_TYPE:"Regulatory Transaction Description",VERSION_NO:"Version Number",BRIEF_DESC:"Brief Description",BRIEF_DESC_CHANGE:"Brief Description of change",ADMINISTRATIVE:"Administrative",BENEFIT_RISK_ASSESS:"Benefit Risk Assessment",CANCEL_LETTER:"Cancellation Letter",CHANGE_TO_DIN:"Change to DIN",COMMENTS_NOC:"Comments on Notice of Decision",COMMENTS_SUMMARY_BASIS:"Comments on Summary Basis of Decision (SBD)",COMMENTS_REGULARTORY_DECISION:"Comments on Regulatory Decision Summary",DIN_DISCONTINUED:"Notification of Discontinued Sale (DIN Cancellation)",DRUG_NOTIF_FORM:"Drug Notification Form",FOR_PERIOD:"For Period of",INITIAL:"INITIAL",MEETING_MINUTES:"Minutes of Meeting",NOTIFICATION_CHANGE:"Notification of Change in Benefit-Risk Profile",NOTIFICATION_INTERRUPT_SALE:"Notification Interruption of Sale",PANDEMIC_APPL:"Pandemic Application",POST_CLEARANCE_DATA:"Post Clearance Data",POST_MARKET_SURV:"Post Marketing Surveillance",POST_NOC_CHANGE:"Post NOC Change",POST_AUTH_DIV1_CHANGE:"Post-Authorization Division 1 Change",PRESUB_MEETING_PKG:"Submission Meeting Package",PRESUB_MEETING_RQ:"Submission Meeting Request",PRIORITY_REVIEW_RQ:"Priority Review Request",PRISTINE_PM:"Pristine PM",SECOND_LANG_PM:"Second Language PM",PRISTINE_PM_2LANG:"Second Language PM and Final Package Insert",ADVISEMENT_LETTER_RESPONSE:"Response to Advisement Letter",CLIN_CLARIF_RESPONSE:"Response to Clinical Clarification Request",EMAIL_RQ_RESPONSE:"Response to E-mail Request",HSC_RQ_RESPONSE:"Response to Human Safety Clarification Request",QHSC_RQ_RESPONSE:"Response to Quality & Human Safety Clarification Request",CHSC_RQ_RESPONSE:"Response to Clinical & Human Safety Clarification Request",QCHSC_RQ_RESPONSE:"Response to Quality, Clinical and Human Safety Clarification Request",LABEL_CLARIF_RESPONSE:"Response to Labeling Clarification Request",MHPD_RQ_RESPONSE:"Response to MHPD Request",NOC_RESPONSE:"Response to NOC/c-QN",NOD_RESPONSE:"Response to NOD",NON_RESPONSE:"Response to NON",NOL_RESPONSE:"Response to NOL",PROCESSING_CLARIF_RESPONSE:"Response to Processing Clarification Request",QUAL_CLIN_CLARIF_RESPONSE:"Response to Quality and Clinical Clarification Request",QUAL_CLARIF_RESPONSE:"Response to Quality Clarification Request",SCREENING_ACCEPT_RESPONSE:"Response to Screening Acceptance Letter",SCREENING_CLARIF_RESPONSE:"Response to Screening Clarification Request",SDN_RESPONSE:"Response to SDN",PHONE_RQ_RESPONSE:"Response to Telephone Request",RISK_COMMUN_DOC:"Risk Communication Document",RMP_VERSION_DATE:"RMP",SIGNAL_WORK_UP:"Signal Work Up",UNSOLICITED_DATA:"Unsolicited Information",YEAR_LIST_OF_CHANGE:"Year(s) of change, list of change number(s) ",NONCLIN_CLARIF_RESPONSE:"Response to Non-clinical Clarification Request ",BE_CLARIF_RESPONSE:"Response to BE Clarification Request",RECON_DECIS_LTR_INTENT:"Reconsideration of Decision - Letter of Intent",RECON_DECIS_RQ_RECON:"Reconsideration of Decision - Request for Reconsideration",RECON_DECIS_OTHER_INFO:"Reconsideration of Decision - Other Information",LABEL_PREAPPROVAL_2LANG:"Second Language Label - Pre-Approval",LIFECYCLE_TITLE:"Transaction Details",REG_CONTACT_THIS:"Regulatory Activity Contact for THIS transaction",REG_ACT_CONTACT:"Regulatory Activity Contact",TRANSACTION_HDING:"Regulatory Information",LOAD_TRANSACTION:"Load a Regulatory Transaction File",COMPANY_INFO:"A. Company Information",ADDRESS_INFO:"B. Address Information",COMPANY_REP_THIS:"C. Company Representative",GENERATE_FINAL:"Generate Final XML",CONFIRM_CONTACT_VALID:"I confirm that the above regulatory activity contact information is valid.",YEAR_CHANGE:"Year(s) of change, list of change number(s)",YEARS:"Year",REG_ACTIVITY_INSTRUCT:"Regulatory Activity Contact Instructions",SAVE_INSTRUCT:"Transaction File Save Instructions",CLARIF_RESPONSE:"Response to Clarification Request",CORR_PATENT_MED:"Correspondence - Patented Medicines",ALLEGATION_NOTICE:"Notice of Allegation",FORM_IV:"Form IV",FORM_V:"Form V",CONSENT_LTR:"Consent Letter",DATA_PROTECT_CORRESP:"Correspondence - Data Protection",CHOOSE_REQUEST:"Choose a requester",TRANSACT_INSTRUCT:"Regulatory Transaction Instructions",LIST_DESCRIPT:"List Description",SEQUENCE_CLEANUP:"eCTD Dossier Clean-up",ADV_COMP_REQ:"Advertising Complaint Request for Information",CSOtRMP:"Canadian Specific Opioid RMP",DISSEM_LIST:"Dissemination List",FOREIGN_SAFETY_NOTIFICATION:"Foreign Safety Action Notification",ISSUE_SAFETY_REQUEST:"Issue Related Safety Request",PATIENT_SAFETY_INFO:"Patient Safety Information (Medication error)",PUB_RELEASE_INFO:"Public Release of Clinical Information",RESSESS_ORDER:"Reassessment Order",WRITTEN_CONSULT_REQ:"Request for Written Consultation",TEST_STUDIES_ORDER:"Test and Studies Order",TERM_COND_COMM:"Terms and Conditions Commitment",YEAR:"Year",CTN_ADMINISTRATIVE:"CTN-Administrative Change to",CTN_APPENDIX:"CTN-Appendix",CTN_CONTACT:"CTN-Contact Change",CTN_CROSS:"CTN-Cross Reference Letter",CTN_DATA:"CTN-Data Safety Monitoring Committee",CTN_DEAR:"CTN-Dear Investigator/Doctor Letter",CTN_DILUENT:"CTN-Diluent Change",CTN_DRUG_PROD:"CTN-Drug Product Change",CTN_DRUG_SUBS:"CTN-Drug Substance change",CTN_ENROLLMENT:"CTN-Enrollment Suspension",CTN_ETHICS:"CTN-Ethics Board Communications",CTN_EXCLUSION_INCLUSION:"CTN-Exclusion/Inclusion Criteria Revision",CTN_INFORMED:"CTN-Informed Consent Form Update",CTN_INVESTIGATOR:"CTN-Investigator’s Brochure Update",CTN_NEW_MANUFACTURING:"CTN-New Manufacturing Site for",CTN_NEW_PKG:"CTN-New Packaging/Labelling Site",CTN_NEW_QC:"CTN-New QC Testing Site",CTN_NOL:"CTN-NOL Response",CTN_PACKAGING_LABELLING:"CTN-Packaging/Labelling Name Change",CTN_PM:"CTN-PM Update",CTN_PROTOCOL_INFO_UPDATE:"CTN-Protocol and Informed Consent Form Update",CTN_PROTOCOL_UPDATE:"CTN-Protocol Update/Change",CTN_QOS:"CTN-QOS Update",CTN_REFUSALS:"CTN-Refusals by Foreign Regulatory Authorities/REBs",CTN_REGULATORY:"CTN-Regulatory Hold",CTN_RESPONSE:"CTN-Response to Information Request",CTN_SAFETY:"CTN-Safety Update",CTN_SHELF_PD:"CTN-Shelf Life Extension for DP",CTN_SHELF_DS:"CTN-Shelf Life Extension for DS",CTN_SITE:"CTN-Site Closure",CTN_SOURCE:"CTN-Source Change of",CTN_STRAIN:"CTN-Strain Change",CTN_STUDY_COMPLETION:"CTN-Study Completion",CTN_STUDY_DISC:"CTN-Study Discontinuation due to",CTN_STUDY_EXT:"CTN-Study Recruitment Timeline Extension",CTN_STUDY_SUS:"CTN-Study Suspension",CTN_TRANS_OWN:"CTN-Transfer of Ownership",CTN_FORM_BROC_UPDATES:"CTN-Informed Consent Form and Investigator’s Brochure Updates",CTN_IMPD_UPDATE:"CTN-IMPD Update",CTN_NEW_SUMM_ADF:"CTN-New Summary of Additional Drugs Form",CLINICAL:"CLINICAL",CLINICAL_QUALITY:"CLINICAL & QUALITY",QUALITY:"QUALITY",INITIAL_TEAT_SOLU_MONO:"INITIAL - Teat Solutions Monograph",REQ_ACCEPTED:"Request Accepted",REQUESTER_NAME:"Name of requester",REQUESTER_NAME2:"Name of requester",DEFER_FEES:" A deferral of payment is requested with this transaction.",DEFER_STATEMENT:"The statement supporting the deferral request is included.",FEE_REMISSION:"Fee Remission is requested with this transaction",STATEMENT_REVENUE:"A statement signed by the individual responsible for the applicant's financial affairs is included to certify that the fee payable is greater than 10% of the anticipated gross revenue",SUB_CLASS:"Submission Class",FEE_AMOUNT:"Fees",FEE_DESCRIPTION:"Submission Description",REMISSION_ELIGIBLE:"You are eligible to apply for fee remission. The submission fee is greater than 10% of anticipated gross revenues.",REMISSION_INELIGIBLE:"You are not eligible to apply for fee remission. The submission fee is less than 10% of anticipated gross revenues.",IS_FEE_TRANSACTION:"Are new or revised fees associated with this transaction?",REGULATORY_FEES:"Fees",GROSS_REVENUE:"Anticipated gross revenue for this drug product during the fee verification period",TEN_PERCENT_REVENUE:"10% of anticipated gross revenue",REQUIRED_DOC:"Required Documentation",SUPPORTING_DOC:"Please include the required signed statement AND at least one of the support documentation to establish that the applicable fee payable is greater than 10% of the anticipated gross revenue from sales of the drug product in Canada during the fee verification period.",EST_MARKET_SHARE:"Estimated market share (that is [i.e.], product's market potential compared to the total market for similar products in Canada)",SIMILAR_PRODUCT:"Comparison to similar products on the Canadian market or other similar markets (e.g., United States, European Union)",SALES_HISTORY:"Sales history prior to product upgrades or sales history of similar products",MARKETING_PLAN:"Marketing plan/product plan for the drug product",AVG_SALES:"Average sale price and demand",FEES_LESS10K:"Fees of $10,000 or less must be paid at the time of filing of the submission, supplement or application. Please complete the",ADVANCE_PAYMENT:"Advance Payment Details for Drug Submissions and Master Files.",SPONSOR_INVOICE:"Review fees must not be included with the submission, supplement or application. Sponsors will be invoiced for fees of more than $10,000.",PAYMENT_METHODS:"Please select all the payment methods you intend to use",ONE_PAYMENT_METHOD:"Please select all the payment methods you intend to use",ONE_FEE_DOC:"At least one of the support documentation to establish that the applicable fee payable is greater than 10% of the anticipated gross revenue from sales of the drug product in Canada during the fee verification period",DEFER_INSTRUCT:"Deferral of Payment Instructions",REMISSION_INSTRUCT:"Fee Remission Instructions",CLASS_INSTRUCT:"Submission Class Instructions",PRODUCT_INSTRUCT:"Product Name Instructions",LIFECYCLE_INSTRUCT:"Lifecycle Management Table Instructions",SEQUENCE_INSTRUCT:"Sequence Number Instructions",CONTROL_INSTRUCT:"Control Number Instructions",COMPANY_INSTRUCT:"Company Name Instructions",COMPANY_ID_INSTRUCT:"Company ID Instructions",DOSSIER_ID_INSTRUCT:"Dossier ID Instructions",ADMIN_COMP_INSTRUCT:"Administrative Submission or Component Instructions",PLEASE_REMIT:"Please pay the remission processing fee of $590 using the Advance Payment Details for Drug Submissions and Master Files.",APPLY_DEFER:"You are applying for a deferral. Please send no payment with this form.",BANK_DRAFT:"International Bank Draft",MONEY_ORDER:"Money Order",CHEQUE:"Cheque",PAYMENT:"Payment",CREDIT:"MasterCard/Visa/American Express (AMEX)",BANK_WIRE:"Wire (include bank confirmation)",EXISTING_CREDIT:"Existing credit",PREFEERED_OPTION:"Bill Payment Service Option (preferred method)",REG_TRANSACT:"Regulatory Transaction",LIFE_REC:"Transaction Details Record",
ONELIFEREC:"One transaction details record is required.",SAVELIFEREC:"One transaction details record is required to save.","LIFECYCLECTRL.LIFECYCLEDETAILSFORM":"with a Transaction Details Record",IS_NEW_ACTIVITY:"Is this transaction for a new or existing regulatory activity?",IS_SIGNED_3RD_PARTY:"Will the submission be signed / filed by a third party on behalf of the manufacturer / sponsor?",AUT_LETTER_NOTE:"A letter of authorization signed by the manufacturer/sponsor company must be provided in section 1.2.1 of the regulatory transaction.",IS_PRIORITY:"Was this regulatory activity approved for priority review?",IS_NOC:"Was this regulatory activity approved for NOC/C review?",IS_ADMIN_SUBMISSION:"Is this regulatory activity an Administrative Submission or does this regulatory activity contain an administrative component?",ADMIN_DESCRIPT:"Administrative Submission or administrative component description",ADMIN_SUB_TYPE:"Reason for Administrative Submission or administrative component",ACTIVITY_LEAD:"Regulatory Activity Lead",OTHER_DOC_DETAILS:"Other Documentation Details","B14-20160301-09":"Pharmaceutical","B14-20160301-02":"Biological","B14-20160301-10":"Post-Market Vigilance","B14-20160301-06":"Consumer Health Product","B14-20160301-11":"Veterinary","B14-20160301-04":"Clinical Trial - Biologics","B14-20160301-05":"Clinical Trial - Pharmaceutical",RESET:"RESET",RESET_INFO:"To enable the 'generate final XML' button, select the 'RESET' button to clear transaction specific fields.",FEE_REMIT_NO_PAYMENT:"Please remit no payment with this transaction. Payment of the fees will be required upon issuance of an invoice",MITIGATION_TYPE:"The following mitigation measures are available (select one). Sponsors must certify that they meet the criteria as outlined in the Food and Drug Regulations.",CERTIFY_ORGANIZATION:"We certify that our organization, including its affiliates, has",CERTIFY_ORGANIZATION_A:"a) a total number of employees less than 100 people, or",CERTIFY_ORGANIZATION_B:"b) a total annual gross revenue between $30,000 and $5 million.",SMALL_BUSINESS_FEE_APPLICATION:"We have completed the Small Business Fee Mitigation Application and attached it with our submission/application.",FIRST_SUBMISSION:"This is my first submission/application",CERTIFY_GOVERMENT_ORGANIZATION:"We certify that our organization is a branch or agency of the Government of Canada or of a province or territory",CERTIFY_URGENT_HEALTH_NEED:"We certify that the drug in our submission/application is on the List of Drugs for an Urgent Public Health Need as per the Access to Drugs in Exceptional Circumstances Regulations AND",DRUG_THE_SAME_INGREDIENT:"a) the drug has the same medicinal ingredient, strength and route of administration, and is in a comparable dosage form, as a drug that may be imported under subsection C.10.001(2) of those Regulations;",NO_DRUG_IDENTIFICATION_NUMBER:"b) no drug identification number has been assigned under section C.01.014.2 of those Regulations for the drug or for another drug that has the same medicinal ingredient, strength and route of administration and is in a comparable dosage form; and",NO_NOTICE_COMPLIANCE:"c) no notice of compliance has been issued under section C.08.004 of those Regulations in respect of the drug or another drug that has the same medicinal ingredient, strength and route of administration and is in a comparable dosage form.",CERTIFY_FUNDED_HEALTH_INSTITUTION:"We certify that our institution is funded by the Government of Canada or the government of a province or territory and that it is",CERTIFY_FUNDED_HEALTH_INSTITUTION_A:"a) licensed, approved or designated by a province in accordance with the laws of the province to provide care or treatment to persons or animals suffering from any form of disease or illness; or",CERTIFY_FUNDED_HEALTH_INSTITUTION_B:"b) owned or operated by the Government of Canada or the government of a province and that provides health services.",TYPE_MIN:"End Date should not be earlier than Start Date.",PROD_PROTOCOL:"Protocol Number",CTA_FROM:"From [time]",CTA_TO:"To [time]"}),$translateProvider.translations("fr",{ADD_TRANSACTION:"Ajouter un enregistrement",SEQUENCE_NUM:"fr_Sequence Number",NEW:"Nouvelle",EXISTING:"Existant",DATE_SUBMITTED:"fr_Date Submitted (YYYY-MM-DD)",SEQUENCE_DESCRIPT:"fr_Regulatory Transaction Description",IS_ACTCHANGES:"fr_Same as Regulatory Activity Contact for this Submission?",COMPANY_ID:"ID d'entreprise",DOSSIER_ID:"ID de dossier",DOSSIER_NAME:"fr_Dossier Name",IS_ECTD:"fr_Is this an eCTD transaction?",IS_SOLICITED:"Cette information est-elle sollicitée?",SOLICITED_RQ:"Demandeur d’information sollicitée",SOLICITED_RQ_OTHER:"fr_Other Requester Details",REP_CONTACT_INFO:"fr_Main Contact Information",PROJ_MANAGER_NAME:"Responsable de projet réglementaire, si connu",DATED:"Daté",START_DATE:"Date de début",END_DATE:"Date de fin",REG_ACTIVITY:"fr_Regulatory Activity",REG_ACTIVITY_TYPE:"Type d'activité réglementaire",SEQUENCE_TYPE:"Description de transactions de réglementation",VERSION_NO:"Numéro de la version",BRIEF_DESC:"Brève description",BRIEF_DESC_CHANGE:"Brève description des modifications apportées",ADMINISTRATIVE:"Administrative",BENEFIT_RISK_ASSESS:"Benefit Risk Assessment",CANCEL_LETTER:"Cancellation Letter",CHANGE_TO_DIN:"Change to DIN",COMMENTS_NOC:"Comments on Notice of Decision",COMMENTS_SUMMARY_BASIS:"Comments on Summary Basis of Decision (SBD)",COMMENTS_REGULARTORY_DECISION:"Comments on Regulatory Decision Summary",DIN_DISCONTINUED:"Notification of Discontinued Sale (DIN Cancellation)",DRUG_NOTIF_FORM:"Drug Notification Form",FOR_PERIOD:"For Period of",INITIAL:"INITIAL",MEETING_MINUTES:"Minutes of Meeting",NOTIFICATION_CHANGE:"Notification of Change in Benefit-Risk Profile",NOTIFICATION_INTERRUPT_SALE:"Notification Interruption of Sale",PANDEMIC_APPL:"Pandemic Application",POST_CLEARANCE_DATA:"Post Clearance Data",POST_MARKET_SURV:"Post Marketing Surveillance",POST_NOC_CHANGE:"Post NOC Change",POST_AUTH_DIV1_CHANGE:"Post-Authorization Division 1 Change",PRESUB_MEETING_PKG:"Submission Meeting Package",PRESUB_MEETING_RQ:"Submission Meeting Request",PRIORITY_REVIEW_RQ:"Priority Review Request",PRISTINE_PM:"Pristine PM",SECOND_LANG_PM:"Second Language PM",PRISTINE_PM_2LANG:"Second Language PM and Final Package Insert",ADVISEMENT_LETTER_RESPONSE:"Response to Advisement Letter",CLIN_CLARIF_RESPONSE:"Response to Clinical Clarification Request",EMAIL_RQ_RESPONSE:"Response to E-mail Request",HSC_RQ_RESPONSE:"Response to Human Safety Clarification Request",QHSC_RQ_RESPONSE:"Response to Quality & Human Safety Clarification Request",CHSC_RQ_RESPONSE:"Response to Clinical & Human Safety Clarification Request",QCHSC_RQ_RESPONSE:"Response to Quality, Clinical and Human Safety Clarification Request",LABEL_CLARIF_RESPONSE:"Response to Labeling Clarification Request",MHPD_RQ_RESPONSE:"Response to MHPD Request",NOC_RESPONSE:"Response to NOC/c-QN",NOD_RESPONSE:"Response to NOD",NON_RESPONSE:"Response to NON",NOL_RESPONSE:"Response to NOL",PROCESSING_CLARIF_RESPONSE:"Response to Processing Clarification Request",QUAL_CLIN_CLARIF_RESPONSE:"Response to Quality and Clinical Clarification Request",QUAL_CLARIF_RESPONSE:"Response to Quality Clarification Request",SCREENING_ACCEPT_RESPONSE:"Response to Screening Acceptance Letter",SCREENING_CLARIF_RESPONSE:"Response to Screening Clarification Request",SDN_RESPONSE:"Response to SDN",PHONE_RQ_RESPONSE:"Response to Telephone Request",RISK_COMMUN_DOC:"Risk Communication Document",RMP_VERSION_DATE:"RMP",SIGNAL_WORK_UP:"Signal Work Up",UNSOLICITED_DATA:"Unsolicited Data",YEAR_LIST_OF_CHANGE:"Year(s), list of change number(s)",NONCLIN_CLARIF_RESPONSE:"Response to Non-clinical Clarification Request ",BE_CLARIF_RESPONSE:"Response to BE Clarification Request",RECON_DECIS_LTR_INTENT:"Reconsideration of Decision - Letter of Intent",RECON_DECIS_RQ_RECON:"Reconsideration of Decision - Request for Reconsideration",RECON_DECIS_OTHER_INFO:"Reconsideration of Decision - Other Information",LABEL_PREAPPROVAL_2LANG:"Second Language Label - Pre-Approval",LIFECYCLE_TITLE:"Détails de la transaction",REG_CONTACT_THIS:"Personne-ressource pour cette activité réglementaire",REG_ACT_CONTACT:"fr_Regulatory Activity Contact",TRANSACTION_HDING:"Information Réglementairen",LOAD_TRANSACTION:"Charger un fichier de transaction réglemetaire",COMPANY_INFO:"A. Information d'entreprise",ADDRESS_INFO:"B. Information d'adresse",COMPANY_REP_THIS:"C. Représentative de l'entrepise",GENERATE_FINAL:"Générer le XML final",CONFIRM_CONTACT_VALID:"Je confirme que l'information de la personne-ressource de l’activité réglementaire ci-dessus sont valides.",YEAR_CHANGE:"Année(s) de changement, liste du/des numéro(s) de changement",YEARS:"Année",CTN_ADMINISTRATIVE:"CTN-Administrative Change to",CTN_APPENDIX:"CTN-Appendix",CTN_CONTACT:"CTN-Contact Change",CTN_CROSS:"CTN-Cross Reference Letter",CTN_DATA:"CTN-Data Safety Monitoring Committee",CTN_DEAR:"CTN-Dear Investigator/Doctor Letter",CTN_DILUENT:"CTN-Diluent Change",CTN_DRUG_PROD:"CTN-Drug Product Change",CTN_DRUG_SUBS:"CTN-Drug Substance change",CTN_ENROLLMENT:"CTN-Enrollment Suspension",CTN_ETHICS:"CTN-Ethics Board Communications",CTN_EXCLUSION_INCLUSION:"CTN-Exclusion/Inclusion Criteria Revision",CTN_INFORMED:"CTN-Informed Consent Form Update",CTN_INVESTIGATOR:"CTN-Investigator’s Brochure Update",CTN_NEW_MANUFACTURING:"CTN-New Manufacturing Site for",CTN_NEW_PKG:"CTN-New Packaging/Labelling Site",CTN_NEW_QC:"CTN-New QC Testing Site",CTN_NOL:"CTN-NOL Response",CTN_PACKAGING_LABELLING:"CTN-Packaging/Labelling Name Change",CTN_PM:"CTN-PM Update",CTN_PROTOCOL_INFO_UPDATE:"CTN-Protocol and Informed Consent Form Update",CTN_PROTOCOL_UPDATE:"CTN-Protocol Update/Change",CTN_QOS:"CTN-QOS Update",CTN_REFUSALS:"CTN-Refusals by Foreign Regulatory Authorities/REBs",CTN_REGULATORY:"CTN-Regulatory Hold",CTN_RESPONSE:"CTN-Response to Information Request",CTN_SAFETY:"CTN-Safety Update",CTN_SHELF_PD:"CTN-Shelf Life Extension for DP",CTN_SHELF_DS:"CTN-Shelf Life Extension for DS",CTN_SITE:"CTN-Site Closure",CTN_SOURCE:"CTN-Source Change of",CTN_STRAIN:"CTN-Strain Change",CTN_STUDY_COMPLETION:"CTN-Study Completion",CTN_STUDY_DISC:"CTN-Study Discontinuation due to",CTN_STUDY_EXT:"CTN-Study Recruitment Timeline Extension",CTN_STUDY_SUS:"CTN-Study Suspension",CTN_TRANS_OWN:"CTN-Transfer of Ownership",CTN_FORM_BROC_UPDATES:"CTN-Informed Consent Form and Investigator’s Brochure Updates",CTN_IMPD_UPDATE:"CTN-IMPD Update",CTN_NEW_SUMM_ADF:"CTN-New Summary of Additional Drugs Form",CLINICAL:"CLINICAL",CLINICAL_QUALITY:"CLINICAL & QUALITY",QUALITY:"QUALITY",INITIAL_TEAT_SOLU_MONO:"INITIAL - Teat Solutions Monograph",REQ_ACCEPTED:"Request Accepted",REG_ACTIVITY_INSTRUCT:"Regulatory Activity Contact Instructions",SAVE_INSTRUCT:"Transaction File Save Instructions",CLARIF_RESPONSE:"Response to Clarification Request",CORR_PATENT_MED:"Correspondence - Patented Medicines",ALLEGATION_NOTICE:"Notice of Allegation",FORM_IV:"Form IV",FORM_V:"Form V",CONSENT_LTR:"Consent Letter",DATA_PROTECT_CORRESP:"Correspondence - Data Protection",CHOOSE_REQUEST:"Choose a requester",TRANSACT_INSTRUCT:"Regulatory Transaction Instructions",LIST_DESCRIPT:"List Description",SEQUENCE_CLEANUP:"eCTD Dossier Clean-up",ADV_COMP_REQ:"Advertising Complaint Request for Information",CSOtRMP:"Canadian Specific Opioid RMP",DISSEM_LIST:"Dissemination List",FOREIGN_SAFETY_NOTIFICATION:"Foreign Safety Action Notification",ISSUE_SAFETY_REQUEST:"Issue Related Safety Request",PATIENT_SAFETY_INFO:"Patient Safety Information (Medication error)",PUB_RELEASE_INFO:"Public Release of Clinical Information",RESSESS_ORDER:"Reassessment Order",WRITTEN_CONSULT_REQ:"Request for Written Consultation",TEST_STUDIES_ORDER:"Test and Studies Order",TERM_COND_COMM:"Terms and Conditions Commitment",YEAR:"Year",REQUESTER_NAME:"Nom du demandeur",REQUESTER_NAME2:"Nom du demandeur",DEFER_FEES:" Un paiement différé est demandé avec cette transaction",DEFER_STATEMENT:"La déclaration à l’appui de la demande de report de paiement est inclus.",FEE_REMISSION:"Une remise de frais est demandé avec cette transaction",STATEMENT_REVENUE:"Une déclaration signée par le responsable des affaires financières du demandeur est inclus pour attester que les frais payables sont plus élevés que 10% des revenus bruts anticipés.",SUB_CLASS:"Catégorie de la présentation",FEE_AMOUNT:"Frais",FEE_DESCRIPTION:"Description de la présentation",REMISSION_ELIGIBLE:"Vous êtes admissible à présenter une demande de remise des frais. Les frais de soumission sont supérieurs à 10 % des recettes brutes prévues.",REMISSION_INELIGIBLE:"Vous n’êtes pas admissible à une remise des frais. Les frais de soumission sont inférieurs à 10 % des recettes brutes prévues.",IS_FEE_TRANSACTION:"Est-ce que des frais nouveaux ou révisés sont-ils associés à cette transaction?",REGULATORY_FEES:"Frais",GROSS_REVENUE:"Les recettes brutes prévues pour ce médicament pour la période de vérification des frais payer",TEN_PERCENT_REVENUE:"10% des recettes brutes prévues",REQUIRED_DOC:"Documents nécéssaire",SUPPORTING_DOC:"Veuillez inclure la déclaration exigée signée ET au moins un des documents de soutien pour l’établissement des frais applicables supérieurs à 10 % des revenus bruts prévus pour les ventes du produit au Canada au cours de la période de vérification.",EST_MARKET_SHARE:"La part estimée du marché (c’est-à-dire le potentiel de marché du produit par rapport à la demande totale du marché pour des produits similaires au Canada)",SIMILAR_PRODUCT:"Une comparaison avec des produits similaires offerts sur le marché canadien ou d’autres marchés similaires (par exemple États-Unis, Union européenne, etc.)",SALES_HISTORY:"Un historique des ventes avant l’amélioration du produit ou un historique des ventes de produits similaires",MARKETING_PLAN:"Un plan de marketing ou un plan de produit pour le produit pharmaceutique",AVG_SALES:"Le prix de vente moyen et la demande",FEES_LESS10K:"Des frais de 10 000 $ ou moins doivent être soumis au moment du dépôt de la présentation, le supplément ou la demande. S’il vous plaît remplir le formulaire Détails du paiement en avance pour présentations de drogues et fiches maîtresses.",ADVANCE_PAYMENT:"Détails du paiement pour les présentations de drogue et les fiches maîtresses.",SPONSOR_INVOICE:"Les frais d’examen ne doivent pas être inclus dans la présentation, le supplément à une présentation ou la demande de drogue. Les factures de plus de 10 000 $ seront envoyées aux promoteurs.",PAYMENT_METHODS:"Veuillez sélectionner tous les modes de paiement que vous avez l’intention d’utiliser.",ONE_PAYMENT_METHOD:"Veuillez sélectionner tous les modes de paiement que vous avez l’intention d’utiliser.",ONE_FEE_DOC:"Au moins un des documents de soutien établissant que les frais applicables, supérieurs à 10 % des revenus bruts, sont prévus de la vente du produit au Canada au cours de la période de vérification.",DEFER_INSTRUCT:"fr_Deferral of payment Instructions",REMISSION_INSTRUCT:"fr_Fee remission Instructions",CLASS_INSTRUCT:"fr_Submission Class Instructions",PRODUCT_INSTRUCT:"fr_Product Name Instructions",LIFECYCLE_INSTRUCT:"fr_Lifecycle Management Table Instructions",SEQUENCE_INSTRUCT:"fr_Sequence Number Instructions",CONTROL_INSTRUCT:"fr_Control Number Instructions",COMPANY_INSTRUCT:"fr_Company Name Instructions",COMPANY_ID_INSTRUCT:"fr_Company ID Instructions",DOSSIER_ID_INSTRUCT:"fr_Dossier ID Instructions",ADMIN_COMP_INSTRUCT:"fr_Administrative Submission or Component Instructions",PLEASE_REMIT:"Veuillez payer les frais de traitement de la remise de 590$ en utilisant les détails du paiement en avance pour présentations de drogues et fiches maîtresses.",APPLY_DEFER:"Vous demandez le report du paiement. Veuillez envoyer le présent formulaire sans aucun paiement.",BANK_DRAFT:"Traite bancaire internationale",MONEY_ORDER:"Mandat",CHEQUE:"Chèque",PAYMENT:"Paiement",CREDIT:"MasterCard/Visa/American Express (AMEX)",BANK_WIRE:"Transfert bancaire (incluez la confirmation de la banque)",EXISTING_CREDIT:"Paiement au moyen d’un crédit existant",PREFEERED_OPTION:"Option de service de paiement de factures (méthode préférée)",REG_TRANSACT:"fr_Regulatory Transaction",LIFE_REC:"Détails de l'enregistrement du transaction",ONELIFEREC:"fr_One transaction details record is required.",SAVELIFEREC:"Un enregistrement des détails de la transaction est nécessaire pour enregistrer.","LIFECYCLECTRL.LIFECYCLEDETAILSFORM":"avec un ou plus des champs dans la section Détails de la transaction",IS_NEW_ACTIVITY:"fr_Is this transaction for a new or existing regulatory activity?",IS_SIGNED_3RD_PARTY:"La présentation sera-t-elle signée ou déposée par un tiers au nom du fabricant ou du promoteur?",AUT_LETTER_NOTE:"Une lettre d’autorisation signée par le fabricant ou le promoteur doit être fournie à la section 1.2.1 de la transaction réglementaire.",IS_PRIORITY:"Cette activité de réglementation a-t-elle été approuvée aux fins d’examen prioritaire?",IS_NOC:"Cette activité de réglementation a-t-elle été approuvée aux fins d’examen AC-C? ",IS_ADMIN_SUBMISSION:"Cette activité de réglementation est-elle une présentation administrative ou comprend-t-elle une composante administrative?",ADMIN_DESCRIPT:"Description de la présentation administrative ou de la composante administrative",ADMIN_SUB_TYPE:"Raison justifiant la présentation administrative ou la composante administrative",ACTIVITY_LEAD:"Responsable de l’activité réglementaire",OTHER_DOC_DETAILS:"Autres Détails de la Documentation","B14-20160301-09":"Pharmaceutique","B14-20160301-02":"Biologique","B14-20160301-10":"Vigilance après la commercialisation","B14-20160301-06":"Produit de santé destinés aux consommateurs","B14-20160301-11":"fr_Veterinary","B14-20160301-04":"fr_Clinical Trial - Biologics","B14-20160301-05":"fr_Clinical Trial - Pharmaceutical",RESET:"Réinitialiser",RESET_INFO:"Si vous souhaitez activer le bouton « Générer le XML final », cliquez sur le bouton « Réinitialiser » pour effacer les renseignements spécifiques à la transaction.",FEE_REMIT_NO_PAYMENT:"fr_Please remit no payment with this transaction. Payment of the fees will be required upon issuance of an invoice",MITIGATION_TYPE:"fr_The following mitigation measures are available (select one). Sponsors must certify that they meet the criteria as outlined in the Food and Drug Regulations.",CERTIFY_ORGANIZATION:"fr_We certify that our organization, including its affiliates, has",CERTIFY_ORGANIZATION_A:"fr_a) a total number of employees less than 100 people, or",CERTIFY_ORGANIZATION_B:"fr_b) a total annual gross revenue between $30,000 and $5 million.",SMALL_BUSINESS_FEE_APPLICATION:"fr_We have completed the Small Business Fee Mitigation Application and attached it with our submission/application.",FIRST_SUBMISSION:"fr_This is my first submission/application",CERTIFY_GOVERMENT_ORGANIZATION:"fr_We certify that our organization is a branch or agency of the Government of Canada or of a province or territory",CERTIFY_URGENT_HEALTH_NEED:"fr_We certify that the drug in our submission/application is on the List of Drugs for an Urgent Public Health Need as per the Access to Drugs in Exceptional Circumstances Regulations AND",DRUG_THE_SAME_INGREDIENT:"fr_a) the drug has the same medicinal ingredient, strength and route of administration, and is in a comparable dosage form, as a drug that may be imported under subsection C.10.001(2) of those Regulations;",NO_DRUG_IDENTIFICATION_NUMBER:"fr_b) no drug identification number has been assigned under section C.01.014.2 of those Regulations for the drug or for another drug that has the same medicinal ingredient, strength and route of administration and is in a comparable dosage form; and",NO_NOTICE_COMPLIANCE:"fr_c) no notice of compliance has been issued under section C.08.004 of those Regulations in respect of the drug or another drug that has the same medicinal ingredient, strength and route of administration and is in a comparable dosage form.",CERTIFY_FUNDED_HEALTH_INSTITUTION:"fr_We certify that our institution is funded by the Government of Canada or the government of a province or territory and that it is",CERTIFY_FUNDED_HEALTH_INSTITUTION_A:"fr_a) licensed, approved or designated by a province in accordance with the laws of the province to provide care or treatment to persons or animals suffering from any form of disease or illness; or",CERTIFY_FUNDED_HEALTH_INSTITUTION_B:"fr_b) owned or operated by the Government of Canada or the government of a province and that provides health services.",TYPE_MIN:"La date de fin ne doit pas être antérieure à la date de début.",PROD_PROTOCOL:"fr_Protocol Number",CTA_FROM:"fr_From [time]",CTA_TO:"fr_To [time]"}),$translateProvider.translations("en",{ING_NAME:"Ingredient Name",N_ING_NAME:"Ingredient Name",ING_ROLE:"Role",CAS_NUM:"Chemical Abstract Services(CAS)",CAS_FULL:"Chemical Abstract Services Number",STANDARD:"Standard",STRENGTH:"Strength",OPERATOR:"Operator",VALUE:"Value",EQUALS:"Equals",NOT_GREAT_THAN:"Not More Than",NOT_LESS_THAN:"Not Less Than",RANGE_LOWER_LIMIT:"Lower Limit",RANGE_UPPER_LIMIT:"Upper Limit",STRENGTH_OPERATOR:"Strength - Operator",STRENGTH_VALUE:"Strength - Value",STRENGTH_RANGE_LOWER_LIMIT:"Strength - Value (lower limit)",STRENGTH_DATA2:"Strength - Value (upper limit)",UNITS:"Units",UNIT:"Unit",UNIT_PRESENTATION:"Unit of Presentation",UNIT_MEASURE:"Unit of Measure",OTHER_UNIT_PRESENTATION:"Other Details",OTHER_UNIT_MEASURE:"Other Details",PER_STRENGTH:"Per",PER_VALUE:"Per - Value",ISBASE:"Calculated as Base?",CAB_YES1:"Yes, my ingredient is supplied as a salt, but calculated as a base",CAB_YES2:"Yes, my ingredient is supplied as a base, and calculated as a base",CAB_NO:"No, my ingredient is supplied as a salt, and calculated as a salt",CAB_NO2:"No, my product is a biologic",IS_NANO_MATERIAL:"Is this a nanomaterial?",NANO_MATERIAL:"Nanomaterial",NANO_MATERIAL_OTHER:"Indicate the type of nanomaterial",ANIMAL_HUMAN_SOURCED:"Animal or Human Sourced?",INGREDIENT_LIST:"Ingredient List",ROLE:"Role",INGREDIENT:"Ingredient",INGREDIENTS:"Ingredients",MED:"Medicinal Ingredient",NONMED:"Non-Medicinal Ingredient",VARIANT_NAME:"Formulation Variant Name (if applicable)",PURPOSE:"Purpose",CONTAINER_TYPE:"Container Type",PACKAGE_SIZE:"Package Size",MATERIAL_NAME:"Material Name",PRESENT_IN_FINAL:"Present in final Container",INGRED_DETAILS:"Ingredient Details",MEDICINAL_INGRED_DETAILS:"Medicinal (Active) Ingredient Details",NONMEDICINAL_INGRED_DETAILS:"Non-Medicinal Ingredient Details",CONTAINER_TYPE_DETAILS:"Container Type",MATERIAL_DETAILS:"Animal and / or Human Sourced Materials Details",CALCULATED_AS_BASE:"Calculated as Base?",SHELF_LIFE_NUMBERS:"Value",MIN_TEMP:"Minimum, Celsius",MAX_TEMP:"Maximum, Celsius",TEMP_RANGE:"Temperature Range",SHELF_LIFE:"Shelf Life",OTHER_SHELF_LIFE_CONSIDER:"Other Shelf Life Considerations",IN_FINAL_CONTAINER:"Present in Final Container?",OTHER_ROA_DETAILS:"Other Route of Administration",ROA_LBL:"Route of Administration",ROA_ABREV:"ROA",FORMULATION:"Formulation",FORMULATIONS:"Formulations",FORMULATION_DETAILS:"Formulation",FORMULATION_NAME:"Formulation Name",FORM_ID:"ID",ANIMAL_CTRY_ORIGIN:"Country of Origin of the Animals",ADD_ROA:"Add Route of Administration",MEDICINAL_INGRED:"A. Medicinal (Active) Ingredients",NONMEDICINAL_INGRED:"B. Non-Medicinal Ingredients",IS_ANIMAL_HUMAN_MATERIAL:"Was Animal and/or Human Sourced Material (other than the ingredient listed in the formulation above) used at any stage in the manufacturing of the drug?",CONTAINER_TYPES:"Container Types, Package Size and Shelf Life",ANIMAL_HUMAN_HDING:"Animal and / or Human Sourced Materials used at any stage in the manufacture of the drug",ROA_TITLE:"Routes of Administration",COUNTRIES_MANUFACT:"Countries of manufacture for this product",IN_LIST:"In list",UNITS_SRCH:"Select or Search Units",SOURCED_INFO:"Please provide additional details related to this ingredient on the Human/Animal Sourced Ingredient/Material tab",SOURCED_INFO_MATERIAL:"Please provide additional details related to this material on the Animal / Human Source tab",DELETE_FORMULATION:"Delete Formulation",COPY_FORMULATION:"Copy formulation",ADD_FORMULATION:"Add formulation",SELECT_DOSAGE:"Select a dosage form",SELECT_ROA:"Choose a Route of Administration",ADD_INGREDIENT:"Add Ingredient",ADD_CONTAINER:"Add Container Type",ADD_ROUTES_ADMINISTRATION:"Add Routes of Administration",ADD_COUNTRY_MANUFACTURE:"Add Countries of manufacture",ADD_ANIMAL_HUMAN_MATERIAL:"Add Animal and / or Human Sourced Materials",ADD_MATERIAL:"Add Material",AH_SOURCED_INSTRUCT:"Animal / Human Sourced Instructions",INGREDIENT_NAME_INSTRUCT:"Ingredient Name Instructions",FORM_REC_INSTRUCT:"Formulation Record Instructions",MATERIALS_INSTRUCT:"Sourced Materials Instructions",COUNTRIES_MANUFACT_INSTRUCT:"Countries of manufacture Instructions",CONTAINER_INSTRUCT:"Container Type Instructions",PACKAGE_SIZE_INSTRUCT:"Package Size Instructions",SHELF_LIFE_INSTRUCT:"Shelf Life Instructions",STANDARD_INSTRUCT:"Standard Instructions",IS_NANO_INSTRUCT:"Is Nanomaterial Instructions",VARIANT_INSTRUCT:"Variant Name Instructions",PURPOSE_INSTRUCT:"Purpose Instructions",IMPORTER_INSTRUCT:"Importer Instructions","CMP-FORMULATION-RECORD":"in formulation","MIRCTRL.MATERIALINGRECORDFORM":"in the animal and / or human sourced materials details","INGRECCTRL.ACTIVEINGFORM":"in the ingredient details","NINGRECCTRL.NONMEDINGFORM":"in the non-medicinal ingredient details","CTRCTRL.CONTAINERTYPEFORM":"in the container type details","FORMULCTRL.FORMULATIONSFORM":"in the formulations tab",INGREDIENT_INSTRUCT:"Ingredient Instructions",SHELF_LIFE_NUMBER:"Value"}),$translateProvider.translations("fr",{ING_NAME:"Nom de l’ingrédient",N_ING_NAME:"Nom de l’ingrédient",ING_ROLE:"Rôle",CAS_NUM:"Chemical Abstracts Service(CAS)",CAS_FULL:"Numéro Chemical Abstracts Service",STANDARD:"Norme",STRENGTH:"Concentration",OPERATOR:"Opérateur",VALUE:"Valeur",EQUALS:"Egale",NOT_GREAT_THAN:"Pas plus de",NOT_LESS_THAN:"Pas moins de",RANGE_LOWER_LIMIT:"Limite inférieure",RANGE_UPPER_LIMIT:"Limite supérieure",STRENGTH_OPERATOR:"Concentration - Opérateur",STRENGTH_VALUE:"Concentration - Valeur",STRENGTH_RANGE_LOWER_LIMIT:"Concentration - Valeur (limite inférieure)",STRENGTH_DATA2:"Concentration - Valeur (limite supérieure)",UNITS:"Unités",UNIT:"Unité",UNIT_PRESENTATION:"Unité de présentation",UNIT_MEASURE:"Unité de mesure",OTHER_UNIT_PRESENTATION:"Autre détails",OTHER_UNIT_MEASURE:"Autre détails",PER_STRENGTH:"Par",PER_VALUE:"Par - Valeur",ISBASE:"Calculé sous forme de base?",CAB_YES1:"Oui, mon ingrédient est fourni comme un sel, mais calculé comme une base",CAB_YES2:"Oui, mon ingrédient est fourni comme une base, et calculé comme une base",CAB_NO:"Non, mon ingrédient est fourni comme un sel, et calculé comme un sel",CAB_NO2:"fr_No, my product is a biologic",IS_NANO_MATERIAL:"Est-ce un nanomatériau?",NANO_MATERIAL:"Nanomatériau",NANO_MATERIAL_OTHER:"Indiquer le type de nanomatériau",ANIMAL_HUMAN_SOURCED:"Source d'animale ou humaine?",INGREDIENT_LIST:"fr_Ingredient List",ROLE:"Rôle",INGREDIENT:"Ingrédient",INGREDIENTS:"Ingrédients",MED:"Ingrédient médicinal actif",NONMED:"Ingrédient non-médicinal actif",VARIANT_NAME:"Nom de la variante du formulation (le cas échéant)",PURPOSE_INSTRUCT:"Purpose Instructions",PURPOSE:"But",CONTAINER_TYPE:"Type de contenant",PACKAGE_SIZE:"Capacité de l'emballage",MATERIAL_NAME:"Nom du matériel",PRESENT_IN_FINAL:"Présence dans le contenant final",INGRED_DETAILS:"Ingrédient",MEDICINAL_INGRED_DETAILS:"fr_Medicinal (Active) Ingredient Details",NONMEDICINAL_INGRED_DETAILS:"Non-Medicinal Ingredient Details",CONTAINER_TYPE_DETAILS:"Type de contenant",MATERIAL_DETAILS:"Détail de matériaux de source d'animale et/ou humaine",CALCULATED_AS_BASE:"Calculé comme base?",SHELF_LIFE_NUMBERS:"Valeur",MIN_TEMP:"Minimum, Celsius",MAX_TEMP:"Maximum, Celsius",TEMP_RANGE:"Écart de température",SHELF_LIFE:"Durée de vie",OTHER_SHELF_LIFE_CONSIDER:" Autres considérations relatives à la durée de vie",IN_FINAL_CONTAINER:"Présence dans le contenant final?",OTHER_ROA_DETAILS:"Autre voie d'administration",ROA_LBL:"Voie d'administration",ROA_ABREV:"fr_ROA",FORMULATION:"Formulation",FORMULATIONS:"Formulations",FORMULATION_DETAILS:"Formulation",FORMULATION_NAME:"Nom de la formulation",FORM_ID:"ID",ANIMAL_CTRY_ORIGIN:"Pays d'origine des animaux",ADD_ROA:"Ajouter une voie d'administration",MEDICINAL_INGRED:"fr_Medicinal (Active) Ingredients",NONMEDICINAL_INGRED:"fr_Non-Medicinal Ingredients",IS_ANIMAL_HUMAN_MATERIAL:"Est-ce un matériel(aux) de source humaine et/ou animale (autre que l’ingrédient figurant dans la formulation ci-dessus) était utilisé(s) à l’une ou l’autre étape de la fabrication du produit?",CONTAINER_TYPES:" Type de contenant, capacité de l'emballage et durée de vie",ANIMAL_HUMAN_HDING:"Matériel(aux) de source humaine et/ou animale utilisé à l’une ou l’autre étape de la fabrication du produit",ROA_TITLE:"Voie d'administration",COUNTRIES_MANUFACT:"Pays de fabricatin pour ce produit",IN_LIST:"Dans la liste",UNITS_SRCH:"fr_Select or Search Units",SOURCED_INFO:"Veuillez fournir des détails supplémentaires lié à cet ingrédient dans l'onglet L'ingrédient ou matériel source humaine ou d'animale.",SOURCED_INFO_MATERIAL:"Veuillez fournir des détails supplémentaires lié à cet matière dans l'onglet Source animale / humaine.",DELETE_FORMULATION:"Supprimer la formulation",COPY_FORMULATION:"Copier la formulation",ADD_FORMULATION:"Ajouter une formulation",SELECT_DOSAGE:"fr_Select a dosage form",SELECT_ROA:"fr_Choose a Route of Administration",ADD_CONTAINER:"Ajouter un type de contenant",ADD_INGREDIENT:"Ajouter un ingrédient",AH_SOURCED_INSTRUCT:"fr_Animal / Human Sourced Instructions",ADD_ROUTES_ADMINISTRATION:"Ajouter une voie d'administration",ADD_COUNTRY_MANUFACTURE:"Ajouter un pays de fabrication",ADD_ANIMAL_HUMAN_MATERIAL:"Ajouter matériaux de source humaine et/ou animale",ADD_MATERIAL:"fr_Add Material",INGREDIENT_NAME_INSTRUCT:"fr_Ingredient Name Instructions",FORM_REC_INSTRUCT:"fr_Formulation Record Instructions",MATERIALS_INSTRUCT:"fr_Sourced Materials Instructions",COUNTRIES_MANUFACT_INSTRUCT:"fr_Countries of manufacture Instructions",CONTAINER_INSTRUCT:"fr_Container Type Instructions",PACKAGE_SIZE_INSTRUCT:"fr_Package Size Instructions",SHELF_LIFE_INSTRUCT:"fr_Shelf Life Instructions",STANDARD_INSTRUCT:"fr_Standard Instructions",IS_NANO_INSTRUCT:"fr_Is Nanomaterial Instructions",VARIANT_INSTRUCT:"fr_Variant Name Instructions",IMPORTER_INSTRUCT:"fr_Importer Instructions","CMP-FORMULATION-RECORD":" dans la section formulation","INGRECCTRL.ACTIVEINGFORM":"dans les détails des ingrédients","MIRCTRL.MATERIALINGRECORDFORM":"dans les détails de matériaux de source d'animale et/ou humaine","NINGRECCTRL.NONMEDINGFORM":"fr_in the nom-medicinal ingredient details","FORMULCTRL.FORMULATIONSFORM":"dans l'onglet formulation",INGREDIENT_INSTRUCT:"Ingredient Instructions","CTRCTRL.CONTAINERTYPEFORM":"dans les détails du type de conteneur",SHELF_LIFE_NUMBER:"Valeur"}),$translateProvider.translations("en",{FOR_THE:"The ",THERE_ARE_ERRORS:"There are errors",FORM_NOT_SAVED:"The form could not be saved because ",NOT_SAVED:" could not be saved because ",ERRORS_FOUND:" errors were found.",ERROR_FOUND:"error was found.",TYPE_REQUIRED:"This field is required.",TYPE_EMAIL:"Please enter a valid email address.",TYPE_DUPLICATEROLE:"This role has already been selected.",TYPE_DUPLICATESYS:"This system has already been selected.",TYPE_MIN:"Less than minimum value",TYPE_MINLENGTH:"Less than minimum length",POSTAL_FORMAT:"Please enter a valid format",TYPE_DATE:"Please enter a valid date",TYPE_NUMBER:"Please enter a valid number",TYPE_PATTERN:"The format is not valid"}),$translateProvider.translations("fr",{FOR_THE:"Pour le ",THERE_ARE_ERRORS:"Il y a des erreurs",FORM_NOT_SAVED:"Le formulaire n’a pas pu être enregistré car ",NOT_SAVED:" n’a pas pu être enregistré car ",ERRORS_FOUND:"erreurs ont été trouvées.",
ERROR_FOUND:"erreur a été trouvée.",TYPE_REQUIRED:"Ce champ est obligatoire.",TYPE_EMAIL:"Veuillez fournir une adresse électronique valide.",TYPE_DUPLICATEROLE:"Ce rôle a déjà été sélectionné.",TYPE_DUPLICATESYS:"fr_This system has already been selected.",TYPE_MIN:"Moins que la valeur minimale.",TYPE_MINLENGTH:"Moins que la longueur minimale.",POSTAL_FORMAT:"Entrez un format valide.",TYPE_DATE:"Veuillez fournir une une date valide.",TYPE_NUMBER:"Veuillez fournir un numéro valide.",TYPE_PATTERN:"Le format n’est pas valide"})}]),function(){"use strict";angular.module("numberFormat",[])}(),function(){"use strict";function digitsCtrl(){function link(scope,element,attrs,modelCtrl){modelCtrl.$parsers.push(function(inputValue){if(void 0==inputValue)return"";var isNumber=!1,max=-1,ignore=!1,tempVal=""+inputValue;attrs.type&&"number"===attrs.type&&(isNumber=!0),attrs.onlyMax&&(max=parseInt(attrs.onlyMax));var regexIntNeg=/[^0-9-]/g,integerReg=/[^0-9]/g,regexValue=integerReg;if("intNeg"==attrs.onlyDigits?regexValue=regexIntNeg:"false"===attrs.onlyDigits?ignore=!0:regexValue=integerReg,ignore)return inputValue;var transformedInput=tempVal.replace(regexValue,"");return max>0&&(transformedInput=transformedInput.substring(0,max)),transformedInput!==tempVal&&(isNumber&&transformedInput&&(transformedInput=parseFloat(transformedInput)),modelCtrl.$setViewValue(transformedInput),modelCtrl.$render()),transformedInput})}var directive={link:link,restrict:"A",require:"?ngModel"};return directive}angular.module("numberFormat").directive("onlyDigits",digitsCtrl)}(),function(){angular.module("activityFormFilterModule",["hpfbConstants"])}(),function(){function getService(){function _getPharmaRAList(raList){for(var newList=[],i=0;i<raList.length;i++)switch(raList[i].id){case"B02-20160301-001":newList.push(raList[i]);break;case"B02-20160301-031":newList.push(raList[i]);break;case"B02-20160301-032":newList.push(raList[i]);break;case"B02-20160301-038":newList.push(raList[i]);break;case"B02-20160301-046":newList.push(raList[i]);break;case"B02-20160301-047":newList.push(raList[i]);break;case"B02-20160301-049":newList.push(raList[i]);break;case"B02-20160301-050":newList.push(raList[i]);break;case"B02-20160301-051":newList.push(raList[i]);break;case"B02-20160301-067":newList.push(raList[i]);break;case"B02-20160301-068":newList.push(raList[i]);break;case"B02-20160301-075":newList.push(raList[i]);break;case"B02-20160301-077":newList.push(raList[i]);break;case"B02-20160301-078":newList.push(raList[i]);break;case"B02-20160301-082":newList.push(raList[i]);break;case"B02-20160301-084":newList.push(raList[i]);break;case"B02-20160301-085":newList.push(raList[i]);break;case"B02-20160301-088":newList.push(raList[i]);break;case"B02-20160301-028":newList.push(raList[i]);break;case"B02-20160301-018":newList.push(raList[i]);break;case"B02-20160301-020":newList.push(raList[i]);break;case"B02-20160301-021":newList.push(raList[i]);break;case"B02-20160301-043":newList.push(raList[i]);break;case"B02-20160301-070":newList.push(raList[i]);break;case"B02-20190627-07":newList.push(raList[i]);break;case"B02-20190627-08":newList.push(raList[i]);break;case"B02-20160819-01":newList.push(raList[i]);break;case"B02-20190627-06":newList.push(raList[i])}return newList}function _getBiolRAList(raList){for(var newList=[],i=0;i<raList.length;i++)switch(raList[i].id){case"B02-20160301-001":newList.push(raList[i]);break;case"B02-20160301-031":newList.push(raList[i]);break;case"B02-20160301-032":newList.push(raList[i]);break;case"B02-20160301-038":newList.push(raList[i]);break;case"B02-20160301-046":newList.push(raList[i]);break;case"B02-20160301-047":newList.push(raList[i]);break;case"B02-20160301-049":newList.push(raList[i]);break;case"B02-20160301-050":newList.push(raList[i]);break;case"B02-20160301-051":newList.push(raList[i]);break;case"B02-20160301-067":newList.push(raList[i]);break;case"B02-20160301-068":newList.push(raList[i]);break;case"B02-20160301-075":newList.push(raList[i]);break;case"B02-20160301-077":newList.push(raList[i]);break;case"B02-20160301-078":newList.push(raList[i]);break;case"B02-20160301-082":newList.push(raList[i]);break;case"B02-20160301-084":newList.push(raList[i]);break;case"B02-20160301-085":newList.push(raList[i]);break;case"B02-20160301-088":newList.push(raList[i]);break;case"B02-20160301-089":newList.push(raList[i]);break;case"B02-20160301-028":newList.push(raList[i]);break;case"B02-20160301-019":newList.push(raList[i]);break;case"B02-20160301-043":newList.push(raList[i]);break;case"B02-20160301-071":newList.push(raList[i]);break;case"B02-20190627-07":newList.push(raList[i]);break;case"B02-20190627-08":newList.push(raList[i]);break;case"B02-20190627-06":newList.push(raList[i])}return newList}function _getPostMarketRAList(raList){for(var newList=[],i=0;i<raList.length;i++)switch(raList[i].id){case"B02-20160301-069":newList.push(raList[i]);break;case"B02-20160301-079":newList.push(raList[i]);break;case"B02-20160301-080":newList.push(raList[i]);break;case"B02-20190627-01":newList.push(raList[i]);break;case"B02-20190627-02":newList.push(raList[i]);break;case"B02-20190627-03":newList.push(raList[i]);break;case"B02-20190627-04":newList.push(raList[i]);break;case"B02-20190627-05":newList.push(raList[i])}return newList}function _getConsumHealthList(raList){for(var newList=[],i=0;i<raList.length;i++)switch(raList[i].id){case"B02-20160301-001":newList.push(raList[i]);break;case"B02-20160301-031":newList.push(raList[i]);break;case"B02-20160301-032":newList.push(raList[i]);break;case"B02-20160301-038":newList.push(raList[i]);break;case"B02-20160301-046":newList.push(raList[i]);break;case"B02-20160301-047":newList.push(raList[i]);break;case"B02-20160301-049":newList.push(raList[i]);break;case"B02-20160301-050":newList.push(raList[i]);break;case"B02-20160301-051":newList.push(raList[i]);break;case"B02-20160301-067":newList.push(raList[i]);break;case"B02-20160301-068":newList.push(raList[i]);break;case"B02-20160301-075":newList.push(raList[i]);break;case"B02-20160301-077":newList.push(raList[i]);break;case"B02-20160301-078":newList.push(raList[i]);break;case"B02-20160301-082":newList.push(raList[i]);break;case"B02-20160301-084":newList.push(raList[i]);break;case"B02-20160301-085":newList.push(raList[i]);break;case"B02-20160301-088":newList.push(raList[i]);break;case"B02-20160301-028":newList.push(raList[i]);break;case"B02-20160301-018":newList.push(raList[i]);break;case"B02-20160301-020":newList.push(raList[i]);break;case"B02-20160301-021":newList.push(raList[i]);break;case"B02-20160301-043":newList.push(raList[i]);break;case"B02-20160301-070":newList.push(raList[i]);break;case"B02-20190627-07":newList.push(raList[i]);break;case"B02-20190627-08":newList.push(raList[i]);break;case"B02-20160819-01":newList.push(raList[i]);break;case"B02-20190627-06":newList.push(raList[i])}return newList}function _getVeterinaryList(raList){for(var newList=[],veterinaryArray=["B02-20160301-001","B02-20160301-018","B02-20160301-038","B02-20160301-043","B02-20160301-046","B02-20160301-047","B02-20160301-049","B02-20160301-050","B02-20160301-051","B02-20160301-041","B02-20160301-048","B02-20180912-01","B02-20160301-079","B02-20160301-082","B02-20160301-084","B02-20160301-088"],i=0;i<veterinaryArray.length;i++)for(var j=0;j<raList.length;j++)if(veterinaryArray[i]==raList[j].id){newList.push(raList[j]);break}return newList}function _getClinicalBioList(raList){for(var newList=[],veterinaryArray=["B02-20160301-014","B02-20160301-015","B02-20160301-072"],i=0;i<veterinaryArray.length;i++)for(var j=0;j<raList.length;j++)if(veterinaryArray[i]==raList[j].id){newList.push(raList[j]);break}return newList}function _getLinicalPhaList(raList){for(var newList=[],veterinaryArray=["B02-20160301-014","B02-20160301-015","B02-20160301-072"],i=0;i<veterinaryArray.length;i++)for(var j=0;j<raList.length;j++)if(veterinaryArray[i]==raList[j].id){newList.push(raList[j]);break}return newList}var service={getPharmaRAList:_getPharmaRAList,getBiolRAList:_getBiolRAList,getConsumHealthList:_getConsumHealthList,getPostMarketRAList:_getPostMarketRAList,getVeterinaryList:_getVeterinaryList,getClinicalBioList:_getClinicalBioList,getClinicalPhaList:_getLinicalPhaList};return service}angular.module("activityFormFilterModule").factory("ActivityFormFilterService",getService),getService.inject=[]}(),function(){"use strict";angular.module("hpfbConstants",[]),angular.module("hpfbConstants").constant("SOFTWARE_VERSION","3.0.1").constant("CANADA","CAN").constant("OTHER","OTHER").constant("YES","Y").constant("NO","N").constant("USA","USA").constant("UNKNOWN","UNKNOWN").constant("NEW","New").constant("EXISTING","Existing").constant("ENGLISH","en").constant("FRENCH","fr").constant("NEW_TYPE","NEW").constant("APPROVED_TYPE","FINAL").constant("DEPRECATED_APPROVED_TYPE","APPROVED").constant("AMEND_TYPE","AMEND").constant("INTERNAL_TYPE","INT").constant("EXTERNAL_TYPE","EXT").constant("PHARMA_TYPE","PHARMA").constant("RELATIVE_FOLDER_DATA","../data/").constant("CSP_XSL","CSP_Enrolment.xsl").constant("HCSC","hcsc").constant("XML","xml").constant("XSL_PREFIX","https://raw.githubusercontent.com/HealthCanada/HPFB/master/Regulatory-Enrolment-Process-REP/v_2_2/Style-Sheets/").constant("ADVANCE_FEE_PAYMENT_EN","https://www.canada.ca/content/dam/hc-sc/migration/hc-sc/dhp-mps/alt_formats/pdf/prodpharma/applic-demande/form/adv-pa-av2-eng.pdf").constant("ADVANCE_FEE_PAYMENT_FR","https://www.canada.ca/content/dam/hc-sc/migration/hc-sc/dhp-mps/alt_formats/pdf/prodpharma/applic-demande/form/adv-pa-av2-fra.pdf")}(),function(){"use strict";angular.module("filterLists",["hpfbConstants"])}(),function(){"use strict";function orderByTranslatedCountry($translate,$filter,CANADA,USA){return function(array,objKey){var result=[],translated=[];return angular.forEach(array,function(value){translated.push({key:value,label:$translate.instant(value)})}),result.push(CANADA),result.push(USA),angular.forEach($filter("orderBy")(translated,"label"),function(sortedObject){sortedObject.key!==CANADA&&sortedObject.key!==USA&&result.push(sortedObject.key)}),result}}function orderByTranslatedCountryAndLabel($translate,$filter,CANADA,USA){return function(array){var result=[],translated=[];return angular.forEach(array,function(value){translated.push({key:value,label:$translate.instant(value)})}),result.push({key:CANADA,label:$translate.instant(CANADA)}),result.push({key:USA,label:$translate.instant(USA)}),angular.forEach($filter("orderBy")(translated,"label"),function(sortedObject){sortedObject.key!==CANADA&&sortedObject.key!==USA&&result.push(sortedObject)}),result}}function findCountryObj(){return function(array,targetKey){for(var i=0;i<array.length;i++)if(array[i].key===targetKey)return array[i];return null}}function orderByTranslated($translate,$filter){return function(array){var result=[],translated=[];return angular.forEach(array,function(value){translated.push({key:value,label:$translate.instant(value)})}),angular.forEach($filter("orderBy")(translated,"label"),function(sortedObject){result.push(sortedObject.key)}),result}}function sequenceOrderBy($filter){return function(array){var result=[];return angular.forEach($filter("orderBy")(array,"sequence",!0),function(sortedObject){result.push(sortedObject)}),result}}function orderByTranslatedOtherFirst($translate,$filter,OTHER){return function(array){var result=[],translated=[];return angular.forEach(array,function(value){translated.push({key:value,label:$translate.instant(value)})}),result.push(OTHER),angular.forEach($filter("orderBy")(translated,"label"),function(sortedObject){sortedObject.key!==OTHER&&result.push(sortedObject.key)}),result}}function _orderByLocale(){return function(items,lang){return items.sort(function(a,b){return a[lang].localeCompare(b[lang],lang)}),items}}function _findById($filter){return function(array,searchJson){var initialResult=$filter("filter")(array,searchJson);if(!initialResult)return null;if(1===initialResult.length)return initialResult[0];for(var i=0;i<initialResult.length;i++)if(initialResult[i].id===searchJson.id)return initialResult[i];return null}}angular.module("filterLists").filter("orderByTranslatedCountry",orderByTranslatedCountry).filter("orderByTranslated",orderByTranslated).filter("orderByTranslatedOtherFirst",orderByTranslatedOtherFirst).filter("orderByCountryAndLabel",orderByTranslatedCountryAndLabel).filter("orderByLocale",_orderByLocale).filter("findCountryObject",findCountryObj).filter("findListItemById",_findById).filter("sequenceOrderDescending",sequenceOrderBy),orderByTranslatedCountry.$inject=["$translate","$filter","CANADA","USA"],orderByTranslated.$inject=["$translate","$filter"],orderByTranslatedOtherFirst.$inject=["$translate","$filter","OTHER"],_findById.$inject=["$filter"]}(),function(){"use strict";angular.module("dataLists",["hpfbConstants"])}(),function(){"use strict";function getService(UNKNOWN){function _createCountryArray(translateJson){vm.countryList=translateJson}function _getUnknownCountryRec(){return{id:UNKNOWN,en:"Unknown",fr:"Inconnu"}}function getCountryValuesArray(){return vm.countryList}function getProvinceValuesArray(){return["AB","BC","MB","NB","NL","NT","NS","NU","ON","PE","QC","SK","YT"]}function getUSStatesValueArray(){return["AL","AK","AZ","AR","CA","CO","CT","DE","DC","FL","GA","HI","ID","IL","IN","IA","KS","KY","LA","ME","MD","MA","MI","MN","MS","MO","MT","NE","NV","NH","NJ","NM","NY","NC","ND","OH","OK","OR","PA","RI","SC","SD","TN","TX","UT","VT","VA","WA","WV","WI","WY"]}var vm=this;vm.countryList=[];var service={getCountries:getCountryValuesArray,getProvinces:getProvinceValuesArray,getUSStates:getUSStatesValueArray,createCountryList:_createCountryArray,getUnknownCountryRecord:_getUnknownCountryRec};return service}angular.module("dataLists").factory("getCountryAndProvinces",getService),getService.inject=["UNKNOWN"]}(),function(){"use strict";function getSalService($filter,$q,$http,$translate,OTHER,FRENCH,RELATIVE_FOLDER_DATA){function getSalValuesArray(){return["SALUT_DR","SALUT_MR","SALUT_MRS","SALUT_MS"]}function getLanguagesValuesArray(){return["en","fr"]}function _createSortedArray(jsonList,lang){var result=[];return angular.forEach($filter("orderByLocale")(jsonList,lang),function(sortedObject){result.push(sortedObject)}),result}function _getAdminSubType(){return vm.adminSubTypeArray&&0!==vm.adminSubTypeArray.length?vm.adminSubTypeArray:_loadAdminType()}function _loadAdminType(){var deferred=$q.defer(),url=RELATIVE_FOLDER_DATA+"adminSubType.json";return $http.get(url).success(function(data,status,headers,config){var lang=$translate.proposedLanguage()||$translate.use(),newList=_createSortedArray(data,lang);vm.adminSubTypeArray=newList,deferred.resolve(newList)}).error(function(data,status,headers,config){deferred.reject(status)}),deferred.promise}var vm=this;vm.internalContacts=[],vm.adminSubTypeArray=[];var service={getSalutationList:getSalValuesArray,getLanguages:getLanguagesValuesArray,getAdminSubType:_getAdminSubType};return service}angular.module("dataLists").factory("getContactLists",getSalService),getSalService.$inject=["$filter","$q","$http","$translate","OTHER","FRENCH","RELATIVE_FOLDER_DATA"]}(),function(){"use strict";function getRolesService(){function getRoleValuesArray(){return["","ROLE_PRIMARY","ROLE_SECONDARY"]}function _getFormTypes(){return[_biologic,_pharma,_veterinary,_clinical]}function _getBiologic(){return _biologic}function _getPharmaceutical(){return _pharma}function _getVeterinary(){return _veterinary}function _getClinicalTrial(){return _clinical}var _biologic="D21",_pharma="D22",_veterinary="D24",_clinical="D26",service={getContactRoles:getRoleValuesArray,getFormTypes:_getFormTypes,getBiologicType:_getBiologic,getPharmaType:_getPharmaceutical,getVeterinary:_getVeterinary,getClinicalTrial:_getClinicalTrial};return service}angular.module("dataLists").factory("getRoleLists",getRolesService)}(),function(){"use strict";angular.module("services",[])}(),function(){"use strict";function getTransactionSeq($http,$q){function yesNoArray(){return["Y","N"]}function _createRaArray(value){vm.raTypeArray=value}function _createFeeArray(value){vm.feeTypeArray=value}function _createMitigationArray(value){vm.mitigationTypeArray=value}function getTransactionDescriptionsArray(){return vm.allActivities}function getActivityArray(){return vm.raTypeArray}function _getfeeTypeArray(){return vm.feeTypeArray}function _getMitigationTypeArray(){return vm.mitigationTypeArray}function getPresubArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE]}function getANDSArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.COMMENTS_NOC,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.INITIAL,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.SECOND_LANG_PM,vm.allActivities.PRISTINE_PM_2LANG,vm.allActivities.PUB_RELEASE_INFO,vm.allActivities.BE_CLARIF_RESPONSE,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.NOC_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.NON_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.CORR_PATENT_MED,vm.allActivities.ALLEGATION_NOTICE,vm.allActivities.FORM_IV,vm.allActivities.FORM_V,vm.allActivities.CONSENT_LTR,vm.allActivities.DATA_PROTECT_CORRESP]}function getEUNDSArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.BE_CLARIF_RESPONSE,vm.allActivities.CANCEL_LETTER,vm.allActivities.COMMENTS_NOC,vm.allActivities.COMMENTS_SUMMARY_BASIS,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.INITIAL,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.SECOND_LANG_PM,vm.allActivities.PRISTINE_PM_2LANG,vm.allActivities.PUB_RELEASE_INFO,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.NOC_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.NON_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.CORR_PATENT_MED,vm.allActivities.ALLEGATION_NOTICE,vm.allActivities.FORM_IV,vm.allActivities.FORM_V,vm.allActivities.CONSENT_LTR,vm.allActivities.DATA_PROTECT_CORRESP,vm.allActivities.NONCLIN_CLARIF_RESPONSE]}function getEUSNDSArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.BE_CLARIF_RESPONSE,vm.allActivities.CANCEL_LETTER,vm.allActivities.COMMENTS_NOC,vm.allActivities.COMMENTS_SUMMARY_BASIS,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.POST_NOC_CHANGE,vm.allActivities.SECOND_LANG_PM,vm.allActivities.PRISTINE_PM_2LANG,vm.allActivities.PUB_RELEASE_INFO,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.NOC_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.NON_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.CORR_PATENT_MED,vm.allActivities.ALLEGATION_NOTICE,vm.allActivities.FORM_IV,vm.allActivities.FORM_V,vm.allActivities.CONSENT_LTR,vm.allActivities.DATA_PROTECT_CORRESP,vm.allActivities.NONCLIN_CLARIF_RESPONSE]}function getLevel3Array(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.YEAR_LIST_OF_CHANGE,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE]}function getNCArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.COMMENTS_SUMMARY_BASIS,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.POST_NOC_CHANGE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.SECOND_LANG_PM,vm.allActivities.PRISTINE_PM_2LANG,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.NOL_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA]}function getNDSArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.COMMENTS_NOC,vm.allActivities.COMMENTS_SUMMARY_BASIS,vm.allActivities.COMMENTS_REGULARTORY_DECISION,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.INITIAL,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.SECOND_LANG_PM,vm.allActivities.PRISTINE_PM_2LANG,vm.allActivities.PUB_RELEASE_INFO,vm.allActivities.BE_CLARIF_RESPONSE,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.NOC_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.NON_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.CORR_PATENT_MED,vm.allActivities.ALLEGATION_NOTICE,vm.allActivities.FORM_IV,vm.allActivities.FORM_V,vm.allActivities.CONSENT_LTR,vm.allActivities.DATA_PROTECT_CORRESP,vm.allActivities.NONCLIN_CLARIF_RESPONSE]}function getPSURCArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.COMMENTS_SUMMARY_BASIS,vm.allActivities.FOR_PERIOD,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.MEETING_MINUTES,vm.allActivities.MHPD_RQ_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.PHONE_RQ_RESPONSE]}function getPSURPVArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.FOR_PERIOD,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.MEETING_MINUTES,vm.allActivities.MHPD_RQ_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.CLIN_CLARIF_RESPONSE]}function getRMPPVArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.CSOtRMP,vm.allActivities.MEETING_MINUTES,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.MHPD_RQ_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.RMP_VERSION_DATE,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.UNSOLICITED_DATA]}function getSANDSArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.COMMENTS_NOC,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.POST_NOC_CHANGE,vm.allActivities.SECOND_LANG_PM,vm.allActivities.PRISTINE_PM_2LANG,vm.allActivities.PUB_RELEASE_INFO,vm.allActivities.BE_CLARIF_RESPONSE,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.NOC_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.NON_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.CORR_PATENT_MED,vm.allActivities.ALLEGATION_NOTICE,vm.allActivities.FORM_IV,vm.allActivities.FORM_V,vm.allActivities.CONSENT_LTR,vm.allActivities.DATA_PROTECT_CORRESP]}function getSNDSArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.COMMENTS_NOC,vm.allActivities.COMMENTS_SUMMARY_BASIS,vm.allActivities.COMMENTS_REGULARTORY_DECISION,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.MEETING_MINUTES,vm.allActivities.PANDEMIC_APPL,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.POST_NOC_CHANGE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.SECOND_LANG_PM,vm.allActivities.PRISTINE_PM_2LANG,vm.allActivities.PUB_RELEASE_INFO,vm.allActivities.BE_CLARIF_RESPONSE,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.NOC_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.NON_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.CORR_PATENT_MED,vm.allActivities.ALLEGATION_NOTICE,vm.allActivities.FORM_IV,vm.allActivities.FORM_V,vm.allActivities.CONSENT_LTR,vm.allActivities.DATA_PROTECT_CORRESP,vm.allActivities.NONCLIN_CLARIF_RESPONSE]}function getSNDSCArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.COMMENTS_NOC,vm.allActivities.COMMENTS_SUMMARY_BASIS,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_NOC_CHANGE,vm.allActivities.SECOND_LANG_PM,vm.allActivities.PRISTINE_PM_2LANG,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.NOC_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.NON_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.CORR_PATENT_MED,vm.allActivities.ALLEGATION_NOTICE,vm.allActivities.FORM_IV,vm.allActivities.FORM_V,vm.allActivities.CONSENT_LTR,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.DATA_PROTECT_CORRESP]}function getUDPVArray(){return[vm.allActivities.BENEFIT_RISK_ASSESS,vm.allActivities.CANCEL_LETTER,vm.allActivities.NOTIFICATION_CHANGE,vm.allActivities.POST_MARKET_SURV,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.MEETING_MINUTES,vm.allActivities.MHPD_RQ_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.RISK_COMMUN_DOC,vm.allActivities.UNSOLICITED_DATA]}function getUDRAArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.DIN_DISCONTINUED,vm.allActivities.ADVISEMENT_LETTER_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.MEETING_MINUTES,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.NOTIFICATION_INTERRUPT_SALE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.SEQUENCE_CLEANUP]}function getConsultArray(){return[vm.allActivities.PANDEMIC_APPL]}function _getMPNCArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.WRITTEN_CONSULT_REQ,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ]}function _getMPNDSArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.WRITTEN_CONSULT_REQ,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ]}function _getMPSNDSArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.WRITTEN_CONSULT_REQ,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ]}function _getPANDArray(){return[vm.allActivities.BE_CLARIF_RESPONSE,vm.allActivities.CANCEL_LETTER,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.COMMENTS_NOC,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.INITIAL,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PANDEMIC_APPL,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.SECOND_LANG_PM,vm.allActivities.PRISTINE_PM_2LANG,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.NOC_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.NON_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.CORR_PATENT_MED,vm.allActivities.ALLEGATION_NOTICE,vm.allActivities.FORM_IV,vm.allActivities.FORM_V,vm.allActivities.CONSENT_LTR,vm.allActivities.DATA_PROTECT_CORRESP,vm.allActivities.NONCLIN_CLARIF_RESPONSE]}function _getPBRERCArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.COMMENTS_SUMMARY_BASIS,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.FOR_PERIOD,vm.allActivities.MEETING_MINUTES,vm.allActivities.MHPD_RQ_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.PHONE_RQ_RESPONSE];
}function _getPBRERPVArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.FOR_PERIOD,vm.allActivities.MEETING_MINUTES,vm.allActivities.MHPD_RQ_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.CLIN_CLARIF_RESPONSE]}function _getPRNDSArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.MEETING_MINUTES,vm.allActivities.PRIORITY_REVIEW_RQ,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.RECON_DECIS_OTHER_INFO]}function _getPRSNDSArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.MEETING_MINUTES,vm.allActivities.PRIORITY_REVIEW_RQ,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.RECON_DECIS_OTHER_INFO]}function getYBPRArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.FOR_PERIOD,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.MEETING_MINUTES,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE]}function getDSurArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.FOR_PERIOD,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.MEETING_MINUTES,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.PHONE_RQ_RESPONSE]}function getDINAArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.CHANGE_TO_DIN,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.INITIAL,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.PRISTINE_PM_2LANG,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.BE_CLARIF_RESPONSE,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.NON_RESPONSE,vm.allActivities.NOD_RESPONSE]}function getV_DINAArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.CHANGE_TO_DIN,vm.allActivities.INITIAL,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.HSC_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QHSC_RQ_RESPONSE,vm.allActivities.CHSC_RQ_RESPONSE,vm.allActivities.QCHSC_RQ_RESPONSE,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.INITIAL_TEAT_SOLU_MONO,vm.allActivities.NOD_RESPONSE]}function getDINBArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.CHANGE_TO_DIN,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.INITIAL,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.PRISTINE_PM_2LANG,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.NON_RESPONSE,vm.allActivities.NOD_RESPONSE]}function getDINDArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.CHANGE_TO_DIN,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.INITIAL,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.NON_RESPONSE,vm.allActivities.NOD_RESPONSE]}function getDINFArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.CHANGE_TO_DIN,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.INITIAL,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.LABEL_PREAPPROVAL_2LANG]}function getMPDINArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.WRITTEN_CONSULT_REQ,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE]}function getPDCArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_AUTH_DIV1_CHANGE,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.PRISTINE_PM_2LANG,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.NOL_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO]}function getPDCBArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_AUTH_DIV1_CHANGE,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.PRISTINE_PM_2LANG,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.NOL_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO]}function _getIRSRPVArray(){return[vm.allActivities.ISSUE_SAFETY_REQUEST,vm.allActivities.MEETING_MINUTES,vm.allActivities.PRESUB_MEETING_RQ]}function _getPAPVArray(){return[vm.allActivities.MEETING_MINUTES,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.MHPD_RQ_RESPONSE,vm.allActivities.PRESUB_MEETING_RQ]}function _getPSAPVArray(){return[vm.allActivities.ADV_COMP_REQ,vm.allActivities.PATIENT_SAFETY_INFO]}function _getRCPVArray(){return[vm.allActivities.DISSEM_LIST,vm.allActivities.RISK_COMMUN_DOC]}function _getREGPVArray(){return[vm.allActivities.BENEFIT_RISK_ASSESS,vm.allActivities.FOREIGN_SAFETY_NOTIFICATION,vm.allActivities.MEETING_MINUTES,vm.allActivities.RESSESS_ORDER,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.TEST_STUDIES_ORDER,vm.allActivities.TERM_COND_COMM]}function _getSANDSCArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.COMMENTS_NOC,vm.allActivities.COMMENTS_SUMMARY_BASIS,vm.allActivities.CONSENT_LTR,vm.allActivities.DATA_PROTECT_CORRESP,vm.allActivities.CORR_PATENT_MED,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.FORM_IV,vm.allActivities.FORM_V,vm.allActivities.MEETING_MINUTES,vm.allActivities.ALLEGATION_NOTICE,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.POST_NOC_CHANGE,vm.allActivities.SECOND_LANG_PM,vm.allActivities.PRISTINE_PM_2LANG,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.NOC_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.NON_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA]}function _getPostDINArray(){return[vm.allActivities.YEAR]}function _getEUANDSArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.BE_CLARIF_RESPONSE,vm.allActivities.CANCEL_LETTER,vm.allActivities.COMMENTS_NOC,vm.allActivities.COMMENTS_SUMMARY_BASIS,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.INITIAL,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.SECOND_LANG_PM,vm.allActivities.PRISTINE_PM_2LANG,vm.allActivities.PUB_RELEASE_INFO,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.NOC_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.NON_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.CORR_PATENT_MED,vm.allActivities.ALLEGATION_NOTICE,vm.allActivities.FORM_IV,vm.allActivities.FORM_V,vm.allActivities.CONSENT_LTR,vm.allActivities.DATA_PROTECT_CORRESP,vm.allActivities.NONCLIN_CLARIF_RESPONSE]}function _getEUSANDSArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.BE_CLARIF_RESPONSE,vm.allActivities.CANCEL_LETTER,vm.allActivities.COMMENTS_NOC,vm.allActivities.COMMENTS_SUMMARY_BASIS,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.SECOND_LANG_PM,vm.allActivities.PRISTINE_PM_2LANG,vm.allActivities.PUB_RELEASE_INFO,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.NOC_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.NON_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.CORR_PATENT_MED,vm.allActivities.ALLEGATION_NOTICE,vm.allActivities.FORM_IV,vm.allActivities.FORM_V,vm.allActivities.CONSENT_LTR,vm.allActivities.DATA_PROTECT_CORRESP,vm.allActivities.NONCLIN_CLARIF_RESPONSE]}function getV_AndsArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.CONSENT_LTR,vm.allActivities.DATA_PROTECT_CORRESP,vm.allActivities.CORR_PATENT_MED,vm.allActivities.FORM_IV,vm.allActivities.FORM_V,vm.allActivities.INITIAL,vm.allActivities.MEETING_MINUTES,vm.allActivities.ALLEGATION_NOTICE,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.HSC_RQ_RESPONSE,vm.allActivities.QHSC_RQ_RESPONSE,vm.allActivities.CHSC_RQ_RESPONSE,vm.allActivities.QCHSC_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.NON_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.UNSOLICITED_DATA]}function getCtaArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.INITIAL,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.NOL_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.CTN_ADMINISTRATIVE,vm.allActivities.CTN_APPENDIX,vm.allActivities.CTN_CONTACT,vm.allActivities.CTN_DATA,vm.allActivities.CTN_DEAR,vm.allActivities.CTN_DILUENT,vm.allActivities.CTN_DRUG_PROD,vm.allActivities.CTN_DRUG_SUBS,vm.allActivities.CTN_ENROLLMENT,vm.allActivities.CTN_ETHICS,vm.allActivities.CTN_IMPD_UPDATE,vm.allActivities.CTN_INFORMED,vm.allActivities.CTN_FORM_BROC_UPDATES,vm.allActivities.CTN_INVESTIGATOR,vm.allActivities.CTN_NEW_MANUFACTURING,vm.allActivities.CTN_NEW_PKG,vm.allActivities.CTN_NEW_QC,vm.allActivities.CTN_NEW_SUMM_ADF,vm.allActivities.CTN_PACKAGING_LABELLING,vm.allActivities.CTN_PROTOCOL_INFO_UPDATE,vm.allActivities.CTN_PROTOCOL_UPDATE,vm.allActivities.CTN_QOS,vm.allActivities.CTN_REFUSALS,vm.allActivities.CTN_REGULATORY,vm.allActivities.CTN_RESPONSE,vm.allActivities.CTN_SAFETY,vm.allActivities.CTN_SHELF_PD,vm.allActivities.CTN_SHELF_DS,vm.allActivities.CTN_SITE,vm.allActivities.CTN_SOURCE,vm.allActivities.CTN_STRAIN,vm.allActivities.CTN_STUDY_COMPLETION,vm.allActivities.CTN_STUDY_DISC,vm.allActivities.CTN_STUDY_EXT,vm.allActivities.CTN_STUDY_SUS,vm.allActivities.CTN_TRANS_OWN]}function getCta_aArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.NOL_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.CLINICAL,vm.allActivities.CLINICAL_QUALITY,vm.allActivities.QUALITY]}function getPreCtaArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ]}function getV_Level3Array(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.YEAR_LIST_OF_CHANGE]}function getV_MpdinArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.UNSOLICITED_DATA]}function getV_MpncArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.UNSOLICITED_DATA]}function getV_MpndsArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.UNSOLICITED_DATA]}function getV_MpsndsArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.UNSOLICITED_DATA]}function getV_MpandsArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.UNSOLICITED_DATA]}function getV_MpsandsArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.UNSOLICITED_DATA]}function getV_RccArray(){return[vm.allActivities.REQ_ACCEPTED]}function getV_NcArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.POST_NOC_CHANGE,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.HSC_RQ_RESPONSE,vm.allActivities.QHSC_RQ_RESPONSE,vm.allActivities.CHSC_RQ_RESPONSE,vm.allActivities.QCHSC_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.NOL_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.UNSOLICITED_DATA]}function getV_NdsArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.CONSENT_LTR,vm.allActivities.DATA_PROTECT_CORRESP,vm.allActivities.CORR_PATENT_MED,vm.allActivities.FORM_IV,vm.allActivities.FORM_V,vm.allActivities.INITIAL,vm.allActivities.MEETING_MINUTES,vm.allActivities.ALLEGATION_NOTICE,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.HSC_RQ_RESPONSE,vm.allActivities.QHSC_RQ_RESPONSE,vm.allActivities.CHSC_RQ_RESPONSE,vm.allActivities.QCHSC_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.UNSOLICITED_DATA]}function getV_PsurPvArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.FOR_PERIOD,vm.allActivities.MEETING_MINUTES,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.HSC_RQ_RESPONSE,vm.allActivities.QHSC_RQ_RESPONSE,vm.allActivities.CHSC_RQ_RESPONSE,vm.allActivities.QCHSC_RQ_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA]}function getV_SandsArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.CONSENT_LTR,vm.allActivities.DATA_PROTECT_CORRESP,vm.allActivities.CORR_PATENT_MED,vm.allActivities.FORM_IV,vm.allActivities.FORM_V,vm.allActivities.MEETING_MINUTES,vm.allActivities.ALLEGATION_NOTICE,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.POST_NOC_CHANGE,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.HSC_RQ_RESPONSE,vm.allActivities.QHSC_RQ_RESPONSE,vm.allActivities.CHSC_RQ_RESPONSE,vm.allActivities.QCHSC_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.NON_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.UNSOLICITED_DATA]}function getV_SndsArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.CONSENT_LTR,vm.allActivities.DATA_PROTECT_CORRESP,vm.allActivities.CORR_PATENT_MED,vm.allActivities.FORM_IV,vm.allActivities.FORM_V,vm.allActivities.MEETING_MINUTES,vm.allActivities.ALLEGATION_NOTICE,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.POST_NOC_CHANGE,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.HSC_RQ_RESPONSE,vm.allActivities.QHSC_RQ_RESPONSE,vm.allActivities.CHSC_RQ_RESPONSE,vm.allActivities.QCHSC_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.NON_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.UNSOLICITED_DATA]}function getV_UdraArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.DIN_DISCONTINUED,vm.allActivities.NOTIFICATION_INTERRUPT_SALE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.QHSC_RQ_RESPONSE,vm.allActivities.CHSC_RQ_RESPONSE,vm.allActivities.QCHSC_RQ_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.UNSOLICITED_DATA]}function _getActivityLeadArray(){return[vm.PHARMA,vm.BIOLOGICAL,vm.POSTMARKET,vm.CONSUMERHEALTH]}function _getActivityLeadD22Array(){return[vm.PHARMA,vm.POSTMARKET,vm.CONSUMERHEALTH]}function _getActivityLeadD21Array(){return[vm.BIOLOGICAL,vm.POSTMARKET]}function _getActivityLeadD24Array(){return[vm.VETERINARY]}function _getActivityLeadD26Array(){return[vm.CLINICAL_BIO,vm.CLINICAL_PHA]}function _getPharmaceutical(){return vm.D22}function _getBiologic(){return vm.D21}function _getVeterinary(){return vm.D24}function _getClinical(){return vm.D26}function _getBiologicalLead(){return vm.BIOLOGICAL}function _getPharmaLead(){return vm.PHARMA}function _getPostMarketLead(){return vm.POSTMARKET}function _getConsumHealthLead(){return vm.CONSUMERHEALTH}function _getVeterinaryLead(){return vm.VETERINARY}function _getClinicalBioLead(){return vm.CLINICAL_BIO}function _getClinicalPhaLead(){return vm.CLINICAL_PHA}function _getShelfLifeUnitsArray(){return[{id:"YR",en:"Years",fr:"Années"},{id:"MO",en:"Months",fr:"Mois"},{id:"DA",en:"Days",fr:"Jours"},{id:"HR",en:"Hours",fr:"Heures"},{id:"MI",en:"Minutes",fr:"Minutes"}]}var vm=this;vm.raTypeArray=[],vm.feeTypeArray=[],vm.mitigationTypeArray=[],vm.D21="D21",vm.D22="D22",vm.D24="D24",vm.D26="D26",vm.BIOLOGICAL="B14-20160301-02",vm.CONSUMERHEALTH="B14-20160301-06",vm.PHARMA="B14-20160301-09",vm.POSTMARKET="B14-20160301-10",vm.VETERINARY="B14-20160301-11",vm.CLINICAL_BIO="B14-20160301-02",vm.CLINICAL_PHA="B14-20160301-09",vm.allActivities={ADMINISTRATIVE:"ADMINISTRATIVE",BENEFIT_RISK_ASSESS:"BENEFIT_RISK_ASSESS",CANCEL_LETTER:"CANCEL_LETTER",CHANGE_TO_DIN:"CHANGE_TO_DIN",COMMENTS_NOC:"COMMENTS_NOC",COMMENTS_SUMMARY_BASIS:"COMMENTS_SUMMARY_BASIS",COMMENTS_REGULARTORY_DECISION:"COMMENTS_REGULARTORY_DECISION",DIN_DISCONTINUED:"DIN_DISCONTINUED",DRUG_NOTIF_FORM:"DRUG_NOTIF_FORM",FOR_PERIOD:"FOR_PERIOD",INITIAL:"INITIAL",MEETING_MINUTES:"MEETING_MINUTES",NOTIFICATION_CHANGE:"NOTIFICATION_CHANGE",NOTIFICATION_INTERRUPT_SALE:"NOTIFICATION_INTERRUPT_SALE",PANDEMIC_APPL:"PANDEMIC_APPL",POST_CLEARANCE_DATA:"POST_CLEARANCE_DATA",POST_MARKET_SURV:"POST_MARKET_SURV",POST_NOC_CHANGE:"POST_NOC_CHANGE",POST_AUTH_DIV1_CHANGE:"POST_AUTH_DIV1_CHANGE",PRESUB_MEETING_PKG:"PRESUB_MEETING_PKG",PRESUB_MEETING_RQ:"PRESUB_MEETING_RQ",PRIORITY_REVIEW_RQ:"PRIORITY_REVIEW_RQ",SECOND_LANG_PM:"SECOND_LANG_PM",PRISTINE_PM_2LANG:"PRISTINE_PM_2LANG",ADVISEMENT_LETTER_RESPONSE:"ADVISEMENT_LETTER_RESPONSE",CLIN_CLARIF_RESPONSE:"CLIN_CLARIF_RESPONSE",EMAIL_RQ_RESPONSE:"EMAIL_RQ_RESPONSE",HSC_RQ_RESPONSE:"HSC_RQ_RESPONSE",QHSC_RQ_RESPONSE:"QHSC_RQ_RESPONSE",CHSC_RQ_RESPONSE:"CHSC_RQ_RESPONSE",QCHSC_RQ_RESPONSE:"QCHSC_RQ_RESPONSE",LABEL_CLARIF_RESPONSE:"LABEL_CLARIF_RESPONSE",MHPD_RQ_RESPONSE:"MHPD_RQ_RESPONSE",NOC_RESPONSE:"NOC_RESPONSE",NOD_RESPONSE:"NOD_RESPONSE",NOL_RESPONSE:"NOL_RESPONSE",NON_RESPONSE:"NON_RESPONSE",PROCESSING_CLARIF_RESPONSE:"PROCESSING_CLARIF_RESPONSE",QUAL_CLIN_CLARIF_RESPONSE:"QUAL_CLIN_CLARIF_RESPONSE",QUAL_CLARIF_RESPONSE:"QUAL_CLARIF_RESPONSE",RECON_DECIS_LTR_INTENT:"RECON_DECIS_LTR_INTENT",RECON_DECIS_RQ_RECON:"RECON_DECIS_RQ_RECON",RECON_DECIS_OTHER_INFO:"RECON_DECIS_OTHER_INFO",SCREENING_ACCEPT_RESPONSE:"SCREENING_ACCEPT_RESPONSE",SCREENING_CLARIF_RESPONSE:"SCREENING_CLARIF_RESPONSE",SDN_RESPONSE:"SDN_RESPONSE",LABEL_PREAPPROVAL_2LANG:"LABEL_PREAPPROVAL_2LANG",PHONE_RQ_RESPONSE:"PHONE_RQ_RESPONSE",RISK_COMMUN_DOC:"RISK_COMMUN_DOC",RMP_VERSION_DATE:"RMP_VERSION_DATE",UNSOLICITED_DATA:"UNSOLICITED_DATA",YEAR_LIST_OF_CHANGE:"YEAR_LIST_OF_CHANGE",BE_CLARIF_RESPONSE:"BE_CLARIF_RESPONSE",CORR_PATENT_MED:"CORR_PATENT_MED",ALLEGATION_NOTICE:"ALLEGATION_NOTICE",FORM_IV:"FORM_IV",FORM_V:"FORM_V",CONSENT_LTR:"CONSENT_LTR",DATA_PROTECT_CORRESP:"DATA_PROTECT_CORRESP",NONCLIN_CLARIF_RESPONSE:"NONCLIN_CLARIF_RESPONSE",SEQUENCE_CLEANUP:"SEQUENCE_CLEANUP",ADV_COMP_REQ:"ADV_COMP_REQ",CSOtRMP:"CSOtRMP",DISSEM_LIST:"DISSEM_LIST",FOREIGN_SAFETY_NOTIFICATION:"FOREIGN_SAFETY_NOTIFICATION",ISSUE_SAFETY_REQUEST:"ISSUE_SAFETY_REQUEST",PATIENT_SAFETY_INFO:"PATIENT_SAFETY_INFO",PUB_RELEASE_INFO:"PUB_RELEASE_INFO",RESSESS_ORDER:"RESSESS_ORDER",WRITTEN_CONSULT_REQ:"WRITTEN_CONSULT_REQ",TEST_STUDIES_ORDER:"TEST_STUDIES_ORDER",TERM_COND_COMM:"TERM_COND_COMM",YEAR:"YEAR",CTN_ADMINISTRATIVE:"CTN_ADMINISTRATIVE",CTN_APPENDIX:"CTN_APPENDIX",CTN_CONTACT:"CTN_CONTACT",CTN_DATA:"CTN_DATA",CTN_DEAR:"CTN_DEAR",CTN_DILUENT:"CTN_DILUENT",CTN_DRUG_PROD:"CTN_DRUG_PROD",CTN_DRUG_SUBS:"CTN_DRUG_SUBS",CTN_ENROLLMENT:"CTN_ENROLLMENT",CTN_ETHICS:"CTN_ETHICS",CTN_INFORMED:"CTN_INFORMED",CTN_INVESTIGATOR:"CTN_INVESTIGATOR",CTN_NEW_MANUFACTURING:"CTN_NEW_MANUFACTURING",CTN_NEW_PKG:"CTN_NEW_PKG",CTN_NEW_QC:"CTN_NEW_QC",CTN_PACKAGING_LABELLING:"CTN_PACKAGING_LABELLING",CTN_PROTOCOL_INFO_UPDATE:"CTN_PROTOCOL_INFO_UPDATE",CTN_PROTOCOL_UPDATE:"CTN_PROTOCOL_UPDATE",CTN_QOS:"CTN_QOS",CTN_REFUSALS:"CTN_REFUSALS",CTN_REGULATORY:"CTN_REGULATORY",CTN_RESPONSE:"CTN_RESPONSE",CTN_SAFETY:"CTN_SAFETY",CTN_SHELF_PD:"CTN_SHELF_PD",CTN_SHELF_DS:"CTN_SHELF_DS",CTN_SITE:"CTN_SITE",CTN_SOURCE:"CTN_SOURCE",CTN_STRAIN:"CTN_STRAIN",CTN_STUDY_COMPLETION:"CTN_STUDY_COMPLETION",CTN_STUDY_DISC:"CTN_STUDY_DISC",CTN_STUDY_EXT:"CTN_STUDY_EXT",CTN_STUDY_SUS:"CTN_STUDY_SUS",CTN_TRANS_OWN:"CTN_TRANS_OWN",CLINICAL:"CLINICAL",CLINICAL_QUALITY:"CLINICAL_QUALITY",QUALITY:"QUALITY",INITIAL_TEAT_SOLU_MONO:"INITIAL_TEAT_SOLU_MONO",REQ_ACCEPTED:"REQ_ACCEPTED",CTN_FORM_BROC_UPDATES:"CTN_FORM_BROC_UPDATES",CTN_IMPD_UPDATE:"CTN_IMPD_UPDATE",CTN_NEW_SUMM_ADF:"CTN_NEW_SUMM_ADF"};var service={getTransactionDescriptions:getTransactionDescriptionsArray,getActivityTypes:getActivityArray,createRaTypes:_createRaArray,getPharmaceuticalValue:_getPharmaceutical,getBiologicValue:_getBiologic,getVeterinaryValue:_getVeterinary,getClinicalValue:_getClinical,getBiologicalLeadValue:_getBiologicalLead,getPharmaLeadValue:_getPharmaLead,getPostMarketLeadValue:_getPostMarketLead,getConsumHealthLeadValue:_getConsumHealthLead,getVeterinaryLeadValue:_getVeterinaryLead,getClinicalBioLeadValue:_getClinicalBioLead,getClinicalPhaLeadValue:_getClinicalPhaLead,getPresubTypes:getPresubArray,getAndsType:getANDSArray,getV_AndsType:getV_AndsArray,getCtaType:getCtaArray,getCta_aType:getCta_aArray,getPreCtaType:getPreCtaArray,getDinaType:getDINAArray,getV_DinaType:getV_DINAArray,getDinbType:getDINBArray,getDindType:getDINDArray,getDinfType:getDINFArray,getDSurType:getDSurArray,getEundsType:getEUNDSArray,getEusndsType:getEUSNDSArray,getLevel3Type:getLevel3Array,getV_Level3Type:getV_Level3Array,getMPDINType:getMPDINArray,getV_MpdinType:getV_MpdinArray,getNcType:getNCArray,getV_NcType:getV_NcArray,getNdsType:getNDSArray,getV_NdsType:getV_NdsArray,getPdcType:getPDCArray,getPdcBType:getPDCBArray,getPresubType:getPresubArray,getpSurCType:getPSURCArray,getpSurPvType:getPSURPVArray,getV_PsurPvType:getV_PsurPvArray,getRmpPvType:getRMPPVArray,getSandsType:getSANDSArray,getV_SandsType:getV_SandsArray,getSndsType:getSNDSArray,getV_SndsType:getV_SndsArray,getSndsCType:getSNDSCArray,getUdpvType:getUDPVArray,getUdraType:getUDRAArray,getV_UdraType:getV_UdraArray,getYbprType:getYBPRArray,getConsultType:getConsultArray,getMPNCType:_getMPNCArray,getV_MpncType:getV_MpncArray,getMPNDSType:_getMPNDSArray,getV_MpndsType:getV_MpndsArray,getV_MpandsType:getV_MpandsArray,getV_MpsandsType:getV_MpsandsArray,getV_RccType:getV_RccArray,getMPSNDSType:_getMPSNDSArray,getV_MpsndsType:getV_MpsndsArray,getPANDType:_getPANDArray,getPBRERCType:_getPBRERCArray,getPBRERPVType:_getPBRERPVArray,getPRNDSType:_getPRNDSArray,getPRSNDSType:_getPRSNDSArray,getIRSRPVType:_getIRSRPVArray,getPAPVType:_getPAPVArray,getPSAPVType:_getPSAPVArray,getRCPVType:_getRCPVArray,getREGPVType:_getREGPVArray,getSANDSCType:_getSANDSCArray,getPostDINType:_getPostDINArray,getEUANDSType:_getEUANDSArray,getEUSANDSType:_getEUSANDSArray,getYesNoList:yesNoArray,getFeeList:_getfeeTypeArray,createFeeTypes:_createFeeArray,getMitigationList:_getMitigationTypeArray,createMitigationList:_createMitigationArray,getActivityLeadList:_getActivityLeadArray,getActivityLeadListByD22:_getActivityLeadD22Array,getActivityLeadListByD21:_getActivityLeadD21Array,getActivityLeadListByD24:_getActivityLeadD24Array,getActivityLeadListByD26:_getActivityLeadD26Array,getShelfLifeUnitsList:_getShelfLifeUnitsArray};return service}angular.module("services").factory("TransactionLists",getTransactionSeq),getTransactionSeq.inject=["$http","$q"]}(),function(){"use strict";angular.module("transactionLoadService",["dataLists","hpfbConstants","services"])}(),function(){"use strict";angular.module("transactionLoadService").factory("customLoad",["$http","$q","$filter","getCountryAndProvinces","CANADA","USA","OTHER","RELATIVE_FOLDER_DATA","getContactLists","TransactionLists",function($http,$q,$filter,getCountryAndProvinces,CANADA,USA,OTHER,RELATIVE_FOLDER_DATA,getContactLists,TransactionLists){
function _createTranslateList(jsonList,lang){lang||(lang="en");for(var resultList={},i=0;i<jsonList.length;i++)resultList[jsonList[i].id]=jsonList[i][lang];return resultList}function _createSortedArrayNAFirst(jsonList,lang){var result=[],canadaRecord=null,usaRecord=null;return angular.forEach($filter("orderByLocale")(jsonList,lang),function(sortedObject){sortedObject.id===USA?usaRecord=sortedObject:sortedObject.id===CANADA?canadaRecord=sortedObject:result.push(sortedObject)}),usaRecord&&result.unshift(usaRecord),canadaRecord&&result.unshift(canadaRecord),result}function _createSortedArray(jsonList,lang){var result=[];return angular.forEach($filter("orderByLocale")(jsonList,lang),function(sortedObject){result.push(sortedObject)}),result}return function(options){var deferred=$q.defer(),countryUrl=RELATIVE_FOLDER_DATA+"countries.json",raTypeUrl=RELATIVE_FOLDER_DATA+"raType.json",feeUrl=RELATIVE_FOLDER_DATA+"feeClass.json",mitigationUrl=RELATIVE_FOLDER_DATA+"mitigationType.json",resultTranslateList={};return $http.get(countryUrl).then(function(response){var newList=_createSortedArrayNAFirst(response.data,options.key),translateList=_createTranslateList(newList,options.key);return getCountryAndProvinces.createCountryList(newList),angular.extend(resultTranslateList,translateList),$http.get(raTypeUrl)}).then(function(response){var newList=_createSortedArray(response.data,options.key),translateList=_createTranslateList(newList,options.key);return TransactionLists.createRaTypes(newList),angular.extend(resultTranslateList,translateList),$http.get(feeUrl)}).then(function(response){var newList=_createSortedArray(response.data,options.key),translateList=_createTranslateList(newList,options.key);return TransactionLists.createFeeTypes(newList),angular.extend(resultTranslateList,translateList),$http.get(mitigationUrl)}).then(function(response){var newList=_createSortedArray(response.data,options.key);return TransactionLists.createMitigationList(newList),response.data})["catch"](function(error){console.warn("An error occurred with transaction List Load: "+error.status),deferred.reject(resultTranslateList)})["finally"](function(){deferred.resolve(resultTranslateList)}),deferred.promise}}])}(),function(){"use strict";angular.module("transactionService",["dataLists","services","hpfbConstants"])}(),function(){"use strict";function TransactionService($filter,$translate,getCountryAndProvinces,getContactLists,TransactionLists,YES,NO,HCSC,ENGLISH,FRENCH,XSL_PREFIX){function TransactionService(){var defaultTransactionData=_getEmptyTransactionModel();angular.extend(this._default,defaultTransactionData),this.rootTag="TRANSACTION_ENROL",this.currSequence=0,this.xslFileName="REP_RT_4_0.xsl"}return this.baseRequesters=[],this.userList=[],this.isFinal=!1,this.$onInit=function(){loadUserListData()},TransactionService.prototype={_default:{},isFinal:!1,getRootTag:function(){return"TRANSACTION_ENROL"},getXSLFileName:function(){return this.xslFileName},transformFromFileObj:function(jsonObj){var transactionInfo=this.getTransactionInfo(jsonObj[this.rootTag]);this._default={},this._default=transactionInfo},transformToFileObj:function(jsonObj){var today=_getToday(),subt="",currentLang=$translate.proposedLanguage()||$translate.use();jsonObj.isAdminSub&&(subt={},_setAdminSubTypeForOutput(jsonObj.subType,subt,currentLang,ENGLISH,FRENCH));var resultJson={TRANSACTION_ENROL:{template_type:"PHARMA",date_saved:today,software_version:"4.0.3",data_checksum:jsonObj.dataChecksum,is_third_party:jsonObj.isThirdParty,is_priority:jsonObj.isPriority,is_noc:jsonObj.isNoc,is_admin_sub:jsonObj.isAdminSub,sub_type:subt}},ectd=this._transformEctdToFile(jsonObj.ectd);return resultJson.TRANSACTION_ENROL.ectd=ectd,resultJson.TRANSACTION_ENROL.regulatory_project_manager1=jsonObj.projectManager1,resultJson.TRANSACTION_ENROL.regulatory_project_manager2=jsonObj.projectManager2,resultJson.TRANSACTION_ENROL.is_fees=jsonObj.isFees,jsonObj.isFees===YES&&(resultJson.TRANSACTION_ENROL.fee_details=this._mapFeeDetailsToOutput(jsonObj.feeDetails,YES,NO,$filter)),resultJson.TRANSACTION_ENROL.is_activity_changes=jsonObj.isActivityChanges,resultJson.TRANSACTION_ENROL.company_name=jsonObj.companyName,resultJson.TRANSACTION_ENROL.regulatory_activity_address=_mapAddressToOutput($translate,jsonObj.activityAddress),resultJson.TRANSACTION_ENROL.regulatory_activity_contact=_mapContactToOutput($translate,jsonObj.activityContact),resultJson.TRANSACTION_ENROL.confirm_regulatory_contact=jsonObj.confirmContactValid===!0?"Y":"N",resultJson},_transformEctdToFile:function(jsonObj){var ectd={};ectd.company_id=jsonObj.companyId,ectd.dossier_id=jsonObj.dossierId;var currentLang=$translate.proposedLanguage()||$translate.use(),dt_text=$translate.instant(jsonObj.dossierType,"","",currentLang);return ectd.dossier_type={_id:jsonObj.dossierType,__text:dt_text},ectd.product_name=jsonObj.productName,ectd.product_protocol=jsonObj.productProtocol,ectd.lifecycle_record=this._mapLifecycleListToOutput(jsonObj.lifecycleRecord),ectd},_transformEctdFromFile:function(model,jsonObj){model.ectd=_getEmptyEctdSection(),model.ectd.companyId=jsonObj.company_id,model.ectd.dossierId=jsonObj.dossier_id,model.ectd.dossierType=jsonObj.dossier_type._id,model.ectd.productName=jsonObj.product_name,model.ectd.productProtocol=jsonObj.product_protocol,model.ectd.lifecycleRecord=this._mapLifecycleList(jsonObj.lifecycle_record)},getModelInfo:function(){return this._default},getTransactionInfo:function(jsonObj){if(!jsonObj)return this._default;var model=_getEmptyTransactionModel();return model.dateSaved=jsonObj.date_saved,model.dataChecksum=jsonObj.data_checksum,model.isThirdParty=jsonObj.is_third_party,model.isPriority=jsonObj.is_priority,model.isNoc=jsonObj.is_noc,model.isAdminSub=jsonObj.is_admin_sub,model.subType="",jsonObj.sub_type&&(model.subType=$filter("filter")(getContactLists.getAdminSubType(),{id:jsonObj.sub_type._id})[0]),model.projectManager1=jsonObj.regulatory_project_manager1,model.projectManager2=jsonObj.regulatory_project_manager2,model.isFees=jsonObj.is_fees,model.feeDetails=null,model.isFees&&(model.feeDetails=this._mapFeeDetailsFromOutput(jsonObj.fee_details)),jsonObj.importFileType===HCSC?(this.isFinal=!1,model.confirmContactValid=!1):(this.isFinal=!0,model.confirmContactValid=!0),model.isActivityChanges=jsonObj.is_activity_changes,model.companyName=jsonObj.company_name,model.activityContact=_transformContactFromFileObj(jsonObj.regulatory_activity_contact),model.activityAddress=_transformAddressFromFileObj($translate,$filter,getCountryAndProvinces,jsonObj.regulatory_activity_address),this._transformEctdFromFile(model,jsonObj.ectd),model},getNewTransaction:function(isEctd){var model=_createLifeCycleModel(),sequenceNum=this.getNextSequenceNumber();return isEctd?model.sequence=sequenceNum:model.sequence="",model},getCurrentSequence:function(){return this.currSequence},setSequenceNumber:function(startVal){if(null===startVal)return!1;var converted=parseInt(startVal);if(isNaN(converted))return this.currSequence=0,!1;this.currSequence=converted;var model=this.getModelInfo();if(model.ectd.lifecycleRecord&&model.ectd.lifecycleRecord.length>0)for(var i=model.ectd.lifecycleRecord.length-1;i>=0;i--){var rec=model.ectd.lifecycleRecord[i];rec.sequence=this.getNextSequenceNumber()}return!0},getNextSequenceNumber:function(){for(var seqText=""+this.currSequence,pad=4-seqText.length,padText="",i=0;i<pad;i++)padText+="0";return seqText=padText+seqText,this.currSequence++,seqText},deprecateSequenceNumber:function(){this.currSequence--},_mapLifecycleList:function(jsonObj){return jsonObj?jsonObj instanceof Array?_transformLifecycleRecFromFileObj(jsonObj[0],$filter,TransactionLists):_transformLifecycleRecFromFileObj(jsonObj,$filter,TransactionLists):{}},_setNextSequenceOnLoad:function(sequence){this.currSequence<0&&(this.currSequence=0),isNaN(sequence)||sequence>=this.currSequence&&(this.currSequence=sequence+1)},_mapLifecycleListToOutput:function(jsonObj){var result=[];if(!jsonObj)return result;jsonObj instanceof Array||(jsonObj=[jsonObj]);for(var i=0;i<jsonObj.length;i++){var record=_mapLifecycleRecToOutput($translate,jsonObj[i],ENGLISH,FRENCH);if(1===jsonObj.length)return record;result.push(record)}return result},resetEctdSection:function(){this._default.hasOwnProperty("ectd")&&(this._default.ectd.companyId="",this._default.ectd.dossierId="",this._default.ectd.dossierType="",this._default.ectd.productName="",this._default.ectd.lifecycleRecord&&this._default.ectd.lifecycleRecord>0&&(this._default.ectd.lifecycleRecord=[this._default.ectd.lifecycleRecord[0]]))},createFeeDetails:function(){return _createFeeDetails(NO)},getDefaultLifecycleRecord:function(){return _createLifeCycleModel()}},TransactionService.prototype._mapFeeDetailsToOutput=function(feeObj){var result=_createEmptyFeeDetailsForOutput(NO);if(angular.isUndefined(feeObj))return null;if(result.submission_class="",feeObj.submissionClass&&feeObj.submissionClass.id){var currentLang=$translate.proposedLanguage()||$translate.use();result.submission_class=_getSubmissionClassForOutput(feeObj.submissionClass,currentLang,ENGLISH,FRENCH),result.submission_description=_getSubDescription(feeObj.submissionClass,currentLang,ENGLISH,FRENCH),result.fee=feeObj.submissionClass.fee}return result.deferral_request=feeObj.deferralRequest,result.fee_remission=feeObj.feeRemission,result.gross_revenue=feeObj.grossRevenue,result.percent_gross=feeObj.percentGross,result.required_docs.deferral_statement=feeObj.requiredDocs.deferralStat===!0?YES:NO,result.required_docs.remission_certified=feeObj.requiredDocs.revStat===!0?YES:NO,result.required_docs.sales_history=feeObj.requiredDocs.salesHistory===!0?YES:NO,result.required_docs.avg_sale_price=feeObj.requiredDocs.avgSalePrice===!0?YES:NO,result.required_docs.est_market_share=feeObj.requiredDocs.estMarketShare===!0?YES:NO,result.required_docs.comparison_products=feeObj.requiredDocs.comparison===!0?YES:NO,result.required_docs.market_plan=feeObj.requiredDocs.marketPlan===!0?YES:NO,result.required_docs.other=feeObj.requiredDocs.other===!0?YES:NO,result.required_docs.other_details=feeObj.requiredDocs.otherDetails,result.payment_method.credit_card=feeObj.paymentMethod.creditCard===!0?YES:NO,result.payment_method.cheque=feeObj.paymentMethod.cheque===!0?YES:NO,result.payment_method.money_order=feeObj.paymentMethod.moneyOrder===!0?YES:NO,result.payment_method.bank_draft=feeObj.paymentMethod.bankDraft===!0?YES:NO,result.payment_method.existing_credit=feeObj.paymentMethod.existingCredit===!0?YES:NO,result.payment_method.bank_wire=feeObj.paymentMethod.bankWire===!0?YES:NO,result.payment_method.bill_payment=feeObj.paymentMethod.billPayment===!0?YES:NO,result},TransactionService.prototype._mapFeeDetailsFromOutput=function(feeObj){var result=_createFeeDetails(NO);return angular.isUndefined(feeObj)?null:(feeObj.submission_class&&feeObj.submission_class._id&&(result.submissionClass=$filter("findListItemById")(TransactionLists.getFeeList(),{id:feeObj.submission_class._id})),result.deferralRequest=feeObj.deferral_request,result.feeRemission=feeObj.fee_remission,result.grossRevenue=Number(feeObj.gross_revenue),result.percentGross=feeObj.percent_gross,result.requiredDocs.deferralStat=feeObj.required_docs.deferral_statement===YES,result.requiredDocs.revStat=feeObj.required_docs.remission_certified===YES,result.requiredDocs.salesHistory=feeObj.required_docs.sales_history===YES,result.requiredDocs.avgSalePrice=feeObj.required_docs.avg_sale_price===YES,result.requiredDocs.estMarketShare=feeObj.required_docs.est_market_share===YES,result.requiredDocs.comparison=feeObj.required_docs.comparison_products===YES,result.requiredDocs.marketPlan=feeObj.required_docs.market_plan===YES,result.requiredDocs.other=feeObj.required_docs.other===YES,result.requiredDocs.otherDetails=feeObj.required_docs.other_details,result.paymentMethod.creditCard=feeObj.payment_method.credit_card===YES,result.paymentMethod.cheque=feeObj.payment_method.cheque===YES,result.paymentMethod.moneyOrder=feeObj.payment_method.money_order===YES,result.paymentMethod.bankDraft=feeObj.payment_method.bank_draft===YES,result.paymentMethod.existingCredit=feeObj.payment_method.existing_credit===YES,result.paymentMethod.bankWire=feeObj.payment_method.bank_wire===YES,result.paymentMethod.billPayment=feeObj.payment_method.bill_payment===YES,result)},TransactionService}function _getSubmissionClassForOutput(subTypeRec,currentLang,ENGLISH,FRENCH){var result={};return result._id=subTypeRec.id,result._label_en=subTypeRec.en,result._label_fr=subTypeRec.fr,currentLang===ENGLISH?result.__text=subTypeRec.en:currentLang===FRENCH&&(result.__text=subTypeRec.fr),result}function _getSubDescription(subDescrRec,currentLang,ENGLISH,FRENCH){var result={};return result._label_en=subDescrRec.description_en,result._label_fr=subDescrRec.description_fr,currentLang===ENGLISH?result.__text=subDescrRec.description_en:currentLang===FRENCH&&(result.__text=subDescrRec.description_fr),result}function _transformLifecycleRecFromFileObj(lifecycleObj,$filter,TransactionLists){var lifecycleRec=_createLifeCycleModel();return lifecycleRec.controlNumber=lifecycleObj.control_number,lifecycleObj.regulatory_activity_lead&&(lifecycleRec.activityLead=lifecycleObj.regulatory_activity_lead._id),lifecycleRec.activityType="",lifecycleObj.regulatory_activity_type&&(lifecycleRec.activityType=$filter("filter")(TransactionLists.getActivityTypes(),{id:lifecycleObj.regulatory_activity_type._id})[0],lifecycleRec.activityTypeDisplay=lifecycleRec.activityType.id),lifecycleObj.sequence_description_value&&(lifecycleRec.descriptionValue=lifecycleObj.sequence_description_value._id),lifecycleRec.startDate=lifecycleObj.sequence_from_date,lifecycleRec.endDate=lifecycleObj.sequence_to_date,lifecycleRec.details=lifecycleObj.sequence_details,lifecycleRec.detailsChange=lifecycleObj.sequence_details_change,lifecycleRec.sequenceVersion=lifecycleObj.sequence_version,lifecycleRec.year=lifecycleObj.sequence_year,lifecycleRec.sequenceConcat=lifecycleObj.transaction_description,lifecycleRec.requesterName=lifecycleObj.requester_name?""==lifecycleObj.requester_name._id?lifecycleObj.requester_name.__text:{id:lifecycleObj.requester_name._id,text:lifecycleObj.requester_name.__text}:"",lifecycleRec.requesterName2=lifecycleObj.requester_name2?""==lifecycleObj.requester_name2._id?lifecycleObj.requester_name2.__text:{id:lifecycleObj.requester_name2._id,text:lifecycleObj.requester_name2.__text}:"",lifecycleRec.requesterName3=lifecycleObj.requester_name3?""==lifecycleObj.requester_name3._id?lifecycleObj.requester_name3.__text:{id:lifecycleObj.requester_name3._id,text:lifecycleObj.requester_name3.__text}:"",lifecycleRec.requesterNameTxt=lifecycleObj.requester_name?lifecycleObj.requester_name.__text:"",lifecycleRec.requesterName2Txt=lifecycleObj.requester_name2?lifecycleObj.requester_name2.__text:"",lifecycleRec.requesterName3Txt=lifecycleObj.requester_name3?lifecycleObj.requester_name3.__text:"",lifecycleRec.isSaved=!0,lifecycleRec.fromValue=lifecycleObj.from_time,lifecycleRec.toValue=lifecycleObj.to_time,lifecycleRec}function _mapLifecycleRecToOutput($translate,lifecycleObj,ENGLISH,FRENCH){var lifecycleRec={};lifecycleRec.control_number=lifecycleObj.controlNumber;var currentLang=$translate.proposedLanguage()||$translate.use();if(lifecycleRec.regulatory_activity_lead="",lifecycleObj.activityLead){var ral_text=$translate.instant(lifecycleObj.activityLead,"","",currentLang);lifecycleRec.regulatory_activity_lead={_id:lifecycleObj.activityLead,__text:ral_text}}if(lifecycleRec.regulatory_activity_type="",lifecycleObj.activityType&&(lifecycleRec.regulatory_activity_type={},_setActivityTypeValuesForOutput(lifecycleObj.activityType,lifecycleRec.regulatory_activity_type,currentLang,ENGLISH,FRENCH)),lifecycleRec.sequence_description_value="",lifecycleObj.descriptionValue){var sdv_text=$translate.instant(lifecycleObj.descriptionValue,"","",currentLang);lifecycleRec.sequence_description_value={_id:lifecycleObj.descriptionValue,__text:sdv_text}}lifecycleRec.sequence_from_date=angular.isDate(lifecycleObj.startDate)?lifecycleObj.startDate.toISOString().substr(0,10):lifecycleObj.startDate,lifecycleRec.sequence_to_date=angular.isDate(lifecycleObj.endDate)?lifecycleObj.endDate.toISOString().substr(0,10):lifecycleObj.endDate,lifecycleRec.sequence_details=lifecycleObj.details,lifecycleRec.sequence_details_change=lifecycleObj.detailsChange,lifecycleRec.sequence_version=lifecycleObj.sequenceVersion,lifecycleRec.sequence_year=lifecycleObj.year,lifecycleRec.transaction_description=lifecycleObj.sequenceConcat;var tempRequesterName="";return lifecycleObj.requesterName&&lifecycleObj.requesterName.id?(tempRequesterName=lifecycleObj.requesterName.id,lifecycleRec.requester_name={_id:lifecycleObj.requesterName.id,__text:lifecycleObj.requesterName.text}):(tempRequesterName=lifecycleObj.requesterName,""!=lifecycleObj.requesterName?lifecycleRec.requester_name={_id:"",__text:lifecycleObj.requesterName.text?lifecycleObj.requesterName.text:lifecycleObj.requesterName}:lifecycleRec.requester_name={}),lifecycleObj.requesterName2&&lifecycleObj.requesterName2.id?(tempRequesterName=tempRequesterName+"\r\n"+lifecycleObj.requesterName2.id,lifecycleRec.requester_name2={_id:lifecycleObj.requesterName2.id,__text:lifecycleObj.requesterName2.text}):""!=lifecycleObj.requesterName2?(tempRequesterName=tempRequesterName+"\r\n"+lifecycleObj.requesterName2,lifecycleRec.requester_name2={_id:"",__text:lifecycleObj.requesterName2.text?lifecycleObj.requesterName2.text:lifecycleObj.requesterName2}):lifecycleRec.requester_name2={},lifecycleObj.requesterName3&&lifecycleObj.requesterName3.id?(tempRequesterName=tempRequesterName+"\r\n"+lifecycleObj.requesterName3.id,lifecycleRec.requester_name3={_id:lifecycleObj.requesterName3.id,__text:lifecycleObj.requesterName3.text}):""!=lifecycleObj.requesterName3?(tempRequesterName=tempRequesterName+"\r\n"+lifecycleObj.requesterName3,lifecycleRec.requester_name3={_id:"",__text:lifecycleObj.requesterName3.text?lifecycleObj.requesterName3.text:lifecycleObj.requesterName3}):lifecycleRec.requester_name3={},lifecycleRec.requester_of_solicited_information=tempRequesterName,lifecycleRec.from_time=lifecycleObj.fromValue,lifecycleRec.to_time=lifecycleObj.toValue,lifecycleRec}function _setActivityTypeValuesForOutput(srcActivityTypeRec,destActivityTypeRec,currentLang,ENGLISH,FRENCH){destActivityTypeRec._id=srcActivityTypeRec.id,destActivityTypeRec._label_en=srcActivityTypeRec.en,destActivityTypeRec._label_fr=srcActivityTypeRec.fr,currentLang===ENGLISH?destActivityTypeRec.__text=destActivityTypeRec._label_en:currentLang===FRENCH&&(destActivityTypeRec.__text=destActivityTypeRec._label_fr),destActivityTypeRec._id=srcActivityTypeRec.id}function _setAdminSubTypeForOutput(srcAdminSubTypeRec,destAdminSubTypeRec,currentLang,ENGLISH,FRENCH){destAdminSubTypeRec._id=srcAdminSubTypeRec.id,destAdminSubTypeRec._label_en=srcAdminSubTypeRec.en,destAdminSubTypeRec._label_fr=srcAdminSubTypeRec.fr,currentLang===ENGLISH?destAdminSubTypeRec.__text=destAdminSubTypeRec._label_en:currentLang===FRENCH&&(destAdminSubTypeRec.__text=destAdminSubTypeRec._label_fr),destAdminSubTypeRec._id=srcAdminSubTypeRec.id}function _getEmptyEctdSection(){var ectd={};return ectd.companyId="",ectd.dossierId="",ectd.dossierType="",ectd.productName="",ectd.lifecycleRecord=[],ectd}function _transformContactFromFileObj(contactObj){var contact={};return contactObj?(contact.givenName=contactObj.given_name,contact.initials=contactObj.initials,contact.surname=contactObj.surname,contact.title=contactObj.job_title,contact.language=contactObj.language_correspondance._id,contact.phone=contactObj.phone_num,contact.phoneExt=contactObj.phone_ext,contact.fax=contactObj.fax_num,contact.email=contactObj.email,contact):(console.error("There is no contact object"),contact)}function _mapContactToOutput($translate,contactObj){var contact={},currentLang=$translate.proposedLanguage()||$translate.use();return contact.given_name=contactObj.givenName,contact.initials=contactObj.initials,contact.surname=contactObj.surname,contact.job_title=contactObj.title,contact.language_correspondance={_id:contactObj.language,__text:$translate.instant(contactObj.language,"","",currentLang)},contact.phone_num=contactObj.phone,contact.phone_ext=contactObj.phoneExt,contact.fax_num=contactObj.fax,contact.email=contactObj.email,contact}function _mapAddressToOutput($translate,addressObj){var address={};address.street_address=addressObj.street,address.city=addressObj.city;var currentLang=$translate.proposedLanguage()||$translate.use();return addressObj.stateList?address.province_lov={_id:addressObj.stateList,__text:$translate.instant(addressObj.stateList,"","",currentLang)}:address.province_lov="",address.province_text=addressObj.stateText,address.country="",addressObj.country&&(address.country={_id:addressObj.country.id,_label_en:addressObj.country.en,_label_fr:addressObj.country.fr,__text:$translate.instant(addressObj.country.id,"","",currentLang)}),address.postal_code=addressObj.postalCode,address}function _transformAddressFromFileObj($translate,$filter,getCountryAndProvinces,addressObj){var address={};address.street=addressObj.street_address,address.city=addressObj.city,addressObj.province_lov?address.stateList=addressObj.province_lov._id:address.stateList="",address.stateText=addressObj.province_text,address.country="";var currentLang=$translate.proposedLanguage()||$translate.use();return addressObj.country._id&&(address.country=$filter("filter")(getCountryAndProvinces.getCountries(),{id:addressObj.country._id})[0],address.countryHtml=$translate.instant(address.country.id,"","",currentLang),address.countryDisplay=address.country.id),address.postalCode=addressObj.postal_code,address}function _createLifeCycleModel(){var defaultRecord={controlNumber:"",activityLead:"",activityType:"",activityTypeDisplay:"",descriptionValue:"",startDate:"",endDate:"",details:"",detailsChange:"",sequenceVersion:"",sequenceConcat:"",year:"",requesterName:"",requesterName2:"",requesterName3:"",requesterNameTxt:"",requesterName2Txt:"",requesterName3Txt:"",isSaved:!0,fromValue:"",toValue:""};return defaultRecord}function _createAddressModel(){return{street:"",city:"",stateList:"",stateText:"",country:"",countryDisplay:"",postalCode:""}}function _createContactModel(){var contact={};return contact.givenName="",contact.initials="",contact.surname="",contact.jobTitle="",contact.languageCorrespondance="",contact.phoneNum="",contact.phoneExt="",contact.fax="",contact.email="",contact}function _getToday(){function pad(n){return n<10?"0"+n:n}var d=new Date,isoDate=d.getFullYear()+"-"+pad(d.getMonth()+1)+"-"+pad(d.getDate());return isoDate}function _getEmptyTransactionModel(){var defaultTransactionData={dataChecksum:"",dateSaved:"",softwareVersion:"3.0.1",isThirdParty:"",isPriority:"",isNoc:"",isAdminSub:"",subType:"",ectd:{companyId:"",dossierId:"",dossierType:"",productName:"",productProtocol:"",lifecycleRecord:_createLifeCycleModel()},projectManager1:"",projectManager2:"",isFees:"",resetBtnClicked:!1,feeDetails:null,isActivityChanges:"Y",companyName:"",activityAddress:_createAddressModel(),confirmContactValid:!1,activityContact:_createContactModel()};return defaultTransactionData}function _createFeeDetails(NO){var feeObj={submissionClass:null,deferralRequest:"",feeRemission:"",grossRevenue:0,percentGross:"",requiredDocs:{deferralStat:!1,revStat:!1,salesHistory:!1,avgSalePrice:!1,estMarketShare:!1,comparison:!1,marketPlan:!1,other:!1,otherDetails:""},paymentMethod:{creditCard:!1,cheque:!1,moneyOrder:!1,bankDraft:!1,existingCredit:!1,bankWire:!1,billPayment:!1}};return feeObj}function _createEmptyFeeDetailsForOutput(NO){var feeObj={submission_class:null,submission_description:null,fee:"",deferral_request:NO,fee_remission:"",gross_revenue:0,percent_gross:"",required_docs:{deferral_statement:NO,remission_certified:NO,sales_history:NO,avg_sale_price:NO,est_market_share:NO,comparison_products:NO,market_plan:NO,other:NO,other_details:""},payment_method:{credit_card:NO,cheque:NO,money_order:NO,bank_draft:NO,existing_credit:NO,bank_wire:NO,bill_payment:NO}};return feeObj}angular.module("transactionService").factory("TransactionService",TransactionService),TransactionService.$inject=["$filter","$translate","getCountryAndProvinces","getContactLists","TransactionLists","YES","NO","HCSC","ENGLISH","FRENCH","XSL_PREFIX"]}(),function(){"use strict";angular.module("transactionFeesModule",["services","hpfbConstants","errorMessageModule"])}(),function(){"use strict";function transactionFeesController($scope,$window,$translate,TransactionLists,YES,NO,ENGLISH,FRENCH,ADVANCE_FEE_PAYMENT_EN,ADVANCE_FEE_PAYMENT_FR){function clearRemitRequiredDocs(){vm.model&&(vm.model.requiredDocs.revStat=!1,vm.model.requiredDocs.estMarketShare=!1,vm.model.requiredDocs.comparison=!1,vm.model.requiredDocs.salesHistory=!1,vm.model.requiredDocs.marketPlan=!1,vm.model.requiredDocs.avgSalePrice=!1,vm.model.requiredDocs.other=!1,vm.model.requiredDocs.otherDetails="")}function _setIdNames(){var scopeId="_"+$scope.$id;vm.submClassId="sub_class"+scopeId,vm.descriptId="fee_description"+scopeId,vm.feeId="fee_amount"+scopeId,vm.remitId="fee_remission"+scopeId,vm.paymentSelectedId="one_payment_method"+scopeId,vm.feeDocSelectedId="one_fee_doc"+scopeId,vm.revenueId="GROSS_REVENUE"+scopeId,vm.percentId="calcPercent"+scopeId,vm.deferralStateId="DEFER_STATEMENT"+scopeId,vm.statement10Id="STATEMENT_REVENUE"+scopeId,vm.otherId="other"+scopeId,vm.otherDetailsId="other_doc_details"+scopeId,vm.paymentFsId="fs_payment_methods"+scopeId,vm.feeDocFsId="fs_fee_docs"+scopeId,vm.deferId="defer_fees"+scopeId}var vm=this;vm.currencyFrench=new Intl.NumberFormat("fr-CA",{style:"currency",currency:"CAD",minimumFractionDigits:2}),vm.currencyEnglish=new Intl.NumberFormat("en-CA",{style:"currency",currency:"CAD",minimumFractionDigits:2}),vm.model={},vm.submissionType={},vm.onePaymentSelected="",vm.oneFeeDocSelected="",vm.yesNoList=[YES,NO],vm.feeDocKeys=["estMarketShare","comparison","salesHistory","marketPlan","avgSalePrice","other"],vm.requiredOnlyError=[{type:"required",displayAlias:"MSG_ERR_MAND"},{type:"number",displayAlias:"TYPE_NUMBER"}],vm.onePaymentError=[{type:"required",displayAlias:"MSG_ERR_MAND"}],vm.oneFeeDocError=[{type:"required",displayAlias:"MSG_ERR_MAND"}],vm.alerts=[!1,!1,!1],vm.lang=$translate.use(),vm.$onInit=function(){_setIdNames(),vm.submissionType=TransactionLists.getFeeList(),vm.alerts=[!1,!1,!1];for(var i=0;i<vm.submissionType.length;i++)vm.submissionType[i].text=vm.submissionType[i][$translate.use()]},vm.errorsTemp=function(){return!0},vm.$onChanges=function(changes){changes.language&&(vm.lang=changes.language.currentValue),changes.feeRecord&&(vm.model=changes.feeRecord.currentValue),changes.showErrorSummary&&(vm.showSummary=changes.showErrorSummary.currentValue)},vm.showError=function(ctrl){return!!ctrl&&(!!(ctrl.$invalid&&ctrl.$touched||vm.showSummary&&ctrl.$invalid)||void 0)},vm.isPaymentSelected=function(){for(var methodSelected=!1,keys=Object.keys(vm.model.paymentMethod),i=0;i<keys.length;i++)if(vm.model.paymentMethod[keys[i]]===!0){methodSelected=!0;break}return vm.onePaymentSelected="",methodSelected?(vm.onePaymentSelected=!0,!0):(vm.onePaymentSelected=!1,!1)},vm.isFeeDocSelected=function(){for(var feeDocSelected=!1,i=0;i<vm.feeDocKeys.length;i++)if(vm.model.requiredDocs[vm.feeDocKeys[i]]===!0){feeDocSelected=!0;break}return vm.oneFeeDocSelected="",feeDocSelected?(vm.oneFeeDocSelected=!0,!0):(vm.oneFeeDocSelected=!1,!1)},vm.isFeeRemit=function(){return vm.model.feeRemission===YES||(vm.model.grossRevenue=0,vm.model.percentGross=0,!1)},vm.calcValue=function(){var result=.1*parseFloat(vm.model.grossRevenue);isNaN(result)&&(result=0),vm.model.percentGross=result.toFixed(2)},vm.isDeferral=function(){return!!vm.model&&(vm.model.deferralRequest===YES||(vm.model.requiredDocs.deferralStat=!1,!1))},vm.showDocumentationSection=function(){return!(!vm.isEligible()&&!vm.isDeferral())},vm.showPaymentMethods=function(){if(!vm.model)return!1;var showPM=!vm.isDeferral()&&!vm.isEligible()&&vm.isLess10K()||vm.isEligible();return showPM||(vm.model.paymentMethod={creditCard:!1,cheque:!1,moneyOrder:!1,bankDraft:!1,existingCredit:!1,bankWire:!1,billPayment:!1}),showPM},vm.isSendNoFees=function(){return!!(vm.model&&vm.model.submissionClass&&vm.model.submissionClass.fee)&&!(vm.isLess10K()||vm.isEligible()||vm.isDeferral()||vm.isFeeRemit())},vm.isFrench=function(){return vm.lang!==ENGLISH},vm.showPaymentSection=function(){return!vm.isDeferral()&&vm.isFeeRemit()||vm.isEligible()&&vm.isLess10K()||vm.isEligible()&&!vm.isLess10K()||vm.isDeferral()&&!vm.isEligible()},vm.showPaymentPanel=function(){return!!(vm.model&&vm.model.submissionClass&&vm.model.submissionClass.fee)&&!(vm.isSendNoFees()||vm.isDeferral()||vm.isFeeRemit())},vm.isEligible=function(){return vm.model&&vm.model.submissionClass&&vm.model.submissionClass.fee?!!(vm.isFeeRemit()&&parseInt(vm.model.percentGross)<parseInt(vm.model.submissionClass.fee))||(clearRemitRequiredDocs(),!1):(clearRemitRequiredDocs(),!1)},vm.isLess10K=function(){return!(!vm.model||!vm.model.submissionClass)&&vm.model.submissionClass.fee<1e4},vm.openPaymentForm=function(){var feelink=ADVANCE_FEE_PAYMENT_EN;vm.lang===FRENCH&&(feelink=ADVANCE_FEE_PAYMENT_FR),$window.open(feelink,"_blank")},vm.setDocOther=function(){return!!vm.model&&(!!vm.model.requiredDocs.other||(vm.model.requiredDocs.otherDetails="",!1))},vm.getFee=function(){return vm.model.submissionClass&&vm.model.submissionClass.fee?vm.getCurrency(vm.model.submissionClass.fee):""},vm.getPpercentGross=function(){return vm.getCurrency(vm.model.percentGross)},vm.getCurrency=function(money){return money?vm.lang==ENGLISH?vm.currencyEnglish.format(money):vm.currencyFrench.format(money):""},vm.closeAlert=function(value){angular.isUndefined(value)||value<vm.alerts.length&&(vm.alerts[value]=!1)},vm.addInstruct=function(value){angular.isUndefined(value)||value<vm.alerts.length&&(vm.alerts[value]=!0)}}angular.module("transactionFeesModule").component("cmpTransactionFees",{templateUrl:"app/scripts/components/transactionFees/tpl-transaction-fees_20191119_1020.html",controller:transactionFeesController,controllerAs:"transFeeCtrl",bindings:{feeRecord:"<",language:"<",showErrorSummary:"<",updateErrorSummary:"&"}}),transactionFeesController.$inject=["$scope","$window","$translate","TransactionLists","YES","NO","ENGLISH","FRENCH","ADVANCE_FEE_PAYMENT_EN","ADVANCE_FEE_PAYMENT_FR"]}(),function(){"use strict";angular.module("errorSummaryModule",["focus-if"])}(),function(){"use strict";function errorSummaryController($scope,$location,$anchorScroll){function _isErrorSummaryVisible(){return vm.isVisible&&vm.errorArray&&vm.errorArray.length>0}function _hideRequiredRecordErrors(errors){var keys=Object.keys(errors);if(keys instanceof Array||(keys=[keys]),keys.indexOf("ingRecCtrl.activeIngForm")>-1)for(var i=0;i<keys.length;i++)if(keys[i].indexOf("no_active")>-1){delete errors[keys[i]];break}if(keys.indexOf("ctrCtrl.containerTypeForm")>-1)for(var i=0;i<keys.length;i++)if(keys[i].indexOf("no_container")>-1){delete errors[keys[i]];break}}function _getErr(errorObj,resultsList,parent){for(var keys=Object.keys(errorObj),i=0;i<keys.length;i++){var record=errorObj[keys[i]];record instanceof Array||(record=[record]);for(var j=0;j<record.length;j++){var numIndex=record[j].$name.lastIndexOf("_"),transcludeName="";if(numIndex>0&&(transcludeName=record[j].$name.substring(0,numIndex)),record[j].$invalid===!0&&record[j].$name.indexOf(".")>0)if(vm.exclusions&&vm.exclusions.hasOwnProperty(record[j].$name)){var tabIndex=vm.exclusions[record[j].$name].indexOf("tab_"),tabId=-1;tabIndex>-1&&(tabId=vm.exclusions[record[j].$name].substr(tabIndex+4),tabId=parseInt(tabId)),angular.merge(resultsList,_createSummaryRecord(record[j].$name,keys[i],parent,tabId))}else _getErr(record[j].$error,resultsList,record[j].$name);else if(vm.transcludeNames.hasOwnProperty(transcludeName)){var exIndex=record[j].$name.indexOf(transcludeName),expandIndex=record[j].$name.substring(exIndex+transcludeName.length+1);
angular.merge(resultsList,_createExpanderRecord(record[j].$name,transcludeName,keys[i],parent,expandIndex))}else if(record[j].$invalid===!0&&!resultsList.hasOwnProperty(record[j].$name)){var result=_processRecord(record[j].$name,keys[i],parent);"SAVELIFEREC"===result[record[j].$name].translateKey&&(result[record[j].$name].type=""),angular.merge(resultsList,result)}}i++}}function _scrubFieldName(rawName){var separator="_",index=rawName.lastIndexOf(separator),cleanedName="";return cleanedName=index>-1?rawName.substring(0,index):rawName}function _getElementScope(rawName){var separator="_",nameSplit=rawName.split(separator),scopeId=parseInt(nameSplit[nameSplit.length-1]);return angular.isNumber(scopeId)||(scopeId=""),scopeId}function _processRecord(error_Name,errorType,parent){var result={},scrubName=_scrubFieldName(error_Name),scopeId=_getElementScope(error_Name),errorKey="TYPE_"+errorType.toUpperCase(),destId=error_Name;if(vm.alias&&vm.alias.hasOwnProperty(scrubName)){var aliasRec=vm.alias[scrubName];switch(aliasRec.type.toLowerCase()){case"fieldset":var searchId=aliasRec.parent+"_"+scopeId,destObj=$("#"+searchId).find("input:visible:first");destObj.length>0&&(destId=destObj[0].id);break;case"element":destId=aliasRec.target+"_"+scopeId;break;case"elementnoid":destId=aliasRec.target;break;case"pattern":"pattern"===errorType&&(errorKey=aliasRec.errorType);break;case"select2":var searchId=aliasRec.name+"_match"+scopeId,destObj=$("#"+searchId);destObj.length>0&&(destId=searchId);break;case"min":"min"===errorType&&(errorKey=aliasRec.errorType);break;case"max":"max"===errorType&&(errorKey=aliasRec.errorType);break;case"minlength":"minlength"===errorType&&(errorKey=aliasRec.errorType);break;case"maxlength":"maxlength"===errorType&&(errorKey=aliasRec.errorType);break;case"buttonsearch":errorKey="TYPE_REQUIRED",$.each($("button","#"+vm.startFormId),function(k){var temp_attr=$(this).attr("id");temp_attr&&temp_attr.indexOf(aliasRec.buttonName)>-1&&(destId=temp_attr)});break;default:console.warn("No type found "+aliasRec.type)}}return result[error_Name]||(result[error_Name]={name:destId,errorName:error_Name,translateKey:scrubName.toUpperCase(),type:errorKey,parent:parent,concat:parent+"."+error_Name,isSummary:!1}),result}function _sortErrorsByDomOrder(){var domFieldList={};$.each($("input, select, textarea, fieldset"),function(k){var temp_attr=$(this).attr("id");temp_attr&&(domFieldList[temp_attr]=k)});for(var keyList=Object.keys(domFieldList),p=0;p<keyList.length;p++){if(keyList[p].indexOf("focusser-")>-1){var parentName=angular.element(document.querySelector("#"+keyList[p])).parent().attr("name");parentName&&(keyList[p]=parentName)}vm.uniqueErrorList[keyList[p]]||(keyList.splice(p,1),p--)}for(var sortedDomJsonList={},v=0;v<keyList.length;v++)0==keyList[v].indexOf("no_")&&(keyList[v]=keyList[v].replace("no_","list_")),sortedDomJsonList[keyList[v]]=v;var newErrors=Object.keys(vm.uniqueErrorList).map(function(k){return vm.uniqueErrorList[k]}),notDefined={};if(newErrors.length>0)for(var i=0;i<newErrors.length;){var currRec=newErrors[i],targetName=currRec.errorName,destIndex=sortedDomJsonList[targetName];if(angular.isDefined(destIndex)&&destIndex!==i){var tempRec=angular.copy(newErrors[destIndex]);newErrors[destIndex]=angular.copy(currRec),newErrors[i]=angular.copy(tempRec)}else angular.isDefined(destIndex)||(notDefined[currRec.name]={rec:currRec,pos:i}),i++}return _sortUnknowns(notDefined,newErrors),newErrors}function _sortUnknowns(unknownJson,sortList){for(var unknownArray=Object.keys(unknownJson).map(function(k){return unknownJson[k]}),i=0;i<unknownArray.length;i++){var unknownRec=unknownArray[i],unknownName=unknownRec.rec.name,scopeIndex=_getElementScope(unknownName);if(angular.isNumber(scopeIndex))for(var g=sortList.length-1;g>=0;g--){var sortRec=sortList[g],sortScope=_getElementScope(sortRec.name);if(angular.isNumber(sortScope)&&sortScope===scopeIndex&&unknownName!==sortRec.name){sortList.move(unknownRec.pos,g+1);break}}}}function _createSummaryRecord(name,type,parent,tabId){var result={};return angular.isDefined(tabId)||(tabId=-1),result[name]={name:name,type:type,translateKey:name.toUpperCase(),parent:parent,concat:parent+"."+name,tabId:tabId,isSummary:!0},result}function _createExpanderRecord(name,transcludeName,type,parent,expanderIndex){var result={};return result[name]={name:name,type:type,translateKey:transcludeName.toUpperCase(),parent:parent,concat:parent+"."+name,isSummary:!0,toExpand:!0,exIndex:parseInt(expanderIndex)},result}var vm=this;vm.parentRef=null,vm.errorArray=[],vm.uniqueErrorList={},vm.isVisible=!1,vm.nameAddendum="",vm.rootError="",vm.isFocusInput=0,vm.exclusions={},vm.alias={},vm.transcludeNames={},vm.headingPreamble="",vm.headerLevel="",vm.startFormId="",vm.$onInit=function(){},vm.$onChanges=function(changes){changes.setHeadingLevel&&angular.isDefined(changes.setHeadingLevel.currentValue)&&(vm.headerLevel=changes.setHeadingLevel.currentValue.toLowerCase()),changes.nameSuffix&&(vm.nameAddendum="-"+changes.nameSuffix.currentValue),changes.formPreamble&&(vm.headingPreamble=changes.formPreamble.currentValue),changes.exclusionList&&(vm.exclusions=changes.exclusionList.currentValue),changes.aliasList&&(vm.alias=changes.aliasList.currentValue),changes.formRef&&vm.getErrorsSumm(changes.formRef.currentValue.$error,changes.formRef.currentValue.$name),changes.showErrors&&(vm.isVisible=changes.showErrors.currentValue),changes.updateErrors&&vm.formRef&&vm.isVisible&&vm.getErrorsSumm(vm.formRef.$error,vm.formRef.$name),changes.makeFocused&&changes.makeFocused.currentValue&&(vm.isFocusInput=vm.isFocusInput+1),changes.formId&&(vm.startFormId=changes.formId.currentValue),changes.transcludeList&&changes.transcludeList.currentValue&&(vm.transcludeNames=changes.transcludeList.currentValue)},vm.calcIsVisible=function(){var summaryIsVisible=_isErrorSummaryVisible();return summaryIsVisible||$scope.$emit("childErrorSummaryHide",+vm.nameAddendum),summaryIsVisible},vm.scrollTo=function(errorRecord){var hashId="";errorRecord&&(hashId=errorRecord.isSummary?"errors-summary-"+errorRecord.name:errorRecord.name,vm.expandRecord({index:errorRecord.exIndex}),console.log("jangyoung:"+hashId),$location.hash(hashId),$anchorScroll())},vm.selectVisibleTab=function(errorRecord){"errors-summary-"+errorRecord.name;vm.selectTab({index:errorRecord.tabId})},vm.isSummaryLink=function(errorRecord){return errorRecord.isSummary&&!angular.isDefined(errorRecord.toExpand)&&angular.isDefined(errorRecord.tabId)&&parseInt(errorRecord.tabId)<0},vm.isList=function(errorRecord){return errorRecord.name.indexOf("list_")>=0},vm.isTabLink=function(errorRecord){return errorRecord.isSummary&&angular.isDefined(errorRecord.tabId)&&parseInt(errorRecord.tabId)>-1},vm.isExpanderLink=function(errorRecord){return angular.isDefined(errorRecord.toExpand)},$scope.$on("childErrorSummaryHide",function(event,data){if(_isErrorSummaryVisible())for(var errorSummaryBroadcastName=data.message,i=0;i<vm.errorArray.length;i++){var errorRecord=errorArray[i];errorRecord.isSummary&&errorRecord.name===errorSummaryBroadcastName&&vm.errorArray.splice(i,1)}}),vm.getErrorsSumm=function(myformErrors,name){vm.errorArray=[],vm.uniqueErrorList={},_getErr(myformErrors,vm.uniqueErrorList,name),_hideRequiredRecordErrors(vm.uniqueErrorList);var newErrors=_sortErrorsByDomOrder();angular.equals(vm.errorArray,newErrors)||(vm.errorArray=newErrors)},Array.prototype.move=function(from,to){to<0&&(to=0),to>=this.length&&(to=this.length-1),this.splice(to,0,this.splice(from,1)[0])}}angular.module("errorSummaryModule").component("cmpErrorSummary",{templateUrl:"app/scripts/components/error-summary/tpl-error-summary_20191119_1020.html",controller:errorSummaryController,controllerAs:"errSummaryCtrl",bindings:{formRef:"<",showErrors:"<",updateErrors:"<",nameSuffix:"@",formPreamble:"@",makeFocused:"<",setHeadingLevel:"@",exclusionList:"<",transcludeList:"<",formId:"<",aliasList:"<",expandRecord:"&",selectTab:"&"}}),errorSummaryController.$inject=["$scope","$location","$anchorScroll"]}(),function(){"use strict";angular.module("errorMessageModule",[])}(),function(){"use strict";function errorMessageController(){var vm=this;vm.field_name="",vm.form_ref=null,vm.fieldRecords=[],vm.$onChanges=function(changes){changes.fieldName&&(vm.field_name=changes.fieldName.currentValue),changes.formRef&&(vm.form_ref=changes.formRef.currentValue),changes.errorTypes&&(vm.fieldRecords=changes.errorTypes.currentValue)},vm.showErrorMessage=function(){return!!vm.form_ref&&(angular.isUndefined(vm.fieldName)?(console.warn("No field name for: "+vm.form_ref.$name),!1):angular.isUndefined(vm.form_ref[vm.fieldName])?(console.warn("lookup undefined "+vm.form_ref.$name+"."+vm.fieldName),!1):vm.showError()&&vm.form_ref[vm.fieldName].$invalid||vm.form_ref[vm.fieldName].$touched&&vm.form_ref[vm.fieldName].$invalid)}}angular.module("errorMessageModule").component("cmpErrorMessage",{templateUrl:"app/scripts/components/error-message/tpl-error-message_20191119_1020.html",controller:errorMessageController,controllerAs:"errMessageCtrl",bindings:{fieldName:"<",formRef:"<",showError:"&",errorTypes:"<"}})}(),function(){"use strict";angular.module("alertModule",[])}(),function(){"use strict";function alertController(){var vm=this;vm.alertVisible=!1,vm.closeMsgAlias="CLOSE_ALERT",vm.anchor=null,vm.$onInit=function(){vm.alertVisible=!1},vm.$onChanges=function(changes){changes.msg&&(vm.closeMsgAlias=changes.msg.currentValue),changes.uiState&&(vm.alertVisible=changes.uiState.currentValue),changes.myAnchor&&(vm.anchor=changes.myAnchor.currentValue)},vm.open=function(){vm.updateState()},vm.close=function(){vm.updateState(),vm.anchor&&document.getElementById(vm.anchor).focus()},vm.isAlertVisible=function(){return vm.alertVisible}}angular.module("alertModule").component("cmpAlert",{templateUrl:"app/scripts/components/alertComponent/tpl-alert_20191119_1020.html",transclude:!0,bindings:{uiState:"<",msg:"@",myAnchor:"<",updateState:"&",type:"@"},controller:alertController,controllerAs:"alertCtrl"}),alertController.$inject=[]}(),function(){"use strict";angular.module("addressModule",["hpfbConstants","dataLists","filterLists","ui.select","errorMessageModule"])}(),function(){"use strict";function addressCtrl(getCountryAndProvinces,$translate,CANADA,USA,$scope){function _setIdNames(){var scopeId=vm.fldId+"_"+$scope.$id;vm.streetId="STREET"+scopeId,vm.cityId="CITY"+scopeId,vm.countryId="COUNTRY"+scopeId,vm.stateTextId="proveState"+scopeId,vm.stateListId="state"+scopeId,vm.provinceListId="province"+scopeId,vm.postalId="postal"+scopeId,vm.zipId="zip"+scopeId}var vm=this;vm.isEditable=!0,vm.ngModelOptSetting={updateOn:"blur"},vm.lang=$translate.proposedLanguage()||$translate.use(),vm.addressModel={addressID:"",isDetailValid:!1,street:"",city:"",country:"",countryHtml:"",countryDisplay:"",stateLov:"",stateText:"",postalCode:""},vm.countryIsEditable=!0,vm.canadianPostalCodePattern="^(?!.*[DFIOQU])[A-VXYa-vxy][0-9][A-Za-z] ?[0-9][A-Za-z][0-9]$",vm.usaZipCode="^[0-9]{5}(?:-[0-9]{4})?$",vm.hideProvinceText=!1,vm.showProvince=!1,vm.showState=!1,vm.countryList=getCountryAndProvinces.getCountries(),vm.fdId="",vm.requiredOnly=[{type:"required",displayAlias:"MSG_ERR_MAND"}],vm.postalErrorList=[{type:"required",displayAlias:"MSG_ERR_MAND"},{type:"pattern",displayAlias:"POSTAL_FORMAT"}],vm.provStateErrorName="PROVSTATE",vm.$onInit=function(){vm.addressRecord&&(vm.addressModel=vm.addressRecord,vm.provListLabel=getProvinceListLabel(),vm.postalLabel=getPostalLabel(),vm.isPostalRequired=isPostalRequiredFn(),vm.provinces=getProvinceStateList(),vm.hideProvinceText=getProvinceTextState(),vm.postalPattern=getPostalPattern(),vm.hideProvinceDdl=!vm.hideProvinceText),_setIdNames()},vm.$onChanges=function(changes){changes.addressRecord&&(vm.addressModel=changes.addressRecord.currentValue,vm.countryChanged()),changes.isAmend&&(vm.isEditable=changes.isAmend.currentValue),changes.fieldSuffix&&(vm.fldId=changes.fieldSuffix.currentValue,vm.fldId||(vm.fldId="")),changes.updateCountry&&vm.countryChanged(),changes.countryEditable&&(vm.countryIsEditable=changes.countryEditable.currentValue,angular.isUndefined(vm.countryIsEditable)&&(vm.countryIsEditable=!0))},vm.countryChanged=function(){void 0===vm.addressModel.country.id||vm.addressModel.country.en!==vm.addressModel.countryHtml&&vm.addressModel.country.fr!==vm.addressModel.countryHtml?(vm.addressModel.countryHtml="",vm.addressModel.countryDisplay="",vm.isPostalRequired=!1,vm.hideProvinceText=!1,vm.showProvince=!1,vm.showState=!1,vm.hideProvinceDdl=!vm.hideProvinceText,vm.postalLabel=getPostalLabel()):(vm.addressModel.countryDisplay=vm.addressModel.country.id,vm.provListLabel=getProvinceListLabel(),vm.postalLabel=getPostalLabel(),vm.isPostalRequired=isPostalRequiredFn(),vm.provinces=getProvinceStateList(),vm.hideProvinceText=getProvinceTextState(),vm.postalPattern=getPostalPattern(),vm.hideProvinceDdl=!vm.hideProvinceText,vm.isCountryCanada()),vm.updateErrorSummary()},vm.isCountryCanada=function(){return vm.addressModel&&vm.addressModel.country?vm.addressModel.country.id===CANADA?(vm.postalErrorList=[{type:"required",displayAlias:"MSG_ERR_MAND"},{type:"pattern",displayAlias:"POSTAL_FORMAT"}],!0):(vm.postalErrorList=[{type:"required",displayAlias:"MSG_ERR_MAND"},{type:"pattern",displayAlias:"POSTAL_FORMAT"}],!1):(vm.postalErrorList=[{type:"required",displayAlias:"MSG_ERR_MAND"},{type:"pattern",displayAlias:"MSG_ERR_POSTAL"}],!1)},vm.showError=function(ctrl){return!!ctrl&&!!(ctrl.$invalid&&ctrl.$touched||vm.showErrors()&&ctrl.$invalid)},vm.onDeleteButtonClick=function(){vm.onDelete({addressId:vm.addressModel.addressID})},vm.onDiscardButtonClick=function(){vm.addressModel=angular.extend({},vm.addressRecord),vm.addressForm.$setPristine()},vm.isCountryEditable=function(){return vm.isEditable&&vm.countryIsEditable},vm.postalCodeChanged=function(){var postal=vm.addressModel.postalCode;postal&&(postal=postal.toUpperCase(),6==postal.length&&vm.addressModel.country.id===CANADA&&(postal=postal.substring(0,3)+" "+postal.substring(3,postal.length)),vm.addressModel.postalCode=postal,vm.updateErrorSummary())};var getProvinceTextState=function(){var isCanOrUsa=isPostalRequiredFn();return isCanOrUsa?vm.addressModel.stateText="":vm.addressModel.stateList="",isCanOrUsa},isPostalRequiredFn=function(){return vm.addressModel.country.id===CANADA||vm.addressModel.country.id===USA},getProvinceStateList=function(){return vm.addressModel.country.id===CANADA?(vm.showProvince=!0,vm.showState=!1,getCountryAndProvinces.getProvinces()):vm.addressModel.country.id===USA?(vm.showProvince=!1,vm.showState=!0,getCountryAndProvinces.getUSStates()):(vm.showProvince=!1,void(vm.showState=!1))},getProvinceListLabel=function(){var label=vm.addressModel.country.id===USA?"STATE":"PROVINCE";return label},getPostalLabel=function(){var label=vm.addressModel.country.id===USA?"ZIP":"POSTAL";return label},getPostalPattern=function(){var postalPtrn=null;return vm.addressModel.country.id===USA?postalPtrn=/^[0-9]{5}(?:-[0-9]{4})?$/:vm.addressModel.country.id===CANADA&&(postalPtrn=/^(?!.*[DFIOQU])[A-VXYa-vxy][0-9][A-Za-z] ?[0-9][A-Za-z][0-9]$/),postalPtrn};vm.countryChange=function(){for(var found=!1,i=0;i<vm.countryList.length;i++){var option=vm.countryList[i];if(option[vm.lang]===vm.addressModel.countryHtml){vm.addressModel.country=option,found=!0;break}}found||(vm.addressModel.countryHtml="",""!=vm.addressModel.country&&""!=vm.addressModel.country.id&&(vm.addressModel.country={}),vm.addressModel.countryDisplay=""),vm.countryChanged()},$scope.$watch("adr.addressForm.$error",function(){vm.updateErrorSummary()},!0)}angular.module("addressModule").config(function(uiSelectConfig){uiSelectConfig.theme="select2"}).component("cmpAddressDetails",{templateUrl:"app/scripts/components/addressDetails/tpl-address-details_20191119_1020.html",controller:addressCtrl,controllerAs:"adr",bindings:{addressRecord:"<",onUpdate:"&",showErrors:"&",isAmend:"<",updateErrorSummary:"&",fieldSuffix:"<",countryEditable:"<",updateCountry:"<"}}),addressCtrl.$inject=["getCountryAndProvinces","$translate","CANADA","USA","$scope"]}(),function(){"use strict";angular.module("lcDetailsModule",["ui.bootstrap","activityFormFilterModule","errorSummaryModule","errorMessageModule"])}(),function(){"use strict";function lifecycleRecCtrl(ActivityFormFilterService,TransactionLists,$filter,$translate,$scope){function _updateLocalModel(record){vm.lifecycleModel=record,convertToDate(),vm.selectActivityLeadList(),vm.setSequenceList(),vm.setDetailsState(),vm.selectActivityList()}function setAsYearOnly(){vm.fromTo=!1,vm.endDateVisible=!1,vm.startDateVisible=!1,vm.descriptionVisible=!1,vm.descriptionChangeVisible=!1,vm.versionVisible=!1,vm.yearVisible=!0,vm.yearChangeVisible=!1,vm.requesterVisible=!1,vm.lifecycleModel.startDate="",vm.lifecycleModel.endDate="",vm.lifecycleModel.sequenceVersion="",vm.lifecycleModel.requesterName="",vm.lifecycleModel.requesterName2="",vm.lifecycleModel.requesterName3="",vm.lifecycleModel.requesterNameTxt="",vm.lifecycleModel.requesterName2Txt="",vm.lifecycleModel.requesterName3Txt="",vm.lifecycleModel.fromValue="",vm.lifecycleModel.toValue=""}function setAsDescriptionYear(){vm.fromTo=!1,vm.endDateVisible=!1,vm.startDateVisible=!1,vm.descriptionVisible=!1,vm.descriptionChangeVisible=!1,vm.versionVisible=!1,vm.yearVisible=!1,vm.yearChangeVisible=!0,vm.requesterVisible=!1,vm.lifecycleModel.startDate="",vm.lifecycleModel.endDate="",vm.lifecycleModel.sequenceVersion="",vm.lifecycleModel.requesterName="",vm.lifecycleModel.requesterName2="",vm.lifecycleModel.requesterName3="",vm.lifecycleModel.requesterNameTxt="",vm.lifecycleModel.requesterName2Txt="",vm.lifecycleModel.requesterName3Txt="",vm.lifecycleModel.fromValue="",vm.lifecycleModel.toValue=""}function setDetailsAsNone(){vm.fromTo=!1,vm.endDateVisible=!1,vm.startDateVisible=!1,vm.descriptionVisible=!1,vm.descriptionChangeVisible=!1,vm.versionVisible=!1,vm.yearVisible=!1,vm.yearChangeVisible=!1,vm.requesterVisible=!1,vm.lifecycleModel.year="",vm.lifecycleModel.startDate="",vm.lifecycleModel.endDate="",vm.lifecycleModel.details="",vm.lifecycleModel.sequenceVersion="",vm.lifecycleModel.requesterName="",vm.lifecycleModel.requesterName2="",vm.lifecycleModel.requesterName3="",vm.lifecycleModel.requesterNameTxt="",vm.lifecycleModel.requesterName2Txt="",vm.lifecycleModel.requesterName3Txt="",vm.lifecycleModel.fromValue="",vm.lifecycleModel.toValue=""}function setAsDescription(){vm.fromTo=!1,vm.endDateVisible=!1,vm.startDateVisible=!1,vm.descriptionVisible=!0,vm.descriptionChangeVisible=!1,vm.versionVisible=!1,vm.yearVisible=!1,vm.yearChangeVisible=!1,vm.requesterVisible=!1,vm.descriptionLabel="BRIEF_DESC",vm.lifecycleModel.year="",vm.lifecycleModel.startDate="",vm.lifecycleModel.endDate="",vm.lifecycleModel.sequenceVersion="",vm.lifecycleModel.requesterName="",vm.lifecycleModel.requesterName2="",vm.lifecycleModel.requesterName3="",vm.lifecycleModel.requesterNameTxt="",vm.lifecycleModel.requesterName2Txt="",vm.lifecycleModel.requesterName3Txt="",vm.lifecycleModel.fromValue="",vm.lifecycleModel.toValue=""}function setAsStartDate(){vm.fromTo=!1,vm.endDateVisible=!1,vm.startDateVisible=!0,vm.descriptionVisible=!1,vm.descriptionChangeVisible=!1,vm.versionVisible=!1,vm.yearVisible=!1,vm.yearChangeVisible=!1,vm.requesterVisible=!1,vm.lifecycleModel.year="",vm.lifecycleModel.endDate="",vm.lifecycleModel.details="",vm.lifecycleModel.sequenceVersion="",vm.lifecycleModel.requesterName="",vm.lifecycleModel.requesterName2="",vm.lifecycleModel.requesterName3="",vm.lifecycleModel.requesterNameTxt="",vm.lifecycleModel.requesterName2Txt="",vm.lifecycleModel.requesterName3Txt="",vm.lifecycleModel.fromValue="",vm.lifecycleModel.toValue=""}function setVersionAndDate(){vm.fromTo=!1,vm.endDateVisible=!1,vm.startDateVisible=!0,vm.descriptionVisible=!1,vm.descriptionChangeVisible=!1,vm.versionVisible=!0,vm.versionLabel="VERSION_NO",vm.yearVisible=!1,vm.yearChangeVisible=!1,vm.requesterVisible=!1,vm.lifecycleModel.year="",vm.lifecycleModel.endDate="",vm.lifecycleModel.details="",vm.lifecycleModel.requesterName="",vm.lifecycleModel.requesterName2="",vm.lifecycleModel.requesterName3="",vm.lifecycleModel.requesterNameTxt="",vm.lifecycleModel.requesterName2Txt="",vm.lifecycleModel.requesterName3Txt="",vm.lifecycleModel.fromValue="",vm.lifecycleModel.toValue=""}function setVersion(){vm.fromTo=!1,vm.endDateVisible=!1,vm.startDateVisible=!1,vm.descriptionVisible=!1,vm.descriptionChangeVisible=!1,vm.versionVisible=!0,vm.versionLabel="VERSION_NO",vm.yearVisible=!1,vm.yearChangeVisible=!1,vm.requesterVisible=!1,vm.lifecycleModel.year="",vm.lifecycleModel.endDate="",vm.lifecycleModel.details="",vm.lifecycleModel.requesterName="",vm.lifecycleModel.requesterName2="",vm.lifecycleModel.requesterName3="",vm.lifecycleModel.requesterNameTxt="",vm.lifecycleModel.requesterName2Txt="",vm.lifecycleModel.requesterName3Txt="",vm.lifecycleModel.fromValue="",vm.lifecycleModel.toValue=""}function setAsDatePeriod(){vm.fromTo=!1,vm.endDateVisible=!0,vm.startDateVisible=!0,vm.descriptionVisible=!1,vm.descriptionChangeVisible=!1,vm.versionVisible=!1,vm.yearVisible=!1,vm.yearChangeVisible=!1,vm.requesterVisible=!1,vm.lifecycleModel.year="",vm.lifecycleModel.details="",vm.lifecycleModel.sequenceVersion="",vm.lifecycleModel.requesterName="",vm.lifecycleModel.requesterName2="",vm.lifecycleModel.requesterName3="",vm.lifecycleModel.requesterNameTxt="",vm.lifecycleModel.requesterName2Txt="",vm.lifecycleModel.requesterName3Txt="",vm.lifecycleModel.fromValue="",vm.lifecycleModel.toValue=""}function setAsFromTo(){vm.fromTo=!0,vm.endDateVisible=!1,vm.startDateVisible=!1,vm.descriptionVisible=!1,vm.descriptionChangeVisible=!1,vm.versionVisible=!1,vm.yearVisible=!1,vm.yearChangeVisible=!1,vm.requesterVisible=!1,vm.lifecycleModel.year="",vm.lifecycleModel.details="",vm.lifecycleModel.sequenceVersion="",vm.lifecycleModel.requesterName="",vm.lifecycleModel.requesterName2="",vm.lifecycleModel.requesterName3="",vm.lifecycleModel.requesterNameTxt="",vm.lifecycleModel.requesterName2Txt="",vm.lifecycleModel.requesterName3Txt=""}function setAsRequesterwithDate(){vm.fromTo=!1,vm.endDateVisible=!1,vm.startDateVisible=!0,vm.descriptionVisible=!1,vm.descriptionChangeVisible=!1,vm.versionVisible=!1,vm.yearVisible=!1,vm.yearChangeVisible=!1,vm.requesterVisible=!0,vm.lifecycleModel.year="",vm.lifecycleModel.endDate="",vm.lifecycleModel.details="",vm.lifecycleModel.sequenceVersion="",vm.lifecycleModel.fromValue="",vm.lifecycleModel.toValue=""}function setAsDescriptionChange(){vm.fromTo=!1,vm.endDateVisible=!1,vm.startDateVisible=!1,vm.descriptionVisible=!1,vm.descriptionChangeVisible=!0,vm.versionVisible=!1,vm.yearVisible=!1,vm.yearChangeVisible=!1,vm.requesterVisible=!1,vm.lifecycleModel.startDate="",vm.lifecycleModel.endDate="",vm.lifecycleModel.year="",vm.lifecycleModel.details="",vm.lifecycleModel.sequenceVersion="",vm.lifecycleModel.requesterName="",vm.lifecycleModel.requesterName2="",vm.lifecycleModel.requesterName3="",vm.lifecycleModel.requesterNameTxt="",vm.lifecycleModel.requesterName2Txt="",vm.lifecycleModel.requesterName3Txt="",vm.lifecycleModel.fromValue="",vm.lifecycleModel.toValue=""}function setAsDescriptionWithDate(){vm.fromTo=!1,vm.endDateVisible=!1,vm.startDateVisible=!0,vm.descriptionVisible=!0,vm.descriptionChangeVisible=!1,vm.versionVisible=!1,vm.yearVisible=!1,vm.yearChangeVisible=!1,vm.requesterVisible=!1,vm.lifecycleModel.endDate="",vm.lifecycleModel.year="",vm.lifecycleModel.sequenceVersion="",vm.lifecycleModel.requesterName="",vm.lifecycleModel.requesterName2="",vm.lifecycleModel.requesterName3="",vm.lifecycleModel.requesterNameTxt="",vm.lifecycleModel.requesterName2Txt="",vm.lifecycleModel.requesterName3Txt="",vm.lifecycleModel.fromValue="",vm.lifecycleModel.toValue=""}function translateToEnglish(key){var translateText="";return translateText=$translate.instant(key,"","","en")}function convertDate(value){if(!value)return"";var date=new Date(value),m_names=["01","02","03","04","05","06","07","08","09","10","11","12"],d_names=["","01","02","03","04","05","06","07","08","09","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25","26","27","28","29","30","31"],result="";return result=date.getFullYear()+"-"+m_names[date.getMonth()]+"-"+d_names[date.getDate()]}function convertToDate(){vm.lifecycleModel&&vm.lifecycleModel.dateFiled&&(vm.lifecycleModel.dateFiled=_parseDate(vm.lifecycleModel.dateFiled)),vm.lifecycleModel&&vm.lifecycleModel.startDate&&(vm.lifecycleModel.startDate=_parseDate(vm.lifecycleModel.startDate)),vm.lifecycleModel&&vm.lifecycleModel.endDate&&(vm.lifecycleModel.endDate=_parseDate(vm.lifecycleModel.endDate))}function _parseDate(value){var dateArray=value.split("-");3!==dateArray.length&&console.error("_parseDate error not 3 parts");var aDate=new Date(dateArray[0],dateArray[1]-1,dateArray[2]);return aDate}function _setIdNames(){var scopeId="_"+$scope.$id;vm.lifecycleDetailsFormId="life_detail_form"+scopeId,vm.dateSubId="date_submitted"+scopeId,vm.controlNumId="control_num"+scopeId,vm.regActivityId="reg_activity_type"+scopeId,vm.seqDescriptId="sequence_type"+scopeId,vm.startDateId="start_date"+scopeId,vm.dateId="dated"+scopeId,vm.endDateId="end_date"+scopeId,vm.yearId="year"+scopeId,vm.yearChangeId="year_change"+scopeId,vm.descriptId="brief_desc"+scopeId,vm.versionId="version_no"+scopeId,vm.activityLeadId="activity_lead"+scopeId,vm.requesterNameId="requester_name"+scopeId,vm.requesterNameId2="requester_name2"+scopeId,vm.requesterNameId3="requester_name3"+scopeId,vm.descriptChangeId="brief_desc_change"+scopeId,vm.fromValueId="fromValue"+scopeId,vm.toValueId="toValue"+scopeId}var vm=this;vm.activityList=TransactionLists.getActivityTypes(),vm.selfLifeUnitsList=TransactionLists.getShelfLifeUnitsList(),vm.activityTypeList=[],vm.pharmaList=[],vm.biolList=[],vm.postMarketList=[],vm.consumHealthList=[],vm.veterinaryList=[],vm.clinicalBioList=[],vm.clinicalPhaList=[],vm.sequenceList=[],vm.descriptionList=[],vm.requesterList=[],vm.lifecycleModel=vm.lifecycleRecord,vm.endDateVisible=!1,vm.yearVisible=!1,vm.yearChangeVisible=!1,vm.requesterVisible=!1,vm.descriptionVisible=!1,vm.fromTo=!1,vm.descriptionChangeVisible=!1,vm.versionVisible=!1,vm.ectd=!1,vm.popOpened=!1,vm.alerts=[!1,!1],vm.dateOptions={showWeeks:!1},vm.lang=$translate.proposedLanguage()||$translate.use(),vm.descriptionObj=TransactionLists.getTransactionDescriptions(),vm.leadList=[],vm.activityTypeMapping={"B02-20160301-014":TransactionLists.getCtaType(),"B02-20160301-015":TransactionLists.getCta_aType(),"B02-20160301-072":TransactionLists.getPreCtaType()},vm.updateSummary=0,vm.showSummary=!1,vm.focusSummary=0,vm.dateFormatError=[{type:"required",displayAlias:"MSG_ERR_MAND"},{type:"date",displayAlias:"MSG_ERR_DATE_FORMAT"},{type:"min",displayAlias:"MSG_ERR_INVALID_END_DATE"}],vm.minLength6Error=[{type:"required",displayAlias:"MSG_ERR_MAND"},{type:"minlength",displayAlias:"MSG_LENGTH_6NUM"}],vm.requiredOnly=[{type:"required",displayAlias:"MSG_ERR_MAND"}],vm.numberError=[{type:"required",displayAlias:"MSG_ERR_MAND"},{type:"number",displayAlias:"TYPE_NUMBER"}],vm.$onInit=function(){_setIdNames()},vm.$onChanges=function(changes){changes.dossierType&&(vm.dossierType=changes.dossierType.currentValue,vm.dossierType===TransactionLists.getPharmaceuticalValue()?vm.leadList=TransactionLists.getActivityLeadListByD22():vm.dossierType===TransactionLists.getBiologicValue()?vm.leadList=TransactionLists.getActivityLeadListByD21():vm.dossierType===TransactionLists.getVeterinaryValue()?vm.leadList=TransactionLists.getActivityLeadListByD24():vm.dossierType===TransactionLists.getClinicalValue()?vm.leadList=TransactionLists.getActivityLeadListByD26():vm.leadList=[],vm.lifecycleModel.activityLead="",vm.lifecycleModel.activityType="",vm.lifecycleModel.descriptionValue="",setDetailsAsNone()),changes.lifecycleRecord&&_updateLocalModel(changes.lifecycleRecord.currentValue),changes.isEctd&&(vm.ectd=changes.isEctd.currentValue),changes.sequenceUpdated&&!changes.lifecycleRecord&&vm.lifecycleRecord&&(vm.lifecycleModel.sequence=vm.lifecycleRecord.sequence,_updateLocalModel(vm.lifecycleRecord)),changes.showErrorSummary&&(vm.showSummary=changes.showErrorSummary.currentValue,vm.updateErrorSummaryState()),changes.errorSummaryUpdate&&vm.updateErrorSummaryState()},$scope.$watch("lifecycleCtrl.lifecycleDetailsForm.$dirty",function(){vm.lifecycleDetailsForm.$dirty&&vm.isDetailValid({state:!1})},!0),$scope.$watch("lifecycleCtrl.lifecycleDetailsForm.$error",function(){vm.updateErrorSummaryState(),vm.updateErrorSummary()},!0),vm.userChanged=function(e){"requesterName"==e?vm.lifecycleModel.requesterName=vm.retrieveUser(vm.lifecycleModel.requesterNameTxt):"requesterName2"==e?vm.lifecycleModel.requesterName2=vm.retrieveUser(vm.lifecycleModel.requesterName2Txt):"requesterName3"==e&&(vm.lifecycleModel.requesterName3=vm.retrieveUser(vm.lifecycleModel.requesterName3Txt))},vm.updateErrorSummaryState=function(){vm.updateSummary=vm.updateSummary+1},vm.retrieveUser=function(userName){for(var i=0;i<vm.requesterList.length;i++){var user=vm.requesterList[i];if(user.en==userName)return user}return userName},vm.openStartDate=function(){vm.startDateOpen=!0},vm.openEndDate=function(){vm.endDateOpen=!0},vm.openFiledDate=function(){vm.filedDateOpen=!0},vm.disableDeleteState=function(){if(!vm.ectd)return!0;var value=parseInt(vm.lifecycleModel.sequence);return value!=vm.enableDeleteIndex()},vm.selectActivityLeadList=function(){if(!vm.dossierType)return void(vm.leadList=[]);switch(vm.dossierType){case TransactionLists.getPharmaceuticalValue():vm.leadList=TransactionLists.getActivityLeadListByD22();break;case TransactionLists.getBiologicValue():vm.leadList=TransactionLists.getActivityLeadListByD21();break;case TransactionLists.getVeterinaryValue():vm.leadList=TransactionLists.getActivityLeadListByD24();break;case TransactionLists.getClinicalValue():vm.leadList=TransactionLists.getActivityLeadListByD26();break;default:vm.leadList=[]}},vm.selectActivityList=function(){if(!vm.lifecycleModel.activityLead)return void(vm.activityTypeList=[]);switch((!vm.activityList||vm.activityList.length<1)&&(vm.activityList=TransactionLists.getActivityTypes()),vm.lifecycleModel.activityLead){case TransactionLists.getBiologicalLeadValue():0==vm.biolList.length&&(vm.biolList=ActivityFormFilterService.getBiolRAList(vm.activityList)),0==vm.clinicalBioList.length&&(vm.clinicalBioList=ActivityFormFilterService.getClinicalBioList(vm.activityList)),vm.dossierType===TransactionLists.getBiologicValue()?vm.activityTypeList=vm.biolList:vm.activityTypeList=vm.clinicalBioList;break;case TransactionLists.getPharmaLeadValue():0==vm.pharmaList.length&&(vm.pharmaList=ActivityFormFilterService.getPharmaRAList(vm.activityList)),0==vm.clinicalPhaList.length&&(vm.clinicalPhaList=ActivityFormFilterService.getClinicalPhaList(vm.activityList)),vm.dossierType===TransactionLists.getPharmaceuticalValue()?vm.activityTypeList=vm.pharmaList:vm.activityTypeList=vm.clinicalPhaList;break;case TransactionLists.getPostMarketLeadValue():0==vm.postMarketList.length&&(vm.postMarketList=ActivityFormFilterService.getPostMarketRAList(vm.activityList)),vm.activityTypeList=vm.postMarketList;break;case TransactionLists.getConsumHealthLeadValue():0==vm.consumHealthList.length&&(vm.consumHealthList=ActivityFormFilterService.getConsumHealthList(vm.activityList)),vm.activityTypeList=vm.consumHealthList;break;case TransactionLists.getVeterinaryLeadValue():0==vm.veterinaryList.length&&(vm.veterinaryList=ActivityFormFilterService.getVeterinaryList(vm.activityList)),vm.activityTypeList=vm.veterinaryList;break;default:vm.lifecycleModel.activityLead&&console.warn("Not a valid lead choice"),vm.activityTypeList=[]}if(vm.lifecycleModel.activityType){var temp=$filter("filter")(vm.activityTypeList,{id:vm.lifecycleModel.activityType.id})[0];vm.lifecycleModel.activityType=temp}vm.lifecycleModel.activityType?vm.setSequenceList():(vm.lifecycleModel.activityTypeDisplay="",vm.lifecycleModel.descriptionValue="",
vm.descriptionList="",setDetailsAsNone(),vm.setConcatDetails()),vm.updateErrorSummaryState()},vm.setSequenceList=function(){if(!vm.lifecycleModel.activityType)return vm.lifecycleModel.activityTypeDisplay="",vm.lifecycleModel.descriptionValue="",vm.descriptionList="",setDetailsAsNone(),void vm.setConcatDetails();var value=vm.lifecycleModel.activityType.id,temp=vm.lifecycleModel.descriptionValue;switch(vm.lifecycleModel.activityTypeDisplay=vm.lifecycleModel.activityType.id,vm.lifecycleModel.descriptionValue="",value){case"B02-20160301-001":"B14-20160301-11"===vm.lifecycleModel.activityLead?vm.descriptionList=TransactionLists.getV_AndsType():vm.descriptionList=TransactionLists.getAndsType();break;case"B02-20160301-018":"B14-20160301-11"===vm.lifecycleModel.activityLead?vm.descriptionList=TransactionLists.getV_DinaType():vm.descriptionList=TransactionLists.getDinaType();break;case"B02-20160301-019":vm.descriptionList=TransactionLists.getDinbType();break;case"B02-20160301-031":vm.descriptionList=TransactionLists.getEundsType();break;case"B02-20160301-032":vm.descriptionList=TransactionLists.getEusndsType();break;case"B02-20160301-038":"B14-20160301-11"===vm.lifecycleModel.activityLead?vm.descriptionList=TransactionLists.getV_Level3Type():vm.descriptionList=TransactionLists.getLevel3Type();break;case"B02-20160301-046":"B14-20160301-11"===vm.lifecycleModel.activityLead?vm.descriptionList=TransactionLists.getV_MpncType():vm.descriptionList=TransactionLists.getMPNCType();break;case"B02-20160301-047":"B14-20160301-11"===vm.lifecycleModel.activityLead?vm.descriptionList=TransactionLists.getV_MpndsType():vm.descriptionList=TransactionLists.getMPNDSType();break;case"B02-20160301-049":"B14-20160301-11"===vm.lifecycleModel.activityLead?vm.descriptionList=TransactionLists.getV_MpsndsType():vm.descriptionList=TransactionLists.getMPSNDSType();break;case"B02-20160301-050":"B14-20160301-11"===vm.lifecycleModel.activityLead?vm.descriptionList=TransactionLists.getV_NcType():vm.descriptionList=TransactionLists.getNcType();break;case"B02-20160301-051":"B14-20160301-11"===vm.lifecycleModel.activityLead?vm.descriptionList=TransactionLists.getV_NdsType():vm.descriptionList=TransactionLists.getNdsType();break;case"B02-20160301-070":vm.descriptionList=TransactionLists.getPdcType();break;case"B02-20160301-071":vm.descriptionList=TransactionLists.getPdcBType();break;case"B02-20160301-067":vm.descriptionList=TransactionLists.getPANDType();break;case"B02-20160301-068":vm.descriptionList=TransactionLists.getPBRERCType();break;case"B02-20160301-069":vm.descriptionList=TransactionLists.getPBRERPVType();break;case"B02-20160301-075":vm.descriptionList=TransactionLists.getPRNDSType();break;case"B02-20160301-077":vm.descriptionList=TransactionLists.getPRSNDSType();break;case"B02-20160301-078":vm.descriptionList=TransactionLists.getpSurCType();break;case"B02-20160301-079":"B14-20160301-11"===vm.lifecycleModel.activityLead?vm.descriptionList=TransactionLists.getV_PsurPvType():vm.descriptionList=TransactionLists.getpSurPvType();break;case"B02-20160301-080":vm.descriptionList=TransactionLists.getRmpPvType();break;case"B02-20160301-082":"B14-20160301-11"===vm.lifecycleModel.activityLead?vm.descriptionList=TransactionLists.getV_SandsType():vm.descriptionList=TransactionLists.getSandsType();break;case"B02-20160301-084":"B14-20160301-11"===vm.lifecycleModel.activityLead?vm.descriptionList=TransactionLists.getV_SndsType():vm.descriptionList=TransactionLists.getSndsType();break;case"B02-20160301-085":vm.descriptionList=TransactionLists.getSndsCType();break;case"B02-20160301-088":"B14-20160301-11"===vm.lifecycleModel.activityLead?vm.descriptionList=TransactionLists.getV_UdraType():vm.descriptionList=TransactionLists.getUdraType();break;case"B02-20160301-089":vm.descriptionList=TransactionLists.getYbprType();break;case"B02-20160301-028":vm.descriptionList=TransactionLists.getDSurType();break;case"B02-20160301-043":"B14-20160301-11"===vm.lifecycleModel.activityLead?vm.descriptionList=TransactionLists.getV_MpdinType():vm.descriptionList=TransactionLists.getMPDINType();break;case"B02-20160301-020":vm.descriptionList=TransactionLists.getDindType();break;case"B02-20160301-021":vm.descriptionList=TransactionLists.getDinfType();break;case"B02-20190627-01":vm.descriptionList=TransactionLists.getIRSRPVType();break;case"B02-20190627-02":vm.descriptionList=TransactionLists.getPAPVType();break;case"B02-20190627-03":vm.descriptionList=TransactionLists.getPSAPVType();break;case"B02-20190627-04":vm.descriptionList=TransactionLists.getRCPVType();break;case"B02-20190627-05":vm.descriptionList=TransactionLists.getREGPVType();break;case"B02-20190627-06":vm.descriptionList=TransactionLists.getSANDSCType();break;case"B02-20160819-01":vm.descriptionList=TransactionLists.getPostDINType();break;case"B02-20190627-07":vm.descriptionList=TransactionLists.getEUANDSType();break;case"B02-20190627-08":vm.descriptionList=TransactionLists.getEUSANDSType();break;case"B02-20160301-041":vm.descriptionList=TransactionLists.getV_MpandsType();break;case"B02-20160301-048":vm.descriptionList=TransactionLists.getV_MpsandsType();break;case"B02-20180912-01":vm.descriptionList=TransactionLists.getV_RccType();break;default:try{vm.descriptionList=vm.activityTypeMapping[value]}catch(e){vm.descriptionList=""}}temp&&vm.descriptionList.indexOf(temp)!==-1?vm.lifecycleModel.descriptionValue=temp:setDetailsAsNone()},vm.setDetailsState=function(){var value=vm.lifecycleModel.descriptionValue;if(!vm.lifecycleModel.activityType.id)return void(vm.descriptionList=[]);switch(value){case vm.descriptionObj.ADMINISTRATIVE:case vm.descriptionObj.BENEFIT_RISK_ASSESS:case vm.descriptionObj.CANCEL_LETTER:case vm.descriptionObj.CHANGE_TO_DIN:case vm.descriptionObj.DIN_DISCONTINUED:case vm.descriptionObj.DRUG_NOTIF_FORM:case vm.descriptionObj.FOREIGN_SAFETY_NOTIFICATION:case vm.descriptionObj.INITIAL:case vm.descriptionObj.NOTIFICATION_CHANGE:case vm.descriptionObj.NOTIFICATION_INTERRUPT_SALE:case vm.descriptionObj.PANDEMIC_APPL:case vm.descriptionObj.POST_CLEARANCE_DATA:case vm.descriptionObj.POST_MARKET_SURV:case vm.descriptionObj.POST_AUTH_DIV1_CHANGE:case vm.descriptionObj.PRESUB_MEETING_PKG:case vm.descriptionObj.PRIORITY_REVIEW_RQ:case vm.descriptionObj.PRISTINE_PM:case vm.descriptionObj.PRISTINE_PM_2LANG:case vm.descriptionObj.PUB_RELEASE_INFO:case vm.descriptionObj.RESSESS_ORDER:case vm.descriptionObj.WRITTEN_CONSULT_REQ:case vm.descriptionObj.RECON_DECIS_LTR_INTENT:case vm.descriptionObj.RECON_DECIS_RQ_RECON:case vm.descriptionObj.RECON_DECIS_OTHER_INFO:case vm.descriptionObj.LABEL_PREAPPROVAL_2LANG:case vm.descriptionObj.SIGNAL_WORK_UP:case vm.descriptionObj.PRESUB_MEETING_RQ:case vm.descriptionObj.CORR_PATENT_MED:case vm.descriptionObj.ALLEGATION_NOTICE:case vm.descriptionObj.FORM_IV:case vm.descriptionObj.FORM_V:case vm.descriptionObj.CONSENT_LTR:case vm.descriptionObj.DATA_PROTECT_CORRESP:case vm.descriptionObj.SEQUENCE_CLEANUP:case vm.descriptionObj.TEST_STUDIES_ORDER:case vm.descriptionObj.TERM_COND_COMM:setDetailsAsNone(),vm.setConcatDetails();break;case vm.descriptionObj.COMMENTS_NOC:case vm.descriptionObj.COMMENTS_SUMMARY_BASIS:case vm.descriptionObj.COMMENTS_REGULARTORY_DECISION:case vm.descriptionObj.MEETING_MINUTES:case vm.descriptionObj.ADVISEMENT_LETTER_RESPONSE:case vm.descriptionObj.ADV_COMP_REQ:case vm.descriptionObj.ISSUE_SAFETY_REQUEST:case vm.descriptionObj.MHPD_RQ_RESPONSE:case vm.descriptionObj.NOC_RESPONSE:case vm.descriptionObj.NOD_RESPONSE:case vm.descriptionObj.NON_RESPONSE:case vm.descriptionObj.QHSC_RQ_RESPONSE:case vm.descriptionObj.CHSC_RQ_RESPONSE:case vm.descriptionObj.QCHSC_RQ_RESPONSE:case vm.descriptionObj.PATIENT_SAFETY_INFO:case vm.descriptionObj.SDN_RESPONSE:case vm.descriptionObj.SCREENING_ACCEPT_RESPONSE:case vm.descriptionObj.NOL_RESPONSE:case vm.descriptionObj.CLARIF_RESPONSE:case vm.descriptionObj.CTN_ETHICS:case vm.descriptionObj.CTN_RESPONSE:setAsStartDate(),vm.setConcatDetails();break;case vm.descriptionObj.RMP_VERSION_DATE:case vm.descriptionObj.CSOtRMP:case vm.descriptionObj.DISSEM_LIST:case vm.descriptionObj.RISK_COMMUN_DOC:case vm.descriptionObj.CTN_INVESTIGATOR:case vm.descriptionObj.CTN_FORM_BROC_UPDATES:setVersionAndDate(),vm.setConcatDetails();break;case vm.descriptionObj.CTN_INFORMED:case vm.descriptionObj.CTN_PROTOCOL_INFO_UPDATE:case vm.descriptionObj.CTN_PROTOCOL_UPDATE:case vm.descriptionObj.CTN_IMPD_UPDATE:setVersion(),vm.setConcatDetails();break;case vm.descriptionObj.FOR_PERIOD:setAsDatePeriod(),vm.setConcatDetails();break;case vm.descriptionObj.UNSOLICITED_DATA:case vm.descriptionObj.CTN_ADMINISTRATIVE:case vm.descriptionObj.CTN_APPENDIX:case vm.descriptionObj.CTN_NEW_MANUFACTURING:case vm.descriptionObj.CTN_CONTACT:case vm.descriptionObj.CTN_SAFETY:case vm.descriptionObj.CTN_SOURCE:case vm.descriptionObj.CTN_STUDY_DISC:setAsDescription(),vm.setConcatDetails();break;case vm.descriptionObj.YEAR_LIST_OF_CHANGE:setAsDescriptionYear(),vm.setConcatDetails();break;case vm.descriptionObj.BE_CLARIF_RESPONSE:case vm.descriptionObj.CLIN_CLARIF_RESPONSE:case vm.descriptionObj.EMAIL_RQ_RESPONSE:case vm.descriptionObj.HSC_RQ_RESPONSE:case vm.descriptionObj.LABEL_CLARIF_RESPONSE:case vm.descriptionObj.NONCLIN_CLARIF_RESPONSE:case vm.descriptionObj.PROCESSING_CLARIF_RESPONSE:case vm.descriptionObj.QUAL_CLIN_CLARIF_RESPONSE:case vm.descriptionObj.QUAL_CLARIF_RESPONSE:case vm.descriptionObj.SCREENING_CLARIF_RESPONSE:case vm.descriptionObj.PHONE_RQ_RESPONSE:setAsRequesterwithDate(),vm.setConcatDetails();break;case vm.descriptionObj.POST_NOC_CHANGE:setAsDescriptionChange(),vm.setConcatDetails();break;case vm.descriptionObj.CTN_DATA:setAsDescriptionWithDate(),vm.setConcatDetails();break;case vm.descriptionObj.YEAR:setAsYearOnly(),vm.setConcatDetails();break;case vm.descriptionObj.CTN_SHELF_PD:case vm.descriptionObj.CTN_SHELF_DS:setAsFromTo(),vm.setConcatDetails();break;default:setDetailsAsNone(),vm.setConcatDetails()}},vm.setConcatDetails=function(){var startDate="",endDate="",concatText="",enDescription=translateToEnglish(vm.lifecycleModel.descriptionValue);vm.descriptionVisible&&!vm.yearChangeVisible&&(concatText=vm.startDateVisible?enDescription+" - "+vm.lifecycleModel.details:enDescription+"\n"+vm.lifecycleModel.details),vm.startDateVisible&&(startDate=convertDate(vm.lifecycleModel.startDate),concatText=vm.versionVisible?" dated "+startDate:(concatText?concatText:enDescription)+" dated "+startDate),vm.endDateVisible&&(endDate=convertDate(vm.lifecycleModel.endDate),concatText=enDescription+" "+startDate+" to "+endDate),vm.versionVisible&&(concatText=vm.lifecycleModel.descriptionValue===vm.descriptionObj.RMP_VERSION_DATE?enDescription+" "+vm.lifecycleModel.sequenceVersion+concatText:vm.lifecycleModel.descriptionValue===vm.descriptionObj.CTN_PROTOCOL_INFO_UPDATE?"CTN-Protocol version "+vm.lifecycleModel.sequenceVersion+" and Informed Consent Form version "+vm.lifecycleModel.sequenceVersion+" Update ":enDescription+" version "+vm.lifecycleModel.sequenceVersion+concatText),vm.yearChangeVisible&&(concatText=vm.lifecycleModel.year+", "+vm.lifecycleModel.details),vm.yearVisible&&(concatText=vm.lifecycleModel.year),vm.descriptionChangeVisible&&(concatText=enDescription+"\n"+vm.lifecycleModel.detailsChange),vm.fromTo&&(concatText=enDescription+" From "+vm.lifecycleModel.fromValue+" To "+vm.lifecycleModel.toValue),concatText||(concatText=enDescription),vm.lifecycleModel.sequenceConcat=concatText},vm["delete"]=function(){vm.onDelete({id:vm.lifecycleModel.sequence})},vm.discardChanges=function(){vm.lifecycleDetailsForm.$pristine||(_updateLocalModel(vm.lifecycleRecord),vm.lifecycleDetailsForm.$setPristine(),vm.isDetailValid({state:vm.lifecycleDetailsForm.$valid}))},vm.updateValid=function(){vm.isDetailValid({state:vm.lifecycleDetailsForm.$valid&&!vm.lifecycleDetailsForm.$dirty})},vm.updateLivecycleModel=function(){vm.lifecycleDetailsForm.$valid?(vm.isDetailValid({state:!0}),vm.lifecycleDetailsForm.$setPristine(),vm.onUpdate({record:vm.lifecycleModel})):(vm.showSummary=!0,vm.makeFocused(),vm.updateErrorSummaryState())},vm.makeFocused=function(){vm.focusSummary=vm.focusSummary+1},vm.showError=function(ctrl){return!!ctrl&&!!(ctrl.$invalid&&ctrl.$touched||vm.showSummary&&ctrl.$invalid)},vm.addInstruct=function(value){angular.isUndefined(value)||value<vm.alerts.length&&(vm.alerts[value]=!0)},vm.closeAlert=function(value){angular.isUndefined(value)||value<vm.alerts.length&&(vm.alerts[value]=!1)}}angular.module("lcDetailsModule").component("cmpLifecycleDetails",{templateUrl:"app/scripts/components/lifecycleDetails/tpl-lifecycle-details_20191119_1020.html",controller:lifecycleRecCtrl,controllerAs:"lifecycleCtrl",bindings:{lifecycleRecord:"<",onUpdate:"&",isDetailValid:"&",onDelete:"&",enableDeleteIndex:"&",isEctd:"<",dossierType:"<",sequenceUpdated:"<",errorSummaryUpdate:"<",showErrorSummary:"<",updateErrorSummary:"&"}}),lifecycleRecCtrl.$inject=["ActivityFormFilterService","TransactionLists","$filter","$translate","$scope"]}(),function(){"use strict";angular.module("lifecycleList",["filterLists","lcDetailsModule","expandingTable"])}(),function(){"use strict";function lifecycleListCtrl($filter,TransactionLists){function _checkFirstRecord(){if(vm.lifecycleList&&0!==vm.lifecycleList.length&&!(vm.lifecycleList.length>1)){var record=angular.copy(vm.lifecycleList[0]);if(vm.ectdValue){for(var seqText=""+vm.startingSequence,pad=4-seqText.length,padText="",i=0;i<pad;i++)padText+="0";seqText=padText+seqText,record.sequence=seqText}else record.sequence="";vm.lifecycleList[0]=record}}function convertDate(value){if(!value)return value;var aDate=new Date(value),month=+(aDate.getMonth()+1);month<10&&(month="0"+month);var day=aDate.getDate();day<10&&(day="0"+day);var result=aDate.getFullYear()+"-"+month+"-"+day;return result}var vm=this;vm.selectRecord=-1,vm.isDetailsValid=!0,vm.lifecycleList=[],vm.setCollapsed=0,vm.deletableIndex=0,vm.oneRecord="",vm.ectdValue=!1,vm.isParentDirty=!1,vm.addFocused=!1,vm.resetCollapsed=!1,vm.activityTypes=[],vm.startingSequence=0,vm.seqUpdated=!1,vm.showSummary=!1,vm.finalState=!1,vm.requiredFlag=!0,vm.finalRecNum=0,vm.columnDef=[{label:"CONTROL_NUMBER",binding:"controlNumber",width:"8"},{label:"ACTIVITY_LEAD",binding:"activityLead",width:"12"},{label:"REG_ACTIVITY_TYPE",binding:"activityTypeDisplay",width:"30"},{label:"SEQUENCE_TYPE",binding:"sequenceConcat",width:"48"}],vm.$onInit=function(){vm.activityTypes=TransactionLists.getActivityTypes(),vm.selectRecord=0,vm.addFocused=!1,vm.startingSequence=0},vm.$onChanges=function(changes){changes.records&&(vm.lifecycleList=changes.records.currentValue,vm.lifecycleList.length<1&&vm.addTransaction(),vm.isDetailsValid=!0,vm.updateErrorState(),vm.startingSequence=0),changes.parentDirty&&(vm.isParentDirty=changes.parentDirty.currentValue),changes.isEctd&&(vm.ectdValue=changes.isEctd.currentValue,_checkFirstRecord()),changes.sequenceUpdated&&(vm.seqUpdated=changes.sequenceUpdated.currentValue),changes.showErrorSummary&&(vm.showSummary=changes.showErrorSummary.currentValue),changes.isFinal&&(vm.finalState=changes.isFinal.currentValue,vm.finalRecNum=0),changes.isFileLoaded&&changes.isFileLoaded.currentValue&&(vm.requiredFlag=!1)},vm.deleteRecord=function(aID){var idx=vm.lifecycleList.indexOf($filter("filter")(vm.lifecycleList,{sequence:aID},!0)[0]);vm.lifecycleList.splice(idx,1),vm.onUpdate({newList:vm.lifecycleList}),vm.selectRecord=-1,vm.isDetailsValid=!0,vm.deprecateSequence(),vm.updateErrorState(),vm.requiredFlag=!1,vm.resetCollapsed=!vm.resetCollapsed,vm.addFocused=!1},vm.lastRecordSequence=function(){return vm.getCurrentSequence()-1},vm.updateErrorState=function(){if(vm.lifecycleList&&0!==vm.lifecycleList.length){for(var i=0;i<vm.lifecycleList.length;i++)if(vm.lifecycleList[i].isSaved)return void(vm.oneRecord="is value");vm.oneRecord=""}else vm.oneRecord=""},vm.addTransaction=function(){var defaultTransaction=vm.getNewTransaction();vm.lifecycleList.unshift(defaultTransaction),vm.resetCollapsed=!vm.resetCollapsed,vm.selectRecord=0,vm.finalState&&vm.finalRecNum++,vm.addFocused=!1,vm.setValid(!1),vm.updateErrorState()},vm.setStartingSequence=function(){(isNaN(vm.startingSequence)||null===vm.startingSequence)&&(vm.startingSequence=0),vm.setSequenceValue({start:vm.startingSequence})},vm.isSelectedRecord=function(){return 0===vm.selectRecord},vm.isAddDisabled=function(){return vm.lifecycleList.length>0},vm.setValid=function(detailValid){vm.isDetailsValid=detailValid},vm.onUpdateLifecycleRecord=function(record){var idx=vm.lifecycleList.indexOf($filter("filter")(vm.lifecycleList,{sequence:record.sequence},!0)[0]);record.dateFiled=convertDate(record.dateFiled),record.startDate=convertDate(record.startDate),record.endDate=convertDate(record.endDate),record.isSaved=!0,vm.lifecycleList[idx]=angular.copy(record),vm.setValid(!0),vm.selectRecord=-1,vm.requiredFlag=!1,vm.resetCollapsed=!vm.resetCollapsed,vm.addFocused=!0,vm.updateErrorState()}}angular.module("lifecycleList").component("cmpLifecycleList",{templateUrl:"app/scripts/components/lifecycleList/tpl-lifecycle-list_20191119_1020.html",bindings:{records:"<",onUpdate:"&",isAmend:"&",isFinal:"<",isFileLoaded:"<",getNewTransaction:"&",setSequenceValue:"&",deprecateSequence:"&",showErrorSummary:"<",isEctd:"<",getDossierType:"<",parentDirty:"<",sequenceUpdated:"<",getCurrentSequence:"&"},controller:lifecycleListCtrl,controllerAs:"lifeListCtrl"}),lifecycleListCtrl.$inject=["$filter","TransactionLists"]}(),function(){"use strict";angular.module("fileIO",[])}(),function(){"use strict";function ngFileSelect(hpfbFileReader){function link(scope,element,attrs){scope.rootTag=attrs.rootTag,element.bind("change",function(e){scope.file=(e.srcElement||e.target).files[0],hpfbFileReader.readAsDataText(scope.file,scope).then(function(result){scope.hpfbFileSelect({fileContent:result})})})}var directive={link:link,restrict:"A",scope:{hpfbFileSelect:"&"}};return directive}angular.module("fileIO").directive("hpfbFileSelect",ngFileSelect),ngFileSelect.$inject=["hpfbFileProcessing"]}(),function(){"use strict";function FileSelectController(hpfbFileProcessing){var vm=this;vm.fileTypes=".xml, .hcsc",vm.modelCallback=function(fileContent){if(vm.status="",fileContent&&fileContent.jsonResult){var versionArray=fileContent.jsonResult[vm.rootElem].software_version.split(".");vm.versionExpected&&vm.versionExpected!==versionArray[0]?(fileContent=null,vm.status="MSG_ERR_FILE_VERSION"):(vm.status=fileContent.messages,vm.updateModelRoot({fileContent:fileContent}))}else vm.status=fileContent.messages,vm.updateModelRoot({fileContent:fileContent});angular.element(fileLoad).trigger("focus")}}angular.module("fileIO").component("hpfbFileSelect",{templateUrl:"app/scripts/components/fileIO/fileSelect_20191119_1020.html",controller:FileSelectController,bindings:{updateModelRoot:"&",rootElem:"@",versionExpected:"@"}}),FileSelectController.$inject=["hpfbFileProcessing"]}(),function(){"use strict";function FileWriteController(hpfbFileProcessing){function _generateFile(){"JSON"===vm.saveType.toUpperCase()?hpfbFileProcessing.writeAsJson(vm.jsonToSave,vm.fileName,vm.rootTag):"XML"===vm.saveType.toUpperCase()&&hpfbFileProcessing.writeAsXml(vm.jsonToSave,vm.fileName,vm.rootTag)}function _init(){vm.buttonDisabled?"true"===vm.buttonDisabled.toLowerCase()?vm.buttonDisabled=!0:"false"===vm.buttonDisabled.toLowerCase()?vm.buttonDisabled=!1:vm.buttonDisabled=!1:vm.buttonDisabled=!1}var vm=this;vm.$onInit=_init,vm.generate=_generateFile}angular.module("fileIO").component("hpfbFileSave",{templateUrl:"app/scripts/components/fileIO/fileSave_20191119_1020.html",controller:FileWriteController,bindings:{jsonToSave:"<",rootTag:"@",saveType:"@",buttonLabel:"@",buttonDisabled:"@"}}),FileWriteController.$inject=["hpfbFileProcessing"]}(),function(){"use strict";function fileReader($q){function onLoad(reader,deferred,scope,file){return function(){scope.$apply(function(){if(file){var splitFile=file.name.split("."),fileType=splitFile[splitFile.length-1];fileType.toLowerCase()==draft_file_type?(convertToJSONObjects(reader,scope),checkRootTagMatch(reader,scope)):"xml"===fileType.toLowerCase()?(convertXMLToJSONObjects(reader,scope),checkRootTagMatch(reader,scope)):(convertResult.parseResult=null,convertResult.messages=msg_err_fileType,reader.parseResult=convertResult)}deferred.resolve(reader.parseResult)})}}function onError(reader,deferred,scope){return function(){scope.$apply(function(){deferred.reject(msg_err_load)})}}function getReader(deferred,scope,file){var reader=new FileReader;return reader.onload=onLoad(reader,deferred,scope,file),reader.onError=onError(reader,deferred,scope),reader.parseResult=null,reader}function readAsDataText(file,scope){var deferred=$q.defer(),reader=getReader(deferred,scope,file);return file?reader.readAsText(file):(reader.parseResult=convertResult,reader.parseResult.messages="",reader.parseResult.jsonResult=null,deferred.resolve(reader.parseResult)),deferred.promise}function convertToJSONObjects(reader,scope){try{convertResult.jsonResult=JSON.parse(reader.result),convertResult.jsonResult[scope.rootTag].importFileType=draft_file_type,convertResult.messages=msg_success,reader.parseResult=convertResult}catch(e){convertResult.jsonResult=null,convertResult.messages=msg_err_jsonparse,reader.parseResult=convertResult}}function convertXMLToJSONObjects(reader,scope){var xmlConfig={escapeMode:!0,emptyNodeForm:"text",useDoubleQuotes:!0},xmlConverter=new X2JS(xmlConfig);convertResult.jsonResult=xmlConverter.xml_str2json(reader.result),convertResult.jsonResult&&convertResult.jsonResult[scope.rootTag]?(convertResult.messages=msg_success,convertResult.jsonResult[scope.rootTag].importFileType="xml"):convertResult.messages=msg_err_xmlparse,reader.parseResult=convertResult}function convertJSONObjectsToXML(jsonObj){var xmlConfig={escapeMode:!0,emptyNodeForm:"text",useDoubleQuotes:!0},jsonConverter=new X2JS(xmlConfig),xmlResult=null;return xmlResult=jsonConverter.json2xml_str(jsonObj)}function checkRootTagMatch(reader,scope){scope.rootTag&&reader.parseResult&&reader.parseResult.jsonResult&&(reader.parseResult.jsonResult[scope.rootTag]||(reader.parseResult.jsonResult=null,reader.parseResult.messages=msg_err_formType))}function jsonToFile(jsonObj,fileName,rootTag){if(jsonObj){var makeStrSave=JSON.stringify(jsonObj),blob=new Blob([makeStrSave],{type:"text/plain;charset=utf-8"});fileName?fileName+="."+draft_file_type:fileName="hpfbDraft."+draft_file_type,saveAs(blob,fileName)}}function xmlToFile(jsonObj,fileName,rootTag,xslName){if(jsonObj){var xmlResult=convertJSONObjectsToXML(jsonObj);xmlResult=xslName?'<?xml version="1.0" encoding="UTF-8"?><?xml-stylesheet  type="text/xsl" href="'+xslName+'"?>'+xmlResult:'<?xml version="1.0" encoding="UTF-8"?><?xml-stylesheet  type="text/xsl" href="REP_Combined.xsl"?>'+xmlResult;var blob=new Blob([xmlResult],{type:"text/plain;charset=utf-8"});fileName?fileName+=".xml":fileName="hpfbXML.xml",saveAs(blob,fileName)}}var msg_success="MSG_SUCCESS_LOAD",msg_err_jsonparse="MSG_ERR_JSONPARSE",msg_err_xmlparse="MSG_ERR_XMLPARSE",msg_err_load="MSG_ERR_FILE_LOAD",msg_err_fileType="MSG_ERR_FILE_TYPE",msg_err_formType="MSG_ERR_FORM_TYPE",draft_file_type="hcsc",convertResult={jsonResult:"",messages:""},service={readAsDataText:readAsDataText,writeAsJson:jsonToFile,writeAsXml:xmlToFile};return service}angular.module("fileIO").factory("hpfbFileProcessing",fileReader),fileReader.$inject=["$q"]}(),function(){"use strict";angular.module("expandingTable",[])}(),function(){"use strict";function expandingTableCtrl($filter,$scope){function _setNumberColumns(){vm.disableErrorCol&&(vm.numberCols=vm.numberCols+1)}function _recalculateColumnDefs(colDefs,numCols){var caretWidth=2,errorWidth=5,totalWidth=caretWidth+errorWidth,toSubtract=totalWidth/numCols,result=[];if(vm.disableErrorCol)return colDefs;for(var i=0;i<numCols;i++){var oneDef=angular.copy(colDefs[i]);oneDef.width>toSubtract&&(oneDef.width=oneDef.width-toSubtract),result.push(oneDef)}return result}function updateTableRow(textIndex){var selectIndex=parseInt(textIndex);selectIndex>=0&&vm.selectTableRow(selectIndex)}function _createArray(arraySize,initialVal){for(var anArray=[],i=0;i<arraySize;i++)anArray.push(initialVal);return anArray}var vm=this;vm.focused=!1,vm.columnDefinitions={},vm.disableExpand=!1,vm.tableRowExpanded=!1,vm.tableRowIndexCurrExpanded="",vm.tableRowIndexPrevExpanded="",vm.numberCols=1,vm.disableErrorCol=!1,vm.dayDataCollapse=_createArray(0,!0),vm.formName="expandTblCtrl.transcludeForm",vm.$onInit=function(){vm.listItems&&(vm.dayDataCollapse=_createArray(vm.listItems.length,!0))},vm.getExpandedState=function(row){return row===vm.tableRowIndexCurrExpanded},vm.$onChanges=function(changes){if(changes.listItems&&(vm.listItems?vm.dayDataCollapse=_createArray(vm.listItems.length,!0):vm.dayDataCollapse=_createArray(0,!0),vm.resetTableRow()),changes.tname&&changes.tname.currentValue&&(vm.formName=changes.tname.currentValue),changes.resetToCollapsed&&(vm.resetTableRow(),changes.selectRecord||updateTableRow(vm.selectRecord)),changes.selectRecord){var selectIndex=parseInt(changes.selectRecord.currentValue);selectIndex>=0?vm.selectTableRow(selectIndex):vm.resetTableRow()}changes.disableSelection&&(vm.disableExpand=changes.disableSelection.currentValue),changes.columnDef&&(vm.numberCols=changes.columnDef.currentValue.length,vm.columnDefinitions=_recalculateColumnDefs(changes.columnDef.currentValue,vm.numberCols),_setNumberColumns()),changes.disableErrColumn&&(vm.disableErrorCol=changes.disableErrColumn.currentValue,vm.numberCols=vm.columnDef.length,vm.disableErrorCol=!0,_setNumberColumns())},vm.formInError=function(aForm){return aForm&&aForm.$invalid?"Y":"N"},vm.deletedRow=function(){vm.tableRowExpanded=!1,vm.tableRowIndexCurrExpanded=""},vm.resetTableRow=function(){vm.tableRowIndexPrevExpanded="",vm.tableRowExpanded=!1,vm.tableRowIndexCurrExpanded="",vm.listItems?vm.dayDataCollapse=_createArray(vm.listItems.length,!0):_createArray(0,!0)},vm.dayDataCollapseFn=function(){for(var i=0;vm.listItems.length-1;i+=1)vm.dayDataCollapse.append("true")},vm.selectTableRow=function(index){vm.disableExpand||("undefined"===vm.dayDataCollapse?vm.dayDataCollapse=vm.dayDataCollapseFn():vm.tableRowExpanded===!1&&""===vm.tableRowIndexCurrExpanded?(vm.tableRowIndexPrevExpanded="",vm.tableRowExpanded=!0,vm.tableRowIndexCurrExpanded=index,vm.dayDataCollapse[index]=!1):vm.tableRowExpanded===!0&&(vm.tableRowIndexCurrExpanded===index?(vm.tableRowExpanded=!1,vm.tableRowIndexCurrExpanded="",vm.dayDataCollapse[index]=!0):(vm.tableRowIndexPrevExpanded=vm.tableRowIndexCurrExpanded,vm.tableRowIndexCurrExpanded=index,vm.dayDataCollapse[vm.tableRowIndexPrevExpanded]=!0,vm.dayDataCollapse[vm.tableRowIndexCurrExpanded]=!1)))},vm.isRequiredRecordSet=function(){return!(!vm.isRequiredRecord||vm.isInternal)},vm.isRecordShowsOutside=function(row){return vm.isInternal?!vm.dayDataCollapse[row]:!(vm.dayDataCollapse[row]&&(!vm.transcludeForm[row]||vm.transcludeForm[row].$valid))||vm.isRequiredRecordSet()},vm.isRecordShowsInside=function(row){return!vm.isInternal||!(vm.dayDataCollapse[row]&&vm.transcludeForm[row].$valid)}}angular.module("expandingTable").component("cmpExpandingTable",{templateUrl:"app/scripts/components/expandingTable/tpl-expanding-table_20191119_1020.html",controller:expandingTableCtrl,controllerAs:"expandTblCtrl",transclude:!0,bindings:{title:"@",preId:"@",listItems:"<",columnDef:"<",disableSelection:"<",isRequiredRecord:"<",isInternal:"<",selectRecord:"<",resetToCollapsed:"<",disableErrColumn:"@",tname:"@"}}),expandingTableCtrl.$inject=["$filter","$scope"]}(),function(){"use strict";angular.module("contactModule",["dataLists","hpfbConstants","errorMessageModule"])}(),function(){"use strict";function contactCtrl(getContactLists,ENGLISH,FRENCH,$scope){function _setIdNames(){var scopeId=vm.fldId+"_"+$scope.$id;vm.firstNameId="firstName"+scopeId,vm.lastNameId="lastName"+scopeId,vm.langCorrespondId="langCorrespond"+scopeId,vm.jobTitleId="jobTitle"+scopeId,vm.faxId="fax_number"+scopeId,vm.phoneNumberId="phoneNumber"+scopeId,vm.phoneExtId="phoneExt"+scopeId,vm.contactEmailId="contactEmail"+scopeId}var vm=this;vm.isEditable=!0,vm.ngModelOptSetting={updateOn:"blur"},vm.langCorresppond=[ENGLISH,FRENCH],vm.faxRequired=!1,vm.phoneReg=/^([0-9]*$)/,vm.contactModel={givenName:"",surname:"",initials:"",title:"",phone:"",phoneExt:"",fax:""},vm.inputModelOptions={updateOn:"blur"},vm.fldId="",vm.requiredOnly=[{type:"required",displayAlias:"MSG_ERR_MAND"}],vm.emailError=[{type:"required",displayAlias:"MSG_ERR_MAND"},{type:"email",displayAlias:"MSG_ERR_EMAIL_FORMAT"}],vm.phoneError=[{type:"required",displayAlias:"MSG_ERR_MAND"},{type:"pattern",displayAlias:"MSG_ERR_PHONE_FORMAT"}],vm.faxError=[{type:"required",displayAlias:"MSG_ERR_MAND"},{type:"pattern",displayAlias:"MSG_ERR_FAX_FORMAT"}],vm.$onInit=function(){vm.langList=[ENGLISH,FRENCH],_setIdNames()},vm.$onChanges=function(changes){changes.contactRecord&&(vm.contactModel=changes.contactRecord.currentValue),changes.isAmend&&(vm.isEditable=changes.isAmend.currentValue),changes.faxMandatory&&(vm.faxRequired=changes.faxMandatory.currentValue),changes.fieldSuffix&&(vm.fldId=changes.fieldSuffix.currentValue,vm.fldId||(vm.fldId=""))},vm.showError=function(ctrl){return!!ctrl&&!!(ctrl.$invalid&&ctrl.$touched||vm.showErrors()&&ctrl.$invalid)},$scope.$watch("contCtrl.contactForm.$error",function(){vm.updateErrorSummary()},!0)}angular.module("contactModule").component("cmpContactDetails",{templateUrl:"app/scripts/components/contactDetails/tpl-contact-details_20191119_1020.html",controller:contactCtrl,controllerAs:"contCtrl",bindings:{contactRecord:"<",onUpdate:"&",isAmend:"<",showErrors:"&",faxMandatory:"<",updateErrorSummary:"&",fieldSuffix:"<"}}),contactCtrl.$inject=["getContactLists","ENGLISH","FRENCH","$scope"]}(),function(){"use strict";angular.module("transactionInfo",["lifecycleList","filterLists","hpfbConstants","ui.bootstrap","dataLists","ui.select","addressModule","contactModule","transactionFeesModule","alertModule","errorMessageModule"])}(),function(){"use strict";function transactionInfoCtrl($scope,OTHER,YES,NO,getContactLists,getRoleLists,ENGLISH,FRENCH){function isEctdValue(){return vm.transactionModel.isEctd===YES}function isActivityChangesValue(){return vm.transactionModel.isActivityChanges===YES}function loadAdminSubData(){getContactLists.getAdminSubType().then(function(data){return vm.adminSubTypeList=data,!0})}function _setIdNames(){var scopeId="_"+$scope.$id;vm.companyId="company_id"+scopeId,vm.dossierId="dossier_id"+scopeId,vm.productNameId="prod_name"+scopeId,vm.productProtocolId="prod_protocol"+scopeId,vm.isEctdId="is_ectd"+scopeId,vm.solictedRqId="solicited_rq"+scopeId,vm.solicitedOtherId="solicited_rq_other"+scopeId,vm.companyNameId="company_noabbrev"+scopeId,vm.contactSameId="confirm_contact_valid"+scopeId,vm.isFeesId="is_fee_transaction"+scopeId,vm.typeId="dossier_type"+scopeId,vm.thirdPartyId="is_signed_3rd_party"+scopeId,vm.isAdminSubId="is_admin_submission"+scopeId,vm.adminSubTypeId="admin_sub_type"+scopeId,vm.isPriorityId="is_priority"+scopeId,vm.isNocId="is_noc"+scopeId}var vm=this;vm.ngModelOptSetting={updateOn:"blur"},vm.transactionModel={},vm.yesNoList=[YES,NO],vm.showThirdPartyNote=!1,vm.showAdminSub=!1,vm.showEctdSection=!0,vm.showSolicitedDetail=!1,vm.showOtherSolicitedDetail=!1,vm.activityEditable=!0,vm.isEctd=!1,vm.selectedDossierType="",vm.alerts=[!1,!1,!1,!1,!1,!1,!1,!1,!1],vm.userList=[],vm.formTypeList=getRoleLists.getFormTypes(),vm.lang=ENGLISH,vm.sequenceChange=!1,vm.requiredOnly=[{type:"required",displayAlias:"MSG_ERR_MAND"}],vm.min5Error=[{type:"required",displayAlias:"MSG_ERR_MAND"},{type:"minlength",displayAlias:"MSG_LENGTH_MIN5"}],vm.min7Error=[{type:"required",displayAlias:"MSG_ERR_MAND"},{type:"minlength",displayAlias:"TYPE_MINLENGTH"},{type:"pattern",displayAlias:"MSG_FORMAT_ALPHA_NUMBERIC"}],vm.showSummary=!1,vm.$onInit=function(){_setIdNames(),vm.setThirdParty(),vm.setAdminSubmission(),vm.updateEctdState(),vm.updateDossierTypeState(),
loadAdminSubData(),vm.finalState=!1,vm.displayResetBtn=!1},vm.$onChanges=function(changes){changes.transactionRoot&&(vm.transactionModel=changes.transactionRoot.currentValue,vm.setThirdParty(),vm.setAdminSubmission(),vm.updateEctdState(),vm.selectedDossierType=vm.transactionModel.ectd.dossierType),changes.language&&(vm.lang=changes.language.currentValue),changes.sequenceUpdated&&(vm.sequenceChange=changes.sequenceUpdated.currentValue),changes.showErrorSummary&&(vm.showSummary=changes.showErrorSummary.currentValue),changes.isFinal&&(vm.finalState=changes.isFinal.currentValue)},vm.isPB=function(){return"D21"===vm.transactionModel.ectd.dossierType||"D22"===vm.transactionModel.ectd.dossierType||(vm.transactionModel.ectd.isPriority="",vm.transactionModel.ectd.isNoc="",!1)},vm.isFeesIndicated=function(){return vm.transactionModel.isFees===YES},vm.getNewTransaction=function(){return vm.getTransaction()},vm.setSequence=function(start){(isNaN(start)||null===start)&&(start=0),vm.setStartingSequence({startVal:start})},vm.getNewRepContact=function(){return vm.getRepContact()},vm.subtractSequence=function(){vm.deprecateSequence()},vm.showFormErrors=function(){},vm.showErrors=function(){return vm.showSummary},vm.showError=function(ctrl){if(ctrl)return!!(ctrl.$invalid&&ctrl.$touched||vm.showSummary&&ctrl.$invalid)},vm.setTouch=function(ctrl){ctrl&&ctrl.$setTouched()},vm.updateActivityType=function(){vm.transactionModel.isThirdParty="",vm.transactionModel.isPriority="",vm.transactionModel.isNoc="",vm.transactionModel.isAdminSub="",vm.transactionModel.subType="",vm.showThirdPartyNote=!1,vm.showAdminSub=!1},vm.setThirdParty=function(){vm.showThirdPartyNote=vm.transactionModel.isThirdParty===YES},vm.updateEctdState=function(){isEctdValue()?vm.isEctd=!0:vm.isEctd=!1},vm.updateDossierTypeState=function(){vm.selectedDossierType=vm.transactionModel.ectd.dossierType,"D26"===vm.selectedDossierType?(vm.transactionModel.isPriority="",vm.transactionModel.isNoc="",vm.transactionModel.isAdminSub="",vm.transactionModel.subType="",vm.showAdminSub=!1,vm.transactionModel.isFees=""):(vm.transactionModel.ectd.productProtocol="","D24"===vm.selectedDossierType&&(vm.transactionModel.isPriority="",vm.transactionModel.isNoc="",vm.transactionModel.isFees=""))},vm.faxMandatory=function(){return"D21"===vm.selectedDossierType||"D22"===vm.selectedDossierType},vm.updateFeeState=function(){vm.transactionModel.isFees===YES?vm.transactionModel.feeDetails=vm.getFee():vm.transactionModel.feeDetails=null},vm.updateActivityChanges=function(){vm.activityEditable=isActivityChangesValue()},vm.updateRequesterList=function(list){list&&(vm.transactionModel.solicitedRequesterReord=list)},vm.setAdminSubmission=function(){vm.transactionModel.isAdminSub===YES?vm.showAdminSub=!0:(vm.showAdminSub=!1,vm.transactionModel.subType="")},vm.addInstruct=function(value){angular.isUndefined(value)||value<vm.alerts.length&&(vm.alerts[value]=!0)},vm.closeAlert=function(value){angular.isUndefined(value)||value<vm.alerts.length&&(vm.alerts[value]=!1)},vm.isFrench=function(){return vm.lang===FRENCH},vm.resetSpecificValues=function(){vm.finalState&&(vm.updateActivityType(),vm.setThirdParty(),vm.setAdminSubmission(),vm.transactionModel.ectd.lifecycleModel=vm.getNewTransaction(),vm.transactionModel.ectd.lifecycleRecord=angular.copy(vm.transactionModel.ectd.lifecycleModel),vm.transactionModel.projectManager1="",vm.transactionModel.projectManager2="",vm.transactionModel.isFees="",vm.transactionModel.feeDetails=null,vm.transactionModel.confirmContactValid=!1,vm.transactionModel.resetBtnClicked=!0)},$scope.$watch("transInfoCtrl.transInfoForm.$error",function(){vm.updateErrorSummary()},!0)}angular.module("transactionInfo").config(function(uiSelectConfig){uiSelectConfig.theme="select2"}).component("cmpTransactionInfo",{templateUrl:"app/scripts/components/transactionInfo/tpl-transaction-info_20191119_1020.html",controller:transactionInfoCtrl,controllerAs:"transInfoCtrl",bindings:{transactionRoot:"<",isAmend:"<",isFinal:"<",isFileLoaded:"<",getTransaction:"&",setStartingSequence:"&",getRepContact:"&",getFee:"&",resetEctd:"&",deprecateSequence:"&",language:"<",sequenceUpdated:"<",getCurrentSequence:"&",showErrorSummary:"<",updateErrorSummary:"&",defaultLifecycleRecord:"&"}}),transactionInfoCtrl.$inject=["$scope","OTHER","YES","NO","getContactLists","getRoleLists","ENGLISH","FRENCH"]}(),function(){"use strict";angular.module("transactionMainModule",["transactionInfo","transactionService","transactionLoadService","fileIO","services","dataLists","filterLists","numberFormat","errorSummaryModule","errorMessageModule"])}(),function(){"use strict";function TransactionMainCtrl(TransactionService,hpfbFileProcessing,$filter,$translate,$scope,ENGLISH,EXTERNAL_TYPE,$anchorScroll,$location){function _getFileName(){var date=new Date,filename="HCREPRT",month=date.getMonth()+1,day=date.getDate(),hours=date.getHours(),minutes=date.getMinutes(),separator="-";return month<10&&(month="0"+month),day<10&&(day="0"+day),hours<10&&(hours="0"+hours),minutes<10&&(minutes="0"+minutes),filename=filename+separator+date.getFullYear()+separator+month+separator+day+separator+hours+minutes,filename.toLowerCase()}function _transformFile(){return vm.transactionService.transformToFileObj(vm.transaction)}function _loadFileContent(fileContent){if(fileContent){var resultJson=fileContent.jsonResult;resultJson&&(vm.transactionService.transformFromFileObj(resultJson),vm.transaction={},vm.transaction=vm.transactionService.getModelInfo(),vm.isFinal=vm.transactionService.isFinal,vm.isFileLoaded=!0)}}function _setIdNames(){var scopeId="_"+$scope.$id;vm.formId="transaction_form"+scopeId,vm.privacyStatementID="privacy_statement"+scopeId}function goToErrorSummary(){var masterError=angular.element(document.querySelector("#master-error"));masterError&&($location.hash("master-error"),$anchorScroll())}var vm=this;vm.savePressed=!1,vm.userType=EXTERNAL_TYPE,vm.transactionService=new TransactionService,vm.rootTag=vm.transactionService.getRootTag(),vm.transaction=vm.transactionService.getModelInfo(),vm.showContent=_loadFileContent,vm.alerts=[!1,!1,!1],vm.lang=$translate.proposedLanguage()||$translate.use(),vm.sequenceUpdated=!1,vm.isFinal=!1,vm.isFileLoaded=!1,vm.updateSummary=0,vm.focusSummary=0,vm.transcludeList={},vm.alias={saveLifeRec:{type:"buttonSearch",buttonName:"saveLifecycleRec"},oneLifeRec:{type:"elementnoid",target:"transactionList"},one_payment_method:{type:"fieldset",parent:"fs_payment_methods"},one_fee_doc:{type:"element",target:"fs_fee_docs"}},vm.requiredOnly=[{type:"required",displayAlias:"MSG_ERR_MAND"}],vm.privacyStat=!1,vm.$onInit=function(){vm.updateSummary=vm.updateSummary+1,vm.updateSummary=vm.updateSummary+1,_setIdNames()},vm.saveJson=function(){var writeResult=_transformFile();vm.rootTag=vm.transactionService.getRootTag(),hpfbFileProcessing.writeAsJson(writeResult,_getFileName(),vm.rootTag),vm.savePressed=!0},vm.saveXML=function(){if(vm.transactionEnrolForm.$invalid)vm.focusSummary++,vm.updateErrorSummaryState(),vm.savePressed=!0,goToErrorSummary();else{var writeResult=_transformFile();hpfbFileProcessing.writeAsXml(writeResult,_getFileName(),vm.rootTag,vm.transactionService.getXSLFileName()),vm.savePressed=!1}},vm.updateErrorSummaryState=function(){vm.updateSummary=vm.updateSummary+1},vm.disableFinalXmlBtn=function(){return!!vm.isFinal&&!vm.transaction.resetBtnClicked},vm.getNewRepContact=function(){return vm.transactionService.createRepContact()},vm.setSequenceNumber=function(startVal){vm.transactionService.setSequenceNumber(startVal);vm.sequenceUpdated=!vm.sequenceUpdated},vm.updateAddressRecord=function(address){if(address){var idx=vm.company.addressList.indexOf($filter("filter")(vm.company.addressList,{addressID:address.addressID},!0)[0]);vm.company.addressList[idx]=address;var temp=vm.company.addressList;vm.company.addressList=[],vm.company.addressList=temp}},vm.isExtern=function(){return vm.userType==EXTERNAL_TYPE},vm.showErrors=function(){return vm.savePressed},vm.addInstruct=function(value){angular.isUndefined(value)||value<vm.alerts.length&&(vm.alerts[value]=!0)},vm.closeAlert=function(value){angular.isUndefined(value)||value<vm.alerts.length&&(vm.alerts[value]=!1)},vm.isFrench=function(){return vm.lang!==ENGLISH},vm.showError=function(ctrl){return!!vm.savePressed||!(!ctrl||ctrl.$untouched)&&(ctrl.$invalid&&ctrl.$touched||vm.savePressed&&ctrl.$invalid)}}angular.module("transactionMainModule").component("cmpTransactionMain",{templateUrl:"app/scripts/components/transactionMain/tpl-transaction-main_20191119_1020.html",controller:TransactionMainCtrl,controllerAs:"main"}),TransactionMainCtrl.$inject=["TransactionService","hpfbFileProcessing","$filter","$translate","$scope","ENGLISH","EXTERNAL_TYPE","$anchorScroll","$location"]}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,

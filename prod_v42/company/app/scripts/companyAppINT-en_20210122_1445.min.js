!function(){"use strict";angular.module("companyApp",["pascalprecht.translate","companyMain","companyLoadService","translations"])}(),function(){"use strict";function MainController(){var vm=this;vm.formType="INT"}angular.module("companyApp").controller("MainController",MainController)}(),function(){"use strict";angular.module("companyApp").config(["$translateProvider","$locationProvider",function($translateProvider,$locationProvider){$locationProvider.html5Mode({enabled:!0,requireBase:!1,rewriteLinks:!1}),$translateProvider.preferredLanguage("en"),$translateProvider.useLoader("customLoad"),$translateProvider.directivePriority(1),$translateProvider.useSanitizeValueStrategy(null),$translateProvider.forceAsyncReload(!0)}])}(),angular.module("translations",[]).config(["$translateProvider",function($translateProvider){$translateProvider.translations("en",{CITY:"City or Town",COUNTRY:"Country",PROVINCE:"Province",POSTAL:"Postal Code",PROVSTATE:"Province or State",STATE:"State",STREET:"Street Address",ZIP:"Zip Code",COMPANY:"Company",ADD_ADDRESS:"Add Address",CITY_TOWN:"City or Town",SAVE_ADDR:"Save Address",DELETE_ADDR:"Delete Address",ADDR_INFO:"Address Information",ADDR_DETAILS:"Address Details",ADDR_ROLE_LEGEND:"Select one or more roles for this company",ADDR_REP_ROLE_LEGEND:"Select one or more roles for this company representative",PRODUCTS_IMPORTED:"Imported Products",PRODUCT_TYPES:"Products imported by this Company",ALL_PRODUCTS:"All Products",SELECTED_PRODUCTS:"Some Products",IDENTIFY_PRODUCTS:"Provide the Dossier Identifiers for the products that are imported by this Company",ADD_DOSSIER_ID:"Add Dossier ID",COUNTRY_CHOOSE:"Choose a country",COUNTRY_SEARCH:"Select or Search for country",PROVINCELIST:"Province or State"}),$translateProvider.translations("fr",{CITY:"Ville",COUNTRY:"Pays",PROVINCE:"Province",POSTAL:"Code postal",PROVSTATE:"Province ou état",STATE:"État",STREET:"Rue",ZIP:"Code ZIP",COMPANY:"Compagnie",ADD_ADDRESS:"Ajouter Addresse",CITY_TOWN:"Ville",SAVE_ADDR:"Enregistrer l'adresse",DELETE_ADDR:"Supprimer Addresse",ADDR_INFO:"Information d'adresse",ADDR_DETAILS:"Détails de l'adresse",ADDR_ROLE_LEGEND:"Sélectionner un ou plusieurs rôles pour cette compagnie",ADDR_REP_ROLE_LEGEND:"Sélectionner un ou plusieurs rôles pour ce représentant de la compagnie",PRODUCTS_IMPORTED:"Produits importé",PRODUCT_TYPES:"Produits importé par cette compagnie",ALL_PRODUCTS:"Tous les produits",SELECTED_PRODUCTS:"Certain produits",IDENTIFY_PRODUCTS:"Fournir les numéros de dossier pour les produits importés par cette compagnie",ADD_DOSSIER_ID:"Ajouter un numéro de dossier",COUNTRY_CHOOSE:"Choisir un pays",COUNTRY_SEARCH:"Selectionner ou rechercher le pays",PROVINCELIST:"Province or State"}),$translateProvider.translations("en",{AB:"Alberta",BC:"British Columbia",MB:"Manitoba",NB:"New Brunswick",NL:"Newfoundland and Labrador",NT:"Northwest Territories",NS:"Nova Scotia",NU:"Nunavut",ON:"Ontario",PE:"Prince Edward Island",QC:"Quebec",SK:"Saskatchewan",YT:"Yukon",AL:"Alabama",AK:"Alaska",AZ:"Arizona",AR:"Arkansas",CA:"California",CO:"Colorado",CT:"Connecticut",DE:"Delaware",DC:"District of Columbia",FL:"Florida",GA:"Georgia",HI:"Hawaii",ID:"Idaho",IL:"Illinois",IN:"Indiana",IA:"Iowa",KS:"Kansas",KY:"Kentucky",LA:"Louisiana",ME:"Maine",MD:"Maryland",MA:"Massachusetts",MI:"Michigan",MN:"Minnesota",MS:"Mississippi",MO:"Missouri",MT:"Montana",NE:"Nebraska",NV:"Nevada",NH:"New Hampshire",NJ:"New Jersey",NM:"New Mexico",NY:"New York",NC:"North Carolina",ND:"North Dakota",OH:"Ohio",OK:"Oklahoma",OR:"Oregon",PA:"Pennsylvania",RI:"Rhode Island",SC:"South Carolina",SD:"South Dakota",TN:"Tennessee",TX:"Texas",UT:"Utah",VT:"Vermont",VA:"Virginia",WA:"Washington",WV:"West Virginia",WI:"Wisconsin",WY:"Wyoming"}),$translateProvider.translations("fr",{AB:"Alberta",BC:"Colombie-Britannique",PE:"Île-du-Prince-Édouard",MB:"Manitoba",NB:"Nouveau-Brunswick",NS:"Nouvelle-Écosse",NU:"Nunavut",ON:"Ontario",QC:"Québec",SK:"Saskatchewan",NL:"Terre-Neuve et Labrador",NT:"Territoires du Nord-Ouest",YT:"Yukon",AL:"Alabama",AK:"Alaska",AZ:"Arizona",AR:"Arkansas",CA:"Californie",NC:"Caroline du nord",SC:"Caroline du sud",CO:"Colorado",CT:"Connecticut",ND:"Dakota du nord",SD:"Dakota du sud",DE:"Delaware",DC:"District de Columbia",FL:"Floride",GA:"Géorgie",HI:"Hawaii",ID:"Idaho",IL:"Illinois",IN:"Indiana",IA:"Iowa",KS:"Kansas",KY:"Kentucky",NY:"L'état de New York",WA:"L'état de washington",LA:"Louisiane",ME:"Maine",MD:"Maryland",MA:"Massachusetts",MI:"Michigan",MN:"Minnesota",MS:"Mississippi",MO:"Missouri",MT:"Montana",NE:"Nebraska",NV:"Nevada",NH:"New Hampshire",NJ:"New Jersey",NM:"Nouveau-mexique",OH:"Ohio",OK:"Oklahoma",OR:"Oregon",PA:"Pennsylvanie",RI:"Rhode Island",TN:"Tennessee",TX:"Texas",UT:"Utah",VT:"Vermont",VA:"Virginie",WV:"Virginie-occidentale",WI:"Wisconsin",WY:"Wyoming"}),$translateProvider.translations("en",{FIRSTNAME:"First Name",LASTNAME:"Last Name",INITIALS:"Initials",LANGCORRESPOND:"Language of Correspondence",JOBTITLE:"Job Title",SALUTATION:"Salutation",SALUT_MR:"Mr.",SALUT_MS:"Ms.",SALUT_DR:"Dr.",SALUT_MRS:"Mrs.",ROLE_PRIMARY:"Primary",ROLE_SECONDARY:"Alternate",CONTACTEMAIL:"Email",FAX_NUMBER:"Fax Number",PHONE_EXT:"Phone Extension",ROLES:"Roles",PHONENUMBER:"Phone Number",CONTACT_INFO:"Company Representative Information",REP_CONTACT:"Regulatory Enrolment Process Contact",ONE_ROLE:"Role",CONTACT_DETAILS:"Company Representative Details",ADD_CONTACT:"Add REP Contact",CONTACT_ROLE_LEGEND:"Select one or more roles for this company representative",CONTACT_ROLE_INSTRUCT:"Company Representative Role Instructions",ADD_REPRES:"Add Company Representative",DELETE_REPRES:"Delete Company Rep.",SAVE_REPRES:"Save Company Rep.",IMP_COMPANY_NAME:"Canadian Importer Company Name"}),$translateProvider.translations("fr",{FIRSTNAME:"Prénom",LASTNAME:"Nom de famille",INITIALS:"Initiales",LANGCORRESPOND:"Langue de correspondance",JOBTITLE:"Titre",SALUTATION:"Appel",SALUT_MR:"M.",SALUT_MS:"Mme",SALUT_DR:"Dr.",SALUT_MRS:"Mlle",ROLE_PRIMARY:"Primaire",ROLE_SECONDARY:"Alterner",CONTACTEMAIL:"Courriel",FAX_NUMBER:"Numéro de télécopieur",PHONE_EXT:"Extension de téléphone",ADDR_ROLES:"Rôles",PHONENUMBER:"Numéro de téléphone",CONTACT_INFO:"Renseignements sur le représentant de la copmpagnie",REP_CONTACT:"Personne-ressource pour le PIR",ONE_ROLE:"Rôle",CONTACT_DETAILS:"Détails du représentant de la compagnie",ADD_CONTACT:"Ajouter la personne-ressource pour le PIR",CONTACT_ROLE_LEGEND:"Sélectionner un ou plusieurs rôles pour ce représentant de la compagnie",ADD_REPRES:"Ajouter un représentant de la compagnie",DELETE_REPRES:"Supprimer le représentant de la compagnie",SAVE_REPRES:"Enregistrer le représentant de la compagnie",ROLES:"Rôles",IMP_COMPANY_NAME:"Nom de la compagnie de l'importateur canadien"}),$translateProvider.translations("en",{APPL_STATUS:"Enrolment Status",ENROL_VERSION:"Enrolment Version",DATE_SAVED:"Date Last Saved",AMEND_ENROL:"Amend Enrolment",AMEND_MSG:"Edit records to be amended below.",REASON_AMEND:"Reason for filling"}),$translateProvider.translations("fr",{APPL_STATUS:"Statut de l'insciption",ENROL_VERSION:"Version de l'inscription",DATE_SAVED:" Date du dernier enregistrement",AMEND_ENROL:"Modifier l'inscription",AMEND_MSG:"Changer les enregistrements à modifier ci-dessous.",REASON_AMEND:"Raison de déposer"}),$translateProvider.translations("en",{SELECT_LOAD:"Select a file to load",MSG_SUCCESS_LOAD:"The file was loaded successfully",MSG_ERR_JSONPARSE:"Error: there was an error parsing the working file.",MSG_ERR_XMLPARSE:"Error: there was an error parsing the draft XML file.",MSG_ERR_FILE_LOAD:"Error: there was a problem loading the file.",MSG_ERR_FILE_TYPE:"Error: An invalid file type was selected.",MSG_ERR_FORM_TYPE:"Error: the wrong form type was selected for this form.",MSG_ERR_CHECKSUM_FAIL:"Error: the checksum in the file does not match the calculated checksum",MSG_ERR_FILE_VERSION:"Error: An invalid file version was selected."}),$translateProvider.translations("fr",{SELECT_LOAD:"Sélectionnez un fichier à charger",MSG_SUCCESS_LOAD:"Le fichier a été chargé avec succès",MSG_ERR_JSONPARSE:"Erreur: il y a eu une erreur en analysant le fichier de travail.",MSG_ERR_XMLPARSE:"Erreur: il y avait une erreur d'analyse du projet de fichier XML,",MSG_ERR_FILE_LOAD:"Erreur: il y a eu un problème lors du chargement du fichier.",MSG_ERR_FILE_TYPE:"Erreur: un type de fichier invalide a été sélectionné.",MSG_ERR_FORM_TYPE:"Erreur: le type de formulaire incorrect a été sélectionné pour ce formulaire.",MSG_ERR_CHECKSUM_FAIL:"Erreur: La somme de contrôle dans le fichier ne correspond pas à la somme de contrôle calculée.",MSG_ERR_FILE_VERSION:"Erreur: un version de fichier invalide a été sélectionné."}),$translateProvider.translations("en",{Y:"Yes",N:"No",ADD:"Add",DELETEROW:"Delete Row",SELECTEDROW:"Selected Row",REQUIRED:"(required)",ROLES_SELECT:"Select one or more roles for this record",NEW:"New",AMEND:"Amend",APPROVED:"Approved",FINAL:"Final",CLICK_TOGGLE:"Click to toggle the collapse or expand details for this address.",AMEND_RECORD:"Amend Record",en:"English",fr:"French",ADD_RECORD:"Add Record",SAVE_RECORD:"Save Record",DELETE_RECORD:"Delete Record",COPY_RECORD:"Copy Record",DISCARD_CHANGES:"Discard Changes",REPSECONDARY:"Alternate Regulatory Enrolment Process contact",REPPRIMARY:"Regulatory Enrolment Process contact",MAILING:"Regulatory Mailing / Annual Contact Address",BILLING:"Billing Address",MANUFACTURER:"Manufacturer / Sponsor Mailing Address",IMPORTER_ADDRESS:"Canadian Importer Mailing Address",CAN_IMP:"Canadian Importer Contact",CONTACTMAILING:"Regulatory Mailing / Annual Contact",CONTACTBILLING:"Billing Contact",CONTACTMANUFACTURER:"Manufacturer / Sponsor Contact",CONTACT_IMPORTER:"Importer Contact",APPROVE_FINAL:"Generate Final XML",SAVE_DRAFT:"Save Draft XML",PRIMARY:"Primary",SECONDARY:"Alternate",TOGGLE_EXPAND:"Click to toggle collapse or expand details of row",CONTROL_NUMBER:"Control Number",REP_CONTACT_INFO:"Regulatory Enrolment Process Contact Information",SAVE_CONTACT:"Save Contact",DELETE_CONTACT:"Delete Contact",COMPANY_ID:"Company Identifier",DOSSIER_ID:"Dossier Identifier",IMPORTER:"Importer",IMPORTERID:"Importer Company Identifier",IMPORTER_COMPANY_NAME:"Importer Company Name",IMPORTER_COMPANY_ID_IF:"Importer Company Identifier (if applicable)",IMPORTER_COMPANY_NAME_IF:"Importer Company Name (if applicable)",ERRORS:"Errors",UNKNOWN:"Unknown",BIOLOGIC:"Biologic",PHARMACEUTICAL:"Pharmaceutical",VETERINARY:"Veterinary",CLINICAL_TRIAL:"Clinical Trial",HELP_FILE_LOAD:"file load instructions",EXPAND:"Expand",HELP_ACTIVITY_MAIN:"Activity Instructions",HELP_ACTIVITY_REP:"Regulatory Enrolment Process Contact Instructions",CALENDAR:"Pick date from calendar",HIDE_CALENDAR:"Hide Calendar (escape key)",OTHER:"Other",HELP_REP_CONTACT:"Regulatory Enrolment Process Contact Instructions",OTHER_UNITS:"Units other details",COMPANYNAME:"Company Name",FULLLEGALNAME:" (Full Legal Name)",BUSINESSNUMBER:"Business Number",ACOMPANYNAME:"Company Name (Full legal name - no abbreviations)",COPY:"Copy",DELETE:"Delete",SAVE_WORKING:"Save Working Copy",COMPANY_NOABBREV:"Company Name (Full Legal Name)",CLOSE_ALERT:"Collapse instructions",COLLAPSE:"Collapse",CONTROL_NUM:"Control Number",OTHER_DETAILS:"Other - specify",PROD_NAME:"Product Name",PROD_NAME_HELP:"Product Name Instructions",PROP_NAME_HELP:"Proper, Common or Non-proprietary Name Instructions",RELATED_INFO_HELP:"Related Information Instructions",DOSSIER_TYPE:"Dossier Type",LEAST_5_CHAR:" (5 characters)","5_OR_6_CHAR":" ( 5 or 6 characters)",LEAST_7_CHAR:" (7 characters)",INCLUDE_AREA_CODE:" (including area code)",LEAST_6_DIGIT:" (6 digits only)",LEAST_5_DIGIT:" (5 digits only)",LEAST_9_CHAR:" (9 characters)",INSTRUCTION:"Instruction",RETURN_INSTRUCTION:"Return to instruction ",PRIVACY_NOTICE_STATEMENT:"Privacy Notice Statement",SECURITY_DISCLAIMER:"Security Disclaimer",PRIVACY_STATEMENT:"By submitting your personal information, you are consenting to its collection, use and disclosure in accordance with the Privacy Notice Statement.",FOOTNOTE_INSTRUCTION:"Instructions for completing sections on form",SECTION_IS_NOT_VISIBLE:"[ This section may not be visible. ]",FAX_NOT_AVAILABLE:" (Use 0000000000 if not available)",NOT_APPLICABLE:"Not applicable",D21:"Biologic",D22:"Pharmaceutical",D24:"Veterinary",D26:"Clinical Trial",BROWSER:"Browser",TABLE_EXPANDED_STATE:"Expanded State",PROTECTED_B:'Protected "B" when completed',ROUTING_ID:"Routing Identifier",REFERRER:" referrer",CHAR_6_DIGITS:" (a lowercase letter followed by 6 numbers)",FORMAT_TYPE_MINLENGTH:"Incorrect format - less than minimum length",FORMAT_TYPE_PATTERN:"Incorrect format - must be lowercase letter followed by six numbers"}),$translateProvider.translations("fr",{Y:"Oui",N:"Non",ADD:"fr_Add",DELETEROW:"fr_Delete Row",SELECTEDROW:"fr_Selected Row",REQUIRED:"(obligatoire)",ROLES_SELECT:"fr_Select one or more roles for this record",NEW:"Nouvelle",AMEND:"Modification",APPROVED:"fr_Approved",FINAL:"Finale",CLICK_TOGGLE:"fr_Click to toggle the collapse or expand details for this address.",AMEND_RECORD:"fr_Amend Record",en:"Anglais",fr:"Français",ADD_RECORD:"Ajouter un enregistrement",SAVE_RECORD:"Enregistrer",DELETE_RECORD:"Supprimer l'enregistrement",COPY_RECORD:"Copier",DISCARD_CHANGES:"Éliminer les modifications",REPSECONDARY:"Personne-resource supplémentaire pour le processus d'inscription réglemetaire",REPPRIMARY:"Personne-resource pour le processus d'inscription réglemetaire",MAILING:"Contact pour le l'address courrier réglementaire / adresse pour l'annuelle",BILLING:"Adresse de facturation",MANUFACTURER:"Adresse postale du fabricant / promoteur",IMPORTER_ADDRESS:"Adresse postale de l'importateur canadien",CONTACTMAILING:"Courrier réglementaire / adresse de personne-ressource pour l'annuelle",CAN_IMP:"Personne-ressource pour l'importateur canadien",CONTACTBILLING:"Personne-ressource de facturation",CONTACTMANUFACTURER:"Personne-ressource du fabricant/promoteur",CONTACT_IMPORTER:"Personne-ressource de l'importateur",APPROVE_FINAL:"Générer le XML finale",SAVE_DRAFT:"Enregistrer le brouillon XML",PRIMARY:"fr_Primary",SECONDARY:"fr_Alternate",TOGGLE_EXPAND:"Cliquez pour réduire ou ouvrir les détails de la ligne ",CONTROL_NUMBER:"Numéro de contrôle",REP_CONTACT_INFO:"fr_Main Contact Information",SAVE_CONTACT:"fr_Save Contact",DELETE_CONTACT:"fr_Delete Contact",COMPANY_ID:"Numéro de la compagnie",DOSSIER_ID:"Numéro de dossier",IMPORTER:"Importateur",IMPORTERID:"Numéro de compagnie de l'importateur",IMPORTER_COMPANY_NAME:"Nom de compagnie de l'importateur",IMPORTER_COMPANY_ID_IF:"fr_Importer Company Identification (if applicable)",IMPORTER_COMPANY_NAME_IF:"fr_Importer Company Name (if applicable)",ERRORS:"Erreurs",UNKNOWN:"Inconnu",BIOLOGIC:"fr_Biologic",PHARMACEUTICAL:"fr_Pharmaceutical",HELP_FILE_LOAD:"fr_File Load Instructions",EXPAND:"fr_Expand",HELP_ACTIVITY_MAIN:"fr_Activity Instructions",HELP_ACTIVITY_REP:"fr_Regulatory Enrolment Process Contact Instructions",CALENDAR:"fr_Pick date from calendar",HIDE_CALENDAR:"fr_Hide Calendar (escape key)",OTHER:"Autre",HELP_REP_CONTACT:"Regulatory Enrolment Process Contact Instructions",OTHER_UNITS:"Unités, autre détails",COMPANYNAME:"Nom de la compagnie",FULLLEGALNAME:" (nom légal complet)",BUSINESSNUMBER:"Numéro d'entreprise",ACOMPANYNAME:"Nom de la compagnie (nom légal complet, sans abbréviation)",COPY:"fr_Copy",DELETE:"Supprimer",SAVE_WORKING:"Enregistrer une copie de travail",COMPANY_NOABBREV:"Nom de la compagnie (nom légal complet)",CLOSE_ALERT:"Minimiser les instructions",COLLAPSE:"Minimiser les",CONTROL_NUM:"Numéro de contrôle",OTHER_DETAILS:"Autre détails",PROD_NAME:"Nom du produit",PROD_NAME_HELP:"fr_Product Name Instructions",PROP_NAME_HELP:"fr_Proper, Common or Non-proprietary Name Instructions",RELATED_INFO_HELP:"fr_Related Information Instructions",DOSSIER_TYPE:"Type de dossier",LEAST_5_CHAR:" fr_(at least 5 characters)","5_OR_6_CHAR":" (5 ou 6 caractères)",LEAST_7_CHAR:" (7 caractères)",INCLUDE_AREA_CODE:" (y compris indicatif régional)",LEAST_6_DIGIT:" (6 chiffres seulement)",LEAST_5_DIGIT:" (5 chiffres seulement)",LEAST_9_CHAR:" (9 caractères)",INSTRUCTION:"Instructions",RETURN_INSTRUCTION:"Retourne aux instructions ",PRIVACY_STATEMENT_HELP:"fr_View Privacy Notice Statement",PRIVACY_NOTICE_STATEMENT:"Énoncé de confidentialité",SECURITY_DISCLAIMER:"Avis de non-responsabilité concernant la sécurité",PRIVACY_STATEMENT:"En soumettant vos renseignements personnels, vous consentez à sa collecte, à son utilisation et à sa divulgation conformément à l'énoncé de confidentialité.",FOOTNOTE_INSTRUCTION:"Instructions pour compléter les sections du formulaire",SECTION_IS_NOT_VISIBLE:"[ Cette section peut ne pas être visible. ]",FAX_NOT_AVAILABLE:" (Si pas disponible, utilisez 0000000000)",NOT_APPLICABLE:"fr_Not applicable",D21:"Biologique",D22:"Pharmaceutique",D24:"Vétérinaire",D26:"Essai clinique",BROWSER:"Navigateur",TABLE_EXPANDED_STATE:"État ouvert",PROTECTED_B:'Protégé "B" une fois rempli',ROUTING_ID:"Identificateur  d'acheminement",REFERRER:" référent",CHAR_6_DIGITS:" (composé d’une lettre suivie de six chiffres)",FORMAT_TYPE_MINLENGTH:"Format incorrecte - moins que la longueur minimale",FORMAT_TYPE_PATTERN:"Format incorrecte - composé d’une lettre suivie de six chiffres"}),$translateProvider.translations("en",{MSG_ERR_MAND:"This field is required",MSG_ERR_EMAIL_FORMAT:"Please enter a valid email.",MSG_ERR_ROLE:"This field is required",MSG_ERR_DISITYPE:"Please select at least one disinfectant type",MSG_ERR_ADDRESS:"Please select at least one address",MSG_ERR_CONTACT_NUM:"All the roles have to be used for the contacts",MSG_ERR_PHONE_FORMAT:"The format is not valid",MSG_ERR_FAX_FORMAT:"The format is not valid",MSG_ERR_ALLROLE:"The roles of manufacturer, mailing, billing, and primary REP contact  have not all been selected among the list of contacts",MSG_ERR_ADDRESSSROLE:"The roles of manufacturer, mailing, and billing have not all been selected among the list of addresses",MSG_ERR_POSTAL:"Please specify a valid postal code.",MSG_ERR_ZIP:"Please specify a valid zip code.",MSG_ERR_DATE_FORMAT:"Please enter a valid date.",MANUFACT_SEL:"Role already Selected",MAIL_SEL:"Role already Selected",BILLING_SEL:"Role already Selected",IMPORTER_SEL:"Role already Selected",REPPRIM_SEL:"Role already Selected",REPALT_SEL:"Role already Selected",MSG_LENGTH_MIN5:"Less than minimum length",MSG_LENGTH_6:"Less than minimum length.",MSG_LENGTH_6NUM:"Less than minimum length.",MSG_LENGTH_8NUM:"Less than minimum length.",MSG_LENGTH_7:"Incorrect format - Less than minimum length.",MSG_LENGTH_7NUM:"Less than minimum length.",ONE_REP:"At least one contact is required.",MSG_ERR_NOTIF_SEL:"Please select at least one notifiable change.",MSG_ERR_MIN_POS:"Must be a positive number",MSG_ERR_MAX:"Exceeds the maximum",MSG_FORMAT_CHAR_6DIGITS:"ID should be a letter plus 6 digits.",MSG_ERR_DUPLICATED_SYSTEM:"Duplicated System.",MSG_FORMAT_ALPHA_NUMBERIC:"Incorrect format - must be lowercase letter followed by six numbers",MSG_ERR_INVALID_END_DATE:"End Date should not be earlier than Start Date."}),$translateProvider.translations("fr",{MSG_ERR_MAND:"Ce champ est obligatoire.",MSG_ERR_ROLE:"fr_Please select at least one role",MSG_ERR_DISITYPE:"Veuillez sélectionner au moins un type de désinfectant",MSG_ERR_ADDRESS:"fr_Please select at least one address",MSG_ERR_EMAIL_FORMAT:"Veuillez fournir une courriel valide.",MSG_ERR_CONTACT_NUM:"fr_All the roles have to be used for the company contacts",MSG_ERR_PHONE_FORMAT:"Veuillez fournir un numéro de téléphone valide.",MSG_ERR_FAX_FORMAT:"Veuillez fournir un numéro de télécopieur valide.",MSG_ERR_ALLROLE:"fr_Across the contact records, the roles of manufacturer, mailing, billing, and REP primary contact must be selected",MSG_ERR_ADDRESSSROLE:"fr_The roles of manufacturer, mailing, and billing have not all been selected among the list of addresses",MSG_ERR_POSTAL:"Veuillez fournir un code postal valide.",MSG_ERR_ZIP:"Veuillez fournir un code postal valide.",MSG_ERR_DATE_FORMAT:"Veuillez fournir une une date valide.",MANUFACT_SEL:"Rôle déjà sélectionné",MAIL_SEL:"Rôle déjà sélectionné",BILLING_SEL:"Rôle déjà sélectionné",IMPORTER_SEL:"fr_Importer Role already Selected",REPPRIM_SEL:"Rôle déjà sélectionné",REPALT_SEL:"Rôle déjà sélectionné",MSG_LENGTH_MIN5:"Veuillez fournir au moins 5 chiffres.",MSG_LENGTH_6:"Veuillez fournir au moins 6 caractères.",MSG_LENGTH_6NUM:"Veuillez fournir 6 chiffres.",MSG_LENGTH_8NUM:"Veuillez fournir 8 chiffres.",MSG_LENGTH_7:"Format incorrecte - Veuillez fournir 7 caractères.",MSG_LENGTH_7NUM:"Veuillez fournir  7 chiffres.",ONE_REP:"Au moins un contact est requis",MSG_ERR_NOTIF_SEL:"Sélectionnez au moins un changement de déclaration",MSG_ERR_MIN_POS:"Doit être un nombre positif",MSG_ERR_MAX:"Dépasse le maximum.",MSG_FORMAT_CHAR_6DIGITS:"fr_ID should be a letter plus 6 digits.",MSG_ERR_DUPLICATED_SYSTEM:"fr_Duplicated System.",MSG_FORMAT_ALPHA_NUMBERIC:"Format incorrecte - composé d’une lettre suivie de six chiffres",MSG_ERR_INVALID_END_DATE:"La date de fin ne doit pas être antérieure à la date de début"}),$translateProvider.translations("en",{REG_COMPANY_ENROL:"Regulatory Company Enrolment",LOAD_COMPANY_FILE:"Load a Company Enrolment File",REPRESENT_INSTRUCT:"Company Representative Information",AMEND_NOTE:"The “Amend Enrolment” button must be selected when amending a Final Company XML.",FIELDID:"Company Identifier",COMPANY_NAME:"Company Name",HT_LOAD_FILE_1:"A file should not be loaded if this is the first time enrolling the Company.",HT_LOAD_FILE_2:"When continuing with a working copy, the format of the file to load should be .hcsc.",HT_LOAD_FILE_3:"When viewing/updating a final XML file, the format of the file to load should be .xml.","ENROL_1.0":"The “Enrolment Status”, “Enrolment Version”, and “Date Last Saved” fields are automatically filled by the form upon selecting “Save Working Copy” or “Save Draft XML” in the bottom of the template.","ENROL_2.0":"The “Company Identifier” field will be filled by Health Canada when they generate the final company XML file.","ENROL_3.0":"The “Amend Enrolment” button is only enabled when a final company xml file is loaded into the template, and must be selected when amending a final company XML file.",FILLING_REASON_1:"Example: ",FILLING_REASON_2:"New company enrolling with REP for the first time",FILLING_REASON_3:"Existing company (company ID# XXXXXXXX)",FILLING_REASON_4:"Amending company information: name change/merger/name change/buyout/identify the significant change to company information.",FILLING_REASON_5:"Other company names that the company may operate under",ADDR_INFO_1:"A minimum of one address is required for the company template.","ADDR_INFO_2.0":"There must be an address associated with each of the following three roles: “Manufacturer / Sponsor Mailing Address”, “Billing Address”, and “Regulatory Mailing / Annual Contact Address”.",ADDR_INFO_3:"A single address may be associated to multiple roles, however, each role may only have one address.","BUS_NUM_4.0":"A business number is a unique, 9-digit number (i.e., the standard identifier for businesses). It is unique to a business or legal entity. Information on the business number can be found on the ","BUS_NUM_4.1":"https://www.canada.ca/en/revenue-agency/services/tax/businesses/topics/registering-your-business/you-need-a-business-number-a-program-account.html","BUS_NUM_4.2":"Government of Canada website",ROLE_1:"“Manufacturer / Sponsor Information”: Refers to the name under which the drug submission is filed, where a Drug Identification Number (DIN) / Notice of Compliance (NOC) is to be issued, the company in whose name the DIN / NOC will be registered, and the name to be included on the product label and Product Monograph / Package Insert.",ROLE_2:"For clinical trials: “Sponsor”: Defined by Division 5, Part C of the Food and Drug Regulations as the individual, corporate body, institution or organization that conducts a clinical trial. The sponsor is not necessarily the company that fabricates the drug product. For Investigator-initiated clinical trials: if the sponsor is defined as an individual, please also indicate the name of the affiliated institution/organization.",ROLE_3:"“Regulatory Mailing / Annual Contact Address”: Pertains to where and to whom Health Canada should direct regulatory mail other than correspondence specific to the subject drug submission, e.g. annual notification, regulatory / policy amendment notices as they apply to DINs registered to the manufacturer/sponsor. Operational and system requirements dictate that the regulatory mailing name/address must be the same for all DINs registered to the manufacturer / sponsor identified where more than one DIN is held by that company.",ROLE_4:"“Billing Address” – To whom the invoice is to be sent.",COMPANY_REP_1:"A minimum of one company representative is required for the company template.",COMPANY_REP_2:"There must be a company representative associated with each of the following roles: “Manufacturer / Sponsor Mailing Address”, “Billing Address”, “Regulatory Mailing / Annual Contact” and “REP contact”.",COMPANY_REP_3:"A single contact may be associated with multiple roles, however, each role may only have one contact.",COMPANY_REP_4:"The REP contact is the person to be contacted by Health Canada if there are any issues or clarifications required for this template when it is submitted for enrolment or amendment.",ROUTING_ID_1:"The routing identifier is a unique identifier within the Common Electronic Submissions Gateway (CESG) used to identify specific gateway account, whether it uses the Applicability Statement 2 (AS2) or WebTrader interfaces.",ROUTING_ID_2:"For the WebTrader users, the routing identifier is automatically assigned to each account by the system. It can be retrieved from the receipt message. Navigate to the WebTrader Inbox, click on “Receipt”, “View” document. Document Content page opens up and the routing identifier can be found under attribute: “X-Cyclone-To:”",ROUTING_ID_3:"For the AS2 users, the routing identifier has to be created by the company. It is recommended that the company's data universal numbering system number be used, but any alpha-numeric text string is acceptable.","ROUTING_ID_4.0":"For any further questions on the routing identifier, please contact the Food and Drug Administration Help Desk at ","ROUTING_ID_4.1":"mailto:ESGHelpDesk@fda.hhs.gov","ROUTING_ID_4.2":"ESGHelpDesk@fda.hhs.gov",ROUTING_ID_5:"The routing identifier could be the same for the manufacturer / sponsor contact and regulatory / annual contact. The Canadian importer would have a separate routing identifier.",GEN_XML_1:"Submit the draft XML file to Health Canada using the Common Electronic Submission Gateway (CESG).",GEN_XML_2:"Refer to the Regulatory Enrolment Process (REP) guidance document for detailed information."}),$translateProvider.translations("fr",{REG_COMPANY_ENROL:"Inscription d'une compagnie réglementaire",LOAD_COMPANY_FILE:"Charger un fichier d'inscipriton de compagnie",REPRESENT_INSTRUCT:"Information représentative de l'entrepise",AMEND_NOTE:"Le bouton «Modifier l'inscription» doit être sélectionné lors de la modification d'un XML d'entreprise final.",FIELDID:"Numéro d'entreprise",COMPANY_NAME:"Nom de la compagnie ",HT_LOAD_FILE_1:"Il n’est pas nécessaire de charger un fichier de compagnie s’il s’agit de votre première inscription pour la compagnie.",HT_LOAD_FILE_2:"Lors de la production d’une copie de travail, le fichier doit être chargé en format .hcsc.",HT_LOAD_FILE_3:"Lors de la consultation ou de la mise à jour d’une version finale du fichier XML, le fichier doit être chargé en format .xml.","ENROL_1.0":"Si les boutons « Enregistrer une copie de travail » ou « Enregistrer le brouillon XML », situés à la fin du modèle, sont sélectionnés, les champs « Statut de l’inscription », « Version de l’inscription » et « Date du dernier enregistrement » seront remplis automatiquement par le formulaire.","ENROL_2.0":"Le champ « Numéro de la compagnie » sera rempli par Santé Canada lors de la génération de la version finale du fichier de compagnie (en format XML).","ENROL_3.0":"Le bouton « Modifier l’inscription » n’est activé que lorsqu’une version définitive finale du fichier de compagnie (en format XML) est chargée dans le modèle. Pour modifier le fichier de compagnie (en format XML), il suffit de cliquer sur ce bouton.",FILLING_REASON_1:"Exemple: ",FILLING_REASON_2:"Nouvelle entreprise s'inscrivant à l'aide du PIR pour la première fois",FILLING_REASON_3:"Entreprise existante (company ID# XXXXXXXX)",FILLING_REASON_4:"Modification des informations sur l'entreprise: changement de nom / fusion / changement de nom / rachat / identifier le changement significatif des informations sur l'entreprise.",FILLING_REASON_5:"Autres noms de société sous lesquels l'entreprise peut opérer.",ADDR_INFO_1:"Le modèle de compagnie doit contenir au moins une adresse.","ADDR_INFO_2.0":"Les rôles suivants doivent être associés à une adresse : « Fabricant ou promoteur », « Personne-ressource pour la facturation » et « Personne-ressource pour le courrier réglementaire et pour les annuels ».",ADDR_INFO_3:"A single address may be associated to multiple roles, however, each role may only have one address.","BUS_NUM_4.0":"Un numéro d'entreprise est un numéro à neuf chiffres uniques. Il est un identificateur normalisé étendu à tous les programmes d'entreprise au gouvernement fédéral. Il est unique à une entreprise ou à une entité légale. Pour de plus amples informations sur le numéro d'entreprise, vous pouvez consulter la page web suivante: ","BUS_NUM_4.1":"https://www.canada.ca/fr/agence-revenu/services/impot/entreprises/sujets/inscrire-votre-entreprise/avez-vous-besoin-numero-entreprise-compte-programme.html","BUS_NUM_4.2":"Site Web du Gouvernement du Canada",ROLE_1:"« Renseignements sur le fabricant ou le promoteur » : Désigne le nom sous lequel la présentation de médicament est déposée, lorsqu’un numéro d’identification du médicament (DIN) ou un avis de conformité (AC) doit être délivré, il s’agit du nom de la compagnie qui enregistrera le DIN ou l’AC (c.-à-d. le détenteur du DIN ou de l’AC), ainsi que le nom qui doit figurer sur l’étiquette du produit et dans la monographie ou la notice du produit",ROLE_2:"Pour les essais cliniques: «Promoteur»; Défini par la section 5, partie C du Règlement sur les aliments et drogues, comme la personne physique, la personne morale, l'institution ou l'organisation qui mène un essai clinique. Le promoteur n'est pas nécessairement l'entreprise qui fabrique le médicament. Pour les essais cliniques initiés par l'investigateur",ROLE_3:"« Adresse pour le courrier réglementaire et pour les annuels » : Indique où et à qui Santé Canada doit envoyer le courrier réglementaire autre que le courrier concernant spécifiquement la présentation de médicament à traiter; p. ex., le formulaire de déclaration annuelle et les avis de modification à des règlements ou politiques qui s’appliquent aux DIN enregistrés au nom du fabricant ou du promoteur. Les besoins opérationnels et ceux du système exigent que le nom et l’adresse pour le courrier réglementaire soient les mêmes pour tous les DIN enregistrés au nom du fabricant ou du promoteur lorsque la compagnie détient plus d’un DIN.",ROLE_4:"« Adresse de facturation » : Indique l’adresse où la facture doit être envoyée.",COMPANY_REP_1:"Le modèle de la compagnie doit contenir au moins un représentant.",COMPANY_REP_2:" Le représentant de la compagnie doit être associé à chacun des rôles suivants : « Fabricant ou promoteur », « Facturation », « Personne-ressource pour le courrier réglementaire et pour les annuels » et « Personne-ressource du PIR ».",COMPANY_REP_3:"Une même personne-ressource peut être associée à plusieurs rôles, mais un rôle ne peut être associé qu’à une seule personne-ressource.",COMPANY_REP_4:"La personne-ressource du PIR est la personne que Santé Canada doit contacter s’il y a des questions à régler ou des précisions à apporter au modèle lorsqu’il fait l’objet d’une demande d’inscription ou de modification.",
ROUTING_ID_1:"L'identificateur d'acheminement est un numéro unique à chaque compte créé sur le portail commun de demandes électroniques (PDE). Il est utilisé pour identifier le type de compte sur une des deux interfaces du portail soit l'Applicability Statement 2 (AS2) ou le WebTrader.",ROUTING_ID_2:"Pour les utilisateurs de l’interface Webtrader, votre identificateur d’acheminement se retrouve dans l’avis de réception. Pour y accédez, veillez aller à la boîte de réception WebTrader et cliquez sur «Reçu» et «Afficher» le document. La page de Contenu du document affichera et l'identificateur d’acheminement se trouve sous l'attribut: «X-Cyclone-To:»",ROUTING_ID_3:"Pour les utilisateurs de l'interface AS2, l'identificateur d'acheminement doit être créé par la compagnie. Il est recommandé que le numéro du système de numérotation universel de la compagnie soit utilisé. Cependant, il est important de noter d'une liste de caractères alphanumériques est tout aussi acceptable.","ROUTING_ID_4.0":"Pour toutes autres questions sur l'identificateur d'acheminement, veuillez contacter directement le service de dépannage de la Food and Drug Administration au ","ROUTING_ID_4.1":"mailto:ESGHelpDesk@fda.hhs.gov","ROUTING_ID_4.2":"ESGHelpDesk@fda.hhs.gov",ROUTING_ID_5:"Il est possible que la personne-ressource du  fabricant ou promoteur et la personne-ressource recevant le courrier de nature réglementaire et la notification annuelle aient le même identificateur d'acheminement. Cependant, il est important de noter que l'importateur canadien aura toujours un identificateur différent.",GEN_XML_1:"Déposez un brouillon du fichier XML auprès de Santé Canada au moyen du Portail commun des demandes électroniques (PCDE).",GEN_XML_2:"Consultez les lignes directrices du PIR pour obtenir des renseignements détaillés."}),$translateProvider.translations("en",{"ADDRESSLISTCTRL.ADDRESSLISTFORM":"in the Address Information section.","CONTACTLISTCTRL.CONTACTLISTFORM":"in the Company Representative Information section.",CONTACTROLESVALID:"For Company Representative, selection of  all roles: manufacturer, mailing, billing, and primary REP ",ADDRESSROLESVALID:"For the Address Information, selection of all roles: manufacturer, mailing, and billing","CONTACTREC.CONTACTRECFORM":"in the Company Representative details","ADDRESSREC.ADDRESSRECFORM":"in the Address details",COMPANY_FORM:"Company Enrolment Form",ROLEMISSING:"Select one or more roles for this company",CONTACTROLEMISSING:"Select one or more roles for this company representative",ROLEREPMISSING:"Roles for this company representative ",ADDRESS_EXPND:"Please input importer ID for each importer"}),$translateProvider.translations("fr",{"ADDRESSLISTCTRL.ADDRESSLISTFORM":"dans la section Information d'addresse","CONTACTLISTCTRL.CONTACTLISTFORM":"dans la section Information ser les représentants de la compagnie",CONTACTROLESVALID:"Pour le représentant de la compagnie, sélection des rôles: fabricant, de l'envoi, de la facturation et principale du PIR ",ADDRESSROLESVALID:"Pour l'information d'adresse, sélection des rôles: fabricant, de l'envoi et de la facturation ","CONTACTREC.CONTACTRECFORM":"dans les détails du représentant de la compagnie","ADDRESSREC.ADDRESSRECFORM":"dans les détails de l'adresse",COMPANY_FORM:"Inscription D'une Entreprise Réglementaire",ROLEMISSING:"Sélectionner un ou plusieurs rôles pour ce représentant de la compagnie",CONTACTROLEMISSING:"Sélectionner un ou plusieurs rôles pour ce représentant de la compagnie",ROLEREPMISSING:"fr_Roles for this company representative ",ADDRESS_EXPND:"SVP entrez l’ID de l’importateur pour chaque produit"}),$translateProvider.translations("en",{FOR_THE:"The ",THERE_ARE_ERRORS:"There are errors",FORM_NOT_SAVED:"The form could not be saved because ",NOT_SAVED:" could not be saved because ",ERRORS_FOUND:" errors were found.",ERROR_FOUND:"error was found.",TYPE_REQUIRED:"This field is required.",TYPE_EMAIL:"Please enter a valid email address.",TYPE_DUPLICATEROLE:"This role has already been selected.",TYPE_DUPLICATESYS:"This system has already been selected.",TYPE_MIN:"Less than minimum value",TYPE_MINLENGTH:"Less than minimum length",POSTAL_FORMAT:"Please enter a valid format",TYPE_DATE:"Please enter a valid date",TYPE_NUMBER:"Please enter a valid number",TYPE_PATTERN:"Incorrect format",MSG_VALUE_MAX:"Value is not within valid limits",COMPANY_IN_USE:"The importer is in use for Company Representative Details, delete that record first."}),$translateProvider.translations("fr",{FOR_THE:"Pour le ",THERE_ARE_ERRORS:"Il y a des erreurs",FORM_NOT_SAVED:"Le formulaire n’a pas pu être enregistré car ",NOT_SAVED:" n’a pas pu être enregistré car ",ERRORS_FOUND:"erreurs ont été trouvées.",ERROR_FOUND:"erreur a été trouvée.",TYPE_REQUIRED:"Ce champ est obligatoire.",TYPE_EMAIL:"Veuillez fournir une adresse électronique valide.",TYPE_DUPLICATEROLE:"Ce rôle a déjà été sélectionné.",TYPE_DUPLICATESYS:"Ce système a été déjà sélectionné.",TYPE_MIN:"Moins que la valeur minimale.",TYPE_MINLENGTH:"Moins que la longueur minimale.",POSTAL_FORMAT:"Entrez un format valide.",TYPE_DATE:"Veuillez fournir une une date valide.",TYPE_NUMBER:"Veuillez fournir un numéro valide.",TYPE_PATTERN:"Format incorrecte",MSG_VALUE_MAX:"La valeur n'est pas dans les limites valides",COMPANY_IN_USE:"L'importateur est en cours d'utilisation pour les Détails du représentant de la compagnie, supprimez ce premier enregistrement."})}]),function(){"use strict";angular.module("numberFormat",[])}(),function(){"use strict";function digitsCtrl(){function link(scope,element,attrs,modelCtrl){modelCtrl.$parsers.push(function(inputValue){if(void 0==inputValue)return"";var isNumber=!1,max=-1,ignore=!1,tempVal=""+inputValue;attrs.type&&"number"===attrs.type&&(isNumber=!0),attrs.onlyMax&&(max=parseInt(attrs.onlyMax));var regexIntNeg=/[^0-9-]/g,integerReg=/[^0-9]/g,regexValue=integerReg;if("intNeg"==attrs.onlyDigits?regexValue=regexIntNeg:"false"===attrs.onlyDigits?ignore=!0:regexValue=integerReg,ignore)return inputValue;var transformedInput=tempVal.replace(regexValue,"");return max>0&&(transformedInput=transformedInput.substring(0,max)),transformedInput!==tempVal&&(isNumber&&transformedInput&&(transformedInput=parseFloat(transformedInput)),modelCtrl.$setViewValue(transformedInput),modelCtrl.$render()),transformedInput})}var directive={link:link,restrict:"A",require:"?ngModel"};return directive}angular.module("numberFormat").directive("onlyDigits",digitsCtrl)}(),function(){"use strict";angular.module("dataLists",["hpfbConstants"])}(),function(){"use strict";function getService(UNKNOWN){function _getEnvString(){return vm.env?vm.env:"@@envValue"}function _setEnvString(value){vm.env=value.env}function _createCountryArray(translateJson){vm.countryList=translateJson}function _getUnknownCountryRec(){return{id:UNKNOWN,en:"Unknown",fr:"Inconnu"}}function getCountryValuesArray(){return vm.countryList}function getProvinceValuesArray(){return["AB","BC","MB","NB","NL","NT","NS","NU","ON","PE","QC","SK","YT"]}function getUSStatesValueArray(){return["AL","AK","AZ","AR","CA","CO","CT","DE","DC","FL","GA","HI","ID","IL","IN","IA","KS","KY","LA","ME","MD","MA","MI","MN","MS","MO","MT","NE","NV","NH","NJ","NM","NY","NC","ND","OH","OK","OR","PA","RI","SC","SD","TN","TX","UT","VT","VA","WA","WV","WI","WY"]}var vm=this;vm.env="",vm.countryList=[];var service={getEnv:_getEnvString,setEnv:_setEnvString,getCountries:getCountryValuesArray,getProvinces:getProvinceValuesArray,getUSStates:getUSStatesValueArray,createCountryList:_createCountryArray,getUnknownCountryRecord:_getUnknownCountryRec};return service}angular.module("dataLists").factory("getCountryAndProvinces",getService),getService.inject=["UNKNOWN"]}(),function(){"use strict";function getSalService($filter,$q,$http,$translate,OTHER,FRENCH,RELATIVE_FOLDER_DATA){function getSalValuesArray(){return["SALUT_DR","SALUT_MR","SALUT_MRS","SALUT_MS"]}function getLanguagesValuesArray(){return["en","fr"]}function _createSortedArray(jsonList,lang){var result=[];return angular.forEach($filter("orderByLocale")(jsonList,lang),function(sortedObject){result.push(sortedObject)}),result}function _getAdminSubType(){return vm.adminSubTypeArray&&0!==vm.adminSubTypeArray.length?vm.adminSubTypeArray:_loadAdminType()}function _loadAdminType(){var deferred=$q.defer(),url=RELATIVE_FOLDER_DATA+"adminSubType.json";return $http.get(url).success(function(data,status,headers,config){var lang=$translate.proposedLanguage()||$translate.use(),newList=_createSortedArray(data,lang);vm.adminSubTypeArray=newList,deferred.resolve(newList)}).error(function(data,status,headers,config){deferred.reject(status)}),deferred.promise}var vm=this;vm.internalContacts=[],vm.adminSubTypeArray=[];var service={getSalutationList:getSalValuesArray,getLanguages:getLanguagesValuesArray,getAdminSubType:_getAdminSubType};return service}angular.module("dataLists").factory("getContactLists",getSalService),getSalService.$inject=["$filter","$q","$http","$translate","OTHER","FRENCH","RELATIVE_FOLDER_DATA"]}(),function(){"use strict";function getRolesService(){function getRoleValuesArray(){return["","ROLE_PRIMARY","ROLE_SECONDARY"]}function _getFormTypes(env){return env?[_biologic,_pharma]:[_biologic,_pharma,_veterinary,_clinical]}function _getBiologic(){return _biologic}function _getPharmaceutical(){return _pharma}function _getVeterinary(){return _veterinary}function _getClinicalTrial(){return _clinical}var _biologic="D21",_pharma="D22",_veterinary="D24",_clinical="D26",service={getContactRoles:getRoleValuesArray,getFormTypes:_getFormTypes,getBiologicType:_getBiologic,getPharmaType:_getPharmaceutical,getVeterinary:_getVeterinary,getClinicalTrial:_getClinicalTrial};return service}angular.module("dataLists").factory("getRoleLists",getRolesService)}(),function(){"use strict";angular.module("dataLists",["hpfbConstants"])}(),function(){"use strict";function getService(UNKNOWN){function _getEnvString(){return vm.env?vm.env:"PROD"}function _setEnvString(value){vm.env=value.env}function _createCountryArray(translateJson){vm.countryList=translateJson}function _getUnknownCountryRec(){return{id:UNKNOWN,en:"Unknown",fr:"Inconnu"}}function getCountryValuesArray(){return vm.countryList}function getProvinceValuesArray(){return["AB","BC","MB","NB","NL","NT","NS","NU","ON","PE","QC","SK","YT"]}function getUSStatesValueArray(){return["AL","AK","AZ","AR","CA","CO","CT","DE","DC","FL","GA","HI","ID","IL","IN","IA","KS","KY","LA","ME","MD","MA","MI","MN","MS","MO","MT","NE","NV","NH","NJ","NM","NY","NC","ND","OH","OK","OR","PA","RI","SC","SD","TN","TX","UT","VT","VA","WA","WV","WI","WY"]}var vm=this;vm.env="",vm.countryList=[];var service={getEnv:_getEnvString,setEnv:_setEnvString,getCountries:getCountryValuesArray,getProvinces:getProvinceValuesArray,getUSStates:getUSStatesValueArray,createCountryList:_createCountryArray,getUnknownCountryRecord:_getUnknownCountryRec};return service}angular.module("dataLists").factory("getCountryAndProvinces",getService),getService.inject=["UNKNOWN"]}(),function(){"use strict";function getSalService($filter,$q,$http,$translate,OTHER,FRENCH,RELATIVE_FOLDER_DATA){function getSalValuesArray(){return["SALUT_DR","SALUT_MR","SALUT_MRS","SALUT_MS"]}function getLanguagesValuesArray(){return["en","fr"]}function _createSortedArray(jsonList,lang){var result=[];return angular.forEach($filter("orderByLocale")(jsonList,lang),function(sortedObject){result.push(sortedObject)}),result}function _getAdminSubType(){return vm.adminSubTypeArray&&0!==vm.adminSubTypeArray.length?vm.adminSubTypeArray:_loadAdminType()}function _loadAdminType(){var deferred=$q.defer(),url=RELATIVE_FOLDER_DATA+"adminSubType.json";return $http.get(url).success(function(data,status,headers,config){var lang=$translate.proposedLanguage()||$translate.use(),newList=_createSortedArray(data,lang);vm.adminSubTypeArray=newList,deferred.resolve(newList)}).error(function(data,status,headers,config){deferred.reject(status)}),deferred.promise}var vm=this;vm.internalContacts=[],vm.adminSubTypeArray=[];var service={getSalutationList:getSalValuesArray,getLanguages:getLanguagesValuesArray,getAdminSubType:_getAdminSubType};return service}angular.module("dataLists").factory("getContactLists",getSalService),getSalService.$inject=["$filter","$q","$http","$translate","OTHER","FRENCH","RELATIVE_FOLDER_DATA"]}(),function(){"use strict";function getRolesService(){function getRoleValuesArray(){return["","ROLE_PRIMARY","ROLE_SECONDARY"]}function _getFormTypes(env){return env?[_biologic,_pharma]:[_biologic,_pharma,_veterinary,_clinical]}function _getBiologic(){return _biologic}function _getPharmaceutical(){return _pharma}function _getVeterinary(){return _veterinary}function _getClinicalTrial(){return _clinical}var _biologic="D21",_pharma="D22",_veterinary="D24",_clinical="D26",service={getContactRoles:getRoleValuesArray,getFormTypes:_getFormTypes,getBiologicType:_getBiologic,getPharmaType:_getPharmaceutical,getVeterinary:_getVeterinary,getClinicalTrial:_getClinicalTrial};return service}angular.module("dataLists").factory("getRoleLists",getRolesService)}(),function(){"use strict";angular.module("services",[])}(),function(){"use strict";function getTransactionSeq($http,$q){function yesNoArray(){return["Y","N"]}function _getEnvString(){return vm.env?vm.env:"@@envValue"}function _setEnvString(value){vm.env=value.env}function _createRaArray(value){vm.raTypeArray=value}function _createFeeArray(value){vm.feeTypeArray=value}function _createMitigationArray(value){vm.mitigationTypeArray=value}function getTransactionDescriptionsArray(){return vm.allActivities}function getActivityArray(){return vm.raTypeArray}function _getfeeTypeArray(){return vm.feeTypeArray}function _getMitigationTypeArray(){return vm.mitigationTypeArray}function getPresubArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE]}function getANDSArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.COMMENTS_NOC,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.INITIAL,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.SECOND_LANG_PM,vm.allActivities.PRISTINE_PM_2LANG,vm.allActivities.PUB_RELEASE_INFO,vm.allActivities.BE_CLARIF_RESPONSE,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.NOC_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.NON_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.CORR_PATENT_MED,vm.allActivities.ALLEGATION_NOTICE,vm.allActivities.FORM_IV,vm.allActivities.FORM_V,vm.allActivities.CONSENT_LTR,vm.allActivities.DATA_PROTECT_CORRESP]}function getEUNDSArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.BE_CLARIF_RESPONSE,vm.allActivities.CANCEL_LETTER,vm.allActivities.COMMENTS_NOC,vm.allActivities.COMMENTS_SUMMARY_BASIS,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.INITIAL,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.SECOND_LANG_PM,vm.allActivities.PRISTINE_PM_2LANG,vm.allActivities.PUB_RELEASE_INFO,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.NOC_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.NON_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.CORR_PATENT_MED,vm.allActivities.ALLEGATION_NOTICE,vm.allActivities.FORM_IV,vm.allActivities.FORM_V,vm.allActivities.CONSENT_LTR,vm.allActivities.DATA_PROTECT_CORRESP,vm.allActivities.NONCLIN_CLARIF_RESPONSE]}function getEUSNDSArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.BE_CLARIF_RESPONSE,vm.allActivities.CANCEL_LETTER,vm.allActivities.COMMENTS_NOC,vm.allActivities.COMMENTS_SUMMARY_BASIS,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.POST_NOC_CHANGE,vm.allActivities.SECOND_LANG_PM,vm.allActivities.PRISTINE_PM_2LANG,vm.allActivities.PUB_RELEASE_INFO,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.NOC_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.NON_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.CORR_PATENT_MED,vm.allActivities.ALLEGATION_NOTICE,vm.allActivities.FORM_IV,vm.allActivities.FORM_V,vm.allActivities.CONSENT_LTR,vm.allActivities.DATA_PROTECT_CORRESP,vm.allActivities.NONCLIN_CLARIF_RESPONSE]}function getLevel3Array(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.YEAR_LIST_OF_CHANGE,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE]}function getNDSArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.COMMENTS_NOC,vm.allActivities.COMMENTS_SUMMARY_BASIS,vm.allActivities.COMMENTS_REGULARTORY_DECISION,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.INITIAL,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.SECOND_LANG_PM,vm.allActivities.PRISTINE_PM_2LANG,vm.allActivities.PUB_RELEASE_INFO,vm.allActivities.BE_CLARIF_RESPONSE,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.NOC_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.NON_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.CORR_PATENT_MED,vm.allActivities.ALLEGATION_NOTICE,vm.allActivities.FORM_IV,vm.allActivities.FORM_V,vm.allActivities.CONSENT_LTR,vm.allActivities.DATA_PROTECT_CORRESP,vm.allActivities.NONCLIN_CLARIF_RESPONSE]}function getPSURCArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.COMMENTS_SUMMARY_BASIS,vm.allActivities.FOR_PERIOD,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.MEETING_MINUTES,vm.allActivities.MHPD_RQ_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.PHONE_RQ_RESPONSE]}function getPSURPVArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.FOR_PERIOD,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.MEETING_MINUTES,vm.allActivities.MHPD_RQ_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.CLIN_CLARIF_RESPONSE]}function getRMPPVArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.CSOtRMP,vm.allActivities.MEETING_MINUTES,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.MHPD_RQ_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.RMP_VERSION_DATE,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.UNSOLICITED_DATA]}function getSANDSArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.COMMENTS_NOC,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.POST_NOC_CHANGE,vm.allActivities.SECOND_LANG_PM,vm.allActivities.PRISTINE_PM_2LANG,vm.allActivities.PUB_RELEASE_INFO,vm.allActivities.BE_CLARIF_RESPONSE,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.NOC_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.NON_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.CORR_PATENT_MED,vm.allActivities.ALLEGATION_NOTICE,vm.allActivities.FORM_IV,vm.allActivities.FORM_V,vm.allActivities.CONSENT_LTR,vm.allActivities.DATA_PROTECT_CORRESP]}function getSNDSArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.COMMENTS_NOC,vm.allActivities.COMMENTS_SUMMARY_BASIS,vm.allActivities.COMMENTS_REGULARTORY_DECISION,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.MEETING_MINUTES,vm.allActivities.PANDEMIC_APPL,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.POST_NOC_CHANGE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.SECOND_LANG_PM,vm.allActivities.PRISTINE_PM_2LANG,vm.allActivities.PUB_RELEASE_INFO,vm.allActivities.BE_CLARIF_RESPONSE,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.NOC_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.NON_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.CORR_PATENT_MED,vm.allActivities.ALLEGATION_NOTICE,vm.allActivities.FORM_IV,vm.allActivities.FORM_V,vm.allActivities.CONSENT_LTR,vm.allActivities.DATA_PROTECT_CORRESP,vm.allActivities.NONCLIN_CLARIF_RESPONSE]}function getSNDSCArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.COMMENTS_NOC,vm.allActivities.COMMENTS_SUMMARY_BASIS,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_NOC_CHANGE,vm.allActivities.SECOND_LANG_PM,vm.allActivities.PRISTINE_PM_2LANG,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.NOC_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.NON_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.CORR_PATENT_MED,vm.allActivities.ALLEGATION_NOTICE,vm.allActivities.FORM_IV,vm.allActivities.FORM_V,vm.allActivities.CONSENT_LTR,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.DATA_PROTECT_CORRESP]}function getUDPVArray(){return[vm.allActivities.BENEFIT_RISK_ASSESS,vm.allActivities.CANCEL_LETTER,vm.allActivities.NOTIFICATION_CHANGE,vm.allActivities.POST_MARKET_SURV,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.MEETING_MINUTES,vm.allActivities.MHPD_RQ_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.RISK_COMMUN_DOC,vm.allActivities.UNSOLICITED_DATA]}function getUDRAArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.DIN_DISCONTINUED,vm.allActivities.ADVISEMENT_LETTER_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.MEETING_MINUTES,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.NOTIFICATION_INTERRUPT_SALE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.SEQUENCE_CLEANUP]}function getConsultArray(){return[vm.allActivities.PANDEMIC_APPL]}function _getMPNCArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.WRITTEN_CONSULT_REQ,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.UNSOLICITED_DATA]}function _getMPNDSArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.WRITTEN_CONSULT_REQ,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ]}function _getMPSNDSArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.WRITTEN_CONSULT_REQ,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ]}function _getPANDArray(){return[vm.allActivities.BE_CLARIF_RESPONSE,vm.allActivities.CANCEL_LETTER,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.COMMENTS_NOC,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.INITIAL,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PANDEMIC_APPL,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.SECOND_LANG_PM,vm.allActivities.PRISTINE_PM_2LANG,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.NOC_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.NON_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.CORR_PATENT_MED,vm.allActivities.ALLEGATION_NOTICE,vm.allActivities.FORM_IV,vm.allActivities.FORM_V,vm.allActivities.CONSENT_LTR,vm.allActivities.DATA_PROTECT_CORRESP,vm.allActivities.NONCLIN_CLARIF_RESPONSE]}function _getPBRERCArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.COMMENTS_SUMMARY_BASIS,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.FOR_PERIOD,vm.allActivities.MEETING_MINUTES,vm.allActivities.MHPD_RQ_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.PHONE_RQ_RESPONSE]}function _getPBRERPVArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.FOR_PERIOD,vm.allActivities.MEETING_MINUTES,vm.allActivities.MHPD_RQ_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.CLIN_CLARIF_RESPONSE]}function _getPRNDSArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.MEETING_MINUTES,vm.allActivities.PRIORITY_REVIEW_RQ,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.RECON_DECIS_OTHER_INFO]}function _getPRSNDSArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.MEETING_MINUTES,vm.allActivities.PRIORITY_REVIEW_RQ,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.RECON_DECIS_OTHER_INFO]}function getYBPRArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.FOR_PERIOD,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.MEETING_MINUTES,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE]}function getDSurArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.FOR_PERIOD,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.MEETING_MINUTES,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.PHONE_RQ_RESPONSE]}function getDINAArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.CHANGE_TO_DIN,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.INITIAL,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.PRISTINE_PM_2LANG,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.BE_CLARIF_RESPONSE,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.NON_RESPONSE,vm.allActivities.NOD_RESPONSE]}function getV_DINAArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.CHANGE_TO_DIN,vm.allActivities.INITIAL,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.HSC_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QHSC_RQ_RESPONSE,vm.allActivities.CHSC_RQ_RESPONSE,vm.allActivities.QCHSC_RQ_RESPONSE,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.INITIAL_TEAT_SOLU_MONO,vm.allActivities.NOD_RESPONSE];
}function getDINBArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.CHANGE_TO_DIN,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.INITIAL,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.PRISTINE_PM_2LANG,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.NON_RESPONSE,vm.allActivities.NOD_RESPONSE]}function getDINDArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.CHANGE_TO_DIN,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.INITIAL,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.NON_RESPONSE,vm.allActivities.NOD_RESPONSE]}function getDINFArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.CHANGE_TO_DIN,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.INITIAL,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.LABEL_PREAPPROVAL_2LANG]}function getMPDINArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.WRITTEN_CONSULT_REQ,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE]}function getPDCArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_AUTH_DIV1_CHANGE,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.PRISTINE_PM_2LANG,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.NOL_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO]}function getPDCBArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_AUTH_DIV1_CHANGE,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.PRISTINE_PM_2LANG,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.NOL_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO]}function _getIRSRPVArray(){return[vm.allActivities.ISSUE_SAFETY_REQUEST,vm.allActivities.MEETING_MINUTES,vm.allActivities.PRESUB_MEETING_RQ]}function _getPAPVArray(){return[vm.allActivities.MEETING_MINUTES,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.MHPD_RQ_RESPONSE,vm.allActivities.PRESUB_MEETING_RQ]}function _getPSAPVArray(){return[vm.allActivities.ADV_COMP_REQ,vm.allActivities.PATIENT_SAFETY_INFO]}function _getRCPVArray(){return[vm.allActivities.DISSEM_LIST,vm.allActivities.RISK_COMMUN_DOC]}function _getREGPVArray(){return[vm.allActivities.BENEFIT_RISK_ASSESS,vm.allActivities.FOREIGN_SAFETY_NOTIFICATION,vm.allActivities.MEETING_MINUTES,vm.allActivities.RESSESS_ORDER,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.TEST_STUDIES_ORDER,vm.allActivities.TERM_COND_COMM]}function _getSANDSCArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.COMMENTS_NOC,vm.allActivities.COMMENTS_SUMMARY_BASIS,vm.allActivities.CONSENT_LTR,vm.allActivities.DATA_PROTECT_CORRESP,vm.allActivities.CORR_PATENT_MED,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.FORM_IV,vm.allActivities.FORM_V,vm.allActivities.MEETING_MINUTES,vm.allActivities.ALLEGATION_NOTICE,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.POST_NOC_CHANGE,vm.allActivities.SECOND_LANG_PM,vm.allActivities.PRISTINE_PM_2LANG,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.NOC_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.NON_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA]}function _getPostDINArray(){return[vm.allActivities.YEAR]}function _getEUANDSArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.BE_CLARIF_RESPONSE,vm.allActivities.CANCEL_LETTER,vm.allActivities.COMMENTS_NOC,vm.allActivities.COMMENTS_SUMMARY_BASIS,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.INITIAL,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.SECOND_LANG_PM,vm.allActivities.PRISTINE_PM_2LANG,vm.allActivities.PUB_RELEASE_INFO,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.NOC_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.NON_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.CORR_PATENT_MED,vm.allActivities.ALLEGATION_NOTICE,vm.allActivities.FORM_IV,vm.allActivities.FORM_V,vm.allActivities.CONSENT_LTR,vm.allActivities.DATA_PROTECT_CORRESP,vm.allActivities.NONCLIN_CLARIF_RESPONSE]}function _getEUSANDSArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.BE_CLARIF_RESPONSE,vm.allActivities.CANCEL_LETTER,vm.allActivities.COMMENTS_NOC,vm.allActivities.COMMENTS_SUMMARY_BASIS,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.SECOND_LANG_PM,vm.allActivities.PRISTINE_PM_2LANG,vm.allActivities.PUB_RELEASE_INFO,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.NOC_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.NON_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.CORR_PATENT_MED,vm.allActivities.ALLEGATION_NOTICE,vm.allActivities.FORM_IV,vm.allActivities.FORM_V,vm.allActivities.CONSENT_LTR,vm.allActivities.DATA_PROTECT_CORRESP,vm.allActivities.NONCLIN_CLARIF_RESPONSE]}function getV_AndsArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.CONSENT_LTR,vm.allActivities.DATA_PROTECT_CORRESP,vm.allActivities.CORR_PATENT_MED,vm.allActivities.FORM_IV,vm.allActivities.FORM_V,vm.allActivities.INITIAL,vm.allActivities.MEETING_MINUTES,vm.allActivities.ALLEGATION_NOTICE,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.HSC_RQ_RESPONSE,vm.allActivities.QHSC_RQ_RESPONSE,vm.allActivities.CHSC_RQ_RESPONSE,vm.allActivities.QCHSC_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.NON_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.UNSOLICITED_DATA]}function getCtaArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.INITIAL,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.NOL_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.CTN_ADMINISTRATIVE,vm.allActivities.CTN_APPENDIX,vm.allActivities.CTN_CONTACT,vm.allActivities.CTN_DATA,vm.allActivities.CTN_DEAR,vm.allActivities.CTN_DILUENT,vm.allActivities.CTN_DRUG_PROD,vm.allActivities.CTN_DRUG_SUBS,vm.allActivities.CTN_ENROLLMENT,vm.allActivities.CTN_ETHICS,vm.allActivities.CTN_IMPD_UPDATE,vm.allActivities.CTN_INFORMED,vm.allActivities.CTN_FORM_BROC_UPDATES,vm.allActivities.CTN_INVESTIGATOR,vm.allActivities.CTN_NEW_MANUFACTURING,vm.allActivities.CTN_NEW_PKG,vm.allActivities.CTN_NEW_QC,vm.allActivities.CTN_NEW_SUMM_ADF,vm.allActivities.CTN_PACKAGING_LABELLING,vm.allActivities.CTN_PROTOCOL_INFO_UPDATE,vm.allActivities.CTN_PROTOCOL_UPDATE,vm.allActivities.CTN_QOS,vm.allActivities.CTN_REFUSALS,vm.allActivities.CTN_REGULATORY,vm.allActivities.CTN_RESPONSE,vm.allActivities.CTN_SAFETY,vm.allActivities.CTN_SHELF_PD,vm.allActivities.CTN_SHELF_DS,vm.allActivities.CTN_SITE,vm.allActivities.CTN_SOURCE,vm.allActivities.CTN_STRAIN,vm.allActivities.CTN_STUDY_COMPLETION,vm.allActivities.CTN_STUDY_DISC,vm.allActivities.CTN_STUDY_EXT,vm.allActivities.CTN_STUDY_SUS,vm.allActivities.CTN_TRANS_OWN]}function getCta_aArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.NOL_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.CLINICAL,vm.allActivities.CLINICAL_QUALITY,vm.allActivities.QUALITY]}function getPreCtaArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ]}function getV_Level3Array(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.YEAR_LIST_OF_CHANGE]}function getV_MpdinArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.UNSOLICITED_DATA]}function getV_MpncArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.UNSOLICITED_DATA]}function getV_MpndsArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.UNSOLICITED_DATA]}function getV_MpsndsArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.UNSOLICITED_DATA]}function getV_MpandsArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.UNSOLICITED_DATA]}function getV_MpsandsArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.UNSOLICITED_DATA]}function getV_RccArray(){return[vm.allActivities.REQ_ACCEPTED]}function getV_NcArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.POST_NOC_CHANGE,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.HSC_RQ_RESPONSE,vm.allActivities.QHSC_RQ_RESPONSE,vm.allActivities.CHSC_RQ_RESPONSE,vm.allActivities.QCHSC_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.NOL_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.UNSOLICITED_DATA]}function getB_NcArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.COMMENTS_SUMMARY_BASIS,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.POST_NOC_CHANGE,vm.allActivities.PRISTINE_PM_2LANG,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.NOL_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.SECOND_LANG_PM]}function getNcArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.PRISTINE_PM_2LANG,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.NOL_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.SECOND_LANG_PM]}function getV_NdsArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.CONSENT_LTR,vm.allActivities.DATA_PROTECT_CORRESP,vm.allActivities.CORR_PATENT_MED,vm.allActivities.FORM_IV,vm.allActivities.FORM_V,vm.allActivities.INITIAL,vm.allActivities.MEETING_MINUTES,vm.allActivities.ALLEGATION_NOTICE,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.HSC_RQ_RESPONSE,vm.allActivities.QHSC_RQ_RESPONSE,vm.allActivities.CHSC_RQ_RESPONSE,vm.allActivities.QCHSC_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.UNSOLICITED_DATA]}function getV_PsurPvArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.FOR_PERIOD,vm.allActivities.MEETING_MINUTES,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.HSC_RQ_RESPONSE,vm.allActivities.QHSC_RQ_RESPONSE,vm.allActivities.CHSC_RQ_RESPONSE,vm.allActivities.QCHSC_RQ_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA]}function getV_SandsArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.CONSENT_LTR,vm.allActivities.DATA_PROTECT_CORRESP,vm.allActivities.CORR_PATENT_MED,vm.allActivities.FORM_IV,vm.allActivities.FORM_V,vm.allActivities.MEETING_MINUTES,vm.allActivities.ALLEGATION_NOTICE,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.POST_NOC_CHANGE,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.HSC_RQ_RESPONSE,vm.allActivities.QHSC_RQ_RESPONSE,vm.allActivities.CHSC_RQ_RESPONSE,vm.allActivities.QCHSC_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.NON_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.UNSOLICITED_DATA]}function getV_SndsArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.CONSENT_LTR,vm.allActivities.DATA_PROTECT_CORRESP,vm.allActivities.CORR_PATENT_MED,vm.allActivities.FORM_IV,vm.allActivities.FORM_V,vm.allActivities.MEETING_MINUTES,vm.allActivities.ALLEGATION_NOTICE,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.POST_NOC_CHANGE,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.HSC_RQ_RESPONSE,vm.allActivities.QHSC_RQ_RESPONSE,vm.allActivities.CHSC_RQ_RESPONSE,vm.allActivities.QCHSC_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.NON_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.UNSOLICITED_DATA]}function getV_UdraArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.DIN_DISCONTINUED,vm.allActivities.NOTIFICATION_INTERRUPT_SALE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.QHSC_RQ_RESPONSE,vm.allActivities.CHSC_RQ_RESPONSE,vm.allActivities.QCHSC_RQ_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.UNSOLICITED_DATA]}function _getCoVir19Array(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.COMMENTS_NOC,vm.allActivities.COMMENTS_SUMMARY_BASIS,vm.allActivities.COMMENTS_REGULARTORY_DECISION,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.INITIAL,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.SECOND_LANG_PM,vm.allActivities.PRISTINE_PM_2LANG,vm.allActivities.PUB_RELEASE_INFO,vm.allActivities.BE_CLARIF_RESPONSE,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.NOC_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.NON_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.CORR_PATENT_MED,vm.allActivities.ALLEGATION_NOTICE,vm.allActivities.FORM_IV,vm.allActivities.FORM_V,vm.allActivities.CONSENT_LTR,vm.allActivities.DATA_PROTECT_CORRESP,vm.allActivities.NONCLIN_CLARIF_RESPONSE]}function _getCoVir19AmdArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.COMMENTS_NOC,vm.allActivities.COMMENTS_SUMMARY_BASIS,vm.allActivities.COMMENTS_REGULARTORY_DECISION,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.INITIAL,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.SECOND_LANG_PM,vm.allActivities.PRISTINE_PM_2LANG,vm.allActivities.PUB_RELEASE_INFO,vm.allActivities.BE_CLARIF_RESPONSE,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.NOC_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.NON_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.CORR_PATENT_MED,vm.allActivities.ALLEGATION_NOTICE,vm.allActivities.FORM_IV,vm.allActivities.FORM_V,vm.allActivities.CONSENT_LTR,vm.allActivities.DATA_PROTECT_CORRESP,vm.allActivities.NONCLIN_CLARIF_RESPONSE]}function _getActivityLeadArray(){return[vm.PHARMA,vm.BIOLOGICAL,vm.POSTMARKET,vm.CONSUMERHEALTH]}function _getActivityLeadD22Array(){return[vm.PHARMA,vm.POSTMARKET,vm.CONSUMERHEALTH]}function _getActivityLeadD21Array(){return[vm.BIOLOGICAL,vm.POSTMARKET]}function _getActivityLeadD24Array(){return[vm.VETERINARY]}function _getActivityLeadD26Array(){return[vm.CLINICAL_BIO,vm.CLINICAL_PHA]}function _getPharmaceutical(){return vm.D22}function _getBiologic(){return vm.D21}function _getVeterinary(){return vm.D24}function _getClinical(){return vm.D26}function _getBiologicalLead(){return vm.BIOLOGICAL}function _getPharmaLead(){return vm.PHARMA}function _getPostMarketLead(){return vm.POSTMARKET}function _getConsumHealthLead(){return vm.CONSUMERHEALTH}function _getVeterinaryLead(){return vm.VETERINARY}function _getClinicalBioLead(){return vm.CLINICAL_BIO}function _getClinicalPhaLead(){return vm.CLINICAL_PHA}function _getShelfLifeUnitsArray(){return[{id:"YR",en:"Years",fr:"Années"},{id:"MO",en:"Months",fr:"Mois"},{id:"DA",en:"Days",fr:"Jours"},{id:"HR",en:"Hours",fr:"Heures"},{id:"MI",en:"Minutes",fr:"Minutes"}]}var vm=this;vm.env="",vm.raTypeArray=[],vm.feeTypeArray=[],vm.mitigationTypeArray=[],vm.D21="D21",vm.D22="D22",vm.D24="D24",vm.D26="D26",vm.BIOLOGICAL="B14-20160301-02",vm.CONSUMERHEALTH="B14-20160301-06",vm.PHARMA="B14-20160301-09",vm.POSTMARKET="B14-20160301-10",vm.VETERINARY="B14-20160301-11",vm.CLINICAL_BIO="B14-20160301-02",vm.CLINICAL_PHA="B14-20160301-09",vm.allActivities={ADMINISTRATIVE:"ADMINISTRATIVE",BENEFIT_RISK_ASSESS:"BENEFIT_RISK_ASSESS",CANCEL_LETTER:"CANCEL_LETTER",CHANGE_TO_DIN:"CHANGE_TO_DIN",COMMENTS_NOC:"COMMENTS_NOC",COMMENTS_SUMMARY_BASIS:"COMMENTS_SUMMARY_BASIS",COMMENTS_REGULARTORY_DECISION:"COMMENTS_REGULARTORY_DECISION",DIN_DISCONTINUED:"DIN_DISCONTINUED",DRUG_NOTIF_FORM:"DRUG_NOTIF_FORM",FOR_PERIOD:"FOR_PERIOD",INITIAL:"INITIAL",MEETING_MINUTES:"MEETING_MINUTES",NOTIFICATION_CHANGE:"NOTIFICATION_CHANGE",NOTIFICATION_INTERRUPT_SALE:"NOTIFICATION_INTERRUPT_SALE",PANDEMIC_APPL:"PANDEMIC_APPL",POST_CLEARANCE_DATA:"POST_CLEARANCE_DATA",POST_MARKET_SURV:"POST_MARKET_SURV",POST_NOC_CHANGE:"POST_NOC_CHANGE",POST_AUTH_DIV1_CHANGE:"POST_AUTH_DIV1_CHANGE",PRESUB_MEETING_PKG:"PRESUB_MEETING_PKG",PRESUB_MEETING_RQ:"PRESUB_MEETING_RQ",PRIORITY_REVIEW_RQ:"PRIORITY_REVIEW_RQ",SECOND_LANG_PM:"SECOND_LANG_PM",PRISTINE_PM_2LANG:"PRISTINE_PM_2LANG",ADVISEMENT_LETTER_RESPONSE:"ADVISEMENT_LETTER_RESPONSE",CLIN_CLARIF_RESPONSE:"CLIN_CLARIF_RESPONSE",EMAIL_RQ_RESPONSE:"EMAIL_RQ_RESPONSE",HSC_RQ_RESPONSE:"HSC_RQ_RESPONSE",QHSC_RQ_RESPONSE:"QHSC_RQ_RESPONSE",CHSC_RQ_RESPONSE:"CHSC_RQ_RESPONSE",QCHSC_RQ_RESPONSE:"QCHSC_RQ_RESPONSE",LABEL_CLARIF_RESPONSE:"LABEL_CLARIF_RESPONSE",MHPD_RQ_RESPONSE:"MHPD_RQ_RESPONSE",NOC_RESPONSE:"NOC_RESPONSE",NOD_RESPONSE:"NOD_RESPONSE",NOL_RESPONSE:"NOL_RESPONSE",NON_RESPONSE:"NON_RESPONSE",PROCESSING_CLARIF_RESPONSE:"PROCESSING_CLARIF_RESPONSE",QUAL_CLIN_CLARIF_RESPONSE:"QUAL_CLIN_CLARIF_RESPONSE",QUAL_CLARIF_RESPONSE:"QUAL_CLARIF_RESPONSE",RECON_DECIS_LTR_INTENT:"RECON_DECIS_LTR_INTENT",RECON_DECIS_RQ_RECON:"RECON_DECIS_RQ_RECON",RECON_DECIS_OTHER_INFO:"RECON_DECIS_OTHER_INFO",SCREENING_ACCEPT_RESPONSE:"SCREENING_ACCEPT_RESPONSE",SCREENING_CLARIF_RESPONSE:"SCREENING_CLARIF_RESPONSE",SDN_RESPONSE:"SDN_RESPONSE",LABEL_PREAPPROVAL_2LANG:"LABEL_PREAPPROVAL_2LANG",PHONE_RQ_RESPONSE:"PHONE_RQ_RESPONSE",RISK_COMMUN_DOC:"RISK_COMMUN_DOC",RMP_VERSION_DATE:"RMP_VERSION_DATE",UNSOLICITED_DATA:"UNSOLICITED_DATA",YEAR_LIST_OF_CHANGE:"YEAR_LIST_OF_CHANGE",BE_CLARIF_RESPONSE:"BE_CLARIF_RESPONSE",CORR_PATENT_MED:"CORR_PATENT_MED",ALLEGATION_NOTICE:"ALLEGATION_NOTICE",FORM_IV:"FORM_IV",FORM_V:"FORM_V",CONSENT_LTR:"CONSENT_LTR",DATA_PROTECT_CORRESP:"DATA_PROTECT_CORRESP",NONCLIN_CLARIF_RESPONSE:"NONCLIN_CLARIF_RESPONSE",SEQUENCE_CLEANUP:"SEQUENCE_CLEANUP",ADV_COMP_REQ:"ADV_COMP_REQ",CSOtRMP:"CSOtRMP",DISSEM_LIST:"DISSEM_LIST",FOREIGN_SAFETY_NOTIFICATION:"FOREIGN_SAFETY_NOTIFICATION",ISSUE_SAFETY_REQUEST:"ISSUE_SAFETY_REQUEST",PATIENT_SAFETY_INFO:"PATIENT_SAFETY_INFO",PUB_RELEASE_INFO:"PUB_RELEASE_INFO",RESSESS_ORDER:"RESSESS_ORDER",WRITTEN_CONSULT_REQ:"WRITTEN_CONSULT_REQ",TEST_STUDIES_ORDER:"TEST_STUDIES_ORDER",TERM_COND_COMM:"TERM_COND_COMM",YEAR:"YEAR",CTN_ADMINISTRATIVE:"CTN_ADMINISTRATIVE",CTN_APPENDIX:"CTN_APPENDIX",CTN_CONTACT:"CTN_CONTACT",CTN_DATA:"CTN_DATA",CTN_DEAR:"CTN_DEAR",CTN_DILUENT:"CTN_DILUENT",CTN_DRUG_PROD:"CTN_DRUG_PROD",CTN_DRUG_SUBS:"CTN_DRUG_SUBS",CTN_ENROLLMENT:"CTN_ENROLLMENT",CTN_ETHICS:"CTN_ETHICS",CTN_INFORMED:"CTN_INFORMED",CTN_INVESTIGATOR:"CTN_INVESTIGATOR",CTN_NEW_MANUFACTURING:"CTN_NEW_MANUFACTURING",CTN_NEW_PKG:"CTN_NEW_PKG",CTN_NEW_QC:"CTN_NEW_QC",CTN_PACKAGING_LABELLING:"CTN_PACKAGING_LABELLING",CTN_PROTOCOL_INFO_UPDATE:"CTN_PROTOCOL_INFO_UPDATE",CTN_PROTOCOL_UPDATE:"CTN_PROTOCOL_UPDATE",CTN_QOS:"CTN_QOS",CTN_REFUSALS:"CTN_REFUSALS",CTN_REGULATORY:"CTN_REGULATORY",CTN_RESPONSE:"CTN_RESPONSE",CTN_SAFETY:"CTN_SAFETY",CTN_SHELF_PD:"CTN_SHELF_PD",CTN_SHELF_DS:"CTN_SHELF_DS",CTN_SITE:"CTN_SITE",CTN_SOURCE:"CTN_SOURCE",CTN_STRAIN:"CTN_STRAIN",CTN_STUDY_COMPLETION:"CTN_STUDY_COMPLETION",CTN_STUDY_DISC:"CTN_STUDY_DISC",CTN_STUDY_EXT:"CTN_STUDY_EXT",CTN_STUDY_SUS:"CTN_STUDY_SUS",CTN_TRANS_OWN:"CTN_TRANS_OWN",CLINICAL:"CLINICAL",CLINICAL_QUALITY:"CLINICAL_QUALITY",QUALITY:"QUALITY",INITIAL_TEAT_SOLU_MONO:"INITIAL_TEAT_SOLU_MONO",REQ_ACCEPTED:"REQ_ACCEPTED",CTN_FORM_BROC_UPDATES:"CTN_FORM_BROC_UPDATES",CTN_IMPD_UPDATE:"CTN_IMPD_UPDATE",CTN_NEW_SUMM_ADF:"CTN_NEW_SUMM_ADF",COVIR_19:"COVIR-19",COVIR_19AMD:"COVIR-19AMD"};var service={getEnv:_getEnvString,setEnv:_setEnvString,getTransactionDescriptions:getTransactionDescriptionsArray,getActivityTypes:getActivityArray,createRaTypes:_createRaArray,getPharmaceuticalValue:_getPharmaceutical,getBiologicValue:_getBiologic,getVeterinaryValue:_getVeterinary,getClinicalValue:_getClinical,getBiologicalLeadValue:_getBiologicalLead,getPharmaLeadValue:_getPharmaLead,getPostMarketLeadValue:_getPostMarketLead,getConsumHealthLeadValue:_getConsumHealthLead,getVeterinaryLeadValue:_getVeterinaryLead,getClinicalBioLeadValue:_getClinicalBioLead,getClinicalPhaLeadValue:_getClinicalPhaLead,getPresubTypes:getPresubArray,getAndsType:getANDSArray,getV_AndsType:getV_AndsArray,getCtaType:getCtaArray,getCta_aType:getCta_aArray,getPreCtaType:getPreCtaArray,getDinaType:getDINAArray,getV_DinaType:getV_DINAArray,getDinbType:getDINBArray,getDindType:getDINDArray,getDinfType:getDINFArray,getDSurType:getDSurArray,getEundsType:getEUNDSArray,getEusndsType:getEUSNDSArray,getLevel3Type:getLevel3Array,getV_Level3Type:getV_Level3Array,getMPDINType:getMPDINArray,getV_MpdinType:getV_MpdinArray,getNcType:getNcArray,getV_NcType:getV_NcArray,getB_NcType:getB_NcArray,getNdsType:getNDSArray,getV_NdsType:getV_NdsArray,getPdcType:getPDCArray,getPdcBType:getPDCBArray,getPresubType:getPresubArray,getpSurCType:getPSURCArray,getpSurPvType:getPSURPVArray,getV_PsurPvType:getV_PsurPvArray,getRmpPvType:getRMPPVArray,getSandsType:getSANDSArray,getV_SandsType:getV_SandsArray,getSndsType:getSNDSArray,getV_SndsType:getV_SndsArray,getSndsCType:getSNDSCArray,getUdpvType:getUDPVArray,getUdraType:getUDRAArray,getV_UdraType:getV_UdraArray,getYbprType:getYBPRArray,getConsultType:getConsultArray,getMPNCType:_getMPNCArray,getV_MpncType:getV_MpncArray,getMPNDSType:_getMPNDSArray,getV_MpndsType:getV_MpndsArray,getV_MpandsType:getV_MpandsArray,getV_MpsandsType:getV_MpsandsArray,getV_RccType:getV_RccArray,getMPSNDSType:_getMPSNDSArray,getV_MpsndsType:getV_MpsndsArray,getPANDType:_getPANDArray,getPBRERCType:_getPBRERCArray,getPBRERPVType:_getPBRERPVArray,getPRNDSType:_getPRNDSArray,getPRSNDSType:_getPRSNDSArray,
getIRSRPVType:_getIRSRPVArray,getPAPVType:_getPAPVArray,getPSAPVType:_getPSAPVArray,getRCPVType:_getRCPVArray,getREGPVType:_getREGPVArray,getSANDSCType:_getSANDSCArray,getPostDINType:_getPostDINArray,getEUANDSType:_getEUANDSArray,getEUSANDSType:_getEUSANDSArray,getYesNoList:yesNoArray,getFeeList:_getfeeTypeArray,createFeeTypes:_createFeeArray,getMitigationList:_getMitigationTypeArray,createMitigationList:_createMitigationArray,getActivityLeadList:_getActivityLeadArray,getActivityLeadListByD22:_getActivityLeadD22Array,getActivityLeadListByD21:_getActivityLeadD21Array,getActivityLeadListByD24:_getActivityLeadD24Array,getActivityLeadListByD26:_getActivityLeadD26Array,getShelfLifeUnitsList:_getShelfLifeUnitsArray,getCOVIR19Type:_getCoVir19Array,getCOVID19AMDType:_getCoVir19AmdArray};return service}angular.module("services").factory("TransactionLists",getTransactionSeq),getTransactionSeq.inject=["$http","$q"]}(),function(){"use strict";angular.module("hpfbConstants",[]),angular.module("hpfbConstants").constant("SOFTWARE_VERSION","4.2.0").constant("PROD","PROD").constant("CANADA","CAN").constant("OTHER","OTHER").constant("YES","Y").constant("NO","N").constant("USA","USA").constant("UNKNOWN","UNKNOWN").constant("NEW","New").constant("EXISTING","Existing").constant("ENGLISH","en").constant("FRENCH","fr").constant("NEW_TYPE","NEW").constant("APPROVED_TYPE","FINAL").constant("DEPRECATED_APPROVED_TYPE","APPROVED").constant("AMEND_TYPE","AMEND").constant("INTERNAL_TYPE","INT").constant("EXTERNAL_TYPE","EXT").constant("PHARMA_TYPE","PHARMA").constant("RELATIVE_FOLDER_DATA","../data/").constant("CSP_XSL","CSP_Enrolment.xsl").constant("HCSC","hcsc").constant("XML","xml").constant("XSL_PREFIX","https://raw.githubusercontent.com/HealthCanada/HPFB/master/Regulatory-Enrolment-Process-REP/v_2_2/Style-Sheets/").constant("ADVANCE_FEE_PAYMENT_EN","https://www.canada.ca/content/dam/hc-sc/migration/hc-sc/dhp-mps/alt_formats/pdf/prodpharma/applic-demande/form/adv-pa-av2-eng.pdf").constant("ADVANCE_FEE_PAYMENT_FR","https://www.canada.ca/content/dam/hc-sc/migration/hc-sc/dhp-mps/alt_formats/pdf/prodpharma/applic-demande/form/adv-pa-av2-fra.pdf")}(),function(){"use strict";angular.module("filterLists",["hpfbConstants"])}(),function(){"use strict";function orderByTranslatedCountry($translate,$filter,CANADA,USA){return function(array,objKey){var result=[],translated=[];return angular.forEach(array,function(value){translated.push({key:value,label:$translate.instant(value)})}),result.push(CANADA),result.push(USA),angular.forEach($filter("orderBy")(translated,"label"),function(sortedObject){sortedObject.key!==CANADA&&sortedObject.key!==USA&&result.push(sortedObject.key)}),result}}function orderByTranslatedCountryAndLabel($translate,$filter,CANADA,USA){return function(array){var result=[],translated=[];return angular.forEach(array,function(value){translated.push({key:value,label:$translate.instant(value)})}),result.push({key:CANADA,label:$translate.instant(CANADA)}),result.push({key:USA,label:$translate.instant(USA)}),angular.forEach($filter("orderBy")(translated,"label"),function(sortedObject){sortedObject.key!==CANADA&&sortedObject.key!==USA&&result.push(sortedObject)}),result}}function findCountryObj(){return function(array,targetKey){for(var i=0;i<array.length;i++)if(array[i].key===targetKey)return array[i];return null}}function orderByTranslated($translate,$filter){return function(array){var result=[],translated=[];return angular.forEach(array,function(value){translated.push({key:value,label:$translate.instant(value)})}),angular.forEach($filter("orderBy")(translated,"label"),function(sortedObject){result.push(sortedObject.key)}),result}}function sequenceOrderBy($filter){return function(array){var result=[];return angular.forEach($filter("orderBy")(array,"sequence",!0),function(sortedObject){result.push(sortedObject)}),result}}function orderByTranslatedOtherFirst($translate,$filter,OTHER){return function(array){var result=[],translated=[];return angular.forEach(array,function(value){translated.push({key:value,label:$translate.instant(value)})}),result.push(OTHER),angular.forEach($filter("orderBy")(translated,"label"),function(sortedObject){sortedObject.key!==OTHER&&result.push(sortedObject.key)}),result}}function _orderByLocale(){return function(items,lang){return items.sort(function(a,b){return a[lang].localeCompare(b[lang],lang)}),items}}function _findById($filter){return function(array,searchJson){var initialResult=$filter("filter")(array,searchJson);if(!initialResult)return null;if(1===initialResult.length)return initialResult[0];for(var i=0;i<initialResult.length;i++)if(initialResult[i].id===searchJson.id)return initialResult[i];return null}}angular.module("filterLists").filter("orderByTranslatedCountry",orderByTranslatedCountry).filter("orderByTranslated",orderByTranslated).filter("orderByTranslatedOtherFirst",orderByTranslatedOtherFirst).filter("orderByCountryAndLabel",orderByTranslatedCountryAndLabel).filter("orderByLocale",_orderByLocale).filter("findCountryObject",findCountryObj).filter("findListItemById",_findById).filter("sequenceOrderDescending",sequenceOrderBy),orderByTranslatedCountry.$inject=["$translate","$filter","CANADA","USA"],orderByTranslated.$inject=["$translate","$filter"],orderByTranslatedOtherFirst.$inject=["$translate","$filter","OTHER"],_findById.$inject=["$filter"]}(),function(){"use strict";angular.module("applicationInfoService",[])}(),function(){"use strict";function ApplicationInfoService(){function ApplicationInfoService(){}return ApplicationInfoService.prototype.getTodayDate=function(){function pad(n){return n<10?"0"+n:n}var d=new Date,isoDate=d.getFullYear()+"-"+pad(d.getMonth()+1)+"-"+pad(d.getDate());return isoDate},ApplicationInfoService.prototype.incrementMinorVersion=function(enrolmentVersion){var result;if(enrolmentVersion){var parts=enrolmentVersion.split("."),dec=parseInt(parts[1]);result=parts[0]+"."+(dec+1)}else result="0.1";return result},ApplicationInfoService.prototype.incrementMajorVersion=function(enrolmentVersion){var result;if(enrolmentVersion){var parts=enrolmentVersion.split("."),whole=parseInt(parts[0]);result=whole+1+".0"}else result="1.0";return result},ApplicationInfoService.prototype.getApplicationStatusList=function(){return["NEW","AMEND","FINAL"]},ApplicationInfoService.prototype.getApprovedType=function(){return"FINAL"},ApplicationInfoService.prototype.getAmendType=function(){return"AMEND"},ApplicationInfoService}angular.module("applicationInfoService").factory("ApplicationInfoService",ApplicationInfoService)}(),function(){"use strict";angular.module("companyLoadService",["dataLists","hpfbConstants"])}(),function(){"use strict";angular.module("companyLoadService").factory("customLoad",["$http","$q","$filter","getCountryAndProvinces","CANADA","USA","RELATIVE_FOLDER_DATA",function($http,$q,$filter,getCountryAndProvinces,CANADA,USA,RELATIVE_FOLDER_DATA){function _createTranslateList(jsonList,lang){lang||(lang="en");for(var resultList={},i=0;i<jsonList.length;i++)resultList[jsonList[i].id]=jsonList[i][lang];return resultList}function _createSortedArrayNAFirst(jsonList,lang){var result=[],canadaRecord=null,usaRecord=null;return angular.forEach($filter("orderByLocale")(jsonList,lang),function(sortedObject){sortedObject.id===USA?usaRecord=sortedObject:sortedObject.id===CANADA?canadaRecord=sortedObject:result.push(sortedObject)}),usaRecord&&result.unshift(usaRecord),canadaRecord&&result.unshift(canadaRecord),result}return function(options){var deferred=$q.defer(),envUrl=RELATIVE_FOLDER_DATA+"env.json",countryUrl=RELATIVE_FOLDER_DATA+"countries.json",resultTranslateList={};return $http.get(envUrl).then(function(response){getCountryAndProvinces.setEnv(response.data)}),$http.get(countryUrl).then(function(response){var newList=_createSortedArrayNAFirst(response.data,options.key),translateList=_createTranslateList(newList,options.key);return getCountryAndProvinces.createCountryList(newList),angular.extend(resultTranslateList,translateList),response.data})["catch"](function(error){console.warn("An error occurred with Company List Load: "+error),deferred.reject(resultTranslateList)})["finally"](function(){deferred.resolve(resultTranslateList)}),deferred.promise}}])}(),function(){"use strict";angular.module("companyService",["dataLists","hpfbConstants"])}(),function(){"use strict";function CompanyService($filter,$translate,getCountryAndProvinces,XSL_PREFIX){function CompanyService(){var defaultCompanyData={dataChecksum:"",enrolmentVersion:"0.0",dateSaved:"",applicationType:"NEW",softwareVersion:"4.2.0",companyId:"",reasonAmend:"",addressList:[],contactList:[]};angular.extend(this._default,defaultCompanyData),this.addressID=0,this.contactId=0,this.xslFileName="REP_CO_4_2.xsl",this.helpTextSequences={loadFileInx:0,enrolIdx:0,fillingIdx:0,addressIdx:0,businessIdx:0,addRoleIdx:0,companyRepIdx:0,routingIdIdx:0,genXmlIdx:0};for(var keys=Object.keys(this.helpTextSequences),i=0;i<keys.length;i++)this.helpTextSequences[keys[i]]=i+1}return CompanyService.prototype={_default:{},getNumberKeys:function(obj){var numKeys=0;for(var prop in obj)obj.hasOwnProperty(prop)&&numKeys++;return numKeys},getApplicationTypes:function(){return["NEW","AMEND","FINAL"]},getApprovedType:function(){return"FINAL"},getAmendType:function(){return"AMEND"},getXSLFileName:function(){return this.xslFileName},createAddressRole:function(){var defaultAddressRole={manufacturer:!1,mailing:!1,billing:!1};return defaultAddressRole},createContactRole:function(){var defaultContactRole={manufacturer:!1,mailing:!1,billing:!1,repPrimary:!1};return defaultContactRole},createAddressRecord:function(){var defaultAddress={addressID:1,companyName:"",businessNumber:"",addressRole:{manufacturer:!1,mailing:!1,billing:!1},street:"",city:"",stateList:"",stateText:"",country:"",postalCode:""};return defaultAddress.addressID=this.getNextAddressID(),defaultAddress},createContactRecord:function(){var defaultContact={contactId:1,addressRole:{manufacturer:!1,mailing:!1,billing:!1,repPrimary:!1},contactRole:"",givenName:"",surname:"",initials:"",title:"",phone:"",phoneExt:"",fax:"",email:"",routingId:""};return defaultContact.contactId=this.getNextContactID(),defaultContact},updateAddressID:function(value){isNaN(value)||value>this.addressID&&(this.addressID=value)},getNextAddressID:function(){return this.addressID=this.addressID+1,this.addressID},resetAddressID:function(value){value?this.addressID=value:this.addressID=0},updateContactID:function(value){isNaN(value)||value>this.contactId&&(this.contactId=value)},getNextContactID:function(){return this.contactId=this.contactId+1,this.contactId},resetContactID:function(value){value?this.contactId=value:this.contactId=0},getRootTag:function(){return"COMPANY_ENROL"},transformFromFileObj:function(jsonObj){var rootTag=this.getRootTag(),companyInfo=this.getCompanyInfo(jsonObj[rootTag]),addressInfo={addressList:this.getAddressList(jsonObj[rootTag].address_record)},contactInfo={contactList:this.getContactList(jsonObj[rootTag].contact_record)};this._default={},angular.extend(this._default,companyInfo,addressInfo,contactInfo)},transformToFileObj:function(jsonObj){var resultJson={COMPANY_ENROL:{template_type:"PHARMA",data_checksum:jsonObj.dataChecksum,enrolment_version:jsonObj.enrolmentVersion,date_saved:jsonObj.dateSaved,application_type:jsonObj.applicationType,software_version:jsonObj.softwareVersion,company_id:jsonObj.companyId,reason_amend:jsonObj.reasonAmend,address_record:_mapAddressListToOutput(jsonObj.addressList,$translate),contact_record:_mapContactListToOutput(jsonObj.contactList,$translate)}};return resultJson},getModelInfo:function(){return this._default},getCompanyInfo:function(info){return info?{dataChecksum:info.data_checksum,enrolmentVersion:info.enrolment_version,dateSaved:info.date_saved,applicationType:info.application_type,softwareVersion:info.software_version,companyId:info.company_id,reasonAmend:info.reason_amend,addressList:[],contactList:[]}:this._default},getAddressList:function(adrList){var list=[];if(!adrList)return list;adrList instanceof Array||(adrList=[adrList]);for(var i=0;i<adrList.length;i++){this.updateAddressID(parseInt(adrList[i].address_id));var address={};address.addressID=adrList[i].address_id,address.companyName=adrList[i].company_name,address.businessNumber=adrList[i].business_number,address.addressRole={},address.addressRole.manufacturer="Y"===adrList[i].manufacturer,address.addressRole.mailing="Y"===adrList[i].mailing,address.addressRole.billing="Y"===adrList[i].billing,address.street=adrList[i].company_address_details.street_address,address.city=adrList[i].company_address_details.city,adrList[i].company_address_details.province_lov?address.stateList=adrList[i].company_address_details.province_lov._id:address.stateList="",address.stateText=adrList[i].company_address_details.province_text,address.country="";var currentLang=$translate.proposedLanguage()||$translate.use();adrList[i].company_address_details.country._id&&(address.country=$filter("filter")(getCountryAndProvinces.getCountries(),{id:adrList[i].company_address_details.country._id})[0],address.countryHtml=$translate.instant(address.country.id,"","",currentLang),address.countryDisplay=address.country.id),address.postalCode=adrList[i].company_address_details.postal_code,list.push(address)}return list},getContactList:function(contacts){var list=[];if(!contacts)return list;contacts instanceof Array||(contacts=[contacts]);for(var i=0;i<contacts.length;i++){var contact={},contact_rec_index=contacts[i].contact_id;contact.contactId=contact_rec_index,this.updateContactID(contact_rec_index),contact.addressRole={},contact.addressRole.manufacturer="Y"===contacts[i].manufacturer,contact.addressRole.mailing="Y"===contacts[i].mailing,contact.addressRole.billing="Y"===contacts[i].billing,contact.addressRole.repPrimary="Y"===contacts[i].rep_primary,contact.addressRole.repSecondary="Y"===contacts[i].rep_secondary,contact.givenName=contacts[i].company_contact_details.given_name,contact.initials=contacts[i].company_contact_details.initials,contact.surname=contacts[i].company_contact_details.surname,contact.title=contacts[i].company_contact_details.job_title,contact.language=contacts[i].company_contact_details.language_correspondance._id,contact.phone=contacts[i].company_contact_details.phone_num,contact.phoneExt=contacts[i].company_contact_details.phone_ext,contact.fax=contacts[i].company_contact_details.fax_num,contact.email=contacts[i].company_contact_details.email,contact.routingId=contacts[i].company_contact_details.RoutingID,list.push(contact)}return list}},CompanyService}function _mapAddressListToOutput(adrList,$translate){var addressList=[],currentLang=$translate.proposedLanguage()||$translate.use();if(adrList)for(var i=0;i<adrList.length;i++){var address={};address.address_id=adrList[i].addressID,address.manufacturer=adrList[i].addressRole.manufacturer===!0?"Y":"N",address.mailing=adrList[i].addressRole.mailing===!0?"Y":"N",address.billing=adrList[i].addressRole.billing===!0?"Y":"N",address.company_name=adrList[i].companyName,address.business_number=adrList[i].businessNumber,address.company_address_details={},address.company_address_details.street_address=adrList[i].street,address.company_address_details.city=adrList[i].city,adrList[i].stateList?address.company_address_details.province_lov={_id:adrList[i].stateList,__text:$translate.instant(adrList[i].stateList,"","",currentLang)}:address.company_address_details.province_lov="",address.company_address_details.province_text=adrList[i].stateText,address.company_address_details.country="",adrList[i].country&&(address.company_address_details.country={_id:adrList[i].country.id,_label_en:adrList[i].country.en,_label_fr:adrList[i].country.fr,__text:$translate.instant(adrList[i].country.id,"","",currentLang)}),address.company_address_details.postal_code=adrList[i].postalCode,addressList.push(address)}return addressList}function _mapContactListToOutput(contacts,$translate){var contactList=[],currentLang=$translate.proposedLanguage()||$translate.use();if(contacts)for(var i=0;i<contacts.length;i++){var contact={};contact.contact_id=contacts[i].contactId,contact.manufacturer=contacts[i].addressRole.manufacturer===!0?"Y":"N",contact.mailing=contacts[i].addressRole.mailing===!0?"Y":"N",contact.billing=contacts[i].addressRole.billing===!0?"Y":"N",contact.rep_primary=contacts[i].addressRole.repPrimary===!0?"Y":"N",contact.company_contact_details={},contact.company_contact_details.given_name=contacts[i].givenName,contact.company_contact_details.initials=contacts[i].initials,contact.company_contact_details.surname=contacts[i].surname,contact.company_contact_details.job_title=contacts[i].title,contact.company_contact_details.language_correspondance={_id:contacts[i].language,__text:$translate.instant(contacts[i].language,"","",currentLang)},contact.company_contact_details.phone_num=contacts[i].phone,contact.company_contact_details.phone_ext=contacts[i].phoneExt,contact.company_contact_details.fax_num=contacts[i].fax,contact.company_contact_details.email=contacts[i].email,contact.company_contact_details.RoutingID=contacts[i].routingId,contactList.push(contact)}return contactList}angular.module("companyService").factory("CompanyService",CompanyService),CompanyService.$inject=["$filter","$translate","getCountryAndProvinces","XSL_PREFIX"],String.prototype.capitalizeFirstLetter=function(){return this.charAt(0).toUpperCase()+this.slice(1).toLowerCase()}}(),function(){"use strict";angular.module("companyHelpText",["services","filterLists","hpfbConstants","dataLists"])}(),function(){"use strict";function CompanyHelpTextCtrl($translate,$scope,getCountryAndProvinces,PROD){var vm=this;vm.lang=$translate.proposedLanguage()||$translate.use(),vm.isForProd=PROD===getCountryAndProvinces.getEnv(),vm.$onInit=function(){}}angular.module("companyHelpText").component("cmpCompanyHelpText",{templateUrl:"app/scripts/components/companyHelpText/tpl-company-help-text_20210122_1445.html",controller:CompanyHelpTextCtrl,controllerAs:"help",bindings:{htIndxList:"<"}}),CompanyHelpTextCtrl.$inject=["$translate","$scope","getCountryAndProvinces","PROD"]}(),function(){"use strict";angular.module("alertModule",[])}(),function(){"use strict";function alertController(){var vm=this;vm.alertVisible=!1,vm.closeMsgAlias="CLOSE_ALERT",vm.anchor=null,vm.$onInit=function(){vm.alertVisible=!1},vm.$onChanges=function(changes){changes.msg&&(vm.closeMsgAlias=changes.msg.currentValue),changes.uiState&&(vm.alertVisible=changes.uiState.currentValue),changes.myAnchor&&(vm.anchor=changes.myAnchor.currentValue)},vm.open=function(){vm.updateState()},vm.close=function(){vm.updateState(),vm.anchor&&document.getElementById(vm.anchor).focus()},vm.isAlertVisible=function(){return vm.alertVisible}}angular.module("alertModule").component("cmpAlert",{templateUrl:"app/scripts/components/alertComponent/tpl-alert_20210122_1445.html",transclude:!0,bindings:{uiState:"<",msg:"@",myAnchor:"<",updateState:"&",type:"@"},controller:alertController,controllerAs:"alertCtrl"}),alertController.$inject=[]}(),function(){"use strict";angular.module("errorMessageModule",[])}(),function(){"use strict";function errorMessageController(){var vm=this;vm.field_name="",vm.form_ref=null,vm.fieldRecords=[],vm.$onChanges=function(changes){changes.fieldName&&(vm.field_name=changes.fieldName.currentValue),changes.formRef&&(vm.form_ref=changes.formRef.currentValue),changes.errorTypes&&(vm.fieldRecords=changes.errorTypes.currentValue)},vm.showErrorMessage=function(){return!!vm.form_ref&&(angular.isUndefined(vm.fieldName)?(console.warn("No field name for: "+vm.form_ref.$name),!1):angular.isUndefined(vm.form_ref[vm.fieldName])?(console.warn("lookup undefined "+vm.form_ref.$name+"."+vm.fieldName),!1):vm.showError()&&vm.form_ref[vm.fieldName].$invalid||vm.form_ref[vm.fieldName].$touched&&vm.form_ref[vm.fieldName].$invalid)}}angular.module("errorMessageModule").component("cmpErrorMessage",{templateUrl:"app/scripts/components/error-message/tpl-error-message_20210122_1445.html",controller:errorMessageController,controllerAs:"errMessageCtrl",bindings:{fieldName:"<",formRef:"<",showError:"&",errorTypes:"<"}})}(),function(){"use strict";angular.module("errorSummaryModule",["focus-if"])}(),function(){"use strict";function errorSummaryController($scope,$location,$anchorScroll){function _isErrorSummaryVisible(){return vm.isVisible&&vm.errorArray&&vm.errorArray.length>0}function _hideRequiredRecordErrors(errors){var keys=Object.keys(errors);if(keys instanceof Array||(keys=[keys]),keys.indexOf("ingRecCtrl.activeIngForm")>-1)for(var i=0;i<keys.length;i++)if(keys[i].indexOf("no_active")>-1){delete errors[keys[i]];break}if(keys.indexOf("ctrCtrl.containerTypeForm")>-1)for(var i=0;i<keys.length;i++)if(keys[i].indexOf("no_container")>-1){delete errors[keys[i]];break}}function _getErr(errorObj,resultsList,parent){for(var keys=Object.keys(errorObj),i=0;i<keys.length;i++){var record=errorObj[keys[i]];record instanceof Array||(record=[record]);for(var j=0;j<record.length;j++){var numIndex=record[j].$name.lastIndexOf("_"),transcludeName="";if(numIndex>0&&(transcludeName=record[j].$name.substring(0,numIndex)),record[j].$invalid===!0&&record[j].$name.indexOf(".")>0)if(vm.exclusions&&vm.exclusions.hasOwnProperty(record[j].$name)){var tabIndex=vm.exclusions[record[j].$name].indexOf("tab_"),tabId=-1;tabIndex>-1&&(tabId=vm.exclusions[record[j].$name].substr(tabIndex+4),tabId=parseInt(tabId)),angular.merge(resultsList,_createSummaryRecord(record[j].$name,keys[i],parent,tabId))}else _getErr(record[j].$error,resultsList,record[j].$name);else if(vm.transcludeNames.hasOwnProperty(transcludeName)){var exIndex=record[j].$name.indexOf(transcludeName),expandIndex=record[j].$name.substring(exIndex+transcludeName.length+1);angular.merge(resultsList,_createExpanderRecord(record[j].$name,transcludeName,keys[i],parent,expandIndex))}else if(record[j].$invalid===!0&&!resultsList.hasOwnProperty(record[j].$name)){var result=_processRecord(record[j].$name,keys[i],parent);"SAVELIFEREC"===result[record[j].$name].translateKey&&(result[record[j].$name].type=""),angular.merge(resultsList,result)}}}}function _scrubFieldName(rawName){var separator="_",index=rawName.lastIndexOf(separator),cleanedName="";return cleanedName=index>-1?rawName.substring(0,index):rawName}function _getElementScope(rawName){var separator="_",nameSplit=rawName.split(separator),scopeId=parseInt(nameSplit[nameSplit.length-1]);return angular.isNumber(scopeId)||(scopeId=""),scopeId}function _processRecord(error_Name,errorType,parent){var result={},scrubName=_scrubFieldName(error_Name),scopeId=_getElementScope(error_Name),errorKey="TYPE_"+errorType.toUpperCase(),destId=error_Name;if(vm.alias&&vm.alias.hasOwnProperty(scrubName)){var aliasRec=vm.alias[scrubName];switch(aliasRec.type.toLowerCase()){case"fieldset":var searchId=aliasRec.parent+"_"+scopeId,destObj=$("#"+searchId).find("input:visible:first");destObj.length>0&&(destId=destObj[0].id);break;case"element":destId=aliasRec.target+"_"+scopeId;break;case"elementnoid":destId=aliasRec.target;break;case"pattern":"pattern"===errorType&&(errorKey=aliasRec.errorType);break;case"select2":var searchId=aliasRec.name+"_match"+scopeId,destObj=$("#"+searchId);destObj.length>0&&(destId=searchId);break;case"min":"min"===errorType&&(errorKey=aliasRec.errorType);break;case"max":"max"===errorType&&(errorKey=aliasRec.errorType);break;case"minlength":"minlength"===errorType&&(errorKey=aliasRec.errorType);break;case"maxlength":"maxlength"===errorType&&(errorKey=aliasRec.errorType);break;case"buttonsearch":errorKey="TYPE_REQUIRED",$.each($("button","#"+vm.startFormId),function(k){var temp_attr=$(this).attr("id");temp_attr&&temp_attr.indexOf(aliasRec.buttonName)>-1&&(destId=temp_attr)});break;default:console.warn("No type found "+aliasRec.type)}}return result[error_Name]||(result[error_Name]={name:destId,errorName:error_Name,translateKey:scrubName.toUpperCase(),type:errorKey,parent:parent,concat:parent+"."+error_Name,isSummary:!1}),result}function _sortErrorsByDomOrder(){var domFieldList={};$.each($("input, select, textarea, fieldset"),function(k){var temp_attr=$(this).attr("id");temp_attr&&(domFieldList[temp_attr]=k)});for(var keyList=Object.keys(domFieldList),p=0;p<keyList.length;p++){if(keyList[p].indexOf("focusser-")>-1){var parentName=angular.element(document.querySelector("#"+keyList[p])).parent().attr("name");parentName&&(keyList[p]=parentName)}vm.uniqueErrorList[keyList[p]]||(keyList.splice(p,1),p--)}for(var sortedDomJsonList={},v=0;v<keyList.length;v++)0==keyList[v].indexOf("no_")&&(keyList[v]=keyList[v].replace("no_","list_")),sortedDomJsonList[keyList[v]]=v;var newErrors=Object.keys(vm.uniqueErrorList).map(function(k){return vm.uniqueErrorList[k]}),notDefined={};if(newErrors.length>0)for(var i=0;i<newErrors.length;){var currRec=newErrors[i],targetName=currRec.errorName,destIndex=sortedDomJsonList[targetName];if(angular.isDefined(destIndex)&&destIndex!==i){var tempRec=angular.copy(newErrors[destIndex]);newErrors[destIndex]=angular.copy(currRec),newErrors[i]=angular.copy(tempRec)}else angular.isDefined(destIndex)||(notDefined[currRec.name]={rec:currRec,pos:i}),i++}return _sortUnknowns(notDefined,newErrors),newErrors}function _sortUnknowns(unknownJson,sortList){for(var unknownArray=Object.keys(unknownJson).map(function(k){return unknownJson[k]}),i=0;i<unknownArray.length;i++){var unknownRec=unknownArray[i],unknownName=unknownRec.rec.name,scopeIndex=_getElementScope(unknownName);if(angular.isNumber(scopeIndex))for(var g=sortList.length-1;g>=0;g--){var sortRec=sortList[g],sortScope=_getElementScope(sortRec.name);if(angular.isNumber(sortScope)&&sortScope===scopeIndex&&unknownName!==sortRec.name){sortList.move(unknownRec.pos,g+1);break}}}}function _createSummaryRecord(name,type,parent,tabId){var result={};return angular.isDefined(tabId)||(tabId=-1),result[name]={name:name,type:type,translateKey:name.toUpperCase(),parent:parent,concat:parent+"."+name,tabId:tabId,isSummary:!0},result}function _createExpanderRecord(name,transcludeName,type,parent,expanderIndex){var result={};return result[name]={name:name,type:type,translateKey:transcludeName.toUpperCase(),parent:parent,concat:parent+"."+name,isSummary:!0,toExpand:!0,exIndex:parseInt(expanderIndex)},result}var vm=this;vm.parentRef=null,vm.errorArray=[],vm.uniqueErrorList={},vm.isVisible=!1,vm.nameAddendum="",vm.rootError="",vm.isFocusInput=0,vm.exclusions={},vm.alias={},vm.transcludeNames={},vm.headingPreamble="",vm.headerLevel="",vm.startFormId="",vm.$onInit=function(){},vm.$onChanges=function(changes){changes.setHeadingLevel&&angular.isDefined(changes.setHeadingLevel.currentValue)&&(vm.headerLevel=changes.setHeadingLevel.currentValue.toLowerCase()),changes.nameSuffix&&(vm.nameAddendum="-"+changes.nameSuffix.currentValue),changes.formPreamble&&(vm.headingPreamble=changes.formPreamble.currentValue),changes.exclusionList&&(vm.exclusions=changes.exclusionList.currentValue),changes.aliasList&&(vm.alias=changes.aliasList.currentValue),changes.formRef&&vm.getErrorsSumm(changes.formRef.currentValue.$error,changes.formRef.currentValue.$name),changes.showErrors&&(vm.isVisible=changes.showErrors.currentValue),changes.updateErrors&&vm.formRef&&vm.isVisible&&vm.getErrorsSumm(vm.formRef.$error,vm.formRef.$name),changes.makeFocused&&changes.makeFocused.currentValue&&(vm.isFocusInput=vm.isFocusInput+1),changes.formId&&(vm.startFormId=changes.formId.currentValue),changes.transcludeList&&changes.transcludeList.currentValue&&(vm.transcludeNames=changes.transcludeList.currentValue)},vm.calcIsVisible=function(){var summaryIsVisible=_isErrorSummaryVisible();return summaryIsVisible||$scope.$emit("childErrorSummaryHide",+vm.nameAddendum),summaryIsVisible},vm.scrollTo=function(errorRecord){var hashId="";errorRecord&&(hashId=errorRecord.isSummary?"errors-summary-"+errorRecord.name:errorRecord.name,vm.expandRecord({index:errorRecord.exIndex}),$location.hash(hashId),$anchorScroll())},vm.selectVisibleTab=function(errorRecord){"errors-summary-"+errorRecord.name;vm.selectTab({index:errorRecord.tabId})},vm.isSummaryLink=function(errorRecord){return errorRecord.isSummary&&!angular.isDefined(errorRecord.toExpand)&&angular.isDefined(errorRecord.tabId)&&parseInt(errorRecord.tabId)<0},vm.isList=function(errorRecord){return errorRecord.name.indexOf("list_")>=0},vm.isTabLink=function(errorRecord){return errorRecord.isSummary&&angular.isDefined(errorRecord.tabId)&&parseInt(errorRecord.tabId)>-1},vm.isExpanderLink=function(errorRecord){return angular.isDefined(errorRecord.toExpand)},$scope.$on("childErrorSummaryHide",function(event,data){if(_isErrorSummaryVisible())for(var errorSummaryBroadcastName=data.message,i=0;i<vm.errorArray.length;i++){var errorRecord=errorArray[i];errorRecord.isSummary&&errorRecord.name===errorSummaryBroadcastName&&vm.errorArray.splice(i,1)}}),vm.getErrorsSumm=function(myformErrors,name){if(vm.errorArray=[],vm.uniqueErrorList={},_getErr(myformErrors,vm.uniqueErrorList,name),_hideRequiredRecordErrors(vm.uniqueErrorList),"COMPANY_FORM"==vm.formPreamble){vm.errorArray=Object.keys(vm.uniqueErrorList).map(function(k){return vm.uniqueErrorList[k]});for(var temp=vm.errorArray[0],i=0;i<vm.errorArray.length-1;i++)vm.errorArray[i]=vm.errorArray[i+1],"required"==vm.errorArray[i].type&&(vm.errorArray[i].type="TYPE_REQUIRED");vm.errorArray[vm.errorArray.length-1]=temp}else{var newErrors=_sortErrorsByDomOrder();angular.equals(vm.errorArray,newErrors)||(vm.errorArray=newErrors)}},Array.prototype.move=function(from,to){to<0&&(to=0),to>=this.length&&(to=this.length-1),this.splice(to,0,this.splice(from,1)[0])}}angular.module("errorSummaryModule").component("cmpErrorSummary",{templateUrl:"app/scripts/components/error-summary/tpl-error-summary_20210122_1445.html",controller:errorSummaryController,controllerAs:"errSummaryCtrl",bindings:{formRef:"<",showErrors:"<",updateErrors:"<",nameSuffix:"@",formPreamble:"@",makeFocused:"<",setHeadingLevel:"@",exclusionList:"<",transcludeList:"<",formId:"<",aliasList:"<",expandRecord:"&",selectTab:"&"}}),errorSummaryController.$inject=["$scope","$location","$anchorScroll"]}(),function(){"use strict";angular.module("dossierIdDetails",["errorMessageModule"])}(),function(){"use strict";function dossierIdDetailsCtrl($scope){function _setIdNames(){var scopeId="_"+$scope.$id;vm.dossierId="dossier_id"+scopeId}var vm=this;vm.record={dossierId:""},vm.detailsIndex=0,vm.isEditable=!0,vm.min7Error=[{type:"required",displayAlias:"MSG_ERR_MAND"},{type:"minlength",displayAlias:"MSG_LENGTH_7NUM"}],vm.$onInit=function(){_setIdNames()},vm.$onChanges=function(changes){changes.dossierRecord&&(vm.record=changes.dossierRecord.currentValue),changes.idIndex&&(vm.detailsIndex=changes.idIndex.currentValue),changes.isAmend&&(vm.isEditable=changes.isAmend.currentValue)},vm["delete"]=function(){vm.deleteId({dossierIndex:vm.detailsIndex})},vm.showError=function(ctrl){return!!ctrl&&!!(ctrl.$invalid&&ctrl.$touched||vm.showErrors()&&ctrl.$invalid)}}angular.module("dossierIdDetails").component("cmpDossierIdDetails",{templateUrl:"app/scripts/components/dossierIdDetails/tpl-dossier-id-details_20210122_1445.html",controller:dossierIdDetailsCtrl,controllerAs:"dosIdCtrl",bindings:{dossierRecord:"<",idIndex:"<",deleteId:"&",showErrors:"&",isAmend:"<",setReadonly:"&"}}),dossierIdDetailsCtrl.$inject=["$scope"]}(),function(){"use strict";angular.module("importerProducts",["dossierIdDetails","errorMessageModule"])}(),function(){"use strict";function importerProductsCtrl($scope){function _setIdNames(){var scopeId="_"+$scope.$id;vm.prodTypesId="product_types"+scopeId}var vm=this;vm.formAmend=!1,vm.someProducts=!1,vm.isEditable=!0,vm.recordReadOnly=!1,vm.productTypeList=["ALL_PRODUCTS","SELECTED_PRODUCTS"],vm.requiredOnly=[{type:"required",displayAlias:"MSG_ERR_MAND"}],vm.model={selectedProducts:"",dossierIdList:[]},vm.$onInit=function(){_setIdNames(),vm.productTypeChanged()},vm.$onChanges=function(changes){changes.importerRecord&&changes.importerRecord.currentValue&&(vm.model=changes.importerRecord.currentValue,
vm.productTypeChanged()),changes.isAmend&&(vm.isEditable=changes.isAmend.currentValue)},vm.disableAddButton=function(){return vm.importProdForm.$invalid},vm.addDossierId=function(){vm.model.dossierIdList instanceof Array||(vm.model.dossierIdList=[]),vm.model.dossierIdList.push({dossierId:""}),vm.isDetailValid({state:!1})},vm.deleteId=function(index){index>vm.model.dossierIdList.length-1||(vm.model.dossierIdList.splice(index,1),vm.isDetailValid({state:!0}))},vm.isIdInvalid=function(index){return!(vm.model.dossierIdList[index].dossierId&&7===vm.model.dossierIdList[index].dossierId.length)},vm.productTypeChanged=function(){"SELECTED_PRODUCTS"!==vm.model.selectedProducts?(vm.model.dossierIdList=[],vm.someProducts=!1):(vm.someProducts=!0,0===vm.model.dossierIdList.length&&vm.model.dossierIdList.push({dossierId:""}))},vm.showError=function(ctrl){return!!ctrl&&(ctrl.$invalid&&ctrl.$touched||vm.showErrors()&&ctrl.$invalid)},vm.setNotEditable=function(){return!1}}angular.module("importerProducts").component("cmpImporterProducts",{templateUrl:"app/scripts/components/companyImporterProducts/tpl-importer-products_20210122_1445.html",controller:importerProductsCtrl,controllerAs:"impProdCtrl",bindings:{updateValid:"&",onDelete:"&",isAmend:"<",isDetailValid:"&",importerRecord:"<",showErrors:"&",onUpdate:"&"}}),importerProductsCtrl.$inject=["$scope"]}(),function(){"use strict";angular.module("contactRecord",["addressRole","contactModule","errorSummaryModule"])}(),function(){"use strict";function contactRecCtrl($scope){function _getRolesConcat(){var addressRoles=vm.contactModel.addressRole,result="";return addressRoles.manufacturer&&(result+=" MFR"),addressRoles.billing&&(result+=" BILL"),addressRoles.mailing&&(result+=" MAIL"),addressRoles.repPrimary&&(result+=" REP1"),result}var vm=this;vm.savePressed=!1,vm.isContact=!0,vm.isEditable=!1,vm.formAmend=!1,vm.updateSummary=0,vm.setSummaryFocus=0,vm.showSummary=!1,vm.contactModel={roleConcat:"",contactId:"",amendRecord:!1,addressRole:{manufacturer:!1,mailing:!1,billing:!1,repPrimary:!1,repSecondary:!1},contactRole:"",salutation:"",givenName:"",surname:"",initials:"",title:"",phone:"",PhoneExt:"",fax:""},vm.alias={contactRoleMissing:{type:"fieldset",parent:"fs_roleMissing"},phoneNumber:{type:"pattern",errorType:"MSG_ERR_PHONE_FORMAT"}},vm.$onInit=function(){vm.updateErrorSummaryState(),vm.contactModel.focusOnFirstName=vm.isFocus},vm.$onChanges=function(changes){changes.contactRecord&&(vm.contactModel=angular.copy(changes.contactRecord.currentValue),vm.contactModel.roleConcat=_getRolesConcat(),vm.setEditable()),changes.isAmend&&(vm.formAmend=changes.isAmend.currentValue,vm.contactModel.amendRecord=changes.isAmend.currentValue,vm.setEditable()),changes.showErrorSummary&&(vm.showSummary=changes.showErrorSummary.currentValue,vm.updateErrorSummaryState())},vm.isOneSelected=function(type){return vm.isRoleSelected({roleName:type,id:vm.contactModel.contactId})},vm.updateErrorSummaryState=function(){vm.updateSummary=vm.updateSummary+1},vm["delete"]=function(){vm.onDelete({contactId:vm.contactModel.contactId}),vm.updateErrorSummary(),vm.cancelFocus()},vm.discardChanges=function(){if(!vm.contactRecForm.$pristine){var currRecord=vm.contactRecord;vm.contactModel=angular.copy(currRecord),vm.setEditable(),vm.contactRecForm.$setPristine(),vm.contactModel&&vm.onUpdate({contact:vm.contactModel}),vm.isDetailValid({state:vm.contactRecForm.$valid}),vm.errorSummaryUpdate()}},vm.onContactRoleUpdate=function(newRole){var aRole={};angular.extend(aRole,newRole),vm.contactModel.addressRole=aRole,vm.updateContactModel2(),vm.showRoutingId(),vm.setEditable()},vm.updateValid=function(){vm.isDetailValid({state:vm.contactRecForm.$valid&&!vm.contactRecForm.$dirty})},$scope.$watch("contactRec.contactRecForm.$dirty",function(){vm.contactRecForm.$dirty&&vm.isDetailValid({state:!1})},!0),$scope.$watch("contactRec.contactRecForm.$error",function(){vm.updateErrorSummaryState(),vm.updateErrorSummary()},!0),vm.updateContactModel2=function(){vm.contactModel.roleConcat=_getRolesConcat(),vm.contactRecForm.$valid?(vm.isDetailValid({state:!0}),vm.contactRecForm.$setPristine(),vm.onUpdate({contact:vm.contactModel}),vm.showSummary=!1,vm.contactModel.focusOnFirstName=!1,vm.errorSummaryUpdate()):(vm.showSummary=!0,vm.errorSummaryUpdate(),vm.updateErrorSummaryState(),vm.focusOnSummary())},vm.focusOnSummary=function(){vm.setSummaryFocus=vm.setSummaryFocus+1},vm.showErrors=function(){return vm.showSummary},vm.setEditable=function(){vm.formAmend?vm.formAmend&&vm.contactModel.amendRecord?vm.isEditable=!0:vm.isEditable=!1:vm.isEditable=!0},vm.showRoutingId=function(){return vm.contactModel.roleConcat=_getRolesConcat(),vm.contactModel.roleConcat.indexOf(" MFR")>-1||vm.contactModel.roleConcat.indexOf(" MAIL")>-1?0:(vm.contactModel.routingId="",-1)}}angular.module("contactRecord").component("cmpContactRecord",{templateUrl:"app/scripts/components/contactRecord/tpl-contact-record_20210122_1445.html",controller:contactRecCtrl,controllerAs:"contactRec",bindings:{contactRecord:"<",onUpdate:"&",updateValid:"&",checkRoles:"&",onDelete:"&",isAmend:"<",isDetailValid:"&",isRoleSelected:"&",recordIndex:"<",errorSummaryUpdate:"&",showErrorSummary:"<",updateErrorSummary:"&",htIndxList:"<",isFocus:"<",cancelFocus:"&"}}),contactRecCtrl.$inject=["$scope"]}(),function(){"use strict";angular.module("addressRecord",["addressModule","addressRole","filterLists","hpfbConstants","errorSummaryModule","errorMessageModule","dataLists"])}(),function(){"use strict";function addressRecCtrl($scope,CANADA,$filter,getCountryAndProvinces,$translate,INTERNAL_TYPE,EXTERNAL_TYPE){function _getRolesConcat(){var addressRoles=vm.addressModel.addressRole,result="";return addressRoles.manufacturer&&(result+=" MFR,"),addressRoles.billing&&(result+=" BILL,"),addressRoles.mailing&&(result+=" MAIL,"),result=result.substring(0,result.length-1)}function _setIdNames(){var scopeId="_"+$scope.$id;vm.companyNameId="COMPANYNAME"+scopeId,vm.formNameId="company-address-record-form"+scopeId,vm.businessNumberId="businessNumberId"+scopeId}var vm=this;vm.des=!1,vm.lang=$translate.proposedLanguage()||$translate.use(),vm.isContact=!1,vm.isEditable=!0,vm.formAmend=!1,vm.updateCountry=0,vm.updateSummary=0,vm.setSummaryFocus=0,vm.addressRecForm="",vm.showSummary=!1,vm.isInternal=!1,vm.addressModel={addressID:1,companyName:"",businessNumber:"",amendRecord:!1,addressRole:{manufacturer:!1,mailing:!1,billing:!1},street:"",city:"",provLov:"",stateList:"",stateText:"",country:"",countryHtml:"",postalCode:""},vm.alias={roleMissing:{type:"fieldset",parent:"fs_roleMissing"},postal:{type:"pattern",errorType:"POSTAL_FORMAT"}},vm.requiredOnly=[{type:"required",displayAlias:"MSG_ERR_MAND"}],vm.length6Error=[{type:"required",displayAlias:"MSG_ERR_MAND"},{type:"minlength",displayAlias:"MSG_LENGTH_MIN5"}],vm.isOneSelected=function(type){return vm.isRoleSelected({roleName:type,id:vm.addressModel.addressID})},vm.$onInit=function(){_setIdNames(),vm.updateErrorSummaryState()},vm.focusOnSummary=function(){vm.setSummaryFocus=vm.setSummaryFocus+1},vm.updateErrorSummaryState=function(){vm.updateSummary=vm.updateSummary+1},vm.$onChanges=function(changes){changes.addressRecord&&(vm.addressModel=angular.copy(changes.addressRecord.currentValue),vm.addressModel.roleConcat=_getRolesConcat(),vm.setEditable()),changes.isAmend&&(vm.formAmend=changes.isAmend.currentValue,vm.addressModel.amendRecord=changes.isAmend.currentValue,vm.setEditable()),changes.showErrorSummary&&(vm.showSummary=changes.showErrorSummary.currentValue,vm.updateErrorSummaryState()),changes.isIn&&(changes.isIn.currentValue===INTERNAL_TYPE?vm.isInternal=!0:vm.isInternal=!1)},vm["delete"]=function(){vm.onDelete({addressId:vm.addressModel.addressID}),vm.updateErrorSummary();var ele=document.getElementById("addAddressBtn");console.log("tab element: "+ele),null!==ele&&ele.focus()},vm.discardChanges=function(){if(!vm.addressRecForm.$pristine){var currRecord=vm.addressRecord;vm.addressModel=angular.copy(currRecord),vm.setEditable(),vm.addressRecForm.$setPristine(),vm.isDetailValid({state:vm.addressRecForm.$valid}),vm.addressModel&&vm.onUpdate({rec:vm.addressModel}),vm.errorSummaryUpdate()}},vm.onAddressRoleUpdate=function(newRole){var aRole={};angular.extend(aRole,newRole),vm.addressModel.addressRole=aRole,vm.updateAddressModel2()},vm.updateValid=function(){vm.isDetailValid({state:vm.addressRecForm.$valid&&!vm.addressRecForm.$dirty})},$scope.$watch("addressRec.addressRecForm.$dirty",function(){vm.addressRecForm.$dirty&&vm.isDetailValid({state:!1})},!0),$scope.$watch("addressRec.addressRecForm.$error",function(){vm.updateErrorSummaryState(),vm.updateErrorSummary()},!0),vm.updateAddressModel2=function(){vm.addressModel.roleConcat=_getRolesConcat(),vm.addressRecForm.$valid?(vm.isDetailValid({state:!0}),vm.addressRecForm.$setPristine(),vm.addressModel.focusCompanyName=!1,vm.onUpdate({rec:vm.addressModel}),vm.showSummary=!1,vm.errorSummaryUpdate(),vm.cancelFocus()):(vm.showSummary=!0,vm.updateErrorSummaryState(),vm.focusOnSummary())},vm.getInvalid=function(){return vm.addressRecForm.$valid},vm.showErrors=function(){return vm.showSummary},vm.setEditable=function(){vm.isEditable=!(vm.formAmend&&!vm.addressModel.amendRecord)}}angular.module("addressRecord").component("cmpAddressRecord",{templateUrl:"app/scripts/components/addressRecord/tpl-address-record_20210122_1445.html",controller:addressRecCtrl,controllerAs:"addressRec",bindings:{addressRecord:"<",onUpdate:"&",updateValid:"&",checkRoles:"&",onDelete:"&",isAmend:"<",isDetailValid:"&",isRoleSelected:"&",recordIndex:"<",htIndxList:"<",errorSummaryUpdate:"&",showErrorSummary:"<",updateErrorSummary:"&",isIn:"<",isFocus:"<",cancelFocus:"&"}}),addressRecCtrl.$inject=["$scope","CANADA","$filter","getCountryAndProvinces","$translate","INTERNAL_TYPE","EXTERNAL_TYPE"]}(),function(){"use strict";angular.module("addressModule",["hpfbConstants","dataLists","filterLists","ui.select","errorMessageModule"])}(),function(){"use strict";function addressCtrl(getCountryAndProvinces,$translate,CANADA,USA,$scope){function _setIdNames(){var scopeId=vm.fldId+"_"+$scope.$id;vm.streetId="STREET"+scopeId,vm.cityId="CITY"+scopeId,vm.countryId="COUNTRY"+scopeId,vm.stateTextId="proveState"+scopeId,vm.stateListId="state"+scopeId,vm.provinceListId="province"+scopeId,vm.postalId="postal"+scopeId,vm.zipId="zip"+scopeId}var vm=this;vm.isEditable=!0,vm.ngModelOptSetting={updateOn:"blur"},vm.lang=$translate.proposedLanguage()||$translate.use(),vm.addressModel={addressID:"",isDetailValid:!1,street:"",city:"",country:"",countryHtml:"",countryDisplay:"",stateLov:"",stateText:"",postalCode:""},vm.countryIsEditable=!0,vm.canadianPostalCodePattern="^(?!.*[DFIOQU])[A-VXYa-vxy][0-9][A-Za-z] ?[0-9][A-Za-z][0-9]$",vm.usaZipCode="^[0-9]{5}(?:-[0-9]{4})?$",vm.hideProvinceText=!1,vm.showProvince=!1,vm.showState=!1,vm.countryList=getCountryAndProvinces.getCountries(),vm.fdId="",vm.requiredOnly=[{type:"required",displayAlias:"MSG_ERR_MAND"}],vm.postalErrorList=[{type:"required",displayAlias:"MSG_ERR_MAND"},{type:"pattern",displayAlias:"TYPE_PATTERN"}],vm.provStateErrorName="PROVSTATE",vm.focusOnProvinceState=!1,vm.$onInit=function(){vm.addressRecord&&(vm.addressModel=vm.addressRecord,vm.provListLabel=getProvinceListLabel(),vm.postalLabel=getPostalLabel(),vm.isPostalRequired=isPostalRequiredFn(),vm.provinces=getProvinceStateList(),vm.hideProvinceText=getProvinceTextState(),vm.postalPattern=getPostalPattern(),vm.hideProvinceDdl=!vm.hideProvinceText),_setIdNames()},vm.$onChanges=function(changes){changes.addressRecord&&(vm.addressModel=changes.addressRecord.currentValue,vm.countryChanged()),changes.isAmend&&(vm.isEditable=changes.isAmend.currentValue),changes.fieldSuffix&&(vm.fldId=changes.fieldSuffix.currentValue,vm.fldId||(vm.fldId="")),changes.updateCountry&&vm.countryChanged(),changes.countryEditable&&(vm.countryIsEditable=changes.countryEditable.currentValue,angular.isUndefined(vm.countryIsEditable)&&(vm.countryIsEditable=!0))},vm.countryChanged=function(){void 0===vm.addressModel.country.id||vm.addressModel.country.en!==vm.addressModel.countryHtml&&vm.addressModel.country.fr!==vm.addressModel.countryHtml?(vm.addressModel.countryHtml="",vm.addressModel.countryDisplay="",vm.isPostalRequired=!1,vm.hideProvinceText=!1,vm.showProvince=!1,vm.showState=!1,vm.hideProvinceDdl=!vm.hideProvinceText,vm.postalLabel=getPostalLabel()):(vm.addressModel.countryDisplay=vm.addressModel.country.id,vm.provListLabel=getProvinceListLabel(),vm.postalLabel=getPostalLabel(),vm.isPostalRequired=isPostalRequiredFn(),vm.provinces=getProvinceStateList(),vm.hideProvinceText=getProvinceTextState(),vm.postalPattern=getPostalPattern(),vm.hideProvinceDdl=!vm.hideProvinceText,vm.isCountryCanada()),vm.updateErrorSummary()},vm.isCountryCanada=function(){return vm.addressModel&&vm.addressModel.country?vm.addressModel.country.id===CANADA?(vm.postalErrorList=[{type:"required",displayAlias:"MSG_ERR_MAND"},{type:"pattern",displayAlias:"TYPE_PATTERN"}],!0):(vm.postalErrorList=[{type:"required",displayAlias:"MSG_ERR_MAND"},{type:"pattern",displayAlias:"TYPE_PATTERN"}],!1):(vm.postalErrorList=[{type:"required",displayAlias:"MSG_ERR_MAND"},{type:"pattern",displayAlias:"MSG_ERR_POSTAL"}],!1)},vm.showError=function(ctrl){return!!ctrl&&!!(ctrl.$invalid&&ctrl.$touched||vm.showErrors()&&ctrl.$invalid)},vm.onDeleteButtonClick=function(){vm.onDelete({addressId:vm.addressModel.addressID})},vm.onDiscardButtonClick=function(){vm.addressModel=angular.extend({},vm.addressRecord),vm.addressForm.$setPristine()},vm.isCountryEditable=function(){return vm.isEditable&&vm.countryIsEditable},vm.postalCodeChanged=function(){var postal=vm.addressModel.postalCode;postal&&(postal=postal.toUpperCase(),6==postal.length&&vm.addressModel.country.id===CANADA&&(postal=postal.substring(0,3)+" "+postal.substring(3,postal.length)),vm.addressModel.postalCode=postal,vm.updateErrorSummary())};var getProvinceTextState=function(){var isCanOrUsa=isPostalRequiredFn();return isCanOrUsa?vm.addressModel.stateText="":vm.addressModel.stateList="",isCanOrUsa},isPostalRequiredFn=function(){return vm.addressModel.country.id===CANADA||vm.addressModel.country.id===USA},getProvinceStateList=function(){return vm.addressModel.country.id===CANADA?(vm.showProvince=!0,vm.showState=!1,getCountryAndProvinces.getProvinces()):vm.addressModel.country.id===USA?(vm.showProvince=!1,vm.showState=!0,getCountryAndProvinces.getUSStates()):(vm.showProvince=!1,void(vm.showState=!1))},getProvinceListLabel=function(){var label=vm.addressModel.country.id===USA?"STATE":"PROVINCE";return label},getPostalLabel=function(){var label=vm.addressModel.country.id===USA?"ZIP":"POSTAL";return label},getPostalPattern=function(){var postalPtrn=null;return vm.addressModel.country.id===USA?postalPtrn=/^[0-9]{5}(?:-[0-9]{4})?$/:vm.addressModel.country.id===CANADA&&(postalPtrn=/^(?!.*[DFIOQU])[A-VXYa-vxy][0-9][A-Za-z] ?[0-9][A-Za-z][0-9]$/),postalPtrn};vm.countryChange=function(){for(var found=!1,i=0;i<vm.countryList.length;i++){var option=vm.countryList[i];if(option[vm.lang]===vm.addressModel.countryHtml){vm.addressModel.country=option,found=!0;break}}found||(vm.addressModel.countryHtml="",""!=vm.addressModel.country&&""!=vm.addressModel.country.id&&(vm.addressModel.country={}),vm.addressModel.countryDisplay=""),vm.countryChanged()},vm.countryTabKey=function(){vm.focusOnProvinceState=!0},vm.leaveProvinceState=function(){vm.focusOnProvinceState=!1},$scope.$watch("adr.addressForm.$error",function(){vm.updateErrorSummary()},!0)}angular.module("addressModule").config(function(uiSelectConfig){uiSelectConfig.theme="select2"}).component("cmpAddressDetails",{templateUrl:"app/scripts/components/addressDetails/tpl-address-details_20210122_1445.html",controller:addressCtrl,controllerAs:"adr",bindings:{addressRecord:"<",onUpdate:"&",showErrors:"&",isAmend:"<",updateErrorSummary:"&",fieldSuffix:"<",countryEditable:"<",updateCountry:"<"}}),addressCtrl.$inject=["getCountryAndProvinces","$translate","CANADA","USA","$scope"]}(),function(){"use strict";angular.module("contactList2",["contactRecord","expandingTable","hpfbConstants","errorSummaryModule"])}(),function(){"use strict";function contactListCtrl($filter,CompanyService,INTERNAL_TYPE){function updateRolesConcat(){if(vm.contactList)for(var i=0;i<vm.contactList.length;i++)_setRolesConcat(vm.contactList[i])}function _setRolesConcat(contactModel){var roles=contactModel.addressRole,result="";roles.manufacturer&&(result+=" MFR"),roles.billing&&(result+=" BILL"),roles.mailing&&(result+=" MAIL"),roles.repPrimary&&(result+=" REP1"),contactModel.roleConcat=result}var vm=this;vm.selectRecord=-1,vm.isDetailValid=!0,vm.allRolesSelected=!1,vm.contactList=[],vm.formAmend=!1,vm.isInternal=!1,vm.requiredFlag=!0,vm.resetCollapsed=!1,vm.updateSummary=0,vm.columnDef=[{label:"FIRSTNAME",binding:"givenName",width:"25"},{label:"LASTNAME",binding:"surname",width:"30"},{label:"JOBTITLE",binding:"title",width:"25"},{label:"ROLES",binding:"roleConcat",width:"20"}],vm.alias={},vm.exclusions={},vm.$onInit=function(){vm.focused=!1},vm.$onChanges=function(changes){if(changes.contacts&&(vm.contactList=changes.contacts.currentValue,updateRolesConcat(),vm.allRolesSelected=vm.isAllContactRolesSelected(),vm.isDetailValid=!0,vm.updateErrorSummaryState()),changes.isAmend&&(vm.formAmend=changes.isAmend.currentValue),changes.errorSummaryUpdate&&vm.updateErrorSummaryState(),changes.showErrorSummary&&(vm.showSummary=changes.showErrorSummary.currentValue),changes.userType){var isIn=changes.userType.currentValue;isIn===INTERNAL_TYPE?vm.isInternal=!0:vm.isInternal=!1}changes.isFileLoaded&&changes.isFileLoaded.currentValue&&(vm.requiredFlag=!1)},vm.$postLink=function(){vm.isInternal||vm.addContact()},vm.updateErrorSummaryState=function(){vm.updateSummary=vm.updateSummary+1},vm.setValid=function(value){vm.isDetailValid=value},vm.showError=function(){return!vm.isAllContactRolesSelected()},vm.onUpdateContactRecord=function(record){var idx=vm.contactList.indexOf($filter("filter")(vm.contactList,{contactId:record.contactId},!0)[0]);vm.contactList[idx]=angular.copy(record),vm.allRolesSelected=vm.isAllContactRolesSelected(),vm.requiredFlag=!1,vm.resetCollapsed=!vm.resetCollapsed,vm.contactListForm.$setPristine()},vm.deleteContact=function(cID){var idx=vm.contactList.indexOf($filter("filter")(vm.contactList,{contactId:cID},!0)[0]);vm.contactList.splice(idx,1),vm.onUpdate({newList:vm.contactList}),vm.isDetailValid=!0,vm.allRolesSelected=vm.isAllContactRolesSelected(),vm.requiredFlag=!1,vm.resetCollapsed=!vm.resetCollapsed,vm.updateErrorSummaryState(),vm.contactListForm.$setPristine()},vm.addContact=function(){var defaultContact=vm.getNewContact();defaultContact.focusOnFirstName=vm.isFocus,vm.contactList.push(defaultContact),vm.selectRecord=vm.contactList.length-1,vm.isDetailValid=!1},vm.setFocus=function(){vm.isFocus=!0},vm.cancelFocus=function(){vm.isFocus=!1},vm.isREPRoleSelected=function(roleToCheck,recordID){var rolesSelected=0;if(!vm.contactList)return!1;for(var i=0;i<vm.contactList.length;i++)if(vm.contactList[i].addressRole[roleToCheck]===!0&&(vm.contactList[i].contactId!==recordID&&(rolesSelected+=1),rolesSelected>0))return!0;return!1},vm.disableAddContact=function(){return!!vm.contactList&&!vm.isDetailValid},vm.isAllContactRolesSelected=function(){var rolesSelected=0,repPrimarySelected=!1,importerSelected=!1;if(!vm.contactList)return!1;for(var companyRole=vm.companyService.createContactRole(),numKeys=vm.companyService.getNumberKeys(companyRole),i=0;i<vm.contactList.length;i++){var obj=vm.contactList[i].addressRole;for(var key in obj){var attrName=key,attrValue=obj[key];attrValue&&companyRole.hasOwnProperty(attrName)&&(rolesSelected++,"importer"===key&&(importerSelected=!0))}}return rolesSelected===numKeys||!(rolesSelected!==numKeys-1&&rolesSelected!==numKeys-2||!repPrimarySelected)}}angular.module("contactList2").component("cmpCompanyContactList",{templateUrl:"app/scripts/components/contactList/tpl-contact-list_20210122_1445.html",controller:contactListCtrl,controllerAs:"contactListCtrl",bindings:{contacts:"<",onUpdate:"&",getNewContact:"&",isAmend:"<",isFileLoaded:"<",companyService:"<",showErrorSummary:"<",errorSummaryUpdate:"<",updateErrorSummary:"&",userType:"<",htIndxList:"<"}}),contactListCtrl.$inject=["$filter","CompanyService","INTERNAL_TYPE"]}(),function(){"use strict";angular.module("addressList",["addressRecord","hpfbConstants","errorSummaryModule"])}(),function(){"use strict";function addressListCtrl($filter,CompanyService,CANADA,INTERNAL_TYPE,EXTERNAL_TYPE){function updateRolesConcat(){if(vm.addressList)for(var i=0;i<vm.addressList.length;i++)_setRolesConcat(vm.addressList[i])}function _setRolesConcat(addressModel){var addressRoles=addressModel.addressRole,result="";addressRoles.manufacturer&&(result+=" MFR"),addressRoles.billing&&(result+=" BILL"),addressRoles.mailing&&(result+=" MAIL"),addressModel.roleConcat=result}var vm=this;vm.selectRecord=-1,vm.isDetailsValid=!0,vm.allRolesSelected="",vm.resetCollapsed=!1,vm.updateSummary=0,vm.showSummary=!1,vm.addressList=[],vm.isIn="",vm.isInternal=!1,vm.requiredFlag=!0,vm.isFocus=!1,vm.htIndxList=vm.companyService.helpTextSequences,vm.columnDef=[{label:"COMPANY_NAME",binding:"companyName",width:"25"},{label:"CITY",binding:"city",width:"25"},{label:"COUNTRY",binding:"countryDisplay",width:"25"},{label:"ROLES",binding:"roleConcat",width:"25"}],vm.$onInit=function(){vm.addressList=vm.addresses,vm.allRolesSelected=vm.isAllRolesSelected(),updateRolesConcat()},vm.$onChanges=function(changes){changes.addresses&&changes.addresses.currentValue&&(vm.addressList=changes.addresses.currentValue,vm.allRolesSelected=vm.isAllRolesSelected(),updateRolesConcat(),vm.updateErrorSummaryState()),changes.showErrorSummary&&(vm.showSummary=changes.showErrorSummary.currentValue,vm.updateErrorSummaryState()),changes.errorSummaryUpdate&&vm.updateErrorSummaryState(),changes.userType&&(vm.isIn=changes.userType.currentValue,vm.isIn===INTERNAL_TYPE?vm.isInternal=!0:vm.isInternal=!1),changes.isFileLoaded&&changes.isFileLoaded.currentValue&&(vm.requiredFlag=!1,vm.isDetailsValid=!0)},vm.$postLink=function(){vm.isInternal||vm.addAddress()},vm.deleteAddress=function(aID){var idx=vm.addressList.indexOf($filter("filter")(vm.addressList,{addressID:aID},!0)[0]);vm.addressList[idx].inUse=!1,vm.addressList.splice(idx,1),vm.onUpdate({newList:vm.addressList}),vm.selectRecord=0,vm.isDetailsValid=!0,vm.allRolesSelected=vm.isAllRolesSelected(),vm.requiredFlag=!1,vm.resetCollapsed=!vm.resetCollapsed,vm.updateErrorSummaryState(),vm.addressListForm.$setPristine()},vm.addAddress=function(){var defaultAddress=vm.getNewAddress();defaultAddress.focusCompanyName=vm.isFocus,defaultAddress.inUse=!1,vm.addressList.push(defaultAddress),vm.isDetailsValid=!0,vm.selectRecord=vm.addressList.length-1,vm.isDetailsValid=!1},vm.setFocus=function(){vm.isFocus=!0},vm.cancelFocus=function(){vm.isFocus=!1},vm.disableAddAddress=function(){return!vm.isDetailsValid},vm.setValid=function(detailValid){vm.isDetailsValid=detailValid},vm.onUpdateAddressRecord=function(address){var idx=vm.addressList.indexOf($filter("filter")(vm.addressList,{addressID:address.addressID},!0)[0]);vm.addressList[idx]=angular.copy(address),vm.allRolesSelected=vm.isAllRolesSelected(),vm.requiredFlag=!1,vm.resetCollapsed=!vm.resetCollapsed,vm.addressListForm.$setPristine()},vm.isREPRoleSelected=function(roleToCheck,recordID){var rolesSelected=0;if(!vm.addressList)return!1;for(var i=0;i<vm.addressList.length;i++)if(1==vm.addressList[i].addressRole[roleToCheck]&&(vm.addressList[i].addressID!==recordID&&(rolesSelected+=1),rolesSelected>0))return!0;return!1},vm.showError=function(){return!vm.isAllRolesSelected()},vm.updateErrorSummaryState=function(){vm.updateSummary=vm.updateSummary+1},vm.isAllRolesSelected=function(){var manuSelected=!1,mailSelected=!1,billSelected=!1;if(!vm.addressList)return!1;for(var i=(vm.companyService.createAddressRole(),0);i<vm.addressList.length;i++){var obj=vm.addressList[i].addressRole;for(var key in obj){var attrName=key,attrValue=obj[key];attrValue&&("manufacturer"===attrName&&(manuSelected=!0),"mailing"===attrName&&(mailSelected=!0),"billing"===attrName&&(billSelected=!0))}}return!!(manuSelected&&mailSelected&&billSelected)}}angular.module("addressList").component("cmpCompanyAddressList",{templateUrl:"app/scripts/components/addressList/tpl-company-address-list_20210122_1445.html",bindings:{addresses:"<",onUpdate:"&",getNewAddress:"&",isAmend:"<",isFileLoaded:"<",companyService:"<",showErrorSummary:"<",errorSummaryUpdate:"<",updateErrorSummary:"&",userType:"<"},controller:addressListCtrl,controllerAs:"addressListCtrl"}),addressListCtrl.$inject=["$filter","CompanyService","CANADA","INTERNAL_TYPE","EXTERNAL_TYPE"]}(),function(){"use strict";angular.module("fileIO",[])}(),function(){"use strict";function ngFileSelect(hpfbFileReader){function link(scope,element,attrs){scope.rootTag=attrs.rootTag,element.bind("change",function(e){scope.file=(e.srcElement||e.target).files[0],hpfbFileReader.readAsDataText(scope.file,scope).then(function(result){scope.hpfbFileSelect({fileContent:result})})})}var directive={link:link,restrict:"A",scope:{hpfbFileSelect:"&"}};return directive}angular.module("fileIO").directive("hpfbFileSelect",ngFileSelect),ngFileSelect.$inject=["hpfbFileProcessing"]}(),function(){"use strict";function FileSelectController(hpfbFileProcessing){var vm=this;vm.fileTypes=".xml, .hcsc",vm.modelCallback=function(fileContent){if(vm.status="",fileContent&&fileContent.jsonResult){var versionArray=fileContent.jsonResult[vm.rootElem].software_version.split(".");vm.versionExpected&&vm.versionExpected!==versionArray[0]?(fileContent=null,vm.status="MSG_ERR_FILE_VERSION"):(vm.status=fileContent.messages,vm.updateModelRoot({fileContent:fileContent}))}else vm.status=fileContent.messages,vm.updateModelRoot({fileContent:fileContent});angular.element(fileLoad).trigger("focus")}}angular.module("fileIO").component("hpfbFileSelect",{templateUrl:"app/scripts/components/fileIO/fileSelect_20210122_1445.html",controller:FileSelectController,bindings:{updateModelRoot:"&",rootElem:"@",versionExpected:"@"}}),FileSelectController.$inject=["hpfbFileProcessing"]}(),function(){"use strict";function FileWriteController(hpfbFileProcessing){function _generateFile(){"JSON"===vm.saveType.toUpperCase()?hpfbFileProcessing.writeAsJson(vm.jsonToSave,vm.fileName,vm.rootTag):"XML"===vm.saveType.toUpperCase()&&hpfbFileProcessing.writeAsXml(vm.jsonToSave,vm.fileName,vm.rootTag)}function _init(){vm.buttonDisabled?"true"===vm.buttonDisabled.toLowerCase()?vm.buttonDisabled=!0:"false"===vm.buttonDisabled.toLowerCase()?vm.buttonDisabled=!1:vm.buttonDisabled=!1:vm.buttonDisabled=!1}var vm=this;vm.$onInit=_init,vm.generate=_generateFile}angular.module("fileIO").component("hpfbFileSave",{templateUrl:"app/scripts/components/fileIO/fileSave_20210122_1445.html",controller:FileWriteController,bindings:{jsonToSave:"<",rootTag:"@",saveType:"@",buttonLabel:"@",buttonDisabled:"@"}}),FileWriteController.$inject=["hpfbFileProcessing"]}(),function(){"use strict";function fileReader($q){function onLoad(reader,deferred,scope,file){return function(){scope.$apply(function(){if(file){var splitFile=file.name.split("."),fileType=splitFile[splitFile.length-1];fileType.toLowerCase()==draft_file_type?(convertToJSONObjects(reader,scope),checkRootTagMatch(reader,scope)):"xml"===fileType.toLowerCase()?(convertXMLToJSONObjects(reader,scope),checkRootTagMatch(reader,scope)):(convertResult.parseResult=null,convertResult.messages=msg_err_fileType,reader.parseResult=convertResult)}deferred.resolve(reader.parseResult)})}}function onError(reader,deferred,scope){return function(){scope.$apply(function(){deferred.reject(msg_err_load)})}}function getReader(deferred,scope,file){var reader=new FileReader;return reader.onload=onLoad(reader,deferred,scope,file),reader.onError=onError(reader,deferred,scope),reader.parseResult=null,reader}function readAsDataText(file,scope){var deferred=$q.defer(),reader=getReader(deferred,scope,file);return file?reader.readAsText(file):(reader.parseResult=convertResult,reader.parseResult.messages="",reader.parseResult.jsonResult=null,deferred.resolve(reader.parseResult)),deferred.promise}function convertToJSONObjects(reader,scope){try{convertResult.jsonResult=JSON.parse(reader.result),convertResult.jsonResult[scope.rootTag].importFileType=draft_file_type,convertResult.messages=msg_success,reader.parseResult=convertResult}catch(e){convertResult.jsonResult=null,convertResult.messages=msg_err_jsonparse,reader.parseResult=convertResult}}function convertXMLToJSONObjects(reader,scope){var xmlConfig={escapeMode:!0,emptyNodeForm:"text",useDoubleQuotes:!0},xmlConverter=new X2JS(xmlConfig);convertResult.jsonResult=xmlConverter.xml_str2json(reader.result),convertResult.jsonResult&&convertResult.jsonResult[scope.rootTag]?(convertResult.messages=msg_success,convertResult.jsonResult[scope.rootTag].importFileType="xml"):convertResult.messages=msg_err_xmlparse,reader.parseResult=convertResult}function convertJSONObjectsToXML(jsonObj){var xmlConfig={escapeMode:!0,emptyNodeForm:"text",useDoubleQuotes:!0},jsonConverter=new X2JS(xmlConfig),xmlResult=null;return xmlResult=jsonConverter.json2xml_str(jsonObj)}function checkRootTagMatch(reader,scope){scope.rootTag&&reader.parseResult&&reader.parseResult.jsonResult&&(reader.parseResult.jsonResult[scope.rootTag]||(reader.parseResult.jsonResult=null,reader.parseResult.messages=msg_err_formType))}function jsonToFile(jsonObj,fileName,rootTag){if(jsonObj){var makeStrSave=JSON.stringify(jsonObj),blob=new Blob([makeStrSave],{type:"text/plain;charset=utf-8"});fileName?fileName+="."+draft_file_type:fileName="hpfbDraft."+draft_file_type,saveAs(blob,fileName)}}function xmlToFile(jsonObj,fileName,rootTag,xslName){if(jsonObj){var xmlResult=convertJSONObjectsToXML(jsonObj);xmlResult=xslName?'<?xml version="1.0" encoding="UTF-8"?><?xml-stylesheet  type="text/xsl" href="'+xslName+'"?>'+xmlResult:'<?xml version="1.0" encoding="UTF-8"?><?xml-stylesheet  type="text/xsl" href="REP_Combined.xsl"?>'+xmlResult;var blob=new Blob([xmlResult],{type:"text/plain;charset=utf-8"});fileName?fileName+=".xml":fileName="hpfbXML.xml",saveAs(blob,fileName)}}var msg_success="MSG_SUCCESS_LOAD",msg_err_jsonparse="MSG_ERR_JSONPARSE",msg_err_xmlparse="MSG_ERR_XMLPARSE",msg_err_load="MSG_ERR_FILE_LOAD",msg_err_fileType="MSG_ERR_FILE_TYPE",msg_err_formType="MSG_ERR_FORM_TYPE",draft_file_type="hcsc",convertResult={jsonResult:"",messages:""},service={readAsDataText:readAsDataText,writeAsJson:jsonToFile,writeAsXml:xmlToFile};return service}angular.module("fileIO").factory("hpfbFileProcessing",fileReader),fileReader.$inject=["$q"]}(),function(){"use strict";angular.module("expandingTable",[])}(),function(){"use strict";function expandingTableCtrl($filter,$scope){function _setNumberColumns(){vm.disableErrorCol&&(vm.numberCols=vm.numberCols+1)}function _recalculateColumnDefs(colDefs,numCols){var caretWidth=2,errorWidth=5,totalWidth=caretWidth+errorWidth,toSubtract=totalWidth/numCols,result=[];if(vm.disableErrorCol)return colDefs;for(var i=0;i<numCols;i++){var oneDef=angular.copy(colDefs[i]);oneDef.width>toSubtract&&(oneDef.width=oneDef.width-toSubtract),result.push(oneDef)}return result}function updateTableRow(textIndex){var selectIndex=parseInt(textIndex);selectIndex>=0&&vm.selectTableRow(selectIndex)}function _createArray(arraySize,initialVal){for(var anArray=[],i=0;i<arraySize;i++)anArray.push(initialVal);return anArray}var vm=this;vm.focused=!1,vm.columnDefinitions={},vm.disableExpand=!1,vm.tableRowExpanded=!1,vm.tableRowIndexCurrExpanded="",vm.tableRowIndexPrevExpanded="",vm.numberCols=1,vm.disableErrorCol=!1,vm.dayDataCollapse=_createArray(0,!0),vm.formName="expandTblCtrl.transcludeForm",vm.$onInit=function(){vm.listItems&&(vm.dayDataCollapse=_createArray(vm.listItems.length,!0))},vm.getExpandedState=function(row){return!(row!==vm.tableRowIndexCurrExpanded&&vm.dayDataCollapse[row]&&(!vm.transcludeForm[row]||vm.transcludeForm[row].$valid));
},vm.$onChanges=function(changes){if(changes.listItems&&(vm.listItems?vm.dayDataCollapse=_createArray(vm.listItems.length,!0):vm.dayDataCollapse=_createArray(0,!0),vm.resetTableRow()),changes.tname&&changes.tname.currentValue&&(vm.formName=changes.tname.currentValue),changes.resetToCollapsed&&(vm.resetTableRow(),changes.selectRecord||updateTableRow(vm.selectRecord)),changes.selectRecord){var selectIndex=parseInt(changes.selectRecord.currentValue);selectIndex>=0?vm.selectTableRow(selectIndex):vm.resetTableRow()}changes.disableSelection&&(vm.disableExpand=changes.disableSelection.currentValue),changes.columnDef&&(vm.numberCols=changes.columnDef.currentValue.length,vm.columnDefinitions=_recalculateColumnDefs(changes.columnDef.currentValue,vm.numberCols),_setNumberColumns()),changes.disableErrColumn&&(vm.disableErrorCol=changes.disableErrColumn.currentValue,vm.numberCols=vm.columnDef.length,vm.disableErrorCol=!0,_setNumberColumns())},vm.formInError=function(aForm){return aForm&&aForm.$invalid?"Y":"N"},vm.deletedRow=function(){vm.tableRowExpanded=!1,vm.tableRowIndexCurrExpanded=""},vm.resetTableRow=function(){vm.tableRowIndexPrevExpanded="",vm.tableRowExpanded=!1,vm.tableRowIndexCurrExpanded="",vm.listItems?vm.dayDataCollapse=_createArray(vm.listItems.length,!0):_createArray(0,!0)},vm.dayDataCollapseFn=function(){for(var i=0;vm.listItems.length-1;i+=1)vm.dayDataCollapse.append("true")},vm.selectTableRow=function(index){vm.disableExpand||("undefined"===vm.dayDataCollapse?vm.dayDataCollapse=vm.dayDataCollapseFn():vm.tableRowExpanded===!1&&""===vm.tableRowIndexCurrExpanded?(vm.tableRowIndexPrevExpanded="",vm.tableRowExpanded=!0,vm.tableRowIndexCurrExpanded=index,vm.dayDataCollapse[index]=!1):vm.tableRowExpanded===!0&&(vm.tableRowIndexCurrExpanded===index?(vm.tableRowExpanded=!1,vm.tableRowIndexCurrExpanded="",vm.dayDataCollapse[index]=!0):(vm.tableRowIndexPrevExpanded=vm.tableRowIndexCurrExpanded,vm.tableRowIndexCurrExpanded=index,vm.dayDataCollapse[vm.tableRowIndexPrevExpanded]=!0,vm.dayDataCollapse[vm.tableRowIndexCurrExpanded]=!1)))},vm.isRequiredRecordSet=function(){return!(!vm.isRequiredRecord||vm.isInternal)},vm.isRecordShowsOutside=function(row){return vm.isInternal?!vm.dayDataCollapse[row]:(vm.transcludeForm[row]&&vm.transcludeForm[row].$invalid&&(vm.dayDataCollapse[row]=!1),!(vm.dayDataCollapse[row]&&(!vm.transcludeForm[row]||vm.transcludeForm[row].$valid))||vm.isRequiredRecordSet())},vm.isRecordShowsInside=function(row){return!vm.isInternal||!(vm.dayDataCollapse[row]&&vm.transcludeForm[row].$valid)}}angular.module("expandingTable").component("cmpExpandingTable",{templateUrl:"app/scripts/components/expandingTable/tpl-expanding-table_20210122_1445.html",controller:expandingTableCtrl,controllerAs:"expandTblCtrl",transclude:!0,bindings:{title:"@",preId:"@",listItems:"<",columnDef:"<",disableSelection:"<",isRequiredRecord:"<",isInternal:"<",selectRecord:"<",resetToCollapsed:"<",disableErrColumn:"@",tname:"@"}}),expandingTableCtrl.$inject=["$filter","$scope"]}(),function(){"use strict";angular.module("addressRole",["hpfbConstants","alertModule"])}(),function(){"use strict";function addressRoleCtrl(ENGLISH,$scope,$translate){function checkAllControlsForDuplicates(){vm.roleForm&&(vm.checkForDuplicates(vm.roleForm.mailing,"mailing"),vm.checkForDuplicates(vm.roleForm.billing,"billing"),vm.checkForDuplicates(vm.roleForm.repPrimary,"repPrimary"),vm.checkForDuplicates(vm.roleForm.manufacturer,"manufacturer"),vm.updateErrorSummary())}function isDuplicateSelected(toCheck){var obj=vm.roleModel;for(var key in obj){var attrName=key,attrValue=obj[key];if(attrName==toCheck)return!!attrValue&&vm.alreadySelected({roleName:attrName})}return!1}function _setIdNames(){var scopeId="_"+$scope.$id;vm.fieldsetId="fs_roleMissing_"+$scope.$id,vm.roleMissingId="roleMissing_"+$scope.$id,vm.contactRoleMissingId="contactRoleMissing_"+$scope.$id,vm.chkManuId="manufacturer"+scopeId,vm.chkMailId="mailing"+scopeId,vm.chkBillId="billing"+scopeId,vm.chkManuContactId="contactManufacturer"+scopeId,vm.chkMailContactId="contactMailing"+scopeId,vm.chkBillContactId="contactBilling"+scopeId,vm.chkRePrimId="repPrimary"+scopeId,vm.chkRepSecId="repSecondary"+scopeId}var vm=this;vm.isReq=!0,vm.isSelected="",vm.isEditable=!0,vm.inUser=!1,vm.alerts=[!1,!1],vm.lang=$translate.proposedLanguage()||$translate.use(),vm.showCMError=!1,vm.duplicateRole=[{type:"duplicateRole",displayAlias:"TYPE_DUPLICATEROLE"}],vm.roleModel={manufacturer:!1,mailing:!1,billing:!1,repPrimary:!1,repSecondary:!1},vm.$onInit=function(){vm.record&&(vm.roleModel=vm.record.addressRole,vm.oneSelected()),_setIdNames()},vm.$onChanges=function(changes){changes.record&&(vm.roleModel=changes.record.currentValue.addressRole,vm.oneSelected(),checkAllControlsForDuplicates()),changes.isAmend&&(vm.isEditable=changes.isAmend.currentValue)},vm.updateOtherState=function(ctrl,toCheck){vm.oneSelected(ctrl,toCheck)},vm.oneSelected=function(ctrl,toCheck){var obj=vm.roleModel;for(var key in obj){var attrValue=obj[key];if(attrValue===!0)return vm.isSelected=!0,vm.updateErrorSummary(),!0}return vm.isSelected="",vm.updateErrorSummary(),!1},vm.checkForDuplicates=function(ctrl,toCheck){if(ctrl){var isDup=isDuplicateSelected(toCheck);ctrl.$setValidity("duplicateRole",!isDup)}},vm.showError=function(ctrl){return!!(ctrl.$invalid||vm.showErrors()&&ctrl.$invalid)},vm.showErrorMissing=function(){return!!(vm.roleForm.$touched&&!vm.isSelected||vm.showErrors()&&!vm.isSelected)},vm.closeAlert=function(value){angular.isUndefined(value)||value<vm.alerts.length&&(vm.alerts[value]=!1)},vm.addInstruct=function(value){angular.isUndefined(value)||value<vm.alerts.length&&(vm.alerts[value]=!0)},vm.isFrench=function(){return vm.lang!==ENGLISH}}angular.module("addressRole").component("cmpAddressRole",{templateUrl:"app/scripts/components/addressRole/tpl-address-role_20210122_1445.html",controller:addressRoleCtrl,controllerAs:"ar",bindings:{record:"<",onUpdate:"&",showErrors:"&",isContact:"<",alreadySelected:"&",isAmend:"<",htIndxList:"<",legendText:"@",updateErrorSummary:"&"}}),addressRoleCtrl.$inject=["ENGLISH","$scope","$translate"]}(),function(){"use strict";angular.module("contactModule",["dataLists","hpfbConstants","errorMessageModule"])}(),function(){"use strict";function contactCtrl(getContactLists,ENGLISH,FRENCH,$scope){function _setIdNames(){var scopeId=vm.fldId+"_"+$scope.$id;vm.firstNameId="firstName"+scopeId,vm.lastNameId="lastName"+scopeId,vm.langCorrespondId="langCorrespond"+scopeId,vm.jobTitleId="jobTitle"+scopeId,vm.faxId="fax_number"+scopeId,vm.phoneNumberId="phoneNumber"+scopeId,vm.phoneExtId="phoneExt"+scopeId,vm.contactEmailId="contactEmail"+scopeId,vm.routingIdentifierId="routing_id"+scopeId}var vm=this;vm.isEditable=!0,vm.ngModelOptSetting={updateOn:"blur"},vm.langCorresppond=[ENGLISH,FRENCH],vm.faxRequired=!1,vm.phoneReg=/^([0-9]*$)/,vm.emailReg=/^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$/,vm.contactModel={givenName:"",surname:"",initials:"",title:"",language:"",phone:"",phoneExt:"",fax:"",email:"",routingId:""},vm.inputModelOptions={updateOn:"blur"},vm.fldId="",vm.requiredOnly=[{type:"required",displayAlias:"MSG_ERR_MAND"}],vm.emailError=[{type:"required",displayAlias:"MSG_ERR_MAND"},{type:"pattern",displayAlias:"MSG_ERR_EMAIL_FORMAT"}],vm.phoneError=[{type:"required",displayAlias:"MSG_ERR_MAND"},{type:"pattern",displayAlias:"MSG_ERR_PHONE_FORMAT"}],vm.faxError=[{type:"required",displayAlias:"MSG_ERR_MAND"},{type:"pattern",displayAlias:"MSG_ERR_FAX_FORMAT"}],vm.routingIdError=[{type:"required",displayAlias:"MSG_ERR_MAND"},{type:"pattern",displayAlias:"TYPE_PATTERN"}],vm.$onInit=function(){vm.langList=[ENGLISH,FRENCH],_setIdNames()},vm.$onChanges=function(changes){changes.contactRecord&&(vm.contactModel=changes.contactRecord.currentValue),changes.isAmend&&(vm.isEditable=changes.isAmend.currentValue),changes.faxMandatory&&(vm.faxRequired=changes.faxMandatory.currentValue),changes.fieldSuffix&&(vm.fldId=changes.fieldSuffix.currentValue,vm.fldId||(vm.fldId=""))},vm.showError=function(ctrl){return!!ctrl&&!!(ctrl.$invalid&&ctrl.$touched||vm.showErrors()&&ctrl.$invalid)},vm.showRoutingIdErr=function(){return vm.contactForm[vm.routingIdentifierId].$invalid},$scope.$watch("contCtrl.contactForm.$error",function(){vm.updateErrorSummary()},!0)}angular.module("contactModule").component("cmpContactDetails",{templateUrl:"app/scripts/components/contactDetails/tpl-contact-details_20210122_1445.html",controller:contactCtrl,controllerAs:"contCtrl",bindings:{contactRecord:"<",onUpdate:"&",isAmend:"<",showErrors:"&",faxMandatory:"@",updateErrorSummary:"&",fieldSuffix:"<",routingIdIndex:"<",showRoutingId:"&",isContact:"<"}}),contactCtrl.$inject=["getContactLists","ENGLISH","FRENCH","$scope"]}(),function(){"use strict";angular.module("applicationInfo",["numberFormat","hpfbConstants","errorSummaryModule","errorMessageModule"])}(),function(){"use strict";function ApplInfoCtrl(NEW_TYPE,AMEND_TYPE,APPROVED_TYPE,EXTERNAL_TYPE,$scope,$translate){function _setConfigItems(configJson){vm.fieldIdLabel=configJson.label,vm.fieldLength=configJson.fieldLength,vm.tagName=configJson.tagName,configJson.minFieldLength?vm.minFieldLength=configJson.minFieldLength:vm.minFieldLength=configJson.fieldLength,vm.errorMsg=configJson.errorMsg,configJson.minErrorMsg?vm.minErrorMsg=configJson.minErrorMsg:vm.minErrorMsg=configJson.errorMsg,configJson.isNumber&&(vm.isNumber=configJson.isNumber),vm.isDossier=configJson.isDossier,angular.isUndefined(vm.isDossier)&&(vm.isDossier=!1)}function _setIdNames(){var scopeId="_"+$scope.$id;vm.fieldId="fieldId"+scopeId,vm.reasonAmend="reason_amend"+scopeId,vm.compId="company_id"+scopeId,vm.dossierId="dossier_id"+scopeId}var vm=this;vm.applTypes=[NEW_TYPE,AMEND_TYPE,APPROVED_TYPE],vm.formType=EXTERNAL_TYPE,vm.infoModel={applicationType:"NEW",applicationTypeText:"",enrolmentVersion:"0.0",dateSaved:"",reasonAmend:""},vm.fieldIdLabel="",vm.minFieldLength="",vm.isNumber=!1,vm.fieldLength="",vm.tagName="fieldId",vm.setAsIncomplete=!0,vm.errorMsg="",vm.maxErrorMsg="",vm.isDossier=!1,vm.isNumber=!1,vm.isAmend=!1,vm.requiredOnly=[{type:"required",displayAlias:"MSG_ERR_MAND"}],vm.min6Error=[{type:"required",displayAlias:"MSG_ERR_MAND"},{type:"minlength",displayAlias:"MSG_LENGTH_MIN5"}],vm.min7Error=[{type:"required",displayAlias:"MSG_ERR_MAND"},{type:"minlength",displayAlias:"MSG_LENGTH_MIN5"},{type:"pattern",displayAlias:"MSG_FORMAT_CHAR_6DIGITS"}],vm.$onInit=function(){vm.infoModel.applicationTypeText=$translate.instant(vm.infoModel.applicationType),_setIdNames()},vm.$onChanges=function(changes){changes.userType&&(vm.formType=changes.userType.currentValue),changes.record&&(vm.infoModel=changes.record.currentValue,vm.infoModel.applicationType===AMEND_TYPE?vm.isAmend=!0:vm.infoModel.applicationType!==APPROVED_TYPE||vm.isEmpty(vm.infoModel.reasonAmend)?vm.isAmend=!1:vm.isAmend=!0),changes.isIncomplete&&(vm.setAsIncomplete=changes.isIncomplete.currentValue),changes.configureIdField&&_setConfigItems(changes.configureIdField.currentValue),changes.showErrorSummary&&(vm.showSummary=changes.showErrorSummary.currentValue,vm.updateErrorSummaryState())},vm.showAmendMsg=function(){return!!vm.record&&vm.record.applicationType===AMEND_TYPE},vm.showAmendButton=function(){return!vm.isHide},vm.isExtern=function(){return vm.formType===EXTERNAL_TYPE},vm.setAmendState=function(){vm.setType({type:AMEND_TYPE}),vm.isAmend=!0},vm.isEmpty=function(aValue){return"undefined"==typeof aValue||null===aValue||""===aValue},vm.showError=function(ctrl){return!!ctrl&&(ctrl.$invalid&&ctrl.$touched||vm.showSummary&&ctrl.$invalid)}}angular.module("applicationInfo").component("cmpApplicationInfo",{templateUrl:"app/scripts/components/applicationInfo/tpl-application-info_20210122_1445.html",controller:ApplInfoCtrl,controllerAs:"infoCtrl",bindings:{record:"<",userType:"<",isIncomplete:"<",isHide:"<",configureIdField:"<",setType:"&",indexList:"<"}}),ApplInfoCtrl.$inject=["NEW_TYPE","AMEND_TYPE","APPROVED_TYPE","EXTERNAL_TYPE","$scope","$translate"]}(),function(){"use strict";angular.module("companyMain",["companyService","applicationInfoService","companyHelpText","ngMessages","ngAria","addressList","contactList2","fileIO","ngSanitize","applicationInfo","filterLists","hpfbConstants","ui.bootstrap","errorSummaryModule","alertModule","focus-if"])}(),function(){"use strict";function companyMainCtrl(CompanyService,ApplicationInfoService,hpfbFileProcessing,$filter,$scope,INTERNAL_TYPE,EXTERNAL_TYPE,APPROVED_TYPE,AMEND_TYPE,ENGLISH,getRoleLists,$translate,$anchorScroll,$location){function goToErrorSummary(){var masterError=angular.element(document.querySelector("#master-error"));masterError&&($location.hash("master-error"),$anchorScroll())}function _createFilename(){var draft_prefix="DRAFTREPCO",final_prefix="HCREPCO",filename="",separator="-";return filename=vm.userType===INTERNAL_TYPE?final_prefix:draft_prefix,vm.company.companyId&&(filename=filename+separator+vm.company.companyId),vm.company.enrolmentVersion&&(filename=filename+separator+vm.company.enrolmentVersion),filename=filename.replace(".",separator),filename.toLowerCase()}function _transformFile(){return updateDate(),vm.isExtern()?vm.company.enrolmentVersion=vm.applicationInfoService.incrementMinorVersion(vm.company.enrolmentVersion):vm.companyEnrolForm.$pristine||(vm.company.enrolmentVersion=vm.applicationInfoService.incrementMajorVersion(vm.company.enrolmentVersion),vm.company.applicationType=ApplicationInfoService.prototype.getApprovedType()),vm.companyService.transformToFileObj(vm.company)}function disableXMLSave(){var isApprovedExternal=vm.company.applicationType===vm.companyService.getApprovedType()&&vm.isExtern();vm.disableDraftButton=isApprovedExternal,vm.disableXML=vm.companyEnrolForm.$invalid||isApprovedExternal}function _setComplete(){vm.isIncomplete=!vm.company.companyId}function _loadFileContent(fileContent){if(fileContent){vm.companyService=new CompanyService;var resultJson=fileContent.jsonResult;resultJson&&(vm.companyService.transformFromFileObj(resultJson),vm.company={},angular.extend(vm.company,vm.companyService.getModelInfo()),_setComplete(),vm.setAmend(),vm.isFileLoaded=!0,vm.showErrorSummary=!1,vm.companyEnrolForm.$setDirty(),vm.showAmendNote=vm.company.applicationType===vm.companyService.getApprovedType()&&vm.isExtern(),vm.company.applicationTypeText=$translate.instant(vm.company.applicationType)),disableXMLSave()}}function updateDate(){vm.company&&(vm.company.dateSaved=vm.applicationInfoService.getTodayDate())}function _setIdNames(){var scopeId="_"+$scope.$id;vm.formId="company_form"+scopeId,vm.privacyStatementID="privacy_statement"+scopeId,vm.typeId="dossier_type"+scopeId}var vm=this;vm.userType=EXTERNAL_TYPE,vm.isIncomplete=!0,vm.formAmendType=!1,vm.saveXMLLabel="SAVE_DRAFT",vm.updateValues=0,vm.applicationInfoService=new ApplicationInfoService,vm.showContent=_loadFileContent,vm.disableXML=!0,vm.disableDraftButton=!1,vm.showAmendNote=!1,vm.configCompany={label:"COMPANY_ID",minFieldLength:"5",fieldLength:"6",tagName:"companyId",minErrorMsg:"MSG_LENGTH_MIN5",errorMsg:"MSG_LENGTH_6NUM"},vm.companyService=new CompanyService,vm.rootTag="",vm.companyService&&(vm.rootTag=vm.companyService.getRootTag()),vm.applTypes=vm.companyService.getApplicationTypes(),vm.formTypeList=getRoleLists.getFormTypes(),vm.company=vm.companyService.getModelInfo(),vm.addressList=[],vm.indexList=vm.companyService.helpTextSequences,vm.alerts=[!1,!1,!1,!1,!1,!1],vm.updateSummary=!1,vm.showErrorSummary=!1,vm.privacyStat=!1,vm.isFileLoaded=!1,vm.savePressed=!1,vm.focusSummary=0,vm.lang=$translate.proposedLanguage()||$translate.use(),vm.requiredOnlyError=[{type:"required",displayAlias:"MSG_ERR_MAND"}],vm.exclusions={"contactRec.contactRecForm":"true","addressRec.addressRecForm":"true"},vm.alias={contactRolesValid:{type:"element",target:"contactList"},addressRolesValid:{type:"element",target:"addressList"}},vm.initUser=function(id){},vm.$onInit=function(){_setIdNames(),vm.alerts=[!1,!1,!1,!1,!1,!1],vm.updateSummary=!1,vm.showErrorSummary=!1,vm.savePressed=!1},vm.$onChanges=function(changes){changes.formType&&(vm.userType=changes.formType.currentValue,vm.userType==INTERNAL_TYPE?vm.saveXMLLabel="APPROVE_FINAL":vm.saveXMLLabel="SAVE_DRAFT")},vm.setAmend=function(){vm.formAmendType=vm.company.applicationType===AMEND_TYPE},vm.saveJson=function(){var writeResult=_transformFile();hpfbFileProcessing.writeAsJson(writeResult,_createFilename(),vm.rootTag)},vm.saveXML=function(){if(vm.companyEnrolForm.$invalid)vm.showErrorSummary=!0,vm.updateErrorSummary(),vm.savePressed=!0,vm.focusSummary++,goToErrorSummary();else if(vm.companyEnrolForm["addressListCtrl.addressListForm"].$pristine&&vm.companyEnrolForm["contactListCtrl.contactListForm"].$pristine){var writeResult=_transformFile();hpfbFileProcessing.writeAsXml(writeResult,_createFilename(),vm.rootTag,vm.companyService.getXSLFileName()),vm.showErrorSummary=!1,vm.companyEnrolForm.$setPristine(),vm.savePressed=!1}else vm.lang===ENGLISH?alert("Please save the unsaved input data before generating XML file."):alert("Veuillez sauvegarder les données d'entrée non enregistrées avant de générer le fichier XML.")},$scope.$watch("main.companyEnrolForm.$error",function(){vm.updateErrorSummary()},!0),vm.setApplType=function(type){vm.company.applicationType=type,vm.company.applicationTypeText=$translate.instant(vm.company.applicationType),disableXMLSave(),vm.setAmend(),vm.company.reasonAmend=""},vm.onUpdateAddressList=function(newList){vm.company.addressList=newList},vm.getNewAddress=function(){return vm.companyService.createAddressRecord()},vm.getNewContact=function(){return vm.companyService.createContactRecord()},vm.updateAddressRecord=function(address){if(address){var idx=vm.company.addressList.indexOf($filter("filter")(vm.company.addressList,{addressID:address.addressID},!0)[0]);vm.company.addressList[idx]=address;var temp=vm.company.addressList;vm.company.addressList=[],vm.company.addressList=temp}},vm.onUpdateContactList=function(newList){vm.company.contactList=newList},vm.isExtern=function(){return vm.userType===EXTERNAL_TYPE},vm.closeAlert=function(value){angular.isUndefined(value)||value<vm.alerts.length&&(vm.alerts[value]=!1)},vm.addInstruct=function(value){angular.isUndefined(value)||value<vm.alerts.length&&(vm.alerts[value]=!0)},vm.updateErrorSummary=function(){vm.updateSummary=vm.updateSummary+1},vm.isFrench=function(){return vm.lang!==ENGLISH},vm.temp=function(){console.log($scope)},vm.showError=function(ctrl){return!!vm.showErrorSummary||!(!ctrl||ctrl.$untouched)&&(ctrl.$invalid&&ctrl.$touched||vm.showErrorSummary&&ctrl.$invalid)}}angular.module("companyMain").component("cmpCompanyMain",{templateUrl:"app/scripts/components/companyMain/tpl-company-main_20210122_1445.html",controller:companyMainCtrl,controllerAs:"main",bindings:{formType:"@"}}),companyMainCtrl.$inject=["CompanyService","ApplicationInfoService","hpfbFileProcessing","$filter","$scope","INTERNAL_TYPE","EXTERNAL_TYPE","APPROVED_TYPE","AMEND_TYPE","ENGLISH","getRoleLists","$translate","$anchorScroll","$location"]}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,

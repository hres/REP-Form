!function(){"use strict";angular.module("cspApp",["pascalprecht.translate","translations","ngMessages","ngAria","ngSanitize","cspMain","dataLists","cspLoadService"])}(),function(){"use strict";function MainController(){var vm=this;vm.formType="INT"}angular.module("cspApp").controller("MainController",MainController)}(),function(){"use strict";angular.module("cspApp").config(["$translateProvider",function($translateProvider){$translateProvider.preferredLanguage("en"),$translateProvider.useLoader("customLoad"),$translateProvider.directivePriority(1),$translateProvider.useSanitizeValueStrategy(null),$translateProvider.forceAsyncReload(!0)}])}(),angular.module("translations",[]).config(["$translateProvider",function($translateProvider){$translateProvider.translations("en",{CITY:"City",COUNTRY:"Country",PROVINCE:"Province",POSTAL:"Postal Code",PROVSTATE:"Province or State",STATE:"State",STREET:"Street Address",ZIP:"Zip Code",COMPANY:"Company",ADD_ADDRESS:"Add Address",CITY_TOWN:"City or Town",SAVE_ADDR:"Save Address",DELETE_ADDR:"Delete Address",ADDR_INFO:"Address Information",ADDR_DETAILS:"Address Details",ADDR_ROLE_LEGEND:"Select one or more roles for this company",PRODUCTS_IMPORTED:"Imported Products",PRODUCT_TYPES:"Products imported by this Company",ALL_PRODUCTS:"All Products",SELECTED_PRODUCTS:"Some Products",IDENTIFY_PRODUCTS:"Provide the Dossier Identifiers for the products that are imported by this Company",ADD_DOSSIER_ID:"Add Dossier Id",IMPORTER_NONCDN:"Please ensure you indicate a Canadian Importer",COUNTRY_CHOOSE:"Choose a country",COUNTRY_SEARCH:"Select or Search for country"}),$translateProvider.translations("fr",{CITY:"Ville",COUNTRY:"Pays",PROVINCE:"Province",POSTAL:"Code postal",PROVSTATE:"Province ou état",STATE:"Etat",STREET:"Adresse",ZIP:"Zip Code",COMPANY:"Compagnie",ADD_ADDRESS:"Ajouter Addresse",CITY_TOWN:"Ville",SAVE_ADDR:"Save Address",DELETE_ADDR:"Supprimer Addresse",ADDR_INFO:"Informations d'adresses",ADDR_DETAILS:"Détails de l'adresse",ADDR_ROLE_LEGEND:"fr_Select one or more roles for this company",IMPORTER_NONCDN:"There should be a Canadian Importer when the Manufacturer / Sponsor is not a Canadian Address",COUNTRY_CHOOSE:"Choisir un pays"}),$translateProvider.translations("en",{AB:"Alberta",BC:"British Columbia",MB:"Manitoba",NB:"New Brunswick",NL:"Newfoundland and Labrador",NT:"Northwest Territories",NS:"Nova Scotia",NU:"Nunavut",ON:"Ontario",PE:"Prince Edward Island",QC:"Quebec",SK:"Saskatchewan",YT:"Yukon",AL:"Alabama",AK:"Alaska",AZ:"Arizona",AR:"Arkansas",CA:"California",CO:"Colorado",CT:"Connecticut",DE:"Delaware",DC:"District of Columbia",FL:"Florida",GA:"Georgia",HI:"Hawaii",ID:"Idaho",IL:"Illinois",IN:"Indiana",IA:"Iowa",KS:"Kansas",KY:"Kentucky",LA:"Louisiana",ME:"Maine",MD:"Maryland",MA:"Massachusetts",MI:"Michigan",MN:"Minnesota",MS:"Mississippi",MO:"Missouri",MT:"Montana",NE:"Nebraska",NV:"Nevada",NH:"New Hampshire",NJ:"New Jersey",NM:"New Mexico",NY:"New York",NC:"North Carolina",ND:"North Dakota",OH:"Ohio",OK:"Oklahoma",OR:"Oregon",PA:"Pennsylvania",RI:"Rhode Island",SC:"South Carolina",SD:"South Dakota",TN:"Tennessee",TX:"Texas",UT:"Utah",VT:"Vermont",VA:"Virginia",WA:"Washington",WV:"West Virginia",WI:"Wisconsin",WY:"Wyoming"}),$translateProvider.translations("fr",{AB:"Alberta",BC:"Colombie-Britannique",PE:"Île-du-Prince-Édouard",MB:"Manitoba",NB:"Nouveau-Brunswick",NS:"Nouvelle-Écosse",NU:"Nunavut",ON:"Ontario",QC:"Québec",SK:"Saskatchewan",NL:"Terre-Neuve et Labrador",NT:"Territoires du Nord-Ouest",YT:"Yukon",AL:"Alabama",AK:"Alaska",AZ:"Arizona",AR:"Arkansas",CA:"Californie",NC:"Caroline du nord",SC:"Caroline du sud",CO:"Colorado",CT:"Connecticut",ND:"Dakota du nord",SD:"Dakota du sud",DE:"Delaware",DC:"District de Columbia",FL:"Floride",GA:"Géorgie",HI:"Hawaii",ID:"Idaho",IL:"Illinois",IN:"Indiana",IA:"Iowa",KS:"Kansas",KY:"Kentucky",NY:"L'état de New York",WA:"L'état de washington",LA:"Louisiane",ME:"Maine",MD:"Maryland",MA:"Massachusetts",MI:"Michigan",MN:"Minnesota",MS:"Mississippi",MO:"Missouri",MT:"Montana",NE:"Nebraska",NV:"Nevada",NH:"New Hampshire",NJ:"New Jersey",NM:"Nouveau-mexique",OH:"Ohio",OK:"Oklahoma",OR:"Oregon",PA:"Pennsylvanie",RI:"Rhode Island",TN:"Tennessee",TX:"Texas",UT:"Utah",VT:"Vermont",VA:"Virginie",WV:"Virginie-occidentale",WI:"Wisconsin",WY:"Wyoming"}),$translateProvider.translations("en",{FIRSTNAME:"First Name",LASTNAME:"Last Name",INITIALS:"Initials",LANGCORRESPOND:"Language of Correspondance",JOBTITLE:"Job Title",SALUTATION:"Salutation",SALUT_MR:"Mr.",SALUT_MS:"Ms.",SALUT_DR:"Dr.",SALUT_MRS:"Mrs.",ROLE_PRIMARY:"Primary",ROLE_SECONDARY:"Alternate",CONTACTEMAIL:"Email",FAX_NUMBER:"Fax Number",PHONE_EXT:"Phone Extension",ROLES:"Roles",PHONENUMBER:"Phone Number",CONTACT_INFO:"Company Representative Information",AMEND:"Amend",REP_CONTACT:"REP Contact",ONE_ROLE:"Role",CONTACT_DETAILS:"Company Representative Details",ADD_CONTACT:"Add REP Contact",CONTACT_ROLE_LEGEND:"Select one or more roles for this company representative",ADD_REPRES:"Add Company Representative",DELETE_REPRES:"Delete Company Rep.",SAVE_REPRES:"Save Company Rep."}),$translateProvider.translations("fr",{FIRSTNAME:"Prénom",LASTNAME:"Nom",INITIALS:"Initiales",LANGCORRESPOND:"Langue de correspondance",JOBTITLE:"Titre de poste",SALUTATION:"Titre de civilité",SALUT_MR:"M.",SALUT_MS:"Mme",SALUT_DR:"Dr.",SALUT_MRS:"Mlle",ROLE_PRIMARY:"Primaire",ROLE_SECONDARY:"Alterner",CONTACTEMAIL:"Adresse électronique",FAX_NUMBER:"Numéro de télécopieur",PHONE_EXT:"Poste",ADDR_ROLES:"fr_Roles",PHONENUMBER:"Numéro de téléphone",CONTACT_INFO:"fr_Company Representative Information",AMEND:"fr_Amend",REP_CONTACT:"fr_REP Contact",ONE_ROLE:"fr_Role",CONTACT_DETAILS:"fr_Company Representative Details",ADD_CONTACT:"fr_Add REP Contact",CONTACT_ROLE_LEGEND:"fr_Select one or more roles for this company representative"}),$translateProvider.translations("en",{APPL_STATUS:"Application Status",ENROL_VERSION:"Enrolment Version",DATE_SAVED:"Date Last Saved",AMEND_ENROL:"Amend Enrolment",AMEND_MSG:"Edit records to be amended below."}),$translateProvider.translations("fr",{APPL_STATUS:"fr_Application Status",ENROL_VERSION:"Version d’inscription",DATE_SAVED:"Date du dernier enregistrement",AMEND_ENROL:"fr_Amend Enrolment",AMEND_MSG:"fr_Edit records to be amended below."}),$translateProvider.translations("en",{SELECT_LOAD:"Select a file to load",MSG_SUCCESS_LOAD:"The file was loaded successfully",MSG_ERR_JSONPARSE:"Error: there was an error parsing the working file.",MSG_ERR_XMLPARSE:"Error: there was an error parsing the draft XML file.",MSG_ERR_FILE_LOAD:"Error: there was a problem loading the file.",MSG_ERR_FILE_TYPE:"Error: An invalid file type was selected.",MSG_ERR_FORM_TYPE:"Error: the wrong form type was selected for this form.",MSG_ERR_CHECKSUM_FAIL:"Error: the checksum in the file does not match the calculated checksum"}),$translateProvider.translations("fr",{SELECT_LOAD:"Sélectionnez un fichier à charger",MSG_SUCCESS_LOAD:"Le fichier a été chargé avec succès",MSG_ERR_JSONPARSE:"Erreur: il y a eu une erreur en analysant le fichier de travail.",MSG_ERR_XMLPARSE:"Erreur: il y avait une erreur d'analyse du projet de fichier XML,",MSG_ERR_FILE_LOAD:"Erreur: il y a eu un problème lors du chargement du fichier.",MSG_ERR_FILE_TYPE:"Erreur: un type de fichier invalide a été sélectionné.",MSG_ERR_FORM_TYPE:"Erreur: le type de formulaire incorrect a été sélectionné pour ce formulaire.",MSG_ERR_CHECKSUM_FAIL:"Erreur: La somme de contrôle dans le fichier ne correspond pas à la somme de contrôle calculée."}),$translateProvider.translations("en",{Y:"Yes",N:"No",DELETEROW:"Delete Row",SELECTEDROW:"Selected Row",REQUIRED:"(required)",ROLES_SELECT:"Select one or more roles for this record",NEW:"New",AMEND:"Amend",APPROVED:"Approved",CLICK_TOGGLE:"Click to toggle the collapse or expand details for this address.",AMEND_RECORD:"Amend Record",en:"English",fr:"French",DISCARD_CHANGES:"Discard Changes",REPSECONDARY:"Alternate REP contact",REPPRIMARY:"Primary REP contact",MAILING:"Regulatory Mailing / Annual Contact",BILLING:"Billing Address",MANUFACTURER:"Manufacturer / Sponsor Mailing Address",IMPORTER:"Canadian Importer Mailing Address",APPROVE_FINAL:"Approve Final XML",SAVE_DRAFT:"Save Draft for Filing",PRIMARY:"Primary",SECONDARY:"Alternate",TOGGLE_EXPAND:"Click to toggle collapse or expand details of row",SAVE_WORK:"Save Working Copy",CONTROL_NUMBER:"Control Number",REP_CONTACT_INFO:"REP Contact Information",SAVE_CONTACT:"Save Contact",DELETE_CONTACT:"Delete Contact",COMPANY_ID:"Company Id",DOSSIER_ID:"Dossier Id",ERRORS:"Errors",UNKNOWN:"Unknown",BIOLOGIC:"Biologic",PHARMACEUTICAL:"Pharmaceutical",HELP_FILE_LOAD:"Expand file load instructions",HELP_ACTIVITY_MAIN:"Activity Instructions",HELP_ACTIVITY_REP:"REP Contact Instructions",CALENDAR:"Pick date from calendar",HIDE_CALENDAR:"Hide Calendar (escape key)",OTHER:"Other",HELP_REP_CONTACT:"REP Contact Instructions",OTHER_UNITS:"Units other details",COMPANYNAME:"Company Name (Full legal name - no abbreviations)",COPY:"Copy",DELETE:"Delete",SAVE_WORKING:"Save Working Copy",COMPANY_NOABBREV:"Company Name (Full legal Name - no abbreviations)",CLOSE_ALERT:"Collapse instructions",COLLAPSE:"Collapse"}),$translateProvider.translations("fr",{Y:"Oui",N:"Non",DELETEROW:"fr_Delete Row",SELECTEDROW:"Selected Row",REQUIRED:"(requis)",ROLES_SELECT:"fr_Select one or more roles for this record",NEW:"fr_New",AMEND:"fr_Amend",APPROVED:"fr_Approved",CLICK_TOGGLE:"fr_Click to toggle the collapse or expand details for this address.",AMEND_RECORD:"fr_Amend Record",en:"Anglais",fr:"Français",DISCARD_CHANGES:"fr_Discard Changes",REPSECONDARY:"fr_Alternate REP contact",REPPRIMARY:"fr_Primary REP contact",MAILING:"Contact pour le courrier réglementaire",BILLING:"fr_Billing",MANUFACTURER:"fr_Manufacturer",IMPORTER:"Importateur canadien",APPROVE_FINAL:"Approuver XML final",PRIMARY:"fr_Primary",SECONDARY:"fr_Alternate",TOGGLE_EXPAND:"fr_Click to toggle collapse or expand details of row",SAVE_DRAFT:"Enregistrer le brouillon",CONTROL_NUMBER:"fr_Control Number",REP_CONTACT_INFO:"fr_Main Contact Information",SAVE_CONTACT:"fr_Save Contact",DELETE_CONTACT:"fr_Delete Contact",COMPANY_ID:"fr_Company Id",DOSSIER_ID:"fr_Dossier Id",ERRORS:"Erreurs",UNKNOWN:"Inconnu",BIOLOGIC:"fr_Biologic",PHARMACEUTICAL:"fr_Pharmaceutical",HELP_FILE_LOAD:"fr_File Load Instructions",HELP_ACTIVITY_MAIN:"fr_Activity Instructions",HELP_ACTIVITY_REP:"fr_REP Contact Instructions",CALENDAR:"fr_Pick date from calendar",HIDE_CALENDAR:"fr_Hide Calendar (escape key)",OTHER:"Autre",HELP_REP_CONTACT:"fr_REP Contact Instructions",OTHER_UNITS:"fr_Units other details",COMPANYNAME:"fr_Company Name (Full legal name - no abbreviations)",COPY:"fr_Copy",DELETE:"fr_Delete",SAVE_WORKING:"Enregistrer une copie de travail",COMPANY_NOABBREV:"fr_Company Name (Full legal Name - no abbreviations)",CLOSE:"Minimiser les instructions",COLLAPSE:"Minimiser les"}),$translateProvider.translations("en",{MSG_ERR_MAND:"This field is required",MSG_ERR_EMAIL_FORMAT:"Please enter a valid email address.",MSG_ERR_ROLE:"Please select at least one role",MSG_ERR_CONTACT_NUM:"All the roles have to be used for the contacts",MSG_ERR_PHONE_FORMAT:"Specify a valid phone number",MSG_ERR_FAX_FORMAT:"Specify a valid fax number",MSG_ERR_ALLROLE:"The roles of manufacturer, mailing, billing, and primary REP contact  have not all been selected among the list of contacts",MSG_ERR_ADDRESSSROLE:"The roles of manufacturer, mailing, and billing have not all been selected among the list of addresses",MSG_ERR_POSTAL:"Please specify a valid postal code.",MSG_ERR_ZIP:"Please specify a valid zip code.",MSG_ERR_DATE_FORMAT:"The date format is incorrect.",MAILING_SEL:"Mailing Role already Selected",MANUFACT_SEL:"Manufacturer Role already Selected",MAIL_SEL:"Mailing Role already Selected",BILLING_SEL:"Billing Role already Selected",IMPORTER_SEL:"Importer Role already Selected",REPPRIM_SEL:"REP Primary Role already Selected",REPALT_SEL:"REP Alternate Role already Selected",MSG_LENGTH_MIN5:"Please enter at least 5 characters",MSG_LENGTH_6:"Please enter 6 characters.",MSG_LENGTH_6NUM:"Please enter 6 digits.",MSG_LENGTH_8NUM:"Please enter 8 digits.",MSG_LENGTH_7:"Please enter 7 characters.",MSG_LENGTH_7NUM:"Please enter 7 digits.",MSG_ERR_ONE_REP:"At least one contact is required.",MSG_ERR_ONE_LIFE_REC:"One lifecycle record is required.",MSG_ERR_RATIONALE_SEL:"Please select at least one rationale.",MSG_ERR_NOTIF_SEL:"Please select at least one notifiable change.",MSG_ERR_MIN_POS:"Must be a positive number",MSG_ERR_MAX:"Exceeds the maximum"}),$translateProvider.translations("fr",{MSG_ERR_MAND:"Ce champ est obligatoire.",MSG_ERR_EMAIL_FORMAT:"Veuillez fournir une adresse électronique valide.",MSG_ERR_CONTACT_NUM:"fr_All the roles have to be used for the company contacts",MSG_ERR_PHONE_FORMAT:"Veuillez fournir un numéro de téléphone valide.",MSG_ERR_FAX_FORMAT:"Veuillez fournir un numéro de télécopieur valide.",MSG_ERR_ALLROLE:"fr_Across the contact records, the roles of manufacturer, mailing, billing, and REP primary contact must be selected",MSG_ERR_ADDRESSSROLE:"fr_The roles of manufacturer, mailing, and billing have not all been selected among the list of addresses",MSG_ERR_POSTAL:"Veuillez fournir un code postal valide.",MSG_ERR_ZIP:"Veuillez fournir un code postal valide.",MSG_ERR_DATE_FORMAT:"Veuillez fournir une une date valide.",MANUFACT_SEL:"fr_Manufacturer Role already Selected",MAIL_SEL:"fr_Mailing Role already Selected",BILLING_SEL:"fr_Billing Role already Selected",IMPORTER_SEL:"fr_Importer Role already Selected",REPPRIM_SEL:"fr_REP Primary Role already Selected",REPALT_SEL:"fr_REP Alternate Role already Selected",MSG_LENGTH_MIN5:"Veuillez fournir au moins 5 chiffres.",MSG_LENGTH_6:"Veuillez fournir au moins 6 caractères.",MSG_LENGTH_6NUM:"Veuillez fournir 6 chiffres.",MSG_LENGTH_8NUM:"Veuillez fournir 8 chiffres.",MSG_LENGTH_7:"Veuillez fournir 7 caractères.",MSG_LENGTH_7NUM:"Veuillez fournir  7 chiffres.",MSG_ERR_ONE_REP:"Au moins un contact est requis",MSG_ERR_ONE_LIFE_REC:"Un enregistrement de cycle de vie est nécessaire",MSG_ERR_RATIONALE_SEL:"Veuillez sélectionner au moins une justification",MSG_ERR_NOTIF_SEL:"Sélectionnez au moins un changement de déclaration",MSG_ERR_MIN_POS:"Doit être un nombre positif",MSG_ERR_MAX:"Dépasse le maximum."}),$translateProvider.translations("en",{CSP_FORM:"CSP Application Form",APPLICANTNAME:"Applicant Name",COMPANY_NOABBREV:"Company Name (Full legal Name - no abbreviations)",DATE_APPL_REC:"Date Application Received",CSP_COMPANY_CODE:"CSP Company Code",CSP_APPLICATION_CODE:"CSP Application Number",NOTES:"Notes",HCONLY:"Health Canada Use Only",BILLING_DIFFERENT:"Select to enter a billing address that is different from the Applicant’s Contact Information",ADVANCE_FEE_PAYMENT:"The fee is being paid  or the fee has been prepaid in the amount of (please enter the fee amount) ",PAYMENT_METHOD:"Method of Payment",FINANCIAL:"Payment through a Canadian Financial Institution",CHEQUE:"Cheque / Bank Draft / Money Order",CREDIT_CARD:"MasterCard / Visa / American Express (AMEX) / Visa Debit / JCB International",CREDIT:"Payment Using Existing Credit",WIRE:"Wire",HUMAN:"Human",VETERINARY:"Veterinary",DRUGUSE:"Drug use",DATE_FILED:"Patent Filing Date",DATE_GRANTED:"Patent Date Granted",DATE_EXPIRY:"Patent Expiration Date",NDS_NUMBER:"NDS Number",MED_INGRED:"Medicinal ingredient(s) (as provided on the NOC for the NDS provided in Section 3)",APPLICANTAPPLY:"Attestation as to Applicant",STATEMENTS_TIMELY:"Attestation as to Timely Submission",TIMELYDATE:"Date of first marketing approval application",TIMELYCOUNTRY:"Country of first marketing approval application",DATE_SIGNED:"Date",CSP_TITLE:"Certificate of Supplementary Protection (CSP) Information",NDS_TITLE:"New Drug Submission (NDS) Information",DRUGUSE_TITLE:"Drug Use",TIMEAPP_TITLE:"Timing of Application",NOC_120:"on the basis of a patent granted on or before the day on which the Notice of Compliance (NOC) for the above noted NDS is issued (before the end of the 120-day period that begins on the day on which the NOC is issued), or",GRANT_120:"on the basis of a patent granted after the day on which the Notice of Compliance (NOC) for the above noted NDS is issued (before the end of the 120-day period that begins on the day on which the patent is granted)",APPLICANT_OWNER:"The Applicant is the patentee and is recorded as an owner of the above noted Canadian Patent at the Canadian Intellectual Property Office, or",APPLICANT_BEHALF:"the Applicant is a manufacturer who is authorized by the person recorded in the Canadian Intellectual Property Office as the owner of the above noted Canadian Patent to file this application on their behalf and the above noted NDS was issued to the Applicant.",PATENT_TITLE:"Patent Information",APPLICANT_APPLY:"Applicant is applying (select one only)",FEE_TITLE:"Fee Payment",LOAD_CSP_FILE:"Load a Saved Certificate of Supplementary Protection Application File",CERT_TITLE:"Certification",BILLING_TITLE:"Billing Address",APPL_TITLE:"Applicant Information",PATENTNUM:"Canadian Patent Number",MSG_LENGTH_7NUM:"Please enter 7 digits.",OTHER_EU_COUNTRY:" Other European Union Country Details",CERT_FS:"Name of Authorized Official",CONTACT_TITLE:"Applicant Contact Information (where all communications regarding the CSP will be sent)",ACK_FEE_SUBMIT:"The Advance Payment Details form is being submitted separately by fax or mail",MEDINGRED_TITLE:"Medicinal Ingredient(s)",STATEMENT_TITLE:"Attestations",NOAPPLICATION:"When the application for the authorization for sale referred to in paragraph 106(1)(c) of the <i>Patent&nbsp;Act</i> (above noted NDS) was filed with the Minister of Health, no application for a marketing approval, equivalent to an authorization for sale, with respect to the medicinal ingredient or combination of medicinal ingredients, as the case may be, set out in this CSP application had been submitted in the European Union or any country that is a member of the European Union, the United States of America, Australia, Switzerland or Japan, or",APPLICATION:"if one or more applications for a marketing approval, equivalent to an authorization for sale, with respect to the medicinal ingredient or combination of medicinal ingredients, as the case may be, set out in this CSP application had been submitted in one or more of the European Union or any country that is a member of the European Union, the United States of America, Australia, Switzerland or Japan, the application for the authorization for sale referred to in paragraph 106(1)(c) of the <i>Patent&nbsp;Act</i> (above noted NDS) was filed with the Minister of Health before the end of the 18 month period that begins on the date of submission of the first of those marketing approval applications.  Details of the first of those marketing approval applications are as follows:",FEE_PREAMBLE:"This form <b>should not</b> include payment information (e.g. credit card number) other than as specifically requested below, as the information included within an electronic form cannot be deleted and will remain as part of the CSP application on record. As such, please separately <b><u>mail</u></b> or <b><u>fax</u></b> the ",FEE_URL:"http://www.hc-sc.gc.ca/dhp-mps/alt_formats/pdf/prodpharma/applic-demande/form/adv_pa_av-eng.pdf",FEE_URLTITLE:"Advance Payment Details for Drug Submissions and Master Files for Human and Disinfectant Drugs, and Certificate of Supplementary Protection Applications Form",HELP_CSPFILE_LOAD:"Expand File load Instructions",CSPFILE_LOAD:"File load Instructions",VERSION_INSTRUCT:"Expand Version Number Instructions",HELP_PATENT:"Expand Patent Instructions",HELP_FEE:"Expand Fee Payment Instructions",HELP_CERT:"Expand Certification Instructions",HELP_ATTEST:"Expand Attestation Instructions",HELP_DRUGUSE:"Expand Drug Use Instructions",HELP_MI:"Expand Medicinal Ingredient Instructions",HELP_NDS:"Expand New Drug Submission Instructions",HELP_MARKETDATE:"Expand Market Date Instructions",APPLICANT_INSTRUCT:"Expand Applicant Information Instructions",BILLING_INSTRUCT:"Expand Billing Address Instructions",VERSION_INSTRUCT_CLOSE:"Version Number Instructions",PATENT_INSTRUCT:"Patent Instructions",FEE_INSTRUCT:"Fee Payment Instructions",CERT_INSTRUCT:"Certification Instructions",ATTEST_INSTRUCT:"Attestation Instructions",DRUGUSE_INSTRUCT:"Drug Use Instructions",MI_INSTRUCT:"Medicinal Ingredient Instructions",NDS_INSTRUCT:"New Drug Submission Instructions",MARKETDATE_INSTRUCT:"Market Date Instructions",APPLICANT_CLOSE:"Applicant Information Instructions",BILLING_CLOSE:"Billing Address Instructions",ADVANCE_DETAILS:"(Advance Payment Details form)."}),$translateProvider.translations("fr",{CSP_FORM:"Formulaire de demande CPS",CSP_TITLE:"Certificat de protection supplémentaire (CPS) information",APPLICANT:"fr_Applicant Name",LOAD_CSP_FILE:"Charger un fichier enregistré de la demande de certificat de protection supplémentaire",HCONLY:"Á l'usage de Santé Canada",DATE_APPL_REC:"Date de réception de la demande",CSP_COMPANY_CODE:"Code de la société du CPS",CSP_APPLICATION_CODE:"No de demande de CPS",NOTES:"Remarques",APPLICANTNAME:"Nom du demandeur",APPL_TITLE:"Renseignements sur le demandeur",CONTACT_TITLE:"Coordonnées du demandeur (où seront envoyées toutes les communications concernant le CPS)",BILLING_DIFFERENT:"Cocher ici pour saisir une adresse de facturation (si elle diffère des coordonnées du demandeur)",BILLING_TITLE:"Adresse de facturation",COMPANY_NOABBREV:"Nom de la société (dénomination sociale complète – ne pas utiliser d’abréviations)",PATENT_TITLE:"Renseignements sur le brevet",PATENTNUM:"Numéro de brevet au Canada",DATE_FILED:"Date de dépôt du brevet ",DATE_GRANTED:"Date d’octroi du brevet",DATE_EXPIRY:"Date d'expiration du brevet",NDS_TITLE:"Renseignements sur la présentation de drogue nouvelle (PDN)",NDS_NUMBER:"Numéro de PDN",DRUGUSE:"Usage de la drogue",DRUGUSE_TITLE:"Usage de la drogue",TIMEAPP_TITLE:"Moment du dépot de la demande",APPLICANT_APPLY:"Le demandeur dépose une demande (sélectionner une seule réponse)",NOC_120:"en vertu d’un brevet délivré à la date ou avant la date où l’avis de conformité (AC) a été délivré pour la PDN susmentionnée (avant la fin de la période de 120 jours qui commence le jour où l’AC est délivré)",GRANT_120:"en vertu d’un brevet délivré après que l’avis de conformité (AC) a été délivré pour la PDN susmentionnée (avant la fin de la période de 120 jours qui commence le jour où le brevet est délivré).",MEDINGRED_TITLE:"Ingrédient(s) médicinal(aux)",MED_INGRED:"Ingrédient(s) médicinal(aux)(conformément à ce qui est indiqué sur l’AC pour la PDN susmentionnée)",APPLICANTAPPLY:"Attestation du demandeur",APPLICANT_OWNER:"Le demandeur est le titulaire du brevet et est inscrit à ce titre du brevet canadien susmentionné à l’Office de la propriété intellectuelle du Canada.",APPLICANT_BEHALF:"Le demandeur est le fabricant autorisé par la personne inscrite à l’Office de la propriété intellectuelle du Canada à titre de titulaire du brevet canadien susmentionné à déposer cette demande en son nom, et la PDN susmentionnée a été délivrée au demandeur.",STATEMENTS_TIMELY:"Attestation de présentation en temps opportun",ACK_FEE_SUBMIT:"Le formulaire Détails du paiement en avance est soumis séparément par télécopieur ou par courriel",PAYMENT_METHOD:"Avec la méthode de paiement suivante",DATE_SIGNED:"Date",TIMELYDATE:"Date de première demande pour une autorisation de vente",TIMELYCOUNTRY:"Pays de première demande pour une autorisation de vente",CERT_TITLE:"Attestation",CERT_FS:"Représentant autorisé",ADVANCE_FEE_PAYMENT:"Les frais sont payés ou un montant de (saisir le montant des frais) a été prépayé pour les frais",FEE_TITLE:"Paiement des frais",STATEMENT_TITLE:"Attestations",NOAPPLICATION:"Lorsque la demande d’autorisation de mise en marché visée à l’alinéa 106(1)(c) de la <i>Loi sur les brevets</i> (PDN susmentionnée) a été déposée auprès du ministre de la Santé, aucune demande d’autorisation de vente, équivalente à une autorisation de mise en marché relative à l’ingrédient médicinal ou à une combinaison d’ingrédients médicinaux, selon le cas, faisant l’objet de cette demande de CPS n’a été soumise dans l’Union européenne ou tout pays membre de l’Union européenne, les États-Unis d’Amérique, l’Australie, la Suisse ou le Japon.",APPLICATION:"Si une ou plusieurs demandes d’autorisation de vente, équivalente à une autorisation de mise en marché, relative à l’ingrédient médicinal ou à une combinaison d’ingrédients médicinaux, selon le cas, faisant l’objet de cette demande de CPS ont été soumises dans l’Union européenne ou tout pays membre de l’Union européenne, les États-Unis d’Amérique, l’Australie, la Suisse ou le Japon, la demande d’autorisation de mise en marché visée à l’alinéa 106(1)(c) de la <i>Loi sur les brevets</i> (PDN susmentionnée) a été déposée auprès du ministre de la Santé avant la fin de la période de 18 mois commençant à la date de dépôt de la première de ces demandes d’autorisation de vente.  Les détails de la première de ces demandes d’autorisation de vente sont les suivants :",FEE_PREAMBLE:"Ce formulaire <b>ne doit pas</b> inclure de renseignements sur le paiement (par ex. numéro de carte de crédit) autres que ceux spécifiquement demandés ci-dessous, puisque les renseignements inclus dans un formulaire électronique ne peuvent pas être supprimés et continueront de faire partie de la demande de CPS en dossier.  À cet effet, veuillez envoyer séparément par <b><u>courriel</u></b> ou par <b><u>télécopieur</u></b> le formulaire ",FEE_URL:"http://www.hc-sc.gc.ca/dhp-mps/alt_formats/pdf/prodpharma/applic-demande/form/adv_pa_av-fra.pdf",FEE_URLTITLE:"Détails du paiement en avance pour présentations de drogues et fiches maîtresses pour les médicaments à usage humain et les désinfectants assimilés à drogues et demandes de certificat de protection supplémentaire",FINANCIAL:"Paiement de facture(s) par l’intermédiaire d’une institution financière",CHEQUE:"Chèque / Traites bancaires / Mandat-poste",CREDIT_CARD:"MasterCard / Visa / American Express (AMEX) / Visa Debit / JCB International",CREDIT:"Paiement au moyen d'un crédit existant",WIRE:"Virements télégraphiques",HUMAN:"Humain",VETERINARY:"Vétérinaire",HELP_CSPFILE_LOAD:"Élargir les instructions de chargement du fichier",CSPFILE_LOAD:"Chargement du fichier",VERSION_INSTRUCT:"Élargir les instructions de version",HELP_PATENT:"Élargir les instructions de brevet",HELP_FEE:"Élargir les instructions frais",HELP_CERT:"Élargir les instructions de attestation",HELP_ATTEST:"Élargir les instructions de attestations",HELP_DRUGUSE:"Élargir les instructions d'utilisation de drogues",HELP_MI:"Élargir les instructions de ingrédient médicinal",HELP_NDS:"Élargir les instructions de renseignements sur la présentation de drogue nouvelle",HELP_MARKETDATE:"Élargir les instructions de date de première demande pour une autorisation de vente",APPLICANT_INSTRUCT:"Élargir les instructions de renseignements sur le demandeur",BILLING_INSTRUCT:"Élargir les instructions de adresse de facturation",VERSION_INSTRUCT_CLOSE:"instructions de version",PATENT_INSTRUCT:"instructions de brevet",FEE_INSTRUCT:"instructions frais",CERT_INSTRUCT:"instructions de attestation",ATTEST_INSTRUCT:"instructions de attestations",DRUGUSE_INSTRUCT:"instructions d'utilisation de drogues",MI_INSTRUCT:"instructions de ingrédient médicinal",NDS_INSTRUCT:"instructions de renseignements sur la présentation de drogue nouvelle",MARKETDATE_INSTRUCT:"instructions de date de première demande pour une autorisation de vente",APPLICANT_CLOSE:"instructions de renseignements sur le demandeur",BILLING_CLOSE:"instructions de adresse de facturation",ADVANCE_DETAILS:"(formulaire Détails du paiement en avance)."}),$translateProvider.translations("en",{APPLICANT_APPL:"Applicant Name",SALUTATION_APPL:"Applicant Salutation",FIRSTNAME_APPL:"Applicant First Name",LASTNAME_APPL:"Applicant Last Name",LANGCORRESPOND_APPL:"Applicant Language of Correspondance",JOBTITLE_APPL:"Applicant Job Title",FAXNUMBER_APPL:"Applicant Fax Number",PHONENUMBER_APPL:"Applicant Phone Number",CONTACTEMAIL_APPL:"Applicant Email",CITY_APPL:"Applicant City",STREET_APPL:"Applicant Street",COUNTRY_APPL:"Applicant Country",PROVINCELIST_APPL:"Applicant Province or State",POSTAL_APPL:"Applicant postal or zip code",APPLICANT_BILL:"Billing Company Name",SALUTATION_BILL:"Billing Salutation",FIRSTNAME_BILL:"Billing First Name",LASTNAME_BILL:"Billing Last Name",LANGCORRESPOND_BILL:"Billing Language of Correspondance",JOBTITLE_BILL:"Billing Job Title",FAX_NUMBER_BILL:"Billing Fax Number",PHONENUMBER_BILL:"Billing Phone Number",CONTACTEMAIL_BILL:"Billing Email",FAXNUMBER_BILL:"Billing Fax Number",STREET_BILL:"Billing Street",CITY_BILL:"Billing City",COUNTRY_BILL:"Billing Country",PROVINCELIST_BILL:"Billing Province or State",POSTAL_BILL:"Billing postal or zip code",CERTFIRSTNAME:"Authorized Official First Name",CERTLASTNAME:"Authorized Official Last Name",CERTJOBTITLE:"Authorized Official Job Title",CERTDATESIGNED:"Authorized Official Date Signed",DATEFILED:"Patent Filing Date",DATEGRANTED:"Patent Date Granted",DATEEXPIRY:"Patent Expiration Date",CONTROLNUMBER:"NDS Control Number",TIME120:"Applicant is applying",MEDICINALINGREDIENT:"Medicinal Ingredient",APPLICANTSTATEMENT:"Statements as to Applicant",FEE:"Advanced Payment Fee",FEETYPE:"Method of Advanced Payment",TYPE_ZERO_MIN:"Must be greater than zero",MSG_ERR_MAX:"Must be less than 1000000000"}),$translateProvider.translations("fr",{APPLICANT_APPL:"Nom du demandeur",SALUTATION_APPL:"Le demandeur salutation",FIRSTNAME_APPL:"Prénom du demandeur",LASTNAME_APPL:"Nom de famille du demandeur",LANGCORRESPOND_APPL:"Applicant Language of Correspondance",JOBTITLE_APPL:"Titre professionnel du demandeur",FAXNUMBER_APPL:"Numéro de télécopieur du demandeur",PHONENUMBER_APPL:"Numéro de téléphone du demandeur",CONTACTEMAIL_APPL:"Adresse électronique du demandeur",CITY_APPL:"Ville du demandeur",STREET_APPL:"Adresse du demandeur",COUNTRY_APPL:"Pays du demandeur",PROVINCELIST_APPL:"Province ou état du demandeur",POSTAL_APPL:"Code postal du demandeur",APPLICANT_BILL:"Nom de la société de facturation (dénomination sociale complète – ne pas utiliser d’abréviations)",SALUTATION_BILL:"Salutation d'adresse de facturation",FIRSTNAME_BILL:"Prénom d'adresse de facturation",LASTNAME_BILL:"Nom de l'adresse de facturation",LANGCORRESPOND_BILL:"Langue de correspondance de facturation",JOBTITLE_BILL:"Titre professionnel de facturation",PHONENUMBER_BILL:"Numéro de téléphone de facturation",CONTACTEMAIL_BILL:"Adresse électronique de facturation",FAXNUMBER_BILL:"Numéro de télécopieur de facturation",STREET_BILL:"Adresse de facturation ",CITY_BILL:"Ville de facturation",COUNTRY_BILL:"Pays de facturation",PROVINCELIST_BILL:"Province ou état de facturation",POSTAL_BILL:"Code postal de facturation",CERTFIRSTNAME:"Prénom du représentant autorisé",CERTLASTNAME:"Nom de famille du représentant autorisé",CERTJOBTITLE:"Titre professionnel du représentant autorisé",CERTDATESIGNED:"Date de signature du représentant autorisé",DATEFILED:"Date de dépôt du brevet",DATEGRANTED:"Date d’octroi du brevet",DATEEXPIRY:"Date le brevet est périmé",CONTROLNUMBER:"Numéro de PDN",TIME120:"Le demandeur dépose une demande ",MEDICINALINGREDIENT:"Ingrédient médicinal",APPLICANTSTATEMENT:"Attestation du demandeur",FEE:"Paiement des frais",FEETYPE:"Méthode de paiement des frais",TYPE_ZERO_MIN:"Doit être supérieur à zéro",MSG_ERR_MAX:"Doit être inférieur à 1,000,000,000"}),$translateProvider.translations("en",{FOR_THE:"For the ",THERE_ARE_ERRORS:"There are errors ",ERRORS_FOUND:"errors were found.",ERROR_FOUND:"error was found.",TYPE_REQUIRED:"This field is required.",TYPE_EMAIL:"Please enter a valid email address.",TYPE_DUPLICATEROLE:"This role has already been selected.",TYPE_MINLENGTH:"Less than minimum length",POSTAL_FORMAT:"Please enter a valid format",TYPE_MIN:"Must be greater than the minimum",
TYPE_DATE:"Please enter a valid date",TYPE_NUMBER:"Please enter a valid number"}),$translateProvider.translations("fr",{FOR_THE:"Pour le ",THERE_ARE_ERRORS:"Il y a des erreurs ",ERRORS_FOUND:"erreurs ont été trouvées.",ERROR_FOUND:"erreur a été trouvée.",TYPE_REQUIRED:"Ce champ est obligatoire.",TYPE_EMAIL:"Veuillez fournir une adresse électronique valide.",TYPE_DUPLICATEROLE:"Ce rôle a déjà été sélectionné.",TYPE_MINLENGTH:"Moins de longueur minimale.",POSTAL_FORMAT:"Entrez un format valide.",TYPE_MIN:"Doit être supérieur au minimum.",TYPE_DATE:"Veuillez fournir une une date valide.",TYPE_NUMBER:"Veuillez fournir un numéro valide."})}]),function(){"use strict";angular.module("numberFormat",[])}(),function(){"use strict";function digitsCtrl(){function link(scope,element,attrs,modelCtrl){modelCtrl.$parsers.push(function(inputValue){if(void 0==inputValue)return"";var isNumber=!1,max=-1,ignore=!1,tempVal=""+inputValue;attrs.type&&"number"===attrs.type&&(isNumber=!0),attrs.onlyMax&&(max=parseInt(attrs.onlyMax));var regexIntNeg=/[^0-9-]/g,integerReg=/[^0-9]/g,regexValue=integerReg;if("intNeg"==attrs.onlyDigits?regexValue=regexIntNeg:"false"===attrs.onlyDigits?ignore=!0:regexValue=integerReg,ignore)return inputValue;var transformedInput=tempVal.replace(regexValue,"");return max>0&&(transformedInput=transformedInput.substring(0,max)),transformedInput!==tempVal&&(isNumber&&transformedInput&&(transformedInput=parseFloat(transformedInput)),modelCtrl.$setViewValue(transformedInput),modelCtrl.$render()),transformedInput})}var directive={link:link,restrict:"A",require:"?ngModel"};return directive}angular.module("numberFormat").directive("onlyDigits",digitsCtrl)}(),function(){"use strict";angular.module("cspDataModule",[])}(),function(){"use strict";function cspDataLists(){function _getEuCountries(){return vm.euCountryList}function _setEuCountries(jsonList){jsonList&&(vm.euCountryList=jsonList)}var vm=this;vm.euCountryList=[];var service={getMarketingCountries:_getEuCountries,loadEuCountries:_setEuCountries};return service}angular.module("cspDataModule").factory("cspDataLists",cspDataLists),cspDataLists.$inject=[]}(),function(){"use strict";angular.module("cspLoadService",["dataLists","hpfbConstants","filterLists","cspDataModule"])}(),function(){"use strict";angular.module("cspLoadService",[]).config(["$httpProvider",function($httpProvider){$httpProvider.defaults.headers.get||($httpProvider.defaults.headers.get={}),$httpProvider.defaults.headers.get["If-Modified-Since"]="Mon, 26 Jul 1997 05:00:00 GMT",$httpProvider.defaults.headers.get["Cache-Control"]="no-cache",$httpProvider.defaults.headers.get.Pragma="no-cache"}])}(),function(){"use strict";angular.module("cspLoadService").factory("customLoad",["$http","$q","$filter","getCountryAndProvinces","CANADA","USA","RELATIVE_FOLDER_DATA","cspDataLists",function($http,$q,$filter,getCountryAndProvinces,CANADA,USA,RELATIVE_FOLDER_DATA,cspDataLists){function _createSortedArrayNAFirst(jsonList,lang){var result=[],canadaRecord=null,usaRecord=null;return angular.forEach($filter("orderByLocale")(jsonList,lang),function(sortedObject){sortedObject.id===USA?usaRecord=sortedObject:sortedObject.id===CANADA?canadaRecord=sortedObject:result.push(sortedObject)}),usaRecord&&result.unshift(usaRecord),canadaRecord&&result.unshift(canadaRecord),result}function _createSortedArray(jsonList,lang){var result=[];return angular.forEach($filter("orderByLocale")(jsonList,lang),function(sortedObject){result.push(sortedObject)}),result}return function(options){var deferred=$q.defer(),countryUrl=RELATIVE_FOLDER_DATA+"countries.json",euCountryUrl=RELATIVE_FOLDER_DATA+"csp_eucountries.json",resultTranslateList={};return $http.get(countryUrl).then(function(response){var newList=_createSortedArrayNAFirst(response.data,options.key);return getCountryAndProvinces.createCountryList(newList),$http.get(euCountryUrl)}).then(function(response){var newList=_createSortedArray(response.data,options.key);return cspDataLists.loadEuCountries(newList),response.data})["catch"](function(error){console.warn("An error occurred with CSP List Load: "+error),deferred.reject(resultTranslateList)})["finally"](function(){deferred.resolve(resultTranslateList)}),deferred.promise}}])}(),function(){"use strict";angular.module("cspConstants",[])}(),function(){"use strict";angular.module("cspConstants").constant("NOC","NOC").constant("GRANT","GRANT").constant("OWNER","OWNER").constant("OWNER_BEHALF","BEHALF_OWNER").constant("NO_APPLICATION","NO_APPLICATION").constant("APPLICATION","APPLICATION").constant("EUOTHER","EU_OTHER")}(),function(){"use strict";angular.module("cspService",["hpfbConstants","dataLists","cspDataModule"])}(),function(){"use strict";function CspService($filter,CANADA,NO,YES,PHARMA_TYPE,getCountryAndProvinces,cspDataLists){function CspService(){var defaultCSPData=this.getEmptyInternalModel();this.rootTag="CERTIFICATE_SUPPLEMENTARY_PROTECTION",this.billingType="BILLING",this.applicantType="APPLICANT",angular.extend(this._default,defaultCSPData)}return CspService.prototype._default={},CspService.prototype.getRootTag=function(){return this.rootTag},CspService.prototype.getModelInfo=function(){return this._default},CspService.prototype.transformToFileObj=function(jsonObj){if(!jsonObj)return null;var model={},rootTag=this.getRootTag();model[rootTag]={},model[rootTag]=this.createEmptyExternalModel(),model[rootTag].template_type=PHARMA_TYPE,model[rootTag].enrolment_version=jsonObj.enrolmentVersion,model[rootTag].date_saved=$filter("date")(jsonObj.dateSaved,"yyyy-MM-dd"),model[rootTag].software_version="1.0.0",model[rootTag].data_checksum="";var hcOnly=model[rootTag].health_canada_only,intHcOnly=jsonObj.healthCanadaOnly;intHcOnly.companyId&&(hcOnly.company_id=intHcOnly.companyId),intHcOnly.applicationId&&(hcOnly.application_id=intHcOnly.applicationId);var date=$filter("date")(intHcOnly.dateReceived,"yyyy-MM-dd");date&&(hcOnly.date_received=date),intHcOnly.hcNotes&&(hcOnly.hc_notes=intHcOnly.hcNotes);var extInfo=model[rootTag].application_info,intInfo=jsonObj.applicationInfo;intInfo.controlNumber&&(extInfo.control_number=intInfo.controlNumber),intInfo.drugUse&&(extInfo.drug_use=intInfo.drugUse),intInfo.timeApplication&&(extInfo.time_application=intInfo.timeApplication),intInfo.medicinalIngredient&&(extInfo.medicinal_ingredient=intInfo.medicinalIngredient),intInfo.applicantStatement&&(extInfo.applicant_statement=intInfo.applicantStatement);var extPatent=extInfo.patent_info,intPatent=jsonObj.patent;intPatent.patentNumber&&(extPatent.patent_number=intPatent.patentNumber),date=$filter("date")(intPatent.filingDate,"yyyy-MM-dd"),date&&(extPatent.filing_date=date),date=$filter("date")(intPatent.grantedDate,"yyyy-MM-dd"),date&&(extPatent.granted_date=date),date=$filter("date")(intPatent.expiryDate,"yyyy-MM-dd"),date&&(extPatent.expiry_date=date);var extTimely=model[rootTag].timely_submission_info,intTimely=jsonObj.timelySubmission;intTimely.submissionStatement&&(extTimely.timely_submission_statement=intTimely.submissionStatement),date=$filter("date")(intTimely.approvalDate,"yyyy-MM-dd"),date&&(extTimely.marketing_application_date=date),intTimely.country&&(extTimely.marketing_country={_label_en:intTimely.country.en,_label_fr:intTimely.country.fr,__text:intTimely.country.id});var extPayment=model[rootTag].advanced_payment,intPayment=jsonObj.payment;intPayment.advancedPaymentType&&(extPayment.advanced_payment_type=intPayment.advancedPaymentType),intPayment.advancedPaymentFee&&(extPayment.advanced_payment_fee=intPayment.advancedPaymentFee),extPayment.advanced_payment_ack=intPayment.ackPaymentSubmit===!0?YES:NO;var extCertification=model[rootTag].certification,intCertification=jsonObj.certification;return intCertification.givenName&&(extCertification.given_name=intCertification.givenName),intCertification.initials&&(extCertification.initials=intCertification.initials),intCertification.surname&&(extCertification.surname=intCertification.surname),intCertification.title&&(extCertification.job_title=intCertification.title),intCertification.dateSigned&&(extCertification.date_signed=$filter("date")(intCertification.dateSigned,"yyyy-MM-dd")),model[rootTag].applicant=this._transformApplicantInfoForOutput(jsonObj.applicant),model},CspService.prototype.transformFromFileObj=function(inputJsonObj){var resultJson=this.getEmptyInternalModel(),jsonObj=inputJsonObj[this.rootTag];return resultJson.applicant=this._mapApplicantToInternal(jsonObj.applicant),resultJson.enrolmentVersion=jsonObj.enrolment_version,resultJson.dateSaved=jsonObj.date_saved,resultJson.healthCanadaOnly.companyId=jsonObj.health_canada_only.company_id,resultJson.healthCanadaOnly.dateReceived=_parseDate(jsonObj.health_canada_only.date_received),resultJson.healthCanadaOnly.applicationId=jsonObj.health_canada_only.application_id,resultJson.healthCanadaOnly.hcNotes=jsonObj.health_canada_only.hc_notes,resultJson.patent.patentNumber=jsonObj.application_info.patent_info.patent_number,resultJson.patent.filingDate=_parseDate(jsonObj.application_info.patent_info.filing_date),resultJson.patent.grantedDate=_parseDate(jsonObj.application_info.patent_info.granted_date),resultJson.patent.expiryDate=_parseDate(jsonObj.application_info.patent_info.expiry_date),resultJson.applicationInfo.controlNumber=jsonObj.application_info.control_number,resultJson.applicationInfo.drugUse=jsonObj.application_info.drug_use,resultJson.applicationInfo.timeApplication=jsonObj.application_info.time_application,resultJson.applicationInfo.medicinalIngredient=jsonObj.application_info.medicinal_ingredient,resultJson.applicationInfo.applicantStatement=jsonObj.application_info.applicant_statement,resultJson.timelySubmission.submissionStatement=jsonObj.timely_submission_info.timely_submission_statement,resultJson.timelySubmission.approvalDate=_parseDate(jsonObj.timely_submission_info.marketing_application_date),jsonObj.timely_submission_info.marketing_country&&(resultJson.timelySubmission.country=$filter("filter")(cspDataLists.getMarketingCountries(),{id:jsonObj.timely_submission_info.marketing_country.__text})[0]),jsonObj.advanced_payment.advanced_payment_fee&&(resultJson.payment.advancedPaymentFee=Number(jsonObj.advanced_payment.advanced_payment_fee)),resultJson.payment.advancedPaymentType=jsonObj.advanced_payment.advanced_payment_type,resultJson.payment.ackPaymentSubmit=jsonObj.advanced_payment.advanced_payment_ack===YES,resultJson.certification.givenName=jsonObj.certification.given_name,resultJson.certification.initials=jsonObj.certification.initials,resultJson.certification.surname=jsonObj.certification.surname,resultJson.certification.title=jsonObj.certification.job_title,resultJson.certification.dateSigned=_parseDate(jsonObj.certification.date_signed),this._default=resultJson,resultJson},CspService.prototype.createApplicantRecord=function(isApplicant){var record=this.createContactRecord();return record.applicantName="",record.isBillingDifferent=!1,isApplicant?(record.role.applicant=!0,record.role.billing=!0):(record.role.applicant=!1,record.role.billing=!0),record},CspService.prototype.createContactRecord=function(){var applicant={};return applicant.role={applicant:!0,billing:!0},applicant.contact={salutation:"",givenName:"",surname:"",initials:"",title:"",phone:"",phoneExt:"",fax:"",email:""},applicant.address={street:"",city:"",stateList:"",stateText:"",country:{id:"",fr:"",en:""},postalCode:""},applicant},CspService.prototype.addApplicantToModel=function(){this._default.applicant||(this._default.applicant=[]);var numberRecords=this._default.applicant.length;0===numberRecords?this._default.applicant.push(this.createApplicantRecord(!0)):1==numberRecords?(this._default.applicant[0].role.applicant=!0,this._default.applicant[0].role.billing=!1,this._default.applicant.push(this.createApplicantRecord(!1))):console.warn("Tried to add an applicant when there were 2 records")},CspService.prototype.deleteApplicant=function(){this._default.applicant||(this._default.applicant=[]);var numberRecords=this._default.applicant.length;if(0!==numberRecords&&1!==numberRecords){for(var i=0;i<numberRecords;i++){var record=this._default.applicant[i];record.role.billing===!0&&this._default.applicant.splice(i,1)}this._default.applicant[0].role.applicant=!0,this._default.applicant[0].role.billing=!0}},CspService.prototype.getAdvancedPaymentTypes=function(){return["FINANCIAL","CHEQUE","CREDIT_CARD","CREDIT","WIRE"]},CspService.prototype.getDrugUses=function(){return["HUMAN","VETERINARY"]},CspService.prototype.getEmptyInternalModel=function(){var defaultCSPData={};defaultCSPData.dataChecksum="",defaultCSPData.enrolmentVersion="0.0",defaultCSPData.dateSaved="",defaultCSPData.softwareVersion="",defaultCSPData.applicant=[this.createApplicantRecord(!0,!0)];var canRecord=$filter("filter")(getCountryAndProvinces.getCountries(),{id:CANADA})[0];return canRecord?defaultCSPData.applicant[0].address.country=canRecord:(console.warn("race condition with country list"),defaultCSPData.applicant[0].address.country={id:CANADA,en:"Canada",fr:"Canada"}),defaultCSPData.healthCanadaOnly={},defaultCSPData.healthCanadaOnly.companyId="",defaultCSPData.healthCanadaOnly.dateReceived="",defaultCSPData.healthCanadaOnly.applicationId="",defaultCSPData.healthCanadaOnly.hcNotes="",defaultCSPData.patent={},defaultCSPData.patent.patentNumber="",defaultCSPData.patent.filingDate="",defaultCSPData.patent.grantedDate="",defaultCSPData.patent.expiryDate="",defaultCSPData.applicationInfo={},defaultCSPData.applicationInfo.controlNumber="",defaultCSPData.applicationInfo.drugUse="",defaultCSPData.applicationInfo.timeApplication="",defaultCSPData.applicationInfo.medicinalIngredient="",defaultCSPData.applicationInfo.applicantStatement="",defaultCSPData.timelySubmission={},defaultCSPData.timelySubmission.submissionStatement="",defaultCSPData.timelySubmission.approvalDate="",defaultCSPData.timelySubmission.country="",defaultCSPData.payment={},defaultCSPData.payment.advancedPaymentFee=null,defaultCSPData.payment.advancedPaymentType="",defaultCSPData.payment.ackPaymentSubmit=!1,defaultCSPData.certification={},defaultCSPData.certification.givenName="",defaultCSPData.certification.initials="",defaultCSPData.certification.surname="",defaultCSPData.certification.title="",defaultCSPData.certification.dateSigned="",defaultCSPData},CspService.prototype.createEmptyExternalModel=function(){var defaultCSPData={};defaultCSPData.template_type="",defaultCSPData.data_checksum="",defaultCSPData.enrolment_version="",defaultCSPData.date_saved="",defaultCSPData.software_version="",defaultCSPData.data_checksum="",defaultCSPData.health_canada_only={},defaultCSPData.applicant=[];var hc=defaultCSPData.health_canada_only;hc.company_id="",hc.application_id="",hc.date_received="",hc.hc_notes="",defaultCSPData.application_info={},defaultCSPData.application_info.patent_info={};var patent=defaultCSPData.application_info.patent_info;patent.patent_number="",patent.filing_date="",patent.granted_date="",patent.expiry_date="";var info=defaultCSPData.application_info;info.control_number="",info.drug_use="",info.time_application="",info.medicinal_ingredient="",info.applicant_statement="",defaultCSPData.timely_submission_info={};var timely=defaultCSPData.timely_submission_info;timely.timely_submission_statement="",timely.marketing_application_date="",timely.marketing_country="",defaultCSPData.advanced_payment={};var payment=defaultCSPData.advanced_payment;payment.advanced_payment_type=null,payment.advanced_payment_fee="",payment.advanced_payment_ack=NO,defaultCSPData.certification={};var cert=defaultCSPData.certification;return cert.given_name="",cert.initials="",cert.surname="",cert.job_title="",cert.date_signed="",defaultCSPData},CspService.prototype.createExternalApplicantRecord=function(){var record={};return record.billing_role=NO,record.applicant_role=NO,record.applicant_name="",record.contact={},record.contact.given_name="",record.contact.initials="",record.contact.surname="",record.contact.job_title="",record.contact.phone_num="",record.contact.phone_ext="",record.contact.fax_num="",record.contact.email="",record.address={},record.address.street_address="",record.address.city="",record.address.province_lov="",record.address.province_text="",record.address.country="",record.address.postal_code="",record},CspService.prototype._transformApplicantInfoForOutput=function(inputJson){var outputArray=[];if(inputJson instanceof Array||(inputJson=[inputJson]),0==inputJson.length)return void outputArray.push(this.createExternalApplicantRecord());for(var i=0;i<inputJson.length;i++){var record=this.createExternalApplicantRecord();record.billing_role=inputJson[i].role.billing===!0?YES:NO,record.applicant_role=inputJson[i].role.applicant===!0?YES:NO,inputJson[i].applicantName&&(record.applicant_name=inputJson[i].applicantName),inputJson[i].contact.salutation&&(record.contact.salutation=inputJson[i].contact.salutation),inputJson[i].contact.givenName&&(record.contact.given_name=inputJson[i].contact.givenName),inputJson[i].contact.initials&&(record.contact.initials=inputJson[i].contact.initials),inputJson[i].contact.surname&&(record.contact.surname=inputJson[i].contact.surname),inputJson[i].contact.language&&(record.contact.language_correspondance=inputJson[i].contact.language),inputJson[i].contact.title&&(record.contact.job_title=inputJson[i].contact.title),inputJson[i].contact.phone&&(record.contact.phone_num=inputJson[i].contact.phone),record.contact.phone_ext=inputJson[i].contact.phoneExt,inputJson[i].contact.fax&&(record.contact.fax_num=inputJson[i].contact.fax),inputJson[i].contact.email&&(record.contact.email=inputJson[i].contact.email),inputJson[i].address.street&&(record.address.street_address=inputJson[i].address.street),inputJson[i].address.city&&(record.address.city=inputJson[i].address.city),inputJson[i].address.stateList&&(record.address.province_lov=inputJson[i].address.stateList),inputJson[i].address.stateText&&(record.address.province_text=inputJson[i].address.stateText),inputJson[i].address.country&&(record.address.country={_label_en:inputJson[i].address.country.en,_label_fr:inputJson[i].address.country.fr,__text:inputJson[i].address.country.id}),inputJson[i].address.postalCode&&(record.address.postal_code=inputJson[i].address.postalCode),outputArray.push(record)}return outputArray},CspService.prototype._mapApplicantToInternal=function(inputJson){var result=[];if(!inputJson)return result;inputJson instanceof Array||(inputJson=[inputJson]);for(var i=0;i<inputJson.length;i++){var record=this.createApplicantRecord(!0),externalRecord=inputJson[i];record.role.applicant=externalRecord.applicant_role===YES,record.role.billing=externalRecord.billing_role===YES,record.role.applicant&&!record.role.billing?(record.isBillingDifferent=!0,record.address.country=$filter("filter")(getCountryAndProvinces.getCountries(),{id:CANADA})[0]):record.role.billing?externalRecord.address&&externalRecord.address.country&&externalRecord.address.country.__text?record.address.country=$filter("filter")(getCountryAndProvinces.getCountries(),{id:externalRecord.address.country.__text})[0]:record.address.country={id:"",en:"",fr:""}:(console.warn("no applicant role, country default"),record.address.country={id:"",en:"",fr:""}),record.applicantName=externalRecord.applicant_name,record.contact.salutation=externalRecord.contact.salutation,record.contact.givenName=externalRecord.contact.given_name,record.contact.surname=externalRecord.contact.surname,record.contact.initials=externalRecord.contact.initials,record.contact.title=externalRecord.contact.job_title,record.contact.language=externalRecord.contact.language_correspondance,record.contact.phone=externalRecord.contact.phone_num,record.contact.phoneExt=externalRecord.contact.phone_ext,record.contact.fax=externalRecord.contact.fax_num,record.contact.email=externalRecord.contact.email,record.address.street=externalRecord.address.street_address,record.address.city=externalRecord.address.city,record.address.stateList=externalRecord.address.province_lov,record.address.stateText=externalRecord.address.province_text,record.address.postalCode=externalRecord.address.postal_code,result.push(record)}return result},CspService}function _parseDate(value){if(!value)return null;var dateArray=value.split("-");3!=dateArray.length&&console.warn("_parseDate error not 3 parts: "+value);var aDate=new Date(dateArray[0],dateArray[1]-1,dateArray[2]);return aDate}angular.module("cspService").factory("CspService",CspService),CspService.$inject=["$filter","CANADA","NO","YES","PHARMA_TYPE","getCountryAndProvinces","cspDataLists"]}(),function(){"use strict";angular.module("applicationInfoService",[])}(),function(){"use strict";function ApplicationInfoService(){function ApplicationInfoService(){}return ApplicationInfoService.prototype.getTodayDate=function(){function pad(n){return n<10?"0"+n:n}var d=new Date,isoDate=d.getFullYear()+"-"+pad(d.getMonth()+1)+"-"+pad(d.getDate());return isoDate},ApplicationInfoService.prototype.incrementMinorVersion=function(enrolmentVersion){var result;if(enrolmentVersion){var parts=enrolmentVersion.split("."),dec=parseInt(parts[1]);result=parts[0]+"."+(dec+1)}else result="0.1";return result},ApplicationInfoService.prototype.incrementMajorVersion=function(enrolmentVersion){var result;if(enrolmentVersion){var parts=enrolmentVersion.split("."),whole=parseInt(parts[0]);result=whole+1+".0"}else result="1.0";return result},ApplicationInfoService.prototype.getApplicationStatusList=function(){return["NEW","AMEND","APPROVED"]},ApplicationInfoService.prototype.getApprovedType=function(){return"APPROVED"},ApplicationInfoService.prototype.getAmendType=function(){return"AMEND"},ApplicationInfoService}angular.module("applicationInfoService").factory("ApplicationInfoService",ApplicationInfoService)}(),function(){"use strict";angular.module("filterLists",["hpfbConstants"])}(),function(){"use strict";function orderByTranslatedCountry($translate,$filter,CANADA,USA){return function(array,objKey){var result=[],translated=[];return angular.forEach(array,function(value){translated.push({key:value,label:$translate.instant(value)})}),result.push(CANADA),result.push(USA),angular.forEach($filter("orderBy")(translated,"label"),function(sortedObject){sortedObject.key!==CANADA&&sortedObject.key!==USA&&result.push(sortedObject.key)}),result}}function orderByTranslatedCountryAndLabel($translate,$filter,CANADA,USA){return function(array){var result=[],translated=[];return angular.forEach(array,function(value){translated.push({key:value,label:$translate.instant(value)})}),result.push({key:CANADA,label:$translate.instant(CANADA)}),result.push({key:USA,label:$translate.instant(USA)}),angular.forEach($filter("orderBy")(translated,"label"),function(sortedObject){sortedObject.key!==CANADA&&sortedObject.key!==USA&&result.push(sortedObject)}),result}}function findCountryObj(){return function(array,targetKey){for(var i=0;i<array.length;i++)if(array[i].key===targetKey)return array[i];return null}}function orderByTranslated($translate,$filter){return function(array){var result=[],translated=[];return angular.forEach(array,function(value){translated.push({key:value,label:$translate.instant(value)})}),angular.forEach($filter("orderBy")(translated,"label"),function(sortedObject){result.push(sortedObject.key)}),result}}function sequenceOrderBy($filter){return function(array){var result=[];return angular.forEach($filter("orderBy")(array,"sequence",!0),function(sortedObject){result.push(sortedObject)}),result}}function orderByTranslatedOtherFirst($translate,$filter,OTHER){return function(array){var result=[],translated=[];return angular.forEach(array,function(value){translated.push({key:value,label:$translate.instant(value)})}),result.push(OTHER),angular.forEach($filter("orderBy")(translated,"label"),function(sortedObject){sortedObject.key!==OTHER&&result.push(sortedObject.key)}),result}}function _orderByLocale(){return function(items,lang){return items.sort(function(a,b){return a[lang].localeCompare(b[lang],lang)}),items}}function _findById($filter){return function(array,searchJson){var initialResult=$filter("filter")(array,searchJson);if(!initialResult)return null;if(1===initialResult.length)return initialResult[0];for(var i=0;i<initialResult.length;i++)if(initialResult[i].id===searchJson.id)return initialResult[i];return null}}angular.module("filterLists").filter("orderByTranslatedCountry",orderByTranslatedCountry).filter("orderByTranslated",orderByTranslated).filter("orderByTranslatedOtherFirst",orderByTranslatedOtherFirst).filter("orderByCountryAndLabel",orderByTranslatedCountryAndLabel).filter("orderByLocale",_orderByLocale).filter("findCountryObject",findCountryObj).filter("findListItemById",_findById).filter("sequenceOrderDescending",sequenceOrderBy),orderByTranslatedCountry.$inject=["$translate","$filter","CANADA","USA"],orderByTranslated.$inject=["$translate","$filter"],orderByTranslatedOtherFirst.$inject=["$translate","$filter","OTHER"],_findById.$inject=["$filter"]}(),function(){"use strict";angular.module("dataLists",["hpfbConstants"])}(),function(){"use strict";function getService(UNKNOWN){function _createCountryArray(translateJson){vm.countryList=translateJson}function _getUnknownCountryRec(){return{id:UNKNOWN,en:"Unknown",fr:"Inconnu"}}function getCountryValuesArray(){return vm.countryList}function getProvinceValuesArray(){return["AB","BC","MB","NB","NL","NT","NS","NU","ON","PE","QC","SK","YT"]}function getUSStatesValueArray(){return["AL","AK","AZ","AR","CA","CO","CT","DE","DC","FL","GA","HI","ID","IL","IN","IA","KS","KY","LA","ME","MD","MA","MI","MN","MS","MO","MT","NE","NV","NH","NJ","NM","NY","NC","ND","OH","OK","OR","PA","RI","SC","SD","TN","TX","UT","VT","VA","WA","WV","WI","WY"]}var vm=this;vm.countryList=[];var service={getCountries:getCountryValuesArray,getProvinces:getProvinceValuesArray,getUSStates:getUSStatesValueArray,createCountryList:_createCountryArray,getUnknownCountryRecord:_getUnknownCountryRec};return service}angular.module("dataLists").factory("getCountryAndProvinces",getService),getService.inject=["UNKNOWN"]}(),function(){"use strict";function getSalService($filter,$q,$http,$translate,OTHER,FRENCH,RELATIVE_FOLDER_DATA){function getSalValuesArray(){return["SALUT_DR","SALUT_MR","SALUT_MRS","SALUT_MS"]}function getLanguagesValuesArray(){return["en","fr"]}function _createInternalContacts(){var deferred=$q.defer(),contactsUrl=RELATIVE_FOLDER_DATA+"internalContacts.json";return vm.internalContacts&&0!==vm.internalContacts.length?deferred.resolve(vm.internalContacts):$http.get(contactsUrl).success(function(data,status,headers,config){var newList=_createSortedArray(data,"en"),lang=$translate.proposedLanguage()||$translate.use(),otherRec={id:OTHER,en:"Other"};lang===FRENCH&&(otherRec.en="Autre"),newList.unshift(otherRec),vm.internalContacts=newList,deferred.resolve(newList)}).error(function(data,status,headers,config){deferred.reject(status)}),deferred.promise}function _getInternalContacts(){return _createInternalContacts()}function _createSortedArray(jsonList,lang){var result=[];return angular.forEach($filter("orderByLocale")(jsonList,lang),function(sortedObject){result.push(sortedObject)}),result}var vm=this;vm.internalContacts=[];var service={getSalutationList:getSalValuesArray,getLanguages:getLanguagesValuesArray,createInternalContacts:_createInternalContacts,getInternalContacts:_getInternalContacts};return service}angular.module("dataLists").factory("getContactLists",getSalService),getSalService.$inject=["$filter","$q","$http","$translate","OTHER","FRENCH","RELATIVE_FOLDER_DATA"]}(),function(){"use strict";function getRolesService(){function getRoleValuesArray(){return["","ROLE_PRIMARY","ROLE_SECONDARY"]}function _getFormTypes(){return[_biologic,_pharma]}function _getBiologic(){return _biologic}function _getPharmaceutical(){return _pharma}var _biologic="BIOLOGIC",_pharma="PHARMACEUTICAL",service={getContactRoles:getRoleValuesArray,getFormTypes:_getFormTypes,getBiologicType:_getBiologic,getPharmaType:_getPharmaceutical};return service}angular.module("dataLists").factory("getRoleLists",getRolesService)}(),function(){"use strict";angular.module("services",[])}(),function(){"use strict";function getTransactionSeq($http,$q){function yesNoArray(){return["Y","N"]}function _createRaArray(value){vm.raTypeArray=value}function getTransactionDescriptionsArray(){return["ADMINISTRATIVE","BENEFIT_RISK_ASSESS","CANCEL_LETTER","CHANGE_TO_DIN","COMMENTS_NOC","COMMENTS_SUMMARY_BASIS","DIN_DISCONTINUED","DRUG_NOTIF_FORM","FOR_PERIOD","INITIAL","MEETING_MINUTES","NOTIFICATION_CHANGE","PANDEMIC_APPL","POST_CLEARANCE_DATA","POST_MARKET_SURV","POST_NOC_CHANGE","POST_AUTH_DIV1_CHANGE","PRESUB_MEETING_PKG","PRIORITY_REVIEW_RQ","PRISTINE_PM","PRISTINE_PM_2LANG","ADVISEMENT_LETTER_RESPONSE","CLIN_CLARIF_RESPONSE","EMAIL_RQ_RESPONSE","LABEL_CLARIF_RESPONSE","MHPD_RQ_RESPONSE","NOC_RESPONSE","NOD_RESPONSE","NOL_RESPONSE","NON_RESPONSE","PROCESSING_CLARIF_RESPONSE","QUAL_CLIN_CLARIF_RESPONSE","QUAL_CLARIF_RESPONSE","SCREENING_ACCEPT_RESPONSE","SCREENING_CLARIF_RESPONSE","SDN_RESPONSE","PHONE_RQ_RESPONSE","RISK_COMMUN_DOC","RMP_VERSION_DATE","SIGNAL_WORK_UP","UNSOLICITED_DATA","YEAR_LIST_OF_CHANGE","BE_CLARIF_RESPONSE"]}function getActivityArray(){return vm.raTypeArray}function getPresubArray(){return["CANCEL_LETTER","MEETING_MINUTES","EMAIL_RQ_RESPONSE","PROCESSING_CLARIF_RESPONSE","PHONE_RQ_RESPONSE"]}function getANDSArray(){return["ADMINISTRATIVE","CANCEL_LETTER","DRUG_NOTIF_FORM","INITIAL","POST_CLEARANCE_DATA","PRISTINE_PM","PRISTINE_PM_2LANG","BE_CLARIF_RESPONSE","CLIN_CLARIF_RESPONSE","EMAIL_RQ_RESPONSE","LABEL_CLARIF_RESPONSE","NOC_RESPONSE","NOD_RESPONSE","NON_RESPONSE","PROCESSING_CLARIF_RESPONSE","QUAL_CLIN_CLARIF_RESPONSE","QUAL_CLARIF_RESPONSE","SCREENING_ACCEPT_RESPONSE","SCREENING_CLARIF_RESPONSE","SDN_RESPONSE","PHONE_RQ_RESPONSE"]}function getDINAArray(){return["ADMINISTRATIVE","CANCEL_LETTER","DRUG_NOTIF_FORM","INITIAL","POST_CLEARANCE_DATA","PRESUB_MEETING_PKG","PRISTINE_PM","PRISTINE_PM_2LANG","CLIN_CLARIF_RESPONSE","EMAIL_RQ_RESPONSE","LABEL_CLARIF_RESPONSE","PROCESSING_CLARIF_RESPONSE","QUAL_CLIN_CLARIF_RESPONSE","QUAL_CLARIF_RESPONSE","SCREENING_ACCEPT_RESPONSE","SCREENING_CLARIF_RESPONSE","PHONE_RQ_RESPONSE","UNSOLICITED_DATA"]}function getDINBArray(){return["ADMINISTRATIVE","CANCEL_LETTER","DRUG_NOTIF_FORM","INITIAL","POST_CLEARANCE_DATA","PRESUB_MEETING_PKG","PRISTINE_PM","PRISTINE_PM_2LANG","CLIN_CLARIF_RESPONSE","EMAIL_RQ_RESPONSE","LABEL_CLARIF_RESPONSE","PROCESSING_CLARIF_RESPONSE","QUAL_CLIN_CLARIF_RESPONSE","QUAL_CLARIF_RESPONSE","SCREENING_ACCEPT_RESPONSE","SCREENING_CLARIF_RESPONSE","PHONE_RQ_RESPONSE","UNSOLICITED_DATA"]}function getEUNDSArray(){return["ADMINISTRATIVE","CANCEL_LETTER","COMMENTS_SUMMARY_BASIS","DRUG_NOTIF_FORM","INITIAL","POST_CLEARANCE_DATA","PRISTINE_PM","PRISTINE_PM_2LANG","CLIN_CLARIF_RESPONSE","EMAIL_RQ_RESPONSE","LABEL_CLARIF_RESPONSE","NOC_RESPONSE","NOD_RESPONSE","NON_RESPONSE","PROCESSING_CLARIF_RESPONSE","QUAL_CLIN_CLARIF_RESPONSE","QUAL_CLARIF_RESPONSE","SCREENING_ACCEPT_RESPONSE","SCREENING_CLARIF_RESPONSE","SDN_RESPONSE","PHONE_RQ_RESPONSE","UNSOLICITED_DATA"]}function getEUSNDSArray(){return["ADMINISTRATIVE","CANCEL_LETTER","COMMENTS_SUMMARY_BASIS","DRUG_NOTIF_FORM","POST_CLEARANCE_DATA","POST_NOC_CHANGE","PRISTINE_PM","PRISTINE_PM_2LANG","CLIN_CLARIF_RESPONSE","EMAIL_RQ_RESPONSE","LABEL_CLARIF_RESPONSE","NOC_RESPONSE","NOD_RESPONSE","NON_RESPONSE","PROCESSING_CLARIF_RESPONSE","QUAL_CLIN_CLARIF_RESPONSE","QUAL_CLARIF_RESPONSE","SCREENING_ACCEPT_RESPONSE","SCREENING_CLARIF_RESPONSE","SDN_RESPONSE","PHONE_RQ_RESPONSE","UNSOLICITED_DATA"]}function getLevel3Array(){return["CANCEL_LETTER","EMAIL_RQ_RESPONSE","PROCESSING_CLARIF_RESPONSE","PHONE_RQ_RESPONSE","YEAR_LIST_OF_CHANGE"]}function getNCArray(){return["ADMINISTRATIVE","CANCEL_LETTER","COMMENTS_SUMMARY_BASIS","DRUG_NOTIF_FORM","POST_CLEARANCE_DATA","POST_NOC_CHANGE","PRESUB_MEETING_PKG","PRISTINE_PM","PRISTINE_PM_2LANG","CLIN_CLARIF_RESPONSE","EMAIL_RQ_RESPONSE","LABEL_CLARIF_RESPONSE","NOL_RESPONSE","PROCESSING_CLARIF_RESPONSE","QUAL_CLIN_CLARIF_RESPONSE","QUAL_CLARIF_RESPONSE","SCREENING_ACCEPT_RESPONSE","SCREENING_CLARIF_RESPONSE","SDN_RESPONSE","PHONE_RQ_RESPONSE","UNSOLICITED_DATA"];
}function getNDSArray(){return["CANCEL_LETTER","COMMENTS_NOC","COMMENTS_SUMMARY_BASIS","DRUG_NOTIF_FORM","INITIAL","POST_CLEARANCE_DATA","PRESUB_MEETING_PKG","PRIORITY_REVIEW_RQ","PRISTINE_PM","PRISTINE_PM_2LANG","BE_CLARIF_RESPONSE","CLIN_CLARIF_RESPONSE","EMAIL_RQ_RESPONSE","LABEL_CLARIF_RESPONSE","NOC_RESPONSE","NOD_RESPONSE","NON_RESPONSE","PROCESSING_CLARIF_RESPONSE","QUAL_CLIN_CLARIF_RESPONSE","QUAL_CLARIF_RESPONSE","SCREENING_ACCEPT_RESPONSE","SCREENING_CLARIF_RESPONSE","SDN_RESPONSE","PHONE_RQ_RESPONSE","UNSOLICITED_DATA"]}function getPDCArray(){return["CANCEL_LETTER","POST_AUTH_DIV1_CHANGE","EMAIL_RQ_RESPONSE","PROCESSING_CLARIF_RESPONSE","PHONE_RQ_RESPONSE"]}function getPDCBArray(){return["CANCEL_LETTER","POST_AUTH_DIV1_CHANGE","EMAIL_RQ_RESPONSE","PROCESSING_CLARIF_RESPONSE","PHONE_RQ_RESPONSE"]}function getPSURCArray(){return["CANCEL_LETTER","FOR_PERIOD","CLIN_CLARIF_RESPONSE","EMAIL_RQ_RESPONSE","PROCESSING_CLARIF_RESPONSE","PHONE_RQ_RESPONSE"]}function getPSURPVArray(){return["CANCEL_LETTER","FOR_PERIOD","EMAIL_RQ_RESPONSE","PROCESSING_CLARIF_RESPONSE","PHONE_RQ_RESPONSE"]}function getRMPPVArray(){return["CANCEL_LETTER","EMAIL_RQ_RESPONSE","PROCESSING_CLARIF_RESPONSE","PHONE_RQ_RESPONSE","RMP_VERSION_DATE"]}function getSANDSArray(){return["ADMINISTRATIVE","CANCEL_LETTER","DRUG_NOTIF_FORM","POST_CLEARANCE_DATA","POST_NOC_CHANGE","PRISTINE_PM","PRISTINE_PM_2LANG","BE_CLARIF_RESPONSE","CLIN_CLARIF_RESPONSE","EMAIL_RQ_RESPONSE","LABEL_CLARIF_RESPONSE","NOC_RESPONSE","NOD_RESPONSE","NON_RESPONSE","PROCESSING_CLARIF_RESPONSE","QUAL_CLIN_CLARIF_RESPONSE","QUAL_CLARIF_RESPONSE","SCREENING_ACCEPT_RESPONSE","SCREENING_CLARIF_RESPONSE","SDN_RESPONSE","PHONE_RQ_RESPONSE","UNSOLICITED_DATA"]}function getSNDSArray(){return["ADMINISTRATIVE","CANCEL_LETTER","COMMENTS_SUMMARY_BASIS","DRUG_NOTIF_FORM","POST_CLEARANCE_DATA","POST_NOC_CHANGE","PRESUB_MEETING_PKG","PRIORITY_REVIEW_RQ","PRISTINE_PM","PRISTINE_PM_2LANG","BE_CLARIF_RESPONSE","CLIN_CLARIF_RESPONSE","EMAIL_RQ_RESPONSE","LABEL_CLARIF_RESPONSE","NOC_RESPONSE","NOD_RESPONSE","NON_RESPONSE","PROCESSING_CLARIF_RESPONSE","QUAL_CLIN_CLARIF_RESPONSE","QUAL_CLARIF_RESPONSE","SCREENING_ACCEPT_RESPONSE","SCREENING_CLARIF_RESPONSE","SDN_RESPONSE","PHONE_RQ_RESPONSE","UNSOLICITED_DATA"]}function getSNDSCArray(){return["CANCEL_LETTER","POST_NOC_CHANGE","PRISTINE_PM","PRISTINE_PM_2LANG","CLIN_CLARIF_RESPONSE","EMAIL_RQ_RESPONSE","LABEL_CLARIF_RESPONSE","NOC_RESPONSE","NOD_RESPONSE","NON_RESPONSE","PROCESSING_CLARIF_RESPONSE","PHONE_RQ_RESPONSE","RISK_COMMUN_DOC","SIGNAL_WORK_UP"]}function getUDPVArray(){return["BENEFIT_RISK_ASSESS","CANCEL_LETTER","NOTIFICATION_CHANGE","POST_MARKET_SURV","EMAIL_RQ_RESPONSE","MHPD_RQ_RESPONSE","PROCESSING_CLARIF_RESPONSE","PHONE_RQ_RESPONSE","RISK_COMMUN_DOC","SIGNAL_WORK_UP"]}function getUDRAVArray(){return["CANCEL_LETTER","DIN_DISCONTINUED","ADVISEMENT_LETTER_RESPONSE","EMAIL_RQ_RESPONSE","PROCESSING_CLARIF_RESPONSE","PHONE_RQ_RESPONSE","UNSOLICITED_DATA"]}function getConsultArray(){return["PANDEMIC_APPL"]}function _getMPNCArray(){return["CANCEL_LETTER","MEETING_MINUTES","EMAIL_RQ_RESPONSE","PROCESSING_CLARIF_RESPONSE","PHONE_RQ_RESPONSE","PRESUB_MEETING_PKG","PRESUB_MEETING_RQ"]}function _getMPNDSArray(){return["CANCEL_LETTER","MEETING_MINUTES","EMAIL_RQ_RESPONSE","PROCESSING_CLARIF_RESPONSE","PHONE_RQ_RESPONSE","PRESUB_MEETING_PKG","PRESUB_MEETING_RQ"]}function _getMPSNDSArray(){return["CANCEL_LETTER","MEETING_MINUTES","EMAIL_RQ_RESPONSE","PROCESSING_CLARIF_RESPONSE","PHONE_RQ_RESPONSE","PRESUB_MEETING_PKG","PRESUB_MEETING_RQ"]}function _getPANDArray(){return["CANCEL_LETTER","EMAIL_RQ_RESPONSE","PROCESSING_CLARIF_RESPONSE","PHONE_RQ_RESPONSE"]}function _getPBRERCArray(){return["CANCEL_LETTER","EMAIL_RQ_RESPONSE","PROCESSING_CLARIF_RESPONSE","PHONE_RQ_RESPONSE"]}function _getPBRERPVArray(){return["CANCEL_LETTER","EMAIL_RQ_RESPONSE","PROCESSING_CLARIF_RESPONSE","PHONE_RQ_RESPONSE"]}function _getPRNDSArray(){return["CANCEL_LETTER","EMAIL_RQ_RESPONSE","PROCESSING_CLARIF_RESPONSE","PHONE_RQ_RESPONSE"]}function _getPRSNDSArray(){return["CANCEL_LETTER","EMAIL_RQ_RESPONSE","PROCESSING_CLARIF_RESPONSE","PHONE_RQ_RESPONSE"]}function getYBPRArray(){return["CANCEL_LETTER","FOR_PERIOD","EMAIL_RQ_RESPONSE","PROCESSING_CLARIF_RESPONSE","PHONE_RQ_RESPONSE"]}var vm=this;vm.raTypeArray=[];var service={getTransactionDescriptions:getTransactionDescriptionsArray,getActivityTypes:getActivityArray,createRaTypes:_createRaArray,getPresubTypes:getPresubArray,getAndsType:getANDSArray,getDinaType:getDINAArray,getDinbType:getDINBArray,getEundsType:getEUNDSArray,getEusndsType:getEUSNDSArray,getLevel3Type:getLevel3Array,getNcType:getNCArray,getNdsType:getNDSArray,getPdcType:getPDCArray,getPdcBType:getPDCBArray,getPresubType:getPresubArray,getpSurCType:getPSURCArray,getpSurPvType:getPSURPVArray,getRmpPvType:getRMPPVArray,getSandsType:getSANDSArray,getSndsType:getSNDSArray,getSndsCArray:getSNDSCArray,getUdpvType:getUDPVArray,getUdraType:getUDRAVArray,getYbprType:getYBPRArray,getConsultType:getConsultArray,getMPNCType:_getMPNCArray,getMPNDSType:_getMPNDSArray,getMPSNDSType:_getMPSNDSArray,getPANDType:_getPANDArray,getPBRERCType:_getPBRERCArray,getPBRERPVType:_getPBRERPVArray,getPRNDSType:_getPRNDSArray,getPRSNDSType:_getPRSNDSArray,getYesNoList:yesNoArray};return service}angular.module("services").factory("TransactionLists",getTransactionSeq),getTransactionSeq.inject=["$http","$q"]}(),function(){"use strict";angular.module("hpfbConstants",[]),angular.module("hpfbConstants").constant("CANADA","CAN").constant("OTHER","OTHER").constant("YES","Y").constant("NO","N").constant("USA","USA").constant("UNKNOWN","UNKNOWN").constant("ENGLISH","en").constant("FRENCH","fr").constant("NEW_TYPE","NEW").constant("APPROVED_TYPE","APPROVED").constant("AMEND_TYPE","AMEND").constant("INTERNAL_TYPE","INT").constant("EXTERNAL_TYPE","EXT").constant("PHARMA_TYPE","PHARMA").constant("RELATIVE_FOLDER_DATA","../data/")}(),function(){"use strict";angular.module("alertModule",[])}(),function(){"use strict";function alertController(){var vm=this;vm.alertVisible=!1,vm.closeMsgAlias="CLOSE_ALERT",vm.$onInit=function(){vm.alertVisible=!1},vm.$onChanges=function(changes){changes.msg&&(vm.closeMsgAlias=changes.msg.currentValue),changes.uiState&&(vm.alertVisible=changes.uiState.currentValue)},vm.open=function(){vm.updateState()},vm.close=function(){vm.updateState()},vm.isAlertVisible=function(){return vm.alertVisible}}angular.module("alertModule").component("cmpAlert",{templateUrl:"app/scripts/components/alertComponent/tpl-alert_20170608_1410.html",transclude:!0,bindings:{uiState:"<",msg:"@",updateState:"&",type:"@"},controller:alertController,controllerAs:"alertCtrl"}),alertController.$inject=[]}(),function(){"use strict";angular.module("cspContactList",["cspApplicant"])}(),function(){"use strict";function cspApplicantListController(){var vm=this;vm.model="",vm.$onInit=function(){},vm.$onChanges=function(changes){changes.record&&(vm.model=changes.record.currentValue)}}angular.module("cspContactList").component("cmpCspApplicantList",{templateUrl:"app/scripts/components/cspContactList/tpl-csp-applicant-list_20170608_1410.html",controller:cspApplicantListController,controllerAs:"cspApplListCtrl",bindings:{record:"<",showErrors:"&",addApplicant:"&",deleteApplicant:"&",updateErrorSummary:"&"}}),cspApplicantListController.$inject=[]}(),function(){"use strict";angular.module("errorMessageModule",[])}(),function(){"use strict";function errorMessageController(){var vm=this;vm.field_name="",vm.form_ref=null,vm.fieldRecords=[],vm.$onChanges=function(changes){changes.fieldName&&(vm.field_name=changes.fieldName.currentValue),changes.formRef&&(vm.form_ref=changes.formRef.currentValue),changes.errorTypes&&(vm.fieldRecords=changes.errorTypes.currentValue)},vm.showErrorMessage=function(){return!!vm.form_ref&&(angular.isUndefined(vm.fieldName)?(console.warn("No field name for: "+vm.form_ref.$name),!1):angular.isUndefined(vm.form_ref[vm.fieldName])?(console.warn("lookup undefined "+vm.form_ref.$name+"."+vm.fieldName),!1):vm.showError()&&vm.form_ref[vm.fieldName].$invalid||vm.form_ref[vm.fieldName].$touched&&vm.form_ref[vm.fieldName].$invalid)}}angular.module("errorMessageModule").component("cmpErrorMessage",{templateUrl:"app/scripts/components/error-message/tpl-error-message_20170608_1410.html",controller:errorMessageController,controllerAs:"errMessageCtrl",bindings:{fieldName:"<",formRef:"<",showError:"&",errorTypes:"<"}})}(),function(){"use strict";angular.module("errorSummaryModule",["focus-if"])}(),function(){"use strict";function errorSummaryController($scope,$filter){function _isErrorSummaryVisible(){return vm.isVisible&&vm.errorArray&&vm.errorArray.length>0}function _getErr(errorObj,resultsList,parent){for(var keys=Object.keys(errorObj),i=0;i<keys.length;i++)for(var record=errorObj[keys[i]],j=0;j<record.length;j++)if(record[j].$invalid===!0&&record[j].$name.indexOf(".")>0)if(vm.exclusions&&vm.exclusions.hasOwnProperty(record[j].$name)){var result={};result[record[j].$name]={name:record[j].$name,type:keys[i],translateKey:record[j].$name.toUpperCase(),parent:parent,concat:parent+"."+record[j].$name,isSummary:!0},angular.merge(resultsList,result)}else _getErr(record[j].$error,resultsList,record[j].$name);else if(record[j].$invalid===!0&&!resultsList.hasOwnProperty(record[j].$name)){var result=_processRecord(record[j].$name,keys[i],parent);angular.merge(resultsList,result)}}function _scrubFieldName(rawName){var separator="_",index=rawName.lastIndexOf(separator),cleanedName="";return cleanedName=index>-1?rawName.substring(0,index):rawName}function _getElementScope(rawName){var separator="_",nameSplit=rawName.split(separator),scopeId=parseInt(nameSplit[nameSplit.length-1]);return angular.isNumber(scopeId)||(scopeId=""),scopeId}function _processRecord(error_Name,errorType,parent){var result={},scrubName=_scrubFieldName(error_Name),scopeId=_getElementScope(error_Name),errorKey="TYPE_"+errorType.toUpperCase(),destId=error_Name;if(vm.alias&&vm.alias.hasOwnProperty(scrubName)){var aliasRec=vm.alias[scrubName];switch(aliasRec.type.toLowerCase()){case"fieldset":var searchId=aliasRec.parent+"_"+scopeId,destObj=$("#"+searchId).find("input:visible:first");destObj.length>0&&(destId=destObj[0].id);break;case"element":destId=aliasRec.target+"_"+scopeId;break;case"pattern":"pattern"===errorType&&(errorKey=aliasRec.errorType);break;case"select2":var searchId=aliasRec.name+"_match"+scopeId,destObj=$("#"+searchId);destObj.length>0&&(destId=searchId);break;case"min":"min"===errorType&&(errorKey=aliasRec.errorType);break;case"max":"max"===errorType&&(errorKey=aliasRec.errorType);break;case"minlength":"minlength"===errorType&&(errorKey=aliasRec.errorType);break;case"maxlength":"maxlength"===errorType&&(errorKey=aliasRec.errorType);break;default:console.warn("No type found "+aliasRec.type)}}return result[error_Name]={name:destId,translateKey:scrubName.toUpperCase(),type:errorKey,parent:parent,concat:parent+"."+error_Name,isSummary:!1},result}function _sortErrorsByDomOrder(){var domFieldList={},newErrors=[];$.each($("input, select ,textarea","#"+vm.startFormId),function(k){var temp_attr=$(this).attr("id");temp_attr&&(domFieldList[temp_attr]=k)});for(var keyList=Object.keys(domFieldList),p=0;p<keyList.length;p++)vm.uniqueErrorList[keyList[p]]||delete domFieldList[keyList[p]];for(var temp=Object.keys(domFieldList).map(function(k){return k}),sortedDomJsonList={},v=0;v<temp.length;v++)sortedDomJsonList[temp[v]]=v;newErrors=Object.keys(vm.uniqueErrorList).map(function(k){return vm.uniqueErrorList[k]});var notDefined={};if(newErrors.length>0)for(var i=0;i<newErrors.length;){var currRec=newErrors[i],targetName=currRec.name,destIndex=sortedDomJsonList[targetName];if(angular.isDefined(destIndex)&&destIndex!==i){var tempRec=angular.copy(newErrors[destIndex]);newErrors[destIndex]=angular.copy(currRec),newErrors[i]=angular.copy(tempRec)}else angular.isDefined(destIndex)||(notDefined[currRec.name]={rec:currRec,pos:i}),i++}return _sortUnknowns(notDefined,newErrors),newErrors}function _sortUnknowns(unknownJson,sortList){for(var unknownArray=Object.keys(unknownJson).map(function(k){return unknownJson[k]}),i=0;i<unknownArray.length;i++){var unknownRec=unknownArray[i],unknownName=unknownRec.rec.name,scopeIndex=_getElementScope(unknownName);if(angular.isNumber(scopeIndex))for(var g=sortList.length-1;g>=0;g--){var sortRec=sortList[g],sortScope=_getElementScope(sortRec.name);if(angular.isNumber(sortScope)&&sortScope===scopeIndex&&unknownName!==sortRec.name){sortList.move(unknownRec.pos,g+1);break}}}}var vm=this;vm.parentRef=null,vm.errorArray=[],vm.uniqueErrorList={},vm.isVisible=!1,vm.nameAddendum="",vm.rootError="",vm.isFocusInput=0,vm.exclusions={},vm.alias={},vm.headingPreamble="",vm.headerLevel="",vm.startFormId="",vm.$onInit=function(){},vm.$onChanges=function(changes){changes.setHeadingLevel&&angular.isDefined(changes.setHeadingLevel.currentValue)&&(vm.headerLevel=changes.setHeadingLevel.currentValue.toLowerCase()),changes.nameSuffix&&(vm.nameAddendum="-"+changes.nameSuffix.currentValue),changes.formPreamble&&(vm.headingPreamble=changes.formPreamble.currentValue),changes.exclusionList&&(vm.exclusions=changes.exclusionList.currentValue),changes.aliasList&&(vm.alias=changes.aliasList.currentValue),changes.formRef&&vm.getErrorsSumm(changes.formRef.currentValue.$error,changes.formRef.currentValue.$name),changes.showErrors&&(vm.isVisible=changes.showErrors.currentValue),changes.updateErrors&&vm.formRef&&vm.isVisible&&vm.getErrorsSumm(vm.formRef.$error,vm.formRef.$name),changes.makeFocused&&changes.makeFocused.currentValue&&(vm.isFocusInput=vm.isFocusInput+1),changes.formId&&(vm.startFormId=changes.formId.currentValue)},vm.calcIsVisible=function(){var summaryIsVisible=_isErrorSummaryVisible();return summaryIsVisible||$scope.$emit("childErrorSummaryHide",+vm.nameAddendum),summaryIsVisible},$scope.$on("childErrorSummaryHide",function(event,data){if(_isErrorSummaryVisible())for(var errorSummaryBroadcastName=data.message,i=0;i<vm.errorArray.length;i++){var errorRecord=errorArray[i];errorRecord.isSummary&&errorRecord.name===errorSummaryBroadcastName&&vm.errorArray.splice(i,1)}}),vm.getErrorsSumm=function(myformErrors,name){vm.errorArray=[],vm.uniqueErrorList={},_getErr(myformErrors,vm.uniqueErrorList,name);var newErrors=_sortErrorsByDomOrder();angular.equals(vm.errorArray,newErrors)||(vm.errorArray=newErrors)},Array.prototype.move=function(from,to){to<0&&(to=0),to>=this.length&&(to=this.length-1),this.splice(to,0,this.splice(from,1)[0])}}angular.module("errorSummaryModule").component("cmpErrorSummary",{templateUrl:"app/scripts/components/error-summary/tpl-error-summary_20170608_1410.html",controller:errorSummaryController,controllerAs:"errSummaryCtrl",bindings:{formRef:"<",showErrors:"<",updateErrors:"<",nameSuffix:"@",formPreamble:"@",makeFocused:"<",setHeadingLevel:"@",exclusionList:"<",formId:"@",aliasList:"<"}}),errorSummaryController.$inject=["$scope","$filter"]}(),function(){"use strict";angular.module("cspCertification",["errorMessageModule","hpfbConstants"])}(),function(){"use strict";function cspCertificationController($scope,FRENCH){function _setIDNames(){var scopeId="_"+$scope.$id;vm.firstNameId="certFirstName"+scopeId,vm.lastNameId="certLastName"+scopeId,vm.salutationId="certSalut"+scopeId,vm.jobTitleId="certJobTitle"+scopeId,vm.dateSignedId="certDateSigned"+scopeId}var vm=this;vm.model={givenName:"",initials:"",surname:"",title:"",dateSigned:""},vm.requiredOnly=[{type:"required",displayAlias:"MSG_ERR_MAND"}],vm.dateError=[{type:"required",displayAlias:"MSG_ERR_MAND"},{type:"date",displayAlias:"MSG_ERR_DATE_FORMAT"}],vm.$onInit=function(){_setIDNames()},vm.$onChanges=function(changes){changes.record&&(vm.model=changes.record.currentValue),changes.language&&(vm.lang=changes.language.currentValue)},vm.isFrench=function(){return vm.lang===FRENCH},$scope.$watch("cspCertCtrl.certForm.$error",function(){vm.updateErrorSummary()},!0)}angular.module("cspCertification").component("cmpCspCertification",{templateUrl:"app/scripts/components/cspCertification/tpl-csp-certification_20170608_1410.html",controller:cspCertificationController,controllerAs:"cspCertCtrl",bindings:{record:"<",showErrors:"&",updateErrorSummary:"&",language:"<"}}),cspCertificationController.$inject=["$scope","FRENCH"]}(),function(){"use strict";angular.module("cspFeePayment",["hpfbConstants","errorMessageModule"])}(),function(){"use strict";function feePaymentController(FRENCH,$scope,$translate){function _setIdNames(){var scopeId="_"+$scope.$id;vm.feeId="fee"+scopeId,vm.feeTypeId="feeType"+scopeId,vm.ackFeeSubmitId="ack_fee_submit"+scopeId}var vm=this;vm.model=null,vm.lang="en",vm.paymentList=[],vm.url="",vm.preamble="",vm.urlTitle="",vm.requiredOnly=[{type:"required",displayAlias:"MSG_ERR_MAND"}],vm.numberMaxError=[{type:"required",displayAlias:"MSG_ERR_MAND"},{type:"min",displayAlias:"TYPE_ZERO_MIN"},{type:"max",displayAlias:"MSG_ERR_MAX"},{type:"number",displayAlias:"TYPE_NUMBER"}],vm.$onInit=function(){_setIdNames(),$translate("FEE_PREAMBLE").then(function(data){vm.preamble=data}),$translate("FEE_URL").then(function(data){vm.url=data}),$translate("FEE_URLTITLE").then(function(data){vm.urlTitle=data})},vm.$onChanges=function(changes){changes.record&&(vm.model=changes.record.currentValue),changes.paymentTypes&&(vm.paymentList=changes.paymentTypes.currentValue)},$scope.$watch("cspFeePayCtrl.paymentForm.$error",function(){vm.updateErrorSummary()},!0)}angular.module("cspFeePayment").component("cmpCspFeePayment",{templateUrl:"app/scripts/components/cspFeePayment/tpl-csp-fee-payment_20170608_1410.html",controller:feePaymentController,controllerAs:"cspFeePayCtrl",bindings:{record:"<",paymentTypes:"<",showErrors:"&",updateErrorSummary:"&"}}),feePaymentController.$inject=["FRENCH","$scope","$translate"]}(),function(){"use strict";angular.module("cspTimelySubmission",["cspConstants","hpfbConstants","cspDataModule"])}(),function(){"use strict";function timelySubmissionController(FRENCH,EUOTHER,NO_APPLICATION,APPLICATION,$scope,$translate,cspDataLists){function _setIdNames(){var scopeId="_"+$scope.$id;vm.timelyId="statements_timely"+scopeId,vm.dateId="timelyDate"+scopeId,vm.countryId="timelyCountry"+scopeId,vm.otherCountryId="other_eu_country"+scopeId}var vm=this;vm.model={},vm.countries=[],vm.noAppValue=NO_APPLICATION,vm.appValue=APPLICATION,vm.dateError=[{type:"required",displayAlias:"MSG_ERR_MAND"},{type:"date",displayAlias:"MSG_ERR_DATE_FORMAT"}],vm.requiredOnly=[{type:"required",displayAlias:"MSG_ERR_MAND"}],vm.lang=$translate.proposedLanguage()||$translate.use(),vm.alerts=[!1],vm.$onInit=function(){_setIdNames(),vm.lang=$translate.proposedLanguage()||$translate.use(),vm.countries=cspDataLists.getMarketingCountries(),$translate("NOAPPLICATION").then(function(data){vm.noApplication=data}),$translate("APPLICATION").then(function(data){vm.application=data}),vm.alerts=[!1]},vm.$onChanges=function(changes){changes.record&&(vm.model=changes.record.currentValue)},vm.isApplicationMarketing=function(){return!!vm.model&&(vm.model.submissionStatement===APPLICATION?((!vm.countries||!vm.countries.length>0)&&(console.warn("Needed to redefine marketing countries"),vm.countries=cspDataLists.getMarketingCountries()),!0):(vm.model.approvalDate="",vm.model.country="",vm.alerts[0]=!1,!1))},vm.isFrench=function(){return vm.lang===FRENCH},$scope.$watch("timelySubCtrl.timelySubForm.$error",function(){vm.updateErrorSummary()},!0),vm.addInstruct=function(value){angular.isUndefined(value)||value<vm.alerts.length&&(vm.alerts[value]=!0)},vm.closeAlert=function(value){angular.isUndefined(value)||value<vm.alerts.length&&(vm.alerts[value]=!1)},vm.isFrench=function(){return vm.lang===FRENCH}}angular.module("cspTimelySubmission").component("cmpCspTimelySubmission",{templateUrl:"app/scripts/components/cspTimelySubmission/tpl-csp-timely-submission_20170608_1410.html",controller:timelySubmissionController,controllerAs:"timelySubCtrl",bindings:{record:"<",countryList:"<",showErrors:"&",updateErrorSummary:"&"}}),timelySubmissionController.$inject=["FRENCH","EUOTHER","NO_APPLICATION","APPLICATION","$scope","$translate","cspDataLists"]}(),function(){"use strict";angular.module("cspPatent",["numberFormat","errorMessageModule","hpfbConstants"])}(),function(){"use strict";function cspPatentController($scope,FRENCH){function _setIDNames(){var scopeId="_"+$scope.$id;vm.patentNumId="patentNum"+scopeId,vm.dateFiledId="dateFiled"+scopeId,vm.dateGrantedId="dateGranted"+scopeId,vm.dateExpiryId="dateExpiry"+scopeId}var vm=this;vm.model="",vm.min7Error=[{type:"required",displayAlias:"MSG_ERR_MAND"},{type:"minlength",displayAlias:"MSG_LENGTH_7NUM"}],vm.dateError=[{type:"required",displayAlias:"MSG_ERR_MAND"},{type:"date",displayAlias:"MSG_ERR_DATE_FORMAT"}],vm.$onInit=function(){_setIDNames()},vm.$onChanges=function(changes){changes.record&&(vm.model=changes.record.currentValue),changes.language&&(vm.lang=changes.language.currentValue)},$scope.$watch("cspPatentCtrl.patentForm.$error",function(){vm.updateErrorSummary()},!0),vm.isFrench=function(){return vm.lang===FRENCH}}angular.module("cspPatent").component("cmpCspPatent",{templateUrl:"app/scripts/components/cspPatent/tpl-csp-patent_20170608_1410.html",controller:cspPatentController,controllerAs:"cspPatentCtrl",bindings:{record:"<",showErrors:"&",updateErrorSummary:"&",language:"<"}}),cspPatentController.$inject=["$scope","FRENCH"]}(),function(){"use strict";angular.module("cspMainApplication",["cspConstants","errorMessageModule","numberFormat","alertModule"])}(),function(){"use strict";function mainApplicationController(NOC,GRANT,OWNER,OWNER_BEHALF,FRENCH,$scope,$translate){function _setIDNames(){var scopeId="_"+$scope.$id;vm.controlNumberId="controlNumber"+scopeId,vm.drugUseId="drugUse"+scopeId,vm.applApplyId="time120"+scopeId,vm.applStateId="applicantApply"+scopeId,vm.medIngedId="medicinalIngredient"+scopeId}var vm=this;vm.model="",vm.nocValue=NOC,vm.grantValue=GRANT,vm.ownerValue=OWNER,vm.ownerBehalfValue=OWNER_BEHALF,vm.drugUseList=[],vm.ngModelOptSetting={updateOn:"blur"},vm.requiredOnlyError=[{type:"required",displayAlias:"MSG_ERR_MAND"}],vm.numberError=[{type:"required",displayAlias:"MSG_ERR_MAND"},{type:"minlength",displayAlias:"MSG_LENGTH_6NUM"}],vm.alerts=[!1,!1,!1,!1],vm.lang=$translate.proposedLanguage()||$translate.use(),vm.$onInit=function(){_setIDNames(),vm.alerts=[!1,!1,!1,!1]},vm.$onChanges=function(changes){changes.record&&(vm.model=changes.record.currentValue),changes.drugUses&&(vm.drugUseList=changes.drugUses.currentValue)},$scope.$watch("cspMainApplCtrl.mainApplForm.$error",function(){vm.updateErrorSummary()},!0),vm.addInstruct=function(value){angular.isUndefined(value)||value<vm.alerts.length&&(vm.alerts[value]=!0)},vm.closeAlert=function(value){angular.isUndefined(value)||value<vm.alerts.length&&(vm.alerts[value]=!1)},vm.toggleAlert=function(value){angular.isUndefined(value)||value<vm.alerts.length&&(vm.alerts[value]=!vm.alerts[value])},vm.isFrench=function(){return vm.lang===FRENCH}}angular.module("cspMainApplication").component("cmpCspMainApplication",{templateUrl:"app/scripts/components/cspMainAppl/tpl-csp-main-application_20170608_1410.html",controller:mainApplicationController,controllerAs:"cspMainApplCtrl",bindings:{record:"<",drugUses:"<",showErrors:"&",updateErrorSummary:"&"}}),mainApplicationController.$inject=["NOC","GRANT","OWNER","OWNER_BEHALF","FRENCH","$scope","$translate"]}(),function(){"use strict";angular.module("cspHCOnly",["errorMessageModule","hpfbConstants"])}(),function(){"use strict";function hcOnlyController($scope,$translate,FRENCH){function _setIDNames(){var scopeId="_"+$scope.$id;vm.dateReceivedId="date_appl_rec"+scopeId,vm.companyCodeId="csp_company_code"+scopeId,vm.applicationCodeId="csp_application_code"+scopeId,vm.notesId="notes"+scopeId}var vm=this;vm.model={},vm.requiredOnlyError=[{type:"required",displayAlias:"MSG_ERR_MAND"}],vm.lang=$translate.proposedLanguage()||$translate.use(),vm.$onInit=function(){_setIDNames()},vm.$onChanges=function(changes){changes.record&&(vm.model=changes.record.currentValue)},vm.isFrench=function(){return vm.lang===FRENCH},$scope.$watch("hcOnlyCtrl.hcOnlyForm.$error",function(){vm.updateErrorSummary()},!0)}angular.module("cspHCOnly").component("cmpCspHcOnly",{templateUrl:"app/scripts/components/cspHealthCanadaOnly/tpl-csp-hc-only_20170608_1410.html",controller:hcOnlyController,controllerAs:"hcOnlyCtrl",bindings:{record:"<",showErrors:"&",updateErrorSummary:"&"}}),hcOnlyController.$inject=["$scope","$translate","FRENCH"]}(),function(){"use strict";angular.module("addressModule",["hpfbConstants","dataLists","filterLists","ui.select","errorMessageModule"])}(),function(){"use strict";function addressCtrl(getCountryAndProvinces,$translate,CANADA,USA,$scope){function _setIdNames(){var scopeId=vm.fldId+"_"+$scope.$id;vm.streetId="street"+scopeId,vm.cityId="city"+scopeId,vm.countryId="country"+scopeId,vm.stateTextId="proveState"+scopeId,vm.stateListId="provinceList"+scopeId,vm.postalId="postal"+scopeId}var vm=this;vm.isEditable=!0,vm.ngModelOptSetting={updateOn:"blur"},vm.lang=$translate.proposedLanguage()||$translate.use(),vm.addressModel={addressID:"",isDetailValid:!1,street:"",city:"",country:"",countryDisplay:"",stateLov:"",stateText:"",postalCode:""},vm.countryIsEditable=!0,vm.canadianPostalCodePattern="^(?!.*[DFIOQU])[A-VXYa-vxy][0-9][A-Za-z] ?[0-9][A-Za-z][0-9]$",vm.usaZipCode="^[0-9]{5}(?:-[0-9]{4})?$",vm.hideProvinceText=!1,vm.countryList=getCountryAndProvinces.getCountries(),vm.fdId="",vm.requiredOnly=[{type:"required",displayAlias:"MSG_ERR_MAND"}],vm.postalErrorList=[{type:"required",displayAlias:"MSG_ERR_MAND"},{type:"pattern",displayAlias:"MSG_ERR_POSTAL"}],vm.$onInit=function(){vm.addressRecord&&(vm.addressModel=vm.addressRecord,vm.provListLabel=getProvinceListLabel(),vm.postalLabel=getPostalLabel(),vm.isPostalRequired=isPostalRequiredFn(),vm.provinces=getProvinceStateList(),vm.hideProvinceText=getProvinceTextState(),vm.postalPattern=getPostalPattern(),vm.hideProvinceDdl=!vm.hideProvinceText),_setIdNames()},vm.$onChanges=function(changes){changes.addressRecord&&(vm.addressModel=changes.addressRecord.currentValue,vm.countryChanged()),changes.isAmend&&(vm.isEditable=changes.isAmend.currentValue),changes.fieldSuffix&&(vm.fldId=changes.fieldSuffix.currentValue,vm.fldId||(vm.fldId="")),changes.countryEditable&&(vm.countryIsEditable=changes.countryEditable.currentValue,angular.isUndefined(vm.countryIsEditable)&&(vm.countryIsEditable=!0))},vm.countryChanged=function(){vm.addressModel.countryDisplay=vm.addressModel.country.id,vm.provListLabel=getProvinceListLabel(),vm.postalLabel=getPostalLabel(),vm.isPostalRequired=isPostalRequiredFn(),vm.provinces=getProvinceStateList(),vm.hideProvinceText=getProvinceTextState(),vm.postalPattern=getPostalPattern(),vm.hideProvinceDdl=!vm.hideProvinceText,vm.isCountryCanada(),vm.updateErrorSummary()},vm.isCountryCanada=function(){return vm.addressModel&&vm.addressModel.country?vm.addressModel.country.id===CANADA?(vm.postalErrorList=[{type:"required",displayAlias:"MSG_ERR_MAND"},{type:"pattern",displayAlias:"MSG_ERR_POSTAL"}],!0):(vm.postalErrorList=[{type:"required",displayAlias:"MSG_ERR_MAND"},{type:"pattern",displayAlias:"MSG_ERR_ZIP"}],!1):(vm.postalErrorList=[{type:"required",displayAlias:"MSG_ERR_MAND"},{type:"pattern",displayAlias:"MSG_ERR_POSTAL"}],!1)},vm.showError=function(ctrl){return!!ctrl&&!!(ctrl.$invalid&&ctrl.$touched||vm.showErrors()&&ctrl.$invalid)},vm.onDeleteButtonClick=function(){vm.onDelete({addressId:vm.addressModel.addressID})},vm.onDiscardButtonClick=function(){vm.addressModel=angular.extend({},vm.addressRecord),vm.addressForm.$setPristine()},vm.isCountryEditable=function(){return vm.isEditable&&vm.countryIsEditable},vm.postalCodeChanged=function(){var postal=vm.addressModel.postalCode;postal&&(postal=postal.toUpperCase(),6==postal.length&&vm.addressModel.country.id===CANADA&&(postal=postal.substring(0,3)+" "+postal.substring(3,postal.length)),vm.addressModel.postalCode=postal,vm.updateErrorSummary())};var getProvinceTextState=function(){var isCanOrUsa=isPostalRequiredFn();return isCanOrUsa?vm.addressModel.stateText="":vm.addressModel.stateList="",isCanOrUsa},isPostalRequiredFn=function(){return vm.addressModel.country.id===CANADA||vm.addressModel.country.id===USA},getProvinceStateList=function(){return vm.addressModel.country.id===CANADA?getCountryAndProvinces.getProvinces():vm.addressModel.country.id===USA?getCountryAndProvinces.getUSStates():void 0},getProvinceListLabel=function(){var label=vm.addressModel.country.id===USA?"STATE":"PROVINCE";return label},getPostalLabel=function(){var label=vm.addressModel.country.id===USA?"ZIP":"POSTAL";return label},getPostalPattern=function(){var postalPtrn=null;return vm.addressModel.country.id===USA?postalPtrn=/^[0-9]{5}(?:-[0-9]{4})?$/:vm.addressModel.country.id===CANADA&&(postalPtrn=/^(?!.*[DFIOQU])[A-VXYa-vxy][0-9][A-Za-z] ?[0-9][A-Za-z][0-9]$/),postalPtrn};$scope.$watch("adr.addressForm.$error",function(){vm.updateErrorSummary()},!0)}angular.module("addressModule").config(function(uiSelectConfig){uiSelectConfig.theme="select2"}).component("cmpAddressDetails",{templateUrl:"app/scripts/components/addressDetails/tpl-address-details_20170608_1410.html",controller:addressCtrl,controllerAs:"adr",bindings:{addressRecord:"<",onUpdate:"&",showErrors:"&",isAmend:"<",updateErrorSummary:"&",fieldSuffix:"<",countryEditable:"<"}}),addressCtrl.$inject=["getCountryAndProvinces","$translate","CANADA","USA","$scope"]}(),function(){"use strict";angular.module("contactModule",["dataLists","hpfbConstants","errorMessageModule"])}(),function(){"use strict";function contactCtrl(getContactLists,ENGLISH,FRENCH,$scope){function _setIdNames(){var scopeId=vm.fldId+"_"+$scope.$id;vm.salutationId="salutation"+scopeId,vm.firstNameId="firstName"+scopeId,vm.lastNameId="lastName"+scopeId,vm.langCorrespondId="langCorrespond"+scopeId,vm.jobTitleId="jobTitle"+scopeId,vm.faxId="faxNumber"+scopeId,vm.phoneNumberId="phoneNumber"+scopeId,vm.phoneExtId="phoneExt"+scopeId,vm.contactEmailId="contactEmail"+scopeId}var vm=this;vm.isEditable=!0,vm.ngModelOptSetting={updateOn:"blur"},vm.salutationList=getContactLists.getSalutationList(),vm.langCorresppond=[ENGLISH,FRENCH],vm.faxRequired=!1,vm.phoneReg=/\(?([0-9]{3})\)?([ .-]?)([0-9]{3})\2([0-9]{4})/,vm.contactModel={salutation:"",givenName:"",surname:"",initials:"",title:"",phone:"",phoneExt:"",fax:""},vm.inputModelOptions={updateOn:"blur"},vm.fldId="",vm.requiredOnly=[{type:"required",displayAlias:"MSG_ERR_MAND"}],vm.emailError=[{type:"required",displayAlias:"MSG_ERR_MAND"},{type:"email",displayAlias:"MSG_ERR_EMAIL_FORMAT"}],vm.phoneError=[{type:"required",displayAlias:"MSG_ERR_MAND"},{type:"pattern",displayAlias:"MSG_ERR_PHONE_FORMAT"}],vm.faxError=[{type:"required",displayAlias:"MSG_ERR_MAND"},{type:"pattern",displayAlias:"MSG_ERR_FAX_FORMAT"}],vm.$onInit=function(){vm.langList=[ENGLISH,FRENCH],_setIdNames()},vm.$onChanges=function(changes){changes.contactRecord&&(vm.contactModel=changes.contactRecord.currentValue),changes.isAmend&&(vm.isEditable=changes.isAmend.currentValue),changes.faxMandatory&&(vm.faxRequired=changes.faxMandatory.currentValue),changes.fieldSuffix&&(vm.fldId=changes.fieldSuffix.currentValue,vm.fldId||(vm.fldId=""))},vm.showError=function(ctrl){return!!ctrl&&!!(ctrl.$invalid&&ctrl.$touched||vm.showErrors()&&ctrl.$invalid)},$scope.$watch("contCtrl.contactForm.$error",function(){vm.updateErrorSummary()},!0)}angular.module("contactModule").component("cmpContactDetails",{templateUrl:"app/scripts/components/contactDetails/tpl-contact-details_20170608_1410.html",controller:contactCtrl,controllerAs:"contCtrl",bindings:{contactRecord:"<",onUpdate:"&",isAmend:"<",showErrors:"&",faxMandatory:"@",updateErrorSummary:"&",fieldSuffix:"<"}}),contactCtrl.$inject=["getContactLists","ENGLISH","FRENCH","$scope"]}(),function(){"use strict";angular.module("cspApplicant",["contactModule","addressModule","errorMessageModule","hpfbConstants"]);
}(),function(){"use strict";function cspApplicantCtrl($scope,$translate,FRENCH){function _setIDNames(){var scopeId="_"+$scope.$id;vm.applicantId="applicant"+vm.type+scopeId}var vm=this;vm.title="CspApplicantCtrl",vm.model={role:{applicant:!0,billing:!0},contact:{salutation:"",givenName:"",surname:"",initials:"",title:"",phone:"",phoneExt:"",fax:"",email:""},address:{street:"",city:"",stateList:"",stateText:"",country:"",postalCode:""},applicantName:"",isBillingDifferent:!1},vm.applicantTextAlias="APPLICANTNAME",vm.lang=$translate.proposedLanguage()||$translate.use(),vm.type="_appl",vm.requiredOnly=[{type:"required",displayAlias:"MSG_ERR_MAND"}],vm.isCountryEditable=!1,vm.alerts=[!1,!1],vm.$onInit=function(){vm.model&&vm.model.role&&!vm.model.role.applicant?(vm.applicantTextAlias="COMPANY_NOABBREV",vm.type="_bill",vm.isCountryEditable=!0):(vm.applicantTextAlias="APPLICANTNAME",vm.type="_appl",vm.isCountryEditable=!1),_setIDNames(),vm.alerts=[!1,!1]},vm.$onChanges=function(changes){changes.record&&(vm.model=changes.record.currentValue),changes.alias&&(vm.pref=changes.alias.currentValue)},$scope.$watch("cspApplCtrl.applForm[cspApplCtrl.applicantId].$invalid",function(){vm.updateErrorSummary()},!0),vm.setBilling=function(){vm.model.isBillingDifferent?vm.addApplicant():vm.deleteApplicant(),vm.updateErrorSummary()},vm.addInstruct=function(value){angular.isUndefined(value)||value<vm.alerts.length&&(vm.alerts[value]=!0)},vm.closeAlert=function(value){angular.isUndefined(value)||value<vm.alerts.length&&(vm.alerts[value]=!1)},vm.isFrench=function(){return vm.lang===FRENCH},vm.toggleAlert=function(value){angular.isUndefined(value)||value<vm.alerts.length&&(vm.alerts[value]=!vm.alerts[value])}}angular.module("cspApplicant").component("cmpCspApplicant",{templateUrl:"app/scripts/components/cspContactRecord/tpl-csp-applicant_20170608_1410.html",controller:cspApplicantCtrl,controllerAs:"cspApplCtrl",bindings:{record:"<",addApplicant:"&",deleteApplicant:"&",showErrors:"&",alias:"<",updateErrorSummary:"&"}}),cspApplicantCtrl.$inject=["$scope","$translate","FRENCH"]}(),function(){"use strict";angular.module("fileIO",[])}(),function(){"use strict";function ngFileSelect(hpfbFileReader){function link(scope,element,attrs){scope.rootTag=attrs.rootTag,element.bind("change",function(e){scope.file=(e.srcElement||e.target).files[0],hpfbFileReader.readAsDataText(scope.file,scope).then(function(result){scope.hpfbFileSelect({fileContent:result})})})}var directive={link:link,restrict:"A",scope:{hpfbFileSelect:"&"}};return directive}angular.module("fileIO").directive("hpfbFileSelect",ngFileSelect),ngFileSelect.$inject=["hpfbFileProcessing"]}(),function(){"use strict";function FileSelectController(hpfbFileProcessing){var vm=this;vm.fileTypes=".xml, .hcsc",vm.modelCallback=function(fileContent){vm.status="",fileContent&&(vm.status=fileContent.messages),vm.updateModelRoot({fileContent:fileContent}),angular.element(fileLoad).trigger("focus")}}angular.module("fileIO").component("hpfbFileSelect",{templateUrl:"app/scripts/components/fileIO/fileSelect_20170608_1410.html",controller:FileSelectController,bindings:{updateModelRoot:"&",rootElem:"@"}}),FileSelectController.$inject=["hpfbFileProcessing"]}(),function(){"use strict";function FileWriteController(hpfbFileProcessing){function _generateFile(){"JSON"===vm.saveType.toUpperCase()?hpfbFileProcessing.writeAsJson(vm.jsonToSave,vm.fileName,vm.rootTag):"XML"===vm.saveType.toUpperCase()&&hpfbFileProcessing.writeAsXml(vm.jsonToSave,vm.fileName,vm.rootTag)}function _init(){vm.buttonDisabled?"true"===vm.buttonDisabled.toLowerCase()?vm.buttonDisabled=!0:"false"===vm.buttonDisabled.toLowerCase()?vm.buttonDisabled=!1:vm.buttonDisabled=!1:vm.buttonDisabled=!1}var vm=this;vm.$onInit=_init,vm.generate=_generateFile}angular.module("fileIO").component("hpfbFileSave",{templateUrl:"app/scripts/components/fileIO/fileSave_20170608_1410.html",controller:FileWriteController,bindings:{jsonToSave:"<",rootTag:"@",saveType:"@",buttonLabel:"@",buttonDisabled:"@"}}),FileWriteController.$inject=["hpfbFileProcessing"]}(),function(){"use strict";function fileReader($q){function onLoad(reader,deferred,scope,file){return function(){scope.$apply(function(){if(file){var splitFile=file.name.split("."),fileType=splitFile[splitFile.length-1];fileType.toLowerCase()==draft_file_type?(convertToJSONObjects(reader),checkRootTagMatch(reader,scope)):"xml"===fileType.toLowerCase()?(convertXMLToJSONObjects(reader),checkRootTagMatch(reader,scope)):(convertResult.parseResult=null,convertResult.messages=msg_err_fileType,reader.parseResult=convertResult)}deferred.resolve(reader.parseResult)})}}function onError(reader,deferred,scope){return function(){scope.$apply(function(){deferred.reject(msg_err_load)})}}function getReader(deferred,scope,file){var reader=new FileReader;return reader.onload=onLoad(reader,deferred,scope,file),reader.onError=onError(reader,deferred,scope),reader.parseResult=null,reader}function readAsDataText(file,scope){var deferred=$q.defer(),reader=getReader(deferred,scope,file);return file?reader.readAsText(file):(reader.parseResult=convertResult,reader.parseResult.messages="",reader.parseResult.jsonResult=null,deferred.resolve(reader.parseResult)),deferred.promise}function convertToJSONObjects(reader){try{convertResult.jsonResult=JSON.parse(reader.result),convertResult.messages=msg_success,reader.parseResult=convertResult}catch(e){convertResult.jsonResult=null,convertResult.messages=msg_err_jsonparse,reader.parseResult=convertResult}}function convertXMLToJSONObjects(reader){var xmlConfig={escapeMode:!0,emptyNodeForm:"text",useDoubleQuotes:!0},xmlConverter=new X2JS(xmlConfig);convertResult.jsonResult=xmlConverter.xml_str2json(reader.result),null===convertResult.jsonResult?convertResult.messages=msg_err_xmlparse:convertResult.messages=msg_success,reader.parseResult=convertResult}function convertJSONObjectsToXML(jsonObj){var xmlConfig={escapeMode:!0,emptyNodeForm:"text",useDoubleQuotes:!0},jsonConverter=new X2JS(xmlConfig),xmlResult=null;return xmlResult=jsonConverter.json2xml_str(jsonObj)}function checkRootTagMatch(reader,scope){scope.rootTag&&reader.parseResult&&reader.parseResult.jsonResult&&(reader.parseResult.jsonResult[scope.rootTag]||(reader.parseResult.jsonResult=null,reader.parseResult.messages=msg_err_formType))}function jsonToFile(jsonObj,fileName,rootTag){if(jsonObj){var makeStrSave=JSON.stringify(jsonObj),blob=new Blob([makeStrSave],{type:"text/plain;charset=utf-8"});fileName?fileName+="."+draft_file_type:fileName="hpfbDraft."+draft_file_type,saveAs(blob,fileName)}}function xmlToFile(jsonObj,fileName,rootTag){if(jsonObj){var xmlResult=convertJSONObjectsToXML(jsonObj);xmlResult='<?xml version="1.0" encoding="UTF-8"?><?xml-stylesheet  type="text/xsl" href="REP_Combined.xsl"?>'+xmlResult;var blob=new Blob([xmlResult],{type:"text/plain;charset=utf-8"});fileName?fileName+=".xml":fileName="hpfbXML.xml",saveAs(blob,fileName)}}var msg_success="MSG_SUCCESS_LOAD",msg_err_jsonparse="MSG_ERR_JSONPARSE",msg_err_xmlparse="MSG_ERR_XMLPARSE",msg_err_load="MSG_ERR_FILE_LOAD",msg_err_fileType="MSG_ERR_FILE_TYPE",msg_err_formType="MSG_ERR_FORM_TYPE",draft_file_type="hcsc",convertResult={jsonResult:"",messages:""},service={readAsDataText:readAsDataText,writeAsJson:jsonToFile,writeAsXml:xmlToFile};return service}angular.module("fileIO").factory("hpfbFileProcessing",fileReader),fileReader.$inject=["$q"]}(),function(){"use strict";angular.module("cspMain",["fileIO","applicationInfoService","hpfbConstants","cspService","cspContactList","cspHCOnly","cspMainApplication","cspPatent","cspTimelySubmission","cspFeePayment","cspCertification","errorSummaryModule","ui.bootstrap","alertModule"])}(),function(){"use strict";function cspMainCtrl(CspService,hpfbFileProcessing,ApplicationInfoService,INTERNAL_TYPE,EXTERNAL_TYPE,$translate,FRENCH,$scope){function _loadFileContent(fileContent){if(fileContent){var resultJson=fileContent.jsonResult;resultJson&&(vm.modelService=new CspService,vm.modelService.transformFromFileObj(resultJson),vm.cspModel=vm.modelService.getModelInfo(),vm.showErrorSummary=!1)}}function _createFilename(){var filename="hccsp",separator="-";return vm.cspModel.enrolmentVersion&&(filename=filename+separator+vm.cspModel.enrolmentVersion),filename=filename.replace(".",separator),filename.toLowerCase()}function _transformFile(){return updateDate(),vm.userType===INTERNAL_TYPE?vm.cspForm.$pristine||(vm.cspModel.enrolmentVersion=vm.applicationInfoService.incrementMajorVersion(vm.cspModel.enrolmentVersion)):vm.cspModel.enrolmentVersion=vm.applicationInfoService.incrementMinorVersion(vm.cspModel.enrolmentVersion),vm.modelService.transformToFileObj(vm.cspModel)}function updateDate(){vm.cspModel&&(vm.cspModel.dateSaved=vm.applicationInfoService.getTodayDate())}function setErrorSummaryFocus(){vm.summaryFocusIndex++}var vm=this;vm.userType=EXTERNAL_TYPE,vm.saveXMLLabel="SAVE_DRAFT",vm.modelService=null,vm.cspModel={},vm.paymentType=[],vm.drugUseList=[],vm.rootTag="",vm.showContent=_loadFileContent,vm.applicationInfoService=null,vm.lang=$translate.proposedLanguage()||$translate.use(),vm.showErrorSummary=0,vm.updateSummary=0,vm.summaryFocusIndex=0,vm.alerts=[!1,!1,!1,!1,!1],vm.exclusions={},vm.alias={phoneNumber_appl:{type:"pattern",errorType:"MSG_ERR_PHONE_FORMAT"},phoneNumber_bill:{type:"pattern",errorType:"MSG_ERR_PHONE_FORMAT"},faxNumber_appl:{type:"pattern",errorType:"MSG_ERR_FAX_FORMAT"},faxNumber_bill:{type:"pattern",errorType:"MSG_ERR_FAX_FORMAT"},country:{type:"select2",name:"country"},postal_appl:{type:"pattern",errorType:"POSTAL_FORMAT"},postal_bill:{type:"pattern",errorType:"POSTAL_FORMAT"},patentNum:{type:"minlength",errorType:"MSG_LENGTH_7NUM"},fee:{type:"min",errorType:"TYPE_ZERO_MIN"}},vm.$onInit=function(){vm.alerts=[!1,!1,!1,!1,!1],vm.modelService=new CspService,vm.cspModel=vm.modelService.getModelInfo(),vm.paymentType=vm.modelService.getAdvancedPaymentTypes(),vm.drugUseList=vm.modelService.getDrugUses(),vm.rootTag=vm.modelService.getRootTag(),vm.applicationInfoService=new ApplicationInfoService,vm.showErrorSummary=!1},vm.$onChanges=function(changes){changes.formType&&(vm.userType=changes.formType.currentValue,vm.userType==INTERNAL_TYPE?vm.saveXMLLabel="APPROVE_FINAL":vm.saveXMLLabel="SAVE_DRAFT")},vm.showHCOnlySection=function(){return vm.userType===INTERNAL_TYPE},vm.showErrors=function(){return vm.showErrorSummary},vm.saveJson=function(){var writeResult=_transformFile();hpfbFileProcessing.writeAsJson(writeResult,_createFilename(),vm.rootTag)},vm.saveXML=function(){if(vm.cspForm.$invalid)vm.showErrorSummary=!0,vm.updateErrorSummary(),setErrorSummaryFocus();else{var writeResult=_transformFile();hpfbFileProcessing.writeAsXml(writeResult,_createFilename(),vm.rootTag),vm.cspForm.$setPristine(),vm.showErrorSummary=!1}},vm.updateErrorSummary=function(){vm.updateSummary=vm.updateSummary+1},vm.setAlias=function(record){return record&&record.billing?"billing":"appl"},vm.isFrench=function(){return vm.lang===FRENCH},vm.testMe=function(){var result=JSON.parse(vm.test);_loadFileContent(result)},vm.addInstruct=function(value){angular.isUndefined(value)||value<vm.alerts.length&&(vm.alerts[value]=!0)},vm.closeAlert=function(value){angular.isUndefined(value)||value<vm.alerts.length&&(vm.alerts[value]=!1)},vm.toggleAlert=function(value){angular.isUndefined(value)||value<vm.alerts.length&&(vm.alerts[value]=!vm.alerts[value])}}angular.module("cspMain").component("cmpCspMain",{templateUrl:"app/scripts/components/cspMain/tpl-csp-main_20170608_1410.html",controller:cspMainCtrl,controllerAs:"main",bindings:{formType:"@"}}),cspMainCtrl.$inject=["CspService","hpfbFileProcessing","ApplicationInfoService","INTERNAL_TYPE","EXTERNAL_TYPE","$translate","FRENCH","$scope"]}();
//# sourceMappingURL=data:application/json;base64,

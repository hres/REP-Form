!function(){"use strict";function MainController($translate,getCountryAndProvinces){var vm=this;vm.formType="EXT"}angular.module("dossierApp",["pascalprecht.translate","dossierLoadModule","dossierModule","dataLists","translations"]).controller("MainController",MainController),MainController.$inject=["$translate","getCountryAndProvinces"]}(),function(){"use strict";angular.module("dossierApp").config(["$translateProvider","$httpProvider",function($translateProvider,$httpProvider){$translateProvider.directivePriority(1),$translateProvider.preferredLanguage("en"),$translateProvider.useLoader("customLoad"),$translateProvider.useSanitizeValueStrategy(null),$translateProvider.forceAsyncReload(!0),$httpProvider.defaults.headers.get||($httpProvider.defaults.headers.get={}),$httpProvider.defaults.headers.get["If-Modified-Since"]="Mon, 26 Jul 1997 05:00:00 GMT",$httpProvider.defaults.headers.get["Cache-Control"]="no-cache",$httpProvider.defaults.headers.get.Pragma="no-cache"}])}(),angular.module("translations",[]).config(["$translateProvider",function($translateProvider){$translateProvider.translations("en",{AEROSOL:"Areosol",BOLUS:"Bolus",CAPSULE:"Capsule",CAPSULE_DELAYED_RELEASE:"Capsule, Delayed Release",CAPSULE_EXTENDED_RELEASE:"Capsule, Delayed Release",CREAM:"Cream",EMULSION:"Emulsion",GAS:"Gas",GEL:"Gel",IMPLANT:"Implant",LOTION:"Lotion",LOZENGE:"Lozenge",OINTMENT:"Ointment",PATCH:"Patch",PATCH_EXTENDED_RELEASE:"Patch Extended-Release",POWDER:"Powder",POWDER_FOR_SOLUTION:"Powder for Solution",POWDER_FOR_SUSPENSION:"Powder for Suspension",SHAMPOO:"Shampoo",SOLUTION:"Solution",SPRAY:"Spray",SPRAY_BAG_ON_VALVE:"Spray, Bag-On-Valve",SPRAY_METERED_DOSE:"Spray, Metered Dose",STICK:"Stick",STRIP:"Strip",SUPPOSITORY:"Suppository",SUSPENSION:"Suspension",SYRUP:"Syrup",TABLET:"Tablet",TABLET_CHEWABLE:"Tablet, Chewable",TABLET_DELAYED_RELEASE:"Tablet, Delayed Release",TABLET_EXTENDED_RELEASE:"Tablet, Extended Release",TABLET_ORALLY_DISINTEGRATING:"Tablet, Orally Disintegrating",WIPE:"Wipe"}),$translateProvider.translations("fr",{AEROSOL:"Aérosol",BOLUS:"Bol",CAPSULE:"Capsule",CAPSULE_DELAYED_RELEASE:"Capsule (à libération retardée)",CAPSULE_EXTENDED_RELEASE:"Capsule (à libération prolongée)",CREAM:"Crème",EMULSION:"Émulsion",GAS:"Gaz",GEL:"Gel",IMPLANT:"Implant",LOTION:"Lotion",LOZENGE:"Pastille",OINTMENT:"Pommade",PATCH:"Timbre",PATCH_EXTENDED_RELEASE:"Timbre (à libération prolongée)",POWDER:"Poudre",POWDER_FOR_SOLUTION:"Poudre pour solution",POWDER_FOR_SUSPENSION:"Poudre pour suspension",SHAMPOO:"Shampoing",SOLUTION:"Solution",SPRAY:"Pulvérisation",SPRAY_BAG_ON_VALVE:"Pulvérisation, sac-sur-valve",SPRAY_METERED_DOSE:"Pulvérisation, à dose mesurée",STICK:"Bâton",STRIP:"Bandelette",SUPPOSITORY:"Suppositoire",SUSPENSION:"Suspension",SYRUP:"Sirop",TABLET:"Comprimé",TABLET_CHEWABLE:"Comprimé (à croquer)",TABLET_DELAYED_RELEASE:"Comprimé (à libération retardée)",TABLET_EXTENDED_RELEASE:"Comprimé (à libération prolongée)",TABLET_ORALLY_DISINTEGRATING:"Comprimé (à désintégration orale)",WIPE:"Serviette"}),$translateProvider.translations("en",{LOAD_DOSSIER:"Load a Dossier Enrolment File",DOSSIER_HDING:"Regulatory Dossier Enrolment",INGRED_LIST:"Ingredients List",INGRED_NAME:"Ingredient Name",SOURCED:"Source From",HUMAN:"Human",ANIMAL:"Animal",TISSUES_ORIGIN:"Tissues or fluids of Origin",ADD_PRODUCT:"Add Product",AMEND_REF:"Amend Canadian Reference Product",BRAND_NAME:"Brand Name",MEDICINAL_INGREDIENT:" Medicinal Ingredient",STRENGTH:"Strength(s)",DOSAGE_FORM:"Dosage Form",DOSAGE_FORM_OTHER:"Dosage Form Other Details",CDN_REF_PRODUCT:" Canadian Reference Product",COMPANY_NAME:"Company Name",COUNTRY_NAME:"Country Name",SAVE:"Save",CANCEL:"Cancel",DELETE:"Delete",SCHED_A:"Schedule A Claims",DIN_FULL:"Drug Identification Number (DIN)",THERA_CLASS:"Therapeutic Classifications",THERA_CLASS_ADD:"Add Therapeutic Classification",THERA_CLASS_NAME:"Therapeutic Classification Name",PROPNAME:"Brand or Proprietary or Product Name (should be the same as the brand name on the product label)",DRUG_PRODUCT:"Drug Product Formulation Information",SIGNED_THIRD:"The submission will be signed or filled by a third party on behalf of the manufacturer or sponsor",INCLUDE_AUTH:"Please include the Third Party Authorization letter in the REP folder when submitting via the  Common Electonic Submissions Gateway (CESG)",RELATED_DOSSIER:"Related Dossier ID [if applicable]",PROPER_NAME:"Proper, Common or Non-Proprietary Name",DRUG_USE:"Drug Use",DELETE_CLASS:"Delete Classification",SOURCED_ANIMAL:"Provide the animal types used for this ingredient",SPECIFY:"Please specify",DETAILS:"Details",REF_PRODUCTS:"Canadian Reference Product(s)",RADIOPHARM:"Radiopharmaceutical",VETERINARY:"Veterinary",DISINFECTANT:"Disinfectant",ADD_A:"Add a ",COUNTRY_MAN:"Country of Manufacture",DELETE_COUNTRY:"Delete Country",ADD_CRP:"Add Canadian Reference Product",IS_CDN_REF:"Are there Canadian Reference Products?",DOSSIER_TYPE:"Dossier Type",INGRED_MAT_NAME:"Ingredient or Material Name",HELP_DOSSIER:"Dossier Instructions",HELP_DRUG_PRODUCT:"Drug Product Instructions",HELP_thera:"Therapeutic Classification Instructions",HELP_REFPRODUCTS:"Reference Product Instructions",ADD_FORMULATION:"Add Formulation",SAVE_INSTRUCT:"Dossier File Save Instructions"}),$translateProvider.translations("fr",{LOAD_DOSSIER:"fr_Load a Dossier Enrolment File",DOSSIER_HDING:"fr_Regulatory Dossier Enrolment",INGRED_LIST:"Ingredients List",INGRED_NAME:"Ingredient Name",SOURCED:"Source From",HUMAN:"Human",ANIMAL:"Animal",TISSUES_ORIGIN:"Tissues or fluids of Origin",ADD_PRODUCT:"fr_Add Product",AMEND_REF:"fr_Amend Canadian Reference Product",BRAND_NAME:"Marque nominative",MEDICINAL_INGREDIENT:"Ingrédient Médicinaux",STRENGTH:"Concentration",DOSAGE_FORM:"Forme posologique",DOSAGE_FORM_OTHER:"Dosage Form Other Details",CDN_REF_PRODUCT:" Canadian Reference Product",COMPANY_NAME:"Nom du fabricant ou promoteur",COUNTRY_NAME:"fr_Country Name",SAVE:"fr_Save",CANCEL:"fr_Cancel",DELETE:"fr_Delete",SCHED_A:"fr_Schedule A Claims",DIN_FULL:"fr_Drug Identification Number (DIN)",THERA_CLASS:"fr_Therapeutic Classification(s)",THERA_CLASS_ADD:"fr_Add Therapeutic Classification",THERA_CLASS_NAME:"fr_Therapeutic Classification Name",PROPNAME:"fr_Brand or Proprietary or Product Name (should be the same as the brand name on the product label)",DRUG_PRODUCT:"fr_Drug Product Formulation Information",SIGNED_THIRD:"fr_The submission will be signed or filled by a third party on behalf of the manufacturer or sponsor",INCLUDE_AUTH:"fr_Please include the Third Party Authorization letter in the REP folder when submitting via the  Common Electonic Submissions Gateway (CESG)",RELATED_DOSSIER:"fr_Related Dossier ID [if applicable]",PROPER_NAME:"fr_Proper, Common or Non-Proprietary Name",DRUG_USE:"fr_Drug Use",SOURCED_ANIMAL:"fr_Provide the animal types used for this ingredient",SPECIFY:"fr_Please specify the Other",DETAILS:"fr_Details",REF_PRODUCTS:"fr_Canadian Reference Product(s)",DELETE_CLASS:"fr_Delete Classification",ADD_A:"fr_Add a ",COUNTRY_MAN:"fr_Country of Manufacture",DELETE_COUNTRY:"fr_Delete Country",ADD_CRP:"fr_Add Canadian Reference Product",IS_CDN_REF:"fr_Are there Canadian Reference Products?",DOSSIER_TYPE:"fr_Dossier Type",INGRED_MAT_NAME:"fr_Ingredient or Material Name",HELP_DOSSIER:"fr_Dossier Instructions",HELP_DRUG_PRODUCT:"fr_Drug Product Instructions",HELP_thera:"fr_Therapeutic Classification Instructions",HELP_REFPRODUCTS:"fr_Reference Product Instructions",ADD_FORMULATION:"fr_Add Formulation",SAVE_INSTRUCT:"fr_Dossier File Save Instructions"}),$translateProvider.translations("en",{Y:"Yes",N:"No",UNK:"Unknown",REQUIRED:"(required)",DOSSIER_NUMBER:"Dossier ID",SAVE:"Save",CANCEL:"Cancel",DELETE:"Delete",EDIT:"Edit",CAN_REF_PRODUCTS:"Canadian Reference Products",PROD_NAME:"Product Name"}),$translateProvider.translations("fr",{Y:"Oui",N:"Non",UNK:"Inconnu",REQUIRED:"(requis)",DOSSIER_ID:"fr_Dossier ID",SAVE:"fr_Save",CANCEL:"fr_Cancel",DELETE:"fr_Delete",EDIT:"fr_Edit",CAN_REF_PRODUCTS:"fr_Canadian Reference Products",PROD_NAME:"fr_Product Name"}),$translateProvider.translations("en",{MSG_APP4_TYPE:"At least one source must be selected",MSG_ERR_ONE_SYSTEM:"At least one tissue or fluid of origin must be selected",MSG_ERR_ONE_ANIMAL:"At least one animal source must be selected",MSG_ERR_ONE_ANIMAL_TYPE:"At least one animal type must be selected",MSG_ERR_DRUG_USE:"At least one drug use must be selected",MSG_ONE_SCHEDA:"At least one disease or disorder must be selected",MSG_IS_REQUIRED:"is a required field.",MSG_ERR_INVALID_NUM:"This is not a valid number.",MSG_ERR_ONE_ACTIVE:"At least one active ingredient is required.",MSG_ERR_ONE_CONTAINER:"At least one container type is required.",MSG_ERR_ONE_FORMULATION:"At least one formulation is required.",MSG_ERR_ONE_MANCOUNTRY:"At least one country of manufacture is required",MSG_ERR_ONE_ROA:"At least one Route of Administation is required",MSG_ERR_ONE_THERA:"At least one therapeutic classification is required",MSG_ERR_ONE_COUNTRY:"At least one country of origin is required",MSG_ERR_ONE_TISSUE:"At lease one Tissues of Fluids source is required",MSG_ERR_ONE_CNTRY_ORIGIN:"At least one Country of origin is required",MSG_ERR_ONE_CDN_REF:"At least one Canadian Reference product is required",MSG_ERR_INVALID_NUM_MIN:"The value must be greater than -273",MSG_ERR_INVALID_NUM_MAX:"The value must be less than 999",MSG_ERR_INVALID_NUM_MIN0:"The value must be greater than 0",MSG_TISSUE_SYS_USED:"This system has been already been selected, please select another."}),$translateProvider.translations("fr",{MSG_APP4_TYPE:"fr_At least one source must be selected",MSG_ERR_ONE_SYSTEM:"fr_At least on tissue or fluid of origin must be selected",MSG_ERR_ONE_ANIMAL:"fr_At least one animal source must be selected",MSG_ERR_ONE_ANIMAL_TYPE:"fr_At least one animal type must be selected.",MSG_ERR_DRUG_USE:"fr_At least one drug use must be selected.",MSG_ONE_SCHEDA:"fr_At least one disease or disorder must be selected.",MSG_IS_REQUIRED:"fr_is a required field.",MSG_ERR_INVALID_NUM:"Veuillez fournir un numéro valide.",MSG_ERR_ONE_ACTIVE:"fr_At least one active ingredient is required.",MSG_ERR_ONE_CONTAINER:"fr_At least one container type is required.",MSG_ERR_ONE_FORMULATION:"fr_At least one formulation is required.",MSG_ERR_ONE_MANCOUNTRY:"fr_At least one country of manufacture is required",MSG_ERR_ONE_ROA:"fr_At least one route of administation is required",MSG_ERR_ONE_THERA:"fr_At least one therapeutic classification is required",MSG_ERR_ONE_COUNTRY:"fr_At least one country of origin is required",MSG_ERR_ONE_TISSUE:"fr_At lease one Tissues of Fluids source is required",MSG_ERR_ONE_CNTRY_ORIGIN:"fr_At least one Country of origin is required",MSG_ERR_ONE_CDN_REF:"fr_At least one Canadian Reference product is required",MSG_ERR_INVALID_NUM_MIN:"fr_The value must be greater than -273",MSG_ERR_INVALID_NUM_MAX:"fr_The value must be less than 999",MSG_ERR_INVALID_NUM_MIN0:"fr_The value must be greater than 0",MSG_TISSUE_SYS_USED:"fr_This system has been already been selected, please select another."}),$translateProvider.translations("en",{NERVOUS_SYSTEM:"Nervous System",BRAIN:"brain",BRAINSTEM:"brain stem",CEREBELLUM:"cerebellum",CEROFLUID:"cerebrospinal fluid",DORSALROOT:"dorsal root ganglia",DURAMATER:"dura mater",HYPOTHALAMUS:"hypothalamus",RETINA:"retina or optic nerve",SPINALCORD:"spinal cord",TRIGEMINAL:"trigerminal ganglia",NERVOUS_OTHER:"other nervous system",DIGESTIVE_SYSTEM:"Digestive",APPENDIX:"appendix",BILE:"bile",DISTALILEUM:"distal ileum",LARGEINTEST:"large intestine",SALIVA:"saliva or salivary gland",SMALLINTESTINE:"small intestine other than distal ileum",STOMACH:"stomach",DIGESTIVE_OTHER:"other digestive system",REPRODUCT_SYSTEM:"Reproductive",MILK:"milk or milk products",KIDNEY:"kidney",COLOSTRUM:"colostrum",MAMMARY:"mammary glands",OVARIES:"ovaries",PLACENTA:"placenta",PLACENTAFLUID:"placental fluid",SEMEN:"semen",TESTES:"testes",URINE:"urine",REPROD_OTHER:"other reproductive system",CARDIO_SYSTEM:"Cardio-Respiratory",HEART:"Heart or pericardium",LUNG:"lung",NASALFLUID:"nasal fluid",TRACHEA:"trachea",PLACENTALFLUID:"placental fluid",CARDIO_OTHER:"other cardio-respiratory system",IMMUNE_SYSTEM:"Immune",LYMPH:"lymph nodes",SPLEEN:"spleen",THYMUS:"thymus",TONSILS:"tonsils",IMMUNE_OTHER:"other immune system",SKINGLAND_SYSTEM:"Skin and Glandular",ADRENAL:"adrenal gland or tissue",HAIR:"hair, feathers, hooves",LIVER:"liver",PANCREAS:"pancreas",PITUARYGLAND:"pituitary gland",SKINHIDES:"skin or hides",THYROID:"thyroid or parathyroid",SKIN_OTHER:"other skin or glandular system",MUSCULO_SYSTEM:"Musculo-Skeletal",ABDOMEN:"abdomen",SKULL:"skull",BONES:"bones other than vertebral column or skull",COLLAGEN:"collagen",TENDONS:"tendons or ligaments",VERTEBRALCOLUMN:"vertebral column",MUSCLE:"muscle",MUSCLE_OTHER:"other musculo-skeletal system",OTHERTISSUE_SYSTEM:"Other Tissues or Fluids",ADIPOSE:"adipose or omentum",ASCITES:"acscites",ANTLERV:"antler velvet",SERUM:"serum",WHOLEBLOOD:"whole blood",PLASMA:"plasma",EMBRYONICTISS:"embryonic tissue",FETALTISS:"fetal tissue",BONEMARROW:"bone marrow",EYESCORNEA:"eyes or cornea",GALL:"gall bladder",FLUIDS_OTHER:"other types of tissues or fluids",NONHUMANPRIMATE_TYPE:"Non-human primate type",AQUATIC_TYPE:"Aquatic species such as fish, molluscs and crustacean",AVIAN_TYPE:"Avian such as chicken, turkey and duck",BOVINE_TYPE:"Bovine such as cattle, bison type",CANINE_TYPE:"Canine type",CAPRINE_TYPE:"Caprine such as goat type",CERVIDAE_TYPE:"Cervidae such as deer, elk(wapiti) and moose type",EQUINE_TYPE:"Equine such as horse type",FELINE_TYPE:"Feline such as cat type",OVINE_TYPE:"Ovine type",PORCINE_TYPE:"Porcine such as pig type",RODENT_TYPE:"Rodents such as mouse, hamster, rat and rabbit type",OTHERANIMAL_TYPE:"Other animal type",CONTROLLEDPOP:"Controlled Population",BIOTECHDERIVED:"Biotechnology Derived Animal",CELLLINE:"Cell line",AGEANIMALS:"Age of animals in months",COUNTRYORIGIN:"Country of origin",SPECIFY_THE:"Specify the other ",HUMAN_ANIMAL_SOURCE:"Human / Animal Sourced?",APPENDIX4:"Animal / Human Sourced",MISSING_APPENDIX:"Missing Animal / Human Sourced Ingredients",UNKNOWN_COUNTRY_DETAILS:"Unknown Country Details",ING_DETAILS:"Human / Animal Sourced Record",ANIMAL_TYPE_LBL:"Animal Type Details",ANIMAL_TYPE:"Animal Type",ANIMAL_DETAILS:"Provide the animal type description",ANIMAL_SOURCE:"Animal Source",ANIMAL_TYPE_DETAILS:"Animal Type Details",ANIMAL_SRCS:"Animal Sources",ANIMAL_CTRIES_ORIGIN:"Animal Countries of Origin",ANIMAL_SRC_ADD:"Add Animal Source",TISSUES_FLUIDS_LBL:"Tissues or Fluids Details",SYSTEM_TYPE:"System",SYSTEM_DETAILS:"System Details",SYSTEM_OTHER:"Other Details",TISSUES_FLUIDS_ADD:"Add Tissues or Fluids",TISSUES_FLUIDS_SRCS:"Tissues or Fluids sources",TISSUE_FLUID:"Tissue or Fluid",ANIMAL_SRC:"Animal Source",EXTRA_APPENDIX:"Human / Animal Sourced Records not Referenced in any Formulation",CARDIO_LEGEND:"Select one or more Cardio-Respiratory System selections",NERVOUS_LEGEND:"Select one or more Nervous System selections",OTHER_LEGEND:"Select one or more Other System selections",IMMUNE_LEGEND:"Select one or more Immune System selections",DIGESTIVE_LEGEND:"Select one or more Digestive System selections",REPRODUCTIVE_LEGEND:"Select one or more Reproductive System selections",MUSCLE_LEGEND:"Select one or more Musculo-Skeletal System selections",SKIN_LEGEND:"Select one or more Skin and Glandular System selections",CARDIO_DETAILS:"Other cardio-respiratory system  details",DIGESTIVE_DETAILS:"Other digestive system  details",IMMUNE_DETAILS:"Other immune system  details",MUSCLE_DETAILS:"Other musculo-skeletal system  details",NERVOUS_DETAILS:"Other nervous system  details",OTHERTISS_DETAILS:"Other tissue details",REPRODUCTIVE_DETAILS:"Other reproductive system details",SKIN_DETAILS:"Other skin and glandular system details",ADD_SOURCED:"Add Sourced Ingredient",DELETE_SOURCED:"Delete Sourced Ingredient"}),$translateProvider.translations("fr",{NERVOUS_SYSTEM:"fr_Nervous System",BRAIN:"Cerveau",BRAINSTEM:"Tronc cérébral",CEREBELLUM:"Cervelet",CEROFLUID:"Liquide céphalorachidien (LCR)",DORSALROOT:"Ganglion de la racine dorsale",DURAMATER:"Dure-mère",HYPOTHALAMUS:"Hypothalamus",RETINA:"Moelle épinière",SPINALCORD:"Moelle épinière",TRIGEMINAL:"Ganglion de Gasser",NERVOUS_OTHER:"Veuillez spécifier le système nerveux",DIGESTIVE_SYSTEM:"Système digestif",APPENDIX:"Appendice",BILE:"Bile",DISTALILEUM:"Iléon distal",LARGEINTEST:"Gros intestin",SALIVA:"Salive ou glande salivaire",SMALLINTESTINE:"Intestin grêle, autre que l’iléon distal",STOMACH:"Estomac",DIGESTIVE_OTHER:"Veuillez spécifier le système digestif",REPRODUCT_SYSTEM:"Systèmes reproductif et urinaire",MILK:"Lait ou Produits laitiers",KIDNEY:"Reins",COLOSTRUM:"Reins",MAMMARY:"Glandes mammaires",OVARIES:"Ovaires",PLACENTA:"Placenta",PLACENTAFLUID:"Fluide du placenta",SEMEN:"Sperme",TESTES:"Testicules",URINE:"Testicules",REPROD_OTHER:"Veuillez spécifier le système reproducteur",CARDIO_SYSTEM:"Système cardio-respiratoire",HEART:"Cœur ou péricarde",LUNG:"Cœur/péricarde",NASALFLUID:"Fluide nasal",TRACHEA:"Trachée",PLACENTALFLUID:"Fluide du placenta",CARDIO_OTHER:"Veuillez spécifier le système cardiorespiratoire",IMMUNE_SYSTEM:"Système immunitaire",LYMPH:"Ganglions lymphatiques",SPLEEN:"Rate",THYMUS:"Thymus",TONSILS:"Amygdales","IMMUNE_OTHER ":"Veuillez spécifier le système immunitaire",SKINGLAND_SYSTEM:"Peau et système glandulaire",ADRENAL:"Glande ou tissu surrénalien",HAIR:"Cheveu, plumes, sabots",LIVER:"Foie",PANCREAS:"Pancréas",PITUARYGLAND:"Hypophyse",SKINHIDES:"Peau ou cuirs",THYROID:"Thyroïde ou parathyroïde",SKIN_OTHER:"Veuillez spécifier la peau ou le système glandulaire",ABDOMEN:"Abdomen",SKULL:"Crâne",BONES:"Os autre que la colonne vertébrale et le crâne",COLLAGEN:"Collagène",TENDONS:"Tendons ou ligaments",VERTEBRALCOLUMN:"Colonne vertébrale",MUSCLE:"Colonne vertébrale",MUSCLEDETAIL:"Veuillez spécifier le système musculosquelettique",OTHERTISSUE_SYSTEM:"Autres tissus ou fluides",ADIPOSE:"Veuillez spécifier les tissus adipeux ou épiploon",ASCITES:"Ascite",ANTLERV:"Velours de cervidé",SERUM:"Sérum",WHOLEBLOOD:"Sang entier",PLASMA:"Plasma",EMBRYONICTISS:"Tissu embryonnaire",FETALTISS:"Tissu fœtal",BONEMARROW:"Moelle osseuse",EYESCORNEA:"Yeux ou cornée",GALL:"Vésicule biliaire",FLUIDS_OTHER:"Veuillez spécifier les autres types de tissus ou de fluides d'origine",NONHUMANPRIMATE_TYPE:"fr_Non-human primate type",AQUATIC_TYPE:"fr_Aquatic species such as fish, molluscs and crustacean",AVIAN_TYPE:"fr_Avian such as chicken, turkey and duck",BOVINE_TYPE:"fr_Bovine such as cattle, bison type",CANINE_TYPE:"fr_Canine type",CAPRINE_TYPE:"fr_Caprine such as goat type",CERVIDAE_TYPE:"fr_Cervidae such as deer, elk(wapiti) and moose type",EQUINE_TYPE:"fr_Equine such as horse type",FELINE_TYPE:"fr_Feline such as cat type",OVINE_TYPE:"fr_Ovine type",PORCINE_TYPE:"fr_Porcine such as pig type",RODENT_TYPE:"fr_Rodents such as mouse, hamster, rat and rabbit type",OTHERANIMAL_TYPE:"fr_Other animal type",CONTROLLEDPOP:"fr_Controlled Population",BIOTECHDERIVED:"fr_Biotechnology Derived Animal",CELLLINE:"fr_Cell line",AGEANIMALS:"fr_Age of animals in months",COUNTRYORIGIN:"fr_Country of origin",SPECIFY_THE:"Spécifiez l'autre",MISSING_APPENDIX:"fr_Missing Animal / Human Sourced Ingredients",UNKNOWN_COUNTRY_DETAILS:"fr_Unknown Country Details",ING_DETAILS:"fr_Human / Animal Source Record",APPENDIX4:"fr_Animal / Human Sourced",ANIMAL_TYPE_LBL:"fr_Animal Type Details",ANIMAL_TYPE:"fr_Animal Type",ANIMAL_DETAILS:"fr_Provide the animal type description",ANIMAL_SOURCE:"fr_Animal Source",ANIMAL_TYPE_DETAILS:"fr_Animal Type Details",ANIMAL_SRCS:"fr_Animal Sources",ANIMAL_CTRIES_ORIGIN:"fr_Animal Countries of Origin",ANIMAL_SRC_ADD:"fr_Add Animal Source",TISSUES_FLUIDS_LBL:"fr_Tissues or Fluids Details",SYSTEM_TYPE:"fr_System",SYSTEM_DETAILS:"fr_System Details",SYSTEM_OTHER:"fr_Other Details",TISSUES_FLUIDS_ADD:"fr_Add Tissues or Fluids",TISSUES_FLUIDS_SRCS:"fr_Tissues or Fluids sources",ANIMAL_SRC:"fr_Animal Source",EXTRA_APPENDIX:"fr_Human / Animal Sourced Records not Referenced in any Formulation",CARDIO_DETAILS:"fr_Other cardio-respiratory system  details",DIGESTIVE_DETAILS:"fr_Other digestive system  details",IMMUNE_DETAILS:"fr_Other immune system  details",MUSCLE_DETAILS:"fr_Other musculo-akeletal system  details",NERVOUS_DETAILS:"fr_Other nervous system  details",OTHERTISS_DETAILS:"fr_Other tissue details",REPRODUCTIVE_DETAILS:"Other reproductive system details",SKIN_DETAILS:"fr_Other skin and glandular system details",ADD_SOURCED:"fr_Add Sourced Ingredient",DELETE_SOURCED:"fr_Delete Sourced Ingredient"}),$translateProvider.translations("en",{ACUTEALCOHOL:"Acute Alcholisum",ACUTEANXIETY:"Acute anxiety state",ACUTERESP:"Acute infectious respiratory syndromes",ACUTEINFLAM:"Acute inflammatory and debilitating arthiritis",ACUTEPSYCHOTIC:"Acute psychotic conditions",ADDICTION:"Addiction (except nicotine addiction)",ATERIOSCLEROSIS:"Ateriosclerosis",APPENDICITIS:"Appendicitis",ASTHMA:"Asthma",CANCER:"Cancer",HEARTCONGEST:"Congestive heart failure",CONVULSIONS:"Convulsions",DEMENTIA:"Dementia",DEPRESSION:"Depresssion",DIABETES:"Diabetes",GANGRENE:"Gangrene",GLAUCOMA:"Glaucoma",BLEEDINGDISORDERS:"Haematologic bleeding disorders",HEPATITIS:"Hepatitis",HYPERTENSION:"Hypertension",NAUSEAPREG:"Nausea and vomiting of pregnancy",OBESITY:"Obesity",RHEUMATICFEVER:"Rheumatic fever",SEPTICEMIA:"Septicemia",SEXDISEASE:"Sexually transmitted disease",STRANGHERNIA:"Strangulated hernia",THROMBOTICDISORDER:"Thrombotic and Embolic Disorder",THYROIDDISEASE:"Thyroid disease",UCLERGASTRO:"Ulcer of gastro-intestinal tract",SCHEDA_CLAIMS:"Please list the schedule A Claims and Indications associated with this product",SCHEDA_DISEASE:"Please check the diseases and disorders that apply to the claims made (select at least one)",ISSCHEDA:"This is a non-prescription drug to which one or more Schedule A claims apply"}),$translateProvider.translations("fr",{ACUTEANXIETY:"État anxieux aigu",ACUTERESP:"Syndromes respiratoires infectieux aigus",ACUTEINFLAM:"Arthrite aiguë, inflammatoire et débilitante",ACUTEPSYCHOTIC:"Troubles psychotiques aigus",ADDICTION:"Dépendance (sauf la dépendance à la nicotine)",ATERIOSCLEROSIS:"Artériosclérose",APPENDICITIS:"Appendicite",ASTHMA:"Asthme",CANCER:"Cancer",HEARTCONGEST:"Insuffisance cardiaque congestive",CONVULSIONS:"Convulsions",DEMENTIA:"Démence",DEPRESSION:"Dépression",DIABETES:"Diabète",GANGRENE:"Gangrène",GLAUCOMA:"Glaucome",BLEEDINGDISORDERS:"Affections hématologiques hémorragiques",HEPATITIS:"Hépatite",HYPERTENSION:"Hypertension",NAUSEAPREG:"Nausées et vomissements liés à la grossesse",OBESITY:"Obésité",RHEUMATICFEVER:"Fièvre rhumatismale",SEPTICEMIA:"Septicémie",SEXDISEASE:"Maladies transmises sexuellement",STRANGHERNIA:"Hernie étranglée",THROMBOTICDISORDER:"Maladies thrombotiques et emboliques",THYROIDDISEASE:"Maladie thyroïdienne",UCLERGASTRO:"Ulcères des voies gastro-intestinales",SCHEDA_CLAIMS:"Indiquer les allégations et indications de l’annexe A associées avec ce produit",SCHEDA_DISEASE:"fr_Please check the diseases and disorders that apply to the claims made (select at least one)",ISSCHEDA:"Ce médicament en vente libre auquel une ou plusieurs allégations de l’annexe A s’appliquent"}),$translateProvider.translations("en",{ING_NAME:"Ingredient Name",CAS_NUM:"CAS",CAS_FULL:"Chemical Abstract Services Number",STANDARD:"Standard",STRENGTH:"Strength",UNITS:"Units",PER_STRENGTH:"Per",ISBASE:"Calculated as Base?",NANO_MATERIAL:"Nanomaterial?",NANO_MATERIAL_OTHER:"Indicate the type of nanomaterial",ANIMAL_HUMAN_SOURCED:"Animal or Human Sourced?",ACTIVE_LIST:"Active Ingredient List",NONMEDICINAL_INGREDIENT:" Non-Medicinal Ingredient",VARIANT_NAME:"Variant Name",CONTAINER_TYPE:"Container Type",PACKAGE_SIZE:"Package Size",MATERIAL_NAME:"Material Name",PRESENT_IN_FINAL:"Present in final Container",MEDICINAL_INGRED_DETAILS:"Medicinal (Active) Ingredient Details",NONMEDICINAL_INGRED_DETAILS:"Non-Medicinal Ingredient Details",CONTAINER_TYPE_DETAILS:"Container Type Details",MATERIAL_DETAILS:"Animal and / or Human Sourced Materials Details",CALCULATED_AS_BASE:"Calculated as Base?",SHELF_LIFE_YEARS:"Number of Years",SHELF_LIFE_MONTHS:"Number of Months",MIN_TEMP:"Minimum, Celsius",MAX_TEMP:"Maximum, Celsius",TEMP_RANGE:"Temperature Range",SHELF_LIFE:"Shelf Life",IN_FINAL_CONTAINER:"Present in Final Container?",OTHER_ROA_DETAILS:"Other Route of Administration Details",ROA_LBL:"Route of Administration",ROA_ABREV:"ROA",FORMULATIONS:"Formulations",FORMULATION_DETAILS:"Formulation Record",FORMULATION_NAME:"Formulation Name",FORM_ID:"ID",ANIMAL_CTRY_ORIGIN:"Country of Origin of the Animals",ADD_ROA:"Add Route of Administration",MEDICINAL_INGRED:"A. Medicinal (Active) Ingredients",NONMEDICINAL_INGRED:"B. Non-Medicinal Ingredients",CONTAINER_TYPES:"D. Container Types",ANIMAL_HUMAN_HDING:"C. Animal and / or Human Sourced Materials used at any stage in the manufacture of the drug",ROA_TITLE:"E. Routes of Administration",COUNTRIES_MANUFACT:"F. Countries of manufacture for this drug product",IN_LIST:"In list",UNITS_SRCH:"Select or Search Units",SOURCED_INFO:"Please provide additional details of this ingredient / material on the Animal / Human Source tab.",DELETE_FORMULATION:"Delete Formulation",COPY_FORMULATION:"Copy formulation",ADD_FORMULATION:"Add formulation"}),$translateProvider.translations("fr",{ING_NAME:"Nom de l’ingrédient",CAS_NUM:"CAS",CAS_FULL:"Numéro Chemical Abstracts Service",STANDARD:"Norme",STRENGTH:"Concentration",UNITS:"Unités",PER_STRENGTH:"Par",ISBASE:"Calculé sous forme de base?",NANO_MATERIAL:"Nanomatériau?",NANO_MATERIAL_OTHER:"Indiquer le type de nanomatériau",ANIMAL_HUMAN_SOURCED:"fr_Animal or Human Sourced?",ACTIVE_LIST:"fr_Active Ingredient List",NONMEDICINAL_INGREDIENT:" fr_NonMedicinal Ingredient",VARIANT_NAME:"fr_Variant Name",CONTAINER_TYPE:"fr_Container Type",PACKAGE_SIZE:"fr_Package Size",MATERIAL_NAME:"fr_Material Name",PRESENT_IN_FINAL:"fr_Present in final Container",MEDICINAL_INGRED_DETAILS:"fr_Medicinal (Active) Ingredient Details",NONMEDICINAL_INGRED_DETAILS:"Non-Medicinal Ingredient Details",CONTAINER_TYPE_DETAILS:"Container Type Details",MATERIAL_DETAILS:"Animal and / or Human Sourced Materials Details",CALCULATED_AS_BASE:"fr_Calculated as Base?",SHELF_LIFE_YEARS:"fr_Number of years",SHELF_LIFE_MONTHS:"fr_Number of months",MIN_TEMP:"fr_Minimum, Celsius",MAX_TEMP:"fr_Maximum, Celsius",TEMP_RANGE:"fr_Temperature Range",SHELF_LIFE:"fr_Shelf Life",IN_FINAL_CONTAINER:"fr_Present in Final Container?",OTHER_ROA_DETAILS:"fr_Other Route of Administration Details",ROA_LBL:"fr_Route of Administration",ROA_ABREV:"ROA",FORMULATIONS:"Formulations",APPENDIX4:"Annexe 4",FORMULATION_DETAILS:"fr_Formulation Record",FORMULATION_NAME:"fr_Formulation Name",FORM_ID:"ID",ANIMAL_CTRY_ORIGIN:"fr_Country of Origin of the Animals",ADD_ROA:"fr_Add Route of Administration",MEDICINAL_INGRED:"A. fr_Medicinal (Active) Ingredients",NONMEDICINAL_INGRED:"B. fr_Non-Medicinal Ingredients",CONTAINER_TYPES:"D. fr_Container Types",ANIMAL_HUMAN_HDING:"C. fr_Animal and / or Human Sourced Materials used at any stage in the manufacture of the drug",ROA_TITLE:"E. fr_Routes of Administration",COUNTRIES_MANUFACT:"F. fr_Countries of manufacture for this drug product",NOT_IN_LIST:"fr_Not in list",UNITS_SRCH:"fr_Select or Search Units",SOURCED_INFO:"fr_Please provide additional details of this ingredient/material on the Animal/Human Source tab.",DELETE_FORMULATION:"fr_Delete Formulation",COPY_FORMULATION:"fr_Copy formulation",ADD_FORMULATION:"fr_Add formulation"}),$translateProvider.translations("en",{Y:"Yes",N:"No",DELETEROW:"Delete Row",SELECTEDROW:"Selected Row",REQUIRED:"(required)",ROLES_SELECT:"Select one or more roles for this record",NEW:"New",AMEND:"Amend",APPROVED:"Approved",CLICK_TOGGLE:"Click to toggle the collapse or expand details for this address.",AMEND_RECORD:"Amend Record",en:"English",fr:"French",DISCARD_CHANGES:"Discard Changes",REPSECONDARY:"Alternate REP contact",REPPRIMARY:"Primary REP contact",MAILING:"Regulatory Mailing / Annual Contact",BILLING:"Billing Address",MANUFACTURER:"Manufacturer / Sponsor Mailing Address",IMPORTER:"Canadian Importer Mailing Address",APPROVE_FINAL:"Approve Final XML",SAVE_DRAFT:"Save Draft for Filing",PRIMARY:"Primary",SECONDARY:"Alternate",TOGGLE_EXPAND:"Click to toggle collapse or expand details of row",SAVE_WORK:"Save Working Copy",CONTROL_NUMBER:"Control Number",REP_CONTACT_INFO:"REP Contact Information",SAVE_CONTACT:"Save Contact",DELETE_CONTACT:"Delete Contact",COMPANY_ID:"Company Id",DOSSIER_ID:"Dossier Id",ERRORS:"Errors",UNKNOWN:"Unknown",BIOLOGIC:"Biologic",PHARMACEUTICAL:"Pharmaceutical",HELP_FILE_LOAD:"Expand file load instructions",HELP_ACTIVITY_MAIN:"Activity Instructions",HELP_ACTIVITY_REP:"REP Contact Instructions",CALENDAR:"Pick date from calendar",HIDE_CALENDAR:"Hide Calendar (escape key)",OTHER:"Other",HELP_REP_CONTACT:"REP Contact Instructions",OTHER_UNITS:"Units other details",COMPANYNAME:"Company Name (Full legal name - no abbreviations)",COPY:"Copy",DELETE:"Delete",SAVE_WORKING:"Save Working Copy",COMPANY_NOABBREV:"Company Name (Full legal Name - no abbreviations)",CLOSE_ALERT:"Collapse instructions",COLLAPSE:"Collapse"}),$translateProvider.translations("fr",{Y:"Oui",N:"Non",DELETEROW:"fr_Delete Row",SELECTEDROW:"Selected Row",REQUIRED:"(requis)",ROLES_SELECT:"fr_Select one or more roles for this record",NEW:"fr_New",AMEND:"fr_Amend",APPROVED:"fr_Approved",CLICK_TOGGLE:"fr_Click to toggle the collapse or expand details for this address.",AMEND_RECORD:"fr_Amend Record",en:"Anglais",fr:"Français",DISCARD_CHANGES:"fr_Discard Changes",REPSECONDARY:"fr_Alternate REP contact",REPPRIMARY:"fr_Primary REP contact",MAILING:"Contact pour le courrier réglementaire",BILLING:"fr_Billing",MANUFACTURER:"fr_Manufacturer",IMPORTER:"Importateur canadien",APPROVE_FINAL:"Approuver XML final",PRIMARY:"fr_Primary",SECONDARY:"fr_Alternate",TOGGLE_EXPAND:"fr_Click to toggle collapse or expand details of row",SAVE_DRAFT:"Enregistrer le brouillon",CONTROL_NUMBER:"fr_Control Number",REP_CONTACT_INFO:"fr_Main Contact Information",SAVE_CONTACT:"fr_Save Contact",DELETE_CONTACT:"fr_Delete Contact",COMPANY_ID:"fr_Company Id",DOSSIER_ID:"fr_Dossier Id",ERRORS:"Erreurs",UNKNOWN:"Inconnu",BIOLOGIC:"fr_Biologic",PHARMACEUTICAL:"fr_Pharmaceutical",HELP_FILE_LOAD:"fr_File Load Instructions",HELP_ACTIVITY_MAIN:"fr_Activity Instructions",HELP_ACTIVITY_REP:"fr_REP Contact Instructions",CALENDAR:"fr_Pick date from calendar",HIDE_CALENDAR:"fr_Hide Calendar (escape key)",OTHER:"Autre",HELP_REP_CONTACT:"fr_REP Contact Instructions",OTHER_UNITS:"fr_Units other details",COMPANYNAME:"fr_Company Name (Full legal name - no abbreviations)",COPY:"fr_Copy",DELETE:"fr_Delete",SAVE_WORKING:"Enregistrer une copie de travail",COMPANY_NOABBREV:"fr_Company Name (Full legal Name - no abbreviations)",CLOSE:"Minimiser les instructions",COLLAPSE:"Minimiser les"}),$translateProvider.translations("en",{SELECT_LOAD:"Select a file to load",MSG_SUCCESS_LOAD:"The file was loaded successfully",MSG_ERR_JSONPARSE:"Error: there was an error parsing the working file.",MSG_ERR_XMLPARSE:"Error: there was an error parsing the draft XML file.",MSG_ERR_FILE_LOAD:"Error: there was a problem loading the file.",MSG_ERR_FILE_TYPE:"Error: An invalid file type was selected.",MSG_ERR_FORM_TYPE:"Error: the wrong form type was selected for this form.",MSG_ERR_CHECKSUM_FAIL:"Error: the checksum in the file does not match the calculated checksum"}),$translateProvider.translations("fr",{SELECT_LOAD:"Sélectionnez un fichier à charger",MSG_SUCCESS_LOAD:"Le fichier a été chargé avec succès",MSG_ERR_JSONPARSE:"Erreur: il y a eu une erreur en analysant le fichier de travail.",MSG_ERR_XMLPARSE:"Erreur: il y avait une erreur d'analyse du projet de fichier XML,",MSG_ERR_FILE_LOAD:"Erreur: il y a eu un problème lors du chargement du fichier.",MSG_ERR_FILE_TYPE:"Erreur: un type de fichier invalide a été sélectionné.",
MSG_ERR_FORM_TYPE:"Erreur: le type de formulaire incorrect a été sélectionné pour ce formulaire.",MSG_ERR_CHECKSUM_FAIL:"Erreur: La somme de contrôle dans le fichier ne correspond pas à la somme de contrôle calculée."}),$translateProvider.translations("en",{APPL_STATUS:"Application Status",ENROL_VERSION:"Enrolment Version",DATE_SAVED:"Date Last Saved",AMEND_ENROL:"Amend Enrolment",AMEND_MSG:"Edit records to be amended below."}),$translateProvider.translations("fr",{APPL_STATUS:"fr_Application Status",ENROL_VERSION:"Version d’inscription",DATE_SAVED:"Date du dernier enregistrement",AMEND_ENROL:"fr_Amend Enrolment",AMEND_MSG:"fr_Edit records to be amended below."}),$translateProvider.translations("en",{MSG_ERR_MAND:"This field is required",MSG_ERR_EMAIL_FORMAT:"Please enter a valid email address.",MSG_ERR_ROLE:"Please select at least one role",MSG_ERR_CONTACT_NUM:"All the roles have to be used for the contacts",MSG_ERR_PHONE_FORMAT:"Specify a valid phone number",MSG_ERR_FAX_FORMAT:"Specify a valid fax number",MSG_ERR_ALLROLE:"The roles of manufacturer, mailing, billing, and primary REP contact  have not all been selected among the list of contacts",MSG_ERR_ADDRESSSROLE:"The roles of manufacturer, mailing, and billing have not all been selected among the list of addresses",MSG_ERR_POSTAL:"Please specify a valid postal code.",MSG_ERR_ZIP:"Please specify a valid zip code.",MSG_ERR_DATE_FORMAT:"The date format is incorrect.",MAILING_SEL:"Mailing Role already Selected",MANUFACT_SEL:"Manufacturer Role already Selected",MAIL_SEL:"Mailing Role already Selected",BILLING_SEL:"Billing Role already Selected",IMPORTER_SEL:"Importer Role already Selected",REPPRIM_SEL:"REP Primary Role already Selected",REPALT_SEL:"REP Alternate Role already Selected",MSG_LENGTH_MIN5:"Please enter at least 5 characters",MSG_LENGTH_6:"Please enter 6 characters.",MSG_LENGTH_6NUM:"Please enter 6 digits.",MSG_LENGTH_8NUM:"Please enter 8 digits.",MSG_LENGTH_7:"Please enter 7 characters.",MSG_LENGTH_7NUM:"Please enter 7 digits.",MSG_ERR_ONE_REP:"At least one contact is required.",MSG_ERR_ONE_LIFE_REC:"One lifecycle record is required.",MSG_ERR_RATIONALE_SEL:"Please select at least one rationale.",MSG_ERR_NOTIF_SEL:"Please select at least one notifiable change.",MSG_ERR_MIN_POS:"Must be a positive number",MSG_ERR_MAX:"Exceeds the maximum"}),$translateProvider.translations("fr",{MSG_ERR_MAND:"Ce champ est obligatoire.",MSG_ERR_EMAIL_FORMAT:"Veuillez fournir une adresse électronique valide.",MSG_ERR_CONTACT_NUM:"fr_All the roles have to be used for the company contacts",MSG_ERR_PHONE_FORMAT:"Veuillez fournir un numéro de téléphone valide.",MSG_ERR_FAX_FORMAT:"Veuillez fournir un numéro de télécopieur valide.",MSG_ERR_ALLROLE:"fr_Across the contact records, the roles of manufacturer, mailing, billing, and REP primary contact must be selected",MSG_ERR_ADDRESSSROLE:"fr_The roles of manufacturer, mailing, and billing have not all been selected among the list of addresses",MSG_ERR_POSTAL:"Veuillez fournir un code postal valide.",MSG_ERR_ZIP:"Veuillez fournir un code postal valide.",MSG_ERR_DATE_FORMAT:"Veuillez fournir une une date valide.",MANUFACT_SEL:"fr_Manufacturer Role already Selected",MAIL_SEL:"fr_Mailing Role already Selected",BILLING_SEL:"fr_Billing Role already Selected",IMPORTER_SEL:"fr_Importer Role already Selected",REPPRIM_SEL:"fr_REP Primary Role already Selected",REPALT_SEL:"fr_REP Alternate Role already Selected",MSG_LENGTH_MIN5:"Veuillez fournir au moins 5 chiffres.",MSG_LENGTH_6:"Veuillez fournir au moins 6 caractères.",MSG_LENGTH_6NUM:"Veuillez fournir 6 chiffres.",MSG_LENGTH_8NUM:"Veuillez fournir 8 chiffres.",MSG_LENGTH_7:"Veuillez fournir 7 caractères.",MSG_LENGTH_7NUM:"Veuillez fournir  7 chiffres.",MSG_ERR_ONE_REP:"Au moins un contact est requis",MSG_ERR_ONE_LIFE_REC:"Un enregistrement de cycle de vie est nécessaire",MSG_ERR_RATIONALE_SEL:"Veuillez sélectionner au moins une justification",MSG_ERR_NOTIF_SEL:"Sélectionnez au moins un changement de déclaration",MSG_ERR_MIN_POS:"Doit être un nombre positif",MSG_ERR_MAX:"Dépasse le maximum."}),$translateProvider.translations("en",{FIRSTNAME:"First Name",LASTNAME:"Last Name",INITIALS:"Initials",LANGCORRESPOND:"Language of Correspondance",JOBTITLE:"Job Title",SALUTATION:"Salutation",SALUT_MR:"Mr.",SALUT_MS:"Ms.",SALUT_DR:"Dr.",SALUT_MRS:"Mrs.",ROLE_PRIMARY:"Primary",ROLE_SECONDARY:"Alternate",CONTACTEMAIL:"Email",FAX_NUMBER:"Fax Number",PHONE_EXT:"Phone Extension",ROLES:"Roles",PHONENUMBER:"Phone Number",CONTACT_INFO:"Company Representative Information",AMEND:"Amend",REP_CONTACT:"REP Contact",ONE_ROLE:"Role",CONTACT_DETAILS:"Company Representative Details",ADD_CONTACT:"Add REP Contact",CONTACT_ROLE_LEGEND:"Select one or more roles for this company representative",ADD_REPRES:"Add Company Representative",DELETE_REPRES:"Delete Company Rep.",SAVE_REPRES:"Save Company Rep."}),$translateProvider.translations("fr",{FIRSTNAME:"Prénom",LASTNAME:"Nom",INITIALS:"Initiales",LANGCORRESPOND:"Langue de correspondance",JOBTITLE:"Titre de poste",SALUTATION:"Titre de civilité",SALUT_MR:"M.",SALUT_MS:"Mme",SALUT_DR:"Dr.",SALUT_MRS:"Mlle",ROLE_PRIMARY:"Primaire",ROLE_SECONDARY:"Alterner",CONTACTEMAIL:"Adresse électronique",FAX_NUMBER:"Numéro de télécopieur",PHONE_EXT:"Poste",ADDR_ROLES:"fr_Roles",PHONENUMBER:"Numéro de téléphone",CONTACT_INFO:"fr_Company Representative Information",AMEND:"fr_Amend",REP_CONTACT:"fr_REP Contact",ONE_ROLE:"fr_Role",CONTACT_DETAILS:"fr_Company Representative Details",ADD_CONTACT:"fr_Add REP Contact",CONTACT_ROLE_LEGEND:"fr_Select one or more roles for this company representative"})}]),function(){"use strict";angular.module("numberFormat",[])}(),function(){"use strict";function digitsCtrl(){function link(scope,element,attrs,modelCtrl){modelCtrl.$parsers.push(function(inputValue){if(void 0==inputValue)return"";var isNumber=!1,max=-1,ignore=!1,tempVal=""+inputValue;attrs.type&&"number"===attrs.type&&(isNumber=!0),attrs.onlyMax&&(max=parseInt(attrs.onlyMax));var regexIntNeg=/[^0-9-]/g,integerReg=/[^0-9]/g,regexValue=integerReg;if("intNeg"==attrs.onlyDigits?regexValue=regexIntNeg:"false"===attrs.onlyDigits?ignore=!0:regexValue=integerReg,ignore)return inputValue;var transformedInput=tempVal.replace(regexValue,"");return max>0&&(transformedInput=transformedInput.substring(0,max)),transformedInput!==tempVal&&(isNumber&&transformedInput&&(transformedInput=parseFloat(transformedInput)),modelCtrl.$setViewValue(transformedInput),modelCtrl.$render()),transformedInput})}var directive={link:link,restrict:"A",require:"?ngModel"};return directive}angular.module("numberFormat").directive("onlyDigits",digitsCtrl)}(),function(){"use strict";angular.module("hpfbConstants",[]),angular.module("hpfbConstants").constant("CANADA","CAN").constant("OTHER","OTHER").constant("YES","Y").constant("NO","N").constant("USA","USA").constant("UNKNOWN","UNKNOWN").constant("ENGLISH","en").constant("FRENCH","fr").constant("NEW_TYPE","NEW").constant("APPROVED_TYPE","APPROVED").constant("AMEND_TYPE","AMEND").constant("INTERNAL_TYPE","INT").constant("EXTERNAL_TYPE","EXT").constant("PHARMA_TYPE","PHARMA").constant("RELATIVE_FOLDER_DATA","../data/")}(),function(){"use strict";angular.module("repContactService",[])}(),function(){"use strict";function RepContactService(){function RepContactService(){}return RepContactService.prototype={_default:{}},RepContactService.prototype.getPrimaryRole=function(){return"PRIMARY"},RepContactService.prototype.getSecondaryRole=function(){return"SECONDARY"},RepContactService.prototype.createRepContact=function(repContactList){if(repContactList){var PRIMARY=this.getPrimaryRole(),SECONDARY=this.getSecondaryRole(),contact=_createDefaultRepContact(),currentContacts=repContactList;if(0==currentContacts.length)contact.repRole=PRIMARY;else{contact.repRole=PRIMARY;for(var i=0;i<currentContacts.length;i++)if(currentContacts[i].repRole==PRIMARY){contact.repRole=SECONDARY;break}}return contact}},RepContactService}function _createDefaultRepContact(){var repcontact=_createContactModel();return repcontact.repRole="",repcontact.amend=!1,repcontact}function _createContactModel(){var contact={};return contact.salutation="",contact.givenName="",contact.initials="",contact.surname="",contact.title="",contact.language="",contact.phone="",contact.phoneExt="",contact.fax="",contact.email="",contact}angular.module("repContactService").factory("RepContactService",RepContactService)}(),function(){"use strict";angular.module("filterLists",["hpfbConstants"])}(),function(){"use strict";function orderByTranslatedCountry($translate,$filter,CANADA,USA){return function(array,objKey){var result=[],translated=[];return angular.forEach(array,function(value){translated.push({key:value,label:$translate.instant(value)})}),result.push(CANADA),result.push(USA),angular.forEach($filter("orderBy")(translated,"label"),function(sortedObject){sortedObject.key!==CANADA&&sortedObject.key!==USA&&result.push(sortedObject.key)}),result}}function orderByTranslatedCountryAndLabel($translate,$filter,CANADA,USA){return function(array){var result=[],translated=[];return angular.forEach(array,function(value){translated.push({key:value,label:$translate.instant(value)})}),result.push({key:CANADA,label:$translate.instant(CANADA)}),result.push({key:USA,label:$translate.instant(USA)}),angular.forEach($filter("orderBy")(translated,"label"),function(sortedObject){sortedObject.key!==CANADA&&sortedObject.key!==USA&&result.push(sortedObject)}),result}}function findCountryObj(){return function(array,targetKey){for(var i=0;i<array.length;i++)if(array[i].key===targetKey)return array[i];return null}}function orderByTranslated($translate,$filter){return function(array){var result=[],translated=[];return angular.forEach(array,function(value){translated.push({key:value,label:$translate.instant(value)})}),angular.forEach($filter("orderBy")(translated,"label"),function(sortedObject){result.push(sortedObject.key)}),result}}function sequenceOrderBy($filter){return function(array){var result=[];return angular.forEach($filter("orderBy")(array,"sequence",!0),function(sortedObject){result.push(sortedObject)}),result}}function orderByTranslatedOtherFirst($translate,$filter,OTHER){return function(array){var result=[],translated=[];return angular.forEach(array,function(value){translated.push({key:value,label:$translate.instant(value)})}),result.push(OTHER),angular.forEach($filter("orderBy")(translated,"label"),function(sortedObject){sortedObject.key!==OTHER&&result.push(sortedObject.key)}),result}}function _orderByLocale(){return function(items,lang){return items.sort(function(a,b){return a[lang].localeCompare(b[lang],lang)}),items}}function _findById($filter){return function(array,searchJson){var initialResult=$filter("filter")(array,searchJson);if(!initialResult)return null;if(1===initialResult.length)return initialResult[0];for(var i=0;i<initialResult.length;i++)if(initialResult[i].id===searchJson.id)return initialResult[i];return null}}angular.module("filterLists").filter("orderByTranslatedCountry",orderByTranslatedCountry).filter("orderByTranslated",orderByTranslated).filter("orderByTranslatedOtherFirst",orderByTranslatedOtherFirst).filter("orderByCountryAndLabel",orderByTranslatedCountryAndLabel).filter("orderByLocale",_orderByLocale).filter("findCountryObject",findCountryObj).filter("findListItemById",_findById).filter("sequenceOrderDescending",sequenceOrderBy),orderByTranslatedCountry.$inject=["$translate","$filter","CANADA","USA"],orderByTranslated.$inject=["$translate","$filter"],orderByTranslatedOtherFirst.$inject=["$translate","$filter","OTHER"],_findById.$inject=["$filter"]}(),function(){"use strict";angular.module("dataLists",["hpfbConstants"])}(),function(){"use strict";function getService(UNKNOWN){function _createCountryArray(translateJson){vm.countryList=translateJson}function _getUnknownCountryRec(){return{id:UNKNOWN,en:"Unknown",fr:"Inconnu"}}function getCountryValuesArray(){return vm.countryList}function getProvinceValuesArray(){return["AB","BC","MB","NB","NL","NT","NS","NU","ON","PE","QC","SK","YT"]}function getUSStatesValueArray(){return["AL","AK","AZ","AR","CA","CO","CT","DE","DC","FL","GA","HI","ID","IL","IN","IA","KS","KY","LA","ME","MD","MA","MI","MN","MS","MO","MT","NE","NV","NH","NJ","NM","NY","NC","ND","OH","OK","OR","PA","RI","SC","SD","TN","TX","UT","VT","VA","WA","WV","WI","WY"]}var vm=this;vm.countryList=[];var service={getCountries:getCountryValuesArray,getProvinces:getProvinceValuesArray,getUSStates:getUSStatesValueArray,createCountryList:_createCountryArray,getUnknownCountryRecord:_getUnknownCountryRec};return service}angular.module("dataLists").factory("getCountryAndProvinces",getService),getService.inject=["UNKNOWN"]}(),function(){"use strict";function getSalService($filter,$q,$http,$translate,OTHER,FRENCH,RELATIVE_FOLDER_DATA){function getSalValuesArray(){return["SALUT_DR","SALUT_MR","SALUT_MRS","SALUT_MS"]}function getLanguagesValuesArray(){return["en","fr"]}function _createInternalContacts(){var deferred=$q.defer(),contactsUrl=RELATIVE_FOLDER_DATA+"internalContacts.json";return vm.internalContacts&&0!==vm.internalContacts.length?deferred.resolve(vm.internalContacts):$http.get(contactsUrl).success(function(data,status,headers,config){var newList=_createSortedArray(data,"en"),lang=$translate.proposedLanguage()||$translate.use(),otherRec={id:OTHER,en:"Other"};lang===FRENCH&&(otherRec.en="Autre"),newList.unshift(otherRec),vm.internalContacts=newList,deferred.resolve(newList)}).error(function(data,status,headers,config){deferred.reject(status)}),deferred.promise}function _getInternalContacts(){return _createInternalContacts()}function _createSortedArray(jsonList,lang){var result=[];return angular.forEach($filter("orderByLocale")(jsonList,lang),function(sortedObject){result.push(sortedObject)}),result}var vm=this;vm.internalContacts=[];var service={getSalutationList:getSalValuesArray,getLanguages:getLanguagesValuesArray,createInternalContacts:_createInternalContacts,getInternalContacts:_getInternalContacts};return service}angular.module("dataLists").factory("getContactLists",getSalService),getSalService.$inject=["$filter","$q","$http","$translate","OTHER","FRENCH","RELATIVE_FOLDER_DATA"]}(),function(){"use strict";function getRolesService(){function getRoleValuesArray(){return["","ROLE_PRIMARY","ROLE_SECONDARY"]}function _getFormTypes(){return[_biologic,_pharma]}function _getBiologic(){return _biologic}function _getPharmaceutical(){return _pharma}var _biologic="BIOLOGIC",_pharma="PHARMACEUTICAL",service={getContactRoles:getRoleValuesArray,getFormTypes:_getFormTypes,getBiologicType:_getBiologic,getPharmaType:_getPharmaceutical};return service}angular.module("dataLists").factory("getRoleLists",getRolesService)}(),function(){"use strict";angular.module("services",[])}(),function(){"use strict";function getTransactionSeq($http,$q){function yesNoArray(){return["Y","N"]}function _createRaArray(value){vm.raTypeArray=value}function getTransactionDescriptionsArray(){return["ADMINISTRATIVE","BENEFIT_RISK_ASSESS","CANCEL_LETTER","CHANGE_TO_DIN","COMMENTS_NOC","COMMENTS_SUMMARY_BASIS","DIN_DISCONTINUED","DRUG_NOTIF_FORM","FOR_PERIOD","INITIAL","MEETING_MINUTES","NOTIFICATION_CHANGE","PANDEMIC_APPL","POST_CLEARANCE_DATA","POST_MARKET_SURV","POST_NOC_CHANGE","POST_AUTH_DIV1_CHANGE","PRESUB_MEETING_PKG","PRIORITY_REVIEW_RQ","PRISTINE_PM","PRISTINE_PM_2LANG","ADVISEMENT_LETTER_RESPONSE","CLIN_CLARIF_RESPONSE","EMAIL_RQ_RESPONSE","LABEL_CLARIF_RESPONSE","MHPD_RQ_RESPONSE","NOC_RESPONSE","NOD_RESPONSE","NOL_RESPONSE","NON_RESPONSE","PROCESSING_CLARIF_RESPONSE","QUAL_CLIN_CLARIF_RESPONSE","QUAL_CLARIF_RESPONSE","SCREENING_ACCEPT_RESPONSE","SCREENING_CLARIF_RESPONSE","SDN_RESPONSE","PHONE_RQ_RESPONSE","RISK_COMMUN_DOC","RMP_VERSION_DATE","SIGNAL_WORK_UP","UNSOLICITED_DATA","YEAR_LIST_OF_CHANGE","BE_CLARIF_RESPONSE"]}function getActivityArray(){return vm.raTypeArray}function getPresubArray(){return["CANCEL_LETTER","MEETING_MINUTES","EMAIL_RQ_RESPONSE","PROCESSING_CLARIF_RESPONSE","PHONE_RQ_RESPONSE"]}function getANDSArray(){return["ADMINISTRATIVE","CANCEL_LETTER","DRUG_NOTIF_FORM","INITIAL","POST_CLEARANCE_DATA","PRISTINE_PM","PRISTINE_PM_2LANG","BE_CLARIF_RESPONSE","CLIN_CLARIF_RESPONSE","EMAIL_RQ_RESPONSE","LABEL_CLARIF_RESPONSE","NOC_RESPONSE","NOD_RESPONSE","NON_RESPONSE","PROCESSING_CLARIF_RESPONSE","QUAL_CLIN_CLARIF_RESPONSE","QUAL_CLARIF_RESPONSE","SCREENING_ACCEPT_RESPONSE","SCREENING_CLARIF_RESPONSE","SDN_RESPONSE","PHONE_RQ_RESPONSE"]}function getDINAArray(){return["ADMINISTRATIVE","CANCEL_LETTER","DRUG_NOTIF_FORM","INITIAL","POST_CLEARANCE_DATA","PRESUB_MEETING_PKG","PRISTINE_PM","PRISTINE_PM_2LANG","CLIN_CLARIF_RESPONSE","EMAIL_RQ_RESPONSE","LABEL_CLARIF_RESPONSE","PROCESSING_CLARIF_RESPONSE","QUAL_CLIN_CLARIF_RESPONSE","QUAL_CLARIF_RESPONSE","SCREENING_ACCEPT_RESPONSE","SCREENING_CLARIF_RESPONSE","PHONE_RQ_RESPONSE","UNSOLICITED_DATA"]}function getDINBArray(){return["ADMINISTRATIVE","CANCEL_LETTER","DRUG_NOTIF_FORM","INITIAL","POST_CLEARANCE_DATA","PRESUB_MEETING_PKG","PRISTINE_PM","PRISTINE_PM_2LANG","CLIN_CLARIF_RESPONSE","EMAIL_RQ_RESPONSE","LABEL_CLARIF_RESPONSE","PROCESSING_CLARIF_RESPONSE","QUAL_CLIN_CLARIF_RESPONSE","QUAL_CLARIF_RESPONSE","SCREENING_ACCEPT_RESPONSE","SCREENING_CLARIF_RESPONSE","PHONE_RQ_RESPONSE","UNSOLICITED_DATA"]}function getEUNDSArray(){return["ADMINISTRATIVE","CANCEL_LETTER","COMMENTS_SUMMARY_BASIS","DRUG_NOTIF_FORM","INITIAL","POST_CLEARANCE_DATA","PRISTINE_PM","PRISTINE_PM_2LANG","CLIN_CLARIF_RESPONSE","EMAIL_RQ_RESPONSE","LABEL_CLARIF_RESPONSE","NOC_RESPONSE","NOD_RESPONSE","NON_RESPONSE","PROCESSING_CLARIF_RESPONSE","QUAL_CLIN_CLARIF_RESPONSE","QUAL_CLARIF_RESPONSE","SCREENING_ACCEPT_RESPONSE","SCREENING_CLARIF_RESPONSE","SDN_RESPONSE","PHONE_RQ_RESPONSE","UNSOLICITED_DATA"]}function getEUSNDSArray(){return["ADMINISTRATIVE","CANCEL_LETTER","COMMENTS_SUMMARY_BASIS","DRUG_NOTIF_FORM","POST_CLEARANCE_DATA","POST_NOC_CHANGE","PRISTINE_PM","PRISTINE_PM_2LANG","CLIN_CLARIF_RESPONSE","EMAIL_RQ_RESPONSE","LABEL_CLARIF_RESPONSE","NOC_RESPONSE","NOD_RESPONSE","NON_RESPONSE","PROCESSING_CLARIF_RESPONSE","QUAL_CLIN_CLARIF_RESPONSE","QUAL_CLARIF_RESPONSE","SCREENING_ACCEPT_RESPONSE","SCREENING_CLARIF_RESPONSE","SDN_RESPONSE","PHONE_RQ_RESPONSE","UNSOLICITED_DATA"]}function getLevel3Array(){return["CANCEL_LETTER","EMAIL_RQ_RESPONSE","PROCESSING_CLARIF_RESPONSE","PHONE_RQ_RESPONSE","YEAR_LIST_OF_CHANGE"]}function getNCArray(){return["ADMINISTRATIVE","CANCEL_LETTER","COMMENTS_SUMMARY_BASIS","DRUG_NOTIF_FORM","POST_CLEARANCE_DATA","POST_NOC_CHANGE","PRESUB_MEETING_PKG","PRISTINE_PM","PRISTINE_PM_2LANG","CLIN_CLARIF_RESPONSE","EMAIL_RQ_RESPONSE","LABEL_CLARIF_RESPONSE","NOL_RESPONSE","PROCESSING_CLARIF_RESPONSE","QUAL_CLIN_CLARIF_RESPONSE","QUAL_CLARIF_RESPONSE","SCREENING_ACCEPT_RESPONSE","SCREENING_CLARIF_RESPONSE","SDN_RESPONSE","PHONE_RQ_RESPONSE","UNSOLICITED_DATA"]}function getNDSArray(){return["CANCEL_LETTER","COMMENTS_NOC","COMMENTS_SUMMARY_BASIS","DRUG_NOTIF_FORM","INITIAL","POST_CLEARANCE_DATA","PRESUB_MEETING_PKG","PRIORITY_REVIEW_RQ","PRISTINE_PM","PRISTINE_PM_2LANG","BE_CLARIF_RESPONSE","CLIN_CLARIF_RESPONSE","EMAIL_RQ_RESPONSE","LABEL_CLARIF_RESPONSE","NOC_RESPONSE","NOD_RESPONSE","NON_RESPONSE","PROCESSING_CLARIF_RESPONSE","QUAL_CLIN_CLARIF_RESPONSE","QUAL_CLARIF_RESPONSE","SCREENING_ACCEPT_RESPONSE","SCREENING_CLARIF_RESPONSE","SDN_RESPONSE","PHONE_RQ_RESPONSE","UNSOLICITED_DATA"]}function getPDCArray(){return["CANCEL_LETTER","POST_AUTH_DIV1_CHANGE","EMAIL_RQ_RESPONSE","PROCESSING_CLARIF_RESPONSE","PHONE_RQ_RESPONSE"]}function getPDCBArray(){return["CANCEL_LETTER","POST_AUTH_DIV1_CHANGE","EMAIL_RQ_RESPONSE","PROCESSING_CLARIF_RESPONSE","PHONE_RQ_RESPONSE"]}function getPSURCArray(){return["CANCEL_LETTER","FOR_PERIOD","CLIN_CLARIF_RESPONSE","EMAIL_RQ_RESPONSE","PROCESSING_CLARIF_RESPONSE","PHONE_RQ_RESPONSE"]}function getPSURPVArray(){return["CANCEL_LETTER","FOR_PERIOD","EMAIL_RQ_RESPONSE","PROCESSING_CLARIF_RESPONSE","PHONE_RQ_RESPONSE"]}function getRMPPVArray(){return["CANCEL_LETTER","EMAIL_RQ_RESPONSE","PROCESSING_CLARIF_RESPONSE","PHONE_RQ_RESPONSE","RMP_VERSION_DATE"]}function getSANDSArray(){return["ADMINISTRATIVE","CANCEL_LETTER","DRUG_NOTIF_FORM","POST_CLEARANCE_DATA","POST_NOC_CHANGE","PRISTINE_PM","PRISTINE_PM_2LANG","BE_CLARIF_RESPONSE","CLIN_CLARIF_RESPONSE","EMAIL_RQ_RESPONSE","LABEL_CLARIF_RESPONSE","NOC_RESPONSE","NOD_RESPONSE","NON_RESPONSE","PROCESSING_CLARIF_RESPONSE","QUAL_CLIN_CLARIF_RESPONSE","QUAL_CLARIF_RESPONSE","SCREENING_ACCEPT_RESPONSE","SCREENING_CLARIF_RESPONSE","SDN_RESPONSE","PHONE_RQ_RESPONSE","UNSOLICITED_DATA"]}function getSNDSArray(){return["ADMINISTRATIVE","CANCEL_LETTER","COMMENTS_SUMMARY_BASIS","DRUG_NOTIF_FORM","POST_CLEARANCE_DATA","POST_NOC_CHANGE","PRESUB_MEETING_PKG","PRIORITY_REVIEW_RQ","PRISTINE_PM","PRISTINE_PM_2LANG","BE_CLARIF_RESPONSE","CLIN_CLARIF_RESPONSE","EMAIL_RQ_RESPONSE","LABEL_CLARIF_RESPONSE","NOC_RESPONSE","NOD_RESPONSE","NON_RESPONSE","PROCESSING_CLARIF_RESPONSE","QUAL_CLIN_CLARIF_RESPONSE","QUAL_CLARIF_RESPONSE","SCREENING_ACCEPT_RESPONSE","SCREENING_CLARIF_RESPONSE","SDN_RESPONSE","PHONE_RQ_RESPONSE","UNSOLICITED_DATA"]}function getSNDSCArray(){return["CANCEL_LETTER","POST_NOC_CHANGE","PRISTINE_PM","PRISTINE_PM_2LANG","CLIN_CLARIF_RESPONSE","EMAIL_RQ_RESPONSE","LABEL_CLARIF_RESPONSE","NOC_RESPONSE","NOD_RESPONSE","NON_RESPONSE","PROCESSING_CLARIF_RESPONSE","PHONE_RQ_RESPONSE","RISK_COMMUN_DOC","SIGNAL_WORK_UP"]}function getUDPVArray(){return["BENEFIT_RISK_ASSESS","CANCEL_LETTER","NOTIFICATION_CHANGE","POST_MARKET_SURV","EMAIL_RQ_RESPONSE","MHPD_RQ_RESPONSE","PROCESSING_CLARIF_RESPONSE","PHONE_RQ_RESPONSE","RISK_COMMUN_DOC","SIGNAL_WORK_UP"]}function getUDRAVArray(){return["CANCEL_LETTER","DIN_DISCONTINUED","ADVISEMENT_LETTER_RESPONSE","EMAIL_RQ_RESPONSE","PROCESSING_CLARIF_RESPONSE","PHONE_RQ_RESPONSE","UNSOLICITED_DATA"]}function getConsultArray(){return["PANDEMIC_APPL"]}function _getMPNCArray(){return["CANCEL_LETTER","MEETING_MINUTES","EMAIL_RQ_RESPONSE","PROCESSING_CLARIF_RESPONSE","PHONE_RQ_RESPONSE","PRESUB_MEETING_PKG","PRESUB_MEETING_RQ"]}function _getMPNDSArray(){return["CANCEL_LETTER","MEETING_MINUTES","EMAIL_RQ_RESPONSE","PROCESSING_CLARIF_RESPONSE","PHONE_RQ_RESPONSE","PRESUB_MEETING_PKG","PRESUB_MEETING_RQ"]}function _getMPSNDSArray(){return["CANCEL_LETTER","MEETING_MINUTES","EMAIL_RQ_RESPONSE","PROCESSING_CLARIF_RESPONSE","PHONE_RQ_RESPONSE","PRESUB_MEETING_PKG","PRESUB_MEETING_RQ"]}function _getPANDArray(){return["CANCEL_LETTER","EMAIL_RQ_RESPONSE","PROCESSING_CLARIF_RESPONSE","PHONE_RQ_RESPONSE"]}function _getPBRERCArray(){return["CANCEL_LETTER","EMAIL_RQ_RESPONSE","PROCESSING_CLARIF_RESPONSE","PHONE_RQ_RESPONSE"]}function _getPBRERPVArray(){return["CANCEL_LETTER","EMAIL_RQ_RESPONSE","PROCESSING_CLARIF_RESPONSE","PHONE_RQ_RESPONSE"]}function _getPRNDSArray(){return["CANCEL_LETTER","EMAIL_RQ_RESPONSE","PROCESSING_CLARIF_RESPONSE","PHONE_RQ_RESPONSE"]}function _getPRSNDSArray(){return["CANCEL_LETTER","EMAIL_RQ_RESPONSE","PROCESSING_CLARIF_RESPONSE","PHONE_RQ_RESPONSE"]}function getYBPRArray(){return["CANCEL_LETTER","FOR_PERIOD","EMAIL_RQ_RESPONSE","PROCESSING_CLARIF_RESPONSE","PHONE_RQ_RESPONSE"]}var vm=this;vm.raTypeArray=[];var service={getTransactionDescriptions:getTransactionDescriptionsArray,getActivityTypes:getActivityArray,createRaTypes:_createRaArray,getPresubTypes:getPresubArray,getAndsType:getANDSArray,getDinaType:getDINAArray,getDinbType:getDINBArray,getEundsType:getEUNDSArray,getEusndsType:getEUSNDSArray,getLevel3Type:getLevel3Array,getNcType:getNCArray,getNdsType:getNDSArray,getPdcType:getPDCArray,getPdcBType:getPDCBArray,getPresubType:getPresubArray,getpSurCType:getPSURCArray,getpSurPvType:getPSURPVArray,getRmpPvType:getRMPPVArray,getSandsType:getSANDSArray,getSndsType:getSNDSArray,getSndsCArray:getSNDSCArray,getUdpvType:getUDPVArray,getUdraType:getUDRAVArray,getYbprType:getYBPRArray,getConsultType:getConsultArray,getMPNCType:_getMPNCArray,getMPNDSType:_getMPNDSArray,getMPSNDSType:_getMPSNDSArray,getPANDType:_getPANDArray,getPBRERCType:_getPBRERCArray,getPBRERPVType:_getPBRERPVArray,getPRNDSType:_getPRNDSArray,getPRSNDSType:_getPRSNDSArray,getYesNoList:yesNoArray};return service}angular.module("services").factory("TransactionLists",getTransactionSeq),getTransactionSeq.inject=["$http","$q"]}(),function(){"use strict";angular.module("applicationInfoService",[])}(),function(){"use strict";function ApplicationInfoService(){function ApplicationInfoService(){}return ApplicationInfoService.prototype.getTodayDate=function(){function pad(n){return n<10?"0"+n:n}var d=new Date,isoDate=d.getFullYear()+"-"+pad(d.getMonth()+1)+"-"+pad(d.getDate());return isoDate},ApplicationInfoService.prototype.incrementMinorVersion=function(enrolmentVersion){var result;if(enrolmentVersion){var parts=enrolmentVersion.split("."),dec=parseInt(parts[1]);result=parts[0]+"."+(dec+1)}else result="0.1";return result},ApplicationInfoService.prototype.incrementMajorVersion=function(enrolmentVersion){var result;if(enrolmentVersion){var parts=enrolmentVersion.split("."),whole=parseInt(parts[0]);result=whole+1+".0"}else result="1.0";return result},ApplicationInfoService.prototype.getApplicationStatusList=function(){return["NEW","AMEND","APPROVED"]},ApplicationInfoService.prototype.getApprovedType=function(){return"APPROVED"},ApplicationInfoService.prototype.getAmendType=function(){return"AMEND"},ApplicationInfoService}angular.module("applicationInfoService").factory("ApplicationInfoService",ApplicationInfoService)}(),function(){"use strict";angular.module("dossierService",["dossierDataLists","hpfbConstants","dataLists"])}(),function(){"use strict";function DossierService(DossierLists,$translate,$filter,getCountryAndProvinces,OTHER,UNKNOWN,YES,NO){function DossierService(){}function DossierService(dossierData){angular.extend(this._default,dossierData)}function getContactList(contacts){var list=[];if(angular.isDefined(contacts)){contacts instanceof Array||(contacts=[contacts]);for(var i=0;i<contacts.length;i++){var contact={};contact.amend="Y"===contacts[i].amend_record,contact.repRole=contacts[i].rep_contact_role,contact.salutation=contacts[i].rep_contact_details.salutation,contact.givenName=contacts[i].rep_contact_details.given_name,contact.surname=contacts[i].rep_contact_details.surname,contact.initials=contacts[i].rep_contact_details.initials,contact.title=contacts[i].rep_contact_details.job_title,contact.phone=contacts[i].rep_contact_details.phone_num,contact.phoneExt=contacts[i].rep_contact_details.phone_ext,contact.fax=contacts[i].rep_contact_details.fax_num,contact.email=contacts[i].rep_contact_details.email,contact.language=contacts[i].rep_contact_details.language_correspondance,list.push(contact)}}return list}function getDiseaseDisorderList(info,diseaseList){if(info&&diseaseList){for(var i=0;i<diseaseList.length;i++){var checkboxRec=diseaseList[i];switch(checkboxRec.name){case"acute-alcohol":checkboxRec.value="Y"===info.acute_alcohol;break;case"acute-anxiety":checkboxRec.value="Y"===info.acute_anxiety;break;case"acute-infectious":checkboxRec.value="Y"===info.acute_infectious;break;case"acute-inflammatory":checkboxRec.value="Y"===info.acute_inflammatory;break;case"acute-psychotic":checkboxRec.value="Y"===info.acute_psychotic;break;case"addiction":checkboxRec.value="Y"===info.addiction;break;case"ateriosclerosis":checkboxRec.value="Y"===info.ateriosclerosis;break;case"appendicitis":checkboxRec.value="Y"===info.appendicitis;break;case"asthma":checkboxRec.value="Y"===info.asthma;break;case"cancer":checkboxRec.value="Y"===info.cancer;break;case"congest-heart-fail":checkboxRec.value="Y"===info.congest_heart_fail;break;case"convulsions":checkboxRec.value="Y"===info.convulsions;break;case"dementia":checkboxRec.value="Y"===info.dementia;break;case"depression":checkboxRec.value="Y"===info.depression;break;case"diabetes":checkboxRec.value="Y"===info.diabetes;break;case"gangrene":checkboxRec.value="Y"===info.gangrene;break;case"glaucoma":checkboxRec.value="Y"===info.glaucoma;break;case"haematologic-bleeding":checkboxRec.value="Y"===info.haematologic_bleeding;break;case"hepatitis":checkboxRec.value="Y"===info.hepatitis;break;case"hypertension":checkboxRec.value="Y"===info.hypertension;break;case"nausea-pregnancy":checkboxRec.value="Y"===info.nausea_pregnancy;break;case"obesity":checkboxRec.value="Y"===info.obesity;break;case"rheumatic-fever":checkboxRec.value="Y"===info.rheumatic_fever;break;case"septicemia":checkboxRec.value="Y"===info.septicemia;break;case"sex-transmit-disease":checkboxRec.value="Y"===info.sex_transmit_disease;break;case"strangulated-hernia":checkboxRec.value="Y"===info.strangulated_hernia;break;case"thrombotic-embolic-disorder":checkboxRec.value="Y"===info.thrombotic_embolic_disorder;break;case"thyroid-disease":checkboxRec.value="Y"===info.thyroid_disease;break;case"ulcer-gastro":checkboxRec.value="Y"===info.ulcer_gastro}}return diseaseList}}function getTherapeuticList(input){var list="";if(input instanceof Array||(input=[input]),input){list=[];for(var i=0;i<input.length;i++){var item={id:""+i+1,name:input[i]};list.push(item)}}return list}function getCanRefProductList(info){var list=[];if(angular.isDefined(info)){info instanceof Array||(info=[info]);for(var i=0;i<info.length;i++){var product={};if(product.brandName=info[i].brand_name,product.ingId=info[i].ingredient_id,product.ingLabel=info[i].ingredient_name,product.autoIngred=YES,product.ingId||(product.autoIngred=NO),product.dosageForm="",info[i].dosage_form){var dosageValue=DossierLists.getDosageFormPrefix()+info[i].dosage_form.__text;info[i].dosage_form.__text===OTHER&&(dosageValue=info[i].dosage_form.__text),product.dosageForm=$filter("findListItemById")(DossierLists.getDosageFormList(),{id:dosageValue})}if(product.dosageFormOther=info[i].dosage_form_other,product.strengths=Number(info[i].strengths),product.units="",info[i].units){var unitsValue=DossierLists.getUnitsPrefix()+info[i].units.__text;info[i].units.__text===OTHER&&(unitsValue=info[i].units.__text),product.units=$filter("findListItemById")(DossierLists.getUnitsList(),{id:unitsValue})}product.otherUnits=info[i].units_other,product.per=info[i].per,product.companyName=info[i].company_name,list.push(product)}}return list}function getAppendix4IngredientList(info){var list=[],getCountries=function(input){var list=[];input instanceof Array||(input=[input]);for(var i=0;i<input.length;i++){var obj={id:i,country:"",display:"",unknownCountryDetails:""};input[i].country_with_unknown.__text===UNKNOWN?obj.country=getCountryAndProvinces.getUnknownCountryRecord():obj.country=$filter("filter")(getCountryAndProvinces.getCountries(),{id:input[i].country_with_unknown.__text})[0],obj.country&&(obj.display=obj.country.id),obj.unknownCountryDetails=input[i].unknown_country_details,list.push(obj)}return list};if(angular.isDefined(info)){info instanceof Array||(info=[info]);for(var i=0;i<info.length;i++){var ing={};ing.id=info[i].ingredient_id,ing.ingredientName=info[i].ingredient_name,ing.humanSourced="Y"===info[i].human_sourced,ing.animalSourced="Y"===info[i].animal_sourced;var tissues=info[i].tissues_fluids_section,srcAnimal=info[i].animal_sourced_section;if(tissues&&(ing.tissuesFluidsOrigin={},ing.tissuesFluidsOrigin.tissuesList=_getTissuesFluidsModel(tissues)),srcAnimal){ing.sourceAnimalDetails=createEmptyAnimalSourceModel(),ing.sourceAnimalDetails.isCellLine=info[i].animal_sourced_section.is_cell_line,ing.sourceAnimalDetails.isBiotechDerived=info[i].animal_sourced_section.is_biotech_derived,ing.sourceAnimalDetails.isControlledPop=info[i].animal_sourced_section.is_controlled_pop,ing.sourceAnimalDetails.ageAnimals=Number(info[i].animal_sourced_section.animal_age);var animalTypeList=info[i].animal_sourced_section.animal_src_record;animalTypeList instanceof Array||(animalTypeList=[animalTypeList]);for(var srcCount=0;srcCount<animalTypeList.length;srcCount++){var oneRec=animalTypeList[srcCount],animalRecord={};animalRecord.animalType=oneRec.animal_type,
animalRecord.animalDetail=oneRec.animal_detail,ing.sourceAnimalDetails.animalSrcList.push(animalRecord)}ing.sourceAnimalDetails.countryList=getCountries(info[i].animal_sourced_section.country_origin_list.country_origin)}list.push(ing)}}return list}function getFormulationList(list){var formulationList=[];return list&&0!==list.length?(list instanceof Array||(list=[list]),angular.forEach(list,function(item){var obj={formulationId:item.formulation_id,formulationName:item.formulation_name};if(item.dosage_form_group.dosage_form){var dosageFormObj=$filter("findListItemById")(DossierLists.getDosageFormList(),{id:DossierLists.getDosageFormPrefix()+item.dosage_form_group.dosage_form.__text});obj.dosageForm=dosageFormObj}else obj.dosageForm=item.dosage_form_group.dosage_form;obj.dosageFormOther=item.dosage_form_group.dosage_form_other,item.nonmedicinal_ingredient?obj.nMedIngList=getNonMedIngList(item.nonmedicinal_ingredient):obj.nMedIngList=[],item.active_ingredient?obj.activeIngList=getActiveIngList(item.active_ingredient):obj.animalHumanMaterials=[],item.container_group&&item.container_group.container_details?obj.containerTypes=getContainerTypeList(item.container_group.container_details):obj.containerTypes=[],item.material_ingredient?obj.animalHumanMaterials=getMaterialList(item.material_ingredient):obj.animalHumanMaterials=[],item.roa_group&&item.roa_group.roa_details?obj.routeAdmins=getRouteAdminList(item.roa_group.roa_details):obj.routeAdmins=[],item.country_group&&item.country_group.country_manufacturer?obj.countryList=getFormulationCountryList(item.country_group.country_manufacturer):obj.countryList=[],formulationList.push(obj)}),formulationList):formulationList}function getActiveIngList(list){var resultList=[];return list instanceof Array||(list=[list]),angular.forEach(list,function(item){var obj={ingId:item.ingredient_id,ingLabel:item.ingredient_name,autoIngred:YES,cas:item.cas_number,humanAnimalSourced:item.is_human_animal_src,standard:item.ingred_standard,strength:Number(item.strength),per:item.per,units:"",otherUnits:item.units_other,calcAsBase:item.is_base_calc,nanoMaterial:"",nanoMaterialOther:item.nanomaterial_details};if(item.units){var unitsValue=DossierLists.getUnitsPrefix()+item.units.__text;item.units.__text===OTHER&&(unitsValue=item.units.__text),obj.units=$filter("findListItemById")(DossierLists.getUnitsList(),{id:unitsValue})}if(item.is_nanomaterial){var nanoValue=DossierLists.getNanoPrefix()+item.is_nanomaterial.__text;item.is_nanomaterial.__text===OTHER&&(nanoValue=item.is_nanomaterial.__text),obj.nanoMaterial=$filter("findListItemById")(DossierLists.getNanoMaterials(),{id:nanoValue})}obj.ingId?obj.autoIngred=YES:obj.autoIngred=NO,resultList.push(obj)}),resultList}function getNonMedIngList(list){var resultList=[];return list instanceof Array||(list=[list]),angular.forEach(list,function(item){var obj={ingId:item.ingredient_id,varId:item.variant_name,ingName:item.ingredient_name,cas:item.cas_number,humanAnimalSourced:item.is_human_animal_src,standard:item.ingred_standard,strength:Number(item.strength),per:item.per,units:"",otherUnits:item.units_other,calcAsBase:item.is_base_calc,nanoMaterial:"",nanoMaterialOther:item.nanomaterial_details};if(item.units){var unitsValue=DossierLists.getUnitsPrefix()+item.units.__text;item.units.__text===OTHER&&(unitsValue=item.units.__text),obj.units=$filter("findListItemById")(DossierLists.getUnitsList(),{id:unitsValue})}if(item.is_nanomaterial){var nanoValue=DossierLists.getNanoPrefix()+item.is_nanomaterial.__text;item.is_nanomaterial.__text===OTHER&&(nanoValue=item.is_nanomaterial.__text),obj.nanoMaterial=$filter("findListItemById")(DossierLists.getNanoMaterials(),{id:nanoValue})}resultList.push(obj)}),resultList}function getContainerTypeList(list){var resultList=[];return list instanceof Array||(list=[list]),angular.forEach(list,function(item){var obj={containerType:item.container_type,packageSize:item.package_size,shelfLifeYears:Number(item.shelf_life_years),shelfLifeMonths:Number(item.shelf_life_months),tempMin:Number(item.temperature_min),tempMax:Number(item.temperature_max)};resultList.push(obj)}),resultList}function getMaterialList(list){var resultList=[];return list instanceof Array||(list=[list]),angular.forEach(list,function(item){var obj={ingredientId:item.ingredient_id,ingredientName:item.ingredient_name,cas:item.cas_number,ingredientStandard:item.ingred_standard,inFinalContainer:item.in_final_container};resultList.push(obj)}),resultList}function getRouteAdminList(list){list instanceof Array||(list=[list]);var resultList=[],_id=0;return angular.forEach(list,function(item){var roaValue=DossierLists.getRoaPrefix()+item.roa.__text;item.roa.__text===OTHER&&(roaValue=item.roa.__text);var roaObj=$filter("findListItemById")(DossierLists.getRoa(),{id:roaValue});_id+=1;var obj={id:_id,roa:roaObj,otherRoaDetails:item.roa_other,display:roaObj.id};resultList.push(obj)}),resultList}function getFormulationCountryList(list){var resultList=[],_id=0;return list instanceof Array||(list=[list]),angular.forEach(list,function(item){_id+=1;var obj={id:_id,country:"",display:"",unknownCountryDetails:""};item.__text===UNKNOWN?obj.country=getCountryAndProvinces.getUnknownCountryRecord():obj.country=$filter("filter")(getCountryAndProvinces.getCountries(),{id:item.__text})[0],obj.country&&(obj.display=obj.country.id),resultList.push(obj)}),resultList}function canRefProductListToOutput(info){var resultList=[];if(angular.isDefined(info))for(var i=0;i<info.length;i++){var product={};if(product.brand_name=info[i].brandName,info[i].ingId&&info[i].ingId!==info[i].ingLabel?(product.ingredient_id="",product.ingredient_name=info[i].ingLabel):(product.ingredient_id=info[i].ingId,product.ingredient_name=info[i].ingLabel),info[i].dosageForm){var splitArray=info[i].dosageForm.id.split(DossierLists.getDosageFormPrefix()),newDosage=splitArray[splitArray.length-1];product.dosage_form={_label_en:info[i].dosageForm.en,_label_fr:info[i].dosageForm.fr,__text:newDosage}}product.dosage_form_other=info[i].dosageFormOther,product.strengths=info[i].strengths,product.units=_unitsFldToOutput(info[i].units,DossierLists.getUnitsPrefix()),product.units_other=info[i].otherUnits,product.per=info[i].per,product.company_name=info[i].companyName,resultList.push(product)}return resultList}function appendix4IngredientListToOutput(info){var appendices=[];if(!angular.isDefined(info))return null;for(var i=0;i<info.length;i++){var ing={};if(ing.ingredient_id=info[i].id,ing.ingredient_name=info[i].ingredientName,ing.animal_sourced=info[i].animalSourced===!0?"Y":"N",ing.human_sourced=info[i].humanSourced===!0?"Y":"N",info[i].tissuesFluidsOrigin){ing.tissues_fluids_section={};for(var b=0;b<info[i].tissuesFluidsOrigin.tissuesList.length;b++){switch(info[i].tissuesFluidsOrigin.tissuesList[b].systemType){case DossierLists.getNervousSystemValue():ing.tissues_fluids_section.nervous_system=_nervousSystemToOutput(info[i].tissuesFluidsOrigin.tissuesList[b].system);break;case DossierLists.getDigestiveSystemValue():ing.tissues_fluids_section.digestive_system=_digestiveSystemToOutput(info[i].tissuesFluidsOrigin.tissuesList[b].system);break;case DossierLists.getImmuneSystemValue():ing.tissues_fluids_section.immune_system=_immuneSystemToOutput(info[i].tissuesFluidsOrigin.tissuesList[b].system);break;case DossierLists.getSkinSystemValue():ing.tissues_fluids_section.skin_system=_skinSystemToOutput(info[i].tissuesFluidsOrigin.tissuesList[b].system);break;case DossierLists.getMuscleSystemValue():ing.tissues_fluids_section.musculo_system=_muscleSystemToOutput(info[i].tissuesFluidsOrigin.tissuesList[b].system);break;case DossierLists.getOtherTissuesSystemValue():ing.tissues_fluids_section.other_system=_otherSystemToOutput(info[i].tissuesFluidsOrigin.tissuesList[b].system);break;case DossierLists.getReproductiveSystemValue():ing.tissues_fluids_section.reproductive_system=_reproductiveSystemToOutput(info[i].tissuesFluidsOrigin.tissuesList[b].system);break;case DossierLists.getCardioSystemValue():ing.tissues_fluids_section.cardio_system=_cardioSystemToOutput(info[i].tissuesFluidsOrigin.tissuesList[b].system)}}}if(info[i].sourceAnimalDetails){ing.animal_sourced_section=createEmptyAnimalSourceForOutput(),ing.animal_sourced_section.is_cell_line=info[i].sourceAnimalDetails.isCellLine,ing.animal_sourced_section.is_biotech_derived=info[i].sourceAnimalDetails.isBiotechDerived,ing.animal_sourced_section.is_controlled_pop=info[i].sourceAnimalDetails.isControlledPop,ing.animal_sourced_section.animal_age=info[i].sourceAnimalDetails.ageAnimals;for(var animalSrcObj=info[i].sourceAnimalDetails,srcCount=0;srcCount<animalSrcObj.animalSrcList.length;srcCount++){var oneRec=animalSrcObj.animalSrcList[srcCount],srcRecordOut={};srcRecordOut.animal_type=oneRec.animalType,srcRecordOut.animal_detail=oneRec.animalDetail,ing.animal_sourced_section.animal_src_record.push(srcRecordOut)}for(var countries=info[i].sourceAnimalDetails.countryList,v=0;v<countries.length;v++){var countryRecord={};countryRecord.country_with_unknown={_label_en:"",_label_fr:"",__text:""},countries[v].country&&(countryRecord.country_with_unknown._label_en=countries[v].country.en,countryRecord.country_with_unknown._label_fr=countries[v].country.fr,countryRecord.country_with_unknown.__text=countries[v].country.id),countryRecord.unknown_country_details=countries[v].unknownCountryDetails,ing.animal_sourced_section.country_origin_list.country_origin.push(countryRecord)}}appendices.push(ing)}return appendices}function formulationListToOutput(list){var formulationList=[];return angular.forEach(list,function(item){var obj={formulation_name:item.formulationName,formulation_id:item.formulationId};if(obj.dosage_form_group={},item.dosageForm){var splitArray=item.dosageForm.id.split(DossierLists.getDosageFormPrefix()),newDosage=splitArray[splitArray.length-1];obj.dosage_form_group.dosage_form={_label_en:item.dosageForm.en,_label_fr:item.dosageForm.fr,__text:newDosage}}obj.dosage_form_group.dosage_form_other=item.dosageFormOther,obj.roa_group={},item.routeAdmins&&item.routeAdmins.length>0&&(obj.roa_group.roa_details=routeAdminToOutput(item.routeAdmins)),obj.container_group={},item.containerTypes&&item.containerTypes.length>0&&(obj.container_group.container_details=containerTypeListToOutput(item.containerTypes)),obj.country_group={},item.countryList&&item.countryList.length>0&&(obj.country_group.country_manufacturer=formulationCountryListToOutput(item.countryList)),item.activeIngList&&item.activeIngList.length>0&&(obj.active_ingredient=activeListToOutput(item.activeIngList)),item.nMedIngList&&item.nMedIngList.length>0&&(obj.nonmedicinal_ingredient=nonMedIngListToOutput(item.nMedIngList)),item.animalHumanMaterials&&item.animalHumanMaterials.length>0&&(obj.material_ingredient=materialListToOutput(item.animalHumanMaterials)),formulationList.push(obj)}),formulationList}function activeListToOutput(activeList){var resultList=[];return angular.forEach(activeList,function(item){var obj={ingredient_id:item.ingId,ingredient_name:item.ingLabel,cas_number:item.cas,ingred_standard:item.standard,is_human_animal_src:item.humanAnimalSourced,strength:item.strength,per:item.per,units:"",units_other:item.otherUnits,is_base_calc:item.calcAsBase,is_nanomaterial:"",nanomaterial_details:item.nanoMaterialOther};obj.units=_unitsFldToOutput(item.units,DossierLists.getUnitsPrefix()),obj.is_nanomaterial=_unitsFldToOutput(item.nanoMaterial,DossierLists.getNanoPrefix()),resultList.push(obj)}),resultList}function _unitsFldToOutput(unitsObj,prefix){var newObj={_label_en:"",_label_fr:"",__text:""};if(!unitsObj||!prefix)return"";var splitArray=unitsObj.id.split(prefix),newUnits=splitArray[splitArray.length-1];return newObj._label_en=unitsObj.en,newObj._label_fr=unitsObj.fr,newObj.__text=newUnits,newObj}function nonMedIngListToOutput(nonMedList){var resultList=[];return angular.forEach(nonMedList,function(item){var obj={ingredient_id:item.ingId,ingredient_name:item.ingName,cas_number:item.cas,ingred_standard:item.standard,is_human_animal_src:item.humanAnimalSourced,variant_name:item.varId,strength:item.strength,per:item.per,units:"",units_other:item.otherUnits,is_base_calc:item.calcAsBase,is_nanomaterial:"",nanomaterial_details:item.nanoMaterialOther};obj.units=_unitsFldToOutput(item.units,DossierLists.getUnitsPrefix()),obj.is_nanomaterial=_unitsFldToOutput(item.nanoMaterial,DossierLists.getNanoPrefix()),resultList.push(obj)}),resultList}function containerTypeListToOutput(containerList){var resultList=[];return angular.forEach(containerList,function(item){var obj={container_type:item.containerType,package_size:item.packageSize,shelf_life_years:item.shelfLifeYears,shelf_life_months:item.shelfLifeMonths,temperature_min:item.tempMin,temperature_max:item.tempMax};resultList.push(obj)}),resultList}function materialListToOutput(list){var resultList=[];return angular.forEach(list,function(item){var obj={ingredient_id:item.ingredientId,ingredient_name:item.ingredientName,cas_number:item.cas,ingred_standard:item.ingredientStandard,in_final_container:item.inFinalContainer};resultList.push(obj)}),resultList}function routeAdminToOutput(list){var resultList=[];return angular.forEach(list,function(item){if(angular.isObject(item.roa)){var splitArray=item.roa.id.split(DossierLists.getRoaPrefix()),newRoa=splitArray[splitArray.length-1],obj={roa:{_label_en:item.roa.en,_label_fr:item.roa.fr,__text:newRoa},roa_other:item.otherRoaDetails};resultList.push(obj)}}),resultList}function formulationCountryListToOutput(list){var resultList=[];return angular.forEach(list,function(item){var country={_label_en:item.country.en,_label_fr:item.country.fr,__text:item.country.id};resultList.push(country)}),resultList}function repContactToOutput(contactList){var resultList=[];return angular.forEach(contactList,function(item){var obj={};obj.amend_record=item.amend?"Y":"N",obj.rep_contact_role=item.repRole,obj.rep_contact_details={},obj.rep_contact_details.salutation=item.salutation,obj.rep_contact_details.given_name=item.givenName,obj.rep_contact_details.initials=item.initials,obj.rep_contact_details.surname=item.surname,obj.rep_contact_details.job_title=item.title,obj.rep_contact_details.language_correspondance=item.language,obj.rep_contact_details.phone_num=item.phone,obj.rep_contact_details.phone_ext=item.phoneExt,obj.rep_contact_details.fax_num=item.fax,obj.rep_contact_details.email=item.email,resultList.push(obj)}),resultList}function therapeuticClassToOutput(jsonObj){for(var resultList=[],i=0;i<jsonObj.length;i++)resultList.push(jsonObj[i].name);return resultList}function scheduleAToOutput(jsonObj){var result=createEmptyScheduleAForOutput();result.din_number=jsonObj.drugIdNumber;for(var disorderList=jsonObj.diseaseDisorderList,i=0;i<disorderList.length;i++)switch(disorderList[i].name){case"acute-alcohol":result.acute_alcohol=disorderList[i].value===!0?"Y":"N";break;case"acute-anxiety":result.acute_anxiety=disorderList[i].value===!0?"Y":"N";break;case"acute-infectious":result.acute_infectious=disorderList[i].value===!0?"Y":"N";break;case"acute-inflammatory":result.acute_inflammatory=disorderList[i].value===!0?"Y":"N";break;case"acute-psychotic":result.acute_psychotic=disorderList[i].value===!0?"Y":"N";break;case"addiction":result.addiction=disorderList[i].value===!0?"Y":"N";break;case"ateriosclerosis":result.ateriosclerosis=disorderList[i].value===!0?"Y":"N";break;case"appendicitis":result.appendicitis=disorderList[i].value===!0?"Y":"N";break;case"asthma":result.asthma=disorderList[i].value===!0?"Y":"N";break;case"cancer":result.cancer=disorderList[i].value===!0?"Y":"N";break;case"congest-heart-fail":result.congest_heart_fail=disorderList[i].value===!0?"Y":"N";break;case"convulsions":result.convulsions=disorderList[i].value===!0?"Y":"N";break;case"dementia":result.dementia=disorderList[i].value===!0?"Y":"N";break;case"depression":result.depression=disorderList[i].value===!0?"Y":"N";break;case"diabetes":result.diabetes=disorderList[i].value===!0?"Y":"N";break;case"gangrene":result.gangrene=disorderList[i].value===!0?"Y":"N";break;case"glaucoma":result.glaucoma=disorderList[i].value===!0?"Y":"N";break;case"haematologic-bleeding":result.haematologic_bleeding=disorderList[i].value===!0?"Y":"N";break;case"hepatitis":result.hepatitis=disorderList[i].value===!0?"Y":"N";break;case"hypertension":result.hypertension=disorderList[i].value===!0?"Y":"N";break;case"nausea-pregnancy":result.nausea_pregnancy=disorderList[i].value===!0?"Y":"N";break;case"obesity":result.obesity=disorderList[i].value===!0?"Y":"N";break;case"rheumatic-fever":result.rheumatic_fever=disorderList[i].value===!0?"Y":"N";break;case"septicemia":result.septicemia=disorderList[i].value===!0?"Y":"N";break;case"sex-transmit-disease":result.sex_transmit_disease=disorderList[i].value===!0?"Y":"N";break;case"strangulated-hernia":result.strangulated_hernia=disorderList[i].value===!0?"Y":"N";break;case"thrombotic-embolic-disorder":result.thrombotic_embolic_disorder=disorderList[i].value===!0?"Y":"N";break;case"thyroid-disease":result.thyroid_disease=disorderList[i].value===!0?"Y":"N";break;case"ulcer-gastro":result.ulcer_gastro=disorderList[i].value===!0?"Y":"N"}return result.sched_a_claims_ind_details=jsonObj.scheduleAClaimsIndDetails,result}function createEmptyScheduleAForOutput(){var result={};return result.din_number="",result.acute_alcohol=noValue,result.acute_anxiety=noValue,result.acute_infectious=noValue,result.acute_inflammatory=noValue,result.acute_psychotic=noValue,result.addiction=noValue,result.ateriosclerosis=noValue,result.appendicitis=noValue,result.asthma=noValue,result.cancer=noValue,result.congest_heart_fail=noValue,result.convulsions=noValue,result.dementia=noValue,result.depression=noValue,result.diabetes=noValue,result.gangrene=noValue,result.glaucoma=noValue,result.haematologic_bleeding=noValue,result.hepatitis=noValue,result.hypertension=noValue,result.nausea_pregnancy=noValue,result.obesity=noValue,result.rheumatic_fever=noValue,result.septicemia=noValue,result.sex_transmit_disease=noValue,result.strangulated_hernia=noValue,result.thrombotic_embolic_disorder=noValue,result.thyroid_disease=noValue,result.ulcer_gastro=noValue,result.sched_a_claims_ind_details="",result}function getAppendiceData(appendices){var result={};if(!appendices)return result;for(var i=0;i<appendices.length;i++){var appendix=appendices[i];result[appendix.ingredientName]=i+1}return result}function getAnimalIngredients(formulations){for(var yesValue="Y",allAnimalSourcedNames=[],uniqueList={},i=0;i<formulations.length;i++){var oneFormulation=formulations[i];if(oneFormulation.activeIngList)for(var j=0;j<oneFormulation.activeIngList.length;j++){var oneActive=oneFormulation.activeIngList[j];oneActive.humanAnimalSourced===yesValue&&allAnimalSourcedNames.push(oneActive.ingLabel)}if(oneFormulation.nMedIngList)for(var j=0;j<oneFormulation.nMedIngList.length;j++){var oneActive=oneFormulation.nMedIngList[j];oneActive.humanAnimalSourced===yesValue&&allAnimalSourcedNames.push(oneActive.ingName)}if(oneFormulation.animalHumanMaterials)for(var j=0;j<oneFormulation.animalHumanMaterials.length;j++){var oneActive=oneFormulation.animalHumanMaterials[j];allAnimalSourcedNames.push(oneActive.ingredientName)}}return uniqueList=getUniqueList(allAnimalSourcedNames)}function getMissingAppendices(appendiceList,ingredientJsonList){for(var missingList=[],i=0;i<ingredientJsonList.length;i++)appendiceList.hasOwnProperty(ingredientJsonList[i])?appendiceList[ingredientJsonList[i]]=0:missingList.push(ingredientJsonList[i]);return missingList}function findExtraApppendices(appendixJson){for(var extraList=[],keys=Object.keys(appendixJson),i=0;i<keys.length;i++){var val=appendixJson[keys[i]];val>0&&extraList.push(keys[i])}return extraList}function getUniqueList(arr){for(var u={},a=[],i=0,l=arr.length;i<l;++i)u.hasOwnProperty(arr[i])||(a.push(arr[i]),u[arr[i]]=1);return a}function getDefaultSchedA(){var schedA={};return schedA.drugIdNumber="",schedA.scheduleAClaimsIndDetails="",schedA.diseaseDisorderList=getDefaultDiseaseDisorderList(),schedA}function getDefaultDiseaseDisorderList(){var noModelValue=!1;return[{name:"acute-alcohol",label:"ACUTEALCOHOL",value:noModelValue},{name:"acute-anxiety",label:"ACUTEANXIETY",value:noModelValue},{name:"acute-infectious",label:"ACUTERESP",value:noModelValue},{name:"acute-inflammatory",label:"ACUTEINFLAM",value:noModelValue},{name:"acute-psychotic",label:"ACUTEPSYCHOTIC",value:noModelValue},{name:"addiction",label:"ADDICTION",value:noModelValue},{name:"ateriosclerosis",label:"ATERIOSCLEROSIS",value:noModelValue},{name:"appendicitis",label:"APPENDICITIS",value:noModelValue},{name:"asthma",label:"ASTHMA",value:noModelValue},{name:"cancer",label:"CANCER",value:noModelValue},{name:"congest-heart-fail",label:"HEARTCONGEST",value:noModelValue},{name:"convulsions",label:"CONVULSIONS",value:noModelValue},{name:"dementia",label:"DEMENTIA",value:noModelValue},{name:"depression",label:"DEPRESSION",value:noModelValue},{name:"diabetes",label:"DIABETES",value:noModelValue},{name:"gangrene",label:"GANGRENE",value:noModelValue},{name:"glaucoma",label:"GLAUCOMA",value:noModelValue},{name:"haematologic-bleeding",label:"BLEEDINGDISORDERS",value:noModelValue},{name:"hepatitis",label:"HEPATITIS",value:noModelValue},{name:"hypertension",label:"HYPERTENSION",value:noModelValue},{name:"nausea-pregnancy",label:"NAUSEAPREG",value:noModelValue},{name:"obesity",label:"OBESITY",value:noModelValue},{name:"rheumatic-fever",label:"RHEUMATICFEVER",value:noModelValue},{name:"septicemia",label:"SEPTICEMIA",value:noModelValue},{name:"sex-transmit-disease",label:"SEXDISEASE",value:noModelValue},{name:"strangulated-hernia",label:"STRANGHERNIA",value:noModelValue},{name:"thrombotic-embolic-disorder",label:"THROMBOTICDISORDER",value:noModelValue},{name:"thyroid-disease",label:"THYROIDDISEASE",value:noModelValue},{name:"ulcer-gastro",label:"UCLERGASTRO",value:noModelValue}]}function getDefaultDrugUseList(){var noModelValue=!1,drugUseList=[{name:"human",label:"HUMAN",value:noModelValue},{name:"radio-pharmaceutical",label:"RADIOPHARM",value:noModelValue},{name:"veterinary",label:"VETERINARY",value:noModelValue},{name:"disinfectant",label:"DISINFECTANT",value:noModelValue}];return drugUseList}function loadDrugUseValues(info){for(var drugList=getDefaultDrugUseList(),i=0;i<drugList.length;i++){var rec=drugList[i];switch(rec.name){case"human":rec.value="Y"===info.human_drug_use;break;case"radio-pharmaceutical":rec.value="Y"===info.radiopharm_drug_use;break;case"disinfectant":rec.value="Y"===info.disinfectant_drug_use;break;case"veterinary":rec.value="Y"===info.vet_drug_use}}return drugList}function drugUseValuesToOutput(drugUseArray,outputJson){for(var i=0;i<drugUseArray.length;i++){var rec=drugUseArray[i];switch(rec.name){case"human":outputJson.human_drug_use=rec.value===!0?"Y":"N";break;case"radio-pharmaceutical":outputJson.radiopharm_drug_use=rec.value===!0?"Y":"N";break;case"disinfectant":outputJson.disinfectant_drug_use=rec.value===!0?"Y":"N";break;case"veterinary":outputJson.vet_drug_use=rec.value===!0?"Y":"N"}}}function createEmptyAnimalSourceForOutput(){var record={};return record.animal_src_record=[],record.is_controlled_pop="",record.is_biotech_derived="",record.is_cell_line="",record.animal_age="",record.country_origin_list={},record.country_origin_list.country_origin=[],record}function createEmptyAnimalSourceModel(){var record={};return record.animalSrcList=[],record.isCellLine="",record.isBiotechDerived="",record.isControlledPop="",record.ageAnimals="",record.countryList=[],record}function _createEmptyNervousSystemModel(){var record={};return record.brain=!1,record.brainStem=!1,record.cerebellum=!1,record.ceroFluid=!1,record.dorsalRoot=!1,record.duraMater=!1,record.hypothalamus=!1,record.retina=!1,record.spinalCord=!1,record.trigeminal=!1,record.otherNervous=!1,record.otherDetails="",record}function _createEmptyDigestiveSystemModel(){var record={};return record.appendix=!1,record.bile=!1,record.distalIleum=!1,record.largeIntestine=!1,record.salivaSalivary=!1,record.smallIntestine=!1,record.stomach=!1,record.otherDigestive=!1,record.otherDetails="",record}function _createEmptyImmuneSystemModel(){var record={};return record.lymphNodes=!1,record.spleen=!1,record.thymus=!1,record.tonsils=!1,record.otherImmune=!1,record.otherDetails="",record}function _createEmptyMuscleSystemModel(){var record={};return record.abdomen=!1,record.skull=!1,record.bones=!1,record.collagen=!1,record.tendonsLigaments=!1,record.vertebralColumn=!1,record.muscle=!1,record.otherMuscle=!1,record.otherDetails="",record}function _createEmptyReproductiveSystemModel(){var record={};return record.milkProducts=!1,record.kidney=!1,record.colostrum=!1,record.mammaryGlands=!1,record.ovaries=!1,record.placenta=!1,record.placentalFluid=!1,record.semen=!1,record.testes=!1,record.urine=!1,record.otherReproductive=!1,record.otherDetails="",record}function _createEmptySkinSystemModel(){var record={};return record.adrenalGland=!1,record.hairHoovesFeathers=!1,record.liver=!1,record.pancreas=!1,record.pituitary=!1,record.skinHides=!1,record.thyroidParathyroid=!1,record.otherSkin=!1,record.otherDetails="",record}function _createEmptyOtherSystemModel(){var record={};return record.adipose=!1,record.ascites=!1,record.antlerVelvet=!1,record.serum=!1,record.wholeBlood=!1,record.plasma=!1,record.embryonicTissue=!1,record.fetalTissue=!1,record.boneMarrow=!1,record.eyesCornea=!1,record.gallBladder=!1,record.otherFluids=!1,record.otherDetails="",record}function _createEmptyCardioSystemModel(){var record={};return record.heartPericardium=!1,record.lung=!1,record.nasalFluid=!1,record.trachea=!1,record.otherCardio=!1,record.otherDetails="",record}function _createEmptyNervousSystemforOutput(){var record={};return record.brain=noValue,record.brain_stem=noValue,record.cerebellum=noValue,record.cerebrospinal_fluid=noValue,record.dorsal_root_ganglia=noValue,record.dura_mater=noValue,record.hypothalamus=noValue,record.retina_optic=noValue,record.spinal_cord=noValue,record.trigerminal_ganglia=noValue,record.other_nervous=noValue,record.other_nervous_details="",record}function _createEmptyDigestiveSystemforOutput(){var record={};return record.appendix=noValue,record.bile=noValue,record.distal_ileum=noValue,record.large_intestine=noValue,record.saliva_salivary=noValue,record.small_intestine=noValue,record.stomach=noValue,record.other_digestive=noValue,record.other_digestive_details="",record}function _createEmptyMuscleSystemforOutput(){var record={};return record.abdomen=noValue,record.skull=noValue,record.bones=noValue,record.collagen=noValue,record.tendons_ligaments=noValue,record.vertebral_column=noValue,record.muscle=noValue,record.other_musculo_skeletal=noValue,record.other_musculo_skeletal_details="",record}function _createEmptyReproductiveSystemforOutput(){var record={};return record.milk_products=noValue,record.kidney=noValue,record.colostrum=noValue,record.mammary_glands=noValue,record.ovaries=noValue,record.placenta=noValue,record.placental_fluid=noValue,record.semen=noValue,record.testes=noValue,record.urine=noValue,record.other_reproductive=noValue,record.other_reproductive_details="",record}function _createEmptyCardioSystemforOutput(){var record={};return record.heart_pericardium=noValue,record.lung=noValue,record.nasal_fluid=noValue,record.trachea=noValue,record.other_cardio_respiratory=noValue,record.other_cardio_respiratory_details="",record}function _createEmptyImmuneSystemforOutput(){var record={};return record.lymph_nodes=noValue,record.spleen=noValue,record.thymus=noValue,record.tonsils=noValue,record.other_immune=noValue,record.other_immune_details="",record}function _createEmptySkinSystemforOutput(){var record={};return record.adrenal_gland=noValue,record.hair_hooves_feathers=noValue,record.liver=noValue,record.pancreas=noValue,record.pituitary=noValue,record.skin_hides=noValue,record.thyroid_parathyroid=noValue,record.other_skin_glandular=noValue,record.other_skin_glandular_details="",record}function _createEmptyOtherSystemforOutput(){var record={};return record.adipose=noValue,record.ascites=noValue,record.antler_velvet=noValue,record.serum=noValue,record.whole_blood=noValue,record.plasma=noValue,record.embryonic_tissue=noValue,record.fetal_tissue=noValue,record.bone_marrow=noValue,record.eyes_cornea=noValue,record.gall_bladder=noValue,record.other_fluids_tissues=noValue,record.other_fluids_tissues_details="",record}function _nervousSystemToOutput(jsonObj){var record=_createEmptyNervousSystemforOutput();return record.brain=jsonObj.brain===!0?yesValue:noValue,record.brain_stem=jsonObj.brainStem===!0?yesValue:noValue,record.cerebellum=jsonObj.cerebellum===!0?yesValue:noValue,record.cerebrospinal_fluid=jsonObj.ceroFluid===!0?yesValue:noValue,record.dorsal_root_ganglia=jsonObj.dorsalRoot===!0?yesValue:noValue,record.dura_mater=jsonObj.duraMater===!0?yesValue:noValue,record.hypothalamus=jsonObj.hypothalamus===!0?yesValue:noValue,record.retina_optic=jsonObj.retina===!0?yesValue:noValue,record.spinal_cord=jsonObj.spinalCord===!0?yesValue:noValue,record.trigerminal_ganglia=jsonObj.trigeminal===!0?yesValue:noValue,record.other_nervous=jsonObj.otherNervous===!0?yesValue:noValue,record.other_nervous_details=jsonObj.otherDetails,record}function _digestiveSystemToOutput(jsonObj){var record=_createEmptyDigestiveSystemforOutput();return record.appendix=jsonObj.appendix===!0?yesValue:noValue,record.bile=jsonObj.bile===!0?yesValue:noValue,record.distal_ileum=jsonObj.distalIleum===!0?yesValue:noValue,record.large_intestine=jsonObj.largeIntestine===!0?yesValue:noValue,record.saliva_salivary=jsonObj.salivaSalivary===!0?yesValue:noValue,record.small_intestine=jsonObj.smallIntestine===!0?yesValue:noValue,record.stomach=jsonObj.stomach===!0?yesValue:noValue,record.other_digestive=jsonObj.otherDigestive===!0?yesValue:noValue,record.other_digestive_details=jsonObj.otherDetails,record}function _muscleSystemToOutput(jsonObj){var record=_createEmptyMuscleSystemforOutput();return record.abdomen=jsonObj.abdomen===!0?yesValue:noValue,record.skull=jsonObj.skull===!0?yesValue:noValue,record.bones=jsonObj.bones===!0?yesValue:noValue,record.collagen=jsonObj.collagen===!0?yesValue:noValue,record.tendons_ligaments=jsonObj.tendonsLigaments===!0?yesValue:noValue,record.vertebral_column=jsonObj.vertebralColumn===!0?yesValue:noValue,record.muscle=jsonObj.muscle===!0?yesValue:noValue,record.other_musculo_skeletal=jsonObj.otherMuscle===!0?yesValue:noValue,record.other_musculo_skeletal_details=jsonObj.otherDetails,record}function _reproductiveSystemToOutput(jsonObj){var record=_createEmptyReproductiveSystemforOutput();return record.milk_products=jsonObj.milkProducts===!0?yesValue:noValue,record.kidney=jsonObj.kidney===!0?yesValue:noValue,record.colostrum=jsonObj.colostrum===!0?yesValue:noValue,record.mammary_glands=jsonObj.mammaryGlands===!0?yesValue:noValue,record.ovaries=jsonObj.ovaries===!0?yesValue:noValue,record.placenta=jsonObj.placenta===!0?yesValue:noValue,record.placental_fluid=jsonObj.placentalFluid===!0?yesValue:noValue,record.semen=jsonObj.semen===!0?yesValue:noValue,record.testes=jsonObj.testes===!0?yesValue:noValue,record.urine=jsonObj.urine===!0?yesValue:noValue,record.other_reproductive=jsonObj.otherReproductive===!0?yesValue:noValue,record.other_reproductive_details=jsonObj.otherDetails,record}function _cardioSystemToOutput(jsonObj){var record=_createEmptyCardioSystemforOutput();return record.heart_pericardium=jsonObj.heartPericardium===!0?yesValue:noValue,record.lung=jsonObj.lung===!0?yesValue:noValue,record.nasal_fluid=jsonObj.nasalFluid===!0?yesValue:noValue,record.trachea=jsonObj.trachea===!0?yesValue:noValue,record.other_cardio_respiratory=jsonObj.otherCardio===!0?yesValue:noValue,record.other_cardio_respiratory_details=jsonObj.otherDetails,record}function _immuneSystemToOutput(jsonObj){var record=_createEmptyImmuneSystemforOutput();return record.lymph_nodes=jsonObj.lymphNodes===!0?yesValue:noValue,record.spleen=jsonObj.spleen===!0?yesValue:noValue,
record.thymus=jsonObj.thymus===!0?yesValue:noValue,record.tonsils=jsonObj.tonsils===!0?yesValue:noValue,record.other_immune=jsonObj.otherImmune===!0?yesValue:noValue,record.other_immune_details=jsonObj.otherDetails,record}function _otherSystemToOutput(jsonObj){var record=_createEmptyOtherSystemforOutput();return record.adipose=jsonObj.adipose===!0?yesValue:noValue,record.ascites=jsonObj.ascites===!0?yesValue:noValue,record.antler_velvet=jsonObj.antlerVelvet===!0?yesValue:noValue,record.serum=jsonObj.serum===!0?yesValue:noValue,record.whole_blood=jsonObj.wholeBlood===!0?yesValue:noValue,record.plasma=jsonObj.plasma===!0?yesValue:noValue,record.embryonic_tissue=jsonObj.embryonicTissue===!0?yesValue:noValue,record.fetal_tissue=jsonObj.fetalTissue===!0?yesValue:noValue,record.bone_marrow=jsonObj.boneMarrow===!0?yesValue:noValue,record.eyes_cornea=jsonObj.eyesCornea===!0?yesValue:noValue,record.gall_bladder=jsonObj.gallBladder===!0?yesValue:noValue,record.other_fluids_tissues=jsonObj.otherFluids===!0?yesValue:noValue,record.other_fluids_tissues_details=jsonObj.otherDetails,record}function _skinSystemToOutput(jsonObj){var record=_createEmptySkinSystemforOutput();return record.adrenal_gland=jsonObj.adrenalGland===!0?yesValue:noValue,record.hair_hooves_feathers=jsonObj.hairHoovesFeathers===!0?yesValue:noValue,record.liver=jsonObj.liver===!0?yesValue:noValue,record.pancreas=jsonObj.pancreas===!0?yesValue:noValue,record.pituitary=jsonObj.pituitary===!0?yesValue:noValue,record.skin_hides=jsonObj.skinHides===!0?yesValue:noValue,record.thyroid_parathyroid=jsonObj.thyroidParathyroid===!0?yesValue:noValue,record.other_skin_glandular=jsonObj.otherSkin===!0?yesValue:noValue,record.other_skin_glandular_details=jsonObj.otherDetails,record}function _createEmptyTissuesSystemRecord(){return{id:"",systemType:"",detailsConcat:"",system:{},otherDetails:""}}function _getTissuesFluidsModel(json){var result=[],index=1;if(angular.isUndefined(json))return result;if(json.cardio_system){var record=_createEmptyTissuesSystemRecord();record.id=index,index++,record.systemType=DossierLists.getCardioSystemValue(),record.system=_getCardioModel(json.cardio_system),record.otherDetails=record.system.otherDetails,record.detailsConcat=_getConcatTissues(record.system),result.push(record)}if(json.digestive_system){var record=_createEmptyTissuesSystemRecord();record.id=index,index++,record.systemType=DossierLists.getDigestiveSystemValue(),record.system=_getDigestiveModel(json.digestive_system),record.otherDetails=record.system.otherDetails,record.detailsConcat=_getConcatTissues(record.system),result.push(record)}if(json.immune_system){var record=_createEmptyTissuesSystemRecord();record.id=index,index++,record.systemType=DossierLists.getImmuneSystemValue(),record.system=_getImmuneModel(json.immune_system),record.otherDetails=record.system.otherDetails,record.detailsConcat=_getConcatTissues(record.system),result.push(record)}if(json.musculo_system){var record=_createEmptyTissuesSystemRecord();record.id=index,index++,record.systemType=DossierLists.getMuscleSystemValue(),record.system=_getMuscleSystemModel(json.musculo_system),record.otherDetails=record.system.otherDetails,record.detailsConcat=_getConcatTissues(record.system),result.push(record)}if(json.nervous_system){var record=_createEmptyTissuesSystemRecord();record.id=index,index++,record.systemType=DossierLists.getNervousSystemValue(),record.system=_getNervousModel(json.nervous_system),record.otherDetails=record.system.otherDetails,record.detailsConcat=_getConcatTissues(record.system),result.push(record)}if(json.other_system){var record=_createEmptyTissuesSystemRecord();record.id=index,index++,record.systemType=DossierLists.getOtherTissuesSystemValue(),record.system=_getOtherSystemModel(json.other_system),record.otherDetails=record.system.otherDetails,record.detailsConcat=_getConcatTissues(record.system),result.push(record)}if(json.reproductive_system){var record=_createEmptyTissuesSystemRecord();record.id=index,index++,record.systemType=DossierLists.getReproductiveSystemValue(),record.system=_getReproductiveModel(json.reproductive_system),record.otherDetails=record.system.otherDetails,record.detailsConcat=_getConcatTissues(record.system),result.push(record)}if(json.skin_system){var record=_createEmptyTissuesSystemRecord();record.id=index,index++,record.systemType=DossierLists.getSkinSystemValue(),record.system=_getSkinModel(json.skin_system),record.otherDetails=record.system.otherDetails,record.detailsConcat=_getConcatTissues(record.system),result.push(record)}return result}function _getCardioModel(json){var model=_createEmptyCardioSystemModel();return model.heartPericardium=json.heart_pericardium===yesValue,model.lung=json.lung===yesValue,model.nasalFluid=json.nasal_fluid===yesValue,model.trachea=json.trachea===yesValue,model.otherCardio=json.other_cardio_respiratory===yesValue,model.otherDetails=json.other_cardio_respiratory_details,model}function _getNervousModel(json){var model=_createEmptyNervousSystemModel();return model.brain=json.brain===yesValue,model.brainStem=json.brain_stem===yesValue,model.cerebellum=json.cerebellum===yesValue,model.ceroFluid=json.cerebrospinal_fluid===yesValue,model.dorsalRoot=json.dorsal_root_ganglia===yesValue,model.duraMater=json.dura_mater===yesValue,model.hypothalamus=json.hypothalamus===yesValue,model.retina=json.retina_optic===yesValue,model.spinalCord=json.spinal_cord===yesValue,model.trigeminal=json.trigerminal_ganglia===yesValue,model.otherNervous=json.other_nervous===yesValue,model.otherDetails=json.other_nervous_details,model}function _getReproductiveModel(json){var model=_createEmptyReproductiveSystemModel();return model.milkProducts=json.milk_products===yesValue,model.kidney=json.kidney===yesValue,model.colostrum=json.colostrum===yesValue,model.mammaryGlands=json.mammary_glands===yesValue,model.ovaries=json.ovaries===yesValue,model.placenta=json.placenta===yesValue,model.placentalFluid=json.placental_fluid===yesValue,model.semen=json.semen===yesValue,model.testes=json.testes===yesValue,model.urine=json.urine===yesValue,model.otherReproductive=json.other_reproductive===yesValue,model.otherDetails=json.other_reproductive_details,model}function _getSkinModel(json){var model=_createEmptySkinSystemModel();return model.adrenalGland=json.adrenal_gland===yesValue,model.hairHoovesFeathers=json.hair_hooves_feathers===yesValue,model.liver=json.liver===yesValue,model.pancreas=json.pancreas===yesValue,model.pituitary=json.pituitary===yesValue,model.skinHides=json.skin_hides===yesValue,model.thyroidParathyroid=json.thyroid_parathyroid===yesValue,model.otherSkin=json.other_skin_glandular===yesValue,model.otherDetails=json.other_skin_glandular_details,model}function _getImmuneModel(json){var model=_createEmptyImmuneSystemModel();return model.lymphNodes=json.lymph_nodes===yesValue,model.spleen=json.spleen===yesValue,model.thymus=json.thymus===yesValue,model.tonsils=json.tonsils===yesValue,model.otherImmune=json.other_immune===yesValue,model.otherDetails=json.other_immune_details,model}function _getDigestiveModel(json){var model=_createEmptyDigestiveSystemModel();return model.appendix=json.appendix===yesValue,model.bile=json.bile===yesValue,model.distalIleum=json.distal_ileum===yesValue,model.largeIntestine=json.large_intestine===yesValue,model.salivaSalivary=json.saliva_salivary===yesValue,model.smallIntestine=json.small_intestine===yesValue,model.stomach=json.stomach===yesValue,model.otherDigestive=json.other_digestive===yesValue,model.otherDetails=json.other_digestive_details,model}function _getOtherSystemModel(json){var model=_createEmptyOtherSystemModel();return model.adipose=json.adipose===yesValue,model.ascites=json.ascites===yesValue,model.antlerVelvet=json.antler_velvet===yesValue,model.serum=json.serum===yesValue,model.wholeBlood=json.whole_blood===yesValue,model.plasma=json.plasma===yesValue,model.embryonicTissue=json.embryonic_tissue===yesValue,model.fetalTissue=json.fetal_tissue===yesValue,model.boneMarrow=json.bone_marrow===yesValue,model.eyesCornea=json.eyes_cornea===yesValue,model.gallBladder=json.gall_bladder===yesValue,model.otherFluids=json.other_fluids_tissues===yesValue,model.otherDetails=json.other_fluids_tissues_details,model}function _getMuscleSystemModel(json){var model=_createEmptyMuscleSystemModel();return model.abdomen=json.abdomen===yesValue,model.skull=json.skull===yesValue,model.bones=json.bones===yesValue,model.collagen=json.collagen===yesValue,model.tendonsLigaments=json.tendons_ligaments===yesValue,model.vertebralColumn=json.vertebral_column===yesValue,model.muscle=json.muscle===yesValue,model.otherMuscle=json.other_musculo_skeletal===yesValue,model.otherDetails=json.other_musculo_skeletal_details,model}function _getConcatTissues(json){var labelLookup=DossierLists.getTissuesFluidsLabels(),result="",markupBreak="<br>";if(angular.isUndefined(json))return result;for(var keys=Object.keys(json),i=0;i<keys.length;i++){var val=json[keys[i]];if(val){var alias=labelLookup[keys[i]];if(alias){var currentLang=$translate.proposedLanguage()||$translate.use(),translateText=$translate.instant(alias,"","",currentLang);result=result+translateText+markupBreak}}}return keys.length>0&&(result=result.substring(0,result.length-markupBreak.length)),result}var yesValue=YES,noValue=NO;return DossierService.prototype={_default:{dossierID:"",companyID:"",relatedDossierID:"",enrolmentVersion:"0.00",dateSaved:"",applicationType:"NEW",softwareVersion:"1.2.0",dataChecksum:"",dossierType:"",productName:"",properName:"",isRefProducts:"",drugProduct:{thirdPartySigned:"",drugUseList:getDefaultDrugUseList(),isScheduleA:!1,scheduleAGroup:getDefaultSchedA(),therapeutic:[],canRefProducts:[],formulations:[],appendixFourList:[]},contactList:[]},getDefaultObject:function(){return this._default},loadFromFile:function(info){if(!info)return this._default;if(!info.DOSSIER_ENROL)return this._default;info=info.DOSSIER_ENROL;var dossierModel={dossierID:info.dossier_id,companyID:info.company_id,relatedDossierID:info.related_dossier_id,enrolmentVersion:info.enrolment_version,dateSaved:info.date_saved,applicationType:info.application_type,softwareVersion:info.software_version,dataChecksum:info.data_checksum,dossierType:info.dossier_type,productName:info.brand_name,properName:info.common_name,isRefProducts:info.is_ref_products,drugProduct:{thirdPartySigned:info.third_party_signed,drugUseList:loadDrugUseValues(info),isScheduleA:"Y"===info.is_sched_a,therapeutic:[],canRefProducts:getCanRefProductList(info.ref_product_list.cdn_ref_product),formulations:getFormulationList(info.formulation_group.formulation_details),appendixFourList:getAppendix4IngredientList(info.appendix4_group)},contactList:getContactList(info.contact_record)};return info.therapeutic_class_list.therapeutic_class&&(dossierModel.drugProduct.therapeutic=getTherapeuticList(info.therapeutic_class_list.therapeutic_class)),dossierModel.drugProduct.scheduleAGroup=getDefaultSchedA(),info.schedule_a_group&&(dossierModel.drugProduct.scheduleAGroup.drugIdNumber=info.schedule_a_group.din_number,dossierModel.drugProduct.scheduleAGroup.scheduleAClaimsIndDetails=info.schedule_a_group.sched_a_claims_ind_details,getDiseaseDisorderList(info.schedule_a_group,dossierModel.drugProduct.scheduleAGroup.diseaseDisorderList)),dossierModel}},DossierService.prototype.dossierToOutput=function(jsonObj){if(!jsonObj)return null;var baseDossier={};if(baseDossier.company_id=jsonObj.companyID,baseDossier.dossier_id=jsonObj.dossierID,baseDossier.related_dossier_id=jsonObj.relatedDossierID,baseDossier.enrolment_version=jsonObj.enrolmentVersion,baseDossier.date_saved=jsonObj.dateSaved,baseDossier.application_type=jsonObj.applicationType,baseDossier.software_version="1.0.0",baseDossier.data_checksum="",jsonObj.contactList&&(baseDossier.contact_record=repContactToOutput(jsonObj.contactList)),baseDossier.dossier_type=jsonObj.dossierType,baseDossier.brand_name=jsonObj.productName,baseDossier.common_name=jsonObj.properName,baseDossier.third_party_signed=jsonObj.drugProduct.thirdPartySigned,baseDossier.is_ref_products=jsonObj.isRefProducts,baseDossier.ref_product_list={},baseDossier.human_drug_use="N",baseDossier.radiopharm_drug_use="N",baseDossier.vet_drug_use="N",baseDossier.disinfectant_drug_use="N",drugUseValuesToOutput(jsonObj.drugProduct.drugUseList,baseDossier),baseDossier.therapeutic_class_list={},baseDossier.is_sched_a=jsonObj.drugProduct.isScheduleA===!0?"Y":"N",jsonObj.drugProduct.therapeutic&&jsonObj.drugProduct.therapeutic.length>0&&(baseDossier.therapeutic_class_list.therapeutic_class=therapeuticClassToOutput(jsonObj.drugProduct.therapeutic)),jsonObj.drugProduct.canRefProducts&&jsonObj.drugProduct.canRefProducts.length>0&&(baseDossier.ref_product_list.cdn_ref_product=canRefProductListToOutput(jsonObj.drugProduct.canRefProducts)),jsonObj.drugProduct.isScheduleA&&(baseDossier.schedule_a_group=scheduleAToOutput(jsonObj.drugProduct.scheduleAGroup)),jsonObj.drugProduct){var appendix4=appendix4IngredientListToOutput(jsonObj.drugProduct.appendixFourList);appendix4&&appendix4.length>0&&(baseDossier.appendix4_group=appendix4);var formulations=formulationListToOutput(jsonObj.drugProduct.formulations);baseDossier.formulation_group={},formulations&&(baseDossier.formulation_group.formulation_details=formulations)}return{DOSSIER_ENROL:baseDossier}},DossierService.prototype.getMissingAppendix4=function(dossierModel){var missingAppendices=[],extraAppendices=[],results={};if(!dossierModel||!dossierModel.drugProduct)return missingAppendices;var appendices=getAppendiceData(dossierModel.drugProduct.appendixFourList),ingredients=getAnimalIngredients(dossierModel.drugProduct.formulations);return missingAppendices=getMissingAppendices(appendices,ingredients),extraAppendices=findExtraApppendices(appendices),results.missing=missingAppendices,results.extra=extraAppendices,results},DossierService.prototype.getDefaultDiseaseDisorderList=function(){return getDefaultDiseaseDisorderList()},DossierService.prototype.getDefaultNervousSystem=function(){return _createEmptyNervousSystemModel()},DossierService.prototype.getDefaultImmuneSystem=function(){return _createEmptyImmuneSystemModel()},DossierService.prototype.getDefaultDigestiveSystem=function(){return _createEmptyDigestiveSystemModel()},DossierService.prototype.getDefaultMuscleSystem=function(){return _createEmptyMuscleSystemModel()},DossierService.prototype.getDefaultOtherSystem=function(){return _createEmptyOtherSystemModel()},DossierService.prototype.getDefaultReproductiveSystem=function(){return _createEmptyReproductiveSystemModel()},DossierService.prototype.getDefaultCardioSystem=function(){return _createEmptyCardioSystemModel()},DossierService.prototype.getDefaultSkinSystem=function(){return _createEmptySkinSystemModel()},DossierService.prototype.getDefaultScheduleA=function(){return getDefaultSchedA()},DossierService.prototype.getRootTagName=function(){return"DOSSIER_ENROL"},DossierService}angular.module("dossierService").factory("DossierService",DossierService),DossierService.$inject=["DossierLists","$translate","$filter","getCountryAndProvinces","OTHER","UNKNOWN","YES","NO"]}(),function(){"use strict";angular.module("dossierLoadModule",["dataLists","dossierDataLists","hpfbConstants"])}(),function(){"use strict";angular.module("dossierLoadModule").factory("customLoad",["$http","$q","$filter","getCountryAndProvinces","DossierLists","OTHER","RELATIVE_FOLDER_DATA",function($http,$q,$filter,getCountryAndProvinces,DossierLists,OTHER,RELATIVE_FOLDER_DATA){function _createTranslateList(jsonList,lang){lang||(lang="en");for(var resultList={},i=0;i<jsonList.length;i++)resultList[jsonList[i].id]=jsonList[i][lang];return resultList}function _createNewSortedArrayWithOther(jsonList,prefix,lang){var newList=_createNewPrefixList(jsonList,prefix);lang||(lang="en");var result=_createSortedArray(newList,lang);return result.unshift({id:OTHER,en:"Other",fr:"Autre"}),result}function _createSortedArray(jsonList,lang){var result=[];return angular.forEach($filter("orderByLocale")(jsonList,lang),function(sortedObject){sortedObject.key!==OTHER&&result.push(sortedObject)}),result}function _createNewPrefixList(jsonList,prefix){for(var newList=[],i=0;i<jsonList.length;i++){var newRec=angular.copy(jsonList[i]);newRec.id=prefix+newRec.id,newList.push(newRec)}return newList}return function(options){var deferred=$q.defer(),roaUrl=RELATIVE_FOLDER_DATA+"roa.json",countryUrl=RELATIVE_FOLDER_DATA+"countries.json",nanoUrl=RELATIVE_FOLDER_DATA+"nanomaterials.json",unitsUrl=RELATIVE_FOLDER_DATA+"units.json",dosageFormUrl=RELATIVE_FOLDER_DATA+"dosageForm.json",activeUrl=RELATIVE_FOLDER_DATA+"activeIngred.json",resultTranslateList={};return $http.get(unitsUrl).then(function(response){var newList=_createNewSortedArrayWithOther(response.data,DossierLists.getUnitsPrefix(),options.key);return DossierLists.createUnitsList(newList),$http.get(countryUrl)}).then(function(response){var newList=_createSortedArray(response.data,options.key),translateList=_createTranslateList(newList,options.key);return getCountryAndProvinces.createCountryList(newList),angular.extend(resultTranslateList,translateList),$http.get(nanoUrl)}).then(function(response){var newList=_createNewSortedArrayWithOther(response.data,DossierLists.getNanoPrefix(),options.key),translateList=_createTranslateList(newList,options.key);return DossierLists.createNanomaterialList(newList),angular.extend(resultTranslateList,translateList),$http.get(dosageFormUrl)}).then(function(response){var newList=_createNewSortedArrayWithOther(response.data,DossierLists.getDosageFormPrefix(),options.key),translateList=_createTranslateList(newList,options.key);return DossierLists.createDosageFormList(newList),angular.extend(resultTranslateList,translateList),$http.get(activeUrl)}).then(function(response){return DossierLists.setActiveList(response.data),$http.get(roaUrl)}).then(function(response){var newList=_createNewSortedArrayWithOther(response.data,DossierLists.getRoaPrefix(),options.key),translateList=_createTranslateList(newList,options.key);return DossierLists.createRoaList(newList),angular.extend(resultTranslateList,translateList),response.data})["catch"](function(error){console.warn("An error occurred with Dossier List Load: "+error),deferred.reject(resultTranslateList)})["finally"](function(){deferred.resolve(resultTranslateList)}),deferred.promise}}])}(),function(){"use strict";angular.module("dossierDataLists",[])}(),function(){"use strict";function getService(){function _setActiveArray(data){vm.activeList=data}function _getActiveArray(){return vm.activeList}function getDoseOtherValue(){return OTHER}function getYesValue(){return YES}function getUnknownValue(){return"UNLKNOWN"}function getOtherValue(){return getDoseOtherValue()}function _createNanoArray(translateJson){vm.nanoList=translateJson}function _createDosageFormArray(translateJson){vm.dosageFormList=translateJson}function _createRoaArray(translateJson){vm.roaList=translateJson}function _createUnitsArray(translateJson){vm.unitsList=translateJson}function _getUnitsArray(){return vm.unitsList}function _getRoaListPrefix(){return"ROA_"}function _getDosagePrefix(){return"DOSFORM_"}function _getUnitsPrefix(){return"UNITS_"}function _getNanoPrefix(){return"NANOMAT_"}function getDosageFormsArray(){return vm.dosageFormList}function getNanoMaterialArray(){return vm.nanoList}function getRoaArray(){return vm.roaList}function yesNoArray(){return["Y","N"]}function yesNoUnknownArray(){return["Y","N","UNKNOWN"]}function animalSourcesArray(){return["NONHUMANPRIMATE_TYPE","AQUATIC_TYPE","AVIAN_TYPE","BOVINE_TYPE","CANINE_TYPE","CAPRINE_TYPE","CERVIDAE_TYPE","EQUINE_TYPE","FELINE_TYPE","OVINE_TYPE","PORCINE_TYPE","RODENT_TYPE","OTHERANIMAL_TYPE"]}function tissuesSystemArray(){return[_getDigestiveSystemValue(),_getNervousSystemValue(),_getReproductiveSystemValue(),_getCardioSystemValue(),_getImmuneSystemValue(),_getSkinSystemValue(),_getMuscleSystemValue(),_getOtherTissuesSystemValue()]}function _getDigestiveSystemValue(){return"DIGESTIVE_SYSTEM"}function _getNervousSystemValue(){return"NERVOUS_SYSTEM"}function _getReproductiveSystemValue(){return"REPRODUCT_SYSTEM"}function _getCardioSystemValue(){return"CARDIO_SYSTEM"}function _getImmuneSystemValue(){return"IMMUNE_SYSTEM"}function _getSkinSystemValue(){return"SKINGLAND_SYSTEM"}function _getMuscleSystemValue(){return"MUSCULO_SYSTEM"}function _getOtherTissuesSystemValue(){return"OTHERTISSUE_SYSTEM"}function nervousSystemArray(){return["BRAIN","BRAINSTEM","CEREBELLUM","CEROFLUID","DORSALROOT","DURAMATER","HYPOTHALAMUS","RETINA","SPINALCORD","TRIGEMINAL","NERVOUS_OTHER"]}function digestiveSystemArray(){return["APPENDIX","BILE","DISTALILEUM","LARGEINTEST","SALIVA","SMALLINTESTINE","STOMACH","DIGESTIVE_OTHER"]}function reprodSystemArray(){return["MILK","KIDNEY","COLOSTRUM","MAMMARY","OVARIES","PLACENTA","PLACENTAFLUID","SEMEN","TESTES","URINE","REPROD_OTHER"]}function cardioSystemArray(){return["HEART","LUNG","NASALFLUID","TRACHEA","PLACENTALFLUID","CARDIO_OTHER"]}function immuneSystemArray(){return["LYMPH","SPLEEN","THYMUS","TONSILS","IMMUNE_OTHER"]}function skinSystemArray(){return["ADRENAL","HAIR","LIVER","PANCREAS","PITUARYGLAND","SKINHIDES","THYROID","SKIN_OTHER"]}function muscleSystemArray(){return["ABDOMEN","SKULL","BONES","COLLAGEN","TENDONS","VERTEBRALCOLUMN","MUSCLE_OTHER"]}function otherSystemArray(){return["ADIPOSE","ASCITES","ANTLERV","SERUM","WHOLEBLOOD","PLASMA","EMBRYONICTISS","FETALTISS","BONEMARROW","EYESCORNEA","GALL","FLUIDS_OTHER"]}function _getTissuesFluidsLabels(){return{brain:"BRAIN",brainStem:"BRAINSTEM",cerebellum:"CEREBELLUM",ceroFluid:"CEROFLUID",dorsalRoot:"DORSALROOT",duraMater:"DURAMATER",hypothalmus:"HYPOTHALAMUS",retina:"RETINA",spinalCord:"SPINALCORD",trigeminal:"TRIGEMINAL",appendix:"APPENDIX",bile:"BILE",distalIleum:"DISTALILEUM",largeIntestine:"LARGEINTEST",salivaSalivary:"SALIVA",smallIntestine:"SMALLINTESTINE",stomach:"STOMACH",milkProducts:"MILK",kidney:"KIDNEY",colostrum:"COLOSTRUM",mammaryGlands:"MAMMARY",ovaries:"OVARIES",placenta:"PLACENTA",placentalFluid:"PLACENTAFLUID",semen:"SEMEN",testes:"TESTES",urine:"URINE",heartPericardium:"HEART",lung:"LUNG",nasalFluid:"NASALFLUID",trachea:"TRACHEA",lymphNodes:"LYMPH",spleen:"SPLEEN",thymus:"THYMUS",tonsils:"TONSILS",adrenalGland:"ADRENAL",hairHoovesFeathers:"HAIR",liver:"LIVER",pancreas:"PANCREAS",pituitary:"PITUARYGLAND",skinHides:"SKINHIDES",thyroidParathyroid:"THYROID",abdomen:"ABDOMEN",skull:"SKULL",bones:"BONES",collagen:"COLLAGEN",tendonsLigaments:"TENDONS",vertebralColumn:"VERTEBRALCOLUMN",muscle:"MUSCLE",adipose:"ADIPOSE",ascites:"ASCITES",antlerVelvet:"ANTLERV",serum:"SERUM",wholeBlood:"WHOLEBLOOD",plasma:"PLASMA",embryonicTissue:"EMBRYONICTISS",fetalTissue:"FETALTISS",boneMarrow:"BONEMARROW",eyesCornea:"EYESCORNEA",gallBladder:"GALL"}}var OTHER="OTHER",YES="Y",vm=this;vm.roaList=[],vm.nanoList=[],vm.dosageFormList=[],vm.activeList=[],vm.unitsList=[];var service={setActiveList:_setActiveArray,getActiveList:_getActiveArray,createRoaList:_createRoaArray,createUnitsList:_createUnitsArray,createNanomaterialList:_createNanoArray,createDosageFormList:_createDosageFormArray,getDosageFormList:getDosageFormsArray,getUnitsList:_getUnitsArray,getDosageOther:getDoseOtherValue,getNanoMaterials:getNanoMaterialArray,getRoa:getRoaArray,getOtherValue:getOtherValue,getUnknownValue:getUnknownValue,getYesNoList:yesNoArray,getYesNoUnknownList:yesNoUnknownArray,getAnimalSources:animalSourcesArray,getTissuesSystem:tissuesSystemArray,getNervousSystem:nervousSystemArray,getDigestiveSystem:digestiveSystemArray,getImmuneSystem:immuneSystemArray,getSkinSystem:skinSystemArray,getReprodSystem:reprodSystemArray,getOtherSystem:otherSystemArray,getMuscleSystem:muscleSystemArray,getCardioSystem:cardioSystemArray,getDigestiveSystemValue:_getDigestiveSystemValue,getNervousSystemValue:_getNervousSystemValue,getReproductiveSystemValue:_getReproductiveSystemValue,getCardioSystemValue:_getCardioSystemValue,getImmuneSystemValue:_getImmuneSystemValue,getSkinSystemValue:_getSkinSystemValue,getMuscleSystemValue:_getMuscleSystemValue,getOtherTissuesSystemValue:_getOtherTissuesSystemValue,getYesValue:getYesValue,getTissuesFluidsLabels:_getTissuesFluidsLabels,getRoaPrefix:_getRoaListPrefix,getDosageFormPrefix:_getDosagePrefix,getUnitsPrefix:_getUnitsPrefix,getNanoPrefix:_getNanoPrefix};return service}angular.module("dossierDataLists").factory("DossierLists",getService)}(),function(){"use strict";angular.module("errorMessageModule",[])}(),function(){"use strict";function errorMessageController(){var vm=this;vm.field_name="",vm.form_ref=null,vm.fieldRecords=[],vm.$onChanges=function(changes){changes.fieldName&&(vm.field_name=changes.fieldName.currentValue),changes.formRef&&(vm.form_ref=changes.formRef.currentValue),changes.errorTypes&&(vm.fieldRecords=changes.errorTypes.currentValue)},vm.showErrorMessage=function(){return!!vm.form_ref&&(angular.isUndefined(vm.fieldName)?(console.warn("No field name for: "+vm.form_ref.$name),!1):angular.isUndefined(vm.form_ref[vm.fieldName])?(console.warn("lookup undefined "+vm.form_ref.$name+"."+vm.fieldName),!1):vm.showError()&&vm.form_ref[vm.fieldName].$invalid||vm.form_ref[vm.fieldName].$touched&&vm.form_ref[vm.fieldName].$invalid)}}angular.module("errorMessageModule").component("cmpErrorMessage",{templateUrl:"app/scripts/components/error-message/tpl-error-message_20170626_1154.html",controller:errorMessageController,controllerAs:"errMessageCtrl",bindings:{fieldName:"<",formRef:"<",showError:"&",errorTypes:"<"}})}(),function(){"use strict";angular.module("expandingTable",[])}(),function(){"use strict";function expandingTableCtrl($filter){function _setNumberColumns(){vm.disableErrorCol?vm.numberCols=vm.numberCols+1:vm.numberCols=vm.numberCols+2}function _recalculateColumnDefs(colDefs,numCols){var caretWidth=2,errorWidth=5,totalWidth=caretWidth+errorWidth,toSubtract=totalWidth/numCols,result=[];if(vm.disableErrorCol)return colDefs;for(var i=0;i<numCols;i++){var oneDef=angular.copy(colDefs[i]);oneDef.width>toSubtract&&(oneDef.width=oneDef.width-toSubtract),result.push(oneDef)}return result}function updateTableRow(textIndex){var selectIndex=parseInt(textIndex);selectIndex>=0&&vm.selectTableRow(selectIndex)}function _createArray(arraySize,initialVal){for(var anArray=[],i=0;i<arraySize;i++)anArray.push(initialVal);return anArray}var vm=this;vm.focused=!1,vm.columnDefinitions={},vm.disableExpand=!1,vm.tableRowExpanded=!1,vm.tableRowIndexCurrExpanded="",vm.tableRowIndexPrevExpanded="",vm.numberCols=1,vm.disableErrorCol=!1,vm.dayDataCollapse=_createArray(0,!0),vm.formName="",vm.$onInit=function(){vm.listItems&&(vm.dayDataCollapse=_createArray(vm.listItems.length,!0))},vm.getExpandedState=function(row){return row===vm.tableRowIndexCurrExpanded},vm.$onChanges=function(changes){if(changes.transcludeName&&(vm.formName=changes.transcludeName.currentValue),changes.listItems&&(vm.listItems?vm.dayDataCollapse=_createArray(vm.listItems.length,!0):vm.dayDataCollapse=_createArray(0,!0),vm.resetTableRow()),changes.resetToCollapsed&&(vm.resetTableRow(),changes.selectRecord||updateTableRow(vm.selectRecord)),changes.selectRecord){var selectIndex=parseInt(changes.selectRecord.currentValue);selectIndex>=0?vm.selectTableRow(selectIndex):vm.resetTableRow()}changes.disableSelection&&(vm.disableExpand=changes.disableSelection.currentValue),changes.columnDef&&(vm.numberCols=changes.columnDef.currentValue.length,vm.columnDefinitions=_recalculateColumnDefs(changes.columnDef.currentValue,vm.numberCols),_setNumberColumns()),changes.disableErrColumn&&(vm.disableErrorCol=changes.disableErrColumn.currentValue,vm.numberCols=vm.columnDef.length,_setNumberColumns())},vm.formInError=function(aForm){return aForm&&aForm.$invalid?"Y":"N"},vm.deletedRow=function(){vm.tableRowExpanded=!1,vm.tableRowIndexCurrExpanded=""},vm.resetTableRow=function(){vm.tableRowIndexPrevExpanded="",vm.tableRowExpanded=!1,vm.tableRowIndexCurrExpanded="",vm.listItems?vm.dayDataCollapse=_createArray(vm.listItems.length,!0):_createArray(0,!0)},vm.dayDataCollapseFn=function(){for(var i=0;vm.listItems.length-1;i+=1)vm.dayDataCollapse.append("true")},vm.selectTableRow=function(index){vm.disableExpand||("undefined"===vm.dayDataCollapse?vm.dayDataCollapse=vm.dayDataCollapseFn():vm.tableRowExpanded===!1&&""===vm.tableRowIndexCurrExpanded?(vm.tableRowIndexPrevExpanded="",vm.tableRowExpanded=!0,vm.tableRowIndexCurrExpanded=index,vm.dayDataCollapse[index]=!1):vm.tableRowExpanded===!0&&(vm.tableRowIndexCurrExpanded===index?(vm.tableRowExpanded=!1,vm.tableRowIndexCurrExpanded="",vm.dayDataCollapse[index]=!0):(vm.tableRowIndexPrevExpanded=vm.tableRowIndexCurrExpanded,vm.tableRowIndexCurrExpanded=index,vm.dayDataCollapse[vm.tableRowIndexPrevExpanded]=!0,vm.dayDataCollapse[vm.tableRowIndexCurrExpanded]=!1)))}}angular.module("expandingTable").component("cmpExpandingTable",{templateUrl:"app/scripts/components/expandingTable/tpl-expanding-table_20170626_1154.html",controller:expandingTableCtrl,controllerAs:"expandTblCtrl",transclude:!0,bindings:{title:"@",listItems:"<",columnDef:"<",disableSelection:"<",selectRecord:"<",resetToCollapsed:"<",disableErrColumn:"@",transcludeName:"@"}}),expandingTableCtrl.$inject=["$filter"]}(),function(){"use strict";angular.module("applicationInfo",["numberFormat","hpfbConstants"])}(),function(){"use strict";function ApplInfoCtrl(NEW_TYPE,AMEND_TYPE,APPROVED_TYPE,EXTERNAL_TYPE){function _setConfigItems(configJson){vm.fieldIdLabel=configJson.label,vm.fieldLength=configJson.fieldLength,vm.tagName=configJson.tagName,configJson.minFieldLength?vm.minFieldLength=configJson.minFieldLength:vm.minFieldLength=configJson.fieldLength,vm.errorMsg=configJson.errorMsg,configJson.minErrorMsg?vm.minErrorMsg=configJson.minErrorMsg:vm.minErrorMsg=configJson.errorMsg,configJson.isNumber&&(vm.isNumber=configJson.isNumber),vm.isDossier=configJson.isDossier,angular.isUndefined(vm.isDossier)&&(vm.isDossier=!1)}var vm=this;vm.applTypes=[NEW_TYPE,AMEND_TYPE,APPROVED_TYPE],vm.formType=EXTERNAL_TYPE,vm.infoModel={applicationType:"NEW",enrolmentVersion:"0.0",dateSaved:""},vm.fieldIdLabel="",vm.minFieldLength="",vm.isNumber=!1,vm.fieldLength="",vm.tagName="fieldId",vm.setAsIncomplete=!0,vm.errorMsg="",vm.maxErrorMsg="",vm.isDossier=!1,vm.isNumber=!1,vm.$onInit=function(){},vm.$onChanges=function(changes){changes.userType&&(vm.formType=changes.userType.currentValue),changes.record&&(vm.infoModel=changes.record.currentValue),changes.isIncomplete&&(vm.setAsIncomplete=changes.isIncomplete.currentValue),changes.configureIdField&&_setConfigItems(changes.configureIdField.currentValue)},vm.showAmendMsg=function(){return!!vm.record&&vm.record.applicationType===AMEND_TYPE},vm.isExtern=function(){return vm.formType==EXTERNAL_TYPE},vm.setAmendState=function(){vm.setType({type:AMEND_TYPE})}}angular.module("applicationInfo").component("cmpApplicationInfo",{templateUrl:"app/scripts/components/applicationInfo/tpl-application-info_20170626_1154.html",controller:ApplInfoCtrl,controllerAs:"infoCtrl",bindings:{record:"<",userType:"<",isIncomplete:"<",configureIdField:"<",setType:"&"}}),ApplInfoCtrl.$inject=["NEW_TYPE","AMEND_TYPE","APPROVED_TYPE","EXTERNAL_TYPE"]}(),function(){"use strict";angular.module("contactModule",["dataLists","hpfbConstants","errorMessageModule"])}(),function(){"use strict";function contactCtrl(getContactLists,ENGLISH,FRENCH,$scope){function _setIdNames(){var scopeId=vm.fldId+"_"+$scope.$id;vm.salutationId="salutation"+scopeId,vm.firstNameId="firstName"+scopeId,vm.lastNameId="lastName"+scopeId,vm.langCorrespondId="langCorrespond"+scopeId,vm.jobTitleId="jobTitle"+scopeId,vm.faxId="faxNumber"+scopeId,vm.phoneNumberId="phoneNumber"+scopeId,vm.phoneExtId="phoneExt"+scopeId,vm.contactEmailId="contactEmail"+scopeId}var vm=this;vm.isEditable=!0,vm.ngModelOptSetting={updateOn:"blur"},vm.salutationList=getContactLists.getSalutationList(),vm.langCorresppond=[ENGLISH,FRENCH],vm.faxRequired=!1,vm.phoneReg=/\(?([0-9]{3})\)?([ .-]?)([0-9]{3})\2([0-9]{4})/,
vm.contactModel={salutation:"",givenName:"",surname:"",initials:"",title:"",phone:"",phoneExt:"",fax:""},vm.inputModelOptions={updateOn:"blur"},vm.fldId="",vm.requiredOnly=[{type:"required",displayAlias:"MSG_ERR_MAND"}],vm.emailError=[{type:"required",displayAlias:"MSG_ERR_MAND"},{type:"email",displayAlias:"MSG_ERR_EMAIL_FORMAT"}],vm.phoneError=[{type:"required",displayAlias:"MSG_ERR_MAND"},{type:"pattern",displayAlias:"MSG_ERR_PHONE_FORMAT"}],vm.faxError=[{type:"required",displayAlias:"MSG_ERR_MAND"},{type:"pattern",displayAlias:"MSG_ERR_FAX_FORMAT"}],vm.$onInit=function(){vm.langList=[ENGLISH,FRENCH],_setIdNames()},vm.$onChanges=function(changes){changes.contactRecord&&(vm.contactModel=changes.contactRecord.currentValue),changes.isAmend&&(vm.isEditable=changes.isAmend.currentValue),changes.faxMandatory&&(vm.faxRequired=changes.faxMandatory.currentValue),changes.fieldSuffix&&(vm.fldId=changes.fieldSuffix.currentValue,vm.fldId||(vm.fldId=""))},vm.showError=function(ctrl){return!!ctrl&&!!(ctrl.$invalid&&ctrl.$touched||vm.showErrors()&&ctrl.$invalid)},$scope.$watch("contCtrl.contactForm.$error",function(){vm.updateErrorSummary()},!0)}angular.module("contactModule").component("cmpContactDetails",{templateUrl:"app/scripts/components/contactDetails/tpl-contact-details_20170626_1154.html",controller:contactCtrl,controllerAs:"contCtrl",bindings:{contactRecord:"<",onUpdate:"&",isAmend:"<",showErrors:"&",faxMandatory:"@",updateErrorSummary:"&",fieldSuffix:"<"}}),contactCtrl.$inject=["getContactLists","ENGLISH","FRENCH","$scope"]}(),function(){"use strict";angular.module("contactModule25",["contactModule"])}(),function(){"use strict";function contactRecCtrl($scope){var vm=this;vm.savePressed=!1,vm.formAmend=!1,vm.isContact=!0,vm.isNotEditable=!1,vm.contactModel={},vm.editState=!0,vm.$onInit=function(){},vm.$onChanges=function(changes){changes.contactRecord&&(vm.contactModel=angular.copy(changes.contactRecord.currentValue),vm.setEditableState()),changes.isAmend&&(vm.formAmend=changes.isAmend.currentValue,vm.setEditableState())},vm["delete"]=function(){vm.onDelete({contactId:vm.contactModel.repRole})},vm.discardChanges=function(){if(!vm.contactRecForm.$pristine){var currRecord=vm.contactRecord;vm.contactModel=angular.copy(currRecord),vm.setNotEditable(),vm.contactRecForm.$setPristine(),vm.isDetailValid({state:vm.contactRecForm.$valid}),vm.savePressed=!1}},vm.updateValid=function(){vm.isDetailValid({state:vm.contactRecForm.$valid&&!vm.contactRecForm.$dirty})},$scope.$watch("contactRec.contactRecForm.$dirty",function(){vm.contactRecForm.$dirty&&vm.isDetailValid({state:!1})},!0),vm.updateContactModel=function(){vm.contactRecForm.$valid&&(vm.isDetailValid({state:!0}),vm.contactRecForm.$setPristine(),vm.onUpdate({contact:vm.contactModel})),vm.savePressed=!0},vm.showErrors=function(){return vm.savePressed},vm.setEditableState=function(){vm.formAmend?vm.formAmend&&vm.contactModel.amend?vm.editState=!0:vm.editState=!1:vm.editState=!0}}angular.module("contactModule25").component("cmpRepContactRecord",{templateUrl:"app/scripts/components/rep-contact-record/tpl-rep-contact-record_20170626_1154.html",controller:contactRecCtrl,controllerAs:"contactRec",bindings:{contactRecord:"<",onUpdate:"&",updateValid:"&",onDelete:"&",isDetailValid:"&",isAmend:"<"}}),contactRecCtrl.$inject=["$scope"]}(),function(){"use strict";angular.module("contactModule26",["contactModule25","expandingTable","repContactService"])}(),function(){"use strict";function contactListCtrl($filter,RepContactService){var vm=this;vm.selectRecord=-1,vm.isDetailValid=!0,vm.contactList=[],vm.oneRecord="",vm.isParentDirty=!1,vm.formAmend=!1,vm.resetCollapsed=!1;var repContactService=new RepContactService;vm.columnDef=[{label:"FIRSTNAME",binding:"givenName",width:"40"},{label:"LASTNAME",binding:"surname",width:"40"},{label:"ONE_ROLE",binding:"repRole",width:"20"}],vm.$onInit=function(){vm.focused=!1},vm.$onChanges=function(changes){changes.contacts&&(vm.contactList=changes.contacts.currentValue,vm.isDetailValid=!0,vm.updateErrorState()),changes.parentDirty&&(vm.isParentDirty=changes.parentDirty.currentValue),changes.isAmend&&(vm.formAmend=changes.isAmend.currentValue)},vm.isAddContact=function(){return!(vm.contactList.length>1)&&vm.isDetailValid},vm.showNoRecordError=function(isInvalid){return vm.isParentDirty&&isInvalid||vm.showListErrors()&&isInvalid},vm.setValid=function(value){vm.isDetailValid=value},vm.showError=function(){return vm.contactListForm.$invalid&&!vm.contactListForm.$pristine||vm.contactListForm.$invalid&&vm.showListErrors()},vm.onUpdateContactRecord=function(record){var idx=vm.contactList.indexOf($filter("filter")(vm.contactList,{repRole:record.repRole},!0)[0]);vm.contactList[idx]=angular.copy(record),vm.updateErrorState(),vm.contactListForm.$setPristine(),vm.resetCollapsed=!vm.resetCollapsed,vm.disableAdd()},vm.updateErrorState=function(){vm.contactList&&vm.contactList.length>0?vm.oneRecord="is value":vm.oneRecord=""},vm.deleteContact=function(cID){var idx=vm.contactList.indexOf($filter("filter")(vm.contactList,{repRole:cID},!0)[0]);if(vm.contactList.splice(idx,1),1===vm.contactList.length&&"PRIMARY"!==vm.contactList[0].repRole){vm.contactList[0].repRole="PRIMARY";var temp=angular.copy(vm.contactList);vm.contactList=[],vm.contactList=temp}vm.updateErrorState(),vm.disableAdd(),vm.setValid(!0),vm.selectRecord=-1,vm.resetCollapsed=!vm.resetCollapsed},vm.addContact=function(){var defaultContact=repContactService.createRepContact(vm.contactList);vm.contactList.push(defaultContact),vm.selectRecord=vm.contactList.length-1,vm.setValid(!1)},vm.disableAdd=function(){if(!vm.contactList)return!1;var isInvalid=!vm.isDetailValid||2==vm.contactList.length||vm.contactList.length>0&&vm.contactListForm.$invalid;return isInvalid}}angular.module("contactModule26").component("cmpRepContactList",{templateUrl:"app/scripts/components/repContactList/tpl-rep-contact-list_20170626_1154.html",controller:contactListCtrl,controllerAs:"contactListCtrl",bindings:{contacts:"<",showListErrors:"&",parentDirty:"<",isAmend:"<"}}),contactListCtrl.$inject=["$filter","RepContactService"]}(),function(){"use strict";angular.module("fileIO",[])}(),function(){"use strict";function ngFileSelect(hpfbFileReader){function link(scope,element,attrs){scope.rootTag=attrs.rootTag,element.bind("change",function(e){scope.file=(e.srcElement||e.target).files[0],hpfbFileReader.readAsDataText(scope.file,scope).then(function(result){scope.hpfbFileSelect({fileContent:result})})})}var directive={link:link,restrict:"A",scope:{hpfbFileSelect:"&"}};return directive}angular.module("fileIO").directive("hpfbFileSelect",ngFileSelect),ngFileSelect.$inject=["hpfbFileProcessing"]}(),function(){"use strict";function FileSelectController(hpfbFileProcessing){var vm=this;vm.fileTypes=".xml, .hcsc",vm.modelCallback=function(fileContent){vm.status="",fileContent&&(vm.status=fileContent.messages),vm.updateModelRoot({fileContent:fileContent}),angular.element(fileLoad).trigger("focus")}}angular.module("fileIO").component("hpfbFileSelect",{templateUrl:"app/scripts/components/fileIO/fileSelect_20170626_1154.html",controller:FileSelectController,bindings:{updateModelRoot:"&",rootElem:"@"}}),FileSelectController.$inject=["hpfbFileProcessing"]}(),function(){"use strict";function FileWriteController(hpfbFileProcessing){function _generateFile(){"JSON"===vm.saveType.toUpperCase()?hpfbFileProcessing.writeAsJson(vm.jsonToSave,vm.fileName,vm.rootTag):"XML"===vm.saveType.toUpperCase()&&hpfbFileProcessing.writeAsXml(vm.jsonToSave,vm.fileName,vm.rootTag)}function _init(){vm.buttonDisabled?"true"===vm.buttonDisabled.toLowerCase()?vm.buttonDisabled=!0:"false"===vm.buttonDisabled.toLowerCase()?vm.buttonDisabled=!1:vm.buttonDisabled=!1:vm.buttonDisabled=!1}var vm=this;vm.$onInit=_init,vm.generate=_generateFile}angular.module("fileIO").component("hpfbFileSave",{templateUrl:"app/scripts/components/fileIO/fileSave_20170626_1154.html",controller:FileWriteController,bindings:{jsonToSave:"<",rootTag:"@",saveType:"@",buttonLabel:"@",buttonDisabled:"@"}}),FileWriteController.$inject=["hpfbFileProcessing"]}(),function(){"use strict";function fileReader($q){function onLoad(reader,deferred,scope,file){return function(){scope.$apply(function(){if(file){var splitFile=file.name.split("."),fileType=splitFile[splitFile.length-1];fileType.toLowerCase()==draft_file_type?(convertToJSONObjects(reader),checkRootTagMatch(reader,scope)):"xml"===fileType.toLowerCase()?(convertXMLToJSONObjects(reader),checkRootTagMatch(reader,scope)):(convertResult.parseResult=null,convertResult.messages=msg_err_fileType,reader.parseResult=convertResult)}deferred.resolve(reader.parseResult)})}}function onError(reader,deferred,scope){return function(){scope.$apply(function(){deferred.reject(msg_err_load)})}}function getReader(deferred,scope,file){var reader=new FileReader;return reader.onload=onLoad(reader,deferred,scope,file),reader.onError=onError(reader,deferred,scope),reader.parseResult=null,reader}function readAsDataText(file,scope){var deferred=$q.defer(),reader=getReader(deferred,scope,file);return file?reader.readAsText(file):(reader.parseResult=convertResult,reader.parseResult.messages="",reader.parseResult.jsonResult=null,deferred.resolve(reader.parseResult)),deferred.promise}function convertToJSONObjects(reader){try{convertResult.jsonResult=JSON.parse(reader.result),convertResult.messages=msg_success,reader.parseResult=convertResult}catch(e){convertResult.jsonResult=null,convertResult.messages=msg_err_jsonparse,reader.parseResult=convertResult}}function convertXMLToJSONObjects(reader){var xmlConfig={escapeMode:!0,emptyNodeForm:"text",useDoubleQuotes:!0},xmlConverter=new X2JS(xmlConfig);convertResult.jsonResult=xmlConverter.xml_str2json(reader.result),null===convertResult.jsonResult?convertResult.messages=msg_err_xmlparse:convertResult.messages=msg_success,reader.parseResult=convertResult}function convertJSONObjectsToXML(jsonObj){var xmlConfig={escapeMode:!0,emptyNodeForm:"text",useDoubleQuotes:!0},jsonConverter=new X2JS(xmlConfig),xmlResult=null;return xmlResult=jsonConverter.json2xml_str(jsonObj)}function checkRootTagMatch(reader,scope){scope.rootTag&&reader.parseResult&&reader.parseResult.jsonResult&&(reader.parseResult.jsonResult[scope.rootTag]||(reader.parseResult.jsonResult=null,reader.parseResult.messages=msg_err_formType))}function jsonToFile(jsonObj,fileName,rootTag){if(jsonObj){var makeStrSave=JSON.stringify(jsonObj),blob=new Blob([makeStrSave],{type:"text/plain;charset=utf-8"});fileName?fileName+="."+draft_file_type:fileName="hpfbDraft."+draft_file_type,saveAs(blob,fileName)}}function xmlToFile(jsonObj,fileName,rootTag){if(jsonObj){var xmlResult=convertJSONObjectsToXML(jsonObj);xmlResult='<?xml version="1.0" encoding="UTF-8"?><?xml-stylesheet  type="text/xsl" href="REP_Combined.xsl"?>'+xmlResult;var blob=new Blob([xmlResult],{type:"text/plain;charset=utf-8"});fileName?fileName+=".xml":fileName="hpfbXML.xml",saveAs(blob,fileName)}}var msg_success="MSG_SUCCESS_LOAD",msg_err_jsonparse="MSG_ERR_JSONPARSE",msg_err_xmlparse="MSG_ERR_XMLPARSE",msg_err_load="MSG_ERR_FILE_LOAD",msg_err_fileType="MSG_ERR_FILE_TYPE",msg_err_formType="MSG_ERR_FORM_TYPE",draft_file_type="hcsc",convertResult={jsonResult:"",messages:""},service={readAsDataText:readAsDataText,writeAsJson:jsonToFile,writeAsXml:xmlToFile};return service}angular.module("fileIO").factory("hpfbFileProcessing",fileReader),fileReader.$inject=["$q"]}(),function(){"use strict";angular.module("nonMedIngRecordModule",["dossierDataLists","hpfbConstants","ui.select"])}(),function(){"use strict";function nonMedIngRecCtrl(DossierLists,$scope,$translate,OTHER,YES){var self=this;self.nanoMaterialList=DossierLists.getNanoMaterials(),self.yesNoList=DossierLists.getYesNoList(),self.unitsList=DossierLists.getUnitsList(),self.savePressed=!1,self.lang=$translate.proposedLanguage()||$translate.use(),self.ingModel={varId:"",ingName:"",cas:"",standard:"",strength:null,units:"",otherUnits:"",per:"",nanoMaterial:"",nanoMaterialOther:"",calcAsBase:"",humanAnimalSourced:""},self.$onInit=function(){self.savePressed=!1,self.backup=angular.copy(self.ingModel)},self.$onChanges=function(changes){changes.record&&changes.record.currentValue&&(self.ingModel=angular.copy(changes.record.currentValue))},self.saveIng=function(){self.nonMedIngForm.$valid?(self.record?self.onUpdate({ing:self.ingModel}):self.onAddIng({ing:self.ingModel}),self.nonMedIngForm.$setPristine(),self.savePressed=!1):self.savePressed=!0},self.discardChanges=function(){self.ingModel=angular.copy(self.backup),self.nonMedIngForm.$setPristine(),self.onCancel()},self["delete"]=function(){self.record&&self.onDelete()},self.isAnimalHumanSourced=function(){return!!self.ingModel&&self.ingModel.humanAnimalSourced===YES},self.copy=function(){var ingredientCopy=angular.copy(self.ingModel);self.onAddIng({ing:ingredientCopy})},self.showError=function(isInvalid,isTouched){return isInvalid&&isTouched||isInvalid&&self.showErrors()||isInvalid&&self.savePressed},self.isNanoOther=function(){return self.ingModel.nanoMaterial.id===DossierLists.getOtherValue()||(self.ingModel.nanoMaterialOther="",!1)},self.isUnitsOther=function(){return!(!self.ingModel||!self.ingModel.units)&&(self.ingModel.units.id===OTHER||(self.ingModel.otherUnits="",!1))},$scope.$watch("nIngRecCtrl.nonMedIngForm.$dirty",function(){self.isDetailValid({state:!self.nonMedIngForm.$dirty})},!0)}angular.module("nonMedIngRecordModule").component("cmpNonMedIngRecord",{templateUrl:"app/scripts/components/formulations/tpl-non-med-ing-record_20170626_1154.html",controllerAs:"nIngRecCtrl",controller:nonMedIngRecCtrl,bindings:{deleteBtn:"<",record:"<",showErrors:"&",onAddIng:"&",onUpdate:"&",onDelete:"&",onCancel:"&",isDetailValid:"&",recordIndex:"<"}}),nonMedIngRecCtrl.$inject=["DossierLists","$scope","$translate","OTHER","YES"]}(),function(){"use strict";angular.module("nonMedIngListModule",["expandingTable","nonMedIngRecordModule"])}(),function(){"use strict";function nonMedIngListCtrl(){function setRecord(value){self.selectRecord=value}var self=this;self.isDetailValid=!0,self.selectRecord=-1,self.resetToCollapsed=!1,self.newIngFormShown=!1,self.$onInit=function(){self.newIngFormShown=!1,self.isDetailValid=!0,self.selectRecord=-1,self.colNames=[{label:"VARIANT_NAME",binding:"varId",width:"15"},{label:"NONMEDICINAL_INGREDIENT",binding:"ingName",width:"65"},{label:"CAS_NUM",binding:"cas",width:"15"},{label:"HUMAN_ANIMAL_SOURCE",binding:"humanAnimalSourced",width:"10"}],self.ingList=[],self.ingredients&&(self.ingList=self.ingredients)},self.addIng=function(ing){self.setValid(!0),self.ingList.push(ing),self.newIngFormShown=!1,self.resetToCollapsed=!self.resetToCollapsed,self.onUpdate({list:self.ingList}),setRecord(-1)},self.updateIng=function(idx,ing){self.ingList[idx]=angular.copy(ing),self.onUpdate({list:self.ingList}),self.setValid(!0)},self.deleteIng=function(idx){self.ingList.splice(idx,1),self.onUpdate({list:self.ingList}),self.setValid(!0),setRecord(-1),self.resetToCollapsed=!self.resetToCollapsed},self.addNewIngredientState=function(){return self.resetToCollapsed=!self.resetToCollapsed,self.newIngFormShown=!0,self.setValid(!1),self.newIngFormShown},self.addNewDisabled=function(){return self.newIngFormShown||!self.isDetailValid},self.setValid=function(value){self.isDetailValid=value},self.onNewCancel=function(){self.setValid(!0),self.newIngFormShown=!1}}angular.module("nonMedIngListModule").component("cmpNonMedIngList",{templateUrl:"app/scripts/components/formulations/tpl-non-med-ing-list_20170626_1154.html",controller:nonMedIngListCtrl,controllerAs:"nmilCtrl",bindings:{ingredients:"<",onUpdate:"&"}})}(),function(){"use strict";angular.module("materialIngRecordModule",["dossierDataLists"])}(),function(){"use strict";function materialIngRecCtrl(DossierLists,$scope){var self=this;self.yesNoList=DossierLists.getYesNoList(),self.savePressed=!1,self.$onInit=function(){self.mirModel={},self.record&&(self.mirModel=self.record),self.backup=angular.copy(self.mirModel)},self.showError=function(isInvalid,isTouched){return isInvalid&&isTouched||isInvalid&&self.showErrors()||self.savePressed&&isInvalid},self.save=function(){self.materialIngRecordForm.$valid?(self.record?(self.onUpdate({ing:self.mirModel}),self.materialIngRecordForm.$setPristine()):self.onAddNew({ing:self.mirModel}),self.materialIngRecordForm.$setPristine(),self.savePressed=!1):self.savePressed=!0},self.discardChanges=function(){self.mirModel=angular.copy(self.backup),self.materialIngRecordForm.$setPristine(),self.onCancel()},self["delete"]=function(){self.record&&self.onDelete()},$scope.$watch("mirCtrl.materialIngRecordForm.$dirty",function(){self.isDetailValid({state:!self.materialIngRecordForm.$dirty})},!0)}angular.module("materialIngRecordModule").component("cmpMaterialIngRecord",{templateUrl:"app/scripts/components/formulations/tpl-material-ing-record_20170626_1154.html",controllerAs:"mirCtrl",controller:materialIngRecCtrl,bindings:{deleteBtn:"<",record:"<",showErrors:"&",onAddNew:"&",onUpdate:"&",onDelete:"&",onCancel:"&",isDetailValid:"&",recordIndex:"<"}}),materialIngRecCtrl.$inject=["DossierLists","$scope"]}(),function(){"use strict";angular.module("materialIngListModule",["expandingTable","materialIngRecordModule"])}(),function(){"use strict";function materialIngListCtrl(){function setRecord(value){self.selectRecord=value}var self=this;self.isDetailValid=!0,self.selectRecord=-1,self.resetToCollapsed=!1,self.newIngFormShown=!1,self.colNames=[{label:"MATERIAL_NAME",binding:"ingredientName",width:"70"},{label:"CAS_NUM",binding:"cas",width:"15"},{label:"PRESENT_IN_FINAL",binding:"inFinalContainer",width:"15"}],self.$onInit=function(){self.newIngFormShown=!1,self.isDetailValid=!0,self.selectRecord=-1,self.ingList=[],self.ingredients&&(self.ingList=self.ingredients)},self.$onChanges=function(changes){changes.ingredients&&(self.ingList=changes.ingredients.currentValue)},self.addNew=function(ing){self.setValid(!0),self.ingList.push(ing),self.newIngFormShown=!1,self.resetToCollapsed=!self.resetToCollapsed,self.onUpdate({list:self.ingList}),setRecord(-1)},self.updateIng=function(idx,ing){self.ingList[idx]=angular.copy(ing),self.onUpdate({list:self.ingList}),self.setValid(!0)},self.deleteIng=function(idx){self.ingList.splice(idx,1),self.onUpdate({list:self.ingList}),self.setValid(!0),setRecord(-1),self.resetToCollapsed=!self.resetToCollapsed},self.addNewIngredientState=function(){return self.resetToCollapsed=!self.resetToCollapsed,self.newIngFormShown=!0,self.setValid(!1),self.newIngFormShown},self.addNewDisabled=function(){return self.newIngFormShown||!self.isDetailValid},self.setValid=function(value){self.isDetailValid=value},self.onNewCancel=function(){self.setValid(!0),self.newIngFormShown=!1}}angular.module("materialIngListModule").component("cmpMaterialIngList",{templateUrl:"app/scripts/components/formulations/tpl-material-ing-list_20170626_1154.html",controller:materialIngListCtrl,controllerAs:"milCtrl",bindings:{ingredients:"<",onUpdate:"&"}})}(),function(){"use strict";angular.module("formulationRecordModule",["activeIngListModule","nonMedIngListModule","containerTypeListModule","materialIngListModule","roaListModule","dossierDataLists","ui.select"])}(),function(){"use strict";function formulationRecCtrl(DossierLists,$translate){var self=this;self.noCountries="",self.noROAValues="",self.noActiveValues="",self.noContainers="",self.dosageFormList=DossierLists.getDosageFormList(),self.otherValue=DossierLists.getDosageOther(),self.savePressed=!1,self.lang=$translate.proposedLanguage()||$translate.use(),self.$onInit=function(){self.frmModel={},self.record&&(self.frmModel=self.record)},self["delete"]=function(){self.record&&self.onDelete()},self.copy=function(){if(self.record){var formulationCopy=angular.copy(self.record);self.addCopy({record:formulationCopy})}},self.showError=function(isInvalid,isTouched){return isInvalid&&isTouched||isInvalid&&self.showErrors()||isInvalid&&self.savePressed},self.noCountry=function(){return self.frmModel?self.frmModel.countryList&&0!==self.frmModel.countryList.length?(self.noCountries=self.frmModel.countryList.length,!1):(self.noCountries="",!0):(self.noCountries="",!1)},self.noROA=function(){return self.frmModel?self.frmModel.routeAdmins&&0!==self.frmModel.routeAdmins.length?(self.noROAValues="values",!1):(self.noROAValues="",!0):(self.noROAValues="",!1)},self.noActives=function(){return self.frmModel?self.frmModel.activeIngList&&0!==self.frmModel.activeIngList.length?(self.noActiveValues="values",!1):(self.noActiveValues="",!0):(self.noActiveValues="",!1)},self.noContainers=function(){return self.frmModel?self.frmModel.containerTypes&&0!==self.frmModel.containerTypes.length?(self.noContainerValues="values",!1):(self.noContainerValues="",!0):(self.noContainerValues="",!1)},self.updateActiveIngList=function(list){list&&(self.frmModel.activeIngList=list,self.recordChanged())},self.updateNonMedIngList=function(list){list&&(self.frmModel.nMedIngList=list,self.recordChanged())},self.updateContainerTypeList=function(list){list&&(self.frmModel.containerTypes=list)},self.updateMaterialList=function(list){list&&(self.frmModel.animalHumanMaterials=list,self.recordChanged())},self.updateRoaList=function(list){list&&(self.frmModel.routeAdmins=list)},self.updateCountryList=function(list){list&&(self.frmModel.countryList=list)},self.isDosageOther=function(){return!!self.frmModel.dosageForm&&(self.frmModel.dosageForm.id===self.otherValue||(self.frmModel.dosageFormOther="",!1))}}angular.module("formulationRecordModule").config(function(uiSelectConfig){uiSelectConfig.theme="select2"}).component("cmpFormulationRecord",{templateUrl:"app/scripts/components/formulations/tpl-formulation-record_20170626_1154.html",controllerAs:"formulRecCtrl",controller:formulationRecCtrl,bindings:{deleteBtn:"<",record:"<",onUpdate:"&",onDelete:"&",onCancel:"&",showErrors:"&",recordChanged:"&",addCopy:"&"}}),formulationRecCtrl.$inject=["DossierLists","$translate"]}(),function(){"use strict";angular.module("formulationsModule",["expandingTable","formulationRecordModule"])}(),function(){"use strict";function formulationsCtrl(){function setRecord(value){self.selectRecord=value}function getMaxFormulationId(){var out=0,list=self.formulationList;if(list)for(var i=0;i<list.length;i++)list[i].formulationId>out&&(out=list[i].formulationId);return out}var self=this;self.isDetailValid=!0,self.selectRecord=-1,self.resetToCollapsed=!1,self.noFormulations="",self.$onInit=function(){self.newFormShown=!1,self.colNames=[{label:"FORM_ID",binding:"formulationId",width:"15"},{label:"FORMULATION_NAME",binding:"formulationName",width:"85"}],self.formulationList=[],self.formulations&&(self.formulationList=self.formulations),self.updateFormulationsError()},self.$onChanges=function(changes){changes.formulations&&(self.formulationList=changes.formulations.currentValue,self.updateFormulationsError())},self.addNew=function(){var newRecord={formulationId:getMaxFormulationId()+1,formulationName:"",dosageForm:"",dosageFormOther:"",activeIngList:[],nMedIngList:[],containerTypes:[],animalHumanMaterials:[],routeAdmins:[],countryList:[]};self.formulationList.push(newRecord),setRecord(self.formulationList.length-1),self.resetToCollapsed=!self.resetToCollapsed,self.updateFormulationsError()},self.addCopy=function(formulation){formulation&&(formulation.formulationId=getMaxFormulationId()+1,self.formulationList.push(formulation),setRecord(-1),self.resetToCollapsed=!self.resetToCollapsed)},self.update=function(idx,frm){self.formulationList[idx]=angular.copy(frm)},self["delete"]=function(idx){self.formulationList.splice(idx,1)&&setRecord(-1),self.resetToCollapsed=!self.resetToCollapsed,self.updateFormulationsError()},self.updateFormulationsError=function(){return self.formulationList&&self.formulationList.length>0?(self.noFormulations=self.formulationList.length,!1):(self.noFormulations="",!0)}}angular.module("formulationsModule").component("cmpFormulations",{templateUrl:"app/scripts/components/formulations/tpl-formulation-list_20170626_1154.html",controller:formulationsCtrl,controllerAs:"formulCtrl",bindings:{formulations:"<",recordChanged:"&"}})}(),function(){"use strict";angular.module("containerTypeRecordModule",[])}(),function(){"use strict";function containerTypeRecCtrl($scope){var self=this;self.savePressed=!1,self.ctModel={containerType:"",packageSize:"",shelfLifeYears:void 0,shelfLifeMonths:void 0,tempMin:void 0,tempMax:void 0},self.backup=angular.copy(self.ctModel),self.$onInit=function(){self.savePressed=!1},self.$onChanges=function(changes){changes.record&&changes.record.currentValue&&(self.ctModel=angular.copy(changes.record.currentValue),self.ctModel.shelfLifeYears=Number(changes.record.currentValue.shelfLifeYears),self.ctModel.shelfLifeMonths=Number(changes.record.currentValue.shelfLifeMonths),self.ctModel.tempMin=Number(changes.record.currentValue.tempMin),self.ctModel.tempMax=Number(changes.record.currentValue.tempMax),self.backup=angular.copy(self.ctModel))},self.save=function(){self.containerTypeForm.$valid?(self.record?self.onUpdate({cType:self.ctModel}):self.onAddIng({cType:self.ctModel}),self.containerTypeForm.$setPristine(),self.savePressed=!1):self.savePressed=!0},self.discardChanges=function(){self.ctModel=angular.copy(self.backup),self.containerTypeForm.$setPristine(),self.onCancel()},self["delete"]=function(){self.record&&self.onDelete()},self.showError=function(isInvalid,isTouched){return isInvalid&&isTouched||isInvalid&&self.savePressed},$scope.$watch("ctrCtrl.containerTypeForm.$dirty",function(){self.isDetailValid({state:!self.containerTypeForm.$dirty})},!0)}angular.module("containerTypeRecordModule").component("cmpContainerTypeRecord",{templateUrl:"app/scripts/components/formulations/tpl-container-type-record_20170626_1154.html",controllerAs:"ctrCtrl",controller:containerTypeRecCtrl,bindings:{deleteBtn:"<",record:"<",onAddIng:"&",onUpdate:"&",onDelete:"&",onCancel:"&",showErrors:"&",isDetailValid:"&",recordIndex:"<"}}),containerTypeRecCtrl.$inject=["$scope"]}(),function(){"use strict";angular.module("containerTypeListModule",["expandingTable","containerTypeRecordModule"])}(),function(){"use strict";function containerTypeListCtrl(){function setRecord(value){self.selectRecord=value}var self=this;self.isDetailValid=!0,self.selectRecord=-1,self.resetToCollapsed=!1,self.isDetailValid=!0,self.newIngFormShown=!1,self.$onInit=function(){self.selectRecord=-1,self.resetToCollapsed=!1,self.isDetailValid=!0,self.newIngFormShown=!1,self.colNames=[{label:"CONTAINER_TYPE",binding:"containerType",width:"50"},{label:"PACKAGE_SIZE",binding:"packageSize",width:"50"}],self.containerList=[],self.containers&&(self.containerList=self.containers)},self.$onChanges=function(changes){changes.containers&&(self.containerList=changes.containers.currentValue)},self.addNew=function(ing){self.setValid(!0),self.containerList.push(ing),self.newIngFormShown=!1,self.resetToCollapsed=!self.resetToCollapsed,self.onUpdate({list:self.containerList}),setRecord(-1)},self.updateRec=function(idx,ing){self.containerList[idx]=angular.copy(ing),self.onUpdate({list:self.containerList}),self.setValid(!0)},self.deleteRec=function(idx){self.containerList.splice(idx,1),self.onUpdate({list:self.containerList}),self.setValid(!0),setRecord(-1),self.resetToCollapsed=!self.resetToCollapsed},self.setValid=function(value){self.isDetailValid=value},self.addNewDisabled=function(){return self.newIngFormShown||!self.isDetailValid},self.addNewIngredientState=function(){return self.resetToCollapsed=!self.resetToCollapsed,self.newIngFormShown=!0,self.setValid(!1),self.newIngFormShown},self.onNewCancel=function(){self.setValid(!0),self.newIngFormShown=!1}}angular.module("containerTypeListModule").component("cmpContainerTypeList",{templateUrl:"app/scripts/components/formulations/tpl-container-type-list_20170626_1154.html",controller:containerTypeListCtrl,controllerAs:"ctlCtrl",bindings:{containers:"<",onUpdate:"&"}})}(),function(){"use strict";angular.module("activeIngRecordModule",["dossierDataLists","hpfbConstants"])}(),function(){"use strict";function activeIngRecCtrl(DossierLists,$scope,$translate,OTHER,YES){var self=this;self.nanoMaterialList=DossierLists.getNanoMaterials(),self.yesNoList=DossierLists.getYesNoList(),self.activeList=DossierLists.getActiveList(),self.UnitsList=DossierLists.getUnitsList(),self.savePressed=!1,self.lang=$translate.proposedLanguage()||$translate.use(),self.ingModel={autoIngred:"N",ingId:"",ingLabel:"",cas:"",standard:"",strength:null,units:"",otherUnits:"",per:"",nanoMaterial:"",nanoMaterialOther:"",calcAsBase:"",humanAnimalSourced:""},self.$onInit=function(){self.savePressed=!1,self.backup=angular.copy(self.ingModel)},self.$onChanges=function(changes){changes.record&&changes.record.currentValue&&(self.ingModel=angular.copy(changes.record.currentValue),self.ingModel.ingId?self.ingModel.autoIngred="Y":self.ingModel.autoIngred="N")},self.isAnimalHumanSourced=function(){return!!self.ingModel&&self.ingModel.humanAnimalSourced===YES},self.ingredSelectionUpdated=function(item,model,label,event){item?(self.ingModel.ingId=item.id,self.ingModel.autoIngred="Y"):(self.ingModel.ingId="",self.ingModel.autoIngred="N")},self.saveIng=function(){self.activeIngForm.$valid?(self.record?self.onUpdate({ing:self.ingModel}):self.onAddIng({ing:self.ingModel}),self.activeIngForm.$setPristine(),self.savePressed=!1):self.savePressed=!0},self.discardChanges=function(){self.ingModel=angular.copy(self.backup),self.activeIngForm.$setPristine(),self.onCancel()},self["delete"]=function(){self.record&&self.onDelete()},self.copy=function(){var ingredientCopy=angular.copy(self.ingModel);self.onAddIng({ing:ingredientCopy})},self.showError=function(isInvalid,isTouched){return isInvalid&&isTouched||isInvalid&&self.showErrors()||isInvalid&&self.savePressed},self.isNanoOther=function(){return self.ingModel.nanoMaterial.id===DossierLists.getOtherValue()||(self.ingModel.nanoMaterialOther="",!1)},self.isUnitsOther=function(){return!(!self.ingModel||!self.ingModel.units)&&(self.ingModel.units.id===OTHER||(self.ingModel.otherUnits="",!1))},$scope.$watch("ingRecCtrl.activeIngForm.$dirty",function(){self.isDetailValid({state:!self.activeIngForm.$dirty})},!0)}angular.module("activeIngRecordModule").component("cmpActiveIngRecord",{templateUrl:"app/scripts/components/formulations/tpl-active-ing-record_20170626_1154.html",controllerAs:"ingRecCtrl",controller:activeIngRecCtrl,bindings:{showErrors:"&",deleteBtn:"<",record:"<",onAddIng:"&",onUpdate:"&",onDelete:"&",onCancel:"&",isDetailValid:"&",recordIndex:"<"}}),activeIngRecCtrl.$inject=["DossierLists","$scope","$translate","OTHER","YES"]}(),function(){"use strict";angular.module("activeIngListModule",["expandingTable","activeIngRecordModule"])}(),function(){"use strict";function activeIngListCtrl(){function setRecord(value){self.selectRecord=value}var self=this;self.selectRecord=-1,self.resetToCollapsed=!1,self.isDetailValid=!0,self.newIngFormShown=!1,self.isDetailValid=!0,self.selectRecord=-1,self.colNames=[{label:"MEDICINAL_INGREDIENT",binding:"ingLabel",width:"65"},{label:"IN_LIST",binding:"autoIngred",width:"7"},{label:"CAS_NUM",binding:"cas",width:"13"},{label:"HUMAN_ANIMAL_SOURCE",binding:"humanAnimalSourced",width:"15"}],self.ingList=[],self.$onInit=function(){},self.$onChanges=function(changes){changes.ingredients&&changes.ingredients.currentValue&&(self.ingList=self.ingredients,self.isDetailValid=!0)},self.addIng=function(ing){self.setValid(!0),self.ingList.push(ing),self.newIngFormShown=!1,self.resetToCollapsed=!self.resetToCollapsed,self.onUpdate({list:self.ingList}),setRecord(-1)},self.updateIng=function(idx,ing){self.ingList[idx]=angular.copy(ing),self.onUpdate({list:self.ingList}),self.setValid(!0)},self.deleteIng=function(idx){self.ingList.splice(idx,1),self.onUpdate({list:self.ingList}),self.setValid(!0),setRecord(-1),self.resetToCollapsed=!self.resetToCollapsed},self.setValid=function(value){self.isDetailValid=value;
},self.addNewDisabled=function(){return self.newIngFormShown||!self.isDetailValid},self.addNewIngredientState=function(){return self.resetToCollapsed=!self.resetToCollapsed,self.newIngFormShown=!0,self.setValid(!1),self.newIngFormShown},self.onNewCancel=function(){self.setValid(!0),self.newIngFormShown=!1}}angular.module("activeIngListModule").component("cmpActiveIngList",{templateUrl:"app/scripts/components/formulations/tpl-active-ing-list_20170626_1154.html",controller:activeIngListCtrl,controllerAs:"ailCtrl",bindings:{ingredients:"<",onUpdate:"&"}})}(),function(){"use strict";angular.module("theraClass",["theraClassRecord"])}(),function(){"use strict";function theraListCtrl($filter){function getMaxID(){for(var id=0,i=0;i<vm.model.theraList.length;i++)vm.model.theraList[i].id>id&&(id=vm.model.theraList[i].id);return id}var vm=this;vm.selectRecord=-1,vm.isDetailValid=!0,vm.resetToCollapsed=!0,vm.oneRecord="",vm.model={},vm.model.theraList=[],vm.columnDef=[{label:"THERA_CLASS_NAME",binding:"name",width:"100"}],vm.$onInit=function(){},vm.$onChanges=function(changes){changes.records&&(vm.model.theraList=changes.records.currentValue)},vm.showError=function(isTouched,isInvalid){return!0},vm.setValid=function(value){vm.isDetailValid=value},vm.addNew=function(){var maxID=getMaxID(),item={id:maxID+1,name:""};vm.model.theraList.push(item),vm.resetToCollapsed=!vm.resetToCollapsed,vm.selectRecord=0,vm.selectRecord=vm.model.theraList.length-1},vm.deleteRecord=function(recId){var idx=vm.model.theraList.indexOf($filter("filter")(vm.model.theraList,{id:recId},!0)[0]);vm.model.theraList.splice(idx,1)}}angular.module("theraClass").component("cmpTheraList",{templateUrl:"app/scripts/components/therapeutic-classification/tpl-thera-list_20170626_1154.html",bindings:{records:"<",showErrors:"&"},controller:theraListCtrl,controllerAs:"theraCtrl"}),theraListCtrl.$inject=["$filter"]}(),function(){"use strict";angular.module("theraClassRecord",[])}(),function(){"use strict";function therapeuticClassCtrl(){var vm=this;vm.model={},vm.$onInit=function(){},vm.$onChanges=function(changes){changes.record&&(vm.model=changes.record.currentValue)},vm.deleteRecord=function(){vm.onDelete({id:vm.model.id})},vm.showError=function(isInvalid,isTouched){return isInvalid&&isTouched||isInvalid&&vm.showErrors()}}angular.module("theraClass").component("cmpTheraRecord",{templateUrl:"app/scripts/components/therapeutic-classification/tpl-thera-record_20170626_1154.html",controller:therapeuticClassCtrl,controllerAs:"theraRecCtrl",bindings:{record:"<",onDelete:"&",showErrors:"&"}})}(),function(){"use strict";angular.module("tabModule",["tabsModule"])}(),function(){"use strict";function tabCtrl(){var self=this;self.$onInit=function(){self.tab={title:self.title,selected:!1},self.tabs.addTab(self.tab)}}angular.module("tabModule").component("cmpTab",{templateUrl:"app/scripts/components/tabs/tpl-tab_20170626_1154.html",controller:tabCtrl,controllerAs:"tabCtrl",bindings:{title:"@"},require:{tabs:"^^cmpTabs"},transclude:!0})}(),function(){"use strict";angular.module("tabsModule",["formulationsModule","appendixFourModule"])}(),function(){"use strict";function tabsCtrl($scope){var self=this;self.tabs=[{label:"FORMULATIONS",selected:!0,disabled:!1,errors:!0,form:{}},{label:"APPENDIX4",selected:!1,disabled:!1,errors:!1,form:{}}],self.$onInit=function(){},self.$onChanges=function(){},self.selectTab=function(idx){for(var i=0;i<self.tabs.length;i++)self.tabs[i].selected=!1,idx!==i&&(self.tabs[i].errors=self.tabs[i].form.$invalid);self.tabs[idx].selected=!0}}angular.module("tabsModule").component("cmpTabs",{templateUrl:"app/scripts/components/tabs/tpl-tabs_20170626_1154.html",controller:tabsCtrl,controllerAs:"tabsCtrl",bindings:{formulationList:"<",appendix4List:"<",recordChanged:"&",service:"<"}}),tabsCtrl.$inject=["$scope"]}(),function(){"use strict";angular.module("scheduleAModule",["checkBoxListModule"])}(),function(){"use strict";function scheduleACtrl($scope){var self=this;self.isClaim="",self.expanderOpenState=!1,self.disableExpander=!1,self.$onInit=function(){var noValue=!1;self.scheduleAModel||(self.scheduleAModel={drugIdNumber:"",scheduleAClaimsIndDetails:"",diseaseDisorderList:[{name:"acute-alcohol",label:"ACUTEALCOHOL",value:noValue},{name:"acute-anxiety",label:"ACUTEANXIETY",value:noValue},{name:"acute-infectious",label:"ACUTERESP",value:noValue},{name:"acute-inflammatory",label:"ACUTEINFLAM",value:noValue},{name:"acute-psychotic",label:"ACUTEPSYCHOTIC",value:noValue},{name:"addiction",label:"ADDICTION",value:noValue},{name:"ateriosclerosis",label:"ATERIOSCLEROSIS",value:noValue},{name:"appendicitis",label:"APPENDICITIS",value:noValue},{name:"asthma",label:"ASTHMA",value:noValue},{name:"cancer",label:"CANCER",value:noValue},{name:"congest-heart-fail",label:"HEARTCONGEST",value:noValue},{name:"convulsions",label:"CONVULSIONS",value:noValue},{name:"dementia",label:"DEMENTIA",value:noValue},{name:"depression",label:"DEPRESSION",value:noValue},{name:"diabetes",label:"DIABETES",value:noValue},{name:"gangrene",label:"GANGRENE",value:noValue},{name:"glaucoma",label:"GLAUCOMA",value:noValue},{name:"haematologic-bleeding",label:"BLEEDINGDISORDERS",value:noValue},{name:"hepatitis",label:"HEPATITIS",value:noValue},{name:"hypertension",label:"HYPERTENSION",value:noValue},{name:"nausea-pregnancy",label:"NAUSEAPREG",value:noValue},{name:"obesity",label:"OBESITY",value:noValue},{name:"rheumatic-fever",label:"RHEUMATICFEVER",value:noValue},{name:"septicemia",label:"SEPTICEMIA",value:noValue},{name:"sex-transmit-disease",label:"SEXDISEASE",value:noValue},{name:"strangulated-hernia",label:"STRANGHERNIA",value:noValue},{name:"thrombotic-embolic-disorder",label:"THROMBOTICDISORDER",value:noValue},{name:"thyroid-disease",label:"THYROIDDISEASE",value:noValue},{name:"ulcer-gastro",label:"UCLERGASTRO",value:noValue}]})},self.$onChanges=function(changes){changes.scheduleGroup&&(self.scheduleAModel=changes.scheduleGroup.currentValue)},self.claimSelected=function(){for(var i=0;i<self.scheduleAModel.diseaseDisorderList.length;i++)if(self.scheduleAModel.diseaseDisorderList[i].value)return self.isClaim="selected",!0;return self.isClaim="",!1},self.noClaimSelected=function(){return!self.claimSelected()},self.showError=function(isInvalid,isTouched){return isInvalid&&isTouched||isInvalid&&self.showErrors()},self.isOpenState=function(){return self.schedAForm.$invalid?(self.expanderOpenState=!0,self.disableExpander=!0):self.disableExpander=!1,self.expanderOpenState},$scope.$watch("$ctrl.schedAForm.$invalid",function(){self.isOpenState()},!0)}angular.module("scheduleAModule").component("cmpScheduleA",{templateUrl:"app/scripts/components/schedule-a/tpl-schedule-a_20170626_1154.html",controller:scheduleACtrl,bindings:{scheduleGroup:"<",onUpdate:"&",onDelete:"&",showErrors:"&"}}),scheduleACtrl.$inject=["$scope"]}(),function(){"use strict";angular.module("roaRecord",["ui.select"])}(),function(){"use strict";function roaRecordController(DossierLists,$translate){var vm=this;vm.roaList=DossierLists.getRoa(),vm.model={},vm.lang=$translate.proposedLanguage()||$translate.use(),vm.$onInit=function(){vm.lang||(vm.lang="en")},vm.$onChanges=function(changes){changes.record&&(vm.model=changes.record.currentValue)},vm.roaChanged=function(item,model){vm.model.display=vm.model.roa.id},vm.deleteRecord=function(){vm.onDelete({id:vm.model.id})},vm.showError=function(isInvalid,isTouched){return isInvalid&&isTouched||isInvalid&&vm.showErrors()},vm.isRoaOther=function(){return vm.model.roa.id==DossierLists.getOtherValue()||(vm.model.otherRoaDetails="",!1)}}angular.module("roaRecord").config(function(uiSelectConfig){uiSelectConfig.theme="select2"}).component("cmpRoaRecord",{templateUrl:"app/scripts/components/route-admin/tpl-roa-record_20170626_1154.html",controller:roaRecordController,controllerAs:"roaRecCtrl",bindings:{record:"<",onDelete:"&",showErrors:"&"}}),roaRecordController.$inject=["DossierLists","$translate"]}(),function(){"use strict";angular.module("roaListModule",["roaRecord"])}(),function(){"use strict";function roaListCtrl($filter){function getMaxID(){var id=0;if(!vm.model||!vm.model.roaList)return id;for(var i=0;i<vm.model.roaList.length;i++)vm.model.roaList[i].id>id&&(id=vm.model.roaList[i].id);return id}var vm=this;vm.selectRecord=-1,vm.isDetailValid=!0,vm.resetToCollapsed=!0,vm.oneRecord="",vm.model={},vm.model.roaList=[],vm.columnDef=[{label:"ROA_LBL",binding:"display",width:"40"},{label:"OTHER_ROA_DETAILS",binding:"otherRoaDetails",width:"60"}],vm.$onInit=function(){},vm.$onChanges=function(changes){changes.records&&changes.records.currentValue&&(vm.model.roaList=changes.records.currentValue)},vm.setValid=function(value){vm.isDetailValid=value},vm.addNew=function(){var maxID=getMaxID(),item={id:maxID+1,roa:"",otherRoaDetails:"",display:""};vm.model.roaList.push(item),vm.resetToCollapsed=!vm.resetToCollapsed,vm.selectRecord=0,vm.selectRecord=vm.model.roaList.length-1},vm.deleteRecord=function(recId){var idx=vm.model.roaList.indexOf($filter("filter")(vm.model.roaList,{id:recId},!0)[0]);vm.model.roaList.splice(idx,1)}}angular.module("roaListModule").component("cmpRoaList",{templateUrl:"app/scripts/components/route-admin/tpl-roa-list_20170626_1154.html",bindings:{records:"<",showErrors:"&"},controller:roaListCtrl,controllerAs:"roaCtrl"}),roaListCtrl.$inject=["$filter"]}(),function(){"use strict";angular.module("drugUseModule",["checkBoxListModule"])}(),function(){"use strict";function drugUseCtrl(){var self=this;self.$onInit=function(){self.commonName="drugUse",self.myList=[],self.listItems&&(self.myList=self.listItems)},self.$onChanges=function(changes){changes.listItems&&(self.myList=changes.listItems.currentValue)},self.isDrugUseSelected=function(){if(!self.myList)return!0;for(var i=0;i<self.myList.length;i++)if(self.myList[i].value)return!0;return!1},self.showNoRecordError=function(isInvalid){return self.parentDirty&&!self.isDrugUseSelected()||self.showListErrors()&&!self.isDrugUseSelected()}}angular.module("drugUseModule").component("cmpDrugUse",{templateUrl:"app/scripts/components/drug-use/tpl-drug-use_20170626_1154.html",controller:drugUseCtrl,controllerAs:"duCtrl",bindings:{listItems:"<",showListErrors:"&",parentDirty:"<"}})}(),function(){"use strict";var dependencies=["tabsModule","refProductListModule","drugUseModule","scheduleAModule","dossierDataLists","dataLists","filterLists","fileIO","contactModule26","applicationInfoService","applicationInfo","ui.bootstrap","numberFormat","ngMessages","ngAria","theraClass","dossierService","ngSanitize"];angular.module("dossierModule",dependencies)}(),function(){"use strict";function dossierCtrl($scope,hpfbFileProcessing,ApplicationInfoService,DossierService,DossierLists,getRoleLists,YES,INTERNAL_TYPE,EXTERNAL_TYPE,APPROVED_TYPE,FRENCH,$translate){function _loadFileContent(fileContent){if(fileContent){var resultJson=fileContent.jsonResult;resultJson&&(self.dossierModel=self.dossierService.loadFromFile(resultJson),self.dossierForm.$setDirty()),self.showNoRefReError(),getAppendix4Errors(),_setComplete(),self.showAllErrors=!0,disableXMLSave()}}function getAppendix4Errors(){var appendixCheck=self.dossierService.getMissingAppendix4(self.dossierModel);self.errorAppendix=appendixCheck.missing,self.extraAppendix=appendixCheck.extra}function _setComplete(){self.isIncomplete=!self.activityRoot.dossierID}function disableXMLSave(){var formInvalid=!0;self.dossierForm&&(formInvalid=self.dossierForm.$invalid),self.disableXML=formInvalid||self.dossierModel.applicationType==self.applicationInfoService.getApprovedType()&&self.isExtern()}function _setComplete(){self.isIncomplete=!self.dossierModel.dossierID}function _transformFile(){return updateDate(),self.isExtern()?self.dossierModel.enrolmentVersion=self.applicationInfoService.incrementMinorVersion(self.dossierModel.enrolmentVersion):self.dossierForm.$pristine||(self.dossierModel.enrolmentVersion=self.applicationInfoService.incrementMajorVersion(self.dossierModel.enrolmentVersion),self.dossierModel.applicationType=ApplicationInfoService.prototype.getApprovedType()),self.dossierService.dossierToOutput(self.dossierModel)}function _createFilename(){var draft_prefix="DRAFTREPDO",final_prefix="HCREPDO",filename="",separator="-";return filename=self.userType===INTERNAL_TYPE?final_prefix:draft_prefix,self.dossierModel&&self.dossierModel.dossierID&&(filename=filename+separator+self.dossierModel.dossierID),self.dossierModel.enrolmentVersion&&(filename=filename+separator+self.dossierModel.enrolmentVersion),filename=filename.replace(".",separator),filename.toLowerCase()}function updateDate(){self.dossierModel&&(self.dossierModel.dateSaved=self.applicationInfoService.getTodayDate())}var self=this;self.showContent=_loadFileContent,self.applicationInfoService=new ApplicationInfoService,self.userType=EXTERNAL_TYPE,self.saveXMLLabel="SAVE_DRAFT",self.yesNoList=DossierLists.getYesNoList(),self.yesValue=DossierLists.getYesValue(),self.formTypeList=getRoleLists.getFormTypes(),self.configField={label:"DOSSIER_ID",fieldLength:"7",tagName:"dossierID",errorMsg:"MSG_LENGTH_7",isDossier:!0},self.isIncomplete=!0,self.formAmend=!1,self.showAllErrors=!1,self.errorAppendix=[],self.extraAppendix=[],self.noThera="",self.oneRefSelected="",self.alerts=[!1,!1,!1,!1,!1,!1,!1],self.lang=$translate.proposedLanguage()||$translate.use();var yesValue=YES;self.$onInit=function(){self.dossierService=new DossierService,self.dossierModel=self.dossierService.getDefaultObject()},self.$onChanges=function(changes){changes.formType&&(self.userType=changes.formType.currentValue,self.userType==INTERNAL_TYPE?self.saveXMLLabel="APPROVE_FINAL":self.saveXMLLabel="SAVE_DRAFT")},self.appendixMissingError=function(){return self.errorAppendix&&self.errorAppendix.length>0},self.appendixExtraError=function(){return self.extraAppendix&&self.extraAppendix.length>0},self.thirdPartySignedChanged=function(){return self.dossierModel.drugProduct.thirdPartySigned===yesValue},self.recordsChanged=function(){getAppendix4Errors()},self.isRefProducts=function(){return self.dossierModel.isRefProducts===self.yesValue||(self.dossierModel.drugProduct.canRefProducts=[],!1)},self.setApplicationType=function(value){self.dossierModel.applicationType=value,self.formAmend=self.dossierModel.applicationType===self.applicationInfoService.getAmendType(),disableXMLSave()},self.cdnRefUpdated=function(list){self.showNoRefReError()},self.showNoRefReError=function(){return self.dossierModel.drugProduct.canRefProducts.length>0&&self.dossierModel.isRefProducts===yesValue?(self.oneRefSelected="sel",!1):(self.oneRefSelected="",!0)},self.disableJSONSave=function(){return self.dossierModel.applicationType==APPROVED_TYPE&&self.isExtern()},$scope.$watch("dos.dossierForm.$invalid",function(){disableXMLSave()},!0),self.isExtern=function(){return self.userType==EXTERNAL_TYPE},self.showErrors=function(){return self.showAllErrors},self.showError=function(isInvalid,isTouched){return isInvalid&&isTouched||self.showErrors()&&isInvalid},self.isSchedA=function(){return!!(self.dossierModel&&self.dossierModel.drugProduct&&self.dossierService)&&(!!self.dossierModel.drugProduct.isScheduleA||(self.dossierModel.drugProduct.scheduleAGroup=self.dossierService.getDefaultScheduleA(),!1))},self.saveJson=function(){var writeResult=_transformFile();hpfbFileProcessing.writeAsJson(writeResult,_createFilename(),self.dossierService.getRootTagName()),self.showAllErrors=!0},self.saveXML=function(){var writeResult=_transformFile();hpfbFileProcessing.writeAsXml(writeResult,_createFilename(),self.dossierService.getRootTagName()),self.showAllErrors=!1,self.dossierForm.$setPristine()},self.noTheraRecs=function(){return self.dossierModel&&self.dossierModel.drugProduct?self.dossierModel.drugProduct.therapeutic&&0!==self.dossierModel.drugProduct.therapeutic.length?(self.noThera=self.dossierModel.drugProduct.therapeutic.length,!1):(self.noThera="",!0):(self.noThera="",!1)},self.addInstruct=function(value){angular.isUndefined(value)||value<self.alerts.length&&(self.alerts[value]=!0)},self.closeAlert=function(value){angular.isUndefined(value)||value<self.alerts.length&&(self.alerts[value]=!1)},self.isFrench=function(){return self.lang===FRENCH}}angular.module("dossierModule").component("cmpDossier",{templateUrl:"app/scripts/components/dossier/tpl-dossier_20170626_1154.html",controller:dossierCtrl,controllerAs:"dos",bindings:{dossierRecordInput:"<",onUpdateDossier:"&",onDeleteDossier:"&",formType:"@",service:"<"}}),dossierCtrl.$inject=["$scope","hpfbFileProcessing","ApplicationInfoService","DossierService","DossierLists","getRoleLists","YES","INTERNAL_TYPE","EXTERNAL_TYPE","APPROVED_TYPE","FRENCH","$translate"]}(),function(){"use strict";angular.module("countryRecordModule",["ui.select","hpfbConstants"])}(),function(){"use strict";function countryRecordController($filter,$translate,UNKNOWN){var vm=this;vm.model={id:"",country:"",unknownCountryDetails:"",display:""},vm.countries=[],vm.lang=$translate.proposedLanguage()||$translate.use(),vm.$onInit=function(){},vm.countryChanged=function($item,$model){vm.model.display=$model.id},vm.$onChanges=function(changes){changes.countryList&&(vm.countries=changes.countryList.currentValue),changes.record&&changes.record.currentValue&&(vm.model=changes.record.currentValue)},vm.deleteRecord=function(){vm.onDelete({id:vm.model.id})},vm.showError=function(isInvalid,isTouched){return isInvalid&&isTouched||isInvalid&&vm.showErrors()},vm.isUnknown=function(){return!(!vm.model||!vm.model.country)&&vm.model.country.id===UNKNOWN}}angular.module("countryRecordModule").config(function(uiSelectConfig){uiSelectConfig.theme="select2"}).component("cmpCountryRecord",{templateUrl:"app/scripts/components/country-list/tpl-country-record_20170626_1154.html",controller:countryRecordController,controllerAs:"countryRecCtrl",bindings:{record:"<",onDelete:"&",showErrors:"&",countryList:"<",fieldsetLabel:"@"}}),countryRecordController.$inject=["$filter","$translate","UNKNOWN"]}(),function(){"use strict";angular.module("countryListModule",["dataLists","countryRecordModule","ui.select","hpfbConstants"])}(),function(){"use strict";function countryListController($filter,getCountryAndProvinces,UNKNOWN){function setUnknownCountryState(isUnknown){var countries=angular.copy(self.baseCountries);if(isUnknown){var unknownRec=getCountryAndProvinces.getUnknownCountryRecord();countries.unshift(unknownRec),self.countryList=countries,self.hasUnknown=!0,self.columnDef=[{label:self.fieldLabel,binding:"display",width:"50"},{label:"UNKNOWN_COUNTRY_DETAILS",binding:"unknownCountryDetails",width:"50"}]}else self.countryList=countries,self.hasUnknown=!1,self.emptyModel={id:"",country:"",unknownCountryDetails:"",display:""},self.columnDef=[{label:self.fieldLabel,binding:"display",width:"100"}]}function setRecord(value){self.selectRecord=value}function getListMaxID(){var out=0,list=self.model.list;if(list)for(var i=0;i<list.length;i++)list[i].id>out&&(out=list[i].id);return out}var self=this;self.baseCountries=getCountryAndProvinces.getCountries(),self.countryList="",self.model={},self.isDetailValid=!0,self.resetToCollapsed=!0,self.selectRecord=0,self.columnDef=[{label:self.fieldLabel,binding:"display",width:"100"}],self.hasUnknown=!1,self.emptyModel={id:"",country:"",unknownCountryDetails:"",display:""},self.$onInit=function(){angular.isUndefined(self.model.list)&&(self.model.list=[]),angular.isUndefined(self.countryList)&&setUnknownCountryState(self.withUnknown)},self.$onChanges=function(changes){changes.withUnknown&&setUnknownCountryState(changes.withUnknown.currentValue),changes.listItems&&(self.model.list=changes.listItems.currentValue)},self.addNew=function(){var item=(getListMaxID(),angular.copy(self.emptyModel));item.id=getListMaxID()+1,self.model.list.push(item),setRecord(-1),self.resetToCollapsed=!self.resetToCollapsed,setRecord(self.model.list.length-1)},self.deleteRecord=function(_id){var idx=self.model.list.indexOf($filter("filter")(self.model.list,{id:_id},!0)[0]);idx<0||self.model.list.splice(idx,1)},self.showError=function(isInvalid,isTouched){return isInvalid&&isTouched||isInvalid&&self.showErrors()}}angular.module("countryListModule").component("cmpCountryList",{templateUrl:"app/scripts/components/country-list/tpl-country-list_20170626_1154.html",controller:countryListController,controllerAs:"countryListCtrl",bindings:{withUnknown:"<",listItems:"<",onUpdate:"&",onDelete:"&",showErrors:"&",fieldLabel:"@"}}),countryListController.$inject=["$filter","getCountryAndProvinces","UNKNOWN"]}(),function(){"use strict";angular.module("checkBoxListModule",[])}(),function(){"use strict";function checkBoxListCtrl(){var self=this;self.numberColumns=4,self.colWidth=3,self.$onInit=function(){},self.$onChanges=function(changes){changes.listItems&&(self.currentModel=changes.listItems.currentValue),changes.numberCols&&changes.numberCols.currentValue&&(self.numberColumns=changes.numberCols.currentValue,self.colWidth=Math.ceil(12/self.numberColumns))},self.someSelected=function(){var object=self.roleModel;return!!object&&Object.keys(object).some(function(key){return object[key]})},self.updateState=function(item){item.value||(item.value=!1,item.hasOtherDetails&&(item.otherText=""))}}angular.module("checkBoxListModule").component("cmpCheckboxList",{templateUrl:"app/scripts/components/checkbox-list/tpl-checkbox-list_20170626_1154.html",controller:checkBoxListCtrl,controllerAs:"chkl",bindings:{title:"@",commonName:"@",listItems:"<",numberCols:"@",onUpdate:"&"}})}(),function(){"use strict";angular.module("refProductListModule",["expandingTable","refProductDetailsModule"])}(),function(){"use strict";function refProductListCtrl(){function setRecord(value){self.selectRecord=value}var self=this;self.isDetailValid=!0,self.selectRecord=-1,self.resetToCollapsed=!1,self.newProductFormShown=!1,self.$onInit=function(){self.newProductFormShown=!1,self.isDetailValid=!0,self.selectRecord=-1,self.colNames=[{label:"BRAND_NAME",binding:"brandName",width:"50"},{label:"COMPANY_NAME",binding:"companyName",width:"50"}],self.productList=[],self.newProductFormShown=!1,self.products&&(self.productList=self.products)},self.$onChanges=function(changes){changes.products&&(self.productList=changes.products.currentValue)},self.addProduct=function(product){self.setValid(!0),self.resetToCollapsed=!self.resetToCollapsed,self.productList.push(product),self.newProductFormShown=!1,self.onUpdate({recs:self.productList}),setRecord(-1)},self.updateProduct=function(idx,product){self.productList[idx]=angular.copy(product),self.setValid(!0),self.onUpdate({recs:self.productList})},self.deleteProduct=function(idx){self.productList.splice(idx,1),self.setValid(!0),setRecord(-1),self.onUpdate({recs:self.productList}),self.resetToCollapsed=!self.resetToCollapsed},self.addNewProductState=function(){return self.resetToCollapsed=!self.resetToCollapsed,self.newProductFormShown=!0,self.setValid(!1),self.newProductFormShown},self.addNewDisabled=function(){return self.newProductFormShown||!self.isDetailValid},self.setValid=function(value){self.isDetailValid=value},self.onNewCancel=function(){self.setValid(!0),self.newProductFormShown=!1}}angular.module("refProductListModule").component("cmpRefProductList",{templateUrl:"app/scripts/components/can-ref-products/tpl-ref-product-list_20170626_1154.html",controller:refProductListCtrl,controllerAs:"crpl",bindings:{products:"<",onUpdate:"&"}})}(),function(){"use strict";angular.module("refProductDetailsModule",["expandingTable","dossierDataLists","filterLists","ui.select","hpfbConstants"])}(),function(){"use strict";function refProductDetailsCtrl(DossierLists,$scope,$translate,OTHER){var self=this;self.dosageFormList=DossierLists.getDosageFormList(),self.unitsList=DossierLists.getUnitsList(),self.activeList=DossierLists.getActiveList(),self.savePressed=!1,self.lang=$translate.proposedLanguage()||$translate.use(),self.productModel={brandName:"",newIngred:"Y",ingId:"",ingLabel:"",autoIngred:"N",strengths:"",units:"",otherUnits:"",per:"",dosageForm:"",dosageFormOther:"",companyName:""},self.$onInit=function(){},self.$onChanges=function(changes){changes.productRecord&&changes.productRecord.currentValue&&(self.productModel=angular.copy(self.productRecord),self.backup=angular.copy(self.productModel),self.savePressed=!1)},self.isDosageOther=function(){return!!self.productModel.dosageForm&&(self.productModel.dosageForm.id===OTHER||(self.productModel.dosageFormOther="",!1))},self.showError=function(ctrl){return ctrl.$touched&&ctrl.$invalid||ctrl.$invalid&&self.showErrors()||ctrl.$invalid&&self.savePressed},self.saveProduct=function(){self.productDetailsForm.$valid?(self.productRecord?self.onUpdate({product:self.productModel}):self.onAddProduct({product:self.productModel}),self.productDetailsForm.$setPristine(),self.savePressed=!1):self.savePressed=!0},self.ingredSelectionUpdated=function(item,model,label,event){item?(self.productModel.ingId=item.id,self.productModel.autoIngred="Y"):(self.productModel.ingId="",self.productModel.autoIngred="N")},self.discardChanges=function(){self.productModel=angular.copy(self.backup),self.productDetailsForm.$setPristine(),self.onCancel()},self["delete"]=function(){self.productRecord&&self.onDelete()},self.isUnitsOther=function(){return!!self.productModel&&(self.productModel.units.id===OTHER||(self.productModel.otherUnits="",!1))},$scope.$watch("$ctrl.productDetailsForm.$dirty",function(){self.isDetailValid({state:!self.productDetailsForm.$dirty})},!0)}angular.module("refProductDetailsModule").config(function(uiSelectConfig){uiSelectConfig.theme="select2"}).component("cmpRefProductDetails",{templateUrl:"app/scripts/components/can-ref-products/tpl-ref-product-details_20170626_1154.html",controller:refProductDetailsCtrl,bindings:{productRecord:"<",deleteBtn:"<",onAddProduct:"&",onUpdate:"&",onDelete:"&",onCancel:"&",showErrors:"&",isDetailValid:"&",recordIndex:"<"}}),refProductDetailsCtrl.$inject=["DossierLists","$scope","$translate","OTHER"]}(),function(){"use strict";angular.module("tissuesFluidsList",["tissuesFluidsRecord","expandingTable"])}(),function(){"use strict";function tissuesFluidsListController($filter){function getMaxID(){for(var id=0,i=0;i<vm.model.tissuesFluidsList.length;i++)vm.model.tissuesFluidsList[i].id>id&&(id=vm.model.tissuesFluidsList[i].id);return id}var vm=this;vm.selectRecord=-1,vm.isDetailValid=!0,vm.resetToCollapsed=!0,vm.oneRecord="",vm.model={},vm.model.tissuesFluidsList=[],vm.columnDef=[{label:"SYSTEM_TYPE",binding:"systemType",width:"20"},{label:"SYSTEM_DETAILS",binding:"detailsConcat",width:"40",isHtml:!0},{label:"SYSTEM_OTHER",binding:"otherDetails",width:"40"}],vm.$onInit=function(){vm.isDetailValid=!0,vm.resetToCollapsed=!0,vm.noTissueRecs()},vm.$onChanges=function(changes){changes.records&&(vm.model.tissuesFluidsList=changes.records.currentValue)},vm.setValid=function(value){vm.isDetailValid=value},vm.addNew=function(){var maxID=getMaxID(),item={id:maxID+1,systemType:"",detailsConcat:"",system:{},otherDetails:""};vm.model.tissuesFluidsList.push(item),vm.resetToCollapsed=!vm.resetToCollapsed,vm.selectRecord=0,vm.selectRecord=vm.model.tissuesFluidsList.length-1},vm.deleteRecord=function(recId){var idx=vm.model.tissuesFluidsList.indexOf($filter("filter")(vm.model.tissuesFluidsList,{id:recId},!0)[0]);vm.model.tissuesFluidsList.splice(idx,1)},vm.noTissueRecs=function(){return vm.model.tissuesFluidsList.length>0?(vm.oneRecord="selected",!1):(vm.oneRecord="",!0)},vm.disableAdd=function(){return!vm.noTissueRecs()&&vm.tissuesListForm.$invalid},vm.systemAlreadyUsed=function(systemVal){for(var systemExists=0,i=0;i<vm.model.tissuesFluidsList.length;i++)vm.model.tissuesFluidsList[i].systemType===systemVal&&systemExists++;return systemExists>1}}angular.module("tissuesFluidsList").component("cmpTissuesFluidsList",{templateUrl:"app/scripts/components/appendix-four/tpl-tissuesFluids-list_20170626_1154.html",bindings:{records:"<",showErrors:"&",service:"<"},controller:tissuesFluidsListController,controllerAs:"tissuesListSrcCtrl"}),tissuesFluidsListController.$inject=["$filter"]}(),function(){"use strict";angular.module("tissuesFluidsRecord",["dossierDataLists","nervousModule","digestiveModule","cardioModule","immuneModule","muscleModule","otherTissuesModule","reprodModule","skinModule"])}(),function(){"use strict";function tissuesFluidsController(DossierLists,$translate,$filter){var vm=this;vm.systemList=DossierLists.getTissuesSystem(),vm.fluidsLists=DossierLists,vm.dosService="",vm.isUsed=!1,vm.selectedSystemList=[],vm.model={},vm.$onInit=function(){},vm.$onChanges=function(changes){changes.record&&(vm.model=changes.record.currentValue),changes.service&&(vm.dosService=changes.service.currentValue)},vm.deleteRecord=function(){vm.onDelete({id:vm.model.id})},vm.showError=function(ctrl){return ctrl?ctrl.$invalid&&ctrl.$touched||ctrl.$invalid&&vm.showErrors():(console.warn("No control found in tissuesFluids-record"),!1)},vm.systemChanged=function(ctrl){switch(vm.model.system={},vm.model.detailsConcat="",vm.isUsed=vm.systemUsed({value:vm.model.systemType}),ctrl.$setValidity("duplicateRole",!vm.isUsed),vm.isUsed&&(vm.model.system={},vm.otherDetails="",vm.model.detailsConcat=""),vm.model.systemType){case DossierLists.getNervousSystemValue():vm.model.system=vm.dosService.getDefaultNervousSystem();break;case DossierLists.getDigestiveSystemValue():vm.model.system=vm.dosService.getDefaultDigestiveSystem();break;case DossierLists.getImmuneSystemValue():vm.model.system=vm.dosService.getDefaultImmuneSystem();break;case DossierLists.getMuscleSystemValue():vm.model.system=vm.dosService.getDefaultMuscleSystem();break;case DossierLists.getOtherTissuesSystemValue():vm.model.system=vm.dosService.getDefaultOtherSystem();break;case DossierLists.getReproductiveSystemValue():vm.model.system=vm.dosService.getDefaultReproductiveSystem();break;case DossierLists.getSkinSystemValue():vm.model.system=vm.dosService.getDefaultSkinSystem();break;case DossierLists.getCardioSystemValue():vm.model.system=vm.dosService.getDefaultCardioSystem();break;default:vm.model.system={},vm.otherDetails="",vm.model.detailsConcat=""}vm.otherChanged()},vm.otherChanged=function(){vm.model.otherDetails=vm.model.system.otherDetails},vm.updateConcat=function(alias,toAdd){for(var currentLang=$translate.proposedLanguage()||$translate.use(),translateText=$translate.instant(alias,"","",currentLang),records=vm.model.detailsConcat.split("<br>"),index=-1,i=0;i<records.length;i++)if(records[i]==translateText){index=i;break}if(index===-1&&toAdd){records[0]?records.push(translateText):records[0]=translateText,records=$filter("orderBy")(records),vm.model.detailsConcat="",vm.model.detailsConcat=records[0];for(var s=1;s<records.length;s++)vm.model.detailsConcat=vm.model.detailsConcat+"<br>"+records[s]}else if(!toAdd&&index!==-1){for(var newConcat="",j=0;j<records.length;j++)j!==index&&(newConcat=newConcat+records[j]+"<br>");vm.model.detailsConcat=newConcat.substring(0,newConcat.length-4)}}}angular.module("tissuesFluidsRecord").component("cmpTissuesFluidsRecord",{templateUrl:"app/scripts/components/appendix-four/tpl-tissueFluids-record_20170626_1154.html",controller:tissuesFluidsController,controllerAs:"tissuesSrcCtrl",bindings:{record:"<",onDelete:"&",showErrors:"&",service:"<",systemUsed:"&"}}),tissuesFluidsController.$inject=["DossierLists","$translate","$filter"]}(),function(){"use strict";angular.module("skinModule",[])}(),function(){"use strict";function skinSystemController(){var vm=this;vm.model={},vm.isSelected="",vm.$onInit=function(){},vm.$onChanges=function(changes){changes.record&&(vm.model=changes.record.currentValue,vm.updateErrorState())},vm.updateErrorState=function(){for(var keys=Object.keys(vm.model),i=0;i<keys.length;i++){var val=vm.model[keys[i]];if(val)return"otherSkin"===keys[i]?vm.model.otherDetails?void(vm.isSelected="selected"):void(vm.isSelected=""):void(vm.isSelected="selected")}vm.isSelected=""},vm.detailsChanged=function(alias,value){vm.concatUpdate({alias:alias,
value:value}),vm.updateErrorState()},vm.otherChanged=function(){var state=!1;return vm.model.otherSkin?state=!0:(state=!1,vm.model.otherDetails=""),vm.otherUpdate(),vm.updateErrorState(),state},vm.showErrorMissing=function(){return vm.skinForm.$dirty&&vm.skinForm.$invalid}}angular.module("skinModule").component("cmpSkinSystem",{templateUrl:"app/scripts/components/appendix-four/tpl-skin_20170626_1154.html",controllerAs:"sysCtrl",controller:skinSystemController,bindings:{record:"<",otherUpdate:"&",concatUpdate:"&"}})}(),function(){"use strict";angular.module("reprodModule",[])}(),function(){"use strict";function reproductiveSystemController(){var vm=this;vm.model={},vm.isSelected="",vm.$onInit=function(){},vm.$onChanges=function(changes){changes.record&&(vm.model=changes.record.currentValue,vm.updateErrorState())},vm.detailsChanged=function(alias,value){vm.concatUpdate({alias:alias,value:value}),vm.updateErrorState()},vm.updateErrorState=function(){for(var keys=Object.keys(vm.model),i=0;i<keys.length;i++){var val=vm.model[keys[i]];if(val)return"otherReproductive"===keys[i]?vm.model.otherDetails?void(vm.isSelected="selected"):void(vm.isSelected=""):void(vm.isSelected="selected")}vm.isSelected=""},vm.otherChanged=function(){var state=!1;return vm.model.otherReproductive?state=!0:(state=!1,vm.model.otherDetails=""),vm.otherUpdate(),vm.updateErrorState(),state},vm.showErrorMissing=function(){return vm.reprodForm.$dirty&&vm.reprodForm.$invalid}}angular.module("reprodModule").component("cmpReproductiveSystem",{templateUrl:"app/scripts/components/appendix-four/tpl-reproductive_20170626_1154.html",controllerAs:"sysCtrl",controller:reproductiveSystemController,bindings:{record:"<",otherUpdate:"&",concatUpdate:"&"}})}(),function(){"use strict";angular.module("otherTissuesModule",[])}(),function(){"use strict";function otherTissueSystemController(){var vm=this;vm.model={},vm.isSelected="",vm.$onInit=function(){},vm.$onChanges=function(changes){changes.record&&(vm.model=changes.record.currentValue,vm.updateErrorState())},vm.detailsChanged=function(alias,value){vm.concatUpdate({alias:alias,value:value}),vm.updateErrorState()},vm.updateErrorState=function(){for(var keys=Object.keys(vm.model),i=0;i<keys.length;i++){var val=vm.model[keys[i]];if(val)return"otherFluids"===keys[i]?vm.model.otherDetails?void(vm.isSelected="selected"):void(vm.isSelected=""):void(vm.isSelected="selected")}vm.isSelected=""},vm.otherChanged=function(){var state=!1;return vm.model.otherFluids?state=!0:(state=!1,vm.model.otherDetails=""),vm.otherUpdate(),vm.updateErrorState(),state},vm.showErrorMissing=function(){return vm.otherForm.$dirty&&vm.otherForm.$invalid}}angular.module("otherTissuesModule").component("cmpOtherTissuesSystem",{templateUrl:"app/scripts/components/appendix-four/tpl-other-tissue_20170626_1154.html",controllerAs:"sysCtrl",controller:otherTissueSystemController,bindings:{record:"<",otherUpdate:"&",concatUpdate:"&"}})}(),function(){"use strict";angular.module("nervousModule",[])}(),function(){"use strict";function nervousSystemController(){var vm=this;vm.model={},vm.$onInit=function(){vm.isSelected=""},vm.$onChanges=function(changes){changes.record&&(vm.model=changes.record.currentValue,vm.updateErrorState())},vm.detailsChanged=function(alias,value){vm.concatUpdate({alias:alias,value:value}),vm.updateErrorState()},vm.updateErrorState=function(){for(var keys=Object.keys(vm.model),i=0;i<keys.length;i++){var val=vm.model[keys[i]];if(val)return"otherNervous"===keys[i]?vm.model.otherDetails?void(vm.isSelected="selected"):void(vm.isSelected=""):void(vm.isSelected="selected")}vm.isSelected=""},vm.otherChanged=function(){var state=!1;return vm.model.otherNervous?state=!0:(state=!1,vm.model.otherDetails=""),vm.otherUpdate(),vm.updateErrorState(),state},vm.showErrorMissing=function(){return vm.nervForm.$dirty&&vm.nervForm.$invalid}}angular.module("nervousModule").component("cmpNervousSystem",{templateUrl:"app/scripts/components/appendix-four/tpl-nervous_20170626_1154.html",controllerAs:"sysCtrl",controller:nervousSystemController,bindings:{record:"<",otherUpdate:"&",concatUpdate:"&"}})}(),function(){"use strict";angular.module("muscleModule",[])}(),function(){"use strict";function muscleSystemController(){var vm=this;vm.model={},vm.$onInit=function(){vm.isSelected=""},vm.$onChanges=function(changes){changes.record&&(vm.model=changes.record.currentValue,vm.updateErrorState())},vm.detailsChanged=function(alias,value){vm.concatUpdate({alias:alias,value:value}),vm.updateErrorState()},vm.updateErrorState=function(){for(var keys=Object.keys(vm.model),i=0;i<keys.length;i++){var val=vm.model[keys[i]];if(val)return"otherMuscle"===keys[i]?vm.model.otherDetails?void(vm.isSelected="selected"):void(vm.isSelected=""):void(vm.isSelected="selected")}vm.isSelected=""},vm.otherChanged=function(){var state=!1;return vm.model.otherMuscle?state=!0:(state=!1,vm.model.otherDetails=""),vm.otherUpdate(),vm.updateErrorState(),state},vm.showErrorMissing=function(){return vm.muscleForm.$dirty&&vm.muscleForm.$invalid}}angular.module("muscleModule").component("cmpMuscleSystem",{templateUrl:"app/scripts/components/appendix-four/tpl-muscle_20170626_1154.html",controllerAs:"sysCtrl",controller:muscleSystemController,bindings:{record:"<",otherUpdate:"&",concatUpdate:"&"}})}(),function(){"use strict";angular.module("immuneModule",[])}(),function(){"use strict";function immuneSystemController(){var vm=this;vm.model={},vm.isSelected="",vm.$onInit=function(){},vm.$onChanges=function(changes){changes.record&&(vm.model=changes.record.currentValue,vm.updateErrorState())},vm.showErrorMissing=function(){return vm.immuneForm.$dirty&&vm.immuneForm.$invalid},vm.detailsChanged=function(alias,value){vm.concatUpdate({alias:alias,value:value}),vm.updateErrorState()},vm.updateErrorState=function(){for(var keys=Object.keys(vm.model),i=0;i<keys.length;i++){var val=vm.model[keys[i]];if(val)return"otherImmune"===keys[i]?vm.model.otherDetails?void(vm.isSelected="selected"):void(vm.isSelected=""):void(vm.isSelected="selected")}vm.isSelected=""},vm.otherChanged=function(){var state=!1;return vm.model.otherImmune?state=!0:(state=!1,vm.model.otherDetails=""),vm.otherUpdate(),vm.updateErrorState(),state}}angular.module("immuneModule").component("cmpImmuneSystem",{templateUrl:"app/scripts/components/appendix-four/tpl-immune_20170626_1154.html",controllerAs:"sysCtrl",controller:immuneSystemController,bindings:{record:"<",otherUpdate:"&",concatUpdate:"&"}})}(),function(){"use strict";angular.module("digestiveModule",[])}(),function(){"use strict";function digestiveSystemController(){var vm=this;vm.model={},vm.isSelected="",vm.$onInit=function(){},vm.$onChanges=function(changes){changes.record&&(vm.model=changes.record.currentValue,vm.updateErrorState())},vm.detailsChanged=function(alias,value){vm.concatUpdate({alias:alias,value:value}),vm.updateErrorState()},vm.updateErrorState=function(){for(var keys=Object.keys(vm.model),i=0;i<keys.length;i++){var val=vm.model[keys[i]];if(val)return"otherDigestive"===keys[i]?vm.model.otherDetails?void(vm.isSelected="selected"):void(vm.isSelected=""):void(vm.isSelected="selected")}vm.isSelected=""},vm.otherChanged=function(){var state=!1;return vm.model.otherDigestive?state=!0:(state=!1,vm.model.otherDetails=""),vm.otherUpdate(),vm.updateErrorState(),state},vm.showErrorMissing=function(){return vm.digestForm.$dirty&&vm.digestForm.$invalid}}angular.module("digestiveModule").component("cmpDigestiveSystem",{templateUrl:"app/scripts/components/appendix-four/tpl-digestive_20170626_1154.html",controllerAs:"sysCtrl",controller:digestiveSystemController,bindings:{record:"<",otherUpdate:"&",concatUpdate:"&"}})}(),function(){"use strict";angular.module("cardioModule",[])}(),function(){"use strict";function cardioSystemController(){var vm=this;vm.model={},vm.isSelected="",vm.$onInit=function(){},vm.$onChanges=function(changes){changes.record&&(vm.model=changes.record.currentValue,vm.updateErrorState())},vm.detailsChanged=function(alias,value){vm.concatUpdate({alias:alias,value:value}),vm.updateErrorState()},vm.updateErrorState=function(){for(var keys=Object.keys(vm.model),i=0;i<keys.length;i++){var val=vm.model[keys[i]];if(val)return"otherCardio"===keys[i]?vm.model.otherDetails?void(vm.isSelected="selected"):void(vm.isSelected=""):void(vm.isSelected="selected")}vm.isSelected=""},vm.otherChanged=function(){var state=!1;return vm.model.otherCardio?state=!0:(state=!1,vm.model.otherDetails=""),vm.otherUpdate(),vm.updateErrorState(),state},vm.showErrorMissing=function(){return vm.cardioForm.$dirty&&vm.cardioForm.$invalid}}angular.module("cardioModule").component("cmpCardioSystem",{templateUrl:"app/scripts/components/appendix-four/tpl-cardio_20170626_1154.html",controllerAs:"sysCtrl",controller:cardioSystemController,bindings:{record:"<",otherUpdate:"&",concatUpdate:"&"}})}(),function(){"use strict";angular.module("appendixFourModule",["expandingTable","appendix4RecordModule"])}(),function(){"use strict";function appendixFourCtrl(){function getListMaxID(){var out=0,list=self.ingredientList;if(list)for(var i=0;i<list.length;i++)list[i].id>out&&(out=list[i].id);return out}var self=this;self.selectRecord=-1,self.resetToCollapsed=!0,self.colNames=[{label:"INGRED_NAME",binding:"ingredientName",width:"98"}],self.ingredientList=[],self.$onInit=function(){self.newFormShown=!1,self.isDetailValid=!0,self.ingredientList||(self.ingredientList=[])},self.$onChanges=function(changes){changes.ingredients&&(self.ingredientList=changes.ingredients.currentValue)},self.addNew=function(){var newRecord={id:getListMaxID()+1,ingredientName:""};self.ingredientList.push(newRecord),self.resetToCollapsed=!self.resetToCollapsed,self.selectRecord=self.ingredientList.length-1},self.update=function(idx,ing){},self["delete"]=function(idx){self.ingredientList.splice(idx,1)&&(self.resetToCollapsed=!0)}}angular.module("appendixFourModule").component("cmpAppendixFour",{templateUrl:"app/scripts/components/appendix-four/tpl-appendix-four_20170626_1154.html",controller:appendixFourCtrl,controllerAs:"ap4Ctrl",bindings:{ingredients:"<",recordChanged:"&",service:"<"}})}(),function(){"use strict";angular.module("appendix4RecordModule",["tissuesFluidsList","animalSourcedSection"])}(),function(){"use strict";function app4RecCtrl(){var self=this;self.isSourced="";var emptyFluidsTissues={tissuesList:[]},emptyAnimalSource={animalSrcList:[],isCellLine:"",isBiotechDerived:"",isControlledPop:"",ageAnimals:"",countryList:[]};self.model={},self.$onInit=function(){self.isSourcedSelected()},self.$onChanges=function(changes){changes.record&&(self.model=changes.record.currentValue,self.isSourcedSelected())},self.isSourcedSelected=function(){var result=self.model.humanSourced||self.model.animalSourced;return result?self.isSourced=result:self.isSourced="",result},self.noSelectionError=function(){return self.appendix4RecForm.$dirty&&!self.isSourcedSelected()||self.showListErrors()&&!self.isSourcedSelected()},self.showError=function(isInvalid,isTouched){return isInvalid&&isTouched||isInvalid&&self.showListErrors()},self.save=function(){self.record?self.onUpdate({record:self.model}):self.onAddNew({record:self.model})},self["delete"]=function(){self.record&&self.onDelete()},self.updateTissuesFluids=function(input){self.model.tissuesFluidsOrigin=input,self.onUpdate({record:self.model})},self.updateAnimalSourced=function(input){self.model.sourceAnimalDetails=input,self.onUpdate({record:self.model})},self.showTissuesFluids=function(){return self.model.humanSourced||self.model.animalSourced?(self.model.tissuesFluidsOrigin||(self.model.tissuesFluidsOrigin=angular.copy(emptyFluidsTissues)),!0):(self.model.tissuesFluidsOrigin=null,!1)},self.showAnimalSources=function(){return self.showTissuesFluids(),self.model.animalSourced?(self.model.sourceAnimalDetails||(self.model.sourceAnimalDetails=angular.copy(emptyAnimalSource)),!0):(self.model.sourceAnimalDetails=null,!1)}}angular.module("appendix4RecordModule").component("cmpAppendixFourRecord",{templateUrl:"app/scripts/components/appendix-four/tpl-appendix-four-record_20170626_1154.html",controllerAs:"ap4RecCtrl",controller:app4RecCtrl,bindings:{record:"<",showListErrors:"&",onAddNew:"&",onUpdate:"&",onDelete:"&",onCancel:"&",deleteBtn:"<",recordChanged:"&",service:"<"}})}(),function(){"use strict";angular.module("animalSourcedSection",["animalSourcedList","countryListModule","numberFormat"])}(),function(){"use strict";function animalSourcedSectionController($filter,DossierLists){var vm=this;vm.yesNoUnknownList=DossierLists.getYesNoUnknownList(),vm.model={},vm.model.animalSrcSection=[],vm.oneAnimal="",vm.oneCountry="",vm.$onInit=function(){vm.noAnimalSrc()},vm.$onChanges=function(changes){changes.records&&(vm.model=changes.records.currentValue)},vm.showError=function(ctrl){return ctrl?ctrl.$invalid&&ctrl.$touched||ctrl.$invalid&&vm.showErrors():(console.warn("No control animalSourced-section"),!1)},vm.updateCountryList=function(list){vm.model.countryList=list},vm.noAnimalSrc=function(){return vm.model.animalSrcList.length>0?(vm.oneAnimal="selected",!1):(vm.oneAnimal="",!0)},vm.noCountrySrc=function(){return vm.model.countryList.length>0?(vm.oneCountry="selected",!1):(vm.oneCountry="",!0)}}angular.module("animalSourcedSection").component("cmpAnimalSourcedSection",{templateUrl:"app/scripts/components/appendix-four/tpl-animalSourced-section_20170626_1154.html",bindings:{records:"<",showErrors:"&"},controller:animalSourcedSectionController,controllerAs:"animalSectCtrl"}),animalSourcedSectionController.$inject=["$filter","DossierLists"]}(),function(){"use strict";angular.module("animalSourcedRecord",[])}(),function(){"use strict";function animalSourcedController(DossierLists){var vm=this;vm.animalsList=DossierLists.getAnimalSources(),vm.yesNoUnknownList=DossierLists.getYesNoUnknownList(),vm.model={},vm.$onInit=function(){},vm.$onChanges=function(changes){changes.record&&(vm.model=changes.record.currentValue)},vm.deleteRecord=function(){vm.onDelete({id:vm.model.id})},vm.showError=function(ctrl){return ctrl?ctrl.$invalid&&ctrl.$touched||ctrl.$invalid&&vm.showErrors():(console.warn("No control found in animalSourced-record"),!1)}}angular.module("animalSourcedRecord").component("cmpAnimalSourcedRecord",{templateUrl:"app/scripts/components/appendix-four/tpl-animalSourced-record_20170626_1154.html",controller:animalSourcedController,controllerAs:"animalSrcCtrl",bindings:{record:"<",onDelete:"&",showErrors:"&"}}),animalSourcedController.$inject=["DossierLists"]}(),function(){"use strict";angular.module("animalSourcedList",["animalSourcedRecord","expandingTable"])}(),function(){"use strict";function animalSourcedListController($filter){function getMaxID(){for(var id=0,i=0;i<vm.model.animalSrcList.length;i++)vm.model.animalSrcList[i].id>id&&(id=vm.model.animalSrcList[i].id);return id}var vm=this;vm.selectRecord=-1,vm.isDetailValid=!0,vm.resetToCollapsed=!0,vm.oneRecord="",vm.model={},vm.model.animalSrcList=[],vm.columnDef=[{label:"ANIMAL_TYPE",binding:"animalType",width:"40"},{label:"ANIMAL_TYPE_DETAILS",binding:"animalDetail",width:"60"}],vm.$onInit=function(){vm.isDetailValid=!0,vm.resetToCollapsed=!0,vm.oneRecord=""},vm.$onChanges=function(changes){changes.records&&(vm.model.animalSrcList=changes.records.currentValue)},vm.showError=function(isTouched,isInvalid){return!0},vm.setValid=function(value){vm.isDetailValid=value},vm.addNew=function(){var maxID=getMaxID(),item={id:maxID+1,animalType:"",animalDetail:""};vm.model.animalSrcList.push(item),vm.resetToCollapsed=!vm.resetToCollapsed,vm.selectRecord=0,vm.selectRecord=vm.model.animalSrcList.length-1},vm.deleteRecord=function(recId){var idx=vm.model.animalSrcList.indexOf($filter("filter")(vm.model.animalSrcList,{id:recId},!0)[0]);vm.model.animalSrcList.splice(idx,1)}}angular.module("animalSourcedList").component("cmpAnimalSourcedList",{templateUrl:"app/scripts/components/appendix-four/tpl-animalSourced-list_20170626_1154.html",bindings:{records:"<",showErrors:"&"},controller:animalSourcedListController,controllerAs:"animalListCtrl"}),animalSourcedListController.$inject=["$filter"]}();
//# sourceMappingURL=data:application/json;base64,

!function(){"use strict";angular.module("companyApp",["pascalprecht.translate","companyMain","companyLoadService","translations"])}(),function(){"use strict";function MainController(){var vm=this;vm.formType="INT"}angular.module("companyApp").controller("MainController",MainController)}(),function(){"use strict";angular.module("companyApp").config(["$translateProvider","$locationProvider",function($translateProvider,$locationProvider){$locationProvider.html5Mode({enabled:!0,requireBase:!1,rewriteLinks:!1}),$translateProvider.preferredLanguage("en"),$translateProvider.useLoader("customLoad"),$translateProvider.directivePriority(1),$translateProvider.useSanitizeValueStrategy(null),$translateProvider.forceAsyncReload(!0)}])}(),angular.module("translations",[]).config(["$translateProvider",function($translateProvider){$translateProvider.translations("en",{CITY:"City or Town",COUNTRY:"Country",PROVINCE:"Province",POSTAL:"Postal Code",PROVSTATE:"Province or State",STATE:"State",STREET:"Street Address",ZIP:"Zip Code",COMPANY:"Company",ADD_ADDRESS:"Add Address",CITY_TOWN:"City or Town",SAVE_ADDR:"Save Address",DELETE_ADDR:"Delete Address",ADDR_INFO:"Address Information",ADDR_DETAILS:"Address Details",ADDR_ROLE_LEGEND:"Select one or more roles for this company",ADDR_REP_ROLE_LEGEND:"Select one or more roles for this company representative",PRODUCTS_IMPORTED:"Imported Products",PRODUCT_TYPES:"Products imported by this Company",ALL_PRODUCTS:"All Products",SELECTED_PRODUCTS:"Some Products",IDENTIFY_PRODUCTS:"Provide the Dossier Identifiers for the products that are imported by this Company",ADD_DOSSIER_ID:"Add Dossier ID",IMPORTER_NONCDN:"Please ensure you indicate a Canadian Importer.",COUNTRY_CHOOSE:"Choose a country",COUNTRY_SEARCH:"Select or Search for country",PROVINCELIST:"Province or State"}),$translateProvider.translations("fr",{CITY:"Ville",COUNTRY:"Pays",PROVINCE:"Province",POSTAL:"Code postal",PROVSTATE:"Province ou état",STATE:"État",STREET:"Rue",ZIP:"Code ZIP",COMPANY:"Compagnie",ADD_ADDRESS:"Ajouter Addresse",CITY_TOWN:"Ville",SAVE_ADDR:"Enregistrer l'adresse",DELETE_ADDR:"Supprimer Addresse",ADDR_INFO:"Information d'adresse",ADDR_DETAILS:"Détails de l'adresse",ADDR_ROLE_LEGEND:"Sélectionner un ou plusieurs rôles pour cette compagnie",ADDR_REP_ROLE_LEGEND:"Sélectionner un ou plusieurs rôles pour ce représentant de la compagnie",PRODUCTS_IMPORTED:"Produits importé",PRODUCT_TYPES:"Produits importé par cette compagnie",ALL_PRODUCTS:"Tous les produits",SELECTED_PRODUCTS:"Certain produits",IDENTIFY_PRODUCTS:"Fournir les numéros de dossier pour les produits importés par cette compagnie",ADD_DOSSIER_ID:"Ajouter un numéro de dossier",IMPORTER_NONCDN:"Veuillez vous assurer d'indiquer un importateur canadien.",COUNTRY_CHOOSE:"Choisir un pays",COUNTRY_SEARCH:"Selectionner ou rechercher le pays",PROVINCELIST:"Province or State"}),$translateProvider.translations("en",{AB:"Alberta",BC:"British Columbia",MB:"Manitoba",NB:"New Brunswick",NL:"Newfoundland and Labrador",NT:"Northwest Territories",NS:"Nova Scotia",NU:"Nunavut",ON:"Ontario",PE:"Prince Edward Island",QC:"Quebec",SK:"Saskatchewan",YT:"Yukon",AL:"Alabama",AK:"Alaska",AZ:"Arizona",AR:"Arkansas",CA:"California",CO:"Colorado",CT:"Connecticut",DE:"Delaware",DC:"District of Columbia",FL:"Florida",GA:"Georgia",HI:"Hawaii",ID:"Idaho",IL:"Illinois",IN:"Indiana",IA:"Iowa",KS:"Kansas",KY:"Kentucky",LA:"Louisiana",ME:"Maine",MD:"Maryland",MA:"Massachusetts",MI:"Michigan",MN:"Minnesota",MS:"Mississippi",MO:"Missouri",MT:"Montana",NE:"Nebraska",NV:"Nevada",NH:"New Hampshire",NJ:"New Jersey",NM:"New Mexico",NY:"New York",NC:"North Carolina",ND:"North Dakota",OH:"Ohio",OK:"Oklahoma",OR:"Oregon",PA:"Pennsylvania",RI:"Rhode Island",SC:"South Carolina",SD:"South Dakota",TN:"Tennessee",TX:"Texas",UT:"Utah",VT:"Vermont",VA:"Virginia",WA:"Washington",WV:"West Virginia",WI:"Wisconsin",WY:"Wyoming"}),$translateProvider.translations("fr",{AB:"Alberta",BC:"Colombie-Britannique",PE:"Île-du-Prince-Édouard",MB:"Manitoba",NB:"Nouveau-Brunswick",NS:"Nouvelle-Écosse",NU:"Nunavut",ON:"Ontario",QC:"Québec",SK:"Saskatchewan",NL:"Terre-Neuve et Labrador",NT:"Territoires du Nord-Ouest",YT:"Yukon",AL:"Alabama",AK:"Alaska",AZ:"Arizona",AR:"Arkansas",CA:"Californie",NC:"Caroline du nord",SC:"Caroline du sud",CO:"Colorado",CT:"Connecticut",ND:"Dakota du nord",SD:"Dakota du sud",DE:"Delaware",DC:"District de Columbia",FL:"Floride",GA:"Géorgie",HI:"Hawaii",ID:"Idaho",IL:"Illinois",IN:"Indiana",IA:"Iowa",KS:"Kansas",KY:"Kentucky",NY:"L'état de New York",WA:"L'état de washington",LA:"Louisiane",ME:"Maine",MD:"Maryland",MA:"Massachusetts",MI:"Michigan",MN:"Minnesota",MS:"Mississippi",MO:"Missouri",MT:"Montana",NE:"Nebraska",NV:"Nevada",NH:"New Hampshire",NJ:"New Jersey",NM:"Nouveau-mexique",OH:"Ohio",OK:"Oklahoma",OR:"Oregon",PA:"Pennsylvanie",RI:"Rhode Island",TN:"Tennessee",TX:"Texas",UT:"Utah",VT:"Vermont",VA:"Virginie",WV:"Virginie-occidentale",WI:"Wisconsin",WY:"Wyoming"}),$translateProvider.translations("en",{FIRSTNAME:"First Name",LASTNAME:"Last Name",INITIALS:"Initials",LANGCORRESPOND:"Language of Correspondence",JOBTITLE:"Job Title",SALUTATION:"Salutation",SALUT_MR:"Mr.",SALUT_MS:"Ms.",SALUT_DR:"Dr.",SALUT_MRS:"Mrs.",ROLE_PRIMARY:"Primary",ROLE_SECONDARY:"Alternate",CONTACTEMAIL:"Email",FAX_NUMBER:"Fax Number",PHONE_EXT:"Phone Extension",ROLES:"Roles",PHONENUMBER:"Phone Number",CONTACT_INFO:"Company Representative Information",REP_CONTACT:"Regulatory Enrolment Process Contact",ONE_ROLE:"Role",CONTACT_DETAILS:"Company Representative Details",ADD_CONTACT:"Add REP Contact",CONTACT_ROLE_LEGEND:"Select one or more roles for this company representative",CONTACT_ROLE_INSTRUCT:"Company Representative Role Instructions",ADD_REPRES:"Add Company Representative",DELETE_REPRES:"Delete Company Rep.",SAVE_REPRES:"Save Company Rep.",IMP_COMPANY_NAME:"Canadian Importer Company Name"}),$translateProvider.translations("fr",{FIRSTNAME:"Prénom",LASTNAME:"Nom de famille",INITIALS:"Initiales",LANGCORRESPOND:"Langue de correspondance",JOBTITLE:"Titre",SALUTATION:"Appel",SALUT_MR:"M.",SALUT_MS:"Mme",SALUT_DR:"Dr.",SALUT_MRS:"Mlle",ROLE_PRIMARY:"Primaire",ROLE_SECONDARY:"Alterner",CONTACTEMAIL:"Courriel",FAX_NUMBER:"Numéro de télécopieur",PHONE_EXT:"Extension de téléphone",ADDR_ROLES:"Rôles",PHONENUMBER:"Numéro de téléphone",CONTACT_INFO:"Renseignements sur le représentant de la copmpagnie",REP_CONTACT:"Personne-ressource pour le PIR",ONE_ROLE:"Rôle",CONTACT_DETAILS:"Détails du représentant de la compagnie",ADD_CONTACT:"Ajouter la personne-ressource pour le PIR",CONTACT_ROLE_LEGEND:"Sélectionner un ou plusieurs rôles pour ce représentant de la compagnie",ADD_REPRES:"Ajouter un représentant de la compagnie",DELETE_REPRES:"Supprimer le représentant de la compagnie",SAVE_REPRES:"Enregistrer le représentant de la compagnie",ROLES:"Rôles",IMP_COMPANY_NAME:"Nom de la compagnie de l'importateur canadien"}),$translateProvider.translations("en",{APPL_STATUS:"Enrolment Status",ENROL_VERSION:"Enrolment Version",DATE_SAVED:"Date Last Saved",AMEND_ENROL:"Amend Enrolment",AMEND_MSG:"Edit records to be amended below.",REASON_AMEND:"Reason for amendment"}),$translateProvider.translations("fr",{APPL_STATUS:"Statut de l'insciption",ENROL_VERSION:"Version de l'inscription",DATE_SAVED:" Date du dernier enregistrement",AMEND_ENROL:"Modifier l'inscription",AMEND_MSG:"Changer les enregistrements à modifier ci-dessous.",REASON_AMEND:"Raison pour la modification"}),$translateProvider.translations("en",{SELECT_LOAD:"Select a file to load",MSG_SUCCESS_LOAD:"The file was loaded successfully",MSG_ERR_JSONPARSE:"Error: there was an error parsing the working file.",MSG_ERR_XMLPARSE:"Error: there was an error parsing the draft XML file.",MSG_ERR_FILE_LOAD:"Error: there was a problem loading the file.",MSG_ERR_FILE_TYPE:"Error: An invalid file type was selected.",MSG_ERR_FORM_TYPE:"Error: the wrong form type was selected for this form.",MSG_ERR_CHECKSUM_FAIL:"Error: the checksum in the file does not match the calculated checksum",MSG_ERR_FILE_VERSION:"Error: An invalid file version was selected."}),$translateProvider.translations("fr",{SELECT_LOAD:"Sélectionnez un fichier à charger",MSG_SUCCESS_LOAD:"Le fichier a été chargé avec succès",MSG_ERR_JSONPARSE:"Erreur: il y a eu une erreur en analysant le fichier de travail.",MSG_ERR_XMLPARSE:"Erreur: il y avait une erreur d'analyse du projet de fichier XML,",MSG_ERR_FILE_LOAD:"Erreur: il y a eu un problème lors du chargement du fichier.",MSG_ERR_FILE_TYPE:"Erreur: un type de fichier invalide a été sélectionné.",MSG_ERR_FORM_TYPE:"Erreur: le type de formulaire incorrect a été sélectionné pour ce formulaire.",MSG_ERR_CHECKSUM_FAIL:"Erreur: La somme de contrôle dans le fichier ne correspond pas à la somme de contrôle calculée.",MSG_ERR_FILE_VERSION:"Erreur: un version de fichier invalide a été sélectionné."}),$translateProvider.translations("en",{Y:"Yes",N:"No",ADD:"Add",DELETEROW:"Delete Row",SELECTEDROW:"Selected Row",REQUIRED:"(required)",ROLES_SELECT:"Select one or more roles for this record",NEW:"New",AMEND:"Amend",APPROVED:"Approved",FINAL:"Final",CLICK_TOGGLE:"Click to toggle the collapse or expand details for this address.",AMEND_RECORD:"Amend Record",en:"English",fr:"French",ADD_RECORD:"Add Record",SAVE_RECORD:"Save Record",DELETE_RECORD:"Delete Record",COPY_RECORD:"Copy Record",DISCARD_CHANGES:"Discard Changes",REPSECONDARY:"Alternate Regulatory Enrolment Process contact",REPPRIMARY:"Regulatory Enrolment Process contact",MAILING:"Regulatory Mailing / Annual Contact Address",BILLING:"Billing Address",MANUFACTURER:"Manufacturer / Sponsor Mailing Address",IMPORTER_ADDRESS:"Canadian Importer Mailing Address",CAN_IMP:"Canadian Importer Contact",CONTACTMAILING:"Regulatory Mailing / Annual Contact",CONTACTBILLING:"Billing Contact",CONTACTMANUFACTURER:"Manufacturer / Sponsor Contact",CONTACT_IMPORTER:"Importer Contact",APPROVE_FINAL:"Generate Final XML",SAVE_DRAFT:"Save Draft XML",PRIMARY:"Primary",SECONDARY:"Alternate",TOGGLE_EXPAND:"Click to toggle collapse or expand details of row",CONTROL_NUMBER:"Control Number",REP_CONTACT_INFO:"Regulatory Enrolment Process Contact Information",SAVE_CONTACT:"Save Contact",DELETE_CONTACT:"Delete Contact",COMPANY_ID:"Company Identifier",DOSSIER_ID:"Dossier Identifier",IMPORTER:"Importer",IMPORTERID:"Importer Company Identifier",IMPORTER_COMPANY_NAME:"Importer Company Name",IMPORTER_COMPANY_ID_IF:"Importer Company Identifier (if applicable)",IMPORTER_COMPANY_NAME_IF:"Importer Company Name (if applicable)",ERRORS:"Errors",UNKNOWN:"Unknown",BIOLOGIC:"Biologic",PHARMACEUTICAL:"Pharmaceutical",VETERINARY:"Veterinary",CLINICAL_TRIAL:"Clinical Trial",HELP_FILE_LOAD:"file load instructions",EXPAND:"Expand",HELP_ACTIVITY_MAIN:"Activity Instructions",HELP_ACTIVITY_REP:"Regulatory Enrolment Process Contact Instructions",CALENDAR:"Pick date from calendar",HIDE_CALENDAR:"Hide Calendar (escape key)",OTHER:"Other",HELP_REP_CONTACT:"Regulatory Enrolment Process Contact Instructions",OTHER_UNITS:"Units other details",COMPANYNAME:"Company Name",FULLLEGALNAME:" (Full Legal Name)",BUSINESSNUMBER:"Business Number",ACOMPANYNAME:"Company Name (Full legal name - no abbreviations)",COPY:"Copy",DELETE:"Delete",SAVE_WORKING:"Save Working Copy",COMPANY_NOABBREV:"Company Name (Full Legal Name)",CLOSE_ALERT:"Collapse instructions",COLLAPSE:"Collapse",CONTROL_NUM:"Control Number",OTHER_DETAILS:"Other - specify",PROD_NAME:"Product Name",PROD_NAME_HELP:"Product Name Instructions",PROP_NAME_HELP:"Proper, Common or Non-proprietary Name Instructions",RELATED_INFO_HELP:"Related Information Instructions",DOSSIER_TYPE:"Dossier Type",LEAST_5_CHAR:" (5 characters)","5_OR_6_CHAR":" ( 5 or 6 characters)",LEAST_7_CHAR:" (7 characters)",INCLUDE_AREA_CODE:" (including area code)",LEAST_6_DIGIT:" (6 digits only)",LEAST_5_DIGIT:" (5 digits only)",LEAST_9_CHAR:" (9 characters)",INSTRUCTION:"Instruction",RETURN_INSTRUCTION:"Return to instruction ",PRIVACY_NOTICE_STATEMENT:"Privacy Notice Statement",SECURITY_DISCLAIMER:"Security Disclaimer",PRIVACY_STATEMENT:"By submitting your personal information, you are consenting to its collection, use and disclosure in accordance with the Privacy Notice Statement.",FOOTNOTE_INSTRUCTION:"Instructions for completing sections on form",SECTION_IS_NOT_VISIBLE:"[ This section may not be visible. ]",FAX_NOT_AVAILABLE:" (Use 0000000000 if not available)",NOT_APPLICABLE:"Not applicable",D21:"Biologic",D22:"Pharmaceutical",D24:"Veterinary",D26:"Clinical Trial",BROWSER:"Browser",TABLE_EXPANDED_STATE:"Expanded State",PROTECTED_B:'Protected "B" when completed',ROUTING_ID:"Routing Identifier",REFERRER:" referrer",CHAR_6_DIGITS:" (a lowercase letter followed by 6 numbers)",FORMAT_TYPE_MINLENGTH:"Incorrect format - less than minimum length",FORMAT_TYPE_PATTERN:"Incorrect format - must be lowercase letter followed by six numbers"}),$translateProvider.translations("fr",{Y:"Oui",N:"Non",ADD:"fr_Add",DELETEROW:"fr_Delete Row",SELECTEDROW:"fr_Selected Row",REQUIRED:"(obligatoire)",ROLES_SELECT:"fr_Select one or more roles for this record",NEW:"Nouvelle",AMEND:"Modification",APPROVED:"fr_Approved",FINAL:"Finale",CLICK_TOGGLE:"fr_Click to toggle the collapse or expand details for this address.",AMEND_RECORD:"fr_Amend Record",en:"Anglais",fr:"Français",ADD_RECORD:"Ajouter un enregistrement",SAVE_RECORD:"Enregistrer",DELETE_RECORD:"Supprimer l'enregistrement",COPY_RECORD:"Copier",DISCARD_CHANGES:"Éliminer les modifications",REPSECONDARY:"Personne-resource supplémentaire pour le processus d'inscription réglemetaire",REPPRIMARY:"Personne-resource pour le processus d'inscription réglemetaire",MAILING:"Contact pour le l'address courrier réglementaire / adresse pour l'annuelle",BILLING:"Adresse de facturation",MANUFACTURER:"Adresse postale du fabricant / promoteur",IMPORTER_ADDRESS:"Adresse postale de l'importateur canadien",CONTACTMAILING:"Courrier réglementaire / adresse de personne-ressource pour l'annuelle",CAN_IMP:"Personne-ressource pour l'importateur canadien",CONTACTBILLING:"Personne-ressource de facturation",CONTACTMANUFACTURER:"Personne-ressource du fabricant/promoteur",CONTACT_IMPORTER:"Personne-ressource de l'importateur",APPROVE_FINAL:"Générer le XML finale",SAVE_DRAFT:"Enregistrer le brouillon XML",PRIMARY:"fr_Primary",SECONDARY:"fr_Alternate",TOGGLE_EXPAND:"Cliquez pour réduire ou ouvrir les détails de la ligne ",CONTROL_NUMBER:"Numéro de contrôle",REP_CONTACT_INFO:"fr_Main Contact Information",SAVE_CONTACT:"fr_Save Contact",DELETE_CONTACT:"fr_Delete Contact",COMPANY_ID:"Numéro de la compagnie",DOSSIER_ID:"Numéro de dossier",IMPORTER:"Importateur",IMPORTERID:"Numéro de compagnie de l'importateur",IMPORTER_COMPANY_NAME:"Nom de compagnie de l'importateur",IMPORTER_COMPANY_ID_IF:"fr_Importer Company Identification (if applicable)",IMPORTER_COMPANY_NAME_IF:"fr_Importer Company Name (if applicable)",ERRORS:"Erreurs",UNKNOWN:"Inconnu",BIOLOGIC:"fr_Biologic",PHARMACEUTICAL:"fr_Pharmaceutical",HELP_FILE_LOAD:"fr_File Load Instructions",EXPAND:"fr_Expand",HELP_ACTIVITY_MAIN:"fr_Activity Instructions",HELP_ACTIVITY_REP:"fr_Regulatory Enrolment Process Contact Instructions",CALENDAR:"fr_Pick date from calendar",HIDE_CALENDAR:"fr_Hide Calendar (escape key)",OTHER:"Autre",HELP_REP_CONTACT:"Regulatory Enrolment Process Contact Instructions",OTHER_UNITS:"Unités, autre détails",COMPANYNAME:"Nom de la compagnie",FULLLEGALNAME:" (nom légal complet)",BUSINESSNUMBER:"Numéro de la compagnie",ACOMPANYNAME:"Nom de la compagnie (nom légal complet, sans abbréviation)",COPY:"fr_Copy",DELETE:"Supprimer",SAVE_WORKING:"Enregistrer une copie de travail",COMPANY_NOABBREV:"Nom de la compagnie (nom légal complet)",CLOSE_ALERT:"Minimiser les instructions",COLLAPSE:"Minimiser les",CONTROL_NUM:"Numéro de contrôle",OTHER_DETAILS:"Autre détails",PROD_NAME:"Nom du produit",PROD_NAME_HELP:"fr_Product Name Instructions",PROP_NAME_HELP:"fr_Proper, Common or Non-proprietary Name Instructions",RELATED_INFO_HELP:"fr_Related Information Instructions",DOSSIER_TYPE:"Type de dossier",LEAST_5_CHAR:" fr_(at least 5 characters)","5_OR_6_CHAR":" (5 ou 6 caractères)",LEAST_7_CHAR:" (7 caractères)",INCLUDE_AREA_CODE:" (y compris indicatif régional)",LEAST_6_DIGIT:" (6 chiffres seulement)",LEAST_5_DIGIT:" (5 chiffres seulement)",LEAST_9_CHAR:" (9 caractères)",INSTRUCTION:"Instructions",RETURN_INSTRUCTION:"Retourne aux instructions ",PRIVACY_STATEMENT_HELP:"fr_View Privacy Notice Statement",PRIVACY_NOTICE_STATEMENT:"Énoncé de confidentialité",SECURITY_DISCLAIMER:"Avis de non-responsabilité concernant la sécurité",PRIVACY_STATEMENT:"En soumettant vos renseignements personnels, vous consentez à sa collecte, à son utilisation et à sa divulgation conformément à l'énoncé de confidentialité.",FOOTNOTE_INSTRUCTION:"Instructions pour compléter les sections du formulaire",SECTION_IS_NOT_VISIBLE:"[ Cette section peut ne pas être visible. ]",FAX_NOT_AVAILABLE:" (Si pas disponible, utilisez 0000000000)",NOT_APPLICABLE:"fr_Not applicable",D21:"Biologique",D22:"Pharmaceutique",D24:"Vétérinaire",D26:"Essai clinique",BROWSER:"Navigateur",TABLE_EXPANDED_STATE:"État ouvert",PROTECTED_B:'Protégé "B" une fois rempli',ROUTING_ID:"Identificateur  d'acheminement",REFERRER:" référent",CHAR_6_DIGITS:" (composé d’une lettre suivie de six chiffres)",FORMAT_TYPE_MINLENGTH:"Format incorrecte - moins que la longueur minimale",FORMAT_TYPE_PATTERN:"Format incorrecte - composé d’une lettre suivie de six chiffres"}),$translateProvider.translations("en",{MSG_ERR_MAND:"This field is required",MSG_ERR_EMAIL_FORMAT:"Please enter a valid email.",MSG_ERR_ROLE:"This field is required",MSG_ERR_DISITYPE:"Please select at least one disinfectant type",MSG_ERR_ADDRESS:"Please select at least one address",MSG_ERR_CONTACT_NUM:"All the roles have to be used for the contacts",MSG_ERR_PHONE_FORMAT:"The format is not valid",MSG_ERR_FAX_FORMAT:"The format is not valid",MSG_ERR_ALLROLE:"The roles of manufacturer, mailing, billing, and primary REP contact  have not all been selected among the list of contacts",MSG_ERR_ADDRESSSROLE:"The roles of manufacturer, mailing, and billing have not all been selected among the list of addresses",MSG_ERR_POSTAL:"Please specify a valid postal code.",MSG_ERR_ZIP:"Please specify a valid zip code.",MSG_ERR_DATE_FORMAT:"Please enter a valid date.",MANUFACT_SEL:"Role already Selected",MAIL_SEL:"Role already Selected",BILLING_SEL:"Role already Selected",IMPORTER_SEL:"Role already Selected",REPPRIM_SEL:"Role already Selected",REPALT_SEL:"Role already Selected",MSG_LENGTH_MIN5:"Less than minimum length",MSG_LENGTH_6:"Less than minimum length.",MSG_LENGTH_6NUM:"Less than minimum length.",MSG_LENGTH_8NUM:"Less than minimum length.",MSG_LENGTH_7:"Incorrect format - Less than minimum length.",MSG_LENGTH_7NUM:"Less than minimum length.",ONE_REP:"At least one contact is required.",MSG_ERR_NOTIF_SEL:"Please select at least one notifiable change.",MSG_ERR_MIN_POS:"Must be a positive number",MSG_ERR_MAX:"Exceeds the maximum",MSG_FORMAT_CHAR_6DIGITS:"ID should be a letter plus 6 digits.",MSG_ERR_DUPLICATED_SYSTEM:"Duplicated System.",MSG_FORMAT_ALPHA_NUMBERIC:"Incorrect format - must be lowercase letter followed by six numbers",MSG_ERR_INVALID_END_DATE:"End Date should not be earlier than Start Date."}),$translateProvider.translations("fr",{MSG_ERR_MAND:"Ce champ est obligatoire.",MSG_ERR_ROLE:"fr_Please select at least one role",MSG_ERR_DISITYPE:"Veuillez sélectionner au moins un type de désinfectant",MSG_ERR_ADDRESS:"fr_Please select at least one address",MSG_ERR_EMAIL_FORMAT:"Veuillez fournir une courriel valide.",MSG_ERR_CONTACT_NUM:"fr_All the roles have to be used for the company contacts",MSG_ERR_PHONE_FORMAT:"Veuillez fournir un numéro de téléphone valide.",MSG_ERR_FAX_FORMAT:"Veuillez fournir un numéro de télécopieur valide.",MSG_ERR_ALLROLE:"fr_Across the contact records, the roles of manufacturer, mailing, billing, and REP primary contact must be selected",MSG_ERR_ADDRESSSROLE:"fr_The roles of manufacturer, mailing, and billing have not all been selected among the list of addresses",MSG_ERR_POSTAL:"Veuillez fournir un code postal valide.",MSG_ERR_ZIP:"Veuillez fournir un code postal valide.",MSG_ERR_DATE_FORMAT:"Veuillez fournir une une date valide.",MANUFACT_SEL:"Rôle déjà sélectionné",MAIL_SEL:"Rôle déjà sélectionné",BILLING_SEL:"Rôle déjà sélectionné",IMPORTER_SEL:"fr_Importer Role already Selected",REPPRIM_SEL:"Rôle déjà sélectionné",REPALT_SEL:"Rôle déjà sélectionné",MSG_LENGTH_MIN5:"Veuillez fournir au moins 5 chiffres.",MSG_LENGTH_6:"Veuillez fournir au moins 6 caractères.",MSG_LENGTH_6NUM:"Veuillez fournir 6 chiffres.",MSG_LENGTH_8NUM:"Veuillez fournir 8 chiffres.",MSG_LENGTH_7:"Format incorrecte - Veuillez fournir 7 caractères.",MSG_LENGTH_7NUM:"Veuillez fournir  7 chiffres.",ONE_REP:"Au moins un contact est requis",MSG_ERR_NOTIF_SEL:"Sélectionnez au moins un changement de déclaration",MSG_ERR_MIN_POS:"Doit être un nombre positif",MSG_ERR_MAX:"Dépasse le maximum.",MSG_FORMAT_CHAR_6DIGITS:"fr_ID should be a letter plus 6 digits.",MSG_ERR_DUPLICATED_SYSTEM:"fr_Duplicated System.",MSG_FORMAT_ALPHA_NUMBERIC:"Format incorrecte - composé d’une lettre suivie de six chiffres",MSG_ERR_INVALID_END_DATE:"La date de fin ne doit pas être antérieure à la date de début"}),$translateProvider.translations("en",{REG_COMPANY_ENROL:"Regulatory Company Enrolment",LOAD_COMPANY_FILE:"Load a Company Enrolment File",REPRESENT_INSTRUCT:"Company Representative Information",AMEND_NOTE:"The “Amend Enrolment” button must be selected when amending a Final Company XML.",FIELDID:"Company Identifier",COMPANY_NAME:"Company Name",HT_LOAD_FILE_1:"A file should not be loaded if this is the first time enrolling the Company.",HT_LOAD_FILE_2:"When continuing with a working copy, the format of the file to load should be .hcsc.",HT_LOAD_FILE_3:"When viewing/updating a final XML file, the format of the file to load should be .xml.","ENROL_1.0":"The “Enrolment Status”, “Enrolment Version”, and “Date Last Saved” fields are automatically filled by the form upon selecting “Save Working Copy” or “Save Draft XML” in the bottom of the template.","ENROL_2.0":"The “Company Identifier” field will be filled by Health Canada when they generate the final company XML file.","ENROL_3.0":"The “Amend Enrolment” button is only enabled when a final company xml file is loaded into the template, and must be selected when amending a final company XML file.",ADDR_INFO_1:"A minimum of one address is required for the company template.","ADDR_INFO_2.0":"There must be an address associated with each of the following three roles: “Manufacturer / Sponsor Mailing Address”, “Billing Address”, and “Regulatory Mailing / Annual Contact Address”.",ADDR_INFO_3:"A single address may be associated to multiple roles, however, each role may only have one address.","BUS_NUM_4.0":"A business number is a unique, 9-digit number (i.e., the standard identifier for businesses). It is unique to a business or legal entity. Information on the business number can be found on the ","BUS_NUM_4.1":"https://www.canada.ca/en/revenue-agency/services/tax/businesses/topics/registering-your-business/you-need-a-business-number-a-program-account.html","BUS_NUM_4.2":"Government of Canada website",ROLE_1:"“Manufacturer / Sponsor Information”: Refers to the name under which the drug submission is filed, where a Drug Identification Number (DIN) / Notice of Compliance (NOC) is to be issued, the company in whose name the DIN / NOC will be registered, and the name to be included on the product label and Product Monograph / Package Insert.",ROLE_2:"For clinical trials: “Sponsor”: Defined by Division 5, Part C of the Food and Drug Regulations as the individual, corporate body, institution or organization that conducts a clinical trial. The sponsor is not necessarily the company that fabricates the drug product. For Investigator-initiated clinical trials: if the sponsor is defined as an individual, please also indicate the name of the affiliated institution/organization.",ROLE_3:"“Regulatory Mailing / Annual Contact Address”: Pertains to where and to whom Health Canada should direct regulatory mail other than correspondence specific to the subject drug submission, e.g. annual notification, regulatory / policy amendment notices as they apply to DINs registered to the manufacturer/sponsor. Operational and system requirements dictate that the regulatory mailing name/address must be the same for all DINs registered to the manufacturer / sponsor identified where more than one DIN is held by that company.",ROLE_4:"“Billing Address” – To whom the invoice is to be sent.",ROLE_5:"“Canadian Importer mailing address”: is responsible for the sale of products in Canada when the sponsor/manufacturer identified is NOT located in Canada.  Although it does not need to be provided at the time of initial company enrolment, the Canadian Importer responsible for sale must be identified prior to the product entering the market. Add a Canadian Importer Mailing Address to the Company XML file by using the “amend enrolment” button. The Importer Company ID issued by Health Canada should also be referred to in the Product Information XML file, where appropriate.",ROLE_6:"Do Not provide a Canadian Importer for clinical trial transactions on the company template. Importer information related to clinical trial regulatory activities should be authorized by the sponsor and captured on the Product Information (PI) template and a separate authorization letter. ",ROLE_7:"For clinical trials: Do not identify importers related to clinical trials on the Company (CO) template. Importer information related to clinical trials should be captured on the Product Information (PI) template.",COMPANY_REP_1:"A minimum of one company representative is required for the company template.",COMPANY_REP_2:"There must be a company representative associated with each of the following roles: “Manufacturer / Sponsor Mailing Address”, “Billing Address”, “Regulatory Mailing / Annual Contact” and “REP contact”.",COMPANY_REP_3:"A single contact may be associated with multiple roles, however, each role may only have one contact.",COMPANY_REP_4:"The REP contact is the person to be contacted by Health Canada if there are any issues or clarifications required for this template when it is submitted for enrolment or amendment.",COMPANY_REP_5:"One company representative is required for each Canadian Importer Mailing Address that has been provided",ROUTING_ID_1:"The routing identifier is a unique identifier within the Common Electronic Submissions Gateway (CESG) used to identify specific gateway account, whether it uses the Applicability Statement 2 (AS2) or WebTrader interfaces.",ROUTING_ID_2:"For the WebTrader users, the routing identifier is automatically assigned to each account by the system. It can be retrieved from the receipt message. Navigate to the WebTrader Inbox, click on “Receipt”, “View” document. Document Content page opens up and the routing identifier can be found under attribute: “X-Cyclone-To:”",ROUTING_ID_3:"For the AS2 users, the routing identifier has to be created by the company. It is recommended that the company's data universal numbering system number be used, but any alpha-numeric text string is acceptable.","ROUTING_ID_4.0":"For any further questions on the routing identifier, please contact the Food and Drug Administration Help Desk at ","ROUTING_ID_4.1":"mailto:ESGHelpDesk@fda.hhs.gov","ROUTING_ID_4.2":"ESGHelpDesk@fda.hhs.gov",ROUTING_ID_5:"The routing identifier could be the same for the manufacturer / sponsor contact and regulatory / annual contact. The Canadian importer would have a separate routing identifier.",GEN_XML_1:"Submit the draft XML file to Health Canada using the Common Electronic Submission Gateway (CESG).",GEN_XML_2:"Refer to the Regulatory Enrolment Process (REP) guidance document for detailed information."}),$translateProvider.translations("fr",{REG_COMPANY_ENROL:"Inscription d'une compagnie réglementaire",LOAD_COMPANY_FILE:"Charger un fichier d'inscipriton de compagnie",REPRESENT_INSTRUCT:"Information représentative de l'entrepise",AMEND_NOTE:"Le bouton «Modifier l'inscription» doit être sélectionné lors de la modification d'un XML d'entreprise final.",FIELDID:"Numéro d'entreprise",COMPANY_NAME:"Nom de la compagnie ",HT_LOAD_FILE_1:"Il n’est pas nécessaire de charger un fichier de compagnie s’il s’agit de votre première inscription pour la compagnie.",HT_LOAD_FILE_2:"Lors de la production d’une copie de travail, le fichier doit être chargé en format .hcsc.",HT_LOAD_FILE_3:"Lors de la consultation ou de la mise à jour d’une version finale du fichier XML, le fichier doit être chargé en format .xml.","ENROL_1.0":"Si les boutons « Enregistrer une copie de travail » ou « Enregistrer le brouillon XML », situés à la fin du modèle, sont sélectionnés, les champs « Statut de l’inscription », « Version de l’inscription » et « Date du dernier enregistrement » seront remplis automatiquement par le formulaire.","ENROL_2.0":"Le champ « Numéro de la compagnie » sera rempli par Santé Canada lors de la génération de la version finale du fichier de compagnie (en format XML).","ENROL_3.0":"Le bouton « Modifier l’inscription » n’est activé que lorsqu’une version définitive finale du fichier de compagnie (en format XML) est chargée dans le modèle. Pour modifier le fichier de compagnie (en format XML), il suffit de cliquer sur ce bouton.",ADDR_INFO_1:"Le modèle de compagnie doit contenir au moins une adresse.","ADDR_INFO_2.0":"Les rôles suivants doivent être associés à une adresse : « Fabricant ou promoteur », « Personne-ressource pour la facturation » et « Personne-ressource pour le courrier réglementaire et pour les annuels ».",ADDR_INFO_3:"A single address may be associated to multiple roles, however, each role may only have one address.","BUS_NUM_4.0":"Un numéro d'entreprise est un numéro à neuf chiffres uniques. Il est un identificateur normalisé étendu à tous les programmes d'entreprise au gouvernement fédéral. Il est unique à une entreprise ou à une entité légale. Pour de plus amples informations sur le numéro d'entreprise, vous pouvez consulter la page web suivante: ","BUS_NUM_4.1":"https://www.canada.ca/fr/agence-revenu/services/impot/entreprises/sujets/inscrire-votre-entreprise/avez-vous-besoin-numero-entreprise-compte-programme.html","BUS_NUM_4.2":"Site Web du Gouvernement du Canada",ROLE_1:"« Renseignements sur le fabricant ou le promoteur » : Désigne le nom sous lequel la présentation de médicament est déposée, lorsqu’un numéro d’identification du médicament (DIN) ou un avis de conformité (AC) doit être délivré, il s’agit du nom de la compagnie qui enregistrera le DIN ou l’AC (c.-à-d. le détenteur du DIN ou de l’AC), ainsi que le nom qui doit figurer sur l’étiquette du produit et dans la monographie ou la notice du produit",ROLE_2:"Pour les essais cliniques: «Promoteur»; Défini par la section 5, partie C du Règlement sur les aliments et drogues, comme la personne physique, la personne morale, l'institution ou l'organisation qui mène un essai clinique. Le promoteur n'est pas nécessairement l'entreprise qui fabrique le médicament. Pour les essais cliniques initiés par l'investigateur",ROLE_3:"« Adresse pour le courrier réglementaire et pour les annuels » : Indique où et à qui Santé Canada doit envoyer le courrier réglementaire autre que le courrier concernant spécifiquement la présentation de médicament à traiter; p. ex., le formulaire de déclaration annuelle et les avis de modification à des règlements ou politiques qui s’appliquent aux DIN enregistrés au nom du fabricant ou du promoteur. Les besoins opérationnels et ceux du système exigent que le nom et l’adresse pour le courrier réglementaire soient les mêmes pour tous les DIN enregistrés au nom du fabricant ou du promoteur lorsque l’entreprise détient plus d’un DIN.",ROLE_4:"« Adresse de facturation » : Indique l’adresse où la facture doit être envoyée.",
ROLE_5:"« Adresse postale de l’importateur canadien » : L’importateur canadien est responsable de la vente des produits au Canada lorsque le fabricant ou le promoteur n’est pas situé au Canada. L’identité de l’importateur canadien responsable de la vente doit être divulguée avant l’entrée du produit sur le marché, même s’il n’est pas nécessaire de la fournir au moment de l’inscription initiale à la compagnie. Pour ajouter l’adresse postale d’un importateur canadien au fichier d’entreprise (en format XML), il suffit d’utiliser le bouton « Modifier l’inscription ». Le numéro de compagnie de l’importateur, délivré par Santé Canada, doit également figurer dans le fichier d’information sur le produit (en format XML), le cas échéant.",ROLE_6:"fr_Do Not provide a Canadian Importer for clinical trial transactions on the company template. Importer information related to clinical trial regulatory activities should be authorized by the sponsor and captured on the Product Information (PI) template and a separate authorization letter. ",ROLE_7:"Pour les essais cliniques: N'identifiez pas les importateurs liés aux essais cliniques sur le modèle de compagnie (CO). Les informations sur l'importateur relatives aux essais cliniques doivent être saisies sur le modèle d'informations sur le produit (PI).",COMPANY_REP_1:"Le modèle de la compagnie doit contenir au moins un représentant.",COMPANY_REP_2:" Le représentant de la compagnie doit être associé à chacun des rôles suivants : « Fabricant ou promoteur », « Facturation », « Personne-ressource pour le courrier réglementaire et pour les annuels » et « Personne-ressource du PIR ».",COMPANY_REP_3:"Une même personne-ressource peut être associée à plusieurs rôles, mais un rôle ne peut être associé qu’à une seule personne-ressource.",COMPANY_REP_4:"La personne-ressource du PIR est la personne que Santé Canada doit contacter s’il y a des questions à régler ou des précisions à apporter au modèle lorsqu’il fait l’objet d’une demande d’inscription ou de modification.",COMPANY_REP_5:"Un représentant de la compagnie est requis pour chaque adresse postale d'importateur canadien qui a été fournie.",ROUTING_ID_1:"L'identificateur d'acheminement est un numéro unique à chaque compte créé sur le portail commun de demandes électroniques (PDE). Il est utilisé pour identifier le type de compte sur une des deux interfaces du portail soit l'Applicability Statement 2 (AS2) ou le WebTrader.",ROUTING_ID_2:"Pour les utilisateurs de l’interface Webtrader, votre identificateur d’acheminement se retrouve dans l’avis de réception. Pour y accédez, veillez aller à la boîte de réception WebTrader et cliquez sur «Reçu» et «Afficher» le document. La page de Contenu du document affichera et l'identificateur d’acheminement se trouve sous l'attribut: «X-Cyclone-To:»",ROUTING_ID_3:"Pour les utilisateurs de l'interface AS2, l'identificateur d'acheminement doit être créé par la compagnie. Il est recommandé que le numéro du système de numérotation universel de la compagnie soit utilisé. Cependant, il est important de noter d'une liste de caractères alphanumériques est tout aussi acceptable.","ROUTING_ID_4.0":"Pour toutes autres questions sur l'identificateur d'acheminement, veuillez contacter directement le service de dépannage de la Food and Drug Administration au ","ROUTING_ID_4.1":"mailto:ESGHelpDesk@fda.hhs.gov","ROUTING_ID_4.2":"ESGHelpDesk@fda.hhs.gov",ROUTING_ID_5:"Il est possible que la personne-ressource du  fabricant ou promoteur et la personne-ressource recevant le courrier de nature réglementaire et la notification annuelle aient le même identificateur d'acheminement. Cependant, il est important de noter que l'importateur canadien aura toujours un identificateur différent.",GEN_XML_1:"Déposez un brouillon du fichier XML auprès de Santé Canada au moyen du Portail commun des demandes électroniques (PCDE).",GEN_XML_2:"Consultez les lignes directrices du PIR pour obtenir des renseignements détaillés."}),$translateProvider.translations("en",{"ADDRESSLISTCTRL.ADDRESSLISTFORM":"in the Address Information section.","CONTACTLISTCTRL.CONTACTLISTFORM":"in the Company Representative Information section.",CONTACTROLESVALID:"For Company Representative, selection of  all roles: manufacturer, mailing, billing, and primary REP ",ADDRESSROLESVALID:"For the Address Information, selection of all roles: manufacturer, mailing, and billing","CONTACTREC.CONTACTRECFORM":"in the Company Representative details","ADDRESSREC.ADDRESSRECFORM":"in the Address details",COMPANY_FORM:"Company Enrolment Form",ROLEMISSING:"Select one or more roles for this company",CONTACTROLEMISSING:"Select one or more roles for this company representative",ROLEREPMISSING:"Roles for this company representative ",IMPORTERIDVALID:"Please input importer ID for each importer",ADDRESS_EXPND:"Please input importer ID for each importer",CONTACTIMPORTERVAILD:"Each Importer Company needs at least one representative"}),$translateProvider.translations("fr",{"ADDRESSLISTCTRL.ADDRESSLISTFORM":"dans la section Information d'addresse","CONTACTLISTCTRL.CONTACTLISTFORM":"dans la section Information ser les représentants de la compagnie",CONTACTROLESVALID:"Pour le représentant de la compagnie, sélection des rôles: fabricant, de l'envoi, de la facturation et principale du PIR ",ADDRESSROLESVALID:"Pour l'information d'adresse, sélection des rôles: fabricant, de l'envoi et de la facturation ","CONTACTREC.CONTACTRECFORM":"dans les détails du représentant de la compagnie","ADDRESSREC.ADDRESSRECFORM":"dans les détails de l'adresse",COMPANY_FORM:"Inscription D'une Entreprise Réglementaire",ROLEMISSING:"Sélectionner un ou plusieurs rôles pour ce représentant de la compagnie",CONTACTROLEMISSING:"Sélectionner un ou plusieurs rôles pour ce représentant de la compagnie",ROLEREPMISSING:"fr_Roles for this company representative ",IMPORTERIDVALID:"SVP entrez l’ID de l’importateur pour chaque produit",ADDRESS_EXPND:"SVP entrez l’ID de l’importateur pour chaque produit",CONTACTIMPORTERVAILD:"Chaque Importateur a besoin d'au moin un représentant"}),$translateProvider.translations("en",{FOR_THE:"The ",THERE_ARE_ERRORS:"There are errors",FORM_NOT_SAVED:"The form could not be saved because ",NOT_SAVED:" could not be saved because ",ERRORS_FOUND:" errors were found.",ERROR_FOUND:"error was found.",TYPE_REQUIRED:"This field is required.",TYPE_EMAIL:"Please enter a valid email address.",TYPE_DUPLICATEROLE:"This role has already been selected.",TYPE_DUPLICATESYS:"This system has already been selected.",TYPE_MIN:"Less than minimum value",TYPE_MINLENGTH:"Less than minimum length",POSTAL_FORMAT:"Please enter a valid format",TYPE_DATE:"Please enter a valid date",TYPE_NUMBER:"Please enter a valid number",TYPE_PATTERN:"Incorrect format",MSG_VALUE_MAX:"Value is not within valid limits",COMPANY_IN_USE:"The importer is in use for Company Representative Details, delete that record first."}),$translateProvider.translations("fr",{FOR_THE:"Pour le ",THERE_ARE_ERRORS:"Il y a des erreurs",FORM_NOT_SAVED:"Le formulaire n’a pas pu être enregistré car ",NOT_SAVED:" n’a pas pu être enregistré car ",ERRORS_FOUND:"erreurs ont été trouvées.",ERROR_FOUND:"erreur a été trouvée.",TYPE_REQUIRED:"Ce champ est obligatoire.",TYPE_EMAIL:"Veuillez fournir une adresse électronique valide.",TYPE_DUPLICATEROLE:"Ce rôle a déjà été sélectionné.",TYPE_DUPLICATESYS:"Ce système a été déjà sélectionné.",TYPE_MIN:"Moins que la valeur minimale.",TYPE_MINLENGTH:"Moins que la longueur minimale.",POSTAL_FORMAT:"Entrez un format valide.",TYPE_DATE:"Veuillez fournir une une date valide.",TYPE_NUMBER:"Veuillez fournir un numéro valide.",TYPE_PATTERN:"Format incorrecte",MSG_VALUE_MAX:"La valeur n'est pas dans les limites valides",COMPANY_IN_USE:"L'importateur est en cours d'utilisation pour les Détails du représentant de la compagnie, supprimez ce premier enregistrement."})}]),function(){"use strict";angular.module("numberFormat",[])}(),function(){"use strict";function digitsCtrl(){function link(scope,element,attrs,modelCtrl){modelCtrl.$parsers.push(function(inputValue){if(void 0==inputValue)return"";var isNumber=!1,max=-1,ignore=!1,tempVal=""+inputValue;attrs.type&&"number"===attrs.type&&(isNumber=!0),attrs.onlyMax&&(max=parseInt(attrs.onlyMax));var regexIntNeg=/[^0-9-]/g,integerReg=/[^0-9]/g,regexValue=integerReg;if("intNeg"==attrs.onlyDigits?regexValue=regexIntNeg:"false"===attrs.onlyDigits?ignore=!0:regexValue=integerReg,ignore)return inputValue;var transformedInput=tempVal.replace(regexValue,"");return max>0&&(transformedInput=transformedInput.substring(0,max)),transformedInput!==tempVal&&(isNumber&&transformedInput&&(transformedInput=parseFloat(transformedInput)),modelCtrl.$setViewValue(transformedInput),modelCtrl.$render()),transformedInput})}var directive={link:link,restrict:"A",require:"?ngModel"};return directive}angular.module("numberFormat").directive("onlyDigits",digitsCtrl)}(),function(){"use strict";angular.module("dataLists",["hpfbConstants"])}(),function(){"use strict";function getService(UNKNOWN){function _getEnvString(){return vm.env?vm.env:"@@envValue"}function _setEnvString(value){vm.env=value.env}function _createCountryArray(translateJson){vm.countryList=translateJson}function _getUnknownCountryRec(){return{id:UNKNOWN,en:"Unknown",fr:"Inconnu"}}function getCountryValuesArray(){return vm.countryList}function getProvinceValuesArray(){return["AB","BC","MB","NB","NL","NT","NS","NU","ON","PE","QC","SK","YT"]}function getUSStatesValueArray(){return["AL","AK","AZ","AR","CA","CO","CT","DE","DC","FL","GA","HI","ID","IL","IN","IA","KS","KY","LA","ME","MD","MA","MI","MN","MS","MO","MT","NE","NV","NH","NJ","NM","NY","NC","ND","OH","OK","OR","PA","RI","SC","SD","TN","TX","UT","VT","VA","WA","WV","WI","WY"]}var vm=this;vm.env="",vm.countryList=[];var service={getEnv:_getEnvString,setEnv:_setEnvString,getCountries:getCountryValuesArray,getProvinces:getProvinceValuesArray,getUSStates:getUSStatesValueArray,createCountryList:_createCountryArray,getUnknownCountryRecord:_getUnknownCountryRec};return service}angular.module("dataLists").factory("getCountryAndProvinces",getService),getService.inject=["UNKNOWN"]}(),function(){"use strict";function getSalService($filter,$q,$http,$translate,OTHER,FRENCH,RELATIVE_FOLDER_DATA){function getSalValuesArray(){return["SALUT_DR","SALUT_MR","SALUT_MRS","SALUT_MS"]}function getLanguagesValuesArray(){return["en","fr"]}function _createSortedArray(jsonList,lang){var result=[];return angular.forEach($filter("orderByLocale")(jsonList,lang),function(sortedObject){result.push(sortedObject)}),result}function _getAdminSubType(){return vm.adminSubTypeArray&&0!==vm.adminSubTypeArray.length?vm.adminSubTypeArray:_loadAdminType()}function _loadAdminType(){var deferred=$q.defer(),url=RELATIVE_FOLDER_DATA+"adminSubType.json";return $http.get(url).success(function(data,status,headers,config){var lang=$translate.proposedLanguage()||$translate.use(),newList=_createSortedArray(data,lang);vm.adminSubTypeArray=newList,deferred.resolve(newList)}).error(function(data,status,headers,config){deferred.reject(status)}),deferred.promise}var vm=this;vm.internalContacts=[],vm.adminSubTypeArray=[];var service={getSalutationList:getSalValuesArray,getLanguages:getLanguagesValuesArray,getAdminSubType:_getAdminSubType};return service}angular.module("dataLists").factory("getContactLists",getSalService),getSalService.$inject=["$filter","$q","$http","$translate","OTHER","FRENCH","RELATIVE_FOLDER_DATA"]}(),function(){"use strict";function getRolesService(){function getRoleValuesArray(){return["","ROLE_PRIMARY","ROLE_SECONDARY"]}function _getFormTypes(env){return env?[_biologic,_pharma]:[_biologic,_pharma,_veterinary,_clinical]}function _getBiologic(){return _biologic}function _getPharmaceutical(){return _pharma}function _getVeterinary(){return _veterinary}function _getClinicalTrial(){return _clinical}var _biologic="D21",_pharma="D22",_veterinary="D24",_clinical="D26",service={getContactRoles:getRoleValuesArray,getFormTypes:_getFormTypes,getBiologicType:_getBiologic,getPharmaType:_getPharmaceutical,getVeterinary:_getVeterinary,getClinicalTrial:_getClinicalTrial};return service}angular.module("dataLists").factory("getRoleLists",getRolesService)}(),function(){"use strict";angular.module("dataLists",["hpfbConstants"])}(),function(){"use strict";function getService(UNKNOWN){function _getEnvString(){return vm.env?vm.env:"PROD"}function _setEnvString(value){vm.env=value.env}function _createCountryArray(translateJson){vm.countryList=translateJson}function _getUnknownCountryRec(){return{id:UNKNOWN,en:"Unknown",fr:"Inconnu"}}function getCountryValuesArray(){return vm.countryList}function getProvinceValuesArray(){return["AB","BC","MB","NB","NL","NT","NS","NU","ON","PE","QC","SK","YT"]}function getUSStatesValueArray(){return["AL","AK","AZ","AR","CA","CO","CT","DE","DC","FL","GA","HI","ID","IL","IN","IA","KS","KY","LA","ME","MD","MA","MI","MN","MS","MO","MT","NE","NV","NH","NJ","NM","NY","NC","ND","OH","OK","OR","PA","RI","SC","SD","TN","TX","UT","VT","VA","WA","WV","WI","WY"]}var vm=this;vm.env="",vm.countryList=[];var service={getEnv:_getEnvString,setEnv:_setEnvString,getCountries:getCountryValuesArray,getProvinces:getProvinceValuesArray,getUSStates:getUSStatesValueArray,createCountryList:_createCountryArray,getUnknownCountryRecord:_getUnknownCountryRec};return service}angular.module("dataLists").factory("getCountryAndProvinces",getService),getService.inject=["UNKNOWN"]}(),function(){"use strict";function getSalService($filter,$q,$http,$translate,OTHER,FRENCH,RELATIVE_FOLDER_DATA){function getSalValuesArray(){return["SALUT_DR","SALUT_MR","SALUT_MRS","SALUT_MS"]}function getLanguagesValuesArray(){return["en","fr"]}function _createSortedArray(jsonList,lang){var result=[];return angular.forEach($filter("orderByLocale")(jsonList,lang),function(sortedObject){result.push(sortedObject)}),result}function _getAdminSubType(){return vm.adminSubTypeArray&&0!==vm.adminSubTypeArray.length?vm.adminSubTypeArray:_loadAdminType()}function _loadAdminType(){var deferred=$q.defer(),url=RELATIVE_FOLDER_DATA+"adminSubType.json";return $http.get(url).success(function(data,status,headers,config){var lang=$translate.proposedLanguage()||$translate.use(),newList=_createSortedArray(data,lang);vm.adminSubTypeArray=newList,deferred.resolve(newList)}).error(function(data,status,headers,config){deferred.reject(status)}),deferred.promise}var vm=this;vm.internalContacts=[],vm.adminSubTypeArray=[];var service={getSalutationList:getSalValuesArray,getLanguages:getLanguagesValuesArray,getAdminSubType:_getAdminSubType};return service}angular.module("dataLists").factory("getContactLists",getSalService),getSalService.$inject=["$filter","$q","$http","$translate","OTHER","FRENCH","RELATIVE_FOLDER_DATA"]}(),function(){"use strict";function getRolesService(){function getRoleValuesArray(){return["","ROLE_PRIMARY","ROLE_SECONDARY"]}function _getFormTypes(env){return env?[_biologic,_pharma]:[_biologic,_pharma,_veterinary,_clinical]}function _getBiologic(){return _biologic}function _getPharmaceutical(){return _pharma}function _getVeterinary(){return _veterinary}function _getClinicalTrial(){return _clinical}var _biologic="D21",_pharma="D22",_veterinary="D24",_clinical="D26",service={getContactRoles:getRoleValuesArray,getFormTypes:_getFormTypes,getBiologicType:_getBiologic,getPharmaType:_getPharmaceutical,getVeterinary:_getVeterinary,getClinicalTrial:_getClinicalTrial};return service}angular.module("dataLists").factory("getRoleLists",getRolesService)}(),function(){"use strict";angular.module("services",[])}(),function(){"use strict";function getTransactionSeq($http,$q){function yesNoArray(){return["Y","N"]}function _getEnvString(){return vm.env?vm.env:"@@envValue"}function _setEnvString(value){vm.env=value.env}function _createRaArray(value){vm.raTypeArray=value}function _createFeeArray(value){vm.feeTypeArray=value}function _createMitigationArray(value){vm.mitigationTypeArray=value}function getTransactionDescriptionsArray(){return vm.allActivities}function getActivityArray(){return vm.raTypeArray}function _getfeeTypeArray(){return vm.feeTypeArray}function _getMitigationTypeArray(){return vm.mitigationTypeArray}function getPresubArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE]}function getANDSArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.COMMENTS_NOC,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.INITIAL,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.SECOND_LANG_PM,vm.allActivities.PRISTINE_PM_2LANG,vm.allActivities.PUB_RELEASE_INFO,vm.allActivities.BE_CLARIF_RESPONSE,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.NOC_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.NON_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.CORR_PATENT_MED,vm.allActivities.ALLEGATION_NOTICE,vm.allActivities.FORM_IV,vm.allActivities.FORM_V,vm.allActivities.CONSENT_LTR,vm.allActivities.DATA_PROTECT_CORRESP]}function getEUNDSArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.BE_CLARIF_RESPONSE,vm.allActivities.CANCEL_LETTER,vm.allActivities.COMMENTS_NOC,vm.allActivities.COMMENTS_SUMMARY_BASIS,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.INITIAL,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.SECOND_LANG_PM,vm.allActivities.PRISTINE_PM_2LANG,vm.allActivities.PUB_RELEASE_INFO,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.NOC_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.NON_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.CORR_PATENT_MED,vm.allActivities.ALLEGATION_NOTICE,vm.allActivities.FORM_IV,vm.allActivities.FORM_V,vm.allActivities.CONSENT_LTR,vm.allActivities.DATA_PROTECT_CORRESP,vm.allActivities.NONCLIN_CLARIF_RESPONSE]}function getEUSNDSArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.BE_CLARIF_RESPONSE,vm.allActivities.CANCEL_LETTER,vm.allActivities.COMMENTS_NOC,vm.allActivities.COMMENTS_SUMMARY_BASIS,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.POST_NOC_CHANGE,vm.allActivities.SECOND_LANG_PM,vm.allActivities.PRISTINE_PM_2LANG,vm.allActivities.PUB_RELEASE_INFO,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.NOC_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.NON_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.CORR_PATENT_MED,vm.allActivities.ALLEGATION_NOTICE,vm.allActivities.FORM_IV,vm.allActivities.FORM_V,vm.allActivities.CONSENT_LTR,vm.allActivities.DATA_PROTECT_CORRESP,vm.allActivities.NONCLIN_CLARIF_RESPONSE]}function getLevel3Array(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.YEAR_LIST_OF_CHANGE,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE]}function getNDSArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.COMMENTS_NOC,vm.allActivities.COMMENTS_SUMMARY_BASIS,vm.allActivities.COMMENTS_REGULARTORY_DECISION,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.INITIAL,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.SECOND_LANG_PM,vm.allActivities.PRISTINE_PM_2LANG,vm.allActivities.PUB_RELEASE_INFO,vm.allActivities.BE_CLARIF_RESPONSE,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.NOC_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.NON_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.CORR_PATENT_MED,vm.allActivities.ALLEGATION_NOTICE,vm.allActivities.FORM_IV,vm.allActivities.FORM_V,vm.allActivities.CONSENT_LTR,vm.allActivities.DATA_PROTECT_CORRESP,vm.allActivities.NONCLIN_CLARIF_RESPONSE]}function getPSURCArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.COMMENTS_SUMMARY_BASIS,vm.allActivities.FOR_PERIOD,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.MEETING_MINUTES,vm.allActivities.MHPD_RQ_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.PHONE_RQ_RESPONSE]}function getPSURPVArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.FOR_PERIOD,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.MEETING_MINUTES,vm.allActivities.MHPD_RQ_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.CLIN_CLARIF_RESPONSE]}function getRMPPVArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.CSOtRMP,vm.allActivities.MEETING_MINUTES,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.MHPD_RQ_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.RMP_VERSION_DATE,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.UNSOLICITED_DATA]}function getSANDSArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.COMMENTS_NOC,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.POST_NOC_CHANGE,vm.allActivities.SECOND_LANG_PM,vm.allActivities.PRISTINE_PM_2LANG,vm.allActivities.PUB_RELEASE_INFO,vm.allActivities.BE_CLARIF_RESPONSE,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.NOC_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.NON_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.CORR_PATENT_MED,vm.allActivities.ALLEGATION_NOTICE,vm.allActivities.FORM_IV,vm.allActivities.FORM_V,vm.allActivities.CONSENT_LTR,vm.allActivities.DATA_PROTECT_CORRESP]}function getSNDSArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.COMMENTS_NOC,vm.allActivities.COMMENTS_SUMMARY_BASIS,vm.allActivities.COMMENTS_REGULARTORY_DECISION,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.MEETING_MINUTES,vm.allActivities.PANDEMIC_APPL,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.POST_NOC_CHANGE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.SECOND_LANG_PM,vm.allActivities.PRISTINE_PM_2LANG,vm.allActivities.PUB_RELEASE_INFO,vm.allActivities.BE_CLARIF_RESPONSE,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.NOC_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.NON_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.CORR_PATENT_MED,vm.allActivities.ALLEGATION_NOTICE,vm.allActivities.FORM_IV,vm.allActivities.FORM_V,vm.allActivities.CONSENT_LTR,vm.allActivities.DATA_PROTECT_CORRESP,vm.allActivities.NONCLIN_CLARIF_RESPONSE]}function getSNDSCArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.COMMENTS_NOC,vm.allActivities.COMMENTS_SUMMARY_BASIS,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_NOC_CHANGE,vm.allActivities.SECOND_LANG_PM,vm.allActivities.PRISTINE_PM_2LANG,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.NOC_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.NON_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.CORR_PATENT_MED,vm.allActivities.ALLEGATION_NOTICE,vm.allActivities.FORM_IV,vm.allActivities.FORM_V,vm.allActivities.CONSENT_LTR,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.DATA_PROTECT_CORRESP]}function getUDPVArray(){return[vm.allActivities.BENEFIT_RISK_ASSESS,vm.allActivities.CANCEL_LETTER,vm.allActivities.NOTIFICATION_CHANGE,vm.allActivities.POST_MARKET_SURV,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.MEETING_MINUTES,vm.allActivities.MHPD_RQ_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.RISK_COMMUN_DOC,vm.allActivities.UNSOLICITED_DATA]}function getUDRAArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.DIN_DISCONTINUED,vm.allActivities.ADVISEMENT_LETTER_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.MEETING_MINUTES,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.NOTIFICATION_INTERRUPT_SALE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.SEQUENCE_CLEANUP]}function getConsultArray(){return[vm.allActivities.PANDEMIC_APPL]}function _getMPNCArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.WRITTEN_CONSULT_REQ,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.UNSOLICITED_DATA]}function _getMPNDSArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.WRITTEN_CONSULT_REQ,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ]}function _getMPSNDSArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.WRITTEN_CONSULT_REQ,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ]}function _getPANDArray(){return[vm.allActivities.BE_CLARIF_RESPONSE,vm.allActivities.CANCEL_LETTER,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.COMMENTS_NOC,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.INITIAL,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PANDEMIC_APPL,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.SECOND_LANG_PM,vm.allActivities.PRISTINE_PM_2LANG,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.NOC_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.NON_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.CORR_PATENT_MED,vm.allActivities.ALLEGATION_NOTICE,vm.allActivities.FORM_IV,vm.allActivities.FORM_V,vm.allActivities.CONSENT_LTR,vm.allActivities.DATA_PROTECT_CORRESP,vm.allActivities.NONCLIN_CLARIF_RESPONSE]}function _getPBRERCArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.COMMENTS_SUMMARY_BASIS,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.FOR_PERIOD,vm.allActivities.MEETING_MINUTES,vm.allActivities.MHPD_RQ_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.PHONE_RQ_RESPONSE]}function _getPBRERPVArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.FOR_PERIOD,vm.allActivities.MEETING_MINUTES,vm.allActivities.MHPD_RQ_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.CLIN_CLARIF_RESPONSE]}function _getPRNDSArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.MEETING_MINUTES,vm.allActivities.PRIORITY_REVIEW_RQ,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.RECON_DECIS_OTHER_INFO]}function _getPRSNDSArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.MEETING_MINUTES,vm.allActivities.PRIORITY_REVIEW_RQ,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.RECON_DECIS_OTHER_INFO];
}function getYBPRArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.FOR_PERIOD,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.MEETING_MINUTES,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE]}function getDSurArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.FOR_PERIOD,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.MEETING_MINUTES,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.PHONE_RQ_RESPONSE]}function getDINAArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.CHANGE_TO_DIN,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.INITIAL,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.PRISTINE_PM_2LANG,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.BE_CLARIF_RESPONSE,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.NON_RESPONSE,vm.allActivities.NOD_RESPONSE]}function getV_DINAArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.CHANGE_TO_DIN,vm.allActivities.INITIAL,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.HSC_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QHSC_RQ_RESPONSE,vm.allActivities.CHSC_RQ_RESPONSE,vm.allActivities.QCHSC_RQ_RESPONSE,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.INITIAL_TEAT_SOLU_MONO,vm.allActivities.NOD_RESPONSE]}function getDINBArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.CHANGE_TO_DIN,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.INITIAL,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.PRISTINE_PM_2LANG,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.NON_RESPONSE,vm.allActivities.NOD_RESPONSE]}function getDINDArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.CHANGE_TO_DIN,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.INITIAL,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.NON_RESPONSE,vm.allActivities.NOD_RESPONSE]}function getDINFArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.CHANGE_TO_DIN,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.INITIAL,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.LABEL_PREAPPROVAL_2LANG]}function getMPDINArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.WRITTEN_CONSULT_REQ,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE]}function getPDCArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_AUTH_DIV1_CHANGE,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.PRISTINE_PM_2LANG,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.NOL_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO]}function getPDCBArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_AUTH_DIV1_CHANGE,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.PRISTINE_PM_2LANG,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.NOL_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO]}function _getIRSRPVArray(){return[vm.allActivities.ISSUE_SAFETY_REQUEST,vm.allActivities.MEETING_MINUTES,vm.allActivities.PRESUB_MEETING_RQ]}function _getPAPVArray(){return[vm.allActivities.MEETING_MINUTES,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.MHPD_RQ_RESPONSE,vm.allActivities.PRESUB_MEETING_RQ]}function _getPSAPVArray(){return[vm.allActivities.ADV_COMP_REQ,vm.allActivities.PATIENT_SAFETY_INFO]}function _getRCPVArray(){return[vm.allActivities.DISSEM_LIST,vm.allActivities.RISK_COMMUN_DOC]}function _getREGPVArray(){return[vm.allActivities.BENEFIT_RISK_ASSESS,vm.allActivities.FOREIGN_SAFETY_NOTIFICATION,vm.allActivities.MEETING_MINUTES,vm.allActivities.RESSESS_ORDER,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.TEST_STUDIES_ORDER,vm.allActivities.TERM_COND_COMM]}function _getSANDSCArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.COMMENTS_NOC,vm.allActivities.COMMENTS_SUMMARY_BASIS,vm.allActivities.CONSENT_LTR,vm.allActivities.DATA_PROTECT_CORRESP,vm.allActivities.CORR_PATENT_MED,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.FORM_IV,vm.allActivities.FORM_V,vm.allActivities.MEETING_MINUTES,vm.allActivities.ALLEGATION_NOTICE,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.POST_NOC_CHANGE,vm.allActivities.SECOND_LANG_PM,vm.allActivities.PRISTINE_PM_2LANG,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.NOC_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.NON_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA]}function _getPostDINArray(){return[vm.allActivities.YEAR]}function _getEUANDSArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.BE_CLARIF_RESPONSE,vm.allActivities.CANCEL_LETTER,vm.allActivities.COMMENTS_NOC,vm.allActivities.COMMENTS_SUMMARY_BASIS,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.INITIAL,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.SECOND_LANG_PM,vm.allActivities.PRISTINE_PM_2LANG,vm.allActivities.PUB_RELEASE_INFO,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.NOC_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.NON_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.CORR_PATENT_MED,vm.allActivities.ALLEGATION_NOTICE,vm.allActivities.FORM_IV,vm.allActivities.FORM_V,vm.allActivities.CONSENT_LTR,vm.allActivities.DATA_PROTECT_CORRESP,vm.allActivities.NONCLIN_CLARIF_RESPONSE]}function _getEUSANDSArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.BE_CLARIF_RESPONSE,vm.allActivities.CANCEL_LETTER,vm.allActivities.COMMENTS_NOC,vm.allActivities.COMMENTS_SUMMARY_BASIS,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.SECOND_LANG_PM,vm.allActivities.PRISTINE_PM_2LANG,vm.allActivities.PUB_RELEASE_INFO,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.NOC_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.NON_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.CORR_PATENT_MED,vm.allActivities.ALLEGATION_NOTICE,vm.allActivities.FORM_IV,vm.allActivities.FORM_V,vm.allActivities.CONSENT_LTR,vm.allActivities.DATA_PROTECT_CORRESP,vm.allActivities.NONCLIN_CLARIF_RESPONSE]}function getV_AndsArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.CONSENT_LTR,vm.allActivities.DATA_PROTECT_CORRESP,vm.allActivities.CORR_PATENT_MED,vm.allActivities.FORM_IV,vm.allActivities.FORM_V,vm.allActivities.INITIAL,vm.allActivities.MEETING_MINUTES,vm.allActivities.ALLEGATION_NOTICE,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.HSC_RQ_RESPONSE,vm.allActivities.QHSC_RQ_RESPONSE,vm.allActivities.CHSC_RQ_RESPONSE,vm.allActivities.QCHSC_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.NON_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.UNSOLICITED_DATA]}function getCtaArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.INITIAL,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.NOL_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.CTN_ADMINISTRATIVE,vm.allActivities.CTN_APPENDIX,vm.allActivities.CTN_CONTACT,vm.allActivities.CTN_DATA,vm.allActivities.CTN_DEAR,vm.allActivities.CTN_DILUENT,vm.allActivities.CTN_DRUG_PROD,vm.allActivities.CTN_DRUG_SUBS,vm.allActivities.CTN_ENROLLMENT,vm.allActivities.CTN_ETHICS,vm.allActivities.CTN_IMPD_UPDATE,vm.allActivities.CTN_INFORMED,vm.allActivities.CTN_FORM_BROC_UPDATES,vm.allActivities.CTN_INVESTIGATOR,vm.allActivities.CTN_NEW_MANUFACTURING,vm.allActivities.CTN_NEW_PKG,vm.allActivities.CTN_NEW_QC,vm.allActivities.CTN_NEW_SUMM_ADF,vm.allActivities.CTN_PACKAGING_LABELLING,vm.allActivities.CTN_PROTOCOL_INFO_UPDATE,vm.allActivities.CTN_PROTOCOL_UPDATE,vm.allActivities.CTN_QOS,vm.allActivities.CTN_REFUSALS,vm.allActivities.CTN_REGULATORY,vm.allActivities.CTN_RESPONSE,vm.allActivities.CTN_SAFETY,vm.allActivities.CTN_SHELF_PD,vm.allActivities.CTN_SHELF_DS,vm.allActivities.CTN_SITE,vm.allActivities.CTN_SOURCE,vm.allActivities.CTN_STRAIN,vm.allActivities.CTN_STUDY_COMPLETION,vm.allActivities.CTN_STUDY_DISC,vm.allActivities.CTN_STUDY_EXT,vm.allActivities.CTN_STUDY_SUS,vm.allActivities.CTN_TRANS_OWN]}function getCta_aArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.NOL_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.CLINICAL,vm.allActivities.CLINICAL_QUALITY,vm.allActivities.QUALITY]}function getPreCtaArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ]}function getV_Level3Array(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.YEAR_LIST_OF_CHANGE]}function getV_MpdinArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.UNSOLICITED_DATA]}function getV_MpncArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.UNSOLICITED_DATA]}function getV_MpndsArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.UNSOLICITED_DATA]}function getV_MpsndsArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.UNSOLICITED_DATA]}function getV_MpandsArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.UNSOLICITED_DATA]}function getV_MpsandsArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.UNSOLICITED_DATA]}function getV_RccArray(){return[vm.allActivities.REQ_ACCEPTED]}function getV_NcArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.POST_NOC_CHANGE,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.HSC_RQ_RESPONSE,vm.allActivities.QHSC_RQ_RESPONSE,vm.allActivities.CHSC_RQ_RESPONSE,vm.allActivities.QCHSC_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.NOL_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.UNSOLICITED_DATA]}function getB_NcArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.COMMENTS_SUMMARY_BASIS,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.POST_NOC_CHANGE,vm.allActivities.PRISTINE_PM_2LANG,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.NOL_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.SECOND_LANG_PM]}function getNcArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.PRISTINE_PM_2LANG,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.NOL_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.SECOND_LANG_PM]}function getV_NdsArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.CONSENT_LTR,vm.allActivities.DATA_PROTECT_CORRESP,vm.allActivities.CORR_PATENT_MED,vm.allActivities.FORM_IV,vm.allActivities.FORM_V,vm.allActivities.INITIAL,vm.allActivities.MEETING_MINUTES,vm.allActivities.ALLEGATION_NOTICE,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.HSC_RQ_RESPONSE,vm.allActivities.QHSC_RQ_RESPONSE,vm.allActivities.CHSC_RQ_RESPONSE,vm.allActivities.QCHSC_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.UNSOLICITED_DATA]}function getV_PsurPvArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.FOR_PERIOD,vm.allActivities.MEETING_MINUTES,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.HSC_RQ_RESPONSE,vm.allActivities.QHSC_RQ_RESPONSE,vm.allActivities.CHSC_RQ_RESPONSE,vm.allActivities.QCHSC_RQ_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA]}function getV_SandsArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.CONSENT_LTR,vm.allActivities.DATA_PROTECT_CORRESP,vm.allActivities.CORR_PATENT_MED,vm.allActivities.FORM_IV,vm.allActivities.FORM_V,vm.allActivities.MEETING_MINUTES,vm.allActivities.ALLEGATION_NOTICE,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.POST_NOC_CHANGE,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.HSC_RQ_RESPONSE,vm.allActivities.QHSC_RQ_RESPONSE,vm.allActivities.CHSC_RQ_RESPONSE,vm.allActivities.QCHSC_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.NON_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.UNSOLICITED_DATA]}function getV_SndsArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.CONSENT_LTR,vm.allActivities.DATA_PROTECT_CORRESP,vm.allActivities.CORR_PATENT_MED,vm.allActivities.FORM_IV,vm.allActivities.FORM_V,vm.allActivities.MEETING_MINUTES,vm.allActivities.ALLEGATION_NOTICE,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.POST_NOC_CHANGE,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.HSC_RQ_RESPONSE,vm.allActivities.QHSC_RQ_RESPONSE,vm.allActivities.CHSC_RQ_RESPONSE,vm.allActivities.QCHSC_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.NON_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.UNSOLICITED_DATA]}function getV_UdraArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.DIN_DISCONTINUED,vm.allActivities.NOTIFICATION_INTERRUPT_SALE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.QHSC_RQ_RESPONSE,vm.allActivities.CHSC_RQ_RESPONSE,vm.allActivities.QCHSC_RQ_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.UNSOLICITED_DATA]}function _getCoVir19Array(){return[vm.allActivities.COVIR_19]}function _getCoVir19AmdArray(){return[vm.allActivities.COVIR_19AMD]}function _getActivityLeadArray(){return[vm.PHARMA,vm.BIOLOGICAL,vm.POSTMARKET,vm.CONSUMERHEALTH]}function _getActivityLeadD22Array(){return[vm.PHARMA,vm.POSTMARKET,vm.CONSUMERHEALTH]}function _getActivityLeadD21Array(){return[vm.BIOLOGICAL,vm.POSTMARKET]}function _getActivityLeadD24Array(){return[vm.VETERINARY]}function _getActivityLeadD26Array(){return[vm.CLINICAL_BIO,vm.CLINICAL_PHA]}function _getPharmaceutical(){return vm.D22}function _getBiologic(){return vm.D21}function _getVeterinary(){return vm.D24}function _getClinical(){return vm.D26}function _getBiologicalLead(){return vm.BIOLOGICAL}function _getPharmaLead(){return vm.PHARMA}function _getPostMarketLead(){return vm.POSTMARKET}function _getConsumHealthLead(){return vm.CONSUMERHEALTH}function _getVeterinaryLead(){return vm.VETERINARY}function _getClinicalBioLead(){return vm.CLINICAL_BIO}function _getClinicalPhaLead(){return vm.CLINICAL_PHA}function _getShelfLifeUnitsArray(){return[{id:"YR",en:"Years",fr:"Années"},{id:"MO",en:"Months",fr:"Mois"},{id:"DA",en:"Days",fr:"Jours"},{id:"HR",en:"Hours",fr:"Heures"},{id:"MI",en:"Minutes",fr:"Minutes"}]}var vm=this;vm.env="",vm.raTypeArray=[],vm.feeTypeArray=[],vm.mitigationTypeArray=[],vm.D21="D21",vm.D22="D22",vm.D24="D24",vm.D26="D26",vm.BIOLOGICAL="B14-20160301-02",vm.CONSUMERHEALTH="B14-20160301-06",vm.PHARMA="B14-20160301-09",vm.POSTMARKET="B14-20160301-10",vm.VETERINARY="B14-20160301-11",vm.CLINICAL_BIO="B14-20160301-02",vm.CLINICAL_PHA="B14-20160301-09",vm.allActivities={ADMINISTRATIVE:"ADMINISTRATIVE",BENEFIT_RISK_ASSESS:"BENEFIT_RISK_ASSESS",CANCEL_LETTER:"CANCEL_LETTER",CHANGE_TO_DIN:"CHANGE_TO_DIN",COMMENTS_NOC:"COMMENTS_NOC",COMMENTS_SUMMARY_BASIS:"COMMENTS_SUMMARY_BASIS",COMMENTS_REGULARTORY_DECISION:"COMMENTS_REGULARTORY_DECISION",DIN_DISCONTINUED:"DIN_DISCONTINUED",DRUG_NOTIF_FORM:"DRUG_NOTIF_FORM",FOR_PERIOD:"FOR_PERIOD",INITIAL:"INITIAL",MEETING_MINUTES:"MEETING_MINUTES",NOTIFICATION_CHANGE:"NOTIFICATION_CHANGE",NOTIFICATION_INTERRUPT_SALE:"NOTIFICATION_INTERRUPT_SALE",PANDEMIC_APPL:"PANDEMIC_APPL",POST_CLEARANCE_DATA:"POST_CLEARANCE_DATA",POST_MARKET_SURV:"POST_MARKET_SURV",POST_NOC_CHANGE:"POST_NOC_CHANGE",POST_AUTH_DIV1_CHANGE:"POST_AUTH_DIV1_CHANGE",PRESUB_MEETING_PKG:"PRESUB_MEETING_PKG",PRESUB_MEETING_RQ:"PRESUB_MEETING_RQ",PRIORITY_REVIEW_RQ:"PRIORITY_REVIEW_RQ",SECOND_LANG_PM:"SECOND_LANG_PM",PRISTINE_PM_2LANG:"PRISTINE_PM_2LANG",ADVISEMENT_LETTER_RESPONSE:"ADVISEMENT_LETTER_RESPONSE",CLIN_CLARIF_RESPONSE:"CLIN_CLARIF_RESPONSE",EMAIL_RQ_RESPONSE:"EMAIL_RQ_RESPONSE",HSC_RQ_RESPONSE:"HSC_RQ_RESPONSE",QHSC_RQ_RESPONSE:"QHSC_RQ_RESPONSE",CHSC_RQ_RESPONSE:"CHSC_RQ_RESPONSE",QCHSC_RQ_RESPONSE:"QCHSC_RQ_RESPONSE",LABEL_CLARIF_RESPONSE:"LABEL_CLARIF_RESPONSE",MHPD_RQ_RESPONSE:"MHPD_RQ_RESPONSE",NOC_RESPONSE:"NOC_RESPONSE",NOD_RESPONSE:"NOD_RESPONSE",NOL_RESPONSE:"NOL_RESPONSE",NON_RESPONSE:"NON_RESPONSE",PROCESSING_CLARIF_RESPONSE:"PROCESSING_CLARIF_RESPONSE",QUAL_CLIN_CLARIF_RESPONSE:"QUAL_CLIN_CLARIF_RESPONSE",QUAL_CLARIF_RESPONSE:"QUAL_CLARIF_RESPONSE",RECON_DECIS_LTR_INTENT:"RECON_DECIS_LTR_INTENT",RECON_DECIS_RQ_RECON:"RECON_DECIS_RQ_RECON",RECON_DECIS_OTHER_INFO:"RECON_DECIS_OTHER_INFO",SCREENING_ACCEPT_RESPONSE:"SCREENING_ACCEPT_RESPONSE",SCREENING_CLARIF_RESPONSE:"SCREENING_CLARIF_RESPONSE",SDN_RESPONSE:"SDN_RESPONSE",LABEL_PREAPPROVAL_2LANG:"LABEL_PREAPPROVAL_2LANG",PHONE_RQ_RESPONSE:"PHONE_RQ_RESPONSE",RISK_COMMUN_DOC:"RISK_COMMUN_DOC",RMP_VERSION_DATE:"RMP_VERSION_DATE",UNSOLICITED_DATA:"UNSOLICITED_DATA",YEAR_LIST_OF_CHANGE:"YEAR_LIST_OF_CHANGE",BE_CLARIF_RESPONSE:"BE_CLARIF_RESPONSE",CORR_PATENT_MED:"CORR_PATENT_MED",ALLEGATION_NOTICE:"ALLEGATION_NOTICE",FORM_IV:"FORM_IV",FORM_V:"FORM_V",CONSENT_LTR:"CONSENT_LTR",DATA_PROTECT_CORRESP:"DATA_PROTECT_CORRESP",NONCLIN_CLARIF_RESPONSE:"NONCLIN_CLARIF_RESPONSE",SEQUENCE_CLEANUP:"SEQUENCE_CLEANUP",ADV_COMP_REQ:"ADV_COMP_REQ",CSOtRMP:"CSOtRMP",DISSEM_LIST:"DISSEM_LIST",FOREIGN_SAFETY_NOTIFICATION:"FOREIGN_SAFETY_NOTIFICATION",ISSUE_SAFETY_REQUEST:"ISSUE_SAFETY_REQUEST",PATIENT_SAFETY_INFO:"PATIENT_SAFETY_INFO",PUB_RELEASE_INFO:"PUB_RELEASE_INFO",RESSESS_ORDER:"RESSESS_ORDER",WRITTEN_CONSULT_REQ:"WRITTEN_CONSULT_REQ",TEST_STUDIES_ORDER:"TEST_STUDIES_ORDER",TERM_COND_COMM:"TERM_COND_COMM",YEAR:"YEAR",CTN_ADMINISTRATIVE:"CTN_ADMINISTRATIVE",CTN_APPENDIX:"CTN_APPENDIX",CTN_CONTACT:"CTN_CONTACT",CTN_DATA:"CTN_DATA",CTN_DEAR:"CTN_DEAR",CTN_DILUENT:"CTN_DILUENT",CTN_DRUG_PROD:"CTN_DRUG_PROD",CTN_DRUG_SUBS:"CTN_DRUG_SUBS",CTN_ENROLLMENT:"CTN_ENROLLMENT",CTN_ETHICS:"CTN_ETHICS",CTN_INFORMED:"CTN_INFORMED",CTN_INVESTIGATOR:"CTN_INVESTIGATOR",CTN_NEW_MANUFACTURING:"CTN_NEW_MANUFACTURING",CTN_NEW_PKG:"CTN_NEW_PKG",CTN_NEW_QC:"CTN_NEW_QC",CTN_PACKAGING_LABELLING:"CTN_PACKAGING_LABELLING",CTN_PROTOCOL_INFO_UPDATE:"CTN_PROTOCOL_INFO_UPDATE",CTN_PROTOCOL_UPDATE:"CTN_PROTOCOL_UPDATE",CTN_QOS:"CTN_QOS",CTN_REFUSALS:"CTN_REFUSALS",CTN_REGULATORY:"CTN_REGULATORY",CTN_RESPONSE:"CTN_RESPONSE",CTN_SAFETY:"CTN_SAFETY",CTN_SHELF_PD:"CTN_SHELF_PD",CTN_SHELF_DS:"CTN_SHELF_DS",CTN_SITE:"CTN_SITE",CTN_SOURCE:"CTN_SOURCE",CTN_STRAIN:"CTN_STRAIN",CTN_STUDY_COMPLETION:"CTN_STUDY_COMPLETION",CTN_STUDY_DISC:"CTN_STUDY_DISC",CTN_STUDY_EXT:"CTN_STUDY_EXT",CTN_STUDY_SUS:"CTN_STUDY_SUS",CTN_TRANS_OWN:"CTN_TRANS_OWN",CLINICAL:"CLINICAL",CLINICAL_QUALITY:"CLINICAL_QUALITY",QUALITY:"QUALITY",INITIAL_TEAT_SOLU_MONO:"INITIAL_TEAT_SOLU_MONO",REQ_ACCEPTED:"REQ_ACCEPTED",CTN_FORM_BROC_UPDATES:"CTN_FORM_BROC_UPDATES",CTN_IMPD_UPDATE:"CTN_IMPD_UPDATE",CTN_NEW_SUMM_ADF:"CTN_NEW_SUMM_ADF",COVIR_19:"COVIR-19",COVIR_19AMD:"COVIR-19AMD"};var service={getEnv:_getEnvString,setEnv:_setEnvString,getTransactionDescriptions:getTransactionDescriptionsArray,getActivityTypes:getActivityArray,createRaTypes:_createRaArray,getPharmaceuticalValue:_getPharmaceutical,getBiologicValue:_getBiologic,getVeterinaryValue:_getVeterinary,getClinicalValue:_getClinical,getBiologicalLeadValue:_getBiologicalLead,getPharmaLeadValue:_getPharmaLead,getPostMarketLeadValue:_getPostMarketLead,getConsumHealthLeadValue:_getConsumHealthLead,getVeterinaryLeadValue:_getVeterinaryLead,getClinicalBioLeadValue:_getClinicalBioLead,getClinicalPhaLeadValue:_getClinicalPhaLead,getPresubTypes:getPresubArray,getAndsType:getANDSArray,getV_AndsType:getV_AndsArray,getCtaType:getCtaArray,getCta_aType:getCta_aArray,getPreCtaType:getPreCtaArray,getDinaType:getDINAArray,getV_DinaType:getV_DINAArray,getDinbType:getDINBArray,getDindType:getDINDArray,getDinfType:getDINFArray,getDSurType:getDSurArray,getEundsType:getEUNDSArray,getEusndsType:getEUSNDSArray,getLevel3Type:getLevel3Array,getV_Level3Type:getV_Level3Array,getMPDINType:getMPDINArray,getV_MpdinType:getV_MpdinArray,getNcType:getNcArray,getV_NcType:getV_NcArray,getB_NcType:getB_NcArray,getNdsType:getNDSArray,getV_NdsType:getV_NdsArray,getPdcType:getPDCArray,getPdcBType:getPDCBArray,getPresubType:getPresubArray,getpSurCType:getPSURCArray,getpSurPvType:getPSURPVArray,getV_PsurPvType:getV_PsurPvArray,getRmpPvType:getRMPPVArray,getSandsType:getSANDSArray,getV_SandsType:getV_SandsArray,getSndsType:getSNDSArray,getV_SndsType:getV_SndsArray,getSndsCType:getSNDSCArray,getUdpvType:getUDPVArray,getUdraType:getUDRAArray,getV_UdraType:getV_UdraArray,getYbprType:getYBPRArray,getConsultType:getConsultArray,getMPNCType:_getMPNCArray,getV_MpncType:getV_MpncArray,getMPNDSType:_getMPNDSArray,getV_MpndsType:getV_MpndsArray,getV_MpandsType:getV_MpandsArray,getV_MpsandsType:getV_MpsandsArray,getV_RccType:getV_RccArray,getMPSNDSType:_getMPSNDSArray,getV_MpsndsType:getV_MpsndsArray,getPANDType:_getPANDArray,getPBRERCType:_getPBRERCArray,getPBRERPVType:_getPBRERPVArray,getPRNDSType:_getPRNDSArray,getPRSNDSType:_getPRSNDSArray,getIRSRPVType:_getIRSRPVArray,getPAPVType:_getPAPVArray,getPSAPVType:_getPSAPVArray,getRCPVType:_getRCPVArray,getREGPVType:_getREGPVArray,getSANDSCType:_getSANDSCArray,getPostDINType:_getPostDINArray,getEUANDSType:_getEUANDSArray,getEUSANDSType:_getEUSANDSArray,getYesNoList:yesNoArray,getFeeList:_getfeeTypeArray,
createFeeTypes:_createFeeArray,getMitigationList:_getMitigationTypeArray,createMitigationList:_createMitigationArray,getActivityLeadList:_getActivityLeadArray,getActivityLeadListByD22:_getActivityLeadD22Array,getActivityLeadListByD21:_getActivityLeadD21Array,getActivityLeadListByD24:_getActivityLeadD24Array,getActivityLeadListByD26:_getActivityLeadD26Array,getShelfLifeUnitsList:_getShelfLifeUnitsArray,getCOVIR19Type:_getCoVir19Array,getCOVID19AMDType:_getCoVir19AmdArray};return service}angular.module("services").factory("TransactionLists",getTransactionSeq),getTransactionSeq.inject=["$http","$q"]}(),function(){"use strict";angular.module("hpfbConstants",[]),angular.module("hpfbConstants").constant("SOFTWARE_VERSION","4.1.0").constant("PROD","PROD").constant("CANADA","CAN").constant("OTHER","OTHER").constant("YES","Y").constant("NO","N").constant("USA","USA").constant("UNKNOWN","UNKNOWN").constant("NEW","New").constant("EXISTING","Existing").constant("ENGLISH","en").constant("FRENCH","fr").constant("NEW_TYPE","NEW").constant("APPROVED_TYPE","FINAL").constant("DEPRECATED_APPROVED_TYPE","APPROVED").constant("AMEND_TYPE","AMEND").constant("INTERNAL_TYPE","INT").constant("EXTERNAL_TYPE","EXT").constant("PHARMA_TYPE","PHARMA").constant("RELATIVE_FOLDER_DATA","../data/").constant("CSP_XSL","CSP_Enrolment.xsl").constant("HCSC","hcsc").constant("XML","xml").constant("XSL_PREFIX","https://raw.githubusercontent.com/HealthCanada/HPFB/master/Regulatory-Enrolment-Process-REP/v_2_2/Style-Sheets/").constant("ADVANCE_FEE_PAYMENT_EN","https://www.canada.ca/content/dam/hc-sc/migration/hc-sc/dhp-mps/alt_formats/pdf/prodpharma/applic-demande/form/adv-pa-av2-eng.pdf").constant("ADVANCE_FEE_PAYMENT_FR","https://www.canada.ca/content/dam/hc-sc/migration/hc-sc/dhp-mps/alt_formats/pdf/prodpharma/applic-demande/form/adv-pa-av2-fra.pdf")}(),function(){"use strict";angular.module("filterLists",["hpfbConstants"])}(),function(){"use strict";function orderByTranslatedCountry($translate,$filter,CANADA,USA){return function(array,objKey){var result=[],translated=[];return angular.forEach(array,function(value){translated.push({key:value,label:$translate.instant(value)})}),result.push(CANADA),result.push(USA),angular.forEach($filter("orderBy")(translated,"label"),function(sortedObject){sortedObject.key!==CANADA&&sortedObject.key!==USA&&result.push(sortedObject.key)}),result}}function orderByTranslatedCountryAndLabel($translate,$filter,CANADA,USA){return function(array){var result=[],translated=[];return angular.forEach(array,function(value){translated.push({key:value,label:$translate.instant(value)})}),result.push({key:CANADA,label:$translate.instant(CANADA)}),result.push({key:USA,label:$translate.instant(USA)}),angular.forEach($filter("orderBy")(translated,"label"),function(sortedObject){sortedObject.key!==CANADA&&sortedObject.key!==USA&&result.push(sortedObject)}),result}}function findCountryObj(){return function(array,targetKey){for(var i=0;i<array.length;i++)if(array[i].key===targetKey)return array[i];return null}}function orderByTranslated($translate,$filter){return function(array){var result=[],translated=[];return angular.forEach(array,function(value){translated.push({key:value,label:$translate.instant(value)})}),angular.forEach($filter("orderBy")(translated,"label"),function(sortedObject){result.push(sortedObject.key)}),result}}function sequenceOrderBy($filter){return function(array){var result=[];return angular.forEach($filter("orderBy")(array,"sequence",!0),function(sortedObject){result.push(sortedObject)}),result}}function orderByTranslatedOtherFirst($translate,$filter,OTHER){return function(array){var result=[],translated=[];return angular.forEach(array,function(value){translated.push({key:value,label:$translate.instant(value)})}),result.push(OTHER),angular.forEach($filter("orderBy")(translated,"label"),function(sortedObject){sortedObject.key!==OTHER&&result.push(sortedObject.key)}),result}}function _orderByLocale(){return function(items,lang){return items.sort(function(a,b){return a[lang].localeCompare(b[lang],lang)}),items}}function _findById($filter){return function(array,searchJson){var initialResult=$filter("filter")(array,searchJson);if(!initialResult)return null;if(1===initialResult.length)return initialResult[0];for(var i=0;i<initialResult.length;i++)if(initialResult[i].id===searchJson.id)return initialResult[i];return null}}angular.module("filterLists").filter("orderByTranslatedCountry",orderByTranslatedCountry).filter("orderByTranslated",orderByTranslated).filter("orderByTranslatedOtherFirst",orderByTranslatedOtherFirst).filter("orderByCountryAndLabel",orderByTranslatedCountryAndLabel).filter("orderByLocale",_orderByLocale).filter("findCountryObject",findCountryObj).filter("findListItemById",_findById).filter("sequenceOrderDescending",sequenceOrderBy),orderByTranslatedCountry.$inject=["$translate","$filter","CANADA","USA"],orderByTranslated.$inject=["$translate","$filter"],orderByTranslatedOtherFirst.$inject=["$translate","$filter","OTHER"],_findById.$inject=["$filter"]}(),function(){"use strict";angular.module("applicationInfoService",[])}(),function(){"use strict";function ApplicationInfoService(){function ApplicationInfoService(){}return ApplicationInfoService.prototype.getTodayDate=function(){function pad(n){return n<10?"0"+n:n}var d=new Date,isoDate=d.getFullYear()+"-"+pad(d.getMonth()+1)+"-"+pad(d.getDate());return isoDate},ApplicationInfoService.prototype.incrementMinorVersion=function(enrolmentVersion){var result;if(enrolmentVersion){var parts=enrolmentVersion.split("."),dec=parseInt(parts[1]);result=parts[0]+"."+(dec+1)}else result="0.1";return result},ApplicationInfoService.prototype.incrementMajorVersion=function(enrolmentVersion){var result;if(enrolmentVersion){var parts=enrolmentVersion.split("."),whole=parseInt(parts[0]);result=whole+1+".0"}else result="1.0";return result},ApplicationInfoService.prototype.getApplicationStatusList=function(){return["NEW","AMEND","FINAL"]},ApplicationInfoService.prototype.getApprovedType=function(){return"FINAL"},ApplicationInfoService.prototype.getAmendType=function(){return"AMEND"},ApplicationInfoService}angular.module("applicationInfoService").factory("ApplicationInfoService",ApplicationInfoService)}(),function(){"use strict";angular.module("companyLoadService",["dataLists","hpfbConstants"])}(),function(){"use strict";angular.module("companyLoadService").factory("customLoad",["$http","$q","$filter","getCountryAndProvinces","CANADA","USA","RELATIVE_FOLDER_DATA",function($http,$q,$filter,getCountryAndProvinces,CANADA,USA,RELATIVE_FOLDER_DATA){function _createTranslateList(jsonList,lang){lang||(lang="en");for(var resultList={},i=0;i<jsonList.length;i++)resultList[jsonList[i].id]=jsonList[i][lang];return resultList}function _createSortedArrayNAFirst(jsonList,lang){var result=[],canadaRecord=null,usaRecord=null;return angular.forEach($filter("orderByLocale")(jsonList,lang),function(sortedObject){sortedObject.id===USA?usaRecord=sortedObject:sortedObject.id===CANADA?canadaRecord=sortedObject:result.push(sortedObject)}),usaRecord&&result.unshift(usaRecord),canadaRecord&&result.unshift(canadaRecord),result}return function(options){var deferred=$q.defer(),envUrl=RELATIVE_FOLDER_DATA+"env.json",countryUrl=RELATIVE_FOLDER_DATA+"countries.json",resultTranslateList={};return $http.get(envUrl).then(function(response){getCountryAndProvinces.setEnv(response.data)}),$http.get(countryUrl).then(function(response){var newList=_createSortedArrayNAFirst(response.data,options.key),translateList=_createTranslateList(newList,options.key);return getCountryAndProvinces.createCountryList(newList),angular.extend(resultTranslateList,translateList),response.data})["catch"](function(error){console.warn("An error occurred with Company List Load: "+error),deferred.reject(resultTranslateList)})["finally"](function(){deferred.resolve(resultTranslateList)}),deferred.promise}}])}(),function(){"use strict";angular.module("companyService",["dataLists","hpfbConstants"])}(),function(){"use strict";function CompanyService($filter,$translate,getCountryAndProvinces,XSL_PREFIX){function CompanyService(){var defaultCompanyData={dataChecksum:"",enrolmentVersion:"0.0",dateSaved:"",applicationType:"NEW",softwareVersion:"4.1.0",companyId:"",reasonAmend:"",addressList:[],contactList:[]};angular.extend(this._default,defaultCompanyData),this.addressID=0,this.contactId=0,this.xslFileName="REP_CO_4_1.xsl",this.helpTextSequences={loadFileInx:0,enrolIdx:0,addressIdx:0,businessIdx:0,addRoleIdx:0,companyRepIdx:0,routingIdIdx:0,genXmlIdx:0};for(var keys=Object.keys(this.helpTextSequences),i=0;i<keys.length;i++)this.helpTextSequences[keys[i]]=i+1}return CompanyService.prototype={_default:{},getNumberKeys:function(obj){var numKeys=0;for(var prop in obj)obj.hasOwnProperty(prop)&&numKeys++;return numKeys},getApplicationTypes:function(){return["NEW","AMEND","FINAL"]},getApprovedType:function(){return"FINAL"},getAmendType:function(){return"AMEND"},getXSLFileName:function(){return this.xslFileName},createAddressRole:function(){var defaultAddressRole={manufacturer:!1,mailing:!1,billing:!1,importer:!1};return defaultAddressRole},createContactRole:function(){var defaultContactRole={manufacturer:!1,mailing:!1,billing:!1,repPrimary:!1};return defaultContactRole},createAddressRecord:function(){var defaultAddress={addressID:1,companyName:"",businessNumber:"",importerID:"",addressRole:{manufacturer:!1,mailing:!1,billing:!1,importer:!1},street:"",city:"",stateList:"",stateText:"",country:"",postalCode:""};return defaultAddress.addressID=this.getNextAddressID(),defaultAddress},createContactRecord:function(){var defaultContact={contactId:1,addressRole:{manufacturer:!1,mailing:!1,billing:!1,repPrimary:!1},contactRole:"",givenName:"",surname:"",initials:"",title:"",phone:"",phoneExt:"",fax:"",email:"",routingId:"",impCompanyName:""};return defaultContact.contactId=this.getNextContactID(),defaultContact},updateAddressID:function(value){isNaN(value)||value>this.addressID&&(this.addressID=value)},getNextAddressID:function(){return this.addressID=this.addressID+1,this.addressID},resetAddressID:function(value){value?this.addressID=value:this.addressID=0},updateContactID:function(value){isNaN(value)||value>this.contactId&&(this.contactId=value)},getNextContactID:function(){return this.contactId=this.contactId+1,this.contactId},resetContactID:function(value){value?this.contactId=value:this.contactId=0},getRootTag:function(){return"COMPANY_ENROL"},transformFromFileObj:function(jsonObj){var rootTag=this.getRootTag(),companyInfo=this.getCompanyInfo(jsonObj[rootTag]),addressInfo={addressList:this.getAddressList(jsonObj[rootTag].address_record)},contactInfo={contactList:this.getContactList(jsonObj[rootTag].contact_record)};this._default={},angular.extend(this._default,companyInfo,addressInfo,contactInfo)},transformToFileObj:function(jsonObj){var resultJson={COMPANY_ENROL:{template_type:"PHARMA",data_checksum:jsonObj.dataChecksum,enrolment_version:jsonObj.enrolmentVersion,date_saved:jsonObj.dateSaved,application_type:jsonObj.applicationType,software_version:jsonObj.softwareVersion,company_id:jsonObj.companyId,reason_amend:jsonObj.reasonAmend,address_record:_mapAddressListToOutput(jsonObj.addressList,$translate),contact_record:_mapContactListToOutput(jsonObj.contactList,$translate)}};return resultJson},getModelInfo:function(){return this._default},getCompanyInfo:function(info){return info?{dataChecksum:info.data_checksum,enrolmentVersion:info.enrolment_version,dateSaved:info.date_saved,applicationType:info.application_type,softwareVersion:info.software_version,companyId:info.company_id,reasonAmend:info.reason_amend,addressList:[],contactList:[]}:this._default},getAddressList:function(adrList){var list=[];if(!adrList)return list;adrList instanceof Array||(adrList=[adrList]);for(var i=0;i<adrList.length;i++){this.updateAddressID(parseInt(adrList[i].address_id));var address={};address.addressID=adrList[i].address_id,address.companyName=adrList[i].company_name,address.businessNumber=adrList[i].business_number,address.importerID=adrList[i].importer_id,address.addressRole={},address.addressRole.manufacturer="Y"===adrList[i].manufacturer,address.addressRole.mailing="Y"===adrList[i].mailing,address.addressRole.billing="Y"===adrList[i].billing,address.addressRole.importer="Y"===adrList[i].importer,address.street=adrList[i].company_address_details.street_address,address.city=adrList[i].company_address_details.city,adrList[i].company_address_details.province_lov?address.stateList=adrList[i].company_address_details.province_lov._id:address.stateList="",address.stateText=adrList[i].company_address_details.province_text,address.country="";var currentLang=$translate.proposedLanguage()||$translate.use();adrList[i].company_address_details.country._id&&(address.country=$filter("filter")(getCountryAndProvinces.getCountries(),{id:adrList[i].company_address_details.country._id})[0],address.countryHtml=$translate.instant(address.country.id,"","",currentLang),address.countryDisplay=address.country.id),address.postalCode=adrList[i].company_address_details.postal_code,list.push(address)}return list},getContactList:function(contacts){var list=[];if(!contacts)return list;contacts instanceof Array||(contacts=[contacts]);for(var i=0;i<contacts.length;i++){var contact={},contact_rec_index=contacts[i].contact_id;contact.contactId=contact_rec_index,this.updateContactID(contact_rec_index),contact.addressRole={},contact.addressRole.manufacturer="Y"===contacts[i].manufacturer,contact.addressRole.mailing="Y"===contacts[i].mailing,contact.addressRole.billing="Y"===contacts[i].billing,contact.addressRole.importer="Y"===contacts[i].importer,contact.addressRole.repPrimary="Y"===contacts[i].rep_primary,contact.addressRole.repSecondary="Y"===contacts[i].rep_secondary,contact.givenName=contacts[i].company_contact_details.given_name,contact.initials=contacts[i].company_contact_details.initials,contact.surname=contacts[i].company_contact_details.surname,contact.title=contacts[i].company_contact_details.job_title,contact.language=contacts[i].company_contact_details.language_correspondance._id,contact.phone=contacts[i].company_contact_details.phone_num,contact.phoneExt=contacts[i].company_contact_details.phone_ext,contact.fax=contacts[i].company_contact_details.fax_num,contact.email=contacts[i].company_contact_details.email,contact.routingId=contacts[i].company_contact_details.RoutingID,contact.impCompanyName=contacts[i].company_contact_details.imp_company_name,list.push(contact)}return list}},CompanyService}function _mapAddressListToOutput(adrList,$translate){var addressList=[],currentLang=$translate.proposedLanguage()||$translate.use();if(adrList)for(var i=0;i<adrList.length;i++){var address={};address.address_id=adrList[i].addressID,address.manufacturer=adrList[i].addressRole.manufacturer===!0?"Y":"N",address.mailing=adrList[i].addressRole.mailing===!0?"Y":"N",address.billing=adrList[i].addressRole.billing===!0?"Y":"N",address.importer=adrList[i].addressRole.importer===!0?"Y":"N",address.company_name=adrList[i].companyName,address.business_number=adrList[i].businessNumber,address.importer_id=adrList[i].importerID,address.company_address_details={},address.company_address_details.street_address=adrList[i].street,address.company_address_details.city=adrList[i].city,adrList[i].stateList?address.company_address_details.province_lov={_id:adrList[i].stateList,__text:$translate.instant(adrList[i].stateList,"","",currentLang)}:address.company_address_details.province_lov="",address.company_address_details.province_text=adrList[i].stateText,address.company_address_details.country="",adrList[i].country&&(address.company_address_details.country={_id:adrList[i].country.id,_label_en:adrList[i].country.en,_label_fr:adrList[i].country.fr,__text:$translate.instant(adrList[i].country.id,"","",currentLang)}),address.company_address_details.postal_code=adrList[i].postalCode,addressList.push(address)}return addressList}function _mapContactListToOutput(contacts,$translate){var contactList=[],currentLang=$translate.proposedLanguage()||$translate.use();if(contacts)for(var i=0;i<contacts.length;i++){var contact={};contact.contact_id=contacts[i].contactId,contact.manufacturer=contacts[i].addressRole.manufacturer===!0?"Y":"N",contact.mailing=contacts[i].addressRole.mailing===!0?"Y":"N",contact.billing=contacts[i].addressRole.billing===!0?"Y":"N",contact.importer=contacts[i].addressRole.importer===!0?"Y":"N",contact.rep_primary=contacts[i].addressRole.repPrimary===!0?"Y":"N",contact.company_contact_details={},contact.company_contact_details.given_name=contacts[i].givenName,contact.company_contact_details.initials=contacts[i].initials,contact.company_contact_details.surname=contacts[i].surname,contact.company_contact_details.job_title=contacts[i].title,contact.company_contact_details.language_correspondance={_id:contacts[i].language,__text:$translate.instant(contacts[i].language,"","",currentLang)},contact.company_contact_details.phone_num=contacts[i].phone,contact.company_contact_details.phone_ext=contacts[i].phoneExt,contact.company_contact_details.fax_num=contacts[i].fax,contact.company_contact_details.email=contacts[i].email,contact.company_contact_details.RoutingID=contacts[i].routingId,contact.company_contact_details.imp_company_name=contacts[i].impCompanyName,contactList.push(contact)}return contactList}angular.module("companyService").factory("CompanyService",CompanyService),CompanyService.$inject=["$filter","$translate","getCountryAndProvinces","XSL_PREFIX"],String.prototype.capitalizeFirstLetter=function(){return this.charAt(0).toUpperCase()+this.slice(1).toLowerCase()}}(),function(){"use strict";angular.module("companyHelpText",["services","filterLists","hpfbConstants","dataLists"])}(),function(){"use strict";function CompanyHelpTextCtrl($translate,$scope,getCountryAndProvinces,PROD){var vm=this;vm.lang=$translate.proposedLanguage()||$translate.use(),vm.isForProd=PROD===getCountryAndProvinces.getEnv(),vm.$onInit=function(){}}angular.module("companyHelpText").component("cmpCompanyHelpText",{templateUrl:"app/scripts/components/companyHelpText/tpl-company-help-text_20200909_1525.html",controller:CompanyHelpTextCtrl,controllerAs:"help",bindings:{htIndxList:"<"}}),CompanyHelpTextCtrl.$inject=["$translate","$scope","getCountryAndProvinces","PROD"]}(),function(){"use strict";angular.module("alertModule",[])}(),function(){"use strict";function alertController(){var vm=this;vm.alertVisible=!1,vm.closeMsgAlias="CLOSE_ALERT",vm.anchor=null,vm.$onInit=function(){vm.alertVisible=!1},vm.$onChanges=function(changes){changes.msg&&(vm.closeMsgAlias=changes.msg.currentValue),changes.uiState&&(vm.alertVisible=changes.uiState.currentValue),changes.myAnchor&&(vm.anchor=changes.myAnchor.currentValue)},vm.open=function(){vm.updateState()},vm.close=function(){vm.updateState(),vm.anchor&&document.getElementById(vm.anchor).focus()},vm.isAlertVisible=function(){return vm.alertVisible}}angular.module("alertModule").component("cmpAlert",{templateUrl:"app/scripts/components/alertComponent/tpl-alert_20200909_1525.html",transclude:!0,bindings:{uiState:"<",msg:"@",myAnchor:"<",updateState:"&",type:"@"},controller:alertController,controllerAs:"alertCtrl"}),alertController.$inject=[]}(),function(){"use strict";angular.module("errorMessageModule",[])}(),function(){"use strict";function errorMessageController(){var vm=this;vm.field_name="",vm.form_ref=null,vm.fieldRecords=[],vm.$onChanges=function(changes){changes.fieldName&&(vm.field_name=changes.fieldName.currentValue),changes.formRef&&(vm.form_ref=changes.formRef.currentValue),changes.errorTypes&&(vm.fieldRecords=changes.errorTypes.currentValue)},vm.showErrorMessage=function(){return!!vm.form_ref&&(angular.isUndefined(vm.fieldName)?(console.warn("No field name for: "+vm.form_ref.$name),!1):angular.isUndefined(vm.form_ref[vm.fieldName])?(console.warn("lookup undefined "+vm.form_ref.$name+"."+vm.fieldName),!1):vm.showError()&&vm.form_ref[vm.fieldName].$invalid||vm.form_ref[vm.fieldName].$touched&&vm.form_ref[vm.fieldName].$invalid)}}angular.module("errorMessageModule").component("cmpErrorMessage",{templateUrl:"app/scripts/components/error-message/tpl-error-message_20200909_1525.html",controller:errorMessageController,controllerAs:"errMessageCtrl",bindings:{fieldName:"<",formRef:"<",showError:"&",errorTypes:"<"}})}(),function(){"use strict";angular.module("errorSummaryModule",["focus-if"])}(),function(){"use strict";function errorSummaryController($scope,$location,$anchorScroll){function _isErrorSummaryVisible(){return vm.isVisible&&vm.errorArray&&vm.errorArray.length>0}function _hideRequiredRecordErrors(errors){var keys=Object.keys(errors);if(keys instanceof Array||(keys=[keys]),keys.indexOf("ingRecCtrl.activeIngForm")>-1)for(var i=0;i<keys.length;i++)if(keys[i].indexOf("no_active")>-1){delete errors[keys[i]];break}if(keys.indexOf("ctrCtrl.containerTypeForm")>-1)for(var i=0;i<keys.length;i++)if(keys[i].indexOf("no_container")>-1){delete errors[keys[i]];break}}function _getErr(errorObj,resultsList,parent){for(var keys=Object.keys(errorObj),i=0;i<keys.length;i++){var record=errorObj[keys[i]];record instanceof Array||(record=[record]);for(var j=0;j<record.length;j++){var numIndex=record[j].$name.lastIndexOf("_"),transcludeName="";if(numIndex>0&&(transcludeName=record[j].$name.substring(0,numIndex)),record[j].$invalid===!0&&record[j].$name.indexOf(".")>0)if(vm.exclusions&&vm.exclusions.hasOwnProperty(record[j].$name)){var tabIndex=vm.exclusions[record[j].$name].indexOf("tab_"),tabId=-1;tabIndex>-1&&(tabId=vm.exclusions[record[j].$name].substr(tabIndex+4),tabId=parseInt(tabId)),angular.merge(resultsList,_createSummaryRecord(record[j].$name,keys[i],parent,tabId))}else _getErr(record[j].$error,resultsList,record[j].$name);else if(vm.transcludeNames.hasOwnProperty(transcludeName)){var exIndex=record[j].$name.indexOf(transcludeName),expandIndex=record[j].$name.substring(exIndex+transcludeName.length+1);angular.merge(resultsList,_createExpanderRecord(record[j].$name,transcludeName,keys[i],parent,expandIndex))}else if(record[j].$invalid===!0&&!resultsList.hasOwnProperty(record[j].$name)){var result=_processRecord(record[j].$name,keys[i],parent);"SAVELIFEREC"===result[record[j].$name].translateKey&&(result[record[j].$name].type=""),angular.merge(resultsList,result)}}}}function _scrubFieldName(rawName){var separator="_",index=rawName.lastIndexOf(separator),cleanedName="";return cleanedName=index>-1?rawName.substring(0,index):rawName}function _getElementScope(rawName){var separator="_",nameSplit=rawName.split(separator),scopeId=parseInt(nameSplit[nameSplit.length-1]);return angular.isNumber(scopeId)||(scopeId=""),scopeId}function _processRecord(error_Name,errorType,parent){var result={},scrubName=_scrubFieldName(error_Name),scopeId=_getElementScope(error_Name),errorKey="TYPE_"+errorType.toUpperCase(),destId=error_Name;if(vm.alias&&vm.alias.hasOwnProperty(scrubName)){var aliasRec=vm.alias[scrubName];switch(aliasRec.type.toLowerCase()){case"fieldset":var searchId=aliasRec.parent+"_"+scopeId,destObj=$("#"+searchId).find("input:visible:first");destObj.length>0&&(destId=destObj[0].id);break;case"element":destId=aliasRec.target+"_"+scopeId;break;case"elementnoid":destId=aliasRec.target;break;case"pattern":"pattern"===errorType&&(errorKey=aliasRec.errorType);break;case"select2":var searchId=aliasRec.name+"_match"+scopeId,destObj=$("#"+searchId);destObj.length>0&&(destId=searchId);break;case"min":"min"===errorType&&(errorKey=aliasRec.errorType);break;case"max":"max"===errorType&&(errorKey=aliasRec.errorType);break;case"minlength":"minlength"===errorType&&(errorKey=aliasRec.errorType);break;case"maxlength":"maxlength"===errorType&&(errorKey=aliasRec.errorType);break;case"buttonsearch":errorKey="TYPE_REQUIRED",$.each($("button","#"+vm.startFormId),function(k){var temp_attr=$(this).attr("id");temp_attr&&temp_attr.indexOf(aliasRec.buttonName)>-1&&(destId=temp_attr)});break;default:console.warn("No type found "+aliasRec.type)}}return result[error_Name]||(result[error_Name]={name:destId,errorName:error_Name,translateKey:scrubName.toUpperCase(),type:errorKey,parent:parent,concat:parent+"."+error_Name,isSummary:!1}),result}function _sortErrorsByDomOrder(){var domFieldList={};$.each($("input, select, textarea, fieldset"),function(k){var temp_attr=$(this).attr("id");temp_attr&&(domFieldList[temp_attr]=k)});for(var keyList=Object.keys(domFieldList),p=0;p<keyList.length;p++){if(keyList[p].indexOf("focusser-")>-1){var parentName=angular.element(document.querySelector("#"+keyList[p])).parent().attr("name");parentName&&(keyList[p]=parentName)}vm.uniqueErrorList[keyList[p]]||(keyList.splice(p,1),p--)}for(var sortedDomJsonList={},v=0;v<keyList.length;v++)0==keyList[v].indexOf("no_")&&(keyList[v]=keyList[v].replace("no_","list_")),sortedDomJsonList[keyList[v]]=v;var newErrors=Object.keys(vm.uniqueErrorList).map(function(k){return vm.uniqueErrorList[k]}),notDefined={};if(newErrors.length>0)for(var i=0;i<newErrors.length;){var currRec=newErrors[i],targetName=currRec.errorName,destIndex=sortedDomJsonList[targetName];if(angular.isDefined(destIndex)&&destIndex!==i){var tempRec=angular.copy(newErrors[destIndex]);newErrors[destIndex]=angular.copy(currRec),newErrors[i]=angular.copy(tempRec)}else angular.isDefined(destIndex)||(notDefined[currRec.name]={rec:currRec,pos:i}),i++}return _sortUnknowns(notDefined,newErrors),newErrors}function _sortUnknowns(unknownJson,sortList){for(var unknownArray=Object.keys(unknownJson).map(function(k){return unknownJson[k]}),i=0;i<unknownArray.length;i++){var unknownRec=unknownArray[i],unknownName=unknownRec.rec.name,scopeIndex=_getElementScope(unknownName);if(angular.isNumber(scopeIndex))for(var g=sortList.length-1;g>=0;g--){var sortRec=sortList[g],sortScope=_getElementScope(sortRec.name);if(angular.isNumber(sortScope)&&sortScope===scopeIndex&&unknownName!==sortRec.name){sortList.move(unknownRec.pos,g+1);break}}}}function _createSummaryRecord(name,type,parent,tabId){var result={};return angular.isDefined(tabId)||(tabId=-1),result[name]={name:name,type:type,translateKey:name.toUpperCase(),parent:parent,concat:parent+"."+name,tabId:tabId,isSummary:!0},result}function _createExpanderRecord(name,transcludeName,type,parent,expanderIndex){var result={};return result[name]={name:name,type:type,translateKey:transcludeName.toUpperCase(),parent:parent,concat:parent+"."+name,isSummary:!0,toExpand:!0,exIndex:parseInt(expanderIndex)},result}var vm=this;vm.parentRef=null,vm.errorArray=[],vm.uniqueErrorList={},vm.isVisible=!1,vm.nameAddendum="",vm.rootError="",vm.isFocusInput=0,vm.exclusions={},vm.alias={},vm.transcludeNames={},vm.headingPreamble="",vm.headerLevel="",vm.startFormId="",vm.$onInit=function(){},vm.$onChanges=function(changes){changes.setHeadingLevel&&angular.isDefined(changes.setHeadingLevel.currentValue)&&(vm.headerLevel=changes.setHeadingLevel.currentValue.toLowerCase()),changes.nameSuffix&&(vm.nameAddendum="-"+changes.nameSuffix.currentValue),changes.formPreamble&&(vm.headingPreamble=changes.formPreamble.currentValue),changes.exclusionList&&(vm.exclusions=changes.exclusionList.currentValue),changes.aliasList&&(vm.alias=changes.aliasList.currentValue),changes.formRef&&vm.getErrorsSumm(changes.formRef.currentValue.$error,changes.formRef.currentValue.$name),changes.showErrors&&(vm.isVisible=changes.showErrors.currentValue),changes.updateErrors&&vm.formRef&&vm.isVisible&&vm.getErrorsSumm(vm.formRef.$error,vm.formRef.$name),changes.makeFocused&&changes.makeFocused.currentValue&&(vm.isFocusInput=vm.isFocusInput+1),changes.formId&&(vm.startFormId=changes.formId.currentValue),changes.transcludeList&&changes.transcludeList.currentValue&&(vm.transcludeNames=changes.transcludeList.currentValue)},vm.calcIsVisible=function(){var summaryIsVisible=_isErrorSummaryVisible();return summaryIsVisible||$scope.$emit("childErrorSummaryHide",+vm.nameAddendum),summaryIsVisible},vm.scrollTo=function(errorRecord){var hashId="";errorRecord&&(hashId=errorRecord.isSummary?"errors-summary-"+errorRecord.name:errorRecord.name,vm.expandRecord({index:errorRecord.exIndex}),$location.hash(hashId),$anchorScroll())},vm.selectVisibleTab=function(errorRecord){"errors-summary-"+errorRecord.name;vm.selectTab({index:errorRecord.tabId})},vm.isSummaryLink=function(errorRecord){return errorRecord.isSummary&&!angular.isDefined(errorRecord.toExpand)&&angular.isDefined(errorRecord.tabId)&&parseInt(errorRecord.tabId)<0},vm.isList=function(errorRecord){return errorRecord.name.indexOf("list_")>=0},vm.isTabLink=function(errorRecord){return errorRecord.isSummary&&angular.isDefined(errorRecord.tabId)&&parseInt(errorRecord.tabId)>-1},vm.isExpanderLink=function(errorRecord){return angular.isDefined(errorRecord.toExpand)},$scope.$on("childErrorSummaryHide",function(event,data){if(_isErrorSummaryVisible())for(var errorSummaryBroadcastName=data.message,i=0;i<vm.errorArray.length;i++){var errorRecord=errorArray[i];errorRecord.isSummary&&errorRecord.name===errorSummaryBroadcastName&&vm.errorArray.splice(i,1)}}),vm.getErrorsSumm=function(myformErrors,name){if(vm.errorArray=[],vm.uniqueErrorList={},_getErr(myformErrors,vm.uniqueErrorList,name),_hideRequiredRecordErrors(vm.uniqueErrorList),"COMPANY_FORM"==vm.formPreamble){vm.errorArray=Object.keys(vm.uniqueErrorList).map(function(k){return vm.uniqueErrorList[k]});for(var temp=vm.errorArray[0],i=0;i<vm.errorArray.length-1;i++)vm.errorArray[i]=vm.errorArray[i+1],"required"==vm.errorArray[i].type&&(vm.errorArray[i].type="TYPE_REQUIRED");vm.errorArray[vm.errorArray.length-1]=temp}else{var newErrors=_sortErrorsByDomOrder();angular.equals(vm.errorArray,newErrors)||(vm.errorArray=newErrors)}},Array.prototype.move=function(from,to){to<0&&(to=0),to>=this.length&&(to=this.length-1),this.splice(to,0,this.splice(from,1)[0])}}angular.module("errorSummaryModule").component("cmpErrorSummary",{templateUrl:"app/scripts/components/error-summary/tpl-error-summary_20200909_1525.html",controller:errorSummaryController,controllerAs:"errSummaryCtrl",bindings:{formRef:"<",showErrors:"<",updateErrors:"<",nameSuffix:"@",formPreamble:"@",makeFocused:"<",setHeadingLevel:"@",exclusionList:"<",transcludeList:"<",formId:"<",aliasList:"<",expandRecord:"&",selectTab:"&"}}),errorSummaryController.$inject=["$scope","$location","$anchorScroll"]}(),function(){"use strict";angular.module("dossierIdDetails",["errorMessageModule"])}(),function(){"use strict";function dossierIdDetailsCtrl($scope){function _setIdNames(){var scopeId="_"+$scope.$id;vm.dossierId="dossier_id"+scopeId}var vm=this;vm.record={dossierId:""},vm.detailsIndex=0,vm.isEditable=!0,vm.min7Error=[{type:"required",displayAlias:"MSG_ERR_MAND"},{type:"minlength",displayAlias:"MSG_LENGTH_7NUM"}],vm.$onInit=function(){_setIdNames()},vm.$onChanges=function(changes){changes.dossierRecord&&(vm.record=changes.dossierRecord.currentValue),changes.idIndex&&(vm.detailsIndex=changes.idIndex.currentValue),changes.isAmend&&(vm.isEditable=changes.isAmend.currentValue)},vm["delete"]=function(){vm.deleteId({dossierIndex:vm.detailsIndex})},vm.showError=function(ctrl){return!!ctrl&&!!(ctrl.$invalid&&ctrl.$touched||vm.showErrors()&&ctrl.$invalid)}}angular.module("dossierIdDetails").component("cmpDossierIdDetails",{templateUrl:"app/scripts/components/dossierIdDetails/tpl-dossier-id-details_20200909_1525.html",controller:dossierIdDetailsCtrl,controllerAs:"dosIdCtrl",bindings:{dossierRecord:"<",idIndex:"<",deleteId:"&",showErrors:"&",isAmend:"<",setReadonly:"&"}}),dossierIdDetailsCtrl.$inject=["$scope"]}(),function(){"use strict";angular.module("importerProducts",["dossierIdDetails","errorMessageModule"])}(),function(){"use strict";function importerProductsCtrl($scope){function _setIdNames(){var scopeId="_"+$scope.$id;vm.prodTypesId="product_types"+scopeId}var vm=this;vm.formAmend=!1,vm.someProducts=!1,vm.isEditable=!0,vm.recordReadOnly=!1,vm.productTypeList=["ALL_PRODUCTS","SELECTED_PRODUCTS"],vm.requiredOnly=[{
type:"required",displayAlias:"MSG_ERR_MAND"}],vm.model={selectedProducts:"",dossierIdList:[]},vm.$onInit=function(){_setIdNames(),vm.productTypeChanged()},vm.$onChanges=function(changes){changes.importerRecord&&changes.importerRecord.currentValue&&(vm.model=changes.importerRecord.currentValue,vm.productTypeChanged()),changes.isAmend&&(vm.isEditable=changes.isAmend.currentValue)},vm.disableAddButton=function(){return vm.importProdForm.$invalid},vm.addDossierId=function(){vm.model.dossierIdList instanceof Array||(vm.model.dossierIdList=[]),vm.model.dossierIdList.push({dossierId:""}),vm.isDetailValid({state:!1})},vm.deleteId=function(index){index>vm.model.dossierIdList.length-1||(vm.model.dossierIdList.splice(index,1),vm.isDetailValid({state:!0}))},vm.isIdInvalid=function(index){return!(vm.model.dossierIdList[index].dossierId&&7===vm.model.dossierIdList[index].dossierId.length)},vm.productTypeChanged=function(){"SELECTED_PRODUCTS"!==vm.model.selectedProducts?(vm.model.dossierIdList=[],vm.someProducts=!1):(vm.someProducts=!0,0===vm.model.dossierIdList.length&&vm.model.dossierIdList.push({dossierId:""}))},vm.showError=function(ctrl){return!!ctrl&&(ctrl.$invalid&&ctrl.$touched||vm.showErrors()&&ctrl.$invalid)},vm.setNotEditable=function(){return!1}}angular.module("importerProducts").component("cmpImporterProducts",{templateUrl:"app/scripts/components/companyImporterProducts/tpl-importer-products_20200909_1525.html",controller:importerProductsCtrl,controllerAs:"impProdCtrl",bindings:{updateValid:"&",onDelete:"&",isAmend:"<",isDetailValid:"&",importerRecord:"<",showErrors:"&",onUpdate:"&"}}),importerProductsCtrl.$inject=["$scope"]}(),function(){"use strict";angular.module("contactRecord",["addressRole","contactModule","errorSummaryModule"])}(),function(){"use strict";function contactRecCtrl($scope){function _getRolesConcat(){var addressRoles=vm.contactModel.addressRole,result="";return addressRoles.manufacturer&&(result+=" MFR"),addressRoles.billing&&(result+=" BILL"),addressRoles.mailing&&(result+=" MAIL"),addressRoles.importer&&(result+=" IMP"),addressRoles.repPrimary&&(result+=" REP1"),result}var vm=this;vm.savePressed=!1,vm.isContact=!0,vm.isEditable=!1,vm.formAmend=!1,vm.updateSummary=0,vm.setSummaryFocus=0,vm.showSummary=!1,vm.contactModel={roleConcat:"",contactId:"",amendRecord:!1,addressRole:{manufacturer:!1,mailing:!1,billing:!1,importer:!1,repPrimary:!1,repSecondary:!1},contactRole:"",salutation:"",givenName:"",surname:"",initials:"",title:"",phone:"",PhoneExt:"",fax:"",addrImpCompanyName:""},vm.alias={contactRoleMissing:{type:"fieldset",parent:"fs_roleMissing"},phoneNumber:{type:"pattern",errorType:"MSG_ERR_PHONE_FORMAT"}},vm.$onInit=function(){vm.updateErrorSummaryState(),vm.contactModel.focusOnFirstName=vm.isFocus},vm.$onChanges=function(changes){changes.contactRecord&&(vm.contactModel=angular.copy(changes.contactRecord.currentValue),vm.contactModel.roleConcat=_getRolesConcat(),vm.setEditable()),changes.isAmend&&(vm.formAmend=changes.isAmend.currentValue,vm.contactModel.amendRecord=changes.isAmend.currentValue,vm.setEditable()),changes.showErrorSummary&&(vm.showSummary=changes.showErrorSummary.currentValue,vm.updateErrorSummaryState())},vm.isOneSelected=function(type){return vm.isRoleSelected({roleName:type,id:vm.contactModel.contactId})},vm.updateErrorSummaryState=function(){vm.updateSummary=vm.updateSummary+1},vm["delete"]=function(){vm.onDelete({contactId:vm.contactModel.contactId}),vm.updateErrorSummary(),vm.cancelFocus()},vm.discardChanges=function(){if(!vm.contactRecForm.$pristine){var currRecord=vm.contactRecord;vm.contactModel=angular.copy(currRecord),vm.setEditable(),vm.contactRecForm.$setPristine(),vm.contactModel&&vm.onUpdate({contact:vm.contactModel}),vm.isDetailValid({state:vm.contactRecForm.$valid}),vm.errorSummaryUpdate()}},vm.onContactRoleUpdate=function(newRole){var aRole={};angular.extend(aRole,newRole),vm.contactModel.addressRole=aRole,vm.updateContactModel2(),vm.showRoutingId(),vm.setEditable(),vm.showAddrImpCompanyName()},vm.updateValid=function(){vm.isDetailValid({state:vm.contactRecForm.$valid&&!vm.contactRecForm.$dirty})},$scope.$watch("contactRec.contactRecForm.$dirty",function(){vm.contactRecForm.$dirty&&vm.isDetailValid({state:!1})},!0),$scope.$watch("contactRec.contactRecForm.$error",function(){vm.updateErrorSummaryState(),vm.updateErrorSummary()},!0),vm.updateContactModel2=function(){vm.contactModel.roleConcat=_getRolesConcat(),vm.contactRecForm.$valid?(vm.contactModel.addressRole.importer||(vm.contactModel.impCompanyName=""),vm.isDetailValid({state:!0}),vm.contactRecForm.$setPristine(),vm.onUpdate({contact:vm.contactModel}),vm.showSummary=!1,vm.contactModel.focusOnFirstName=!1,vm.errorSummaryUpdate()):(vm.showSummary=!0,vm.errorSummaryUpdate(),vm.updateErrorSummaryState(),vm.focusOnSummary())},vm.focusOnSummary=function(){vm.setSummaryFocus=vm.setSummaryFocus+1},vm.showErrors=function(){return vm.showSummary},vm.setEditable=function(){vm.formAmend?vm.formAmend&&vm.contactModel.amendRecord?vm.isEditable=!0:vm.isEditable=!1:vm.isEditable=!0},vm.showRoutingId=function(){return vm.contactModel.roleConcat=_getRolesConcat(),vm.contactModel.roleConcat.indexOf(" MFR")>-1||vm.contactModel.roleConcat.indexOf(" MAIL")>-1||vm.contactModel.roleConcat.indexOf(" IMP")>-1?0:(vm.contactModel.routingId="",-1)},vm.showAddrImpCompanyName=function(){return vm.contactModel.roleConcat=_getRolesConcat(),vm.contactModel.roleConcat.indexOf(" IMP")>-1?0:(vm.contactModel.addrImpCompanyName="",-1)}}angular.module("contactRecord").component("cmpContactRecord",{templateUrl:"app/scripts/components/contactRecord/tpl-contact-record_20200909_1525.html",controller:contactRecCtrl,controllerAs:"contactRec",bindings:{contactRecord:"<",onUpdate:"&",updateValid:"&",checkRoles:"&",onDelete:"&",isAmend:"<",isDetailValid:"&",isRoleSelected:"&",recordIndex:"<",errorSummaryUpdate:"&",showErrorSummary:"<",updateErrorSummary:"&",htIndxList:"<",isFocus:"<",cancelFocus:"&",addrImpCompanyName:"<"}}),contactRecCtrl.$inject=["$scope"]}(),function(){"use strict";angular.module("addressRecord",["addressModule","addressRole","filterLists","hpfbConstants","errorSummaryModule","errorMessageModule","dataLists"])}(),function(){"use strict";function addressRecCtrl($scope,CANADA,$filter,getCountryAndProvinces,$translate,INTERNAL_TYPE,EXTERNAL_TYPE){function _getRolesConcat(){var addressRoles=vm.addressModel.addressRole,result="";return addressRoles.manufacturer&&(result+=" MFR,"),addressRoles.billing&&(result+=" BILL,"),addressRoles.mailing&&(result+=" MAIL,"),addressRoles.importer&&(result+=" IMP,"),result=result.substring(0,result.length-1)}function _setIdNames(){var scopeId="_"+$scope.$id;vm.companyNameId="COMPANYNAME"+scopeId,vm.importerID="importerID"+scopeId,vm.formNameId="company-address-record-form"+scopeId,vm.businessNumberId="businessNumberId"+scopeId}var vm=this;vm.des=!1,vm.lang=$translate.proposedLanguage()||$translate.use(),vm.isContact=!1,vm.isEditable=!0,vm.formAmend=!1,vm.isImporter=!1,vm.updateCountry=0,vm.updateSummary=0,vm.setSummaryFocus=0,vm.addressRecForm="",vm.showSummary=!1,vm.isInternal=!1,vm.addressModel={addressID:1,companyName:"",businessNumber:"",importerID:"",amendRecord:!1,addressRole:{manufacturer:!1,mailing:!1,billing:!1,importer:!1},street:"",city:"",provLov:"",stateList:"",stateText:"",country:"",countryHtml:"",postalCode:""},vm.alias={roleMissing:{type:"fieldset",parent:"fs_roleMissing"},postal:{type:"pattern",errorType:"POSTAL_FORMAT"}},vm.requiredOnly=[{type:"required",displayAlias:"MSG_ERR_MAND"}],vm.length6Error=[{type:"required",displayAlias:"MSG_ERR_MAND"},{type:"minlength",displayAlias:"MSG_LENGTH_MIN5"}],vm.isOneSelected=function(type){return vm.isRoleSelected({roleName:type,id:vm.addressModel.addressID})},vm.$onInit=function(){_setIdNames(),vm.updateErrorSummaryState(),vm.importerProductState(vm.addressModel.addressRole.importer)},vm.notCanadianManufact=function(){return!!vm.addressModel&&(vm.addressModel.addressRole.manufacturer===!0&&vm.addressModel.country.id!==CANADA)},vm.focusOnSummary=function(){vm.setSummaryFocus=vm.setSummaryFocus+1},vm.updateErrorSummaryState=function(){vm.updateSummary=vm.updateSummary+1},vm.$onChanges=function(changes){changes.addressRecord&&(vm.addressModel=angular.copy(changes.addressRecord.currentValue),vm.addressModel.roleConcat=_getRolesConcat(),vm.setEditable()),changes.isAmend&&(vm.formAmend=changes.isAmend.currentValue,vm.addressModel.amendRecord=changes.isAmend.currentValue,vm.setEditable()),changes.showErrorSummary&&(vm.showSummary=changes.showErrorSummary.currentValue,vm.updateErrorSummaryState()),changes.isIn&&(changes.isIn.currentValue===INTERNAL_TYPE?vm.isInternal=!0:vm.isInternal=!1)},vm["delete"]=function(){vm.onDelete({addressId:vm.addressModel.addressID}),vm.updateErrorSummary();var ele=document.getElementById("addAddressBtn");console.log("tab element: "+ele),null!==ele&&ele.focus()},vm.discardChanges=function(){if(!vm.addressRecForm.$pristine){var currRecord=vm.addressRecord;vm.addressModel=angular.copy(currRecord),vm.setEditable(),vm.addressRecForm.$setPristine(),vm.isDetailValid({state:vm.addressRecForm.$valid}),vm.addressModel&&vm.onUpdate({rec:vm.addressModel}),vm.errorSummaryUpdate(),vm.importerProductState(vm.addressModel.addressRole.importer)}},vm.onAddressRoleUpdate=function(newRole){var aRole={};angular.extend(aRole,newRole),vm.addressModel.addressRole=aRole,vm.updateAddressModel2()},vm.importerProductState=function(state){var isImporterPre=vm.isImporter;vm.isImporter=state,vm.isImporter&&(vm.addressModel.addressRole.manufacturer=!1,vm.addressModel.country=$filter("filter")(getCountryAndProvinces.getCountries(),{id:CANADA})[0],vm.addressModel.countryHtml=vm.addressModel.country[vm.lang],vm.updateCountry++),vm.isImporter||(vm.addressModel.importerID=""),isImporterPre&&!vm.isImporter&&vm.deselectImporter(!vm.isImporter)},vm.deselectImporter=function(state){vm.des=state,vm.des&&(vm.addressModel.addressRole.importer=!1,vm.addressModel.importerID=""),vm.isImporter&&vm.des&&(vm.isImporter=!1,vm.addressModel.country="",vm.addressModel.countryHtml="",vm.updateCountry++)},vm.updateValid=function(){vm.isDetailValid({state:vm.addressRecForm.$valid&&!vm.addressRecForm.$dirty})},$scope.$watch("addressRec.addressRecForm.$dirty",function(){vm.addressRecForm.$dirty&&vm.isDetailValid({state:!1})},!0),$scope.$watch("addressRec.addressRecForm.$error",function(){vm.updateErrorSummaryState(),vm.updateErrorSummary()},!0),vm.updateAddressModel2=function(){vm.addressModel.roleConcat=_getRolesConcat(),vm.addressRecForm.$valid?(vm.isDetailValid({state:!0}),vm.addressRecForm.$setPristine(),vm.addressModel.focusCompanyName=!1,vm.onUpdate({rec:vm.addressModel}),vm.showSummary=!1,vm.errorSummaryUpdate(),vm.cancelFocus()):(vm.showSummary=!0,vm.updateErrorSummaryState(),vm.focusOnSummary())},vm.getInvalid=function(){return vm.addressRecForm.$valid},vm.showErrors=function(){return vm.showSummary},vm.setEditable=function(){vm.isEditable=!(vm.formAmend&&!vm.addressModel.amendRecord)}}angular.module("addressRecord").component("cmpAddressRecord",{templateUrl:"app/scripts/components/addressRecord/tpl-address-record_20200909_1525.html",controller:addressRecCtrl,controllerAs:"addressRec",bindings:{addressRecord:"<",onUpdate:"&",updateValid:"&",checkRoles:"&",onDelete:"&",isAmend:"<",isDetailValid:"&",isRoleSelected:"&",recordIndex:"<",htIndxList:"<",errorSummaryUpdate:"&",showErrorSummary:"<",updateErrorSummary:"&",isIn:"<",isFocus:"<",cancelFocus:"&",inUseFlag:"<"}}),addressRecCtrl.$inject=["$scope","CANADA","$filter","getCountryAndProvinces","$translate","INTERNAL_TYPE","EXTERNAL_TYPE"]}(),function(){"use strict";angular.module("addressModule",["hpfbConstants","dataLists","filterLists","ui.select","errorMessageModule"])}(),function(){"use strict";function addressCtrl(getCountryAndProvinces,$translate,CANADA,USA,$scope){function _setIdNames(){var scopeId=vm.fldId+"_"+$scope.$id;vm.streetId="STREET"+scopeId,vm.cityId="CITY"+scopeId,vm.countryId="COUNTRY"+scopeId,vm.stateTextId="proveState"+scopeId,vm.stateListId="state"+scopeId,vm.provinceListId="province"+scopeId,vm.postalId="postal"+scopeId,vm.zipId="zip"+scopeId}var vm=this;vm.isEditable=!0,vm.ngModelOptSetting={updateOn:"blur"},vm.lang=$translate.proposedLanguage()||$translate.use(),vm.addressModel={addressID:"",isDetailValid:!1,street:"",city:"",country:"",countryHtml:"",countryDisplay:"",stateLov:"",stateText:"",postalCode:""},vm.countryIsEditable=!0,vm.canadianPostalCodePattern="^(?!.*[DFIOQU])[A-VXYa-vxy][0-9][A-Za-z] ?[0-9][A-Za-z][0-9]$",vm.usaZipCode="^[0-9]{5}(?:-[0-9]{4})?$",vm.hideProvinceText=!1,vm.showProvince=!1,vm.showState=!1,vm.countryList=getCountryAndProvinces.getCountries(),vm.fdId="",vm.requiredOnly=[{type:"required",displayAlias:"MSG_ERR_MAND"}],vm.postalErrorList=[{type:"required",displayAlias:"MSG_ERR_MAND"},{type:"pattern",displayAlias:"TYPE_PATTERN"}],vm.provStateErrorName="PROVSTATE",vm.focusOnProvinceState=!1,vm.$onInit=function(){vm.addressRecord&&(vm.addressModel=vm.addressRecord,vm.provListLabel=getProvinceListLabel(),vm.postalLabel=getPostalLabel(),vm.isPostalRequired=isPostalRequiredFn(),vm.provinces=getProvinceStateList(),vm.hideProvinceText=getProvinceTextState(),vm.postalPattern=getPostalPattern(),vm.hideProvinceDdl=!vm.hideProvinceText),_setIdNames()},vm.$onChanges=function(changes){changes.addressRecord&&(vm.addressModel=changes.addressRecord.currentValue,vm.countryChanged()),changes.isAmend&&(vm.isEditable=changes.isAmend.currentValue),changes.fieldSuffix&&(vm.fldId=changes.fieldSuffix.currentValue,vm.fldId||(vm.fldId="")),changes.updateCountry&&vm.countryChanged(),changes.countryEditable&&(vm.countryIsEditable=changes.countryEditable.currentValue,angular.isUndefined(vm.countryIsEditable)&&(vm.countryIsEditable=!0))},vm.countryChanged=function(){void 0===vm.addressModel.country.id||vm.addressModel.country.en!==vm.addressModel.countryHtml&&vm.addressModel.country.fr!==vm.addressModel.countryHtml?(vm.addressModel.countryHtml="",vm.addressModel.countryDisplay="",vm.isPostalRequired=!1,vm.hideProvinceText=!1,vm.showProvince=!1,vm.showState=!1,vm.hideProvinceDdl=!vm.hideProvinceText,vm.postalLabel=getPostalLabel()):(vm.addressModel.countryDisplay=vm.addressModel.country.id,vm.provListLabel=getProvinceListLabel(),vm.postalLabel=getPostalLabel(),vm.isPostalRequired=isPostalRequiredFn(),vm.provinces=getProvinceStateList(),vm.hideProvinceText=getProvinceTextState(),vm.postalPattern=getPostalPattern(),vm.hideProvinceDdl=!vm.hideProvinceText,vm.isCountryCanada()),vm.updateErrorSummary()},vm.isCountryCanada=function(){return vm.addressModel&&vm.addressModel.country?vm.addressModel.country.id===CANADA?(vm.postalErrorList=[{type:"required",displayAlias:"MSG_ERR_MAND"},{type:"pattern",displayAlias:"TYPE_PATTERN"}],!0):(vm.postalErrorList=[{type:"required",displayAlias:"MSG_ERR_MAND"},{type:"pattern",displayAlias:"TYPE_PATTERN"}],!1):(vm.postalErrorList=[{type:"required",displayAlias:"MSG_ERR_MAND"},{type:"pattern",displayAlias:"MSG_ERR_POSTAL"}],!1)},vm.showError=function(ctrl){return!!ctrl&&!!(ctrl.$invalid&&ctrl.$touched||vm.showErrors()&&ctrl.$invalid)},vm.onDeleteButtonClick=function(){vm.onDelete({addressId:vm.addressModel.addressID})},vm.onDiscardButtonClick=function(){vm.addressModel=angular.extend({},vm.addressRecord),vm.addressForm.$setPristine()},vm.isCountryEditable=function(){return vm.isEditable&&vm.countryIsEditable},vm.postalCodeChanged=function(){var postal=vm.addressModel.postalCode;postal&&(postal=postal.toUpperCase(),6==postal.length&&vm.addressModel.country.id===CANADA&&(postal=postal.substring(0,3)+" "+postal.substring(3,postal.length)),vm.addressModel.postalCode=postal,vm.updateErrorSummary())};var getProvinceTextState=function(){var isCanOrUsa=isPostalRequiredFn();return isCanOrUsa?vm.addressModel.stateText="":vm.addressModel.stateList="",isCanOrUsa},isPostalRequiredFn=function(){return vm.addressModel.country.id===CANADA||vm.addressModel.country.id===USA},getProvinceStateList=function(){return vm.addressModel.country.id===CANADA?(vm.showProvince=!0,vm.showState=!1,getCountryAndProvinces.getProvinces()):vm.addressModel.country.id===USA?(vm.showProvince=!1,vm.showState=!0,getCountryAndProvinces.getUSStates()):(vm.showProvince=!1,void(vm.showState=!1))},getProvinceListLabel=function(){var label=vm.addressModel.country.id===USA?"STATE":"PROVINCE";return label},getPostalLabel=function(){var label=vm.addressModel.country.id===USA?"ZIP":"POSTAL";return label},getPostalPattern=function(){var postalPtrn=null;return vm.addressModel.country.id===USA?postalPtrn=/^[0-9]{5}(?:-[0-9]{4})?$/:vm.addressModel.country.id===CANADA&&(postalPtrn=/^(?!.*[DFIOQU])[A-VXYa-vxy][0-9][A-Za-z] ?[0-9][A-Za-z][0-9]$/),postalPtrn};vm.countryChange=function(){for(var found=!1,i=0;i<vm.countryList.length;i++){var option=vm.countryList[i];if(option[vm.lang]===vm.addressModel.countryHtml){vm.addressModel.country=option,found=!0;break}}found||(vm.addressModel.countryHtml="",""!=vm.addressModel.country&&""!=vm.addressModel.country.id&&(vm.addressModel.country={}),vm.addressModel.countryDisplay=""),vm.countryChanged()},vm.countryTabKey=function(){vm.focusOnProvinceState=!0},vm.leaveProvinceState=function(){vm.focusOnProvinceState=!1},$scope.$watch("adr.addressForm.$error",function(){vm.updateErrorSummary()},!0)}angular.module("addressModule").config(function(uiSelectConfig){uiSelectConfig.theme="select2"}).component("cmpAddressDetails",{templateUrl:"app/scripts/components/addressDetails/tpl-address-details_20200909_1525.html",controller:addressCtrl,controllerAs:"adr",bindings:{addressRecord:"<",onUpdate:"&",showErrors:"&",isAmend:"<",updateErrorSummary:"&",fieldSuffix:"<",countryEditable:"<",updateCountry:"<"}}),addressCtrl.$inject=["getCountryAndProvinces","$translate","CANADA","USA","$scope"]}(),function(){"use strict";angular.module("contactList2",["contactRecord","expandingTable","hpfbConstants","errorSummaryModule"])}(),function(){"use strict";function contactListCtrl($filter,CompanyService,INTERNAL_TYPE){function updateRolesConcat(){if(vm.contactList)for(var i=0;i<vm.contactList.length;i++)_setRolesConcat(vm.contactList[i])}function _setRolesConcat(contactModel){var roles=contactModel.addressRole,result="";roles.manufacturer&&(result+=" MFR"),roles.billing&&(result+=" BILL"),roles.mailing&&(result+=" MAIL"),roles.importer&&(result+=" IMP"),roles.repPrimary&&(result+=" REP1"),contactModel.roleConcat=result}var vm=this;vm.selectRecord=-1,vm.isDetailValid=!0,vm.allRolesSelected=!1,vm.impCompanySelected=!0,vm.contactList=[],vm.formAmend=!1,vm.isInternal=!1,vm.requiredFlag=!0,vm.resetCollapsed=!1,vm.updateSummary=0,vm.columnDef=[{label:"FIRSTNAME",binding:"givenName",width:"25"},{label:"LASTNAME",binding:"surname",width:"30"},{label:"JOBTITLE",binding:"title",width:"25"},{label:"ROLES",binding:"roleConcat",width:"20"}],vm.alias={},vm.exclusions={},vm.$onInit=function(){vm.focused=!1},vm.$onChanges=function(changes){if(vm.impCompanySelected=vm.isImpCompanySelected(),changes.contacts&&(vm.contactList=changes.contacts.currentValue,updateRolesConcat(),vm.allRolesSelected=vm.isAllContactRolesSelected(),vm.isDetailValid=!0,vm.updateErrorSummaryState()),changes.isAmend&&(vm.formAmend=changes.isAmend.currentValue),changes.errorSummaryUpdate&&vm.updateErrorSummaryState(),changes.showErrorSummary&&(vm.showSummary=changes.showErrorSummary.currentValue),changes.userType){var isIn=changes.userType.currentValue;isIn===INTERNAL_TYPE?vm.isInternal=!0:vm.isInternal=!1}changes.isFileLoaded&&changes.isFileLoaded.currentValue&&(vm.requiredFlag=!1)},vm.$postLink=function(){vm.isInternal||vm.addContact()},vm.updateErrorSummaryState=function(){vm.updateSummary=vm.updateSummary+1},vm.setValid=function(value){vm.isDetailValid=value},vm.showError=function(){return!vm.isAllContactRolesSelected()||!vm.isImpCompanySelected()},vm.onUpdateContactRecord=function(record){var idx=vm.contactList.indexOf($filter("filter")(vm.contactList,{contactId:record.contactId},!0)[0]);vm.contactList[idx]=angular.copy(record),vm.allRolesSelected=vm.isAllContactRolesSelected(),vm.impCompanySelected=vm.isImpCompanySelected(),vm.requiredFlag=!1,vm.resetCollapsed=!vm.resetCollapsed,vm.contactListForm.$setPristine()},vm.deleteContact=function(cID){var idx=vm.contactList.indexOf($filter("filter")(vm.contactList,{contactId:cID},!0)[0]);vm.contactList.splice(idx,1),vm.onUpdate({newList:vm.contactList}),vm.isDetailValid=!0,vm.allRolesSelected=vm.isAllContactRolesSelected(),vm.impCompanySelected=vm.isImpCompanySelected(),vm.requiredFlag=!1,vm.resetCollapsed=!vm.resetCollapsed,vm.updateErrorSummaryState(),vm.contactListForm.$setPristine()},vm.addContact=function(){var defaultContact=vm.getNewContact();defaultContact.focusOnFirstName=vm.isFocus,vm.contactList.push(defaultContact),vm.selectRecord=vm.contactList.length-1,vm.isDetailValid=!1},vm.setFocus=function(){vm.isFocus=!0},vm.cancelFocus=function(){vm.isFocus=!1},vm.isREPRoleSelected=function(roleToCheck,recordID){var rolesSelected=0;if(!vm.contactList)return!1;for(var i=0;i<vm.contactList.length;i++)if(vm.contactList[i].addressRole[roleToCheck]===!0&&(vm.contactList[i].contactId!==recordID&&(rolesSelected+=1),rolesSelected>0))return!0;return!1},vm.disableAddContact=function(){return!!vm.contactList&&!vm.isDetailValid},vm.isAllContactRolesSelected=function(){var rolesSelected=0,repPrimarySelected=!1,importerSelected=!1;if(!vm.contactList)return!1;for(var companyRole=vm.companyService.createContactRole(),numKeys=vm.companyService.getNumberKeys(companyRole),i=0;i<vm.contactList.length;i++){var obj=vm.contactList[i].addressRole;for(var key in obj){var attrName=key,attrValue=obj[key];attrValue&&companyRole.hasOwnProperty(attrName)&&(rolesSelected++,"importer"===key&&(importerSelected=!0))}}return rolesSelected===numKeys||!(rolesSelected!==numKeys-1&&rolesSelected!==numKeys-2||!repPrimarySelected)},vm.isImpCompanySelected=function(){var i=0,j=0;if(Array.isArray(vm.addrImpCompanyName)&&vm.addrImpCompanyName.length>0)for(i=0;i<vm.addrImpCompanyName.length;i++){for(j=0;j<vm.contactList.length&&vm.addrImpCompanyName[i]!==vm.contactList[j].impCompanyName;j++);if(j>=vm.contactList.length)return!1}return!0}}angular.module("contactList2").component("cmpCompanyContactList",{templateUrl:"app/scripts/components/contactList/tpl-contact-list_20200909_1525.html",controller:contactListCtrl,controllerAs:"contactListCtrl",bindings:{contacts:"<",onUpdate:"&",getNewContact:"&",isAmend:"<",isFileLoaded:"<",companyService:"<",showErrorSummary:"<",errorSummaryUpdate:"<",updateErrorSummary:"&",userType:"<",htIndxList:"<",addrImpCompanyName:"<"}}),contactListCtrl.$inject=["$filter","CompanyService","INTERNAL_TYPE"]}(),function(){"use strict";angular.module("addressList",["addressRecord","hpfbConstants","errorSummaryModule"])}(),function(){"use strict";function addressListCtrl($filter,CompanyService,CANADA,INTERNAL_TYPE,EXTERNAL_TYPE){function updateRolesConcat(){if(vm.addressList)for(var i=0;i<vm.addressList.length;i++)_setRolesConcat(vm.addressList[i])}function _setRolesConcat(addressModel){var addressRoles=addressModel.addressRole,result="";addressRoles.manufacturer&&(result+=" MFR"),addressRoles.billing&&(result+=" BILL"),addressRoles.mailing&&(result+=" MAIL"),addressRoles.importer&&(result+=" IMP"),addressModel.roleConcat=result}var vm=this;vm.selectRecord=-1,vm.isDetailsValid=!0,vm.allRolesSelected="",vm.importerhasID="",vm.resetCollapsed=!1,vm.updateSummary=0,vm.showSummary=!1,vm.addressList=[],vm.isIn="",vm.isInternal=!1,vm.requiredFlag=!0,vm.isFocus=!1,vm.htIndxList=vm.companyService.helpTextSequences,vm.columnDef=[{label:"COMPANY_NAME",binding:"companyName",width:"20"},{label:"CITY",binding:"city",width:"20"},{label:"COUNTRY",binding:"countryDisplay",width:"20"},{label:"ROLES",binding:"roleConcat",width:"20"},{label:"IMPORTERID",binding:"importerID",width:"20"}],vm.$onInit=function(){vm.addressList=vm.addresses,vm.allRolesSelected=vm.isAllRolesSelected(),vm.importerhasID=vm.isImporterHasID(),updateRolesConcat()},vm.$onChanges=function(changes){changes.addresses&&changes.addresses.currentValue&&(vm.addressList=changes.addresses.currentValue,vm.allRolesSelected=vm.isAllRolesSelected(),vm.importerhasID=vm.isImporterHasID(),updateRolesConcat(),vm.importerhasID&&" "!=vm.importerhasID||(vm.isDetailsValid=!0),vm.updateErrorSummaryState()),changes.showErrorSummary&&(vm.showSummary=changes.showErrorSummary.currentValue,vm.updateErrorSummaryState()),changes.errorSummaryUpdate&&vm.updateErrorSummaryState(),changes.userType&&(vm.isIn=changes.userType.currentValue,vm.isIn===INTERNAL_TYPE?vm.isInternal=!0:vm.isInternal=!1),changes.isFileLoaded&&changes.isFileLoaded.currentValue&&(vm.requiredFlag=!1,vm.isDetailsValid=!0)},vm.$postLink=function(){vm.isInternal||vm.addAddress()},vm.deleteAddress=function(aID){var idx=vm.addressList.indexOf($filter("filter")(vm.addressList,{addressID:aID},!0)[0]);return vm.isImpCompanyNameUsed({companyName:vm.addressList[idx].companyName})?void(vm.addressList[idx].inUse=!0):(vm.addressList[idx].inUse=!1,vm.addressList.splice(idx,1),vm.onUpdate({newList:vm.addressList}),vm.hasAddrImpCompanyName({addressList:vm.addressList}),vm.selectRecord=0,vm.isDetailsValid=!0,vm.allRolesSelected=vm.isAllRolesSelected(),vm.importerhasID=vm.isImporterHasID(),vm.requiredFlag=!1,vm.resetCollapsed=!vm.resetCollapsed,vm.updateErrorSummaryState(),void vm.addressListForm.$setPristine())},vm.addAddress=function(){var defaultAddress=vm.getNewAddress();defaultAddress.focusCompanyName=vm.isFocus,defaultAddress.inUse=!1,vm.addressList.push(defaultAddress),vm.isDetailsValid=!0,vm.selectRecord=vm.addressList.length-1,vm.isDetailsValid=!1},vm.setFocus=function(){vm.isFocus=!0},vm.cancelFocus=function(){vm.isFocus=!1},vm.disableAddAddress=function(){return!vm.isDetailsValid},vm.setValid=function(detailValid){vm.isDetailsValid=detailValid},vm.onUpdateAddressRecord=function(address){var idx=vm.addressList.indexOf($filter("filter")(vm.addressList,{addressID:address.addressID},!0)[0]);vm.addressList[idx]=angular.copy(address),vm.allRolesSelected=vm.isAllRolesSelected(),vm.importerhasID=vm.isImporterHasID(),vm.importerhasID&&" "!=vm.importerhasID||(vm.isDetailsValid=!vm.isDetailsValid),vm.requiredFlag=!1,vm.resetCollapsed=!vm.resetCollapsed,vm.hasAddrImpCompanyName({addressList:vm.addressList}),vm.addressListForm.$setPristine()},vm.isREPRoleSelected=function(roleToCheck,recordID){var rolesSelected=0;if(!vm.addressList)return!1;for(var i=0;i<vm.addressList.length;i++)if(1==vm.addressList[i].addressRole[roleToCheck]&&(vm.addressList[i].addressID!==recordID&&(rolesSelected+=1),rolesSelected>0))return!0;return!1},vm.showError=function(){return!vm.isAllRolesSelected()},vm.updateErrorSummaryState=function(){vm.updateSummary=vm.updateSummary+1},vm.isAllRolesSelected=function(){var manuSelected=!1,mailSelected=!1,billSelected=!1;if(!vm.addressList)return!1;for(var i=(vm.companyService.createAddressRole(),0);i<vm.addressList.length;i++){var obj=vm.addressList[i].addressRole;for(var key in obj){var attrName=key,attrValue=obj[key];attrValue&&("manufacturer"===attrName&&(manuSelected=!0),"mailing"===attrName&&(mailSelected=!0),"billing"===attrName&&(billSelected=!0))}}return!!(manuSelected&&mailSelected&&billSelected)},vm.isImporterHasID=function(){if(!vm.addressList)return!1;if(!vm.isInternal)return!0;for(var i=0;i<vm.addressList.length;i++)if(vm.addressList[i].addressRole.importer&&!vm.addressList[i].importerID)return vm.importerhasID=" ",vm.selectRecord=i,vm.isDetailsValid=!1," ";return vm.importerhasID=!0,!0}}angular.module("addressList").component("cmpCompanyAddressList",{templateUrl:"app/scripts/components/addressList/tpl-company-address-list_20200909_1525.html",bindings:{addresses:"<",onUpdate:"&",getNewAddress:"&",isAmend:"<",isFileLoaded:"<",companyService:"<",showErrorSummary:"<",errorSummaryUpdate:"<",updateErrorSummary:"&",userType:"<",hasAddrImpCompanyName:"&",isImpCompanyNameUsed:"&",inUseFlag:"<",checkImpCompanyInUsed:"&"},controller:addressListCtrl,controllerAs:"addressListCtrl"}),addressListCtrl.$inject=["$filter","CompanyService","CANADA","INTERNAL_TYPE","EXTERNAL_TYPE"]}(),function(){"use strict";angular.module("fileIO",[])}(),function(){"use strict";function ngFileSelect(hpfbFileReader){function link(scope,element,attrs){scope.rootTag=attrs.rootTag,element.bind("change",function(e){scope.file=(e.srcElement||e.target).files[0],hpfbFileReader.readAsDataText(scope.file,scope).then(function(result){scope.hpfbFileSelect({fileContent:result})})})}var directive={link:link,restrict:"A",scope:{hpfbFileSelect:"&"}};return directive}angular.module("fileIO").directive("hpfbFileSelect",ngFileSelect),ngFileSelect.$inject=["hpfbFileProcessing"]}(),function(){"use strict";function FileSelectController(hpfbFileProcessing){var vm=this;vm.fileTypes=".xml, .hcsc",vm.modelCallback=function(fileContent){if(vm.status="",fileContent&&fileContent.jsonResult){var versionArray=fileContent.jsonResult[vm.rootElem].software_version.split(".");vm.versionExpected&&vm.versionExpected!==versionArray[0]?(fileContent=null,vm.status="MSG_ERR_FILE_VERSION"):(vm.status=fileContent.messages,vm.updateModelRoot({fileContent:fileContent}))}else vm.status=fileContent.messages,vm.updateModelRoot({fileContent:fileContent});angular.element(fileLoad).trigger("focus")}}angular.module("fileIO").component("hpfbFileSelect",{templateUrl:"app/scripts/components/fileIO/fileSelect_20200909_1525.html",controller:FileSelectController,bindings:{updateModelRoot:"&",rootElem:"@",versionExpected:"@"}}),FileSelectController.$inject=["hpfbFileProcessing"]}(),function(){"use strict";function FileWriteController(hpfbFileProcessing){function _generateFile(){"JSON"===vm.saveType.toUpperCase()?hpfbFileProcessing.writeAsJson(vm.jsonToSave,vm.fileName,vm.rootTag):"XML"===vm.saveType.toUpperCase()&&hpfbFileProcessing.writeAsXml(vm.jsonToSave,vm.fileName,vm.rootTag)}function _init(){vm.buttonDisabled?"true"===vm.buttonDisabled.toLowerCase()?vm.buttonDisabled=!0:"false"===vm.buttonDisabled.toLowerCase()?vm.buttonDisabled=!1:vm.buttonDisabled=!1:vm.buttonDisabled=!1}var vm=this;vm.$onInit=_init,vm.generate=_generateFile}angular.module("fileIO").component("hpfbFileSave",{templateUrl:"app/scripts/components/fileIO/fileSave_20200909_1525.html",controller:FileWriteController,bindings:{jsonToSave:"<",rootTag:"@",saveType:"@",buttonLabel:"@",buttonDisabled:"@"}}),FileWriteController.$inject=["hpfbFileProcessing"]}(),function(){"use strict";function fileReader($q){function onLoad(reader,deferred,scope,file){return function(){scope.$apply(function(){if(file){var splitFile=file.name.split("."),fileType=splitFile[splitFile.length-1];fileType.toLowerCase()==draft_file_type?(convertToJSONObjects(reader,scope),checkRootTagMatch(reader,scope)):"xml"===fileType.toLowerCase()?(convertXMLToJSONObjects(reader,scope),checkRootTagMatch(reader,scope)):(convertResult.parseResult=null,convertResult.messages=msg_err_fileType,reader.parseResult=convertResult)}deferred.resolve(reader.parseResult)})}}function onError(reader,deferred,scope){return function(){scope.$apply(function(){deferred.reject(msg_err_load)})}}function getReader(deferred,scope,file){var reader=new FileReader;return reader.onload=onLoad(reader,deferred,scope,file),reader.onError=onError(reader,deferred,scope),reader.parseResult=null,reader}function readAsDataText(file,scope){var deferred=$q.defer(),reader=getReader(deferred,scope,file);return file?reader.readAsText(file):(reader.parseResult=convertResult,reader.parseResult.messages="",reader.parseResult.jsonResult=null,deferred.resolve(reader.parseResult)),deferred.promise}function convertToJSONObjects(reader,scope){try{convertResult.jsonResult=JSON.parse(reader.result),convertResult.jsonResult[scope.rootTag].importFileType=draft_file_type,convertResult.messages=msg_success,reader.parseResult=convertResult}catch(e){convertResult.jsonResult=null,convertResult.messages=msg_err_jsonparse,reader.parseResult=convertResult;
}}function convertXMLToJSONObjects(reader,scope){var xmlConfig={escapeMode:!0,emptyNodeForm:"text",useDoubleQuotes:!0},xmlConverter=new X2JS(xmlConfig);convertResult.jsonResult=xmlConverter.xml_str2json(reader.result),convertResult.jsonResult&&convertResult.jsonResult[scope.rootTag]?(convertResult.messages=msg_success,convertResult.jsonResult[scope.rootTag].importFileType="xml"):convertResult.messages=msg_err_xmlparse,reader.parseResult=convertResult}function convertJSONObjectsToXML(jsonObj){var xmlConfig={escapeMode:!0,emptyNodeForm:"text",useDoubleQuotes:!0},jsonConverter=new X2JS(xmlConfig),xmlResult=null;return xmlResult=jsonConverter.json2xml_str(jsonObj)}function checkRootTagMatch(reader,scope){scope.rootTag&&reader.parseResult&&reader.parseResult.jsonResult&&(reader.parseResult.jsonResult[scope.rootTag]||(reader.parseResult.jsonResult=null,reader.parseResult.messages=msg_err_formType))}function jsonToFile(jsonObj,fileName,rootTag){if(jsonObj){var makeStrSave=JSON.stringify(jsonObj),blob=new Blob([makeStrSave],{type:"text/plain;charset=utf-8"});fileName?fileName+="."+draft_file_type:fileName="hpfbDraft."+draft_file_type,saveAs(blob,fileName)}}function xmlToFile(jsonObj,fileName,rootTag,xslName){if(jsonObj){var xmlResult=convertJSONObjectsToXML(jsonObj);xmlResult=xslName?'<?xml version="1.0" encoding="UTF-8"?><?xml-stylesheet  type="text/xsl" href="'+xslName+'"?>'+xmlResult:'<?xml version="1.0" encoding="UTF-8"?><?xml-stylesheet  type="text/xsl" href="REP_Combined.xsl"?>'+xmlResult;var blob=new Blob([xmlResult],{type:"text/plain;charset=utf-8"});fileName?fileName+=".xml":fileName="hpfbXML.xml",saveAs(blob,fileName)}}var msg_success="MSG_SUCCESS_LOAD",msg_err_jsonparse="MSG_ERR_JSONPARSE",msg_err_xmlparse="MSG_ERR_XMLPARSE",msg_err_load="MSG_ERR_FILE_LOAD",msg_err_fileType="MSG_ERR_FILE_TYPE",msg_err_formType="MSG_ERR_FORM_TYPE",draft_file_type="hcsc",convertResult={jsonResult:"",messages:""},service={readAsDataText:readAsDataText,writeAsJson:jsonToFile,writeAsXml:xmlToFile};return service}angular.module("fileIO").factory("hpfbFileProcessing",fileReader),fileReader.$inject=["$q"]}(),function(){"use strict";angular.module("expandingTable",[])}(),function(){"use strict";function expandingTableCtrl($filter,$scope){function _setNumberColumns(){vm.disableErrorCol&&(vm.numberCols=vm.numberCols+1)}function _recalculateColumnDefs(colDefs,numCols){var caretWidth=2,errorWidth=5,totalWidth=caretWidth+errorWidth,toSubtract=totalWidth/numCols,result=[];if(vm.disableErrorCol)return colDefs;for(var i=0;i<numCols;i++){var oneDef=angular.copy(colDefs[i]);oneDef.width>toSubtract&&(oneDef.width=oneDef.width-toSubtract),result.push(oneDef)}return result}function updateTableRow(textIndex){var selectIndex=parseInt(textIndex);selectIndex>=0&&vm.selectTableRow(selectIndex)}function _createArray(arraySize,initialVal){for(var anArray=[],i=0;i<arraySize;i++)anArray.push(initialVal);return anArray}var vm=this;vm.focused=!1,vm.columnDefinitions={},vm.disableExpand=!1,vm.tableRowExpanded=!1,vm.tableRowIndexCurrExpanded="",vm.tableRowIndexPrevExpanded="",vm.numberCols=1,vm.disableErrorCol=!1,vm.dayDataCollapse=_createArray(0,!0),vm.formName="expandTblCtrl.transcludeForm",vm.$onInit=function(){vm.listItems&&(vm.dayDataCollapse=_createArray(vm.listItems.length,!0))},vm.getExpandedState=function(row){return!(row!==vm.tableRowIndexCurrExpanded&&vm.dayDataCollapse[row]&&(!vm.transcludeForm[row]||vm.transcludeForm[row].$valid))},vm.$onChanges=function(changes){if(changes.listItems&&(vm.listItems?vm.dayDataCollapse=_createArray(vm.listItems.length,!0):vm.dayDataCollapse=_createArray(0,!0),vm.resetTableRow()),changes.tname&&changes.tname.currentValue&&(vm.formName=changes.tname.currentValue),changes.resetToCollapsed&&(vm.resetTableRow(),changes.selectRecord||updateTableRow(vm.selectRecord)),changes.selectRecord){var selectIndex=parseInt(changes.selectRecord.currentValue);selectIndex>=0?vm.selectTableRow(selectIndex):vm.resetTableRow()}changes.disableSelection&&(vm.disableExpand=changes.disableSelection.currentValue),changes.columnDef&&(vm.numberCols=changes.columnDef.currentValue.length,vm.columnDefinitions=_recalculateColumnDefs(changes.columnDef.currentValue,vm.numberCols),_setNumberColumns()),changes.disableErrColumn&&(vm.disableErrorCol=changes.disableErrColumn.currentValue,vm.numberCols=vm.columnDef.length,vm.disableErrorCol=!0,_setNumberColumns())},vm.formInError=function(aForm){return aForm&&aForm.$invalid?"Y":"N"},vm.deletedRow=function(){vm.tableRowExpanded=!1,vm.tableRowIndexCurrExpanded=""},vm.resetTableRow=function(){vm.tableRowIndexPrevExpanded="",vm.tableRowExpanded=!1,vm.tableRowIndexCurrExpanded="",vm.listItems?vm.dayDataCollapse=_createArray(vm.listItems.length,!0):_createArray(0,!0)},vm.dayDataCollapseFn=function(){for(var i=0;vm.listItems.length-1;i+=1)vm.dayDataCollapse.append("true")},vm.selectTableRow=function(index){vm.disableExpand||("undefined"===vm.dayDataCollapse?vm.dayDataCollapse=vm.dayDataCollapseFn():vm.tableRowExpanded===!1&&""===vm.tableRowIndexCurrExpanded?(vm.tableRowIndexPrevExpanded="",vm.tableRowExpanded=!0,vm.tableRowIndexCurrExpanded=index,vm.dayDataCollapse[index]=!1):vm.tableRowExpanded===!0&&(vm.tableRowIndexCurrExpanded===index?(vm.tableRowExpanded=!1,vm.tableRowIndexCurrExpanded="",vm.dayDataCollapse[index]=!0):(vm.tableRowIndexPrevExpanded=vm.tableRowIndexCurrExpanded,vm.tableRowIndexCurrExpanded=index,vm.dayDataCollapse[vm.tableRowIndexPrevExpanded]=!0,vm.dayDataCollapse[vm.tableRowIndexCurrExpanded]=!1)))},vm.isRequiredRecordSet=function(){return!(!vm.isRequiredRecord||vm.isInternal)},vm.isRecordShowsOutside=function(row){return vm.isInternal?!vm.dayDataCollapse[row]:(vm.transcludeForm[row]&&vm.transcludeForm[row].$invalid&&(vm.dayDataCollapse[row]=!1),!(vm.dayDataCollapse[row]&&(!vm.transcludeForm[row]||vm.transcludeForm[row].$valid))||vm.isRequiredRecordSet())},vm.isRecordShowsInside=function(row){return!vm.isInternal||!(vm.dayDataCollapse[row]&&vm.transcludeForm[row].$valid)}}angular.module("expandingTable").component("cmpExpandingTable",{templateUrl:"app/scripts/components/expandingTable/tpl-expanding-table_20200909_1525.html",controller:expandingTableCtrl,controllerAs:"expandTblCtrl",transclude:!0,bindings:{title:"@",preId:"@",listItems:"<",columnDef:"<",disableSelection:"<",isRequiredRecord:"<",isInternal:"<",selectRecord:"<",resetToCollapsed:"<",disableErrColumn:"@",tname:"@"}}),expandingTableCtrl.$inject=["$filter","$scope"]}(),function(){"use strict";angular.module("addressRole",["hpfbConstants","alertModule"])}(),function(){"use strict";function addressRoleCtrl(ENGLISH,$scope,$translate){function checkAllControlsForDuplicates(){vm.roleForm&&(vm.checkForDuplicates(vm.roleForm.mailing,"mailing"),vm.checkForDuplicates(vm.roleForm.billing,"billing"),vm.checkForDuplicates(vm.roleForm.repPrimary,"repPrimary"),vm.checkForDuplicates(vm.roleForm.manufacturer,"manufacturer"),vm.updateErrorSummary())}function isDuplicateSelected(toCheck){var obj=vm.roleModel;for(var key in obj){var attrName=key,attrValue=obj[key];if(attrName==toCheck)return!!attrValue&&vm.alreadySelected({roleName:attrName})}return!1}function _setIdNames(){var scopeId="_"+$scope.$id;vm.fieldsetId="fs_roleMissing_"+$scope.$id,vm.roleMissingId="roleMissing_"+$scope.$id,vm.contactRoleMissingId="contactRoleMissing_"+$scope.$id,vm.chkManuId="manufacturer"+scopeId,vm.chkMailId="mailing"+scopeId,vm.chkBillId="billing"+scopeId,vm.chkManuContactId="contactManufacturer"+scopeId,vm.chkMailContactId="contactMailing"+scopeId,vm.chkBillContactId="contactBilling"+scopeId,vm.chkImpId="chk-importer"+scopeId,vm.chkRePrimId="repPrimary"+scopeId,vm.chkRepSecId="repSecondary"+scopeId}var vm=this;vm.isReq=!0,vm.isSelected="",vm.isEditable=!0,vm.inUser=!1,vm.alerts=[!1,!1],vm.lang=$translate.proposedLanguage()||$translate.use(),vm.showCMError=!1,vm.duplicateRole=[{type:"duplicateRole",displayAlias:"TYPE_DUPLICATEROLE"}],vm.impCompanyInUse=[{type:"impCompanyInUse",displayAlias:"COMPANY_IN_USE"}],vm.roleModel={manufacturer:!1,mailing:!1,billing:!1,importer:!1,repPrimary:!1,repSecondary:!1},vm.$onInit=function(){vm.record&&(vm.roleModel=vm.record.addressRole,vm.oneSelected()),_setIdNames()},vm.$onChanges=function(changes){changes.record&&(vm.roleModel=changes.record.currentValue.addressRole,vm.oneSelected(),checkAllControlsForDuplicates()),changes.isAmend&&(vm.isEditable=changes.isAmend.currentValue)},vm.updateImporterState=function(ctrl,toCheck){vm.oneSelected(ctrl,toCheck),vm.importerUpdated({state:vm.roleModel.importer}),checkAllControlsForDuplicates()},vm.updateOtherState=function(ctrl,toCheck){vm.oneSelected(ctrl,toCheck);vm.deselectImporter({state:vm.roleModel.manufacturer})},vm.oneSelected=function(ctrl,toCheck){var obj=vm.roleModel;"importer"!==toCheck&&vm.checkForDuplicates(ctrl,toCheck);for(var key in obj){var attrValue=obj[key];if(attrValue===!0)return vm.isSelected=!0,vm.updateErrorSummary(),!0}return vm.isSelected="",vm.updateErrorSummary(),!1},vm.checkForDuplicates=function(ctrl,toCheck){if(ctrl){var isDup=isDuplicateSelected(toCheck);ctrl.$setValidity("duplicateRole",!isDup)}},vm.showError=function(ctrl){return!!(ctrl.$invalid||vm.showErrors()&&ctrl.$invalid)},vm.showErrorMissing=function(){return!!(vm.roleForm.$touched&&!vm.isSelected||vm.showErrors()&&!vm.isSelected)},vm.closeAlert=function(value){angular.isUndefined(value)||value<vm.alerts.length&&(vm.alerts[value]=!1)},vm.addInstruct=function(value){angular.isUndefined(value)||value<vm.alerts.length&&(vm.alerts[value]=!0)},vm.isFrench=function(){return vm.lang!==ENGLISH}}angular.module("addressRole").component("cmpAddressRole",{templateUrl:"app/scripts/components/addressRole/tpl-address-role_20200909_1525.html",controller:addressRoleCtrl,controllerAs:"ar",bindings:{record:"<",onUpdate:"&",showErrors:"&",isContact:"<",alreadySelected:"&",isAmend:"<",htIndxList:"<",legendText:"@",importerUpdated:"&",deselectImporter:"&",updateErrorSummary:"&",inUseFlag:"<"}}),addressRoleCtrl.$inject=["ENGLISH","$scope","$translate"]}(),function(){"use strict";angular.module("contactModule",["dataLists","hpfbConstants","errorMessageModule"])}(),function(){"use strict";function contactCtrl(getContactLists,ENGLISH,FRENCH,$scope){function _setIdNames(){var scopeId=vm.fldId+"_"+$scope.$id;vm.firstNameId="firstName"+scopeId,vm.lastNameId="lastName"+scopeId,vm.langCorrespondId="langCorrespond"+scopeId,vm.jobTitleId="jobTitle"+scopeId,vm.faxId="fax_number"+scopeId,vm.phoneNumberId="phoneNumber"+scopeId,vm.phoneExtId="phoneExt"+scopeId,vm.contactEmailId="contactEmail"+scopeId,vm.routingIdentifierId="routing_id"+scopeId,vm.impCompanyNameId="imp_company_name"+scopeId}var vm=this;vm.isEditable=!0,vm.ngModelOptSetting={updateOn:"blur"},vm.langCorresppond=[ENGLISH,FRENCH],vm.faxRequired=!1,vm.phoneReg=/^([0-9]*$)/,vm.emailReg=/^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$/,vm.contactModel={givenName:"",surname:"",initials:"",title:"",language:"",phone:"",phoneExt:"",fax:"",email:"",routingId:"",impCompanyName:""},vm.inputModelOptions={updateOn:"blur"},vm.fldId="",vm.requiredOnly=[{type:"required",displayAlias:"MSG_ERR_MAND"}],vm.emailError=[{type:"required",displayAlias:"MSG_ERR_MAND"},{type:"pattern",displayAlias:"MSG_ERR_EMAIL_FORMAT"}],vm.phoneError=[{type:"required",displayAlias:"MSG_ERR_MAND"},{type:"pattern",displayAlias:"MSG_ERR_PHONE_FORMAT"}],vm.faxError=[{type:"required",displayAlias:"MSG_ERR_MAND"},{type:"pattern",displayAlias:"MSG_ERR_FAX_FORMAT"}],vm.routingIdError=[{type:"required",displayAlias:"MSG_ERR_MAND"},{type:"pattern",displayAlias:"TYPE_PATTERN"}],vm.addrImpCompanyNameError=[{typs:"required",displayAlias:"MSG_ERR_MAND"}],vm.$onInit=function(){vm.langList=[ENGLISH,FRENCH],_setIdNames()},vm.$onChanges=function(changes){changes.contactRecord&&(vm.contactModel=changes.contactRecord.currentValue),changes.isAmend&&(vm.isEditable=changes.isAmend.currentValue),changes.faxMandatory&&(vm.faxRequired=changes.faxMandatory.currentValue),changes.fieldSuffix&&(vm.fldId=changes.fieldSuffix.currentValue,vm.fldId||(vm.fldId=""))},vm.showError=function(ctrl){return!!ctrl&&!!(ctrl.$invalid&&ctrl.$touched||vm.showErrors()&&ctrl.$invalid)},vm.showRoutingIdErr=function(){return vm.contactForm[vm.routingIdentifierId].$invalid},vm.hasAddrImpCompany=function(){return vm.addrImpCompanyName.length>0},$scope.$watch("contCtrl.contactForm.$error",function(){vm.updateErrorSummary()},!0)}angular.module("contactModule").component("cmpContactDetails",{templateUrl:"app/scripts/components/contactDetails/tpl-contact-details_20200909_1525.html",controller:contactCtrl,controllerAs:"contCtrl",bindings:{contactRecord:"<",onUpdate:"&",isAmend:"<",showErrors:"&",faxMandatory:"@",updateErrorSummary:"&",fieldSuffix:"<",routingIdIndex:"<",showRoutingId:"&",showAddrImpCompanyName:"&",addrImpCompanyName:"<",isContact:"<"}}),contactCtrl.$inject=["getContactLists","ENGLISH","FRENCH","$scope"]}(),function(){"use strict";angular.module("applicationInfo",["numberFormat","hpfbConstants","errorSummaryModule","errorMessageModule"])}(),function(){"use strict";function ApplInfoCtrl(NEW_TYPE,AMEND_TYPE,APPROVED_TYPE,EXTERNAL_TYPE,$scope,$translate){function _setConfigItems(configJson){vm.fieldIdLabel=configJson.label,vm.fieldLength=configJson.fieldLength,vm.tagName=configJson.tagName,configJson.minFieldLength?vm.minFieldLength=configJson.minFieldLength:vm.minFieldLength=configJson.fieldLength,vm.errorMsg=configJson.errorMsg,configJson.minErrorMsg?vm.minErrorMsg=configJson.minErrorMsg:vm.minErrorMsg=configJson.errorMsg,configJson.isNumber&&(vm.isNumber=configJson.isNumber),vm.isDossier=configJson.isDossier,angular.isUndefined(vm.isDossier)&&(vm.isDossier=!1)}function _setIdNames(){var scopeId="_"+$scope.$id;vm.fieldId="fieldId"+scopeId,vm.reasonAmend="reason_amend"+scopeId,vm.compId="company_id"+scopeId,vm.dossierId="dossier_id"+scopeId}var vm=this;vm.applTypes=[NEW_TYPE,AMEND_TYPE,APPROVED_TYPE],vm.formType=EXTERNAL_TYPE,vm.infoModel={applicationType:"NEW",applicationTypeText:"",enrolmentVersion:"0.0",dateSaved:"",reasonAmend:""},vm.fieldIdLabel="",vm.minFieldLength="",vm.isNumber=!1,vm.fieldLength="",vm.tagName="fieldId",vm.setAsIncomplete=!0,vm.errorMsg="",vm.maxErrorMsg="",vm.isDossier=!1,vm.isNumber=!1,vm.isAmend=!1,vm.requiredOnly=[{type:"required",displayAlias:"MSG_ERR_MAND"}],vm.min6Error=[{type:"required",displayAlias:"MSG_ERR_MAND"},{type:"minlength",displayAlias:"MSG_LENGTH_MIN5"}],vm.min7Error=[{type:"required",displayAlias:"MSG_ERR_MAND"},{type:"minlength",displayAlias:"MSG_LENGTH_MIN5"},{type:"pattern",displayAlias:"MSG_FORMAT_CHAR_6DIGITS"}],vm.$onInit=function(){vm.infoModel.applicationTypeText=$translate.instant(vm.infoModel.applicationType),_setIdNames()},vm.$onChanges=function(changes){changes.userType&&(vm.formType=changes.userType.currentValue),changes.record&&(vm.infoModel=changes.record.currentValue,vm.infoModel.applicationType===AMEND_TYPE?vm.isAmend=!0:vm.infoModel.applicationType!==APPROVED_TYPE||vm.isEmpty(vm.infoModel.reasonAmend)?vm.isAmend=!1:vm.isAmend=!0),changes.isIncomplete&&(vm.setAsIncomplete=changes.isIncomplete.currentValue),changes.configureIdField&&_setConfigItems(changes.configureIdField.currentValue),changes.showErrorSummary&&(vm.showSummary=changes.showErrorSummary.currentValue,vm.updateErrorSummaryState())},vm.showAmendMsg=function(){return!!vm.record&&vm.record.applicationType===AMEND_TYPE},vm.showAmendButton=function(){return!vm.isHide},vm.isExtern=function(){return vm.formType===EXTERNAL_TYPE},vm.setAmendState=function(){vm.setType({type:AMEND_TYPE}),vm.isAmend=!0},vm.isEmpty=function(aValue){return"undefined"==typeof aValue||null===aValue||""===aValue},vm.showError=function(ctrl){return!!ctrl&&(ctrl.$invalid&&ctrl.$touched||vm.showSummary&&ctrl.$invalid)}}angular.module("applicationInfo").component("cmpApplicationInfo",{templateUrl:"app/scripts/components/applicationInfo/tpl-application-info_20200909_1525.html",controller:ApplInfoCtrl,controllerAs:"infoCtrl",bindings:{record:"<",userType:"<",isIncomplete:"<",isHide:"<",configureIdField:"<",setType:"&"}}),ApplInfoCtrl.$inject=["NEW_TYPE","AMEND_TYPE","APPROVED_TYPE","EXTERNAL_TYPE","$scope","$translate"]}(),function(){"use strict";angular.module("companyMain",["companyService","applicationInfoService","companyHelpText","ngMessages","ngAria","addressList","contactList2","fileIO","ngSanitize","applicationInfo","filterLists","hpfbConstants","ui.bootstrap","errorSummaryModule","alertModule","focus-if"])}(),function(){"use strict";function companyMainCtrl(CompanyService,ApplicationInfoService,hpfbFileProcessing,$filter,$scope,INTERNAL_TYPE,EXTERNAL_TYPE,APPROVED_TYPE,AMEND_TYPE,ENGLISH,getRoleLists,$translate,$anchorScroll,$location){function goToErrorSummary(){var masterError=angular.element(document.querySelector("#master-error"));masterError&&($location.hash("master-error"),$anchorScroll())}function _createFilename(){var draft_prefix="DRAFTREPCO",final_prefix="HCREPCO",filename="",separator="-";return filename=vm.userType===INTERNAL_TYPE?final_prefix:draft_prefix,vm.company.companyId&&(filename=filename+separator+vm.company.companyId),vm.company.enrolmentVersion&&(filename=filename+separator+vm.company.enrolmentVersion),filename=filename.replace(".",separator),filename.toLowerCase()}function _transformFile(){return updateDate(),vm.isExtern()?vm.company.enrolmentVersion=vm.applicationInfoService.incrementMinorVersion(vm.company.enrolmentVersion):vm.companyEnrolForm.$pristine||(vm.company.enrolmentVersion=vm.applicationInfoService.incrementMajorVersion(vm.company.enrolmentVersion),vm.company.applicationType=ApplicationInfoService.prototype.getApprovedType()),vm.companyService.transformToFileObj(vm.company)}function disableXMLSave(){var isApprovedExternal=vm.company.applicationType===vm.companyService.getApprovedType()&&vm.isExtern();vm.disableDraftButton=isApprovedExternal,vm.disableXML=vm.companyEnrolForm.$invalid||isApprovedExternal}function _setComplete(){vm.isIncomplete=!vm.company.companyId}function _loadFileContent(fileContent){if(fileContent){vm.companyService=new CompanyService;var resultJson=fileContent.jsonResult;resultJson&&(vm.companyService.transformFromFileObj(resultJson),vm.company={},angular.extend(vm.company,vm.companyService.getModelInfo()),vm.hasAddrImpCompanyName(vm.company.addressList),_setComplete(),vm.setAmend(),vm.isFileLoaded=!0,vm.showErrorSummary=!1,vm.companyEnrolForm.$setDirty(),vm.showAmendNote=vm.company.applicationType===vm.companyService.getApprovedType()&&vm.isExtern(),vm.company.applicationTypeText=$translate.instant(vm.company.applicationType)),disableXMLSave()}}function updateDate(){vm.company&&(vm.company.dateSaved=vm.applicationInfoService.getTodayDate())}function _setIdNames(){var scopeId="_"+$scope.$id;vm.formId="company_form"+scopeId,vm.privacyStatementID="privacy_statement"+scopeId,vm.typeId="dossier_type"+scopeId}var vm=this;vm.userType=EXTERNAL_TYPE,vm.isIncomplete=!0,vm.formAmendType=!1,vm.saveXMLLabel="SAVE_DRAFT",vm.updateValues=0,vm.applicationInfoService=new ApplicationInfoService,vm.showContent=_loadFileContent,vm.disableXML=!0,vm.disableDraftButton=!1,vm.showAmendNote=!1,vm.configCompany={label:"COMPANY_ID",minFieldLength:"5",fieldLength:"6",tagName:"companyId",minErrorMsg:"MSG_LENGTH_MIN5",errorMsg:"MSG_LENGTH_6NUM"},vm.companyService=new CompanyService,vm.rootTag="",vm.companyService&&(vm.rootTag=vm.companyService.getRootTag()),vm.applTypes=vm.companyService.getApplicationTypes(),vm.formTypeList=getRoleLists.getFormTypes(),vm.company=vm.companyService.getModelInfo(),vm.addressList=[],vm.addrImpCompanyName=[],vm.indexList=vm.companyService.helpTextSequences,vm.alerts=[!1,!1,!1,!1,!1,!1],vm.updateSummary=!1,vm.showErrorSummary=!1,vm.privacyStat=!1,vm.isFileLoaded=!1,vm.savePressed=!1,vm.focusSummary=0,vm.lang=$translate.proposedLanguage()||$translate.use(),vm.requiredOnlyError=[{type:"required",displayAlias:"MSG_ERR_MAND"}],vm.exclusions={"contactRec.contactRecForm":"true","addressRec.addressRecForm":"true"},vm.alias={contactRolesValid:{type:"element",target:"contactList"},addressRolesValid:{type:"element",target:"addressList"},importerIdValid:{type:"element",target:"addressList"},contactImporterVaild:{type:"element",target:"contactList"}},vm.initUser=function(id){},vm.$onInit=function(){_setIdNames(),vm.alerts=[!1,!1,!1,!1,!1,!1],vm.updateSummary=!1,vm.showErrorSummary=!1,vm.savePressed=!1},vm.$onChanges=function(changes){changes.formType&&(vm.userType=changes.formType.currentValue,vm.userType==INTERNAL_TYPE?vm.saveXMLLabel="APPROVE_FINAL":vm.saveXMLLabel="SAVE_DRAFT")},vm.setAmend=function(){vm.formAmendType=vm.company.applicationType===AMEND_TYPE},vm.saveJson=function(){var writeResult=_transformFile();hpfbFileProcessing.writeAsJson(writeResult,_createFilename(),vm.rootTag)},vm.saveXML=function(){if(vm.companyEnrolForm.$invalid)vm.showErrorSummary=!0,vm.updateErrorSummary(),vm.savePressed=!0,vm.focusSummary++,goToErrorSummary();else if(vm.companyEnrolForm["addressListCtrl.addressListForm"].$pristine&&vm.companyEnrolForm["contactListCtrl.contactListForm"].$pristine){var writeResult=_transformFile();hpfbFileProcessing.writeAsXml(writeResult,_createFilename(),vm.rootTag,vm.companyService.getXSLFileName()),vm.showErrorSummary=!1,vm.companyEnrolForm.$setPristine(),vm.savePressed=!1}else vm.lang===ENGLISH?alert("Please save the unsaved input data before generating XML file."):alert("Veuillez sauvegarder les données d'entrée non enregistrées avant de générer le fichier XML.")},$scope.$watch("main.companyEnrolForm.$error",function(){vm.updateErrorSummary()},!0),vm.setApplType=function(type){vm.company.applicationType=type,vm.company.applicationTypeText=$translate.instant(vm.company.applicationType),disableXMLSave(),vm.setAmend(),vm.company.reasonAmend=""},vm.onUpdateAddressList=function(newList){vm.company.addressList=newList},vm.getNewAddress=function(){return vm.companyService.createAddressRecord()},vm.getNewContact=function(){return vm.companyService.createContactRecord()},vm.updateAddressRecord=function(address){if(address){var idx=vm.company.addressList.indexOf($filter("filter")(vm.company.addressList,{addressID:address.addressID},!0)[0]);vm.company.addressList[idx]=address;var temp=vm.company.addressList;vm.company.addressList=[],vm.company.addressList=temp}},vm.hasAddrImpCompanyName=function(addressList){vm.addrImpCompanyName=[];for(var i=0;i<addressList.length;i++)addressList[i].addressRole.importer&&vm.addrImpCompanyName.push(addressList[i].companyName);return vm.addrImpCompanyName},vm.isImpCompanyNameUsed=function(companyName){for(var i=0;i<vm.company.contactList.length;i++)if(""!==companyName&&companyName===vm.company.contactList[i].impCompanyName)return!0;return!1},vm.onUpdateContactList=function(newList){vm.company.contactList=newList},vm.isExtern=function(){return vm.userType===EXTERNAL_TYPE},vm.closeAlert=function(value){angular.isUndefined(value)||value<vm.alerts.length&&(vm.alerts[value]=!1)},vm.addInstruct=function(value){angular.isUndefined(value)||value<vm.alerts.length&&(vm.alerts[value]=!0)},vm.updateErrorSummary=function(){vm.updateSummary=vm.updateSummary+1},vm.isFrench=function(){return vm.lang!==ENGLISH},vm.temp=function(){console.log($scope)},vm.showError=function(ctrl){return!!vm.showErrorSummary||!(!ctrl||ctrl.$untouched)&&(ctrl.$invalid&&ctrl.$touched||vm.showErrorSummary&&ctrl.$invalid)}}angular.module("companyMain").component("cmpCompanyMain",{templateUrl:"app/scripts/components/companyMain/tpl-company-main_20200909_1525.html",controller:companyMainCtrl,controllerAs:"main",bindings:{formType:"@"}}),companyMainCtrl.$inject=["CompanyService","ApplicationInfoService","hpfbFileProcessing","$filter","$scope","INTERNAL_TYPE","EXTERNAL_TYPE","APPROVED_TYPE","AMEND_TYPE","ENGLISH","getRoleLists","$translate","$anchorScroll","$location"]}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBhbnlBcHBJTlQtZW4uanMiLCJjb21wYW55VHJhbnNsYXRpb25zLmpzIiwib25seS1kaWdpdHNfMjAyMDA5MDlfMTUyNS5qcyIsImRhdGEtbGlzdHNfMjAyMDA5MDlfMTUyNS5qcyIsImRhdGEtbGlzdHMuanMiLCJkYXRhLWxpc3RzLmFjdGl2aXR5XzIwMjAwOTA5XzE1MjUuanMiLCJocGZiLWNvbnN0YW50c18yMDIwMDkwOV8xNTI1LmpzIiwiZmlsdGVyLWxpc3RzXzIwMjAwOTA5XzE1MjUuanMiLCJhcHBsaWNhdGlvbi1pbmZvLXNlcnZpY2VfMjAyMDA5MDlfMTUyNS5qcyIsImNvbXBhbnktbG9hZC1zZXJ2aWNlXzIwMjAwOTA5XzE1MjUuanMiLCJjb21wYW55LXNlcnZpY2VfMjAyMDA5MDlfMTUyNS5qcyIsImNtcC1jb21wYW55LWhlbHAtdGV4dF8yMDIwMDkwOV8xNTI1LmpzIiwiY21wLWFsZXJ0XzIwMjAwOTA5XzE1MjUuanMiLCJjbXAtZXJyb3ItbWVzc2FnZV8yMDIwMDkwOV8xNTI1LmpzIiwiY21wLWVycm9yLXN1bW1hcnlfMjAyMDA5MDlfMTUyNS5qcyIsImNtcC1kb3NzaWVyLWlkLWRldGFpbHNfMjAyMDA5MDlfMTUyNS5qcyIsImNtcC1pbXBvcnRlci1wcm9kdWN0c18yMDIwMDkwOV8xNTI1LmpzIiwiY21wLWNvbnRhY3QtcmVjb3JkXzIwMjAwOTA5XzE1MjUuanMiLCJjbXAtYWRkcmVzcy1yZWNvcmRfMjAyMDA5MDlfMTUyNS5qcyIsImNtcC1hZGRyZXNzLWRldGFpbHNfMjAyMDA5MDlfMTUyNS5qcyIsImNtcC1jb21wYW55LWNvbnRhY3QtbGlzdF8yMDIwMDkwOV8xNTI1LmpzIiwiY21wLWNvbXBhbnktYWRkcmVzcy1saXN0XzIwMjAwOTA5XzE1MjUuanMiLCJGaWxlSU8uaHBmYkZpbGVSZWFkZXJfMjAyMDA5MDlfMTUyNS5qcyIsImNtcC1leHBhbmRpbmctdGFibGVfMjAyMDA5MDlfMTUyNS5qcyIsImNtcC1hZGRyZXNzLXJvbGVfMjAyMDA5MDlfMTUyNS5qcyIsImNtcC1jb250YWN0LWRldGFpbHNfMjAyMDA5MDlfMTUyNS5qcyIsImNtcC1hcHBsaWNhdGlvbi1pbmZvXzIwMjAwOTA5XzE1MjUuanMiLCJjbXAtY29tcGFueS1tYWluXzIwMjAwOTA5XzE1MjUuanMiXSwibmFtZXMiOlsiYW5ndWxhciIsIm1vZHVsZSIsIk1haW5Db250cm9sbGVyIiwidm0iLCJ0aGlzIiwiZm9ybVR5cGUiLCJjb250cm9sbGVyIiwiY29uZmlnIiwiJHRyYW5zbGF0ZVByb3ZpZGVyIiwiJGxvY2F0aW9uUHJvdmlkZXIiLCJodG1sNU1vZGUiLCJlbmFibGVkIiwicmVxdWlyZUJhc2UiLCJyZXdyaXRlTGlua3MiLCJwcmVmZXJyZWRMYW5ndWFnZSIsInVzZUxvYWRlciIsImRpcmVjdGl2ZVByaW9yaXR5IiwidXNlU2FuaXRpemVWYWx1ZVN0cmF0ZWd5IiwiZm9yY2VBc3luY1JlbG9hZCIsInRyYW5zbGF0aW9ucyIsIkNJVFkiLCJDT1VOVFJZIiwiUFJPVklOQ0UiLCJQT1NUQUwiLCJQUk9WU1RBVEUiLCJTVEFURSIsIlNUUkVFVCIsIlpJUCIsIkNPTVBBTlkiLCJBRERfQUREUkVTUyIsIkNJVFlfVE9XTiIsIlNBVkVfQUREUiIsIkRFTEVURV9BRERSIiwiQUREUl9JTkZPIiwiQUREUl9ERVRBSUxTIiwiQUREUl9ST0xFX0xFR0VORCIsIkFERFJfUkVQX1JPTEVfTEVHRU5EIiwiUFJPRFVDVFNfSU1QT1JURUQiLCJQUk9EVUNUX1RZUEVTIiwiQUxMX1BST0RVQ1RTIiwiU0VMRUNURURfUFJPRFVDVFMiLCJJREVOVElGWV9QUk9EVUNUUyIsIkFERF9ET1NTSUVSX0lEIiwiSU1QT1JURVJfTk9OQ0ROIiwiQ09VTlRSWV9DSE9PU0UiLCJDT1VOVFJZX1NFQVJDSCIsIlBST1ZJTkNFTElTVCIsIkFCIiwiQkMiLCJNQiIsIk5CIiwiTkwiLCJOVCIsIk5TIiwiTlUiLCJPTiIsIlBFIiwiUUMiLCJTSyIsIllUIiwiQUwiLCJBSyIsIkFaIiwiQVIiLCJDQSIsIkNPIiwiQ1QiLCJERSIsIkRDIiwiRkwiLCJHQSIsIkhJIiwiSUQiLCJJTCIsIklOIiwiSUEiLCJLUyIsIktZIiwiTEEiLCJNRSIsIk1EIiwiTUEiLCJNSSIsIk1OIiwiTVMiLCJNTyIsIk1UIiwiTkUiLCJOViIsIk5IIiwiTkoiLCJOTSIsIk5ZIiwiTkMiLCJORCIsIk9IIiwiT0siLCJPUiIsIlBBIiwiUkkiLCJTQyIsIlNEIiwiVE4iLCJUWCIsIlVUIiwiVlQiLCJWQSIsIldBIiwiV1YiLCJXSSIsIldZIiwiRklSU1ROQU1FIiwiTEFTVE5BTUUiLCJJTklUSUFMUyIsIkxBTkdDT1JSRVNQT05EIiwiSk9CVElUTEUiLCJTQUxVVEFUSU9OIiwiU0FMVVRfTVIiLCJTQUxVVF9NUyIsIlNBTFVUX0RSIiwiU0FMVVRfTVJTIiwiUk9MRV9QUklNQVJZIiwiUk9MRV9TRUNPTkRBUlkiLCJDT05UQUNURU1BSUwiLCJGQVhfTlVNQkVSIiwiUEhPTkVfRVhUIiwiUk9MRVMiLCJQSE9ORU5VTUJFUiIsIkNPTlRBQ1RfSU5GTyIsIlJFUF9DT05UQUNUIiwiT05FX1JPTEUiLCJDT05UQUNUX0RFVEFJTFMiLCJBRERfQ09OVEFDVCIsIkNPTlRBQ1RfUk9MRV9MRUdFTkQiLCJDT05UQUNUX1JPTEVfSU5TVFJVQ1QiLCJBRERfUkVQUkVTIiwiREVMRVRFX1JFUFJFUyIsIlNBVkVfUkVQUkVTIiwiSU1QX0NPTVBBTllfTkFNRSIsIkFERFJfUk9MRVMiLCJBUFBMX1NUQVRVUyIsIkVOUk9MX1ZFUlNJT04iLCJEQVRFX1NBVkVEIiwiQU1FTkRfRU5ST0wiLCJBTUVORF9NU0ciLCJSRUFTT05fQU1FTkQiLCJTRUxFQ1RfTE9BRCIsIk1TR19TVUNDRVNTX0xPQUQiLCJNU0dfRVJSX0pTT05QQVJTRSIsIk1TR19FUlJfWE1MUEFSU0UiLCJNU0dfRVJSX0ZJTEVfTE9BRCIsIk1TR19FUlJfRklMRV9UWVBFIiwiTVNHX0VSUl9GT1JNX1RZUEUiLCJNU0dfRVJSX0NIRUNLU1VNX0ZBSUwiLCJNU0dfRVJSX0ZJTEVfVkVSU0lPTiIsIlkiLCJOIiwiQUREIiwiREVMRVRFUk9XIiwiU0VMRUNURURST1ciLCJSRVFVSVJFRCIsIlJPTEVTX1NFTEVDVCIsIk5FVyIsIkFNRU5EIiwiQVBQUk9WRUQiLCJGSU5BTCIsIkNMSUNLX1RPR0dMRSIsIkFNRU5EX1JFQ09SRCIsImVuIiwiZnIiLCJBRERfUkVDT1JEIiwiU0FWRV9SRUNPUkQiLCJERUxFVEVfUkVDT1JEIiwiQ09QWV9SRUNPUkQiLCJESVNDQVJEX0NIQU5HRVMiLCJSRVBTRUNPTkRBUlkiLCJSRVBQUklNQVJZIiwiTUFJTElORyIsIkJJTExJTkciLCJNQU5VRkFDVFVSRVIiLCJJTVBPUlRFUl9BRERSRVNTIiwiQ0FOX0lNUCIsIkNPTlRBQ1RNQUlMSU5HIiwiQ09OVEFDVEJJTExJTkciLCJDT05UQUNUTUFOVUZBQ1RVUkVSIiwiQ09OVEFDVF9JTVBPUlRFUiIsIkFQUFJPVkVfRklOQUwiLCJTQVZFX0RSQUZUIiwiUFJJTUFSWSIsIlNFQ09OREFSWSIsIlRPR0dMRV9FWFBBTkQiLCJDT05UUk9MX05VTUJFUiIsIlJFUF9DT05UQUNUX0lORk8iLCJTQVZFX0NPTlRBQ1QiLCJERUxFVEVfQ09OVEFDVCIsIkNPTVBBTllfSUQiLCJET1NTSUVSX0lEIiwiSU1QT1JURVIiLCJJTVBPUlRFUklEIiwiSU1QT1JURVJfQ09NUEFOWV9OQU1FIiwiSU1QT1JURVJfQ09NUEFOWV9JRF9JRiIsIklNUE9SVEVSX0NPTVBBTllfTkFNRV9JRiIsIkVSUk9SUyIsIlVOS05PV04iLCJCSU9MT0dJQyIsIlBIQVJNQUNFVVRJQ0FMIiwiVkVURVJJTkFSWSIsIkNMSU5JQ0FMX1RSSUFMIiwiSEVMUF9GSUxFX0xPQUQiLCJFWFBBTkQiLCJIRUxQX0FDVElWSVRZX01BSU4iLCJIRUxQX0FDVElWSVRZX1JFUCIsIkNBTEVOREFSIiwiSElERV9DQUxFTkRBUiIsIk9USEVSIiwiSEVMUF9SRVBfQ09OVEFDVCIsIk9USEVSX1VOSVRTIiwiQ09NUEFOWU5BTUUiLCJGVUxMTEVHQUxOQU1FIiwiQlVTSU5FU1NOVU1CRVIiLCJBQ09NUEFOWU5BTUUiLCJDT1BZIiwiREVMRVRFIiwiU0FWRV9XT1JLSU5HIiwiQ09NUEFOWV9OT0FCQlJFViIsIkNMT1NFX0FMRVJUIiwiQ09MTEFQU0UiLCJDT05UUk9MX05VTSIsIk9USEVSX0RFVEFJTFMiLCJQUk9EX05BTUUiLCJQUk9EX05BTUVfSEVMUCIsIlBST1BfTkFNRV9IRUxQIiwiUkVMQVRFRF9JTkZPX0hFTFAiLCJET1NTSUVSX1RZUEUiLCJMRUFTVF81X0NIQVIiLCI1X09SXzZfQ0hBUiIsIkxFQVNUXzdfQ0hBUiIsIklOQ0xVREVfQVJFQV9DT0RFIiwiTEVBU1RfNl9ESUdJVCIsIkxFQVNUXzVfRElHSVQiLCJMRUFTVF85X0NIQVIiLCJJTlNUUlVDVElPTiIsIlJFVFVSTl9JTlNUUlVDVElPTiIsIlBSSVZBQ1lfTk9USUNFX1NUQVRFTUVOVCIsIlNFQ1VSSVRZX0RJU0NMQUlNRVIiLCJQUklWQUNZX1NUQVRFTUVOVCIsIkZPT1ROT1RFX0lOU1RSVUNUSU9OIiwiU0VDVElPTl9JU19OT1RfVklTSUJMRSIsIkZBWF9OT1RfQVZBSUxBQkxFIiwiTk9UX0FQUExJQ0FCTEUiLCJEMjEiLCJEMjIiLCJEMjQiLCJEMjYiLCJCUk9XU0VSIiwiVEFCTEVfRVhQQU5ERURfU1RBVEUiLCJQUk9URUNURURfQiIsIlJPVVRJTkdfSUQiLCJSRUZFUlJFUiIsIkNIQVJfNl9ESUdJVFMiLCJGT1JNQVRfVFlQRV9NSU5MRU5HVEgiLCJGT1JNQVRfVFlQRV9QQVRURVJOIiwiUFJJVkFDWV9TVEFURU1FTlRfSEVMUCIsIk1TR19FUlJfTUFORCIsIk1TR19FUlJfRU1BSUxfRk9STUFUIiwiTVNHX0VSUl9ST0xFIiwiTVNHX0VSUl9ESVNJVFlQRSIsIk1TR19FUlJfQUREUkVTUyIsIk1TR19FUlJfQ09OVEFDVF9OVU0iLCJNU0dfRVJSX1BIT05FX0ZPUk1BVCIsIk1TR19FUlJfRkFYX0ZPUk1BVCIsIk1TR19FUlJfQUxMUk9MRSIsIk1TR19FUlJfQUREUkVTU1NST0xFIiwiTVNHX0VSUl9QT1NUQUwiLCJNU0dfRVJSX1pJUCIsIk1TR19FUlJfREFURV9GT1JNQVQiLCJNQU5VRkFDVF9TRUwiLCJNQUlMX1NFTCIsIkJJTExJTkdfU0VMIiwiSU1QT1JURVJfU0VMIiwiUkVQUFJJTV9TRUwiLCJSRVBBTFRfU0VMIiwiTVNHX0xFTkdUSF9NSU41IiwiTVNHX0xFTkdUSF82IiwiTVNHX0xFTkdUSF82TlVNIiwiTVNHX0xFTkdUSF84TlVNIiwiTVNHX0xFTkdUSF83IiwiTVNHX0xFTkdUSF83TlVNIiwiT05FX1JFUCIsIk1TR19FUlJfTk9USUZfU0VMIiwiTVNHX0VSUl9NSU5fUE9TIiwiTVNHX0VSUl9NQVgiLCJNU0dfRk9STUFUX0NIQVJfNkRJR0lUUyIsIk1TR19FUlJfRFVQTElDQVRFRF9TWVNURU0iLCJNU0dfRk9STUFUX0FMUEhBX05VTUJFUklDIiwiTVNHX0VSUl9JTlZBTElEX0VORF9EQVRFIiwiUkVHX0NPTVBBTllfRU5ST0wiLCJMT0FEX0NPTVBBTllfRklMRSIsIlJFUFJFU0VOVF9JTlNUUlVDVCIsIkFNRU5EX05PVEUiLCJGSUVMRElEIiwiQ09NUEFOWV9OQU1FIiwiSFRfTE9BRF9GSUxFXzEiLCJIVF9MT0FEX0ZJTEVfMiIsIkhUX0xPQURfRklMRV8zIiwiRU5ST0xfMS4wIiwiRU5ST0xfMi4wIiwiRU5ST0xfMy4wIiwiQUREUl9JTkZPXzEiLCJBRERSX0lORk9fMi4wIiwiQUREUl9JTkZPXzMiLCJCVVNfTlVNXzQuMCIsIkJVU19OVU1fNC4xIiwiQlVTX05VTV80LjIiLCJST0xFXzEiLCJST0xFXzIiLCJST0xFXzMiLCJST0xFXzQiLCJST0xFXzUiLCJST0xFXzYiLCJST0xFXzciLCJDT01QQU5ZX1JFUF8xIiwiQ09NUEFOWV9SRVBfMiIsIkNPTVBBTllfUkVQXzMiLCJDT01QQU5ZX1JFUF80IiwiQ09NUEFOWV9SRVBfNSIsIlJPVVRJTkdfSURfMSIsIlJPVVRJTkdfSURfMiIsIlJPVVRJTkdfSURfMyIsIlJPVVRJTkdfSURfNC4wIiwiUk9VVElOR19JRF80LjEiLCJST1VUSU5HX0lEXzQuMiIsIlJPVVRJTkdfSURfNSIsIkdFTl9YTUxfMSIsIkdFTl9YTUxfMiIsIkFERFJFU1NMSVNUQ1RSTC5BRERSRVNTTElTVEZPUk0iLCJDT05UQUNUTElTVENUUkwuQ09OVEFDVExJU1RGT1JNIiwiQ09OVEFDVFJPTEVTVkFMSUQiLCJBRERSRVNTUk9MRVNWQUxJRCIsIkNPTlRBQ1RSRUMuQ09OVEFDVFJFQ0ZPUk0iLCJBRERSRVNTUkVDLkFERFJFU1NSRUNGT1JNIiwiQ09NUEFOWV9GT1JNIiwiUk9MRU1JU1NJTkciLCJDT05UQUNUUk9MRU1JU1NJTkciLCJST0xFUkVQTUlTU0lORyIsIklNUE9SVEVSSURWQUxJRCIsIkFERFJFU1NfRVhQTkQiLCJDT05UQUNUSU1QT1JURVJWQUlMRCIsIkZPUl9USEUiLCJUSEVSRV9BUkVfRVJST1JTIiwiRk9STV9OT1RfU0FWRUQiLCJOT1RfU0FWRUQiLCJFUlJPUlNfRk9VTkQiLCJFUlJPUl9GT1VORCIsIlRZUEVfUkVRVUlSRUQiLCJUWVBFX0VNQUlMIiwiVFlQRV9EVVBMSUNBVEVST0xFIiwiVFlQRV9EVVBMSUNBVEVTWVMiLCJUWVBFX01JTiIsIlRZUEVfTUlOTEVOR1RIIiwiUE9TVEFMX0ZPUk1BVCIsIlRZUEVfREFURSIsIlRZUEVfTlVNQkVSIiwiVFlQRV9QQVRURVJOIiwiTVNHX1ZBTFVFX01BWCIsIkNPTVBBTllfSU5fVVNFIiwiZGlnaXRzQ3RybCIsImxpbmsiLCJzY29wZSIsImVsZW1lbnQiLCJhdHRycyIsIm1vZGVsQ3RybCIsIiRwYXJzZXJzIiwicHVzaCIsImlucHV0VmFsdWUiLCJ1bmRlZmluZWQiLCJpc051bWJlciIsIm1heCIsImlnbm9yZSIsInRlbXBWYWwiLCJwYXJzZUludCIsInJlZ2V4SW50TmVnIiwiaW50ZWdlclJlZyIsInJlZ2V4VmFsdWUiLCJ0cmFuc2Zvcm1lZElucHV0IiwicmVwbGFjZSIsInN1YnN0cmluZyIsInBhcnNlRmxvYXQiLCIkc2V0Vmlld1ZhbHVlIiwiJHJlbmRlciIsImRpcmVjdGl2ZSIsInJlc3RyaWN0IiwicmVxdWlyZSIsImdldFNlcnZpY2UiLCJfZ2V0RW52U3RyaW5nIiwiZW52IiwiX3NldEVudlN0cmluZyIsInZhbHVlIiwiX2NyZWF0ZUNvdW50cnlBcnJheSIsInRyYW5zbGF0ZUpzb24iLCJjb3VudHJ5TGlzdCIsIl9nZXRVbmtub3duQ291bnRyeVJlYyIsImlkIiwiZ2V0Q291bnRyeVZhbHVlc0FycmF5IiwiZ2V0UHJvdmluY2VWYWx1ZXNBcnJheSIsImdldFVTU3RhdGVzVmFsdWVBcnJheSIsInNlcnZpY2UiLCJnZXRFbnYiLCJzZXRFbnYiLCJnZXRDb3VudHJpZXMiLCJnZXRQcm92aW5jZXMiLCJnZXRVU1N0YXRlcyIsImNyZWF0ZUNvdW50cnlMaXN0IiwiZ2V0VW5rbm93bkNvdW50cnlSZWNvcmQiLCJmYWN0b3J5IiwiaW5qZWN0IiwiZ2V0U2FsU2VydmljZSIsIiRmaWx0ZXIiLCIkcSIsIiRodHRwIiwiJHRyYW5zbGF0ZSIsIkZSRU5DSCIsIlJFTEFUSVZFX0ZPTERFUl9EQVRBIiwiZ2V0U2FsVmFsdWVzQXJyYXkiLCJnZXRMYW5ndWFnZXNWYWx1ZXNBcnJheSIsIl9jcmVhdGVTb3J0ZWRBcnJheSIsImpzb25MaXN0IiwibGFuZyIsInJlc3VsdCIsImZvckVhY2giLCJzb3J0ZWRPYmplY3QiLCJfZ2V0QWRtaW5TdWJUeXBlIiwiYWRtaW5TdWJUeXBlQXJyYXkiLCJsZW5ndGgiLCJfbG9hZEFkbWluVHlwZSIsImRlZmVycmVkIiwiZGVmZXIiLCJ1cmwiLCJnZXQiLCJzdWNjZXNzIiwiZGF0YSIsInN0YXR1cyIsImhlYWRlcnMiLCJwcm9wb3NlZExhbmd1YWdlIiwidXNlIiwibmV3TGlzdCIsInJlc29sdmUiLCJlcnJvciIsInJlamVjdCIsInByb21pc2UiLCJpbnRlcm5hbENvbnRhY3RzIiwiZ2V0U2FsdXRhdGlvbkxpc3QiLCJnZXRMYW5ndWFnZXMiLCJnZXRBZG1pblN1YlR5cGUiLCIkaW5qZWN0IiwiZ2V0Um9sZXNTZXJ2aWNlIiwiZ2V0Um9sZVZhbHVlc0FycmF5IiwiX2dldEZvcm1UeXBlcyIsIl9iaW9sb2dpYyIsIl9waGFybWEiLCJfdmV0ZXJpbmFyeSIsIl9jbGluaWNhbCIsIl9nZXRCaW9sb2dpYyIsIl9nZXRQaGFybWFjZXV0aWNhbCIsIl9nZXRWZXRlcmluYXJ5IiwiX2dldENsaW5pY2FsVHJpYWwiLCJnZXRDb250YWN0Um9sZXMiLCJnZXRGb3JtVHlwZXMiLCJnZXRCaW9sb2dpY1R5cGUiLCJnZXRQaGFybWFUeXBlIiwiZ2V0VmV0ZXJpbmFyeSIsImdldENsaW5pY2FsVHJpYWwiLCJnZXRUcmFuc2FjdGlvblNlcSIsInllc05vQXJyYXkiLCJfY3JlYXRlUmFBcnJheSIsInJhVHlwZUFycmF5IiwiX2NyZWF0ZUZlZUFycmF5IiwiZmVlVHlwZUFycmF5IiwiX2NyZWF0ZU1pdGlnYXRpb25BcnJheSIsIm1pdGlnYXRpb25UeXBlQXJyYXkiLCJnZXRUcmFuc2FjdGlvbkRlc2NyaXB0aW9uc0FycmF5IiwiZ2V0QWN0aXZpdHlBcnJheSIsIl9nZXRmZWVUeXBlQXJyYXkiLCJfZ2V0TWl0aWdhdGlvblR5cGVBcnJheSIsImdldFByZXN1YkFycmF5IiwiYWxsQWN0aXZpdGllcyIsIkNBTkNFTF9MRVRURVIiLCJNRUVUSU5HX01JTlVURVMiLCJFTUFJTF9SUV9SRVNQT05TRSIsIlBST0NFU1NJTkdfQ0xBUklGX1JFU1BPTlNFIiwiUEhPTkVfUlFfUkVTUE9OU0UiLCJnZXRBTkRTQXJyYXkiLCJBRE1JTklTVFJBVElWRSIsIkNPTU1FTlRTX05PQyIsIkRSVUdfTk9USUZfRk9STSIsIklOSVRJQUwiLCJQT1NUX0NMRUFSQU5DRV9EQVRBIiwiU0VDT05EX0xBTkdfUE0iLCJQUklTVElORV9QTV8yTEFORyIsIlBVQl9SRUxFQVNFX0lORk8iLCJCRV9DTEFSSUZfUkVTUE9OU0UiLCJDTElOX0NMQVJJRl9SRVNQT05TRSIsIkxBQkVMX0NMQVJJRl9SRVNQT05TRSIsIkxBQkVMX1BSRUFQUFJPVkFMXzJMQU5HIiwiTk9DX1JFU1BPTlNFIiwiTk9EX1JFU1BPTlNFIiwiTk9OX1JFU1BPTlNFIiwiUFJFU1VCX01FRVRJTkdfUEtHIiwiUFJFU1VCX01FRVRJTkdfUlEiLCJRVUFMX0NMSU5fQ0xBUklGX1JFU1BPTlNFIiwiUVVBTF9DTEFSSUZfUkVTUE9OU0UiLCJSRUNPTl9ERUNJU19MVFJfSU5URU5UIiwiUkVDT05fREVDSVNfUlFfUkVDT04iLCJSRUNPTl9ERUNJU19PVEhFUl9JTkZPIiwiU0NSRUVOSU5HX0FDQ0VQVF9SRVNQT05TRSIsIlNDUkVFTklOR19DTEFSSUZfUkVTUE9OU0UiLCJTRE5fUkVTUE9OU0UiLCJVTlNPTElDSVRFRF9EQVRBIiwiQ09SUl9QQVRFTlRfTUVEIiwiQUxMRUdBVElPTl9OT1RJQ0UiLCJGT1JNX0lWIiwiRk9STV9WIiwiQ09OU0VOVF9MVFIiLCJEQVRBX1BST1RFQ1RfQ09SUkVTUCIsImdldEVVTkRTQXJyYXkiLCJDT01NRU5UU19TVU1NQVJZX0JBU0lTIiwiTk9OQ0xJTl9DTEFSSUZfUkVTUE9OU0UiLCJnZXRFVVNORFNBcnJheSIsIlBPU1RfTk9DX0NIQU5HRSIsImdldExldmVsM0FycmF5IiwiWUVBUl9MSVNUX09GX0NIQU5HRSIsImdldE5EU0FycmF5IiwiQ09NTUVOVFNfUkVHVUxBUlRPUllfREVDSVNJT04iLCJnZXRQU1VSQ0FycmF5IiwiRk9SX1BFUklPRCIsIk1IUERfUlFfUkVTUE9OU0UiLCJnZXRQU1VSUFZBcnJheSIsImdldFJNUFBWQXJyYXkiLCJDU090Uk1QIiwiUk1QX1ZFUlNJT05fREFURSIsImdldFNBTkRTQXJyYXkiLCJnZXRTTkRTQXJyYXkiLCJQQU5ERU1JQ19BUFBMIiwiZ2V0U05EU0NBcnJheSIsImdldFVEUFZBcnJheSIsIkJFTkVGSVRfUklTS19BU1NFU1MiLCJOT1RJRklDQVRJT05fQ0hBTkdFIiwiUE9TVF9NQVJLRVRfU1VSViIsIlJJU0tfQ09NTVVOX0RPQyIsImdldFVEUkFBcnJheSIsIkRJTl9ESVNDT05USU5VRUQiLCJBRFZJU0VNRU5UX0xFVFRFUl9SRVNQT05TRSIsIk5PVElGSUNBVElPTl9JTlRFUlJVUFRfU0FMRSIsIlNFUVVFTkNFX0NMRUFOVVAiLCJnZXRDb25zdWx0QXJyYXkiLCJfZ2V0TVBOQ0FycmF5IiwiV1JJVFRFTl9DT05TVUxUX1JFUSIsIl9nZXRNUE5EU0FycmF5IiwiX2dldE1QU05EU0FycmF5IiwiX2dldFBBTkRBcnJheSIsIl9nZXRQQlJFUkNBcnJheSIsIl9nZXRQQlJFUlBWQXJyYXkiLCJfZ2V0UFJORFNBcnJheSIsIlBSSU9SSVRZX1JFVklFV19SUSIsIl9nZXRQUlNORFNBcnJheSIsImdldFlCUFJBcnJheSIsImdldERTdXJBcnJheSIsImdldERJTkFBcnJheSIsIkNIQU5HRV9UT19ESU4iLCJnZXRWX0RJTkFBcnJheSIsIkhTQ19SUV9SRVNQT05TRSIsIlFIU0NfUlFfUkVTUE9OU0UiLCJDSFNDX1JRX1JFU1BPTlNFIiwiUUNIU0NfUlFfUkVTUE9OU0UiLCJJTklUSUFMX1RFQVRfU09MVV9NT05PIiwiZ2V0RElOQkFycmF5IiwiZ2V0RElOREFycmF5IiwiZ2V0RElORkFycmF5IiwiZ2V0TVBESU5BcnJheSIsImdldFBEQ0FycmF5IiwiUE9TVF9BVVRIX0RJVjFfQ0hBTkdFIiwiTk9MX1JFU1BPTlNFIiwiZ2V0UERDQkFycmF5IiwiX2dldElSU1JQVkFycmF5IiwiSVNTVUVfU0FGRVRZX1JFUVVFU1QiLCJfZ2V0UEFQVkFycmF5IiwiX2dldFBTQVBWQXJyYXkiLCJBRFZfQ09NUF9SRVEiLCJQQVRJRU5UX1NBRkVUWV9JTkZPIiwiX2dldFJDUFZBcnJheSIsIkRJU1NFTV9MSVNUIiwiX2dldFJFR1BWQXJyYXkiLCJGT1JFSUdOX1NBRkVUWV9OT1RJRklDQVRJT04iLCJSRVNTRVNTX09SREVSIiwiVEVTVF9TVFVESUVTX09SREVSIiwiVEVSTV9DT05EX0NPTU0iLCJfZ2V0U0FORFNDQXJyYXkiLCJfZ2V0UG9zdERJTkFycmF5IiwiWUVBUiIsIl9nZXRFVUFORFNBcnJheSIsIl9nZXRFVVNBTkRTQXJyYXkiLCJnZXRWX0FuZHNBcnJheSIsImdldEN0YUFycmF5IiwiQ1ROX0FETUlOSVNUUkFUSVZFIiwiQ1ROX0FQUEVORElYIiwiQ1ROX0NPTlRBQ1QiLCJDVE5fREFUQSIsIkNUTl9ERUFSIiwiQ1ROX0RJTFVFTlQiLCJDVE5fRFJVR19QUk9EIiwiQ1ROX0RSVUdfU1VCUyIsIkNUTl9FTlJPTExNRU5UIiwiQ1ROX0VUSElDUyIsIkNUTl9JTVBEX1VQREFURSIsIkNUTl9JTkZPUk1FRCIsIkNUTl9GT1JNX0JST0NfVVBEQVRFUyIsIkNUTl9JTlZFU1RJR0FUT1IiLCJDVE5fTkVXX01BTlVGQUNUVVJJTkciLCJDVE5fTkVXX1BLRyIsIkNUTl9ORVdfUUMiLCJDVE5fTkVXX1NVTU1fQURGIiwiQ1ROX1BBQ0tBR0lOR19MQUJFTExJTkciLCJDVE5fUFJPVE9DT0xfSU5GT19VUERBVEUiLCJDVE5fUFJPVE9DT0xfVVBEQVRFIiwiQ1ROX1FPUyIsIkNUTl9SRUZVU0FMUyIsIkNUTl9SRUdVTEFUT1JZIiwiQ1ROX1JFU1BPTlNFIiwiQ1ROX1NBRkVUWSIsIkNUTl9TSEVMRl9QRCIsIkNUTl9TSEVMRl9EUyIsIkNUTl9TSVRFIiwiQ1ROX1NPVVJDRSIsIkNUTl9TVFJBSU4iLCJDVE5fU1RVRFlfQ09NUExFVElPTiIsIkNUTl9TVFVEWV9ESVNDIiwiQ1ROX1NUVURZX0VYVCIsIkNUTl9TVFVEWV9TVVMiLCJDVE5fVFJBTlNfT1dOIiwiZ2V0Q3RhX2FBcnJheSIsIkNMSU5JQ0FMIiwiQ0xJTklDQUxfUVVBTElUWSIsIlFVQUxJVFkiLCJnZXRQcmVDdGFBcnJheSIsImdldFZfTGV2ZWwzQXJyYXkiLCJnZXRWX01wZGluQXJyYXkiLCJnZXRWX01wbmNBcnJheSIsImdldFZfTXBuZHNBcnJheSIsImdldFZfTXBzbmRzQXJyYXkiLCJnZXRWX01wYW5kc0FycmF5IiwiZ2V0Vl9NcHNhbmRzQXJyYXkiLCJnZXRWX1JjY0FycmF5IiwiUkVRX0FDQ0VQVEVEIiwiZ2V0Vl9OY0FycmF5IiwiZ2V0Ql9OY0FycmF5IiwiZ2V0TmNBcnJheSIsImdldFZfTmRzQXJyYXkiLCJnZXRWX1BzdXJQdkFycmF5IiwiZ2V0Vl9TYW5kc0FycmF5IiwiZ2V0Vl9TbmRzQXJyYXkiLCJnZXRWX1VkcmFBcnJheSIsIl9nZXRDb1ZpcjE5QXJyYXkiLCJDT1ZJUl8xOSIsIl9nZXRDb1ZpcjE5QW1kQXJyYXkiLCJDT1ZJUl8xOUFNRCIsIl9nZXRBY3Rpdml0eUxlYWRBcnJheSIsIlBIQVJNQSIsIkJJT0xPR0lDQUwiLCJQT1NUTUFSS0VUIiwiQ09OU1VNRVJIRUFMVEgiLCJfZ2V0QWN0aXZpdHlMZWFkRDIyQXJyYXkiLCJfZ2V0QWN0aXZpdHlMZWFkRDIxQXJyYXkiLCJfZ2V0QWN0aXZpdHlMZWFkRDI0QXJyYXkiLCJfZ2V0QWN0aXZpdHlMZWFkRDI2QXJyYXkiLCJDTElOSUNBTF9CSU8iLCJDTElOSUNBTF9QSEEiLCJfZ2V0Q2xpbmljYWwiLCJfZ2V0QmlvbG9naWNhbExlYWQiLCJfZ2V0UGhhcm1hTGVhZCIsIl9nZXRQb3N0TWFya2V0TGVhZCIsIl9nZXRDb25zdW1IZWFsdGhMZWFkIiwiX2dldFZldGVyaW5hcnlMZWFkIiwiX2dldENsaW5pY2FsQmlvTGVhZCIsIl9nZXRDbGluaWNhbFBoYUxlYWQiLCJfZ2V0U2hlbGZMaWZlVW5pdHNBcnJheSIsImdldFRyYW5zYWN0aW9uRGVzY3JpcHRpb25zIiwiZ2V0QWN0aXZpdHlUeXBlcyIsImNyZWF0ZVJhVHlwZXMiLCJnZXRQaGFybWFjZXV0aWNhbFZhbHVlIiwiZ2V0QmlvbG9naWNWYWx1ZSIsImdldFZldGVyaW5hcnlWYWx1ZSIsImdldENsaW5pY2FsVmFsdWUiLCJnZXRCaW9sb2dpY2FsTGVhZFZhbHVlIiwiZ2V0UGhhcm1hTGVhZFZhbHVlIiwiZ2V0UG9zdE1hcmtldExlYWRWYWx1ZSIsImdldENvbnN1bUhlYWx0aExlYWRWYWx1ZSIsImdldFZldGVyaW5hcnlMZWFkVmFsdWUiLCJnZXRDbGluaWNhbEJpb0xlYWRWYWx1ZSIsImdldENsaW5pY2FsUGhhTGVhZFZhbHVlIiwiZ2V0UHJlc3ViVHlwZXMiLCJnZXRBbmRzVHlwZSIsImdldFZfQW5kc1R5cGUiLCJnZXRDdGFUeXBlIiwiZ2V0Q3RhX2FUeXBlIiwiZ2V0UHJlQ3RhVHlwZSIsImdldERpbmFUeXBlIiwiZ2V0Vl9EaW5hVHlwZSIsImdldERpbmJUeXBlIiwiZ2V0RGluZFR5cGUiLCJnZXREaW5mVHlwZSIsImdldERTdXJUeXBlIiwiZ2V0RXVuZHNUeXBlIiwiZ2V0RXVzbmRzVHlwZSIsImdldExldmVsM1R5cGUiLCJnZXRWX0xldmVsM1R5cGUiLCJnZXRNUERJTlR5cGUiLCJnZXRWX01wZGluVHlwZSIsImdldE5jVHlwZSIsImdldFZfTmNUeXBlIiwiZ2V0Ql9OY1R5cGUiLCJnZXROZHNUeXBlIiwiZ2V0Vl9OZHNUeXBlIiwiZ2V0UGRjVHlwZSIsImdldFBkY0JUeXBlIiwiZ2V0UHJlc3ViVHlwZSIsImdldHBTdXJDVHlwZSIsImdldHBTdXJQdlR5cGUiLCJnZXRWX1BzdXJQdlR5cGUiLCJnZXRSbXBQdlR5cGUiLCJnZXRTYW5kc1R5cGUiLCJnZXRWX1NhbmRzVHlwZSIsImdldFNuZHNUeXBlIiwiZ2V0Vl9TbmRzVHlwZSIsImdldFNuZHNDVHlwZSIsImdldFVkcHZUeXBlIiwiZ2V0VWRyYVR5cGUiLCJnZXRWX1VkcmFUeXBlIiwiZ2V0WWJwclR5cGUiLCJnZXRDb25zdWx0VHlwZSIsImdldE1QTkNUeXBlIiwiZ2V0Vl9NcG5jVHlwZSIsImdldE1QTkRTVHlwZSIsImdldFZfTXBuZHNUeXBlIiwiZ2V0Vl9NcGFuZHNUeXBlIiwiZ2V0Vl9NcHNhbmRzVHlwZSIsImdldFZfUmNjVHlwZSIsImdldE1QU05EU1R5cGUiLCJnZXRWX01wc25kc1R5cGUiLCJnZXRQQU5EVHlwZSIsImdldFBCUkVSQ1R5cGUiLCJnZXRQQlJFUlBWVHlwZSIsImdldFBSTkRTVHlwZSIsImdldFBSU05EU1R5cGUiLCJnZXRJUlNSUFZUeXBlIiwiZ2V0UEFQVlR5cGUiLCJnZXRQU0FQVlR5cGUiLCJnZXRSQ1BWVHlwZSIsImdldFJFR1BWVHlwZSIsImdldFNBTkRTQ1R5cGUiLCJnZXRQb3N0RElOVHlwZSIsImdldEVVQU5EU1R5cGUiLCJnZXRFVVNBTkRTVHlwZSIsImdldFllc05vTGlzdCIsImdldEZlZUxpc3QiLCJjcmVhdGVGZWVUeXBlcyIsImdldE1pdGlnYXRpb25MaXN0IiwiY3JlYXRlTWl0aWdhdGlvbkxpc3QiLCJnZXRBY3Rpdml0eUxlYWRMaXN0IiwiZ2V0QWN0aXZpdHlMZWFkTGlzdEJ5RDIyIiwiZ2V0QWN0aXZpdHlMZWFkTGlzdEJ5RDIxIiwiZ2V0QWN0aXZpdHlMZWFkTGlzdEJ5RDI0IiwiZ2V0QWN0aXZpdHlMZWFkTGlzdEJ5RDI2IiwiZ2V0U2hlbGZMaWZlVW5pdHNMaXN0IiwiZ2V0Q09WSVIxOVR5cGUiLCJnZXRDT1ZJRDE5QU1EVHlwZSIsImNvbnN0YW50Iiwib3JkZXJCeVRyYW5zbGF0ZWRDb3VudHJ5IiwiQ0FOQURBIiwiVVNBIiwiYXJyYXkiLCJvYmpLZXkiLCJ0cmFuc2xhdGVkIiwia2V5IiwibGFiZWwiLCJpbnN0YW50Iiwib3JkZXJCeVRyYW5zbGF0ZWRDb3VudHJ5QW5kTGFiZWwiLCJmaW5kQ291bnRyeU9iaiIsInRhcmdldEtleSIsImkiLCJvcmRlckJ5VHJhbnNsYXRlZCIsInNlcXVlbmNlT3JkZXJCeSIsIm9yZGVyQnlUcmFuc2xhdGVkT3RoZXJGaXJzdCIsIl9vcmRlckJ5TG9jYWxlIiwiaXRlbXMiLCJzb3J0IiwiYSIsImIiLCJsb2NhbGVDb21wYXJlIiwiX2ZpbmRCeUlkIiwic2VhcmNoSnNvbiIsImluaXRpYWxSZXN1bHQiLCJmaWx0ZXIiLCJBcHBsaWNhdGlvbkluZm9TZXJ2aWNlIiwicHJvdG90eXBlIiwiZ2V0VG9kYXlEYXRlIiwicGFkIiwibiIsImQiLCJEYXRlIiwiaXNvRGF0ZSIsImdldEZ1bGxZZWFyIiwiZ2V0TW9udGgiLCJnZXREYXRlIiwiaW5jcmVtZW50TWlub3JWZXJzaW9uIiwiZW5yb2xtZW50VmVyc2lvbiIsInBhcnRzIiwic3BsaXQiLCJkZWMiLCJpbmNyZW1lbnRNYWpvclZlcnNpb24iLCJ3aG9sZSIsImdldEFwcGxpY2F0aW9uU3RhdHVzTGlzdCIsImdldEFwcHJvdmVkVHlwZSIsImdldEFtZW5kVHlwZSIsImdldENvdW50cnlBbmRQcm92aW5jZXMiLCJfY3JlYXRlVHJhbnNsYXRlTGlzdCIsInJlc3VsdExpc3QiLCJfY3JlYXRlU29ydGVkQXJyYXlOQUZpcnN0IiwiY2FuYWRhUmVjb3JkIiwidXNhUmVjb3JkIiwidW5zaGlmdCIsIm9wdGlvbnMiLCJlbnZVcmwiLCJjb3VudHJ5VXJsIiwicmVzdWx0VHJhbnNsYXRlTGlzdCIsInRoZW4iLCJyZXNwb25zZSIsInRyYW5zbGF0ZUxpc3QiLCJleHRlbmQiLCJjb25zb2xlIiwid2FybiIsIkNvbXBhbnlTZXJ2aWNlIiwiWFNMX1BSRUZJWCIsImRlZmF1bHRDb21wYW55RGF0YSIsImRhdGFDaGVja3N1bSIsImRhdGVTYXZlZCIsImFwcGxpY2F0aW9uVHlwZSIsInNvZnR3YXJlVmVyc2lvbiIsImNvbXBhbnlJZCIsInJlYXNvbkFtZW5kIiwiYWRkcmVzc0xpc3QiLCJjb250YWN0TGlzdCIsIl9kZWZhdWx0IiwiYWRkcmVzc0lEIiwiY29udGFjdElkIiwieHNsRmlsZU5hbWUiLCJoZWxwVGV4dFNlcXVlbmNlcyIsImxvYWRGaWxlSW54IiwiZW5yb2xJZHgiLCJhZGRyZXNzSWR4IiwiYnVzaW5lc3NJZHgiLCJhZGRSb2xlSWR4IiwiY29tcGFueVJlcElkeCIsInJvdXRpbmdJZElkeCIsImdlblhtbElkeCIsImtleXMiLCJPYmplY3QiLCJnZXROdW1iZXJLZXlzIiwib2JqIiwibnVtS2V5cyIsInByb3AiLCJoYXNPd25Qcm9wZXJ0eSIsImdldEFwcGxpY2F0aW9uVHlwZXMiLCJnZXRYU0xGaWxlTmFtZSIsImNyZWF0ZUFkZHJlc3NSb2xlIiwiZGVmYXVsdEFkZHJlc3NSb2xlIiwibWFudWZhY3R1cmVyIiwibWFpbGluZyIsImJpbGxpbmciLCJpbXBvcnRlciIsImNyZWF0ZUNvbnRhY3RSb2xlIiwiZGVmYXVsdENvbnRhY3RSb2xlIiwicmVwUHJpbWFyeSIsImNyZWF0ZUFkZHJlc3NSZWNvcmQiLCJkZWZhdWx0QWRkcmVzcyIsImNvbXBhbnlOYW1lIiwiYnVzaW5lc3NOdW1iZXIiLCJpbXBvcnRlcklEIiwiYWRkcmVzc1JvbGUiLCJzdHJlZXQiLCJjaXR5Iiwic3RhdGVMaXN0Iiwic3RhdGVUZXh0IiwiY291bnRyeSIsInBvc3RhbENvZGUiLCJnZXROZXh0QWRkcmVzc0lEIiwiY3JlYXRlQ29udGFjdFJlY29yZCIsImRlZmF1bHRDb250YWN0IiwiY29udGFjdFJvbGUiLCJnaXZlbk5hbWUiLCJzdXJuYW1lIiwiaW5pdGlhbHMiLCJ0aXRsZSIsInBob25lIiwicGhvbmVFeHQiLCJmYXgiLCJlbWFpbCIsInJvdXRpbmdJZCIsImltcENvbXBhbnlOYW1lIiwiZ2V0TmV4dENvbnRhY3RJRCIsInVwZGF0ZUFkZHJlc3NJRCIsImlzTmFOIiwicmVzZXRBZGRyZXNzSUQiLCJ1cGRhdGVDb250YWN0SUQiLCJyZXNldENvbnRhY3RJRCIsImdldFJvb3RUYWciLCJ0cmFuc2Zvcm1Gcm9tRmlsZU9iaiIsImpzb25PYmoiLCJyb290VGFnIiwiY29tcGFueUluZm8iLCJnZXRDb21wYW55SW5mbyIsImFkZHJlc3NJbmZvIiwiZ2V0QWRkcmVzc0xpc3QiLCJhZGRyZXNzX3JlY29yZCIsImNvbnRhY3RJbmZvIiwiZ2V0Q29udGFjdExpc3QiLCJjb250YWN0X3JlY29yZCIsInRyYW5zZm9ybVRvRmlsZU9iaiIsInJlc3VsdEpzb24iLCJDT01QQU5ZX0VOUk9MIiwidGVtcGxhdGVfdHlwZSIsImRhdGFfY2hlY2tzdW0iLCJlbnJvbG1lbnRfdmVyc2lvbiIsImRhdGVfc2F2ZWQiLCJhcHBsaWNhdGlvbl90eXBlIiwic29mdHdhcmVfdmVyc2lvbiIsImNvbXBhbnlfaWQiLCJyZWFzb25fYW1lbmQiLCJfbWFwQWRkcmVzc0xpc3RUb091dHB1dCIsIl9tYXBDb250YWN0TGlzdFRvT3V0cHV0IiwiZ2V0TW9kZWxJbmZvIiwiaW5mbyIsImFkckxpc3QiLCJsaXN0IiwiQXJyYXkiLCJhZGRyZXNzX2lkIiwiYWRkcmVzcyIsImNvbXBhbnlfbmFtZSIsImJ1c2luZXNzX251bWJlciIsImltcG9ydGVyX2lkIiwiY29tcGFueV9hZGRyZXNzX2RldGFpbHMiLCJzdHJlZXRfYWRkcmVzcyIsInByb3ZpbmNlX2xvdiIsIl9pZCIsInByb3ZpbmNlX3RleHQiLCJjdXJyZW50TGFuZyIsImNvdW50cnlIdG1sIiwiY291bnRyeURpc3BsYXkiLCJwb3N0YWxfY29kZSIsImNvbnRhY3RzIiwiY29udGFjdCIsImNvbnRhY3RfcmVjX2luZGV4IiwiY29udGFjdF9pZCIsInJlcF9wcmltYXJ5IiwicmVwU2Vjb25kYXJ5IiwicmVwX3NlY29uZGFyeSIsImNvbXBhbnlfY29udGFjdF9kZXRhaWxzIiwiZ2l2ZW5fbmFtZSIsImpvYl90aXRsZSIsImxhbmd1YWdlIiwibGFuZ3VhZ2VfY29ycmVzcG9uZGFuY2UiLCJwaG9uZV9udW0iLCJwaG9uZV9leHQiLCJmYXhfbnVtIiwiUm91dGluZ0lEIiwiaW1wX2NvbXBhbnlfbmFtZSIsIl9fdGV4dCIsIl9sYWJlbF9lbiIsIl9sYWJlbF9mciIsIlN0cmluZyIsImNhcGl0YWxpemVGaXJzdExldHRlciIsImNoYXJBdCIsInRvVXBwZXJDYXNlIiwic2xpY2UiLCJ0b0xvd2VyQ2FzZSIsIkNvbXBhbnlIZWxwVGV4dEN0cmwiLCIkc2NvcGUiLCJQUk9EIiwiaXNGb3JQcm9kIiwiJG9uSW5pdCIsImNvbXBvbmVudCIsInRlbXBsYXRlVXJsIiwiY29udHJvbGxlckFzIiwiYmluZGluZ3MiLCJodEluZHhMaXN0IiwiYWxlcnRDb250cm9sbGVyIiwiYWxlcnRWaXNpYmxlIiwiY2xvc2VNc2dBbGlhcyIsImFuY2hvciIsIiRvbkNoYW5nZXMiLCJjaGFuZ2VzIiwibXNnIiwiY3VycmVudFZhbHVlIiwidWlTdGF0ZSIsIm15QW5jaG9yIiwib3BlbiIsInVwZGF0ZVN0YXRlIiwiY2xvc2UiLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwiZm9jdXMiLCJpc0FsZXJ0VmlzaWJsZSIsInRyYW5zY2x1ZGUiLCJ0eXBlIiwiZXJyb3JNZXNzYWdlQ29udHJvbGxlciIsImZpZWxkX25hbWUiLCJmb3JtX3JlZiIsImZpZWxkUmVjb3JkcyIsImZpZWxkTmFtZSIsImZvcm1SZWYiLCJlcnJvclR5cGVzIiwic2hvd0Vycm9yTWVzc2FnZSIsImlzVW5kZWZpbmVkIiwiJG5hbWUiLCJzaG93RXJyb3IiLCIkaW52YWxpZCIsIiR0b3VjaGVkIiwiZXJyb3JTdW1tYXJ5Q29udHJvbGxlciIsIiRsb2NhdGlvbiIsIiRhbmNob3JTY3JvbGwiLCJfaXNFcnJvclN1bW1hcnlWaXNpYmxlIiwiaXNWaXNpYmxlIiwiZXJyb3JBcnJheSIsIl9oaWRlUmVxdWlyZWRSZWNvcmRFcnJvcnMiLCJlcnJvcnMiLCJpbmRleE9mIiwiX2dldEVyciIsImVycm9yT2JqIiwicmVzdWx0c0xpc3QiLCJwYXJlbnQiLCJyZWNvcmQiLCJqIiwibnVtSW5kZXgiLCJsYXN0SW5kZXhPZiIsInRyYW5zY2x1ZGVOYW1lIiwiZXhjbHVzaW9ucyIsInRhYkluZGV4IiwidGFiSWQiLCJzdWJzdHIiLCJtZXJnZSIsIl9jcmVhdGVTdW1tYXJ5UmVjb3JkIiwiJGVycm9yIiwidHJhbnNjbHVkZU5hbWVzIiwiZXhJbmRleCIsImV4cGFuZEluZGV4IiwiX2NyZWF0ZUV4cGFuZGVyUmVjb3JkIiwiX3Byb2Nlc3NSZWNvcmQiLCJ0cmFuc2xhdGVLZXkiLCJfc2NydWJGaWVsZE5hbWUiLCJyYXdOYW1lIiwic2VwYXJhdG9yIiwiaW5kZXgiLCJjbGVhbmVkTmFtZSIsIl9nZXRFbGVtZW50U2NvcGUiLCJuYW1lU3BsaXQiLCJzY29wZUlkIiwiZXJyb3JfTmFtZSIsImVycm9yVHlwZSIsInNjcnViTmFtZSIsImVycm9yS2V5IiwiZGVzdElkIiwiYWxpYXMiLCJhbGlhc1JlYyIsInNlYXJjaElkIiwiZGVzdE9iaiIsIiQiLCJmaW5kIiwidGFyZ2V0IiwibmFtZSIsImVhY2giLCJzdGFydEZvcm1JZCIsImsiLCJ0ZW1wX2F0dHIiLCJhdHRyIiwiYnV0dG9uTmFtZSIsImVycm9yTmFtZSIsImNvbmNhdCIsImlzU3VtbWFyeSIsIl9zb3J0RXJyb3JzQnlEb21PcmRlciIsImRvbUZpZWxkTGlzdCIsImtleUxpc3QiLCJwIiwicGFyZW50TmFtZSIsInF1ZXJ5U2VsZWN0b3IiLCJ1bmlxdWVFcnJvckxpc3QiLCJzcGxpY2UiLCJzb3J0ZWREb21Kc29uTGlzdCIsInYiLCJuZXdFcnJvcnMiLCJtYXAiLCJub3REZWZpbmVkIiwiY3VyclJlYyIsInRhcmdldE5hbWUiLCJkZXN0SW5kZXgiLCJpc0RlZmluZWQiLCJ0ZW1wUmVjIiwiY29weSIsInJlYyIsInBvcyIsIl9zb3J0VW5rbm93bnMiLCJ1bmtub3duSnNvbiIsInNvcnRMaXN0IiwidW5rbm93bkFycmF5IiwidW5rbm93blJlYyIsInVua25vd25OYW1lIiwic2NvcGVJbmRleCIsImciLCJzb3J0UmVjIiwic29ydFNjb3BlIiwibW92ZSIsImV4cGFuZGVySW5kZXgiLCJ0b0V4cGFuZCIsInBhcmVudFJlZiIsIm5hbWVBZGRlbmR1bSIsInJvb3RFcnJvciIsImlzRm9jdXNJbnB1dCIsImhlYWRpbmdQcmVhbWJsZSIsImhlYWRlckxldmVsIiwic2V0SGVhZGluZ0xldmVsIiwibmFtZVN1ZmZpeCIsImZvcm1QcmVhbWJsZSIsImV4Y2x1c2lvbkxpc3QiLCJhbGlhc0xpc3QiLCJnZXRFcnJvcnNTdW1tIiwic2hvd0Vycm9ycyIsInVwZGF0ZUVycm9ycyIsIm1ha2VGb2N1c2VkIiwiZm9ybUlkIiwidHJhbnNjbHVkZUxpc3QiLCJjYWxjSXNWaXNpYmxlIiwic3VtbWFyeUlzVmlzaWJsZSIsIiRlbWl0Iiwic2Nyb2xsVG8iLCJlcnJvclJlY29yZCIsImhhc2hJZCIsImV4cGFuZFJlY29yZCIsImhhc2giLCJzZWxlY3RWaXNpYmxlVGFiIiwic2VsZWN0VGFiIiwiaXNTdW1tYXJ5TGluayIsImlzTGlzdCIsImlzVGFiTGluayIsImlzRXhwYW5kZXJMaW5rIiwiJG9uIiwiZXZlbnQiLCJlcnJvclN1bW1hcnlCcm9hZGNhc3ROYW1lIiwibWVzc2FnZSIsIm15Zm9ybUVycm9ycyIsInRlbXAiLCJlcXVhbHMiLCJmcm9tIiwidG8iLCJkb3NzaWVySWREZXRhaWxzQ3RybCIsIl9zZXRJZE5hbWVzIiwiJGlkIiwiZG9zc2llcklkIiwiZGV0YWlsc0luZGV4IiwiaXNFZGl0YWJsZSIsIm1pbjdFcnJvciIsImRpc3BsYXlBbGlhcyIsImRvc3NpZXJSZWNvcmQiLCJpZEluZGV4IiwiaXNBbWVuZCIsImRlbGV0ZUlkIiwiZG9zc2llckluZGV4IiwiY3RybCIsInNldFJlYWRvbmx5IiwiaW1wb3J0ZXJQcm9kdWN0c0N0cmwiLCJwcm9kVHlwZXNJZCIsImZvcm1BbWVuZCIsInNvbWVQcm9kdWN0cyIsInJlY29yZFJlYWRPbmx5IiwicHJvZHVjdFR5cGVMaXN0IiwicmVxdWlyZWRPbmx5IiwibW9kZWwiLCJzZWxlY3RlZFByb2R1Y3RzIiwiZG9zc2llcklkTGlzdCIsInByb2R1Y3RUeXBlQ2hhbmdlZCIsImltcG9ydGVyUmVjb3JkIiwiZGlzYWJsZUFkZEJ1dHRvbiIsImltcG9ydFByb2RGb3JtIiwiYWRkRG9zc2llcklkIiwiaXNEZXRhaWxWYWxpZCIsInN0YXRlIiwiaXNJZEludmFsaWQiLCJzZXROb3RFZGl0YWJsZSIsInVwZGF0ZVZhbGlkIiwib25EZWxldGUiLCJvblVwZGF0ZSIsImNvbnRhY3RSZWNDdHJsIiwiX2dldFJvbGVzQ29uY2F0IiwiYWRkcmVzc1JvbGVzIiwiY29udGFjdE1vZGVsIiwic2F2ZVByZXNzZWQiLCJpc0NvbnRhY3QiLCJ1cGRhdGVTdW1tYXJ5Iiwic2V0U3VtbWFyeUZvY3VzIiwic2hvd1N1bW1hcnkiLCJyb2xlQ29uY2F0IiwiYW1lbmRSZWNvcmQiLCJzYWx1dGF0aW9uIiwiUGhvbmVFeHQiLCJhZGRySW1wQ29tcGFueU5hbWUiLCJjb250YWN0Um9sZU1pc3NpbmciLCJwaG9uZU51bWJlciIsInVwZGF0ZUVycm9yU3VtbWFyeVN0YXRlIiwiZm9jdXNPbkZpcnN0TmFtZSIsImlzRm9jdXMiLCJjb250YWN0UmVjb3JkIiwic2V0RWRpdGFibGUiLCJzaG93RXJyb3JTdW1tYXJ5IiwiaXNPbmVTZWxlY3RlZCIsImlzUm9sZVNlbGVjdGVkIiwicm9sZU5hbWUiLCJ1cGRhdGVFcnJvclN1bW1hcnkiLCJjYW5jZWxGb2N1cyIsImRpc2NhcmRDaGFuZ2VzIiwiY29udGFjdFJlY0Zvcm0iLCIkcHJpc3RpbmUiLCJjdXJyUmVjb3JkIiwiJHNldFByaXN0aW5lIiwiJHZhbGlkIiwiZXJyb3JTdW1tYXJ5VXBkYXRlIiwib25Db250YWN0Um9sZVVwZGF0ZSIsIm5ld1JvbGUiLCJhUm9sZSIsInVwZGF0ZUNvbnRhY3RNb2RlbDIiLCJzaG93Um91dGluZ0lkIiwic2hvd0FkZHJJbXBDb21wYW55TmFtZSIsIiRkaXJ0eSIsIiR3YXRjaCIsImZvY3VzT25TdW1tYXJ5IiwiY2hlY2tSb2xlcyIsInJlY29yZEluZGV4IiwiYWRkcmVzc1JlY0N0cmwiLCJJTlRFUk5BTF9UWVBFIiwiRVhURVJOQUxfVFlQRSIsImFkZHJlc3NNb2RlbCIsImNvbXBhbnlOYW1lSWQiLCJmb3JtTmFtZUlkIiwiYnVzaW5lc3NOdW1iZXJJZCIsImRlcyIsImlzSW1wb3J0ZXIiLCJ1cGRhdGVDb3VudHJ5IiwiYWRkcmVzc1JlY0Zvcm0iLCJpc0ludGVybmFsIiwicHJvdkxvdiIsInJvbGVNaXNzaW5nIiwicG9zdGFsIiwibGVuZ3RoNkVycm9yIiwiaW1wb3J0ZXJQcm9kdWN0U3RhdGUiLCJub3RDYW5hZGlhbk1hbnVmYWN0IiwiYWRkcmVzc1JlY29yZCIsImlzSW4iLCJhZGRyZXNzSWQiLCJlbGUiLCJsb2ciLCJvbkFkZHJlc3NSb2xlVXBkYXRlIiwidXBkYXRlQWRkcmVzc01vZGVsMiIsImlzSW1wb3J0ZXJQcmUiLCJkZXNlbGVjdEltcG9ydGVyIiwiZm9jdXNDb21wYW55TmFtZSIsImdldEludmFsaWQiLCJpblVzZUZsYWciLCJhZGRyZXNzQ3RybCIsImZsZElkIiwic3RyZWV0SWQiLCJjaXR5SWQiLCJjb3VudHJ5SWQiLCJzdGF0ZVRleHRJZCIsInN0YXRlTGlzdElkIiwicHJvdmluY2VMaXN0SWQiLCJwb3N0YWxJZCIsInppcElkIiwibmdNb2RlbE9wdFNldHRpbmciLCJ1cGRhdGVPbiIsInN0YXRlTG92IiwiY291bnRyeUlzRWRpdGFibGUiLCJjYW5hZGlhblBvc3RhbENvZGVQYXR0ZXJuIiwidXNhWmlwQ29kZSIsImhpZGVQcm92aW5jZVRleHQiLCJzaG93UHJvdmluY2UiLCJzaG93U3RhdGUiLCJmZElkIiwicG9zdGFsRXJyb3JMaXN0IiwicHJvdlN0YXRlRXJyb3JOYW1lIiwiZm9jdXNPblByb3ZpbmNlU3RhdGUiLCJwcm92TGlzdExhYmVsIiwiZ2V0UHJvdmluY2VMaXN0TGFiZWwiLCJwb3N0YWxMYWJlbCIsImdldFBvc3RhbExhYmVsIiwiaXNQb3N0YWxSZXF1aXJlZCIsImlzUG9zdGFsUmVxdWlyZWRGbiIsInByb3ZpbmNlcyIsImdldFByb3ZpbmNlU3RhdGVMaXN0IiwiZ2V0UHJvdmluY2VUZXh0U3RhdGUiLCJwb3N0YWxQYXR0ZXJuIiwiZ2V0UG9zdGFsUGF0dGVybiIsImhpZGVQcm92aW5jZURkbCIsImNvdW50cnlDaGFuZ2VkIiwiZmllbGRTdWZmaXgiLCJjb3VudHJ5RWRpdGFibGUiLCJpc0NvdW50cnlDYW5hZGEiLCJvbkRlbGV0ZUJ1dHRvbkNsaWNrIiwib25EaXNjYXJkQnV0dG9uQ2xpY2siLCJhZGRyZXNzRm9ybSIsImlzQ291bnRyeUVkaXRhYmxlIiwicG9zdGFsQ29kZUNoYW5nZWQiLCJpc0Nhbk9yVXNhIiwicG9zdGFsUHRybiIsImNvdW50cnlDaGFuZ2UiLCJmb3VuZCIsIm9wdGlvbiIsImNvdW50cnlUYWJLZXkiLCJsZWF2ZVByb3ZpbmNlU3RhdGUiLCJ1aVNlbGVjdENvbmZpZyIsInRoZW1lIiwiY29udGFjdExpc3RDdHJsIiwidXBkYXRlUm9sZXNDb25jYXQiLCJfc2V0Um9sZXNDb25jYXQiLCJyb2xlcyIsInNlbGVjdFJlY29yZCIsImFsbFJvbGVzU2VsZWN0ZWQiLCJpbXBDb21wYW55U2VsZWN0ZWQiLCJyZXF1aXJlZEZsYWciLCJyZXNldENvbGxhcHNlZCIsImNvbHVtbkRlZiIsImJpbmRpbmciLCJ3aWR0aCIsImZvY3VzZWQiLCJpc0ltcENvbXBhbnlTZWxlY3RlZCIsImlzQWxsQ29udGFjdFJvbGVzU2VsZWN0ZWQiLCJ1c2VyVHlwZSIsImlzRmlsZUxvYWRlZCIsIiRwb3N0TGluayIsImFkZENvbnRhY3QiLCJzZXRWYWxpZCIsIm9uVXBkYXRlQ29udGFjdFJlY29yZCIsImlkeCIsImNvbnRhY3RMaXN0Rm9ybSIsImRlbGV0ZUNvbnRhY3QiLCJjSUQiLCJnZXROZXdDb250YWN0Iiwic2V0Rm9jdXMiLCJpc1JFUFJvbGVTZWxlY3RlZCIsInJvbGVUb0NoZWNrIiwicmVjb3JkSUQiLCJyb2xlc1NlbGVjdGVkIiwiZGlzYWJsZUFkZENvbnRhY3QiLCJyZXBQcmltYXJ5U2VsZWN0ZWQiLCJpbXBvcnRlclNlbGVjdGVkIiwiY29tcGFueVJvbGUiLCJjb21wYW55U2VydmljZSIsImF0dHJOYW1lIiwiYXR0clZhbHVlIiwiaXNBcnJheSIsImFkZHJlc3NMaXN0Q3RybCIsImlzRGV0YWlsc1ZhbGlkIiwiaW1wb3J0ZXJoYXNJRCIsImFkZHJlc3NlcyIsImlzQWxsUm9sZXNTZWxlY3RlZCIsImlzSW1wb3J0ZXJIYXNJRCIsImFkZEFkZHJlc3MiLCJkZWxldGVBZGRyZXNzIiwiYUlEIiwiaXNJbXBDb21wYW55TmFtZVVzZWQiLCJpblVzZSIsImhhc0FkZHJJbXBDb21wYW55TmFtZSIsImFkZHJlc3NMaXN0Rm9ybSIsImdldE5ld0FkZHJlc3MiLCJkaXNhYmxlQWRkQWRkcmVzcyIsImRldGFpbFZhbGlkIiwib25VcGRhdGVBZGRyZXNzUmVjb3JkIiwibWFudVNlbGVjdGVkIiwibWFpbFNlbGVjdGVkIiwiYmlsbFNlbGVjdGVkIiwiY2hlY2tJbXBDb21wYW55SW5Vc2VkIiwibmdGaWxlU2VsZWN0IiwiaHBmYkZpbGVSZWFkZXIiLCJiaW5kIiwiZSIsImZpbGUiLCJzcmNFbGVtZW50IiwiZmlsZXMiLCJyZWFkQXNEYXRhVGV4dCIsImhwZmJGaWxlU2VsZWN0IiwiZmlsZUNvbnRlbnQiLCJGaWxlU2VsZWN0Q29udHJvbGxlciIsImhwZmJGaWxlUHJvY2Vzc2luZyIsImZpbGVUeXBlcyIsIm1vZGVsQ2FsbGJhY2siLCJqc29uUmVzdWx0IiwidmVyc2lvbkFycmF5Iiwicm9vdEVsZW0iLCJ2ZXJzaW9uRXhwZWN0ZWQiLCJtZXNzYWdlcyIsInVwZGF0ZU1vZGVsUm9vdCIsImZpbGVMb2FkIiwidHJpZ2dlciIsIkZpbGVXcml0ZUNvbnRyb2xsZXIiLCJfZ2VuZXJhdGVGaWxlIiwic2F2ZVR5cGUiLCJ3cml0ZUFzSnNvbiIsImpzb25Ub1NhdmUiLCJmaWxlTmFtZSIsIndyaXRlQXNYbWwiLCJfaW5pdCIsImJ1dHRvbkRpc2FibGVkIiwiZ2VuZXJhdGUiLCJidXR0b25MYWJlbCIsImZpbGVSZWFkZXIiLCJvbkxvYWQiLCJyZWFkZXIiLCIkYXBwbHkiLCJzcGxpdEZpbGUiLCJmaWxlVHlwZSIsImRyYWZ0X2ZpbGVfdHlwZSIsImNvbnZlcnRUb0pTT05PYmplY3RzIiwiY2hlY2tSb290VGFnTWF0Y2giLCJjb252ZXJ0WE1MVG9KU09OT2JqZWN0cyIsImNvbnZlcnRSZXN1bHQiLCJwYXJzZVJlc3VsdCIsIm1zZ19lcnJfZmlsZVR5cGUiLCJvbkVycm9yIiwibXNnX2Vycl9sb2FkIiwiZ2V0UmVhZGVyIiwiRmlsZVJlYWRlciIsIm9ubG9hZCIsInJlYWRBc1RleHQiLCJKU09OIiwicGFyc2UiLCJpbXBvcnRGaWxlVHlwZSIsIm1zZ19zdWNjZXNzIiwibXNnX2Vycl9qc29ucGFyc2UiLCJ4bWxDb25maWciLCJlc2NhcGVNb2RlIiwiZW1wdHlOb2RlRm9ybSIsInVzZURvdWJsZVF1b3RlcyIsInhtbENvbnZlcnRlciIsIlgySlMiLCJ4bWxfc3RyMmpzb24iLCJtc2dfZXJyX3htbHBhcnNlIiwiY29udmVydEpTT05PYmplY3RzVG9YTUwiLCJqc29uQ29udmVydGVyIiwieG1sUmVzdWx0IiwianNvbjJ4bWxfc3RyIiwibXNnX2Vycl9mb3JtVHlwZSIsImpzb25Ub0ZpbGUiLCJtYWtlU3RyU2F2ZSIsInN0cmluZ2lmeSIsImJsb2IiLCJCbG9iIiwic2F2ZUFzIiwieG1sVG9GaWxlIiwieHNsTmFtZSIsImV4cGFuZGluZ1RhYmxlQ3RybCIsIl9zZXROdW1iZXJDb2x1bW5zIiwiZGlzYWJsZUVycm9yQ29sIiwibnVtYmVyQ29scyIsIl9yZWNhbGN1bGF0ZUNvbHVtbkRlZnMiLCJjb2xEZWZzIiwibnVtQ29scyIsImNhcmV0V2lkdGgiLCJlcnJvcldpZHRoIiwidG90YWxXaWR0aCIsInRvU3VidHJhY3QiLCJvbmVEZWYiLCJ1cGRhdGVUYWJsZVJvdyIsInRleHRJbmRleCIsInNlbGVjdEluZGV4Iiwic2VsZWN0VGFibGVSb3ciLCJfY3JlYXRlQXJyYXkiLCJhcnJheVNpemUiLCJpbml0aWFsVmFsIiwiYW5BcnJheSIsImNvbHVtbkRlZmluaXRpb25zIiwiZGlzYWJsZUV4cGFuZCIsInRhYmxlUm93RXhwYW5kZWQiLCJ0YWJsZVJvd0luZGV4Q3VyckV4cGFuZGVkIiwidGFibGVSb3dJbmRleFByZXZFeHBhbmRlZCIsImRheURhdGFDb2xsYXBzZSIsImZvcm1OYW1lIiwibGlzdEl0ZW1zIiwiZ2V0RXhwYW5kZWRTdGF0ZSIsInJvdyIsInRyYW5zY2x1ZGVGb3JtIiwicmVzZXRUYWJsZVJvdyIsInRuYW1lIiwicmVzZXRUb0NvbGxhcHNlZCIsImRpc2FibGVTZWxlY3Rpb24iLCJkaXNhYmxlRXJyQ29sdW1uIiwiZm9ybUluRXJyb3IiLCJhRm9ybSIsImRlbGV0ZWRSb3ciLCJkYXlEYXRhQ29sbGFwc2VGbiIsImFwcGVuZCIsImlzUmVxdWlyZWRSZWNvcmRTZXQiLCJpc1JlcXVpcmVkUmVjb3JkIiwiaXNSZWNvcmRTaG93c091dHNpZGUiLCJpc1JlY29yZFNob3dzSW5zaWRlIiwicHJlSWQiLCJhZGRyZXNzUm9sZUN0cmwiLCJFTkdMSVNIIiwiY2hlY2tBbGxDb250cm9sc0ZvckR1cGxpY2F0ZXMiLCJyb2xlRm9ybSIsImNoZWNrRm9yRHVwbGljYXRlcyIsImlzRHVwbGljYXRlU2VsZWN0ZWQiLCJ0b0NoZWNrIiwicm9sZU1vZGVsIiwiYWxyZWFkeVNlbGVjdGVkIiwiZmllbGRzZXRJZCIsInJvbGVNaXNzaW5nSWQiLCJjb250YWN0Um9sZU1pc3NpbmdJZCIsImNoa01hbnVJZCIsImNoa01haWxJZCIsImNoa0JpbGxJZCIsImNoa01hbnVDb250YWN0SWQiLCJjaGtNYWlsQ29udGFjdElkIiwiY2hrQmlsbENvbnRhY3RJZCIsImNoa0ltcElkIiwiY2hrUmVQcmltSWQiLCJjaGtSZXBTZWNJZCIsImlzUmVxIiwiaXNTZWxlY3RlZCIsImluVXNlciIsImFsZXJ0cyIsInNob3dDTUVycm9yIiwiZHVwbGljYXRlUm9sZSIsImltcENvbXBhbnlJblVzZSIsIm9uZVNlbGVjdGVkIiwidXBkYXRlSW1wb3J0ZXJTdGF0ZSIsImltcG9ydGVyVXBkYXRlZCIsInVwZGF0ZU90aGVyU3RhdGUiLCJpc0R1cCIsIiRzZXRWYWxpZGl0eSIsInNob3dFcnJvck1pc3NpbmciLCJjbG9zZUFsZXJ0IiwiYWRkSW5zdHJ1Y3QiLCJpc0ZyZW5jaCIsImxlZ2VuZFRleHQiLCJjb250YWN0Q3RybCIsImdldENvbnRhY3RMaXN0cyIsImZpcnN0TmFtZUlkIiwibGFzdE5hbWVJZCIsImxhbmdDb3JyZXNwb25kSWQiLCJqb2JUaXRsZUlkIiwiZmF4SWQiLCJwaG9uZU51bWJlcklkIiwicGhvbmVFeHRJZCIsImNvbnRhY3RFbWFpbElkIiwicm91dGluZ0lkZW50aWZpZXJJZCIsImltcENvbXBhbnlOYW1lSWQiLCJsYW5nQ29ycmVzcHBvbmQiLCJmYXhSZXF1aXJlZCIsInBob25lUmVnIiwiZW1haWxSZWciLCJpbnB1dE1vZGVsT3B0aW9ucyIsImVtYWlsRXJyb3IiLCJwaG9uZUVycm9yIiwiZmF4RXJyb3IiLCJyb3V0aW5nSWRFcnJvciIsImFkZHJJbXBDb21wYW55TmFtZUVycm9yIiwidHlwcyIsImxhbmdMaXN0IiwiZmF4TWFuZGF0b3J5Iiwic2hvd1JvdXRpbmdJZEVyciIsImNvbnRhY3RGb3JtIiwiaGFzQWRkckltcENvbXBhbnkiLCJyb3V0aW5nSWRJbmRleCIsIkFwcGxJbmZvQ3RybCIsIk5FV19UWVBFIiwiQU1FTkRfVFlQRSIsIkFQUFJPVkVEX1RZUEUiLCJfc2V0Q29uZmlnSXRlbXMiLCJjb25maWdKc29uIiwiZmllbGRJZExhYmVsIiwiZmllbGRMZW5ndGgiLCJ0YWdOYW1lIiwibWluRmllbGRMZW5ndGgiLCJlcnJvck1zZyIsIm1pbkVycm9yTXNnIiwiaXNEb3NzaWVyIiwiZmllbGRJZCIsImNvbXBJZCIsImFwcGxUeXBlcyIsImluZm9Nb2RlbCIsImFwcGxpY2F0aW9uVHlwZVRleHQiLCJzZXRBc0luY29tcGxldGUiLCJtYXhFcnJvck1zZyIsIm1pbjZFcnJvciIsImlzRW1wdHkiLCJpc0luY29tcGxldGUiLCJjb25maWd1cmVJZEZpZWxkIiwic2hvd0FtZW5kTXNnIiwic2hvd0FtZW5kQnV0dG9uIiwiaXNIaWRlIiwiaXNFeHRlcm4iLCJzZXRBbWVuZFN0YXRlIiwic2V0VHlwZSIsImFWYWx1ZSIsImNvbXBhbnlNYWluQ3RybCIsImdldFJvbGVMaXN0cyIsImdvVG9FcnJvclN1bW1hcnkiLCJtYXN0ZXJFcnJvciIsIl9jcmVhdGVGaWxlbmFtZSIsImRyYWZ0X3ByZWZpeCIsImZpbmFsX3ByZWZpeCIsImZpbGVuYW1lIiwiY29tcGFueSIsIl90cmFuc2Zvcm1GaWxlIiwidXBkYXRlRGF0ZSIsImFwcGxpY2F0aW9uSW5mb1NlcnZpY2UiLCJjb21wYW55RW5yb2xGb3JtIiwiZGlzYWJsZVhNTFNhdmUiLCJpc0FwcHJvdmVkRXh0ZXJuYWwiLCJkaXNhYmxlRHJhZnRCdXR0b24iLCJkaXNhYmxlWE1MIiwiX3NldENvbXBsZXRlIiwiX2xvYWRGaWxlQ29udGVudCIsInNldEFtZW5kIiwiJHNldERpcnR5Iiwic2hvd0FtZW5kTm90ZSIsInByaXZhY3lTdGF0ZW1lbnRJRCIsInR5cGVJZCIsImZvcm1BbWVuZFR5cGUiLCJzYXZlWE1MTGFiZWwiLCJ1cGRhdGVWYWx1ZXMiLCJzaG93Q29udGVudCIsImNvbmZpZ0NvbXBhbnkiLCJmb3JtVHlwZUxpc3QiLCJpbmRleExpc3QiLCJwcml2YWN5U3RhdCIsImZvY3VzU3VtbWFyeSIsInJlcXVpcmVkT25seUVycm9yIiwiY29udGFjdFJlYy5jb250YWN0UmVjRm9ybSIsImFkZHJlc3NSZWMuYWRkcmVzc1JlY0Zvcm0iLCJjb250YWN0Um9sZXNWYWxpZCIsImFkZHJlc3NSb2xlc1ZhbGlkIiwiaW1wb3J0ZXJJZFZhbGlkIiwiY29udGFjdEltcG9ydGVyVmFpbGQiLCJpbml0VXNlciIsInNhdmVKc29uIiwid3JpdGVSZXN1bHQiLCJzYXZlWE1MIiwiYWxlcnQiLCJzZXRBcHBsVHlwZSIsIm9uVXBkYXRlQWRkcmVzc0xpc3QiLCJ1cGRhdGVBZGRyZXNzUmVjb3JkIiwib25VcGRhdGVDb250YWN0TGlzdCIsIiR1bnRvdWNoZWQiXSwibWFwcGluZ3MiOiJDQUFBLFdBQ0EsWUFDQUEsU0FDQUMsT0FBQSxjQUNBLHlCQUNBLGNBQ0EscUJBQ0Esb0JBSUEsV0FDQSxZQUtBLFNBQUFDLGtCQUVBLEdBQUFDLElBQUFDLElBQ0FELElBQUFFLFNBQUEsTUFQQUwsUUFDQUMsT0FBQSxjQUNBSyxXQUFBLGlCQUFBSixtQkFVQSxXQUNBLFlBQ0FGLFNBQ0FDLE9BQUEsY0FDQU0sUUFBQSxxQkFBQSxvQkFBQSxTQUFBQyxtQkFBQUMsbUJBRUFBLGtCQUFBQyxXQUNBQyxTQUFBLEVBQ0FDLGFBQUEsRUFDQUMsY0FBQSxJQUVBTCxtQkFBQU0sa0JBQUEsTUFDQU4sbUJBQUFPLFVBQUEsY0FFQVAsbUJBQUFRLGtCQUFBLEdBQ0FSLG1CQUFBUyx5QkFBQSxNQUNBVCxtQkFBQVUsa0JBQUEsU0N6Q0FsQixRQUFBQyxPQUFBLG1CQUFBTSxRQUFBLHFCQUFBLFNBQUFDLG9CQUNBQSxtQkFBQVcsYUFBQSxNQUNBQyxLQUFBLGVBQ0FDLFFBQUEsVUFDQUMsU0FBQSxXQUNBQyxPQUFBLGNBQ0FDLFVBQUEsb0JBQ0FDLE1BQUEsUUFDQUMsT0FBQSxpQkFDQUMsSUFBQSxXQUNBQyxRQUFBLFVBQ0FDLFlBQUEsY0FDQUMsVUFBQSxlQUNBQyxVQUFBLGVBQ0FDLFlBQUEsaUJBQ0FDLFVBQUEsc0JBQ0FDLGFBQUEsa0JBQ0FDLGlCQUFBLDRD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LEdBQUFzbkQsb0JBQUEsU0FBQTVyQyxTQUNBMWIsR0FBQThrRCxRQUFBL3ZCLFlBQUFyWixTQVlBMWIsR0FBQWtrRCxTQUFBLFdBQ0EsTUFBQWxrRCxJQUFBMHpDLFdBQUFoRyxlQVlBMXRDLEdBQUFzZ0QsV0FBQSxTQUFBNW5DLE9BQ0E3WSxRQUFBNi9CLFlBQUFobkIsUUFDQUEsTUFBQTFZLEdBQUEyL0MsT0FBQTdrQyxTQUNBOWEsR0FBQTIvQyxPQUFBam5DLFFBQUEsSUFRQTFZLEdBQUF1Z0QsWUFBQSxTQUFBN25DLE9BRUE3WSxRQUFBNi9CLFlBQUFobkIsUUFDQUEsTUFBQTFZLEdBQUEyL0MsT0FBQTdrQyxTQUNBOWEsR0FBQTIvQyxPQUFBam5DLFFBQUEsSUFPQTFZLEdBQUFvc0MsbUJBQUEsV0FDQXBzQyxHQUFBaXJDLGNBQUFqckMsR0FBQWlyQyxjQUFBLEdBT0FqckMsR0FBQXdnRCxTQUFBLFdBQ0EsTUFBQXhnRCxJQUFBd2EsT0FBQTRqQyxTQUdBcCtDLEdBQUFrb0MsS0FBQSxXQUNBL1QsUUFBQTJhLElBQUF4UixTQWtCQXQ5QixHQUFBNC9CLFVBQUEsU0FBQXVKLE1BQ0EsUUFBQW5wQyxHQUFBZ3NDLHFCQUdBN0MsTUFBQUEsS0FBQW9lLGNBR0FwZSxLQUFBdEosVUFBQXNKLEtBQUFySixVQUFBOS9CLEdBQUFnc0Msa0JBQUE3QyxLQUFBdEosV0E3WUFoZ0MsUUFDQUMsT0FBQSxlQUNBNDlCLFVBQUEsa0JBQ0FDLFlBQUEseUVBQ0F4OUIsV0FBQW1rRCxnQkFDQTFtQixhQUFBLE9BQ0FDLFVBQ0EzOUIsU0FBQSxPQUlBb2tELGdCQUFBbm9DLFNBQUEsaUJBQUEseUJBQUEscUJBQUEsVUFBQSxTQUFBLGdCQUFBLGdCQUFBLGdCQUFBLGFBQUEsVUFBQSxlQUFBLGFBQUEsZ0JBQUEiLCJmaWxlIjoiY29tcGFueUFwcElOVC1lbl8yMDIwMDkwOV8xNTI1Lm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgnY29tcGFueUFwcCcsIFtcclxuICAgICAgICAgICAgJ3Bhc2NhbHByZWNodC50cmFuc2xhdGUnLFxyXG4gICAgICAgICAgICAnY29tcGFueU1haW4nLFxyXG4gICAgICAgICAgICAnY29tcGFueUxvYWRTZXJ2aWNlJyxcclxuICAgICAgICAgICAgJ3RyYW5zbGF0aW9ucydcclxuICAgICAgICBdKVxyXG59KSgpO1xyXG4vL1RPRE8gcmVwbGFjZSB3aXRoIHNlcnZpY2UgZm9yIGluY3JlbWVtbnRpbmcgdmVyc2lvblxyXG4oZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ2NvbXBhbnlBcHAnKVxyXG4gICAgICAgIC5jb250cm9sbGVyKCdNYWluQ29udHJvbGxlcicsIE1haW5Db250cm9sbGVyKTtcclxuXHJcbiAgICBmdW5jdGlvbiBNYWluQ29udHJvbGxlcigpIHtcclxuXHJcbiAgICAgICAgdmFyIHZtID0gdGhpcztcclxuICAgICAgICB2bS5mb3JtVHlwZSA9ICdJTlQnO1xyXG5cclxuICAgIH1cclxufSkoKTtcclxuXHJcbihmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgnY29tcGFueUFwcCcpXHJcbiAgICAgICAgLmNvbmZpZyhbJyR0cmFuc2xhdGVQcm92aWRlcicsJyRsb2NhdGlvblByb3ZpZGVyJywgZnVuY3Rpb24gKCR0cmFuc2xhdGVQcm92aWRlciwkbG9jYXRpb25Qcm92aWRlcikge1xyXG5cclxuICAgICAgICAgICAgJGxvY2F0aW9uUHJvdmlkZXIuaHRtbDVNb2RlKFxyXG4gICAgICAgICAgICAgICAge2VuYWJsZWQgOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgIHJlcXVpcmVCYXNlOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICByZXdyaXRlTGlua3MgOiBmYWxzZX0pO1xyXG5cclxuICAgICAgICAgICAgJHRyYW5zbGF0ZVByb3ZpZGVyLnByZWZlcnJlZExhbmd1YWdlKCdlbicpO1xyXG4gICAgICAgICAgICAkdHJhbnNsYXRlUHJvdmlkZXIudXNlTG9hZGVyKCdjdXN0b21Mb2FkJyk7XHJcbiAgICAgICAgICAgIC8vdGhpcyBwcmV2ZW50cyBjb25mbGljdHMgd2l0aCBuZ01lc3NhZ2VcclxuICAgICAgICAgICAgJHRyYW5zbGF0ZVByb3ZpZGVyLmRpcmVjdGl2ZVByaW9yaXR5KDEpO1xyXG4gICAgICAgICAgICAkdHJhbnNsYXRlUHJvdmlkZXIudXNlU2FuaXRpemVWYWx1ZVN0cmF0ZWd5KG51bGwpO1xyXG4gICAgICAgICAgICAkdHJhbnNsYXRlUHJvdmlkZXIuZm9yY2VBc3luY1JlbG9hZCh0cnVlKTsgLy9uZWVkZWQgZm9yIHRoZSBjdXN0b20gbG9hZGVyXHJcbiAgICAgICAgfV0pO1xyXG59KSgpO1xyXG4iLCJhbmd1bGFyLm1vZHVsZShcInRyYW5zbGF0aW9uc1wiLCBbXSkuY29uZmlnKFtcIiR0cmFuc2xhdGVQcm92aWRlclwiLCBmdW5jdGlvbigkdHJhbnNsYXRlUHJvdmlkZXIpIHtcbiR0cmFuc2xhdGVQcm92aWRlci50cmFuc2xhdGlvbnMoXCJlblwiLCB7XHJcbiAgXCJDSVRZXCI6IFwiQ2l0eSBvciBUb3duXCIsXHJcbiAgXCJDT1VOVFJZXCI6IFwiQ291bnRyeVwiLFxyXG4gIFwiUFJPVklOQ0VcIjogXCJQcm92aW5jZVwiLFxyXG4gIFwiUE9TVEFMXCI6IFwiUG9zdGFsIENvZGVcIixcclxuICBcIlBST1ZTVEFURVwiOiBcIlByb3ZpbmNlIG9yIFN0YXRlXCIsXHJcbiAgXCJTVEFURVwiOiBcIlN0YXRlXCIsXHJcbiAgXCJTVFJFRVRcIjogXCJTdHJlZXQgQWRkcmVzc1wiLFxyXG4gIFwiWklQXCI6IFwiWmlwIENvZGVcIixcclxuICBcIkNPTVBBTllcIjogXCJDb21wYW55XCIsXHJcbiAgXCJBRERfQUREUkVTU1wiOiBcIkFkZCBBZGRyZXNzXCIsXHJcbiAgXCJDSVRZX1RPV05cIjogXCJDaXR5IG9yIFRvd25cIixcclxuICBcIlNBVkVfQUREUlwiOiBcIlNhdmUgQWRkcmVzc1wiLFxyXG4gIFwiREVMRVRFX0FERFJcIjogXCJEZWxldGUgQWRkcmVzc1wiLFxyXG4gIFwiQUREUl9JTkZPXCI6IFwiQWRkcmVzcyBJbmZvcm1hdGlvblwiLFxyXG4gIFwiQUREUl9ERVRBSUxTXCI6IFwiQWRkcmVzcyBEZXRhaWxzXCIsXHJcbiAgXCJBRERSX1JPTEVfTEVHRU5EXCI6IFwiU2VsZWN0IG9uZSBvciBtb3JlIHJvbGVzIGZvciB0aGlzIGNvbXBhbnlcIixcclxuICBcIkFERFJfUkVQX1JPTEVfTEVHRU5EXCI6IFwiU2VsZWN0IG9uZSBvciBtb3JlIHJvbGVzIGZvciB0aGlzIGNvbXBhbnkgcmVwcmVzZW50YXRpdmVcIixcclxuICBcIlBST0RVQ1RTX0lNUE9SVEVEXCI6IFwiSW1wb3J0ZWQgUHJvZHVjdHNcIixcclxuICBcIlBST0RVQ1RfVFlQRVNcIjpcIlByb2R1Y3RzIGltcG9ydGVkIGJ5IHRoaXMgQ29tcGFueVwiLFxyXG4gIFwiQUxMX1BST0RVQ1RTXCI6IFwiQWxsIFByb2R1Y3RzXCIsXHJcbiAgXCJTRUxFQ1RFRF9QUk9EVUNUU1wiOlwiU29tZSBQcm9kdWN0c1wiLFxyXG4gIFwiSURFTlRJRllfUFJPRFVDVFNcIjogXCJQcm92aWRlIHRoZSBEb3NzaWVyIElkZW50aWZpZXJzIGZvciB0aGUgcHJvZHVjdHMgdGhhdCBhcmUgaW1wb3J0ZWQgYnkgdGhpcyBDb21wYW55XCIsXHJcbiAgXCJBRERfRE9TU0lFUl9JRFwiOlwiQWRkIERvc3NpZXIgSURcIixcclxuICBcIklNUE9SVEVSX05PTkNETlwiOlwiUGxlYXNlIGVuc3VyZSB5b3UgaW5kaWNhdGUgYSBDYW5hZGlhbiBJbXBvcnRlci5cIixcclxuICBcIkNPVU5UUllfQ0hPT1NFXCI6XCJDaG9vc2UgYSBjb3VudHJ5XCIsXHJcbiAgXCJDT1VOVFJZX1NFQVJDSFwiOlwiU2VsZWN0IG9yIFNlYXJjaCBmb3IgY291bnRyeVwiLFxyXG4gIFwiUFJPVklOQ0VMSVNUXCI6XCJQcm92aW5jZSBvciBTdGF0ZVwiXHJcbn0pO1xuXG4kdHJhbnNsYXRlUHJvdmlkZXIudHJhbnNsYXRpb25zKFwiZnJcIiwge1xyXG4gIFwiQ0lUWVwiOiBcIlZpbGxlXCIsXHJcbiAgXCJDT1VOVFJZXCI6IFwiUGF5c1wiLFxyXG4gIFwiUFJPVklOQ0VcIjogXCJQcm92aW5jZVwiLFxyXG4gIFwiUE9TVEFMXCI6IFwiQ29kZSBwb3N0YWxcIixcclxuICBcIlBST1ZTVEFURVwiOiBcIlByb3ZpbmNlIG91IMOpdGF0XCIsXHJcbiAgXCJTVEFURVwiOiBcIsOJdGF0XCIsXHJcbiAgXCJTVFJFRVRcIjogXCJSdWVcIixcclxuICBcIlpJUFwiOiBcIkNvZGUgWklQXCIsXHJcbiAgXCJDT01QQU5ZXCI6IFwiQ29tcGFnbmllXCIsXHJcbiAgXCJBRERfQUREUkVTU1wiOiBcIkFqb3V0ZXIgQWRkcmVzc2VcIixcclxuICBcIkNJVFlfVE9XTlwiOiBcIlZpbGxlXCIsXHJcbiAgXCJTQVZFX0FERFJcIjogXCJFbnJlZ2lzdHJlciBsJ2FkcmVzc2VcIixcclxuICBcIkRFTEVURV9BRERSXCI6IFwiU3VwcHJpbWVyIEFkZHJlc3NlXCIsXHJcbiAgXCJBRERSX0lORk9cIjogXCJJbmZvcm1hdGlvbiBkJ2FkcmVzc2VcIixcclxuICBcIkFERFJfREVUQUlMU1wiOiBcIkTDqXRhaWxzIGRlIGwnYWRyZXNzZVwiLFxyXG4gIFwiQUREUl9ST0xFX0xFR0VORFwiOiBcIlPDqWxlY3Rpb25uZXIgdW4gb3UgcGx1c2lldXJzIHLDtGxlcyBwb3VyIGNldHRlIGNvbXBhZ25pZVwiLFxyXG4gIFwiQUREUl9SRVBfUk9MRV9MRUdFTkRcIjogXCJTw6lsZWN0aW9ubmVyIHVuIG91IHBsdXNpZXVycyByw7RsZXMgcG91ciBjZSByZXByw6lzZW50YW50IGRlIGxhIGNvbXBhZ25pZVwiLFxyXG4gIFwiUFJPRFVDVFNfSU1QT1JURURcIjogXCJQcm9kdWl0cyBpbXBvcnTDqVwiLFxyXG4gIFwiUFJPRFVDVF9UWVBFU1wiOlwiUHJvZHVpdHMgaW1wb3J0w6kgcGFyIGNldHRlIGNvbXBhZ25pZVwiLFxyXG4gIFwiQUxMX1BST0RVQ1RTXCI6IFwiVG91cyBsZXMgcHJvZHVpdHNcIixcclxuICBcIlNFTEVDVEVEX1BST0RVQ1RTXCI6XCJDZXJ0YWluIHByb2R1aXRzXCIsXHJcbiAgXCJJREVOVElGWV9QUk9EVUNUU1wiOiBcIkZvdXJuaXIgbGVzIG51bcOpcm9zIGRlIGRvc3NpZXIgcG91ciBsZXMgcHJvZHVpdHMgaW1wb3J0w6lzIHBhciBjZXR0ZSBjb21wYWduaWVcIixcclxuICBcIkFERF9ET1NTSUVSX0lEXCI6XCJBam91dGVyIHVuIG51bcOpcm8gZGUgZG9zc2llclwiLFxyXG4gIFwiSU1QT1JURVJfTk9OQ0ROXCI6XCJWZXVpbGxleiB2b3VzIGFzc3VyZXIgZCdpbmRpcXVlciB1biBpbXBvcnRhdGV1ciBjYW5hZGllbi5cIixcclxuICBcIkNPVU5UUllfQ0hPT1NFXCI6XCJDaG9pc2lyIHVuIHBheXNcIixcclxuICBcIkNPVU5UUllfU0VBUkNIXCI6XCJTZWxlY3Rpb25uZXIgb3UgcmVjaGVyY2hlciBsZSBwYXlzXCIsXHJcbiAgXCJQUk9WSU5DRUxJU1RcIjpcIlByb3ZpbmNlIG9yIFN0YXRlXCJcclxufSk7XG5cbiR0cmFuc2xhdGVQcm92aWRlci50cmFuc2xhdGlvbnMoXCJlblwiLCB7XHJcblwiQUJcIjpcIkFsYmVydGFcIixcclxuXCJCQ1wiOlwiQnJpdGlzaCBDb2x1bWJpYVwiLFxyXG5cIk1CXCI6XCJNYW5pdG9iYVwiLFxyXG5cIk5CXCI6XCJOZXcgQnJ1bnN3aWNrXCIsXHJcblwiTkxcIjpcIk5ld2ZvdW5kbGFuZCBhbmQgTGFicmFkb3JcIixcclxuXCJOVFwiOlwiTm9ydGh3ZXN0IFRlcnJpdG9yaWVzXCIsXHJcblwiTlNcIjpcIk5vdmEgU2NvdGlhXCIsXHJcblwiTlVcIjpcIk51bmF2dXRcIixcclxuXCJPTlwiOlwiT250YXJpb1wiLFxyXG5cIlBFXCI6XCJQcmluY2UgRWR3YXJkIElzbGFuZFwiLFxyXG5cIlFDXCI6XCJRdWViZWNcIixcclxuXCJTS1wiOlwiU2Fza2F0Y2hld2FuXCIsXHJcblwiWVRcIjpcIll1a29uXCIsXHJcblwiQUxcIjpcIkFsYWJhbWFcIixcclxuXCJBS1wiOlwiQWxhc2thXCIsXHJcblwiQVpcIjpcIkFyaXpvbmFcIixcclxuXCJBUlwiOlwiQXJrYW5zYXNcIixcclxuXCJDQVwiOlwiQ2FsaWZvcm5pYVwiLFxyXG5cIkNPXCI6XCJDb2xvcmFkb1wiLFxyXG5cIkNUXCI6XCJDb25uZWN0aWN1dFwiLFxyXG5cIkRFXCI6XCJEZWxhd2FyZVwiLFxyXG5cIkRDXCI6XCJEaXN0cmljdCBvZiBDb2x1bWJpYVwiLFxyXG5cIkZMXCI6XCJGbG9yaWRhXCIsXHJcblwiR0FcIjpcIkdlb3JnaWFcIixcclxuXCJISVwiOlwiSGF3YWlpXCIsXHJcblwiSURcIjpcIklkYWhvXCIsXHJcblwiSUxcIjpcIklsbGlub2lzXCIsXHJcblwiSU5cIjpcIkluZGlhbmFcIixcclxuXCJJQVwiOlwiSW93YVwiLFxyXG5cIktTXCI6XCJLYW5zYXNcIixcclxuXCJLWVwiOlwiS2VudHVja3lcIixcclxuXCJMQVwiOlwiTG91aXNpYW5hXCIsXHJcblwiTUVcIjpcIk1haW5lXCIsXHJcblwiTURcIjpcIk1hcnlsYW5kXCIsXHJcblwiTUFcIjpcIk1hc3NhY2h1c2V0dHNcIixcclxuXCJNSVwiOlwiTWljaGlnYW5cIixcclxuXCJNTlwiOlwiTWlubmVzb3RhXCIsXHJcblwiTVNcIjpcIk1pc3Npc3NpcHBpXCIsXHJcblwiTU9cIjpcIk1pc3NvdXJpXCIsXHJcblwiTVRcIjpcIk1vbnRhbmFcIixcclxuXCJORVwiOlwiTmVicmFza2FcIixcclxuXCJOVlwiOlwiTmV2YWRhXCIsXHJcblwiTkhcIjpcIk5ldyBIYW1wc2hpcmVcIixcclxuXCJOSlwiOlwiTmV3IEplcnNleVwiLFxyXG5cIk5NXCI6XCJOZXcgTWV4aWNvXCIsXHJcblwiTllcIjpcIk5ldyBZb3JrXCIsXHJcblwiTkNcIjpcIk5vcnRoIENhcm9saW5hXCIsXHJcblwiTkRcIjpcIk5vcnRoIERha290YVwiLFxyXG5cIk9IXCI6XCJPaGlvXCIsXHJcblwiT0tcIjpcIk9rbGFob21hXCIsXHJcblwiT1JcIjpcIk9yZWdvblwiLFxyXG5cIlBBXCI6XCJQZW5uc3lsdmFuaWFcIixcclxuXCJSSVwiOlwiUmhvZGUgSXNsYW5kXCIsXHJcblwiU0NcIjpcIlNvdXRoIENhcm9saW5hXCIsXHJcblwiU0RcIjpcIlNvdXRoIERha290YVwiLFxyXG5cIlROXCI6XCJUZW5uZXNzZWVcIixcclxuXCJUWFwiOlwiVGV4YXNcIixcclxuXCJVVFwiOlwiVXRhaFwiLFxyXG5cIlZUXCI6XCJWZXJtb250XCIsXHJcblwiVkFcIjpcIlZpcmdpbmlhXCIsXHJcblwiV0FcIjpcIldhc2hpbmd0b25cIixcclxuXCJXVlwiOlwiV2VzdCBWaXJnaW5pYVwiLFxyXG5cIldJXCI6XCJXaXNjb25zaW5cIixcclxuXCJXWVwiOlwiV3lvbWluZ1wiXHJcbn1cclxuXHJcbik7XG5cbiR0cmFuc2xhdGVQcm92aWRlci50cmFuc2xhdGlvbnMoXCJmclwiLCB7XHJcblwiQUJcIjpcIkFsYmVydGFcIixcclxuXCJCQ1wiOlwiQ29sb21iaWUtQnJpdGFubmlxdWVcIixcclxuXCJQRVwiOlwiw45sZS1kdS1QcmluY2Utw4lkb3VhcmRcIixcclxuXCJNQlwiOlwiTWFuaXRvYmFcIixcclxuXCJOQlwiOlwiTm91dmVhdS1CcnVuc3dpY2tcIixcclxuXCJOU1wiOlwiTm91dmVsbGUtw4ljb3NzZVwiLFxyXG5cIk5VXCI6XCJOdW5hdnV0XCIsXHJcblwiT05cIjpcIk9udGFyaW9cIixcclxuXCJRQ1wiOlwiUXXDqWJlY1wiLFxyXG5cIlNLXCI6XCJTYXNrYXRjaGV3YW5cIixcclxuXCJOTFwiOlwiVGVycmUtTmV1dmUgZXQgTGFicmFkb3JcIixcclxuXCJOVFwiOlwiVGVycml0b2lyZXMgZHUgTm9yZC1PdWVzdFwiLFxyXG5cIllUXCI6XCJZdWtvblwiLFxyXG5cIkFMXCI6XCJBbGFiYW1hXCIsXHJcblwiQUtcIjpcIkFsYXNrYVwiLFxyXG5cIkFaXCI6XCJBcml6b25hXCIsXHJcblwiQVJcIjpcIkFya2Fuc2FzXCIsXHJcblwiQ0FcIjpcIkNhbGlmb3JuaWVcIixcclxuXCJOQ1wiOlwiQ2Fyb2xpbmUgZHUgbm9yZFwiLFxyXG5cIlNDXCI6XCJDYXJvbGluZSBkdSBzdWRcIixcclxuXCJDT1wiOlwiQ29sb3JhZG9cIixcclxuXCJDVFwiOlwiQ29ubmVjdGljdXRcIixcclxuXCJORFwiOlwiRGFrb3RhIGR1IG5vcmRcIixcclxuXCJTRFwiOlwiRGFrb3RhIGR1IHN1ZFwiLFxyXG5cIkRFXCI6XCJEZWxhd2FyZVwiLFxyXG5cIkRDXCI6XCJEaXN0cmljdCBkZSBDb2x1bWJpYVwiLFxyXG5cIkZMXCI6XCJGbG9yaWRlXCIsXHJcblwiR0FcIjpcIkfDqW9yZ2llXCIsXHJcblwiSElcIjpcIkhhd2FpaVwiLFxyXG5cIklEXCI6XCJJZGFob1wiLFxyXG5cIklMXCI6XCJJbGxpbm9pc1wiLFxyXG5cIklOXCI6XCJJbmRpYW5hXCIsXHJcblwiSUFcIjpcIklvd2FcIixcclxuXCJLU1wiOlwiS2Fuc2FzXCIsXHJcblwiS1lcIjpcIktlbnR1Y2t5XCIsXHJcblwiTllcIjpcIkwnw6l0YXQgZGUgTmV3IFlvcmtcIixcclxuXCJXQVwiOlwiTCfDqXRhdCBkZSB3YXNoaW5ndG9uXCIsXHJcblwiTEFcIjpcIkxvdWlzaWFuZVwiLFxyXG5cIk1FXCI6XCJNYWluZVwiLFxyXG5cIk1EXCI6XCJNYXJ5bGFuZFwiLFxyXG5cIk1BXCI6XCJNYXNzYWNodXNldHRzXCIsXHJcblwiTUlcIjpcIk1pY2hpZ2FuXCIsXHJcblwiTU5cIjpcIk1pbm5lc290YVwiLFxyXG5cIk1TXCI6XCJNaXNzaXNzaXBwaVwiLFxyXG5cIk1PXCI6XCJNaXNzb3VyaVwiLFxyXG5cIk1UXCI6XCJNb250YW5hXCIsXHJcblwiTkVcIjpcIk5lYnJhc2thXCIsXHJcblwiTlZcIjpcIk5ldmFkYVwiLFxyXG5cIk5IXCI6XCJOZXcgSGFtcHNoaXJlXCIsXHJcblwiTkpcIjpcIk5ldyBKZXJzZXlcIixcclxuXCJOTVwiOlwiTm91dmVhdS1tZXhpcXVlXCIsXHJcblwiT0hcIjpcIk9oaW9cIixcclxuXCJPS1wiOlwiT2tsYWhvbWFcIixcclxuXCJPUlwiOlwiT3JlZ29uXCIsXHJcblwiUEFcIjpcIlBlbm5zeWx2YW5pZVwiLFxyXG5cIlJJXCI6XCJSaG9kZSBJc2xhbmRcIixcclxuXCJUTlwiOlwiVGVubmVzc2VlXCIsXHJcblwiVFhcIjpcIlRleGFzXCIsXHJcblwiVVRcIjpcIlV0YWhcIixcclxuXCJWVFwiOlwiVmVybW9udFwiLFxyXG5cIlZBXCI6XCJWaXJnaW5pZVwiLFxyXG5cIldWXCI6XCJWaXJnaW5pZS1vY2NpZGVudGFsZVwiLFxyXG5cIldJXCI6XCJXaXNjb25zaW5cIixcclxuXCJXWVwiOlwiV3lvbWluZ1wiXHJcbn0pO1xuXG4kdHJhbnNsYXRlUHJvdmlkZXIudHJhbnNsYXRpb25zKFwiZW5cIiwge1xyXG4gIFwiRklSU1ROQU1FXCI6IFwiRmlyc3QgTmFtZVwiLFxyXG4gIFwiTEFTVE5BTUVcIjogXCJMYXN0IE5hbWVcIixcclxuICBcIklOSVRJQUxTXCI6IFwiSW5pdGlhbHNcIixcclxuICBcIkxBTkdDT1JSRVNQT05EXCI6IFwiTGFuZ3VhZ2Ugb2YgQ29ycmVzcG9uZGVuY2VcIixcclxuICBcIkpPQlRJVExFXCI6IFwiSm9iIFRpdGxlXCIsXHJcbiAgXCJTQUxVVEFUSU9OXCI6IFwiU2FsdXRhdGlvblwiLFxyXG4gIFwiU0FMVVRfTVJcIjogXCJNci5cIixcclxuICBcIlNBTFVUX01TXCI6IFwiTXMuXCIsXHJcbiAgXCJTQUxVVF9EUlwiOiBcIkRyLlwiLFxyXG4gIFwiU0FMVVRfTVJTXCI6IFwiTXJzLlwiLFxyXG4gIFwiUk9MRV9QUklNQVJZXCI6IFwiUHJpbWFyeVwiLFxyXG4gIFwiUk9MRV9TRUNPTkRBUllcIjogXCJBbHRlcm5hdGVcIixcclxuICBcIkNPTlRBQ1RFTUFJTFwiOiAgXCJFbWFpbFwiLFxyXG4gIFwiRkFYX05VTUJFUlwiOiBcIkZheCBOdW1iZXJcIixcclxuICBcIlBIT05FX0VYVFwiOiBcIlBob25lIEV4dGVuc2lvblwiLFxyXG4gIFwiUk9MRVNcIjogXCJSb2xlc1wiLFxyXG4gIFwiUEhPTkVOVU1CRVJcIjogXCJQaG9uZSBOdW1iZXJcIixcclxuICBcIkNPTlRBQ1RfSU5GT1wiOiBcIkNvbXBhbnkgUmVwcmVzZW50YXRpdmUgSW5mb3JtYXRpb25cIixcclxuICAgXCJSRVBfQ09OVEFDVFwiOiAgXCJSZWd1bGF0b3J5IEVucm9sbWVudCBQcm9jZXNzIENvbnRhY3RcIixcclxuICBcIk9ORV9ST0xFXCI6IFwiUm9sZVwiLFxyXG4gIFwiQ09OVEFDVF9ERVRBSUxTXCI6IFwiQ29tcGFueSBSZXByZXNlbnRhdGl2ZSBEZXRhaWxzXCIsXHJcbiAgXCJBRERfQ09OVEFDVFwiOiBcIkFkZCBSRVAgQ29udGFjdFwiLFxyXG4gIFwiQ09OVEFDVF9ST0xFX0xFR0VORFwiOiBcIlNlbGVjdCBvbmUgb3IgbW9yZSByb2xlcyBmb3IgdGhpcyBjb21wYW55IHJlcHJlc2VudGF0aXZlXCIsXHJcbiAgXCJDT05UQUNUX1JPTEVfSU5TVFJVQ1RcIjpcIkNvbXBhbnkgUmVwcmVzZW50YXRpdmUgUm9sZSBJbnN0cnVjdGlvbnNcIixcclxuICBcIkFERF9SRVBSRVNcIjogXCJBZGQgQ29tcGFueSBSZXByZXNlbnRhdGl2ZVwiLFxyXG4gIFwiREVMRVRFX1JFUFJFU1wiOiBcIkRlbGV0ZSBDb21wYW55IFJlcC5cIixcclxuICBcIlNBVkVfUkVQUkVTXCI6IFwiU2F2ZSBDb21wYW55IFJlcC5cIixcclxuICBcIklNUF9DT01QQU5ZX05BTUVcIjogXCJDYW5hZGlhbiBJbXBvcnRlciBDb21wYW55IE5hbWVcIlxyXG59KTtcblxuJHRyYW5zbGF0ZVByb3ZpZGVyLnRyYW5zbGF0aW9ucyhcImZyXCIsIHtcclxuICBcIkZJUlNUTkFNRVwiOiBcIlByw6lub21cIixcclxuICBcIkxBU1ROQU1FXCI6IFwiTm9tIGRlIGZhbWlsbGVcIixcclxuICBcIklOSVRJQUxTXCI6IFwiSW5pdGlhbGVzXCIsXHJcbiAgXCJMQU5HQ09SUkVTUE9ORFwiOiBcIkxhbmd1ZSBkZSBjb3JyZXNwb25kYW5jZVwiLFxyXG4gIFwiSk9CVElUTEVcIjogXCJUaXRyZVwiLFxyXG4gIFwiU0FMVVRBVElPTlwiOiBcIkFwcGVsXCIsXHJcbiAgXCJTQUxVVF9NUlwiOiBcIk0uXCIsXHJcbiAgXCJTQUxVVF9NU1wiOiBcIk1tZVwiLFxyXG4gIFwiU0FMVVRfRFJcIjogXCJEci5cIixcclxuICBcIlNBTFVUX01SU1wiOiBcIk1sbGVcIixcclxuICBcIlJPTEVfUFJJTUFSWVwiOiBcIlByaW1haXJlXCIsXHJcbiAgXCJST0xFX1NFQ09OREFSWVwiOiBcIkFsdGVybmVyXCIsXHJcbiAgXCJDT05UQUNURU1BSUxcIjogXCJDb3VycmllbFwiLFxyXG4gIFwiRkFYX05VTUJFUlwiOiBcIk51bcOpcm8gZGUgdMOpbMOpY29waWV1clwiLFxyXG4gIFwiUEhPTkVfRVhUXCI6IFwiRXh0ZW5zaW9uIGRlIHTDqWzDqXBob25lXCIsXHJcbiAgXCJBRERSX1JPTEVTXCI6XCJSw7RsZXNcIixcclxuICBcIlBIT05FTlVNQkVSXCI6IFwiTnVtw6lybyBkZSB0w6lsw6lwaG9uZVwiLFxyXG4gIFwiQ09OVEFDVF9JTkZPXCI6IFwiUmVuc2VpZ25lbWVudHMgc3VyIGxlIHJlcHLDqXNlbnRhbnQgZGUgbGEgY29wbXBhZ25pZVwiLFxyXG4gIFwiUkVQX0NPTlRBQ1RcIjogIFwiUGVyc29ubmUtcmVzc291cmNlIHBvdXIgbGUgUElSXCIsXHJcbiAgXCJPTkVfUk9MRVwiOiBcIlLDtGxlXCIsXHJcbiAgXCJDT05UQUNUX0RFVEFJTFNcIjogXCJEw6l0YWlscyBkdSByZXByw6lzZW50YW50IGRlIGxhIGNvbXBhZ25pZVwiLFxyXG4gIFwiQUREX0NPTlRBQ1RcIjogXCJBam91dGVyIGxhIHBlcnNvbm5lLXJlc3NvdXJjZSBwb3VyIGxlIFBJUlwiLFxyXG4gIFwiQ09OVEFDVF9ST0xFX0xFR0VORFwiOiBcIlPDqWxlY3Rpb25uZXIgdW4gb3UgcGx1c2lldXJzIHLDtGxlcyBwb3VyIGNlIHJlcHLDqXNlbnRhbnQgZGUgbGEgY29tcGFnbmllXCIsXHJcbi8vICBcIkNPTlRBQ1RfUk9MRV9JTlNUUlVDVFwiOlwiZnJfQ29tcGFueSBSZXByZXNlbnRhdGl2ZSBSb2xlIEluc3RydWN0aW9uc1wiLFxyXG4gIFwiQUREX1JFUFJFU1wiOiBcIkFqb3V0ZXIgdW4gcmVwcsOpc2VudGFudCBkZSBsYSBjb21wYWduaWVcIixcclxuICBcIkRFTEVURV9SRVBSRVNcIjogXCJTdXBwcmltZXIgbGUgcmVwcsOpc2VudGFudCBkZSBsYSBjb21wYWduaWVcIixcclxuICBcIlNBVkVfUkVQUkVTXCI6IFwiRW5yZWdpc3RyZXIgbGUgcmVwcsOpc2VudGFudCBkZSBsYSBjb21wYWduaWVcIixcclxuICBcIlJPTEVTXCI6IFwiUsO0bGVzXCIsXHJcbiAgXCJJTVBfQ09NUEFOWV9OQU1FXCI6IFwiTm9tIGRlIGxhIGNvbXBhZ25pZSBkZSBsJ2ltcG9ydGF0ZXVyIGNhbmFkaWVuXCJcclxufSk7XG5cbiR0cmFuc2xhdGVQcm92aWRlci50cmFuc2xhdGlvbnMoXCJlblwiLCB7XHJcbiAgXCJBUFBMX1NUQVRVU1wiOiBcIkVucm9sbWVudCBTdGF0dXNcIixcclxuICBcIkVOUk9MX1ZFUlNJT05cIjogXCJFbnJvbG1lbnQgVmVyc2lvblwiLFxyXG4gIFwiREFURV9TQVZFRFwiOiBcIkRhdGUgTGFzdCBTYXZlZFwiLFxyXG4gIFwiQU1FTkRfRU5ST0xcIjogIFwiQW1lbmQgRW5yb2xtZW50XCIsXHJcbiAgXCJBTUVORF9NU0dcIjpcIkVkaXQgcmVjb3JkcyB0byBiZSBhbWVuZGVkIGJlbG93LlwiLFxyXG4gIFwiUkVBU09OX0FNRU5EXCI6XCJSZWFzb24gZm9yIGFtZW5kbWVudFwiXHJcbn0pO1xuXG4kdHJhbnNsYXRlUHJvdmlkZXIudHJhbnNsYXRpb25zKFwiZnJcIiwge1xyXG4gIFwiQVBQTF9TVEFUVVNcIjogXCJTdGF0dXQgZGUgbCdpbnNjaXB0aW9uXCIsXHJcbiAgXCJFTlJPTF9WRVJTSU9OXCI6IFwiVmVyc2lvbiBkZSBsJ2luc2NyaXB0aW9uXCIsXHJcbiAgXCJEQVRFX1NBVkVEXCI6IFwi4oCJRGF0ZSBkdSBkZXJuaWVyIGVucmVnaXN0cmVtZW50XCIsXHJcbiAgXCJBTUVORF9FTlJPTFwiOiBcIk1vZGlmaWVyIGwnaW5zY3JpcHRpb25cIixcclxuICBcIkFNRU5EX01TR1wiOlwiQ2hhbmdlciBsZXMgZW5yZWdpc3RyZW1lbnRzIMOgIG1vZGlmaWVyIGNpLWRlc3NvdXMuXCIsXHJcbiAgXCJSRUFTT05fQU1FTkRcIjpcIlJhaXNvbiBwb3VyIGxhIG1vZGlmaWNhdGlvblwiXHJcbn0pO1xuXG4kdHJhbnNsYXRlUHJvdmlkZXIudHJhbnNsYXRpb25zKFwiZW5cIiwge1xyXG4gIFwiU0VMRUNUX0xPQURcIjogXCJTZWxlY3QgYSBmaWxlIHRvIGxvYWRcIixcclxuICBcIk1TR19TVUNDRVNTX0xPQURcIjogXCJUaGUgZmlsZSB3YXMgbG9hZGVkIHN1Y2Nlc3NmdWxseVwiLFxyXG4gIFwiTVNHX0VSUl9KU09OUEFSU0VcIjogXCJFcnJvcjogdGhlcmUgd2FzIGFuIGVycm9yIHBhcnNpbmcgdGhlIHdvcmtpbmcgZmlsZS5cIixcclxuICBcIk1TR19FUlJfWE1MUEFSU0VcIjogXCJFcnJvcjogdGhlcmUgd2FzIGFuIGVycm9yIHBhcnNpbmcgdGhlIGRyYWZ0IFhNTCBmaWxlLlwiLFxyXG4gIFwiTVNHX0VSUl9GSUxFX0xPQURcIjogXCJFcnJvcjogdGhlcmUgd2FzIGEgcHJvYmxlbSBsb2FkaW5nIHRoZSBmaWxlLlwiLFxyXG4gIFwiTVNHX0VSUl9GSUxFX1RZUEVcIjogXCJFcnJvcjogQW4gaW52YWxpZCBmaWxlIHR5cGUgd2FzIHNlbGVjdGVkLlwiLFxyXG4gIFwiTVNHX0VSUl9GT1JNX1RZUEVcIjogXCJFcnJvcjogdGhlIHdyb25nIGZvcm0gdHlwZSB3YXMgc2VsZWN0ZWQgZm9yIHRoaXMgZm9ybS5cIixcclxuICBcIk1TR19FUlJfQ0hFQ0tTVU1fRkFJTFwiOiBcIkVycm9yOiB0aGUgY2hlY2tzdW0gaW4gdGhlIGZpbGUgZG9lcyBub3QgbWF0Y2ggdGhlIGNhbGN1bGF0ZWQgY2hlY2tzdW1cIixcclxuICBcIk1TR19FUlJfRklMRV9WRVJTSU9OXCI6IFwiRXJyb3I6IEFuIGludmFsaWQgZmlsZSB2ZXJzaW9uIHdhcyBzZWxlY3RlZC5cIlxyXG59KTtcblxuJHRyYW5zbGF0ZVByb3ZpZGVyLnRyYW5zbGF0aW9ucyhcImZyXCIsIHtcclxuICBcIlNFTEVDVF9MT0FEXCI6IFwiU8OpbGVjdGlvbm5leiB1biBmaWNoaWVyIMOgIGNoYXJnZXJcIixcclxuICBcIk1TR19TVUNDRVNTX0xPQURcIjogXCJMZSBmaWNoaWVyIGEgw6l0w6kgY2hhcmfDqSBhdmVjIHN1Y2PDqHNcIixcclxuICBcIk1TR19FUlJfSlNPTlBBUlNFXCI6IFwiRXJyZXVyOiBpbCB5IGEgZXUgdW5lIGVycmV1ciBlbiBhbmFseXNhbnQgbGUgZmljaGllciBkZSB0cmF2YWlsLlwiLFxyXG4gIFwiTVNHX0VSUl9YTUxQQVJTRVwiOiBcIkVycmV1cjogaWwgeSBhdmFpdCB1bmUgZXJyZXVyIGQnYW5hbHlzZSBkdSBwcm9qZXQgZGUgZmljaGllciBYTUwsXCIsXHJcbiAgXCJNU0dfRVJSX0ZJTEVfTE9BRFwiOiBcIkVycmV1cjogaWwgeSBhIGV1IHVuIHByb2Jsw6htZSBsb3JzIGR1IGNoYXJnZW1lbnQgZHUgZmljaGllci5cIixcclxuICBcIk1TR19FUlJfRklMRV9UWVBFXCI6IFwiRXJyZXVyOiB1biB0eXBlIGRlIGZpY2hpZXIgaW52YWxpZGUgYSDDqXTDqSBzw6lsZWN0aW9ubsOpLlwiLFxyXG4gIFwiTVNHX0VSUl9GT1JNX1RZUEVcIjogXCJFcnJldXI6IGxlIHR5cGUgZGUgZm9ybXVsYWlyZSBpbmNvcnJlY3QgYSDDqXTDqSBzw6lsZWN0aW9ubsOpIHBvdXIgY2UgZm9ybXVsYWlyZS5cIixcclxuICBcIk1TR19FUlJfQ0hFQ0tTVU1fRkFJTFwiOiBcIkVycmV1cjogTGEgc29tbWUgZGUgY29udHLDtGxlIGRhbnMgbGUgZmljaGllciBuZSBjb3JyZXNwb25kIHBhcyDDoCBsYSBzb21tZSBkZSBjb250csO0bGUgY2FsY3Vsw6llLlwiLFxyXG4gIFwiTVNHX0VSUl9GSUxFX1ZFUlNJT05cIjogXCJFcnJldXI6IHVuIHZlcnNpb24gZGUgZmljaGllciBpbnZhbGlkZSBhIMOpdMOpIHPDqWxlY3Rpb25uw6kuXCJcclxufSk7XG5cbiR0cmFuc2xhdGVQcm92aWRlci50cmFuc2xhdGlvbnMoXCJlblwiLCB7XHJcbiAgXCJZXCI6IFwiWWVzXCIsXHJcbiAgXCJOXCI6IFwiTm9cIixcclxuICBcIkFERFwiOiBcIkFkZFwiLFxyXG4gIFwiREVMRVRFUk9XXCI6IFwiRGVsZXRlIFJvd1wiLFxyXG4gIFwiU0VMRUNURURST1dcIjogXCJTZWxlY3RlZCBSb3dcIixcclxuICBcIlJFUVVJUkVEXCI6IFwiKHJlcXVpcmVkKVwiLFxyXG4gIFwiUk9MRVNfU0VMRUNUXCI6IFwiU2VsZWN0IG9uZSBvciBtb3JlIHJvbGVzIGZvciB0aGlzIHJlY29yZFwiLFxyXG4gIFwiTkVXXCI6IFwiTmV3XCIsXHJcbiAgXCJBTUVORFwiOiBcIkFtZW5kXCIsXHJcbiAgXCJBUFBST1ZFRFwiOiBcIkFwcHJvdmVkXCIsXHJcbiAgXCJGSU5BTFwiOiBcIkZpbmFsXCIsXHJcbiAgXCJDTElDS19UT0dHTEVcIjogXCJDbGljayB0byB0b2dnbGUgdGhlIGNvbGxhcHNlIG9yIGV4cGFuZCBkZXRhaWxzIGZvciB0aGlzIGFkZHJlc3MuXCIsXHJcbiAgXCJBTUVORF9SRUNPUkRcIjogXCJBbWVuZCBSZWNvcmRcIixcclxuICBcImVuXCI6IFwiRW5nbGlzaFwiLFxyXG4gIFwiZnJcIjogXCJGcmVuY2hcIixcclxuICBcIkFERF9SRUNPUkRcIiA6IFwiQWRkIFJlY29yZFwiLFxyXG4gIFwiU0FWRV9SRUNPUkRcIjpcIlNhdmUgUmVjb3JkXCIsXHJcbiAgXCJERUxFVEVfUkVDT1JEXCI6XCJEZWxldGUgUmVjb3JkXCIsXHJcbiAgXCJDT1BZX1JFQ09SRFwiIDpcIkNvcHkgUmVjb3JkXCIsXHJcbiAgXCJESVNDQVJEX0NIQU5HRVNcIjogXCJEaXNjYXJkIENoYW5nZXNcIixcclxuICBcIlJFUFNFQ09OREFSWVwiOiBcIkFsdGVybmF0ZSBSZWd1bGF0b3J5IEVucm9sbWVudCBQcm9jZXNzIGNvbnRhY3RcIixcclxuICBcIlJFUFBSSU1BUllcIjogXCJSZWd1bGF0b3J5IEVucm9sbWVudCBQcm9jZXNzIGNvbnRhY3RcIixcclxuICBcIk1BSUxJTkdcIjogXCJSZWd1bGF0b3J5IE1haWxpbmcgLyBBbm51YWwgQ29udGFjdCBBZGRyZXNzXCIsXHJcbiAgXCJCSUxMSU5HXCI6IFwiQmlsbGluZyBBZGRyZXNzXCIsXHJcbiAgXCJNQU5VRkFDVFVSRVJcIjogXCJNYW51ZmFjdHVyZXIgLyBTcG9uc29yIE1haWxpbmcgQWRkcmVzc1wiLFxyXG4gIFwiSU1QT1JURVJfQUREUkVTU1wiOiBcIkNhbmFkaWFuIEltcG9ydGVyIE1haWxpbmcgQWRkcmVzc1wiLFxyXG4gIFwiQ0FOX0lNUFwiOlwiQ2FuYWRpYW4gSW1wb3J0ZXIgQ29udGFjdFwiLFxyXG4gIFwiQ09OVEFDVE1BSUxJTkdcIjogXCJSZWd1bGF0b3J5IE1haWxpbmcgLyBBbm51YWwgQ29udGFjdFwiLFxyXG4gIFwiQ09OVEFDVEJJTExJTkdcIjogXCJCaWxsaW5nIENvbnRhY3RcIixcclxuICBcIkNPTlRBQ1RNQU5VRkFDVFVSRVJcIjogXCJNYW51ZmFjdHVyZXIgLyBTcG9uc29yIENvbnRhY3RcIixcclxuICBcIkNPTlRBQ1RfSU1QT1JURVJcIjogXCJJbXBvcnRlciBDb250YWN0XCIsXHJcbiAgXCJBUFBST1ZFX0ZJTkFMXCI6IFwiR2VuZXJhdGUgRmluYWwgWE1MXCIsXHJcbiAgXCJTQVZFX0RSQUZUXCI6IFwiU2F2ZSBEcmFmdCBYTUxcIixcclxuICBcIlBSSU1BUllcIjogXCJQcmltYXJ5XCIsXHJcbiAgXCJTRUNPTkRBUllcIjogXCJBbHRlcm5hdGVcIixcclxuICBcIlRPR0dMRV9FWFBBTkRcIjogXCJDbGljayB0byB0b2dnbGUgY29sbGFwc2Ugb3IgZXhwYW5kIGRldGFpbHMgb2Ygcm93XCIsXHJcbiAgXCJDT05UUk9MX05VTUJFUlwiOiBcIkNvbnRyb2wgTnVtYmVyXCIsXHJcbiAgXCJSRVBfQ09OVEFDVF9JTkZPXCI6IFwiUmVndWxhdG9yeSBFbnJvbG1lbnQgUHJvY2VzcyBDb250YWN0IEluZm9ybWF0aW9uXCIsXHJcbiAgXCJTQVZFX0NPTlRBQ1RcIjpcIlNhdmUgQ29udGFjdFwiLFxyXG4gIFwiREVMRVRFX0NPTlRBQ1RcIjpcIkRlbGV0ZSBDb250YWN0XCIsXHJcbiAgXCJDT01QQU5ZX0lEXCI6IFwiQ29tcGFueSBJZGVudGlmaWVyXCIsXHJcbiAgXCJET1NTSUVSX0lEXCI6IFwiRG9zc2llciBJZGVudGlmaWVyXCIsXHJcbiAgXCJJTVBPUlRFUlwiOiBcIkltcG9ydGVyXCIsXHJcbiAgXCJJTVBPUlRFUklEXCI6XCJJbXBvcnRlciBDb21wYW55IElkZW50aWZpZXJcIixcclxuICBcIklNUE9SVEVSX0NPTVBBTllfTkFNRVwiOiBcIkltcG9ydGVyIENvbXBhbnkgTmFtZVwiLFxyXG4gIFwiSU1QT1JURVJfQ09NUEFOWV9JRF9JRlwiOiBcIkltcG9ydGVyIENvbXBhbnkgSWRlbnRpZmllciAoaWYgYXBwbGljYWJsZSlcIixcclxuICBcIklNUE9SVEVSX0NPTVBBTllfTkFNRV9JRlwiOiBcIkltcG9ydGVyIENvbXBhbnkgTmFtZSAoaWYgYXBwbGljYWJsZSlcIixcclxuICBcIkVSUk9SU1wiOlwiRXJyb3JzXCIsXHJcbiAgXCJVTktOT1dOXCI6IFwiVW5rbm93blwiLFxyXG4gIFwiQklPTE9HSUNcIjogXCJCaW9sb2dpY1wiLFxyXG4gIFwiUEhBUk1BQ0VVVElDQUxcIjogXCJQaGFybWFjZXV0aWNhbFwiLFxyXG4gIFwiVkVURVJJTkFSWVwiOlwiVmV0ZXJpbmFyeVwiLFxyXG4gIFwiQ0xJTklDQUxfVFJJQUxcIjpcIkNsaW5pY2FsIFRyaWFsXCIsXHJcbiAgXCJIRUxQX0ZJTEVfTE9BRFwiOiBcImZpbGUgbG9hZCBpbnN0cnVjdGlvbnNcIixcclxuICBcIkVYUEFORFwiOiBcIkV4cGFuZFwiLFxyXG4gIFwiSEVMUF9BQ1RJVklUWV9NQUlOXCI6IFwiQWN0aXZpdHkgSW5zdHJ1Y3Rpb25zXCIsXHJcbiAgXCJIRUxQX0FDVElWSVRZX1JFUFwiOiBcIlJlZ3VsYXRvcnkgRW5yb2xtZW50IFByb2Nlc3MgQ29udGFjdCBJbnN0cnVjdGlvbnNcIixcclxuICBcIkNBTEVOREFSXCI6IFwiUGljayBkYXRlIGZyb20gY2FsZW5kYXJcIixcclxuICBcIkhJREVfQ0FMRU5EQVJcIjogXCJIaWRlIENhbGVuZGFyIChlc2NhcGUga2V5KVwiLFxyXG4gIFwiT1RIRVJcIjogXCJPdGhlclwiLFxyXG4gIFwiSEVMUF9SRVBfQ09OVEFDVFwiOiBcIlJlZ3VsYXRvcnkgRW5yb2xtZW50IFByb2Nlc3MgQ29udGFjdCBJbnN0cnVjdGlvbnNcIixcclxuICBcIk9USEVSX1VOSVRTXCI6IFwiVW5pdHMgb3RoZXIgZGV0YWlsc1wiLFxyXG4gIFwiQ09NUEFOWU5BTUVcIjpcIkNvbXBhbnkgTmFtZVwiLFxyXG4gIFwiRlVMTExFR0FMTkFNRVwiOiBcIiAoRnVsbCBMZWdhbCBOYW1lKVwiLFxyXG4gIFwiQlVTSU5FU1NOVU1CRVJcIjpcIkJ1c2luZXNzIE51bWJlclwiLFxyXG4gIFwiQUNPTVBBTllOQU1FXCI6XCJDb21wYW55IE5hbWUgKEZ1bGwgbGVnYWwgbmFtZSAtIG5vIGFiYnJldmlhdGlvbnMpXCIsXHJcbiAgXCJDT1BZXCI6XCJDb3B5XCIsXHJcbiAgXCJERUxFVEVcIjpcIkRlbGV0ZVwiLFxyXG4gIFwiU0FWRV9XT1JLSU5HXCI6XCJTYXZlIFdvcmtpbmcgQ29weVwiLFxyXG4gIFwiQ09NUEFOWV9OT0FCQlJFVlwiOiBcIkNvbXBhbnkgTmFtZSAoRnVsbCBMZWdhbCBOYW1lKVwiLFxyXG4gIFwiQ0xPU0VfQUxFUlRcIjpcIkNvbGxhcHNlIGluc3RydWN0aW9uc1wiLFxyXG4gIFwiQ09MTEFQU0VcIjpcIkNvbGxhcHNlXCIsXHJcbiAgXCJDT05UUk9MX05VTVwiOiBcIkNvbnRyb2wgTnVtYmVyXCIsXHJcbiAgXCJPVEhFUl9ERVRBSUxTXCI6IFwiT3RoZXIgLSBzcGVjaWZ5XCIsXHJcbiAgXCJQUk9EX05BTUVcIjpcIlByb2R1Y3QgTmFtZVwiLFxyXG4gIFwiUFJPRF9OQU1FX0hFTFBcIjpcIlByb2R1Y3QgTmFtZSBJbnN0cnVjdGlvbnNcIixcclxuICBcIlBST1BfTkFNRV9IRUxQXCI6XCJQcm9wZXIsIENvbW1vbiBvciBOb24tcHJvcHJpZXRhcnkgTmFtZSBJbnN0cnVjdGlvbnNcIixcclxuICBcIlJFTEFURURfSU5GT19IRUxQXCI6XCJSZWxhdGVkIEluZm9ybWF0aW9uIEluc3RydWN0aW9uc1wiLFxyXG4gIFwiRE9TU0lFUl9UWVBFXCI6IFwiRG9zc2llciBUeXBlXCIsXHJcbiAgXCJMRUFTVF81X0NIQVJcIjpcIiAoNSBjaGFyYWN0ZXJzKVwiLFxyXG4gIFwiNV9PUl82X0NIQVJcIjpcIiAoIDUgb3IgNiBjaGFyYWN0ZXJzKVwiLFxyXG4gIFwiTEVBU1RfN19DSEFSXCI6XCIgKDcgY2hhcmFjdGVycylcIixcclxuICBcIklOQ0xVREVfQVJFQV9DT0RFXCI6XCIgKGluY2x1ZGluZyBhcmVhIGNvZGUpXCIsXHJcbiAgXCJMRUFTVF82X0RJR0lUXCI6XCIgKDYgZGlnaXRzIG9ubHkpXCIsXHJcbiAgXCJMRUFTVF81X0RJR0lUXCI6XCIgKDUgZGlnaXRzIG9ubHkpXCIsXHJcbiAgXCJMRUFTVF85X0NIQVJcIjpcIiAoOSBjaGFyYWN0ZXJzKVwiLFxyXG4gIFwiSU5TVFJVQ1RJT05cIjpcIkluc3RydWN0aW9uXCIsXHJcbiAgXCJSRVRVUk5fSU5TVFJVQ1RJT05cIjpcIlJldHVybiB0byBpbnN0cnVjdGlvbiBcIixcclxuICBcIlBSSVZBQ1lfTk9USUNFX1NUQVRFTUVOVFwiOlwiUHJpdmFjeSBOb3RpY2UgU3RhdGVtZW50XCIsXHJcbiAgXCJTRUNVUklUWV9ESVNDTEFJTUVSXCI6XCJTZWN1cml0eSBEaXNjbGFpbWVyXCIsXHJcbiAgXCJQUklWQUNZX1NUQVRFTUVOVFwiOlwiQnkgc3VibWl0dGluZyB5b3VyIHBlcnNvbmFsIGluZm9ybWF0aW9uLCB5b3UgYXJlIGNvbnNlbnRpbmcgdG8gaXRzIGNvbGxlY3Rpb24sIHVzZSBhbmQgZGlzY2xvc3VyZSBpbiBhY2NvcmRhbmNlIHdpdGggdGhlIFByaXZhY3kgTm90aWNlIFN0YXRlbWVudC5cIixcclxuICBcIkZPT1ROT1RFX0lOU1RSVUNUSU9OXCI6XCJJbnN0cnVjdGlvbnMgZm9yIGNvbXBsZXRpbmcgc2VjdGlvbnMgb24gZm9ybVwiLFxyXG4gIFwiU0VDVElPTl9JU19OT1RfVklTSUJMRVwiOiBcIlsgVGhpcyBzZWN0aW9uIG1heSBub3QgYmUgdmlzaWJsZS4gXVwiLFxyXG4gIFwiRkFYX05PVF9BVkFJTEFCTEVcIjpcIiAoVXNlIDAwMDAwMDAwMDAgaWYgbm90IGF2YWlsYWJsZSlcIixcclxuICBcIk5PVF9BUFBMSUNBQkxFXCI6IFwiTm90IGFwcGxpY2FibGVcIixcclxuICBcIkQyMVwiOiBcIkJpb2xvZ2ljXCIsXHJcbiAgXCJEMjJcIjogXCJQaGFybWFjZXV0aWNhbFwiLFxyXG4gIFwiRDI0XCI6IFwiVmV0ZXJpbmFyeVwiLFxyXG4gIFwiRDI2XCI6IFwiQ2xpbmljYWwgVHJpYWxcIixcclxuICBcIkJST1dTRVJcIjogXCJCcm93c2VyXCIsXHJcbiAgXCJUQUJMRV9FWFBBTkRFRF9TVEFURVwiOiBcIkV4cGFuZGVkIFN0YXRlXCIsXHJcbiAgXCJQUk9URUNURURfQlwiOiBcIlByb3RlY3RlZCBcXFwiQlxcXCIgd2hlbiBjb21wbGV0ZWRcIixcclxuICBcIlJPVVRJTkdfSURcIjogXCJSb3V0aW5nIElkZW50aWZpZXJcIixcclxuICBcIlJFRkVSUkVSXCI6IFwiIHJlZmVycmVyXCIsXHJcbiAgXCJDSEFSXzZfRElHSVRTXCI6IFwiIChhIGxvd2VyY2FzZSBsZXR0ZXIgZm9sbG93ZWQgYnkgNiBudW1iZXJzKVwiLFxyXG4gIFwiRk9STUFUX1RZUEVfTUlOTEVOR1RIXCI6IFwiSW5jb3JyZWN0IGZvcm1hdCAtIGxlc3MgdGhhbiBtaW5pbXVtIGxlbmd0aFwiLFxyXG4gIFwiRk9STUFUX1RZUEVfUEFUVEVSTlwiOiBcIkluY29ycmVjdCBmb3JtYXQgLSBtdXN0IGJlIGxvd2VyY2FzZSBsZXR0ZXIgZm9sbG93ZWQgYnkgc2l4IG51bWJlcnNcIlxyXG59KTtcblxuJHRyYW5zbGF0ZVByb3ZpZGVyLnRyYW5zbGF0aW9ucyhcImZyXCIsIHtcclxuICBcIllcIjogXCJPdWlcIixcclxuICBcIk5cIjogXCJOb25cIixcclxuICBcIkFERFwiOiBcImZyX0FkZFwiLFxyXG4gIFwiREVMRVRFUk9XXCI6IFwiZnJfRGVsZXRlIFJvd1wiLFxyXG4gIFwiU0VMRUNURURST1dcIjogXCJmcl9TZWxlY3RlZCBSb3dcIixcclxuICBcIlJFUVVJUkVEXCI6IFwiKG9ibGlnYXRvaXJlKVwiLFxyXG4gIFwiUk9MRVNfU0VMRUNUXCI6IFwiZnJfU2VsZWN0IG9uZSBvciBtb3JlIHJvbGVzIGZvciB0aGlzIHJlY29yZFwiLFxyXG4gIFwiTkVXXCI6IFwiTm91dmVsbGVcIixcclxuICBcIkFNRU5EXCI6IFwiTW9kaWZpY2F0aW9uXCIsXHJcbiAgXCJBUFBST1ZFRFwiOiBcImZyX0FwcHJvdmVkXCIsXHJcbiAgXCJGSU5BTFwiOiBcIkZpbmFsZVwiLFxyXG4gIFwiQ0xJQ0tfVE9HR0xFXCI6IFwiZnJfQ2xpY2sgdG8gdG9nZ2xlIHRoZSBjb2xsYXBzZSBvciBleHBhbmQgZGV0YWlscyBmb3IgdGhpcyBhZGRyZXNzLlwiLFxyXG4gIFwiQU1FTkRfUkVDT1JEXCI6IFwiZnJfQW1lbmQgUmVjb3JkXCIsXHJcbiAgXCJlblwiOiBcIkFuZ2xhaXNcIixcclxuICBcImZyXCI6IFwiRnJhbsOnYWlzXCIsXHJcbiAgXCJBRERfUkVDT1JEXCIgOiBcIkFqb3V0ZXIgdW4gZW5yZWdpc3RyZW1lbnRcIixcclxuICBcIlNBVkVfUkVDT1JEXCI6XCJFbnJlZ2lzdHJlclwiLFxyXG4gIFwiREVMRVRFX1JFQ09SRFwiOlwiU3VwcHJpbWVyIGwnZW5yZWdpc3RyZW1lbnRcIixcclxuICBcIkNPUFlfUkVDT1JEXCIgOlwiQ29waWVyXCIsXHJcbiAgXCJESVNDQVJEX0NIQU5HRVNcIjogXCLDiWxpbWluZXIgbGVzIG1vZGlmaWNhdGlvbnNcIixcclxuICBcIlJFUFNFQ09OREFSWVwiOiBcIlBlcnNvbm5lLXJlc291cmNlIHN1cHBsw6ltZW50YWlyZSBwb3VyIGxlIHByb2Nlc3N1cyBkJ2luc2NyaXB0aW9uIHLDqWdsZW1ldGFpcmVcIixcclxuICBcIlJFUFBSSU1BUllcIjogXCJQZXJzb25uZS1yZXNvdXJjZSBwb3VyIGxlIHByb2Nlc3N1cyBkJ2luc2NyaXB0aW9uIHLDqWdsZW1ldGFpcmVcIixcclxuICBcIk1BSUxJTkdcIjogXCJDb250YWN0IHBvdXIgbGUgbCdhZGRyZXNzIGNvdXJyaWVyIHLDqWdsZW1lbnRhaXJlIC8gYWRyZXNzZSBwb3VyIGwnYW5udWVsbGVcIixcclxuICBcIkJJTExJTkdcIjogXCJBZHJlc3NlIGRlIGZhY3R1cmF0aW9uXCIsXHJcbiAgXCJNQU5VRkFDVFVSRVJcIjogXCJBZHJlc3NlIHBvc3RhbGUgZHUgZmFicmljYW50IC8gcHJvbW90ZXVyXCIsXHJcbiAgXCJJTVBPUlRFUl9BRERSRVNTXCI6IFwiQWRyZXNzZSBwb3N0YWxlIGRlIGwnaW1wb3J0YXRldXIgY2FuYWRpZW5cIixcclxuICBcIkNPTlRBQ1RNQUlMSU5HXCI6IFwiQ291cnJpZXIgcsOpZ2xlbWVudGFpcmUgLyBhZHJlc3NlIGRlIHBlcnNvbm5lLXJlc3NvdXJjZSBwb3VyIGwnYW5udWVsbGVcIixcclxuICBcIkNBTl9JTVBcIjpcIlBlcnNvbm5lLXJlc3NvdXJjZSBwb3VyIGwnaW1wb3J0YXRldXIgY2FuYWRpZW5cIixcclxuICBcIkNPTlRBQ1RCSUxMSU5HXCI6IFwiUGVyc29ubmUtcmVzc291cmNlIGRlIGZhY3R1cmF0aW9uXCIsXHJcbiAgXCJDT05UQUNUTUFOVUZBQ1RVUkVSXCI6IFwiUGVyc29ubmUtcmVzc291cmNlIGR1IGZhYnJpY2FudC9wcm9tb3RldXJcIixcclxuICBcIkNPTlRBQ1RfSU1QT1JURVJcIjogXCJQZXJzb25uZS1yZXNzb3VyY2UgZGUgbCdpbXBvcnRhdGV1clwiLFxyXG4gIFwiQVBQUk9WRV9GSU5BTFwiOiBcIkfDqW7DqXJlciBsZSBYTUwgZmluYWxlXCIsXHJcbiAgXCJTQVZFX0RSQUZUXCI6IFwiRW5yZWdpc3RyZXIgbGUgYnJvdWlsbG9uIFhNTFwiLFxyXG4gIFwiUFJJTUFSWVwiOiBcImZyX1ByaW1hcnlcIixcclxuICBcIlNFQ09OREFSWVwiOiBcImZyX0FsdGVybmF0ZVwiLFxyXG4gIFwiVE9HR0xFX0VYUEFORFwiOiBcIkNsaXF1ZXogcG91ciByw6lkdWlyZSBvdSBvdXZyaXIgbGVzIGTDqXRhaWxzIGRlIGxhIGxpZ25lIFwiLFxyXG4gIFwiQ09OVFJPTF9OVU1CRVJcIjogXCJOdW3DqXJvIGRlIGNvbnRyw7RsZVwiLFxyXG4gIFwiUkVQX0NPTlRBQ1RfSU5GT1wiOiBcImZyX01haW4gQ29udGFjdCBJbmZvcm1hdGlvblwiLFxyXG4gIFwiU0FWRV9DT05UQUNUXCI6IFwiZnJfU2F2ZSBDb250YWN0XCIsXHJcbiAgXCJERUxFVEVfQ09OVEFDVFwiOiBcImZyX0RlbGV0ZSBDb250YWN0XCIsXHJcbiAgXCJDT01QQU5ZX0lEXCI6IFwiTnVtw6lybyBkZSBsYSBjb21wYWduaWVcIixcclxuICBcIkRPU1NJRVJfSURcIjogXCJOdW3DqXJvIGRlIGRvc3NpZXJcIixcclxuICBcIklNUE9SVEVSXCI6IFwiSW1wb3J0YXRldXJcIixcclxuICBcIklNUE9SVEVSSURcIjpcIk51bcOpcm8gZGUgY29tcGFnbmllIGRlIGwnaW1wb3J0YXRldXJcIixcclxuICBcIklNUE9SVEVSX0NPTVBBTllfTkFNRVwiOiBcIk5vbSBkZSBjb21wYWduaWUgZGUgbCdpbXBvcnRhdGV1clwiLFxyXG4gIFwiSU1QT1JURVJfQ09NUEFOWV9JRF9JRlwiOiBcImZyX0ltcG9ydGVyIENvbXBhbnkgSWRlbnRpZmljYXRpb24gKGlmIGFwcGxpY2FibGUpXCIsXHJcbiAgXCJJTVBPUlRFUl9DT01QQU5ZX05BTUVfSUZcIjogXCJmcl9JbXBvcnRlciBDb21wYW55IE5hbWUgKGlmIGFwcGxpY2FibGUpXCIsXHJcbiAgXCJFUlJPUlNcIjogXCJFcnJldXJzXCIsXHJcbiAgXCJVTktOT1dOXCI6IFwiSW5jb25udVwiLFxyXG4gIFwiQklPTE9HSUNcIjogXCJmcl9CaW9sb2dpY1wiLFxyXG4gIFwiUEhBUk1BQ0VVVElDQUxcIjogXCJmcl9QaGFybWFjZXV0aWNhbFwiLFxyXG4gIFwiSEVMUF9GSUxFX0xPQURcIjogXCJmcl9GaWxlIExvYWQgSW5zdHJ1Y3Rpb25zXCIsXHJcbiAgXCJFWFBBTkRcIjogXCJmcl9FeHBhbmRcIixcclxuICBcIkhFTFBfQUNUSVZJVFlfTUFJTlwiOiBcImZyX0FjdGl2aXR5IEluc3RydWN0aW9uc1wiLFxyXG4gIFwiSEVMUF9BQ1RJVklUWV9SRVBcIjogXCJmcl9SZWd1bGF0b3J5IEVucm9sbWVudCBQcm9jZXNzIENvbnRhY3QgSW5zdHJ1Y3Rpb25zXCIsXHJcbiAgXCJDQUxFTkRBUlwiOiBcImZyX1BpY2sgZGF0ZSBmcm9tIGNhbGVuZGFyXCIsXHJcbiAgXCJISURFX0NBTEVOREFSXCI6IFwiZnJfSGlkZSBDYWxlbmRhciAoZXNjYXBlIGtleSlcIixcclxuICBcIk9USEVSXCI6IFwiQXV0cmVcIixcclxuICBcIkhFTFBfUkVQX0NPTlRBQ1RcIjogXCJSZWd1bGF0b3J5IEVucm9sbWVudCBQcm9jZXNzIENvbnRhY3QgSW5zdHJ1Y3Rpb25zXCIsXHJcbiAgXCJPVEhFUl9VTklUU1wiOiBcIlVuaXTDqXMsIGF1dHJlIGTDqXRhaWxzXCIsXHJcbiAgXCJDT01QQU5ZTkFNRVwiOlwiTm9tIGRlIGxhIGNvbXBhZ25pZVwiLFxyXG4gIFwiRlVMTExFR0FMTkFNRVwiOiBcIiAobm9tIGzDqWdhbCBjb21wbGV0KVwiLFxyXG4gIFwiQlVTSU5FU1NOVU1CRVJcIjogXCJOdW3DqXJvIGRlIGxhIGNvbXBhZ25pZVwiLFxyXG4gIFwiQUNPTVBBTllOQU1FXCI6XCJOb20gZGUgbGEgY29tcGFnbmllIChub20gbMOpZ2FsIGNvbXBsZXQsIHNhbnMgYWJicsOpdmlhdGlvbilcIixcclxuICBcIkNPUFlcIjpcImZyX0NvcHlcIixcclxuICBcIkRFTEVURVwiOlwiU3VwcHJpbWVyXCIsXHJcbiAgXCJTQVZFX1dPUktJTkdcIjpcIkVucmVnaXN0cmVyIHVuZSBjb3BpZSBkZSB0cmF2YWlsXCIsXHJcbiAgXCJDT01QQU5ZX05PQUJCUkVWXCI6IFwiTm9tIGRlIGxhIGNvbXBhZ25pZSAobm9tIGzDqWdhbCBjb21wbGV0KVwiLFxyXG4gIFwiQ0xPU0VfQUxFUlRcIjpcIk1pbmltaXNlciBsZXMgaW5zdHJ1Y3Rpb25zXCIsXHJcbiAgXCJDT0xMQVBTRVwiOlwiTWluaW1pc2VyIGxlc1wiLFxyXG4gIFwiQ09OVFJPTF9OVU1cIjogXCJOdW3DqXJvIGRlIGNvbnRyw7RsZVwiLFxyXG4gIFwiT1RIRVJfREVUQUlMU1wiOiBcIkF1dHJlIGTDqXRhaWxzXCIsXHJcbiAgXCJQUk9EX05BTUVcIjpcIk5vbSBkdSBwcm9kdWl0XCIsXHJcbiAgXCJQUk9EX05BTUVfSEVMUFwiOlwiZnJfUHJvZHVjdCBOYW1lIEluc3RydWN0aW9uc1wiLFxyXG4gIFwiUFJPUF9OQU1FX0hFTFBcIjpcImZyX1Byb3BlciwgQ29tbW9uIG9yIE5vbi1wcm9wcmlldGFyeSBOYW1lIEluc3RydWN0aW9uc1wiLFxyXG4gIFwiUkVMQVRFRF9JTkZPX0hFTFBcIjpcImZyX1JlbGF0ZWQgSW5mb3JtYXRpb24gSW5zdHJ1Y3Rpb25zXCIsXHJcbiAgXCJET1NTSUVSX1RZUEVcIjogXCJUeXBlIGRlIGRvc3NpZXJcIixcclxuICBcIkxFQVNUXzVfQ0hBUlwiOlwiIGZyXyhhdCBsZWFzdCA1IGNoYXJhY3RlcnMpXCIsXHJcbiAgXCI1X09SXzZfQ0hBUlwiOlwiICg1IG91IDYgY2FyYWN0w6hyZXMpXCIsXHJcbiAgXCJMRUFTVF83X0NIQVJcIjpcIiAoNyBjYXJhY3TDqHJlcylcIixcclxuICBcIklOQ0xVREVfQVJFQV9DT0RFXCI6XCIgKHkgY29tcHJpcyBpbmRpY2F0aWYgcsOpZ2lvbmFsKVwiLFxyXG4gIFwiTEVBU1RfNl9ESUdJVFwiOlwiICg2IGNoaWZmcmVzIHNldWxlbWVudClcIixcclxuICBcIkxFQVNUXzVfRElHSVRcIjpcIiAoNSBjaGlmZnJlcyBzZXVsZW1lbnQpXCIsXHJcbiAgXCJMRUFTVF85X0NIQVJcIjpcIiAoOSBjYXJhY3TDqHJlcylcIixcclxuICBcIklOU1RSVUNUSU9OXCI6XCJJbnN0cnVjdGlvbnNcIixcclxuICBcIlJFVFVSTl9JTlNUUlVDVElPTlwiOlwiUmV0b3VybmUgYXV4IGluc3RydWN0aW9ucyBcIixcclxuICBcIlBSSVZBQ1lfU1RBVEVNRU5UX0hFTFBcIjpcImZyX1ZpZXcgUHJpdmFjeSBOb3RpY2UgU3RhdGVtZW50XCIsXHJcbiAgXCJQUklWQUNZX05PVElDRV9TVEFURU1FTlRcIjpcIsOJbm9uY8OpIGRlIGNvbmZpZGVudGlhbGl0w6lcIixcclxuICBcIlNFQ1VSSVRZX0RJU0NMQUlNRVJcIjpcIkF2aXMgZGUgbm9uLXJlc3BvbnNhYmlsaXTDqSBjb25jZXJuYW50IGxhIHPDqWN1cml0w6lcIixcclxuICBcIlBSSVZBQ1lfU1RBVEVNRU5UXCI6XCJFbiBzb3VtZXR0YW50IHZvcyByZW5zZWlnbmVtZW50cyBwZXJzb25uZWxzLCB2b3VzIGNvbnNlbnRleiDDoCBzYSBjb2xsZWN0ZSwgw6Agc29uIHV0aWxpc2F0aW9uIGV0IMOgIHNhIGRpdnVsZ2F0aW9uIGNvbmZvcm3DqW1lbnQgw6AgbCfDqW5vbmPDqSBkZSBjb25maWRlbnRpYWxpdMOpLlwiLFxyXG4gIFwiRk9PVE5PVEVfSU5TVFJVQ1RJT05cIjpcIkluc3RydWN0aW9ucyBwb3VyIGNvbXBsw6l0ZXIgbGVzIHNlY3Rpb25zIGR1IGZvcm11bGFpcmVcIixcclxuICBcIlNFQ1RJT05fSVNfTk9UX1ZJU0lCTEVcIjogXCJbIENldHRlIHNlY3Rpb24gcGV1dCBuZSBwYXMgw6p0cmUgdmlzaWJsZS4gXVwiLFxyXG4gIFwiRkFYX05PVF9BVkFJTEFCTEVcIjpcIiAoU2kgcGFzIGRpc3BvbmlibGUsIHV0aWxpc2V6IDAwMDAwMDAwMDApXCIsXHJcbiAgXCJOT1RfQVBQTElDQUJMRVwiOiBcImZyX05vdCBhcHBsaWNhYmxlXCIsXHJcbiAgXCJEMjFcIjogXCJCaW9sb2dpcXVlXCIsXHJcbiAgXCJEMjJcIjogXCJQaGFybWFjZXV0aXF1ZVwiLFxyXG4gIFwiRDI0XCI6IFwiVsOpdMOpcmluYWlyZVwiLFxyXG4gIFwiRDI2XCI6IFwiRXNzYWkgY2xpbmlxdWVcIixcclxuICBcIkJST1dTRVJcIjogXCJOYXZpZ2F0ZXVyXCIsXHJcbiAgXCJUQUJMRV9FWFBBTkRFRF9TVEFURVwiOiBcIsOJdGF0IG91dmVydFwiLFxyXG4gIFwiUFJPVEVDVEVEX0JcIjogXCJQcm90w6lnw6kgXFxcIkJcXFwiIHVuZSBmb2lzIHJlbXBsaVwiLFxyXG4gIFwiUk9VVElOR19JRFwiOiBcIklkZW50aWZpY2F0ZXVyICBkJ2FjaGVtaW5lbWVudFwiLFxyXG4gIFwiUkVGRVJSRVJcIjogXCIgcsOpZsOpcmVudFwiLFxyXG4gIFwiQ0hBUl82X0RJR0lUU1wiOiBcIiAoY29tcG9zw6kgZOKAmXVuZSBsZXR0cmUgc3VpdmllIGRlIHNpeCBjaGlmZnJlcylcIixcclxuICBcIkZPUk1BVF9UWVBFX01JTkxFTkdUSFwiOiBcIkZvcm1hdCBpbmNvcnJlY3RlIC0gbW9pbnMgcXVlIGxhIGxvbmd1ZXVyIG1pbmltYWxlXCIsXHJcbiAgXCJGT1JNQVRfVFlQRV9QQVRURVJOXCI6IFwiRm9ybWF0IGluY29ycmVjdGUgLSBjb21wb3PDqSBk4oCZdW5lIGxldHRyZSBzdWl2aWUgZGUgc2l4IGNoaWZmcmVzXCJcclxufSk7XG5cbiR0cmFuc2xhdGVQcm92aWRlci50cmFuc2xhdGlvbnMoXCJlblwiLCB7XHJcbiAgXCJNU0dfRVJSX01BTkRcIjogXCJUaGlzIGZpZWxkIGlzIHJlcXVpcmVkXCIsXHJcbiAgXCJNU0dfRVJSX0VNQUlMX0ZPUk1BVFwiOiBcIlBsZWFzZSBlbnRlciBhIHZhbGlkIGVtYWlsLlwiLFxyXG4gIFwiTVNHX0VSUl9ST0xFXCI6IFwiVGhpcyBmaWVsZCBpcyByZXF1aXJlZFwiLFxyXG4gIFwiTVNHX0VSUl9ESVNJVFlQRVwiOiBcIlBsZWFzZSBzZWxlY3QgYXQgbGVhc3Qgb25lIGRpc2luZmVjdGFudCB0eXBlXCIsXHJcbiAgXCJNU0dfRVJSX0FERFJFU1NcIjogXCJQbGVhc2Ugc2VsZWN0IGF0IGxlYXN0IG9uZSBhZGRyZXNzXCIsXHJcbiAgXCJNU0dfRVJSX0NPTlRBQ1RfTlVNXCI6IFwiQWxsIHRoZSByb2xlcyBoYXZlIHRvIGJlIHVzZWQgZm9yIHRoZSBjb250YWN0c1wiLFxyXG4gIFwiTVNHX0VSUl9QSE9ORV9GT1JNQVRcIjogXCJUaGUgZm9ybWF0IGlzIG5vdCB2YWxpZFwiLFxyXG4gIFwiTVNHX0VSUl9GQVhfRk9STUFUXCI6XCJUaGUgZm9ybWF0IGlzIG5vdCB2YWxpZFwiLFxyXG4gIFwiTVNHX0VSUl9BTExST0xFXCI6IFwiVGhlIHJvbGVzIG9mIG1hbnVmYWN0dXJlciwgbWFpbGluZywgYmlsbGluZywgYW5kIHByaW1hcnkgUkVQIGNvbnRhY3QgIGhhdmUgbm90IGFsbCBiZWVuIHNlbGVjdGVkIGFtb25nIHRoZSBsaXN0IG9mIGNvbnRhY3RzXCIsXHJcbiAgXCJNU0dfRVJSX0FERFJFU1NTUk9MRVwiOiBcIlRoZSByb2xlcyBvZiBtYW51ZmFjdHVyZXIsIG1haWxpbmcsIGFuZCBiaWxsaW5nIGhhdmUgbm90IGFsbCBiZWVuIHNlbGVjdGVkIGFtb25nIHRoZSBsaXN0IG9mIGFkZHJlc3Nlc1wiLFxyXG4gIFwiTVNHX0VSUl9QT1NUQUxcIjogXCJQbGVhc2Ugc3BlY2lmeSBhIHZhbGlkIHBvc3RhbCBjb2RlLlwiLFxyXG4gIFwiTVNHX0VSUl9aSVBcIjogXCJQbGVhc2Ugc3BlY2lmeSBhIHZhbGlkIHppcCBjb2RlLlwiLFxyXG4gIFwiTVNHX0VSUl9EQVRFX0ZPUk1BVFwiOiBcIlBsZWFzZSBlbnRlciBhIHZhbGlkIGRhdGUuXCIsXHJcbiAgXCJNQU5VRkFDVF9TRUxcIjogXCJSb2xlIGFscmVhZHkgU2VsZWN0ZWRcIixcclxuICBcIk1BSUxfU0VMXCI6IFwiUm9sZSBhbHJlYWR5IFNlbGVjdGVkXCIsXHJcbiAgXCJCSUxMSU5HX1NFTFwiOiBcIlJvbGUgYWxyZWFkeSBTZWxlY3RlZFwiLFxyXG4gIFwiSU1QT1JURVJfU0VMXCI6IFwiUm9sZSBhbHJlYWR5IFNlbGVjdGVkXCIsXHJcbiAgXCJSRVBQUklNX1NFTFwiOiBcIlJvbGUgYWxyZWFkeSBTZWxlY3RlZFwiLFxyXG4gIFwiUkVQQUxUX1NFTFwiOiBcIlJvbGUgYWxyZWFkeSBTZWxlY3RlZFwiLFxyXG4gIFwiTVNHX0xFTkdUSF9NSU41XCI6IFwiTGVzcyB0aGFuIG1pbmltdW0gbGVuZ3RoXCIsXHJcbiAgXCJNU0dfTEVOR1RIXzZcIjogXCJMZXNzIHRoYW4gbWluaW11bSBsZW5ndGguXCIsXHJcbiAgXCJNU0dfTEVOR1RIXzZOVU1cIjogXCJMZXNzIHRoYW4gbWluaW11bSBsZW5ndGguXCIsXHJcbiAgXCJNU0dfTEVOR1RIXzhOVU1cIjogXCJMZXNzIHRoYW4gbWluaW11bSBsZW5ndGguXCIsXHJcbiAgXCJNU0dfTEVOR1RIXzdcIjogXCJJbmNvcnJlY3QgZm9ybWF0IC0gTGVzcyB0aGFuIG1pbmltdW0gbGVuZ3RoLlwiLFxyXG4gIFwiTVNHX0xFTkdUSF83TlVNXCI6IFwiTGVzcyB0aGFuIG1pbmltdW0gbGVuZ3RoLlwiLFxyXG4gIFwiT05FX1JFUFwiOiBcIkF0IGxlYXN0IG9uZSBjb250YWN0IGlzIHJlcXVpcmVkLlwiLFxyXG4gIFwiTVNHX0VSUl9OT1RJRl9TRUxcIjogXCJQbGVhc2Ugc2VsZWN0IGF0IGxlYXN0IG9uZSBub3RpZmlhYmxlIGNoYW5nZS5cIixcclxuICBcIk1TR19FUlJfTUlOX1BPU1wiOiBcIk11c3QgYmUgYSBwb3NpdGl2ZSBudW1iZXJcIixcclxuICBcIk1TR19FUlJfTUFYXCI6IFwiRXhjZWVkcyB0aGUgbWF4aW11bVwiLFxyXG4gIFwiTVNHX0ZPUk1BVF9DSEFSXzZESUdJVFNcIjogXCJJRCBzaG91bGQgYmUgYSBsZXR0ZXIgcGx1cyA2IGRpZ2l0cy5cIixcclxuICBcIk1TR19FUlJfRFVQTElDQVRFRF9TWVNURU1cIjogXCJEdXBsaWNhdGVkIFN5c3RlbS5cIixcclxuICBcIk1TR19GT1JNQVRfQUxQSEFfTlVNQkVSSUNcIjogXCJJbmNvcnJlY3QgZm9ybWF0IC0gbXVzdCBiZSBsb3dlcmNhc2UgbGV0dGVyIGZvbGxvd2VkIGJ5IHNpeCBudW1iZXJzXCIsXHJcbiAgXCJNU0dfRVJSX0lOVkFMSURfRU5EX0RBVEVcIjogXCJFbmQgRGF0ZSBzaG91bGQgbm90IGJlIGVhcmxpZXIgdGhhbiBTdGFydCBEYXRlLlwiXHJcbn0pO1xuXG4kdHJhbnNsYXRlUHJvdmlkZXIudHJhbnNsYXRpb25zKFwiZnJcIiwge1xyXG4gIFwiTVNHX0VSUl9NQU5EXCI6IFwiQ2UgY2hhbXAgZXN0IG9ibGlnYXRvaXJlLlwiLFxyXG4gIFwiTVNHX0VSUl9ST0xFXCI6IFwiZnJfUGxlYXNlIHNlbGVjdCBhdCBsZWFzdCBvbmUgcm9sZVwiLFxyXG4gIFwiTVNHX0VSUl9ESVNJVFlQRVwiOiBcIlZldWlsbGV6IHPDqWxlY3Rpb25uZXIgYXUgbW9pbnMgdW4gdHlwZSBkZSBkw6lzaW5mZWN0YW50XCIsXHJcbiAgXCJNU0dfRVJSX0FERFJFU1NcIjogXCJmcl9QbGVhc2Ugc2VsZWN0IGF0IGxlYXN0IG9uZSBhZGRyZXNzXCIsXHJcbiAgXCJNU0dfRVJSX0VNQUlMX0ZPUk1BVFwiOiBcIlZldWlsbGV6IGZvdXJuaXIgdW5lIGNvdXJyaWVsIHZhbGlkZS5cIixcclxuICBcIk1TR19FUlJfQ09OVEFDVF9OVU1cIjogXCJmcl9BbGwgdGhlIHJvbGVzIGhhdmUgdG8gYmUgdXNlZCBmb3IgdGhlIGNvbXBhbnkgY29udGFjdHNcIixcclxuICBcIk1TR19FUlJfUEhPTkVfRk9STUFUXCI6IFwiVmV1aWxsZXogZm91cm5pciB1biBudW3DqXJvIGRlIHTDqWzDqXBob25lIHZhbGlkZS5cIixcclxuICBcIk1TR19FUlJfRkFYX0ZPUk1BVFwiOlwiVmV1aWxsZXogZm91cm5pciB1biBudW3DqXJvIGRlIHTDqWzDqWNvcGlldXIgdmFsaWRlLlwiLFxyXG4gIFwiTVNHX0VSUl9BTExST0xFXCI6IFwiZnJfQWNyb3NzIHRoZSBjb250YWN0IHJlY29yZHMsIHRoZSByb2xlcyBvZiBtYW51ZmFjdHVyZXIsIG1haWxpbmcsIGJpbGxpbmcsIGFuZCBSRVAgcHJpbWFyeSBjb250YWN0IG11c3QgYmUgc2VsZWN0ZWRcIixcclxuICBcIk1TR19FUlJfQUREUkVTU1NST0xFXCI6IFwiZnJfVGhlIHJvbGVzIG9mIG1hbnVmYWN0dXJlciwgbWFpbGluZywgYW5kIGJpbGxpbmcgaGF2ZSBub3QgYWxsIGJlZW4gc2VsZWN0ZWQgYW1vbmcgdGhlIGxpc3Qgb2YgYWRkcmVzc2VzXCIsXHJcbiAgXCJNU0dfRVJSX1BPU1RBTFwiOiBcIlZldWlsbGV6IGZvdXJuaXIgdW4gY29kZSBwb3N0YWwgdmFsaWRlLlwiLFxyXG4gIFwiTVNHX0VSUl9aSVBcIjogXCJWZXVpbGxleiBmb3VybmlyIHVuIGNvZGUgcG9zdGFsIHZhbGlkZS5cIixcclxuICBcIk1TR19FUlJfREFURV9GT1JNQVRcIjogXCJWZXVpbGxleiBmb3VybmlyIHVuZSB1bmUgZGF0ZSB2YWxpZGUuXCIsXHJcbiAgXCJNQU5VRkFDVF9TRUxcIjogXCJSw7RsZSBkw6lqw6Agc8OpbGVjdGlvbm7DqVwiLFxyXG4gIFwiTUFJTF9TRUxcIjogXCJSw7RsZSBkw6lqw6Agc8OpbGVjdGlvbm7DqVwiLFxyXG4gIFwiQklMTElOR19TRUxcIjogXCJSw7RsZSBkw6lqw6Agc8OpbGVjdGlvbm7DqVwiLFxyXG4gIFwiSU1QT1JURVJfU0VMXCI6IFwiZnJfSW1wb3J0ZXIgUm9sZSBhbHJlYWR5IFNlbGVjdGVkXCIsXHJcbiAgXCJSRVBQUklNX1NFTFwiOiBcIlLDtGxlIGTDqWrDoCBzw6lsZWN0aW9ubsOpXCIsXHJcbiAgXCJSRVBBTFRfU0VMXCI6IFwiUsO0bGUgZMOpasOgIHPDqWxlY3Rpb25uw6lcIixcclxuICBcIk1TR19MRU5HVEhfTUlONVwiOiBcIlZldWlsbGV6IGZvdXJuaXIgYXUgbW9pbnMgNSBjaGlmZnJlcy5cIixcclxuICBcIk1TR19MRU5HVEhfNlwiOiBcIlZldWlsbGV6IGZvdXJuaXIgYXUgbW9pbnMgNiBjYXJhY3TDqHJlcy5cIixcclxuICBcIk1TR19MRU5HVEhfNk5VTVwiOiBcIlZldWlsbGV6IGZvdXJuaXIgNiBjaGlmZnJlcy5cIixcclxuICBcIk1TR19MRU5HVEhfOE5VTVwiOiBcIlZldWlsbGV6IGZvdXJuaXIgOCBjaGlmZnJlcy5cIixcclxuICBcIk1TR19MRU5HVEhfN1wiOiBcIkZvcm1hdCBpbmNvcnJlY3RlIC0gVmV1aWxsZXogZm91cm5pciA3IGNhcmFjdMOocmVzLlwiLFxyXG4gIFwiTVNHX0xFTkdUSF83TlVNXCI6IFwiVmV1aWxsZXogZm91cm5pciAgNyBjaGlmZnJlcy5cIixcclxuICBcIk9ORV9SRVBcIjogXCJBdSBtb2lucyB1biBjb250YWN0IGVzdCByZXF1aXNcIixcclxuICBcIk1TR19FUlJfTk9USUZfU0VMXCI6IFwiU8OpbGVjdGlvbm5leiBhdSBtb2lucyB1biBjaGFuZ2VtZW50IGRlIGTDqWNsYXJhdGlvblwiLFxyXG4gIFwiTVNHX0VSUl9NSU5fUE9TXCI6IFwiRG9pdCDDqnRyZSB1biBub21icmUgcG9zaXRpZlwiLFxyXG4gIFwiTVNHX0VSUl9NQVhcIjogXCJEw6lwYXNzZSBsZSBtYXhpbXVtLlwiLFxyXG4gIFwiTVNHX0ZPUk1BVF9DSEFSXzZESUdJVFNcIjogXCJmcl9JRCBzaG91bGQgYmUgYSBsZXR0ZXIgcGx1cyA2IGRpZ2l0cy5cIixcclxuICBcIk1TR19FUlJfRFVQTElDQVRFRF9TWVNURU1cIjogXCJmcl9EdXBsaWNhdGVkIFN5c3RlbS5cIixcclxuICBcIk1TR19GT1JNQVRfQUxQSEFfTlVNQkVSSUNcIjogXCJGb3JtYXQgaW5jb3JyZWN0ZSAtIGNvbXBvc8OpIGTigJl1bmUgbGV0dHJlIHN1aXZpZSBkZSBzaXggY2hpZmZyZXNcIixcclxuICBcIk1TR19FUlJfSU5WQUxJRF9FTkRfREFURVwiOiBcIkxhIGRhdGUgZGUgZmluIG5lIGRvaXQgcGFzIMOqdHJlIGFudMOpcmlldXJlIMOgIGxhIGRhdGUgZGUgZMOpYnV0XCJcclxufSk7XG5cbiR0cmFuc2xhdGVQcm92aWRlci50cmFuc2xhdGlvbnMoXCJlblwiLCB7XHJcbiAgXCJSRUdfQ09NUEFOWV9FTlJPTFwiOiBcIlJlZ3VsYXRvcnkgQ29tcGFueSBFbnJvbG1lbnRcIixcclxuICBcIkxPQURfQ09NUEFOWV9GSUxFXCI6IFwiTG9hZCBhIENvbXBhbnkgRW5yb2xtZW50IEZpbGVcIixcclxuLy8gIFwiRU5ST0xfSU5TVFJVQ1RcIjogXCJDb21wYW55IFJlZ3VsYXRvcnkgRW5yb2xtZW50IEluc3RydWN0aW9uc1wiLFxyXG4vLyAgXCJBRERSRVNTX0lOU1RSVUNUXCI6XCJDb21wYW55IEFkZHJlc3MgUmVjb3JkIEluc3RydWN0aW9uc1wiLFxyXG4vLyAgXCJBRERSRVNTX1JPTEVfSU5TVFJVQ1RcIjpcIkNvbXBhbnkgQWRkcmVzcyBSb2xlIEluc3RydWN0aW9uc1wiLFxyXG4gIFwiUkVQUkVTRU5UX0lOU1RSVUNUXCI6XCJDb21wYW55IFJlcHJlc2VudGF0aXZlIEluZm9ybWF0aW9uXCIsXHJcbi8vICBcIlNBVkVfSU5TVFJVQ1RcIjogXCJDb21wYW55IEZpbGUgU2F2ZSBJbnN0cnVjdGlvbnNcIixcclxuICBcIkFNRU5EX05PVEVcIjogXCJUaGUg4oCcQW1lbmQgRW5yb2xtZW504oCdIGJ1dHRvbiBtdXN0IGJlIHNlbGVjdGVkIHdoZW4gYW1lbmRpbmcgYSBGaW5hbCBDb21wYW55IFhNTC5cIixcclxuICBcIkZJRUxESURcIjogXCJDb21wYW55IElkZW50aWZpZXJcIixcclxuICBcIkNPTVBBTllfTkFNRVwiOiBcIkNvbXBhbnkgTmFtZVwiLFxyXG4gIFwiSFRfTE9BRF9GSUxFXzFcIjogXCJBIGZpbGUgc2hvdWxkIG5vdCBiZSBsb2FkZWQgaWYgdGhpcyBpcyB0aGUgZmlyc3QgdGltZSBlbnJvbGxpbmcgdGhlIENvbXBhbnkuXCIsXHJcbiAgXCJIVF9MT0FEX0ZJTEVfMlwiOiBcIldoZW4gY29udGludWluZyB3aXRoIGEgd29ya2luZyBjb3B5LCB0aGUgZm9ybWF0IG9mIHRoZSBmaWxlIHRvIGxvYWQgc2hvdWxkIGJlIC5oY3NjLlwiLFxyXG4gIFwiSFRfTE9BRF9GSUxFXzNcIjogXCJXaGVuIHZpZXdpbmcvdXBkYXRpbmcgYSBmaW5hbCBYTUwgZmlsZSwgdGhlIGZvcm1hdCBvZiB0aGUgZmlsZSB0byBsb2FkIHNob3VsZCBiZSAueG1sLlwiLFxyXG4gIFwiRU5ST0xfMS4wXCI6IFwiVGhlIOKAnEVucm9sbWVudCBTdGF0dXPigJ0sIOKAnEVucm9sbWVudCBWZXJzaW9u4oCdLCBhbmQg4oCcRGF0ZSBMYXN0IFNhdmVk4oCdIGZpZWxkcyBhcmUgYXV0b21hdGljYWxseSBmaWxsZWQgYnkgdGhlIGZvcm0gdXBvbiBzZWxlY3Rpbmcg4oCcU2F2ZSBXb3JraW5nIENvcHnigJ0gb3Ig4oCcU2F2ZSBEcmFmdCBYTUzigJ0gaW4gdGhlIGJvdHRvbSBvZiB0aGUgdGVtcGxhdGUuXCIsXHJcbiAgXCJFTlJPTF8yLjBcIjogXCJUaGUg4oCcQ29tcGFueSBJZGVudGlmaWVy4oCdIGZpZWxkIHdpbGwgYmUgZmlsbGVkIGJ5IEhlYWx0aCBDYW5hZGEgd2hlbiB0aGV5IGdlbmVyYXRlIHRoZSBmaW5hbCBjb21wYW55IFhNTCBmaWxlLlwiLFxyXG4gIFwiRU5ST0xfMy4wXCI6IFwiVGhlIOKAnEFtZW5kIEVucm9sbWVudOKAnSBidXR0b24gaXMgb25seSBlbmFibGVkIHdoZW4gYSBmaW5hbCBjb21wYW55IHhtbCBmaWxlIGlzIGxvYWRlZCBpbnRvIHRoZSB0ZW1wbGF0ZSwgYW5kIG11c3QgYmUgc2VsZWN0ZWQgd2hlbiBhbWVuZGluZyBhIGZpbmFsIGNvbXBhbnkgWE1MIGZpbGUuXCIsXHJcbiAgXCJBRERSX0lORk9fMVwiOiBcIkEgbWluaW11bSBvZiBvbmUgYWRkcmVzcyBpcyByZXF1aXJlZCBmb3IgdGhlIGNvbXBhbnkgdGVtcGxhdGUuXCIsXHJcbiAgXCJBRERSX0lORk9fMi4wXCI6IFwiVGhlcmUgbXVzdCBiZSBhbiBhZGRyZXNzIGFzc29jaWF0ZWQgd2l0aCBlYWNoIG9mIHRoZSBmb2xsb3dpbmcgdGhyZWUgcm9sZXM6IOKAnE1hbnVmYWN0dXJlciAvIFNwb25zb3IgTWFpbGluZyBBZGRyZXNz4oCdLCDigJxCaWxsaW5nIEFkZHJlc3PigJ0sIGFuZCDigJxSZWd1bGF0b3J5IE1haWxpbmcgLyBBbm51YWwgQ29udGFjdCBBZGRyZXNz4oCdLlwiLFxyXG4gIFwiQUREUl9JTkZPXzNcIjogXCJBIHNpbmdsZSBhZGRyZXNzIG1heSBiZSBhc3NvY2lhdGVkIHRvIG11bHRpcGxlIHJvbGVzLCBob3dldmVyLCBlYWNoIHJvbGUgbWF5IG9ubHkgaGF2ZSBvbmUgYWRkcmVzcy5cIixcclxuICBcIkJVU19OVU1fNC4wXCI6IFwiQSBidXNpbmVzcyBudW1iZXIgaXMgYSB1bmlxdWUsIDktZGlnaXQgbnVtYmVyIChpLmUuLCB0aGUgc3RhbmRhcmQgaWRlbnRpZmllciBmb3IgYnVzaW5lc3NlcykuIEl0IGlzIHVuaXF1ZSB0byBhIGJ1c2luZXNzIG9yIGxlZ2FsIGVudGl0eS4gSW5mb3JtYXRpb24gb24gdGhlIGJ1c2luZXNzIG51bWJlciBjYW4gYmUgZm91bmQgb24gdGhlIFwiLFxyXG4gIFwiQlVTX05VTV80LjFcIjogXCJodHRwczovL3d3dy5jYW5hZGEuY2EvZW4vcmV2ZW51ZS1hZ2VuY3kvc2VydmljZXMvdGF4L2J1c2luZXNzZXMvdG9waWNzL3JlZ2lzdGVyaW5nLXlvdXItYnVzaW5lc3MveW91LW5lZWQtYS1idXNpbmVzcy1udW1iZXItYS1wcm9ncmFtLWFjY291bnQuaHRtbFwiLFxyXG4gIFwiQlVTX05VTV80LjJcIjogXCJHb3Zlcm5tZW50IG9mIENhbmFkYSB3ZWJzaXRlXCIsXHJcbiAgXCJST0xFXzFcIjogXCLigJxNYW51ZmFjdHVyZXIgLyBTcG9uc29yIEluZm9ybWF0aW9u4oCdOiBSZWZlcnMgdG8gdGhlIG5hbWUgdW5kZXIgd2hpY2ggdGhlIGRydWcgc3VibWlzc2lvbiBpcyBmaWxlZCwgd2hlcmUgYSBEcnVnIElkZW50aWZpY2F0aW9uIE51bWJlciAoRElOKSAvIE5vdGljZSBvZiBDb21wbGlhbmNlIChOT0MpIGlzIHRvIGJlIGlzc3VlZCwgdGhlIGNvbXBhbnkgaW4gd2hvc2UgbmFtZSB0aGUgRElOIC8gTk9DIHdpbGwgYmUgcmVnaXN0ZXJlZCwgYW5kIHRoZSBuYW1lIHRvIGJlIGluY2x1ZGVkIG9uIHRoZSBwcm9kdWN0IGxhYmVsIGFuZCBQcm9kdWN0IE1vbm9ncmFwaCAvIFBhY2thZ2UgSW5zZXJ0LlwiLFxyXG4gIFwiUk9MRV8yXCI6IFwiRm9yIGNsaW5pY2FsIHRyaWFsczog4oCcU3BvbnNvcuKAnTogRGVmaW5lZCBieSBEaXZpc2lvbiA1LCBQYXJ0IEMgb2YgdGhlIEZvb2QgYW5kIERydWcgUmVndWxhdGlvbnMgYXMgdGhlIGluZGl2aWR1YWwsIGNvcnBvcmF0ZSBib2R5LCBpbnN0aXR1dGlvbiBvciBvcmdhbml6YXRpb24gdGhhdCBjb25kdWN0cyBhIGNsaW5pY2FsIHRyaWFsLiBUaGUgc3BvbnNvciBpcyBub3QgbmVjZXNzYXJpbHkgdGhlIGNvbXBhbnkgdGhhdCBmYWJyaWNhdGVzIHRoZSBkcnVnIHByb2R1Y3QuIEZvciBJbnZlc3RpZ2F0b3ItaW5pdGlhdGVkIGNsaW5pY2FsIHRyaWFsczogaWYgdGhlIHNwb25zb3IgaXMgZGVmaW5lZCBhcyBhbiBpbmRpdmlkdWFsLCBwbGVhc2UgYWxzbyBpbmRpY2F0ZSB0aGUgbmFtZSBvZiB0aGUgYWZmaWxpYXRlZCBpbnN0aXR1dGlvbi9vcmdhbml6YXRpb24uXCIsXHJcbiAgXCJST0xFXzNcIjogXCLigJxSZWd1bGF0b3J5IE1haWxpbmcgLyBBbm51YWwgQ29udGFjdCBBZGRyZXNz4oCdOiBQZXJ0YWlucyB0byB3aGVyZSBhbmQgdG8gd2hvbSBIZWFsdGggQ2FuYWRhIHNob3VsZCBkaXJlY3QgcmVndWxhdG9yeSBtYWlsIG90aGVyIHRoYW4gY29ycmVzcG9uZGVuY2Ugc3BlY2lmaWMgdG8gdGhlIHN1YmplY3QgZHJ1ZyBzdWJtaXNzaW9uLCBlLmcuIGFubnVhbCBub3RpZmljYXRpb24sIHJlZ3VsYXRvcnkgLyBwb2xpY3kgYW1lbmRtZW50IG5vdGljZXMgYXMgdGhleSBhcHBseSB0byBESU5zIHJlZ2lzdGVyZWQgdG8gdGhlIG1hbnVmYWN0dXJlci9zcG9uc29yLiBPcGVyYXRpb25hbCBhbmQgc3lzdGVtIHJlcXVpcmVtZW50cyBkaWN0YXRlIHRoYXQgdGhlIHJlZ3VsYXRvcnkgbWFpbGluZyBuYW1lL2FkZHJlc3MgbXVzdCBiZSB0aGUgc2FtZSBmb3IgYWxsIERJTnMgcmVnaXN0ZXJlZCB0byB0aGUgbWFudWZhY3R1cmVyIC8gc3BvbnNvciBpZGVudGlmaWVkIHdoZXJlIG1vcmUgdGhhbiBvbmUgRElOIGlzIGhlbGQgYnkgdGhhdCBjb21wYW55LlwiLFxyXG4gIFwiUk9MRV80XCI6IFwi4oCcQmlsbGluZyBBZGRyZXNz4oCdIOKAkyBUbyB3aG9tIHRoZSBpbnZvaWNlIGlzIHRvIGJlIHNlbnQuXCIsXHJcbiAgXCJST0xFXzVcIjogXCLigJxDYW5hZGlhbiBJbXBvcnRlciBtYWlsaW5nIGFkZHJlc3PigJ06IGlzIHJlc3BvbnNpYmxlIGZvciB0aGUgc2FsZSBvZiBwcm9kdWN0cyBpbiBDYW5hZGEgd2hlbiB0aGUgc3BvbnNvci9tYW51ZmFjdHVyZXIgaWRlbnRpZmllZCBpcyBOT1QgbG9jYXRlZCBpbiBDYW5hZGEuICBBbHRob3VnaCBpdCBkb2VzIG5vdCBuZWVkIHRvIGJlIHByb3ZpZGVkIGF0IHRoZSB0aW1lIG9mIGluaXRpYWwgY29tcGFueSBlbnJvbG1lbnQsIHRoZSBDYW5hZGlhbiBJbXBvcnRlciByZXNwb25zaWJsZSBmb3Igc2FsZSBtdXN0IGJlIGlkZW50aWZpZWQgcHJpb3IgdG8gdGhlIHByb2R1Y3QgZW50ZXJpbmcgdGhlIG1hcmtldC4gQWRkIGEgQ2FuYWRpYW4gSW1wb3J0ZXIgTWFpbGluZyBBZGRyZXNzIHRvIHRoZSBDb21wYW55IFhNTCBmaWxlIGJ5IHVzaW5nIHRoZSDigJxhbWVuZCBlbnJvbG1lbnTigJ0gYnV0dG9uLiBUaGUgSW1wb3J0ZXIgQ29tcGFueSBJRCBpc3N1ZWQgYnkgSGVhbHRoIENhbmFkYSBzaG91bGQgYWxzbyBiZSByZWZlcnJlZCB0byBpbiB0aGUgUHJvZHVjdCBJbmZvcm1hdGlvbiBYTUwgZmlsZSwgd2hlcmUgYXBwcm9wcmlhdGUuXCIsXHJcbi8vICBcIlJPTEVfNlwiOiBcIlRoZSBDYW5hZGlhbiBJbXBvcnRlciBNYWlsaW5nIEFkZHJlc3Mgcm9sZSBpcyB1c2VkIHRvIGlkZW50aWZ5IGEgY29tcGFueSB0aGF0IGlzIGltcG9ydGluZyBwcm9kdWN0cyBvbiBiZWhhbGYgb2YgdGhlIG1hbnVmYWN0dXJlciBpbiBjYXNlcyB3aGVyZSB0aGUgbWFudWZhY3R1cmVyL3Nwb25zb3IgaXMgbm90IGxvY2F0ZWQgaW4gQ2FuYWRhLiBJZiB0aGV5IChpLmUuIHRoZSBtYW51ZmFjdHVyZXIvc3BvbnNvciApIGFyZSBsb2NhdGVkIGluIENhbmFkYSwgdGhlbiBhIGRlc2lnbmF0ZWQgaW1wb3J0ZXIgaXMgbm90IHJlcXVpcmVkLlwiLFxyXG4gIFwiUk9MRV82XCI6IFwiRG8gTm90IHByb3ZpZGUgYSBDYW5hZGlhbiBJbXBvcnRlciBmb3IgY2xpbmljYWwgdHJpYWwgdHJhbnNhY3Rpb25zIG9uIHRoZSBjb21wYW55IHRlbXBsYXRlLiBJbXBvcnRlciBpbmZvcm1hdGlvbiByZWxhdGVkIHRvIGNsaW5pY2FsIHRyaWFsIHJlZ3VsYXRvcnkgYWN0aXZpdGllcyBzaG91bGQgYmUgYXV0aG9yaXplZCBieSB0aGUgc3BvbnNvciBhbmQgY2FwdHVyZWQgb24gdGhlIFByb2R1Y3QgSW5mb3JtYXRpb24gKFBJKSB0ZW1wbGF0ZSBhbmQgYSBzZXBhcmF0ZSBhdXRob3JpemF0aW9uIGxldHRlci4gXCIsXHJcbiAgXCJST0xFXzdcIjogXCJGb3IgY2xpbmljYWwgdHJpYWxzOiBEbyBub3QgaWRlbnRpZnkgaW1wb3J0ZXJzIHJlbGF0ZWQgdG8gY2xpbmljYWwgdHJpYWxzIG9uIHRoZSBDb21wYW55IChDTykgdGVtcGxhdGUuIEltcG9ydGVyIGluZm9ybWF0aW9uIHJlbGF0ZWQgdG8gY2xpbmljYWwgdHJpYWxzIHNob3VsZCBiZSBjYXB0dXJlZCBvbiB0aGUgUHJvZHVjdCBJbmZvcm1hdGlvbiAoUEkpIHRlbXBsYXRlLlwiLFxyXG4gIFwiQ09NUEFOWV9SRVBfMVwiOiBcIkEgbWluaW11bSBvZiBvbmUgY29tcGFueSByZXByZXNlbnRhdGl2ZSBpcyByZXF1aXJlZCBmb3IgdGhlIGNvbXBhbnkgdGVtcGxhdGUuXCIsXHJcbiAgXCJDT01QQU5ZX1JFUF8yXCI6IFwiVGhlcmUgbXVzdCBiZSBhIGNvbXBhbnkgcmVwcmVzZW50YXRpdmUgYXNzb2NpYXRlZCB3aXRoIGVhY2ggb2YgdGhlIGZvbGxvd2luZyByb2xlczog4oCcTWFudWZhY3R1cmVyIC8gU3BvbnNvciBNYWlsaW5nIEFkZHJlc3PigJ0sIOKAnEJpbGxpbmcgQWRkcmVzc+KAnSwg4oCcUmVndWxhdG9yeSBNYWlsaW5nIC8gQW5udWFsIENvbnRhY3TigJ0gYW5kIOKAnFJFUCBjb250YWN04oCdLlwiLFxyXG4gIFwiQ09NUEFOWV9SRVBfM1wiOiBcIkEgc2luZ2xlIGNvbnRhY3QgbWF5IGJlIGFzc29jaWF0ZWQgd2l0aCBtdWx0aXBsZSByb2xlcywgaG93ZXZlciwgZWFjaCByb2xlIG1heSBvbmx5IGhhdmUgb25lIGNvbnRhY3QuXCIsXHJcbiAgXCJDT01QQU5ZX1JFUF80XCI6IFwiVGhlIFJFUCBjb250YWN0IGlzIHRoZSBwZXJzb24gdG8gYmUgY29udGFjdGVkIGJ5IEhlYWx0aCBDYW5hZGEgaWYgdGhlcmUgYXJlIGFueSBpc3N1ZXMgb3IgY2xhcmlmaWNhdGlvbnMgcmVxdWlyZWQgZm9yIHRoaXMgdGVtcGxhdGUgd2hlbiBpdCBpcyBzdWJtaXR0ZWQgZm9yIGVucm9sbWVudCBvciBhbWVuZG1lbnQuXCIsXHJcbiAgXCJDT01QQU5ZX1JFUF81XCI6IFwiT25lIGNvbXBhbnkgcmVwcmVzZW50YXRpdmUgaXMgcmVxdWlyZWQgZm9yIGVhY2ggQ2FuYWRpYW4gSW1wb3J0ZXIgTWFpbGluZyBBZGRyZXNzIHRoYXQgaGFzIGJlZW4gcHJvdmlkZWRcIixcclxuLy8gIFwiQ09NUEFOWV9SRVBfNVwiOiBcIlNwb25zb3JzIG1heSBjaG9vc2UgdG8gcHJvdmlkZSBhbiBBbHRlcm5hdGUgUkVQIGNvbnRhY3QsIGhvd2V2ZXIgdGhpcyBpcyBub3QgYSByZXF1aXJlbWVudC5cIixcclxuLy8gIFwiQ09NUEFOWV9SRVBfNlwiOiBcIkRlc2NyaXB0aW9uIG9mIFJvbGVzXCIsXHJcbi8vICBcIkNPTVBBTllfUkVQXzdcIjogXCLigJxNYW51ZmFjdHVyZXIgLyBTcG9uc29yIEluZm9ybWF0aW9u4oCdOiBSZWZlcnMgdG8gdGhlIG5hbWUgdW5kZXIgd2hpY2ggdGhlIGRydWcgc3VibWlzc2lvbiBpcyBmaWxlZCwgd2hlcmUgYSBEcnVnIElkZW50aWZpY2F0aW9uIE51bWJlciAoRElOKSAvIE5vdGljZSBvZiBDb21wbGlhbmNlIChOT0MpIGlzIHRvIGJlIGlzc3VlZCwgdGhlIGNvbXBhbnkgaW4gd2hvc2UgbmFtZSB0aGUgRElOIC8gTk9DIHdpbGwgYmUgcmVnaXN0ZXJlZCwgYW5kIHRoZSBuYW1lIHRvIGJlIGluY2x1ZGVkIG9uIHRoZSBwcm9kdWN0IGxhYmVsIGFuZCBQcm9kdWN0IE1vbm9ncmFwaCAvIFBhY2thZ2UgSW5zZXJ0LlwiLFxyXG4vLyAgXCJDT01QQU5ZX1JFUF84XCI6IFwiRm9yIGNsaW5pY2FsIHRyaWFsczog4oCcU3BvbnNvcuKAnTogRGVmaW5lZCBieSBEaXZpc2lvbiA1LCBQYXJ0IEMgb2YgdGhlIEZvb2QgYW5kIERydWcgUmVndWxhdGlvbnMgYXMgdGhlIGluZGl2aWR1YWwsIGNvcnBvcmF0ZSBib2R5LCBpbnN0aXR1dGlvbiBvciBvcmdhbml6YXRpb24gdGhhdCBjb25kdWN0cyBhIGNsaW5pY2FsIHRyaWFsLiBUaGUgc3BvbnNvciBpcyBub3QgbmVjZXNzYXJpbHkgdGhlIGNvbXBhbnkgdGhhdCBmYWJyaWNhdGVzIHRoZSBkcnVnIHByb2R1Y3QuIEZvciBJbnZlc3RpZ2F0b3ItaW5pdGlhdGVkIGNsaW5pY2FsIHRyaWFsczogaWYgdGhlIHNwb25zb3IgaXMgZGVmaW5lZCBhcyBhbiBpbmRpdmlkdWFsLCBwbGVhc2UgYWxzbyBpbmRpY2F0ZSB0aGUgbmFtZSBvZiB0aGUgYWZmaWxpYXRlZCBpbnN0aXR1dGlvbi9vcmdhbml6YXRpb24uXCIsXHJcbi8vICBcIkNPTVBBTllfUkVQXzlcIjogXCLigJxSZWd1bGF0b3J5IE1haWxpbmcgLyBBbm51YWwgQ29udGFjdOKAnTogcGVydGFpbnMgdG8gd2hlcmUgYW5kIHRvIHdob20gSGVhbHRoIENhbmFkYSBzaG91bGQgZGlyZWN0IHJlZ3VsYXRvcnkgbWFpbCBvdGhlciB0aGFuIGNvcnJlc3BvbmRlbmNlIHNwZWNpZmljIHRvIHRoZSBzdWJqZWN0IGRydWcgc3VibWlzc2lvbiwgZS5nLiBhbm51YWwgbm90aWZpY2F0aW9uLCByZWd1bGF0b3J5IC8gcG9saWN5IGFtZW5kbWVudCBub3RpY2VzIGFzIHRoZXkgYXBwbHkgdG8gRElOcyByZWdpc3RlcmVkIHRvIHRoZSBtYW51ZmFjdHVyZXIvc3BvbnNvci4gT3BlcmF0aW9uYWwgYW5kIHN5c3RlbSByZXF1aXJlbWVudHMgZGljdGF0ZSB0aGF0IHRoZSByZWd1bGF0b3J5IG1haWxpbmcgbmFtZS9hZGRyZXNzIG11c3QgYmUgdGhlIHNhbWUgZm9yIGFsbCBESU5zIHJlZ2lzdGVyZWQgdG8gdGhlIG1hbnVmYWN0dXJlciAvIHNwb25zb3IgaWRlbnRpZmllZCB3aGVyZSBtb3JlIHRoYW4gb25lIERJTiBpcyBoZWxkIGJ5IHRoYXQgY29tcGFueS5cIixcclxuLy8gIFwiQ09NUEFOWV9SRVBfMTBcIjogXCLigJxCaWxsaW5nIEFkZHJlc3PigJ0g4oCTIFRvIHdob20gdGhlIGludm9pY2UgaXMgdG8gYmUgc2VudC5cIixcclxuICBcIlJPVVRJTkdfSURfMVwiOiBcIlRoZSByb3V0aW5nIGlkZW50aWZpZXIgaXMgYSB1bmlxdWUgaWRlbnRpZmllciB3aXRoaW4gdGhlIENvbW1vbiBFbGVjdHJvbmljIFN1Ym1pc3Npb25zIEdhdGV3YXkgKENFU0cpIHVzZWQgdG8gaWRlbnRpZnkgc3BlY2lmaWMgZ2F0ZXdheSBhY2NvdW50LCB3aGV0aGVyIGl0IHVzZXMgdGhlIEFwcGxpY2FiaWxpdHkgU3RhdGVtZW50IDIgKEFTMikgb3IgV2ViVHJhZGVyIGludGVyZmFjZXMuXCIsXHJcbiAgXCJST1VUSU5HX0lEXzJcIjogXCJGb3IgdGhlIFdlYlRyYWRlciB1c2VycywgdGhlIHJvdXRpbmcgaWRlbnRpZmllciBpcyBhdXRvbWF0aWNhbGx5IGFzc2lnbmVkIHRvIGVhY2ggYWNjb3VudCBieSB0aGUgc3lzdGVtLiBJdCBjYW4gYmUgcmV0cmlldmVkIGZyb20gdGhlIHJlY2VpcHQgbWVzc2FnZS4gTmF2aWdhdGUgdG8gdGhlIFdlYlRyYWRlciBJbmJveCwgY2xpY2sgb24g4oCcUmVjZWlwdOKAnSwg4oCcVmlld+KAnSBkb2N1bWVudC4gRG9jdW1lbnQgQ29udGVudCBwYWdlIG9wZW5zIHVwIGFuZCB0aGUgcm91dGluZyBpZGVudGlmaWVyIGNhbiBiZSBmb3VuZCB1bmRlciBhdHRyaWJ1dGU6IOKAnFgtQ3ljbG9uZS1UbzrigJ1cIixcclxuICBcIlJPVVRJTkdfSURfM1wiOiBcIkZvciB0aGUgQVMyIHVzZXJzLCB0aGUgcm91dGluZyBpZGVudGlmaWVyIGhhcyB0byBiZSBjcmVhdGVkIGJ5IHRoZSBjb21wYW55LiBJdCBpcyByZWNvbW1lbmRlZCB0aGF0IHRoZSBjb21wYW55J3MgZGF0YSB1bml2ZXJzYWwgbnVtYmVyaW5nIHN5c3RlbSBudW1iZXIgYmUgdXNlZCwgYnV0IGFueSBhbHBoYS1udW1lcmljIHRleHQgc3RyaW5nIGlzIGFjY2VwdGFibGUuXCIsXHJcbiAgXCJST1VUSU5HX0lEXzQuMFwiOiBcIkZvciBhbnkgZnVydGhlciBxdWVzdGlvbnMgb24gdGhlIHJvdXRpbmcgaWRlbnRpZmllciwgcGxlYXNlIGNvbnRhY3QgdGhlIEZvb2QgYW5kIERydWcgQWRtaW5pc3RyYXRpb24gSGVscCBEZXNrIGF0IFwiLFxyXG4gIFwiUk9VVElOR19JRF80LjFcIjogXCJtYWlsdG86RVNHSGVscERlc2tAZmRhLmhocy5nb3ZcIixcclxuICBcIlJPVVRJTkdfSURfNC4yXCI6IFwiRVNHSGVscERlc2tAZmRhLmhocy5nb3ZcIixcclxuICBcIlJPVVRJTkdfSURfNVwiOiBcIlRoZSByb3V0aW5nIGlkZW50aWZpZXIgY291bGQgYmUgdGhlIHNhbWUgZm9yIHRoZSBtYW51ZmFjdHVyZXIgLyBzcG9uc29yIGNvbnRhY3QgYW5kIHJlZ3VsYXRvcnkgLyBhbm51YWwgY29udGFjdC4gVGhlIENhbmFkaWFuIGltcG9ydGVyIHdvdWxkIGhhdmUgYSBzZXBhcmF0ZSByb3V0aW5nIGlkZW50aWZpZXIuXCIsXHJcbi8vICBcIkNPTVBBTllfUk9MRV8xXCI6IFwiVGhlIFByaW1hcnkgUmVndWxhdG9yeSBFbnJvbG1lbnQgUHJvY2VzcyAoUkVQKSBjb250YWN0IGlzIHRoZSBwZXJzb24gdG8gYmUgY29udGFjdGVkIGJ5IEhlYWx0aCBDYW5hZGEgaWYgdGhlcmUgYXJlIGFueSBpc3N1ZXMgb3IgY2xhcmlmaWNhdGlvbnMgcmVxdWlyZWQgZm9yIHRoaXMgdGVtcGxhdGUgd2hlbiBpdCBpcyBzdWJtaXR0ZWQgZm9yIGVucm9sbWVudCBvciBhbWVuZG1lbnQuXCIsXHJcbiAgXCJHRU5fWE1MXzFcIjogXCJTdWJtaXQgdGhlIGRyYWZ0IFhNTCBmaWxlIHRvIEhlYWx0aCBDYW5hZGEgdXNpbmcgdGhlIENvbW1vbiBFbGVjdHJvbmljIFN1Ym1pc3Npb24gR2F0ZXdheSAoQ0VTRykuXCIsXHJcbiAgXCJHRU5fWE1MXzJcIjogXCJSZWZlciB0byB0aGUgUmVndWxhdG9yeSBFbnJvbG1lbnQgUHJvY2VzcyAoUkVQKSBndWlkYW5jZSBkb2N1bWVudCBmb3IgZGV0YWlsZWQgaW5mb3JtYXRpb24uXCJcclxufSk7XG5cbiR0cmFuc2xhdGVQcm92aWRlci50cmFuc2xhdGlvbnMoXCJmclwiLCB7XHJcbiAgXCJSRUdfQ09NUEFOWV9FTlJPTFwiOiBcIkluc2NyaXB0aW9uIGQndW5lIGNvbXBhZ25pZSByw6lnbGVtZW50YWlyZVwiLFxyXG4gIFwiTE9BRF9DT01QQU5ZX0ZJTEVcIjogXCJDaGFyZ2VyIHVuIGZpY2hpZXIgZCdpbnNjaXByaXRvbiBkZSBjb21wYWduaWVcIixcclxuLy8gIFwiRU5ST0xfSU5TVFJVQ1RcIjogXCJmcl9Db21wYW55IFJlZ3VsYXRvcnkgRW5yb2xtZW50IEluc3RydWN0aW9uc1wiLFxyXG4vLyAgXCJBRERSRVNTX0lOU1RSVUNUXCI6XCJmcl9Db21wYW55IEFkZHJlc3MgUmVjb3JkIEluc3RydWN0aW9uc1wiLFxyXG4vLyAgXCJBRERSRVNTX1JPTEVfSU5TVFJVQ1RcIjpcImZyX0NvbXBhbnkgQWRkcmVzcyBSb2xlIEluc3RydWN0aW9uc1wiLFxyXG4gIFwiUkVQUkVTRU5UX0lOU1RSVUNUXCI6XCJJbmZvcm1hdGlvbiByZXByw6lzZW50YXRpdmUgZGUgbCdlbnRyZXBpc2VcIixcclxuLy8gIFwiU0FWRV9JTlNUUlVDVFwiOiBcImZyX0NvbXBhbnkgRmlsZSBTYXZlIEluc3RydWN0aW9uc1wiLFxyXG4gIFwiQU1FTkRfTk9URVwiOiBcIkxlIGJvdXRvbiDCq01vZGlmaWVyIGwnaW5zY3JpcHRpb27CuyBkb2l0IMOqdHJlIHPDqWxlY3Rpb25uw6kgbG9ycyBkZSBsYSBtb2RpZmljYXRpb24gZCd1biBYTUwgZCdlbnRyZXByaXNlIGZpbmFsLlwiLFxyXG4gIFwiRklFTERJRFwiOiBcIk51bcOpcm8gZCdlbnRyZXByaXNlXCIsXHJcbiAgXCJDT01QQU5ZX05BTUVcIjogXCJOb20gZGUgbGEgY29tcGFnbmllIFwiLFxyXG4gIFwiSFRfTE9BRF9GSUxFXzFcIjogXCJJbCBu4oCZZXN0IHBhcyBuw6ljZXNzYWlyZSBkZSBjaGFyZ2VyIHVuIGZpY2hpZXIgZGUgY29tcGFnbmllIHPigJlpbCBz4oCZYWdpdCBkZSB2b3RyZSBwcmVtacOocmUgaW5zY3JpcHRpb24gcG91ciBsYSBjb21wYWduaWUuXCIsXHJcbiAgXCJIVF9MT0FEX0ZJTEVfMlwiOiBcIkxvcnMgZGUgbGEgcHJvZHVjdGlvbiBk4oCZdW5lIGNvcGllIGRlIHRyYXZhaWwsIGxlIGZpY2hpZXIgZG9pdCDDqnRyZSBjaGFyZ8OpIGVuIGZvcm1hdCAuaGNzYy5cIixcclxuICBcIkhUX0xPQURfRklMRV8zXCI6IFwiTG9ycyBkZSBsYSBjb25zdWx0YXRpb24gb3UgZGUgbGEgbWlzZSDDoCBqb3VyIGTigJl1bmUgdmVyc2lvbiBmaW5hbGUgZHUgZmljaGllciBYTUwsIGxlIGZpY2hpZXIgZG9pdCDDqnRyZSBjaGFyZ8OpIGVuIGZvcm1hdCAueG1sLlwiLFxyXG4gIFwiRU5ST0xfMS4wXCI6IFwiU2kgbGVzIGJvdXRvbnMgwqvigIlFbnJlZ2lzdHJlciB1bmUgY29waWUgZGUgdHJhdmFpbOKAicK7IG91IMKr4oCJRW5yZWdpc3RyZXIgbGUgYnJvdWlsbG9uIFhNTOKAicK7LCBzaXR1w6lzIMOgIGxhIGZpbiBkdSBtb2TDqGxlLCBzb250IHPDqWxlY3Rpb25uw6lzLCBsZXMgY2hhbXBzIMKr4oCJU3RhdHV0IGRlIGzigJlpbnNjcmlwdGlvbuKAicK7LCDCq+KAiVZlcnNpb24gZGUgbOKAmWluc2NyaXB0aW9u4oCJwrsgZXQgwqvigIlEYXRlIGR1IGRlcm5pZXIgZW5yZWdpc3RyZW1lbnTigInCuyBzZXJvbnQgcmVtcGxpcyBhdXRvbWF0aXF1ZW1lbnQgcGFyIGxlIGZvcm11bGFpcmUuXCIsXHJcbiAgXCJFTlJPTF8yLjBcIjogXCJMZSBjaGFtcCDCq+KAiU51bcOpcm8gZGUgbGEgY29tcGFnbmll4oCJwrsgc2VyYSByZW1wbGkgcGFyIFNhbnTDqSBDYW5hZGEgbG9ycyBkZSBsYSBnw6luw6lyYXRpb24gZGUgbGEgdmVyc2lvbiBmaW5hbGUgZHUgZmljaGllciBkZSBjb21wYWduaWUgKGVuIGZvcm1hdCBYTUwpLlwiLFxyXG4gIFwiRU5ST0xfMy4wXCI6IFwiTGUgYm91dG9uIMKr4oCJTW9kaWZpZXIgbOKAmWluc2NyaXB0aW9u4oCJwrsgbuKAmWVzdCBhY3RpdsOpIHF1ZSBsb3JzcXXigJl1bmUgdmVyc2lvbiBkw6lmaW5pdGl2ZSBmaW5hbGUgZHUgZmljaGllciBkZSBjb21wYWduaWUgKGVuIGZvcm1hdCBYTUwpIGVzdCBjaGFyZ8OpZSBkYW5zIGxlIG1vZMOobGUuIFBvdXIgbW9kaWZpZXIgbGUgZmljaGllciBkZSBjb21wYWduaWUgKGVuIGZvcm1hdCBYTUwpLCBpbCBzdWZmaXQgZGUgY2xpcXVlciBzdXIgY2UgYm91dG9uLlwiLFxyXG4gIFwiQUREUl9JTkZPXzFcIjogXCJMZSBtb2TDqGxlIGRlIGNvbXBhZ25pZSBkb2l0IGNvbnRlbmlyIGF1IG1vaW5zIHVuZSBhZHJlc3NlLlwiLFxyXG4gIFwiQUREUl9JTkZPXzIuMFwiOiBcIkxlcyByw7RsZXMgc3VpdmFudHMgZG9pdmVudCDDqnRyZSBhc3NvY2nDqXMgw6AgdW5lIGFkcmVzc2UgOiDCq+KAiUZhYnJpY2FudCBvdSBwcm9tb3RldXLigInCuywgwqvigIlQZXJzb25uZS1yZXNzb3VyY2UgcG91ciBsYSBmYWN0dXJhdGlvbuKAicK7IGV0IMKr4oCJUGVyc29ubmUtcmVzc291cmNlIHBvdXIgbGUgY291cnJpZXIgcsOpZ2xlbWVudGFpcmUgZXQgcG91ciBsZXMgYW5udWVsc+KAicK7LlwiLFxyXG4gIFwiQUREUl9JTkZPXzNcIjogXCJBIHNpbmdsZSBhZGRyZXNzIG1heSBiZSBhc3NvY2lhdGVkIHRvIG11bHRpcGxlIHJvbGVzLCBob3dldmVyLCBlYWNoIHJvbGUgbWF5IG9ubHkgaGF2ZSBvbmUgYWRkcmVzcy5cIixcclxuICBcIkJVU19OVU1fNC4wXCI6IFwiVW4gbnVtw6lybyBkJ2VudHJlcHJpc2UgZXN0IHVuIG51bcOpcm8gw6AgbmV1ZiBjaGlmZnJlcyB1bmlxdWVzLiBJbCBlc3QgdW4gaWRlbnRpZmljYXRldXIgbm9ybWFsaXPDqSDDqXRlbmR1IMOgIHRvdXMgbGVzIHByb2dyYW1tZXMgZCdlbnRyZXByaXNlIGF1IGdvdXZlcm5lbWVudCBmw6lkw6lyYWwuIElsIGVzdCB1bmlxdWUgw6AgdW5lIGVudHJlcHJpc2Ugb3Ugw6AgdW5lIGVudGl0w6kgbMOpZ2FsZS4gUG91ciBkZSBwbHVzIGFtcGxlcyBpbmZvcm1hdGlvbnMgc3VyIGxlIG51bcOpcm8gZCdlbnRyZXByaXNlLCB2b3VzIHBvdXZleiBjb25zdWx0ZXIgbGEgcGFnZSB3ZWIgc3VpdmFudGU6IFwiLFxyXG4gIFwiQlVTX05VTV80LjFcIjogXCJodHRwczovL3d3dy5jYW5hZGEuY2EvZnIvYWdlbmNlLXJldmVudS9zZXJ2aWNlcy9pbXBvdC9lbnRyZXByaXNlcy9zdWpldHMvaW5zY3JpcmUtdm90cmUtZW50cmVwcmlzZS9hdmV6LXZvdXMtYmVzb2luLW51bWVyby1lbnRyZXByaXNlLWNvbXB0ZS1wcm9ncmFtbWUuaHRtbFwiLFxyXG4gIFwiQlVTX05VTV80LjJcIjogXCJTaXRlIFdlYiBkdSBHb3V2ZXJuZW1lbnQgZHUgQ2FuYWRhXCIsXHJcbiAgXCJST0xFXzFcIjogXCLCq+KAiVJlbnNlaWduZW1lbnRzIHN1ciBsZSBmYWJyaWNhbnQgb3UgbGUgcHJvbW90ZXVy4oCJwrsgOiBEw6lzaWduZSBsZSBub20gc291cyBsZXF1ZWwgbGEgcHLDqXNlbnRhdGlvbiBkZSBtw6lkaWNhbWVudCBlc3QgZMOpcG9zw6llLCBsb3JzcXXigJl1biBudW3DqXJvIGTigJlpZGVudGlmaWNhdGlvbiBkdSBtw6lkaWNhbWVudCAoRElOKSBvdSB1biBhdmlzIGRlIGNvbmZvcm1pdMOpIChBQykgZG9pdCDDqnRyZSBkw6lsaXZyw6ksIGlsIHPigJlhZ2l0IGR1IG5vbSBkZSBsYSBjb21wYWduaWUgcXVpIGVucmVnaXN0cmVyYSBsZSBESU4gb3UgbOKAmUFDIChjLi3DoC1kLiBsZSBkw6l0ZW50ZXVyIGR1IERJTiBvdSBkZSBs4oCZQUMpLCBhaW5zaSBxdWUgbGUgbm9tIHF1aSBkb2l0IGZpZ3VyZXIgc3VyIGzigJnDqXRpcXVldHRlIGR1IHByb2R1aXQgZXQgZGFucyBsYSBtb25vZ3JhcGhpZSBvdSBsYSBub3RpY2UgZHUgcHJvZHVpdFwiLFxyXG4gIFwiUk9MRV8yXCI6IFwiUG91ciBsZXMgZXNzYWlzIGNsaW5pcXVlczogwqtQcm9tb3RldXLCuzsgRMOpZmluaSBwYXIgbGEgc2VjdGlvbiA1LCBwYXJ0aWUgQyBkdSBSw6hnbGVtZW50IHN1ciBsZXMgYWxpbWVudHMgZXQgZHJvZ3VlcywgY29tbWUgbGEgcGVyc29ubmUgcGh5c2lxdWUsIGxhIHBlcnNvbm5lIG1vcmFsZSwgbCdpbnN0aXR1dGlvbiBvdSBsJ29yZ2FuaXNhdGlvbiBxdWkgbcOobmUgdW4gZXNzYWkgY2xpbmlxdWUuIExlIHByb21vdGV1ciBuJ2VzdCBwYXMgbsOpY2Vzc2FpcmVtZW50IGwnZW50cmVwcmlzZSBxdWkgZmFicmlxdWUgbGUgbcOpZGljYW1lbnQuIFBvdXIgbGVzIGVzc2FpcyBjbGluaXF1ZXMgaW5pdGnDqXMgcGFyIGwnaW52ZXN0aWdhdGV1clwiLFxyXG4gIFwiUk9MRV8zXCI6IFwiwqvigIlBZHJlc3NlIHBvdXIgbGUgY291cnJpZXIgcsOpZ2xlbWVudGFpcmUgZXQgcG91ciBsZXMgYW5udWVsc+KAicK7IDogSW5kaXF1ZSBvw7kgZXQgw6AgcXVpIFNhbnTDqSBDYW5hZGEgZG9pdCBlbnZveWVyIGxlIGNvdXJyaWVyIHLDqWdsZW1lbnRhaXJlIGF1dHJlIHF1ZSBsZSBjb3VycmllciBjb25jZXJuYW50IHNww6ljaWZpcXVlbWVudCBsYSBwcsOpc2VudGF0aW9uIGRlIG3DqWRpY2FtZW50IMOgIHRyYWl0ZXI7IHAuIGV4LiwgbGUgZm9ybXVsYWlyZSBkZSBkw6ljbGFyYXRpb24gYW5udWVsbGUgZXQgbGVzIGF2aXMgZGUgbW9kaWZpY2F0aW9uIMOgIGRlcyByw6hnbGVtZW50cyBvdSBwb2xpdGlxdWVzIHF1aSBz4oCZYXBwbGlxdWVudCBhdXggRElOIGVucmVnaXN0csOpcyBhdSBub20gZHUgZmFicmljYW50IG91IGR1IHByb21vdGV1ci4gTGVzIGJlc29pbnMgb3DDqXJhdGlvbm5lbHMgZXQgY2V1eCBkdSBzeXN0w6htZSBleGlnZW50IHF1ZSBsZSBub20gZXQgbOKAmWFkcmVzc2UgcG91ciBsZSBjb3VycmllciByw6lnbGVtZW50YWlyZSBzb2llbnQgbGVzIG3Dqm1lcyBwb3VyIHRvdXMgbGVzIERJTiBlbnJlZ2lzdHLDqXMgYXUgbm9tIGR1IGZhYnJpY2FudCBvdSBkdSBwcm9tb3RldXIgbG9yc3F1ZSBs4oCZZW50cmVwcmlzZSBkw6l0aWVudCBwbHVzIGTigJl1biBESU4uXCIsXHJcbiAgXCJST0xFXzRcIjogXCLCq+KAiUFkcmVzc2UgZGUgZmFjdHVyYXRpb27igInCuyA6IEluZGlxdWUgbOKAmWFkcmVzc2Ugb8O5IGxhIGZhY3R1cmUgZG9pdCDDqnRyZSBlbnZvecOpZS5cIixcclxuICBcIlJPTEVfNVwiOiBcIsKr4oCJQWRyZXNzZSBwb3N0YWxlIGRlIGzigJlpbXBvcnRhdGV1ciBjYW5hZGllbuKAicK7IDogTOKAmWltcG9ydGF0ZXVyIGNhbmFkaWVuIGVzdCByZXNwb25zYWJsZSBkZSBsYSB2ZW50ZSBkZXMgcHJvZHVpdHMgYXUgQ2FuYWRhIGxvcnNxdWUgbGUgZmFicmljYW50IG91IGxlIHByb21vdGV1ciBu4oCZZXN0IHBhcyBzaXR1w6kgYXUgQ2FuYWRhLiBM4oCZaWRlbnRpdMOpIGRlIGzigJlpbXBvcnRhdGV1ciBjYW5hZGllbiByZXNwb25zYWJsZSBkZSBsYSB2ZW50ZSBkb2l0IMOqdHJlIGRpdnVsZ3XDqWUgYXZhbnQgbOKAmWVudHLDqWUgZHUgcHJvZHVpdCBzdXIgbGUgbWFyY2jDqSwgbcOqbWUgc+KAmWlsIG7igJllc3QgcGFzIG7DqWNlc3NhaXJlIGRlIGxhIGZvdXJuaXIgYXUgbW9tZW50IGRlIGzigJlpbnNjcmlwdGlvbiBpbml0aWFsZSDDoCBsYSBjb21wYWduaWUuIFBvdXIgYWpvdXRlciBs4oCZYWRyZXNzZSBwb3N0YWxlIGTigJl1biBpbXBvcnRhdGV1ciBjYW5hZGllbiBhdSBmaWNoaWVyIGTigJllbnRyZXByaXNlIChlbiBmb3JtYXQgWE1MKSwgaWwgc3VmZml0IGTigJl1dGlsaXNlciBsZSBib3V0b24gwqvigIlNb2RpZmllciBs4oCZaW5zY3JpcHRpb27igInCuy4gTGUgbnVtw6lybyBkZSBjb21wYWduaWUgZGUgbOKAmWltcG9ydGF0ZXVyLCBkw6lsaXZyw6kgcGFyIFNhbnTDqSBDYW5hZGEsIGRvaXQgw6lnYWxlbWVudCBmaWd1cmVyIGRhbnMgbGUgZmljaGllciBk4oCZaW5mb3JtYXRpb24gc3VyIGxlIHByb2R1aXQgKGVuIGZvcm1hdCBYTUwpLCBsZSBjYXMgw6ljaMOpYW50LlwiLFxyXG4vLyAgXCJST0xFXzZcIjogXCJMZSByw7RsZSBkJ2FkcmVzc2UgcG9zdGFsZSBkZSBsJ2ltcG9ydGF0ZXVyIGNhbmFkaWVuIGVzdCB1dGlsaXPDqSBwb3VyIGlkZW50aWZpZXIgdW5lIGNvbXBhZ25pZSBxdWkgaW1wb3J0ZSBkZXMgcHJvZHVpdHMgcG91ciBsZSBjb21wdGUgZHUgZmFicmljYW50IGRhbnMgbGVzIGNhcyBvw7kgbGUgZmFicmljYW50IC8gcHJvbW90ZXVyIG4nZXN0IHBhcyBzaXR1w6kgYXUgQ2FuYWRhLiBTJ2lscyAoYy4tw6AtZC4gTGUgZmFicmljYW50IC8gcHJvbW90ZXVyKSBzb250IHNpdHXDqXMgYXUgQ2FuYWRhLCB1biBpbXBvcnRhdGV1ciBkw6lzaWduw6kgbidlc3QgcGFzIG7DqWNlc3NhaXJlLlwiLFxyXG4gIFwiUk9MRV82XCI6IFwiZnJfRG8gTm90IHByb3ZpZGUgYSBDYW5hZGlhbiBJbXBvcnRlciBmb3IgY2xpbmljYWwgdHJpYWwgdHJhbnNhY3Rpb25zIG9uIHRoZSBjb21wYW55IHRlbXBsYXRlLiBJbXBvcnRlciBpbmZvcm1hdGlvbiByZWxhdGVkIHRvIGNsaW5pY2FsIHRyaWFsIHJlZ3VsYXRvcnkgYWN0aXZpdGllcyBzaG91bGQgYmUgYXV0aG9yaXplZCBieSB0aGUgc3BvbnNvciBhbmQgY2FwdHVyZWQgb24gdGhlIFByb2R1Y3QgSW5mb3JtYXRpb24gKFBJKSB0ZW1wbGF0ZSBhbmQgYSBzZXBhcmF0ZSBhdXRob3JpemF0aW9uIGxldHRlci4gXCIsXHJcbiAgXCJST0xFXzdcIjogXCJQb3VyIGxlcyBlc3NhaXMgY2xpbmlxdWVzOiBOJ2lkZW50aWZpZXogcGFzIGxlcyBpbXBvcnRhdGV1cnMgbGnDqXMgYXV4IGVzc2FpcyBjbGluaXF1ZXMgc3VyIGxlIG1vZMOobGUgZGUgY29tcGFnbmllIChDTykuIExlcyBpbmZvcm1hdGlvbnMgc3VyIGwnaW1wb3J0YXRldXIgcmVsYXRpdmVzIGF1eCBlc3NhaXMgY2xpbmlxdWVzIGRvaXZlbnQgw6p0cmUgc2Fpc2llcyBzdXIgbGUgbW9kw6hsZSBkJ2luZm9ybWF0aW9ucyBzdXIgbGUgcHJvZHVpdCAoUEkpLlwiLFxyXG4gIFwiQ09NUEFOWV9SRVBfMVwiOiBcIkxlIG1vZMOobGUgZGUgbGEgY29tcGFnbmllIGRvaXQgY29udGVuaXIgYXUgbW9pbnMgdW4gcmVwcsOpc2VudGFudC5cIixcclxuICBcIkNPTVBBTllfUkVQXzJcIjogXCIgTGUgcmVwcsOpc2VudGFudCBkZSBsYSBjb21wYWduaWUgZG9pdCDDqnRyZSBhc3NvY2nDqSDDoCBjaGFjdW4gZGVzIHLDtGxlcyBzdWl2YW50cyA6IMKr4oCJRmFicmljYW50IG91IHByb21vdGV1cuKAicK7LCDCq+KAiUZhY3R1cmF0aW9u4oCJwrssIMKr4oCJUGVyc29ubmUtcmVzc291cmNlIHBvdXIgbGUgY291cnJpZXIgcsOpZ2xlbWVudGFpcmUgZXQgcG91ciBsZXMgYW5udWVsc+KAicK7IGV0IMKr4oCJUGVyc29ubmUtcmVzc291cmNlIGR1IFBJUuKAicK7LlwiLFxyXG4gIFwiQ09NUEFOWV9SRVBfM1wiOiBcIlVuZSBtw6ptZSBwZXJzb25uZS1yZXNzb3VyY2UgcGV1dCDDqnRyZSBhc3NvY2nDqWUgw6AgcGx1c2lldXJzIHLDtGxlcywgbWFpcyB1biByw7RsZSBuZSBwZXV0IMOqdHJlIGFzc29jacOpIHF14oCZw6AgdW5lIHNldWxlIHBlcnNvbm5lLXJlc3NvdXJjZS5cIixcclxuICBcIkNPTVBBTllfUkVQXzRcIjogXCJMYSBwZXJzb25uZS1yZXNzb3VyY2UgZHUgUElSIGVzdCBsYSBwZXJzb25uZSBxdWUgU2FudMOpIENhbmFkYSBkb2l0IGNvbnRhY3RlciBz4oCZaWwgeSBhIGRlcyBxdWVzdGlvbnMgw6AgcsOpZ2xlciBvdSBkZXMgcHLDqWNpc2lvbnMgw6AgYXBwb3J0ZXIgYXUgbW9kw6hsZSBsb3JzcXXigJlpbCBmYWl0IGzigJlvYmpldCBk4oCZdW5lIGRlbWFuZGUgZOKAmWluc2NyaXB0aW9uIG91IGRlIG1vZGlmaWNhdGlvbi5cIixcclxuICBcIkNPTVBBTllfUkVQXzVcIjogXCJVbiByZXByw6lzZW50YW50IGRlIGxhIGNvbXBhZ25pZSBlc3QgcmVxdWlzIHBvdXIgY2hhcXVlIGFkcmVzc2UgcG9zdGFsZSBkJ2ltcG9ydGF0ZXVyIGNhbmFkaWVuIHF1aSBhIMOpdMOpIGZvdXJuaWUuXCIsXHJcbi8vICBcIkNPTVBBTllfUkVQXzVcIjogXCJmcl9TcG9uc29ycyBtYXkgY2hvb3NlIHRvIHByb3ZpZGUgYW4gQWx0ZXJuYXRlIFJFUCBjb250YWN0LCBob3dldmVyIHRoaXMgaXMgbm90IGEgcmVxdWlyZW1lbnQuXCIsXHJcbi8vICBcIkNPTVBBTllfUkVQXzZcIjogXCJEZXNjcmlwdGlvbiBkZXMgcsO0bGVzXCIsXHJcbi8vICBcIkNPTVBBTllfUkVQXzdcIjogXCJEw6lzaWduZSBsZSBub20gc291cyBsZXF1ZWwgbGEgcHLDqXNlbnRhdGlvbiBkZSBtw6lkaWNhbWVudCBlc3QgZMOpcG9zw6llLCBsb3JzcXXigJl1biBudW3DqXJvIGTigJlpZGVudGlmaWNhdGlvbiBkdSBtw6lkaWNhbWVudCAoRElOKSBvdSB1biBhdmlzIGRlIGNvbmZvcm1pdMOpIChBQykgZG9pdCDDqnRyZSBkw6lsaXZyw6ksIGlsIHPigJlhZ2l0IGR1IG5vbSBkZSBs4oCZZW50cmVwcmlzZSBxdWkgZW5yZWdpc3RyZXJhIGxlIERJTiBvdSBs4oCZQUMgKGMuLcOgLWQuIGxlIGTDqXRlbnRldXIgZHUgRElOIG91IGRlIGzigJlBQyksIGFpbnNpIHF1ZSBsZSBub20gcXVpIGRvaXQgZmlndXJlciBzdXIgbOKAmcOpdGlxdWV0dGUgZHUgcHJvZHVpdCBldCBkYW5zIGxhIG1vbm9ncmFwaGllIG91IGxhIG5vdGljZSBkdSBwcm9kdWl0LlwiLFxyXG4vLyAgXCJDT01QQU5ZX1JFUF84XCI6IFwiUG91ciBsZXMgZXNzYWlzIGNsaW5pcXVlczogwqtQcm9tb3RldXLCuzsgRMOpZmluaSBwYXIgbGEgc2VjdGlvbiA1LCBwYXJ0aWUgQyBkdSBSw6hnbGVtZW50IHN1ciBsZXMgYWxpbWVudHMgZXQgZHJvZ3VlcywgY29tbWUgbGEgcGVyc29ubmUgcGh5c2lxdWUsIGxhIHBlcnNvbm5lIG1vcmFsZSwgbCdpbnN0aXR1dGlvbiBvdSBsJ29yZ2FuaXNhdGlvbiBxdWkgbcOobmUgdW4gZXNzYWkgY2xpbmlxdWUuIExlIHByb21vdGV1ciBuJ2VzdCBwYXMgbsOpY2Vzc2FpcmVtZW50IGwnZW50cmVwcmlzZSBxdWkgZmFicmlxdWUgbGUgbcOpZGljYW1lbnQuIFBvdXIgbGVzIGVzc2FpcyBjbGluaXF1ZXMgaW5pdGnDqXMgcGFyIGwnaW52ZXN0aWdhdGV1clwiLFxyXG4vLyAgXCJDT01QQU5ZX1JFUF85XCI6IFwiSW5kaXF1ZSBvw7kgZXQgw6AgcXVpIFNhbnTDqSBDYW5hZGEgZG9pdCBlbnZveWVyIGxlIGNvdXJyaWVyIHLDqWdsZW1lbnRhaXJlIGF1dHJlIHF1ZSBsZSBjb3VycmllciBjb25jZXJuYW50IHNww6ljaWZpcXVlbWVudCBsYSBwcsOpc2VudGF0aW9uIGRlIG3DqWRpY2FtZW50IMOgIHRyYWl0ZXI7IHAuIGV4LiwgbGUgZm9ybXVsYWlyZSBkZSBkw6ljbGFyYXRpb24gYW5udWVsbGUgZXQgbGVzIGF2aXMgZGUgbW9kaWZpY2F0aW9uIMOgIGRlcyByw6hnbGVtZW50cyBvdSBwb2xpdGlxdWVzIHF1aSBz4oCZYXBwbGlxdWVudCBhdXggRElOIGVucmVnaXN0csOpcyBhdSBub20gZHUgZmFicmljYW50IG91IGR1IHByb21vdGV1ci4gTGVzIGJlc29pbnMgb3DDqXJhdGlvbm5lbHMgZXQgY2V1eCBkdSBzeXN0w6htZSBleGlnZW50IHF1ZSBsZSBub20gZXQgbOKAmWFkcmVzc2UgcG91ciBsZSBjb3VycmllciByw6lnbGVtZW50YWlyZSBzb2llbnQgbGVzIG3Dqm1lcyBwb3VyIHRvdXMgbGVzIERJTiBlbnJlZ2lzdHLDqXMgYXUgbm9tIGR1IGZhYnJpY2FudCBvdSBkdSBwcm9tb3RldXIgbG9yc3F1ZSBs4oCZZW50cmVwcmlzZSBkw6l0aWVudCBwbHVzIGTigJl1biBESU4uXCIsXHJcbi8vICBcIkNPTVBBTllfUkVQXzEwXCI6IFwiSW5kaXF1ZSBs4oCZYWRyZXNzZSBvw7kgbGEgZmFjdHVyZSBkb2l0IMOqdHJlIGVudm95w6llLlwiLFxyXG4gIFwiUk9VVElOR19JRF8xXCI6IFwiTCdpZGVudGlmaWNhdGV1ciBkJ2FjaGVtaW5lbWVudCBlc3QgdW4gbnVtw6lybyB1bmlxdWUgw6AgY2hhcXVlIGNvbXB0ZSBjcsOpw6kgc3VyIGxlIHBvcnRhaWwgY29tbXVuIGRlIGRlbWFuZGVzIMOpbGVjdHJvbmlxdWVzIChQREUpLiBJbCBlc3QgdXRpbGlzw6kgcG91ciBpZGVudGlmaWVyIGxlIHR5cGUgZGUgY29tcHRlIHN1ciB1bmUgZGVzIGRldXggaW50ZXJmYWNlcyBkdSBwb3J0YWlsIHNvaXQgbCdBcHBsaWNhYmlsaXR5IFN0YXRlbWVudCAyIChBUzIpIG91IGxlIFdlYlRyYWRlci5cIixcclxuICBcIlJPVVRJTkdfSURfMlwiOiBcIlBvdXIgbGVzIHV0aWxpc2F0ZXVycyBkZSBs4oCZaW50ZXJmYWNlIFdlYnRyYWRlciwgdm90cmUgaWRlbnRpZmljYXRldXIgZOKAmWFjaGVtaW5lbWVudCBzZSByZXRyb3V2ZSBkYW5zIGzigJlhdmlzIGRlIHLDqWNlcHRpb24uIFBvdXIgeSBhY2PDqWRleiwgdmVpbGxleiBhbGxlciDDoCBsYSBib8OudGUgZGUgcsOpY2VwdGlvbiBXZWJUcmFkZXIgZXQgY2xpcXVleiBzdXIgwqtSZcOndcK7IGV0IMKrQWZmaWNoZXLCuyBsZSBkb2N1bWVudC4gTGEgcGFnZSBkZSBDb250ZW51IGR1IGRvY3VtZW50IGFmZmljaGVyYSBldCBsJ2lkZW50aWZpY2F0ZXVyIGTigJlhY2hlbWluZW1lbnQgc2UgdHJvdXZlIHNvdXMgbCdhdHRyaWJ1dDogwqtYLUN5Y2xvbmUtVG86wrtcIixcclxuICBcIlJPVVRJTkdfSURfM1wiOiBcIlBvdXIgbGVzIHV0aWxpc2F0ZXVycyBkZSBsJ2ludGVyZmFjZSBBUzIsIGwnaWRlbnRpZmljYXRldXIgZCdhY2hlbWluZW1lbnQgZG9pdCDDqnRyZSBjcsOpw6kgcGFyIGxhIGNvbXBhZ25pZS4gSWwgZXN0IHJlY29tbWFuZMOpIHF1ZSBsZSBudW3DqXJvIGR1IHN5c3TDqG1lIGRlIG51bcOpcm90YXRpb24gdW5pdmVyc2VsIGRlIGxhIGNvbXBhZ25pZSBzb2l0IHV0aWxpc8OpLiBDZXBlbmRhbnQsIGlsIGVzdCBpbXBvcnRhbnQgZGUgbm90ZXIgZCd1bmUgbGlzdGUgZGUgY2FyYWN0w6hyZXMgYWxwaGFudW3DqXJpcXVlcyBlc3QgdG91dCBhdXNzaSBhY2NlcHRhYmxlLlwiLFxyXG4gIFwiUk9VVElOR19JRF80LjBcIjogXCJQb3VyIHRvdXRlcyBhdXRyZXMgcXVlc3Rpb25zIHN1ciBsJ2lkZW50aWZpY2F0ZXVyIGQnYWNoZW1pbmVtZW50LCB2ZXVpbGxleiBjb250YWN0ZXIgZGlyZWN0ZW1lbnQgbGUgc2VydmljZSBkZSBkw6lwYW5uYWdlIGRlIGxhIEZvb2QgYW5kIERydWcgQWRtaW5pc3RyYXRpb24gYXUgXCIsXHJcbiAgXCJST1VUSU5HX0lEXzQuMVwiOiBcIm1haWx0bzpFU0dIZWxwRGVza0BmZGEuaGhzLmdvdlwiLFxyXG4gIFwiUk9VVElOR19JRF80LjJcIjogXCJFU0dIZWxwRGVza0BmZGEuaGhzLmdvdlwiLFxyXG4gIFwiUk9VVElOR19JRF81XCI6IFwiSWwgZXN0IHBvc3NpYmxlIHF1ZSBsYSBwZXJzb25uZS1yZXNzb3VyY2UgZHUgIGZhYnJpY2FudCBvdSBwcm9tb3RldXIgZXQgbGEgcGVyc29ubmUtcmVzc291cmNlIHJlY2V2YW50IGxlIGNvdXJyaWVyIGRlIG5hdHVyZSByw6lnbGVtZW50YWlyZSBldCBsYSBub3RpZmljYXRpb24gYW5udWVsbGUgYWllbnQgbGUgbcOqbWUgaWRlbnRpZmljYXRldXIgZCdhY2hlbWluZW1lbnQuIENlcGVuZGFudCwgaWwgZXN0IGltcG9ydGFudCBkZSBub3RlciBxdWUgbCdpbXBvcnRhdGV1ciBjYW5hZGllbiBhdXJhIHRvdWpvdXJzIHVuIGlkZW50aWZpY2F0ZXVyIGRpZmbDqXJlbnQuXCIsXHJcbi8vICBcIkNPTVBBTllfUk9MRV8xXCI6IFwiTGEgUGVyc29ubmUtcmVzb3VyY2UgcHJpbmNpcGFsZSBwb3VyIGxlIHByb2Nlc3N1cyBkJ2luc2NyaXB0aW9uIHLDqWdsZW1ldGFpcmUgZXN0IGxhIHBlcnNvbm5lIHF1ZSBTYW50w6kgQ2FuYWRhIGRvaXQgY29udGFjdGVyIHPigJlpbCB5IGEgZGVzIHF1ZXN0aW9ucyDDoCByw6lnbGVyIG91IGRlcyBwcsOpY2lzaW9ucyDDoCBhcHBvcnRlciBhdSBtb2TDqGxlIGxvcnNxdeKAmWlsIGZhaXQgbOKAmW9iamV0IGTigJl1bmUgZGVtYW5kZSBk4oCZaW5zY3JpcHRpb24gb3UgZGUgbW9kaWZpY2F0aW9uLlwiLFxyXG4gIFwiR0VOX1hNTF8xXCI6IFwiRMOpcG9zZXogdW4gYnJvdWlsbG9uIGR1IGZpY2hpZXIgWE1MIGF1cHLDqHMgZGUgU2FudMOpIENhbmFkYSBhdSBtb3llbiBkdSBQb3J0YWlsIGNvbW11biBkZXMgZGVtYW5kZXMgw6lsZWN0cm9uaXF1ZXMgKFBDREUpLlwiLFxyXG4gIFwiR0VOX1hNTF8yXCI6IFwiQ29uc3VsdGV6IGxlcyBsaWduZXMgZGlyZWN0cmljZXMgZHUgUElSIHBvdXIgb2J0ZW5pciBkZXMgcmVuc2VpZ25lbWVudHMgZMOpdGFpbGzDqXMuXCJcclxufSk7XG5cbiR0cmFuc2xhdGVQcm92aWRlci50cmFuc2xhdGlvbnMoXCJlblwiLCB7XHJcbiAgXCJBRERSRVNTTElTVENUUkwuQUREUkVTU0xJU1RGT1JNXCI6IFwiaW4gdGhlIEFkZHJlc3MgSW5mb3JtYXRpb24gc2VjdGlvbi5cIixcclxuICBcIkNPTlRBQ1RMSVNUQ1RSTC5DT05UQUNUTElTVEZPUk1cIjogXCJpbiB0aGUgQ29tcGFueSBSZXByZXNlbnRhdGl2ZSBJbmZvcm1hdGlvbiBzZWN0aW9uLlwiLFxyXG4gIFwiQ09OVEFDVFJPTEVTVkFMSURcIjogXCJGb3IgQ29tcGFueSBSZXByZXNlbnRhdGl2ZSwgc2VsZWN0aW9uIG9mICBhbGwgcm9sZXM6IG1hbnVmYWN0dXJlciwgbWFpbGluZywgYmlsbGluZywgYW5kIHByaW1hcnkgUkVQIFwiLFxyXG4gIFwiQUREUkVTU1JPTEVTVkFMSURcIjogXCJGb3IgdGhlIEFkZHJlc3MgSW5mb3JtYXRpb24sIHNlbGVjdGlvbiBvZiBhbGwgcm9sZXM6IG1hbnVmYWN0dXJlciwgbWFpbGluZywgYW5kIGJpbGxpbmdcIixcclxuICBcIkNPTlRBQ1RSRUMuQ09OVEFDVFJFQ0ZPUk1cIjpcImluIHRoZSBDb21wYW55IFJlcHJlc2VudGF0aXZlIGRldGFpbHNcIixcclxuICBcIkFERFJFU1NSRUMuQUREUkVTU1JFQ0ZPUk1cIjpcImluIHRoZSBBZGRyZXNzIGRldGFpbHNcIixcclxuICBcIkNPTVBBTllfRk9STVwiOlwiQ29tcGFueSBFbnJvbG1lbnQgRm9ybVwiLFxyXG4gIFwiUk9MRU1JU1NJTkdcIjogXCJTZWxlY3Qgb25lIG9yIG1vcmUgcm9sZXMgZm9yIHRoaXMgY29tcGFueVwiLFxyXG4gIFwiQ09OVEFDVFJPTEVNSVNTSU5HXCI6IFwiU2VsZWN0IG9uZSBvciBtb3JlIHJvbGVzIGZvciB0aGlzIGNvbXBhbnkgcmVwcmVzZW50YXRpdmVcIixcclxuICBcIlJPTEVSRVBNSVNTSU5HXCI6IFwiUm9sZXMgZm9yIHRoaXMgY29tcGFueSByZXByZXNlbnRhdGl2ZSBcIixcclxuICBcIklNUE9SVEVSSURWQUxJRFwiOiBcIlBsZWFzZSBpbnB1dCBpbXBvcnRlciBJRCBmb3IgZWFjaCBpbXBvcnRlclwiLFxyXG4gIFwiQUREUkVTU19FWFBORFwiOiBcIlBsZWFzZSBpbnB1dCBpbXBvcnRlciBJRCBmb3IgZWFjaCBpbXBvcnRlclwiLFxyXG4gIFwiQ09OVEFDVElNUE9SVEVSVkFJTERcIjogXCJFYWNoIEltcG9ydGVyIENvbXBhbnkgbmVlZHMgYXQgbGVhc3Qgb25lIHJlcHJlc2VudGF0aXZlXCJcclxufSk7XG5cbiR0cmFuc2xhdGVQcm92aWRlci50cmFuc2xhdGlvbnMoXCJmclwiLCB7XHJcbiAgXCJBRERSRVNTTElTVENUUkwuQUREUkVTU0xJU1RGT1JNXCI6IFwiZGFucyBsYSBzZWN0aW9uIEluZm9ybWF0aW9uIGQnYWRkcmVzc2VcIixcclxuICBcIkNPTlRBQ1RMSVNUQ1RSTC5DT05UQUNUTElTVEZPUk1cIjogXCJkYW5zIGxhIHNlY3Rpb24gSW5mb3JtYXRpb24gc2VyIGxlcyByZXByw6lzZW50YW50cyBkZSBsYSBjb21wYWduaWVcIixcclxuICBcIkNPTlRBQ1RST0xFU1ZBTElEXCI6IFwiUG91ciBsZSByZXByw6lzZW50YW50IGRlIGxhIGNvbXBhZ25pZSwgc8OpbGVjdGlvbiBkZXMgcsO0bGVzOiBmYWJyaWNhbnQsIGRlIGwnZW52b2ksIGRlIGxhIGZhY3R1cmF0aW9uIGV0IHByaW5jaXBhbGUgZHUgUElSIFwiLFxyXG4gIFwiQUREUkVTU1JPTEVTVkFMSURcIjogXCJQb3VyIGwnaW5mb3JtYXRpb24gZCdhZHJlc3NlLCBzw6lsZWN0aW9uIGRlcyByw7RsZXM6IGZhYnJpY2FudCwgZGUgbCdlbnZvaSBldCBkZSBsYSBmYWN0dXJhdGlvbiBcIixcclxuICBcIkNPTlRBQ1RSRUMuQ09OVEFDVFJFQ0ZPUk1cIjpcImRhbnMgbGVzIGTDqXRhaWxzIGR1IHJlcHLDqXNlbnRhbnQgZGUgbGEgY29tcGFnbmllXCIsXHJcbiAgXCJBRERSRVNTUkVDLkFERFJFU1NSRUNGT1JNXCI6XCJkYW5zIGxlcyBkw6l0YWlscyBkZSBsJ2FkcmVzc2VcIixcclxuICBcIkNPTVBBTllfRk9STVwiOlwiSW5zY3JpcHRpb24gRCd1bmUgRW50cmVwcmlzZSBSw6lnbGVtZW50YWlyZVwiLFxyXG4gIFwiUk9MRU1JU1NJTkdcIjogXCJTw6lsZWN0aW9ubmVyIHVuIG91IHBsdXNpZXVycyByw7RsZXMgcG91ciBjZSByZXByw6lzZW50YW50IGRlIGxhIGNvbXBhZ25pZVwiLFxyXG4gIFwiQ09OVEFDVFJPTEVNSVNTSU5HXCI6IFwiU8OpbGVjdGlvbm5lciB1biBvdSBwbHVzaWV1cnMgcsO0bGVzIHBvdXIgY2UgcmVwcsOpc2VudGFudCBkZSBsYSBjb21wYWduaWVcIixcclxuICBcIlJPTEVSRVBNSVNTSU5HXCI6IFwiZnJfUm9sZXMgZm9yIHRoaXMgY29tcGFueSByZXByZXNlbnRhdGl2ZSBcIixcclxuICBcIklNUE9SVEVSSURWQUxJRFwiOiBcIlNWUCBlbnRyZXogbOKAmUlEIGRlIGzigJlpbXBvcnRhdGV1ciBwb3VyIGNoYXF1ZSBwcm9kdWl0XCIsXHJcbiAgXCJBRERSRVNTX0VYUE5EXCI6IFwiU1ZQIGVudHJleiBs4oCZSUQgZGUgbOKAmWltcG9ydGF0ZXVyIHBvdXIgY2hhcXVlIHByb2R1aXRcIixcclxuICBcIkNPTlRBQ1RJTVBPUlRFUlZBSUxEXCI6IFwiQ2hhcXVlIEltcG9ydGF0ZXVyIGEgYmVzb2luIGQnYXUgbW9pbiB1biByZXByw6lzZW50YW50XCJcclxufSk7XG5cbiR0cmFuc2xhdGVQcm92aWRlci50cmFuc2xhdGlvbnMoXCJlblwiLCB7XHJcbiAgXCJGT1JfVEhFXCI6XCJUaGUgXCIsXHJcbiAgXCJUSEVSRV9BUkVfRVJST1JTXCI6XCJUaGVyZSBhcmUgZXJyb3JzXCIsXHJcbiAgXCJGT1JNX05PVF9TQVZFRFwiOlwiVGhlIGZvcm0gY291bGQgbm90IGJlIHNhdmVkIGJlY2F1c2UgXCIsXHJcbiAgXCJOT1RfU0FWRURcIjpcIiBjb3VsZCBub3QgYmUgc2F2ZWQgYmVjYXVzZSBcIixcclxuICBcIkVSUk9SU19GT1VORFwiOlwiIGVycm9ycyB3ZXJlIGZvdW5kLlwiLFxyXG4gIFwiRVJST1JfRk9VTkRcIjpcImVycm9yIHdhcyBmb3VuZC5cIixcclxuICBcIlRZUEVfUkVRVUlSRURcIjpcIlRoaXMgZmllbGQgaXMgcmVxdWlyZWQuXCIsXHJcbiAgXCJUWVBFX0VNQUlMXCI6XCJQbGVhc2UgZW50ZXIgYSB2YWxpZCBlbWFpbCBhZGRyZXNzLlwiLFxyXG4gIFwiVFlQRV9EVVBMSUNBVEVST0xFXCI6IFwiVGhpcyByb2xlIGhhcyBhbHJlYWR5IGJlZW4gc2VsZWN0ZWQuXCIsXHJcbiAgXCJUWVBFX0RVUExJQ0FURVNZU1wiOiBcIlRoaXMgc3lzdGVtIGhhcyBhbHJlYWR5IGJlZW4gc2VsZWN0ZWQuXCIsXHJcbiAgXCJUWVBFX01JTlwiOiBcIkxlc3MgdGhhbiBtaW5pbXVtIHZhbHVlXCIsXHJcbiAgXCJUWVBFX01JTkxFTkdUSFwiOiBcIkxlc3MgdGhhbiBtaW5pbXVtIGxlbmd0aFwiLFxyXG4gIFwiUE9TVEFMX0ZPUk1BVFwiOiBcIlBsZWFzZSBlbnRlciBhIHZhbGlkIGZvcm1hdFwiLFxyXG4gIFwiVFlQRV9EQVRFXCI6XCJQbGVhc2UgZW50ZXIgYSB2YWxpZCBkYXRlXCIsXHJcbiAgXCJUWVBFX05VTUJFUlwiOlwiUGxlYXNlIGVudGVyIGEgdmFsaWQgbnVtYmVyXCIsXHJcbiAgXCJUWVBFX1BBVFRFUk5cIjogXCJJbmNvcnJlY3QgZm9ybWF0XCIsXHJcbiAgXCJNU0dfVkFMVUVfTUFYXCI6IFwiVmFsdWUgaXMgbm90IHdpdGhpbiB2YWxpZCBsaW1pdHNcIixcclxuICBcIkNPTVBBTllfSU5fVVNFXCI6IFwiVGhlIGltcG9ydGVyIGlzIGluIHVzZSBmb3IgQ29tcGFueSBSZXByZXNlbnRhdGl2ZSBEZXRhaWxzLCBkZWxldGUgdGhhdCByZWNvcmQgZmlyc3QuXCJcclxufSk7XG5cbiR0cmFuc2xhdGVQcm92aWRlci50cmFuc2xhdGlvbnMoXCJmclwiLCB7XHJcblwiRk9SX1RIRVwiOlwiUG91ciBsZSBcIixcclxuXCJUSEVSRV9BUkVfRVJST1JTXCI6XCJJbCB5IGEgZGVzIGVycmV1cnNcIixcclxuXCJGT1JNX05PVF9TQVZFRFwiOlwiTGUgZm9ybXVsYWlyZSBu4oCZYSBwYXMgcHUgw6p0cmUgZW5yZWdpc3Ryw6kgY2FyIFwiLFxyXG5cIk5PVF9TQVZFRFwiOlwiIG7igJlhIHBhcyBwdSDDqnRyZSBlbnJlZ2lzdHLDqSBjYXIgXCIsXHJcblwiRVJST1JTX0ZPVU5EXCI6XCJlcnJldXJzIG9udCDDqXTDqSB0cm91dsOpZXMuXCIsXHJcblwiRVJST1JfRk9VTkRcIjpcImVycmV1ciBhIMOpdMOpIHRyb3V2w6llLlwiLFxyXG5cIlRZUEVfUkVRVUlSRURcIjpcIkNlIGNoYW1wIGVzdCBvYmxpZ2F0b2lyZS5cIixcclxuXCJUWVBFX0VNQUlMXCI6XCJWZXVpbGxleiBmb3VybmlyIHVuZSBhZHJlc3NlIMOpbGVjdHJvbmlxdWUgdmFsaWRlLlwiLFxyXG5cIlRZUEVfRFVQTElDQVRFUk9MRVwiOiBcIkNlIHLDtGxlIGEgZMOpasOgIMOpdMOpIHPDqWxlY3Rpb25uw6kuXCIsXHJcblwiVFlQRV9EVVBMSUNBVEVTWVNcIjogXCJDZSBzeXN0w6htZSBhIMOpdMOpIGTDqWrDoCBzw6lsZWN0aW9ubsOpLlwiLFxyXG5cIlRZUEVfTUlOXCI6IFwiTW9pbnMgcXVlIGxhIHZhbGV1ciBtaW5pbWFsZS5cIixcclxuXCJUWVBFX01JTkxFTkdUSFwiOiBcIk1vaW5zIHF1ZSBsYSBsb25ndWV1ciBtaW5pbWFsZS5cIixcclxuXCJQT1NUQUxfRk9STUFUXCI6IFwiRW50cmV6IHVuIGZvcm1hdCB2YWxpZGUuXCIsXHJcblwiVFlQRV9EQVRFXCI6XCJWZXVpbGxleiBmb3VybmlyIHVuZSB1bmUgZGF0ZSB2YWxpZGUuXCIsXHJcblwiVFlQRV9OVU1CRVJcIjpcIlZldWlsbGV6IGZvdXJuaXIgdW4gbnVtw6lybyB2YWxpZGUuXCIsXHJcblwiVFlQRV9QQVRURVJOXCI6IFwiRm9ybWF0IGluY29ycmVjdGVcIixcclxuICBcIk1TR19WQUxVRV9NQVhcIjogXCJMYSB2YWxldXIgbidlc3QgcGFzIGRhbnMgbGVzIGxpbWl0ZXMgdmFsaWRlc1wiLFxyXG4gIFwiQ09NUEFOWV9JTl9VU0VcIjogXCJMJ2ltcG9ydGF0ZXVyIGVzdCBlbiBjb3VycyBkJ3V0aWxpc2F0aW9uIHBvdXIgbGVzIETDqXRhaWxzIGR1IHJlcHLDqXNlbnRhbnQgZGUgbGEgY29tcGFnbmllLCBzdXBwcmltZXogY2UgcHJlbWllciBlbnJlZ2lzdHJlbWVudC5cIlxyXG59KTtcbn1dKTtcbiIsIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IGRraWx0eSBvbiA5LzEvMjAxNi5cclxuICovXHJcblxyXG5cclxuKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgnbnVtYmVyRm9ybWF0JywgW10pO1xyXG5cclxufSkoKTtcclxuLyoqKlxyXG4gKiBEaXJlY3RpdmUgZm9yIHJlc3RyaWN0aW5nIHVzZXIgaW5wdXQgdG8gbnVtYmVyc1xyXG4gKiBPcHRpb25zOiB1c2Ugb25seS1tYXggdG8gaW5kaWNhdGUgdGhlIG51bWJlciBvZiBkaWdpdHMgKGludGVnZXIpXHJcbiAqICB1c2UgZmxhZyBpbnROZWcgKGllICBvbmx5LWRpZ2l0cz1cImludE5lZ1wiKSB0byBpbmRpY2F0ZSB0byBhbGxvdyBuZWdhdGl2ZSBudW1iZXJzXHJcbiAqICBDdXJyZW50bHkgdGhpcyBkaXJlY3RpdmUgb25seSBzdXBwb3J0cyBpbnRlZ2Vyc1xyXG4gKi9cclxuKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgnbnVtYmVyRm9ybWF0JylcclxuICAgICAgICAuZGlyZWN0aXZlKCdvbmx5RGlnaXRzJywgZGlnaXRzQ3RybCk7XHJcblxyXG4gICAgZnVuY3Rpb24gZGlnaXRzQ3RybCgpIHtcclxuICAgICAgICB2YXIgZGlyZWN0aXZlID0ge1xyXG5cclxuICAgICAgICAgICAgbGluazogbGluayxcclxuICAgICAgICAgICAgcmVzdHJpY3Q6ICdBJyxcclxuICAgICAgICAgICAgcmVxdWlyZTogJz9uZ01vZGVsJ1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIGRpcmVjdGl2ZTtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gbGluayhzY29wZSwgZWxlbWVudCwgYXR0cnMsIG1vZGVsQ3RybCkge1xyXG4gICAgICAgICAgICBtb2RlbEN0cmwuJHBhcnNlcnMucHVzaChmdW5jdGlvbiAoaW5wdXRWYWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGlucHV0VmFsdWUgPT0gdW5kZWZpbmVkKSByZXR1cm4gJyc7XHJcbiAgICAgICAgICAgICAgICB2YXIgaXNOdW1iZXIgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIHZhciBtYXggPSAtMTtcclxuICAgICAgICAgICAgICAgIHZhciBpZ25vcmUgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIHZhciB0ZW1wVmFsID0gXCJcIiArIGlucHV0VmFsdWU7XHJcbiAgICAgICAgICAgICAgICBpZiAoYXR0cnNbJ3R5cGUnXSAmJiBhdHRyc1sndHlwZSddID09PSAnbnVtYmVyJykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlzTnVtYmVyID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoYXR0cnNbJ29ubHlNYXgnXSkge1xyXG4gICAgICAgICAgICAgICAgICAgIG1heCA9IHBhcnNlSW50KGF0dHJzWydvbmx5TWF4J10pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdmFyIHJlZ2V4SW50TmVnID0gL1teMC05LV0vZztcclxuICAgICAgICAgICAgICAgIHZhciBpbnRlZ2VyUmVnID0gL1teMC05XS9nOyAvL2RlZmF1bHRcclxuICAgICAgICAgICAgICAgIHZhciByZWdleFZhbHVlID0gaW50ZWdlclJlZztcclxuICAgICAgICAgICAgICAgIGlmIChhdHRyc1snb25seURpZ2l0cyddID09ICdpbnROZWcnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVnZXhWYWx1ZSA9IHJlZ2V4SW50TmVnO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChhdHRyc1snb25seURpZ2l0cyddPT09J2ZhbHNlJykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlnbm9yZT10cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVnZXhWYWx1ZSA9IGludGVnZXJSZWc7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoaWdub3JlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlucHV0VmFsdWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB2YXIgdHJhbnNmb3JtZWRJbnB1dCA9IHRlbXBWYWwucmVwbGFjZShyZWdleFZhbHVlLCAnJyk7XHJcbiAgICAgICAgICAgICAgICBpZiAobWF4ID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybWVkSW5wdXQgPSB0cmFuc2Zvcm1lZElucHV0LnN1YnN0cmluZygwLCBtYXgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHRyYW5zZm9ybWVkSW5wdXQgIT09IHRlbXBWYWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaXNOdW1iZXIgJiYgdHJhbnNmb3JtZWRJbnB1dCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2Zvcm1lZElucHV0ID0gcGFyc2VGbG9hdCh0cmFuc2Zvcm1lZElucHV0KVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBtb2RlbEN0cmwuJHNldFZpZXdWYWx1ZSh0cmFuc2Zvcm1lZElucHV0KTtcclxuICAgICAgICAgICAgICAgICAgICBtb2RlbEN0cmwuJHJlbmRlcigpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRyYW5zZm9ybWVkSW5wdXQ7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbn0pKCk7XHJcblxyXG5cclxuXHJcbiIsIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IGRraWx0eSBvbiA2LzQvMjAxNi5cclxuICovXHJcblxyXG4vKipcclxuICogQG5nZG9jIG1vZHVsZSBkZWNsYXJhdGlvbiBmb3IgZGF0YWxpc3RzXHJcbiAqL1xyXG4oZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKCdkYXRhTGlzdHMnLCBbJ2hwZmJDb25zdGFudHMnXSk7XHJcblxyXG59KSgpO1xyXG5cclxuLyoqXHJcbiAqIGdldENvdW50cnlBbmRQcm92aW5jZXMgc2VydmljZXNcclxuICogUmV0dXJucyBDYW5hZGEgb3IgVVMgY29uZGVzLCBjYW5hZGEgcHJvdmluY2VzLCB1cyBzdGF0ZXNcclxuICovXHJcbihmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ2RhdGFMaXN0cycpXHJcbiAgICAgICAgLmZhY3RvcnkoJ2dldENvdW50cnlBbmRQcm92aW5jZXMnLCBnZXRTZXJ2aWNlKTtcclxuXHJcbiAgICAvKiBAbmdJbmplY3QgKi9cclxuICAgIGdldFNlcnZpY2UuaW5qZWN0ID0gWydVTktOT1dOJ107XHJcbiAgICBmdW5jdGlvbiBnZXRTZXJ2aWNlKFVOS05PV04pIHtcclxuICAgICAgICB2YXIgdm0gPSB0aGlzO1xyXG4gICAgICAgIHZtLmVudiA9ICcnO1xyXG4gICAgICAgIHZtLmNvdW50cnlMaXN0ID0gW107XHJcbiAgICAgICAgdmFyIHNlcnZpY2UgPSB7XHJcbiAgICAgICAgICAgIGdldEVudjogX2dldEVudlN0cmluZyxcclxuICAgICAgICAgICAgc2V0RW52OiBfc2V0RW52U3RyaW5nLFxyXG4gICAgICAgICAgICBnZXRDb3VudHJpZXM6IGdldENvdW50cnlWYWx1ZXNBcnJheSxcclxuICAgICAgICAgICAgZ2V0UHJvdmluY2VzOiBnZXRQcm92aW5jZVZhbHVlc0FycmF5LFxyXG4gICAgICAgICAgICBnZXRVU1N0YXRlczogZ2V0VVNTdGF0ZXNWYWx1ZUFycmF5LFxyXG4gICAgICAgICAgICBjcmVhdGVDb3VudHJ5TGlzdDogX2NyZWF0ZUNvdW50cnlBcnJheSxcclxuICAgICAgICAgICAgZ2V0VW5rbm93bkNvdW50cnlSZWNvcmQ6IF9nZXRVbmtub3duQ291bnRyeVJlY1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIHNlcnZpY2U7XHJcblxyXG4gICAgICAgIC8vLy8vLy8vLy8vLy8vLy9cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gX2dldEVudlN0cmluZygpIHtcclxuICAgICAgICAgICAgaWYgKHZtLmVudikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHZtLmVudjtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAnQEBlbnZWYWx1ZSc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIF9zZXRFbnZTdHJpbmcodmFsdWUpIHtcclxuICAgICAgICAgICAgdm0uZW52ID0gdmFsdWUuZW52O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gX2NyZWF0ZUNvdW50cnlBcnJheSh0cmFuc2xhdGVKc29uKSB7XHJcbiAgICAgICAgICAgIHZtLmNvdW50cnlMaXN0ID0gdHJhbnNsYXRlSnNvbjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIF9nZXRVbmtub3duQ291bnRyeVJlYygpIHtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIFwiaWRcIjogVU5LTk9XTixcclxuICAgICAgICAgICAgICAgIFwiZW5cIjogXCJVbmtub3duXCIsXHJcbiAgICAgICAgICAgICAgICBcImZyXCI6IFwiSW5jb25udVwiXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy90b2RvIHdoeSBpcyB0aGlzIGxpc3RlZCB0d2ljZT9cclxuICAgICAgICBmdW5jdGlvbiBnZXRDb3VudHJ5VmFsdWVzQXJyYXkoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB2bS5jb3VudHJ5TGlzdDtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICBmdW5jdGlvbiBnZXRQcm92aW5jZVZhbHVlc0FycmF5KCkge1xyXG4gICAgICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICAgICAgW1xyXG4gICAgICAgICAgICAgICAgICAgICdBQicsXHJcbiAgICAgICAgICAgICAgICAgICAgJ0JDJyxcclxuICAgICAgICAgICAgICAgICAgICAnTUInLFxyXG4gICAgICAgICAgICAgICAgICAgICdOQicsXHJcbiAgICAgICAgICAgICAgICAgICAgJ05MJyxcclxuICAgICAgICAgICAgICAgICAgICAnTlQnLFxyXG4gICAgICAgICAgICAgICAgICAgICdOUycsXHJcbiAgICAgICAgICAgICAgICAgICAgJ05VJyxcclxuICAgICAgICAgICAgICAgICAgICAnT04nLFxyXG4gICAgICAgICAgICAgICAgICAgICdQRScsXHJcbiAgICAgICAgICAgICAgICAgICAgJ1FDJyxcclxuICAgICAgICAgICAgICAgICAgICAnU0snLFxyXG4gICAgICAgICAgICAgICAgICAgICdZVCdcclxuICAgICAgICAgICAgICAgIF1cclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGdldFVTU3RhdGVzVmFsdWVBcnJheSgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgICAgIFtcclxuICAgICAgICAgICAgICAgICAgICAnQUwnLFxyXG4gICAgICAgICAgICAgICAgICAgICdBSycsXHJcbiAgICAgICAgICAgICAgICAgICAgJ0FaJyxcclxuICAgICAgICAgICAgICAgICAgICAnQVInLFxyXG4gICAgICAgICAgICAgICAgICAgICdDQScsXHJcbiAgICAgICAgICAgICAgICAgICAgJ0NPJyxcclxuICAgICAgICAgICAgICAgICAgICAnQ1QnLFxyXG4gICAgICAgICAgICAgICAgICAgICdERScsXHJcbiAgICAgICAgICAgICAgICAgICAgJ0RDJyxcclxuICAgICAgICAgICAgICAgICAgICAnRkwnLFxyXG4gICAgICAgICAgICAgICAgICAgICdHQScsXHJcbiAgICAgICAgICAgICAgICAgICAgJ0hJJyxcclxuICAgICAgICAgICAgICAgICAgICAnSUQnLFxyXG4gICAgICAgICAgICAgICAgICAgICdJTCcsXHJcbiAgICAgICAgICAgICAgICAgICAgJ0lOJyxcclxuICAgICAgICAgICAgICAgICAgICAnSUEnLFxyXG4gICAgICAgICAgICAgICAgICAgICdLUycsXHJcbiAgICAgICAgICAgICAgICAgICAgJ0tZJyxcclxuICAgICAgICAgICAgICAgICAgICAnTEEnLFxyXG4gICAgICAgICAgICAgICAgICAgICdNRScsXHJcbiAgICAgICAgICAgICAgICAgICAgJ01EJyxcclxuICAgICAgICAgICAgICAgICAgICAnTUEnLFxyXG4gICAgICAgICAgICAgICAgICAgICdNSScsXHJcbiAgICAgICAgICAgICAgICAgICAgJ01OJyxcclxuICAgICAgICAgICAgICAgICAgICAnTVMnLFxyXG4gICAgICAgICAgICAgICAgICAgICdNTycsXHJcbiAgICAgICAgICAgICAgICAgICAgJ01UJyxcclxuICAgICAgICAgICAgICAgICAgICAnTkUnLFxyXG4gICAgICAgICAgICAgICAgICAgICdOVicsXHJcbiAgICAgICAgICAgICAgICAgICAgJ05IJyxcclxuICAgICAgICAgICAgICAgICAgICAnTkonLFxyXG4gICAgICAgICAgICAgICAgICAgICdOTScsXHJcbiAgICAgICAgICAgICAgICAgICAgJ05ZJyxcclxuICAgICAgICAgICAgICAgICAgICAnTkMnLFxyXG4gICAgICAgICAgICAgICAgICAgICdORCcsXHJcbiAgICAgICAgICAgICAgICAgICAgJ09IJyxcclxuICAgICAgICAgICAgICAgICAgICAnT0snLFxyXG4gICAgICAgICAgICAgICAgICAgICdPUicsXHJcbiAgICAgICAgICAgICAgICAgICAgJ1BBJyxcclxuICAgICAgICAgICAgICAgICAgICAnUkknLFxyXG4gICAgICAgICAgICAgICAgICAgICdTQycsXHJcbiAgICAgICAgICAgICAgICAgICAgJ1NEJyxcclxuICAgICAgICAgICAgICAgICAgICAnVE4nLFxyXG4gICAgICAgICAgICAgICAgICAgICdUWCcsXHJcbiAgICAgICAgICAgICAgICAgICAgJ1VUJyxcclxuICAgICAgICAgICAgICAgICAgICAnVlQnLFxyXG4gICAgICAgICAgICAgICAgICAgICdWQScsXHJcbiAgICAgICAgICAgICAgICAgICAgJ1dBJyxcclxuICAgICAgICAgICAgICAgICAgICAnV1YnLFxyXG4gICAgICAgICAgICAgICAgICAgICdXSScsXHJcbiAgICAgICAgICAgICAgICAgICAgJ1dZJ1xyXG4gICAgICAgICAgICAgICAgXSk7XHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICB9XHJcblxyXG59KSgpO1xyXG5cclxuKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgnZGF0YUxpc3RzJylcclxuICAgICAgICAuZmFjdG9yeSgnZ2V0Q29udGFjdExpc3RzJywgZ2V0U2FsU2VydmljZSk7IC8vdG9kbyByZW5hbWUgc2VydmljZVxyXG5cclxuICAgIC8qIEBuZ0luamVjdCAqL1xyXG4gICAgZ2V0U2FsU2VydmljZS4kaW5qZWN0ID0gWyckZmlsdGVyJywgJyRxJywgJyRodHRwJywgJyR0cmFuc2xhdGUnLCAnT1RIRVInLCAnRlJFTkNIJywnUkVMQVRJVkVfRk9MREVSX0RBVEEnXTtcclxuICAgIGZ1bmN0aW9uIGdldFNhbFNlcnZpY2UoJGZpbHRlciwgJHEsICRodHRwLCR0cmFuc2xhdGUsIE9USEVSLCBGUkVOQ0gsUkVMQVRJVkVfRk9MREVSX0RBVEEpIHtcclxuICAgICAgICB2YXIgdm0gPSB0aGlzO1xyXG4gICAgICAgIHZtLmludGVybmFsQ29udGFjdHMgPSBbXTtcclxuICAgICAgICB2bS5hZG1pblN1YlR5cGVBcnJheSA9IFtdO1xyXG4gICAgICAgIHZhciBzZXJ2aWNlID0ge1xyXG4gICAgICAgICAgICBnZXRTYWx1dGF0aW9uTGlzdDogZ2V0U2FsVmFsdWVzQXJyYXksXHJcbiAgICAgICAgICAgIGdldExhbmd1YWdlczogZ2V0TGFuZ3VhZ2VzVmFsdWVzQXJyYXksIC8vVE9ETyBtYWtlIGNvbnN0YW50c1xyXG4gICAgICAgICAgICAvLyBjcmVhdGVJbnRlcm5hbENvbnRhY3RzOiBfY3JlYXRlSW50ZXJuYWxDb250YWN0cyxcclxuICAgICAgICAgICAgLy8gZ2V0SW50ZXJuYWxDb250YWN0czogX2dldEludGVybmFsQ29udGFjdHMsXHJcbiAgICAgICAgICAgIC8vIGdldEludGVybmFsQ29udGFjdHNXaXRob3V0T3RoZXI6IF9nZXRJbnRlcm5hbENvbnRhY3RzV2l0aG91dE90aGVyLFxyXG4gICAgICAgICAgICBnZXRBZG1pblN1YlR5cGU6IF9nZXRBZG1pblN1YlR5cGVcclxuICAgICAgICB9O1xyXG4gICAgICAgIHJldHVybiBzZXJ2aWNlO1xyXG5cclxuICAgICAgICAvLy8vLy8vLy8vLy8vLy8vXHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGdldFNhbFZhbHVlc0FycmF5KCkge1xyXG4gICAgICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICAgICAgW1xyXG4gICAgICAgICAgICAgICAgICAgICdTQUxVVF9EUicsXHJcbiAgICAgICAgICAgICAgICAgICAgJ1NBTFVUX01SJyxcclxuICAgICAgICAgICAgICAgICAgICAnU0FMVVRfTVJTJyxcclxuICAgICAgICAgICAgICAgICAgICAnU0FMVVRfTVMnXHJcbiAgICAgICAgICAgICAgICBdKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGdldExhbmd1YWdlc1ZhbHVlc0FycmF5KCkge1xyXG4gICAgICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICAgICAgW1xyXG4gICAgICAgICAgICAgICAgICAgIFwiZW5cIixcclxuICAgICAgICAgICAgICAgICAgICBcImZyXCJcclxuICAgICAgICAgICAgICAgIF0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKiBMb2FkcyBJbnRlcm5hbCBjb250YWN0cyBmcm9tIGEgZGF0YWZpbGVcclxuICAgICAgICAgKi9cclxuICAgICAgICAvLyBmdW5jdGlvbiBfY3JlYXRlSW50ZXJuYWxDb250YWN0cygpIHtcclxuICAgICAgICAvLyAgICAgdmFyIGRlZmVycmVkID0gJHEuZGVmZXIoKTtcclxuICAgICAgICAvLyAgICAgdmFyIGNvbnRhY3RzVXJsID0gUkVMQVRJVkVfRk9MREVSX0RBVEErXCJpbnRlcm5hbENvbnRhY3RzLmpzb25cIjtcclxuICAgICAgICAvLyAgICAgaWYgKCF2bS5pbnRlcm5hbENvbnRhY3RzIHx8IHZtLmludGVybmFsQ29udGFjdHMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgLy8gICAgICAgICAkaHR0cC5nZXQoY29udGFjdHNVcmwpXHJcbiAgICAgICAgLy8gICAgICAgICAgICAgLnN1Y2Nlc3MoZnVuY3Rpb24gKGRhdGEsIHN0YXR1cywgaGVhZGVycywgY29uZmlnKSB7XHJcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgIHZhciBuZXdMaXN0ID0gX2NyZWF0ZVNvcnRlZEFycmF5KGRhdGEsICdlbicpO1xyXG4gICAgICAgIC8vICAgICAgICAgICAgICAgICB2YXIgbGFuZyA9ICR0cmFuc2xhdGUucHJvcG9zZWRMYW5ndWFnZSgpIHx8ICR0cmFuc2xhdGUudXNlKCk7XHJcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgIC8vdGhpcyBpcyBhIGJpdCBvZiBhIGhhY2ssIGJ1dCBzYXZlcyB1bmVjZXNzYXJ5IHNwYWNlXHJcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgIHZhciBvdGhlclJlYyA9IHtcImlkXCI6IE9USEVSLCBcImVuXCI6IFwiT3RoZXJcIn07XHJcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgIGlmIChsYW5nID09PSBGUkVOQ0gpIHtcclxuICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgIG90aGVyUmVjLmVuID0gXCJBdXRyZVwiO1xyXG4gICAgICAgIC8vICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgIG5ld0xpc3QudW5zaGlmdChvdGhlclJlYyk7XHJcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgIHZtLmludGVybmFsQ29udGFjdHMgPSBuZXdMaXN0O1xyXG4gICAgICAgIC8vICAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKG5ld0xpc3QpO1xyXG4gICAgICAgIC8vICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgLy8gICAgICAgICAgICAgLmVycm9yKGZ1bmN0aW9uIChkYXRhLCBzdGF0dXMsIGhlYWRlcnMsIGNvbmZpZykge1xyXG4gICAgICAgIC8vICAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZWplY3Qoc3RhdHVzKTtcclxuICAgICAgICAvLyAgICAgICAgICAgICB9KTtcclxuICAgICAgICAvLyAgICAgfWVsc2V7XHJcbiAgICAgICAgLy8gICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKHZtLmludGVybmFsQ29udGFjdHMpO1xyXG4gICAgICAgIC8vICAgICB9XHJcbiAgICAgICAgLy8gICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xyXG4gICAgICAgIC8vIH1cclxuICAgICAgICAvL1xyXG4gICAgICAgIC8vIGZ1bmN0aW9uIF9nZXRJbnRlcm5hbENvbnRhY3RzKCkge1xyXG4gICAgICAgIC8vICAgICAgICAgcmV0dXJuIF9jcmVhdGVJbnRlcm5hbENvbnRhY3RzKCk7XHJcbiAgICAgICAgLy8gfVxyXG5cclxuICAgICAgICAvLyBmdW5jdGlvbiBfZ2V0SW50ZXJuYWxDb250YWN0c1dpdGhvdXRPdGhlcigpIHtcclxuICAgICAgICAvLyAgICAgdmFyIGRlZmVycmVkID0gJHEuZGVmZXIoKTtcclxuICAgICAgICAvLyAgICAgdmFyIGNvbnRhY3RzVXJsID0gUkVMQVRJVkVfRk9MREVSX0RBVEErXCJpbnRlcm5hbENvbnRhY3RzLmpzb25cIjtcclxuICAgICAgICAvLyAgICAgaWYgKCF2bS5pbnRlcm5hbENvbnRhY3RzIHx8IHZtLmludGVybmFsQ29udGFjdHMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgLy8gICAgICAgICAkaHR0cC5nZXQoY29udGFjdHNVcmwpXHJcbiAgICAgICAgLy8gICAgICAgICAgICAgLnN1Y2Nlc3MoZnVuY3Rpb24gKGRhdGEsIHN0YXR1cywgaGVhZGVycywgY29uZmlnKSB7XHJcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgIHZhciBuZXdMaXN0ID0gX2NyZWF0ZVNvcnRlZEFycmF5KGRhdGEsICdlbicpO1xyXG4gICAgICAgIC8vICAgICAgICAgICAgICAgICB2bS5pbnRlcm5hbENvbnRhY3RzID0gbmV3TGlzdDtcclxuICAgICAgICAvLyAgICAgICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZShuZXdMaXN0KTtcclxuICAgICAgICAvLyAgICAgICAgICAgICB9KVxyXG4gICAgICAgIC8vICAgICAgICAgICAgIC5lcnJvcihmdW5jdGlvbiAoZGF0YSwgc3RhdHVzLCBoZWFkZXJzLCBjb25maWcpIHtcclxuICAgICAgICAvLyAgICAgICAgICAgICAgICAgZGVmZXJyZWQucmVqZWN0KHN0YXR1cyk7XHJcbiAgICAgICAgLy8gICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgLy8gICAgIH1lbHNle1xyXG4gICAgICAgIC8vICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZSh2bS5pbnRlcm5hbENvbnRhY3RzKTtcclxuICAgICAgICAvLyAgICAgfVxyXG4gICAgICAgIC8vICAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcclxuICAgICAgICAvLyB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIF9jcmVhdGVTb3J0ZWRBcnJheShqc29uTGlzdCwgbGFuZykge1xyXG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gW107XHJcbiAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaCgkZmlsdGVyKCdvcmRlckJ5TG9jYWxlJykoanNvbkxpc3QsIGxhbmcpLCBmdW5jdGlvbiAoc29ydGVkT2JqZWN0KSB7XHJcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaChzb3J0ZWRPYmplY3QpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIF9nZXRBZG1pblN1YlR5cGUoKSB7XHJcblxyXG4gICAgICAgICAgICBpZiAoIXZtLmFkbWluU3ViVHlwZUFycmF5IHx8IHZtLmFkbWluU3ViVHlwZUFycmF5Lmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIF9sb2FkQWRtaW5UeXBlKClcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAodm0uYWRtaW5TdWJUeXBlQXJyYXkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBfbG9hZEFkbWluVHlwZSgpIHtcclxuICAgICAgICAgICAgdmFyIGRlZmVycmVkID0gJHEuZGVmZXIoKTtcclxuICAgICAgICAgICAgdmFyIHVybCA9IFJFTEFUSVZFX0ZPTERFUl9EQVRBK1wiYWRtaW5TdWJUeXBlLmpzb25cIjtcclxuICAgICAgICAgICAgJGh0dHAuZ2V0KHVybCkuc3VjY2VzcyhmdW5jdGlvbiAoZGF0YSwgc3RhdHVzLCBoZWFkZXJzLCBjb25maWcpIHtcclxuICAgICAgICAgICAgICAgIHZhciBsYW5nID0gJHRyYW5zbGF0ZS5wcm9wb3NlZExhbmd1YWdlKCkgfHwgJHRyYW5zbGF0ZS51c2UoKTtcclxuICAgICAgICAgICAgICAgIHZhciBuZXdMaXN0ID0gX2NyZWF0ZVNvcnRlZEFycmF5KGRhdGEsIGxhbmcpO1xyXG4gICAgICAgICAgICAgICAgdm0uYWRtaW5TdWJUeXBlQXJyYXkgPSBuZXdMaXN0O1xyXG4gICAgICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZShuZXdMaXN0KTtcclxuICAgICAgICAgICAgfSkuZXJyb3IoZnVuY3Rpb24gKGRhdGEsIHN0YXR1cywgaGVhZGVycywgY29uZmlnKSB7XHJcbiAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZWplY3Qoc3RhdHVzKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICB9XHJcblxyXG5cclxufSkoKTtcclxuXHJcblxyXG4vKipcclxuICogQ29udGFjdCByb2xlIGxpc3Qgc2VydmljZVxyXG4gKi9cclxuKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgnZGF0YUxpc3RzJylcclxuICAgICAgICAuZmFjdG9yeSgnZ2V0Um9sZUxpc3RzJywgZ2V0Um9sZXNTZXJ2aWNlKTtcclxuXHJcbiAgICAvKiBAbmdJbmplY3QgKi9cclxuICAgIGZ1bmN0aW9uIGdldFJvbGVzU2VydmljZSgpIHtcclxuICAgICAgICB2YXIgX2Jpb2xvZ2ljID0gJ0QyMSc7IC8vICdCSU9MT0dJQyc7XHJcbiAgICAgICAgdmFyIF9waGFybWEgPSAnRDIyJzsgIC8vJ1BIQVJNQUNFVVRJQ0FMJztcclxuICAgICAgICB2YXIgX3ZldGVyaW5hcnkgPSAnRDI0JztcclxuICAgICAgICB2YXIgX2NsaW5pY2FsID0gJ0QyNic7XHJcblxyXG4gICAgICAgIHZhciBzZXJ2aWNlID0ge1xyXG4gICAgICAgICAgICBnZXRDb250YWN0Um9sZXM6IGdldFJvbGVWYWx1ZXNBcnJheSxcclxuICAgICAgICAgICAgZ2V0Rm9ybVR5cGVzOiBfZ2V0Rm9ybVR5cGVzLFxyXG4gICAgICAgICAgICBnZXRCaW9sb2dpY1R5cGU6IF9nZXRCaW9sb2dpYyxcclxuICAgICAgICAgICAgZ2V0UGhhcm1hVHlwZTogX2dldFBoYXJtYWNldXRpY2FsLFxyXG4gICAgICAgICAgICBnZXRWZXRlcmluYXJ5OiBfZ2V0VmV0ZXJpbmFyeSxcclxuICAgICAgICAgICAgZ2V0Q2xpbmljYWxUcmlhbDogX2dldENsaW5pY2FsVHJpYWxcclxuICAgICAgICB9O1xyXG4gICAgICAgIHJldHVybiBzZXJ2aWNlO1xyXG5cclxuICAgICAgICAvLy8vLy8vLy8vLy8vLy8vXHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGdldFJvbGVWYWx1ZXNBcnJheSgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgICAgIFtcclxuICAgICAgICAgICAgICAgICAgICAnJyxcclxuICAgICAgICAgICAgICAgICAgICAnUk9MRV9QUklNQVJZJyxcclxuICAgICAgICAgICAgICAgICAgICAnUk9MRV9TRUNPTkRBUlknXHJcbiAgICAgICAgICAgICAgICBdKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIF9nZXRGb3JtVHlwZXMoIGVudiApIHtcclxuICAgICAgICAgICAgcmV0dXJuIGVudiA/XHJcbiAgICAgICAgICAgICAgICAoXHJcbiAgICAgICAgICAgICAgICAgICAgW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYmlvbG9naWMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9waGFybWFcclxuICAgICAgICAgICAgICAgICAgICBdKSA6XHJcbiAgICAgICAgICAgICAgICAoW1xyXG4gICAgICAgICAgICAgICAgICAgIF9iaW9sb2dpYyxcclxuICAgICAgICAgICAgICAgICAgICBfcGhhcm1hLFxyXG4gICAgICAgICAgICAgICAgICAgIF92ZXRlcmluYXJ5LFxyXG4gICAgICAgICAgICAgICAgICAgIF9jbGluaWNhbFxyXG4gICAgICAgICAgICAgICAgXSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBfZ2V0QmlvbG9naWMoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBfYmlvbG9naWM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBfZ2V0UGhhcm1hY2V1dGljYWwoKSB7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gX3BoYXJtYTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIF9nZXRWZXRlcmluYXJ5KCkge1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIF92ZXRlcmluYXJ5O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gX2dldENsaW5pY2FsVHJpYWwoKSB7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gX2NsaW5pY2FsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICB9XHJcblxyXG59KSgpO1xyXG4iLCIvKipcclxuICogQ3JlYXRlZCBieSBka2lsdHkgb24gNi80LzIwMTYuXHJcbiAqL1xyXG5cclxuLyoqXHJcbiAqIEBuZ2RvYyBtb2R1bGUgZGVjbGFyYXRpb24gZm9yIGRhdGFsaXN0c1xyXG4gKi9cclxuKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgnZGF0YUxpc3RzJywgWydocGZiQ29uc3RhbnRzJ10pO1xyXG5cclxufSkoKTtcclxuXHJcbi8qKlxyXG4gKiBnZXRDb3VudHJ5QW5kUHJvdmluY2VzIHNlcnZpY2VzXHJcbiAqIFJldHVybnMgQ2FuYWRhIG9yIFVTIGNvbmRlcywgY2FuYWRhIHByb3ZpbmNlcywgdXMgc3RhdGVzXHJcbiAqL1xyXG4oZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKCdkYXRhTGlzdHMnKVxyXG4gICAgICAgIC5mYWN0b3J5KCdnZXRDb3VudHJ5QW5kUHJvdmluY2VzJywgZ2V0U2VydmljZSk7XHJcblxyXG4gICAgLyogQG5nSW5qZWN0ICovXHJcbiAgICBnZXRTZXJ2aWNlLmluamVjdCA9IFsnVU5LTk9XTiddO1xyXG4gICAgZnVuY3Rpb24gZ2V0U2VydmljZShVTktOT1dOKSB7XHJcbiAgICAgICAgdmFyIHZtID0gdGhpcztcclxuICAgICAgICB2bS5lbnYgPSAnJztcclxuICAgICAgICB2bS5jb3VudHJ5TGlzdCA9IFtdO1xyXG4gICAgICAgIHZhciBzZXJ2aWNlID0ge1xyXG4gICAgICAgICAgICBnZXRFbnY6IF9nZXRFbnZTdHJpbmcsXHJcbiAgICAgICAgICAgIHNldEVudjogX3NldEVudlN0cmluZyxcclxuICAgICAgICAgICAgZ2V0Q291bnRyaWVzOiBnZXRDb3VudHJ5VmFsdWVzQXJyYXksXHJcbiAgICAgICAgICAgIGdldFByb3ZpbmNlczogZ2V0UHJvdmluY2VWYWx1ZXNBcnJheSxcclxuICAgICAgICAgICAgZ2V0VVNTdGF0ZXM6IGdldFVTU3RhdGVzVmFsdWVBcnJheSxcclxuICAgICAgICAgICAgY3JlYXRlQ291bnRyeUxpc3Q6IF9jcmVhdGVDb3VudHJ5QXJyYXksXHJcbiAgICAgICAgICAgIGdldFVua25vd25Db3VudHJ5UmVjb3JkOiBfZ2V0VW5rbm93bkNvdW50cnlSZWNcclxuICAgICAgICB9O1xyXG4gICAgICAgIHJldHVybiBzZXJ2aWNlO1xyXG5cclxuICAgICAgICAvLy8vLy8vLy8vLy8vLy8vXHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIF9nZXRFbnZTdHJpbmcoKSB7XHJcbiAgICAgICAgICAgIGlmICh2bS5lbnYpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB2bS5lbnY7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gJ1BST0QnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBfc2V0RW52U3RyaW5nKHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHZtLmVudiA9IHZhbHVlLmVudjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIF9jcmVhdGVDb3VudHJ5QXJyYXkodHJhbnNsYXRlSnNvbikge1xyXG4gICAgICAgICAgICB2bS5jb3VudHJ5TGlzdCA9IHRyYW5zbGF0ZUpzb247XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBfZ2V0VW5rbm93bkNvdW50cnlSZWMoKSB7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBcImlkXCI6IFVOS05PV04sXHJcbiAgICAgICAgICAgICAgICBcImVuXCI6IFwiVW5rbm93blwiLFxyXG4gICAgICAgICAgICAgICAgXCJmclwiOiBcIkluY29ubnVcIlxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIClcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vdG9kbyB3aHkgaXMgdGhpcyBsaXN0ZWQgdHdpY2U/XHJcbiAgICAgICAgZnVuY3Rpb24gZ2V0Q291bnRyeVZhbHVlc0FycmF5KCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdm0uY291bnRyeUxpc3Q7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZ2V0UHJvdmluY2VWYWx1ZXNBcnJheSgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgICAgIFtcclxuICAgICAgICAgICAgICAgICAgICAnQUInLFxyXG4gICAgICAgICAgICAgICAgICAgICdCQycsXHJcbiAgICAgICAgICAgICAgICAgICAgJ01CJyxcclxuICAgICAgICAgICAgICAgICAgICAnTkInLFxyXG4gICAgICAgICAgICAgICAgICAgICdOTCcsXHJcbiAgICAgICAgICAgICAgICAgICAgJ05UJyxcclxuICAgICAgICAgICAgICAgICAgICAnTlMnLFxyXG4gICAgICAgICAgICAgICAgICAgICdOVScsXHJcbiAgICAgICAgICAgICAgICAgICAgJ09OJyxcclxuICAgICAgICAgICAgICAgICAgICAnUEUnLFxyXG4gICAgICAgICAgICAgICAgICAgICdRQycsXHJcbiAgICAgICAgICAgICAgICAgICAgJ1NLJyxcclxuICAgICAgICAgICAgICAgICAgICAnWVQnXHJcbiAgICAgICAgICAgICAgICBdXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBnZXRVU1N0YXRlc1ZhbHVlQXJyYXkoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgICAgICBbXHJcbiAgICAgICAgICAgICAgICAgICAgJ0FMJyxcclxuICAgICAgICAgICAgICAgICAgICAnQUsnLFxyXG4gICAgICAgICAgICAgICAgICAgICdBWicsXHJcbiAgICAgICAgICAgICAgICAgICAgJ0FSJyxcclxuICAgICAgICAgICAgICAgICAgICAnQ0EnLFxyXG4gICAgICAgICAgICAgICAgICAgICdDTycsXHJcbiAgICAgICAgICAgICAgICAgICAgJ0NUJyxcclxuICAgICAgICAgICAgICAgICAgICAnREUnLFxyXG4gICAgICAgICAgICAgICAgICAgICdEQycsXHJcbiAgICAgICAgICAgICAgICAgICAgJ0ZMJyxcclxuICAgICAgICAgICAgICAgICAgICAnR0EnLFxyXG4gICAgICAgICAgICAgICAgICAgICdISScsXHJcbiAgICAgICAgICAgICAgICAgICAgJ0lEJyxcclxuICAgICAgICAgICAgICAgICAgICAnSUwnLFxyXG4gICAgICAgICAgICAgICAgICAgICdJTicsXHJcbiAgICAgICAgICAgICAgICAgICAgJ0lBJyxcclxuICAgICAgICAgICAgICAgICAgICAnS1MnLFxyXG4gICAgICAgICAgICAgICAgICAgICdLWScsXHJcbiAgICAgICAgICAgICAgICAgICAgJ0xBJyxcclxuICAgICAgICAgICAgICAgICAgICAnTUUnLFxyXG4gICAgICAgICAgICAgICAgICAgICdNRCcsXHJcbiAgICAgICAgICAgICAgICAgICAgJ01BJyxcclxuICAgICAgICAgICAgICAgICAgICAnTUknLFxyXG4gICAgICAgICAgICAgICAgICAgICdNTicsXHJcbiAgICAgICAgICAgICAgICAgICAgJ01TJyxcclxuICAgICAgICAgICAgICAgICAgICAnTU8nLFxyXG4gICAgICAgICAgICAgICAgICAgICdNVCcsXHJcbiAgICAgICAgICAgICAgICAgICAgJ05FJyxcclxuICAgICAgICAgICAgICAgICAgICAnTlYnLFxyXG4gICAgICAgICAgICAgICAgICAgICdOSCcsXHJcbiAgICAgICAgICAgICAgICAgICAgJ05KJyxcclxuICAgICAgICAgICAgICAgICAgICAnTk0nLFxyXG4gICAgICAgICAgICAgICAgICAgICdOWScsXHJcbiAgICAgICAgICAgICAgICAgICAgJ05DJyxcclxuICAgICAgICAgICAgICAgICAgICAnTkQnLFxyXG4gICAgICAgICAgICAgICAgICAgICdPSCcsXHJcbiAgICAgICAgICAgICAgICAgICAgJ09LJyxcclxuICAgICAgICAgICAgICAgICAgICAnT1InLFxyXG4gICAgICAgICAgICAgICAgICAgICdQQScsXHJcbiAgICAgICAgICAgICAgICAgICAgJ1JJJyxcclxuICAgICAgICAgICAgICAgICAgICAnU0MnLFxyXG4gICAgICAgICAgICAgICAgICAgICdTRCcsXHJcbiAgICAgICAgICAgICAgICAgICAgJ1ROJyxcclxuICAgICAgICAgICAgICAgICAgICAnVFgnLFxyXG4gICAgICAgICAgICAgICAgICAgICdVVCcsXHJcbiAgICAgICAgICAgICAgICAgICAgJ1ZUJyxcclxuICAgICAgICAgICAgICAgICAgICAnVkEnLFxyXG4gICAgICAgICAgICAgICAgICAgICdXQScsXHJcbiAgICAgICAgICAgICAgICAgICAgJ1dWJyxcclxuICAgICAgICAgICAgICAgICAgICAnV0knLFxyXG4gICAgICAgICAgICAgICAgICAgICdXWSdcclxuICAgICAgICAgICAgICAgIF0pO1xyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgfVxyXG5cclxufSkoKTtcclxuXHJcbihmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ2RhdGFMaXN0cycpXHJcbiAgICAgICAgLmZhY3RvcnkoJ2dldENvbnRhY3RMaXN0cycsIGdldFNhbFNlcnZpY2UpOyAvL3RvZG8gcmVuYW1lIHNlcnZpY2VcclxuXHJcbiAgICAvKiBAbmdJbmplY3QgKi9cclxuICAgIGdldFNhbFNlcnZpY2UuJGluamVjdCA9IFsnJGZpbHRlcicsICckcScsICckaHR0cCcsICckdHJhbnNsYXRlJywgJ09USEVSJywgJ0ZSRU5DSCcsJ1JFTEFUSVZFX0ZPTERFUl9EQVRBJ107XHJcbiAgICBmdW5jdGlvbiBnZXRTYWxTZXJ2aWNlKCRmaWx0ZXIsICRxLCAkaHR0cCwkdHJhbnNsYXRlLCBPVEhFUiwgRlJFTkNILFJFTEFUSVZFX0ZPTERFUl9EQVRBKSB7XHJcbiAgICAgICAgdmFyIHZtID0gdGhpcztcclxuICAgICAgICB2bS5pbnRlcm5hbENvbnRhY3RzID0gW107XHJcbiAgICAgICAgdm0uYWRtaW5TdWJUeXBlQXJyYXkgPSBbXTtcclxuICAgICAgICB2YXIgc2VydmljZSA9IHtcclxuICAgICAgICAgICAgZ2V0U2FsdXRhdGlvbkxpc3Q6IGdldFNhbFZhbHVlc0FycmF5LFxyXG4gICAgICAgICAgICBnZXRMYW5ndWFnZXM6IGdldExhbmd1YWdlc1ZhbHVlc0FycmF5LCAvL1RPRE8gbWFrZSBjb25zdGFudHNcclxuICAgICAgICAgICAgLy8gY3JlYXRlSW50ZXJuYWxDb250YWN0czogX2NyZWF0ZUludGVybmFsQ29udGFjdHMsXHJcbiAgICAgICAgICAgIC8vIGdldEludGVybmFsQ29udGFjdHM6IF9nZXRJbnRlcm5hbENvbnRhY3RzLFxyXG4gICAgICAgICAgICAvLyBnZXRJbnRlcm5hbENvbnRhY3RzV2l0aG91dE90aGVyOiBfZ2V0SW50ZXJuYWxDb250YWN0c1dpdGhvdXRPdGhlcixcclxuICAgICAgICAgICAgZ2V0QWRtaW5TdWJUeXBlOiBfZ2V0QWRtaW5TdWJUeXBlXHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4gc2VydmljZTtcclxuXHJcbiAgICAgICAgLy8vLy8vLy8vLy8vLy8vL1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBnZXRTYWxWYWx1ZXNBcnJheSgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgICAgIFtcclxuICAgICAgICAgICAgICAgICAgICAnU0FMVVRfRFInLFxyXG4gICAgICAgICAgICAgICAgICAgICdTQUxVVF9NUicsXHJcbiAgICAgICAgICAgICAgICAgICAgJ1NBTFVUX01SUycsXHJcbiAgICAgICAgICAgICAgICAgICAgJ1NBTFVUX01TJ1xyXG4gICAgICAgICAgICAgICAgXSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBnZXRMYW5ndWFnZXNWYWx1ZXNBcnJheSgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgICAgIFtcclxuICAgICAgICAgICAgICAgICAgICBcImVuXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJmclwiXHJcbiAgICAgICAgICAgICAgICBdKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICogTG9hZHMgSW50ZXJuYWwgY29udGFjdHMgZnJvbSBhIGRhdGFmaWxlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgLy8gZnVuY3Rpb24gX2NyZWF0ZUludGVybmFsQ29udGFjdHMoKSB7XHJcbiAgICAgICAgLy8gICAgIHZhciBkZWZlcnJlZCA9ICRxLmRlZmVyKCk7XHJcbiAgICAgICAgLy8gICAgIHZhciBjb250YWN0c1VybCA9IFJFTEFUSVZFX0ZPTERFUl9EQVRBK1wiaW50ZXJuYWxDb250YWN0cy5qc29uXCI7XHJcbiAgICAgICAgLy8gICAgIGlmICghdm0uaW50ZXJuYWxDb250YWN0cyB8fCB2bS5pbnRlcm5hbENvbnRhY3RzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgIC8vICAgICAgICAgJGh0dHAuZ2V0KGNvbnRhY3RzVXJsKVxyXG4gICAgICAgIC8vICAgICAgICAgICAgIC5zdWNjZXNzKGZ1bmN0aW9uIChkYXRhLCBzdGF0dXMsIGhlYWRlcnMsIGNvbmZpZykge1xyXG4gICAgICAgIC8vICAgICAgICAgICAgICAgICB2YXIgbmV3TGlzdCA9IF9jcmVhdGVTb3J0ZWRBcnJheShkYXRhLCAnZW4nKTtcclxuICAgICAgICAvLyAgICAgICAgICAgICAgICAgdmFyIGxhbmcgPSAkdHJhbnNsYXRlLnByb3Bvc2VkTGFuZ3VhZ2UoKSB8fCAkdHJhbnNsYXRlLnVzZSgpO1xyXG4gICAgICAgIC8vICAgICAgICAgICAgICAgICAvL3RoaXMgaXMgYSBiaXQgb2YgYSBoYWNrLCBidXQgc2F2ZXMgdW5lY2Vzc2FyeSBzcGFjZVxyXG4gICAgICAgIC8vICAgICAgICAgICAgICAgICB2YXIgb3RoZXJSZWMgPSB7XCJpZFwiOiBPVEhFUiwgXCJlblwiOiBcIk90aGVyXCJ9O1xyXG4gICAgICAgIC8vICAgICAgICAgICAgICAgICBpZiAobGFuZyA9PT0gRlJFTkNIKSB7XHJcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICBvdGhlclJlYy5lbiA9IFwiQXV0cmVcIjtcclxuICAgICAgICAvLyAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgIC8vICAgICAgICAgICAgICAgICBuZXdMaXN0LnVuc2hpZnQob3RoZXJSZWMpO1xyXG4gICAgICAgIC8vICAgICAgICAgICAgICAgICB2bS5pbnRlcm5hbENvbnRhY3RzID0gbmV3TGlzdDtcclxuICAgICAgICAvLyAgICAgICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZShuZXdMaXN0KTtcclxuICAgICAgICAvLyAgICAgICAgICAgICB9KVxyXG4gICAgICAgIC8vICAgICAgICAgICAgIC5lcnJvcihmdW5jdGlvbiAoZGF0YSwgc3RhdHVzLCBoZWFkZXJzLCBjb25maWcpIHtcclxuICAgICAgICAvLyAgICAgICAgICAgICAgICAgZGVmZXJyZWQucmVqZWN0KHN0YXR1cyk7XHJcbiAgICAgICAgLy8gICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgLy8gICAgIH1lbHNle1xyXG4gICAgICAgIC8vICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZSh2bS5pbnRlcm5hbENvbnRhY3RzKTtcclxuICAgICAgICAvLyAgICAgfVxyXG4gICAgICAgIC8vICAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcclxuICAgICAgICAvLyB9XHJcbiAgICAgICAgLy9cclxuICAgICAgICAvLyBmdW5jdGlvbiBfZ2V0SW50ZXJuYWxDb250YWN0cygpIHtcclxuICAgICAgICAvLyAgICAgICAgIHJldHVybiBfY3JlYXRlSW50ZXJuYWxDb250YWN0cygpO1xyXG4gICAgICAgIC8vIH1cclxuXHJcbiAgICAgICAgLy8gZnVuY3Rpb24gX2dldEludGVybmFsQ29udGFjdHNXaXRob3V0T3RoZXIoKSB7XHJcbiAgICAgICAgLy8gICAgIHZhciBkZWZlcnJlZCA9ICRxLmRlZmVyKCk7XHJcbiAgICAgICAgLy8gICAgIHZhciBjb250YWN0c1VybCA9IFJFTEFUSVZFX0ZPTERFUl9EQVRBK1wiaW50ZXJuYWxDb250YWN0cy5qc29uXCI7XHJcbiAgICAgICAgLy8gICAgIGlmICghdm0uaW50ZXJuYWxDb250YWN0cyB8fCB2bS5pbnRlcm5hbENvbnRhY3RzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgIC8vICAgICAgICAgJGh0dHAuZ2V0KGNvbnRhY3RzVXJsKVxyXG4gICAgICAgIC8vICAgICAgICAgICAgIC5zdWNjZXNzKGZ1bmN0aW9uIChkYXRhLCBzdGF0dXMsIGhlYWRlcnMsIGNvbmZpZykge1xyXG4gICAgICAgIC8vICAgICAgICAgICAgICAgICB2YXIgbmV3TGlzdCA9IF9jcmVhdGVTb3J0ZWRBcnJheShkYXRhLCAnZW4nKTtcclxuICAgICAgICAvLyAgICAgICAgICAgICAgICAgdm0uaW50ZXJuYWxDb250YWN0cyA9IG5ld0xpc3Q7XHJcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUobmV3TGlzdCk7XHJcbiAgICAgICAgLy8gICAgICAgICAgICAgfSlcclxuICAgICAgICAvLyAgICAgICAgICAgICAuZXJyb3IoZnVuY3Rpb24gKGRhdGEsIHN0YXR1cywgaGVhZGVycywgY29uZmlnKSB7XHJcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlamVjdChzdGF0dXMpO1xyXG4gICAgICAgIC8vICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIC8vICAgICB9ZWxzZXtcclxuICAgICAgICAvLyAgICAgICAgIGRlZmVycmVkLnJlc29sdmUodm0uaW50ZXJuYWxDb250YWN0cyk7XHJcbiAgICAgICAgLy8gICAgIH1cclxuICAgICAgICAvLyAgICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XHJcbiAgICAgICAgLy8gfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBfY3JlYXRlU29ydGVkQXJyYXkoanNvbkxpc3QsIGxhbmcpIHtcclxuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IFtdO1xyXG4gICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goJGZpbHRlcignb3JkZXJCeUxvY2FsZScpKGpzb25MaXN0LCBsYW5nKSwgZnVuY3Rpb24gKHNvcnRlZE9iamVjdCkge1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goc29ydGVkT2JqZWN0KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBfZ2V0QWRtaW5TdWJUeXBlKCkge1xyXG5cclxuICAgICAgICAgICAgaWYgKCF2bS5hZG1pblN1YlR5cGVBcnJheSB8fCB2bS5hZG1pblN1YlR5cGVBcnJheS5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBfbG9hZEFkbWluVHlwZSgpXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gKHZtLmFkbWluU3ViVHlwZUFycmF5KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gX2xvYWRBZG1pblR5cGUoKSB7XHJcbiAgICAgICAgICAgIHZhciBkZWZlcnJlZCA9ICRxLmRlZmVyKCk7XHJcbiAgICAgICAgICAgIHZhciB1cmwgPSBSRUxBVElWRV9GT0xERVJfREFUQStcImFkbWluU3ViVHlwZS5qc29uXCI7XHJcbiAgICAgICAgICAgICRodHRwLmdldCh1cmwpLnN1Y2Nlc3MoZnVuY3Rpb24gKGRhdGEsIHN0YXR1cywgaGVhZGVycywgY29uZmlnKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgbGFuZyA9ICR0cmFuc2xhdGUucHJvcG9zZWRMYW5ndWFnZSgpIHx8ICR0cmFuc2xhdGUudXNlKCk7XHJcbiAgICAgICAgICAgICAgICB2YXIgbmV3TGlzdCA9IF9jcmVhdGVTb3J0ZWRBcnJheShkYXRhLCBsYW5nKTtcclxuICAgICAgICAgICAgICAgIHZtLmFkbWluU3ViVHlwZUFycmF5ID0gbmV3TGlzdDtcclxuICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUobmV3TGlzdCk7XHJcbiAgICAgICAgICAgIH0pLmVycm9yKGZ1bmN0aW9uIChkYXRhLCBzdGF0dXMsIGhlYWRlcnMsIGNvbmZpZykge1xyXG4gICAgICAgICAgICAgICAgZGVmZXJyZWQucmVqZWN0KHN0YXR1cyk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgfVxyXG5cclxuXHJcbn0pKCk7XHJcblxyXG5cclxuLyoqXHJcbiAqIENvbnRhY3Qgcm9sZSBsaXN0IHNlcnZpY2VcclxuICovXHJcbihmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ2RhdGFMaXN0cycpXHJcbiAgICAgICAgLmZhY3RvcnkoJ2dldFJvbGVMaXN0cycsIGdldFJvbGVzU2VydmljZSk7XHJcblxyXG4gICAgLyogQG5nSW5qZWN0ICovXHJcbiAgICBmdW5jdGlvbiBnZXRSb2xlc1NlcnZpY2UoKSB7XHJcbiAgICAgICAgdmFyIF9iaW9sb2dpYyA9ICdEMjEnOyAvLyAnQklPTE9HSUMnO1xyXG4gICAgICAgIHZhciBfcGhhcm1hID0gJ0QyMic7ICAvLydQSEFSTUFDRVVUSUNBTCc7XHJcbiAgICAgICAgdmFyIF92ZXRlcmluYXJ5ID0gJ0QyNCc7XHJcbiAgICAgICAgdmFyIF9jbGluaWNhbCA9ICdEMjYnO1xyXG5cclxuICAgICAgICB2YXIgc2VydmljZSA9IHtcclxuICAgICAgICAgICAgZ2V0Q29udGFjdFJvbGVzOiBnZXRSb2xlVmFsdWVzQXJyYXksXHJcbiAgICAgICAgICAgIGdldEZvcm1UeXBlczogX2dldEZvcm1UeXBlcyxcclxuICAgICAgICAgICAgZ2V0QmlvbG9naWNUeXBlOiBfZ2V0QmlvbG9naWMsXHJcbiAgICAgICAgICAgIGdldFBoYXJtYVR5cGU6IF9nZXRQaGFybWFjZXV0aWNhbCxcclxuICAgICAgICAgICAgZ2V0VmV0ZXJpbmFyeTogX2dldFZldGVyaW5hcnksXHJcbiAgICAgICAgICAgIGdldENsaW5pY2FsVHJpYWw6IF9nZXRDbGluaWNhbFRyaWFsXHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4gc2VydmljZTtcclxuXHJcbiAgICAgICAgLy8vLy8vLy8vLy8vLy8vL1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBnZXRSb2xlVmFsdWVzQXJyYXkoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgICAgICBbXHJcbiAgICAgICAgICAgICAgICAgICAgJycsXHJcbiAgICAgICAgICAgICAgICAgICAgJ1JPTEVfUFJJTUFSWScsXHJcbiAgICAgICAgICAgICAgICAgICAgJ1JPTEVfU0VDT05EQVJZJ1xyXG4gICAgICAgICAgICAgICAgXSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBfZ2V0Rm9ybVR5cGVzKCBlbnYgKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBlbnYgP1xyXG4gICAgICAgICAgICAgICAgKFxyXG4gICAgICAgICAgICAgICAgICAgIFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2Jpb2xvZ2ljLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfcGhhcm1hXHJcbiAgICAgICAgICAgICAgICAgICAgXSkgOlxyXG4gICAgICAgICAgICAgICAgKFtcclxuICAgICAgICAgICAgICAgICAgICBfYmlvbG9naWMsXHJcbiAgICAgICAgICAgICAgICAgICAgX3BoYXJtYSxcclxuICAgICAgICAgICAgICAgICAgICBfdmV0ZXJpbmFyeSxcclxuICAgICAgICAgICAgICAgICAgICBfY2xpbmljYWxcclxuICAgICAgICAgICAgICAgIF0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gX2dldEJpb2xvZ2ljKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gX2Jpb2xvZ2ljO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gX2dldFBoYXJtYWNldXRpY2FsKCkge1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIF9waGFybWE7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBfZ2V0VmV0ZXJpbmFyeSgpIHtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBfdmV0ZXJpbmFyeTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIF9nZXRDbGluaWNhbFRyaWFsKCkge1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIF9jbGluaWNhbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgfVxyXG5cclxufSkoKTtcclxuIiwiLyoqXHJcbiAqIENyZWF0ZWQgYnkgZGtpbHR5IG9uIDEyLzA4LzIwMTYuXHJcbiAqIEBuZ2RvYyBtb2R1bGUgLWdldHMgdGhlIGxpc3Qgb2YgdHJhbnNhY3Rpb24gYWN0aXZpdHkgdHB5ZXNcclxuICovXHJcbihmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ3NlcnZpY2VzJywgW10pO1xyXG5cclxufSkoKTtcclxuXHJcblxyXG4oZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKCdzZXJ2aWNlcycpXHJcbiAgICAgICAgLmZhY3RvcnkoJ1RyYW5zYWN0aW9uTGlzdHMnLCBnZXRUcmFuc2FjdGlvblNlcSk7XHJcblxyXG4gICAgLyogQG5nSW5qZWN0ICovXHJcbiAgICBnZXRUcmFuc2FjdGlvblNlcS5pbmplY3QgPSBbJyRodHRwJywgJyRxJ107XHJcblxyXG4gICAgZnVuY3Rpb24gZ2V0VHJhbnNhY3Rpb25TZXEoJGh0dHAsICRxKSB7XHJcbiAgICAgICAgdmFyIHZtID0gdGhpcztcclxuICAgICAgICB2bS5lbnYgPSAnJztcclxuICAgICAgICB2bS5yYVR5cGVBcnJheSA9IFtdO1xyXG4gICAgICAgIHZtLmZlZVR5cGVBcnJheSA9IFtdO1xyXG4gICAgICAgIHZtLm1pdGlnYXRpb25UeXBlQXJyYXkgPSBbXTtcclxuXHJcbiAgICAgICAgLyoqIExlYWQgdmFsdWVzLiBIYXJkIGNvZGVkIGFzIGRpZmZlcmVudCBsaXN0cyBuZWVkIHRvIGJlICAgKiovXHJcbiAgICAgICAgdm0uRDIxID0gJ0QyMSc7XHJcbiAgICAgICAgdm0uRDIyID0gJ0QyMic7XHJcbiAgICAgICAgdm0uRDI0ID0gJ0QyNCc7XHJcbiAgICAgICAgdm0uRDI2ID0gJ0QyNic7XHJcbiAgICAgICAgdm0uQklPTE9HSUNBTCA9IFwiQjE0LTIwMTYwMzAxLTAyXCI7IC8vYmlvbG9naWNhbFxyXG4gICAgICAgIHZtLkNPTlNVTUVSSEVBTFRIID0gXCJCMTQtMjAxNjAzMDEtMDZcIjsgLy9Db25zdW1lciBIZWFsdGggUHJvZHVjdHNcclxuICAgICAgICB2bS5QSEFSTUEgPSBcIkIxNC0yMDE2MDMwMS0wOVwiOyAvL3BoYXJtYWNldXRpY2FsXHJcbiAgICAgICAgdm0uUE9TVE1BUktFVCA9IFwiQjE0LTIwMTYwMzAxLTEwXCI7IC8vcG9zdG1hcmtldCBjb3ZpZ2lsYW5jZVxyXG4gICAgICAgIHZtLlZFVEVSSU5BUlkgPSBcIkIxNC0yMDE2MDMwMS0xMVwiO1xyXG4gICAgICAgIHZtLkNMSU5JQ0FMX0JJTyA9IFwiQjE0LTIwMTYwMzAxLTAyXCI7XHJcbiAgICAgICAgdm0uQ0xJTklDQUxfUEhBID0gXCJCMTQtMjAxNjAzMDEtMDlcIjtcclxuXHJcbiAgICAgICAgdm0uYWxsQWN0aXZpdGllcyA9IHtcclxuICAgICAgICAgICAgQURNSU5JU1RSQVRJVkU6IFwiQURNSU5JU1RSQVRJVkVcIiwgLy9hZG1pbmlzdHJhdGl2ZVxyXG4gICAgICAgICAgICBCRU5FRklUX1JJU0tfQVNTRVNTOiBcIkJFTkVGSVRfUklTS19BU1NFU1NcIiwgLy9iZW5lZml0IHJpc2sgYXNzZXNzbWVudFxyXG4gICAgICAgICAgICBDQU5DRUxfTEVUVEVSOiBcIkNBTkNFTF9MRVRURVJcIiwgLy9jYW5jZWxsYXRpb24gbGV0dGVyXHJcbiAgICAgICAgICAgIENIQU5HRV9UT19ESU46IFwiQ0hBTkdFX1RPX0RJTlwiLCAvL2NoYW5nZXMgdG8gZGluXHJcbiAgICAgICAgICAgIC8vQ0xBUklGX1JFU1BPTlNFOiBcIkNMQVJJRl9SRVNQT05TRVwiLCAvL1Jlc3BvbnNlIHRvIGNsYXJpZmljYXRpb24gcmVxdWVzdFxyXG4gICAgICAgICAgICBDT01NRU5UU19OT0M6IFwiQ09NTUVOVFNfTk9DXCIsIC8vIGNvbW1lbnRzIG9uIG5vdGljZSBvZiBkZWNpc2lvblxyXG4gICAgICAgICAgICBDT01NRU5UU19TVU1NQVJZX0JBU0lTOiBcIkNPTU1FTlRTX1NVTU1BUllfQkFTSVNcIiwgLy9jb21tbWVudHMgb24gc3VtbWFyeSBiYXNpcyBvZiBkZWNpc2lvbiAoU0JEKSxcclxuICAgICAgICAgICAgQ09NTUVOVFNfUkVHVUxBUlRPUllfREVDSVNJT046IFwiQ09NTUVOVFNfUkVHVUxBUlRPUllfREVDSVNJT05cIiwgLy9Db21tZW50cyBvbiBSZWd1bGF0b3J5IERlY2lzaW9uIFN1bW1hcnksXHJcbiAgICAgICAgICAgIERJTl9ESVNDT05USU5VRUQ6IFwiRElOX0RJU0NPTlRJTlVFRFwiLCAvLyBOb3RpZmljYXRpb24gb2YgRGlzY29udGludWVkIFNhbGUgKERJTiBDYW5jZWxsYXRpb24pXHJcbiAgICAgICAgICAgIERSVUdfTk9USUZfRk9STTogXCJEUlVHX05PVElGX0ZPUk1cIiwgLy8gZHJ1ZyBub3RpZmljYXRpb24gZm9ybVxyXG4gICAgICAgICAgICBGT1JfUEVSSU9EOiBcIkZPUl9QRVJJT0RcIiwgLy9mb3IgcGVyaW9kIG9mIC4uLi5cclxuICAgICAgICAgICAgSU5JVElBTDogXCJJTklUSUFMXCIsIC8vSW5pdGlhbFxyXG4gICAgICAgICAgICBNRUVUSU5HX01JTlVURVM6IFwiTUVFVElOR19NSU5VVEVTXCIsIC8vbWludXRlcyBvZiBtZWV0aW5nIGRhdGVkXHJcbiAgICAgICAgICAgIE5PVElGSUNBVElPTl9DSEFOR0U6IFwiTk9USUZJQ0FUSU9OX0NIQU5HRVwiLCAvL25vdGlmaWNhaXRvbiBvZiBjaGFuZ2UgaW4gYmVuZWZpdCBwcm9maWxlXHJcbiAgICAgICAgICAgIE5PVElGSUNBVElPTl9JTlRFUlJVUFRfU0FMRTogXCJOT1RJRklDQVRJT05fSU5URVJSVVBUX1NBTEVcIiwvL05vdGlmaWNhdGlvbiBJbnRlcnJ1cHRpb24gb2YgU2FsZVxyXG4gICAgICAgICAgICBQQU5ERU1JQ19BUFBMOiBcIlBBTkRFTUlDX0FQUExcIiwgLy9wYW5kZW1pYyBhcHBsaWNhaXRvblxyXG4gICAgICAgICAgICBQT1NUX0NMRUFSQU5DRV9EQVRBOiBcIlBPU1RfQ0xFQVJBTkNFX0RBVEFcIiwgLy9wb3N0IGNsZWFyYW5jZSBkYXRhXHJcbiAgICAgICAgICAgIFBPU1RfTUFSS0VUX1NVUlY6IFwiUE9TVF9NQVJLRVRfU1VSVlwiLCAvLyBwb3N0IG1hcmtldGluZyBzdXJ2ZWlsbGFuY2VcclxuICAgICAgICAgICAgUE9TVF9OT0NfQ0hBTkdFOiBcIlBPU1RfTk9DX0NIQU5HRVwiLCAvL1Bvc3QgTk9DIGNoYW5nZVxyXG4gICAgICAgICAgICBQT1NUX0FVVEhfRElWMV9DSEFOR0U6IFwiUE9TVF9BVVRIX0RJVjFfQ0hBTkdFXCIsIC8vIFBvc3QgYXV0b3JpemF0aW9uIERpdmlzaW9uIDEgY2hhbmdlXHJcbiAgICAgICAgICAgIFBSRVNVQl9NRUVUSU5HX1BLRzogXCJQUkVTVUJfTUVFVElOR19QS0dcIiwgLy8gc3VibWlzc2lvbiBtZWV0aW5nIHBhY2thZ2UgLXVzZWQgdG8gYmUgcHJlc3ViXHJcbiAgICAgICAgICAgIFBSRVNVQl9NRUVUSU5HX1JROiBcIlBSRVNVQl9NRUVUSU5HX1JRXCIsICAgLy9zdWJtaXNzaW9uIE1lZXRpbmcgUmVxdWVzdCAtdXNlZCB0byBiZSBwcmVzdWJcclxuICAgICAgICAgICAgUFJJT1JJVFlfUkVWSUVXX1JROiBcIlBSSU9SSVRZX1JFVklFV19SUVwiLCAvLyBQcmlvcml0eSByZXdpZXcgcmVxdWVzdFxyXG4gICAgICAgICAgICAvLyBQUklTVElORV9QTTogXCJQUklTVElORV9QTVwiLCAvLyBQcmlzdGluZSBQTVxyXG4gICAgICAgICAgICBTRUNPTkRfTEFOR19QTTogXCJTRUNPTkRfTEFOR19QTVwiLCAvLyBzZWNvbmQgbGFuZ3VhZ2UgUE1cclxuICAgICAgICAgICAgUFJJU1RJTkVfUE1fMkxBTkc6IFwiUFJJU1RJTkVfUE1fMkxBTkdcIiwgLy8gcHJpc3RpbmUgUE0gc2Vjb25kIGxhbmd1YWdlXHJcbiAgICAgICAgICAgIEFEVklTRU1FTlRfTEVUVEVSX1JFU1BPTlNFOiBcIkFEVklTRU1FTlRfTEVUVEVSX1JFU1BPTlNFXCIsIC8vUkVzcG9zZSB0byBBZHZpc2VtZW50IExldHRlciBkYXRlZFxyXG4gICAgICAgICAgICBDTElOX0NMQVJJRl9SRVNQT05TRTogXCJDTElOX0NMQVJJRl9SRVNQT05TRVwiLCAvL1Jlc3BvbnNlIHRvIGNsaW5pY2FsIGNsYXJpZmlhY3Rpb24gcmVxdWVzdFxyXG4gICAgICAgICAgICBFTUFJTF9SUV9SRVNQT05TRTogXCJFTUFJTF9SUV9SRVNQT05TRVwiLC8vIHJlc3BvbnNlIHRvIGVtYWlsIHJlcXVlc3RcclxuICAgICAgICAgICAgSFNDX1JRX1JFU1BPTlNFOiBcIkhTQ19SUV9SRVNQT05TRVwiLCAvL1Jlc3BvbnNlIHRvIEh1bWFuIFNhZmV0eSBDbGFyaWZpY2F0aW9uIFJlcXVlc3RcclxuICAgICAgICAgICAgUUhTQ19SUV9SRVNQT05TRTogXCJRSFNDX1JRX1JFU1BPTlNFXCIsIC8vUmVzcG9uc2UgdG8gUXVhbGl0eSAmIEh1bWFuIFNhZmV0eSBDbGFyaWZpY2F0aW9uIFJlcXVlc3RcclxuICAgICAgICAgICAgQ0hTQ19SUV9SRVNQT05TRTogXCJDSFNDX1JRX1JFU1BPTlNFXCIsIC8vUmVzcG9uc2UgdG8gQ2xpbmljYWwgJiBIdW1hbiBTYWZldHkgQ2xhcmlmaWNhdGlvbiBSZXF1ZXN0XHJcbiAgICAgICAgICAgIFFDSFNDX1JRX1JFU1BPTlNFOiBcIlFDSFNDX1JRX1JFU1BPTlNFXCIsIC8vUmVzcG9uc2UgdG8gUXVhbGl0eSwgQ2xpbmljYWwgYW5kIEh1bWFuIFNhZmV0eSBDbGFyaWZpY2F0aW9uIFJlcXVlc3RcclxuICAgICAgICAgICAgTEFCRUxfQ0xBUklGX1JFU1BPTlNFOiBcIkxBQkVMX0NMQVJJRl9SRVNQT05TRVwiLCAvL1Jlc3BvbnNlIHRvIGxhYmVsbGluZyBjbGFyaWZpY2F0aW9uIHJlcXVlc3RcclxuICAgICAgICAgICAgTUhQRF9SUV9SRVNQT05TRTogXCJNSFBEX1JRX1JFU1BPTlNFXCIsIC8vUmVzcG9uc2UgdG8gTUhQRCByZXF1ZXN0XHJcbiAgICAgICAgICAgIE5PQ19SRVNQT05TRTogXCJOT0NfUkVTUE9OU0VcIiwgLy9yZXNwb25zZSB0byBOT0MvIGMtUW5cclxuICAgICAgICAgICAgTk9EX1JFU1BPTlNFOiBcIk5PRF9SRVNQT05TRVwiLCAvL1Jlc3BvbnNlIHRvIE5PRFxyXG4gICAgICAgICAgICBOT0xfUkVTUE9OU0U6IFwiTk9MX1JFU1BPTlNFXCIsIC8vUmVzcG9uc2UgdG8gTk9MIGRhdGVkXHJcbiAgICAgICAgICAgIE5PTl9SRVNQT05TRTogXCJOT05fUkVTUE9OU0VcIiwgLy9SZXNwb25zZSB0byBOT05cclxuICAgICAgICAgICAgUFJPQ0VTU0lOR19DTEFSSUZfUkVTUE9OU0U6IFwiUFJPQ0VTU0lOR19DTEFSSUZfUkVTUE9OU0VcIiwgLy9SZXNwb25zZSB0byBwcm9jZXNzaW5nIENsYXJpZmljYXRpb24gUmVxdWVzdFxyXG4gICAgICAgICAgICBRVUFMX0NMSU5fQ0xBUklGX1JFU1BPTlNFOiBcIlFVQUxfQ0xJTl9DTEFSSUZfUkVTUE9OU0VcIiwgLy9SZXNwb25zZSB0byBxdWFsaXR5IGFuZCBDbGluaWNhbCBjbGFyaWZpY2F0aW9uIFJFcXVlc3RcclxuICAgICAgICAgICAgUVVBTF9DTEFSSUZfUkVTUE9OU0U6IFwiUVVBTF9DTEFSSUZfUkVTUE9OU0VcIiwgLy9SZXNwb25zZSB0byBRdWFsaXR5IENsYXJpZmljYXRpb24gcmVxdWVzdFxyXG4gICAgICAgICAgICBSRUNPTl9ERUNJU19MVFJfSU5URU5UOiBcIlJFQ09OX0RFQ0lTX0xUUl9JTlRFTlRcIiwvLyBSZWNvbnNpZGVyYXRpb24gb2YgRGVjaXNpb24gLSBMZXR0ZXIgb2YgSW50ZW50XHJcbiAgICAgICAgICAgIFJFQ09OX0RFQ0lTX1JRX1JFQ09OOiBcIlJFQ09OX0RFQ0lTX1JRX1JFQ09OXCIsIC8vUmVjb25zaWRlcmF0aW9uIG9mIERlY2lzaW9uIC0gUmVxdWVzdCBmb3IgUmVjb25zaWRlcmF0aW9uXHJcbiAgICAgICAgICAgIFJFQ09OX0RFQ0lTX09USEVSX0lORk86IFwiUkVDT05fREVDSVNfT1RIRVJfSU5GT1wiLC8vIFJlY29uc2lkZXJhdGlvbiBvZiBEZWNpc2lvbiAtIE90aGVyIEluZm9ybWF0aW9uXHJcbiAgICAgICAgICAgIFNDUkVFTklOR19BQ0NFUFRfUkVTUE9OU0U6IFwiU0NSRUVOSU5HX0FDQ0VQVF9SRVNQT05TRVwiLCAvL3Jlc3BvbnNlIHRvIHNjcmVlbmluZyBhY2NlcHRhbmNlIGxldHRlclxyXG4gICAgICAgICAgICBTQ1JFRU5JTkdfQ0xBUklGX1JFU1BPTlNFOiBcIlNDUkVFTklOR19DTEFSSUZfUkVTUE9OU0VcIiwgLy8gcmVzcG9uc2UgdG8gc2NyZWVuaW5nIGNsYXJpZmljYXRpb24gcmVxdWVzdFxyXG4gICAgICAgICAgICBTRE5fUkVTUE9OU0U6IFwiU0ROX1JFU1BPTlNFXCIsIC8vcmVzcG9uc2UgdG8gU0ROXHJcbiAgICAgICAgICAgIExBQkVMX1BSRUFQUFJPVkFMXzJMQU5HOiBcIkxBQkVMX1BSRUFQUFJPVkFMXzJMQU5HXCIsIC8vU2Vjb25kIExhbmd1YWdlIExhYmVsIC0gUHJlLUFwcHJvdmFsXHJcbiAgICAgICAgICAgIFBIT05FX1JRX1JFU1BPTlNFOiBcIlBIT05FX1JRX1JFU1BPTlNFXCIsIC8vUmVzcG9uc2UgdG8gdGVsZXBob25lIFJlcXVlc3RcclxuICAgICAgICAgICAgUklTS19DT01NVU5fRE9DOiBcIlJJU0tfQ09NTVVOX0RPQ1wiLCAvL1Jpc2sgY29tbXVuaWNhdGlvbiBkb2N1bWVudFxyXG4gICAgICAgICAgICBSTVBfVkVSU0lPTl9EQVRFOiBcIlJNUF9WRVJTSU9OX0RBVEVcIiwgLy9STVAgdmVyaXNvblxyXG4gICAgICAgICAgICAvLyBTSUdOQUxfV09SS19VUDogXCJTSUdOQUxfV09SS19VUFwiLCAvL1NpZ25hbCBXb3JrIHVwXHJcbiAgICAgICAgICAgIFVOU09MSUNJVEVEX0RBVEE6IFwiVU5TT0xJQ0lURURfREFUQVwiLCAvL1Vuc29saWNpdGVkIERhdGFcclxuICAgICAgICAgICAgWUVBUl9MSVNUX09GX0NIQU5HRTogXCJZRUFSX0xJU1RfT0ZfQ0hBTkdFXCIsIC8vWWVhciwgbGlzdCBvZiBjaGFuZ2UgbnVtYmVyLFxyXG4gICAgICAgICAgICBCRV9DTEFSSUZfUkVTUE9OU0U6IFwiQkVfQ0xBUklGX1JFU1BPTlNFXCIsIC8vUmVzcG9uc2UgdG8gQkUgY2xhcmlmaWNhdGlvbiByZXF1ZXN0IGRhdGVkLi5cclxuICAgICAgICAgICAgQ09SUl9QQVRFTlRfTUVEOiBcIkNPUlJfUEFURU5UX01FRFwiLCAvL0NvcnJlc3BvbmRlbmNlIC0gUGF0ZW50ZWQgTWVkaWNpbmVzXHJcbiAgICAgICAgICAgIEFMTEVHQVRJT05fTk9USUNFOiBcIkFMTEVHQVRJT05fTk9USUNFXCIsIC8vTm90aWNlIG9mIGFsbGVnYXRpb25cclxuICAgICAgICAgICAgRk9STV9JVjogXCJGT1JNX0lWXCIsIC8vRm9ybSBJVlxyXG4gICAgICAgICAgICBGT1JNX1Y6IFwiRk9STV9WXCIsIC8vRm9ybSBWXHJcbiAgICAgICAgICAgIENPTlNFTlRfTFRSOiBcIkNPTlNFTlRfTFRSXCIsIC8vQ29uc2VudCBMZXR0ZXJcclxuICAgICAgICAgICAgREFUQV9QUk9URUNUX0NPUlJFU1A6IFwiREFUQV9QUk9URUNUX0NPUlJFU1BcIiwgLy9Db3JyZXNwb25kZW5jZSAtIERhdGEgUHJvdGVjdGlvblxyXG4gICAgICAgICAgICBOT05DTElOX0NMQVJJRl9SRVNQT05TRTogXCJOT05DTElOX0NMQVJJRl9SRVNQT05TRVwiLCAvL3Jlc3BvbnNlIHRvIE5vbmNsaW5pY2FsIGNsYXJpZmljYXRpb24gcmVxdWVzdFxyXG4gICAgICAgICAgICBTRVFVRU5DRV9DTEVBTlVQOlwiU0VRVUVOQ0VfQ0xFQU5VUFwiLFxyXG4gICAgICAgICAgICBBRFZfQ09NUF9SRVE6IFwiQURWX0NPTVBfUkVRXCIsIC8vQWR2ZXJ0aXNpbmcgQ29tcGxhaW50IFJlcXVlc3QgZm9yIEluZm9ybWF0aW9uXHJcbiAgICAgICAgICAgIENTT3RSTVA6IFwiQ1NPdFJNUFwiLCAvL0NTT3RSTVAgKENhbmFkaWFuIFNwZWNpZmljIE9waW9pZCBSTVApXHJcbiAgICAgICAgICAgIERJU1NFTV9MSVNUOiBcIkRJU1NFTV9MSVNUXCIsIC8vRGlzc2VtaW5hdGlvbiBMaXN0XHJcbiAgICAgICAgICAgIEZPUkVJR05fU0FGRVRZX05PVElGSUNBVElPTjogXCJGT1JFSUdOX1NBRkVUWV9OT1RJRklDQVRJT05cIiwgLy9Gb3JlaWduIFNhZmV0eSBBY3Rpb24gTm90aWZpY2F0aW9uXHJcbiAgICAgICAgICAgIElTU1VFX1NBRkVUWV9SRVFVRVNUOiBcIklTU1VFX1NBRkVUWV9SRVFVRVNUXCIsIC8vSXNzdWUgUmVsYXRlZCBTYWZldHkgUmVxdWVzdFxyXG4gICAgICAgICAgICBQQVRJRU5UX1NBRkVUWV9JTkZPOiBcIlBBVElFTlRfU0FGRVRZX0lORk9cIiwgLy9QYXRpZW50IFNhZmV0eSBJbmZvcm1hdGlvbiAoTWVkaWNhdGlvbiBlcnJvcilcclxuICAgICAgICAgICAgUFVCX1JFTEVBU0VfSU5GTzogXCJQVUJfUkVMRUFTRV9JTkZPXCIsIC8vUHVibGljIFJlbGVhc2Ugb2YgQ2xpbmljYWwgSW5mb3JtYXRpb25cclxuICAgICAgICAgICAgUkVTU0VTU19PUkRFUjogXCJSRVNTRVNTX09SREVSXCIsIC8vUmVhc3Nlc3NtZW50IE9yZGVyXHJcbiAgICAgICAgICAgIFdSSVRURU5fQ09OU1VMVF9SRVE6IFwiV1JJVFRFTl9DT05TVUxUX1JFUVwiLCAvL1JlcXVlc3QgZm9yIFdyaXR0ZW4gQ29uc3VsdGF0aW9uXHJcbiAgICAgICAgICAgIFRFU1RfU1RVRElFU19PUkRFUjogXCJURVNUX1NUVURJRVNfT1JERVJcIiwgLy9UZXN0IGFuZCBTdHVkaWVzIE9yZGVyXHJcbiAgICAgICAgICAgIFRFUk1fQ09ORF9DT01NOiBcIlRFUk1fQ09ORF9DT01NXCIsIC8vVGVybXMgYW5kIENvbmRpdGlvbnMgQ29tbWl0bWVudFxyXG4gICAgICAgICAgICBZRUFSOiBcIllFQVJcIiwgLy9ZZWFyXHJcbiAgICAgICAgICAgIENUTl9BRE1JTklTVFJBVElWRTpcIkNUTl9BRE1JTklTVFJBVElWRVwiLFxyXG4gICAgICAgICAgICBDVE5fQVBQRU5ESVg6XCJDVE5fQVBQRU5ESVhcIixcclxuICAgICAgICAgICAgQ1ROX0NPTlRBQ1Q6XCJDVE5fQ09OVEFDVFwiLFxyXG4gICAgICAgICAgICAvLyBDVE5fQ1JPU1M6XCJDVE5fQ1JPU1NcIixcclxuICAgICAgICAgICAgQ1ROX0RBVEE6XCJDVE5fREFUQVwiLFxyXG4gICAgICAgICAgICBDVE5fREVBUjpcIkNUTl9ERUFSXCIsXHJcbiAgICAgICAgICAgIENUTl9ESUxVRU5UOlwiQ1ROX0RJTFVFTlRcIixcclxuICAgICAgICAgICAgQ1ROX0RSVUdfUFJPRDpcIkNUTl9EUlVHX1BST0RcIixcclxuICAgICAgICAgICAgQ1ROX0RSVUdfU1VCUzpcIkNUTl9EUlVHX1NVQlNcIixcclxuICAgICAgICAgICAgQ1ROX0VOUk9MTE1FTlQ6XCJDVE5fRU5ST0xMTUVOVFwiLFxyXG4gICAgICAgICAgICBDVE5fRVRISUNTOlwiQ1ROX0VUSElDU1wiLFxyXG4gICAgICAgICAgICAvLyBDVE5fRVhDTFVTSU9OX0lOQ0xVU0lPTjpcIkNUTl9FWENMVVNJT05fSU5DTFVTSU9OXCIsXHJcbiAgICAgICAgICAgIENUTl9JTkZPUk1FRDpcIkNUTl9JTkZPUk1FRFwiLFxyXG4gICAgICAgICAgICBDVE5fSU5WRVNUSUdBVE9SOlwiQ1ROX0lOVkVTVElHQVRPUlwiLFxyXG4gICAgICAgICAgICBDVE5fTkVXX01BTlVGQUNUVVJJTkc6XCJDVE5fTkVXX01BTlVGQUNUVVJJTkdcIixcclxuICAgICAgICAgICAgQ1ROX05FV19QS0c6XCJDVE5fTkVXX1BLR1wiLFxyXG4gICAgICAgICAgICBDVE5fTkVXX1FDOlwiQ1ROX05FV19RQ1wiLFxyXG4gICAgICAgICAgICAvLyBDVE5fTk9MOlwiQ1ROX05PTFwiLFxyXG4gICAgICAgICAgICBDVE5fUEFDS0FHSU5HX0xBQkVMTElORzpcIkNUTl9QQUNLQUdJTkdfTEFCRUxMSU5HXCIsXHJcbiAgICAgICAgICAgIC8vIENUTl9QTTpcIkNUTl9QTVwiLFxyXG4gICAgICAgICAgICBDVE5fUFJPVE9DT0xfSU5GT19VUERBVEU6XCJDVE5fUFJPVE9DT0xfSU5GT19VUERBVEVcIixcclxuICAgICAgICAgICAgQ1ROX1BST1RPQ09MX1VQREFURTpcIkNUTl9QUk9UT0NPTF9VUERBVEVcIixcclxuICAgICAgICAgICAgQ1ROX1FPUzpcIkNUTl9RT1NcIixcclxuICAgICAgICAgICAgQ1ROX1JFRlVTQUxTOlwiQ1ROX1JFRlVTQUxTXCIsXHJcbiAgICAgICAgICAgIENUTl9SRUdVTEFUT1JZOlwiQ1ROX1JFR1VMQVRPUllcIixcclxuICAgICAgICAgICAgQ1ROX1JFU1BPTlNFOlwiQ1ROX1JFU1BPTlNFXCIsXHJcbiAgICAgICAgICAgIENUTl9TQUZFVFk6XCJDVE5fU0FGRVRZXCIsXHJcbiAgICAgICAgICAgIENUTl9TSEVMRl9QRDpcIkNUTl9TSEVMRl9QRFwiLFxyXG4gICAgICAgICAgICBDVE5fU0hFTEZfRFM6XCJDVE5fU0hFTEZfRFNcIixcclxuICAgICAgICAgICAgQ1ROX1NJVEU6XCJDVE5fU0lURVwiLFxyXG4gICAgICAgICAgICBDVE5fU09VUkNFOlwiQ1ROX1NPVVJDRVwiLFxyXG4gICAgICAgICAgICBDVE5fU1RSQUlOOlwiQ1ROX1NUUkFJTlwiLFxyXG4gICAgICAgICAgICBDVE5fU1RVRFlfQ09NUExFVElPTjpcIkNUTl9TVFVEWV9DT01QTEVUSU9OXCIsXHJcbiAgICAgICAgICAgIENUTl9TVFVEWV9ESVNDOlwiQ1ROX1NUVURZX0RJU0NcIixcclxuICAgICAgICAgICAgQ1ROX1NUVURZX0VYVDpcIkNUTl9TVFVEWV9FWFRcIixcclxuICAgICAgICAgICAgQ1ROX1NUVURZX1NVUzpcIkNUTl9TVFVEWV9TVVNcIixcclxuICAgICAgICAgICAgQ1ROX1RSQU5TX09XTjpcIkNUTl9UUkFOU19PV05cIixcclxuICAgICAgICAgICAgQ0xJTklDQUw6XCJDTElOSUNBTFwiLFxyXG4gICAgICAgICAgICBDTElOSUNBTF9RVUFMSVRZOlwiQ0xJTklDQUxfUVVBTElUWVwiLFxyXG4gICAgICAgICAgICBRVUFMSVRZOlwiUVVBTElUWVwiLFxyXG4gICAgICAgICAgICBJTklUSUFMX1RFQVRfU09MVV9NT05POlwiSU5JVElBTF9URUFUX1NPTFVfTU9OT1wiLCAgIC8vSU5JVElBTCAtIFRlYXQgU29sdXRpb25zIE1vbm9ncmFwaFxyXG4gICAgICAgICAgICBSRVFfQUNDRVBURUQ6XCJSRVFfQUNDRVBURURcIiwgICAgICAgICAgICAgICAgICAgICAgIC8vUmVxdWVzdCBBY2NlcHRlZFxyXG4gICAgICAgICAgICBDVE5fRk9STV9CUk9DX1VQREFURVM6XCJDVE5fRk9STV9CUk9DX1VQREFURVNcIiwgICAgIC8vICBDVE4tIEluZm9ybWVkIENvbnNlbnQgRm9ybSBhbmQgSW52ZXN0aWdhdG9y4oCZcyBCcm9jaHVyZSBVcGRhdGVzXHJcbiAgICAgICAgICAgIENUTl9JTVBEX1VQREFURTpcIkNUTl9JTVBEX1VQREFURVwiLCAgICAgICAgICAgICAgICAgLy8gQ1ROLUlNUEQgVXBkYXRlXHJcbiAgICAgICAgICAgIENUTl9ORVdfU1VNTV9BREY6XCJDVE5fTkVXX1NVTU1fQURGXCIsICAgICAgICAgICAgICAgIC8vIENUTi0gTmV3IFN1bW1hcnkgb2YgQWRkaXRpb25hbCBEcnVncyBGb3JtXHJcbiAgICAgICAgICAgIENPVklSXzE5OiAnQ09WSVItMTknLFxyXG4gICAgICAgICAgICBDT1ZJUl8xOUFNRDogJ0NPVklSLTE5QU1EJ1xyXG5cclxuICAgICAgICB9O1xyXG5cclxuXHJcbiAgICAgICAgdmFyIHNlcnZpY2UgPSB7XHJcbiAgICAgICAgICAgIGdldEVudjogX2dldEVudlN0cmluZyxcclxuICAgICAgICAgICAgc2V0RW52OiBfc2V0RW52U3RyaW5nLFxyXG4gICAgICAgICAgICBnZXRUcmFuc2FjdGlvbkRlc2NyaXB0aW9uczogZ2V0VHJhbnNhY3Rpb25EZXNjcmlwdGlvbnNBcnJheSxcclxuICAgICAgICAgICAgZ2V0QWN0aXZpdHlUeXBlczogZ2V0QWN0aXZpdHlBcnJheSxcclxuICAgICAgICAgICAgY3JlYXRlUmFUeXBlczogX2NyZWF0ZVJhQXJyYXksXHJcbiAgICAgICAgICAgIGdldFBoYXJtYWNldXRpY2FsVmFsdWU6IF9nZXRQaGFybWFjZXV0aWNhbCxcclxuICAgICAgICAgICAgZ2V0QmlvbG9naWNWYWx1ZTogX2dldEJpb2xvZ2ljLFxyXG4gICAgICAgICAgICBnZXRWZXRlcmluYXJ5VmFsdWU6IF9nZXRWZXRlcmluYXJ5LFxyXG4gICAgICAgICAgICBnZXRDbGluaWNhbFZhbHVlOiBfZ2V0Q2xpbmljYWwsXHJcbiAgICAgICAgICAgIGdldEJpb2xvZ2ljYWxMZWFkVmFsdWU6IF9nZXRCaW9sb2dpY2FsTGVhZCxcclxuICAgICAgICAgICAgZ2V0UGhhcm1hTGVhZFZhbHVlOiBfZ2V0UGhhcm1hTGVhZCxcclxuICAgICAgICAgICAgZ2V0UG9zdE1hcmtldExlYWRWYWx1ZTogX2dldFBvc3RNYXJrZXRMZWFkLFxyXG4gICAgICAgICAgICBnZXRDb25zdW1IZWFsdGhMZWFkVmFsdWU6IF9nZXRDb25zdW1IZWFsdGhMZWFkLFxyXG4gICAgICAgICAgICBnZXRWZXRlcmluYXJ5TGVhZFZhbHVlOiBfZ2V0VmV0ZXJpbmFyeUxlYWQsXHJcbiAgICAgICAgICAgIGdldENsaW5pY2FsQmlvTGVhZFZhbHVlOiBfZ2V0Q2xpbmljYWxCaW9MZWFkLFxyXG4gICAgICAgICAgICBnZXRDbGluaWNhbFBoYUxlYWRWYWx1ZTogX2dldENsaW5pY2FsUGhhTGVhZCxcclxuICAgICAgICAgICAgZ2V0UHJlc3ViVHlwZXM6IGdldFByZXN1YkFycmF5LFxyXG4gICAgICAgICAgICBnZXRBbmRzVHlwZTogZ2V0QU5EU0FycmF5LFxyXG4gICAgICAgICAgICBnZXRWX0FuZHNUeXBlOiBnZXRWX0FuZHNBcnJheSxcclxuICAgICAgICAgICAgZ2V0Q3RhVHlwZTogZ2V0Q3RhQXJyYXksXHJcbiAgICAgICAgICAgIGdldEN0YV9hVHlwZTogZ2V0Q3RhX2FBcnJheSxcclxuICAgICAgICAgICAgZ2V0UHJlQ3RhVHlwZTogZ2V0UHJlQ3RhQXJyYXksXHJcbiAgICAgICAgICAgIGdldERpbmFUeXBlOiBnZXRESU5BQXJyYXksXHJcbiAgICAgICAgICAgIGdldFZfRGluYVR5cGU6IGdldFZfRElOQUFycmF5LFxyXG4gICAgICAgICAgICBnZXREaW5iVHlwZTogZ2V0RElOQkFycmF5LFxyXG4gICAgICAgICAgICBnZXREaW5kVHlwZTogZ2V0RElOREFycmF5LFxyXG4gICAgICAgICAgICBnZXREaW5mVHlwZTogZ2V0RElORkFycmF5LFxyXG4gICAgICAgICAgICBnZXREU3VyVHlwZTogZ2V0RFN1ckFycmF5LFxyXG4gICAgICAgICAgICBnZXRFdW5kc1R5cGU6IGdldEVVTkRTQXJyYXksXHJcbiAgICAgICAgICAgIGdldEV1c25kc1R5cGU6IGdldEVVU05EU0FycmF5LFxyXG4gICAgICAgICAgICBnZXRMZXZlbDNUeXBlOiBnZXRMZXZlbDNBcnJheSxcclxuICAgICAgICAgICAgZ2V0Vl9MZXZlbDNUeXBlOiBnZXRWX0xldmVsM0FycmF5LFxyXG4gICAgICAgICAgICBnZXRNUERJTlR5cGU6IGdldE1QRElOQXJyYXksXHJcbiAgICAgICAgICAgIGdldFZfTXBkaW5UeXBlOiBnZXRWX01wZGluQXJyYXksXHJcbiAgICAgICAgICAgIGdldE5jVHlwZTogZ2V0TmNBcnJheSxcclxuICAgICAgICAgICAgZ2V0Vl9OY1R5cGU6IGdldFZfTmNBcnJheSxcclxuICAgICAgICAgICAgZ2V0Ql9OY1R5cGU6IGdldEJfTmNBcnJheSxcclxuICAgICAgICAgICAgZ2V0TmRzVHlwZTogZ2V0TkRTQXJyYXksXHJcbiAgICAgICAgICAgIGdldFZfTmRzVHlwZTogZ2V0Vl9OZHNBcnJheSxcclxuICAgICAgICAgICAgZ2V0UGRjVHlwZTogZ2V0UERDQXJyYXksXHJcbiAgICAgICAgICAgIGdldFBkY0JUeXBlOiBnZXRQRENCQXJyYXksXHJcbiAgICAgICAgICAgIGdldFByZXN1YlR5cGU6IGdldFByZXN1YkFycmF5LFxyXG4gICAgICAgICAgICBnZXRwU3VyQ1R5cGU6IGdldFBTVVJDQXJyYXksXHJcbiAgICAgICAgICAgIGdldHBTdXJQdlR5cGU6IGdldFBTVVJQVkFycmF5LFxyXG4gICAgICAgICAgICBnZXRWX1BzdXJQdlR5cGU6IGdldFZfUHN1clB2QXJyYXksXHJcbiAgICAgICAgICAgIGdldFJtcFB2VHlwZTogZ2V0Uk1QUFZBcnJheSxcclxuICAgICAgICAgICAgZ2V0U2FuZHNUeXBlOiBnZXRTQU5EU0FycmF5LFxyXG4gICAgICAgICAgICBnZXRWX1NhbmRzVHlwZTogZ2V0Vl9TYW5kc0FycmF5LFxyXG4gICAgICAgICAgICBnZXRTbmRzVHlwZTogZ2V0U05EU0FycmF5LFxyXG4gICAgICAgICAgICBnZXRWX1NuZHNUeXBlOiBnZXRWX1NuZHNBcnJheSxcclxuICAgICAgICAgICAgZ2V0U25kc0NUeXBlOiBnZXRTTkRTQ0FycmF5LFxyXG4gICAgICAgICAgICBnZXRVZHB2VHlwZTogZ2V0VURQVkFycmF5LFxyXG4gICAgICAgICAgICBnZXRVZHJhVHlwZTogZ2V0VURSQUFycmF5LFxyXG4gICAgICAgICAgICBnZXRWX1VkcmFUeXBlOiBnZXRWX1VkcmFBcnJheSxcclxuICAgICAgICAgICAgZ2V0WWJwclR5cGU6IGdldFlCUFJBcnJheSxcclxuICAgICAgICAgICAgZ2V0Q29uc3VsdFR5cGU6IGdldENvbnN1bHRBcnJheSxcclxuICAgICAgICAgICAgZ2V0TVBOQ1R5cGU6IF9nZXRNUE5DQXJyYXksXHJcbiAgICAgICAgICAgIGdldFZfTXBuY1R5cGU6IGdldFZfTXBuY0FycmF5LFxyXG4gICAgICAgICAgICBnZXRNUE5EU1R5cGU6IF9nZXRNUE5EU0FycmF5LFxyXG4gICAgICAgICAgICBnZXRWX01wbmRzVHlwZTogZ2V0Vl9NcG5kc0FycmF5LFxyXG4gICAgICAgICAgICBnZXRWX01wYW5kc1R5cGU6IGdldFZfTXBhbmRzQXJyYXksXHJcbiAgICAgICAgICAgIGdldFZfTXBzYW5kc1R5cGU6IGdldFZfTXBzYW5kc0FycmF5LFxyXG4gICAgICAgICAgICBnZXRWX1JjY1R5cGU6IGdldFZfUmNjQXJyYXksXHJcbiAgICAgICAgICAgIGdldE1QU05EU1R5cGU6IF9nZXRNUFNORFNBcnJheSxcclxuICAgICAgICAgICAgZ2V0Vl9NcHNuZHNUeXBlOiBnZXRWX01wc25kc0FycmF5LFxyXG4gICAgICAgICAgICBnZXRQQU5EVHlwZTogX2dldFBBTkRBcnJheSxcclxuICAgICAgICAgICAgZ2V0UEJSRVJDVHlwZTogX2dldFBCUkVSQ0FycmF5LFxyXG4gICAgICAgICAgICBnZXRQQlJFUlBWVHlwZTogX2dldFBCUkVSUFZBcnJheSxcclxuICAgICAgICAgICAgZ2V0UFJORFNUeXBlOiBfZ2V0UFJORFNBcnJheSxcclxuICAgICAgICAgICAgZ2V0UFJTTkRTVHlwZTogX2dldFBSU05EU0FycmF5LFxyXG5cclxuICAgICAgICAgICAgZ2V0SVJTUlBWVHlwZTogX2dldElSU1JQVkFycmF5LFxyXG4gICAgICAgICAgICBnZXRQQVBWVHlwZTogX2dldFBBUFZBcnJheSxcclxuICAgICAgICAgICAgZ2V0UFNBUFZUeXBlOiBfZ2V0UFNBUFZBcnJheSxcclxuICAgICAgICAgICAgZ2V0UkNQVlR5cGU6IF9nZXRSQ1BWQXJyYXksXHJcbiAgICAgICAgICAgIGdldFJFR1BWVHlwZTogX2dldFJFR1BWQXJyYXksXHJcbiAgICAgICAgICAgIGdldFNBTkRTQ1R5cGU6IF9nZXRTQU5EU0NBcnJheSxcclxuICAgICAgICAgICAgZ2V0UG9zdERJTlR5cGU6IF9nZXRQb3N0RElOQXJyYXksXHJcbiAgICAgICAgICAgIGdldEVVQU5EU1R5cGU6IF9nZXRFVUFORFNBcnJheSxcclxuICAgICAgICAgICAgZ2V0RVVTQU5EU1R5cGU6IF9nZXRFVVNBTkRTQXJyYXksXHJcblxyXG4gICAgICAgICAgICBnZXRZZXNOb0xpc3Q6IHllc05vQXJyYXksXHJcbiAgICAgICAgICAgIGdldEZlZUxpc3Q6IF9nZXRmZWVUeXBlQXJyYXksXHJcbiAgICAgICAgICAgIGNyZWF0ZUZlZVR5cGVzOiBfY3JlYXRlRmVlQXJyYXksXHJcbiAgICAgICAgICAgIGdldE1pdGlnYXRpb25MaXN0OiBfZ2V0TWl0aWdhdGlvblR5cGVBcnJheSxcclxuICAgICAgICAgICAgY3JlYXRlTWl0aWdhdGlvbkxpc3Q6IF9jcmVhdGVNaXRpZ2F0aW9uQXJyYXksXHJcbiAgICAgICAgICAgIGdldEFjdGl2aXR5TGVhZExpc3Q6IF9nZXRBY3Rpdml0eUxlYWRBcnJheSxcclxuICAgICAgICAgICAgZ2V0QWN0aXZpdHlMZWFkTGlzdEJ5RDIyOiBfZ2V0QWN0aXZpdHlMZWFkRDIyQXJyYXksXHJcbiAgICAgICAgICAgIGdldEFjdGl2aXR5TGVhZExpc3RCeUQyMTogX2dldEFjdGl2aXR5TGVhZEQyMUFycmF5LFxyXG4gICAgICAgICAgICBnZXRBY3Rpdml0eUxlYWRMaXN0QnlEMjQ6IF9nZXRBY3Rpdml0eUxlYWREMjRBcnJheSxcclxuICAgICAgICAgICAgZ2V0QWN0aXZpdHlMZWFkTGlzdEJ5RDI2OiBfZ2V0QWN0aXZpdHlMZWFkRDI2QXJyYXksXHJcbiAgICAgICAgICAgIGdldFNoZWxmTGlmZVVuaXRzTGlzdDpfZ2V0U2hlbGZMaWZlVW5pdHNBcnJheSxcclxuXHJcbiAgICAgICAgICAgIGdldENPVklSMTlUeXBlOiBfZ2V0Q29WaXIxOUFycmF5LFxyXG4gICAgICAgICAgICBnZXRDT1ZJRDE5QU1EVHlwZTogX2dldENvVmlyMTlBbWRBcnJheVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIHNlcnZpY2U7XHJcblxyXG4gICAgICAgIC8vLy8vLy8vLy8vLy8vLy9cclxuXHJcbiAgICAgICAgLy9UT0RPIG1ha2UgbGlzdHMgYmUgYWN0aXZpdHkuLiB5aWtlcyFcclxuXHJcbiAgICAgICAgZnVuY3Rpb24geWVzTm9BcnJheSgpIHtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiAoW1xyXG4gICAgICAgICAgICAgICAgXCJZXCIsXHJcbiAgICAgICAgICAgICAgICBcIk5cIlxyXG4gICAgICAgICAgICBdKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIF9nZXRFbnZTdHJpbmcoKSB7XHJcbiAgICAgICAgICAgIGlmICh2bS5lbnYpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB2bS5lbnY7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gJ0BAZW52VmFsdWUnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBfc2V0RW52U3RyaW5nKHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHZtLmVudiA9IHZhbHVlLmVudjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIF9jcmVhdGVSYUFycmF5KHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHZtLnJhVHlwZUFycmF5ID0gdmFsdWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBfY3JlYXRlRmVlQXJyYXkodmFsdWUpIHtcclxuICAgICAgICAgICAgdm0uZmVlVHlwZUFycmF5ID0gdmFsdWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBfY3JlYXRlTWl0aWdhdGlvbkFycmF5KHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHZtLm1pdGlnYXRpb25UeXBlQXJyYXkgPSB2YWx1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vcmV0dXJucyBhIGxpc3Qgb2YgYWxsIHRoZSB1bmlxdWUgZGVzY3JpcHRpb24gdmFsdWVzXHJcbiAgICAgICAgZnVuY3Rpb24gZ2V0VHJhbnNhY3Rpb25EZXNjcmlwdGlvbnNBcnJheSgpIHtcclxuICAgICAgICAgICAgcmV0dXJuICh2bS5hbGxBY3Rpdml0aWVzKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGdldEFjdGl2aXR5QXJyYXkoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAodm0ucmFUeXBlQXJyYXkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gX2dldGZlZVR5cGVBcnJheSgpIHtcclxuICAgICAgICAgICAgcmV0dXJuICh2bS5mZWVUeXBlQXJyYXkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gX2dldE1pdGlnYXRpb25UeXBlQXJyYXkoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAodm0ubWl0aWdhdGlvblR5cGVBcnJheSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBnZXRQcmVzdWJBcnJheSgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIChbXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkNBTkNFTF9MRVRURVIsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLk1FRVRJTkdfTUlOVVRFUyxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuRU1BSUxfUlFfUkVTUE9OU0UsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBST0NFU1NJTkdfQ0xBUklGX1JFU1BPTlNFLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5QSE9ORV9SUV9SRVNQT05TRVxyXG4gICAgICAgICAgICBdKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGdldEFORFNBcnJheSgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIChbXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkFETUlOSVNUUkFUSVZFLCAvL2FkbWluaXN0cmF0aXZlXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkNBTkNFTF9MRVRURVIsIC8vY2FuY2VsbGF0aW9uIGxldHRlclxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5DT01NRU5UU19OT0MsIC8vIGNvbW1lbnRzIG9uIG5vdGljZSBvZiBkZWNpc2lvblxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5EUlVHX05PVElGX0ZPUk0sIC8vIGRydWcgbm90aWZpY2F0aW9uIGZvcm1cclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuSU5JVElBTCwgLy9Jbml0aWFsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLk1FRVRJTkdfTUlOVVRFUywgLy9taW51dGVzIG9mIG1lZXRpbmcgZGF0ZWRcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUE9TVF9DTEVBUkFOQ0VfREFUQSwgLy9wb3N0IGNsZWFyYW5jZSBkYXRhXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlNFQ09ORF9MQU5HX1BNLCAvLyBTZWNvbmQgTGFuZ3VhZ2UgUE1cclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUFJJU1RJTkVfUE1fMkxBTkcsIC8vIHByaXN0aW5lIFBNIHNlY29uZCBsYW5ndWFnZVxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5QVUJfUkVMRUFTRV9JTkZPLCAvL1B1YmxpYyBSZWxlYXNlIG9mIENsaW5pY2FsIEluZm9ybWF0aW9uXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkJFX0NMQVJJRl9SRVNQT05TRSxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuQ0xJTl9DTEFSSUZfUkVTUE9OU0UsIC8vUmVzcG9uc2UgdG8gY2xpbmljYWwgY2xhcmlmaWFjdGlvbiByZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkVNQUlMX1JRX1JFU1BPTlNFLC8vIHJlc3BvbnNlIHRvIGVtYWlsIHJlcXVlc3RcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuTEFCRUxfQ0xBUklGX1JFU1BPTlNFLCAvL1Jlc3BvbnNlIHRvIGxhYmVsbGluZyBjbGFyaWZpY2F0aW9uIHJlcXVlc3RcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuTEFCRUxfUFJFQVBQUk9WQUxfMkxBTkcsIC8vU2Vjb25kIExhbmd1YWdlIExhYmVsIC0gUHJlLUFwcHJvdmFsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLk5PQ19SRVNQT05TRSwgLy9yZXNwb25zZSB0byBOT0MvIGMtUW5cclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuTk9EX1JFU1BPTlNFLCAvL1Jlc3BvbnNlIHRvIE5PRFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5OT05fUkVTUE9OU0UsIC8vUmVzcG9uc2UgdG8gTk9OXHJcbiAgICAgICAgICAgICAgICAvL3ZtLmFsbEFjdGl2aXRpZXMuTk9USUZJQ0FUSU9OX0lOVEVSUlVQVF9TQUxFLC8vTm90aWZpY2F0aW9uIEludGVycnVwdGlvbiBvZiBTYWxlXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBSRVNVQl9NRUVUSU5HX1BLRywgLy9zdWJtaXNzaW9uL3ByZXN1Ym1pc3Npb24gbWVldGluZyBwYWNrYWdlXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBSRVNVQl9NRUVUSU5HX1JRLCAgIC8vc3VibWlzc2lvbiBNZWV0aW5nIFJlcXVlc3QgLXVzZWQgdG8gYmUgcHJlc3ViXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBST0NFU1NJTkdfQ0xBUklGX1JFU1BPTlNFLCAvL1Jlc3BvbnNlIHRvIHByb2Nlc3NpbmcgIENsYXJpZmljYXRpb24gUmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5RVUFMX0NMSU5fQ0xBUklGX1JFU1BPTlNFLCAvL1Jlc3BvbnNlIHRvIHF1YWxpdHkgYW5kIENsaW5pY2FsIGNsYXJpZmljYXRpb24gUkVxdWVzdFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5RVUFMX0NMQVJJRl9SRVNQT05TRSwgLy9SZXNwb25zZSB0byBRdWFsaXR5IENsYXJpZmljYXRpb24gcmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5SRUNPTl9ERUNJU19MVFJfSU5URU5ULC8vIFJlY29uc2lkZXJhdGlvbiBvZiBEZWNpc2lvbiAtIExldHRlciBvZiBJbnRlbnRcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUkVDT05fREVDSVNfUlFfUkVDT04sIC8vUmVjb25zaWRlcmF0aW9uIG9mIERlY2lzaW9uIC0gUmVxdWVzdCBmb3IgUmVjb25zaWRlcmF0aW9uXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlJFQ09OX0RFQ0lTX09USEVSX0lORk8sLy8gUmVjb25zaWRlcmF0aW9uIG9mIERlY2lzaW9uIC0gT3RoZXIgSW5mb3JtYXRpb25cclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuU0NSRUVOSU5HX0FDQ0VQVF9SRVNQT05TRSwgLy9yZXNwb25zZSB0byBzY3JlZW5pbmcgYWNjZXB0YW5jZSBsZXR0ZXJcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuU0NSRUVOSU5HX0NMQVJJRl9SRVNQT05TRSwgLy8gcmVzcG9uc2UgdG8gc2NyZWVuaW5nIGNsYXJpZmljYXRpb24gcmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5TRE5fUkVTUE9OU0UsIC8vcmVzcG9uc2UgdG8gU0ROXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBIT05FX1JRX1JFU1BPTlNFLCAvL1Jlc3BvbnNlIHRvIHRlbGVwaG9uZSBSZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlVOU09MSUNJVEVEX0RBVEEsIC8vVW5zb2xpY2l0ZWQgRGF0YVxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5DT1JSX1BBVEVOVF9NRUQsIC8vQ29ycmVzcG9uZGVuY2UgLSBQYXRlbnRlZCBNZWRpY2luZXNcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuQUxMRUdBVElPTl9OT1RJQ0UsIC8vTm90aWNlIG9mIGFsbGVnYXRpb25cclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuRk9STV9JViwgLy9Gb3JtIElWXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkZPUk1fViwgLy9Gb3JtIFZcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuQ09OU0VOVF9MVFIsIC8vQ29uc2VudCBMZXR0ZXJcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuREFUQV9QUk9URUNUX0NPUlJFU1AgLy9Db3JyZXNwb25kZW5jZSAtIERhdGEgUHJvdGVjdGlvblxyXG4gICAgICAgICAgICAgICAgLy92bS5hbGxBY3Rpdml0aWVzLlNFUVVFTkNFX0NMRUFOVVAgLy8gU2VxdWVuY2UgY2xlYW51cCBhcyBwZXIgZW1haWwgRkViIDE2LCAyMDE4XHJcbiAgICAgICAgICAgIF0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZ2V0RVVORFNBcnJheSgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIChbXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkFETUlOSVNUUkFUSVZFLCAvL2FkbWluaXN0cmF0aXZlXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkJFX0NMQVJJRl9SRVNQT05TRSwgLy9SZXNwb25zZSB0byBCRSBjbGFyaWZpY2F0aW9uIHJlcXVlc3QgZGF0ZWQuLlxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5DQU5DRUxfTEVUVEVSLCAvL2NhbmNlbGxhdGlvbiBsZXR0ZXJcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuQ09NTUVOVFNfTk9DLCAvLyBjb21tZW50cyBvbiBub3RpY2Ugb2YgZGVjaXNpb25cclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuQ09NTUVOVFNfU1VNTUFSWV9CQVNJUywgLy9jb21tbWVudHMgb24gc3VtbWFyeSBiYXNpcyxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuRFJVR19OT1RJRl9GT1JNLCAvLyBkcnVnIG5vdGlmaWNhdGlvbiBmb3JtXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLklOSVRJQUwsIC8vSW5pdGlhbFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5NRUVUSU5HX01JTlVURVMsIC8vbWludXRlcyBvZiBtZWV0aW5nIGRhdGVkXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBPU1RfQ0xFQVJBTkNFX0RBVEEsIC8vcG9zdCBjbGVhcmFuY2UgZGF0YVxyXG4gICAgICAgICAgICAgICAgLy8gdm0uYWxsQWN0aXZpdGllcy5QUklTVElORV9QTSwgLy8gUHJpc3RpbmUgUE1cclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuU0VDT05EX0xBTkdfUE0sIC8vIFNlY29uZCBMYW5ndWFnZSBQTVxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5QUklTVElORV9QTV8yTEFORywgLy8gcHJpc3RpbmUgUE0gc2Vjb25kIGxhbmd1YWdlXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBVQl9SRUxFQVNFX0lORk8sIC8vUHVibGljIFJlbGVhc2Ugb2YgQ2xpbmljYWwgSW5mb3JtYXRpb25cclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuQ0xJTl9DTEFSSUZfUkVTUE9OU0UsIC8vUmVzcG9uc2UgdG8gY2xpbmljYWwgY2xhcmlmaWFjdGlvbiByZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkVNQUlMX1JRX1JFU1BPTlNFLC8vIHJlc3BvbnNlIHRvIGVtYWlsIHJlcXVlc3RcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuTEFCRUxfQ0xBUklGX1JFU1BPTlNFLCAvL1Jlc3BvbnNlIHRvIGxhYmVsbGluZyBjbGFyaWZpY2F0aW9uIHJlcXVlc3RcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuTEFCRUxfUFJFQVBQUk9WQUxfMkxBTkcsIC8vU2Vjb25kIExhbmd1YWdlIExhYmVsIC0gUHJlLUFwcHJvdmFsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLk5PQ19SRVNQT05TRSwgLy9yZXNwb25zZSB0byBOT0MvIGMtUW5cclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuTk9EX1JFU1BPTlNFLCAvL1Jlc3BvbnNlIHRvIE5PRFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5OT05fUkVTUE9OU0UsIC8vUmVzcG9uc2UgdG8gTk9OXHJcbiAgICAgICAgICAgICAgICAvL3ZtLmFsbEFjdGl2aXRpZXMuTk9USUZJQ0FUSU9OX0lOVEVSUlVQVF9TQUxFLC8vTm90aWZpY2F0aW9uIEludGVycnVwdGlvbiBvZiBTYWxlXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBSRVNVQl9NRUVUSU5HX1BLRywgLy9zdWJtaXNzaW9uL3ByZXN1Ym1pc3Npb24gbWVldGluZyBwYWNrYWdlXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBSRVNVQl9NRUVUSU5HX1JRLCAgIC8vc3VibWlzc2lvbiBNZWV0aW5nIFJlcXVlc3QgLXVzZWQgdG8gYmUgcHJlc3ViXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBST0NFU1NJTkdfQ0xBUklGX1JFU1BPTlNFLCAvL1Jlc3BvbnNlIHRvIHByb2Nlc3NpbmcgQ2xhcmlmaWNhdGlvbiBSZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlFVQUxfQ0xJTl9DTEFSSUZfUkVTUE9OU0UsIC8vUmVzcG9uc2UgdG8gcXVhbGl0eSBhbmQgQ2xpbmljYWwgY2xhcmlmaWNhdGlvbiBSRXF1ZXN0XHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlFVQUxfQ0xBUklGX1JFU1BPTlNFLCAvL1Jlc3BvbnNlIHRvIFF1YWxpdHkgQ2xhcmlmaWNhdGlvbiByZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlJFQ09OX0RFQ0lTX0xUUl9JTlRFTlQsLy8gUmVjb25zaWRlcmF0aW9uIG9mIERlY2lzaW9uIC0gTGV0dGVyIG9mIEludGVudFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5SRUNPTl9ERUNJU19SUV9SRUNPTiwgLy9SZWNvbnNpZGVyYXRpb24gb2YgRGVjaXNpb24gLSBSZXF1ZXN0IGZvciBSZWNvbnNpZGVyYXRpb25cclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUkVDT05fREVDSVNfT1RIRVJfSU5GTywvLyBSZWNvbnNpZGVyYXRpb24gb2YgRGVjaXNpb24gLSBPdGhlciBJbmZvcm1hdGlvblxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5TQ1JFRU5JTkdfQUNDRVBUX1JFU1BPTlNFLCAvL3Jlc3BvbnNlIHRvIHNjcmVlbmluZyBhY2NlcHRhbmNlIGxldHRlclxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5TQ1JFRU5JTkdfQ0xBUklGX1JFU1BPTlNFLCAvLyByZXNwb25zZSB0byBzY3JlZW5pbmcgY2xhcmlmaWNhdGlvbiByZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlNETl9SRVNQT05TRSwgLy9yZXNwb25zZSB0byBTRE5cclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUEhPTkVfUlFfUkVTUE9OU0UsIC8vUmVzcG9uc2UgdG8gdGVsZXBob25lIFJlcXVlc3RcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuVU5TT0xJQ0lURURfREFUQSwgLy9VbnNvbGljaXRlZCBEYXRhXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkNPUlJfUEFURU5UX01FRCwgLy9Db3JyZXNwb25kZW5jZSAtIFBhdGVudGVkIE1lZGljaW5lc1xyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5BTExFR0FUSU9OX05PVElDRSwgLy9Ob3RpY2Ugb2YgYWxsZWdhdGlvblxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5GT1JNX0lWLCAvL0Zvcm0gSVZcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuRk9STV9WLCAvL0Zvcm0gVlxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5DT05TRU5UX0xUUiwgLy9Db25zZW50IExldHRlclxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5EQVRBX1BST1RFQ1RfQ09SUkVTUCwgLy9Db3JyZXNwb25kZW5jZSAtIERhdGEgUHJvdGVjdGlvblxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5OT05DTElOX0NMQVJJRl9SRVNQT05TRSAvL3Jlc3BvbnNlIHRvIE5vbmNsaW5pY2FsIGNsYXJpZmljYXRpb24gcmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgLy92bS5hbGxBY3Rpdml0aWVzLlNFUVVFTkNFX0NMRUFOVVAgLy8gU2VxdWVuY2UgY2xlYW51cCBhcyBwZXIgZW1haWwgRkViIDE2LCAyMDE4XHJcbiAgICAgICAgICAgIF0pO1xyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGdldEVVU05EU0FycmF5KCkge1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIChbXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkFETUlOSVNUUkFUSVZFLCAvL2FkbWluaXN0cmF0aXZlXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkJFX0NMQVJJRl9SRVNQT05TRSwgLy9SZXNwb25zZSB0byBCRSBjbGFyaWZpY2F0aW9uIHJlcXVlc3QgZGF0ZWQuLlxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5DQU5DRUxfTEVUVEVSLCAvL2NhbmNlbGxhdGlvbiBsZXR0ZXJcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuQ09NTUVOVFNfTk9DLCAvLyBjb21tZW50cyBvbiBub3RpY2Ugb2YgZGVjaXNpb25cclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuQ09NTUVOVFNfU1VNTUFSWV9CQVNJUywgLy9jb21tbWVudHMgb24gc3VtbWFyeSBiYXNpc1xyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5EUlVHX05PVElGX0ZPUk0sIC8vIGRydWcgbm90aWZpY2F0aW9uIGZvcm1cclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuTUVFVElOR19NSU5VVEVTLCAvL21pbnV0ZXMgb2YgbWVldGluZyBkYXRlZFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5QT1NUX0NMRUFSQU5DRV9EQVRBLCAvL3Bvc3QgY2xlYXJhbmNlIGRhdGFcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUE9TVF9OT0NfQ0hBTkdFLCAvL1Bvc3QgTk9DIGNoYW5nZVxyXG4gICAgICAgICAgICAgICAgLy8gdm0uYWxsQWN0aXZpdGllcy5QUklTVElORV9QTSwgLy8gUHJpc3RpbmUgUE1cclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuU0VDT05EX0xBTkdfUE0sIC8vIFNlY29uZCBMYW5ndWFnZSBQTVxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5QUklTVElORV9QTV8yTEFORywgLy8gcHJpc3RpbmUgUE0gc2Vjb25kIGxhbmd1YWdlXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBVQl9SRUxFQVNFX0lORk8sIC8vUHVibGljIFJlbGVhc2Ugb2YgQ2xpbmljYWwgSW5mb3JtYXRpb25cclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuQ0xJTl9DTEFSSUZfUkVTUE9OU0UsIC8vUmVzcG9uc2UgdG8gY2xpbmljYWwgY2xhcmlmaWFjdGlvbiByZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkVNQUlMX1JRX1JFU1BPTlNFLC8vIHJlc3BvbnNlIHRvIGVtYWlsIHJlcXVlc3RcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuTEFCRUxfQ0xBUklGX1JFU1BPTlNFLCAvL1Jlc3BvbnNlIHRvIGxhYmVsbGluZyBjbGFyaWZpY2F0aW9uIHJlcXVlc3RcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuTk9DX1JFU1BPTlNFLCAvL3Jlc3BvbnNlIHRvIE5PQy8gYy1RblxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5OT0RfUkVTUE9OU0UsIC8vUmVzcG9uc2UgdG8gTk9EXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLk5PTl9SRVNQT05TRSwgLy9SZXNwb25zZSB0byBOT05cclxuICAgICAgICAgICAgICAgIC8vdm0uYWxsQWN0aXZpdGllcy5OT1RJRklDQVRJT05fSU5URVJSVVBUX1NBTEUsLy9Ob3RpZmljYXRpb24gSW50ZXJydXB0aW9uIG9mIFNhbGVcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUFJFU1VCX01FRVRJTkdfUEtHLCAvL3N1Ym1pc3Npb24vcHJlc3VibWlzc2lvbiBtZWV0aW5nIHBhY2thZ2VcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUFJFU1VCX01FRVRJTkdfUlEsICAgLy9zdWJtaXNzaW9uIE1lZXRpbmcgUmVxdWVzdCAtdXNlZCB0byBiZSBwcmVzdWJcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUFJPQ0VTU0lOR19DTEFSSUZfUkVTUE9OU0UsIC8vUmVzcG9uc2UgdG8gcHJvY2Vzc2luZyBDbGFyaWZpY2F0aW9uIFJlcXVlc3RcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUVVBTF9DTElOX0NMQVJJRl9SRVNQT05TRSwgLy9SZXNwb25zZSB0byBxdWFsaXR5IGFuZCBDbGluaWNhbCBjbGFyaWZpY2F0aW9uIFJFcXVlc3RcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUVVBTF9DTEFSSUZfUkVTUE9OU0UsIC8vUmVzcG9uc2UgdG8gUXVhbGl0eSBDbGFyaWZpY2F0aW9uIHJlcXVlc3RcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUkVDT05fREVDSVNfTFRSX0lOVEVOVCwvLyBSZWNvbnNpZGVyYXRpb24gb2YgRGVjaXNpb24gLSBMZXR0ZXIgb2YgSW50ZW50XHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlJFQ09OX0RFQ0lTX1JRX1JFQ09OLCAvL1JlY29uc2lkZXJhdGlvbiBvZiBEZWNpc2lvbiAtIFJlcXVlc3QgZm9yIFJlY29uc2lkZXJhdGlvblxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5SRUNPTl9ERUNJU19PVEhFUl9JTkZPLC8vIFJlY29uc2lkZXJhdGlvbiBvZiBEZWNpc2lvbiAtIE90aGVyIEluZm9ybWF0aW9uXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlNDUkVFTklOR19BQ0NFUFRfUkVTUE9OU0UsIC8vcmVzcG9uc2UgdG8gc2NyZWVuaW5nIGFjY2VwdGFuY2UgbGV0dGVyXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlNDUkVFTklOR19DTEFSSUZfUkVTUE9OU0UsIC8vIHJlc3BvbnNlIHRvIHNjcmVlbmluZyBjbGFyaWZpY2F0aW9uIHJlcXVlc3RcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuU0ROX1JFU1BPTlNFLCAvL3Jlc3BvbnNlIHRvIFNETlxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5MQUJFTF9QUkVBUFBST1ZBTF8yTEFORywgLy9zZWNvbmQgbGFuZ2FnZSBwcmVhcHByb3ZhbFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5QSE9ORV9SUV9SRVNQT05TRSwgLy9SZXNwb25zZSB0byB0ZWxlcGhvbmUgUmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5VTlNPTElDSVRFRF9EQVRBLCAvL1Vuc29saWNpdGVkIERhdGFcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuQ09SUl9QQVRFTlRfTUVELCAvL0NvcnJlc3BvbmRlbmNlIC0gUGF0ZW50ZWQgTWVkaWNpbmVzXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkFMTEVHQVRJT05fTk9USUNFLCAvL05vdGljZSBvZiBhbGxlZ2F0aW9uXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkZPUk1fSVYsIC8vRm9ybSBJVlxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5GT1JNX1YsIC8vRm9ybSBWXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkNPTlNFTlRfTFRSLCAvL0NvbnNlbnQgTGV0dGVyXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkRBVEFfUFJPVEVDVF9DT1JSRVNQLCAvL0NvcnJlc3BvbmRlbmNlIC0gRGF0YSBQcm90ZWN0aW9uXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLk5PTkNMSU5fQ0xBUklGX1JFU1BPTlNFIC8vcmVzcG9uc2UgdG8gTm9uY2xpbmljYWwgY2xhcmlmaWNhdGlvbiByZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICAvL3ZtLmFsbEFjdGl2aXRpZXMuU0VRVUVOQ0VfQ0xFQU5VUCAvLyBTZXF1ZW5jZSBjbGVhbnVwIGFzIHBlciBlbWFpbCBGRWIgMTYsIDIwMThcclxuICAgICAgICAgICAgXSk7XHJcblxyXG4gICAgICAgIH1cclxuICAgICAgICAvL0xldmVsIDMtICBOb3RpY2Ugb2YgQ2hhbmdlXHJcbiAgICAgICAgZnVuY3Rpb24gZ2V0TGV2ZWwzQXJyYXkoKSB7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gKFtcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuQ0FOQ0VMX0xFVFRFUiwgLy9jYW5jZWxsYXRpb24gbGV0dGVyXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkVNQUlMX1JRX1JFU1BPTlNFLC8vIHJlc3BvbnNlIHRvIGVtYWlsIHJlcXVlc3RcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUEhPTkVfUlFfUkVTUE9OU0UsIC8vUmVzcG9uc2UgdG8gdGVsZXBob25lIFJlcXVlc3RcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuWUVBUl9MSVNUX09GX0NIQU5HRSwgLy9ZZWFyKHMpLCBsaXN0IG9mIGNoYW5nZSBudW1iZXIocyksXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkNMSU5fQ0xBUklGX1JFU1BPTlNFLCAvL1Jlc3BvbnNlIHRvIGNsaW5pY2FsIGNsYXJpZmljYXRpb24gcmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5RVUFMX0NMQVJJRl9SRVNQT05TRSAvL1Jlc3BvbnNlIHRvIFF1YWxpdHkgQ2xhcmlmaWNhdGlvbiByZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICAvLyB2bS5hbGxBY3Rpdml0aWVzLkNMQVJJRl9SRVNQT05TRSAvL1Jlc3BvbnNlIHRvIGNsYXJpZmljYXRpb24gcmVxdWVzdFxyXG4gICAgICAgICAgICBdKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIGZ1bmN0aW9uIGdldE5DQXJyYXkoKSB7XHJcbiAgICAgICAgLy8gICAgIHJldHVybiAoW1xyXG4gICAgICAgIC8vICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5BRE1JTklTVFJBVElWRSwgLy9hZG1pbmlzdHJhdGl2ZVxyXG4gICAgICAgIC8vICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5DQU5DRUxfTEVUVEVSLCAvL2NhbmNlbGxhdGlvbiBsZXR0ZXJcclxuICAgICAgICAvLyAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuQ09NTUVOVFNfU1VNTUFSWV9CQVNJUywgLy9jb21tbWVudHMgb24gc3VtbWFyeSBiYXNpc1xyXG4gICAgICAgIC8vICAgICAgICAgLy8gdm0uYWxsQWN0aXZpdGllcy5EUlVHX05PVElGX0ZPUk0sIC8vIGRydWcgbm90aWZpY2F0aW9uIGZvcm1cclxuICAgICAgICAvLyAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuTUVFVElOR19NSU5VVEVTLCAvL21pbnV0ZXMgb2YgbWVldGluZyBkYXRlZFxyXG4gICAgICAgIC8vICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5QT1NUX0NMRUFSQU5DRV9EQVRBLCAvL3Bvc3QgY2xlYXJhbmNlIGRhdGFcclxuICAgICAgICAvLyAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUE9TVF9OT0NfQ0hBTkdFLCAvL1Bvc3QgTk9DIGNoYW5nZVxyXG4gICAgICAgIC8vICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5QUkVTVUJfTUVFVElOR19QS0csIC8vIHByZXN1Ym1pc3Npb24gbWVldGluZyBwYWNrYWdlXHJcbiAgICAgICAgLy8gICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBSRVNVQl9NRUVUSU5HX1JRLCAgIC8vc3VibWlzc2lvbiBNZWV0aW5nIFJlcXVlc3QgLXVzZWQgdG8gYmUgcHJlc3ViXHJcbiAgICAgICAgLy8gICAgICAgICAvLyB2bS5hbGxBY3Rpdml0aWVzLlBSSVNUSU5FX1BNLCAvLyBQcmlzdGluZSBQTVxyXG4gICAgICAgIC8vICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5TRUNPTkRfTEFOR19QTSwgLy8gU2Vjb25kIExhbmd1YWdlIFBNXHJcbiAgICAgICAgLy8gICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBSSVNUSU5FX1BNXzJMQU5HLCAvLyBwcmlzdGluZSBQTSBzZWNvbmQgbGFuZ3VhZ2VcclxuICAgICAgICAvLyAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuQ0xJTl9DTEFSSUZfUkVTUE9OU0UsIC8vUmVzcG9uc2UgdG8gY2xpbmljYWwgY2xhcmlmaWFjdGlvbiByZXF1ZXN0XHJcbiAgICAgICAgLy8gICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkVNQUlMX1JRX1JFU1BPTlNFLC8vIHJlc3BvbnNlIHRvIGVtYWlsIHJlcXVlc3RcclxuICAgICAgICAvLyAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuTEFCRUxfQ0xBUklGX1JFU1BPTlNFLCAvL1Jlc3BvbnNlIHRvIGxhYmVsbGluZyBjbGFyaWZpY2F0aW9uIHJlcXVlc3RcclxuICAgICAgICAvLyAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuTEFCRUxfUFJFQVBQUk9WQUxfMkxBTkcsIC8vU2Vjb25kIExhbmd1YWdlIExhYmVsIC0gUHJlLUFwcHJvdmFsXHJcbiAgICAgICAgLy8gICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLk5PTF9SRVNQT05TRSwgLy9SZXNwb25zZSB0byBOT0wgZGF0ZWRcclxuICAgICAgICAvLyAgICAgICAgIC8vdm0uYWxsQWN0aXZpdGllcy5OT1RJRklDQVRJT05fSU5URVJSVVBUX1NBTEUsLy9Ob3RpZmljYXRpb24gSW50ZXJydXB0aW9uIG9mIFNhbGVcclxuICAgICAgICAvLyAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUFJPQ0VTU0lOR19DTEFSSUZfUkVTUE9OU0UsIC8vUmVzcG9uc2UgdG8gcHJvY2Vzc2luZyBDbGFyaWZpY2F0aW9uIFJlcXVlc3RcclxuICAgICAgICAvLyAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUVVBTF9DTElOX0NMQVJJRl9SRVNQT05TRSwgLy9SZXNwb25zZSB0byBxdWFsaXR5IGFuZCBDbGluaWNhbCBjbGFyaWZpY2F0aW9uIFJFcXVlc3RcclxuICAgICAgICAvLyAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUVVBTF9DTEFSSUZfUkVTUE9OU0UsIC8vUmVzcG9uc2UgdG8gUXVhbGl0eSBDbGFyaWZpY2F0aW9uIHJlcXVlc3RcclxuICAgICAgICAvLyAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUkVDT05fREVDSVNfTFRSX0lOVEVOVCwvLyBSZWNvbnNpZGVyYXRpb24gb2YgRGVjaXNpb24gLSBMZXR0ZXIgb2YgSW50ZW50XHJcbiAgICAgICAgLy8gICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlJFQ09OX0RFQ0lTX1JRX1JFQ09OLCAvL1JlY29uc2lkZXJhdGlvbiBvZiBEZWNpc2lvbiAtIFJlcXVlc3QgZm9yIFJlY29uc2lkZXJhdGlvblxyXG4gICAgICAgIC8vICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5SRUNPTl9ERUNJU19PVEhFUl9JTkZPLC8vIFJlY29uc2lkZXJhdGlvbiBvZiBEZWNpc2lvbiAtIE90aGVyIEluZm9ybWF0aW9uXHJcbiAgICAgICAgLy8gICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlNDUkVFTklOR19BQ0NFUFRfUkVTUE9OU0UsIC8vcmVzcG9uc2UgdG8gc2NyZWVuaW5nIGFjY2VwdGFuY2UgbGV0dGVyXHJcbiAgICAgICAgLy8gICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlNDUkVFTklOR19DTEFSSUZfUkVTUE9OU0UsIC8vIHJlc3BvbnNlIHRvIHNjcmVlbmluZyBjbGFyaWZpY2F0aW9uIHJlcXVlc3RcclxuICAgICAgICAvLyAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuU0ROX1JFU1BPTlNFLCAvL3Jlc3BvbnNlIHRvIFNETlxyXG4gICAgICAgIC8vICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5QSE9ORV9SUV9SRVNQT05TRSwgLy9SZXNwb25zZSB0byB0ZWxlcGhvbmUgUmVxdWVzdFxyXG4gICAgICAgIC8vICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5VTlNPTElDSVRFRF9EQVRBIC8vVW5zb2xpY2l0ZWQgRGF0YVxyXG4gICAgICAgIC8vICAgICAgICAgLy92bS5hbGxBY3Rpdml0aWVzLlNFUVVFTkNFX0NMRUFOVVAgLy8gU2VxdWVuY2UgY2xlYW51cCBhcyBwZXIgZW1haWwgRkViIDE2LCAyMDE4XHJcbiAgICAgICAgLy8gICAgIF0pO1xyXG4gICAgICAgIC8vIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZ2V0TkRTQXJyYXkoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAoW1xyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5BRE1JTklTVFJBVElWRSwgLy9hZG1pbmlzdHJhdGl2ZVxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5DQU5DRUxfTEVUVEVSLCAvL2NhbmNlbGxhdGlvbiBsZXR0ZXJcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuQ09NTUVOVFNfTk9DLCAvLyBjb21tZW50cyBvbiBub3RpY2Ugb2YgZGVjaXNpb25cclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuQ09NTUVOVFNfU1VNTUFSWV9CQVNJUywgLy9jb21tbWVudHMgb24gc3VtbWFyeSBiYXNpcyxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuQ09NTUVOVFNfUkVHVUxBUlRPUllfREVDSVNJT04sIC8vY29tbW1lbnRzIG9uIENPTU1FTlRTX1JFR1VMQVJUT1JZX0RFQ0lTSU9OIGJhc2lzXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkRSVUdfTk9USUZfRk9STSwgLy8gZHJ1ZyBub3RpZmljYXRpb24gZm9ybVxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5JTklUSUFMLCAvL0luaXRpYWxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuTUVFVElOR19NSU5VVEVTLCAvL21pbnV0ZXMgb2YgbWVldGluZyBkYXRlZFxyXG4gICAgICAgICAgICAgICAgLy8gdm0uYWxsQWN0aXZpdGllcy5OT1RJRklDQVRJT05fSU5URVJSVVBUX1NBTEUsLy9Ob3RpZmljYXRpb24gSW50ZXJydXB0aW9uIG9mIFNhbGVcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUE9TVF9DTEVBUkFOQ0VfREFUQSwgLy9wb3N0IGNsZWFyYW5jZSBkYXRhXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBSRVNVQl9NRUVUSU5HX1BLRywgLy8gcHJlc3VibWlzc2lvbiBtZWV0aW5nIHBhY2thZ2VcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUFJFU1VCX01FRVRJTkdfUlEsICAgLy9zdWJtaXNzaW9uIE1lZXRpbmcgUmVxdWVzdCAtdXNlZCB0byBiZSBwcmVzdWJcclxuICAgICAgICAgICAgICAgIC8vIHZtLmFsbEFjdGl2aXRpZXMuUFJJU1RJTkVfUE0sIC8vIFByaXN0aW5lIFBNXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlNFQ09ORF9MQU5HX1BNLCAvLyBTZWNvbmQgTGFuZ3VhZ2UgUE1cclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUFJJU1RJTkVfUE1fMkxBTkcsIC8vIHByaXN0aW5lIFBNIHNlY29uZCBsYW5ndWFnZVxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5QVUJfUkVMRUFTRV9JTkZPLCAvL1B1YmxpYyBSZWxlYXNlIG9mIENsaW5pY2FsIEluZm9ybWF0aW9uXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkJFX0NMQVJJRl9SRVNQT05TRSwgLy9SZXNwb25zZSB0byBCRSBjbGFyaWZpY2F0aW9uIHJlcXVlc3QgZGF0ZWQuLlxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5DTElOX0NMQVJJRl9SRVNQT05TRSwgLy9SZXNwb25zZSB0byBjbGluaWNhbCBjbGFyaWZpYWN0aW9uIHJlcXVlc3RcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuRU1BSUxfUlFfUkVTUE9OU0UsLy8gUmVzcG9uc2UgdG8gRS1tYWlsIFJlcXVlc3RcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuTEFCRUxfQ0xBUklGX1JFU1BPTlNFLCAvL1Jlc3BvbnNlIHRvIGxhYmVsbGluZyBjbGFyaWZpY2F0aW9uIHJlcXVlc3RcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuTEFCRUxfUFJFQVBQUk9WQUxfMkxBTkcsIC8vU2Vjb25kIExhbmd1YWdlIExhYmVsIC0gUHJlLUFwcHJvdmFsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLk5PQ19SRVNQT05TRSwgLy9yZXNwb25zZSB0byBOT0MvIGMtUW5cclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuTk9EX1JFU1BPTlNFLCAvL1Jlc3BvbnNlIHRvIE5PRFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5OT05fUkVTUE9OU0UsIC8vUmVzcG9uc2UgdG8gTk9OXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBST0NFU1NJTkdfQ0xBUklGX1JFU1BPTlNFLCAvL1Jlc3BvbnNlIHRvIHByb2Nlc3NpbmcgQ2xhcmlmaWNhdGlvbiBSZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlFVQUxfQ0xJTl9DTEFSSUZfUkVTUE9OU0UsIC8vUmVzcG9uc2UgdG8gcXVhbGl0eSBhbmQgQ2xpbmljYWwgY2xhcmlmaWNhdGlvbiBSRXF1ZXN0XHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlFVQUxfQ0xBUklGX1JFU1BPTlNFLCAvL1Jlc3BvbnNlIHRvIFF1YWxpdHkgQ2xhcmlmaWNhdGlvbiByZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlJFQ09OX0RFQ0lTX0xUUl9JTlRFTlQsLy8gUmVjb25zaWRlcmF0aW9uIG9mIERlY2lzaW9uIC0gTGV0dGVyIG9mIEludGVudFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5SRUNPTl9ERUNJU19SUV9SRUNPTiwgLy9SZWNvbnNpZGVyYXRpb24gb2YgRGVjaXNpb24gLSBSZXF1ZXN0IGZvciBSZWNvbnNpZGVyYXRpb25cclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUkVDT05fREVDSVNfT1RIRVJfSU5GTywvLyBSZWNvbnNpZGVyYXRpb24gb2YgRGVjaXNpb24gLSBPdGhlciBJbmZvcm1hdGlvblxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5TQ1JFRU5JTkdfQUNDRVBUX1JFU1BPTlNFLCAvL3Jlc3BvbnNlIHRvIHNjcmVlbmluZyBhY2NlcHRhbmNlIGxldHRlclxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5TQ1JFRU5JTkdfQ0xBUklGX1JFU1BPTlNFLCAvLyByZXNwb25zZSB0byBzY3JlZW5pbmcgY2xhcmlmaWNhdGlvbiByZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlNETl9SRVNQT05TRSwgLy9yZXNwb25zZSB0byBTRE5cclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUEhPTkVfUlFfUkVTUE9OU0UsIC8vUmVzcG9uc2UgdG8gdGVsZXBob25lIFJlcXVlc3RcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuVU5TT0xJQ0lURURfREFUQSwgLy9VbnNvbGljaXRlZCBEYXRhXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkNPUlJfUEFURU5UX01FRCwgLy9Db3JyZXNwb25kZW5jZSAtIFBhdGVudGVkIE1lZGljaW5lc1xyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5BTExFR0FUSU9OX05PVElDRSwgLy9Ob3RpY2Ugb2YgYWxsZWdhdGlvblxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5GT1JNX0lWLCAvL0Zvcm0gSVZcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuRk9STV9WLCAvL0Zvcm0gVlxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5DT05TRU5UX0xUUiwgLy9Db25zZW50IExldHRlclxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5EQVRBX1BST1RFQ1RfQ09SUkVTUCwgLy9Db3JyZXNwb25kZW5jZSAtIERhdGEgUHJvdGVjdGlvblxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5OT05DTElOX0NMQVJJRl9SRVNQT05TRSAvL3Jlc3BvbnNlIHRvIE5vbi1jbGluaWNhbCBjbGFyaWZpY2F0aW9uIHJlcXVlc3RcclxuICAgICAgICAgICAgICAgIC8vdm0uYWxsQWN0aXZpdGllcy5TRVFVRU5DRV9DTEVBTlVQIC8vIFNlcXVlbmNlIGNsZWFudXAgYXMgcGVyIGVtYWlsIEZFYiAxNiwgMjAxOFxyXG4gICAgICAgICAgICBdKVxyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGdldFBTVVJDQXJyYXkoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAoW1xyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5DQU5DRUxfTEVUVEVSLCAvL2NhbmNlbGxhdGlvbiBsZXR0ZXJcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuQ09NTUVOVFNfU1VNTUFSWV9CQVNJUywgLy9jb21tbWVudHMgb24gc3VtbWFyeSBiYXNpcyBvZiBkZWNpc2lvbiAoU0JEKVxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5GT1JfUEVSSU9ELCAvL2ZvciBwZXJpb2Qgb2YgLi4uLlxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5DTElOX0NMQVJJRl9SRVNQT05TRSwgLy9SZXNwb25zZSB0byBjbGluaWNhbCBjbGFyaWZpYWN0aW9uIHJlcXVlc3RcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuRU1BSUxfUlFfUkVTUE9OU0UsLy8gcmVzcG9uc2UgdG8gZW1haWwgcmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5NRUVUSU5HX01JTlVURVMsIC8vbWludXRlcyBvZiBtZWV0aW5nIGRhdGVkXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLk1IUERfUlFfUkVTUE9OU0UsIC8vUmVzcG9uc2UgdG8gTUhQRCByZXF1ZXN0c1xyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5QUk9DRVNTSU5HX0NMQVJJRl9SRVNQT05TRSwgLy9SZXNwb25zZSB0byBwcm9jZXNzaW5nIENsYXJpZmljYXRpb24gUmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5VTlNPTElDSVRFRF9EQVRBLCAvL1Vuc29saWNpdGVkIERhdGFcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUEhPTkVfUlFfUkVTUE9OU0UvL1Jlc3BvbnNlIHRvIHRlbGVwaG9uZSBSZXF1ZXN0XHJcbiAgICAgICAgICAgIF0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZ2V0UFNVUlBWQXJyYXkoKSB7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gKFtcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuQ0FOQ0VMX0xFVFRFUiwgLy9jYW5jZWxsYXRpb24gbGV0dGVyXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkZPUl9QRVJJT0QsIC8vZm9yIHBlcmlvZCBvZiAuLi4uXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkVNQUlMX1JRX1JFU1BPTlNFLC8vIHJlc3BvbnNlIHRvIGVtYWlsIHJlcXVlc3RcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuTUVFVElOR19NSU5VVEVTLCAvL21pbnV0ZXMgb2YgbWVldGluZyBkYXRlZFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5NSFBEX1JRX1JFU1BPTlNFLCAvL1Jlc3BvbnNlIHRvIE1IUEQgcmVxdWVzdHNcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUFJPQ0VTU0lOR19DTEFSSUZfUkVTUE9OU0UsIC8vUmVzcG9uc2UgdG8gcHJvY2Vzc2luZyBDbGFyaWZpY2F0aW9uIFJlcXVlc3RcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuVU5TT0xJQ0lURURfREFUQSwgLy9VbnNvbGljaXRlZCBEYXRhXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBIT05FX1JRX1JFU1BPTlNFLCAvL1Jlc3BvbnNlIHRvIHRlbGVwaG9uZSBSZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkNMSU5fQ0xBUklGX1JFU1BPTlNFIC8vUmVzcG9uc2UgdG8gY2xpbmljYWwgY2xhcmlmaWNhdGlvbiByZXF1ZXN0XHJcbiAgICAgICAgICAgIF0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZ2V0Uk1QUFZBcnJheSgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIChbXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkNBTkNFTF9MRVRURVIsIC8vY2FuY2VsbGF0aW9uIGxldHRlclxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5DU090Uk1QLCAvL0NTT3RSTVAgKENhbmFkaWFuIFNwZWNpZmljIE9waW9pZCBSTVApXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLk1FRVRJTkdfTUlOVVRFUywgLy9taW51dGVzIG9mIG1lZXRpbmcgZGF0ZWRcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuQ0xJTl9DTEFSSUZfUkVTUE9OU0UsIC8vUmVzcG9uc2UgdG8gY2xpbmljYWwgY2xhcmlmaWNhdGlvbiByZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkVNQUlMX1JRX1JFU1BPTlNFLC8vIHJlc3BvbnNlIHRvIGVtYWlsIHJlcXVlc3RcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuTUhQRF9SUV9SRVNQT05TRSwgLy9SZXNwb25zZSB0byBNSFBEIHJlcXVlc3RzXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBST0NFU1NJTkdfQ0xBUklGX1JFU1BPTlNFLCAvL1Jlc3BvbnNlIHRvIHByb2Nlc3NpbmcgQ2xhcmlmaWNhdGlvbiBSZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBIT05FX1JRX1JFU1BPTlNFLCAvL1Jlc3BvbnNlIHRvIHRlbGVwaG9uZSBSZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlJNUF9WRVJTSU9OX0RBVEUsIC8vUk1QIHZlcmlzb25cclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUFJFU1VCX01FRVRJTkdfUlEsICAgLy9zdWJtaXNzaW9uIE1lZXRpbmcgUmVxdWVzdCAtdXNlZCB0byBiZSBwcmVzdWJcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuVU5TT0xJQ0lURURfREFUQSAvL1Vuc29saWNpdGVkIERhdGFcclxuICAgICAgICAgICAgXSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBnZXRTQU5EU0FycmF5KCkge1xyXG4gICAgICAgICAgICByZXR1cm4gKFtcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuQURNSU5JU1RSQVRJVkUsIC8vYWRtaW5pc3RyYXRpdmVcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuQ0FOQ0VMX0xFVFRFUiwgLy9jYW5jZWxsYXRpb24gbGV0dGVyXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkNPTU1FTlRTX05PQywgLy8gY29tbWVudHMgb24gbm90aWNlIG9mIGRlY2lzaW9uXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkRSVUdfTk9USUZfRk9STSwgLy8gZHJ1ZyBub3RpZmljYXRpb24gZm9ybVxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5NRUVUSU5HX01JTlVURVMsIC8vbWludXRlcyBvZiBtZWV0aW5nIGRhdGVkXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBPU1RfQ0xFQVJBTkNFX0RBVEEsIC8vcG9zdCBjbGVhcmFuY2UgZGF0YVxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5QT1NUX05PQ19DSEFOR0UsIC8vUG9zdCBOT0MgY2hhbmdlXHJcbiAgICAgICAgICAgICAgICAvLyB2bS5hbGxBY3Rpdml0aWVzLlBSSVNUSU5FX1BNLCAvLyBQcmlzdGluZSBQTVxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5TRUNPTkRfTEFOR19QTSwgLy8gU2Vjb25kIExhbmd1YWdlIFBNXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBSSVNUSU5FX1BNXzJMQU5HLCAvLyBwcmlzdGluZSBQTSBzZWNvbmQgbGFuZ3VhZ2VcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUFVCX1JFTEVBU0VfSU5GTywgLy9QdWJsaWMgUmVsZWFzZSBvZiBDbGluaWNhbCBJbmZvcm1hdGlvblxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5CRV9DTEFSSUZfUkVTUE9OU0UsIC8vUmVzcG9uc2UgdG8gQkUgY2xhcmlmaWNhdGlvbiByZXF1ZXN0IGRhdGVkLi5cclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuQ0xJTl9DTEFSSUZfUkVTUE9OU0UsIC8vUmVzcG9uc2UgdG8gY2xpbmljYWwgY2xhcmlmaWFjdGlvbiByZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkVNQUlMX1JRX1JFU1BPTlNFLC8vIHJlc3BvbnNlIHRvIGVtYWlsIHJlcXVlc3RcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuTEFCRUxfQ0xBUklGX1JFU1BPTlNFLCAvL1Jlc3BvbnNlIHRvIGxhYmVsbGluZyBjbGFyaWZpY2F0aW9uIHJlcXVlc3RcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuTEFCRUxfUFJFQVBQUk9WQUxfMkxBTkcsIC8vU2Vjb25kIExhbmd1YWdlIExhYmVsIC0gUHJlLUFwcHJvdmFsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLk5PQ19SRVNQT05TRSwgLy9yZXNwb25zZSB0byBOT0MvIGMtUW5cclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuTk9EX1JFU1BPTlNFLCAvL1Jlc3BvbnNlIHRvIE5PRFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5OT05fUkVTUE9OU0UsIC8vUmVzcG9uc2UgdG8gTk9OXHJcbiAgICAgICAgICAgICAgICAvL3ZtLmFsbEFjdGl2aXRpZXMuTk9USUZJQ0FUSU9OX0lOVEVSUlVQVF9TQUxFLC8vTm90aWZpY2F0aW9uIEludGVycnVwdGlvbiBvZiBTYWxlXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBSRVNVQl9NRUVUSU5HX1BLRywgLy9zdWJtaXNzaW9uL3ByZXN1Ym1pc3Npb24gbWVldGluZyBwYWNrYWdlXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBSRVNVQl9NRUVUSU5HX1JRLCAgIC8vc3VibWlzc2lvbiBNZWV0aW5nIFJlcXVlc3QgLXVzZWQgdG8gYmUgcHJlc3ViXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBST0NFU1NJTkdfQ0xBUklGX1JFU1BPTlNFLCAvL1Jlc3BvbnNlIHRvIHByb2Nlc3NpbmcgQ2xhcmlmaWNhdGlvbiBSZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlFVQUxfQ0xJTl9DTEFSSUZfUkVTUE9OU0UsIC8vUmVzcG9uc2UgdG8gUXVhbGl0eSAmIENsaW5pY2FsIENsYXJpZmljYXRpb24gUmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5RVUFMX0NMQVJJRl9SRVNQT05TRSwgLy9SZXNwb25zZSB0byBRdWFsaXR5IENsYXJpZmljYXRpb24gcmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5SRUNPTl9ERUNJU19MVFJfSU5URU5ULC8vIFJlY29uc2lkZXJhdGlvbiBvZiBEZWNpc2lvbiAtIExldHRlciBvZiBJbnRlbnRcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUkVDT05fREVDSVNfUlFfUkVDT04sIC8vUmVjb25zaWRlcmF0aW9uIG9mIERlY2lzaW9uIC0gUmVxdWVzdCBmb3IgUmVjb25zaWRlcmF0aW9uXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlJFQ09OX0RFQ0lTX09USEVSX0lORk8sLy8gUmVjb25zaWRlcmF0aW9uIG9mIERlY2lzaW9uIC0gT3RoZXIgSW5mb3JtYXRpb25cclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuU0NSRUVOSU5HX0FDQ0VQVF9SRVNQT05TRSwgLy9yZXNwb25zZSB0byBzY3JlZW5pbmcgYWNjZXB0YW5jZSBsZXR0ZXJcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuU0NSRUVOSU5HX0NMQVJJRl9SRVNQT05TRSwgLy8gcmVzcG9uc2UgdG8gc2NyZWVuaW5nIGNsYXJpZmljYXRpb24gcmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5TRE5fUkVTUE9OU0UsIC8vcmVzcG9uc2UgdG8gU0ROXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBIT05FX1JRX1JFU1BPTlNFLCAvL1Jlc3BvbnNlIHRvIHRlbGVwaG9uZSBSZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlVOU09MSUNJVEVEX0RBVEEsIC8vVW5zb2xpY2l0ZWQgRGF0YVxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5DT1JSX1BBVEVOVF9NRUQsIC8vQ29ycmVzcG9uZGVuY2UgLSBQYXRlbnRlZCBNZWRpY2luZXNcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuQUxMRUdBVElPTl9OT1RJQ0UsIC8vTm90aWNlIG9mIGFsbGVnYXRpb25cclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuRk9STV9JViwgLy9Gb3JtIElWXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkZPUk1fViwgLy9Gb3JtIFZcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuQ09OU0VOVF9MVFIsIC8vQ29uc2VudCBMZXR0ZXJcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuREFUQV9QUk9URUNUX0NPUlJFU1AgLy9Db3JyZXNwb25kZW5jZSAtIERhdGEgUHJvdGVjdGlvblxyXG4gICAgICAgICAgICAgICAgLy92bS5hbGxBY3Rpdml0aWVzLlNFUVVFTkNFX0NMRUFOVVAgLy8gU2VxdWVuY2UgY2xlYW51cCBhcyBwZXIgZW1haWwgRkViIDE2LCAyMDE4XHJcbiAgICAgICAgICAgIF0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZ2V0U05EU0FycmF5KCkge1xyXG4gICAgICAgICAgICByZXR1cm4gKFtcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuQURNSU5JU1RSQVRJVkUsIC8vYWRtaW5pc3RyYXRpdmVcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuQ0FOQ0VMX0xFVFRFUiwgLy9jYW5jZWxsYXRpb24gbGV0dGVyXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkNPTU1FTlRTX05PQywgLy8gY29tbWVudHMgb24gbm90aWNlIG9mIGRlY2lzaW9uXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkNPTU1FTlRTX1NVTU1BUllfQkFTSVMsIC8vY29tbW1lbnRzIG9uIHN1bW1hcnkgYmFzaXMsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkNPTU1FTlRTX1JFR1VMQVJUT1JZX0RFQ0lTSU9OLCAvL2NvbW1tZW50cyBvbiBDT01NRU5UU19SRUdVTEFSVE9SWV9ERUNJU0lPTlxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5EUlVHX05PVElGX0ZPUk0sIC8vIGRydWcgbm90aWZpY2F0aW9uIGZvcm1cclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuTUVFVElOR19NSU5VVEVTLCAvL21pbnV0ZXMgb2YgbWVldGluZyBkYXRlZFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5QQU5ERU1JQ19BUFBMLCAvL1BhbmRlbWljIGFwcGxpY2F0aW9uXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBPU1RfQ0xFQVJBTkNFX0RBVEEsIC8vcG9zdCBjbGVhcmFuY2UgZGF0YVxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5QT1NUX05PQ19DSEFOR0UsIC8vUG9zdCBOT0MgY2hhbmdlXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBSRVNVQl9NRUVUSU5HX1BLRywgLy8gc3VibWlzc2lvbiBtZWV0aW5nIHBhY2thZ2VcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUFJFU1VCX01FRVRJTkdfUlEsICAgLy9zdWJtaXNzaW9uIE1lZXRpbmcgUmVxdWVzdCAtdXNlZCB0byBiZSBwcmVzdWJcclxuICAgICAgICAgICAgICAgIC8vIHZtLmFsbEFjdGl2aXRpZXMuUFJJU1RJTkVfUE0sIC8vIFByaXN0aW5lIFBNXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlNFQ09ORF9MQU5HX1BNLCAvLyBTZWNvbmQgTGFuZ3VhZ2UgUE1cclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUFJJU1RJTkVfUE1fMkxBTkcsIC8vIHByaXN0aW5lIFBNIHNlY29uZCBsYW5ndWFnZVxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5QVUJfUkVMRUFTRV9JTkZPLCAvL1B1YmxpYyBSZWxlYXNlIG9mIENsaW5pY2FsIEluZm9ybWF0aW9uXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkJFX0NMQVJJRl9SRVNQT05TRSwgLy9SZXNwb25zZSB0byBCRSBjbGFyaWZpY2F0aW9uIHJlcXVlc3QgZGF0ZWQuLlxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5DTElOX0NMQVJJRl9SRVNQT05TRSwgLy9SZXNwb25zZSB0byBjbGluaWNhbCBjbGFyaWZpYWN0aW9uIHJlcXVlc3RcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuRU1BSUxfUlFfUkVTUE9OU0UsLy8gcmVzcG9uc2UgdG8gZW1haWwgcmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5MQUJFTF9DTEFSSUZfUkVTUE9OU0UsIC8vUmVzcG9uc2UgdG8gbGFiZWxsaW5nIGNsYXJpZmljYXRpb24gcmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5MQUJFTF9QUkVBUFBST1ZBTF8yTEFORywgLy9TZWNvbmQgTGFuZ3VhZ2UgTGFiZWwgLSBQcmUtQXBwcm92YWxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuTk9DX1JFU1BPTlNFLCAvL3Jlc3BvbnNlIHRvIE5PQy8gYy1RblxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5OT0RfUkVTUE9OU0UsIC8vUmVzcG9uc2UgdG8gTk9EXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLk5PTl9SRVNQT05TRSwgLy9SZXNwb25zZSB0byBOT05cclxuICAgICAgICAgICAgICAgIC8vIHZtLmFsbEFjdGl2aXRpZXMuTk9USUZJQ0FUSU9OX0lOVEVSUlVQVF9TQUxFLC8vTm90aWZpY2F0aW9uIEludGVycnVwdGlvbiBvZiBTYWxlXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBST0NFU1NJTkdfQ0xBUklGX1JFU1BPTlNFLCAvL1Jlc3BvbnNlIHRvIHByb2Nlc3NpbmcgQ2xhcmlmaWNhdGlvbiBSZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlFVQUxfQ0xJTl9DTEFSSUZfUkVTUE9OU0UsIC8vUmVzcG9uc2UgdG8gcXVhbGl0eSBhbmQgQ2xpbmljYWwgY2xhcmlmaWNhdGlvbiBSRXF1ZXN0XHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlFVQUxfQ0xBUklGX1JFU1BPTlNFLCAvL1Jlc3BvbnNlIHRvIFF1YWxpdHkgQ2xhcmlmaWNhdGlvbiByZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlJFQ09OX0RFQ0lTX0xUUl9JTlRFTlQsLy8gUmVjb25zaWRlcmF0aW9uIG9mIERlY2lzaW9uIC0gTGV0dGVyIG9mIEludGVudFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5SRUNPTl9ERUNJU19SUV9SRUNPTiwgLy9SZWNvbnNpZGVyYXRpb24gb2YgRGVjaXNpb24gLSBSZXF1ZXN0IGZvciBSZWNvbnNpZGVyYXRpb25cclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUkVDT05fREVDSVNfT1RIRVJfSU5GTywvLyBSZWNvbnNpZGVyYXRpb24gb2YgRGVjaXNpb24gLSBPdGhlciBJbmZvcm1hdGlvblxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5TQ1JFRU5JTkdfQUNDRVBUX1JFU1BPTlNFLCAvL3Jlc3BvbnNlIHRvIHNjcmVlbmluZyBhY2NlcHRhbmNlIGxldHRlclxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5TQ1JFRU5JTkdfQ0xBUklGX1JFU1BPTlNFLCAvLyByZXNwb25zZSB0byBzY3JlZW5pbmcgY2xhcmlmaWNhdGlvbiByZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlNETl9SRVNQT05TRSwgLy9yZXNwb25zZSB0byBTRE5cclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUEhPTkVfUlFfUkVTUE9OU0UsIC8vUmVzcG9uc2UgdG8gdGVsZXBob25lIFJlcXVlc3RcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuVU5TT0xJQ0lURURfREFUQSwgLy9VbnNvbGljaXRlZCBEYXRhXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkNPUlJfUEFURU5UX01FRCwgLy9Db3JyZXNwb25kZW5jZSAtIFBhdGVudGVkIE1lZGljaW5lc1xyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5BTExFR0FUSU9OX05PVElDRSwgLy9Ob3RpY2Ugb2YgYWxsZWdhdGlvblxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5GT1JNX0lWLCAvL0Zvcm0gSVZcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuRk9STV9WLCAvL0Zvcm0gVlxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5DT05TRU5UX0xUUiwgLy9Db25zZW50IExldHRlclxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5EQVRBX1BST1RFQ1RfQ09SUkVTUCwgLy9Db3JyZXNwb25kZW5jZSAtIERhdGEgUHJvdGVjdGlvblxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5OT05DTElOX0NMQVJJRl9SRVNQT05TRSAvL3Jlc3BvbnNlIHRvIE5vbmNsaW5pY2FsIGNsYXJpZmljYXRpb24gcmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgLy92bS5hbGxBY3Rpdml0aWVzLlNFUVVFTkNFX0NMRUFOVVAgLy8gU2VxdWVuY2UgY2xlYW51cCBhcyBwZXIgZW1haWwgRkViIDE2LCAyMDE4XHJcbiAgICAgICAgICAgIF0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZ2V0U05EU0NBcnJheSgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIChbXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkNBTkNFTF9MRVRURVIsIC8vY2FuY2VsbGF0aW9uIGxldHRlclxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5DT01NRU5UU19OT0MsIC8vIGNvbW1lbnRzIG9uIG5vdGljZSBvZiBkZWNpc2lvblxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5DT01NRU5UU19TVU1NQVJZX0JBU0lTLCAvL2NvbW1tZW50cyBvbiBzdW1tYXJ5IGJhc2lzIG9mIGRlY2lzaW9uIChTQkQpXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkRSVUdfTk9USUZfRk9STSwgLy8gZHJ1ZyBub3RpZmljYXRpb24gZm9ybVxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5MQUJFTF9QUkVBUFBST1ZBTF8yTEFORywgLy9TZWNvbmQgTGFuZ3VhZ2UgTGFiZWwgLSBQcmUtQXBwcm92YWxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuTUVFVElOR19NSU5VVEVTLCAvL21pbnV0ZXMgb2YgbWVldGluZyBkYXRlZFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5QT1NUX05PQ19DSEFOR0UsIC8vUG9zdCBOT0MgY2hhbmdlXHJcbiAgICAgICAgICAgICAgICAvLyB2bS5hbGxBY3Rpdml0aWVzLlBSSVNUSU5FX1BNLCAvLyBQcmlzdGluZSBQTVxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5TRUNPTkRfTEFOR19QTSwgLy8gU2Vjb25kIExhbmd1YWdlIFBNXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBSSVNUSU5FX1BNXzJMQU5HLCAvLyBwcmlzdGluZSBQTSBzZWNvbmQgbGFuZ3VhZ2VcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuQ0xJTl9DTEFSSUZfUkVTUE9OU0UsIC8vUmVzcG9uc2UgdG8gY2xpbmljYWwgY2xhcmlmaWFjdGlvbiByZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkVNQUlMX1JRX1JFU1BPTlNFLC8vIHJlc3BvbnNlIHRvIGVtYWlsIHJlcXVlc3RcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuTEFCRUxfQ0xBUklGX1JFU1BPTlNFLCAvL1Jlc3BvbnNlIHRvIGxhYmVsbGluZyBjbGFyaWZpY2F0aW9uIHJlcXVlc3RcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuTk9DX1JFU1BPTlNFLCAvL3Jlc3BvbnNlIHRvIE5PQy8gYy1RblxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5OT0RfUkVTUE9OU0UsIC8vUmVzcG9uc2UgdG8gTk9EXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLk5PTl9SRVNQT05TRSwgLy9SZXNwb25zZSB0byBOT05cclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUFJPQ0VTU0lOR19DTEFSSUZfUkVTUE9OU0UsIC8vUmVzcG9uc2UgdG8gcHJvY2Vzc2luZyBDbGFyaWZpY2F0aW9uIFJlcXVlc3RcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUEhPTkVfUlFfUkVTUE9OU0UsIC8vUmVzcG9uc2UgdG8gdGVsZXBob25lIFJlcXVlc3RcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUE9TVF9DTEVBUkFOQ0VfREFUQSwgLy9wb3N0IGNsZWFyYW5jZSBkYXRhXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlJFQ09OX0RFQ0lTX0xUUl9JTlRFTlQsLy8gUmVjb25zaWRlcmF0aW9uIG9mIERlY2lzaW9uIC0gTGV0dGVyIG9mIEludGVudFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5SRUNPTl9ERUNJU19SUV9SRUNPTiwgLy9SZWNvbnNpZGVyYXRpb24gb2YgRGVjaXNpb24gLSBSZXF1ZXN0IGZvciBSZWNvbnNpZGVyYXRpb25cclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUkVDT05fREVDSVNfT1RIRVJfSU5GTywvLyBSZWNvbnNpZGVyYXRpb24gb2YgRGVjaXNpb24gLSBPdGhlciBJbmZvcm1hdGlvblxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5TQ1JFRU5JTkdfQUNDRVBUX1JFU1BPTlNFLCAvL3Jlc3BvbnNlIHRvIHNjcmVlbmluZyBhY2NlcHRhbmNlIGxldHRlclxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5TQ1JFRU5JTkdfQ0xBUklGX1JFU1BPTlNFLCAvLyByZXNwb25zZSB0byBzY3JlZW5pbmcgY2xhcmlmaWNhdGlvbiByZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlNETl9SRVNQT05TRSwgLy9yZXNwb25zZSB0byBTRE5cclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuQ09SUl9QQVRFTlRfTUVELCAvL0NvcnJlc3BvbmRlbmNlIC0gUGF0ZW50ZWQgTWVkaWNpbmVzXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkFMTEVHQVRJT05fTk9USUNFLCAvL05vdGljZSBvZiBhbGxlZ2F0aW9uXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkZPUk1fSVYsIC8vRm9ybSBJVlxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5GT1JNX1YsIC8vRm9ybSBWXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkNPTlNFTlRfTFRSLCAvL0NvbnNlbnQgTGV0dGVyXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlVOU09MSUNJVEVEX0RBVEEsIC8vVW5zb2xpY2l0ZWQgRGF0YVxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5EQVRBX1BST1RFQ1RfQ09SUkVTUCAvL0NvcnJlc3BvbmRlbmNlIC0gRGF0YSBQcm90ZWN0aW9uXHJcbiAgICAgICAgICAgICAgICAvL3ZtLmFsbEFjdGl2aXRpZXMuU0VRVUVOQ0VfQ0xFQU5VUCAvLyBTZXF1ZW5jZSBjbGVhbnVwIGFzIHBlciBlbWFpbCBGRWIgMTYsIDIwMThcclxuICAgICAgICAgICAgXSk7XHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZ2V0VURQVkFycmF5KCkge1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIChbXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkJFTkVGSVRfUklTS19BU1NFU1MsIC8vYmVuZWZpdCByaXNrIGFzc2Vzc21lbnRcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuQ0FOQ0VMX0xFVFRFUiwgLy9jYW5jZWxsYXRpb24gbGV0dGVyXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLk5PVElGSUNBVElPTl9DSEFOR0UsIC8vbm90aWZpY2FpdG9uIG9mIGNoYW5nZSBpbiBiZW5lZml0IHByb2ZpbGVcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUE9TVF9NQVJLRVRfU1VSViwgLy8gcG9zdCBtYXJrZXRpbmcgc3VydmVpbGxhbmNlXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkVNQUlMX1JRX1JFU1BPTlNFLC8vIHJlc3BvbnNlIHRvIGVtYWlsIHJlcXVlc3RcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuTUVFVElOR19NSU5VVEVTLCAvL21pbnV0ZXMgb2YgbWVldGluZyBkYXRlZFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5NSFBEX1JRX1JFU1BPTlNFLCAvL1Jlc3BvbnNlIHRvIE1IUEQgcmVxdWVzdHNcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUFJFU1VCX01FRVRJTkdfUEtHLCAvL3N1Ym1pc3Npb24vcHJlc3VibWlzc2lvbiBtZWV0aW5nIHBhY2thZ2VcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUFJFU1VCX01FRVRJTkdfUlEsICAgLy9zdWJtaXNzaW9uIE1lZXRpbmcgUmVxdWVzdCAtdXNlZCB0byBiZSBwcmVzdWJcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUFJPQ0VTU0lOR19DTEFSSUZfUkVTUE9OU0UsIC8vUmVzcG9uc2UgdG8gcHJvY2Vzc2luZyBDbGFyaWZpY2F0aW9uIFJlcXVlc3RcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUEhPTkVfUlFfUkVTUE9OU0UsIC8vUmVzcG9uc2UgdG8gdGVsZXBob25lIFJlcXVlc3RcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUklTS19DT01NVU5fRE9DLCAvL1Jpc2sgY29tbXVuaWNhdGlvbiBkb2N1bWVudFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5VTlNPTElDSVRFRF9EQVRBIC8vVW5zb2xpY2l0ZWQgRGF0YVxyXG4gICAgICAgICAgICAgICAgLy8gdm0uYWxsQWN0aXZpdGllcy5TSUdOQUxfV09SS19VUCAvL1NpZ25hbCBXb3JrIHVwXHJcbiAgICAgICAgICAgIF0pXHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZ2V0VURSQUFycmF5KCkge1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIChbXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkNBTkNFTF9MRVRURVIsIC8vY2FuY2VsbGF0aW9uIGxldHRlclxyXG4gICAgICAgICAgICAgICAgLy92bS5hbGxBY3Rpdml0aWVzLkNMQVJJRl9SRVNQT05TRSwgLy9SZXNwb25zZSB0byBjbGFyaWZpY2F0aW9uIHJlcXVlc3RcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuRElOX0RJU0NPTlRJTlVFRCwgLy8gZGluIGRpc2NvbnRpbnVlZFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5BRFZJU0VNRU5UX0xFVFRFUl9SRVNQT05TRSwgLy9SRXNwb3NlIHRvIEFkdmlzZW1lbnQgTGV0dGVyIGRhdGVkXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkVNQUlMX1JRX1JFU1BPTlNFLC8vIHJlc3BvbnNlIHRvIGVtYWlsIHJlcXVlc3RcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuTUVFVElOR19NSU5VVEVTLCAvL21pbnV0ZXMgb2YgbWVldGluZyBkYXRlZFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5QUkVTVUJfTUVFVElOR19QS0csIC8vc3VibWlzc2lvbi9wcmVzdWJtaXNzaW9uIG1lZXRpbmcgcGFja2FnZVxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5QUkVTVUJfTUVFVElOR19SUSwgICAvL3N1Ym1pc3Npb24gTWVldGluZyBSZXF1ZXN0IC11c2VkIHRvIGJlIHByZXN1YlxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5QUk9DRVNTSU5HX0NMQVJJRl9SRVNQT05TRSwgLy9SZXNwb25zZSB0byBwcm9jZXNzaW5nIENsYXJpZmljYXRpb24gUmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5QSE9ORV9SUV9SRVNQT05TRSwgLy9SZXNwb25zZSB0byB0ZWxlcGhvbmUgUmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5OT1RJRklDQVRJT05fSU5URVJSVVBUX1NBTEUsIC8vTm90aWZpY2F0aW9uIG9mIGludGVycnVwdXRpb25zIG9mIHNhbGUsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlVOU09MSUNJVEVEX0RBVEEsIC8vVW5zb2xpY2l0ZWQgRGF0YVxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5TRVFVRU5DRV9DTEVBTlVQIC8vIFNlcXVlbmNlIGNsZWFudXAgYXMgcGVyIGVtYWlsIEZFYiAxNiwgMjAxOFxyXG4gICAgICAgICAgICBdKVxyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGdldENvbnN1bHRBcnJheSgpIHtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiAoW1xyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5QQU5ERU1JQ19BUFBMIC8vcGFuZGVtaWMgYXBwbGljYWl0b24sXHJcbiAgICAgICAgICAgIF0pXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBfZ2V0TVBOQ0FycmF5KCkge1xyXG4gICAgICAgICAgICByZXR1cm4gKFtcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuQ0FOQ0VMX0xFVFRFUiwgLy9jYW5jZWxsYXRpb24gbGV0dGVyXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLk1FRVRJTkdfTUlOVVRFUyxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuV1JJVFRFTl9DT05TVUxUX1JFUSwgLy9SZXF1ZXN0IGZvciBXcml0dGVuIENvbnN1bHRhdGlvbixcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuRU1BSUxfUlFfUkVTUE9OU0UsLy8gcmVzcG9uc2UgdG8gZW1haWwgcmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5QUk9DRVNTSU5HX0NMQVJJRl9SRVNQT05TRSwgLy9SZXNwb25zZSB0byBwcm9jZXNzaW5nIENsYXJpZmljYXRpb24gUmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5QSE9ORV9SUV9SRVNQT05TRSwgLy9SZXNwb25zZSB0byB0ZWxlcGhvbmUgUmVxdWVzdCxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUFJFU1VCX01FRVRJTkdfUEtHLCAvL3N1Ym1pc3Npb24gTWVldGluZyBQYWNrYWdlXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBSRVNVQl9NRUVUSU5HX1JRLCAgIC8vUHJlLXN1Ym1pc3Npb24gTWVldGluZyBSZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlVOU09MSUNJVEVEX0RBVEEgLy9VbnNvbGljaXRlZCBJbmZvcm1hdGlvblxyXG4gICAgICAgICAgICBdKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIF9nZXRNUE5EU0FycmF5KCkge1xyXG4gICAgICAgICAgICByZXR1cm4gKFtcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuQ0FOQ0VMX0xFVFRFUiwgLy9jYW5jZWxsYXRpb24gbGV0dGVyXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLk1FRVRJTkdfTUlOVVRFUyxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuV1JJVFRFTl9DT05TVUxUX1JFUSwgLy9SZXF1ZXN0IGZvciBXcml0dGVuIENvbnN1bHRhdGlvbixcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuRU1BSUxfUlFfUkVTUE9OU0UsLy8gcmVzcG9uc2UgdG8gZW1haWwgcmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5QUk9DRVNTSU5HX0NMQVJJRl9SRVNQT05TRSwgLy9SZXNwb25zZSB0byBwcm9jZXNzaW5nIENsYXJpZmljYXRpb24gUmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5QSE9ORV9SUV9SRVNQT05TRSwgLy9SZXNwb25zZSB0byB0ZWxlcGhvbmUgUmVxdWVzdCxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUFJFU1VCX01FRVRJTkdfUEtHLCAvL3VibWlzc2lvbiBNZWV0aW5nIFBhY2thZ2VcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUFJFU1VCX01FRVRJTkdfUlEgICAvL1ByZS1zdWJtaXNzaW9uIE1lZXRpbmcgUmVxdWVzdFxyXG4gICAgICAgICAgICBdKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIF9nZXRNUFNORFNBcnJheSgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIChbXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkNBTkNFTF9MRVRURVIsIC8vY2FuY2VsbGF0aW9uIGxldHRlclxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5NRUVUSU5HX01JTlVURVMsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLldSSVRURU5fQ09OU1VMVF9SRVEsIC8vUmVxdWVzdCBmb3IgV3JpdHRlbiBDb25zdWx0YXRpb24sXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkVNQUlMX1JRX1JFU1BPTlNFLC8vIHJlc3BvbnNlIHRvIGVtYWlsIHJlcXVlc3RcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUFJPQ0VTU0lOR19DTEFSSUZfUkVTUE9OU0UsIC8vUmVzcG9uc2UgdG8gcHJvY2Vzc2luZyBDbGFyaWZpY2F0aW9uIFJlcXVlc3RcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUEhPTkVfUlFfUkVTUE9OU0UsIC8vUmVzcG9uc2UgdG8gdGVsZXBob25lIFJlcXVlc3RcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUFJFU1VCX01FRVRJTkdfUEtHLCAvL3N1Ym1pc3Npb24gTWVldGluZyBQYWNrYWdlXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBSRVNVQl9NRUVUSU5HX1JRICAgLy9zdWJtaXNzaW9uIE1lZXRpbmcgUmVxdWVzdFxyXG4gICAgICAgICAgICBdKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIF9nZXRQQU5EQXJyYXkoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAoW1xyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5CRV9DTEFSSUZfUkVTUE9OU0UsIC8vUmVzcG9uc2UgdG8gQkUgY2xhcmlmaWNhdGlvbiByZXF1ZXN0IGRhdGVkLi5cclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuQ0FOQ0VMX0xFVFRFUiwgLy9jYW5jZWxsYXRpb24gbGV0dGVyXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkNMSU5fQ0xBUklGX1JFU1BPTlNFLCAvL1Jlc3BvbnNlIHRvIGNsaW5pY2FsICBDbGFyaWZpY2F0aW9uIHJlcXVlc3RcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuQ09NTUVOVFNfTk9DLCAvLyBjb21tZW50cyBvbiBub3RpY2Ugb2YgZGVjaXNpb25cclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuRFJVR19OT1RJRl9GT1JNLCAvLyBkcnVnIG5vdGlmaWNhdGlvbiBmb3JtXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkVNQUlMX1JRX1JFU1BPTlNFLC8vIHJlc3BvbnNlIHRvIGVtYWlsIHJlcXVlc3RcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuSU5JVElBTCwgLy9Jbml0aWFsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkxBQkVMX1BSRUFQUFJPVkFMXzJMQU5HLCAvL1NlY29uZCBMYW5ndWFnZSBMYWJlbCAtIFByZS1BcHByb3ZhbFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5MQUJFTF9DTEFSSUZfUkVTUE9OU0UsIC8vUmVzcG9uc2UgdG8gbGFiZWxsaW5nIGNsYXJpZmljYXRpb24gcmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5NRUVUSU5HX01JTlVURVMsIC8vbWludXRlcyBvZiBtZWV0aW5nIGRhdGVkXHJcbiAgICAgICAgICAgICAgICAvL3ZtLmFsbEFjdGl2aXRpZXMuTk9USUZJQ0FUSU9OX0lOVEVSUlVQVF9TQUxFLC8vTm90aWZpY2F0aW9uIEludGVycnVwdGlvbiBvZiBTYWxlXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBPU1RfQ0xFQVJBTkNFX0RBVEEsIC8vcG9zdCBjbGVhcmFuY2UgZGF0YVxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5QUk9DRVNTSU5HX0NMQVJJRl9SRVNQT05TRSwgLy9SZXNwb25zZSB0byBwcm9jZXNzaW5nIENsYXJpZmljYXRpb24gUmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5QQU5ERU1JQ19BUFBMLCAvL1BhbmRlbWljIGFwcGxpY2F0aW9uXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBIT05FX1JRX1JFU1BPTlNFLCAvL1Jlc3BvbnNlIHRvIHRlbGVwaG9uZSBSZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlNFQ09ORF9MQU5HX1BNLCAvLyBTZWNvbmQgTGFuZ3VhZ2UgUE1cclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUFJJU1RJTkVfUE1fMkxBTkcsIC8vIHByaXN0aW5lIFBNIHNlY29uZCBsYW5ndWFnZVxyXG4gICAgICAgICAgICAgICAgLy8gdm0uYWxsQWN0aXZpdGllcy5QUklTVElORV9QTSwgLy8gUHJpc3RpbmUgUE1cclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUkVDT05fREVDSVNfTFRSX0lOVEVOVCwvLyBSZWNvbnNpZGVyYXRpb24gb2YgRGVjaXNpb24gLSBMZXR0ZXIgb2YgSW50ZW50XHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlJFQ09OX0RFQ0lTX1JRX1JFQ09OLCAvL1JlY29uc2lkZXJhdGlvbiBvZiBEZWNpc2lvbiAtIFJlcXVlc3QgZm9yIFJlY29uc2lkZXJhdGlvblxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5SRUNPTl9ERUNJU19PVEhFUl9JTkZPLC8vIFJlY29uc2lkZXJhdGlvbiBvZiBEZWNpc2lvbiAtIE90aGVyIEluZm9ybWF0aW9uXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlFVQUxfQ0xBUklGX1JFU1BPTlNFLCAvL1Jlc3BvbnNlIHRvIFF1YWxpdHkgQ2xhcmlmaWNhdGlvbiByZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlFVQUxfQ0xJTl9DTEFSSUZfUkVTUE9OU0UsIC8vUmVzcG9uc2UgdG8gcXVhbGl0eSBhbmQgQ2xpbmljYWwgY2xhcmlmaWNhdGlvbiBSRXF1ZXN0XHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlNDUkVFTklOR19BQ0NFUFRfUkVTUE9OU0UsIC8vcmVzcG9uc2UgdG8gc2NyZWVuaW5nIGFjY2VwdGFuY2UgbGV0dGVyXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlNDUkVFTklOR19DTEFSSUZfUkVTUE9OU0UsIC8vIHJlc3BvbnNlIHRvIHNjcmVlbmluZyBjbGFyaWZpY2F0aW9uIHJlcXVlc3RcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuU0ROX1JFU1BPTlNFLCAvL3Jlc3BvbnNlIHRvIFNETlxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5OT0NfUkVTUE9OU0UsIC8vcmVzcG9uc2UgdG8gTk9DLyBjLVFuXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLk5PRF9SRVNQT05TRSwgLy9SZXNwb25zZSB0byBOT0RcIlxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5OT05fUkVTUE9OU0UsIC8vUmVzcG9uc2UgdG8gTk9OXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlVOU09MSUNJVEVEX0RBVEEsIC8vVW5zb2xpY2l0ZWQgRGF0YVxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5DT1JSX1BBVEVOVF9NRUQsIC8vQ29ycmVzcG9uZGVuY2UgLSBQYXRlbnRlZCBNZWRpY2luZXNcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuQUxMRUdBVElPTl9OT1RJQ0UsIC8vTm90aWNlIG9mIGFsbGVnYXRpb25cclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuRk9STV9JViwgLy9Gb3JtIElWXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkZPUk1fViwgLy9Gb3JtIFZcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuQ09OU0VOVF9MVFIsIC8vQ29uc2VudCBMZXR0ZXJcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuREFUQV9QUk9URUNUX0NPUlJFU1AsIC8vQ29ycmVzcG9uZGVuY2UgLSBEYXRhIFByb3RlY3Rpb25cclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuTk9OQ0xJTl9DTEFSSUZfUkVTUE9OU0UgLy9yZXNwb25zZSB0byBOb25jbGluaWNhbCBjbGFyaWZpY2F0aW9uIHJlcXVlc3RcclxuICAgICAgICAgICAgICAgIC8vdm0uYWxsQWN0aXZpdGllcy5TRVFVRU5DRV9DTEVBTlVQIC8vIFNlcXVlbmNlIGNsZWFudXAgYXMgcGVyIGVtYWlsIEZFYiAxNiwgMjAxOFxyXG4gICAgICAgICAgICBdKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIF9nZXRQQlJFUkNBcnJheSgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIChbXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkNBTkNFTF9MRVRURVIsIC8vY2FuY2VsbGF0aW9uIGxldHRlclxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5DTElOX0NMQVJJRl9SRVNQT05TRSwgLy9SZXNwb25zZSB0byBjbGluaWNhbCBjbGFyaWZhY3Rpb24gcmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5DT01NRU5UU19TVU1NQVJZX0JBU0lTLCAvL2NvbW1tZW50cyBvbiBzdW1tYXJ5IGJhc2lzIG9mIGRlY2lzaW9uIChTQkQpXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkVNQUlMX1JRX1JFU1BPTlNFLC8vIHJlc3BvbnNlIHRvIGVtYWlsIHJlcXVlc3RcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuRk9SX1BFUklPRCwgLy9mb3IgcGVyaW9kIG9mIC4uLi5cclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuTUVFVElOR19NSU5VVEVTLCAvL21pbnV0ZXMgb2YgbWVldGluZyBkYXRlZFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5NSFBEX1JRX1JFU1BPTlNFLCAvL1Jlc3BvbnNlIHRvIE1IUEQgcmVxdWVzdHNcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUFJPQ0VTU0lOR19DTEFSSUZfUkVTUE9OU0UsIC8vUmVzcG9uc2UgdG8gcHJvY2Vzc2luZyBDbGFyaWZpY2F0aW9uIFJlcXVlc3RcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuVU5TT0xJQ0lURURfREFUQSwgLy9VbnNvbGljaXRlZCBEYXRhXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBIT05FX1JRX1JFU1BPTlNFIC8vUmVzcG9uc2UgdG8gdGVsZXBob25lIFJlcXVlc3RcclxuICAgICAgICAgICAgXSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBfZ2V0UEJSRVJQVkFycmF5KCkge1xyXG4gICAgICAgICAgICByZXR1cm4gKFtcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuQ0FOQ0VMX0xFVFRFUiwgLy9jYW5jZWxsYXRpb24gbGV0dGVyXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkVNQUlMX1JRX1JFU1BPTlNFLC8vIHJlc3BvbnNlIHRvIGVtYWlsIHJlcXVlc3RcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuRk9SX1BFUklPRCwgLy9mb3IgcGVyaW9kIG9mIC4uLi5cclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuTUVFVElOR19NSU5VVEVTLCAvL21pbnV0ZXMgb2YgbWVldGluZyBkYXRlZFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5NSFBEX1JRX1JFU1BPTlNFLCAvL1Jlc3BvbnNlIHRvIE1IUEQgcmVxdWVzdHNcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUFJPQ0VTU0lOR19DTEFSSUZfUkVTUE9OU0UsIC8vUmVzcG9uc2UgdG8gcHJvY2Vzc2luZyBDbGFyaWZpY2F0aW9uIFJlcXVlc3RcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuVU5TT0xJQ0lURURfREFUQSwgLy9VbnNvbGljaXRlZCBEYXRhXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBIT05FX1JRX1JFU1BPTlNFLCAvL1Jlc3BvbnNlIHRvIHRlbGVwaG9uZSBSZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkNMSU5fQ0xBUklGX1JFU1BPTlNFIC8vUmVzcG9uc2UgdG8gY2xpbmljYWwgY2xhcmlmaWNhdGlvbiByZXF1ZXN0XHJcbiAgICAgICAgICAgIF0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gX2dldFBSTkRTQXJyYXkoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAoW1xyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5DQU5DRUxfTEVUVEVSLCAvL2NhbmNlbGxhdGlvbiBsZXR0ZXJcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuQ0xJTl9DTEFSSUZfUkVTUE9OU0UsIC8vUmVzcG9uc2UgdG8gY2xpbmljYWwgY2xhcmlmYWN0aW9uIHJlcXVlc3RcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuRU1BSUxfUlFfUkVTUE9OU0UsLy8gcmVzcG9uc2UgdG8gZW1haWwgcmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5NRUVUSU5HX01JTlVURVMsIC8vbWludXRlcyBvZiBtZWV0aW5nIGRhdGVkXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBSSU9SSVRZX1JFVklFV19SUSwgLy8gUHJpb3JpdHkgcmV3aWV3IHJlcXVlc3RcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUFJPQ0VTU0lOR19DTEFSSUZfUkVTUE9OU0UsIC8vUmVzcG9uc2UgdG8gcHJvY2Vzc2luZyBDbGFyaWZpY2F0aW9uIFJlcXVlc3RcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUEhPTkVfUlFfUkVTUE9OU0UsIC8vUmVzcG9uc2UgdG8gdGVsZXBob25lIFJlcXVlc3RcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUkVDT05fREVDSVNfTFRSX0lOVEVOVCwvLyBSZWNvbnNpZGVyYXRpb24gb2YgRGVjaXNpb24gLSBMZXR0ZXIgb2YgSW50ZW50XHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlJFQ09OX0RFQ0lTX1JRX1JFQ09OLCAvL1JlY29uc2lkZXJhdGlvbiBvZiBEZWNpc2lvbiAtIFJlcXVlc3QgZm9yIFJlY29uc2lkZXJhdGlvblxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5VTlNPTElDSVRFRF9EQVRBLCAvL1Vuc29saWNpdGVkIERhdGFcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUkVDT05fREVDSVNfT1RIRVJfSU5GTy8vIFJlY29uc2lkZXJhdGlvbiBvZiBEZWNpc2lvbiAtIE90aGVyIEluZm9ybWF0aW9uXHJcbiAgICAgICAgICAgIF0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gX2dldFBSU05EU0FycmF5KCkge1xyXG4gICAgICAgICAgICByZXR1cm4gKFtcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuQ0FOQ0VMX0xFVFRFUiwgLy9jYW5jZWxsYXRpb24gbGV0dGVyXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkNMSU5fQ0xBUklGX1JFU1BPTlNFLCAvL1Jlc3BvbnNlIHRvIGNsaW5pY2FsIGNsYXJpZmFjdGlvbiByZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkVNQUlMX1JRX1JFU1BPTlNFLC8vIHJlc3BvbnNlIHRvIGVtYWlsIHJlcXVlc3RcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuTUVFVElOR19NSU5VVEVTLCAvL21pbnV0ZXMgb2YgbWVldGluZyBkYXRlZFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5QUklPUklUWV9SRVZJRVdfUlEsIC8vIFByaW9yaXR5IHJld2lldyByZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBST0NFU1NJTkdfQ0xBUklGX1JFU1BPTlNFLCAvL1Jlc3BvbnNlIHRvIHByb2Nlc3NpbmcgQ2xhcmlmaWNhdGlvbiBSZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBIT05FX1JRX1JFU1BPTlNFLCAvL1Jlc3BvbnNlIHRvIHRlbGVwaG9uZSBSZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlJFQ09OX0RFQ0lTX0xUUl9JTlRFTlQsLy8gUmVjb25zaWRlcmF0aW9uIG9mIERlY2lzaW9uIC0gTGV0dGVyIG9mIEludGVudFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5SRUNPTl9ERUNJU19SUV9SRUNPTiwgLy9SZWNvbnNpZGVyYXRpb24gb2YgRGVjaXNpb24gLSBSZXF1ZXN0IGZvciBSZWNvbnNpZGVyYXRpb25cclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuVU5TT0xJQ0lURURfREFUQSwgLy9VbnNvbGljaXRlZCBEYXRhXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlJFQ09OX0RFQ0lTX09USEVSX0lORk8vLyBSZWNvbnNpZGVyYXRpb24gb2YgRGVjaXNpb24gLSBPdGhlciBJbmZvcm1hdGlvblxyXG4gICAgICAgICAgICBdKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGdldFlCUFJBcnJheSgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIChbXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkNBTkNFTF9MRVRURVIsIC8vY2FuY2VsbGF0aW9uIGxldHRlclxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5GT1JfUEVSSU9ELCAvL2ZvciBwZXJpb2Qgb2YgLi4uLlxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5FTUFJTF9SUV9SRVNQT05TRSwvLyByZXNwb25zZSB0byBlbWFpbCByZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLk1FRVRJTkdfTUlOVVRFUywgLy9taW51dGVzIG9mIG1lZXRpbmcgZGF0ZWRcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUFJPQ0VTU0lOR19DTEFSSUZfUkVTUE9OU0UsIC8vUmVzcG9uc2UgdG8gcHJvY2Vzc2luZyBDbGFyaWZpY2F0aW9uIFJlcXVlc3RcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuVU5TT0xJQ0lURURfREFUQSwgLy9VbnNvbGljaXRlZCBEYXRhXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlFVQUxfQ0xBUklGX1JFU1BPTlNFLCAvL1Jlc3BvbnNlIHRvIFF1YWxpdHkgQ2xhcmlmaWNhdGlvbiByZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBIT05FX1JRX1JFU1BPTlNFIC8vUmVzcG9uc2UgdG8gdGVsZXBob25lIFJlcXVlc3RcclxuICAgICAgICAgICAgXSk7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZ2V0RFN1ckFycmF5KCkge1xyXG4gICAgICAgICAgICByZXR1cm4gKFtcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuQ0FOQ0VMX0xFVFRFUiwgLy9jYW5jZWxsYXRpb24gbGV0dGVyXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkNMSU5fQ0xBUklGX1JFU1BPTlNFLCAvL1Jlc3BvbnNlIHRvIGNsaW5pY2FsICBDbGFyaWZpY2F0aW9uIHJlcXVlc3RcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuRk9SX1BFUklPRCwgLy9mb3IgcGVyaW9kIG9mIC4uLi5cclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuRU1BSUxfUlFfUkVTUE9OU0UsLy8gcmVzcG9uc2UgdG8gZW1haWwgcmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5NRUVUSU5HX01JTlVURVMsIC8vbWludXRlcyBvZiBtZWV0aW5nIGRhdGVkXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBST0NFU1NJTkdfQ0xBUklGX1JFU1BPTlNFLCAvL1Jlc3BvbnNlIHRvIHByb2Nlc3NpbmcgQ2xhcmlmaWNhdGlvbiBSZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlVOU09MSUNJVEVEX0RBVEEsIC8vVW5zb2xpY2l0ZWQgRGF0YVxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5QSE9ORV9SUV9SRVNQT05TRSAvL1Jlc3BvbnNlIHRvIHRlbGVwaG9uZSBSZXF1ZXN0XHJcbiAgICAgICAgICAgIF0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZ2V0RElOQUFycmF5KCkge1xyXG4gICAgICAgICAgICByZXR1cm4gKFtcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuQURNSU5JU1RSQVRJVkUsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkNBTkNFTF9MRVRURVIsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkNIQU5HRV9UT19ESU4sXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkRSVUdfTk9USUZfRk9STSxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuSU5JVElBTCxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuTUVFVElOR19NSU5VVEVTLFxyXG4gICAgICAgICAgICAgICAgLy92bS5hbGxBY3Rpdml0aWVzLk5PVElGSUNBVElPTl9JTlRFUlJVUFRfU0FMRSxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUE9TVF9DTEVBUkFOQ0VfREFUQSxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUFJFU1VCX01FRVRJTkdfUEtHLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5QUkVTVUJfTUVFVElOR19SUSxcclxuICAgICAgICAgICAgICAgIC8vIHZtLmFsbEFjdGl2aXRpZXMuUFJJU1RJTkVfUE0sXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBSSVNUSU5FX1BNXzJMQU5HLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5SRUNPTl9ERUNJU19MVFJfSU5URU5ULFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5SRUNPTl9ERUNJU19SUV9SRUNPTixcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUkVDT05fREVDSVNfT1RIRVJfSU5GTyxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuQkVfQ0xBUklGX1JFU1BPTlNFLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5DTElOX0NMQVJJRl9SRVNQT05TRSxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuRU1BSUxfUlFfUkVTUE9OU0UsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkxBQkVMX0NMQVJJRl9SRVNQT05TRSxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUFJPQ0VTU0lOR19DTEFSSUZfUkVTUE9OU0UsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlFVQUxfQ0xJTl9DTEFSSUZfUkVTUE9OU0UsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlFVQUxfQ0xBUklGX1JFU1BPTlNFLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5TQ1JFRU5JTkdfQUNDRVBUX1JFU1BPTlNFLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5TQ1JFRU5JTkdfQ0xBUklGX1JFU1BPTlNFLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5TRE5fUkVTUE9OU0UsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBIT05FX1JRX1JFU1BPTlNFLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5VTlNPTElDSVRFRF9EQVRBLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5MQUJFTF9QUkVBUFBST1ZBTF8yTEFORyxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuTk9OX1JFU1BPTlNFLCAvL1Jlc3BvbnNlIHRvIE5PTlxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5OT0RfUkVTUE9OU0UgLy9SZXNwb25zZSB0byBOT0RcclxuICAgICAgICAgICAgICAgIC8vdm0uYWxsQWN0aXZpdGllcy5TRVFVRU5DRV9DTEVBTlVQIC8vIFNlcXVlbmNlIGNsZWFudXAgYXMgcGVyIGVtYWlsIEZFYiAxNiwgMjAxOFxyXG4gICAgICAgICAgICBdKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGdldFZfRElOQUFycmF5KCkge1xyXG4gICAgICAgICAgICByZXR1cm4gKFtcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuQURNSU5JU1RSQVRJVkUsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkNBTkNFTF9MRVRURVIsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkNIQU5HRV9UT19ESU4sXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLklOSVRJQUwsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLk1FRVRJTkdfTUlOVVRFUyxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUE9TVF9DTEVBUkFOQ0VfREFUQSxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuQ0xJTl9DTEFSSUZfUkVTUE9OU0UsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkVNQUlMX1JRX1JFU1BPTlNFLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5IU0NfUlFfUkVTUE9OU0UsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkxBQkVMX0NMQVJJRl9SRVNQT05TRSwgLy9SZXNwb25zZSB0byBsYWJlbGxpbmcgY2xhcmlmaWNhdGlvbiByZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBST0NFU1NJTkdfQ0xBUklGX1JFU1BPTlNFLCAvL1Jlc3BvbnNlIHRvIHByb2Nlc3NpbmcgQ2xhcmlmaWNhdGlvbiBSZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlFIU0NfUlFfUkVTUE9OU0UsIC8vUmVzcG9uc2UgdG8gUXVhbGl0eSAmIEh1bWFuIFNhZmV0eSBDbGFyaWZpY2F0aW9uIFJlcXVlc3RcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuQ0hTQ19SUV9SRVNQT05TRSwgLy8gUmVzcG9uc2UgdG8gQ2xpbmljYWwgJiBIdW1hbiBTYWZldHkgQ2xhcmlmaWNhdGlvbiBSZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlFDSFNDX1JRX1JFU1BPTlNFLCAvLyBSZXNwb25zZSB0byBRdWFsaXR5LCBDbGluaWNhbCBhbmQgSHVtYW4gU2FmZXR5IENsYXJpZmljYXRpb24gUmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5TQ1JFRU5JTkdfQUNDRVBUX1JFU1BPTlNFLCAvL3Jlc3BvbnNlIHRvIHNjcmVlbmluZyBhY2NlcHRhbmNlIGxldHRlclxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5TQ1JFRU5JTkdfQ0xBUklGX1JFU1BPTlNFLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5TRE5fUkVTUE9OU0UsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBIT05FX1JRX1JFU1BPTlNFLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5VTlNPTElDSVRFRF9EQVRBLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5JTklUSUFMX1RFQVRfU09MVV9NT05PLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5OT0RfUkVTUE9OU0UgLy9SZXNwb25zZSB0byBOT0RcclxuICAgICAgICAgICAgXSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBnZXRESU5CQXJyYXkoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAoW1xyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5BRE1JTklTVFJBVElWRSxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuQ0FOQ0VMX0xFVFRFUixcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuQ0hBTkdFX1RPX0RJTixcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuRFJVR19OT1RJRl9GT1JNLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5JTklUSUFMLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5NRUVUSU5HX01JTlVURVMsXHJcbiAgICAgICAgICAgICAgICAvL3ZtLmFsbEFjdGl2aXRpZXMuTk9USUZJQ0FUSU9OX0lOVEVSUlVQVF9TQUxFLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5QT1NUX0NMRUFSQU5DRV9EQVRBLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5QUkVTVUJfTUVFVElOR19QS0csXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBSRVNVQl9NRUVUSU5HX1JRLFxyXG4gICAgICAgICAgICAgICAgLy8gdm0uYWxsQWN0aXZpdGllcy5QUklTVElORV9QTSxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUFJJU1RJTkVfUE1fMkxBTkcsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlJFQ09OX0RFQ0lTX0xUUl9JTlRFTlQsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlJFQ09OX0RFQ0lTX1JRX1JFQ09OLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5SRUNPTl9ERUNJU19PVEhFUl9JTkZPLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5DTElOX0NMQVJJRl9SRVNQT05TRSxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuRU1BSUxfUlFfUkVTUE9OU0UsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkxBQkVMX0NMQVJJRl9SRVNQT05TRSxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUFJPQ0VTU0lOR19DTEFSSUZfUkVTUE9OU0UsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlFVQUxfQ0xJTl9DTEFSSUZfUkVTUE9OU0UsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlFVQUxfQ0xBUklGX1JFU1BPTlNFLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5TQ1JFRU5JTkdfQUNDRVBUX1JFU1BPTlNFLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5TQ1JFRU5JTkdfQ0xBUklGX1JFU1BPTlNFLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5TRE5fUkVTUE9OU0UsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBIT05FX1JRX1JFU1BPTlNFLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5VTlNPTElDSVRFRF9EQVRBLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5MQUJFTF9QUkVBUFBST1ZBTF8yTEFORyxcclxuICAgICAgICAgICAgICAgIC8vIHZtLmFsbEFjdGl2aXRpZXMuWUVBUl9MSVNUX09GX0NIQU5HRSxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuTk9OX1JFU1BPTlNFLCAvL1Jlc3BvbnNlIHRvIE5PTlxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5OT0RfUkVTUE9OU0UgLy9SZXNwb25zZSB0byBOT0RcclxuICAgICAgICAgICAgICAgIC8vdm0uYWxsQWN0aXZpdGllcy5TRVFVRU5DRV9DTEVBTlVQIC8vIFNlcXVlbmNlIGNsZWFudXAgYXMgcGVyIGVtYWlsIEZFYiAxNiwgMjAxOFxyXG4gICAgICAgICAgICBdKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGdldERJTkRBcnJheSgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIChbXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkFETUlOSVNUUkFUSVZFLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5DQU5DRUxfTEVUVEVSLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5DSEFOR0VfVE9fRElOLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5EUlVHX05PVElGX0ZPUk0sXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLklOSVRJQUwsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLk1FRVRJTkdfTUlOVVRFUyxcclxuICAgICAgICAgICAgICAgIC8vdm0uYWxsQWN0aXZpdGllcy5OT1RJRklDQVRJT05fSU5URVJSVVBUX1NBTEUsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBPU1RfQ0xFQVJBTkNFX0RBVEEsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlJFQ09OX0RFQ0lTX0xUUl9JTlRFTlQsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlJFQ09OX0RFQ0lTX1JRX1JFQ09OLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5SRUNPTl9ERUNJU19PVEhFUl9JTkZPLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5FTUFJTF9SUV9SRVNQT05TRSxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuTEFCRUxfQ0xBUklGX1JFU1BPTlNFLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5QUk9DRVNTSU5HX0NMQVJJRl9SRVNQT05TRSxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuU0NSRUVOSU5HX0NMQVJJRl9SRVNQT05TRSxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuU0ROX1JFU1BPTlNFLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5QSE9ORV9SUV9SRVNQT05TRSxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuVU5TT0xJQ0lURURfREFUQSxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuTEFCRUxfUFJFQVBQUk9WQUxfMkxBTkcsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLk5PTl9SRVNQT05TRSwgLy9SZXNwb25zZSB0byBOT05cclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuTk9EX1JFU1BPTlNFIC8vUmVzcG9uc2UgdG8gTk9EXHJcbiAgICAgICAgICAgICAgICAvL3ZtLmFsbEFjdGl2aXRpZXMuU0VRVUVOQ0VfQ0xFQU5VUCAvLyBTZXF1ZW5jZSBjbGVhbnVwIGFzIHBlciBlbWFpbCBGRWIgMTYsIDIwMThcclxuICAgICAgICAgICAgXSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBnZXRESU5GQXJyYXkoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAoW1xyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5BRE1JTklTVFJBVElWRSxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuQ0FOQ0VMX0xFVFRFUixcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuQ0hBTkdFX1RPX0RJTixcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuRFJVR19OT1RJRl9GT1JNLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5JTklUSUFMLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5NRUVUSU5HX01JTlVURVMsXHJcbiAgICAgICAgICAgICAgICAvL3ZtLmFsbEFjdGl2aXRpZXMuTk9USUZJQ0FUSU9OX0lOVEVSUlVQVF9TQUxFLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5QT1NUX0NMRUFSQU5DRV9EQVRBLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5SRUNPTl9ERUNJU19MVFJfSU5URU5ULFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5SRUNPTl9ERUNJU19SUV9SRUNPTixcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUkVDT05fREVDSVNfT1RIRVJfSU5GTyxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuRU1BSUxfUlFfUkVTUE9OU0UsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkxBQkVMX0NMQVJJRl9SRVNQT05TRSxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUFJPQ0VTU0lOR19DTEFSSUZfUkVTUE9OU0UsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlNDUkVFTklOR19DTEFSSUZfUkVTUE9OU0UsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlNETl9SRVNQT05TRSxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUEhPTkVfUlFfUkVTUE9OU0UsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlVOU09MSUNJVEVEX0RBVEEsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkxBQkVMX1BSRUFQUFJPVkFMXzJMQU5HXHJcbiAgICAgICAgICAgICAgICAvL3ZtLmFsbEFjdGl2aXRpZXMuU0VRVUVOQ0VfQ0xFQU5VUCAvLyBTZXF1ZW5jZSBjbGVhbnVwIGFzIHBlciBlbWFpbCBGRWIgMTYsIDIwMThcclxuICAgICAgICAgICAgXSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBnZXRNUERJTkFycmF5KCkge1xyXG4gICAgICAgICAgICByZXR1cm4gKFtcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuQ0FOQ0VMX0xFVFRFUixcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuTUVFVElOR19NSU5VVEVTLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5QUkVTVUJfTUVFVElOR19QS0csIC8vc3VibWlzc2lvbiBtZWV0aW5nIHBhY2thZ2VcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUFJFU1VCX01FRVRJTkdfUlEsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLldSSVRURU5fQ09OU1VMVF9SRVEsIC8vUmVxdWVzdCBmb3IgV3JpdHRlbiBDb25zdWx0YXRpb24sXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkVNQUlMX1JRX1JFU1BPTlNFLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5QUk9DRVNTSU5HX0NMQVJJRl9SRVNQT05TRSxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUEhPTkVfUlFfUkVTUE9OU0VcclxuICAgICAgICAgICAgXSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBnZXRQRENBcnJheSgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIChbXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkFETUlOSVNUUkFUSVZFLCAvL2FkbWluaXN0cmF0aXZlXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkNBTkNFTF9MRVRURVIsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLk1FRVRJTkdfTUlOVVRFUyxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUE9TVF9BVVRIX0RJVjFfQ0hBTkdFLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5QT1NUX0NMRUFSQU5DRV9EQVRBLFxyXG4gICAgICAgICAgICAgICAgLy8gdm0uYWxsQWN0aXZpdGllcy5QUklTVElORV9QTSxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUFJJU1RJTkVfUE1fMkxBTkcsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkVNQUlMX1JRX1JFU1BPTlNFLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5MQUJFTF9DTEFSSUZfUkVTUE9OU0UsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLk5PTF9SRVNQT05TRSxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUFJPQ0VTU0lOR19DTEFSSUZfUkVTUE9OU0UsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlFVQUxfQ0xJTl9DTEFSSUZfUkVTUE9OU0UsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlFVQUxfQ0xBUklGX1JFU1BPTlNFLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5TQ1JFRU5JTkdfQ0xBUklGX1JFU1BPTlNFLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5QSE9ORV9SUV9SRVNQT05TRSxcclxuICAgICAgICAgICAgICAgIC8vIHZtLmFsbEFjdGl2aXRpZXMuTEFCRUxfUFJFQVBQUk9WQUxfMkxBTkcsIC8vU2Vjb25kIExhbmd1YWdlIExhYmVsIC0gUHJlLUFwcHJvdmFsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlVOU09MSUNJVEVEX0RBVEEsIC8vVW5zb2xpY2l0ZWQgRGF0YVxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5SRUNPTl9ERUNJU19MVFJfSU5URU5ULC8vIFJlY29uc2lkZXJhdGlvbiBvZiBEZWNpc2lvbiAtIExldHRlciBvZiBJbnRlbnRcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUkVDT05fREVDSVNfUlFfUkVDT04sIC8vUmVjb25zaWRlcmF0aW9uIG9mIERlY2lzaW9uIC0gUmVxdWVzdCBmb3IgUmVjb25zaWRlcmF0aW9uXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlJFQ09OX0RFQ0lTX09USEVSX0lORk8gLy8gUmVjb25zaWRlcmF0aW9uIG9mIERlY2lzaW9uIC0gT3RoZXIgSW5mb3JtYXRpb25cclxuICAgICAgICAgICAgICAgIC8vdm0uYWxsQWN0aXZpdGllcy5TRVFVRU5DRV9DTEVBTlVQIC8vIFNlcXVlbmNlIGNsZWFudXAgYXMgcGVyIGVtYWlsIEZFYiAxNiwgMjAxOFxyXG4gICAgICAgICAgICBdKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGdldFBEQ0JBcnJheSgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIChbXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkFETUlOSVNUUkFUSVZFLCAvL2FkbWluaXN0cmF0aXZlXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkNBTkNFTF9MRVRURVIsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLk1FRVRJTkdfTUlOVVRFUyxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUE9TVF9BVVRIX0RJVjFfQ0hBTkdFLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5QT1NUX0NMRUFSQU5DRV9EQVRBLFxyXG4gICAgICAgICAgICAgICAgLy8gdm0uYWxsQWN0aXZpdGllcy5QUklTVElORV9QTSxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUFJJU1RJTkVfUE1fMkxBTkcsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkVNQUlMX1JRX1JFU1BPTlNFLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5MQUJFTF9DTEFSSUZfUkVTUE9OU0UsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLk5PTF9SRVNQT05TRSxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUFJPQ0VTU0lOR19DTEFSSUZfUkVTUE9OU0UsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlFVQUxfQ0xJTl9DTEFSSUZfUkVTUE9OU0UsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlFVQUxfQ0xBUklGX1JFU1BPTlNFLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5TQ1JFRU5JTkdfQUNDRVBUX1JFU1BPTlNFLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5TQ1JFRU5JTkdfQ0xBUklGX1JFU1BPTlNFLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5QSE9ORV9SUV9SRVNQT05TRSxcclxuICAgICAgICAgICAgICAgIC8vIHZtLmFsbEFjdGl2aXRpZXMuTEFCRUxfUFJFQVBQUk9WQUxfMkxBTkcsIC8vU2Vjb25kIExhbmd1YWdlIExhYmVsIC0gUHJlLUFwcHJvdmFsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlVOU09MSUNJVEVEX0RBVEEsIC8vVW5zb2xpY2l0ZWQgRGF0YVxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5SRUNPTl9ERUNJU19MVFJfSU5URU5ULC8vIFJlY29uc2lkZXJhdGlvbiBvZiBEZWNpc2lvbiAtIExldHRlciBvZiBJbnRlbnRcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUkVDT05fREVDSVNfUlFfUkVDT04sIC8vUmVjb25zaWRlcmF0aW9uIG9mIERlY2lzaW9uIC0gUmVxdWVzdCBmb3IgUmVjb25zaWRlcmF0aW9uXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlJFQ09OX0RFQ0lTX09USEVSX0lORk8gLy8gUmVjb25zaWRlcmF0aW9uIG9mIERlY2lzaW9uIC0gT3RoZXIgSW5mb3JtYXRpb25cclxuICAgICAgICAgICAgICAgIC8vdm0uYWxsQWN0aXZpdGllcy5TRVFVRU5DRV9DTEVBTlVQIC8vIFNlcXVlbmNlIGNsZWFudXAgYXMgcGVyIGVtYWlsIEZFYiAxNiwgMjAxOFxyXG4gICAgICAgICAgICBdKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIF9nZXRJUlNSUFZBcnJheSgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIChbXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLklTU1VFX1NBRkVUWV9SRVFVRVNULCAvL0lzc3VlIFJlbGF0ZWQgU2FmZXR5IFJlcXVlc3RcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuTUVFVElOR19NSU5VVEVTLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5QUkVTVUJfTUVFVElOR19SUSAvL3N1Ym1pc3Npb24gTWVldGluZyBSZXF1ZXN0XHJcbiAgICAgICAgICAgIF0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gX2dldFBBUFZBcnJheSgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIChbXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLk1FRVRJTkdfTUlOVVRFUyxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuRU1BSUxfUlFfUkVTUE9OU0UsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLk1IUERfUlFfUkVTUE9OU0UsIC8vUmVzcG9uc2UgdG8gTUhQRCByZXF1ZXN0c1xyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5QUkVTVUJfTUVFVElOR19SUSAgIC8vc3VibWlzc2lvbiBNZWV0aW5nIFJlcXVlc3QgLXVzZWQgdG8gYmUgcHJlc3ViXHJcbiAgICAgICAgICAgIF0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvL2FkZCBuZXcgUlQgZGVzY3JpcHRpb24gYXJyYXlzIC0gcmVxdWVzdCB2My4wLjNcclxuICAgICAgICBmdW5jdGlvbiBfZ2V0UFNBUFZBcnJheSgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIChbXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkFEVl9DT01QX1JFUSwgLy9BZHZlcnRpc2luZyBDb21wbGFpbnQgUmVxdWVzdCBmb3IgSW5mb3JtYXRpb25cclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUEFUSUVOVF9TQUZFVFlfSU5GTyAvL1BhdGllbnQgU2FmZXR5IEluZm9ybWF0aW9uIChNZWRpY2F0aW9uIGVycm9yKVxyXG4gICAgICAgICAgICBdKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIF9nZXRSQ1BWQXJyYXkoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAoW1xyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5ESVNTRU1fTElTVCwgLy9EaXNzZW1pbmF0aW9uIExpc3RcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUklTS19DT01NVU5fRE9DIC8vUmlzayBjb21tdW5pY2F0aW9uIGRvY3VtZW50XHJcbiAgICAgICAgICAgIF0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gX2dldFJFR1BWQXJyYXkoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAoW1xyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5CRU5FRklUX1JJU0tfQVNTRVNTLCAvL2JlbmVmaXQgcmlzayBhc3Nlc3NtZW50XHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkZPUkVJR05fU0FGRVRZX05PVElGSUNBVElPTiwgLy9Gb3JlaWduIFNhZmV0eSBBY3Rpb24gTm90aWZpY2F0aW9uXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLk1FRVRJTkdfTUlOVVRFUyxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUkVTU0VTU19PUkRFUiwgLy9SZWFzc2Vzc21lbnQgT3JkZXJcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUFJFU1VCX01FRVRJTkdfUlEsICAgLy9zdWJtaXNzaW9uIE1lZXRpbmcgUmVxdWVzdCAtdXNlZCB0byBiZSBwcmVzdWJcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuVEVTVF9TVFVESUVTX09SREVSLCAvL1Rlc3QgYW5kIFN0dWRpZXMgT3JkZXJcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuVEVSTV9DT05EX0NPTU0gLy9UZXJtcyBhbmQgQ29uZGl0aW9ucyBDb21taXRtZW50XHJcbiAgICAgICAgICAgIF0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gX2dldFNBTkRTQ0FycmF5KCkge1xyXG4gICAgICAgICAgICByZXR1cm4gKFtcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuQ0FOQ0VMX0xFVFRFUiwgLy9jYW5jZWxsYXRpb24gbGV0dGVyXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkNPTU1FTlRTX05PQywgLy8gY29tbWVudHMgb24gbm90aWNlIG9mIGRlY2lzaW9uXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkNPTU1FTlRTX1NVTU1BUllfQkFTSVMsIC8vY29tbW1lbnRzIG9uIHN1bW1hcnkgYmFzaXMgb2YgZGVjaXNpb24gKFNCRClcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuQ09OU0VOVF9MVFIsIC8vQ29uc2VudCBMZXR0ZXJcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuREFUQV9QUk9URUNUX0NPUlJFU1AsIC8vQ29ycmVzcG9uZGVuY2UgLSBEYXRhIFByb3RlY3Rpb25cclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuQ09SUl9QQVRFTlRfTUVELCAvL0NvcnJlc3BvbmRlbmNlIC0gUGF0ZW50ZWQgTWVkaWNpbmVzXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkRSVUdfTk9USUZfRk9STSwgLy8gZHJ1ZyBub3RpZmljYXRpb24gZm9ybVxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5GT1JNX0lWLCAvL0Zvcm0gSVZcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuRk9STV9WLCAvL0Zvcm0gVlxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5NRUVUSU5HX01JTlVURVMsIC8vbWludXRlcyBvZiBtZWV0aW5nIGRhdGVkXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkFMTEVHQVRJT05fTk9USUNFLCAvL05vdGljZSBvZiBhbGxlZ2F0aW9uXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBPU1RfQ0xFQVJBTkNFX0RBVEEsIC8vcG9zdCBjbGVhcmFuY2UgZGF0YVxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5QT1NUX05PQ19DSEFOR0UsIC8vUG9zdCBOT0MgY2hhbmdlXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlNFQ09ORF9MQU5HX1BNLCAvLyBTZWNvbmQgTGFuZ3VhZ2UgUE1cclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUFJJU1RJTkVfUE1fMkxBTkcsIC8vIHByaXN0aW5lIFBNIHNlY29uZCBsYW5ndWFnZVxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5SRUNPTl9ERUNJU19MVFJfSU5URU5ULC8vIFJlY29uc2lkZXJhdGlvbiBvZiBEZWNpc2lvbiAtIExldHRlciBvZiBJbnRlbnRcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUkVDT05fREVDSVNfT1RIRVJfSU5GTywvLyBSZWNvbnNpZGVyYXRpb24gb2YgRGVjaXNpb24gLSBPdGhlciBJbmZvcm1hdGlvblxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5SRUNPTl9ERUNJU19SUV9SRUNPTiwgLy9SZWNvbnNpZGVyYXRpb24gb2YgRGVjaXNpb24gLSBSZXF1ZXN0IGZvciBSZWNvbnNpZGVyYXRpb25cclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuQ0xJTl9DTEFSSUZfUkVTUE9OU0UsIC8vUmVzcG9uc2UgdG8gY2xpbmljYWwgY2xhcmlmaWFjdGlvbiByZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkVNQUlMX1JRX1JFU1BPTlNFLC8vIHJlc3BvbnNlIHRvIGVtYWlsIHJlcXVlc3RcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuTEFCRUxfQ0xBUklGX1JFU1BPTlNFLCAvL1Jlc3BvbnNlIHRvIGxhYmVsbGluZyBjbGFyaWZpY2F0aW9uIHJlcXVlc3RcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuTk9DX1JFU1BPTlNFLCAvL3Jlc3BvbnNlIHRvIE5PQy8gYy1RblxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5OT0RfUkVTUE9OU0UsIC8vUmVzcG9uc2UgdG8gTk9EXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLk5PTl9SRVNQT05TRSwgLy9SZXNwb25zZSB0byBOT05cclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUFJPQ0VTU0lOR19DTEFSSUZfUkVTUE9OU0UsIC8vUmVzcG9uc2UgdG8gcHJvY2Vzc2luZyBDbGFyaWZpY2F0aW9uIFJlcXVlc3RcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuU0NSRUVOSU5HX0FDQ0VQVF9SRVNQT05TRSwgLy9yZXNwb25zZSB0byBzY3JlZW5pbmcgYWNjZXB0YW5jZSBsZXR0ZXJcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuU0NSRUVOSU5HX0NMQVJJRl9SRVNQT05TRSwgLy8gcmVzcG9uc2UgdG8gc2NyZWVuaW5nIGNsYXJpZmljYXRpb24gcmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5TRE5fUkVTUE9OU0UsIC8vcmVzcG9uc2UgdG8gU0ROXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBIT05FX1JRX1JFU1BPTlNFLCAvL1Jlc3BvbnNlIHRvIHRlbGVwaG9uZSBSZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlVOU09MSUNJVEVEX0RBVEEgLy9VbnNvbGljaXRlZCBEYXRhXHJcbiAgICAgICAgICAgIF0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gX2dldFBvc3RESU5BcnJheSgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIChbXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLllFQVJcclxuICAgICAgICAgICAgXSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBfZ2V0RVVBTkRTQXJyYXkoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAoW1xyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5BRE1JTklTVFJBVElWRSwgLy9hZG1pbmlzdHJhdGl2ZVxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5CRV9DTEFSSUZfUkVTUE9OU0UsIC8vUmVzcG9uc2UgdG8gQkUgY2xhcmlmaWNhdGlvbiByZXF1ZXN0IGRhdGVkLi5cclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuQ0FOQ0VMX0xFVFRFUiwgLy9jYW5jZWxsYXRpb24gbGV0dGVyXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkNPTU1FTlRTX05PQywgLy8gY29tbWVudHMgb24gbm90aWNlIG9mIGRlY2lzaW9uXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkNPTU1FTlRTX1NVTU1BUllfQkFTSVMsIC8vY29tbW1lbnRzIG9uIHN1bW1hcnkgYmFzaXMsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkRSVUdfTk9USUZfRk9STSwgLy8gZHJ1ZyBub3RpZmljYXRpb24gZm9ybVxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5JTklUSUFMLCAvL0luaXRpYWxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuTUVFVElOR19NSU5VVEVTLCAvL21pbnV0ZXMgb2YgbWVldGluZyBkYXRlZFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5QT1NUX0NMRUFSQU5DRV9EQVRBLCAvL3Bvc3QgY2xlYXJhbmNlIGRhdGFcclxuICAgICAgICAgICAgICAgIC8vIHZtLmFsbEFjdGl2aXRpZXMuUFJJU1RJTkVfUE0sIC8vIFByaXN0aW5lIFBNXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlNFQ09ORF9MQU5HX1BNLCAvLyBTZWNvbmQgTGFuZ3VhZ2UgUE1cclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUFJJU1RJTkVfUE1fMkxBTkcsIC8vIHByaXN0aW5lIFBNIHNlY29uZCBsYW5ndWFnZVxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5QVUJfUkVMRUFTRV9JTkZPLCAvL1B1YmxpYyBSZWxlYXNlIG9mIENsaW5pY2FsIEluZm9ybWF0aW9uXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkNMSU5fQ0xBUklGX1JFU1BPTlNFLCAvL1Jlc3BvbnNlIHRvIGNsaW5pY2FsIGNsYXJpZmlhY3Rpb24gcmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5FTUFJTF9SUV9SRVNQT05TRSwvLyByZXNwb25zZSB0byBlbWFpbCByZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkxBQkVMX0NMQVJJRl9SRVNQT05TRSwgLy9SZXNwb25zZSB0byBsYWJlbGxpbmcgY2xhcmlmaWNhdGlvbiByZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkxBQkVMX1BSRUFQUFJPVkFMXzJMQU5HLCAvL1NlY29uZCBMYW5ndWFnZSBMYWJlbCAtIFByZS1BcHByb3ZhbFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5OT0NfUkVTUE9OU0UsIC8vcmVzcG9uc2UgdG8gTk9DLyBjLVFuXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLk5PRF9SRVNQT05TRSwgLy9SZXNwb25zZSB0byBOT0RcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuTk9OX1JFU1BPTlNFLCAvL1Jlc3BvbnNlIHRvIE5PTlxyXG4gICAgICAgICAgICAgICAgLy92bS5hbGxBY3Rpdml0aWVzLk5PVElGSUNBVElPTl9JTlRFUlJVUFRfU0FMRSwvL05vdGlmaWNhdGlvbiBJbnRlcnJ1cHRpb24gb2YgU2FsZVxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5QUkVTVUJfTUVFVElOR19QS0csIC8vc3VibWlzc2lvbi9wcmVzdWJtaXNzaW9uIG1lZXRpbmcgcGFja2FnZVxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5QUkVTVUJfTUVFVElOR19SUSwgICAvL3N1Ym1pc3Npb24gTWVldGluZyBSZXF1ZXN0IC11c2VkIHRvIGJlIHByZXN1YlxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5QUk9DRVNTSU5HX0NMQVJJRl9SRVNQT05TRSwgLy9SZXNwb25zZSB0byBwcm9jZXNzaW5nIENsYXJpZmljYXRpb24gUmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5RVUFMX0NMSU5fQ0xBUklGX1JFU1BPTlNFLCAvL1Jlc3BvbnNlIHRvIHF1YWxpdHkgYW5kIENsaW5pY2FsIGNsYXJpZmljYXRpb24gUkVxdWVzdFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5RVUFMX0NMQVJJRl9SRVNQT05TRSwgLy9SZXNwb25zZSB0byBRdWFsaXR5IENsYXJpZmljYXRpb24gcmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5SRUNPTl9ERUNJU19MVFJfSU5URU5ULC8vIFJlY29uc2lkZXJhdGlvbiBvZiBEZWNpc2lvbiAtIExldHRlciBvZiBJbnRlbnRcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUkVDT05fREVDSVNfUlFfUkVDT04sIC8vUmVjb25zaWRlcmF0aW9uIG9mIERlY2lzaW9uIC0gUmVxdWVzdCBmb3IgUmVjb25zaWRlcmF0aW9uXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlJFQ09OX0RFQ0lTX09USEVSX0lORk8sLy8gUmVjb25zaWRlcmF0aW9uIG9mIERlY2lzaW9uIC0gT3RoZXIgSW5mb3JtYXRpb25cclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuU0NSRUVOSU5HX0FDQ0VQVF9SRVNQT05TRSwgLy9yZXNwb25zZSB0byBzY3JlZW5pbmcgYWNjZXB0YW5jZSBsZXR0ZXJcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuU0NSRUVOSU5HX0NMQVJJRl9SRVNQT05TRSwgLy8gcmVzcG9uc2UgdG8gc2NyZWVuaW5nIGNsYXJpZmljYXRpb24gcmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5TRE5fUkVTUE9OU0UsIC8vcmVzcG9uc2UgdG8gU0ROXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBIT05FX1JRX1JFU1BPTlNFLCAvL1Jlc3BvbnNlIHRvIHRlbGVwaG9uZSBSZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlVOU09MSUNJVEVEX0RBVEEsIC8vVW5zb2xpY2l0ZWQgRGF0YVxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5DT1JSX1BBVEVOVF9NRUQsIC8vQ29ycmVzcG9uZGVuY2UgLSBQYXRlbnRlZCBNZWRpY2luZXNcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuQUxMRUdBVElPTl9OT1RJQ0UsIC8vTm90aWNlIG9mIGFsbGVnYXRpb25cclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuRk9STV9JViwgLy9Gb3JtIElWXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkZPUk1fViwgLy9Gb3JtIFZcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuQ09OU0VOVF9MVFIsIC8vQ29uc2VudCBMZXR0ZXJcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuREFUQV9QUk9URUNUX0NPUlJFU1AsIC8vQ29ycmVzcG9uZGVuY2UgLSBEYXRhIFByb3RlY3Rpb25cclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuTk9OQ0xJTl9DTEFSSUZfUkVTUE9OU0UgLy9yZXNwb25zZSB0byBOb25jbGluaWNhbCBjbGFyaWZpY2F0aW9uIHJlcXVlc3RcclxuICAgICAgICAgICAgXSk7XHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gX2dldEVVU0FORFNBcnJheSgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIChbXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkFETUlOSVNUUkFUSVZFLCAvL2FkbWluaXN0cmF0aXZlXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkJFX0NMQVJJRl9SRVNQT05TRSwgLy9SZXNwb25zZSB0byBCRSBjbGFyaWZpY2F0aW9uIHJlcXVlc3QgZGF0ZWQuLlxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5DQU5DRUxfTEVUVEVSLCAvL2NhbmNlbGxhdGlvbiBsZXR0ZXJcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuQ09NTUVOVFNfTk9DLCAvLyBjb21tZW50cyBvbiBub3RpY2Ugb2YgZGVjaXNpb25cclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuQ09NTUVOVFNfU1VNTUFSWV9CQVNJUywgLy9jb21tbWVudHMgb24gc3VtbWFyeSBiYXNpcyxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuRFJVR19OT1RJRl9GT1JNLCAvLyBkcnVnIG5vdGlmaWNhdGlvbiBmb3JtXHJcbiAgICAgICAgICAgICAgICAvLyB2bS5hbGxBY3Rpdml0aWVzLklOSVRJQUwsIC8vSW5pdGlhbFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5NRUVUSU5HX01JTlVURVMsIC8vbWludXRlcyBvZiBtZWV0aW5nIGRhdGVkXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBPU1RfQ0xFQVJBTkNFX0RBVEEsIC8vcG9zdCBjbGVhcmFuY2UgZGF0YVxyXG4gICAgICAgICAgICAgICAgLy8gdm0uYWxsQWN0aXZpdGllcy5QUklTVElORV9QTSwgLy8gUHJpc3RpbmUgUE1cclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuU0VDT05EX0xBTkdfUE0sIC8vIFNlY29uZCBMYW5ndWFnZSBQTVxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5QUklTVElORV9QTV8yTEFORywgLy8gcHJpc3RpbmUgUE0gc2Vjb25kIGxhbmd1YWdlXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBVQl9SRUxFQVNFX0lORk8sIC8vUHVibGljIFJlbGVhc2Ugb2YgQ2xpbmljYWwgSW5mb3JtYXRpb25cclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuQ0xJTl9DTEFSSUZfUkVTUE9OU0UsIC8vUmVzcG9uc2UgdG8gY2xpbmljYWwgY2xhcmlmaWFjdGlvbiByZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkVNQUlMX1JRX1JFU1BPTlNFLC8vIHJlc3BvbnNlIHRvIGVtYWlsIHJlcXVlc3RcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuTEFCRUxfQ0xBUklGX1JFU1BPTlNFLCAvL1Jlc3BvbnNlIHRvIGxhYmVsbGluZyBjbGFyaWZpY2F0aW9uIHJlcXVlc3RcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuTEFCRUxfUFJFQVBQUk9WQUxfMkxBTkcsIC8vU2Vjb25kIExhbmd1YWdlIExhYmVsIC0gUHJlLUFwcHJvdmFsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLk5PQ19SRVNQT05TRSwgLy9yZXNwb25zZSB0byBOT0MvIGMtUW5cclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuTk9EX1JFU1BPTlNFLCAvL1Jlc3BvbnNlIHRvIE5PRFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5OT05fUkVTUE9OU0UsIC8vUmVzcG9uc2UgdG8gTk9OXHJcbiAgICAgICAgICAgICAgICAvL3ZtLmFsbEFjdGl2aXRpZXMuTk9USUZJQ0FUSU9OX0lOVEVSUlVQVF9TQUxFLC8vTm90aWZpY2F0aW9uIEludGVycnVwdGlvbiBvZiBTYWxlXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBSRVNVQl9NRUVUSU5HX1BLRywgLy9zdWJtaXNzaW9uL3ByZXN1Ym1pc3Npb24gbWVldGluZyBwYWNrYWdlXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBSRVNVQl9NRUVUSU5HX1JRLCAgIC8vc3VibWlzc2lvbiBNZWV0aW5nIFJlcXVlc3QgLXVzZWQgdG8gYmUgcHJlc3ViXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBST0NFU1NJTkdfQ0xBUklGX1JFU1BPTlNFLCAvL1Jlc3BvbnNlIHRvIHByb2Nlc3NpbmcgQ2xhcmlmaWNhdGlvbiBSZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlFVQUxfQ0xJTl9DTEFSSUZfUkVTUE9OU0UsIC8vUmVzcG9uc2UgdG8gcXVhbGl0eSBhbmQgQ2xpbmljYWwgY2xhcmlmaWNhdGlvbiBSRXF1ZXN0XHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlFVQUxfQ0xBUklGX1JFU1BPTlNFLCAvL1Jlc3BvbnNlIHRvIFF1YWxpdHkgQ2xhcmlmaWNhdGlvbiByZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlJFQ09OX0RFQ0lTX0xUUl9JTlRFTlQsLy8gUmVjb25zaWRlcmF0aW9uIG9mIERlY2lzaW9uIC0gTGV0dGVyIG9mIEludGVudFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5SRUNPTl9ERUNJU19SUV9SRUNPTiwgLy9SZWNvbnNpZGVyYXRpb24gb2YgRGVjaXNpb24gLSBSZXF1ZXN0IGZvciBSZWNvbnNpZGVyYXRpb25cclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUkVDT05fREVDSVNfT1RIRVJfSU5GTywvLyBSZWNvbnNpZGVyYXRpb24gb2YgRGVjaXNpb24gLSBPdGhlciBJbmZvcm1hdGlvblxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5TQ1JFRU5JTkdfQUNDRVBUX1JFU1BPTlNFLCAvL3Jlc3BvbnNlIHRvIHNjcmVlbmluZyBhY2NlcHRhbmNlIGxldHRlclxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5TQ1JFRU5JTkdfQ0xBUklGX1JFU1BPTlNFLCAvLyByZXNwb25zZSB0byBzY3JlZW5pbmcgY2xhcmlmaWNhdGlvbiByZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlNETl9SRVNQT05TRSwgLy9yZXNwb25zZSB0byBTRE5cclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUEhPTkVfUlFfUkVTUE9OU0UsIC8vUmVzcG9uc2UgdG8gdGVsZXBob25lIFJlcXVlc3RcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuVU5TT0xJQ0lURURfREFUQSwgLy9VbnNvbGljaXRlZCBEYXRhXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkNPUlJfUEFURU5UX01FRCwgLy9Db3JyZXNwb25kZW5jZSAtIFBhdGVudGVkIE1lZGljaW5lc1xyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5BTExFR0FUSU9OX05PVElDRSwgLy9Ob3RpY2Ugb2YgYWxsZWdhdGlvblxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5GT1JNX0lWLCAvL0Zvcm0gSVZcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuRk9STV9WLCAvL0Zvcm0gVlxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5DT05TRU5UX0xUUiwgLy9Db25zZW50IExldHRlclxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5EQVRBX1BST1RFQ1RfQ09SUkVTUCwgLy9Db3JyZXNwb25kZW5jZSAtIERhdGEgUHJvdGVjdGlvblxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5OT05DTElOX0NMQVJJRl9SRVNQT05TRSAvL3Jlc3BvbnNlIHRvIE5vbmNsaW5pY2FsIGNsYXJpZmljYXRpb24gcmVxdWVzdFxyXG4gICAgICAgICAgICBdKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGdldFZfQW5kc0FycmF5KCkgeyAvL1YtQU5EU1xyXG4gICAgICAgICAgICByZXR1cm4gKFtcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuQURNSU5JU1RSQVRJVkUsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkNBTkNFTF9MRVRURVIsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkNPTlNFTlRfTFRSLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5EQVRBX1BST1RFQ1RfQ09SUkVTUCxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuQ09SUl9QQVRFTlRfTUVELFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5GT1JNX0lWLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5GT1JNX1YsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLklOSVRJQUwsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLk1FRVRJTkdfTUlOVVRFUyxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuQUxMRUdBVElPTl9OT1RJQ0UsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBPU1RfQ0xFQVJBTkNFX0RBVEEsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkNMSU5fQ0xBUklGX1JFU1BPTlNFLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5FTUFJTF9SUV9SRVNQT05TRSxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuSFNDX1JRX1JFU1BPTlNFLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5RSFNDX1JRX1JFU1BPTlNFLCAvL1Jlc3BvbnNlIHRvIFF1YWxpdHkgJiBIdW1hbiBTYWZldHkgQ2xhcmlmaWNhdGlvbiBSZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkNIU0NfUlFfUkVTUE9OU0UsIC8vIFJlc3BvbnNlIHRvIENsaW5pY2FsICYgSHVtYW4gU2FmZXR5IENsYXJpZmljYXRpb24gUmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5RQ0hTQ19SUV9SRVNQT05TRSwgLy8gUmVzcG9uc2UgdG8gUXVhbGl0eSwgQ2xpbmljYWwgYW5kIEh1bWFuIFNhZmV0eSBDbGFyaWZpY2F0aW9uIFJlcXVlc3RcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuTEFCRUxfQ0xBUklGX1JFU1BPTlNFLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5OT0RfUkVTUE9OU0UsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLk5PTl9SRVNQT05TRSxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUFJPQ0VTU0lOR19DTEFSSUZfUkVTUE9OU0UsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlFVQUxfQ0xJTl9DTEFSSUZfUkVTUE9OU0UsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlFVQUxfQ0xBUklGX1JFU1BPTlNFLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5TQ1JFRU5JTkdfQUNDRVBUX1JFU1BPTlNFLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5TQ1JFRU5JTkdfQ0xBUklGX1JFU1BPTlNFLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5TRE5fUkVTUE9OU0UsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBIT05FX1JRX1JFU1BPTlNFLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5QUkVTVUJfTUVFVElOR19QS0csXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBSRVNVQl9NRUVUSU5HX1JRLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5VTlNPTElDSVRFRF9EQVRBXHJcbiAgICAgICAgICAgIF0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmdW5jdGlvbiBnZXRDdGFBcnJheSgpIHsgLy9DVEFcclxuICAgICAgICAgICAgcmV0dXJuIChbXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkFETUlOSVNUUkFUSVZFLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5DQU5DRUxfTEVUVEVSLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5JTklUSUFMLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5QT1NUX0NMRUFSQU5DRV9EQVRBLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5SRUNPTl9ERUNJU19MVFJfSU5URU5ULFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5SRUNPTl9ERUNJU19PVEhFUl9JTkZPLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5SRUNPTl9ERUNJU19SUV9SRUNPTixcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuQ0xJTl9DTEFSSUZfUkVTUE9OU0UsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkVNQUlMX1JRX1JFU1BPTlNFLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5OT0xfUkVTUE9OU0UsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBST0NFU1NJTkdfQ0xBUklGX1JFU1BPTlNFLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5RVUFMX0NMSU5fQ0xBUklGX1JFU1BPTlNFLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5RVUFMX0NMQVJJRl9SRVNQT05TRSxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuU0NSRUVOSU5HX0NMQVJJRl9SRVNQT05TRSxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUEhPTkVfUlFfUkVTUE9OU0UsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlVOU09MSUNJVEVEX0RBVEEsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkNUTl9BRE1JTklTVFJBVElWRSxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuQ1ROX0FQUEVORElYLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5DVE5fQ09OVEFDVCxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuQ1ROX0RBVEEsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkNUTl9ERUFSLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5DVE5fRElMVUVOVCxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuQ1ROX0RSVUdfUFJPRCxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuQ1ROX0RSVUdfU1VCUyxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuQ1ROX0VOUk9MTE1FTlQsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkNUTl9FVEhJQ1MsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkNUTl9JTVBEX1VQREFURSxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuQ1ROX0lORk9STUVELFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5DVE5fRk9STV9CUk9DX1VQREFURVMsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkNUTl9JTlZFU1RJR0FUT1IsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkNUTl9ORVdfTUFOVUZBQ1RVUklORyxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuQ1ROX05FV19QS0csXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkNUTl9ORVdfUUMsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkNUTl9ORVdfU1VNTV9BREYsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkNUTl9QQUNLQUdJTkdfTEFCRUxMSU5HLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5DVE5fUFJPVE9DT0xfSU5GT19VUERBVEUsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkNUTl9QUk9UT0NPTF9VUERBVEUsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkNUTl9RT1MsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkNUTl9SRUZVU0FMUyxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuQ1ROX1JFR1VMQVRPUlksXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkNUTl9SRVNQT05TRSxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuQ1ROX1NBRkVUWSxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuQ1ROX1NIRUxGX1BELFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5DVE5fU0hFTEZfRFMsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkNUTl9TSVRFLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5DVE5fU09VUkNFLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5DVE5fU1RSQUlOLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5DVE5fU1RVRFlfQ09NUExFVElPTixcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuQ1ROX1NUVURZX0RJU0MsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkNUTl9TVFVEWV9FWFQsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkNUTl9TVFVEWV9TVVMsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkNUTl9UUkFOU19PV05cclxuICAgICAgICAgICAgXSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZ1bmN0aW9uIGdldEN0YV9hQXJyYXkoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAoW1xyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5BRE1JTklTVFJBVElWRSxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuQ0FOQ0VMX0xFVFRFUixcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUE9TVF9DTEVBUkFOQ0VfREFUQSxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUkVDT05fREVDSVNfTFRSX0lOVEVOVCxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUkVDT05fREVDSVNfT1RIRVJfSU5GTyxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUkVDT05fREVDSVNfUlFfUkVDT04sXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkNMSU5fQ0xBUklGX1JFU1BPTlNFLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5FTUFJTF9SUV9SRVNQT05TRSxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuTk9MX1JFU1BPTlNFLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5QUk9DRVNTSU5HX0NMQVJJRl9SRVNQT05TRSxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUVVBTF9DTElOX0NMQVJJRl9SRVNQT05TRSxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUVVBTF9DTEFSSUZfUkVTUE9OU0UsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlNDUkVFTklOR19DTEFSSUZfUkVTUE9OU0UsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBIT05FX1JRX1JFU1BPTlNFLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5VTlNPTElDSVRFRF9EQVRBLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5DTElOSUNBTCxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuQ0xJTklDQUxfUVVBTElUWSxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUVVBTElUWVxyXG4gICAgICAgICAgICBdKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZnVuY3Rpb24gZ2V0UHJlQ3RhQXJyYXkoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAoW1xyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5DQU5DRUxfTEVUVEVSLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5NRUVUSU5HX01JTlVURVMsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkVNQUlMX1JRX1JFU1BPTlNFLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5QUk9DRVNTSU5HX0NMQVJJRl9SRVNQT05TRSxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUEhPTkVfUlFfUkVTUE9OU0UsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBSRVNVQl9NRUVUSU5HX1BLRyxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUFJFU1VCX01FRVRJTkdfUlFcclxuICAgICAgICAgICAgXSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZ1bmN0aW9uIGdldFZfTGV2ZWwzQXJyYXkoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAoW1xyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5DQU5DRUxfTEVUVEVSLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5NRUVUSU5HX01JTlVURVMsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkVNQUlMX1JRX1JFU1BPTlNFLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5QUk9DRVNTSU5HX0NMQVJJRl9SRVNQT05TRSxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUEhPTkVfUlFfUkVTUE9OU0UsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlVOU09MSUNJVEVEX0RBVEEsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLllFQVJfTElTVF9PRl9DSEFOR0VcclxuICAgICAgICAgICAgXSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZ1bmN0aW9uIGdldFZfTXBkaW5BcnJheSgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIChbXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkNBTkNFTF9MRVRURVIsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLk1FRVRJTkdfTUlOVVRFUyxcclxuICAgICAgICAgICAgICAgIC8vIHZtLmFsbEFjdGl2aXRpZXMuRU1BSUxfUlFfUkVTUE9OU0UsXHJcbiAgICAgICAgICAgICAgICAvLyB2bS5hbGxBY3Rpdml0aWVzLlBST0NFU1NJTkdfQ0xBUklGX1JFU1BPTlNFLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5QSE9ORV9SUV9SRVNQT05TRSxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUFJFU1VCX01FRVRJTkdfUEtHLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5QUkVTVUJfTUVFVElOR19SUSxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuVU5TT0xJQ0lURURfREFUQVxyXG4gICAgICAgICAgICBdKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZnVuY3Rpb24gZ2V0Vl9NcG5jQXJyYXkoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAoW1xyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5DQU5DRUxfTEVUVEVSLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5NRUVUSU5HX01JTlVURVMsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkVNQUlMX1JRX1JFU1BPTlNFLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5QUk9DRVNTSU5HX0NMQVJJRl9SRVNQT05TRSxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUEhPTkVfUlFfUkVTUE9OU0UsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBSRVNVQl9NRUVUSU5HX1BLRyxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUFJFU1VCX01FRVRJTkdfUlEsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlVOU09MSUNJVEVEX0RBVEFcclxuICAgICAgICAgICAgXSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZ1bmN0aW9uIGdldFZfTXBuZHNBcnJheSgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIChbXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkNBTkNFTF9MRVRURVIsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLk1FRVRJTkdfTUlOVVRFUyxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuRU1BSUxfUlFfUkVTUE9OU0UsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBST0NFU1NJTkdfQ0xBUklGX1JFU1BPTlNFLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5QSE9ORV9SUV9SRVNQT05TRSxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUFJFU1VCX01FRVRJTkdfUEtHLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5QUkVTVUJfTUVFVElOR19SUSxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuVU5TT0xJQ0lURURfREFUQVxyXG4gICAgICAgICAgICBdKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZnVuY3Rpb24gZ2V0Vl9NcHNuZHNBcnJheSgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIChbXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkNBTkNFTF9MRVRURVIsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLk1FRVRJTkdfTUlOVVRFUyxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuRU1BSUxfUlFfUkVTUE9OU0UsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBST0NFU1NJTkdfQ0xBUklGX1JFU1BPTlNFLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5QSE9ORV9SUV9SRVNQT05TRSxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUFJFU1VCX01FRVRJTkdfUEtHLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5QUkVTVUJfTUVFVElOR19SUSxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuVU5TT0xJQ0lURURfREFUQVxyXG4gICAgICAgICAgICBdKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZnVuY3Rpb24gZ2V0Vl9NcGFuZHNBcnJheSgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIChbXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkNBTkNFTF9MRVRURVIsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLk1FRVRJTkdfTUlOVVRFUyxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUEhPTkVfUlFfUkVTUE9OU0UsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBSRVNVQl9NRUVUSU5HX1BLRyxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUFJFU1VCX01FRVRJTkdfUlEsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlVOU09MSUNJVEVEX0RBVEFcclxuICAgICAgICAgICAgXSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZ1bmN0aW9uIGdldFZfTXBzYW5kc0FycmF5KCkge1xyXG4gICAgICAgICAgICByZXR1cm4gKFtcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuQ0FOQ0VMX0xFVFRFUixcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuTUVFVElOR19NSU5VVEVTLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5QSE9ORV9SUV9SRVNQT05TRSxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUFJFU1VCX01FRVRJTkdfUEtHLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5QUkVTVUJfTUVFVElOR19SUSxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuVU5TT0xJQ0lURURfREFUQVxyXG4gICAgICAgICAgICBdKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZnVuY3Rpb24gZ2V0Vl9SY2NBcnJheSgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIChbXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlJFUV9BQ0NFUFRFRFxyXG4gICAgICAgICAgICBdKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZnVuY3Rpb24gZ2V0Vl9OY0FycmF5KCkge1xyXG4gICAgICAgICAgICByZXR1cm4gKFtcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuQURNSU5JU1RSQVRJVkUsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkNBTkNFTF9MRVRURVIsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLk1FRVRJTkdfTUlOVVRFUyxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUE9TVF9DTEVBUkFOQ0VfREFUQSxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUE9TVF9OT0NfQ0hBTkdFLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5DTElOX0NMQVJJRl9SRVNQT05TRSxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuRU1BSUxfUlFfUkVTUE9OU0UsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkhTQ19SUV9SRVNQT05TRSxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUUhTQ19SUV9SRVNQT05TRSwgLy9SZXNwb25zZSB0byBRdWFsaXR5ICYgSHVtYW4gU2FmZXR5IENsYXJpZmljYXRpb24gUmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5DSFNDX1JRX1JFU1BPTlNFLCAvLyBSZXNwb25zZSB0byBDbGluaWNhbCAmIEh1bWFuIFNhZmV0eSBDbGFyaWZpY2F0aW9uIFJlcXVlc3RcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUUNIU0NfUlFfUkVTUE9OU0UsIC8vIFJlc3BvbnNlIHRvIFF1YWxpdHksIENsaW5pY2FsIGFuZCBIdW1hbiBTYWZldHkgQ2xhcmlmaWNhdGlvbiBSZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkxBQkVMX0NMQVJJRl9SRVNQT05TRSxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuTk9EX1JFU1BPTlNFLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5OT0xfUkVTUE9OU0UsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBST0NFU1NJTkdfQ0xBUklGX1JFU1BPTlNFLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5RVUFMX0NMSU5fQ0xBUklGX1JFU1BPTlNFLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5RVUFMX0NMQVJJRl9SRVNQT05TRSxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuU0NSRUVOSU5HX0FDQ0VQVF9SRVNQT05TRSxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuU0NSRUVOSU5HX0NMQVJJRl9SRVNQT05TRSxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuU0ROX1JFU1BPTlNFLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5QSE9ORV9SUV9SRVNQT05TRSxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUFJFU1VCX01FRVRJTkdfUEtHLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5QUkVTVUJfTUVFVElOR19SUSxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuVU5TT0xJQ0lURURfREFUQVxyXG4gICAgICAgICAgICBdKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGdldEJfTmNBcnJheSgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIChbXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkFETUlOSVNUUkFUSVZFLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5DQU5DRUxfTEVUVEVSLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5DT01NRU5UU19TVU1NQVJZX0JBU0lTLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5NRUVUSU5HX01JTlVURVMsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBPU1RfQ0xFQVJBTkNFX0RBVEEsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBPU1RfTk9DX0NIQU5HRSxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUFJJU1RJTkVfUE1fMkxBTkcsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlJFQ09OX0RFQ0lTX0xUUl9JTlRFTlQsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlJFQ09OX0RFQ0lTX1JRX1JFQ09OLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5SRUNPTl9ERUNJU19PVEhFUl9JTkZPLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5DTElOX0NMQVJJRl9SRVNQT05TRSxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuRU1BSUxfUlFfUkVTUE9OU0UsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkxBQkVMX0NMQVJJRl9SRVNQT05TRSxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuTk9MX1JFU1BPTlNFLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5QUk9DRVNTSU5HX0NMQVJJRl9SRVNQT05TRSxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUVVBTF9DTElOX0NMQVJJRl9SRVNQT05TRSxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUVVBTF9DTEFSSUZfUkVTUE9OU0UsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlNDUkVFTklOR19BQ0NFUFRfUkVTUE9OU0UsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlNDUkVFTklOR19DTEFSSUZfUkVTUE9OU0UsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlNETl9SRVNQT05TRSxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUEhPTkVfUlFfUkVTUE9OU0UsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkxBQkVMX1BSRUFQUFJPVkFMXzJMQU5HLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5QUkVTVUJfTUVFVElOR19QS0csXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBSRVNVQl9NRUVUSU5HX1JRLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5VTlNPTElDSVRFRF9EQVRBLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5TRUNPTkRfTEFOR19QTVxyXG4gICAgICAgICAgICAgICAgXSk7XHJcbiAgICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZ2V0TmNBcnJheSgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIChbXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkNBTkNFTF9MRVRURVIsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLk1FRVRJTkdfTUlOVVRFUyxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUE9TVF9DTEVBUkFOQ0VfREFUQSxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUFJJU1RJTkVfUE1fMkxBTkcsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlJFQ09OX0RFQ0lTX0xUUl9JTlRFTlQsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlJFQ09OX0RFQ0lTX1JRX1JFQ09OLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5SRUNPTl9ERUNJU19PVEhFUl9JTkZPLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5DTElOX0NMQVJJRl9SRVNQT05TRSxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuTk9MX1JFU1BPTlNFLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5QUk9DRVNTSU5HX0NMQVJJRl9SRVNQT05TRSxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUVVBTF9DTElOX0NMQVJJRl9SRVNQT05TRSxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUVVBTF9DTEFSSUZfUkVTUE9OU0UsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlNDUkVFTklOR19BQ0NFUFRfUkVTUE9OU0UsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlNDUkVFTklOR19DTEFSSUZfUkVTUE9OU0UsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlNETl9SRVNQT05TRSxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUEhPTkVfUlFfUkVTUE9OU0UsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkxBQkVMX1BSRUFQUFJPVkFMXzJMQU5HLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5QUkVTVUJfTUVFVElOR19QS0csXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBSRVNVQl9NRUVUSU5HX1JRLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5VTlNPTElDSVRFRF9EQVRBLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5TRUNPTkRfTEFOR19QTVxyXG4gICAgICAgICAgICBdKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGdldFZfTmRzQXJyYXkoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAoW1xyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5BRE1JTklTVFJBVElWRSxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuQ0FOQ0VMX0xFVFRFUixcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuQ09OU0VOVF9MVFIsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkRBVEFfUFJPVEVDVF9DT1JSRVNQLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5DT1JSX1BBVEVOVF9NRUQsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkZPUk1fSVYsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkZPUk1fVixcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuSU5JVElBTCxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuTUVFVElOR19NSU5VVEVTLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5BTExFR0FUSU9OX05PVElDRSxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUE9TVF9DTEVBUkFOQ0VfREFUQSxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuQ0xJTl9DTEFSSUZfUkVTUE9OU0UsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkVNQUlMX1JRX1JFU1BPTlNFLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5IU0NfUlFfUkVTUE9OU0UsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlFIU0NfUlFfUkVTUE9OU0UsIC8vUmVzcG9uc2UgdG8gUXVhbGl0eSAmIEh1bWFuIFNhZmV0eSBDbGFyaWZpY2F0aW9uIFJlcXVlc3RcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuQ0hTQ19SUV9SRVNQT05TRSwgLy8gUmVzcG9uc2UgdG8gQ2xpbmljYWwgJiBIdW1hbiBTYWZldHkgQ2xhcmlmaWNhdGlvbiBSZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlFDSFNDX1JRX1JFU1BPTlNFLCAvLyBSZXNwb25zZSB0byBRdWFsaXR5LCBDbGluaWNhbCBhbmQgSHVtYW4gU2FmZXR5IENsYXJpZmljYXRpb24gUmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5MQUJFTF9DTEFSSUZfUkVTUE9OU0UsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLk5PRF9SRVNQT05TRSxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUFJPQ0VTU0lOR19DTEFSSUZfUkVTUE9OU0UsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlFVQUxfQ0xJTl9DTEFSSUZfUkVTUE9OU0UsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlFVQUxfQ0xBUklGX1JFU1BPTlNFLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5TQ1JFRU5JTkdfQUNDRVBUX1JFU1BPTlNFLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5TQ1JFRU5JTkdfQ0xBUklGX1JFU1BPTlNFLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5TRE5fUkVTUE9OU0UsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBIT05FX1JRX1JFU1BPTlNFLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5QUkVTVUJfTUVFVElOR19QS0csXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBSRVNVQl9NRUVUSU5HX1JRLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5VTlNPTElDSVRFRF9EQVRBXHJcbiAgICAgICAgICAgIF0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmdW5jdGlvbiBnZXRWX1BzdXJQdkFycmF5KCkge1xyXG4gICAgICAgICAgICByZXR1cm4gKFtcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuQ0FOQ0VMX0xFVFRFUixcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuRk9SX1BFUklPRCxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuTUVFVElOR19NSU5VVEVTLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5DTElOX0NMQVJJRl9SRVNQT05TRSxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuRU1BSUxfUlFfUkVTUE9OU0UsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkhTQ19SUV9SRVNQT05TRSxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUUhTQ19SUV9SRVNQT05TRSwgLy9SZXNwb25zZSB0byBRdWFsaXR5ICYgSHVtYW4gU2FmZXR5IENsYXJpZmljYXRpb24gUmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5DSFNDX1JRX1JFU1BPTlNFLCAvLyBSZXNwb25zZSB0byBDbGluaWNhbCAmIEh1bWFuIFNhZmV0eSBDbGFyaWZpY2F0aW9uIFJlcXVlc3RcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUUNIU0NfUlFfUkVTUE9OU0UsIC8vIFJlc3BvbnNlIHRvIFF1YWxpdHksIENsaW5pY2FsIGFuZCBIdW1hbiBTYWZldHkgQ2xhcmlmaWNhdGlvbiBSZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBST0NFU1NJTkdfQ0xBUklGX1JFU1BPTlNFLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5QSE9ORV9SUV9SRVNQT05TRSxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuVU5TT0xJQ0lURURfREFUQVxyXG4gICAgICAgICAgICBdKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZnVuY3Rpb24gZ2V0Vl9TYW5kc0FycmF5KCkge1xyXG4gICAgICAgICAgICByZXR1cm4gKFtcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuQURNSU5JU1RSQVRJVkUsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkNBTkNFTF9MRVRURVIsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkNPTlNFTlRfTFRSLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5EQVRBX1BST1RFQ1RfQ09SUkVTUCxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuQ09SUl9QQVRFTlRfTUVELFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5GT1JNX0lWLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5GT1JNX1YsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLk1FRVRJTkdfTUlOVVRFUyxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuQUxMRUdBVElPTl9OT1RJQ0UsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBPU1RfQ0xFQVJBTkNFX0RBVEEsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBPU1RfTk9DX0NIQU5HRSxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuQ0xJTl9DTEFSSUZfUkVTUE9OU0UsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkVNQUlMX1JRX1JFU1BPTlNFLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5IU0NfUlFfUkVTUE9OU0UsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlFIU0NfUlFfUkVTUE9OU0UsIC8vUmVzcG9uc2UgdG8gUXVhbGl0eSAmIEh1bWFuIFNhZmV0eSBDbGFyaWZpY2F0aW9uIFJlcXVlc3RcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuQ0hTQ19SUV9SRVNQT05TRSwgLy8gUmVzcG9uc2UgdG8gQ2xpbmljYWwgJiBIdW1hbiBTYWZldHkgQ2xhcmlmaWNhdGlvbiBSZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlFDSFNDX1JRX1JFU1BPTlNFLCAvLyBSZXNwb25zZSB0byBRdWFsaXR5LCBDbGluaWNhbCBhbmQgSHVtYW4gU2FmZXR5IENsYXJpZmljYXRpb24gUmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5MQUJFTF9DTEFSSUZfUkVTUE9OU0UsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLk5PRF9SRVNQT05TRSxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuTk9OX1JFU1BPTlNFLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5QUk9DRVNTSU5HX0NMQVJJRl9SRVNQT05TRSxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUVVBTF9DTElOX0NMQVJJRl9SRVNQT05TRSxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUVVBTF9DTEFSSUZfUkVTUE9OU0UsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlNDUkVFTklOR19BQ0NFUFRfUkVTUE9OU0UsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlNDUkVFTklOR19DTEFSSUZfUkVTUE9OU0UsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlNETl9SRVNQT05TRSxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUEhPTkVfUlFfUkVTUE9OU0UsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBSRVNVQl9NRUVUSU5HX1BLRyxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUFJFU1VCX01FRVRJTkdfUlEsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlVOU09MSUNJVEVEX0RBVEFcclxuICAgICAgICAgICAgXSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZ1bmN0aW9uIGdldFZfU25kc0FycmF5KCkge1xyXG4gICAgICAgICAgICByZXR1cm4gKFtcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuQURNSU5JU1RSQVRJVkUsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkNBTkNFTF9MRVRURVIsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkNPTlNFTlRfTFRSLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5EQVRBX1BST1RFQ1RfQ09SUkVTUCxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuQ09SUl9QQVRFTlRfTUVELFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5GT1JNX0lWLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5GT1JNX1YsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLk1FRVRJTkdfTUlOVVRFUyxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuQUxMRUdBVElPTl9OT1RJQ0UsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBPU1RfQ0xFQVJBTkNFX0RBVEEsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBPU1RfTk9DX0NIQU5HRSxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuQ0xJTl9DTEFSSUZfUkVTUE9OU0UsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkVNQUlMX1JRX1JFU1BPTlNFLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5IU0NfUlFfUkVTUE9OU0UsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlFIU0NfUlFfUkVTUE9OU0UsIC8vUmVzcG9uc2UgdG8gUXVhbGl0eSAmIEh1bWFuIFNhZmV0eSBDbGFyaWZpY2F0aW9uIFJlcXVlc3RcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuQ0hTQ19SUV9SRVNQT05TRSwgLy8gUmVzcG9uc2UgdG8gQ2xpbmljYWwgJiBIdW1hbiBTYWZldHkgQ2xhcmlmaWNhdGlvbiBSZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlFDSFNDX1JRX1JFU1BPTlNFLCAvLyBSZXNwb25zZSB0byBRdWFsaXR5LCBDbGluaWNhbCBhbmQgSHVtYW4gU2FmZXR5IENsYXJpZmljYXRpb24gUmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5MQUJFTF9DTEFSSUZfUkVTUE9OU0UsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLk5PRF9SRVNQT05TRSxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuTk9OX1JFU1BPTlNFLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5QUk9DRVNTSU5HX0NMQVJJRl9SRVNQT05TRSxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUVVBTF9DTElOX0NMQVJJRl9SRVNQT05TRSxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUVVBTF9DTEFSSUZfUkVTUE9OU0UsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlNDUkVFTklOR19BQ0NFUFRfUkVTUE9OU0UsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlNDUkVFTklOR19DTEFSSUZfUkVTUE9OU0UsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlNETl9SRVNQT05TRSxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUEhPTkVfUlFfUkVTUE9OU0UsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBSRVNVQl9NRUVUSU5HX1BLRyxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUFJFU1VCX01FRVRJTkdfUlEsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlVOU09MSUNJVEVEX0RBVEFcclxuICAgICAgICAgICAgXSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZ1bmN0aW9uIGdldFZfVWRyYUFycmF5KCkge1xyXG4gICAgICAgICAgICByZXR1cm4gKFtcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuQ0FOQ0VMX0xFVFRFUixcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuTUVFVElOR19NSU5VVEVTLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5ESU5fRElTQ09OVElOVUVELFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5OT1RJRklDQVRJT05fSU5URVJSVVBUX1NBTEUsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkVNQUlMX1JRX1JFU1BPTlNFLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5RSFNDX1JRX1JFU1BPTlNFLCAvL1Jlc3BvbnNlIHRvIFF1YWxpdHkgJiBIdW1hbiBTYWZldHkgQ2xhcmlmaWNhdGlvbiBSZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkNIU0NfUlFfUkVTUE9OU0UsIC8vIFJlc3BvbnNlIHRvIENsaW5pY2FsICYgSHVtYW4gU2FmZXR5IENsYXJpZmljYXRpb24gUmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5RQ0hTQ19SUV9SRVNQT05TRSwgLy8gUmVzcG9uc2UgdG8gUXVhbGl0eSwgQ2xpbmljYWwgYW5kIEh1bWFuIFNhZmV0eSBDbGFyaWZpY2F0aW9uIFJlcXVlc3RcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUFJPQ0VTU0lOR19DTEFSSUZfUkVTUE9OU0UsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBIT05FX1JRX1JFU1BPTlNFLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5QUkVTVUJfTUVFVElOR19QS0csXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBSRVNVQl9NRUVUSU5HX1JRLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5VTlNPTElDSVRFRF9EQVRBXHJcbiAgICAgICAgICAgIF0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmdW5jdGlvbiBfZ2V0Q29WaXIxOUFycmF5KCkge1xyXG4gICAgICAgICAgICByZXR1cm4gW3ZtLmFsbEFjdGl2aXRpZXMuQ09WSVJfMTldXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZ1bmN0aW9uIF9nZXRDb1ZpcjE5QW1kQXJyYXkoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBbdm0uYWxsQWN0aXZpdGllcy5DT1ZJUl8xOUFNRF1cclxuICAgICAgICB9XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogR2V0cyB0aGUgYWN0aXZpdHkgbGVhZCBhcnJheS4gSGFyZCBjb2RlZCBhcyB0aGUgYmlvbG9naWNhbCBlbnRyeSBoYXMgYnVzaW5lc3MgbG9naWNcclxuICAgICAgICAgKiBAcmV0dXJucyB7c3RyaW5nW119XHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBmdW5jdGlvbiBfZ2V0QWN0aXZpdHlMZWFkQXJyYXkoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgICAgICBbXHJcbiAgICAgICAgICAgICAgICAgICAgdm0uUEhBUk1BLCAvL1BoYXJtYWNldXRpY2FsXHJcbiAgICAgICAgICAgICAgICAgICAgdm0uQklPTE9HSUNBTCwgLy9CaW9sb2dpY2FsXHJcbiAgICAgICAgICAgICAgICAgICAgdm0uUE9TVE1BUktFVCwgLy9Qb3N0LU1hcmtldCBWaWdpbGFuY2VcclxuICAgICAgICAgICAgICAgICAgICB2bS5DT05TVU1FUkhFQUxUSCAvL0NvbnN1bWVyIEhlYWx0aCBQcm9kdWN0c1xyXG4gICAgICAgICAgICAgICAgXVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gX2dldEFjdGl2aXR5TGVhZEQyMkFycmF5KCkge1xyXG4gICAgICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICAgICAgW1xyXG4gICAgICAgICAgICAgICAgICAgIHZtLlBIQVJNQSwgLy9QaGFybWFjZXV0aWNhbCAtIEIxNC0yMDE2MDMwMS0wOVxyXG4gICAgICAgICAgICAgICAgICAgIHZtLlBPU1RNQVJLRVQsIC8vUG9zdC1NYXJrZXQgVmlnaWxhbmNlIC0gQjE0LTIwMTYwMzAxLTEwXHJcbiAgICAgICAgICAgICAgICAgICAgdm0uQ09OU1VNRVJIRUFMVEggLy9Db25zdW1lciBIZWFsdGggUHJvZHVjdHMgLVx0QjE0LTIwMTYwMzAxLTA2XHJcbiAgICAgICAgICAgICAgICBdXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBfZ2V0QWN0aXZpdHlMZWFkRDIxQXJyYXkoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgICAgICBbXHJcbiAgICAgICAgICAgICAgICAgICAgdm0uQklPTE9HSUNBTCwgLy9CaW9sb2dpY2FsIC0gQjE0LTIwMTYwMzAxLTAyXHJcbiAgICAgICAgICAgICAgICAgICAgdm0uUE9TVE1BUktFVCAgLy9Qb3N0LU1hcmtldCBWaWdpbGFuY2UgLSBCMTQtMjAxNjAzMDEtMTBcclxuICAgICAgICAgICAgICAgIF1cclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZnVuY3Rpb24gX2dldEFjdGl2aXR5TGVhZEQyNEFycmF5KCkge1xyXG4gICAgICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICAgICAgW1xyXG4gICAgICAgICAgICAgICAgICAgIHZtLlZFVEVSSU5BUllcclxuICAgICAgICAgICAgICAgIF1cclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZnVuY3Rpb24gX2dldEFjdGl2aXR5TGVhZEQyNkFycmF5KCkge1xyXG4gICAgICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICAgICAgW1xyXG4gICAgICAgICAgICAgICAgICAgIHZtLkNMSU5JQ0FMX0JJTyxcclxuICAgICAgICAgICAgICAgICAgICB2bS5DTElOSUNBTF9QSEFcclxuICAgICAgICAgICAgICAgIF1cclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFJldHVybnMgdGhlIGJpb2xvZ2ljYWwgQWN0aXZpdHkgTGVhZCB2YWx1ZVxyXG4gICAgICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gX2dldFBoYXJtYWNldXRpY2FsKCl7XHJcbiAgICAgICAgICAgIHJldHVybiB2bS5EMjI7IC8vRDIxIC0gUGhhcm1hY2V1dGljYWxcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIF9nZXRCaW9sb2dpYygpe1xyXG4gICAgICAgICAgICByZXR1cm4gdm0uRDIxOyAvLyBEMjIgLSBCaW9sb2dpY1xyXG4gICAgICAgIH1cclxuICAgICAgICBmdW5jdGlvbiBfZ2V0VmV0ZXJpbmFyeSgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHZtLkQyNDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZnVuY3Rpb24gX2dldENsaW5pY2FsKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdm0uRDI2O1xyXG4gICAgICAgIH1cclxuICAgICAgICBmdW5jdGlvbiBfZ2V0QmlvbG9naWNhbExlYWQoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB2bS5CSU9MT0dJQ0FMO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmdW5jdGlvbiBfZ2V0UGhhcm1hTGVhZCgpe1xyXG4gICAgICAgICAgICByZXR1cm4gdm0uUEhBUk1BO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmdW5jdGlvbiBfZ2V0UG9zdE1hcmtldExlYWQoKXtcclxuICAgICAgICAgICAgcmV0dXJuIHZtLlBPU1RNQVJLRVQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZ1bmN0aW9uIF9nZXRDb25zdW1IZWFsdGhMZWFkKCl7XHJcbiAgICAgICAgICAgIHJldHVybiB2bS5DT05TVU1FUkhFQUxUSDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZnVuY3Rpb24gX2dldFZldGVyaW5hcnlMZWFkKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdm0uVkVURVJJTkFSWTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZnVuY3Rpb24gX2dldENsaW5pY2FsQmlvTGVhZCgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHZtLkNMSU5JQ0FMX0JJTztcclxuICAgICAgICB9XHJcbiAgICAgICAgZnVuY3Rpb24gX2dldENsaW5pY2FsUGhhTGVhZCgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHZtLkNMSU5JQ0FMX1BIQTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZnVuY3Rpb24gX2dldFNoZWxmTGlmZVVuaXRzQXJyYXkoKXtcclxuICAgICAgICAgICAgcmV0dXJuKFxyXG4gICAgICAgICAgICAgICAgW1xyXG4gICAgICAgICAgICAgICAgICAgIHtcImlkXCI6XCJZUlwiLFwiZW5cIjpcIlllYXJzXCIsXCJmclwiOlwiQW5uw6llc1wifSxcclxuICAgICAgICAgICAgICAgICAgICB7XCJpZFwiOlwiTU9cIixcImVuXCI6XCJNb250aHNcIixcImZyXCI6XCJNb2lzXCJ9LFxyXG4gICAgICAgICAgICAgICAgICAgIHtcImlkXCI6XCJEQVwiLFwiZW5cIjpcIkRheXNcIixcImZyXCI6XCJKb3Vyc1wifSxcclxuICAgICAgICAgICAgICAgICAgICB7XCJpZFwiOlwiSFJcIixcImVuXCI6XCJIb3Vyc1wiLFwiZnJcIjpcIkhldXJlc1wifSxcclxuICAgICAgICAgICAgICAgICAgICB7XCJpZFwiOlwiTUlcIixcImVuXCI6XCJNaW51dGVzXCIsXCJmclwiOlwiTWludXRlc1wifVxyXG4gICAgICAgICAgICAgICAgXVxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59KSgpO1xyXG4iLCIvKipcclxuICogQ3JlYXRlZCBieSBoY3VzZXIgb24gMDcvMDYvMjAxNi5cclxuICovXHJcbihmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ2hwZmJDb25zdGFudHMnLCBbXSk7XHJcblxyXG4gICAgYW5ndWxhci5tb2R1bGUoJ2hwZmJDb25zdGFudHMnKVxyXG4gICAgICAgIC5jb25zdGFudCgnU09GVFdBUkVfVkVSU0lPTicsJzQuMS4wJylcclxuICAgICAgICAuY29uc3RhbnQoJ1BST0QnLCAnUFJPRCcpXHJcbiAgICAgICAgLmNvbnN0YW50KCdDQU5BREEnLCdDQU4nKVxyXG4gICAgICAgIC5jb25zdGFudCgnT1RIRVInLCAnT1RIRVInKVxyXG4gICAgICAgIC5jb25zdGFudCgnWUVTJywgJ1knKVxyXG4gICAgICAgIC5jb25zdGFudCgnTk8nLCAnTicpXHJcbiAgICAgICAgLmNvbnN0YW50KCdVU0EnLCdVU0EnKVxyXG4gICAgICAgIC5jb25zdGFudChcIlVOS05PV05cIixcIlVOS05PV05cIilcclxuICAgICAgICAuY29uc3RhbnQoXCJORVdcIixcIk5ld1wiKVxyXG4gICAgICAgIC5jb25zdGFudChcIkVYSVNUSU5HXCIsXCJFeGlzdGluZ1wiKVxyXG4gICAgICAgIC5jb25zdGFudChcIkVOR0xJU0hcIixcImVuXCIpXHJcbiAgICAgICAgLmNvbnN0YW50KFwiRlJFTkNIXCIsXCJmclwiKVxyXG4gICAgICAgIC5jb25zdGFudChcIk5FV19UWVBFXCIsXCJORVdcIilcclxuICAgICAgICAuY29uc3RhbnQoXCJBUFBST1ZFRF9UWVBFXCIsXCJGSU5BTFwiKVxyXG4gICAgICAgIC5jb25zdGFudChcIkRFUFJFQ0FURURfQVBQUk9WRURfVFlQRVwiLFwiQVBQUk9WRURcIikgLy9jaGFuZ2UgZnJvbSB0aGUgcGlsb3QgTWFyY2ggMjAsMjAxOC4gTmVlZGVkIGZvciBiYWNrd2FyZHMgY29tcGF0LlxyXG4gICAgICAgIC5jb25zdGFudChcIkFNRU5EX1RZUEVcIixcIkFNRU5EXCIpXHJcbiAgICAgICAgLmNvbnN0YW50KFwiSU5URVJOQUxfVFlQRVwiLFwiSU5UXCIpXHJcbiAgICAgICAgLmNvbnN0YW50KFwiRVhURVJOQUxfVFlQRVwiLFwiRVhUXCIpXHJcbiAgICAgICAgLmNvbnN0YW50KFwiUEhBUk1BX1RZUEVcIiwgXCJQSEFSTUFcIilcclxuICAgICAgICAuY29uc3RhbnQoXCJSRUxBVElWRV9GT0xERVJfREFUQVwiLFwiLi4vZGF0YS9cIilcclxuICAgICAgICAuY29uc3RhbnQoXCJDU1BfWFNMXCIsXCJDU1BfRW5yb2xtZW50LnhzbFwiKVxyXG4gICAgICAgIC5jb25zdGFudChcIkhDU0NcIixcImhjc2NcIilcclxuICAgICAgICAuY29uc3RhbnQoXCJYTUxcIixcInhtbFwiKVxyXG4gICAgICAgIC5jb25zdGFudChcIlhTTF9QUkVGSVhcIixcImh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9IZWFsdGhDYW5hZGEvSFBGQi9tYXN0ZXIvUmVndWxhdG9yeS1FbnJvbG1lbnQtUHJvY2Vzcy1SRVAvdl8yXzIvU3R5bGUtU2hlZXRzL1wiKVxyXG4gICAgICAgIC5jb25zdGFudChcIkFEVkFOQ0VfRkVFX1BBWU1FTlRfRU5cIixcImh0dHBzOi8vd3d3LmNhbmFkYS5jYS9jb250ZW50L2RhbS9oYy1zYy9taWdyYXRpb24vaGMtc2MvZGhwLW1wcy9hbHRfZm9ybWF0cy9wZGYvcHJvZHBoYXJtYS9hcHBsaWMtZGVtYW5kZS9mb3JtL2Fkdi1wYS1hdjItZW5nLnBkZlwiKVxyXG4gICAgICAgIC5jb25zdGFudChcIkFEVkFOQ0VfRkVFX1BBWU1FTlRfRlJcIixcImh0dHBzOi8vd3d3LmNhbmFkYS5jYS9jb250ZW50L2RhbS9oYy1zYy9taWdyYXRpb24vaGMtc2MvZGhwLW1wcy9hbHRfZm9ybWF0cy9wZGYvcHJvZHBoYXJtYS9hcHBsaWMtZGVtYW5kZS9mb3JtL2Fkdi1wYS1hdjItZnJhLnBkZlwiKTtcclxufSkoKTsiLCIvKipcclxuICogQ3JlYXRlZCBieSBka2lsdHkgb24gMDcvMDYvMjAxNi5cclxuICpcclxuICovXHJcblxyXG4oZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ2ZpbHRlckxpc3RzJywgWydocGZiQ29uc3RhbnRzJ10pO1xyXG59KSgpO1xyXG5cclxuKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgnZmlsdGVyTGlzdHMnKVxyXG4gICAgICAgIC5maWx0ZXIoJ29yZGVyQnlUcmFuc2xhdGVkQ291bnRyeScsIG9yZGVyQnlUcmFuc2xhdGVkQ291bnRyeSlcclxuICAgICAgICAuZmlsdGVyKCdvcmRlckJ5VHJhbnNsYXRlZCcsIG9yZGVyQnlUcmFuc2xhdGVkKVxyXG4gICAgICAgIC5maWx0ZXIoJ29yZGVyQnlUcmFuc2xhdGVkT3RoZXJGaXJzdCcsIG9yZGVyQnlUcmFuc2xhdGVkT3RoZXJGaXJzdClcclxuICAgICAgICAuZmlsdGVyKCdvcmRlckJ5Q291bnRyeUFuZExhYmVsJywgb3JkZXJCeVRyYW5zbGF0ZWRDb3VudHJ5QW5kTGFiZWwpXHJcbiAgICAgICAgLmZpbHRlcignb3JkZXJCeUxvY2FsZScsX29yZGVyQnlMb2NhbGUpXHJcbiAgICAgICAgLmZpbHRlcignZmluZENvdW50cnlPYmplY3QnLCBmaW5kQ291bnRyeU9iailcclxuICAgICAgICAuZmlsdGVyKCdmaW5kTGlzdEl0ZW1CeUlkJywgX2ZpbmRCeUlkKVxyXG4gICAgICAgIC5maWx0ZXIoJ3NlcXVlbmNlT3JkZXJEZXNjZW5kaW5nJywgc2VxdWVuY2VPcmRlckJ5KTtcclxuXHJcbiAgICBvcmRlckJ5VHJhbnNsYXRlZENvdW50cnkuJGluamVjdCA9IFsnJHRyYW5zbGF0ZScsICckZmlsdGVyJywgJ0NBTkFEQScsICdVU0EnXTtcclxuICAgIG9yZGVyQnlUcmFuc2xhdGVkLiRpbmplY3QgPSBbJyR0cmFuc2xhdGUnLCAnJGZpbHRlciddO1xyXG4gICAgb3JkZXJCeVRyYW5zbGF0ZWRPdGhlckZpcnN0LiRpbmplY3QgPSBbJyR0cmFuc2xhdGUnLCAnJGZpbHRlcicsICdPVEhFUiddO1xyXG4gICAgX2ZpbmRCeUlkLiRpbmplY3QgPSBbJyRmaWx0ZXInXTtcclxuXHJcbiAgICBmdW5jdGlvbiBvcmRlckJ5VHJhbnNsYXRlZENvdW50cnkoJHRyYW5zbGF0ZSwgJGZpbHRlciwgQ0FOQURBLCBVU0EpIHtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGFycmF5LCBvYmpLZXkpIHtcclxuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IFtdO1xyXG4gICAgICAgICAgICB2YXIgdHJhbnNsYXRlZCA9IFtdO1xyXG4gICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goYXJyYXksIGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgdHJhbnNsYXRlZC5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICBrZXk6IHZhbHVlLFxyXG4gICAgICAgICAgICAgICAgICAgIGxhYmVsOiAkdHJhbnNsYXRlLmluc3RhbnQodmFsdWUpXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKENBTkFEQSk7XHJcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKFVTQSk7XHJcbiAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaCgkZmlsdGVyKCdvcmRlckJ5JykodHJhbnNsYXRlZCwgJ2xhYmVsJyksIGZ1bmN0aW9uIChzb3J0ZWRPYmplY3QpIHtcclxuICAgICAgICAgICAgICAgIGlmIChzb3J0ZWRPYmplY3Qua2V5ICE9PSBDQU5BREEgJiYgc29ydGVkT2JqZWN0LmtleSAhPT0gVVNBKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goc29ydGVkT2JqZWN0LmtleSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBPcmRlcnMgY291bnRyeSBsaXN0IGJ5IHRyYW5zbGF0ZWQgdmFsdWUgYW5kIGNyZWF0ZXMgYSBsaXN0IG9mIHNhdmVkIGFuZCBkaXNwbGF5ZWQgdmFsdWVcclxuICAgICAqIEBwYXJhbSAkdHJhbnNsYXRlXHJcbiAgICAgKiBAcGFyYW0gJGZpbHRlclxyXG4gICAgICogQHBhcmFtIENBTkFEQVxyXG4gICAgICogQHBhcmFtIFVTQVxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBvcmRlckJ5VHJhbnNsYXRlZENvdW50cnlBbmRMYWJlbCgkdHJhbnNsYXRlLCAkZmlsdGVyLCBDQU5BREEsIFVTQSkge1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoYXJyYXkpIHtcclxuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IFtdO1xyXG4gICAgICAgICAgICB2YXIgdHJhbnNsYXRlZCA9IFtdO1xyXG4gICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goYXJyYXksIGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgdHJhbnNsYXRlZC5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICBrZXk6IHZhbHVlLFxyXG4gICAgICAgICAgICAgICAgICAgIGxhYmVsOiAkdHJhbnNsYXRlLmluc3RhbnQodmFsdWUpXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAvL3RvcCBvZiB0aGUgbGlzdFxyXG4gICAgICAgICAgICByZXN1bHQucHVzaCh7a2V5OiBDQU5BREEsIGxhYmVsOiAkdHJhbnNsYXRlLmluc3RhbnQoQ0FOQURBKX0pO1xyXG4gICAgICAgICAgICByZXN1bHQucHVzaCh7a2V5OiBVU0EsIGxhYmVsOiAkdHJhbnNsYXRlLmluc3RhbnQoVVNBKX0pO1xyXG4gICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goJGZpbHRlcignb3JkZXJCeScpKHRyYW5zbGF0ZWQsICdsYWJlbCcpLCBmdW5jdGlvbiAoc29ydGVkT2JqZWN0KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoc29ydGVkT2JqZWN0LmtleSAhPT0gQ0FOQURBICYmIHNvcnRlZE9iamVjdC5rZXkgIT09IFVTQSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHNvcnRlZE9iamVjdCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gZmluZENvdW50cnlPYmooKSB7XHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhcnJheSwgdGFyZ2V0S2V5KSB7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyYXkubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGlmIChhcnJheVtpXS5rZXkgPT09IHRhcmdldEtleSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoYXJyYXlbaV0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsOyAvL25vdCBmb3VuZFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG5cclxuICAgIGZ1bmN0aW9uIG9yZGVyQnlUcmFuc2xhdGVkKCR0cmFuc2xhdGUsICRmaWx0ZXIpIHtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGFycmF5KSB7XHJcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSBbXTtcclxuICAgICAgICAgICAgdmFyIHRyYW5zbGF0ZWQgPSBbXTtcclxuICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKGFycmF5LCBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIHRyYW5zbGF0ZWQucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAga2V5OiB2YWx1ZSxcclxuICAgICAgICAgICAgICAgICAgICBsYWJlbDogJHRyYW5zbGF0ZS5pbnN0YW50KHZhbHVlKVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goJGZpbHRlcignb3JkZXJCeScpKHRyYW5zbGF0ZWQsICdsYWJlbCcpLCBmdW5jdGlvbiAoc29ydGVkT2JqZWN0KSB7XHJcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaChzb3J0ZWRPYmplY3Qua2V5KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBzZXF1ZW5jZU9yZGVyQnkoJGZpbHRlcikge1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoYXJyYXkpIHtcclxuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IFtdO1xyXG4gICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goJGZpbHRlcignb3JkZXJCeScpKGFycmF5LCAnc2VxdWVuY2UnLCB0cnVlKSwgZnVuY3Rpb24gKHNvcnRlZE9iamVjdCkge1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goc29ydGVkT2JqZWN0KTtcclxuXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgLypcclxuICAgICBPcmRlcnMgdmFsdWVzXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIG9yZGVyQnlUcmFuc2xhdGVkT3RoZXJGaXJzdCgkdHJhbnNsYXRlLCAkZmlsdGVyLCBPVEhFUikge1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoYXJyYXkpIHtcclxuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IFtdO1xyXG4gICAgICAgICAgICB2YXIgdHJhbnNsYXRlZCA9IFtdO1xyXG4gICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goYXJyYXksIGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgdHJhbnNsYXRlZC5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICBrZXk6IHZhbHVlLFxyXG4gICAgICAgICAgICAgICAgICAgIGxhYmVsOiAkdHJhbnNsYXRlLmluc3RhbnQodmFsdWUpXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKE9USEVSKTtcclxuICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKCRmaWx0ZXIoJ29yZGVyQnknKSh0cmFuc2xhdGVkLCAnbGFiZWwnKSwgZnVuY3Rpb24gKHNvcnRlZE9iamVjdCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHNvcnRlZE9iamVjdC5rZXkgIT09IE9USEVSKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goc29ydGVkT2JqZWN0LmtleSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTb3J0cyBieSBsb2NhbGUgc3BlY2lmaWVkIGJ5IGFuZ3VsYXIgdHJhbnNsYXRlXHJcbiAgICAgKiBAcGFyYW0gJHRyYW5zbGF0ZVxyXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufVxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gX29yZGVyQnlMb2NhbGUoKSB7XHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChpdGVtcyxsYW5nKSB7XHJcblxyXG4gICAgICAgICAgICBpdGVtcy5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYVtsYW5nXS5sb2NhbGVDb21wYXJlKGJbbGFuZ10sbGFuZyk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICByZXR1cm4gaXRlbXM7XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEZpbmRzIGFuIGV4YWN0IG1hdGNoIGJ5IGlkLiBVc2luZyBmaWx0ZXIgZm9yIHRoZSBpbml0aWFsIHNlYXJjaCBhcyBzZWFyY2hKc29uIGNhblxyXG4gICAgICogY29udGFpbiBtdWx0aXBsZSBzZWFyY2ggY3JpdGVyaWEhLCB0aGVuIGZvciBtdWx0aXBsZSBtYXRjaGVzLCBsb29raW5nIGZvciBleGFjdCBpZFxyXG4gICAgICogQHBhcmFtICRmaWx0ZXJcclxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn1cclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIF9maW5kQnlJZCgkZmlsdGVyKSB7XHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhcnJheSwgc2VhcmNoSnNvbikge1xyXG4gICAgICAgICAgICB2YXIgaW5pdGlhbFJlc3VsdCA9ICRmaWx0ZXIoJ2ZpbHRlcicpKGFycmF5LCBzZWFyY2hKc29uKTtcclxuICAgICAgICAgICAgaWYgKCFpbml0aWFsUmVzdWx0KSByZXR1cm4gbnVsbDsgLy9zaG91bGQgbmV2ZXIgaGFwcGVuXHJcbiAgICAgICAgICAgIGlmIChpbml0aWFsUmVzdWx0Lmxlbmd0aCA9PT0gMSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGluaXRpYWxSZXN1bHRbMF07XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGluaXRpYWxSZXN1bHQubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaW5pdGlhbFJlc3VsdFtpXS5pZCA9PT0gc2VhcmNoSnNvbi5pZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaW5pdGlhbFJlc3VsdFtpXTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICB9KSgpOyIsIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IGRraWx0eSBvbiA4LzI2LzIwMTYuXHJcbiAqL1xyXG4vKipcclxuICogQ3JlYXRlZCBieSBka2lsdHkgb24gMTIvMDgvMjAxNi5cclxuICovXHJcblxyXG4oZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKCdhcHBsaWNhdGlvbkluZm9TZXJ2aWNlJywgW10pXHJcbn0pKCk7XHJcblxyXG5cclxuKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKCdhcHBsaWNhdGlvbkluZm9TZXJ2aWNlJylcclxuICAgICAgICAuZmFjdG9yeSgnQXBwbGljYXRpb25JbmZvU2VydmljZScsIEFwcGxpY2F0aW9uSW5mb1NlcnZpY2UpO1xyXG5cclxuICAgIGZ1bmN0aW9uIEFwcGxpY2F0aW9uSW5mb1NlcnZpY2UoKSB7XHJcbiAgICAgICAgZnVuY3Rpb24gQXBwbGljYXRpb25JbmZvU2VydmljZSgpIHtcclxuICAgICAgICAgICAgLy9jb25zdHJ1Y3RvciBoZXJlXHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBuZ2RvYyBtZXRob2QgZ2V0cyB0aGUgY3VycmVudCBkYXRlIGZvcm1hdHRlZCBhcyBZWVlZLU1NLUREXHJcbiAgICAgICAgICogQHJldHVybnMge3N0cmluZ31cclxuICAgICAgICAgKlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIEFwcGxpY2F0aW9uSW5mb1NlcnZpY2UucHJvdG90eXBlLmdldFRvZGF5RGF0ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIGQgPSBuZXcgRGF0ZSgpO1xyXG4gICAgICAgICAgICB2YXIgaXNvRGF0ZSA9IGQuZ2V0RnVsbFllYXIoKSArICctJ1xyXG4gICAgICAgICAgICAgICAgKyBwYWQoZC5nZXRNb250aCgpICsgMSkgKyAnLSdcclxuICAgICAgICAgICAgICAgICsgcGFkKGQuZ2V0RGF0ZSgpKTtcclxuICAgICAgICAgICAgcmV0dXJuIChpc29EYXRlKTtcclxuICAgICAgICAgICAgZnVuY3Rpb24gcGFkKG4pIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuIDwgMTAgPyAnMCcgKyBuIDogblxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICBBcHBsaWNhdGlvbkluZm9TZXJ2aWNlLnByb3RvdHlwZS5pbmNyZW1lbnRNaW5vclZlcnNpb24gPSBmdW5jdGlvbiAoZW5yb2xtZW50VmVyc2lvbikge1xyXG4gICAgICAgICAgICB2YXIgcmVzdWx0O1xyXG4gICAgICAgICAgICBpZiAoIWVucm9sbWVudFZlcnNpb24pIHtcclxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IFwiMC4xXCI7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcGFydHMgPSBlbnJvbG1lbnRWZXJzaW9uLnNwbGl0KCcuJyk7XHJcbiAgICAgICAgICAgICAgICB2YXIgZGVjID0gcGFyc2VJbnQocGFydHNbMV0pO1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gcGFydHNbMF0gKyBcIi5cIiArIChkZWMgKyAxKTtcclxuXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIChyZXN1bHQpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogSW5jcmVtZW50cyB0aGUgbWFqb3IgdmVyc2lvbi4gU2V0cyB0aGUgbWlub3IgdG8gZmFsc2VcclxuICAgICAgICAgKi9cclxuICAgICAgICBBcHBsaWNhdGlvbkluZm9TZXJ2aWNlLnByb3RvdHlwZS5pbmNyZW1lbnRNYWpvclZlcnNpb24gPSBmdW5jdGlvbiAoZW5yb2xtZW50VmVyc2lvbikge1xyXG4gICAgICAgICAgICB2YXIgcmVzdWx0O1xyXG4gICAgICAgICAgICBpZiAoIWVucm9sbWVudFZlcnNpb24pIHtcclxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IFwiMS4wXCI7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcGFydHMgPSBlbnJvbG1lbnRWZXJzaW9uLnNwbGl0KCcuJyk7XHJcbiAgICAgICAgICAgICAgICB2YXIgd2hvbGUgPSBwYXJzZUludChwYXJ0c1swXSk7XHJcbiAgICAgICAgICAgICAgICByZXN1bHQgPSAod2hvbGUgKyAxKSArIFwiLjBcIlxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBBcHBsaWNhdGlvbkluZm9TZXJ2aWNlLnByb3RvdHlwZS5nZXRBcHBsaWNhdGlvblN0YXR1c0xpc3QgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAoW1wiTkVXXCIsIFwiQU1FTkRcIiwgXCJGSU5BTFwiXSlcclxuICAgICAgICB9O1xyXG4gICAgICAgIEFwcGxpY2F0aW9uSW5mb1NlcnZpY2UucHJvdG90eXBlLmdldEFwcHJvdmVkVHlwZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFwiRklOQUxcIjtcclxuICAgICAgICB9O1xyXG4gICAgICAgIEFwcGxpY2F0aW9uSW5mb1NlcnZpY2UucHJvdG90eXBlLmdldEFtZW5kVHlwZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFwiQU1FTkRcIjtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvLyBSZXR1cm4gYSByZWZlcmVuY2UgdG8gdGhlIG9iamVjdFxyXG4gICAgICAgIHJldHVybiBBcHBsaWNhdGlvbkluZm9TZXJ2aWNlO1xyXG4gICAgfVxyXG5cclxuXHJcbn0pKCk7XHJcbiIsIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IGRraWx0eSBvbiAxMy8wMS8yMDE3LlxyXG4gKi9cclxuXHJcbihmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgnY29tcGFueUxvYWRTZXJ2aWNlJywgWydkYXRhTGlzdHMnLCdocGZiQ29uc3RhbnRzJ10pXHJcbn0pKCk7XHJcblxyXG4oZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ2NvbXBhbnlMb2FkU2VydmljZScpXHJcbiAgICAgICAgLmZhY3RvcnkoJ2N1c3RvbUxvYWQnLCBbJyRodHRwJywgJyRxJywgJyRmaWx0ZXInLCAnZ2V0Q291bnRyeUFuZFByb3ZpbmNlcycsJ0NBTkFEQScsJ1VTQScsJ1JFTEFUSVZFX0ZPTERFUl9EQVRBJywgZnVuY3Rpb24gKCRodHRwLCAkcSwgJGZpbHRlciwgZ2V0Q291bnRyeUFuZFByb3ZpbmNlcyxDQU5BREEsVVNBLFJFTEFUSVZFX0ZPTERFUl9EQVRBKSB7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKG9wdGlvbnMpIHtcclxuICAgICAgICAgICAgICAgIHZhciBkZWZlcnJlZCA9ICRxLmRlZmVyKCk7XHJcbiAgICAgICAgICAgICAgICAvL3ZhciBkYXRhRm9sZGVyID0gXCJkYXRhL1wiOyAvL3JlbGF0aXZlIGZvcmxkZXIgdG8gdGhlIGRhdGFcclxuICAgICAgICAgICAgICAgIHZhciBlbnZVcmwgPSBSRUxBVElWRV9GT0xERVJfREFUQSArIFwiZW52Lmpzb25cIjtcclxuICAgICAgICAgICAgICAgIHZhciBjb3VudHJ5VXJsID0gUkVMQVRJVkVfRk9MREVSX0RBVEEgKyBcImNvdW50cmllcy5qc29uXCI7XHJcbiAgICAgICAgICAgICAgICB2YXIgcmVzdWx0VHJhbnNsYXRlTGlzdCA9IHt9O1xyXG4gICAgICAgICAgICAgICAgJGh0dHAuZ2V0KGVudlVybClcclxuICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9QUk9DRVNTIGVudiBkYXRhXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGdldENvdW50cnlBbmRQcm92aW5jZXMuc2V0RW52KHJlc3BvbnNlLmRhdGEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyByZXR1cm4gJGh0dHAuZ2V0KGNvdW50cnlVcmwpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgJGh0dHAuZ2V0KGNvdW50cnlVcmwpXHJcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vUFJPQ0VTUyBjb3VudHJ5IGxpc3QgZGF0YVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbmV3TGlzdCA9ICBfY3JlYXRlU29ydGVkQXJyYXlOQUZpcnN0KHJlc3BvbnNlLmRhdGEsb3B0aW9ucy5rZXkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdHJhbnNsYXRlTGlzdCA9IF9jcmVhdGVUcmFuc2xhdGVMaXN0KG5ld0xpc3QsIG9wdGlvbnMua2V5KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZ2V0Q291bnRyeUFuZFByb3ZpbmNlcy5jcmVhdGVDb3VudHJ5TGlzdChuZXdMaXN0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5leHRlbmQocmVzdWx0VHJhbnNsYXRlTGlzdCwgdHJhbnNsYXRlTGlzdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXNwb25zZS5kYXRhO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgIC5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdGhpcyBjYXRjaGVzIGVycm9ycyBmcm9tIHRoZSAkaHR0cCBjYWxscyBhcyB3ZWxsIGFzIGZyb20gdGhlIGV4cGxpY2l0IHRocm93XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihcIkFuIGVycm9yIG9jY3VycmVkIHdpdGggQ29tcGFueSBMaXN0IExvYWQ6IFwiICsgZXJyb3IpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZWplY3QocmVzdWx0VHJhbnNsYXRlTGlzdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAuZmluYWxseShmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUocmVzdWx0VHJhbnNsYXRlTGlzdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiBDcmVhdGVzIHRoZSBsaXN0IG9mIGtleSB2YWx1ZSBwYWlycyBmb3IgdGhlIHRyYW5zbGF0ZSBzZXJ2aWNlLiBDb252ZXJ0cyB0aGUgY29tcGxleCBqc29uXHJcbiAgICAgICAgICAgICAqIE9mIHRoZSBmb3JtYXQge2lkOnh4eCxlbjp4eHgsZnI6eHh4eH0uIChDYW4gY29udGFpbiBvdGhlciBrZXlzKVxyXG4gICAgICAgICAgICAgKiBAcGFyYW0ganNvbkxpc3RcclxuICAgICAgICAgICAgICogQHBhcmFtIGxhbmdcclxuICAgICAgICAgICAgICogQHJldHVybnMge3t9fVxyXG4gICAgICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgZnVuY3Rpb24gX2NyZWF0ZVRyYW5zbGF0ZUxpc3QoanNvbkxpc3QsIGxhbmcpIHtcclxuICAgICAgICAgICAgICAgIC8vIHZhciBsYW5nSW5kZXg9MTtcclxuICAgICAgICAgICAgICAgIGlmICghbGFuZykgbGFuZyA9ICdlbic7XHJcbiAgICAgICAgICAgICAgICB2YXIgcmVzdWx0TGlzdCA9IHt9O1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBqc29uTGlzdC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdExpc3RbanNvbkxpc3RbaV0uaWRdID0ganNvbkxpc3RbaV1bbGFuZ107XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0TGlzdDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIFJlcGxhY2VzIHRoZSBvcmlnaW5hbCBrZXkgd2l0aCBvbmUgdGhhdCBpcyBwcmVmaXhlZCB3aXRoIHRoZSBwYXNzZWQgaW4gc3RyaW5nXHJcbiAgICAgICAgICAgICAqIEBwYXJhbSBvbGRMaXN0XHJcbiAgICAgICAgICAgICAqIEBwYXJhbSBwcmVmaXhcclxuICAgICAgICAgICAgICogQHJldHVybnMge3t9fVxyXG4gICAgICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgZnVuY3Rpb24gX2NyZWF0ZU5ld0tleUFycmF5KG9sZExpc3QsIHByZWZpeCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvbGRMaXN0KTtcclxuICAgICAgICAgICAgICAgIHZhciBuZXdMaXN0ID0ge307XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbmV3S2V5ID0gXCJcIjtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoRG9zc2llckxpc3RzLmdldE90aGVyVmFsdWUoKSA9PT0ga2V5c1tpXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdLZXkgPSBrZXlzW2ldO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld0tleSA9IHByZWZpeCArIGtleXNbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBuZXdPYmogPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICBuZXdMaXN0W25ld0tleV0gPSBvbGRMaXN0W2tleXNbaV1dO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ld0xpc3Q7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIF9jcmVhdGVTb3J0ZWRBcnJheU5BRmlyc3QoanNvbkxpc3QsbGFuZyl7XHJcbiAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gW107XHJcbiAgICAgICAgICAgICAgICB2YXIgY2FuYWRhUmVjb3JkID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIHZhciB1c2FSZWNvcmQgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKCRmaWx0ZXIoJ29yZGVyQnlMb2NhbGUnKShqc29uTGlzdCxsYW5nKSwgZnVuY3Rpb24gKHNvcnRlZE9iamVjdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzb3J0ZWRPYmplY3QuaWQgPT09IFVTQSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB1c2FSZWNvcmQgPSBzb3J0ZWRPYmplY3Q7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChzb3J0ZWRPYmplY3QuaWQgPT09IENBTkFEQSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYW5hZGFSZWNvcmQgPSBzb3J0ZWRPYmplY3Q7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaChzb3J0ZWRPYmplY3QpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgaWYgKHVzYVJlY29yZCkgcmVzdWx0LnVuc2hpZnQodXNhUmVjb3JkKTtcclxuICAgICAgICAgICAgICAgIGlmIChjYW5hZGFSZWNvcmQpIHJlc3VsdC51bnNoaWZ0KGNhbmFkYVJlY29yZCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfV0pO1xyXG59KSgpO1xyXG5cclxuIiwiLyoqXHJcbiAqIENyZWF0ZWQgYnkgQWJkZXNzYW1hZCBvbiA3LzYvMjAxNi5cclxuICovXHJcblxyXG4oZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKCdjb21wYW55U2VydmljZScsIFsnZGF0YUxpc3RzJywgJ2hwZmJDb25zdGFudHMnXSk7XHJcbn0pKCk7XHJcblxyXG4oZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ2NvbXBhbnlTZXJ2aWNlJylcclxuICAgICAgICAuZmFjdG9yeSgnQ29tcGFueVNlcnZpY2UnLCBDb21wYW55U2VydmljZSk7XHJcblxyXG4gICAgQ29tcGFueVNlcnZpY2UuJGluamVjdCA9IFsnJGZpbHRlcicsICckdHJhbnNsYXRlJywgJ2dldENvdW50cnlBbmRQcm92aW5jZXMnLCAnWFNMX1BSRUZJWCddO1xyXG4gICAgZnVuY3Rpb24gQ29tcGFueVNlcnZpY2UoJGZpbHRlciwgJHRyYW5zbGF0ZSwgZ2V0Q291bnRyeUFuZFByb3ZpbmNlcywgWFNMX1BSRUZJWCkge1xyXG4gICAgICAgIC8vIERlZmluZSB0aGUgQ29tcGFueVNlcnZpY2UgZnVuY3Rpb25cclxuICAgICAgICBmdW5jdGlvbiBDb21wYW55U2VydmljZSgpIHtcclxuICAgICAgICAgICAgLy9jb25zdHJ1Y3Rpb24gbG9naWNcclxuICAgICAgICAgICAgdmFyIGRlZmF1bHRDb21wYW55RGF0YSA9IHtcclxuICAgICAgICAgICAgICAgIGRhdGFDaGVja3N1bTogXCJcIixcclxuICAgICAgICAgICAgICAgIGVucm9sbWVudFZlcnNpb246IFwiMC4wXCIsXHJcbiAgICAgICAgICAgICAgICBkYXRlU2F2ZWQ6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBhcHBsaWNhdGlvblR5cGU6IFwiTkVXXCIsXHJcbiAgICAgICAgICAgICAgICBzb2Z0d2FyZVZlcnNpb246IFwiNC4xLjBcIixcclxuICAgICAgICAgICAgICAgIGNvbXBhbnlJZDogXCJcIixcclxuICAgICAgICAgICAgICAgIHJlYXNvbkFtZW5kOlwiXCIsXHJcbiAgICAgICAgICAgICAgICBhZGRyZXNzTGlzdDogW10sXHJcbiAgICAgICAgICAgICAgICBjb250YWN0TGlzdDogW11cclxuXHJcbiAgICAgICAgICAgICAgICAvKippbXBvcnRlclByb2R1Y3RzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWRQcm9kdWN0czogXCJcIixcclxuICAgICAgICAgICAgICAgICAgICBkb3NzaWVySWRMaXN0OiBbXVxyXG4gICAgICAgICAgICAgICAgfSovXHJcblxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBhbmd1bGFyLmV4dGVuZCh0aGlzLl9kZWZhdWx0LCBkZWZhdWx0Q29tcGFueURhdGEpO1xyXG4gICAgICAgICAgICB0aGlzLmFkZHJlc3NJRCA9IDA7XHJcbiAgICAgICAgICAgIHRoaXMuY29udGFjdElkID0gMDtcclxuICAgICAgICAgICAgLy8gdGhpcy54c2xGaWxlTmFtZSA9IFhTTF9QUkVGSVggKyBcIlJFUF9DT18yXzIueHNsXCI7XHJcbiAgICAgICAgICAgIHRoaXMueHNsRmlsZU5hbWUgPSBcIlJFUF9DT180XzEueHNsXCI7XHJcbiAgICAgICAgICAgIHRoaXMuaGVscFRleHRTZXF1ZW5jZXMgPSB7XHJcbiAgICAgICAgICAgICAgICBsb2FkRmlsZUlueDogMCxcclxuICAgICAgICAgICAgICAgIGVucm9sSWR4OiAwLFxyXG4gICAgICAgICAgICAgICAgYWRkcmVzc0lkeDogMCxcclxuICAgICAgICAgICAgICAgIGJ1c2luZXNzSWR4OiAwLFxyXG4gICAgICAgICAgICAgICAgYWRkUm9sZUlkeDogMCxcclxuICAgICAgICAgICAgICAgIGNvbXBhbnlSZXBJZHg6IDAsXHJcbiAgICAgICAgICAgICAgICByb3V0aW5nSWRJZHg6IDAsXHJcbiAgICAgICAgICAgICAgICBnZW5YbWxJZHg6IDBcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXModGhpcy5oZWxwVGV4dFNlcXVlbmNlcyk7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5oZWxwVGV4dFNlcXVlbmNlc1trZXlzW2ldXSA9IGkgKyAxO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vVE9ETyByZXdyaXRlIHRoaXMgb2JqZWN0IHRvIHByb3BlciBwcm90b3R5cGUgc3ludGF4XHJcbiAgICAgICAgQ29tcGFueVNlcnZpY2UucHJvdG90eXBlID0ge1xyXG4gICAgICAgICAgICBfZGVmYXVsdDoge30sXHJcblxyXG4gICAgICAgICAgICBnZXROdW1iZXJLZXlzOiBmdW5jdGlvbiAob2JqKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgbnVtS2V5cyA9IDA7XHJcbiAgICAgICAgICAgICAgICAvL2dldCB0aGUgbnVtYmVyIG9mIGtleXMgaW4gdGhlIG1vZGVsXHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBwcm9wIGluIG9iaikge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkocHJvcCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbnVtS2V5cysrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBudW1LZXlzO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBnZXRBcHBsaWNhdGlvblR5cGVzOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gKFtcIk5FV1wiLCBcIkFNRU5EXCIsIFwiRklOQUxcIl0pXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGdldEFwcHJvdmVkVHlwZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiRklOQUxcIjtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZ2V0QW1lbmRUeXBlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJBTUVORFwiO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBnZXRYU0xGaWxlTmFtZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMueHNsRmlsZU5hbWU7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGNyZWF0ZUFkZHJlc3NSb2xlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZGVmYXVsdEFkZHJlc3NSb2xlID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIG1hbnVmYWN0dXJlcjogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgbWFpbGluZzogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgYmlsbGluZzogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgaW1wb3J0ZXI6IGZhbHNlXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIChkZWZhdWx0QWRkcmVzc1JvbGUpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBjcmVhdGVDb250YWN0Um9sZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGRlZmF1bHRDb250YWN0Um9sZSA9IHtcclxuICAgICAgICAgICAgICAgICAgICBtYW51ZmFjdHVyZXI6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgIG1haWxpbmc6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgIGJpbGxpbmc6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgLy8gaW1wb3J0ZXI6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgIHJlcFByaW1hcnk6IGZhbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gcmVwU2Vjb25kYXJ5OiBmYWxzZVxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIHJldHVybiAoZGVmYXVsdENvbnRhY3RSb2xlKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgY3JlYXRlQWRkcmVzc1JlY29yZDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGRlZmF1bHRBZGRyZXNzID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIGFkZHJlc3NJRDogMSxcclxuICAgICAgICAgICAgICAgICAgICBjb21wYW55TmFtZTogXCJcIixcclxuICAgICAgICAgICAgICAgICAgICBidXNpbmVzc051bWJlcjogXCJcIixcclxuICAgICAgICAgICAgICAgICAgICBpbXBvcnRlcklEOiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGFkZHJlc3NSb2xlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hbnVmYWN0dXJlcjogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1haWxpbmc6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBiaWxsaW5nOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW1wb3J0ZXI6IGZhbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICBzdHJlZXQ6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgY2l0eTogXCJcIixcclxuICAgICAgICAgICAgICAgICAgICBzdGF0ZUxpc3Q6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgc3RhdGVUZXh0OiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvdW50cnk6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgcG9zdGFsQ29kZTogXCJcIlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAvKippbXBvcnRlclByb2R1Y3RzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkUHJvZHVjdHM6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRvc3NpZXJJZExpc3Q6IFtdXHJcbiAgICAgICAgICAgICAgICAgICAgfSovXHJcblxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIGRlZmF1bHRBZGRyZXNzLmFkZHJlc3NJRCA9IHRoaXMuZ2V0TmV4dEFkZHJlc3NJRCgpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIChkZWZhdWx0QWRkcmVzcyk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGNyZWF0ZUNvbnRhY3RSZWNvcmQ6IGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgZGVmYXVsdENvbnRhY3QgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGFjdElkOiAxLFxyXG4gICAgICAgICAgICAgICAgICAgIGFkZHJlc3NSb2xlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hbnVmYWN0dXJlcjogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1haWxpbmc6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBiaWxsaW5nOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gaW1wb3J0ZXI6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXBQcmltYXJ5OiBmYWxzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyByZXBTZWNvbmRhcnk6IGZhbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICBjb250YWN0Um9sZTogXCJcIixcclxuICAgICAgICAgICAgICAgICAgIC8vIHNhbHV0YXRpb246IFwiXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgZ2l2ZW5OYW1lOiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgICAgIHN1cm5hbWU6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgaW5pdGlhbHM6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgcGhvbmU6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgcGhvbmVFeHQ6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgZmF4OiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGVtYWlsOiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgICAgIHJvdXRpbmdJZDogXCJcIixcclxuICAgICAgICAgICAgICAgICAgICBpbXBDb21wYW55TmFtZTogXCJcIlxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIGRlZmF1bHRDb250YWN0LmNvbnRhY3RJZCA9IHRoaXMuZ2V0TmV4dENvbnRhY3RJRCgpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIChkZWZhdWx0Q29udGFjdCk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIC8qKmNyZWF0ZUltcG9ydGVyUHJvZHVjdFJlY29yZDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGltcG9ydGVyUmVjb3JkID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIFwic2VsZWN0ZWRQcm9kdWN0c1wiOiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwiZG9zc2llcklkTGlzdFwiOiBbXVxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBpbXBvcnRlclJlY29yZDtcclxuICAgICAgICAgICAgfSwqL1xyXG5cclxuICAgICAgICAgICAgdXBkYXRlQWRkcmVzc0lEOiBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIGlmIChpc05hTih2YWx1ZSkpIHJldHVybjtcclxuICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA+IHRoaXMuYWRkcmVzc0lEKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGRyZXNzSUQgPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZ2V0TmV4dEFkZHJlc3NJRDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5hZGRyZXNzSUQgPSB0aGlzLmFkZHJlc3NJRCArIDE7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gKHRoaXMuYWRkcmVzc0lEKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgcmVzZXRBZGRyZXNzSUQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCF2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYWRkcmVzc0lEID0gMDtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGRyZXNzSUQgPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgdXBkYXRlQ29udGFjdElEOiBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIGlmIChpc05hTih2YWx1ZSkpIHJldHVybjtcclxuICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA+IHRoaXMuY29udGFjdElkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250YWN0SWQgPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZ2V0TmV4dENvbnRhY3RJRDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb250YWN0SWQgPSB0aGlzLmNvbnRhY3RJZCArIDE7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gKHRoaXMuY29udGFjdElkKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgcmVzZXRDb250YWN0SUQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCF2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY29udGFjdElkID0gMDtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250YWN0SWQgPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZ2V0Um9vdFRhZzpmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiQ09NUEFOWV9FTlJPTFwiO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogQG5nZG9jIG1laHRvZCBjb252ZXJ0cyB0aGUgZmlsZSBqc29uIHRvIG9iamVjdCBtb2RlbFxyXG4gICAgICAgICAgICAgKiBAcGFyYW0ganNvbk9ialxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgdHJhbnNmb3JtRnJvbUZpbGVPYmo6IGZ1bmN0aW9uIChqc29uT2JqKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcm9vdFRhZyA9IHRoaXMuZ2V0Um9vdFRhZygpO1xyXG4gICAgICAgICAgICAgICAgdmFyIGNvbXBhbnlJbmZvID0gdGhpcy5nZXRDb21wYW55SW5mbyhqc29uT2JqW3Jvb3RUYWddKTtcclxuICAgICAgICAgICAgICAgIHZhciBhZGRyZXNzSW5mbyA9IHthZGRyZXNzTGlzdDogdGhpcy5nZXRBZGRyZXNzTGlzdChqc29uT2JqW3Jvb3RUYWddLmFkZHJlc3NfcmVjb3JkKX07XHJcbiAgICAgICAgICAgICAgICB2YXIgY29udGFjdEluZm8gPSB7Y29udGFjdExpc3Q6IHRoaXMuZ2V0Q29udGFjdExpc3QoanNvbk9ialtyb290VGFnXS5jb250YWN0X3JlY29yZCl9O1xyXG4gICAgICAgICAgICAgICAgLy9nZXQgcmlkIG9mIHByZXZpb3VzIGRlZmF1bHRcclxuICAgICAgICAgICAgICAgIHRoaXMuX2RlZmF1bHQgPSB7fTtcclxuICAgICAgICAgICAgICAgIGFuZ3VsYXIuZXh0ZW5kKHRoaXMuX2RlZmF1bHQsIGNvbXBhbnlJbmZvLCBhZGRyZXNzSW5mbywgY29udGFjdEluZm8pXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHRyYW5zZm9ybVRvRmlsZU9iajogZnVuY3Rpb24gKGpzb25PYmopIHtcclxuICAgICAgICAgICAgICAgIC8vdHJhbnNmb3JtIGJhY2sgdG8gbmVlZGVkXHJcbiAgICAgICAgICAgICAgICB2YXIgcm9vdFRhZyA9IFwiQ09NUEFOWV9FTlJPTFwiOyAvL1RPRE8gbmVlZHMgdG8gYmUgYSBnbG9iYWxcclxuICAgICAgICAgICAgICAgIHZhciByZXN1bHRKc29uID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIENPTVBBTllfRU5ST0w6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVfdHlwZTogXCJQSEFSTUFcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YV9jaGVja3N1bToganNvbk9iai5kYXRhQ2hlY2tzdW0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVucm9sbWVudF92ZXJzaW9uOiBqc29uT2JqLmVucm9sbWVudFZlcnNpb24sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGVfc2F2ZWQ6IGpzb25PYmouZGF0ZVNhdmVkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhcHBsaWNhdGlvbl90eXBlOiBqc29uT2JqLmFwcGxpY2F0aW9uVHlwZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc29mdHdhcmVfdmVyc2lvbjoganNvbk9iai5zb2Z0d2FyZVZlcnNpb24sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBhbnlfaWQ6IGpzb25PYmouY29tcGFueUlkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZWFzb25fYW1lbmQ6IGpzb25PYmoucmVhc29uQW1lbmQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFkZHJlc3NfcmVjb3JkOiBfbWFwQWRkcmVzc0xpc3RUb091dHB1dChqc29uT2JqLmFkZHJlc3NMaXN0LCAkdHJhbnNsYXRlKSwgLy9UT0RPcmVtb3ZlZCB6ZXJvIGluZGV4XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRhY3RfcmVjb3JkOiBfbWFwQ29udGFjdExpc3RUb091dHB1dChqc29uT2JqLmNvbnRhY3RMaXN0LCAkdHJhbnNsYXRlKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiAocmVzdWx0SnNvbik7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGdldE1vZGVsSW5mbzogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2RlZmF1bHQ7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIC8vbm90IHN1cmUgd2h5IHRoaXMgaXMgbmVlZGVkIGFueW1vcmVcclxuICAgICAgICAgICAgZ2V0Q29tcGFueUluZm86IGZ1bmN0aW9uIChpbmZvKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWluZm8pXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2RlZmF1bHQ7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGRhdGFDaGVja3N1bTogaW5mby5kYXRhX2NoZWNrc3VtLFxyXG4gICAgICAgICAgICAgICAgICAgIGVucm9sbWVudFZlcnNpb246IGluZm8uZW5yb2xtZW50X3ZlcnNpb24sXHJcbiAgICAgICAgICAgICAgICAgICAgZGF0ZVNhdmVkOiBpbmZvLmRhdGVfc2F2ZWQsXHJcbiAgICAgICAgICAgICAgICAgICAgYXBwbGljYXRpb25UeXBlOiBpbmZvLmFwcGxpY2F0aW9uX3R5cGUsXHJcbiAgICAgICAgICAgICAgICAgICAgc29mdHdhcmVWZXJzaW9uOiBpbmZvLnNvZnR3YXJlX3ZlcnNpb24sXHJcbiAgICAgICAgICAgICAgICAgICAgY29tcGFueUlkOiBpbmZvLmNvbXBhbnlfaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgcmVhc29uQW1lbmQ6IGluZm8ucmVhc29uX2FtZW5kLFxyXG4gICAgICAgICAgICAgICAgICAgIGFkZHJlc3NMaXN0OiBbXSxcclxuICAgICAgICAgICAgICAgICAgICBjb250YWN0TGlzdDogW11cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgLy9ub3Qgc3VyZSB3aHkgdGhpcyBpcyBuZWVkZWQgYW55bW9yZVxyXG4gICAgICAgICAgICBnZXRBZGRyZXNzTGlzdDogZnVuY3Rpb24gKGFkckxpc3QpIHtcclxuICAgICAgICAgICAgICAgIHZhciBsaXN0ID0gW107XHJcbiAgICAgICAgICAgICAgICBpZiAoIWFkckxpc3QpIHJldHVybiBsaXN0O1xyXG4gICAgICAgICAgICAgICAgaWYgKCEoYWRyTGlzdCBpbnN0YW5jZW9mIEFycmF5KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vbWFrZSBpdCBhbiBhcnJheSwgY2FzZSB0aGVyZSBpcyBvbmx5IG9uZVxyXG4gICAgICAgICAgICAgICAgICAgIGFkckxpc3QgPSBbYWRyTGlzdF1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhZHJMaXN0Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy51cGRhdGVBZGRyZXNzSUQocGFyc2VJbnQoYWRyTGlzdFtpXS5hZGRyZXNzX2lkKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGFkZHJlc3MgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICBhZGRyZXNzLmFkZHJlc3NJRCA9IGFkckxpc3RbaV0uYWRkcmVzc19pZDtcclxuICAgICAgICAgICAgICAgICAgICBhZGRyZXNzLmNvbXBhbnlOYW1lID0gYWRyTGlzdFtpXS5jb21wYW55X25hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgYWRkcmVzcy5idXNpbmVzc051bWJlciA9IGFkckxpc3RbaV0uYnVzaW5lc3NfbnVtYmVyO1xyXG4gICAgICAgICAgICAgICAgICAgIGFkZHJlc3MuaW1wb3J0ZXJJRCA9IGFkckxpc3RbaV0uaW1wb3J0ZXJfaWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgYWRkcmVzcy5hZGRyZXNzUm9sZSA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgIGFkZHJlc3MuYWRkcmVzc1JvbGUubWFudWZhY3R1cmVyID0gYWRyTGlzdFtpXS5tYW51ZmFjdHVyZXIgPT09ICdZJztcclxuICAgICAgICAgICAgICAgICAgICBhZGRyZXNzLmFkZHJlc3NSb2xlLm1haWxpbmcgPSBhZHJMaXN0W2ldLm1haWxpbmcgPT09ICdZJztcclxuICAgICAgICAgICAgICAgICAgICBhZGRyZXNzLmFkZHJlc3NSb2xlLmJpbGxpbmcgPSBhZHJMaXN0W2ldLmJpbGxpbmcgPT09ICdZJztcclxuICAgICAgICAgICAgICAgICAgICBhZGRyZXNzLmFkZHJlc3NSb2xlLmltcG9ydGVyID0gYWRyTGlzdFtpXS5pbXBvcnRlciA9PT0gJ1knO1xyXG4gICAgICAgICAgICAgICAgICAgIGFkZHJlc3Muc3RyZWV0ID0gYWRyTGlzdFtpXS5jb21wYW55X2FkZHJlc3NfZGV0YWlscy5zdHJlZXRfYWRkcmVzcztcclxuICAgICAgICAgICAgICAgICAgICBhZGRyZXNzLmNpdHkgPSBhZHJMaXN0W2ldLmNvbXBhbnlfYWRkcmVzc19kZXRhaWxzLmNpdHk7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gYWRkcmVzcy5zdGF0ZUxpc3QgPSBhZHJMaXN0W2ldLmNvbXBhbnlfYWRkcmVzc19kZXRhaWxzLnByb3ZpbmNlX2xvdjtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYWRyTGlzdFtpXS5jb21wYW55X2FkZHJlc3NfZGV0YWlscy5wcm92aW5jZV9sb3YpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWRkcmVzcy5zdGF0ZUxpc3QgPSBhZHJMaXN0W2ldLmNvbXBhbnlfYWRkcmVzc19kZXRhaWxzLnByb3ZpbmNlX2xvdi5faWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWRkcmVzcy5zdGF0ZUxpc3QgPSBcIlwiO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBhZGRyZXNzLnN0YXRlVGV4dCA9IGFkckxpc3RbaV0uY29tcGFueV9hZGRyZXNzX2RldGFpbHMucHJvdmluY2VfdGV4dDtcclxuICAgICAgICAgICAgICAgICAgICBhZGRyZXNzLmNvdW50cnkgPSBcIlwiO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBjdXJyZW50TGFuZyA9ICR0cmFuc2xhdGUucHJvcG9zZWRMYW5ndWFnZSgpIHx8ICR0cmFuc2xhdGUudXNlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFkckxpc3RbaV0uY29tcGFueV9hZGRyZXNzX2RldGFpbHMuY291bnRyeS5faWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWRkcmVzcy5jb3VudHJ5ID0gJGZpbHRlcignZmlsdGVyJykoZ2V0Q291bnRyeUFuZFByb3ZpbmNlcy5nZXRDb3VudHJpZXMoKSwge2lkOiBhZHJMaXN0W2ldLmNvbXBhbnlfYWRkcmVzc19kZXRhaWxzLmNvdW50cnkuX2lkfSlbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFkZHJlc3MuY291bnRyeUh0bWwgPSAkdHJhbnNsYXRlLmluc3RhbnQoYWRkcmVzcy5jb3VudHJ5LmlkLCBcIlwiLCAnJywgY3VycmVudExhbmcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhZGRyZXNzLmNvdW50cnlEaXNwbGF5ID0gYWRkcmVzcy5jb3VudHJ5LmlkO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBhZGRyZXNzLnBvc3RhbENvZGUgPSBhZHJMaXN0W2ldLmNvbXBhbnlfYWRkcmVzc19kZXRhaWxzLnBvc3RhbF9jb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgLy8gaWYoYWRkcmVzcy5hZGRyZXNzUm9sZS5pbXBvcnRlcil7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgLy8gYWRkcmVzcy5pbXBvcnRlclByb2R1Y3RzPSB0aGlzLmdldEltcG9ydGVySW5mbyhhZHJMaXN0W2ldLmltcG9ydGVyX3Byb2R1Y3RzKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy99XHJcbiAgICAgICAgICAgICAgICAgICAgbGlzdC5wdXNoKGFkZHJlc3MpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiBsaXN0O1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAvKipnZXRJbXBvcnRlckluZm86IGZ1bmN0aW9uKGpzb25PYmope1xyXG4gICAgICAgICAgICAgICAgdmFyIHJlc3VsdD10aGlzLmNyZWF0ZUltcG9ydGVyUHJvZHVjdFJlY29yZCgpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmKCFqc29uT2JqKSByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0LnNlbGVjdGVkUHJvZHVjdHM9anNvbk9iai5zZWxlY3RlZF9wcm9kdWN0cztcclxuICAgICAgICAgICAgICAgIHZhciBkb3NzaWVySWRMaXN0PWpzb25PYmouZG9zc2llcl9pZDtcclxuICAgICAgICAgICAgICAgIGlmKCFkb3NzaWVySWRMaXN0KSByZXR1cm4gcmVzdWx0OyAvL2Nhc2Ugd2hlcmUgQUxMIHNlbGVjdGVkXHJcbiAgICAgICAgICAgICAgICBpZiAoIShkb3NzaWVySWRMaXN0IGluc3RhbmNlb2YgQXJyYXkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZG9zc2llcklkTGlzdD1bZG9zc2llcklkTGlzdF07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBmb3IodmFyIGk9MDtpPGRvc3NpZXJJZExpc3QubGVuZ3RoO2krKyl7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5ld1JlYz17XCJkb3NzaWVySWRcIjpkb3NzaWVySWRMaXN0W2ldfTtcclxuICAgICAgICAgICAgICAgICAgICByZXN1bHQuZG9zc2llcklkTGlzdC5wdXNoKG5ld1JlYyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgICAgICB9LCovXHJcblxyXG4gICAgICAgICAgICAvL3JpZ2h0IHNpZGUgaXMgb3JpZ2luYWwganNvbiBsZWZ0IHNpZGUgaXMgdHJhbnNsYXRpb24gO29hZGluZ1xyXG4gICAgICAgICAgICBnZXRDb250YWN0TGlzdDogZnVuY3Rpb24gKGNvbnRhY3RzKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgbGlzdCA9IFtdO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFjb250YWN0cykgcmV0dXJuIGxpc3Q7XHJcbiAgICAgICAgICAgICAgICBpZiAoIShjb250YWN0cyBpbnN0YW5jZW9mIEFycmF5KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vbWFrZSBpdCBhbiBhcnJheSwgY2FzZSB0aGVyZSBpcyBvbmx5IG9uZVxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRhY3RzID0gW2NvbnRhY3RzXVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29udGFjdHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgY29udGFjdCA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBjb250YWN0X3JlY19pbmRleCA9IGNvbnRhY3RzW2ldLmNvbnRhY3RfaWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGFjdC5jb250YWN0SWQgPSBjb250YWN0X3JlY19pbmRleDtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZUNvbnRhY3RJRChjb250YWN0X3JlY19pbmRleCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGFjdC5hZGRyZXNzUm9sZSA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRhY3QuYWRkcmVzc1JvbGUubWFudWZhY3R1cmVyID0gY29udGFjdHNbaV0ubWFudWZhY3R1cmVyID09PSAnWSc7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGFjdC5hZGRyZXNzUm9sZS5tYWlsaW5nID0gY29udGFjdHNbaV0ubWFpbGluZyA9PT0gJ1knO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRhY3QuYWRkcmVzc1JvbGUuYmlsbGluZyA9IGNvbnRhY3RzW2ldLmJpbGxpbmcgPT09ICdZJztcclxuICAgICAgICAgICAgICAgICAgICBjb250YWN0LmFkZHJlc3NSb2xlLmltcG9ydGVyID0gY29udGFjdHNbaV0uaW1wb3J0ZXIgPT09ICdZJztcclxuICAgICAgICAgICAgICAgICAgICBjb250YWN0LmFkZHJlc3NSb2xlLnJlcFByaW1hcnkgPSBjb250YWN0c1tpXS5yZXBfcHJpbWFyeSA9PT0gJ1knO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRhY3QuYWRkcmVzc1JvbGUucmVwU2Vjb25kYXJ5ID0gY29udGFjdHNbaV0ucmVwX3NlY29uZGFyeSA9PT0gJ1knO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vY29udGFjdC5jb250YWN0Um9sZSA9IGNvbnRhY3RzW2ldLmNvbXBhbnlfY29udGFjdF9kZXRhaWxzLnJlcF9jb250YWN0X3JvbGU7XHJcbiAgICAgICAgICAgICAgICAgICAvLyBjb250YWN0LnNhbHV0YXRpb24gPSBjb250YWN0c1tpXS5jb21wYW55X2NvbnRhY3RfZGV0YWlscy5zYWx1dGF0aW9uO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRhY3QuZ2l2ZW5OYW1lID0gY29udGFjdHNbaV0uY29tcGFueV9jb250YWN0X2RldGFpbHMuZ2l2ZW5fbmFtZTtcclxuICAgICAgICAgICAgICAgICAgICBjb250YWN0LmluaXRpYWxzID0gY29udGFjdHNbaV0uY29tcGFueV9jb250YWN0X2RldGFpbHMuaW5pdGlhbHM7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGFjdC5zdXJuYW1lID0gY29udGFjdHNbaV0uY29tcGFueV9jb250YWN0X2RldGFpbHMuc3VybmFtZTtcclxuICAgICAgICAgICAgICAgICAgICBjb250YWN0LnRpdGxlID0gY29udGFjdHNbaV0uY29tcGFueV9jb250YWN0X2RldGFpbHMuam9iX3RpdGxlO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRhY3QubGFuZ3VhZ2UgPSBjb250YWN0c1tpXS5jb21wYW55X2NvbnRhY3RfZGV0YWlscy5sYW5ndWFnZV9jb3JyZXNwb25kYW5jZS5faWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGFjdC5waG9uZSA9IGNvbnRhY3RzW2ldLmNvbXBhbnlfY29udGFjdF9kZXRhaWxzLnBob25lX251bTtcclxuICAgICAgICAgICAgICAgICAgICBjb250YWN0LnBob25lRXh0ID0gY29udGFjdHNbaV0uY29tcGFueV9jb250YWN0X2RldGFpbHMucGhvbmVfZXh0O1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRhY3QuZmF4ID0gY29udGFjdHNbaV0uY29tcGFueV9jb250YWN0X2RldGFpbHMuZmF4X251bTtcclxuICAgICAgICAgICAgICAgICAgICBjb250YWN0LmVtYWlsID0gY29udGFjdHNbaV0uY29tcGFueV9jb250YWN0X2RldGFpbHMuZW1haWw7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGFjdC5yb3V0aW5nSWQgPSBjb250YWN0c1tpXS5jb21wYW55X2NvbnRhY3RfZGV0YWlscy5Sb3V0aW5nSUQ7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGFjdC5pbXBDb21wYW55TmFtZSA9IGNvbnRhY3RzW2ldLmNvbXBhbnlfY29udGFjdF9kZXRhaWxzLmltcF9jb21wYW55X25hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgbGlzdC5wdXNoKGNvbnRhY3QpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGxpc3Q7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfTtcclxuICAgICAgICAvLyBSZXR1cm4gYSByZWZlcmVuY2UgdG8gdGhlIG9iamVjdFxyXG4gICAgICAgIHJldHVybiBDb21wYW55U2VydmljZTtcclxuICAgIH1cclxuXHJcbiAgICBTdHJpbmcucHJvdG90eXBlLmNhcGl0YWxpemVGaXJzdExldHRlciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHRoaXMuc2xpY2UoMSkudG9Mb3dlckNhc2UoKTtcclxuICAgIH07XHJcblxyXG4gICAgZnVuY3Rpb24gX21hcEFkZHJlc3NMaXN0VG9PdXRwdXQoYWRyTGlzdCwgJHRyYW5zbGF0ZSkge1xyXG4gICAgICAgIHZhciBhZGRyZXNzTGlzdCA9IFtdO1xyXG4gICAgICAgIHZhciBjdXJyZW50TGFuZyA9ICR0cmFuc2xhdGUucHJvcG9zZWRMYW5ndWFnZSgpIHx8ICR0cmFuc2xhdGUudXNlKCk7XHJcbiAgICAgICAgaWYgKGFkckxpc3QpIHtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhZHJMaXN0Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgYWRkcmVzcyA9IHt9O1xyXG4gICAgICAgICAgICAgICAgYWRkcmVzcy5hZGRyZXNzX2lkID0gYWRyTGlzdFtpXS5hZGRyZXNzSUQ7XHJcbiAgICAgICAgICAgICAgICBhZGRyZXNzLm1hbnVmYWN0dXJlciA9IGFkckxpc3RbaV0uYWRkcmVzc1JvbGUubWFudWZhY3R1cmVyID09PSB0cnVlID8gJ1knIDogJ04nO1xyXG4gICAgICAgICAgICAgICAgYWRkcmVzcy5tYWlsaW5nID0gYWRyTGlzdFtpXS5hZGRyZXNzUm9sZS5tYWlsaW5nID09PSB0cnVlID8gJ1knIDogJ04nO1xyXG4gICAgICAgICAgICAgICAgYWRkcmVzcy5iaWxsaW5nID0gYWRyTGlzdFtpXS5hZGRyZXNzUm9sZS5iaWxsaW5nID09PSB0cnVlID8gJ1knIDogJ04nO1xyXG4gICAgICAgICAgICAgICAgYWRkcmVzcy5pbXBvcnRlciA9IGFkckxpc3RbaV0uYWRkcmVzc1JvbGUuaW1wb3J0ZXIgPT09IHRydWUgPyAnWScgOiAnTic7XHJcbiAgICAgICAgICAgICAgICBhZGRyZXNzLmNvbXBhbnlfbmFtZSA9IGFkckxpc3RbaV0uY29tcGFueU5hbWU7XHJcbiAgICAgICAgICAgICAgICBhZGRyZXNzLmJ1c2luZXNzX251bWJlciA9IGFkckxpc3RbaV0uYnVzaW5lc3NOdW1iZXI7XHJcbiAgICAgICAgICAgICAgICBhZGRyZXNzLmltcG9ydGVyX2lkID0gYWRyTGlzdFtpXS5pbXBvcnRlcklEO1xyXG4gICAgICAgICAgICAgICAgYWRkcmVzcy5jb21wYW55X2FkZHJlc3NfZGV0YWlscyA9IHt9O1xyXG4gICAgICAgICAgICAgICAgYWRkcmVzcy5jb21wYW55X2FkZHJlc3NfZGV0YWlscy5zdHJlZXRfYWRkcmVzcyA9IGFkckxpc3RbaV0uc3RyZWV0O1xyXG4gICAgICAgICAgICAgICAgYWRkcmVzcy5jb21wYW55X2FkZHJlc3NfZGV0YWlscy5jaXR5ID0gYWRyTGlzdFtpXS5jaXR5O1xyXG4gICAgICAgICAgICAgICAgLy8gYWRkcmVzcy5jb21wYW55X2FkZHJlc3NfZGV0YWlscy5wcm92aW5jZV9sb3YgPSBhZHJMaXN0W2ldLnN0YXRlTGlzdDtcclxuICAgICAgICAgICAgICAgIGlmIChhZHJMaXN0W2ldLnN0YXRlTGlzdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFkZHJlc3MuY29tcGFueV9hZGRyZXNzX2RldGFpbHMucHJvdmluY2VfbG92ID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfaWQ6IGFkckxpc3RbaV0uc3RhdGVMaXN0LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfX3RleHQ6ICR0cmFuc2xhdGUuaW5zdGFudChhZHJMaXN0W2ldLnN0YXRlTGlzdCwgXCJcIiwgJycsIGN1cnJlbnRMYW5nKVxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGFkZHJlc3MuY29tcGFueV9hZGRyZXNzX2RldGFpbHMucHJvdmluY2VfbG92ID0gXCJcIjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGFkZHJlc3MuY29tcGFueV9hZGRyZXNzX2RldGFpbHMucHJvdmluY2VfdGV4dCA9IGFkckxpc3RbaV0uc3RhdGVUZXh0O1xyXG4gICAgICAgICAgICAgICAgYWRkcmVzcy5jb21wYW55X2FkZHJlc3NfZGV0YWlscy5jb3VudHJ5ID0gXCJcIjtcclxuICAgICAgICAgICAgICAgIGlmIChhZHJMaXN0W2ldLmNvdW50cnkpIHtcclxuICAgICAgICAgICAgICAgICAgICBhZGRyZXNzLmNvbXBhbnlfYWRkcmVzc19kZXRhaWxzLmNvdW50cnkgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9pZDogYWRyTGlzdFtpXS5jb3VudHJ5LmlkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfbGFiZWxfZW46IGFkckxpc3RbaV0uY291bnRyeS5lbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2xhYmVsX2ZyOiBhZHJMaXN0W2ldLmNvdW50cnkuZnIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9fdGV4dDogJHRyYW5zbGF0ZS5pbnN0YW50KGFkckxpc3RbaV0uY291bnRyeS5pZCwgXCJcIiwgJycsIGN1cnJlbnRMYW5nKVxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyBhZGRyZXNzLmNvbXBhbnlfYWRkcmVzc19kZXRhaWxzLmNvdW50cnkgPSBhZHJMaXN0W2ldLmNvdW50cnk7XHJcbiAgICAgICAgICAgICAgICBhZGRyZXNzLmNvbXBhbnlfYWRkcmVzc19kZXRhaWxzLnBvc3RhbF9jb2RlID0gYWRyTGlzdFtpXS5wb3N0YWxDb2RlO1xyXG4gICAgICAgICAgICAgICAgLy9pZihhZHJMaXN0W2ldLmFkZHJlc3NSb2xlLmltcG9ydGVyKXtcclxuICAgICAgICAgICAgICAgICAgLy8gIGFkZHJlc3MuaW1wb3J0ZXJfcHJvZHVjdHM9X21hcEltcG9ydGVySW5mb1RvT3V0cHV0KCBhZHJMaXN0W2ldLmltcG9ydGVyUHJvZHVjdHMpO1xyXG4gICAgICAgICAgICAgICAgLy99XHJcblxyXG5cclxuXHJcbiAgICAgICAgICAgICAgICBhZGRyZXNzTGlzdC5wdXNoKGFkZHJlc3MpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBhZGRyZXNzTGlzdDtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBfbWFwQ29udGFjdExpc3RUb091dHB1dChjb250YWN0cywgJHRyYW5zbGF0ZSkge1xyXG4gICAgICAgIHZhciBjb250YWN0TGlzdCA9IFtdO1xyXG4gICAgICAgIHZhciBjdXJyZW50TGFuZyA9ICR0cmFuc2xhdGUucHJvcG9zZWRMYW5ndWFnZSgpIHx8ICR0cmFuc2xhdGUudXNlKCk7XHJcbiAgICAgICAgaWYgKGNvbnRhY3RzKSB7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29udGFjdHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHZhciBjb250YWN0ID0ge307XHJcbiAgICAgICAgICAgICAgICBjb250YWN0LmNvbnRhY3RfaWQgPSBjb250YWN0c1tpXS5jb250YWN0SWQ7XHJcbiAgICAgICAgICAgICAgICBjb250YWN0Lm1hbnVmYWN0dXJlciA9IGNvbnRhY3RzW2ldLmFkZHJlc3NSb2xlLm1hbnVmYWN0dXJlciA9PT0gdHJ1ZSA/ICdZJyA6ICdOJztcclxuICAgICAgICAgICAgICAgIGNvbnRhY3QubWFpbGluZyA9IGNvbnRhY3RzW2ldLmFkZHJlc3NSb2xlLm1haWxpbmcgPT09IHRydWUgPyAnWScgOiAnTic7XHJcbiAgICAgICAgICAgICAgICBjb250YWN0LmJpbGxpbmcgPSBjb250YWN0c1tpXS5hZGRyZXNzUm9sZS5iaWxsaW5nID09PSB0cnVlID8gJ1knIDogJ04nO1xyXG4gICAgICAgICAgICAgICBjb250YWN0LmltcG9ydGVyID0gY29udGFjdHNbaV0uYWRkcmVzc1JvbGUuaW1wb3J0ZXIgPT09IHRydWUgPyAnWScgOiAnTic7XHJcbiAgICAgICAgICAgICAgICBjb250YWN0LnJlcF9wcmltYXJ5ID0gY29udGFjdHNbaV0uYWRkcmVzc1JvbGUucmVwUHJpbWFyeSA9PT0gdHJ1ZSA/ICdZJyA6ICdOJztcclxuICAgICAgICAgICAgICAgIC8vIGNvbnRhY3QucmVwX3NlY29uZGFyeSA9IGNvbnRhY3RzW2ldLmFkZHJlc3NSb2xlLnJlcFNlY29uZGFyeSA9PT0gdHJ1ZSA/ICdZJyA6ICdOJztcclxuICAgICAgICAgICAgICAgIC8vY29udGFjdC5yZXBfY29udGFjdF9yb2xlID0gY29udGFjdHNbaV0uYWRkcmVzc1JvbGUuY29udGFjdFJvbGUgPT09IHRydWUgPyAnWScgOiAnTic7XHJcbiAgICAgICAgICAgICAgICBjb250YWN0LmNvbXBhbnlfY29udGFjdF9kZXRhaWxzID0ge307XHJcbiAgICAgICAgICAgICAgIC8vIGNvbnRhY3QuY29tcGFueV9jb250YWN0X2RldGFpbHMuc2FsdXRhdGlvbiA9IGNvbnRhY3RzW2ldLnNhbHV0YXRpb247XHJcbiAgICAgICAgICAgICAgICBjb250YWN0LmNvbXBhbnlfY29udGFjdF9kZXRhaWxzLmdpdmVuX25hbWUgPSBjb250YWN0c1tpXS5naXZlbk5hbWU7XHJcbiAgICAgICAgICAgICAgICBjb250YWN0LmNvbXBhbnlfY29udGFjdF9kZXRhaWxzLmluaXRpYWxzID0gY29udGFjdHNbaV0uaW5pdGlhbHM7XHJcbiAgICAgICAgICAgICAgICBjb250YWN0LmNvbXBhbnlfY29udGFjdF9kZXRhaWxzLnN1cm5hbWUgPSBjb250YWN0c1tpXS5zdXJuYW1lO1xyXG4gICAgICAgICAgICAgICAgY29udGFjdC5jb21wYW55X2NvbnRhY3RfZGV0YWlscy5qb2JfdGl0bGUgPSBjb250YWN0c1tpXS50aXRsZTtcclxuICAgICAgICAgICAgICAgIGNvbnRhY3QuY29tcGFueV9jb250YWN0X2RldGFpbHMubGFuZ3VhZ2VfY29ycmVzcG9uZGFuY2UgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgX2lkOiBjb250YWN0c1tpXS5sYW5ndWFnZSxcclxuICAgICAgICAgICAgICAgICAgICBfX3RleHQ6ICR0cmFuc2xhdGUuaW5zdGFudChjb250YWN0c1tpXS5sYW5ndWFnZSwgXCJcIiwgJycsIGN1cnJlbnRMYW5nKVxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIGNvbnRhY3QuY29tcGFueV9jb250YWN0X2RldGFpbHMucGhvbmVfbnVtID0gY29udGFjdHNbaV0ucGhvbmU7XHJcbiAgICAgICAgICAgICAgICBjb250YWN0LmNvbXBhbnlfY29udGFjdF9kZXRhaWxzLnBob25lX2V4dCA9IGNvbnRhY3RzW2ldLnBob25lRXh0O1xyXG4gICAgICAgICAgICAgICAgY29udGFjdC5jb21wYW55X2NvbnRhY3RfZGV0YWlscy5mYXhfbnVtID0gY29udGFjdHNbaV0uZmF4O1xyXG4gICAgICAgICAgICAgICAgY29udGFjdC5jb21wYW55X2NvbnRhY3RfZGV0YWlscy5lbWFpbCA9IGNvbnRhY3RzW2ldLmVtYWlsO1xyXG4gICAgICAgICAgICAgICAgY29udGFjdC5jb21wYW55X2NvbnRhY3RfZGV0YWlscy5Sb3V0aW5nSUQgPSBjb250YWN0c1tpXS5yb3V0aW5nSWQ7XHJcbiAgICAgICAgICAgICAgICBjb250YWN0LmNvbXBhbnlfY29udGFjdF9kZXRhaWxzLmltcF9jb21wYW55X25hbWUgPSBjb250YWN0c1tpXS5pbXBDb21wYW55TmFtZTtcclxuICAgICAgICAgICAgICAgIGNvbnRhY3RMaXN0LnB1c2goY29udGFjdCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGNvbnRhY3RMaXN0O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKipcclxuICAgICAqIE1hcHMgdGhlIGFkcmVzcyBpbXBvcnRlciBpbmZvcm1hdGlvbiB0byB0aGUgb3V0cHV0IHhtbCBkZWZpbml0aW9uXHJcbiAgICAgKiBAcGFyYW0ganNvbk9ialxyXG4gICAgICogQHJldHVybnMgb2JqZWN0XHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICAvKipmdW5jdGlvbiBfbWFwSW1wb3J0ZXJJbmZvVG9PdXRwdXQoanNvbk9iail7XHJcbiAgICAgICAgdmFyIGltcG9ydGVySW5mbz17fTtcclxuICAgICAgICBpZighanNvbk9iaikgcmV0dXJuIGltcG9ydGVySW5mbztcclxuICAgICAgICBpbXBvcnRlckluZm8uc2VsZWN0ZWRfcHJvZHVjdHM9anNvbk9iai5zZWxlY3RlZFByb2R1Y3RzO1xyXG4gICAgICAgIGlmKGpzb25PYmouZG9zc2llcklkTGlzdCAmJiBqc29uT2JqLmRvc3NpZXJJZExpc3QubGVuZ3RoPjApe1xyXG4gICAgICAgICAgICBpbXBvcnRlckluZm8uZG9zc2llcl9pZD1bXTtcclxuICAgICAgICAgICAgZm9yKHZhciBpPTA7aTxqc29uT2JqLmRvc3NpZXJJZExpc3QubGVuZ3RoO2krKyl7XHJcbiAgICAgICAgICAgICAgICBpbXBvcnRlckluZm8uZG9zc2llcl9pZC5wdXNoKGpzb25PYmouZG9zc2llcklkTGlzdFtpXS5kb3NzaWVySWQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBpbXBvcnRlckluZm87XHJcbiAgICB9Ki9cclxuXHJcblxyXG5cclxufSkoKTtcclxuIiwiKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKCdjb21wYW55SGVscFRleHQnLCBbXHJcbiAgICAgICAgICAgICdzZXJ2aWNlcycsXHJcbiAgICAgICAgICAgICdmaWx0ZXJMaXN0cycsXHJcbiAgICAgICAgICAgICdocGZiQ29uc3RhbnRzJyxcclxuICAgICAgICAgICAgJ2RhdGFMaXN0cydcclxuICAgICAgICBdKVxyXG5cclxufSkoKTtcclxuXHJcblxyXG4oZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ2NvbXBhbnlIZWxwVGV4dCcpXHJcbiAgICAgICAgLmNvbXBvbmVudCgnY21wQ29tcGFueUhlbHBUZXh0Jywge1xyXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2FwcC9zY3JpcHRzL2NvbXBvbmVudHMvY29tcGFueUhlbHBUZXh0L3RwbC1jb21wYW55LWhlbHAtdGV4dF8yMDIwMDkwOV8xNTI1Lmh0bWwnLFxyXG4gICAgICAgICAgICBjb250cm9sbGVyOiBDb21wYW55SGVscFRleHRDdHJsLFxyXG4gICAgICAgICAgICBjb250cm9sbGVyQXM6ICdoZWxwJyxcclxuICAgICAgICAgICAgYmluZGluZ3M6IHtcclxuICAgICAgICAgICAgICAgIGh0SW5keExpc3Q6ICc8J1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgQ29tcGFueUhlbHBUZXh0Q3RybC4kaW5qZWN0ID0gW1xyXG4gICAgICAgICckdHJhbnNsYXRlJyxcclxuICAgICAgICAnJHNjb3BlJyxcclxuICAgICAgICAnZ2V0Q291bnRyeUFuZFByb3ZpbmNlcycsXHJcbiAgICAgICAgJ1BST0QnXTtcclxuXHJcbiAgICBmdW5jdGlvbiBDb21wYW55SGVscFRleHRDdHJsKCAkdHJhbnNsYXRlLCAkc2NvcGUsIGdldENvdW50cnlBbmRQcm92aW5jZXMsIFBST0QpIHtcclxuXHJcbiAgICAgICAgdmFyIHZtID0gdGhpcztcclxuICAgICAgICB2bS5sYW5nID0gJHRyYW5zbGF0ZS5wcm9wb3NlZExhbmd1YWdlKCkgfHwgJHRyYW5zbGF0ZS51c2UoKTtcclxuICAgICAgICB2bS5pc0ZvclByb2QgPSBQUk9EID09PSBnZXRDb3VudHJ5QW5kUHJvdmluY2VzLmdldEVudigpO1xyXG5cclxuICAgICAgICB2bS4kb25Jbml0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgfVxyXG59KSgpO1xyXG5cclxuIiwiLyoqXHJcbiAqIENyZWF0ZWQgYnkgaGN1c2VyIG9uIDIwMTctMDYtMDIuXHJcbiAqL1xyXG5cclxuXHJcbihmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ2FsZXJ0TW9kdWxlJyxbXSlcclxufSkoKTtcclxuXHJcbihmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ2FsZXJ0TW9kdWxlJylcclxuICAgICAgICAuY29tcG9uZW50KCdjbXBBbGVydCcsIHtcclxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdhcHAvc2NyaXB0cy9jb21wb25lbnRzL2FsZXJ0Q29tcG9uZW50L3RwbC1hbGVydF8yMDIwMDkwOV8xNTI1Lmh0bWwnLFxyXG4gICAgICAgICAgICB0cmFuc2NsdWRlOnRydWUsXHJcbiAgICAgICAgICAgIGJpbmRpbmdzOiB7XHJcbiAgICAgICAgICAgICAgICB1aVN0YXRlOiAnPCcsXHJcbiAgICAgICAgICAgICAgICBtc2c6ICdAJyxcclxuICAgICAgICAgICAgICAgIG15QW5jaG9yOiAnPCcsXHJcbiAgICAgICAgICAgICAgICB1cGRhdGVTdGF0ZTonJicsXHJcbiAgICAgICAgICAgICAgICB0eXBlOidAJ1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBjb250cm9sbGVyOiBhbGVydENvbnRyb2xsZXIsXHJcbiAgICAgICAgICAgIGNvbnRyb2xsZXJBczogJ2FsZXJ0Q3RybCdcclxuICAgICAgICB9KTtcclxuXHJcbiAgICBhbGVydENvbnRyb2xsZXIuJGluamVjdCA9IFtdO1xyXG5cclxuICAgIGZ1bmN0aW9uIGFsZXJ0Q29udHJvbGxlcigpIHtcclxuXHJcbiAgICAgICAgdmFyIHZtID0gdGhpcztcclxuICAgICAgICB2bS5hbGVydFZpc2libGU9ZmFsc2U7XHJcbiAgICAgICAgdm0uY2xvc2VNc2dBbGlhcz1cIkNMT1NFX0FMRVJUXCI7XHJcbiAgICAgICAgdm0uYW5jaG9yID0gbnVsbDtcclxuXHJcbiAgICAgICAgdm0uJG9uSW5pdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdm0uYWxlcnRWaXNpYmxlPWZhbHNlO1xyXG4gICAgICAgIH07XHJcblxyXG5cclxuICAgICAgICB2bS4kb25DaGFuZ2VzID0gZnVuY3Rpb24gKGNoYW5nZXMpIHtcclxuXHJcbiAgICAgICAgICAgIGlmKGNoYW5nZXMubXNnKXtcclxuICAgICAgICAgICAgICAgIHZtLmNsb3NlTXNnQWxpYXM9Y2hhbmdlcy5tc2cuY3VycmVudFZhbHVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmKGNoYW5nZXMudWlTdGF0ZSl7XHJcbiAgICAgICAgICAgICAgICB2bS5hbGVydFZpc2libGU9Y2hhbmdlcy51aVN0YXRlLmN1cnJlbnRWYWx1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZihjaGFuZ2VzLm15QW5jaG9yKXtcclxuICAgICAgICAgICAgICAgIHZtLmFuY2hvcj1jaGFuZ2VzLm15QW5jaG9yLmN1cnJlbnRWYWx1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZtLm9wZW49ZnVuY3Rpb24oKXtcclxuXHJcbiAgICAgICAgICAgIHZtLnVwZGF0ZVN0YXRlKCk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdm0uY2xvc2U9ZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgdm0udXBkYXRlU3RhdGUoKTtcclxuICAgICAgICAgICAgaWYgKHZtLmFuY2hvcikge1xyXG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQodm0uYW5jaG9yKS5mb2N1cygpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdm0uaXNBbGVydFZpc2libGU9ZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgcmV0dXJuICAgdm0uYWxlcnRWaXNpYmxlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICB9XHJcbn0pKCk7IiwiLyoqXHJcbiAqIENyZWF0ZWQgYnkgZGtpbHR5IG9uIDIwLzA0LzIwMTcuXHJcbiAqL1xyXG5cclxuXHJcbihmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ2Vycm9yTWVzc2FnZU1vZHVsZScsIFtdKVxyXG59KSgpO1xyXG5cclxuKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgnZXJyb3JNZXNzYWdlTW9kdWxlJylcclxuICAgICAgICAuY29tcG9uZW50KCdjbXBFcnJvck1lc3NhZ2UnLCB7XHJcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnYXBwL3NjcmlwdHMvY29tcG9uZW50cy9lcnJvci1tZXNzYWdlL3RwbC1lcnJvci1tZXNzYWdlXzIwMjAwOTA5XzE1MjUuaHRtbCcsXHJcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6IGVycm9yTWVzc2FnZUNvbnRyb2xsZXIsXHJcbiAgICAgICAgICAgIGNvbnRyb2xsZXJBczogJ2Vyck1lc3NhZ2VDdHJsJyxcclxuXHJcbiAgICAgICAgICAgIGJpbmRpbmdzOiB7XHJcbiAgICAgICAgICAgICAgICBmaWVsZE5hbWU6ICc8JywgLy90aGVOYW1lIG9mIHRoZSBmaWVsZFxyXG4gICAgICAgICAgICAgICAgZm9ybVJlZjogJzwnLFxyXG4gICAgICAgICAgICAgICAgc2hvd0Vycm9yOiAnJicsXHJcbiAgICAgICAgICAgICAgICBlcnJvclR5cGVzOiAnPCdcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgLy8gZXJyb3JNZXNzYWdlQ29udHJvbGxlci4kaW5qZWN0ID0gW107XHJcblxyXG4gICAgZnVuY3Rpb24gZXJyb3JNZXNzYWdlQ29udHJvbGxlcigpIHtcclxuICAgICAgICB2YXIgdm0gPSB0aGlzO1xyXG4gICAgICAgIHZtLmZpZWxkX25hbWUgPSBcIlwiO1xyXG4gICAgICAgIHZtLmZvcm1fcmVmID0gbnVsbDtcclxuXHJcbiAgICAgICAgdm0uZmllbGRSZWNvcmRzID0gW107XHJcblxyXG4gICAgICAgIHZtLiRvbkNoYW5nZXMgPSBmdW5jdGlvbiAoY2hhbmdlcykge1xyXG5cclxuICAgICAgICAgICAgaWYgKGNoYW5nZXMuZmllbGROYW1lKSB7XHJcbiAgICAgICAgICAgICAgICB2bS5maWVsZF9uYW1lID0gY2hhbmdlcy5maWVsZE5hbWUuY3VycmVudFZhbHVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChjaGFuZ2VzLmZvcm1SZWYpIHtcclxuXHJcbiAgICAgICAgICAgICAgICB2bS5mb3JtX3JlZiA9IGNoYW5nZXMuZm9ybVJlZi5jdXJyZW50VmFsdWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGNoYW5nZXMuZXJyb3JUeXBlcykge1xyXG4gICAgICAgICAgICAgICAgdm0uZmllbGRSZWNvcmRzID0gY2hhbmdlcy5lcnJvclR5cGVzLmN1cnJlbnRWYWx1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIENvbnRyb2xzIHRoZSB2aXNpYmxpdHkgb2YgdGhlIGVycm9yIG1lc3NhZ2Ugc2VjdGlvblxyXG4gICAgICAgICAqIEByZXR1cm5zIHsqfVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHZtLnNob3dFcnJvck1lc3NhZ2UgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmICghdm0uZm9ybV9yZWYpIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgLy9kZXYgZXJyb3IgbWVzc3NhZ2luZ1xyXG4gICAgICAgICAgICBpZiAoYW5ndWxhci5pc1VuZGVmaW5lZCh2bS5maWVsZE5hbWUpKXtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihcIk5vIGZpZWxkIG5hbWUgZm9yOiBcIiArIHZtLmZvcm1fcmVmLiRuYW1lKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoYW5ndWxhci5pc1VuZGVmaW5lZCh2bS5mb3JtX3JlZlt2bS5maWVsZE5hbWVdKSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKFwibG9va3VwIHVuZGVmaW5lZCBcIiArIHZtLmZvcm1fcmVmLiRuYW1lICsgXCIuXCIgKyB2bS5maWVsZE5hbWUpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiAoKHZtLnNob3dFcnJvcigpICYmIHZtLmZvcm1fcmVmW3ZtLmZpZWxkTmFtZV0uJGludmFsaWQpIHx8ICh2bS5mb3JtX3JlZlt2bS5maWVsZE5hbWVdLiR0b3VjaGVkICYmIHZtLmZvcm1fcmVmW3ZtLmZpZWxkTmFtZV0uJGludmFsaWQpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy9lcnJNZXNzYWdlQ3RybC5maWVsZF9yZWZbZXJyTWVzc2FnZUN0cmwuZmllbGROYW1lXVxyXG4gICAgfVxyXG59KSgpOyIsIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IGRraWx0eSBvbiAzLzE4LzIwMTcuXHJcbiAqL1xyXG5cclxuXHJcbihmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ2Vycm9yU3VtbWFyeU1vZHVsZScsIFtcclxuICAgICAgICAgICAgJ2ZvY3VzLWlmJ1xyXG4gICAgICAgIF0pXHJcbn0pKCk7XHJcblxyXG4oZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKCdlcnJvclN1bW1hcnlNb2R1bGUnKVxyXG4gICAgICAgIC5jb21wb25lbnQoJ2NtcEVycm9yU3VtbWFyeScsIHtcclxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdhcHAvc2NyaXB0cy9jb21wb25lbnRzL2Vycm9yLXN1bW1hcnkvdHBsLWVycm9yLXN1bW1hcnlfMjAyMDA5MDlfMTUyNS5odG1sJyxcclxuICAgICAgICAgICAgY29udHJvbGxlcjogZXJyb3JTdW1tYXJ5Q29udHJvbGxlcixcclxuICAgICAgICAgICAgY29udHJvbGxlckFzOiAnZXJyU3VtbWFyeUN0cmwnLFxyXG5cclxuICAgICAgICAgICAgYmluZGluZ3M6IHtcclxuICAgICAgICAgICAgICAgIGZvcm1SZWY6ICc8JyxcclxuICAgICAgICAgICAgICAgIHNob3dFcnJvcnM6ICc8JyxcclxuICAgICAgICAgICAgICAgIHVwZGF0ZUVycm9yczogJzwnLFxyXG4gICAgICAgICAgICAgICAgbmFtZVN1ZmZpeDogJ0AnLCAvKiogV2hhdCB0byBhZGQgdG8gdGhlIGlkIG9mIHRoZSBlcnJvciBzdW1tYXJ5IHRvIGJlIGFibGUgdG8gZmluZCBpdCAqKi9cclxuICAgICAgICAgICAgICAgIGZvcm1QcmVhbWJsZTogJ0AnLCAvKiogV2hhdCB0byBuYW1lIHRoZSBoZWFkaW5nIHNob3VsZCBzYXkgYWJvdXQgdGhlIHNlY3Rpb24gKiovXHJcbiAgICAgICAgICAgICAgICBtYWtlRm9jdXNlZDogJzwnLFxyXG4gICAgICAgICAgICAgICAgc2V0SGVhZGluZ0xldmVsOiAnQCcsXHJcbiAgICAgICAgICAgICAgICBleGNsdXNpb25MaXN0OiAnPCcsXHJcbiAgICAgICAgICAgICAgICB0cmFuc2NsdWRlTGlzdDonPCcsIC8vdXNlZCBmb3IgZXhwYW5kZXIgbGlzdHMsIHRoZSBuYW1lIG9mIGFuIGVycm9yIHN1bW1hcnkgaW4gYW4gZXhwYW5kaW5nIHRhYmxlIGVudHJ5XHJcbiAgICAgICAgICAgICAgICBmb3JtSWQ6ICc8JyxcclxuICAgICAgICAgICAgICAgIGFsaWFzTGlzdDogJzwnLFxyXG4gICAgICAgICAgICAgICAgZXhwYW5kUmVjb3JkOicmJyxcclxuICAgICAgICAgICAgICAgIHNlbGVjdFRhYjonJidcclxuXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIGVycm9yU3VtbWFyeUNvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywnJGxvY2F0aW9uJywnJGFuY2hvclNjcm9sbCddO1xyXG5cclxuICAgIGZ1bmN0aW9uIGVycm9yU3VtbWFyeUNvbnRyb2xsZXIoJHNjb3BlLCRsb2NhdGlvbiwkYW5jaG9yU2Nyb2xsKSB7XHJcbiAgICAgICAgdmFyIHZtID0gdGhpcztcclxuICAgICAgICB2bS5wYXJlbnRSZWYgPSBudWxsO1xyXG4gICAgICAgIHZtLmVycm9yQXJyYXkgPSBbXTtcclxuICAgICAgICB2bS51bmlxdWVFcnJvckxpc3QgPSB7fTtcclxuICAgICAgICAvL3ZtLnByZXZWYWx1ZSA9IHt9O1xyXG4gICAgICAgIHZtLmlzVmlzaWJsZSA9IGZhbHNlO1xyXG4gICAgICAgIHZtLm5hbWVBZGRlbmR1bSA9IFwiXCI7XHJcbiAgICAgICAgdm0ucm9vdEVycm9yID0gXCJcIjtcclxuICAgICAgICB2bS5pc0ZvY3VzSW5wdXQgPSAwO1xyXG5cclxuICAgICAgICB2bS5leGNsdXNpb25zPXt9O1xyXG4gICAgICAgIHZtLmFsaWFzPXt9O1xyXG4gICAgICAgIHZtLnRyYW5zY2x1ZGVOYW1lcz17fTtcclxuXHJcbiAgICAgICAgdm0uaGVhZGluZ1ByZWFtYmxlID0gXCJcIjtcclxuICAgICAgICB2bS5oZWFkZXJMZXZlbCA9IFwiXCI7XHJcbiAgICAgICAgdm0uc3RhcnRGb3JtSWQgPSBcIlwiO1xyXG5cclxuICAgICAgICB2bS4kb25Jbml0ID0gZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEBwYXJhbSBjaGFuZ2VzXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdm0uJG9uQ2hhbmdlcyA9IGZ1bmN0aW9uIChjaGFuZ2VzKSB7XHJcblxyXG4gICAgICAgICAgICBpZiAoY2hhbmdlcy5zZXRIZWFkaW5nTGV2ZWwpIHtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoYW5ndWxhci5pc0RlZmluZWQoY2hhbmdlcy5zZXRIZWFkaW5nTGV2ZWwuY3VycmVudFZhbHVlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZtLmhlYWRlckxldmVsID0gKGNoYW5nZXMuc2V0SGVhZGluZ0xldmVsLmN1cnJlbnRWYWx1ZSkudG9Mb3dlckNhc2UoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGNoYW5nZXMubmFtZVN1ZmZpeCkge1xyXG4gICAgICAgICAgICAgICAgdm0ubmFtZUFkZGVuZHVtID0gXCItXCIgKyBjaGFuZ2VzLm5hbWVTdWZmaXguY3VycmVudFZhbHVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChjaGFuZ2VzLmZvcm1QcmVhbWJsZSkge1xyXG4gICAgICAgICAgICAgICAgdm0uaGVhZGluZ1ByZWFtYmxlID0gY2hhbmdlcy5mb3JtUHJlYW1ibGUuY3VycmVudFZhbHVlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoY2hhbmdlcy5leGNsdXNpb25MaXN0KSB7XHJcblxyXG4gICAgICAgICAgICAgICAgdm0uZXhjbHVzaW9ucyA9IGNoYW5nZXMuZXhjbHVzaW9uTGlzdC5jdXJyZW50VmFsdWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGNoYW5nZXMuYWxpYXNMaXN0KSB7XHJcblxyXG4gICAgICAgICAgICAgICAgdm0uYWxpYXMgPSBjaGFuZ2VzLmFsaWFzTGlzdC5jdXJyZW50VmFsdWU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vdGhlIGJhc2UgZm9ybSB0aGF0IHRoaXMgZXJyb3Igc3VtbWFyeSBpcyBjaGVja2luZyBmb3JcclxuICAgICAgICAgICAgaWYgKGNoYW5nZXMuZm9ybVJlZikge1xyXG4gICAgICAgICAgICAgICAgdm0uZ2V0RXJyb3JzU3VtbShjaGFuZ2VzLmZvcm1SZWYuY3VycmVudFZhbHVlLiRlcnJvciwgY2hhbmdlcy5mb3JtUmVmLmN1cnJlbnRWYWx1ZS4kbmFtZSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChjaGFuZ2VzLnNob3dFcnJvcnMpIHtcclxuICAgICAgICAgICAgICAgIHZtLmlzVmlzaWJsZSA9IGNoYW5nZXMuc2hvd0Vycm9ycy5jdXJyZW50VmFsdWU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChjaGFuZ2VzLnVwZGF0ZUVycm9ycykge1xyXG4gICAgICAgICAgICAgICAgaWYgKHZtLmZvcm1SZWYpIHtcclxuICAgICAgICAgICAgICAgICAgICAvL3Bhc3MgaW4gdGhlIGZvcm0gbmFtZSBhbmQgdGhlIGVycm9yIG9iamVjdFxyXG4gICAgICAgICAgICAgICAgICAgIC8vc2hvdWxkIEkgcnVuIGl0IGlmIGhpZGRlbj9cclxuICAgICAgICAgICAgICAgICAgICBpZiAodm0uaXNWaXNpYmxlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZtLmdldEVycm9yc1N1bW0odm0uZm9ybVJlZi4kZXJyb3IsIHZtLmZvcm1SZWYuJG5hbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoY2hhbmdlcy5tYWtlRm9jdXNlZCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKChjaGFuZ2VzLm1ha2VGb2N1c2VkLmN1cnJlbnRWYWx1ZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICB2bS5pc0ZvY3VzSW5wdXQgPSB2bS5pc0ZvY3VzSW5wdXQgKyAxO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChjaGFuZ2VzLmZvcm1JZCkge1xyXG4gICAgICAgICAgICAgICAgLyogdXNlZCBmb3IgdGhlIGpxdWVyeSBvcmRlcmluZy4gVGhpcyBnaXZlcyB0aGUgc3RhcnRpbmcgaWQgKiovXHJcbiAgICAgICAgICAgICAgICB2bS5zdGFydEZvcm1JZCA9IGNoYW5nZXMuZm9ybUlkLmN1cnJlbnRWYWx1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZihjaGFuZ2VzLnRyYW5zY2x1ZGVMaXN0KXtcclxuICAgICAgICAgICAgICAgIGlmKGNoYW5nZXMudHJhbnNjbHVkZUxpc3QuY3VycmVudFZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdm0udHJhbnNjbHVkZU5hbWVzID0gY2hhbmdlcy50cmFuc2NsdWRlTGlzdC5jdXJyZW50VmFsdWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcblxyXG4gICAgICAgIC8qKipcclxuICAgICAgICAgKiBEZXRlcm1pbmVzIGlmIHRoZSBzdW1tYXJ5IGlzIHZpc2libGVcclxuICAgICAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbnwqfEFycmF5fVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHZtLmNhbGNJc1Zpc2libGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBzdW1tYXJ5SXNWaXNpYmxlID0gX2lzRXJyb3JTdW1tYXJ5VmlzaWJsZSgpO1xyXG4gICAgICAgICAgICBpZiAoIXN1bW1hcnlJc1Zpc2libGUpIHtcclxuICAgICAgICAgICAgICAgIC8vaWYgaXQgaXMgbm90IHZpc2libGUgYnJvZGNhc3QgaXQgc28gb3RoZXJzIGFyZSBoaWRkZW5cclxuICAgICAgICAgICAgICAgICRzY29wZS4kZW1pdCgnY2hpbGRFcnJvclN1bW1hcnlIaWRlJywgK3ZtLm5hbWVBZGRlbmR1bSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIChzdW1tYXJ5SXNWaXNpYmxlKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBVc2VkIGZvciB0aGUgZXJyb3Igc3VtbWFyeSB0byBleHBhbmQgYSByZWNvcmRcclxuICAgICAgICAgKiBAcGFyYW0gZXJyb3JSZWNvcmRcclxuICAgICAgICAgKi9cclxuICAgICAgICB2bS5zY3JvbGxUbz1mdW5jdGlvbihlcnJvclJlY29yZCl7XHJcbiAgICAgICAgICAgIHZhciBoYXNoSWQ9XCJcIjtcclxuICAgICAgICAgICAgaWYoIWVycm9yUmVjb3JkKSByZXR1cm47XHJcbiAgICAgICAgICAgIGlmKGVycm9yUmVjb3JkLmlzU3VtbWFyeSl7XHJcbiAgICAgICAgICAgICAgICBoYXNoSWQ9J2Vycm9ycy1zdW1tYXJ5LScgKyBlcnJvclJlY29yZC5uYW1lO1xyXG4gICAgICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgICAgIGhhc2hJZD1lcnJvclJlY29yZC5uYW1lO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZtLmV4cGFuZFJlY29yZCh7aW5kZXg6IGVycm9yUmVjb3JkLmV4SW5kZXh9KTtcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coXCJqYW5neW91bmc6XCIgKyBoYXNoSWQgKTtcclxuICAgICAgICAgICAgJGxvY2F0aW9uLmhhc2goaGFzaElkKTtcclxuICAgICAgICAgICAgJGFuY2hvclNjcm9sbCgpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZtLnNlbGVjdFZpc2libGVUYWI9ZnVuY3Rpb24oZXJyb3JSZWNvcmQpe1xyXG4gICAgICAgICAgICB2YXIgaGFzaElkPSdlcnJvcnMtc3VtbWFyeS0nK2Vycm9yUmVjb3JkLm5hbWU7XHJcblxyXG4gICAgICAgICAgICB2bS5zZWxlY3RUYWIoe2luZGV4OmVycm9yUmVjb3JkLnRhYklkfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBDaGVja3MgaWYgYW4gZXJyb3IgaXMgYSBsaW5rIHRvIGEgc3VtbWFyeSByZWNvcmRcclxuICAgICAgICAgKiBJdCBpcyBhIHN1bW1hcnQgaXMgaXNTdW1tbWFyeSBpcyB0cnVlIGFuZCBpdCBpcyBub3QgaW4gYSB0YWIuIFRhYiBpcyBoYW5kbGVkIHNlcGFyYXRlbHlcclxuICAgICAgICAgKiBAcGFyYW0gZXJyb3JSZWNvcmRcclxuICAgICAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbnwqfVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHZtLmlzU3VtbWFyeUxpbms9ZnVuY3Rpb24oZXJyb3JSZWNvcmQpe1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuKGVycm9yUmVjb3JkLmlzU3VtbWFyeSAmJiAoIWFuZ3VsYXIuaXNEZWZpbmVkKGVycm9yUmVjb3JkLnRvRXhwYW5kKSkgJiYoYW5ndWxhci5pc0RlZmluZWQoZXJyb3JSZWNvcmQudGFiSWQpICYmIHBhcnNlSW50KGVycm9yUmVjb3JkLnRhYklkKTwwKSk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQ2hlY2tzIGlmIGFuIGVycm9yIHBvaW50cyB0byBhIGxpc3RcclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEBwYXJhbSBlcnJvclJlY29yZFxyXG4gICAgICAgICAqIEByZXR1cm5zIHtib29sZWFufCp9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdm0uaXNMaXN0PWZ1bmN0aW9uKGVycm9yUmVjb3JkKXtcclxuICAgICAgICAgICAgcmV0dXJuKGVycm9yUmVjb3JkLm5hbWUuaW5kZXhPZignbGlzdF8nKSA+PSAwKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIENoZWNrcyBpZiBhbiBlcnJvciByZW9vcmQgaXMgYSBzdW1tYXJ5IGluIGEgdGFiLiBJZiB0cnVlLCBuZWVkIHRvIGNsaWNrIHRoZSB0YWIgZmlyc3QgYmVmb3JlIGZvY3Vzc2luZyBvbiB0aGUgc3VtbWFyeVxyXG4gICAgICAgICAqIEBwYXJhbSBlcnJvclJlY29yZFxyXG4gICAgICAgICAqIEByZXR1cm5zIHtib29sZWFufCp9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdm0uaXNUYWJMaW5rPWZ1bmN0aW9uKGVycm9yUmVjb3JkKXtcclxuICAgICAgICAgICAgcmV0dXJuKGVycm9yUmVjb3JkLmlzU3VtbWFyeSAmJihhbmd1bGFyLmlzRGVmaW5lZChlcnJvclJlY29yZC50YWJJZCkgJiYgcGFyc2VJbnQoZXJyb3JSZWNvcmQudGFiSWQpPi0xKSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICB2bS5pc0V4cGFuZGVyTGluaz1mdW5jdGlvbihlcnJvclJlY29yZCl7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gYW5ndWxhci5pc0RlZmluZWQoZXJyb3JSZWNvcmQudG9FeHBhbmQpO1xyXG4gICAgICAgIH07XHJcblxyXG5cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gX2lzRXJyb3JTdW1tYXJ5VmlzaWJsZSgpIHtcclxuICAgICAgICAgICAgcmV0dXJuICh2bS5pc1Zpc2libGUgJiYgKHZtLmVycm9yQXJyYXkgJiYgdm0uZXJyb3JBcnJheS5sZW5ndGggPiAwKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAkc2NvcGUuJG9uKCdjaGlsZEVycm9yU3VtbWFyeUhpZGUnLCBmdW5jdGlvbiAoZXZlbnQsIGRhdGEpIHtcclxuICAgICAgICAgICAgLy8gJHNjb3BlLm1haW5EYXRhLmxvZ3MgPSAkc2NvcGUubWFpbkRhdGEubG9ncyArICdcXG5NYWluQ29udHJvbGxlciAtIHJlY2VpdmUgRVZFTlQgXCInICsgZXZlbnQubmFtZSArICdcIiB3aXRoIG1lc3NhZ2UgPSBcIicgKyBkYXRhLm1lc3NhZ2UgKyAnXCInO1xyXG4gICAgICAgICAgICBpZiAoX2lzRXJyb3JTdW1tYXJ5VmlzaWJsZSgpKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZXJyb3JTdW1tYXJ5QnJvYWRjYXN0TmFtZSA9IGRhdGEubWVzc2FnZTtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdm0uZXJyb3JBcnJheS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBlcnJvclJlY29yZCA9IGVycm9yQXJyYXlbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVycm9yUmVjb3JkLmlzU3VtbWFyeSAmJiBlcnJvclJlY29yZC5uYW1lID09PSBlcnJvclN1bW1hcnlCcm9hZGNhc3ROYW1lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZtLmVycm9yQXJyYXkuc3BsaWNlKGksIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBNYWluIGZ1bmN0aW9uYWxpdHkgZm9yIGdldHRpbmcgaHRlIGVycm9yc1xyXG4gICAgICAgICAqIEBwYXJhbSBteWZvcm1FcnJvcnNcclxuICAgICAgICAgKiBAcGFyYW0gbmFtZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHZtLmdldEVycm9yc1N1bW0gPSBmdW5jdGlvbiAobXlmb3JtRXJyb3JzLCBuYW1lKSB7XHJcbiAgICAgICAgICAgIHZtLmVycm9yQXJyYXkgPSBbXTtcclxuICAgICAgICAgICAgdm0udW5pcXVlRXJyb3JMaXN0ID0ge307XHJcbiAgICAgICAgICAgIF9nZXRFcnIobXlmb3JtRXJyb3JzLCB2bS51bmlxdWVFcnJvckxpc3QsIG5hbWUpO1xyXG4gICAgICAgICAgICBfaGlkZVJlcXVpcmVkUmVjb3JkRXJyb3JzKHZtLnVuaXF1ZUVycm9yTGlzdCk7XHJcbiAgICAgICAgICAgLy8gY29uc29sZS5sb2coICd2bS51bmlxdWVFcnJvckxpc3QnKTtcclxuICAgICAgICAgICAvLyBjb25zb2xlLmxvZyggdm0udW5pcXVlRXJyb3JMaXN0KTtcclxuICAgICAgICAgICAgaWYodm0uZm9ybVByZWFtYmxlID09ICdDT01QQU5ZX0ZPUk0nKXtcclxuICAgICAgICAgICAgICAgIHZtLmVycm9yQXJyYXkgPSBPYmplY3Qua2V5cyh2bS51bmlxdWVFcnJvckxpc3QpLm1hcChmdW5jdGlvbiAoaykge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB2bS51bmlxdWVFcnJvckxpc3Rba11cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgdmFyIHRlbXAgPSB2bS5lcnJvckFycmF5WzBdO1xyXG4gICAgICAgICAgICAgICAgZm9yKHZhciBpID0gMDsgaTwgdm0uZXJyb3JBcnJheS5sZW5ndGggLSAxOyBpKyspe1xyXG4gICAgICAgICAgICAgICAgICAgIHZtLmVycm9yQXJyYXlbaV0gPSB2bS5lcnJvckFycmF5W2krMV07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYodm0uZXJyb3JBcnJheVtpXS50eXBlID09IFwicmVxdWlyZWRcIil7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZtLmVycm9yQXJyYXlbaV0udHlwZSA9IFwiVFlQRV9SRVFVSVJFRFwiO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHZtLmVycm9yQXJyYXlbdm0uZXJyb3JBcnJheS5sZW5ndGggLSAxXSA9IHRlbXA7XHJcbiAgICAgICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICAgICAgdmFyIG5ld0Vycm9ycyA9IF9zb3J0RXJyb3JzQnlEb21PcmRlcigpO1xyXG4gICAgICAgICAgICAgICAgLy8gIGNvbnNvbGUubG9nKCduZXdFcnJvcnMnKTtcclxuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKG5ld0Vycm9ycyk7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWFuZ3VsYXIuZXF1YWxzKHZtLmVycm9yQXJyYXksIG5ld0Vycm9ycykpIHtcclxuICAgICAgICAgICAgICAgICAgICB2bS5lcnJvckFycmF5ID0gbmV3RXJyb3JzO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLy9oaWRlIHJlY29yZCByZXF1aXJlZCBlcnJvciBpZiB0aGVyZSBhcmUgZXJyb3JzIGluIHRoZSByZWNvcmRcclxuICAgICAgICBmdW5jdGlvbiBfaGlkZVJlcXVpcmVkUmVjb3JkRXJyb3JzKGVycm9ycykge1xyXG4gICAgICAgICAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGVycm9ycyk7XHJcbiAgICAgICAgICAgIGlmICghKGtleXMgaW5zdGFuY2VvZiBBcnJheSkpIHtcclxuICAgICAgICAgICAgICAgIGtleXMgPSBba2V5c107XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gaWYgKGtleXMuaW5kZXhPZihcImxpZmVjeWNsZUN0cmwubGlmZWN5Y2xlRGV0YWlsc0Zvcm1cIikgPiAtMSkge1xyXG4gICAgICAgICAgICAvLyAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIC8vICAgICAgICAgaWYgKGtleXNbaV0uaW5kZXhPZihcInNhdmVMaWZlUmVjXCIpID4gLTEpIHtcclxuICAgICAgICAgICAgLy8gICAgICAgICAgICAgZGVsZXRlIGVycm9yc1trZXlzW2ldXTtcclxuICAgICAgICAgICAgLy8gICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIC8vICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyAgICAgfVxyXG4gICAgICAgICAgICAvLyB9XHJcbiAgICAgICAgICAgIGlmIChrZXlzLmluZGV4T2YoXCJpbmdSZWNDdHJsLmFjdGl2ZUluZ0Zvcm1cIikgPiAtMSkge1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGtleXNbaV0uaW5kZXhPZihcIm5vX2FjdGl2ZVwiKSA+IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBlcnJvcnNba2V5c1tpXV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoa2V5cy5pbmRleE9mKFwiY3RyQ3RybC5jb250YWluZXJUeXBlRm9ybVwiKSA+IC0xKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoa2V5c1tpXS5pbmRleE9mKFwibm9fY29udGFpbmVyXCIpID4gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIGVycm9yc1trZXlzW2ldXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgLy9nZXRzIGFsbCB0aGUgZXJyb3JzIGZyb20gZXJyb3Igb2JqZWN0c1xyXG4gICAgICAgIGZ1bmN0aW9uIF9nZXRFcnIoZXJyb3JPYmosIHJlc3VsdHNMaXN0LCBwYXJlbnQpIHtcclxuICAgICAgICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhlcnJvck9iaik7XHJcbiAgICAgICAgICAgIHZhciBuZXdMaXN0ID0ge307XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgdmFyIHJlY29yZCA9IGVycm9yT2JqW2tleXNbaV1dO1xyXG4gICAgICAgICAgICAgICAgLy9leHBlY3RpbmcgYW4gYXJyYXlcclxuICAgICAgICAgICAgICAgIGlmICghKHJlY29yZCBpbnN0YW5jZW9mIEFycmF5KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlY29yZCA9IFtyZWNvcmRdO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCByZWNvcmQubGVuZ3RoOyBqKyspIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy9jb25maWd1cmUgZm9yIHRoZSB0ZXN0c1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBudW1JbmRleD1yZWNvcmRbal0uJG5hbWUubGFzdEluZGV4T2YoXCJfXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB0cmFuc2NsdWRlTmFtZT1cIlwiO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vcGFyc2UgZm9yIGEgdHJhbnNjbHVkZSBuYW1lLiBVc2VkIGZvciBjb21wYXJpc29uIGJlbG93XHJcbiAgICAgICAgICAgICAgICAgICAgaWYobnVtSW5kZXg+MCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2NsdWRlTmFtZSA9IHJlY29yZFtqXS4kbmFtZS5zdWJzdHJpbmcoMCwgbnVtSW5kZXgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAvL2Nhc2UgdGhpcyBpcyBhIGZvcm0tIGFzc3VtZXMgZm9ybWF0IDxjb250cm9sbGxlcj4uPGZvcm1OYW1lPlxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChyZWNvcmRbal0uJGludmFsaWQgPT09IHRydWUgJiYgcmVjb3JkW2pdLiRuYW1lLmluZGV4T2YoJy4nKSA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9pdCBpcyBhc3N1bWVkIHRoYXQgaWYgaXQgaXMgaW4gdGhlIGV4Y2x1c2lvbiBsaXN0IGl0IGlzIGEgc3VtbWFyeVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodm0uZXhjbHVzaW9ucyAmJiB2bS5leGNsdXNpb25zLmhhc093blByb3BlcnR5KHJlY29yZFtqXS4kbmFtZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vb25seSBwcm9jZXNzIHRoaXMgYXMgYSBzdW1tYXJ5IGlmIGl0IGlzIGluIHRoZSBleGNsdXNpb25zIGxpc3RcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0YWJJbmRleD12bS5leGNsdXNpb25zW3JlY29yZFtqXS4kbmFtZV0uaW5kZXhPZigndGFiXycpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRhYklkPS0xO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYodGFiSW5kZXg+LTEpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFiSWQ9dm0uZXhjbHVzaW9uc1tyZWNvcmRbal0uJG5hbWVdLnN1YnN0cih0YWJJbmRleCs0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhYklkPXBhcnNlSW50KHRhYklkKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5tZXJnZShyZXN1bHRzTGlzdCwgX2NyZWF0ZVN1bW1hcnlSZWNvcmQocmVjb3JkW2pdLiRuYW1lLCBrZXlzW2ldLCBwYXJlbnQsdGFiSWQpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9nZXRFcnIocmVjb3JkW2pdLiRlcnJvciwgcmVzdWx0c0xpc3QsIHJlY29yZFtqXS4kbmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gY2FzZSB0aGlzIGlzIGEgdHJhbnNjbHVkZSBpLmUuIHRoZSBleHBhbmRpbmcgdGFibGVcclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh2bS50cmFuc2NsdWRlTmFtZXMuaGFzT3duUHJvcGVydHkodHJhbnNjbHVkZU5hbWUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBleEluZGV4ID0gcmVjb3JkW2pdLiRuYW1lLmluZGV4T2YodHJhbnNjbHVkZU5hbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2V4dHJhY3QgdGhlIGluZGV4IGl0IGlzIHRoZSBzdHJpbmcgbGVuZ3RoICsxLiBCeSBjb252ZW50aW9uIHRoZXJlIGlzIGFuIHVuZGVyc2NvcmVcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGV4cGFuZEluZGV4ID0gcmVjb3JkW2pdLiRuYW1lLnN1YnN0cmluZyhleEluZGV4K3RyYW5zY2x1ZGVOYW1lLmxlbmd0aCsxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9tYWtlIGFuIG9iamVjdCB0aGF0IHdpbGwgY2F1c2UgZXhwYW5kIGFuZCBmb2N1cyBvblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLm1lcmdlKHJlc3VsdHNMaXN0LF9jcmVhdGVFeHBhbmRlclJlY29yZChyZWNvcmRbal0uJG5hbWUsdHJhbnNjbHVkZU5hbWUsa2V5c1tpXSxwYXJlbnQsZXhwYW5kSW5kZXgpKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAocmVjb3JkW2pdLiRpbnZhbGlkID09PSB0cnVlICYmICFyZXN1bHRzTGlzdC5oYXNPd25Qcm9wZXJ0eShyZWNvcmRbal0uJG5hbWUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSBfcHJvY2Vzc1JlY29yZChyZWNvcmRbal0uJG5hbWUsIGtleXNbaV0sIHBhcmVudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vZG9uJ3QgZGlzcGxheSByZXdxdWlyZWQgdGV4dCBmb3IgU0FWRUxJRkVSRUMgZXJyb3JcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdFtyZWNvcmRbal0uJG5hbWVdLnRyYW5zbGF0ZUtleSA9PT0gJ1NBVkVMSUZFUkVDJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0W3JlY29yZFtqXS4kbmFtZV0udHlwZSA9ICcnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIubWVyZ2UocmVzdWx0c0xpc3QsIHJlc3VsdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvL2dldHMgdGhlIG5hbWUgcGFydHNcclxuICAgICAgICBmdW5jdGlvbiBfc2NydWJGaWVsZE5hbWUocmF3TmFtZSkge1xyXG4gICAgICAgICAgICB2YXIgc2VwYXJhdG9yID0gJ18nO1xyXG4gICAgICAgICAgICB2YXIgaW5kZXggPSByYXdOYW1lLmxhc3RJbmRleE9mKHNlcGFyYXRvcik7XHJcbiAgICAgICAgICAgIHZhciBjbGVhbmVkTmFtZSA9IFwiXCI7XHJcbiAgICAgICAgICAgIGlmIChpbmRleCA+IC0xKSB7XHJcbiAgICAgICAgICAgICAgICBjbGVhbmVkTmFtZSA9IHJhd05hbWUuc3Vic3RyaW5nKDAsIGluZGV4KTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNsZWFuZWROYW1lID0gcmF3TmFtZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gY2xlYW5lZE5hbWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBHZXRzIHRoZSBlbGVtZW50IHNjb3BlLiBCeSBjb252ZW50aW9uIGl0IGlzIHRoZSB2YWx1ZSBhZnRlciB0aGUgbGFzdCB1bmRlcnNjb3JlXHJcbiAgICAgICAgICogQHBhcmFtIHJhd05hbWVcclxuICAgICAgICAgKiBAcmV0dXJucyB7TnVtYmVyfVxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZnVuY3Rpb24gX2dldEVsZW1lbnRTY29wZShyYXdOYW1lKSB7XHJcbiAgICAgICAgICAgIHZhciBzZXBhcmF0b3IgPSAnXyc7XHJcbiAgICAgICAgICAgIHZhciBuYW1lU3BsaXQgPSByYXdOYW1lLnNwbGl0KHNlcGFyYXRvcik7XHJcbiAgICAgICAgICAgIHZhciBzY29wZUlkID0gcGFyc2VJbnQobmFtZVNwbGl0W25hbWVTcGxpdC5sZW5ndGggLSAxXSk7XHJcbiAgICAgICAgICAgIGlmICghYW5ndWxhci5pc051bWJlcihzY29wZUlkKSkge1xyXG4gICAgICAgICAgICAgICAgc2NvcGVJZCA9IFwiXCI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHNjb3BlSWQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBQcm9jZXNzZXMgYSBub24gc3VtbWFyeSByZWNvcmQuIENoZWNrcyBmb3IgYWxpYXNlcyBhbmQgcHJvY2Vzc2VzIGFjY29yZGluZ2x5XHJcbiAgICAgICAgICogQHBhcmFtIGVycm9yX05hbWUgLSB0aGUgbmFtZSBvZiB0aGUgZXJyb3IgZnJvbSBhbmd1bGFyIGVycm9yIG9iamVjdFxyXG4gICAgICAgICAqIEBwYXJhbSBlcnJvclR5cGUgLSB0aGUgdHlwZSBvZiBlcnJvciByZXF1aXJlZCwgcGF0dGVybiBldGNcclxuICAgICAgICAgKiBAcGFyYW0gcGFyZW50IC0gdGhlIG5hbWUgb2YgdGhlIGZvcm0gdGhhdCB0aGUgZmllbGQgb3JpZ2luYXRlc1xyXG4gICAgICAgICAqIEByZXR1cm5zIHt7fX0ganNvbm9iaiB3aXRoIGRlc2NyaXB0aW9uIGluZm9ybWF0aW9uXHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBmdW5jdGlvbiBfcHJvY2Vzc1JlY29yZChlcnJvcl9OYW1lLCBlcnJvclR5cGUsIHBhcmVudCkge1xyXG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0ge307XHJcbiAgICAgICAgICAgIHZhciBzY3J1Yk5hbWUgPSBfc2NydWJGaWVsZE5hbWUoZXJyb3JfTmFtZSk7XHJcbiAgICAgICAgICAgIHZhciBzY29wZUlkID0gX2dldEVsZW1lbnRTY29wZShlcnJvcl9OYW1lKTtcclxuICAgICAgICAgICAgdmFyIGVycm9yS2V5ID0gXCJUWVBFX1wiICsgZXJyb3JUeXBlLnRvVXBwZXJDYXNlKCk7XHJcbiAgICAgICAgICAgIHZhciBkZXN0SWQgPSBlcnJvcl9OYW1lO1xyXG4gICAgICAgICAgICBpZiAodm0uYWxpYXMgJiYgdm0uYWxpYXMuaGFzT3duUHJvcGVydHkoc2NydWJOYW1lKSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGFsaWFzUmVjID0gdm0uYWxpYXNbc2NydWJOYW1lXTtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoYWxpYXNSZWMudHlwZS50b0xvd2VyQ2FzZSgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcImZpZWxkc2V0XCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzZWFyY2hJZCA9IGFsaWFzUmVjLnBhcmVudCArIFwiX1wiICsgc2NvcGVJZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRlc3RPYmogPSAkKFwiI1wiICsgc2VhcmNoSWQpLmZpbmQoJ2lucHV0OnZpc2libGU6Zmlyc3QnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRlc3RPYmoubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzdElkID0gZGVzdE9ialswXS5pZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiZWxlbWVudFwiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZXN0SWQgPSBhbGlhc1JlYy50YXJnZXQgKyBcIl9cIiArIHNjb3BlSWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJlbGVtZW50bm9pZFwiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZXN0SWQgPSBhbGlhc1JlYy50YXJnZXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJwYXR0ZXJuXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlcnJvclR5cGUgPT09IFwicGF0dGVyblwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvcktleSA9IGFsaWFzUmVjLmVycm9yVHlwZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwic2VsZWN0MlwiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2VhcmNoSWQgPSBhbGlhc1JlYy5uYW1lICsgXCJfbWF0Y2hcIiArIHNjb3BlSWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vVE9ETyBtYWtlIGFuZ3VsYXIgZnJpZW5kbHlcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRlc3RPYmogPSAkKFwiI1wiICsgc2VhcmNoSWQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGVzdE9iai5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXN0SWQgPSBzZWFyY2hJZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwibWluXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlcnJvclR5cGUgPT09IFwibWluXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yS2V5ID0gYWxpYXNSZWMuZXJyb3JUeXBlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJtYXhcIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVycm9yVHlwZSA9PT0gXCJtYXhcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JLZXkgPSBhbGlhc1JlYy5lcnJvclR5cGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcIm1pbmxlbmd0aFwiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXJyb3JUeXBlID09PSBcIm1pbmxlbmd0aFwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvcktleSA9IGFsaWFzUmVjLmVycm9yVHlwZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwibWF4bGVuZ3RoXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlcnJvclR5cGUgPT09IFwibWF4bGVuZ3RoXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yS2V5ID0gYWxpYXNSZWMuZXJyb3JUeXBlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiYnV0dG9uc2VhcmNoXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yS2V5ID0gIFwiVFlQRV9SRVFVSVJFRFwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJC5lYWNoKCQoJ2J1dHRvbicsICcjJyArIHZtLnN0YXJ0Rm9ybUlkKSwgZnVuY3Rpb24gKGspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0ZW1wX2F0dHIgPSAkKHRoaXMpLmF0dHIoJ2lkJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGVtcF9hdHRyICYmIHRlbXBfYXR0ci5pbmRleE9mKGFsaWFzUmVjLmJ1dHRvbk5hbWUpPi0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc3RJZD10ZW1wX2F0dHI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oXCJObyB0eXBlIGZvdW5kIFwiICsgYWxpYXNSZWMudHlwZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmKCEgcmVzdWx0W2Vycm9yX05hbWVdKXtcclxuICAgICAgICAgICAgICAgIHJlc3VsdFtlcnJvcl9OYW1lXSA9IHtcclxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBkZXN0SWQsXHJcbiAgICAgICAgICAgICAgICAgICAgZXJyb3JOYW1lOiBlcnJvcl9OYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgIHRyYW5zbGF0ZUtleTogc2NydWJOYW1lLnRvVXBwZXJDYXNlKCksXHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogZXJyb3JLZXksXHJcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50OiBwYXJlbnQsXHJcbiAgICAgICAgICAgICAgICAgICAgY29uY2F0OiBwYXJlbnQgKyAnLicgKyBlcnJvcl9OYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgIGlzU3VtbWFyeTogZmFsc2VcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vVE9ETyBjbGVhbnVwICB0aGlzIGZ1bmN0aW9uLCBpbmVmZmljaWVudFxyXG4gICAgICAgIGZ1bmN0aW9uIF9zb3J0RXJyb3JzQnlEb21PcmRlcigpIHtcclxuICAgICAgICAgICAgdmFyIGRvbUZpZWxkTGlzdCA9IHt9O1xyXG4gICAgICAgICAgICAvL1RPRE8gbWFrZSBhbmd1bGFyIGZyaWVuZGx5XHJcbiAgICAgICAgICAgIC8vZ2V0IGFsbCB0aGUgaW5wdXRzIGFuZCBhc3NpZ24gb3JkZXIgaW5kZXhcclxuICAgICAgICAgICAgJC5lYWNoKCQoJ2lucHV0LCBzZWxlY3QsIHRleHRhcmVhLCBmaWVsZHNldCcpLCBmdW5jdGlvbiAoaykge1xyXG4gICAgICAgICAgICAgICAgdmFyIHRlbXBfYXR0ciA9ICQodGhpcykuYXR0cignaWQnKTtcclxuICAgICAgICAgICAgICAgIGlmICh0ZW1wX2F0dHIpIHtcclxuICAgICAgICAgICAgICAgICAgICBkb21GaWVsZExpc3RbdGVtcF9hdHRyXSA9IGs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAvL2RlbGV0ZSBhbnl0aGluZyBpbiB0aGUgbm90IGluIHRoZSBsaXN0XHJcbiAgICAgICAgICAgIC8vVE9ETyByZWZhY3Rvcj8gc2VlbXMgaW5lZmZpY2llbnRcclxuICAgICAgICAgICAgdmFyIGtleUxpc3QgPSBPYmplY3Qua2V5cyhkb21GaWVsZExpc3QpO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBwID0gMDsgcCA8IGtleUxpc3QubGVuZ3RoOyBwKyspIHtcclxuICAgICAgICAgICAgICAgIC8vc3BlY2lmaWNhbGx5IGhhbmRsZWQgdGhlIGFuZ3VsYXIgYm9vdHN0cmFwIHVpLXNlbGVjdFxyXG4gICAgICAgICAgICAgICAgaWYoa2V5TGlzdFtwXS5pbmRleE9mKFwiZm9jdXNzZXItXCIpPi0xKXtcclxuICAgICAgICAgICAgICAgICAgICAvL2ZpbmQgdGhlIHBhcmVudFxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBwYXJlbnROYW1lPWFuZ3VsYXIuZWxlbWVudChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjJytrZXlMaXN0W3BdKSkucGFyZW50KCkuYXR0cignbmFtZScpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKHBhcmVudE5hbWUpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBrZXlMaXN0W3BdPXBhcmVudE5hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKCF2bS51bmlxdWVFcnJvckxpc3Rba2V5TGlzdFtwXV0pIHtcclxuICAgICAgICAgICAgICAgICAgICBrZXlMaXN0LnNwbGljZShwLCAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcC0tO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciBzb3J0ZWREb21Kc29uTGlzdCA9IHt9O1xyXG4gICAgICAgICAgICAvL2NyZWF0ZSBhIGpzb24gd2hlcmUgdGhlIGtleSBpcyB0aGUgbmFtZSwgYW5kIHRoZSB2YWx1ZSBpcyB0aGUgaW5kZXggKGllIHRoZSBwb3NpdGlvbiBpdCBzaG91bGQgYmVcclxuICAgICAgICAgICAgLy90aGlzIGFsbG93cyBsb29rdXAgYnkgbmFtZSBhbmQgZ2V0cyB0aGUgaW5kZXhcclxuICAgICAgICAgICAgZm9yICh2YXIgdiA9IDA7IHYgPCBrZXlMaXN0Lmxlbmd0aDsgdisrKSB7XHJcbiAgICAgICAgICAgICAgICAvL3NwZWNpZmljYWxseSBoYW5kbGVkIG5vIGl0ZW0gZXJyb3JzICghU3RyaW5nLnByb3RvdHlwZS5zdGFydHNXaXRoIGRvZXMgbm90IHN1cHBvcnQgSUUpXHJcbiAgICAgICAgICAgICAgICAvLyBpZihrZXlMaXN0W3ZdLnN0YXJ0c1dpdGgoXCJub19cIikpe1xyXG4gICAgICAgICAgICAgICAgaWYoa2V5TGlzdFt2XS5pbmRleE9mKFwibm9fXCIpID09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBrZXlMaXN0W3ZdPWtleUxpc3Rbdl0ucmVwbGFjZShcIm5vX1wiLCBcImxpc3RfXCIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgc29ydGVkRG9tSnNvbkxpc3Rba2V5TGlzdFt2XV0gPSB2O1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvL2NyZWF0ZSBhbiBhcnJheVxyXG4gICAgICAgICAgICB2YXIgbmV3RXJyb3JzID0gT2JqZWN0LmtleXModm0udW5pcXVlRXJyb3JMaXN0KS5tYXAoZnVuY3Rpb24gKGspIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB2bS51bmlxdWVFcnJvckxpc3Rba11cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIC8vc29ydCBlcnJvcnNcclxuICAgICAgICAgICAgdmFyIG5vdERlZmluZWQgPSB7fTtcclxuICAgICAgICAgICAgaWYgKG5ld0Vycm9ycy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgaSA9IDA7XHJcbiAgICAgICAgICAgICAgICB3aGlsZSAoaSA8IG5ld0Vycm9ycy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgY3VyclJlYyA9IG5ld0Vycm9yc1tpXTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0TmFtZSA9IGN1cnJSZWMuZXJyb3JOYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBkZXN0SW5kZXggPSBzb3J0ZWREb21Kc29uTGlzdFt0YXJnZXROYW1lXTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYW5ndWxhci5pc0RlZmluZWQoZGVzdEluZGV4KSAmJiBkZXN0SW5kZXggIT09IGkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRlbXBSZWMgPSBhbmd1bGFyLmNvcHkobmV3RXJyb3JzW2Rlc3RJbmRleF0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdFcnJvcnNbZGVzdEluZGV4XSA9IGFuZ3VsYXIuY29weShjdXJyUmVjKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3RXJyb3JzW2ldID0gYW5ndWxhci5jb3B5KHRlbXBSZWMpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWFuZ3VsYXIuaXNEZWZpbmVkKGRlc3RJbmRleCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vdERlZmluZWRbY3VyclJlYy5uYW1lXSA9IHtyZWM6IGN1cnJSZWMsIHBvczogaX07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaSsrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBfc29ydFVua25vd25zKG5vdERlZmluZWQsIG5ld0Vycm9ycyk7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXdFcnJvcnM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBGb3IgZXJyb3JzIG5vdCBmb3VuZCBpbiBkb20gdXNpbmcganF1ZXJ5LCB0cnkgdG8gZmluZCB3aGVyZSB0aGV5IGJlbG9uZyBiYXNlZCBvbiBzY29wZSBpZFxyXG4gICAgICAgICAqIElmIGZvdW5kIHBsYWNlIGFmdGVyIHRoZSBsYXN0IHNhbWUgc2NvcGUgdmFsZVxyXG4gICAgICAgICAqIEBwYXJhbSB1bmtub3duSnNvblxyXG4gICAgICAgICAqIEBwYXJhbSBzb3J0TGlzdFxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZnVuY3Rpb24gX3NvcnRVbmtub3ducyh1bmtub3duSnNvbiwgc29ydExpc3QpIHtcclxuICAgICAgICAgICAgLy90cnkgYW5kIGZpbmQgc2NvcGVcclxuICAgICAgICAgICAgLy9jcmVhdGUgYXJyYXlcclxuICAgICAgICAgICAgdmFyIHVua25vd25BcnJheSA9IE9iamVjdC5rZXlzKHVua25vd25Kc29uKS5tYXAoZnVuY3Rpb24gKGspIHtcclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdW5rbm93bkpzb25ba11cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdW5rbm93bkFycmF5Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgdW5rbm93blJlYyA9IHVua25vd25BcnJheVtpXTtcclxuICAgICAgICAgICAgICAgIHZhciB1bmtub3duTmFtZSA9IHVua25vd25SZWMucmVjLm5hbWU7XHJcbiAgICAgICAgICAgICAgICB2YXIgc2NvcGVJbmRleCA9IF9nZXRFbGVtZW50U2NvcGUodW5rbm93bk5hbWUpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGFuZ3VsYXIuaXNOdW1iZXIoc2NvcGVJbmRleCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBnID0gc29ydExpc3QubGVuZ3RoIC0gMTsgZyA+PSAwOyBnLS0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNvcnRSZWMgPSBzb3J0TGlzdFtnXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNvcnRTY29wZSA9IF9nZXRFbGVtZW50U2NvcGUoc29ydFJlYy5uYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFuZ3VsYXIuaXNOdW1iZXIoc29ydFNjb3BlKSAmJiBzb3J0U2NvcGUgPT09IHNjb3BlSW5kZXggJiYgdW5rbm93bk5hbWUgIT09IHNvcnRSZWMubmFtZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc29ydExpc3QubW92ZSh1bmtub3duUmVjLnBvcywgZyArIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIEFycmF5LnByb3RvdHlwZS5tb3ZlID0gZnVuY3Rpb24gKGZyb20sIHRvKSB7XHJcbiAgICAgICAgICAgIGlmICh0byA8IDApIHRvID0gMDtcclxuICAgICAgICAgICAgaWYgKHRvID49IHRoaXMubGVuZ3RoKSB0byA9IHRoaXMubGVuZ3RoIC0gMTtcclxuICAgICAgICAgICAgdGhpcy5zcGxpY2UodG8sIDAsIHRoaXMuc3BsaWNlKGZyb20sIDEpWzBdKTtcclxuICAgICAgICB9O1xyXG5cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogIFVzZWQgdG8gY3JlYXRlIGEgc3VtbWFyeSByZWNvcmQuIEdlbmVyYWxseSB1c2VkIHdoZW4gbmV3IGZvcm1zIGFyZSBkZWZpbmVkXHJcbiAgICAgICAgICogIGkuZS4gZ2V0IGEgZG90IHN5bnRheCBvZiBteUNvbnRyb2xsZXIubXlGb3JtTmFtZVxyXG4gICAgICAgICAqIEBwYXJhbSBuYW1lLSB0aGUgbmFtZSB0byBnaXZlIHRvIHRoZSByZWNvcmQsIGFuZCB0aGUgdHJhbnNsYXRlIGtleVxyXG4gICAgICAgICAqIEBwYXJhbSB0eXBlIC0gdHlwZSBvZiBlcnJvciB0aGF0IG9jY3VyZWQgaS5lLiByZXF1aXJlZCBldGNcclxuICAgICAgICAgKiBAcGFyYW0gcGFyZW50LSBwYXJlbnQgb3QgdGhpcyBkb20gb2JqZWN0XHJcbiAgICAgICAgICogQHBhcmFtIHRhYklELSBvcHRpb25hbCB0YWJJZCBmb3Igc2VsZWN0aW5nIGEgdGFiXHJcbiAgICAgICAgICogQHJldHVybnMge3t9fVxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZnVuY3Rpb24gX2NyZWF0ZVN1bW1hcnlSZWNvcmQobmFtZSx0eXBlLHBhcmVudCx0YWJJZCl7XHJcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSB7fTtcclxuICAgICAgICAgICAgaWYoIWFuZ3VsYXIuaXNEZWZpbmVkKHRhYklkKSkgdGFiSWQ9LTE7XHJcbiAgICAgICAgICAgIHJlc3VsdFtuYW1lXSA9IHtcclxuICAgICAgICAgICAgICAgIG5hbWU6IG5hbWUsXHJcbiAgICAgICAgICAgICAgICB0eXBlOiB0eXBlLFxyXG4gICAgICAgICAgICAgICAgdHJhbnNsYXRlS2V5OiBuYW1lLnRvVXBwZXJDYXNlKCksXHJcbiAgICAgICAgICAgICAgICBwYXJlbnQ6IHBhcmVudCxcclxuICAgICAgICAgICAgICAgIGNvbmNhdDogcGFyZW50ICsgJy4nICsgbmFtZSxcclxuICAgICAgICAgICAgICAgIHRhYklkOnRhYklkLFxyXG4gICAgICAgICAgICAgICAgaXNTdW1tYXJ5OiB0cnVlXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gX2NyZWF0ZUV4cGFuZGVyUmVjb3JkKG5hbWUsdHJhbnNjbHVkZU5hbWUsdHlwZSxwYXJlbnQsIGV4cGFuZGVySW5kZXgpe1xyXG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0ge307XHJcbiAgICAgICAgICAgIHJlc3VsdFtuYW1lXSA9IHtcclxuICAgICAgICAgICAgICAgIG5hbWU6IG5hbWUsXHJcbiAgICAgICAgICAgICAgICB0eXBlOiB0eXBlLFxyXG4gICAgICAgICAgICAgICAgdHJhbnNsYXRlS2V5OiB0cmFuc2NsdWRlTmFtZS50b1VwcGVyQ2FzZSgpLFxyXG4gICAgICAgICAgICAgICAgcGFyZW50OiBwYXJlbnQsXHJcbiAgICAgICAgICAgICAgICBjb25jYXQ6IHBhcmVudCArICcuJyArIG5hbWUsXHJcbiAgICAgICAgICAgICAgICBpc1N1bW1hcnk6IHRydWUsXHJcbiAgICAgICAgICAgICAgICB0b0V4cGFuZDp0cnVlLFxyXG4gICAgICAgICAgICAgICAgZXhJbmRleDpwYXJzZUludChleHBhbmRlckluZGV4KVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgfS8vZW5kIGNvbnRyb2xsZXJcclxuXHJcbn0pKCk7XHJcbiIsIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IGRraWx0eSBvbiAyNS8wMS8yMDE3LlxyXG4gKi9cclxuXHJcbihmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ2Rvc3NpZXJJZERldGFpbHMnLCBbICAnZXJyb3JNZXNzYWdlTW9kdWxlJ10pXHJcbn0pKCk7XHJcblxyXG4oZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKCdkb3NzaWVySWREZXRhaWxzJylcclxuICAgICAgICAuY29tcG9uZW50KCdjbXBEb3NzaWVySWREZXRhaWxzJywge1xyXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2FwcC9zY3JpcHRzL2NvbXBvbmVudHMvZG9zc2llcklkRGV0YWlscy90cGwtZG9zc2llci1pZC1kZXRhaWxzXzIwMjAwOTA5XzE1MjUuaHRtbCcsXHJcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6IGRvc3NpZXJJZERldGFpbHNDdHJsLFxyXG4gICAgICAgICAgICBjb250cm9sbGVyQXM6ICdkb3NJZEN0cmwnLFxyXG5cclxuICAgICAgICAgICAgYmluZGluZ3M6IHtcclxuICAgICAgICAgICAgICAgIGRvc3NpZXJSZWNvcmQ6ICc8JyxcclxuICAgICAgICAgICAgICAgIGlkSW5kZXg6JzwnLFxyXG4gICAgICAgICAgICAgICAgZGVsZXRlSWQ6JyYnLFxyXG4gICAgICAgICAgICAgICAgc2hvd0Vycm9yczogJyYnLFxyXG4gICAgICAgICAgICAgICAgaXNBbWVuZDonPCcsXHJcbiAgICAgICAgICAgICAgICBzZXRSZWFkb25seTogJyYnXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIGRvc3NpZXJJZERldGFpbHNDdHJsLiRpbmplY3QgPSBbJyRzY29wZSddO1xyXG5cclxuICAgIGZ1bmN0aW9uICBkb3NzaWVySWREZXRhaWxzQ3RybCgkc2NvcGUpIHtcclxuICAgICAgICB2YXIgdm0gPSB0aGlzO1xyXG4gICAgICAgIHZtLnJlY29yZD17ZG9zc2llcklkOlwiXCJ9O1xyXG4gICAgICAgIHZtLmRldGFpbHNJbmRleD0wO1xyXG4gICAgICAgIHZtLmlzRWRpdGFibGU9dHJ1ZTtcclxuXHJcbiAgICAgICAgdm0ubWluN0Vycm9yID0gW1xyXG4gICAgICAgICAgICB7dHlwZTogXCJyZXF1aXJlZFwiLCBkaXNwbGF5QWxpYXM6IFwiTVNHX0VSUl9NQU5EXCJ9LFxyXG4gICAgICAgICAgICB7dHlwZTogXCJtaW5sZW5ndGhcIiwgZGlzcGxheUFsaWFzOiBcIk1TR19MRU5HVEhfN05VTVwifVxyXG4gICAgICAgIF07XHJcblxyXG4gICAgICAgIHZtLiRvbkluaXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIF9zZXRJZE5hbWVzKCk7XHJcblxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQHBhcmFtIGNoYW5nZXNcclxuICAgICAgICAgKi9cclxuICAgICAgICB2bS4kb25DaGFuZ2VzID0gZnVuY3Rpb24gKGNoYW5nZXMpIHtcclxuICAgICAgICAgICAgaWYgKGNoYW5nZXMuZG9zc2llclJlY29yZCkge1xyXG4gICAgICAgICAgICAgICAgdm0ucmVjb3JkPWNoYW5nZXMuZG9zc2llclJlY29yZC5jdXJyZW50VmFsdWVcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZihjaGFuZ2VzLmlkSW5kZXgpe1xyXG4gICAgICAgICAgICAgICAgdm0uZGV0YWlsc0luZGV4PWNoYW5nZXMuaWRJbmRleC5jdXJyZW50VmFsdWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGNoYW5nZXMuaXNBbWVuZCkge1xyXG4gICAgICAgICAgICAgICAgdm0uaXNFZGl0YWJsZSA9IGNoYW5nZXMuaXNBbWVuZC5jdXJyZW50VmFsdWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIHZtLmRlbGV0ZT1mdW5jdGlvbigpe1xyXG4gICAgICAgICAgICB2bS5kZWxldGVJZCh7ZG9zc2llckluZGV4OnZtLmRldGFpbHNJbmRleH0pXHJcbiAgICAgICAgfTtcclxuICAgICAgICB2bS5zaG93RXJyb3I9ZnVuY3Rpb24oY3RybCl7XHJcbiAgICAgICAgICAgIGlmKCFjdHJsKSByZXR1cm4gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICBpZiAoKGN0cmwuJGludmFsaWQgJiYgY3RybC4kdG91Y2hlZCkgfHwgKHZtLnNob3dFcnJvcnMoKSAmJiBjdHJsLiRpbnZhbGlkICkpe1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWVcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2VcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICBmdW5jdGlvbiBfc2V0SWROYW1lcygpIHtcclxuICAgICAgICAgICAgdmFyIHNjb3BlSWQgPSBcIl9cIiArICRzY29wZS4kaWQ7XHJcbiAgICAgICAgICAgIHZtLmRvc3NpZXJJZD1cImRvc3NpZXJfaWRcIiArIHNjb3BlSWQ7XHJcblxyXG4gICAgICAgIH1cclxuXHJcblxyXG5cclxuICAgIH1cclxufSkoKTsiLCIvKipcclxuICogQ3JlYXRlZCBieSBka2lsdHkgb24gMjUvMDEvMjAxNy5cclxuICovXHJcblxyXG4oZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKCdpbXBvcnRlclByb2R1Y3RzJywgWydkb3NzaWVySWREZXRhaWxzJywgJ2Vycm9yTWVzc2FnZU1vZHVsZSddKVxyXG59KSgpO1xyXG5cclxuKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuLy8vdGVzdCBkYXMgYXNkc2Fkc2FcclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKCdpbXBvcnRlclByb2R1Y3RzJylcclxuICAgICAgICAuY29tcG9uZW50KCdjbXBJbXBvcnRlclByb2R1Y3RzJywge1xyXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2FwcC9zY3JpcHRzL2NvbXBvbmVudHMvY29tcGFueUltcG9ydGVyUHJvZHVjdHMvdHBsLWltcG9ydGVyLXByb2R1Y3RzXzIwMjAwOTA5XzE1MjUuaHRtbCcsXHJcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6IGltcG9ydGVyUHJvZHVjdHNDdHJsLFxyXG4gICAgICAgICAgICBjb250cm9sbGVyQXM6ICdpbXBQcm9kQ3RybCcsXHJcbiAgICAgICAgICAgIGJpbmRpbmdzOiB7XHJcbiAgICAgICAgICAgICAgICB1cGRhdGVWYWxpZDogJyYnLFxyXG4gICAgICAgICAgICAgICAgb25EZWxldGU6ICcmJyxcclxuICAgICAgICAgICAgICAgIGlzQW1lbmQ6ICc8JywgLy9kZXByZWNhdGVkXHJcbiAgICAgICAgICAgICAgICBpc0RldGFpbFZhbGlkOiAnJicsXHJcbiAgICAgICAgICAgICAgICBpbXBvcnRlclJlY29yZDogJzwnLFxyXG4gICAgICAgICAgICAgICAgc2hvd0Vycm9yczonJicsXHJcbiAgICAgICAgICAgICAgICBvblVwZGF0ZTogJyYnXHJcblxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICBpbXBvcnRlclByb2R1Y3RzQ3RybC4kaW5qZWN0ID0gWyckc2NvcGUnXTtcclxuXHJcbiAgICBmdW5jdGlvbiBpbXBvcnRlclByb2R1Y3RzQ3RybCgkc2NvcGUpIHtcclxuICAgICAgICB2YXIgdm0gPSB0aGlzO1xyXG4gICAgICAgIHZtLmZvcm1BbWVuZCA9IGZhbHNlO1xyXG4gICAgICAgIHZtLnNvbWVQcm9kdWN0cz1mYWxzZTtcclxuICAgICAgICB2bS5pc0VkaXRhYmxlPXRydWU7XHJcbiAgICAgICAgdm0ucmVjb3JkUmVhZE9ubHkgPSBmYWxzZTsgLy9uZWVkZWQgZm9yIGRpblxyXG4gICAgICAgIHZtLnByb2R1Y3RUeXBlTGlzdD1bJ0FMTF9QUk9EVUNUUycsJ1NFTEVDVEVEX1BST0RVQ1RTJ107XHJcbiAgICAgICAgdm0ucmVxdWlyZWRPbmx5ID0gW1xyXG4gICAgICAgICAgICB7dHlwZTogXCJyZXF1aXJlZFwiLCBkaXNwbGF5QWxpYXM6IFwiTVNHX0VSUl9NQU5EXCJ9LFxyXG4gICAgICAgIF07XHJcbiAgICAgICAgdm0ubW9kZWwgPSB7XHJcbiAgICAgICAgICAgIHNlbGVjdGVkUHJvZHVjdHM6IFwiXCIsXHJcbiAgICAgICAgICAgIGRvc3NpZXJJZExpc3Q6IFtdXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdm0uJG9uSW5pdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgX3NldElkTmFtZXMoKTtcclxuICAgICAgICAgICAgdm0ucHJvZHVjdFR5cGVDaGFuZ2VkKCk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogRHVlIHRvIGJpbmRpbmcgd2l0aCB0YWJsZSBleHBhbmRlciB0aGlzIG1ldGhvZCBkb2VzIG5vdCBnZXQgY2FsbGVkXHJcbiAgICAgICAgICogQHBhcmFtIGNoYW5nZXNcclxuICAgICAgICAgKi9cclxuICAgICAgICB2bS4kb25DaGFuZ2VzID0gZnVuY3Rpb24gKGNoYW5nZXMpIHtcclxuICAgICAgICAgICAgaWYgKGNoYW5nZXMuaW1wb3J0ZXJSZWNvcmQgJiYgY2hhbmdlcy5pbXBvcnRlclJlY29yZC5jdXJyZW50VmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIHZtLm1vZGVsID0gKGNoYW5nZXMuaW1wb3J0ZXJSZWNvcmQuY3VycmVudFZhbHVlKTtcclxuICAgICAgICAgICAgICAgIHZtLnByb2R1Y3RUeXBlQ2hhbmdlZCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChjaGFuZ2VzLmlzQW1lbmQpIHtcclxuICAgICAgICAgICAgICAgIHZtLmlzRWRpdGFibGUgPSBjaGFuZ2VzLmlzQW1lbmQuY3VycmVudFZhbHVlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZtLmRpc2FibGVBZGRCdXR0b249ZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgcmV0dXJuIHZtLmltcG9ydFByb2RGb3JtLiRpbnZhbGlkO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZtLmFkZERvc3NpZXJJZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKCEodm0ubW9kZWwuZG9zc2llcklkTGlzdCBpbnN0YW5jZW9mIEFycmF5KSkge1xyXG4gICAgICAgICAgICAgICAgdm0ubW9kZWwuZG9zc2llcklkTGlzdCA9IFtdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZtLm1vZGVsLmRvc3NpZXJJZExpc3QucHVzaCh7ZG9zc2llcklkOiBcIlwifSk7XHJcbiAgICAgICAgICAgIC8vL2Zvcm0gaXMgaW52YWxpZCBpZiBhZGRpbmcgYSBkaW5cclxuICAgICAgICAgICAgdm0uaXNEZXRhaWxWYWxpZCh7c3RhdGU6IGZhbHNlfSk7XHJcblxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZtLmRlbGV0ZUlkID0gZnVuY3Rpb24gKGluZGV4KSB7XHJcbiAgICAgICAgICAgIC8vdXNpbmcgaW5kZXggaW5cclxuICAgICAgICAgICAgaWYgKGluZGV4ID4gIHZtLm1vZGVsLmRvc3NpZXJJZExpc3QubGVuZ3RoIC0gMSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZtLm1vZGVsLmRvc3NpZXJJZExpc3Quc3BsaWNlKGluZGV4LCAxKTtcclxuICAgICAgICAgICAgdm0uaXNEZXRhaWxWYWxpZCh7c3RhdGU6IHRydWV9KTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2bS5pc0lkSW52YWxpZCA9IGZ1bmN0aW9uIChpbmRleCkge1xyXG4gICAgICAgICAgICByZXR1cm4gISggdm0ubW9kZWwuZG9zc2llcklkTGlzdFtpbmRleF0uZG9zc2llcklkICYmICB2bS5tb2RlbC5kb3NzaWVySWRMaXN0W2luZGV4XS5kb3NzaWVySWQubGVuZ3RoID09PSA3KTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2bS5wcm9kdWN0VHlwZUNoYW5nZWQ9ZnVuY3Rpb24oKXtcclxuXHJcbiAgICAgICAgICAgIGlmKHZtLm1vZGVsLnNlbGVjdGVkUHJvZHVjdHMhPT1cIlNFTEVDVEVEX1BST0RVQ1RTXCIpe1xyXG4gICAgICAgICAgICAgICAgLy9jbGVhciBvdXQgdGhlIGRvc3NpZXIgbGlzdFxyXG4gICAgICAgICAgICAgICAgdm0ubW9kZWwuZG9zc2llcklkTGlzdD1bXTtcclxuICAgICAgICAgICAgICAgIHZtLnNvbWVQcm9kdWN0cz1mYWxzZTtcclxuICAgICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgICAgICB2bS5zb21lUHJvZHVjdHM9dHJ1ZTtcclxuICAgICAgICAgICAgICAgIGlmKHZtLm1vZGVsLmRvc3NpZXJJZExpc3QubGVuZ3RoPT09MCl7XHJcbiAgICAgICAgICAgICAgICAgICAgdm0ubW9kZWwuZG9zc2llcklkTGlzdC5wdXNoKHtkb3NzaWVySWQ6XCJcIn0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQ29udHJvbHMgZXJyb3JzIHN0YXRlIG9mIGFuIGluZGl2aWR1YWwgVUkgY29udHJvbC4gU2luY2UgY2Fubm90IHBhc3MgdGhlIGNvbnRyb2wgZm9yIHNvbWUgcmVhc29uXHJcbiAgICAgICAgICogcGFzcyB0aGUgbmVlZGVkIHN0YXRlIHZhcmlhYmxlcy4uLiB2ZXJ5IGFubm95aW5nXHJcbiAgICAgICAgICogQHBhcmFtIGlzVG91Y2hlZFxyXG4gICAgICAgICAqIEBwYXJhbSBpc0ludmFsaWRcclxuICAgICAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuICAgICAgICAgKi9cclxuICAgICAgICB2bS5zaG93RXJyb3IgPSBmdW5jdGlvbiAoY3RybCkge1xyXG5cclxuICAgICAgICAgICAgaWYoIWN0cmwpIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgcmV0dXJuIChjdHJsLiRpbnZhbGlkICYmIGN0cmwuJHRvdWNoZWQpIHx8ICh2bS5zaG93RXJyb3JzKCkgJiYgY3RybC4kaW52YWxpZCApO1xyXG4gICAgICAgIH07XHJcblxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAbmdkb2MgbWV0aG9kIHVzZWQgdG8gZGV0ZXJtaW5lIGlmIHJlY29yZCBzaG91bGQgYmUgZWRpdGFibGUuIFVzZWQgZm9yIGFtZW5kXHJcbiAgICAgICAgICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdm0uc2V0Tm90RWRpdGFibGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgLy8gdm0ucmVjb3JkUmVhZE9ubHkgPSB2bS5mb3JtQW1lbmQgJiYgIXZtLmFjdGl2aXR5TW9kZWwuYW1lbmRSZWNvcmQ7XHJcbiAgICAgICAgICAgLy8vIHJldHVybiAodm0ucmVjb3JkUmVhZE9ubHkpO1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAvLyBwcm9kdWN0VHlwZXNfXHJcbiAgICAgICAgZnVuY3Rpb24gX3NldElkTmFtZXMoKSB7XHJcbiAgICAgICAgICAgIHZhciBzY29wZUlkID0gXCJfXCIgKyAkc2NvcGUuJGlkO1xyXG4gICAgICAgICAgICB2bS5wcm9kVHlwZXNJZD1cInByb2R1Y3RfdHlwZXNcIiArIHNjb3BlSWQ7XHJcblxyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgfVxyXG5cclxuXHJcbn0pKCk7IiwiLyoqXHJcbiAqIENyZWF0ZWQgYnkgZGtpbHR5IG9uIDgvNS8yMDE2LlxyXG4gKi9cclxuXHJcbihmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ2NvbnRhY3RSZWNvcmQnLCBbJ2FkZHJlc3NSb2xlJywgJ2NvbnRhY3RNb2R1bGUnLCAnZXJyb3JTdW1tYXJ5TW9kdWxlJ10pXHJcbn0pKCk7XHJcblxyXG4oZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKCdjb250YWN0UmVjb3JkJylcclxuICAgICAgICAuY29tcG9uZW50KCdjbXBDb250YWN0UmVjb3JkJywge1xyXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2FwcC9zY3JpcHRzL2NvbXBvbmVudHMvY29udGFjdFJlY29yZC90cGwtY29udGFjdC1yZWNvcmRfMjAyMDA5MDlfMTUyNS5odG1sJyxcclxuICAgICAgICAgICAgY29udHJvbGxlcjogY29udGFjdFJlY0N0cmwsXHJcbiAgICAgICAgICAgIGNvbnRyb2xsZXJBczogJ2NvbnRhY3RSZWMnLFxyXG4gICAgICAgICAgICBiaW5kaW5nczoge1xyXG4gICAgICAgICAgICAgICAgY29udGFjdFJlY29yZDogJzwnLFxyXG4gICAgICAgICAgICAgICAgb25VcGRhdGU6ICcmJyxcclxuICAgICAgICAgICAgICAgIHVwZGF0ZVZhbGlkOiAnJicsXHJcbiAgICAgICAgICAgICAgICBjaGVja1JvbGVzOiAnJicsXHJcbiAgICAgICAgICAgICAgICBvbkRlbGV0ZTogJyYnLFxyXG4gICAgICAgICAgICAgICAgaXNBbWVuZDogJzwnLFxyXG4gICAgICAgICAgICAgICAgaXNEZXRhaWxWYWxpZDogJyYnLCAvKiBtZXNzYWdlcyB0byBsaXN0IHdoZXRoZXIgdGhlIHJlY29yZCBpcyB2YWxpZCAqL1xyXG4gICAgICAgICAgICAgICAgaXNSb2xlU2VsZWN0ZWQ6ICcmJywgLyogZGV0ZXJtaW5lcyBpZiBhIHJvbGUgaGFzIGJlZW4gc2VsZWN0ZWQgaW4gYW5vdGhlciByZWNvcmQqL1xyXG4gICAgICAgICAgICAgICAgcmVjb3JkSW5kZXg6ICc8JywgLyogdXNlZCB0byBvYnRhaW4gcmVjb3JkIGluZGV4LCBjb250cm9sbGVkIGJ5IGxpc3QgKi9cclxuICAgICAgICAgICAgICAgIGVycm9yU3VtbWFyeVVwZGF0ZTogJyYnLCAvKiB1c2VkIHRvIG1lc3NhZ2UgdGhhdCBhIHBhcmVudCBlcnJvclN1bW1hcnkgbmVlZHMgdXBkYXRpbmcgKi9cclxuICAgICAgICAgICAgICAgIHNob3dFcnJvclN1bW1hcnk6ICc8JyxcclxuICAgICAgICAgICAgICAgIHVwZGF0ZUVycm9yU3VtbWFyeTonJicsIC8vdXBkYXRlIHRoZSBwYXJlbnQgZXJyb3Igc3VtbWFyeVxyXG4gICAgICAgICAgICAgICAgaHRJbmR4TGlzdDogJzwnLFxyXG4gICAgICAgICAgICAgICAgaXNGb2N1czogJzwnLFxyXG4gICAgICAgICAgICAgICAgY2FuY2VsRm9jdXM6ICcmJyxcclxuICAgICAgICAgICAgICAgIGFkZHJJbXBDb21wYW55TmFtZTogJzwnXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIGNvbnRhY3RSZWNDdHJsLiRpbmplY3QgPSBbJyRzY29wZSddO1xyXG4gICAgZnVuY3Rpb24gY29udGFjdFJlY0N0cmwoJHNjb3BlKSB7XHJcbiAgICAgICAgdmFyIHZtID0gdGhpcztcclxuICAgICAgICB2bS5zYXZlUHJlc3NlZCA9IGZhbHNlO1xyXG4gICAgICAgIHZtLmlzQ29udGFjdCA9IHRydWU7IC8vdXNlZCB0byBzZXQgdGhlIHN0YXRlIG9mIHRoZSByb2xlXHJcbiAgICAgICAgdm0uaXNFZGl0YWJsZSA9IGZhbHNlO1xyXG4gICAgICAgIHZtLmZvcm1BbWVuZCA9IGZhbHNlO1xyXG4gICAgICAgIHZtLnVwZGF0ZVN1bW1hcnkgPSAwOyAvL3RyaWdnZXJzIGFuZCBlcnJvciBzdW1tYXJ5IHVwZGF0ZVxyXG4gICAgICAgIHZtLnNldFN1bW1hcnlGb2N1cyA9IDA7IC8vc2V0cyB0aGUgc3VtbWFyeSBmb2N1c1xyXG4gICAgICAgIHZtLnNob3dTdW1tYXJ5ID0gZmFsc2U7XHJcbiAgICAgICAgLy9UT0RPIGdldCByb2xlIG1vZGVsIGZyb20gYSBzZXJ2aWRlXHJcblxyXG4gICAgICAgIHZtLmNvbnRhY3RNb2RlbCA9IHtcclxuICAgICAgICAgICAgcm9sZUNvbmNhdDogXCJcIixcclxuICAgICAgICAgICAgY29udGFjdElkOiBcIlwiLFxyXG4gICAgICAgICAgICBhbWVuZFJlY29yZDogZmFsc2UsXHJcbiAgICAgICAgICAgIGFkZHJlc3NSb2xlOiB7XHJcbiAgICAgICAgICAgICAgICBtYW51ZmFjdHVyZXI6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgbWFpbGluZzogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBiaWxsaW5nOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIGltcG9ydGVyOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIHJlcFByaW1hcnk6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgcmVwU2Vjb25kYXJ5OiBmYWxzZVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBjb250YWN0Um9sZTogXCJcIixcclxuICAgICAgICAgICAgc2FsdXRhdGlvbjogXCJcIixcclxuICAgICAgICAgICAgZ2l2ZW5OYW1lOiBcIlwiLFxyXG4gICAgICAgICAgICBzdXJuYW1lOiBcIlwiLFxyXG4gICAgICAgICAgICBpbml0aWFsczogXCJcIixcclxuICAgICAgICAgICAgdGl0bGU6IFwiXCIsXHJcbiAgICAgICAgICAgIHBob25lOiBcIlwiLFxyXG4gICAgICAgICAgICBQaG9uZUV4dDogXCJcIixcclxuICAgICAgICAgICAgZmF4OiBcIlwiLFxyXG4gICAgICAgICAgICBhZGRySW1wQ29tcGFueU5hbWU6IFwiXCJcclxuICAgICAgICB9O1xyXG4gICAgICAgIHZtLmFsaWFzPXtcclxuICAgICAgICAgICAgXCJjb250YWN0Um9sZU1pc3NpbmdcIjoge1xyXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiZmllbGRzZXRcIixcclxuICAgICAgICAgICAgICAgIFwicGFyZW50XCI6IFwiZnNfcm9sZU1pc3NpbmdcIlxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBcInBob25lTnVtYmVyXCI6IHtcclxuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInBhdHRlcm5cIixcclxuICAgICAgICAgICAgICAgIFwiZXJyb3JUeXBlXCI6IFwiTVNHX0VSUl9QSE9ORV9GT1JNQVRcIlxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuXHJcblxyXG5cclxuICAgICAgICB2bS4kb25Jbml0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2bS51cGRhdGVFcnJvclN1bW1hcnlTdGF0ZSgpO1xyXG4gICAgICAgICAgICB2bS5jb250YWN0TW9kZWwuZm9jdXNPbkZpcnN0TmFtZSA9IHZtLmlzRm9jdXM7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBEdWUgdG8gYmluZGluZyB3aXRoIHRhYmxlIGV4cGFuZGVyIHRoaXMgbWV0aG9kIGRvZXMgbm90IGdldCBjYWxsZWRcclxuICAgICAgICAgKiBAcGFyYW0gY2hhbmdlc1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHZtLiRvbkNoYW5nZXMgPSBmdW5jdGlvbiAoY2hhbmdlcykge1xyXG4gICAgICAgICAgICBpZiAoY2hhbmdlcy5jb250YWN0UmVjb3JkKSB7XHJcbiAgICAgICAgICAgICAgICB2bS5jb250YWN0TW9kZWwgPSBhbmd1bGFyLmNvcHkoY2hhbmdlcy5jb250YWN0UmVjb3JkLmN1cnJlbnRWYWx1ZSk7XHJcbiAgICAgICAgICAgICAgICB2bS5jb250YWN0TW9kZWwucm9sZUNvbmNhdCA9IF9nZXRSb2xlc0NvbmNhdCgpO1xyXG4gICAgICAgICAgICAgICAgdm0uc2V0RWRpdGFibGUoKTtcclxuICAgICAgICAgICAgICAgIC8vYW5ndWxhci5lbGVtZW50KHNhdmVDb250YWN0KS50cmlnZ2VyKCdmb2N1cycpO1xyXG5cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoY2hhbmdlcy5pc0FtZW5kKSB7XHJcbiAgICAgICAgICAgICAgICB2bS5mb3JtQW1lbmQgPSBjaGFuZ2VzLmlzQW1lbmQuY3VycmVudFZhbHVlO1xyXG4gICAgICAgICAgICAgICAgdm0uY29udGFjdE1vZGVsLmFtZW5kUmVjb3JkID0gY2hhbmdlcy5pc0FtZW5kLmN1cnJlbnRWYWx1ZTtcclxuICAgICAgICAgICAgICAgIHZtLnNldEVkaXRhYmxlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLyoqIE1lc3NhZ2luZyBmb3IgU2hvd2luZyB0aGUgZXJyb3Igc3VtbWFyeSAqKi9cclxuICAgICAgICAgICAgaWYgKGNoYW5nZXMuc2hvd0Vycm9yU3VtbWFyeSkge1xyXG4gICAgICAgICAgICAgICAgdm0uc2hvd1N1bW1hcnkgPSBjaGFuZ2VzLnNob3dFcnJvclN1bW1hcnkuY3VycmVudFZhbHVlO1xyXG4gICAgICAgICAgICAgICAgdm0udXBkYXRlRXJyb3JTdW1tYXJ5U3RhdGUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG5cclxuICAgICAgICB2bS5pc09uZVNlbGVjdGVkID0gZnVuY3Rpb24gKHR5cGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuICh2bS5pc1JvbGVTZWxlY3RlZCh7cm9sZU5hbWU6IHR5cGUsIGlkOiB2bS5jb250YWN0TW9kZWwuY29udGFjdElkfSkpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZtLnVwZGF0ZUVycm9yU3VtbWFyeVN0YXRlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2bS51cGRhdGVTdW1tYXJ5ID0gdm0udXBkYXRlU3VtbWFyeSArIDE7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLy90b2RvIG1vdmUgdG8gc2VydmljZVxyXG4gICAgICAgIGZ1bmN0aW9uIF9nZXRSb2xlc0NvbmNhdCgpIHtcclxuICAgICAgICAgICAgdmFyIGFkZHJlc3NSb2xlcyA9IHZtLmNvbnRhY3RNb2RlbC5hZGRyZXNzUm9sZTtcclxuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IFwiXCI7XHJcblxyXG4gICAgICAgICAgICBpZiAoYWRkcmVzc1JvbGVzLm1hbnVmYWN0dXJlcikge1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gcmVzdWx0ICsgXCIgTUZSXCJcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoYWRkcmVzc1JvbGVzLmJpbGxpbmcpIHtcclxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdCArIFwiIEJJTExcIlxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChhZGRyZXNzUm9sZXMubWFpbGluZykge1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gcmVzdWx0ICsgXCIgTUFJTFwiXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICBpZiAoYWRkcmVzc1JvbGVzLmltcG9ydGVyKSB7XHJcbiAgICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdCArIFwiIElNUFwiXHJcbiAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoYWRkcmVzc1JvbGVzLnJlcFByaW1hcnkpIHtcclxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdCArIFwiIFJFUDFcIlxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIGlmIChhZGRyZXNzUm9sZXMucmVwU2Vjb25kYXJ5KSB7XHJcbiAgICAgICAgICAgIC8vICAgICByZXN1bHQgPSByZXN1bHQgKyBcIiBSRVAyXCJcclxuICAgICAgICAgICAgLy8gfVxyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqICBjYWxscyB0aGUgZGVsZXRlIGZ1bmN0aW9uIG9uIHRoZSBwYXJlbnRcclxuICAgICAgICAgKi9cclxuICAgICAgICB2bS5kZWxldGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZtLm9uRGVsZXRlKHtjb250YWN0SWQ6IHZtLmNvbnRhY3RNb2RlbC5jb250YWN0SWR9KTtcclxuICAgICAgICAgICAgdm0udXBkYXRlRXJyb3JTdW1tYXJ5KCk7XHJcbiAgICAgICAgICAgIHZtLmNhbmNlbEZvY3VzKCk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvKiBAbmdkb2MgbWV0aG9kIC1kaXNjYXJkcyB0aGUgY2hhbmdlcyBhbmQgcmV2ZXJ0cyB0byB0aGUgbW9kZWxcclxuICAgICAgICAgKlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHZtLmRpc2NhcmRDaGFuZ2VzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAodm0uY29udGFjdFJlY0Zvcm0uJHByaXN0aW5lKSByZXR1cm47XHJcbiAgICAgICAgICAgIHZhciBjdXJyUmVjb3JkID0gdm0uY29udGFjdFJlY29yZDtcclxuICAgICAgICAgICAgdm0uY29udGFjdE1vZGVsID0gYW5ndWxhci5jb3B5KGN1cnJSZWNvcmQpO1xyXG4gICAgICAgICAgICB2bS5zZXRFZGl0YWJsZSgpO1xyXG4gICAgICAgICAgICAvL3NpbmNlIHdlIGFyZSByZXZlcnRpbmcgYmFjayB0byB0aGUgbGFzdCBzYXZlIHNob3VsZCBiZSBwcmlzdGluZVxyXG4gICAgICAgICAgICB2bS5jb250YWN0UmVjRm9ybS4kc2V0UHJpc3RpbmUoKTtcclxuICAgICAgICAgICAgaWYgKHZtLmNvbnRhY3RNb2RlbCkge1xyXG4gICAgICAgICAgICAgICAgdm0ub25VcGRhdGUoe2NvbnRhY3Q6IHZtLmNvbnRhY3RNb2RlbH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZtLmlzRGV0YWlsVmFsaWQoe3N0YXRlOiB2bS5jb250YWN0UmVjRm9ybS4kdmFsaWR9KTtcclxuICAgICAgICAgICAgdm0uZXJyb3JTdW1tYXJ5VXBkYXRlKCk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdm0ub25Db250YWN0Um9sZVVwZGF0ZSA9IGZ1bmN0aW9uIChuZXdSb2xlKSB7XHJcbiAgICAgICAgICAgIHZhciBhUm9sZSA9IHt9O1xyXG4gICAgICAgICAgICBhbmd1bGFyLmV4dGVuZChhUm9sZSwgbmV3Um9sZSk7XHJcbiAgICAgICAgICAgIHZtLmNvbnRhY3RNb2RlbC5hZGRyZXNzUm9sZSA9IGFSb2xlO1xyXG4gICAgICAgICAgICB2bS51cGRhdGVDb250YWN0TW9kZWwyKCk7XHJcbiAgICAgICAgICAgIHZtLnNob3dSb3V0aW5nSWQoKTtcclxuICAgICAgICAgICAgdm0uc2V0RWRpdGFibGUoKTtcclxuICAgICAgICAgICAgdm0uc2hvd0FkZHJJbXBDb21wYW55TmFtZSgpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQG5nZG9jIG1ldGhvZCAtVXBkYXRlcyB0aGUgcGFyZW50IG9uIHdoZXRoZXIgdGhpcyByZWNvcmQgaXMgdmFsaWQgb3Igbm90XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdm0udXBkYXRlVmFsaWQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZtLmlzRGV0YWlsVmFsaWQoe3N0YXRlOiAodm0uY29udGFjdFJlY0Zvcm0uJHZhbGlkICYmICF2bS5jb250YWN0UmVjRm9ybS4kZGlydHkpfSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBJZiB0aGUgZm9ybSBpcyBkaXJ0eSBhbHdheXMgc2V0IHRoYXQgaXQgaXMgbm90IHZhbGlkXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgJHNjb3BlLiR3YXRjaCgnY29udGFjdFJlYy5jb250YWN0UmVjRm9ybS4kZGlydHknLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIC8vaWYgc3RhdGVtZW50IHJlZHVuZGFudD9cclxuICAgICAgICAgICAgaWYgKHZtLmNvbnRhY3RSZWNGb3JtLiRkaXJ0eSkge1xyXG4gICAgICAgICAgICAgICAgdm0uaXNEZXRhaWxWYWxpZCh7c3RhdGU6IGZhbHNlfSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sIHRydWUpO1xyXG5cclxuICAgICAgICAkc2NvcGUuJHdhdGNoKCdjb250YWN0UmVjLmNvbnRhY3RSZWNGb3JtLiRlcnJvcicsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdm0udXBkYXRlRXJyb3JTdW1tYXJ5U3RhdGUoKTtcclxuICAgICAgICAgICAgdm0udXBkYXRlRXJyb3JTdW1tYXJ5KCk7XHJcbiAgICAgICAgfSwgdHJ1ZSk7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFVwZGF0ZXMgdGhlIGNvbnRhY3QgbW9kZWwgdXNlZCBieSB0aGUgc2F2ZSBidXR0b25cclxuICAgICAgICAgKi9cclxuICAgICAgICB2bS51cGRhdGVDb250YWN0TW9kZWwyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2bS5jb250YWN0TW9kZWwucm9sZUNvbmNhdCA9IF9nZXRSb2xlc0NvbmNhdCgpO1xyXG4gICAgICAgICAgICBpZiAodm0uY29udGFjdFJlY0Zvcm0uJHZhbGlkKSB7XHJcbiAgICAgICAgICAgICAgICAvLyB2bS5jb250YWN0TW9kZWwuaXNEZXRhaWxWYWxpZD10cnVlO1xyXG4gICAgICAgICAgICAgICAgaWYoISB2bS5jb250YWN0TW9kZWwuYWRkcmVzc1JvbGUuaW1wb3J0ZXIpe1xyXG4gICAgICAgICAgICAgICAgICAgIHZtLmNvbnRhY3RNb2RlbC5pbXBDb21wYW55TmFtZSA9ICcnO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdm0uaXNEZXRhaWxWYWxpZCh7c3RhdGU6IHRydWV9KTtcclxuICAgICAgICAgICAgICAgIHZtLmNvbnRhY3RSZWNGb3JtLiRzZXRQcmlzdGluZSgpO1xyXG4gICAgICAgICAgICAgICAgdm0ub25VcGRhdGUoe2NvbnRhY3Q6IHZtLmNvbnRhY3RNb2RlbH0pO1xyXG4gICAgICAgICAgICAgICAgdm0uc2hvd1N1bW1hcnkgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIHZtLmNvbnRhY3RNb2RlbC5mb2N1c09uRmlyc3ROYW1lID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB2bS5lcnJvclN1bW1hcnlVcGRhdGUoKTsgLy91cGRhdGluZyBwYXJlbnRcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHZtLnNob3dTdW1tYXJ5ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIHZtLmVycm9yU3VtbWFyeVVwZGF0ZSgpOyAvL3VwZGF0aW5nIHBhcmVudFxyXG4gICAgICAgICAgICAgICAgdm0udXBkYXRlRXJyb3JTdW1tYXJ5U3RhdGUoKTsgLy91cGRhdGluZyBjdXJyZW50XHJcbiAgICAgICAgICAgICAgICB2bS5mb2N1c09uU3VtbWFyeSgpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICB9O1xyXG4gICAgICAgIC8qKipcclxuICAgICAgICAgKiBTaWduYWxzIHRvIGZvY3VzIG9uIHRoZSByZWNvcmQgZXJyb3JTdW1tYXJ5IG9iamVjdFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHZtLmZvY3VzT25TdW1tYXJ5ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2bS5zZXRTdW1tYXJ5Rm9jdXMgPSB2bS5zZXRTdW1tYXJ5Rm9jdXMgKyAxO1xyXG4gICAgICAgIH07XHJcblxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAbmdkb2MgbWV0aG9kIHRvZ2dsZXMgZXJyb3Igc3RhdGUgdG8gbWFrZSBlcnJvcnMgdmlzaWJsZVxyXG4gICAgICAgICAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHZtLnNob3dFcnJvcnMgPSBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gKCggdm0uc2hvd1N1bW1hcnkpKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBuZ2RvYyBtZXRob2QgdXNlZCB0byBkZXRlcm1pbmUgaWYgcmVjb3JkIHNob3VsZCBiZSBlZGl0YWJsZS4gVXNlZCBmb3IgYW1lbmQgYnV0dG9uXHJcbiAgICAgICAgICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdm0uc2V0RWRpdGFibGUgPSBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgICAgICBpZiAoIXZtLmZvcm1BbWVuZCkge1xyXG4gICAgICAgICAgICAgICAgdm0uaXNFZGl0YWJsZSA9IHRydWVcclxuICAgICAgICAgICAgfSBlbHNlIGlmICh2bS5mb3JtQW1lbmQgJiYgdm0uY29udGFjdE1vZGVsLmFtZW5kUmVjb3JkKSB7XHJcbiAgICAgICAgICAgICAgICB2bS5pc0VkaXRhYmxlID0gdHJ1ZTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHZtLmlzRWRpdGFibGUgPSBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgdm0uc2hvd1JvdXRpbmdJZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdm0uY29udGFjdE1vZGVsLnJvbGVDb25jYXQgPSBfZ2V0Um9sZXNDb25jYXQoKTtcclxuICAgICAgICAgICAgaWYgKHZtLmNvbnRhY3RNb2RlbC5yb2xlQ29uY2F0LmluZGV4T2YoJyBNRlInKSA+IC0xIHx8IHZtLmNvbnRhY3RNb2RlbC5yb2xlQ29uY2F0LmluZGV4T2YoJyBNQUlMJykgPiAtMVxyXG4gICAgICAgICAgICAgICAgfHwgdm0uY29udGFjdE1vZGVsLnJvbGVDb25jYXQuaW5kZXhPZignIElNUCcpID4gLTFcclxuICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gMDtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHZtLmNvbnRhY3RNb2RlbC5yb3V0aW5nSWQgPSAnJztcclxuICAgICAgICAgICAgICAgIHJldHVybiAtMTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdm0uc2hvd0FkZHJJbXBDb21wYW55TmFtZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgLy9UT0RPXHJcbiAgICAgICAgICAgIHZtLmNvbnRhY3RNb2RlbC5yb2xlQ29uY2F0ID0gX2dldFJvbGVzQ29uY2F0KCk7XHJcbiAgICAgICAgICAgIGlmICh2bS5jb250YWN0TW9kZWwucm9sZUNvbmNhdC5pbmRleE9mKCcgSU1QJykgPiAtMSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIDA7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB2bS5jb250YWN0TW9kZWwuYWRkckltcENvbXBhbnlOYW1lID0gJyc7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gLTE7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgfVxyXG5cclxuXHJcbn0pKCk7IiwiLyoqXHJcbiAqIENyZWF0ZWQgYnkgZGtpbHR5IG9uIDgvNS8yMDE2LlxyXG4gKi9cclxuKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgnYWRkcmVzc1JlY29yZCcsIFtcclxuICAgICAgICAgICAgJ2FkZHJlc3NNb2R1bGUnLFxyXG4gICAgICAgICAgICAnYWRkcmVzc1JvbGUnLFxyXG4gICAgICAgICAgICAnZmlsdGVyTGlzdHMnLFxyXG4gICAgICAgICAgICAvLydpbXBvcnRlclByb2R1Y3RzJyxcclxuICAgICAgICAgICAgJ2hwZmJDb25zdGFudHMnLFxyXG4gICAgICAgICAgICAnZXJyb3JTdW1tYXJ5TW9kdWxlJyxcclxuICAgICAgICAgICAgJ2Vycm9yTWVzc2FnZU1vZHVsZScsXHJcbiAgICAgICAgICAgICdkYXRhTGlzdHMnXHJcbiAgICAgICAgXSlcclxufSkoKTtcclxuXHJcbihmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ2FkZHJlc3NSZWNvcmQnKVxyXG4gICAgICAgIC5jb21wb25lbnQoJ2NtcEFkZHJlc3NSZWNvcmQnLCB7XHJcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnYXBwL3NjcmlwdHMvY29tcG9uZW50cy9hZGRyZXNzUmVjb3JkL3RwbC1hZGRyZXNzLXJlY29yZF8yMDIwMDkwOV8xNTI1Lmh0bWwnLFxyXG4gICAgICAgICAgICBjb250cm9sbGVyOiBhZGRyZXNzUmVjQ3RybCxcclxuICAgICAgICAgICAgY29udHJvbGxlckFzOiAnYWRkcmVzc1JlYycsXHJcblxyXG4gICAgICAgICAgICBiaW5kaW5nczoge1xyXG4gICAgICAgICAgICAgICAgYWRkcmVzc1JlY29yZDogJzwnLFxyXG4gICAgICAgICAgICAgICAgb25VcGRhdGU6ICcmJyxcclxuICAgICAgICAgICAgICAgIHVwZGF0ZVZhbGlkOiAnJicsXHJcbiAgICAgICAgICAgICAgICBjaGVja1JvbGVzOiAnJicsXHJcbiAgICAgICAgICAgICAgICBvbkRlbGV0ZTogJyYnLFxyXG4gICAgICAgICAgICAgICAgaXNBbWVuZDogJzwnLFxyXG4gICAgICAgICAgICAgICAgaXNEZXRhaWxWYWxpZDogJyYnLFxyXG4gICAgICAgICAgICAgICAgaXNSb2xlU2VsZWN0ZWQ6ICcmJyxcclxuICAgICAgICAgICAgICAgIHJlY29yZEluZGV4OiAnPCcsXHJcbiAgICAgICAgICAgICAgICBodEluZHhMaXN0OiAnPCcsXHJcbiAgICAgICAgICAgICAgICBlcnJvclN1bW1hcnlVcGRhdGU6ICcmJywgLyogdXNlZCB0byBtZXNzYWdlIHRoYXQgZXJyb3JTdW1tYXJ5IG5lZWRzIHVwZGF0aW5nICovXHJcbiAgICAgICAgICAgICAgICBzaG93RXJyb3JTdW1tYXJ5Oic8JyxcclxuICAgICAgICAgICAgICAgIHVwZGF0ZUVycm9yU3VtbWFyeTonJicsIC8vdXBkYXRlIHRoZSBwYXJlbnQgZXJyb3Igc3VtbWFyeVxyXG4gICAgICAgICAgICAgICAgaXNJbjonPCcsXHJcbiAgICAgICAgICAgICAgICBpc0ZvY3VzOiAnPCcsXHJcbiAgICAgICAgICAgICAgICBjYW5jZWxGb2N1czogJyYnLFxyXG4gICAgICAgICAgICAgICAgaW5Vc2VGbGFnOic8J1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICBhZGRyZXNzUmVjQ3RybC4kaW5qZWN0ID0gWyckc2NvcGUnLCAnQ0FOQURBJywgJyRmaWx0ZXInLCAnZ2V0Q291bnRyeUFuZFByb3ZpbmNlcycsJyR0cmFuc2xhdGUnLCAnSU5URVJOQUxfVFlQRScsICdFWFRFUk5BTF9UWVBFJ107XHJcblxyXG4gICAgZnVuY3Rpb24gYWRkcmVzc1JlY0N0cmwoJHNjb3BlLCBDQU5BREEsJGZpbHRlciwgZ2V0Q291bnRyeUFuZFByb3ZpbmNlcywgJHRyYW5zbGF0ZSwgSU5URVJOQUxfVFlQRSwgRVhURVJOQUxfVFlQRSkge1xyXG4gICAgICAgIHZhciB2bSA9IHRoaXM7XHJcbiAgICAgICAgdm0uZGVzID0gZmFsc2U7XHJcbiAgICAgICAgdm0ubGFuZyA9ICR0cmFuc2xhdGUucHJvcG9zZWRMYW5ndWFnZSgpIHx8ICR0cmFuc2xhdGUudXNlKCk7XHJcbiAgICAgICAgdm0uaXNDb250YWN0ID0gZmFsc2U7XHJcbiAgICAgICAgdm0uaXNFZGl0YWJsZSA9IHRydWU7XHJcbiAgICAgICAgdm0uZm9ybUFtZW5kID0gZmFsc2U7XHJcbiAgICAgICAgdm0uaXNJbXBvcnRlciA9IGZhbHNlO1xyXG4gICAgICAgIHZtLnVwZGF0ZUNvdW50cnkgPSAwO1xyXG4gICAgICAgIHZtLnVwZGF0ZVN1bW1hcnk9MDsgLy90cmlnZ2VycyBhbmQgZXJyb3Igc3VtbWFyeSB1cGRhdGVcclxuICAgICAgICB2bS5zZXRTdW1tYXJ5Rm9jdXM9MDsgLy9zZXRzIHRoZSBzdW1tYXJ5IGZvY3VzXHJcbiAgICAgICAgdm0uYWRkcmVzc1JlY0Zvcm0gPSBcIlwiO1xyXG4gICAgICAgIHZtLnNob3dTdW1tYXJ5PWZhbHNlO1xyXG4gICAgICAgIHZtLmlzSW50ZXJuYWwgPSBmYWxzZTtcclxuICAgICAgICAvL1RPRE8gZ2V0ICBtb2RlbCBmcm9tIGEgc2VydmlkZVxyXG4gICAgICAgIHZtLmFkZHJlc3NNb2RlbCA9IHtcclxuICAgICAgICAgICAgYWRkcmVzc0lEOiAxLFxyXG4gICAgICAgICAgICBjb21wYW55TmFtZTogXCJcIixcclxuICAgICAgICAgICAgYnVzaW5lc3NOdW1iZXI6IFwiXCIsXHJcbiAgICAgICAgICAgIGltcG9ydGVySUQ6XCJcIixcclxuICAgICAgICAgICAgYW1lbmRSZWNvcmQ6IGZhbHNlLFxyXG4gICAgICAgICAgICBhZGRyZXNzUm9sZToge1xyXG4gICAgICAgICAgICAgICAgbWFudWZhY3R1cmVyOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIG1haWxpbmc6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgYmlsbGluZzogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBpbXBvcnRlcjogZmFsc2VcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgc3RyZWV0OiBcIlwiLFxyXG4gICAgICAgICAgICBjaXR5OiBcIlwiLFxyXG4gICAgICAgICAgICBwcm92TG92OiBcIlwiLFxyXG4gICAgICAgICAgICBzdGF0ZUxpc3Q6IFwiXCIsXHJcbiAgICAgICAgICAgIHN0YXRlVGV4dDogXCJcIixcclxuICAgICAgICAgICAgY291bnRyeTogXCJcIixcclxuICAgICAgICAgICAgY291bnRyeUh0bWw6IFwiXCIsXHJcbiAgICAgICAgICAgIHBvc3RhbENvZGU6IFwiXCJcclxuICAgICAgICAgICAgLyoqaW1wb3J0ZXJQcm9kdWN0czoge1xyXG4gICAgICAgICAgICAgICAgc2VsZWN0ZWRQcm9kdWN0czogXCJcIixcclxuICAgICAgICAgICAgICAgIGRvc3NpZXJJZExpc3Q6IFtdXHJcbiAgICAgICAgICAgIH0qL1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgdm0uYWxpYXMgPSB7XHJcbiAgICAgICAgICAgIFwicm9sZU1pc3NpbmdcIjoge1xyXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiZmllbGRzZXRcIixcclxuICAgICAgICAgICAgICAgIFwicGFyZW50XCI6IFwiZnNfcm9sZU1pc3NpbmdcIlxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBcInBvc3RhbFwiOiB7XHJcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJwYXR0ZXJuXCIsXHJcbiAgICAgICAgICAgICAgICBcImVycm9yVHlwZVwiOiBcIlBPU1RBTF9GT1JNQVRcIlxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICB2bS5yZXF1aXJlZE9ubHkgPSBbe3R5cGU6IFwicmVxdWlyZWRcIiwgZGlzcGxheUFsaWFzOiBcIk1TR19FUlJfTUFORFwifV07XHJcbiAgICAgICAgdm0ubGVuZ3RoNkVycm9yID0gW3t0eXBlOiBcInJlcXVpcmVkXCIsIGRpc3BsYXlBbGlhczogXCJNU0dfRVJSX01BTkRcIn0sXHJcbiAgICAgICAgICAgIHt0eXBlOiBcIm1pbmxlbmd0aFwiLCBkaXNwbGF5QWxpYXM6IFwiTVNHX0xFTkdUSF9NSU41XCJ9XHJcbiAgICAgICAgICAgIF07XHJcblxyXG5cclxuICAgICAgICAvKlxyXG4gICAgICAgICAqIFNlbmRzIHRoZSBtZXNzYWdlIHVwIHRvIGRldGVybWluZSBpZiBhIHJvbGUgaGFzIGFscmVhZHkgYmVlbiBzZWxlY3RlZC5cclxuICAgICAgICAgKlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHZtLmlzT25lU2VsZWN0ZWQgPSBmdW5jdGlvbiAodHlwZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gKHZtLmlzUm9sZVNlbGVjdGVkKHtyb2xlTmFtZTogdHlwZSwgaWQ6IHZtLmFkZHJlc3NNb2RlbC5hZGRyZXNzSUR9KSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICB2bS4kb25Jbml0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBfc2V0SWROYW1lcygpO1xyXG4gICAgICAgICAgICB2bS51cGRhdGVFcnJvclN1bW1hcnlTdGF0ZSgpO1xyXG4gICAgICAgICAgICB2bS5pbXBvcnRlclByb2R1Y3RTdGF0ZSh2bS5hZGRyZXNzTW9kZWwuYWRkcmVzc1JvbGUuaW1wb3J0ZXIpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgLy9UT0RPIG1vdmUgdG8gc2VydmljZVxyXG4gICAgICAgIGZ1bmN0aW9uIF9nZXRSb2xlc0NvbmNhdCgpIHtcclxuICAgICAgICAgICAgdmFyIGFkZHJlc3NSb2xlcyA9IHZtLmFkZHJlc3NNb2RlbC5hZGRyZXNzUm9sZTtcclxuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IFwiXCI7XHJcblxyXG4gICAgICAgICAgICBpZiAoYWRkcmVzc1JvbGVzLm1hbnVmYWN0dXJlcikge1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gcmVzdWx0ICsgXCIgTUZSLFwiXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGFkZHJlc3NSb2xlcy5iaWxsaW5nKSB7XHJcbiAgICAgICAgICAgICAgICByZXN1bHQgPSByZXN1bHQgKyBcIiBCSUxMLFwiXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGFkZHJlc3NSb2xlcy5tYWlsaW5nKSB7XHJcbiAgICAgICAgICAgICAgICByZXN1bHQgPSByZXN1bHQgKyBcIiBNQUlMLFwiXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGFkZHJlc3NSb2xlcy5pbXBvcnRlcikge1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gcmVzdWx0ICsgXCIgSU1QLFwiXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmVzdWx0ID0gcmVzdWx0LnN1YnN0cmluZygwLCByZXN1bHQubGVuZ3RoIC0gMSk7XHJcbiAgICAgICAgICAgIHJldHVybiByZXN1bHRcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIERldGVybWluZXMgaWYgYSBjYW5hZGlhbiBpbXBvcnRlciByb2xlIGhhcyBiZWVuIHNlbGVjdGVkXHJcbiAgICAgICAgICogQHJldHVybnMge2Jvb2xlYW59IHRydWUgLWlmIGltcG9ydGVyXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdm0ubm90Q2FuYWRpYW5NYW51ZmFjdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKCF2bS5hZGRyZXNzTW9kZWwpIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgcmV0dXJuICh2bS5hZGRyZXNzTW9kZWwuYWRkcmVzc1JvbGUubWFudWZhY3R1cmVyID09PSB0cnVlICYmIHZtLmFkZHJlc3NNb2RlbC5jb3VudHJ5LmlkICE9PSBDQU5BREEpO1xyXG5cclxuICAgICAgICB9O1xyXG4gICAgICAgIHZtLmZvY3VzT25TdW1tYXJ5ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2bS5zZXRTdW1tYXJ5Rm9jdXMgPSB2bS5zZXRTdW1tYXJ5Rm9jdXMgKyAxO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgdm0udXBkYXRlRXJyb3JTdW1tYXJ5U3RhdGU9ZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgdm0udXBkYXRlU3VtbWFyeT0gdm0udXBkYXRlU3VtbWFyeSsxO1xyXG4gICAgICAgIH07XHJcblxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBEdWUgdG8gYmluZGluZyB3aXRoIHRhYmxlIGV4cGFuZGVyIHRoaXMgbWV0aG9kIGRvZXMgbm90IGdldCBjYWxsZWRcclxuICAgICAgICAgKiBAcGFyYW0gY2hhbmdlc1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHZtLiRvbkNoYW5nZXMgPSBmdW5jdGlvbiAoY2hhbmdlcykge1xyXG4gICAgICAgICAgICAvL2hvdyB0aGlzIGlzIGN1cnJlbnRseSB3aXJlZCwgdGhpcyB3aWxsIG5ldmVyIGZpcmUhXHJcbiAgICAgICAgICAgIGlmIChjaGFuZ2VzLmFkZHJlc3NSZWNvcmQpIHtcclxuICAgICAgICAgICAgICAgIHZtLmFkZHJlc3NNb2RlbCA9IGFuZ3VsYXIuY29weShjaGFuZ2VzLmFkZHJlc3NSZWNvcmQuY3VycmVudFZhbHVlKTtcclxuICAgICAgICAgICAgICAgIHZtLmFkZHJlc3NNb2RlbC5yb2xlQ29uY2F0ID0gX2dldFJvbGVzQ29uY2F0KCk7XHJcbiAgICAgICAgICAgICAgICB2bS5zZXRFZGl0YWJsZSgpO1xyXG4gICAgICAgICAgICAgICAgLy92bS5pbXBvcnRlclByb2R1Y3RTdGF0ZSh2bS5hZGRyZXNzTW9kZWwuYWRkcmVzc1JvbGUuaW1wb3J0ZXIpO1xyXG4gICAgICAgICAgICAgICAgLy9hbmd1bGFyLmVsZW1lbnQoc2F2ZUFkZHJlc3MpLnRyaWdnZXIoJ2ZvY3VzJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGNoYW5nZXMuaXNBbWVuZCkge1xyXG4gICAgICAgICAgICAgICAgdm0uZm9ybUFtZW5kID0gY2hhbmdlcy5pc0FtZW5kLmN1cnJlbnRWYWx1ZTtcclxuICAgICAgICAgICAgICAgIHZtLmFkZHJlc3NNb2RlbC5hbWVuZFJlY29yZCA9IGNoYW5nZXMuaXNBbWVuZC5jdXJyZW50VmFsdWU7XHJcbiAgICAgICAgICAgICAgICB2bS5zZXRFZGl0YWJsZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmKGNoYW5nZXMuc2hvd0Vycm9yU3VtbWFyeSl7XHJcbiAgICAgICAgICAgICAgICB2bS5zaG93U3VtbWFyeT1jaGFuZ2VzLnNob3dFcnJvclN1bW1hcnkuY3VycmVudFZhbHVlO1xyXG4gICAgICAgICAgICAgICAgdm0udXBkYXRlRXJyb3JTdW1tYXJ5U3RhdGUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZihjaGFuZ2VzLmlzSW4pe1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKGNoYW5nZXMuaXNJbi5jdXJyZW50VmFsdWU9PT1JTlRFUk5BTF9UWVBFKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdm0uaXNJbnRlcm5hbD10cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdm0uaXNJbnRlcm5hbD1mYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiAgY2FsbHMgdGhlIGRlbGV0ZSBmdW5jdGlvbiBvbiB0aGUgcGFyZW50XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdm0uZGVsZXRlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2bS5vbkRlbGV0ZSh7YWRkcmVzc0lkOiB2bS5hZGRyZXNzTW9kZWwuYWRkcmVzc0lEfSk7XHJcbiAgICAgICAgICAgIHZtLnVwZGF0ZUVycm9yU3VtbWFyeSgpO1xyXG4gICAgICAgICAgICB2YXIgZWxlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJhZGRBZGRyZXNzQnRuXCIpO1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcInRhYiBlbGVtZW50OiBcIiArIGVsZSk7XHJcbiAgICAgICAgICAgIGlmKCBlbGUgIT09IG51bGwgKSBlbGUuZm9jdXMoKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIC8qIEBuZ2RvYyBtZXRob2QgLWRpc2NhcmRzIHRoZSBjaGFuZ2VzIGFuZCByZXZlcnRzIHRvIHRoZSBtb2RlbFxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdm0uZGlzY2FyZENoYW5nZXMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmICh2bS5hZGRyZXNzUmVjRm9ybS4kcHJpc3RpbmUpIHJldHVybjtcclxuICAgICAgICAgICAgdmFyIGN1cnJSZWNvcmQgPSB2bS5hZGRyZXNzUmVjb3JkO1xyXG4gICAgICAgICAgICB2bS5hZGRyZXNzTW9kZWwgPSBhbmd1bGFyLmNvcHkoY3VyclJlY29yZCk7XHJcbiAgICAgICAgICAgIHZtLnNldEVkaXRhYmxlKCk7IC8vY2FzZSBvZiBhbWVuZFxyXG4gICAgICAgICAgICB2bS5hZGRyZXNzUmVjRm9ybS4kc2V0UHJpc3RpbmUoKTtcclxuICAgICAgICAgICAgdm0uaXNEZXRhaWxWYWxpZCh7c3RhdGU6IHZtLmFkZHJlc3NSZWNGb3JtLiR2YWxpZH0pO1xyXG4gICAgICAgICAgICBpZiAodm0uYWRkcmVzc01vZGVsKSB7XHJcbiAgICAgICAgICAgICAgICB2bS5vblVwZGF0ZSh7cmVjOiB2bS5hZGRyZXNzTW9kZWx9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2bS5lcnJvclN1bW1hcnlVcGRhdGUoKTtcclxuICAgICAgICAgICAgdm0uaW1wb3J0ZXJQcm9kdWN0U3RhdGUodm0uYWRkcmVzc01vZGVsLmFkZHJlc3NSb2xlLmltcG9ydGVyKVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgLy9UT0RPIG9ic29sZXRlP1xyXG4gICAgICAgIHZtLm9uQWRkcmVzc1JvbGVVcGRhdGUgPSBmdW5jdGlvbiAobmV3Um9sZSkge1xyXG4gICAgICAgICAgICB2YXIgYVJvbGUgPSB7fTtcclxuICAgICAgICAgICAgYW5ndWxhci5leHRlbmQoYVJvbGUsIG5ld1JvbGUpO1xyXG4gICAgICAgICAgICB2bS5hZGRyZXNzTW9kZWwuYWRkcmVzc1JvbGUgPSBhUm9sZTtcclxuICAgICAgICAgICAgdm0udXBkYXRlQWRkcmVzc01vZGVsMigpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgdm0uaW1wb3J0ZXJQcm9kdWN0U3RhdGUgPSBmdW5jdGlvbiAoc3RhdGUpIHtcclxuICAgICAgICAgICAgdmFyIGlzSW1wb3J0ZXJQcmUgPSB2bS5pc0ltcG9ydGVyO1xyXG4gICAgICAgICAgICB2bS5pc0ltcG9ydGVyID0gc3RhdGU7XHJcbiAgICAgICAgICAgIGlmICh2bS5pc0ltcG9ydGVyKSB7XHJcbiAgICAgICAgICAgICAgICB2bS5hZGRyZXNzTW9kZWwuYWRkcmVzc1JvbGUubWFudWZhY3R1cmVyID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAvLyB2bS5hZGRyZXNzTW9kZWwuYWRkcmVzc1JvbGUubWFpbGluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgLy8gdm0uYWRkcmVzc01vZGVsLmFkZHJlc3NSb2xlLmJpbGxpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIHZtLmFkZHJlc3NNb2RlbC5jb3VudHJ5PSRmaWx0ZXIoJ2ZpbHRlcicpKGdldENvdW50cnlBbmRQcm92aW5jZXMuZ2V0Q291bnRyaWVzKCkse2lkOiBDQU5BREF9KVswXTtcclxuICAgICAgICAgICAgICAgIHZtLmFkZHJlc3NNb2RlbC5jb3VudHJ5SHRtbCA9IHZtLmFkZHJlc3NNb2RlbC5jb3VudHJ5W3ZtLmxhbmddO1xyXG4gICAgICAgICAgICAgICAgdm0udXBkYXRlQ291bnRyeSsrO1xyXG5cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoIXZtLmlzSW1wb3J0ZXIpIHtcclxuICAgICAgICAgICAgICAgIC8qKnZtLmFkZHJlc3NNb2RlbC5pbXBvcnRlclByb2R1Y3RzID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIFwic2VsZWN0ZWRQcm9kdWN0c1wiOiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwiZG9zc2llcklkTGlzbGFtdFwiOiBbXVxyXG4gICAgICAgICAgICAgICAgfTsqL1xyXG4gICAgICAgICAgICAgICAgdm0uYWRkcmVzc01vZGVsLmltcG9ydGVySUQgPSBcIlwiO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmKGlzSW1wb3J0ZXJQcmUgJiYgISB2bS5pc0ltcG9ydGVyKXtcclxuICAgICAgICAgICAgICAgIHZtLmRlc2VsZWN0SW1wb3J0ZXIoIXZtLmlzSW1wb3J0ZXIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8qKmVsc2UgaWYgKHZtLmFkZHJlc3NNb2RlbC5pbXBvcnRlclByb2R1Y3RzLmRvc3NpZXJJZExpc3QubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICB2bS5hZGRyZXNzTW9kZWwuaW1wb3J0ZXJQcm9kdWN0cy5kb3NzaWVySWRMaXN0LnB1c2goe2Rvc3NpZXJJZDogXCJcIn0pXHJcbiAgICAgICAgICAgIH0qL1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZtLmRlc2VsZWN0SW1wb3J0ZXIgPSBmdW5jdGlvbiAoc3RhdGUpe1xyXG4gICAgICAgICAgdm0uZGVzID0gc3RhdGU7XHJcbiAgICAgICAgICBpZih2bS5kZXMpe1xyXG4gICAgICAgICAgICAgIHZtLmFkZHJlc3NNb2RlbC5hZGRyZXNzUm9sZS5pbXBvcnRlciA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgIHZtLmFkZHJlc3NNb2RlbC5pbXBvcnRlcklEID0gXCJcIjtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGlmKHZtLmlzSW1wb3J0ZXIgJiYgdm0uZGVzKXtcclxuICAgICAgICAgICAgICB2bS5pc0ltcG9ydGVyID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgdm0uYWRkcmVzc01vZGVsLmNvdW50cnkgPSAnJztcclxuICAgICAgICAgICAgICB2bS5hZGRyZXNzTW9kZWwuY291bnRyeUh0bWwgPSAnJztcclxuICAgICAgICAgICAgICB2bS51cGRhdGVDb3VudHJ5Kys7XHJcbiAgICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAbmdkb2MgbWV0aG9kIC1VcGRhdGVzIHRoZSBwYXJlbnQgb24gd2hldGhlciB0aGlzIHJlY29yZCBpcyB2YWxpZCBvciBub3RcclxuICAgICAgICAgKi9cclxuICAgICAgICB2bS51cGRhdGVWYWxpZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdm0uaXNEZXRhaWxWYWxpZCh7c3RhdGU6ICh2bS5hZGRyZXNzUmVjRm9ybS4kdmFsaWQgJiYgIXZtLmFkZHJlc3NSZWNGb3JtLiRkaXJ0eSl9KTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAkc2NvcGUuJHdhdGNoKCdhZGRyZXNzUmVjLmFkZHJlc3NSZWNGb3JtLiRkaXJ0eScsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKHZtLmFkZHJlc3NSZWNGb3JtLiRkaXJ0eSkge1xyXG4gICAgICAgICAgICAgICAgdm0uaXNEZXRhaWxWYWxpZCh7c3RhdGU6IGZhbHNlfSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sIHRydWUpO1xyXG5cclxuICAgICAgICAkc2NvcGUuJHdhdGNoKCdhZGRyZXNzUmVjLmFkZHJlc3NSZWNGb3JtLiRlcnJvcicsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdm0udXBkYXRlRXJyb3JTdW1tYXJ5U3RhdGUoKTtcclxuICAgICAgICAgICAgdm0udXBkYXRlRXJyb3JTdW1tYXJ5KCk7XHJcbiAgICAgICAgfSwgdHJ1ZSk7XHJcblxyXG5cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVXBkYXRlcyB0aGUgY29udGFjdCBtb2RlbCB1c2VkIGJ5IHRoZSBzYXZlIGJ1dHRvblxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHZtLnVwZGF0ZUFkZHJlc3NNb2RlbDIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZtLmFkZHJlc3NNb2RlbC5yb2xlQ29uY2F0ID0gX2dldFJvbGVzQ29uY2F0KCk7XHJcbiAgICAgICAgICAgIGlmICh2bS5hZGRyZXNzUmVjRm9ybS4kdmFsaWQpIHtcclxuICAgICAgICAgICAgICAgIHZtLmlzRGV0YWlsVmFsaWQoe3N0YXRlOiB0cnVlfSk7XHJcbiAgICAgICAgICAgICAgICB2bS5hZGRyZXNzUmVjRm9ybS4kc2V0UHJpc3RpbmUoKTtcclxuICAgICAgICAgICAgICAgIHZtLmFkZHJlc3NNb2RlbC5mb2N1c0NvbXBhbnlOYW1lID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB2bS5vblVwZGF0ZSh7cmVjOiB2bS5hZGRyZXNzTW9kZWx9KTtcclxuICAgICAgICAgICAgICAgIHZtLnNob3dTdW1tYXJ5PWZhbHNlO1xyXG4gICAgICAgICAgICAgICAgdm0uZXJyb3JTdW1tYXJ5VXBkYXRlKCk7IC8vdXBkYXRpbmcgcGFyZW50XHJcbiAgICAgICAgICAgICAgICB2bS5jYW5jZWxGb2N1cygpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdm0uc2hvd1N1bW1hcnkgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgdm0udXBkYXRlRXJyb3JTdW1tYXJ5U3RhdGUoKTsgLy91cGRhdGluZyBjdXJyZW50XHJcbiAgICAgICAgICAgICAgICB2bS5mb2N1c09uU3VtbWFyeSgpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIHZtLmdldEludmFsaWQgPSBmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICByZXR1cm4gdm0uYWRkcmVzc1JlY0Zvcm0uJHZhbGlkO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAbmdkb2MgbWV0aG9kIHRvZ2dsZXMgZXJyb3Igc3RhdGUgdG8gbWFrZSBlcnJvcnMgdmlzaWJsZVxyXG4gICAgICAgICAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHZtLnNob3dFcnJvcnMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybigodm0uc2hvd1N1bW1hcnkpKTtcclxuICAgICAgICB9O1xyXG5cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQG5nZG9jIG1ldGhvZCB1c2VkIHRvIGRldGVybWluZSBpZiByZWNvcmQgc2hvdWxkIGJlIGVkaXRhYmxlLiBVc2VkIGZvciBhbWVuZFxyXG4gICAgICAgICAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHZtLnNldEVkaXRhYmxlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2bS5pc0VkaXRhYmxlID0gISh2bS5mb3JtQW1lbmQgJiYgIXZtLmFkZHJlc3NNb2RlbC5hbWVuZFJlY29yZCk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gX3NldElkTmFtZXMoKSB7XHJcbiAgICAgICAgICAgIHZhciBzY29wZUlkPVwiX1wiKyAgJHNjb3BlLiRpZDtcclxuICAgICAgICAgICAgdm0uY29tcGFueU5hbWVJZCA9IFwiQ09NUEFOWU5BTUVcIiArc2NvcGVJZDtcclxuICAgICAgICAgICAgdm0uaW1wb3J0ZXJJRCA9IFwiaW1wb3J0ZXJJRFwiICsgc2NvcGVJZDtcclxuICAgICAgICAgICAgdm0uZm9ybU5hbWVJZD1cImNvbXBhbnktYWRkcmVzcy1yZWNvcmQtZm9ybVwiK3Njb3BlSWQ7XHJcbiAgICAgICAgICAgIHZtLmJ1c2luZXNzTnVtYmVySWQgPSBcImJ1c2luZXNzTnVtYmVySWRcIiArIHNjb3BlSWQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgIH1cclxuXHJcblxyXG59KSgpOyIsIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IEFiZGVzc2FtYWQgb24gNi8yOS8yMDE2LlxyXG4gKi9cclxuXHJcblxyXG4oZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKCdhZGRyZXNzTW9kdWxlJywgW1xyXG4gICAgICAgICAgICAnaHBmYkNvbnN0YW50cycsXHJcbiAgICAgICAgICAgICdkYXRhTGlzdHMnLFxyXG4gICAgICAgICAgICAnZmlsdGVyTGlzdHMnLFxyXG4gICAgICAgICAgICAndWkuc2VsZWN0JyxcclxuICAgICAgICAgICAgJ2Vycm9yTWVzc2FnZU1vZHVsZSdcclxuXHJcbiAgICAgICAgXSlcclxufSkoKTtcclxuXHJcbihmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgnYWRkcmVzc01vZHVsZScpXHJcbiAgICAgICAgLmNvbmZpZyhmdW5jdGlvbiAodWlTZWxlY3RDb25maWcpIHtcclxuICAgICAgICAgICAgLy9jaG9pY2VzOiBzZWxlY3QyLCBib290c3RyYXAsIHNlbGVjdGl6ZVxyXG4gICAgICAgICAgICB1aVNlbGVjdENvbmZpZy50aGVtZSA9ICdzZWxlY3QyJztcclxuICAgICAgICB9KVxyXG4gICAgICAgIC5jb21wb25lbnQoJ2NtcEFkZHJlc3NEZXRhaWxzJywge1xyXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2FwcC9zY3JpcHRzL2NvbXBvbmVudHMvYWRkcmVzc0RldGFpbHMvdHBsLWFkZHJlc3MtZGV0YWlsc18yMDIwMDkwOV8xNTI1Lmh0bWwnLFxyXG4gICAgICAgICAgICBjb250cm9sbGVyOiBhZGRyZXNzQ3RybCxcclxuICAgICAgICAgICAgY29udHJvbGxlckFzOiAnYWRyJyxcclxuICAgICAgICAgICAgYmluZGluZ3M6IHtcclxuICAgICAgICAgICAgICAgIGFkZHJlc3NSZWNvcmQ6ICc8JyxcclxuICAgICAgICAgICAgICAgIG9uVXBkYXRlOiAnJicsIC8vbm8gbG9uZ2VyIHVzZWQgVEJEIHNob3VsZCBiZSByZW1vdmVkXHJcbiAgICAgICAgICAgICAgICBzaG93RXJyb3JzOiAnJicsXHJcbiAgICAgICAgICAgICAgICBpc0FtZW5kOiAnPCcsXHJcbiAgICAgICAgICAgICAgICB1cGRhdGVFcnJvclN1bW1hcnk6JyYnLFxyXG4gICAgICAgICAgICAgICAgZmllbGRTdWZmaXg6JzwnLFxyXG4gICAgICAgICAgICAgICAgY291bnRyeUVkaXRhYmxlOic8JyxcclxuICAgICAgICAgICAgICAgIHVwZGF0ZUNvdW50cnk6JzwnXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIGFkZHJlc3NDdHJsLiRpbmplY3QgPSBbJ2dldENvdW50cnlBbmRQcm92aW5jZXMnLCckdHJhbnNsYXRlJywnQ0FOQURBJywnVVNBJywnJHNjb3BlJ107XHJcblxyXG4gICAgZnVuY3Rpb24gYWRkcmVzc0N0cmwoIGdldENvdW50cnlBbmRQcm92aW5jZXMsJHRyYW5zbGF0ZSwgQ0FOQURBLFVTQSwgJHNjb3BlKSB7XHJcblxyXG4gICAgICAgIHZhciB2bSA9IHRoaXM7XHJcbiAgICAgICAgdm0uaXNFZGl0YWJsZSA9IHRydWU7XHJcbiAgICAgICAgLy9wdXQgbW9kZWwgdXBkYXRlcyBpbiBuZy1jaGFuZ2UgYnV0IGRlZmVyIG9uIGJsdXIuIE5vdyBtb2RlbCB1cGRhdGVzIG9uIGJsdXIgb25seSBpZiBpdCBjaGFuZ2VkXHJcbiAgICAgICAgdm0ubmdNb2RlbE9wdFNldHRpbmcgPSB7dXBkYXRlT246ICdibHVyJ307XHJcbiAgICAgICAgdm0ubGFuZyA9ICR0cmFuc2xhdGUucHJvcG9zZWRMYW5ndWFnZSgpIHx8ICR0cmFuc2xhdGUudXNlKCk7XHJcbiAgICAgICAgdm0uYWRkcmVzc01vZGVsID0ge1xyXG4gICAgICAgICAgICBhZGRyZXNzSUQ6IFwiXCIsXHJcbiAgICAgICAgICAgIGlzRGV0YWlsVmFsaWQ6IGZhbHNlLFxyXG4gICAgICAgICAgICBzdHJlZXQ6IFwiXCIsXHJcbiAgICAgICAgICAgIGNpdHk6IFwiXCIsXHJcbiAgICAgICAgICAgIGNvdW50cnk6IFwiXCIsXHJcbiAgICAgICAgICAgIGNvdW50cnlIdG1sOiBcIlwiLFxyXG4gICAgICAgICAgICBjb3VudHJ5RGlzcGxheTpcIlwiLFxyXG4gICAgICAgICAgICBzdGF0ZUxvdjogXCJcIixcclxuICAgICAgICAgICAgc3RhdGVUZXh0OiBcIlwiLFxyXG4gICAgICAgICAgICBwb3N0YWxDb2RlOiBcIlwiXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdm0uY291bnRyeUlzRWRpdGFibGU9dHJ1ZTsgLy9kZWZhdWx0IHRvIHRydWUgaW4gY2FzZSBiaW5kaW5nIG5vdCBzZXRcclxuICAgICAgICB2bS5jYW5hZGlhblBvc3RhbENvZGVQYXR0ZXJuID0gJ14oPyEuKltERklPUVVdKVtBLVZYWWEtdnh5XVswLTldW0EtWmEtel0gP1swLTldW0EtWmEtel1bMC05XSQnO1xyXG5cclxuICAgICAgICB2bS51c2FaaXBDb2RlID0gJ15bMC05XXs1fSg/Oi1bMC05XXs0fSk/JCc7XHJcbiAgICAgICAgdm0uaGlkZVByb3ZpbmNlVGV4dCA9IGZhbHNlO1xyXG4gICAgICAgIHZtLnNob3dQcm92aW5jZSA9IGZhbHNlO1xyXG4gICAgICAgIHZtLnNob3dTdGF0ZSA9IGZhbHNlO1xyXG4gICAgICAgIHZtLmNvdW50cnlMaXN0PSBnZXRDb3VudHJ5QW5kUHJvdmluY2VzLmdldENvdW50cmllcygpO1xyXG4gICAgICAgIHZtLmZkSWQ9XCJcIjtcclxuICAgICAgIC8vIHZtLnBvc3RhbEVycm9yPVwiTVNHX0VSUl9QT1NUQUxcIjtcclxuICAgICAgICB2bS5yZXF1aXJlZE9ubHkgPSBbe3R5cGU6IFwicmVxdWlyZWRcIiwgZGlzcGxheUFsaWFzOiBcIk1TR19FUlJfTUFORFwifV07XHJcbiAgICAgICAgdm0ucG9zdGFsRXJyb3JMaXN0ID0gW3t0eXBlOiBcInJlcXVpcmVkXCIsIGRpc3BsYXlBbGlhczogXCJNU0dfRVJSX01BTkRcIn0se3R5cGU6IFwicGF0dGVyblwiLCBkaXNwbGF5QWxpYXM6IFwiVFlQRV9QQVRURVJOXCJ9XTtcclxuICAgICAgICB2bS5wcm92U3RhdGVFcnJvck5hbWUgPSBcIlBST1ZTVEFURVwiO1xyXG4gICAgICAgIHZtLmZvY3VzT25Qcm92aW5jZVN0YXRlID0gZmFsc2U7XHJcbiAgICAgICAgdm0uJG9uSW5pdCA9IGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgICAgIGlmICh2bS5hZGRyZXNzUmVjb3JkKSB7XHJcbiAgICAgICAgICAgICAgICAvL3ZtLmFkZHJlc3NNb2RlbCA9IGFuZ3VsYXIuZXh0ZW5kKHt9LHZtLmFkZHJlc3NSZWNvcmQpOyBUSElTIGNhdXNlcyBmb2N1cyBncmllZlxyXG4gICAgICAgICAgICAgICAgdm0uYWRkcmVzc01vZGVsID0gdm0uYWRkcmVzc1JlY29yZDtcclxuICAgICAgICAgICAgICAgIHZtLnByb3ZMaXN0TGFiZWwgPSBnZXRQcm92aW5jZUxpc3RMYWJlbCgpO1xyXG4gICAgICAgICAgICAgICAgdm0ucG9zdGFsTGFiZWwgPSBnZXRQb3N0YWxMYWJlbCgpO1xyXG4gICAgICAgICAgICAgICAgdm0uaXNQb3N0YWxSZXF1aXJlZCA9IGlzUG9zdGFsUmVxdWlyZWRGbigpO1xyXG4gICAgICAgICAgICAgICAgdm0ucHJvdmluY2VzID0gZ2V0UHJvdmluY2VTdGF0ZUxpc3QoKTtcclxuICAgICAgICAgICAgICAgIHZtLmhpZGVQcm92aW5jZVRleHQgPSBnZXRQcm92aW5jZVRleHRTdGF0ZSgpO1xyXG4gICAgICAgICAgICAgICAgdm0ucG9zdGFsUGF0dGVybiA9IGdldFBvc3RhbFBhdHRlcm4oKTtcclxuICAgICAgICAgICAgICAgIHZtLmhpZGVQcm92aW5jZURkbCA9ICF2bS5oaWRlUHJvdmluY2VUZXh0O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF9zZXRJZE5hbWVzKCk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAbmdkb2MgbWV0aG9kIHVwZGF0ZXMgaWYgdGhlIG1vZGVsIGNoYW5nZXNcclxuICAgICAgICAgKiBAcGFyYW0gY2hhbmdlc1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHZtLiRvbkNoYW5nZXMgPSBmdW5jdGlvbiAoY2hhbmdlcykge1xyXG4gICAgICAgICAgICBpZiAoY2hhbmdlcy5hZGRyZXNzUmVjb3JkKSB7XHJcbiAgICAgICAgICAgICAgICB2bS5hZGRyZXNzTW9kZWwgPSBjaGFuZ2VzLmFkZHJlc3NSZWNvcmQuY3VycmVudFZhbHVlO1xyXG4gICAgICAgICAgICAgICAgdm0uY291bnRyeUNoYW5nZWQoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoY2hhbmdlcy5pc0FtZW5kKSB7XHJcbiAgICAgICAgICAgICAgICB2bS5pc0VkaXRhYmxlID0gY2hhbmdlcy5pc0FtZW5kLmN1cnJlbnRWYWx1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZihjaGFuZ2VzLmZpZWxkU3VmZml4KSB7XHJcbiAgICAgICAgICAgICAgICB2bS5mbGRJZCA9IGNoYW5nZXMuZmllbGRTdWZmaXguY3VycmVudFZhbHVlO1xyXG4gICAgICAgICAgICAgICAgaWYgKCF2bS5mbGRJZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZtLmZsZElkID0gXCJcIjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgaWYoY2hhbmdlcy51cGRhdGVDb3VudHJ5KXtcclxuICAgICAgICAgICAgICAgICB2bS5jb3VudHJ5Q2hhbmdlZCgpO1xyXG4gICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYoY2hhbmdlcy5jb3VudHJ5RWRpdGFibGUpe1xyXG4gICAgICAgICAgICAgICAgdm0uY291bnRyeUlzRWRpdGFibGU9Y2hhbmdlcy5jb3VudHJ5RWRpdGFibGUuY3VycmVudFZhbHVlO1xyXG4gICAgICAgICAgICAgICAgaWYoYW5ndWxhci5pc1VuZGVmaW5lZCh2bS5jb3VudHJ5SXNFZGl0YWJsZSkpe1xyXG4gICAgICAgICAgICAgICAgICAgIHZtLmNvdW50cnlJc0VkaXRhYmxlPXRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFVwZGF0ZXMgdGhlIGRpc3BsYXkgdmFsdWUgZm9yIHRoZSBvYmplY3QgZm9yIHN1bW1hcnkgZGlzcGxheVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHZtLmNvdW50cnlDaGFuZ2VkPWZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgLy8gY29uc29sZS5sb2coXCJqYW5nIHRlc3Q6XCIgKyB2bS5hZGRyZXNzTW9kZWwuY291bnRyeS5pZCk7XHJcbiAgICAgICAgICAgIGlmKCB2bS5hZGRyZXNzTW9kZWwuY291bnRyeS5pZCAhPT0gdW5kZWZpbmVkICYmICh2bS5hZGRyZXNzTW9kZWwuY291bnRyeS5lbiA9PT0gdm0uYWRkcmVzc01vZGVsLmNvdW50cnlIdG1sIHx8IHZtLmFkZHJlc3NNb2RlbC5jb3VudHJ5LmZyID09PSB2bS5hZGRyZXNzTW9kZWwuY291bnRyeUh0bWwpKSB7XHJcbiAgICAgICAgICAgICAgICB2bS5hZGRyZXNzTW9kZWwuY291bnRyeURpc3BsYXkgPSB2bS5hZGRyZXNzTW9kZWwuY291bnRyeS5pZDtcclxuICAgICAgICAgICAgICAgIHZtLnByb3ZMaXN0TGFiZWwgPSBnZXRQcm92aW5jZUxpc3RMYWJlbCgpO1xyXG4gICAgICAgICAgICAgICAgdm0ucG9zdGFsTGFiZWwgPSBnZXRQb3N0YWxMYWJlbCgpO1xyXG4gICAgICAgICAgICAgICAgdm0uaXNQb3N0YWxSZXF1aXJlZCA9IGlzUG9zdGFsUmVxdWlyZWRGbigpO1xyXG4gICAgICAgICAgICAgICAgdm0ucHJvdmluY2VzID0gZ2V0UHJvdmluY2VTdGF0ZUxpc3QoKTtcclxuICAgICAgICAgICAgICAgIHZtLmhpZGVQcm92aW5jZVRleHQgPSBnZXRQcm92aW5jZVRleHRTdGF0ZSgpO1xyXG4gICAgICAgICAgICAgICAgdm0ucG9zdGFsUGF0dGVybiA9IGdldFBvc3RhbFBhdHRlcm4oKTtcclxuICAgICAgICAgICAgICAgIHZtLmhpZGVQcm92aW5jZURkbCA9ICF2bS5oaWRlUHJvdmluY2VUZXh0O1xyXG4gICAgICAgICAgICAgICAgdm0uaXNDb3VudHJ5Q2FuYWRhKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB2bS5hZGRyZXNzTW9kZWwuY291bnRyeUh0bWwgPSBcIlwiO1xyXG4gICAgICAgICAgICAgICAgdm0uYWRkcmVzc01vZGVsLmNvdW50cnlEaXNwbGF5ID0gXCJcIjtcclxuICAgICAgICAgICAgICAgIHZtLmlzUG9zdGFsUmVxdWlyZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIHZtLmhpZGVQcm92aW5jZVRleHQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIHZtLnNob3dQcm92aW5jZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgdm0uc2hvd1N0YXRlID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB2bS5oaWRlUHJvdmluY2VEZGwgPSAhdm0uaGlkZVByb3ZpbmNlVGV4dDtcclxuICAgICAgICAgICAgICAgIHZtLnBvc3RhbExhYmVsID0gZ2V0UG9zdGFsTGFiZWwoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2bS51cGRhdGVFcnJvclN1bW1hcnkoKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2bS5pc0NvdW50cnlDYW5hZGE9ZnVuY3Rpb24oKXtcclxuICAgICAgICAgIGlmKCF2bS5hZGRyZXNzTW9kZWwgfHwgIXZtLmFkZHJlc3NNb2RlbC5jb3VudHJ5KXtcclxuICAgICAgICAgICAgICB2bS5wb3N0YWxFcnJvckxpc3QgPSBbe3R5cGU6IFwicmVxdWlyZWRcIiwgZGlzcGxheUFsaWFzOiBcIk1TR19FUlJfTUFORFwifSx7dHlwZTogXCJwYXR0ZXJuXCIsIGRpc3BsYXlBbGlhczogXCJNU0dfRVJSX1BPU1RBTFwifV07XHJcbiAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgIGVsc2UgaWYodm0uYWRkcmVzc01vZGVsLmNvdW50cnkuaWQ9PT1DQU5BREEpe1xyXG4gICAgICAgICAgICAgIHZtLnBvc3RhbEVycm9yTGlzdCA9IFt7dHlwZTogXCJyZXF1aXJlZFwiLCBkaXNwbGF5QWxpYXM6IFwiTVNHX0VSUl9NQU5EXCJ9LHt0eXBlOiBcInBhdHRlcm5cIiwgZGlzcGxheUFsaWFzOiBcIlRZUEVfUEFUVEVSTlwifV07XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgICAgdm0ucG9zdGFsRXJyb3JMaXN0ID0gW3t0eXBlOiBcInJlcXVpcmVkXCIsIGRpc3BsYXlBbGlhczogXCJNU0dfRVJSX01BTkRcIn0se3R5cGU6IFwicGF0dGVyblwiLCBkaXNwbGF5QWxpYXM6IFwiVFlQRV9QQVRURVJOXCJ9XTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2VcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2bS5zaG93RXJyb3IgPSBmdW5jdGlvbiAoY3RybCkge1xyXG5cclxuICAgICAgICAgICAgaWYgKCFjdHJsKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2VcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoKGN0cmwuJGludmFsaWQgJiYgY3RybC4kdG91Y2hlZCkgfHwgKHZtLnNob3dFcnJvcnMoKSAmJiBjdHJsLiRpbnZhbGlkICkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlXHJcbiAgICAgICAgfTtcclxuXHJcblxyXG4gICAgICAgIHZtLm9uRGVsZXRlQnV0dG9uQ2xpY2sgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZtLm9uRGVsZXRlKHthZGRyZXNzSWQ6IHZtLmFkZHJlc3NNb2RlbC5hZGRyZXNzSUR9KTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2bS5vbkRpc2NhcmRCdXR0b25DbGljayA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdm0uYWRkcmVzc01vZGVsID0gYW5ndWxhci5leHRlbmQoe30sIHZtLmFkZHJlc3NSZWNvcmQpO1xyXG4gICAgICAgICAgICB2bS5hZGRyZXNzRm9ybS4kc2V0UHJpc3RpbmUoKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHZtLmlzQ291bnRyeUVkaXRhYmxlPWZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICByZXR1cm4odm0uaXNFZGl0YWJsZSAmJnZtLmNvdW50cnlJc0VkaXRhYmxlKVxyXG4gICAgICAgIH07XHJcblxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAbmdkb2MgbWV0aG9kIGZvcm1hdHMgY2FuYWRpYW4gcG9zdGFsIGNvZGUgdG8gdXBwZXIgYW5kIHNwYWNlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdm0ucG9zdGFsQ29kZUNoYW5nZWQ9ZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgdmFyIHBvc3RhbD12bS5hZGRyZXNzTW9kZWwucG9zdGFsQ29kZTtcclxuICAgICAgICAgICAgaWYoIXBvc3RhbCkgcmV0dXJuO1xyXG4gICAgICAgICAgICBwb3N0YWw9IHBvc3RhbC50b1VwcGVyQ2FzZSgpO1xyXG4gICAgICAgICAgICBpZihwb3N0YWwubGVuZ3RoPT02ICYmIHZtLmFkZHJlc3NNb2RlbC5jb3VudHJ5LmlkID09PSBDQU5BREEpe1xyXG4gICAgICAgICAgICAgICAgcG9zdGFsPXBvc3RhbC5zdWJzdHJpbmcoMCwzKStcIiBcIitwb3N0YWwuc3Vic3RyaW5nKDMscG9zdGFsLmxlbmd0aClcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2bS5hZGRyZXNzTW9kZWwucG9zdGFsQ29kZT1wb3N0YWw7XHJcbiAgICAgICAgICAgIHZtLnVwZGF0ZUVycm9yU3VtbWFyeSgpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgdmFyIGdldFByb3ZpbmNlVGV4dFN0YXRlID0gZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICAgICAgdmFyIGlzQ2FuT3JVc2EgPSBpc1Bvc3RhbFJlcXVpcmVkRm4oKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChpc0Nhbk9yVXNhKSB7XHJcbiAgICAgICAgICAgICAgICB2bS5hZGRyZXNzTW9kZWwuc3RhdGVUZXh0ID0gXCJcIjtcclxuXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB2bS5hZGRyZXNzTW9kZWwuc3RhdGVMaXN0ID0gXCJcIjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIGlzQ2FuT3JVc2E7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIGlzUG9zdGFsUmVxdWlyZWRGbiA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuICh2bS5hZGRyZXNzTW9kZWwuY291bnRyeS5pZCA9PT0gQ0FOQURBIHx8IHZtLmFkZHJlc3NNb2RlbC5jb3VudHJ5LmlkID09PSBVU0EpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZhciBnZXRQcm92aW5jZVN0YXRlTGlzdCA9IGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgICAgIGlmICh2bS5hZGRyZXNzTW9kZWwuY291bnRyeS5pZCA9PT0gQ0FOQURBKSB7XHJcbiAgICAgICAgICAgICAgICB2bS5zaG93UHJvdmluY2UgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgdm0uc2hvd1N0YXRlID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZ2V0Q291bnRyeUFuZFByb3ZpbmNlcy5nZXRQcm92aW5jZXMoKTtcclxuXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAodm0uYWRkcmVzc01vZGVsLmNvdW50cnkuaWQgPT09IFVTQSkge1xyXG4gICAgICAgICAgICAgICAgdm0uc2hvd1Byb3ZpbmNlID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB2bS5zaG93U3RhdGUgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGdldENvdW50cnlBbmRQcm92aW5jZXMuZ2V0VVNTdGF0ZXMoKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHZtLnNob3dQcm92aW5jZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgdm0uc2hvd1N0YXRlID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2YXIgZ2V0UHJvdmluY2VMaXN0TGFiZWwgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgLy8gaWYoIXZtLmFkZHJlc3NNb2RlbCB8fCAhdm0uYWRkcmVzc01vZGVsLmNvdW50cnkpIHJldHVybiBcIlBST1ZJTkNFXCI7XHJcbiAgICAgICAgICAgIHZhciBsYWJlbCA9ICh2bS5hZGRyZXNzTW9kZWwuY291bnRyeS5pZCA9PT0gVVNBKSA/IFwiU1RBVEVcIiA6IFwiUFJPVklOQ0VcIjtcclxuICAgICAgICAgICAgcmV0dXJuIGxhYmVsO1xyXG4gICAgICAgIH07XHJcblxyXG5cclxuICAgICAgICB2YXIgZ2V0UG9zdGFsTGFiZWwgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBsYWJlbCA9ICh2bS5hZGRyZXNzTW9kZWwuY291bnRyeS5pZCA9PT0gVVNBKSA/IFwiWklQXCIgOiBcIlBPU1RBTFwiO1xyXG4gICAgICAgICAgICByZXR1cm4gbGFiZWw7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIGdldFBvc3RhbFBhdHRlcm4gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBwb3N0YWxQdHJuID0gbnVsbDtcclxuICAgICAgICAgICAgaWYgKHZtLmFkZHJlc3NNb2RlbC5jb3VudHJ5LmlkID09PSBVU0EpIHtcclxuICAgICAgICAgICAgICAgIHBvc3RhbFB0cm4gPSAvXlswLTldezV9KD86LVswLTldezR9KT8kLztcclxuICAgICAgICAgICAgfSBlbHNlIGlmICh2bS5hZGRyZXNzTW9kZWwuY291bnRyeS5pZCA9PT0gQ0FOQURBKSB7XHJcbiAgICAgICAgICAgICAgICBwb3N0YWxQdHJuID0gL14oPyEuKltERklPUVVdKVtBLVZYWWEtdnh5XVswLTldW0EtWmEtel0gP1swLTldW0EtWmEtel1bMC05XSQvO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gcG9zdGFsUHRybjtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICBmdW5jdGlvbiBfc2V0SWROYW1lcygpIHtcclxuICAgICAgICAgICAgdmFyIHNjb3BlSWQgPSB2bS5mbGRJZCsgXCJfXCIgKyAkc2NvcGUuJGlkO1xyXG4gICAgICAgICAgICB2bS5zdHJlZXRJZCA9IFwiU1RSRUVUXCIgKyBzY29wZUlkO1xyXG4gICAgICAgICAgICB2bS5jaXR5SWQgPSBcIkNJVFlcIiArIHNjb3BlSWQ7XHJcbiAgICAgICAgICAgIHZtLmNvdW50cnlJZCA9IFwiQ09VTlRSWVwiICsgc2NvcGVJZDtcclxuICAgICAgICAgICAgdm0uc3RhdGVUZXh0SWQgPSBcInByb3ZlU3RhdGVcIiArIHNjb3BlSWQ7XHJcbiAgICAgICAgICAgIHZtLnN0YXRlTGlzdElkID0gXCJzdGF0ZVwiICsgc2NvcGVJZDtcclxuICAgICAgICAgICAgdm0ucHJvdmluY2VMaXN0SWQgPSBcInByb3ZpbmNlXCIgKyBzY29wZUlkO1xyXG4gICAgICAgICAgICB2bS5wb3N0YWxJZCA9IFwicG9zdGFsXCIgKyBzY29wZUlkO1xyXG4gICAgICAgICAgICB2bS56aXBJZCA9IFwiemlwXCIgKyBzY29wZUlkO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2bS5jb3VudHJ5Q2hhbmdlID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHZhciBmb3VuZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICBmb3IodmFyIGkgPSAwOyBpIDwgdm0uY291bnRyeUxpc3QubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHZhciBvcHRpb24gPXZtLmNvdW50cnlMaXN0W2ldO1xyXG4gICAgICAgICAgICAgICAgaWYob3B0aW9uW3ZtLmxhbmddID09PSB2bS5hZGRyZXNzTW9kZWwuY291bnRyeUh0bWwpIHtcclxuICAgICAgICAgICAgICAgICAgICB2bS5hZGRyZXNzTW9kZWwuY291bnRyeSA9IG9wdGlvbjtcclxuICAgICAgICAgICAgICAgICAgICBmb3VuZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYoICEgZm91bmQgKXtcclxuICAgICAgICAgICAgICAgIHZtLmFkZHJlc3NNb2RlbC5jb3VudHJ5SHRtbCA9IFwiXCI7XHJcbiAgICAgICAgICAgICAgICBpZih2bS5hZGRyZXNzTW9kZWwuY291bnRyeSAhPSBcIlwiICYmIHZtLmFkZHJlc3NNb2RlbC5jb3VudHJ5LmlkICE9IFwiXCIpe1xyXG4gICAgICAgICAgICAgICAgICAgIHZtLmFkZHJlc3NNb2RlbC5jb3VudHJ5ID0ge307XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB2bS5hZGRyZXNzTW9kZWwuY291bnRyeURpc3BsYXkgPSBcIlwiO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZtLmNvdW50cnlDaGFuZ2VkKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZtLmNvdW50cnlUYWJLZXkgPSBmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICB2bS5mb2N1c09uUHJvdmluY2VTdGF0ZSA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZtLmxlYXZlUHJvdmluY2VTdGF0ZSA9IGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgIHZtLmZvY3VzT25Qcm92aW5jZVN0YXRlID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGNvbXBvbmVudCBvbmx5IGhhcyBvbmUgZmllbGQsIGp1c3Qgd2F0Y2ggdGhpcyBmaWVsZCBmb3IgY2hhbmdlcyB0byB1cGRhdGUgZXJyb3Igc3VtbWFyeVxyXG4gICAgICAgICRzY29wZS4kd2F0Y2goJ2Fkci5hZGRyZXNzRm9ybS4kZXJyb3InLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZtLnVwZGF0ZUVycm9yU3VtbWFyeSgpO1xyXG4gICAgICAgIH0sIHRydWUpO1xyXG5cclxuICAgIH1cclxuXHJcbn0pKCk7XHJcblxyXG5cclxuIiwiLyoqXHJcbiAqIENyZWF0ZWQgYnkgZGtpbHR5IG9uIDgvNi8yMDE2LlxyXG4gKi9cclxuXHJcbihmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ2NvbnRhY3RMaXN0MicsIFsnY29udGFjdFJlY29yZCcsJ2V4cGFuZGluZ1RhYmxlJywnaHBmYkNvbnN0YW50cycsJ2Vycm9yU3VtbWFyeU1vZHVsZSddKVxyXG59KSgpO1xyXG5cclxuKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgnY29udGFjdExpc3QyJylcclxuICAgICAgICAuY29tcG9uZW50KCdjbXBDb21wYW55Q29udGFjdExpc3QnLCB7XHJcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnYXBwL3NjcmlwdHMvY29tcG9uZW50cy9jb250YWN0TGlzdC90cGwtY29udGFjdC1saXN0XzIwMjAwOTA5XzE1MjUuaHRtbCcsXHJcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6IGNvbnRhY3RMaXN0Q3RybCxcclxuICAgICAgICAgICAgY29udHJvbGxlckFzOiAnY29udGFjdExpc3RDdHJsJyxcclxuICAgICAgICAgICAgYmluZGluZ3M6IHtcclxuICAgICAgICAgICAgICAgIGNvbnRhY3RzOiAnPCcsXHJcbiAgICAgICAgICAgICAgICBvblVwZGF0ZTogJyYnLFxyXG4gICAgICAgICAgICAgICAgZ2V0TmV3Q29udGFjdDogJyYnLFxyXG4gICAgICAgICAgICAgICAgaXNBbWVuZDogJzwnLFxyXG4gICAgICAgICAgICAgICAgaXNGaWxlTG9hZGVkOiAnPCcsXHJcbiAgICAgICAgICAgICAgICBjb21wYW55U2VydmljZTonPCcsXHJcbiAgICAgICAgICAgICAgICBzaG93RXJyb3JTdW1tYXJ5Oic8JyxcclxuICAgICAgICAgICAgICAgIGVycm9yU3VtbWFyeVVwZGF0ZTonPCcsXHJcbiAgICAgICAgICAgICAgICB1cGRhdGVFcnJvclN1bW1hcnk6JyYnLCAvL3VwZGF0ZSB0aGUgcGFyZW50IGVycm9yIHN1bW1hcnlcclxuICAgICAgICAgICAgICAgIHVzZXJUeXBlOic8JyxcclxuICAgICAgICAgICAgICAgIGh0SW5keExpc3Q6ICc8JyxcclxuICAgICAgICAgICAgICAgIGFkZHJJbXBDb21wYW55TmFtZTogJzwnXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIGNvbnRhY3RMaXN0Q3RybC4kaW5qZWN0ID0gWyckZmlsdGVyJywnQ29tcGFueVNlcnZpY2UnLCAnSU5URVJOQUxfVFlQRSddO1xyXG4gICAgZnVuY3Rpb24gY29udGFjdExpc3RDdHJsKCRmaWx0ZXIsQ29tcGFueVNlcnZpY2UsIElOVEVSTkFMX1RZUEUpIHtcclxuICAgICAgICB2YXIgdm0gPSB0aGlzO1xyXG4gICAgICAgIHZtLnNlbGVjdFJlY29yZCA9IC0xOyAvL3RoZSByZWNvcmQgdG8gc2VsZWN0XHJcbiAgICAgICAgdm0uaXNEZXRhaWxWYWxpZD10cnVlOyAvL3VzZWQgdG8gdHJhY2sgaWYgZGV0YWlscyB2YWxpZC4gSWYgdGhleSBhcmUgIG5vdCBkbyBub3QgYWxsb3cgZXhwYW5kZXIgY29sbGFwc2VcclxuICAgICAgICB2bS5hbGxSb2xlc1NlbGVjdGVkPWZhbHNlO1xyXG4gICAgICAgIHZtLmltcENvbXBhbnlTZWxlY3RlZD10cnVlO1xyXG4gICAgICAgIHZtLmNvbnRhY3RMaXN0ID0gW107XHJcbiAgICAgICAgdm0uZm9ybUFtZW5kID0gZmFsc2U7XHJcbiAgICAgICAgdm0uaXNJbnRlcm5hbCA9IGZhbHNlO1xyXG4gICAgICAgIHZtLnJlcXVpcmVkRmxhZyA9IHRydWU7IC8vdXNlIHRvIHNpZ25hbCBleHBhbmRpbmcgdGFibGUgZXh0ZW5kIGFuIGVtcHR5IHJlY29yZFxyXG4gICAgICAgIHZtLnJlc2V0Q29sbGFwc2VkID0gZmFsc2U7Ly91c2VkIHRvIHNpZ25hbCBleHBhbmRpbmcgdGFibGUgY29sbGFwc2VcclxuICAgICAgICB2bS51cGRhdGVTdW1tYXJ5PTA7IC8vc2VuZHMgc2lnbmFsIHRvIHVwZGF0ZSBlcnJvciBzdW1tYXJ5IG9iamVjdFxyXG4gICAgICAvLyAgdm0uc2hvd1N1bW1hcnk9ZmFsc2U7IC8vZmxhZyB0byBjb250cm9sIGVycm9yIHN1bW1hcnkgdmlzaWJpbGl0eVxyXG4gICAgICAgIHZtLmNvbHVtbkRlZiA9IFtcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbGFiZWw6IFwiRklSU1ROQU1FXCIsXHJcbiAgICAgICAgICAgICAgICBiaW5kaW5nOlwiZ2l2ZW5OYW1lXCIsXHJcbiAgICAgICAgICAgICAgICB3aWR0aDpcIjI1XCJcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbGFiZWw6IFwiTEFTVE5BTUVcIixcclxuICAgICAgICAgICAgICAgIGJpbmRpbmc6XCJzdXJuYW1lXCIsXHJcbiAgICAgICAgICAgICAgICB3aWR0aDpcIjMwXCJcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbGFiZWw6IFwiSk9CVElUTEVcIixcclxuICAgICAgICAgICAgICAgIGJpbmRpbmc6XCJ0aXRsZVwiLFxyXG4gICAgICAgICAgICAgICAgd2lkdGg6XCIyNVwiXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGxhYmVsOiBcIlJPTEVTXCIsXHJcbiAgICAgICAgICAgICAgICBiaW5kaW5nOlwicm9sZUNvbmNhdFwiLFxyXG4gICAgICAgICAgICAgICAgd2lkdGg6XCIyMFwiXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICBdO1xyXG5cclxuXHJcbiAgICAgICAgdm0uYWxpYXMgPSB7XHJcbiAgICAgICAvKiAgICAgXCJyb2xlTWlzc2luZ1wiOiB7XHJcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJmaWVsZHNldFwiLFxyXG4gICAgICAgICAgICAgICAgXCJwYXJlbnRcIjogXCJmc19yb2xlTWlzc2luZ1wiXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIFwiY29udGFjdFJvbGVzVmFsaWRcIjoge1xyXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiZWxlbWVudFwiLFxyXG4gICAgICAgICAgICAgICAgXCJ0YXJnZXRcIjogXCJhZGRDb250YWN0XCJcclxuICAgICAgICAgICAgfSovXHJcbiAgICAgICAgfTtcclxuICAgICAgICB2bS5leGNsdXNpb25zID0ge1xyXG4gICAgICAgICAgIC8vIFwiY29udGFjdFJlYy5jb250YWN0UmVjRm9ybVwiOiBcInRydWVcIlxyXG4gICAgICAgIH07XHJcblxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiB1c2luZyB0byBnZXQgY29udGFjdCBsaXN0XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdm0uJG9uSW5pdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdm0uZm9jdXNlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAvL3ZtLmNvbnRhY3RMaXN0ID0gdm0uY29udGFjdHM7IC8vSEVSRSBJcyBob3cgaXQgaXMgYm91bmRcclxuICAgICAgICAgICAgLy91cGRhdGVSb2xlc0NvbmNhdCgpO1xyXG4gICAgICAgICAgICAvL3ZtLmFsbFJvbGVzU2VsZWN0ZWQgPSB2bS5pc0FsbENvbnRhY3RSb2xlc1NlbGVjdGVkKCk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICB2bS4kb25DaGFuZ2VzID0gZnVuY3Rpb24gKGNoYW5nZXMpIHtcclxuICAgICAgICAgICAgdm0uaW1wQ29tcGFueVNlbGVjdGVkID0gdm0uaXNJbXBDb21wYW55U2VsZWN0ZWQoKTtcclxuICAgICAgICAgICAgaWYgKGNoYW5nZXMuY29udGFjdHMpIHtcclxuICAgICAgICAgICAgICAgIHZtLmNvbnRhY3RMaXN0ID0gY2hhbmdlcy5jb250YWN0cy5jdXJyZW50VmFsdWU7XHJcbiAgICAgICAgICAgICAgICB1cGRhdGVSb2xlc0NvbmNhdCgpO1xyXG4gICAgICAgICAgICAgICAgdm0uYWxsUm9sZXNTZWxlY3RlZCA9IHZtLmlzQWxsQ29udGFjdFJvbGVzU2VsZWN0ZWQoKTtcclxuICAgICAgICAgICAgICAgIHZtLmlzRGV0YWlsVmFsaWQ9dHJ1ZTtcclxuICAgICAgICAgICAgICAgIHZtLnVwZGF0ZUVycm9yU3VtbWFyeVN0YXRlKClcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoY2hhbmdlcy5pc0FtZW5kKSB7XHJcbiAgICAgICAgICAgICAgICB2bS5mb3JtQW1lbmQgPSBjaGFuZ2VzLmlzQW1lbmQuY3VycmVudFZhbHVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmKGNoYW5nZXMuZXJyb3JTdW1tYXJ5VXBkYXRlKXtcclxuICAgICAgICAgICAgICAgIHZtLnVwZGF0ZUVycm9yU3VtbWFyeVN0YXRlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYoY2hhbmdlcy5zaG93RXJyb3JTdW1tYXJ5KXtcclxuICAgICAgICAgICAgICAgIHZtLnNob3dTdW1tYXJ5PWNoYW5nZXMuc2hvd0Vycm9yU3VtbWFyeS5jdXJyZW50VmFsdWU7XHJcbiAgICAgICAgICAgICAgICAvL3ZtLnVwZGF0ZUVycm9yU3VtbWFyeVN0YXRlKClcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoY2hhbmdlcy51c2VyVHlwZSkge1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciBpc0luID0gY2hhbmdlcy51c2VyVHlwZS5jdXJyZW50VmFsdWU7XHJcbiAgICAgICAgICAgICAgICBpZiAoaXNJbiA9PT0gSU5URVJOQUxfVFlQRSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZtLmlzSW50ZXJuYWwgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHZtLmlzSW50ZXJuYWwgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoY2hhbmdlcy5pc0ZpbGVMb2FkZWQpIHtcclxuICAgICAgICAgICAgICAgIGlmIChjaGFuZ2VzLmlzRmlsZUxvYWRlZC5jdXJyZW50VmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICB2bS5yZXF1aXJlZEZsYWcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZtLiRwb3N0TGluayA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYoIXZtLmlzSW50ZXJuYWwpIHtcclxuICAgICAgICAgICAgICAgIHZtLmFkZENvbnRhY3QoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZtLnVwZGF0ZUVycm9yU3VtbWFyeVN0YXRlPWZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgIHZtLnVwZGF0ZVN1bW1hcnk9IHZtLnVwZGF0ZVN1bW1hcnkrMTtcclxuICAgICAgICB9O1xyXG5cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gdXBkYXRlUm9sZXNDb25jYXQoKSB7XHJcbiAgICAgICAgICAgIGlmICghdm0uY29udGFjdExpc3QpIHJldHVybjtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2bS5jb250YWN0TGlzdC5sZW5ndGg7IGkrKykge1xyXG5cclxuICAgICAgICAgICAgICAgIF9zZXRSb2xlc0NvbmNhdCh2bS5jb250YWN0TGlzdFtpXSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy90aGlzIGlzIG5lZWRlZCBvbiBsb2FkLiBCaXQgb2YgYSBoYWNrXHJcbiAgICAgICAgLy9UT0RPIG1vdmUgdG8gYSBzZXJ2aWNlP1xyXG4gICAgICAgIGZ1bmN0aW9uIF9zZXRSb2xlc0NvbmNhdChjb250YWN0TW9kZWwpIHtcclxuICAgICAgICAgICAgdmFyIHJvbGVzID0gY29udGFjdE1vZGVsLmFkZHJlc3NSb2xlO1xyXG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gXCJcIjtcclxuXHJcbiAgICAgICAgICAgIGlmIChyb2xlcy5tYW51ZmFjdHVyZXIpIHtcclxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdCArIFwiIE1GUlwiXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHJvbGVzLmJpbGxpbmcpIHtcclxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdCArIFwiIEJJTExcIlxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChyb2xlcy5tYWlsaW5nKSB7XHJcbiAgICAgICAgICAgICAgICByZXN1bHQgPSByZXN1bHQgKyBcIiBNQUlMXCJcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgIGlmIChyb2xlcy5pbXBvcnRlcikge1xyXG4gICAgICAgICAgICAgICByZXN1bHQgPSByZXN1bHQgKyBcIiBJTVBcIlxyXG4gICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHJvbGVzLnJlcFByaW1hcnkpIHtcclxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdCArIFwiIFJFUDFcIlxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIGlmIChyb2xlcy5yZXBTZWNvbmRhcnkpIHtcclxuICAgICAgICAgICAgLy8gICAgIHJlc3VsdCA9IHJlc3VsdCArIFwiIFJFUDJcIlxyXG4gICAgICAgICAgICAvLyB9XHJcbiAgICAgICAgICAgIGNvbnRhY3RNb2RlbC5yb2xlQ29uY2F0ID0gcmVzdWx0O1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIHZtLnNldFZhbGlkPWZ1bmN0aW9uKHZhbHVlKXtcclxuXHJcbiAgICAgICAgICAgIHZtLmlzRGV0YWlsVmFsaWQ9dmFsdWU7IC8vdGhpcyBpcyBhIHNoYXJlZCB2YWx1ZVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZtLnNob3dFcnJvciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgLy8gIXZtLmNvbnRhY3RMaXN0Rm9ybS4kcHJpc3RpbmVcclxuICAgICAgICAgICAgLy8gcmV0dXJuKCF2bS5pc0FsbENvbnRhY3RSb2xlc1NlbGVjdGVkKCkpO1xyXG4gICAgICAgICAgIC8qIGlmICgoIXZtLmlzQWxsQ29udGFjdFJvbGVzU2VsZWN0ZWQoKSApKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZSovXHJcblxyXG4gICAgICAgICAgICByZXR1cm4gIXZtLmlzQWxsQ29udGFjdFJvbGVzU2VsZWN0ZWQoKSB8fCAhdm0uaXNJbXBDb21wYW55U2VsZWN0ZWQoKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2bS5vblVwZGF0ZUNvbnRhY3RSZWNvcmQgPSBmdW5jdGlvbiAocmVjb3JkKSB7XHJcblxyXG4gICAgICAgICAgICAgdmFyIGlkeCA9IHZtLmNvbnRhY3RMaXN0LmluZGV4T2YoXHJcbiAgICAgICAgICAgICAkZmlsdGVyKCdmaWx0ZXInKSh2bS5jb250YWN0TGlzdCwge2NvbnRhY3RJZDogcmVjb3JkLmNvbnRhY3RJZH0sIHRydWUpWzBdXHJcbiAgICAgICAgICAgICApOyAvL1RPRE8gZml4IGZpbHRlclxyXG4gICAgICAgICAgICAgdm0uY29udGFjdExpc3RbaWR4XSA9IGFuZ3VsYXIuY29weShyZWNvcmQpO1xyXG4gICAgICAgICAgICB2bS5hbGxSb2xlc1NlbGVjdGVkPSB2bS5pc0FsbENvbnRhY3RSb2xlc1NlbGVjdGVkKCk7XHJcbiAgICAgICAgICAgIHZtLmltcENvbXBhbnlTZWxlY3RlZCA9IHZtLmlzSW1wQ29tcGFueVNlbGVjdGVkKCk7XHJcbiAgICAgICAgICAgIHZtLnJlcXVpcmVkRmxhZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICB2bS5yZXNldENvbGxhcHNlZCA9ICF2bS5yZXNldENvbGxhcHNlZDtcclxuICAgICAgICAgICAgdm0uY29udGFjdExpc3RGb3JtLiRzZXRQcmlzdGluZSgpO1xyXG5cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2bS5kZWxldGVDb250YWN0ID0gZnVuY3Rpb24gKGNJRCkge1xyXG4gICAgICAgICAgICB2YXIgaWR4ID0gdm0uY29udGFjdExpc3QuaW5kZXhPZihcclxuICAgICAgICAgICAgICAgICRmaWx0ZXIoJ2ZpbHRlcicpKHZtLmNvbnRhY3RMaXN0LCB7Y29udGFjdElkOiBjSUR9LCB0cnVlKVswXVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgICB2bS5jb250YWN0TGlzdC5zcGxpY2UoaWR4LCAxKTtcclxuICAgICAgICAgICAgdm0ub25VcGRhdGUoe25ld0xpc3Q6IHZtLmNvbnRhY3RMaXN0fSk7XHJcbiAgICAgICAgICAgIHZtLmlzRGV0YWlsVmFsaWQgPSB0cnVlOyAvL2Nhc2UgdGhhdCBpbmNvbXBsZXRlIHJlY29yZFxyXG4gICAgICAgICAgICB2bS5hbGxSb2xlc1NlbGVjdGVkPSB2bS5pc0FsbENvbnRhY3RSb2xlc1NlbGVjdGVkKCk7XHJcbiAgICAgICAgICAgIHZtLmltcENvbXBhbnlTZWxlY3RlZCA9IHZtLmlzSW1wQ29tcGFueVNlbGVjdGVkKCk7XHJcbiAgICAgICAgICAgIHZtLnJlcXVpcmVkRmxhZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICB2bS5yZXNldENvbGxhcHNlZCA9ICF2bS5yZXNldENvbGxhcHNlZDtcclxuICAgICAgICAgICAgdm0udXBkYXRlRXJyb3JTdW1tYXJ5U3RhdGUoKTtcclxuICAgICAgICAgICAgdm0uY29udGFjdExpc3RGb3JtLiRzZXRQcmlzdGluZSgpO1xyXG5cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBBZGRzIGEgY29udGFjdCB0byB0aGUgY29udGFjdCBsaXN0XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdm0uYWRkQ29udGFjdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIGRlZmF1bHRDb250YWN0ID0gdm0uZ2V0TmV3Q29udGFjdCgpO1xyXG4gICAgICAgICAgICBkZWZhdWx0Q29udGFjdC5mb2N1c09uRmlyc3ROYW1lID0gdm0uaXNGb2N1cztcclxuICAgICAgICAgICAgdm0uY29udGFjdExpc3QucHVzaChkZWZhdWx0Q29udGFjdCk7XHJcbiAgICAgICAgICAgIC8vc2VsZWN0IHRhYmxlIHJvdyBmaXJzdCB0aGVuIG1ha2UgaW52YWxpZFxyXG4gICAgICAgICAgICB2bS5zZWxlY3RSZWNvcmQ9KHZtLmNvbnRhY3RMaXN0Lmxlbmd0aCAtIDEpO1xyXG4gICAgICAgICAgICB2bS5pc0RldGFpbFZhbGlkPSBmYWxzZTtcclxuICAgICAgICAgICAvLyB2bS5zaG93U3VtbWFyeT1mYWxzZTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHZtLnNldEZvY3VzID0gZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgdm0uaXNGb2N1cyA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZtLmNhbmNlbEZvY3VzID0gZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgdm0uaXNGb2N1cyA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAbmdkb2MgbWV0aG9kIC0gY2hlY2tzIGlmIGFsbCB0aGUgcm9sZXMgaGF2ZSBiZWVuIHNlbGVjdGVkXHJcbiAgICAgICAgICogQHBhcmFtIHJvbGVUb0NoZWNrIChvcHRpb25hbCkgcmV0dXJucyBpZiBhIHJvbGUgaGFzIGJlZW4gc2VsZWN0ZWQuXHJcbiAgICAgICAgICogICAgICAgICAgICAgICAgICAgICBJZiBubyB2YWx1ZSBjaGVjayBpZiBhbGwgcm9sZXMgaGF2ZSBiZWVuIHNlbGVjdGVkXHJcbiAgICAgICAgICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdm0uaXNSRVBSb2xlU2VsZWN0ZWQgPSBmdW5jdGlvbiAocm9sZVRvQ2hlY2sscmVjb3JkSUQpIHtcclxuICAgICAgICAgICAgdmFyIHJvbGVzU2VsZWN0ZWQgPSAwO1xyXG4gICAgICAgICAgICAvL2lmIG5vIHJvbGUgdG8gY2hlY2ssIHNlZSBpZiBhbGwgc2VsZWN0ZWRcclxuICAgICAgICAgICAgaWYgKCF2bS5jb250YWN0TGlzdCkgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZtLmNvbnRhY3RMaXN0Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodm0uY29udGFjdExpc3RbaV0uYWRkcmVzc1JvbGVbcm9sZVRvQ2hlY2tdID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9kb24ndCBjb3VudCBpdCBpZiBpdCBpcyB0aGUgZXhpc3RpbmcgcmVjb3JkXHJcbiAgICAgICAgICAgICAgICAgICAgaWYodm0uY29udGFjdExpc3RbaV0uY29udGFjdElkIT09cmVjb3JkSUQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcm9sZXNTZWxlY3RlZCA9IHJvbGVzU2VsZWN0ZWQgKyAxO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZihyb2xlc1NlbGVjdGVkPjApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9O1xyXG5cclxuXHJcbiAgICAgICAgdm0uZGlzYWJsZUFkZENvbnRhY3QgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIC8vVE9ETyBkb24ndCBoYXJkIGNvZGUgbGVuZ3RoP1xyXG4gICAgICAgICAgICBpZighdm0uY29udGFjdExpc3QpIHJldHVybiBmYWxzZTsgLy9zaG91bGQgbmV2ZXIgaGFwcGVuXHJcbiAgICAgICAgICAgIHJldHVybiAoIXZtLmlzRGV0YWlsVmFsaWQpIC8vIHJlbW92ZSByZWNvcmQgbGltaXQgLSB2bS5jb250YWN0TGlzdC5sZW5ndGggPCA1ICYmXHJcblxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBuZ2RvYyBtZXRob2QgY2hlY2tzIGlmIGFsbCB0aGUgY29udGFjdCByb2xlcyBoYXZlIGJlZW4gc2VsZWN0ZWRcclxuICAgICAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuICAgICAgICAgKi9cclxuICAgICAgICAgICAgLy9UT0RETyBtb3ZlIHRoaXMgdG8gdGhlIHNlcnZpY2VcclxuICAgICAgICB2bS5pc0FsbENvbnRhY3RSb2xlc1NlbGVjdGVkPWZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgIHZhciByb2xlc1NlbGVjdGVkID0gMDtcclxuICAgICAgICAgICAgdmFyIHJlcFByaW1hcnlTZWxlY3RlZD1mYWxzZTtcclxuICAgICAgICAgICAgLy8gdmFyIHJlcFNlY29uZGFyeVNlbGVjdGVkPWZhbHNlO1xyXG4gICAgICAgICAgIHZhciBpbXBvcnRlclNlbGVjdGVkPWZhbHNlO1xyXG5cclxuICAgICAgICAgICAgaWYgKCF2bS5jb250YWN0TGlzdCkgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgdmFyIGNvbXBhbnlSb2xlPSB2bS5jb21wYW55U2VydmljZS5jcmVhdGVDb250YWN0Um9sZSgpO1xyXG4gICAgICAgICAgICB2YXIgbnVtS2V5cz12bS5jb21wYW55U2VydmljZS5nZXROdW1iZXJLZXlzKGNvbXBhbnlSb2xlKTtcclxuICAgICAgICAgICBmb3IodmFyIGk9MDtpPHZtLmNvbnRhY3RMaXN0Lmxlbmd0aDtpKyspIHtcclxuICAgICAgICAgICAgICAgdmFyIG9iaiA9IHZtLmNvbnRhY3RMaXN0W2ldLmFkZHJlc3NSb2xlO1xyXG4gICAgICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XHJcbiAgICAgICAgICAgICAgICAgICB2YXIgYXR0ck5hbWUgPSBrZXk7XHJcbiAgICAgICAgICAgICAgICAgICB2YXIgYXR0clZhbHVlID0gb2JqW2tleV07XHJcbiAgICAgICAgICAgICAgICAgICBpZiAoYXR0clZhbHVlICYmIGNvbXBhbnlSb2xlLmhhc093blByb3BlcnR5KGF0dHJOYW1lKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgIHJvbGVzU2VsZWN0ZWQrKztcclxuICAgICAgICAgICAgICAgICAgICAgICAvLyBpZihrZXk9PT1cInJlcFByaW1hcnlcIikgcmVwUHJpbWFyeVNlbGVjdGVkPXRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgLy8gaWYoa2V5PT09XCJyZXBTZWNvbmRhcnlcIikgcmVwU2Vjb25kYXJ5U2VsZWN0ZWQ9dHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgIGlmKGtleT09PVwiaW1wb3J0ZXJcIikgaW1wb3J0ZXJTZWxlY3RlZD10cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZihyb2xlc1NlbGVjdGVkPT09bnVtS2V5cyl7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvL3ByaW1hcnkgaGFzIHRvIGJlIHNlbGVjdGVkIGF0IGxlYXN0XHJcbiAgICAgICAgICAgLy8gaWYgKChyb2xlc1NlbGVjdGVkID09PSAobnVtS2V5cyAtIDEpIHx8IHJvbGVzU2VsZWN0ZWQgPT09IChudW1LZXlzIC0gMikpICYmIChyZXBQcmltYXJ5U2VsZWN0ZWQgJiYgKCFyZXBTZWNvbmRhcnlTZWxlY3RlZCB8fCAhaW1wb3J0ZXJTZWxlY3RlZCkpKSB7XHJcbiAgICAgICAgICAgIGlmICgocm9sZXNTZWxlY3RlZCA9PT0gKG51bUtleXMgLSAxKSB8fCByb2xlc1NlbGVjdGVkID09PSAobnVtS2V5cyAtIDIpKSAmJiAocmVwUHJpbWFyeVNlbGVjdGVkICkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdm0uaXNJbXBDb21wYW55U2VsZWN0ZWQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBpID0gMDtcclxuICAgICAgICAgICAgdmFyIGogPSAwO1xyXG4gICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2bS5hZGRySW1wQ29tcGFueU5hbWUpICYmIHZtLmFkZHJJbXBDb21wYW55TmFtZS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgdm0uYWRkckltcENvbXBhbnlOYW1lLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChqID0gMDsgaiA8IHZtLmNvbnRhY3RMaXN0Lmxlbmd0aDsgaisrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKHZtLmFkZHJJbXBDb21wYW55TmFtZVtpXSA9PT0gdm0uY29udGFjdExpc3Rbal0uaW1wQ29tcGFueU5hbWUpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChqID49IHZtLmNvbnRhY3RMaXN0Lmxlbmd0aClcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbn0pKCk7XHJcbiIsIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IEFiZGVzc2FtYWQgb24gNy81LzIwMTYuXHJcbiAqL1xyXG5cclxuKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgnYWRkcmVzc0xpc3QnLCBbJ2FkZHJlc3NSZWNvcmQnLCdocGZiQ29uc3RhbnRzJywnZXJyb3JTdW1tYXJ5TW9kdWxlJ10pXHJcbn0pKCk7XHJcbi8vdGVzdFxyXG4oZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKCdhZGRyZXNzTGlzdCcpXHJcbiAgICAgICAgLmNvbXBvbmVudCgnY21wQ29tcGFueUFkZHJlc3NMaXN0Jywge1xyXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2FwcC9zY3JpcHRzL2NvbXBvbmVudHMvYWRkcmVzc0xpc3QvdHBsLWNvbXBhbnktYWRkcmVzcy1saXN0XzIwMjAwOTA5XzE1MjUuaHRtbCcsXHJcbiAgICAgICAgICAgIGJpbmRpbmdzOiB7XHJcbiAgICAgICAgICAgICAgICBhZGRyZXNzZXM6ICc8JyxcclxuICAgICAgICAgICAgICAgIG9uVXBkYXRlOiAnJicsXHJcbiAgICAgICAgICAgICAgICBnZXROZXdBZGRyZXNzOiAnJicsXHJcbiAgICAgICAgICAgICAgICBpc0FtZW5kOiAnPCcsXHJcbiAgICAgICAgICAgICAgICBpc0ZpbGVMb2FkZWQ6ICc8JyxcclxuICAgICAgICAgICAgICAgIGNvbXBhbnlTZXJ2aWNlOiAnPCcsXHJcbiAgICAgICAgICAgICAgICBzaG93RXJyb3JTdW1tYXJ5Oic8JyxcclxuICAgICAgICAgICAgICAgIGVycm9yU3VtbWFyeVVwZGF0ZTonPCcsXHJcbiAgICAgICAgICAgICAgICB1cGRhdGVFcnJvclN1bW1hcnk6JyYnLCAvL3VwZGF0ZSB0aGUgcGFyZW50IGVycm9yIHN1bW1hcnlcclxuICAgICAgICAgICAgICAgIHVzZXJUeXBlOic8JyxcclxuICAgICAgICAgICAgICAgIGhhc0FkZHJJbXBDb21wYW55TmFtZTogJyYnLFxyXG4gICAgICAgICAgICAgICAgaXNJbXBDb21wYW55TmFtZVVzZWQ6JyYnLFxyXG4gICAgICAgICAgICAgICAgaW5Vc2VGbGFnOiAnPCcsXHJcbiAgICAgICAgICAgICAgICBjaGVja0ltcENvbXBhbnlJblVzZWQ6JyYnXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6IGFkZHJlc3NMaXN0Q3RybCxcclxuICAgICAgICAgICAgY29udHJvbGxlckFzOiAnYWRkcmVzc0xpc3RDdHJsJ1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgIGFkZHJlc3NMaXN0Q3RybC4kaW5qZWN0ID0gWyckZmlsdGVyJywgJ0NvbXBhbnlTZXJ2aWNlJywnQ0FOQURBJywgJ0lOVEVSTkFMX1RZUEUnLCAnRVhURVJOQUxfVFlQRSddO1xyXG5cclxuICAgIGZ1bmN0aW9uIGFkZHJlc3NMaXN0Q3RybCgkZmlsdGVyLCBDb21wYW55U2VydmljZSwgQ0FOQURBLCBJTlRFUk5BTF9UWVBFLCBFWFRFUk5BTF9UWVBFKSB7XHJcblxyXG4gICAgICAgIHZhciB2bSA9IHRoaXM7XHJcbiAgICAgICAgdm0uc2VsZWN0UmVjb3JkID0gLTE7IC8vdGhlIHJlY29yZCB0byBzZWxlY3QsIGluaXRpYWxseSBzZWxlY3Qgbm9uXHJcbiAgICAgICAgdm0uaXNEZXRhaWxzVmFsaWQgPSB0cnVlOyAvL3VzZWQgdG8gdHJhY2sgaWYgZGV0YWlscyB2YWxpZC4gSWYgdGhleSBhcmUgIG5vdCBkbyBub3QgYWxsb3cgZXhwYW5kZXIgY29sbGFwc2VcclxuICAgICAgICB2bS5hbGxSb2xlc1NlbGVjdGVkID0gXCJcIjtcclxuICAgICAgICB2bS5pbXBvcnRlcmhhc0lEID0gXCJcIjtcclxuICAgICAgICB2bS5yZXNldENvbGxhcHNlZCA9IGZhbHNlO1xyXG4gICAgICAgIHZtLnVwZGF0ZVN1bW1hcnk9MDsgLy9zZW5kcyBzaWduYWwgdG8gdXBkYXRlIGVycm9yIHN1bW1hcnkgb2JqZWN0XHJcbiAgICAgICAgdm0uc2hvd1N1bW1hcnk9ZmFsc2U7XHJcbiAgICAgICAgdm0uYWRkcmVzc0xpc3QgPSBbXTtcclxuICAgICAgICB2bS5pc0luID0gXCJcIjtcclxuICAgICAgICB2bS5pc0ludGVybmFsID0gZmFsc2U7XHJcbiAgICAgICAgdm0ucmVxdWlyZWRGbGFnID0gdHJ1ZTsgLy91c2UgdG8gc2lnbmFsIGV4cGFuZGluZyB0YWJsZSBleHRlbmQgYW4gZW1wdHkgcmVjb3JkXHJcbiAgICAgICAgdm0uaXNGb2N1cyA9IGZhbHNlO1xyXG4gICAgICAgIHZtLmh0SW5keExpc3QgPSB2bS5jb21wYW55U2VydmljZS5oZWxwVGV4dFNlcXVlbmNlcztcclxuICAgICAgICB2bS5jb2x1bW5EZWYgPSBbXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGxhYmVsOiBcIkNPTVBBTllfTkFNRVwiLFxyXG4gICAgICAgICAgICAgICAgYmluZGluZzogXCJjb21wYW55TmFtZVwiLFxyXG4gICAgICAgICAgICAgICAgd2lkdGg6IFwiMjBcIlxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBsYWJlbDogXCJDSVRZXCIsXHJcbiAgICAgICAgICAgICAgICBiaW5kaW5nOiBcImNpdHlcIixcclxuICAgICAgICAgICAgICAgIHdpZHRoOiBcIjIwXCJcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbGFiZWw6IFwiQ09VTlRSWVwiLFxyXG4gICAgICAgICAgICAgICAgYmluZGluZzogXCJjb3VudHJ5RGlzcGxheVwiLFxyXG4gICAgICAgICAgICAgICAgd2lkdGg6IFwiMjBcIlxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBsYWJlbDogXCJST0xFU1wiLFxyXG4gICAgICAgICAgICAgICAgYmluZGluZzogXCJyb2xlQ29uY2F0XCIsXHJcbiAgICAgICAgICAgICAgICB3aWR0aDogXCIyMFwiXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGxhYmVsOiBcIklNUE9SVEVSSURcIixcclxuICAgICAgICAgICAgICAgIGJpbmRpbmc6IFwiaW1wb3J0ZXJJRFwiLFxyXG4gICAgICAgICAgICAgICAgd2lkdGg6IFwiMjBcIlxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgXTtcclxuXHJcblxyXG5cclxuICAgICAgICB2bS4kb25Jbml0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAvL2xvY2FsIHZhciBmcm9tIGJpbmRpbmdcclxuICAgICAgICAgICAgdm0uYWRkcmVzc0xpc3QgPSB2bS5hZGRyZXNzZXM7XHJcbiAgICAgICAgICAgIHZtLmFsbFJvbGVzU2VsZWN0ZWQgPSB2bS5pc0FsbFJvbGVzU2VsZWN0ZWQoKTtcclxuICAgICAgICAgICAgdm0uaW1wb3J0ZXJoYXNJRCA9IHZtLmlzSW1wb3J0ZXJIYXNJRCgpO1xyXG4gICAgICAgICAgICB1cGRhdGVSb2xlc0NvbmNhdCgpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZtLiRvbkNoYW5nZXMgPSBmdW5jdGlvbiAoY2hhbmdlcykge1xyXG4gICAgICAgICAgICBpZiAoY2hhbmdlcy5hZGRyZXNzZXMgJiYgY2hhbmdlcy5hZGRyZXNzZXMuY3VycmVudFZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICB2bS5hZGRyZXNzTGlzdCA9IGNoYW5nZXMuYWRkcmVzc2VzLmN1cnJlbnRWYWx1ZTtcclxuICAgICAgICAgICAgICAgIHZtLmFsbFJvbGVzU2VsZWN0ZWQgPSB2bS5pc0FsbFJvbGVzU2VsZWN0ZWQoKTtcclxuICAgICAgICAgICAgICAgIHZtLmltcG9ydGVyaGFzSUQgPSB2bS5pc0ltcG9ydGVySGFzSUQoKTtcclxuICAgICAgICAgICAgICAgIHVwZGF0ZVJvbGVzQ29uY2F0KCk7XHJcbiAgICAgICAgICAgICAgICBpZighIHZtLmltcG9ydGVyaGFzSUQgfHwgdm0uaW1wb3J0ZXJoYXNJRCA9PSBcIiBcIil7XHJcbiAgICAgICAgICAgICAgICAgICAgdm0uaXNEZXRhaWxzVmFsaWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdm0udXBkYXRlRXJyb3JTdW1tYXJ5U3RhdGUoKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGNoYW5nZXMuc2hvd0Vycm9yU3VtbWFyeSkge1xyXG4gICAgICAgICAgICAgICAgdm0uc2hvd1N1bW1hcnkgPSBjaGFuZ2VzLnNob3dFcnJvclN1bW1hcnkuY3VycmVudFZhbHVlO1xyXG4gICAgICAgICAgICAgICAgdm0udXBkYXRlRXJyb3JTdW1tYXJ5U3RhdGUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoY2hhbmdlcy5lcnJvclN1bW1hcnlVcGRhdGUpIHtcclxuXHJcbiAgICAgICAgICAgICAgICB2bS51cGRhdGVFcnJvclN1bW1hcnlTdGF0ZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChjaGFuZ2VzLnVzZXJUeXBlKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgdm0uaXNJbiA9IGNoYW5nZXMudXNlclR5cGUuY3VycmVudFZhbHVlO1xyXG4gICAgICAgICAgICAgICAgaWYgKHZtLmlzSW4gPT09IElOVEVSTkFMX1RZUEUpIHtcclxuICAgICAgICAgICAgICAgICAgICB2bS5pc0ludGVybmFsID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB2bS5pc0ludGVybmFsID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGNoYW5nZXMuaXNGaWxlTG9hZGVkKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoY2hhbmdlcy5pc0ZpbGVMb2FkZWQuY3VycmVudFZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdm0ucmVxdWlyZWRGbGFnID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgdm0uaXNEZXRhaWxzVmFsaWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdm0uJHBvc3RMaW5rID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZighdm0uaXNJbnRlcm5hbCkge1xyXG4gICAgICAgICAgICAgICAgdm0uYWRkQWRkcmVzcygpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICAgICAgZnVuY3Rpb24gdXBkYXRlUm9sZXNDb25jYXQoKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXZtLmFkZHJlc3NMaXN0KSByZXR1cm47XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZtLmFkZHJlc3NMaXN0Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgX3NldFJvbGVzQ29uY2F0KHZtLmFkZHJlc3NMaXN0W2ldKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy90aGlzIGlzIG5lZWRlZCBvbiBsb2FkLiBCaXQgb2YgYSBoYWNrXHJcbiAgICAgICAgICAgIC8vVE9ETyBtb3ZlIHRvIGEgc2VydmljZVxyXG4gICAgICAgICAgICBmdW5jdGlvbiBfc2V0Um9sZXNDb25jYXQoYWRkcmVzc01vZGVsKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgYWRkcmVzc1JvbGVzID0gYWRkcmVzc01vZGVsLmFkZHJlc3NSb2xlO1xyXG4gICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IFwiXCI7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGFkZHJlc3NSb2xlcy5tYW51ZmFjdHVyZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSByZXN1bHQgKyBcIiBNRlJcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGFkZHJlc3NSb2xlcy5iaWxsaW5nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gcmVzdWx0ICsgXCIgQklMTFwiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoYWRkcmVzc1JvbGVzLm1haWxpbmcpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSByZXN1bHQgKyBcIiBNQUlMXCJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChhZGRyZXNzUm9sZXMuaW1wb3J0ZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSByZXN1bHQgKyBcIiBJTVBcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYWRkcmVzc01vZGVsLnJvbGVDb25jYXQgPSByZXN1bHQ7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG5cclxuICAgICAgICAgICAgdm0uZGVsZXRlQWRkcmVzcyA9IGZ1bmN0aW9uIChhSUQpIHtcclxuICAgICAgICAgICAgICAgIHZhciBpZHggPSB2bS5hZGRyZXNzTGlzdC5pbmRleE9mKFxyXG4gICAgICAgICAgICAgICAgICAgICRmaWx0ZXIoJ2ZpbHRlcicpKHZtLmFkZHJlc3NMaXN0LCB7YWRkcmVzc0lEOiBhSUR9LCB0cnVlKVswXSk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHZtLmlzSW1wQ29tcGFueU5hbWVVc2VkKHtjb21wYW55TmFtZTogdm0uYWRkcmVzc0xpc3RbaWR4XS5jb21wYW55TmFtZX0pKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHZtLmFkZHJlc3NMaXN0W2lkeF0uaW5Vc2UgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIHZtLmluVXNlRmxhZyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8gdm0uaW5Vc2VGbGFnID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB2bS5hZGRyZXNzTGlzdFtpZHhdLmluVXNlID0gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICAgICAgdm0uYWRkcmVzc0xpc3Quc3BsaWNlKGlkeCwgMSk7XHJcbiAgICAgICAgICAgICAgICB2bS5vblVwZGF0ZSh7bmV3TGlzdDogdm0uYWRkcmVzc0xpc3R9KTtcclxuICAgICAgICAgICAgICAgIHZtLmhhc0FkZHJJbXBDb21wYW55TmFtZSh7YWRkcmVzc0xpc3Q6IHZtLmFkZHJlc3NMaXN0fSk7XHJcbiAgICAgICAgICAgICAgICB2bS5zZWxlY3RSZWNvcmQgPSAwO1xyXG4gICAgICAgICAgICAgICAgdm0uaXNEZXRhaWxzVmFsaWQgPSB0cnVlOyAvL2Nhc2UgdGhhdCBpbmNvbXBsZXRlIHJlY29yZCBpcyBkZWxldGVkXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxSb2xlc1NlbGVjdGVkID0gdm0uaXNBbGxSb2xlc1NlbGVjdGVkKCk7XHJcbiAgICAgICAgICAgICAgICB2bS5pbXBvcnRlcmhhc0lEID0gdm0uaXNJbXBvcnRlckhhc0lEKCk7XHJcbiAgICAgICAgICAgICAgICB2bS5yZXF1aXJlZEZsYWcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIHZtLnJlc2V0Q29sbGFwc2VkID0gIXZtLnJlc2V0Q29sbGFwc2VkO1xyXG4gICAgICAgICAgICAgICAgdm0udXBkYXRlRXJyb3JTdW1tYXJ5U3RhdGUoKTtcclxuICAgICAgICAgICAgICAgIHZtLmFkZHJlc3NMaXN0Rm9ybS4kc2V0UHJpc3RpbmUoKTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHZtLmFkZEFkZHJlc3MgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZGVmYXVsdEFkZHJlc3MgPSB2bS5nZXROZXdBZGRyZXNzKCk7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0QWRkcmVzcy5mb2N1c0NvbXBhbnlOYW1lID0gdm0uaXNGb2N1cztcclxuICAgICAgICAgICAgICAgIGRlZmF1bHRBZGRyZXNzLmluVXNlID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB2bS5hZGRyZXNzTGlzdC5wdXNoKGRlZmF1bHRBZGRyZXNzKTtcclxuICAgICAgICAgICAgICAgIHZtLmlzRGV0YWlsc1ZhbGlkID0gdHJ1ZTsgLy9zZXQgdG8gdHJ1ZSB0byBleGFwbmQ/XHJcbiAgICAgICAgICAgICAgICB2bS5zZWxlY3RSZWNvcmQgPSAodm0uYWRkcmVzc0xpc3QubGVuZ3RoIC0gMSk7XHJcbiAgICAgICAgICAgICAgICB2bS5pc0RldGFpbHNWYWxpZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB2bS5zZXRGb2N1cyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgdm0uaXNGb2N1cyA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdm0uY2FuY2VsRm9jdXMgPSBmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICAgICAgdm0uaXNGb2N1cyA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB2bS5kaXNhYmxlQWRkQWRkcmVzcyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIC8vVE9ETyBkb24ndCBoYXJkIGNvZGUgbGVuZ3RoXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gKCEoIHZtLmlzRGV0YWlsc1ZhbGlkKSlcclxuXHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICB2bS5zZXRWYWxpZCA9IGZ1bmN0aW9uIChkZXRhaWxWYWxpZCkge1xyXG4gICAgICAgICAgICAgICAgdm0uaXNEZXRhaWxzVmFsaWQgPSBkZXRhaWxWYWxpZDtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgdm0ub25VcGRhdGVBZGRyZXNzUmVjb3JkID0gZnVuY3Rpb24gKGFkZHJlc3MpIHtcclxuICAgICAgICAgICAgICAgIHZhciBpZHggPSB2bS5hZGRyZXNzTGlzdC5pbmRleE9mKFxyXG4gICAgICAgICAgICAgICAgICAgICRmaWx0ZXIoJ2ZpbHRlcicpKHZtLmFkZHJlc3NMaXN0LCB7YWRkcmVzc0lEOiBhZGRyZXNzLmFkZHJlc3NJRH0sIHRydWUpWzBdXHJcbiAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgdm0uYWRkcmVzc0xpc3RbaWR4XSA9IGFuZ3VsYXIuY29weShhZGRyZXNzKTtcclxuICAgICAgICAgICAgICAgIHZtLmFsbFJvbGVzU2VsZWN0ZWQgPSB2bS5pc0FsbFJvbGVzU2VsZWN0ZWQoKTtcclxuICAgICAgICAgICAgICAgIHZtLmltcG9ydGVyaGFzSUQgPSB2bS5pc0ltcG9ydGVySGFzSUQoKTtcclxuICAgICAgICAgICAgICAgIGlmKCEgdm0uaW1wb3J0ZXJoYXNJRCB8fCB2bS5pbXBvcnRlcmhhc0lEID09IFwiIFwiKXtcclxuICAgICAgICAgICAgICAgICAgICB2bS5pc0RldGFpbHNWYWxpZCA9ICEgdm0uaXNEZXRhaWxzVmFsaWQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB2bS5yZXF1aXJlZEZsYWcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIHZtLnJlc2V0Q29sbGFwc2VkID0gIXZtLnJlc2V0Q29sbGFwc2VkO1xyXG4gICAgICAgICAgICAgICAgdm0uaGFzQWRkckltcENvbXBhbnlOYW1lKHthZGRyZXNzTGlzdDp2bS5hZGRyZXNzTGlzdH0pO1xyXG4gICAgICAgICAgICAgICAgdm0uYWRkcmVzc0xpc3RGb3JtLiRzZXRQcmlzdGluZSgpO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgLy9UT0RPIG1vdmUgdG8gdGhlIHNlcnZpY2VcclxuICAgICAgICAgICAgdm0uaXNSRVBSb2xlU2VsZWN0ZWQgPSBmdW5jdGlvbiAocm9sZVRvQ2hlY2ssIHJlY29yZElEKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcm9sZXNTZWxlY3RlZCA9IDA7XHJcbiAgICAgICAgICAgICAgICAvL2lmIG5vIHJvbGUgdG8gY2hlY2ssIHNlZSBpZiBhbGwgc2VsZWN0ZWRcclxuICAgICAgICAgICAgICAgIGlmICghdm0uYWRkcmVzc0xpc3QpIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdm0uYWRkcmVzc0xpc3QubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodm0uYWRkcmVzc0xpc3RbaV0uYWRkcmVzc1JvbGVbcm9sZVRvQ2hlY2tdID09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9kb24ndCBjb3VudCBpdCBpZiBpdCBpcyB0aGUgZXhpc3RpbmcgcmVjb3JkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2bS5hZGRyZXNzTGlzdFtpXS5hZGRyZXNzSUQgIT09IHJlY29yZElEKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByb2xlc1NlbGVjdGVkID0gcm9sZXNTZWxlY3RlZCArIDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJvbGVzU2VsZWN0ZWQgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIEBuZ2RvYyBtZXRob2QgZGV0ZXJtaW5lcyB0aGUgc3RhdGUgb2YgdGhlIGxpc3QgZXJyb3JzXHJcbiAgICAgICAgICAgICAqXHJcbiAgICAgICAgICAgICAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgdm0uc2hvd0Vycm9yID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgLy8gQ291bGQgc2hvdyBvbiBub3QgcHJpc3RpbmUmJiF2bS5hZGRyZXNzTGlzdEZvcm0uJHByaXN0aW5lXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gKCF2bS5pc0FsbFJvbGVzU2VsZWN0ZWQoKSk7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICB2bS51cGRhdGVFcnJvclN1bW1hcnlTdGF0ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHZtLnVwZGF0ZVN1bW1hcnkgPSB2bS51cGRhdGVTdW1tYXJ5ICsgMTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiBAbmdkb2MgbWV0aG9kIGRldGVybWluZXMgaWYgYWxsIHRoZSByb2xlcyBoYXZlIGJlZW4gc2VsZWN0ZWQgZm9yIHRoZSBhZGRyZXNzXHJcbiAgICAgICAgICAgICAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgLy9UT0RPIG1vdmUgdG8gYSBzZXJ2aWNlLCBjYW4gdGhpcyBiZSBzaW1wbGlmaWVkP1xyXG4gICAgICAgICAgICB2bS5pc0FsbFJvbGVzU2VsZWN0ZWQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgaW1wb3J0ZXJTZWxlY3RlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgdmFyIG1hbnVTZWxlY3RlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgdmFyIG1haWxTZWxlY3RlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgdmFyIGJpbGxTZWxlY3RlZCA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICghdm0uYWRkcmVzc0xpc3QpIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgIHZhciBjb21wYW55Um9sZSA9IHZtLmNvbXBhbnlTZXJ2aWNlLmNyZWF0ZUFkZHJlc3NSb2xlKCk7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZtLmFkZHJlc3NMaXN0Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG9iaiA9IHZtLmFkZHJlc3NMaXN0W2ldLmFkZHJlc3NSb2xlO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiBvYmopIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGF0dHJOYW1lID0ga2V5O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYXR0clZhbHVlID0gb2JqW2tleV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhdHRyVmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWYgKGF0dHJOYW1lID09PSBcImltcG9ydGVyXCIpIGltcG9ydGVyU2VsZWN0ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGF0dHJOYW1lID09PSBcIm1hbnVmYWN0dXJlclwiKSBtYW51U2VsZWN0ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGF0dHJOYW1lID09PSBcIm1haWxpbmdcIikgbWFpbFNlbGVjdGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhdHRyTmFtZSA9PT0gXCJiaWxsaW5nXCIpIGJpbGxTZWxlY3RlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoIG1hbnVTZWxlY3RlZCAmJiBtYWlsU2VsZWN0ZWQgJiYgYmlsbFNlbGVjdGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB2bS5pc0ltcG9ydGVySGFzSUQgPSBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgICAgICBpZiAoIXZtLmFkZHJlc3NMaXN0KSByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIGlmICghdm0uaXNJbnRlcm5hbCkgcmV0dXJuICB0cnVlO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZtLmFkZHJlc3NMaXN0Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodm0uYWRkcmVzc0xpc3RbaV0uYWRkcmVzc1JvbGUuaW1wb3J0ZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXZtLmFkZHJlc3NMaXN0W2ldLmltcG9ydGVySUQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdm0uaW1wb3J0ZXJoYXNJRD1cIiBcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdm0uc2VsZWN0UmVjb3JkID0gaTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdm0uaXNEZXRhaWxzVmFsaWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiIFwiO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8qZm9yICh2YXIga2V5IGluIG9iaikge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBhdHRyTmFtZSA9IGtleTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgYXR0clZhbHVlID0gb2JqW2tleV07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGF0dHJWYWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYXR0ck5hbWUgPT09IFwiaW1wb3J0ZXJcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZtLmFkZHJlc3NMaXN0W2ldLmltcG9ydGVySUQgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYXNJRCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9Ki9cclxuICAgICAgICAgICAgdm0uaW1wb3J0ZXJoYXNJRD10cnVlO1xyXG4gICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgfVxyXG59KSgpOyIsIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IGRraWx0eSBvbiAxMi8wNy8yMDE2LlxyXG4gKi9cclxuXHJcbihmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgnZmlsZUlPJywgW10pO1xyXG5cclxufSkoKTtcclxuXHJcbihmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcbiAgICAvKipcclxuICAgICAqIEBuZ2RvYyBkaXJlY3RpdmUgLWF0dHJpYnV0ZSBkaXJlY3RpdmUgZm9yIGZpbGUgbG9hZC4gUGxhY2Ugb24gZmlsZSBpbnB1dCBlbGVtZW50XHJcbiAgICAgKiBhdHRyaWJ1dGUgbXVzdCBiZSBib3VuZCB0byBhIGZ1bmN0aW9uIHdpdGggYSBwYXJhbWV0ZXIgbmFtZWQgZmlsZUNvbnRlbnQuIE9uIGxvYWRcclxuICAgICAqIHRoZSBmdW5jdGlvbiB3aWxsIGJlIGNhbGxlZCB0byB1cGRhdGUgdmFsdWVzXHJcbiAgICAgKi9cclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKCdmaWxlSU8nKVxyXG4gICAgICAgIC5kaXJlY3RpdmUoJ2hwZmJGaWxlU2VsZWN0JywgbmdGaWxlU2VsZWN0KTtcclxuXHJcbiAgICBuZ0ZpbGVTZWxlY3QuJGluamVjdCA9IFsnaHBmYkZpbGVQcm9jZXNzaW5nJ107XHJcbiAgICBmdW5jdGlvbiBuZ0ZpbGVTZWxlY3QoaHBmYkZpbGVSZWFkZXIpIHtcclxuICAgICAgICB2YXIgZGlyZWN0aXZlID0ge1xyXG5cclxuICAgICAgICAgICAgbGluazogbGluayxcclxuICAgICAgICAgICAgcmVzdHJpY3Q6ICdBJyxcclxuICAgICAgICAgICAgc2NvcGU6IHtcclxuICAgICAgICAgICAgICAgIGhwZmJGaWxlU2VsZWN0OiBcIiZcIlxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4gZGlyZWN0aXZlO1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBsaW5rKHNjb3BlLCBlbGVtZW50LCBhdHRycykge1xyXG4gICAgICAgICAgICBzY29wZS5yb290VGFnID0gYXR0cnMucm9vdFRhZztcclxuICAgICAgICAgICAgZWxlbWVudC5iaW5kKFwiY2hhbmdlXCIsIGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgICAgICBzY29wZS5maWxlID0gKGUuc3JjRWxlbWVudCB8fCBlLnRhcmdldCkuZmlsZXNbMF07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGhwZmJGaWxlUmVhZGVyLnJlYWRBc0RhdGFUZXh0KHNjb3BlLmZpbGUsIHNjb3BlKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY29wZS5ocGZiRmlsZVNlbGVjdCh7ZmlsZUNvbnRlbnQ6IHJlc3VsdH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG5cclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9XHJcblxyXG4gICAgfVxyXG59KSgpO1xyXG5cclxuKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuICAgIC8qKlxyXG4gICAgICogQG5nZG9jIGNvbXBvbmVudC0gZmlsZVNlbGVjdCBVSSBmb3IgbG9hZGluZyBmaWxlcyBpbnRvIGEgZGF0YSBtb2RlbFxyXG4gICAgICogQHBhcmFtIHVwZGF0ZU1vZGVsUm9vdC0gdGhlIGZ1bmN0aW9uIHRvIGNhbGwgYW5kIHBhc3MgdGhlIEpTT04gbW9kZWxcclxuICAgICAqIEBwYXJhbSByb290RWxlbSAtIHRoZSBuYW1lIG9mIHRoZSByb290IGVsZW1lbnQuIFVzZWQgZm9yIGNvbXBhcmluZyB0byB0aGUgbG9hZGVkIGZpbGVcclxuICAgICAqL1xyXG4gICAgYW5ndWxhci5tb2R1bGUoJ2ZpbGVJTycpLmNvbXBvbmVudCgnaHBmYkZpbGVTZWxlY3QnLCB7XHJcbiAgICAgICAgdGVtcGxhdGVVcmw6ICdhcHAvc2NyaXB0cy9jb21wb25lbnRzL2ZpbGVJTy9maWxlU2VsZWN0XzIwMjAwOTA5XzE1MjUuaHRtbCcsXHJcbiAgICAgICAgY29udHJvbGxlcjogRmlsZVNlbGVjdENvbnRyb2xsZXIsXHJcbiAgICAgICAgYmluZGluZ3M6IHtcclxuICAgICAgICAgICAgdXBkYXRlTW9kZWxSb290OiAnJicsXHJcbiAgICAgICAgICAgIHJvb3RFbGVtOiAnQCcsXHJcbiAgICAgICAgICAgIHZlcnNpb25FeHBlY3RlZDogJ0AnXHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG5cclxuICAgIEZpbGVTZWxlY3RDb250cm9sbGVyLiRpbmplY3QgPSBbJ2hwZmJGaWxlUHJvY2Vzc2luZyddO1xyXG4gICAgZnVuY3Rpb24gRmlsZVNlbGVjdENvbnRyb2xsZXIoaHBmYkZpbGVQcm9jZXNzaW5nKSB7XHJcbiAgICAgICAgdmFyIHZtID0gdGhpcztcclxuICAgICAgICB2bS5maWxlVHlwZXMgPSBcIi54bWwsIC5oY3NjXCI7XHJcbiAgICAgICAgdm0ubW9kZWxDYWxsYmFjayA9IGZ1bmN0aW9uIChmaWxlQ29udGVudCkge1xyXG4gICAgICAgICAgICB2bS5zdGF0dXMgPSBcIlwiO1xyXG4gICAgICAgICAgICBpZiAoZmlsZUNvbnRlbnQgJiYgZmlsZUNvbnRlbnQuanNvblJlc3VsdCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHZlcnNpb25BcnJheSA9IGZpbGVDb250ZW50Lmpzb25SZXN1bHRbdm0ucm9vdEVsZW1dWydzb2Z0d2FyZV92ZXJzaW9uJ10uc3BsaXQoJy4nKTtcclxuICAgICAgICAgICAgICAgIGlmICh2bS52ZXJzaW9uRXhwZWN0ZWQgJiYgdm0udmVyc2lvbkV4cGVjdGVkICE9PSB2ZXJzaW9uQXJyYXlbMF0pIHtcclxuICAgICAgICAgICAgICAgICAgICBmaWxlQ29udGVudCA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgdm0uc3RhdHVzID0gXCJNU0dfRVJSX0ZJTEVfVkVSU0lPTlwiO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB2bS5zdGF0dXMgPSBmaWxlQ29udGVudC5tZXNzYWdlcztcclxuICAgICAgICAgICAgICAgICAgICB2bS51cGRhdGVNb2RlbFJvb3Qoe2ZpbGVDb250ZW50OiBmaWxlQ29udGVudH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdm0uc3RhdHVzID0gZmlsZUNvbnRlbnQubWVzc2FnZXM7XHJcbiAgICAgICAgICAgICAgICB2bS51cGRhdGVNb2RlbFJvb3Qoe2ZpbGVDb250ZW50OiBmaWxlQ29udGVudH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudChmaWxlTG9hZCkudHJpZ2dlcignZm9jdXMnKTtcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG59KSgpO1xyXG5cclxuKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBuZ2RvYyBjb21wb25lbnQgLSB0aGUgVUkgY29tcG9uZW50IGZvciBzYXZpbmcgYSBkYXRhIG1vZGVsXHJcbiAgICAgKiBAcGFyYW0ganNvblRvU2F2ZS0gdGhlIEpTT04gZGF0YSBtb2RlbCB0byBzYXZlXHJcbiAgICAgKiBAcGFyYW0gIHJvb3RUYWcgLSB0aGUgc3RyaW5nIG5hbWUgb2YgdGhlIHJvb3QgdGFnLiBOZWVkZWQgZm9yIGxvb2t1cHNcclxuICAgICAqIEBwYXJhbSBzYXZlVHlwZS0gdmFsaWQgdmFsdWVzIGFyZSAnanNvbicgb3IgJ3htbCdcclxuICAgICAqIEBwYXJhbSBidXR0b25MYWJlbCAtdGhlIGxhYmVsIGZvciB0aGUgc2F2ZSBidXR0b25cclxuICAgICAqL1xyXG4gICAgYW5ndWxhci5tb2R1bGUoJ2ZpbGVJTycpLmNvbXBvbmVudCgnaHBmYkZpbGVTYXZlJywge1xyXG4gICAgICAgIHRlbXBsYXRlVXJsOiAnYXBwL3NjcmlwdHMvY29tcG9uZW50cy9maWxlSU8vZmlsZVNhdmVfMjAyMDA5MDlfMTUyNS5odG1sJyxcclxuICAgICAgICBjb250cm9sbGVyOiBGaWxlV3JpdGVDb250cm9sbGVyLFxyXG4gICAgICAgIGJpbmRpbmdzOiB7XHJcbiAgICAgICAgICAgIGpzb25Ub1NhdmU6ICc8JyxcclxuICAgICAgICAgICAgcm9vdFRhZzogJ0AnLFxyXG4gICAgICAgICAgICBzYXZlVHlwZTogJ0AnLFxyXG4gICAgICAgICAgICBidXR0b25MYWJlbDogJ0AnLFxyXG4gICAgICAgICAgICBidXR0b25EaXNhYmxlZDonQCdcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcblxyXG4gICAgRmlsZVdyaXRlQ29udHJvbGxlci4kaW5qZWN0ID0gWydocGZiRmlsZVByb2Nlc3NpbmcnXTtcclxuICAgIC8qKlxyXG4gICAgICogQG5nZG9jIGNvbnRyb2xsZXIgLSBjb250cm9sbGVyIGZvciBmaWxlIHdyaXRpbmdcclxuICAgICAqIEBwYXJhbSBocGZiRmlsZVByb2Nlc3NpbmcgLSB0aGUgc2VydmljZSB0aGF0IGRvZXMgYWxsIHRoZSBmaWxlIGNyZWF0aW9uIGFuZCB2YWxpZGF0aW9uXHJcbiAgICAgKiBAY29uc3RydWN0ZXIgX2luaXQtIGluaXRpYWxpemVzIHN0YXRlIGFzIG5lZWRlZC4gVXBkYXRlcyBidXR0b24gZGlzYWJsZWRcclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gRmlsZVdyaXRlQ29udHJvbGxlcihocGZiRmlsZVByb2Nlc3NpbmcpIHtcclxuXHJcbiAgICAgICAgdmFyIHZtID0gdGhpcztcclxuICAgICAgICB2bS4kb25Jbml0ID1faW5pdDtcclxuICAgICAgICB2bS5nZW5lcmF0ZSA9IF9nZW5lcmF0ZUZpbGU7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIF9nZW5lcmF0ZUZpbGUoKXtcclxuICAgICAgICAgICAgaWYgKHZtLnNhdmVUeXBlLnRvVXBwZXJDYXNlKCkgPT09IFwiSlNPTlwiKSB7XHJcbiAgICAgICAgICAgICAgICBocGZiRmlsZVByb2Nlc3Npbmcud3JpdGVBc0pzb24odm0uanNvblRvU2F2ZSwgdm0uZmlsZU5hbWUsIHZtLnJvb3RUYWcpO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHZtLnNhdmVUeXBlLnRvVXBwZXJDYXNlKCkgPT09IFwiWE1MXCIpIHtcclxuICAgICAgICAgICAgICAgIGhwZmJGaWxlUHJvY2Vzc2luZy53cml0ZUFzWG1sKHZtLmpzb25Ub1NhdmUsIHZtLmZpbGVOYW1lLCB2bS5yb290VGFnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBmdW5jdGlvbiBfaW5pdCgpe1xyXG4gICAgICAgICAgIC8vZGlzYWJsZWQgc3RhdGVcclxuICAgICAgICAgICAgaWYoIXZtLmJ1dHRvbkRpc2FibGVkKXtcclxuICAgICAgICAgICAgICAgdm0uYnV0dG9uRGlzYWJsZWQ9ZmFsc2U7XHJcbiAgICAgICAgICAgIH1lbHNlIGlmKHZtLmJ1dHRvbkRpc2FibGVkLnRvTG93ZXJDYXNlKCk9PT1cInRydWVcIil7XHJcbiAgICAgICAgICAgICAgICB2bS5idXR0b25EaXNhYmxlZD10cnVlXHJcbiAgICAgICAgICAgIH1lbHNlIGlmKHZtLmJ1dHRvbkRpc2FibGVkLnRvTG93ZXJDYXNlKCk9PT1cImZhbHNlXCIpe1xyXG4gICAgICAgICAgICAgICAgdm0uYnV0dG9uRGlzYWJsZWQ9ZmFsc2U7XHJcbiAgICAgICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICAgICAgdm0uYnV0dG9uRGlzYWJsZWQ9ZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0pKCk7XHJcblxyXG5cclxuKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuICAgIC8qKlxyXG4gICAgICogQG5nZG9jIHNlcnZpY2UtIHByb2Nlc3NlcyBhbGwgZmlsZXMgZm9yIGxvYWQgYW5kIHdyaXRpbmdcclxuICAgICAqL1xyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ2ZpbGVJTycpXHJcbiAgICAgICAgLmZhY3RvcnkoJ2hwZmJGaWxlUHJvY2Vzc2luZycsIGZpbGVSZWFkZXIpO1xyXG5cclxuICAgIGZpbGVSZWFkZXIuJGluamVjdCA9IFsnJHEnXTtcclxuICAgIC8qIEBuZ0luamVjdCAqL1xyXG4gICAgZnVuY3Rpb24gZmlsZVJlYWRlcigkcSkge1xyXG4gICAgICAgIC8vY29uc3RhbnRzIHVzZWQgZm9yIG1lc3NhZ2luZ1xyXG4gICAgICAgIHZhciBtc2dfc3VjY2VzcyA9IFwiTVNHX1NVQ0NFU1NfTE9BRFwiOyAvL2xvYWQgd2FzIGEgc3VjY2Vzc1xyXG4gICAgICAgIHZhciBtc2dfZXJyX2pzb25wYXJzZSA9IFwiTVNHX0VSUl9KU09OUEFSU0VcIjsgLy9qc29uIHBhcnNpbmcgZXJyb3JcclxuICAgICAgICB2YXIgbXNnX2Vycl94bWxwYXJzZSA9IFwiTVNHX0VSUl9YTUxQQVJTRVwiOyAvL3htbCBwYXJzaW5nIGVycm9yXHJcbiAgICAgICAgdmFyIG1zZ19lcnJfbG9hZCA9IFwiTVNHX0VSUl9GSUxFX0xPQURcIjsgLy9maWxlIGxvYWQgZXJyb3JcclxuICAgICAgICB2YXIgbXNnX2Vycl9maWxlVHlwZSA9IFwiTVNHX0VSUl9GSUxFX1RZUEVcIjsgLy9maWxlIHR5cGUgZXJyb3JcclxuICAgICAgICB2YXIgbXNnX2Vycl9mb3JtVHlwZSA9IFwiTVNHX0VSUl9GT1JNX1RZUEVcIjsgLy8gdmFsaWQganNvbiBidXQgaW5jb3JyZWN0IHJvb3QgdGFnXHJcbiAgICAgICAgdmFyIG1zZ19lcnJfY2hlY2tzdW1fY29tcGFyZUZhaWwgPSBcIk1TR19FUlJfQ0hFQ0tTVU1fRkFJTFwiO1xyXG4gICAgICAgIHZhciBkcmFmdF9maWxlX3R5cGUgPSBcImhjc2NcIjsgLy8gdHlwZSBvZiBmaWxlIHN1ZmZpeCBmb3IgSlNPTiBmaWxlcy4gQ2FuIGNoYW5nZSB0byBwcm9jZXNzIG90aGVyIHR5cGVzXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQG5nT2JqZWN0OiB1c2VkIHRvIHN0b3JlIHRoZSBqc29uUmVzdWx0IGFuZCBhbnkgbWVzc2FnZXNcclxuICAgICAgICAgKiBAdHlwZSB7e2pzb25SZXN1bHQ6IHN0cmluZywgbWVzc2FnZXM6IHN0cmluZ319XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdmFyIGNvbnZlcnRSZXN1bHQgPSB7XHJcbiAgICAgICAgICAgIGpzb25SZXN1bHQ6IFwiXCIsXHJcbiAgICAgICAgICAgIG1lc3NhZ2VzOiBcIlwiXHJcbiAgICAgICAgfTtcclxuICAgICAgICB2YXIgc2VydmljZSA9IHtcclxuICAgICAgICAgICAgcmVhZEFzRGF0YVRleHQ6IHJlYWRBc0RhdGFUZXh0LFxyXG4gICAgICAgICAgICB3cml0ZUFzSnNvbjoganNvblRvRmlsZSxcclxuICAgICAgICAgICAgd3JpdGVBc1htbDogeG1sVG9GaWxlXHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4gc2VydmljZTtcclxuXHJcbiAgICAgICAgLy8vLy8vLy8vLy8vLy8vL1xyXG4gICAgICAgIGZ1bmN0aW9uIG9uTG9hZChyZWFkZXIsIGRlZmVycmVkLCBzY29wZSwgZmlsZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgc2NvcGUuJGFwcGx5KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZmlsZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3BsaXRGaWxlID0gZmlsZS5uYW1lLnNwbGl0KCcuJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmaWxlVHlwZSA9IHNwbGl0RmlsZVtzcGxpdEZpbGUubGVuZ3RoIC0gMV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgoZmlsZVR5cGUudG9Mb3dlckNhc2UoKSkgPT0gZHJhZnRfZmlsZV90eXBlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb252ZXJ0VG9KU09OT2JqZWN0cyhyZWFkZXIsIHNjb3BlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoZWNrUm9vdFRhZ01hdGNoKHJlYWRlciwgc2NvcGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogQXMgcGVyIG1lZXRpbmcgb2Ygb2N0IDIxXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVhZGVyLnBhcnNlUmVzdWx0Lmpzb25SZXN1bHQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21wYXJlSGFzaEluSnNvbihyZWFkZXIsIHNjb3BlLnJvb3RUYWcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSovXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoKGZpbGVUeXBlLnRvTG93ZXJDYXNlKCkgPT09IFwieG1sXCIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb252ZXJ0WE1MVG9KU09OT2JqZWN0cyhyZWFkZXIsIHNjb3BlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoZWNrUm9vdFRhZ01hdGNoKHJlYWRlciwgc2NvcGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogQXMgcGVyIG1lZXRpbmcgb2Ygb2N0IDIxXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVhZGVyLnBhcnNlUmVzdWx0Lmpzb25SZXN1bHQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21wYXJlSGFzaEluWE1MKHJlYWRlciwgc2NvcGUpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9Ki9cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb252ZXJ0UmVzdWx0LnBhcnNlUmVzdWx0ID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnZlcnRSZXN1bHQubWVzc2FnZXMgPSBtc2dfZXJyX2ZpbGVUeXBlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVhZGVyLnBhcnNlUmVzdWx0ID0gY29udmVydFJlc3VsdDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKHJlYWRlci5wYXJzZVJlc3VsdCk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gb25FcnJvcihyZWFkZXIsIGRlZmVycmVkLCBzY29wZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgc2NvcGUuJGFwcGx5KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAvL1RPRE8gbmVlZCB0byByZXZpZXcgcmVqZWN0IGNhc2VcclxuICAgICAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZWplY3QobXNnX2Vycl9sb2FkKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZ1bmN0aW9uIGdldFJlYWRlcihkZWZlcnJlZCwgc2NvcGUsIGZpbGUpIHtcclxuICAgICAgICAgICAgdmFyIHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7XHJcbiAgICAgICAgICAgIC8vZXh0ZW5kIHRoZSBmaWxlUmVhZGVyIG9iamVjdFxyXG4gICAgICAgICAgICByZWFkZXIub25sb2FkID0gb25Mb2FkKHJlYWRlciwgZGVmZXJyZWQsIHNjb3BlLCBmaWxlKTtcclxuICAgICAgICAgICAgcmVhZGVyLm9uRXJyb3IgPSBvbkVycm9yKHJlYWRlciwgZGVmZXJyZWQsIHNjb3BlKTtcclxuICAgICAgICAgICAgcmVhZGVyLnBhcnNlUmVzdWx0ID0gbnVsbDtcclxuICAgICAgICAgICAgcmV0dXJuIHJlYWRlcjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHJlYWRBc0RhdGFUZXh0KGZpbGUsIHNjb3BlKSB7XHJcbiAgICAgICAgICAgIHZhciBkZWZlcnJlZCA9ICRxLmRlZmVyKCk7XHJcbiAgICAgICAgICAgIHZhciByZWFkZXIgPSBnZXRSZWFkZXIoZGVmZXJyZWQsIHNjb3BlLCBmaWxlKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChmaWxlKSB7XHJcbiAgICAgICAgICAgICAgICByZWFkZXIucmVhZEFzVGV4dChmaWxlKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJlYWRlci5wYXJzZVJlc3VsdCA9IGNvbnZlcnRSZXN1bHQ7XHJcbiAgICAgICAgICAgICAgICByZWFkZXIucGFyc2VSZXN1bHQubWVzc2FnZXMgPSBcIlwiO1xyXG4gICAgICAgICAgICAgICAgcmVhZGVyLnBhcnNlUmVzdWx0Lmpzb25SZXN1bHQgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgLy9jYXNlIG9mIGNsZWFyaW5nIG91dCB0aGUgbWVzc2FnZXMgYXMgbm8gZmlsZSB3YXMgc2VsZWN0ZWRcclxuICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUocmVhZGVyLnBhcnNlUmVzdWx0KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGNvbnZlcnRUb0pTT05PYmplY3RzKHJlYWRlciwgc2NvcGUpIHtcclxuXHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICBjb252ZXJ0UmVzdWx0Lmpzb25SZXN1bHQgPSBKU09OLnBhcnNlKHJlYWRlci5yZXN1bHQpO1xyXG4gICAgICAgICAgICAgICAgY29udmVydFJlc3VsdC5qc29uUmVzdWx0W3Njb3BlLnJvb3RUYWddLmltcG9ydEZpbGVUeXBlID0gZHJhZnRfZmlsZV90eXBlO1xyXG4gICAgICAgICAgICAgICAgY29udmVydFJlc3VsdC5tZXNzYWdlcyA9IG1zZ19zdWNjZXNzO1xyXG4gICAgICAgICAgICAgICAgcmVhZGVyLnBhcnNlUmVzdWx0ID0gY29udmVydFJlc3VsdDtcclxuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICAgICAgY29udmVydFJlc3VsdC5qc29uUmVzdWx0ID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIGNvbnZlcnRSZXN1bHQubWVzc2FnZXMgPSBtc2dfZXJyX2pzb25wYXJzZTtcclxuICAgICAgICAgICAgICAgIHJlYWRlci5wYXJzZVJlc3VsdCA9IGNvbnZlcnRSZXN1bHQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBuZ2RvYyBtZXRob2QgY29udmVydHMgYSB2YWxpZCBYTUwgZmlsZSB0byBhIEpTT04gb2JqZWN0XHJcbiAgICAgICAgICogQHBhcmFtIHJlYWRlci0gdGhlIGV4dGVuZGVkIGZpbGUgcmVhZGVyIG9iamVjdFxyXG4gICAgICAgICAqIEByZXR1cm5zIG51bGxcclxuICAgICAgICAgKi9cclxuICAgICAgICBmdW5jdGlvbiBjb252ZXJ0WE1MVG9KU09OT2JqZWN0cyhyZWFkZXIsIHNjb3BlKSB7XHJcbiAgICAgICAgICAgIHZhciB4bWxDb25maWcgPSB7XHJcbiAgICAgICAgICAgICAgICBlc2NhcGVNb2RlOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgZW1wdHlOb2RlRm9ybTogXCJ0ZXh0XCIsXHJcbiAgICAgICAgICAgICAgICB1c2VEb3VibGVRdW90ZXM6IHRydWVcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgdmFyIHhtbENvbnZlcnRlciA9IG5ldyBYMkpTKHhtbENvbmZpZyk7XHJcbiAgICAgICAgICAgIC8vY29udmVydHMgWE1MIGFzIGEgc3RyaW5nIHRvIGEganNvblxyXG4gICAgICAgICAgICBjb252ZXJ0UmVzdWx0Lmpzb25SZXN1bHQgPSB4bWxDb252ZXJ0ZXIueG1sX3N0cjJqc29uKHJlYWRlci5yZXN1bHQpO1xyXG5cclxuICAgICAgICAgICAgaWYgKCFjb252ZXJ0UmVzdWx0Lmpzb25SZXN1bHQgfHwgIWNvbnZlcnRSZXN1bHQuanNvblJlc3VsdFtzY29wZS5yb290VGFnXSkge1xyXG4gICAgICAgICAgICAgICAgY29udmVydFJlc3VsdC5tZXNzYWdlcyA9IG1zZ19lcnJfeG1scGFyc2U7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjb252ZXJ0UmVzdWx0Lm1lc3NhZ2VzID0gbXNnX3N1Y2Nlc3M7XHJcbiAgICAgICAgICAgICAgICBjb252ZXJ0UmVzdWx0Lmpzb25SZXN1bHRbc2NvcGUucm9vdFRhZ10uaW1wb3J0RmlsZVR5cGUgPSBcInhtbFwiO1xyXG5cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZWFkZXIucGFyc2VSZXN1bHQgPSBjb252ZXJ0UmVzdWx0O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gY29udmVydEpTT05PYmplY3RzVG9YTUwoanNvbk9iaikge1xyXG4gICAgICAgICAgICB2YXIgeG1sQ29uZmlnID0ge1xyXG4gICAgICAgICAgICAgICAgZXNjYXBlTW9kZTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIGVtcHR5Tm9kZUZvcm06IFwidGV4dFwiLFxyXG4gICAgICAgICAgICAgICAgdXNlRG91YmxlUXVvdGVzOiB0cnVlXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHZhciBqc29uQ29udmVydGVyID0gbmV3IFgySlMoeG1sQ29uZmlnKTtcclxuICAgICAgICAgICAgdmFyIHhtbFJlc3VsdCA9IG51bGw7XHJcbiAgICAgICAgICAgIC8vY29udmVydHMgWE1MIGFzIGEgc3RyaW5nIHRvIGEganNvblxyXG4gICAgICAgICAgICB4bWxSZXN1bHQgPSBqc29uQ29udmVydGVyLmpzb24yeG1sX3N0cihqc29uT2JqKTtcclxuICAgICAgICAgICAgcmV0dXJuICh4bWxSZXN1bHQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQG5nRG9jIG1ldGhvZCAtIGNoZWNrcyBpZiB0aGUgcm9vdCB0YWcgbWF0Y2hlcyB0aGUgZXhwZWN0ZWQuIElmIGl0IGRvZXNuJ3QgbWF0Y2gsIGNsZWFycyB0aGUgZGF0YVxyXG4gICAgICAgICAqIGFuZCBzZXRzIHRoZSBlcnJvciBtZXNzYWdlXHJcbiAgICAgICAgICogQHBhcmFtIHJlYWRlciB0aGUgZmlsZSByZWFkZXIgb2JqZWN0IHRoYXQgaXMgdXNlZCB0byByZWFkIGluIGEgZmlsZVxyXG4gICAgICAgICAqIEBwYXJhbSBzY29wZSAtIHNjb3BlIG9mIHRoZSBzZXJ2aWNlXHJcbiAgICAgICAgICogIEByZXR1cm5zIG51bGxcclxuICAgICAgICAgKi9cclxuICAgICAgICBmdW5jdGlvbiBjaGVja1Jvb3RUYWdNYXRjaChyZWFkZXIsIHNjb3BlKSB7XHJcbiAgICAgICAgICAgIGlmICghc2NvcGUucm9vdFRhZyB8fCAhcmVhZGVyLnBhcnNlUmVzdWx0IHx8ICFyZWFkZXIucGFyc2VSZXN1bHQuanNvblJlc3VsdCkgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgaWYgKCFyZWFkZXIucGFyc2VSZXN1bHQuanNvblJlc3VsdFtzY29wZS5yb290VGFnXSkge1xyXG4gICAgICAgICAgICAgICAgcmVhZGVyLnBhcnNlUmVzdWx0Lmpzb25SZXN1bHQgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgcmVhZGVyLnBhcnNlUmVzdWx0Lm1lc3NhZ2VzID0gbXNnX2Vycl9mb3JtVHlwZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQG5nZG9jIG1ldGhvZCAtIGluc2VydHMgYSBoYXNoIHZhbHVlIGludG8gYSBqc29uIG9iamVjdC4gSGFzaCBpcyBjYWxjdWxhdGVkIG9uIHRoZSBlbnRpcmUganNvblxyXG4gICAgICAgICAqIEBwYXJhbSBqc29uT2JqLSB0aGUganNvbiBvYmplY3QgdG8gaGFzaFxyXG4gICAgICAgICAqIEBwYXJhbSByb290VGFnLSB0aGUgcm9vdCB0YWcgb2YgdGhlIGpzb25PYmplY3QuIFVzZWQgZm9yIGxvb2t1cHNcclxuICAgICAgICAgKi9cclxuICAgICAgICBmdW5jdGlvbiBpbnNlcnRIYXNoSW5Kc29uKGpzb25PYmosIHJvb3RUYWcpIHtcclxuICAgICAgICAgICAganNvbk9ialtyb290VGFnXS5kYXRhX2NoZWNrc3VtID0gXCJcIjtcclxuICAgICAgICAgICAgdmFyIGhhc2ggPSBDcnlwdG9KUy5TSEEyNTYoSlNPTi5zdHJpbmdpZnkoanNvbk9iaikpO1xyXG4gICAgICAgICAgICBqc29uT2JqW3Jvb3RUYWddLmRhdGFfY2hlY2tzdW0gPSBoYXNoLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBuZ2RvYyBtZXRob2QgLSBjb21wYXJlcyB0aGUgaGFzaCBpbiB0aGUgSlNPTiB0byB0aGUgY2FsY3VsYXRlZCBKU09OIGhhc2hcclxuICAgICAgICAgKiBAcGFyYW0gcmVhZGVyLSB0aGUgcmVhZGVyIGV4dGVuZGVkIG9iamVjdCB0aGF0IGNvbnRhaW5zIHRoZSBqc29uXHJcbiAgICAgICAgICogQHBhcmFtIHJvb3RUYWctIHRoZSByb290IHRhZyBvZiB0aGUganNvbk9iamVjdC4gVXNlZCBmb3IgbG9va3Vwc1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGZ1bmN0aW9uIGNvbXBhcmVIYXNoSW5Kc29uKHJlYWRlciwgcm9vdFRhZykge1xyXG4gICAgICAgICAgICB2YXIgY3VycmVudFRhZ1ZhbHVlID0gcmVhZGVyLnBhcnNlUmVzdWx0Lmpzb25SZXN1bHRbcm9vdFRhZ10uZGF0YV9jaGVja3N1bTtcclxuICAgICAgICAgICAgcmVhZGVyLnBhcnNlUmVzdWx0Lmpzb25SZXN1bHRbcm9vdFRhZ10uZGF0YV9jaGVja3N1bSA9IFwiXCI7XHJcbiAgICAgICAgICAgIHZhciBnZW5lcmF0ZWRIYXNoID0gQ3J5cHRvSlMuU0hBMjU2KEpTT04uc3RyaW5naWZ5KHJlYWRlci5wYXJzZVJlc3VsdC5qc29uUmVzdWx0KSk7XHJcbiAgICAgICAgICAgIGlmIChjdXJyZW50VGFnVmFsdWUgIT09IGdlbmVyYXRlZEhhc2gudG9TdHJpbmcoKSkge1xyXG4gICAgICAgICAgICAgICAgcmVhZGVyLnBhcnNlUmVzdWx0Lmpzb25SZXN1bHQgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgcmVhZGVyLnBhcnNlUmVzdWx0Lm1lc3NhZ2VzID0gbXNnX2Vycl9jaGVja3N1bV9jb21wYXJlRmFpbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAbmdkb2MgbWV0aG9kIC0gY29tcGFyZXMgdGhlIGhhc2ggaW4gdGhlIFhNTCB0byB0aGUgY2FsY3VsYXRlZCBYTUwgaGFzaFxyXG4gICAgICAgICAqIEBwYXJhbSByZWFkZXItIHRoZSByZWFkZXIgZXh0ZW5kZWQgb2JqZWN0IHRoYXQgY29udGFpbnMgdGhlIGpzb25cclxuICAgICAgICAgKiBAcGFyYW0gcm9vdFRhZy0gdGhlIHJvb3QgdGFnIG9mIHRoZSBqc29uT2JqZWN0LiBVc2VkIGZvciBsb29rdXBzXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZnVuY3Rpb24gY29tcGFyZUhhc2hJblhNTChyZWFkZXIsIHNjb3BlKSB7XHJcbiAgICAgICAgICAgIHZhciBjdXJyZW50VGFnVmFsdWUgPSByZWFkZXIucGFyc2VSZXN1bHQuanNvblJlc3VsdFtzY29wZS5yb290VGFnXS5kYXRhX2NoZWNrc3VtO1xyXG4gICAgICAgICAgICB2YXIgY29udmVydGVkVG9Kc29uPSByZWFkZXIucGFyc2VSZXN1bHQuanNvblJlc3VsdDtcclxuICAgICAgICAgICAvL3JlbW92ZSBjaGVja3N1bVxyXG4gICAgICAgICAgICBjb252ZXJ0ZWRUb0pzb25bc2NvcGUucm9vdFRhZ10uZGF0YV9jaGVja3N1bSA9IFwiXCI7XHJcbiAgICAgICAgICAgIC8vY29udmVydCB0byB4bWxcclxuICAgICAgICAgICAgdmFyIHhtbFJlc3VsdCA9IGNvbnZlcnRKU09OT2JqZWN0c1RvWE1MKGNvbnZlcnRlZFRvSnNvbik7XHJcbiAgICAgICAgICAgIHNjb3BlLmhhc2ggPSBDcnlwdG9KUy5TSEEyNTYoeG1sUmVzdWx0KTtcclxuICAgICAgICAgICAgaWYgKGN1cnJlbnRUYWdWYWx1ZSAhPT0gc2NvcGUuaGFzaC50b1N0cmluZygpKSB7XHJcbiAgICAgICAgICAgICAgICByZWFkZXIucGFyc2VSZXN1bHQuanNvblJlc3VsdCA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICByZWFkZXIucGFyc2VSZXN1bHQubWVzc2FnZXMgPSBtc2dfZXJyX2NoZWNrc3VtX2NvbXBhcmVGYWlsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBqc29uVG9GaWxlKGpzb25PYmosIGZpbGVOYW1lLCByb290VGFnKSB7XHJcbiAgICAgICAgICAgIGlmICghanNvbk9iaikgcmV0dXJuO1xyXG4gICAgICAgICAgICAvL2luc2VydEhhc2hJbkpzb24oanNvbk9iaiwgcm9vdFRhZykgYXMgcGVyIE9jdCAyMSBtZWV0aW5nIG5vIGNoZWNrc3VtXHJcbiAgICAgICAgICAgIHZhciBtYWtlU3RyU2F2ZSA9IEpTT04uc3RyaW5naWZ5KGpzb25PYmopO1xyXG4gICAgICAgICAgICB2YXIgYmxvYiA9IG5ldyBCbG9iKFttYWtlU3RyU2F2ZV0sIHt0eXBlOiBcInRleHQvcGxhaW47Y2hhcnNldD11dGYtOFwifSk7XHJcbiAgICAgICAgICAgIGlmICghZmlsZU5hbWUpIHtcclxuICAgICAgICAgICAgICAgIGZpbGVOYW1lID0gXCJocGZiRHJhZnQuXCIgKyBkcmFmdF9maWxlX3R5cGU7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBmaWxlTmFtZSArPSBcIi5cIiArIGRyYWZ0X2ZpbGVfdHlwZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBzYXZlQXMoYmxvYiwgZmlsZU5hbWUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAcGFyYW0ganNvbk9ialxyXG4gICAgICAgICAqIEBwYXJhbSBmaWxlTmFtZVxyXG4gICAgICAgICAqIEBwYXJhbSByb290VGFnXHJcbiAgICAgICAgICogQHBhcmFtIHhzbE5hbWUgLSAob3B0aW9uYWwpLiBUaGUgc3R5bGVzaGVldCBuYW1lLiBGb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkgZGVmYXVsdHMgdG8gUkVQX0NvbWJpbmVkXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZnVuY3Rpb24geG1sVG9GaWxlKGpzb25PYmosIGZpbGVOYW1lLCByb290VGFnLCB4c2xOYW1lKSB7XHJcbiAgICAgICAgICAgIGlmICghanNvbk9iaikgcmV0dXJuO1xyXG4gICAgICAgICAgICAvL0FzIHBlciBtZWV0aW5nIG9mIE9jdCAyMSwgaWdub3JlIGNoZWNrc3VtXHJcbiAgICAgICAgICAgIC8vY2xlYXIgb3V0IGFueSBwcmV2aW91cyB2YWx1ZSBpZiBpdCBleGlzdHNcclxuICAgICAgICAgICAgLy9qc29uT2JqW3Jvb3RUYWddLmRhdGFfY2hlY2tzdW0gPSBcIlwiO1xyXG4gICAgICAgICAgICB2YXIgeG1sUmVzdWx0ID0gY29udmVydEpTT05PYmplY3RzVG9YTUwoanNvbk9iaik7XHJcbiAgICAgICAgICAgIC8vVE9ETyB0aGlzIG5lZWRzIHRvIGJlIGNvbmZpZ3VyYWJsZVxyXG4gICAgICAgICAgICBpZigheHNsTmFtZSkge1xyXG4gICAgICAgICAgICAgICAgeG1sUmVzdWx0ID0gJzw/eG1sIHZlcnNpb249XCIxLjBcIiBlbmNvZGluZz1cIlVURi04XCI/PicgKyAnPD94bWwtc3R5bGVzaGVldCAgdHlwZT1cInRleHQveHNsXCIgaHJlZj1cIlJFUF9Db21iaW5lZC54c2xcIj8+JyArIHhtbFJlc3VsdDtcclxuICAgICAgICAgICAgfWVsc2V7XHJcblxyXG4gICAgICAgICAgICAgICAgeG1sUmVzdWx0ID0gJzw/eG1sIHZlcnNpb249XCIxLjBcIiBlbmNvZGluZz1cIlVURi04XCI/PicgKyAnPD94bWwtc3R5bGVzaGVldCAgdHlwZT1cInRleHQveHNsXCIgaHJlZj1cIicreHNsTmFtZSsnXCI/PicgKyB4bWxSZXN1bHQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAvLyB2YXIgaGFzaCA9IENyeXB0b0pTLlNIQTI1Nih4bWxSZXN1bHQpO1xyXG4gICAgICAgICAgICAvL2pzb25PYmpbcm9vdFRhZ10uZGF0YV9jaGVja3N1bSA9IGhhc2gudG9TdHJpbmcoKTtcclxuICAgICAgICAgICAgLy9yZWdlbmVyYXRlIHRoZSB4bWxcclxuICAgICAgICAgICAgLy94bWxSZXN1bHQgPSBjb252ZXJ0SlNPTk9iamVjdHNUb1hNTChqc29uT2JqKVxyXG4gICAgICAgICAgICB2YXIgYmxvYiA9IG5ldyBCbG9iKFt4bWxSZXN1bHRdLCB7dHlwZTogXCJ0ZXh0L3BsYWluO2NoYXJzZXQ9dXRmLThcIn0pO1xyXG4gICAgICAgICAgICBpZiAoIWZpbGVOYW1lKSB7XHJcbiAgICAgICAgICAgICAgICBmaWxlTmFtZSA9IFwiaHBmYlhNTC54bWxcIlxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgZmlsZU5hbWUgKz0gXCIueG1sXCI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgc2F2ZUFzKGJsb2IsIGZpbGVOYW1lKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0pKCk7XHJcblxyXG5cclxuXHJcblxyXG4iLCIvKipcclxuICogQ3JlYXRlZCBieSBka2lsdHkgb24gOC82LzIwMTYuXHJcbiAqL1xyXG4oZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKCdleHBhbmRpbmdUYWJsZScsIFtdKVxyXG59KSgpO1xyXG5cclxuKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgnZXhwYW5kaW5nVGFibGUnKVxyXG4gICAgICAgIC5jb21wb25lbnQoJ2NtcEV4cGFuZGluZ1RhYmxlJywge1xyXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2FwcC9zY3JpcHRzL2NvbXBvbmVudHMvZXhwYW5kaW5nVGFibGUvdHBsLWV4cGFuZGluZy10YWJsZV8yMDIwMDkwOV8xNTI1Lmh0bWwnLFxyXG4gICAgICAgICAgICBjb250cm9sbGVyOiBleHBhbmRpbmdUYWJsZUN0cmwsXHJcbiAgICAgICAgICAgIGNvbnRyb2xsZXJBczogJ2V4cGFuZFRibEN0cmwnLFxyXG4gICAgICAgICAgICB0cmFuc2NsdWRlOnRydWUsXHJcbiAgICAgICAgICAgIGJpbmRpbmdzOiB7XHJcbiAgICAgICAgICAgICAgICB0aXRsZTogJ0AnLCAvKmRlcHJlY2F0ZWQqL1xyXG4gICAgICAgICAgICAgICAgcHJlSWQ6ICdAJyxcclxuICAgICAgICAgICAgICAgIGxpc3RJdGVtczogJzwnLFxyXG4gICAgICAgICAgICAgICAgY29sdW1uRGVmOic8JyxcclxuICAgICAgICAgICAgICAgIGRpc2FibGVTZWxlY3Rpb246JzwnLFxyXG4gICAgICAgICAgICAgICAgaXNSZXF1aXJlZFJlY29yZDonPCcsXHJcbiAgICAgICAgICAgICAgICBpc0ludGVybmFsOic8JyxcclxuICAgICAgICAgICAgICAgIHNlbGVjdFJlY29yZDogJzwnLFxyXG4gICAgICAgICAgICAgICAgcmVzZXRUb0NvbGxhcHNlZDogJzwnLFxyXG4gICAgICAgICAgICAgICAgZGlzYWJsZUVyckNvbHVtbjonQCcsXHJcbiAgICAgICAgICAgICAgICB0bmFtZTonQCdcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgZXhwYW5kaW5nVGFibGVDdHJsLiRpbmplY3QgPSBbJyRmaWx0ZXInLCckc2NvcGUnXTtcclxuICAgIGZ1bmN0aW9uIGV4cGFuZGluZ1RhYmxlQ3RybCgkZmlsdGVyLCRzY29wZSkge1xyXG4gICAgICAgIHZhciB2bSA9IHRoaXM7XHJcbiAgICAgICAgdm0uZm9jdXNlZCA9IGZhbHNlO1xyXG4gICAgICAgIHZtLmNvbHVtbkRlZmluaXRpb25zPXt9O1xyXG4gICAgICAgIHZtLmRpc2FibGVFeHBhbmQ9ZmFsc2U7XHJcbiAgICAgICAgdm0udGFibGVSb3dFeHBhbmRlZCA9IGZhbHNlO1xyXG4gICAgICAgIHZtLnRhYmxlUm93SW5kZXhDdXJyRXhwYW5kZWQgPSBcIlwiO1xyXG4gICAgICAgIHZtLnRhYmxlUm93SW5kZXhQcmV2RXhwYW5kZWQgPSBcIlwiO1xyXG4gICAgICAgIHZtLm51bWJlckNvbHM9MTtcclxuICAgICAgICB2bS5kaXNhYmxlRXJyb3JDb2w9ZmFsc2U7XHJcbiAgICAgICAgdm0uZGF5RGF0YUNvbGxhcHNlID0gX2NyZWF0ZUFycmF5KDAsIHRydWUpO1xyXG4gICAgICAgIHZtLmZvcm1OYW1lPVwiZXhwYW5kVGJsQ3RybC50cmFuc2NsdWRlRm9ybVwiO1xyXG5cclxuICAgICAgICB2bS4kb25Jbml0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZih2bS5saXN0SXRlbXMpIHtcclxuICAgICAgICAgICAgICAgIHZtLmRheURhdGFDb2xsYXBzZSA9IF9jcmVhdGVBcnJheSh2bS5saXN0SXRlbXMubGVuZ3RoLCB0cnVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZtLmdldEV4cGFuZGVkU3RhdGUgPSBmdW5jdGlvbiAocm93KSB7XHJcbiAgICAgICAgICAgIGlmIChyb3cgPT09IHZtLnRhYmxlUm93SW5kZXhDdXJyRXhwYW5kZWQgfHwgISh2bS5kYXlEYXRhQ29sbGFwc2Vbcm93XSAmJiAoISB2bS50cmFuc2NsdWRlRm9ybVtyb3ddIHx8IHZtLnRyYW5zY2x1ZGVGb3JtW3Jvd10uJHZhbGlkKSkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZtLiRvbkNoYW5nZXMgPSBmdW5jdGlvbiAoY2hhbmdlcykge1xyXG5cclxuXHJcbiAgICAgICAgICAgIGlmIChjaGFuZ2VzLmxpc3RJdGVtcykge1xyXG4gICAgICAgICAgICAgICAgaWYodm0ubGlzdEl0ZW1zKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdm0uZGF5RGF0YUNvbGxhcHNlID0gX2NyZWF0ZUFycmF5KHZtLmxpc3RJdGVtcy5sZW5ndGgsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9zaG91bGQgbmV2ZXIgaGFwcGVuXHJcbiAgICAgICAgICAgICAgICAgICAgdm0uZGF5RGF0YUNvbGxhcHNlID0gX2NyZWF0ZUFycmF5KDAsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdm0ucmVzZXRUYWJsZVJvdygpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZihjaGFuZ2VzLnRuYW1lKXtcclxuICAgICAgICAgICAgICAgIC8vaWYgdGhlIGJpbmRpbmcgaXMgbm90IGRlZmluZWQgd2lsbCBmaXJlIGFuZCBiZSBudWxsXHJcbiAgICAgICAgICAgICAgICBpZihjaGFuZ2VzLnRuYW1lLmN1cnJlbnRWYWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZtLmZvcm1OYW1lID0gY2hhbmdlcy50bmFtZS5jdXJyZW50VmFsdWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgUmVzZXRzIHRoZSB0YWJsZSB0byBjb2xsYXBzZWQuIE5vdGUgdGhpcyAgaXMgbm90IGEgdHJ1ZSByZXNldFxyXG4gICAgICAgICAgICAgSWYgYSB2YWxpZCBpbmRleCBpcyBzZWxlY3RlZCwgdG9nZ2xlcyAoRXhwYW5kcykgdGhlIHJvdyBhZnRlciBhIHJlc2V0LlxyXG4gICAgICAgICAgICAgVGhpcyBhbGxvd3MgZXhwYW5kaW5nIHRoZSBzYW1lIHJvdyBpbmRleCBhZnRlciBhIHJvdyBoYXMgYmVlbiBhZGRlZCBhdCB0aGUgYmVnaW5uaW5nXHJcbiAgICAgICAgICAgICBGb3IgYSB0cnVlIHJlc2V0LCBmaXJzdCBzZXQgc2VsZWN0IHJlY29yZCB0byAtMVxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgaWYoY2hhbmdlcy5yZXNldFRvQ29sbGFwc2VkKXtcclxuICAgICAgICAgICAgICAgIC8vIGlmKGNoYW5nZXMucmVzZXRUb0NvbGxhcHNlZC5jdXJyZW50VmFsdWUpe1xyXG4gICAgICAgICAgICAgICAgICAgIHZtLnJlc2V0VGFibGVSb3coKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWNoYW5nZXMuc2VsZWN0UmVjb3JkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZVRhYmxlUm93KHZtLnNlbGVjdFJlY29yZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy99XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYoY2hhbmdlcy5zZWxlY3RSZWNvcmQpe1xyXG4gICAgICAgICAgICAgICAgdmFyIHNlbGVjdEluZGV4PXBhcnNlSW50KGNoYW5nZXMuc2VsZWN0UmVjb3JkLmN1cnJlbnRWYWx1ZSk7XHJcbiAgICAgICAgICAgICAgICBpZihzZWxlY3RJbmRleD49MCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZtLnNlbGVjdFRhYmxlUm93KHNlbGVjdEluZGV4KTtcclxuICAgICAgICAgICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICAgICAgICAgIHZtLnJlc2V0VGFibGVSb3coKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZihjaGFuZ2VzLmRpc2FibGVTZWxlY3Rpb24pe1xyXG4gICAgICAgICAgICAgICAgdm0uZGlzYWJsZUV4cGFuZD1jaGFuZ2VzLmRpc2FibGVTZWxlY3Rpb24uY3VycmVudFZhbHVlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZihjaGFuZ2VzLmNvbHVtbkRlZikge1xyXG4gICAgICAgICAgICAgICAgdm0ubnVtYmVyQ29scz1jaGFuZ2VzLmNvbHVtbkRlZi5jdXJyZW50VmFsdWUubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgdm0uY29sdW1uRGVmaW5pdGlvbnMgPSBfcmVjYWxjdWxhdGVDb2x1bW5EZWZzKGNoYW5nZXMuY29sdW1uRGVmLmN1cnJlbnRWYWx1ZSwgKHZtLm51bWJlckNvbHMpKTtcclxuICAgICAgICAgICAgICAgIF9zZXROdW1iZXJDb2x1bW5zKClcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZihjaGFuZ2VzLmRpc2FibGVFcnJDb2x1bW4pe1xyXG4gICAgICAgICAgICAgICAgdm0uZGlzYWJsZUVycm9yQ29sPWNoYW5nZXMuZGlzYWJsZUVyckNvbHVtbi5jdXJyZW50VmFsdWU7XHJcbiAgICAgICAgICAgICAgICB2bS5udW1iZXJDb2xzPXZtLmNvbHVtbkRlZi5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICB2bS5kaXNhYmxlRXJyb3JDb2w9dHJ1ZTtcclxuICAgICAgICAgICAgICAgIF9zZXROdW1iZXJDb2x1bW5zKCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gX3NldE51bWJlckNvbHVtbnMoKXtcclxuICAgICAgICAgICAgaWYoIHZtLmRpc2FibGVFcnJvckNvbCl7XHJcbiAgICAgICAgICAgICAgICAvL2NhcmV0IG9ubHlcclxuICAgICAgICAgICAgICAgIHZtLm51bWJlckNvbHM9IHZtLm51bWJlckNvbHMrMTtcclxuICAgICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgICAgICAvL2NhcmV0ICsgZXJyb3JcclxuICAgICAgICAgICAgIC8vICAgdm0ubnVtYmVyQ29scz0gdm0ubnVtYmVyQ29scysyO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBSZWNhbGN1bGF0ZXMgdGhlIGNvbHVtbiBkZWZzIGJhc2VkIG9uIHRoZSBjYXJldCBjb2x1bW4gYW5kIHRoZSBlcnJvciBjb2x1bW5lXHJcbiAgICAgICAgICogQXNzdW1lcyB0aGF0IHRoZSBjb2x1bW4gZGVmaW5pdGlvbnMgcHJvdmlkZWQgdG90YWwgMTAwJVxyXG4gICAgICAgICAqIEBwYXJhbSBjb2xEZWZzXHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBmdW5jdGlvbiBfcmVjYWxjdWxhdGVDb2x1bW5EZWZzKGNvbERlZnMsbnVtQ29scyl7XHJcbiAgICAgICAgICAgIHZhciBjYXJldFdpZHRoPTI7XHJcbiAgICAgICAgICAgIHZhciBlcnJvcldpZHRoPTU7XHJcbiAgICAgICAgICAgIHZhciB0b3RhbFdpZHRoPWNhcmV0V2lkdGgrZXJyb3JXaWR0aDtcclxuICAgICAgICAgICAgdmFyIHRvU3VidHJhY3Q9dG90YWxXaWR0aC9udW1Db2xzO1xyXG4gICAgICAgICAgICB2YXIgcmVzdWx0PVtdO1xyXG4gICAgICAgICAgICAvL2RvbnQnIGJvdGhlciByZWNhbGMgaWYgb25seSB0aGUgY2FyZXRcclxuICAgICAgICAgICAgaWYodm0uZGlzYWJsZUVycm9yQ29sKXtcclxuICAgICAgICAgICAgICAgIHJldHVybiAoY29sRGVmcyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZm9yKHZhciBpPTA7aTxudW1Db2xzO2krKyl7XHJcbiAgICAgICAgICAgICAgICB2YXIgb25lRGVmPWFuZ3VsYXIuY29weShjb2xEZWZzW2ldKTtcclxuICAgICAgICAgICAgICAgIGlmKG9uZURlZi53aWR0aD50b1N1YnRyYWN0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgb25lRGVmLndpZHRoID0gb25lRGVmLndpZHRoIC0gdG9TdWJ0cmFjdDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKG9uZURlZik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZnVuY3Rpb24gdXBkYXRlVGFibGVSb3codGV4dEluZGV4KSB7XHJcbiAgICAgICAgICAgIHZhciBzZWxlY3RJbmRleCA9IHBhcnNlSW50KHRleHRJbmRleCk7XHJcbiAgICAgICAgICAgIGlmIChzZWxlY3RJbmRleCA+PSAwKSB7XHJcbiAgICAgICAgICAgICAgICB2bS5zZWxlY3RUYWJsZVJvdyhzZWxlY3RJbmRleCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vVE9ETyBnZXQgdmFsdWUgZnJvbSBhIHNlcnZpY2UhIVxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRyYW5zbGF0ZXMgd2hlbiBhIGZvcm0gaXMgaW52YWxpZCB0byBsb2NhbGl6ZWQgdGV4dFxyXG4gICAgICAgICAqIEByZXR1cm5zIHsqfVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHZtLmZvcm1JbkVycm9yPWZ1bmN0aW9uKGFGb3JtKXtcclxuICAgICAgICAgICAgaWYoIWFGb3JtKSByZXR1cm4gKCdOJyk7IC8vc2hvdWxkIG5ldmVyIGhhcHBlblxyXG4gICAgICAgICAgICBpZihhRm9ybS4kaW52YWxpZCl7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gKCdZJylcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gKCdOJylcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBVdGlsaXR5IGZ1bmN0aW9uIGZvciBkZXRlcm1pbmluZyB0aGUgbnVtYmVyIG9mIGNvbHVtbnMgdG8gY3JlYXRlXHJcbiAgICAgICAgICogQHBhcmFtIG15b2JqXHJcbiAgICAgICAgICogQHJldHVybnMge251bWJlcn1cclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGZ1bmN0aW9uIF9nZXROdW1iZXJLZXlzKG15b2JqKXtcclxuICAgICAgICAgICAgdmFyIGNvdW50ID0gMDtcclxuICAgICAgICAgICAgZm9yICh2YXIgayBpbiBteW9iaikge1xyXG4gICAgICAgICAgICAgICAgaWYgKG15b2JqLmhhc093blByb3BlcnR5KGspKSBjb3VudCsrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBjb3VudDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIHNwZWNpZmllZCBzaXplIGFuZCBkZWZhdWx0IHZhbHVlc1xyXG4gICAgICAgICAqIEBwYXJhbSBhcnJheVNpemVcclxuICAgICAgICAgKiBAcGFyYW0gaW5pdGlhbFZhbFxyXG4gICAgICAgICAqIEByZXR1cm5zIHtBcnJheX1cclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgICBmdW5jdGlvbiBfY3JlYXRlQXJyYXkoYXJyYXlTaXplLGluaXRpYWxWYWwpe1xyXG4gICAgICAgICB2YXIgYW5BcnJheSA9IFtdO1xyXG4gICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFycmF5U2l6ZTsgaSsrKSBhbkFycmF5LnB1c2ggKGluaXRpYWxWYWwpO1xyXG4gICAgICAgICAvLyB0byBmaXggdGlzc3VlRmx1aWRzIGRpZG4ndCByZW9jcmQgZGlkbid0IGNsb3NlIHByb3Blcmx5LCByb2xsYmFjayBwcmV2aW91cyBidWcgZml4IGNobmdlc1xyXG4gICAgICAgICAvLyB7XHJcbiAgICAgICAgIC8vICAgICBpZiAodm0udHJhbnNjbHVkZUZvcm0gJiYgdm0udHJhbnNjbHVkZUZvcm1baV0gJiYgdm0udHJhbnNjbHVkZUZvcm1baV0uJGludmFsaWQpIHtcclxuICAgICAgICAgLy8gICAgICAgICBhbkFycmF5LnB1c2ggKGZhbHNlKTtcclxuICAgICAgICAgLy8gICAgIH0gZWxzZSB7XHJcbiAgICAgICAgIC8vICAgICAgICAgYW5BcnJheS5wdXNoKGluaXRpYWxWYWwpO1xyXG4gICAgICAgICAvLyAgICAgfVxyXG4gICAgICAgICAvLyB9XHJcbiAgICAgICAgIHJldHVybiBhbkFycmF5XHJcbiAgICAgICAgIH1cclxuXHJcbiAgICAgICAgdm0uZGVsZXRlZFJvdz1mdW5jdGlvbigpe1xyXG4gICAgICAgICAgICB2bS50YWJsZVJvd0V4cGFuZGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHZtLnRhYmxlUm93SW5kZXhDdXJyRXhwYW5kZWQgPSBcIlwiO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQG5nZG9jIHJlc2V0cyB0aGUgdGFibGUgdG8gYSBjb2xsYXBzZWQgc3RhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICB2bS5yZXNldFRhYmxlUm93ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2bS50YWJsZVJvd0luZGV4UHJldkV4cGFuZGVkID0gXCJcIjtcclxuICAgICAgICAgICAgdm0udGFibGVSb3dFeHBhbmRlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICB2bS50YWJsZVJvd0luZGV4Q3VyckV4cGFuZGVkID0gXCJcIjtcclxuICAgICAgICAgICAgaWYodm0ubGlzdEl0ZW1zKSB7XHJcbiAgICAgICAgICAgICAgICB2bS5kYXlEYXRhQ29sbGFwc2UgPSBfY3JlYXRlQXJyYXkodm0ubGlzdEl0ZW1zLmxlbmd0aCwgdHJ1ZSk7XHJcbiAgICAgICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICAgICAgX2NyZWF0ZUFycmF5KDAsIHRydWUpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZtLmRheURhdGFDb2xsYXBzZUZuID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgdm0ubGlzdEl0ZW1zLmxlbmd0aCAtIDE7IGkgKz0gMSkge1xyXG4gICAgICAgICAgICAgICAgdm0uZGF5RGF0YUNvbGxhcHNlLmFwcGVuZCgndHJ1ZScpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICB2bS5zZWxlY3RUYWJsZVJvdyA9IGZ1bmN0aW9uIChpbmRleCkge1xyXG4gICAgICAgICAgICAvL2lmIHNlbGVjdGlvblxyXG4gICAgICAgICBpZiAodm0uZGlzYWJsZUV4cGFuZCkgcmV0dXJuO1xyXG4gICAgICAgICAgICBpZiAodm0uZGF5RGF0YUNvbGxhcHNlID09PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICAgICAgdm0uZGF5RGF0YUNvbGxhcHNlID0gdm0uZGF5RGF0YUNvbGxhcHNlRm4oKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAodm0udGFibGVSb3dFeHBhbmRlZCA9PT0gZmFsc2UgJiYgdm0udGFibGVSb3dJbmRleEN1cnJFeHBhbmRlZCA9PT0gXCJcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIHZtLnRhYmxlUm93SW5kZXhQcmV2RXhwYW5kZWQgPSBcIlwiO1xyXG4gICAgICAgICAgICAgICAgICAgIHZtLnRhYmxlUm93RXhwYW5kZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIHZtLnRhYmxlUm93SW5kZXhDdXJyRXhwYW5kZWQgPSBpbmRleDtcclxuICAgICAgICAgICAgICAgICAgICAvLyB2bS5zdG9yZUlkRXhwYW5kZWQgPSBzdG9yZUlkO1xyXG4gICAgICAgICAgICAgICAgICAgIHZtLmRheURhdGFDb2xsYXBzZVtpbmRleF0gPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodm0udGFibGVSb3dFeHBhbmRlZCA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh2bS50YWJsZVJvd0luZGV4Q3VyckV4cGFuZGVkID09PSBpbmRleCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2bS50YWJsZVJvd0V4cGFuZGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZtLnRhYmxlUm93SW5kZXhDdXJyRXhwYW5kZWQgPSBcIlwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2bS5kYXlEYXRhQ29sbGFwc2VbaW5kZXhdID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2bS50YWJsZVJvd0luZGV4UHJldkV4cGFuZGVkID0gdm0udGFibGVSb3dJbmRleEN1cnJFeHBhbmRlZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdm0udGFibGVSb3dJbmRleEN1cnJFeHBhbmRlZCA9IGluZGV4O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgdm0uc3RvcmVJZEV4cGFuZGVkID0gc3RvcmVJZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdm0uZGF5RGF0YUNvbGxhcHNlW3ZtLnRhYmxlUm93SW5kZXhQcmV2RXhwYW5kZWRdID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdm0uZGF5RGF0YUNvbGxhcHNlW3ZtLnRhYmxlUm93SW5kZXhDdXJyRXhwYW5kZWRdID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdm0uaXNSZXF1aXJlZFJlY29yZFNldCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKHZtLmlzUmVxdWlyZWRSZWNvcmQgJiYgIXZtLmlzSW50ZXJuYWwpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2bS5pc1JlY29yZFNob3dzT3V0c2lkZSA9IGZ1bmN0aW9uIChyb3cpIHtcclxuICAgICAgICAgICAgaWYgKHZtLmlzSW50ZXJuYWwpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAhdm0uZGF5RGF0YUNvbGxhcHNlW3Jvd107XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZih2bS50cmFuc2NsdWRlRm9ybVtyb3ddICYmIHZtLnRyYW5zY2x1ZGVGb3JtW3Jvd10uJGludmFsaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICB2bS5kYXlEYXRhQ29sbGFwc2Vbcm93XSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuICghKHZtLmRheURhdGFDb2xsYXBzZVtyb3ddICYmICghIHZtLnRyYW5zY2x1ZGVGb3JtW3Jvd10gfHwgdm0udHJhbnNjbHVkZUZvcm1bcm93XS4kdmFsaWQpKSB8fFxyXG4gICAgICAgICAgICAgICAgICAgIHZtLmlzUmVxdWlyZWRSZWNvcmRTZXQoKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2bS5pc1JlY29yZFNob3dzSW5zaWRlID0gZnVuY3Rpb24gKHJvdykge1xyXG4gICAgICAgICAgICBpZiAoIXZtLmlzSW50ZXJuYWwpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuICEodm0uZGF5RGF0YUNvbGxhcHNlW3Jvd10gJiYgdm0udHJhbnNjbHVkZUZvcm1bcm93XS4kdmFsaWQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcblxyXG4gICAgfVxyXG5cclxuXHJcblxyXG59KSgpO1xyXG4iLCIvKipcclxuICogQ3JlYXRlZCBieSBBYmRlc3NhbWFkIG9uIDcvNC8yMDE2LlxyXG4gKi9cclxuXHJcbihmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ2FkZHJlc3NSb2xlJywgWydocGZiQ29uc3RhbnRzJywgICdhbGVydE1vZHVsZSddKVxyXG59KSgpO1xyXG5cclxuKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgnYWRkcmVzc1JvbGUnKVxyXG4gICAgICAgIC5jb21wb25lbnQoJ2NtcEFkZHJlc3NSb2xlJywge1xyXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2FwcC9zY3JpcHRzL2NvbXBvbmVudHMvYWRkcmVzc1JvbGUvdHBsLWFkZHJlc3Mtcm9sZV8yMDIwMDkwOV8xNTI1Lmh0bWwnLFxyXG4gICAgICAgICAgICBjb250cm9sbGVyOiBhZGRyZXNzUm9sZUN0cmwsXHJcbiAgICAgICAgICAgIGNvbnRyb2xsZXJBczogJ2FyJyxcclxuICAgICAgICAgICAgYmluZGluZ3M6IHtcclxuICAgICAgICAgICAgICAgIC8vZm9ybU5hbWU6ICc8JyxcclxuICAgICAgICAgICAgICAgIHJlY29yZDogJzwnLFxyXG4gICAgICAgICAgICAgICAgb25VcGRhdGU6ICcmJyxcclxuICAgICAgICAgICAgICAgIHNob3dFcnJvcnM6ICcmJyxcclxuICAgICAgICAgICAgICAgIGlzQ29udGFjdDogJzwnLFxyXG4gICAgICAgICAgICAgICAgYWxyZWFkeVNlbGVjdGVkOiAnJicsXHJcbiAgICAgICAgICAgICAgICBpc0FtZW5kOiAnPCcsXHJcbiAgICAgICAgICAgICAgICBodEluZHhMaXN0OiAnPCcsXHJcbiAgICAgICAgICAgICAgICBsZWdlbmRUZXh0OiAnQCcsXHJcbiAgICAgICAgICAgICAgICBpbXBvcnRlclVwZGF0ZWQ6ICcmJyxcclxuICAgICAgICAgICAgICAgIGRlc2VsZWN0SW1wb3J0ZXI6ICcmJyxcclxuICAgICAgICAgICAgICAgIHVwZGF0ZUVycm9yU3VtbWFyeTogJyYnLFxyXG4gICAgICAgICAgICAgICAgaW5Vc2VGbGFnOic8J1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgYWRkcmVzc1JvbGVDdHJsLiRpbmplY3QgPSBbJ0VOR0xJU0gnLCckc2NvcGUnLCckdHJhbnNsYXRlJ107XHJcbiAgICBmdW5jdGlvbiBhZGRyZXNzUm9sZUN0cmwoRU5HTElTSCwkc2NvcGUsICR0cmFuc2xhdGUpIHtcclxuXHJcbiAgICAgICAgdmFyIHZtID0gdGhpcztcclxuICAgICAgICB2bS5pc1JlcSA9IHRydWU7XHJcbiAgICAgICAgdm0uaXNTZWxlY3RlZCA9IFwiXCI7IC8vY2hlY2tib3ggY2F1c2VzIGlzc3Vlcy4gU3RvcmUgaW4gdGV4dFxyXG4gICAgICAgIHZtLmlzRWRpdGFibGUgPSB0cnVlO1xyXG4gICAgICAgIHZtLmluVXNlciA9IGZhbHNlO1xyXG4gICAgICAgIHZtLmFsZXJ0cyA9IFtmYWxzZSwgZmFsc2VdO1xyXG4gICAgICAgIHZtLmxhbmcgPSAkdHJhbnNsYXRlLnByb3Bvc2VkTGFuZ3VhZ2UoKSB8fCAkdHJhbnNsYXRlLnVzZSgpO1xyXG4gICAgICAgIHZtLnNob3dDTUVycm9yID0gZmFsc2U7XHJcbiAgICAgICAgdm0uZHVwbGljYXRlUm9sZT1bXHJcbiAgICAgICAgICAgIHt0eXBlOiBcImR1cGxpY2F0ZVJvbGVcIiwgZGlzcGxheUFsaWFzOiBcIlRZUEVfRFVQTElDQVRFUk9MRVwifVxyXG4gICAgICAgIF07XHJcbiAgICAgICAgdm0uaW1wQ29tcGFueUluVXNlPVtcclxuICAgICAgICAgICAge3R5cGU6IFwiaW1wQ29tcGFueUluVXNlXCIsIGRpc3BsYXlBbGlhczogXCJDT01QQU5ZX0lOX1VTRVwifVxyXG4gICAgICAgIF07XHJcblxyXG4gICAgICAgIHZtLnJvbGVNb2RlbCA9IHtcclxuICAgICAgICAgICAgbWFudWZhY3R1cmVyOiBmYWxzZSxcclxuICAgICAgICAgICAgbWFpbGluZzogZmFsc2UsXHJcbiAgICAgICAgICAgIGJpbGxpbmc6IGZhbHNlLFxyXG4gICAgICAgICAgICBpbXBvcnRlcjogZmFsc2UsXHJcbiAgICAgICAgICAgIHJlcFByaW1hcnk6IGZhbHNlLFxyXG4gICAgICAgICAgICByZXBTZWNvbmRhcnk6IGZhbHNlXHJcbiAgICAgICAgfTtcclxuICAgICAgICB2bS4kb25Jbml0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAvL2FmdGVyIGluaXRcclxuXHJcbiAgICAgICAgICAgIGlmICh2bS5yZWNvcmQpIHtcclxuICAgICAgICAgICAgICAgIC8vZG9lc24ndCBjb3B5IGFzIHRoaXMgaXMgYSBkdW1iIGNvbXBvbmVudFxyXG4gICAgICAgICAgICAgICAgdm0ucm9sZU1vZGVsID0gdm0ucmVjb3JkLmFkZHJlc3NSb2xlO1xyXG4gICAgICAgICAgICAgICAgdm0ub25lU2VsZWN0ZWQoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBfc2V0SWROYW1lcygpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgdm0uJG9uQ2hhbmdlcyA9IGZ1bmN0aW9uIChjaGFuZ2VzKSB7XHJcbiAgICAgICAgICAgIGlmIChjaGFuZ2VzLnJlY29yZCkge1xyXG4gICAgICAgICAgICAgICAgdm0ucm9sZU1vZGVsID0gKGNoYW5nZXMucmVjb3JkLmN1cnJlbnRWYWx1ZS5hZGRyZXNzUm9sZSk7XHJcbiAgICAgICAgICAgICAgICB2bS5vbmVTZWxlY3RlZCgpO1xyXG4gICAgICAgICAgICAgICAgY2hlY2tBbGxDb250cm9sc0ZvckR1cGxpY2F0ZXMoKTtcclxuXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGNoYW5nZXMuaXNBbWVuZCkge1xyXG4gICAgICAgICAgICAgICAgdm0uaXNFZGl0YWJsZSA9IGNoYW5nZXMuaXNBbWVuZC5jdXJyZW50VmFsdWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIENoZWNrcyBhbGwgdGhlIGNvbnRyb2xzIGFuZCB1cGRhdGVzIHRoZSBlcnJvciBzdGF0ZVxyXG4gICAgICAgICAqIHRvZG86IHRvIHVwZGF0ZSB0aGlzIG1ldGhvZCB0byB1c2UgZHluYW1pYyBjb250cm9sIG5hbWUgPz9cclxuICAgICAgICAgKi9cclxuICAgICAgICBmdW5jdGlvbiBjaGVja0FsbENvbnRyb2xzRm9yRHVwbGljYXRlcygpIHtcclxuICAgICAgICAgICAgaWYgKCF2bS5yb2xlRm9ybSkgcmV0dXJuO1xyXG4gICAgICAgICAgICB2bS5jaGVja0ZvckR1cGxpY2F0ZXModm0ucm9sZUZvcm0ubWFpbGluZywgJ21haWxpbmcnKTtcclxuICAgICAgICAgICAgdm0uY2hlY2tGb3JEdXBsaWNhdGVzKHZtLnJvbGVGb3JtLmJpbGxpbmcsICdiaWxsaW5nJyk7XHJcbiAgICAgICAgICAgIHZtLmNoZWNrRm9yRHVwbGljYXRlcyh2bS5yb2xlRm9ybS5yZXBQcmltYXJ5LCAncmVwUHJpbWFyeScpO1xyXG4gICAgICAgICAgICAvLyB2bS5jaGVja0ZvckR1cGxpY2F0ZXModm0ucm9sZUZvcm0ucmVwU2Vjb25kYXJ5LCAncmVwU2Vjb25kYXJ5Jyk7XHJcbiAgICAgICAgICAgIHZtLmNoZWNrRm9yRHVwbGljYXRlcyh2bS5yb2xlRm9ybS5tYW51ZmFjdHVyZXIsICdtYW51ZmFjdHVyZXInKTtcclxuICAgICAgICAgICAgdm0udXBkYXRlRXJyb3JTdW1tYXJ5KCk7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgdm0udXBkYXRlSW1wb3J0ZXJTdGF0ZSA9IGZ1bmN0aW9uIChjdHJsLCB0b0NoZWNrKSB7XHJcbiAgICAgICAgICAgIHZtLm9uZVNlbGVjdGVkKGN0cmwsIHRvQ2hlY2spO1xyXG4gICAgICAgICAgICB2bS5pbXBvcnRlclVwZGF0ZWQoe3N0YXRlOiB2bS5yb2xlTW9kZWwuaW1wb3J0ZXJ9KTtcclxuICAgICAgICAgICAgLy8gdG9kbzogc2V0IG1hbnUgcm9sZSBpbnB1dCB1bnRvdWNoID8/XHJcbiAgICAgICAgICAgIGNoZWNrQWxsQ29udHJvbHNGb3JEdXBsaWNhdGVzKCk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdm0udXBkYXRlT3RoZXJTdGF0ZSA9IGZ1bmN0aW9uIChjdHJsLCB0b0NoZWNrKSB7XHJcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSB2bS5vbmVTZWxlY3RlZChjdHJsLCB0b0NoZWNrKTtcclxuICAgICAgICAgICAgdm0uZGVzZWxlY3RJbXBvcnRlcih7c3RhdGU6IHZtLnJvbGVNb2RlbC5tYW51ZmFjdHVyZXJ9KTtcclxuICAgICAgICAgICAgLy92bS5kZXNlbGVjdEltcG9ydGVyKHtzdGF0ZTogdm0ucm9sZU1vZGVsLm1hbnVmYWN0dXJlciB8fCB2bS5yb2xlTW9kZWwubWFpbGluZyB8fCB2bS5yb2xlTW9kZWwuYmlsbGluZ30pXHJcbiAgICAgICAgfTtcclxuXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQHBhcmFtIGN0cmwgdGhlIGZvcm0gY29udHJvbFxyXG4gICAgICAgICAqIEBwYXJhbSB0b0NoZWNrIHRoZSBqc29uIG5hbWUgb2YgdGhlIHByb3BlcnR5IHRvIGNoZWNrXHJcbiAgICAgICAgICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdm0ub25lU2VsZWN0ZWQgPSBmdW5jdGlvbiAoY3RybCwgdG9DaGVjaykge1xyXG4gICAgICAgICAgICB2YXIgb2JqID0gdm0ucm9sZU1vZGVsO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmKHRvQ2hlY2sgIT09ICdpbXBvcnRlcicpIHtcclxuICAgICAgICAgICAgICAgICAgICB2bS5jaGVja0ZvckR1cGxpY2F0ZXMoY3RybCwgdG9DaGVjayk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgYXR0ck5hbWUgPSBrZXk7XHJcbiAgICAgICAgICAgICAgICB2YXIgYXR0clZhbHVlID0gb2JqW2tleV07XHJcbiAgICAgICAgICAgICAgICBpZiAoYXR0clZhbHVlID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdm0uaXNTZWxlY3RlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgdm0udXBkYXRlRXJyb3JTdW1tYXJ5KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdm0uaXNTZWxlY3RlZCA9IFwiXCI7XHJcbiAgICAgICAgICAgIHZtLnVwZGF0ZUVycm9yU3VtbWFyeSgpO1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2VcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2bS5jaGVja0ZvckR1cGxpY2F0ZXMgPSBmdW5jdGlvbiAoY3RybCwgdG9DaGVjaykge1xyXG4gICAgICAgICAgICBpZiAoY3RybCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGlzRHVwID0gaXNEdXBsaWNhdGVTZWxlY3RlZCh0b0NoZWNrKTtcclxuICAgICAgICAgICAgICAgIGN0cmwuJHNldFZhbGlkaXR5KFwiZHVwbGljYXRlUm9sZVwiLCAhaXNEdXApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gaXNEdXBsaWNhdGVTZWxlY3RlZCh0b0NoZWNrKSB7XHJcbiAgICAgICAgICAgIHZhciBvYmogPSB2bS5yb2xlTW9kZWw7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiBvYmopIHtcclxuICAgICAgICAgICAgICAgIHZhciBhdHRyTmFtZSA9IGtleTtcclxuICAgICAgICAgICAgICAgIHZhciBhdHRyVmFsdWUgPSBvYmpba2V5XTtcclxuICAgICAgICAgICAgICAgIGlmIChhdHRyTmFtZSA9PSB0b0NoZWNrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFhdHRyVmFsdWUpIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKHZtLmFscmVhZHlTZWxlY3RlZCh7cm9sZU5hbWU6IGF0dHJOYW1lfSkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdm0uc2hvd0Vycm9yID0gZnVuY3Rpb24gKGN0cmwpIHtcclxuICAgICAgICAgICAgaWYgKChjdHJsLiRpbnZhbGlkKSB8fCAodm0uc2hvd0Vycm9ycygpICYmIGN0cmwuJGludmFsaWQpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogU3BlY2ljYWwgc2hvdyBlcnJvciBmdW5jdGlvbiBhcyByZWx5aW5nIG9uIGEgaGlkZGVuZCBmaWVsZFxyXG4gICAgICAgICAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHZtLnNob3dFcnJvck1pc3NpbmcgPSBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgICAgICBpZiAoKHZtLnJvbGVGb3JtLiR0b3VjaGVkICYmICF2bS5pc1NlbGVjdGVkKSB8fCAodm0uc2hvd0Vycm9ycygpICYmICF2bS5pc1NlbGVjdGVkKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWVcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2VcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBDbG9zZXMgdGhlIGluc3RydWN0aW9uIGFsZXJ0c1xyXG4gICAgICAgICAqIEBwYXJhbSB2YWx1ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHZtLmNsb3NlQWxlcnQgPSBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgaWYgKGFuZ3VsYXIuaXNVbmRlZmluZWQodmFsdWUpKSByZXR1cm47XHJcbiAgICAgICAgICAgIGlmICh2YWx1ZSA8IHZtLmFsZXJ0cy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIHZtLmFsZXJ0c1t2YWx1ZV0gPSBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8qXHJcbiAgICAgICAgTWFrZXMgYW4gaW5zdHJ1Y3Rpb24gdmlzaWJsZSBiYXNlZWQgb24gYW4gaW5kZXggcGFzc2VkIGluXHJcbiAgICAgICAgSW5kZXggc2V0cyB0aGUgVUkgc3RhdGUgaW4gdGhlIGFsZXJ0cyBhcnJheVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHZtLmFkZEluc3RydWN0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XHJcblxyXG4gICAgICAgICAgICBpZiAoYW5ndWxhci5pc1VuZGVmaW5lZCh2YWx1ZSkpIHJldHVybjtcclxuICAgICAgICAgICAgaWYgKHZhbHVlIDwgdm0uYWxlcnRzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgdm0uYWxlcnRzW3ZhbHVlXSA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBEZXRlcm1pbmVzIGlmIHRoZSBjdXJyZW50IGxhbmd1YWdlIGlzIGZyZW5jaFxyXG4gICAgICAgICAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHZtLmlzRnJlbmNoPWZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgIHJldHVybih2bS5sYW5nIT09IEVOR0xJU0gpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIF9zZXRJZE5hbWVzKCkge1xyXG4gICAgICAgICAgICAvLyB2YXIgc2NvcGVJZD0gXCJfXCIgKyB2bS5sZWdlbmRUZXh0ICsgXCJfXCIrICAkc2NvcGUuJGlkO1xyXG4gICAgICAgICAgICB2YXIgc2NvcGVJZD0gXCJfXCIrICAkc2NvcGUuJGlkO1xyXG4gICAgICAgICAgICB2bS5maWVsZHNldElkID0gXCJmc19yb2xlTWlzc2luZ1wiICsgXCJfXCIrICAkc2NvcGUuJGlkO1xyXG4gICAgICAgICAgICB2bS5yb2xlTWlzc2luZ0lkID0gXCJyb2xlTWlzc2luZ1wiICsgXCJfXCIrICAkc2NvcGUuJGlkO1xyXG4gICAgICAgICAgICB2bS5jb250YWN0Um9sZU1pc3NpbmdJZCA9IFwiY29udGFjdFJvbGVNaXNzaW5nXCIgKyBcIl9cIisgICRzY29wZS4kaWQ7XHJcbiAgICAgICAgICAgIHZtLmNoa01hbnVJZCA9IFwibWFudWZhY3R1cmVyXCIgK3Njb3BlSWQ7XHJcbiAgICAgICAgICAgIHZtLmNoa01haWxJZCA9IFwibWFpbGluZ1wiICtzY29wZUlkO1xyXG4gICAgICAgICAgICB2bS5jaGtCaWxsSWQgPSBcImJpbGxpbmdcIiArc2NvcGVJZDtcclxuICAgICAgICAgICAgdm0uY2hrTWFudUNvbnRhY3RJZCA9IFwiY29udGFjdE1hbnVmYWN0dXJlclwiICsgc2NvcGVJZDtcclxuICAgICAgICAgICAgdm0uY2hrTWFpbENvbnRhY3RJZCA9IFwiY29udGFjdE1haWxpbmdcIiArIHNjb3BlSWQ7XHJcbiAgICAgICAgICAgIHZtLmNoa0JpbGxDb250YWN0SWQgPSBcImNvbnRhY3RCaWxsaW5nXCIgKyBzY29wZUlkO1xyXG4gICAgICAgICAgICB2bS5jaGtJbXBJZCA9IFwiY2hrLWltcG9ydGVyXCIgK3Njb3BlSWQ7XHJcbiAgICAgICAgICAgIHZtLmNoa1JlUHJpbUlkID0gXCJyZXBQcmltYXJ5XCIgK3Njb3BlSWQ7XHJcbiAgICAgICAgICAgIHZtLmNoa1JlcFNlY0lkID0gXCJyZXBTZWNvbmRhcnlcIiArc2NvcGVJZDtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgIH0vL2VuZCBjb250cm9sbGVyXHJcblxyXG5cclxuXHJcbn0pKCk7IiwiLyoqXHJcbiAqIENyZWF0ZWQgYnkgQWJkZXNzYW1hZCBvbiA3LzUvMjAxNi5cclxuICovXHJcblxyXG4oZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKCdjb250YWN0TW9kdWxlJywgW1xyXG4gICAgICAgICAgICAnZGF0YUxpc3RzJyxcclxuICAgICAgICAgICAgJ2hwZmJDb25zdGFudHMnLFxyXG4gICAgICAgICAgICAnZXJyb3JNZXNzYWdlTW9kdWxlJ1xyXG4gICAgICAgIF0pXHJcbn0pKCk7XHJcblxyXG4oZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKCdjb250YWN0TW9kdWxlJylcclxuICAgICAgICAuY29tcG9uZW50KCdjbXBDb250YWN0RGV0YWlscycse1xyXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2FwcC9zY3JpcHRzL2NvbXBvbmVudHMvY29udGFjdERldGFpbHMvdHBsLWNvbnRhY3QtZGV0YWlsc18yMDIwMDkwOV8xNTI1Lmh0bWwnLFxyXG4gICAgICAgICAgICBjb250cm9sbGVyOiBjb250YWN0Q3RybCxcclxuICAgICAgICAgICAgY29udHJvbGxlckFzOiAnY29udEN0cmwnLFxyXG4gICAgICAgICAgICBiaW5kaW5nczoge1xyXG4gICAgICAgICAgICAgICAgY29udGFjdFJlY29yZDogJzwnLFxyXG4gICAgICAgICAgICAgICAgb25VcGRhdGU6ICcmJywgLy9zaG91bGQgYmUgcmVtb3ZlZCBub3QgdXNlZCwgZGVwcmVjYXRlZFxyXG4gICAgICAgICAgICAgICAgaXNBbWVuZDogJzwnLFxyXG4gICAgICAgICAgICAgICAgc2hvd0Vycm9yczogJyYnLFxyXG4gICAgICAgICAgICAgICAgZmF4TWFuZGF0b3J5OidAJyxcclxuICAgICAgICAgICAgICAgIHVwZGF0ZUVycm9yU3VtbWFyeTonJicsXHJcbiAgICAgICAgICAgICAgICBmaWVsZFN1ZmZpeDonPCcsXHJcbiAgICAgICAgICAgICAgICByb3V0aW5nSWRJbmRleDonPCcsXHJcbiAgICAgICAgICAgICAgICBzaG93Um91dGluZ0lkOiAnJicsXHJcbiAgICAgICAgICAgICAgICBzaG93QWRkckltcENvbXBhbnlOYW1lOiAnJicsXHJcbiAgICAgICAgICAgICAgICBhZGRySW1wQ29tcGFueU5hbWU6JzwnLFxyXG4gICAgICAgICAgICAgICAgaXNDb250YWN0Oic8J1xyXG4gICAgICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICBjb250YWN0Q3RybC4kaW5qZWN0ID0gWydnZXRDb250YWN0TGlzdHMnLCdFTkdMSVNIJywnRlJFTkNIJywnJHNjb3BlJ107XHJcbiAgICBmdW5jdGlvbiBjb250YWN0Q3RybCggZ2V0Q29udGFjdExpc3RzLEVOR0xJU0gsRlJFTkNILCRzY29wZSkge1xyXG4gICAgICAgIHZhciB2bSA9IHRoaXM7XHJcbiAgICAgICAgdm0uaXNFZGl0YWJsZSA9IHRydWU7XHJcbiAgICAgICAgdm0ubmdNb2RlbE9wdFNldHRpbmcgPSB7dXBkYXRlT246ICdibHVyJ307XHJcbiAgICAgLy8gICB2bS5zYWx1dGF0aW9uTGlzdCA9IGdldENvbnRhY3RMaXN0cy5nZXRTYWx1dGF0aW9uTGlzdCgpO1xyXG4gICAgICAgIHZtLmxhbmdDb3JyZXNwcG9uZD1bRU5HTElTSCxGUkVOQ0hdO1xyXG4gICAgICAgIHZtLmZheFJlcXVpcmVkPWZhbHNlOyAvL2RlZmF1bHQgdG8gZmFsc2UgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5XHJcbiAgICAgICB2bS5waG9uZVJlZz0vXihbMC05XSokKS87XHJcbiAgICAgICAgdm0uZW1haWxSZWcgPSAvXlthLXpBLVowLTlfListXStAW2EtekEtWjAtOS1dK1xcLlthLXpBLVowLTktLl0rJC87XHJcbiAgICAgICAgdm0uY29udGFjdE1vZGVsID0ge1xyXG4gICAgICAgICAgICBnaXZlbk5hbWU6IFwiXCIsXHJcbiAgICAgICAgICAgIHN1cm5hbWU6IFwiXCIsXHJcbiAgICAgICAgICAgIGluaXRpYWxzOiBcIlwiLFxyXG4gICAgICAgICAgICB0aXRsZTogXCJcIixcclxuICAgICAgICAgICAgbGFuZ3VhZ2U6IFwiXCIsXHJcbiAgICAgICAgICAgIHBob25lOiBcIlwiLFxyXG4gICAgICAgICAgICBwaG9uZUV4dDogXCJcIixcclxuICAgICAgICAgICAgZmF4OiBcIlwiLFxyXG4gICAgICAgICAgICBlbWFpbDogXCJcIixcclxuICAgICAgICAgICAgcm91dGluZ0lkOiBcIlwiLFxyXG4gICAgICAgICAgICBpbXBDb21wYW55TmFtZTpcIlwiXHJcbiAgICAgICAgfTtcclxuICAgICAgICB2bS5pbnB1dE1vZGVsT3B0aW9ucz17dXBkYXRlT246ICdibHVyJ307XHJcbiAgICAgICAgdm0uZmxkSWQ9XCJcIjsgLy91c2VkIHRvIGR5bmFtaWNhbGx5IGRpc3Rpbmd1aXNoIGZpZWxkcyBkZWZhdWx0IHRvIGVtcHR5IGZvciBiYWNrd2FyZHMgY29tcGF0XHJcbiAgICAgICAgdm0ucmVxdWlyZWRPbmx5ID0gW3t0eXBlOiBcInJlcXVpcmVkXCIsIGRpc3BsYXlBbGlhczogXCJNU0dfRVJSX01BTkRcIn1dO1xyXG4gICAgICAgIHZtLmVtYWlsRXJyb3I9W3t0eXBlOiBcInJlcXVpcmVkXCIsIGRpc3BsYXlBbGlhczogXCJNU0dfRVJSX01BTkRcIn0se3R5cGU6IFwicGF0dGVyblwiLCBkaXNwbGF5QWxpYXM6IFwiTVNHX0VSUl9FTUFJTF9GT1JNQVRcIn1dO1xyXG4gICAgICAgIHZtLnBob25lRXJyb3I9W3t0eXBlOiBcInJlcXVpcmVkXCIsIGRpc3BsYXlBbGlhczogXCJNU0dfRVJSX01BTkRcIn0se3R5cGU6IFwicGF0dGVyblwiLCBkaXNwbGF5QWxpYXM6IFwiTVNHX0VSUl9QSE9ORV9GT1JNQVRcIn1dO1xyXG4gICAgICAgIHZtLmZheEVycm9yPVt7dHlwZTogXCJyZXF1aXJlZFwiLCBkaXNwbGF5QWxpYXM6IFwiTVNHX0VSUl9NQU5EXCJ9LHt0eXBlOiBcInBhdHRlcm5cIiwgZGlzcGxheUFsaWFzOiBcIk1TR19FUlJfRkFYX0ZPUk1BVFwifV07XHJcbiAgICAgICAgdm0ucm91dGluZ0lkRXJyb3I9W3t0eXBlOiBcInJlcXVpcmVkXCIsIGRpc3BsYXlBbGlhczogXCJNU0dfRVJSX01BTkRcIn0sIHt0eXBlOiBcInBhdHRlcm5cIiwgZGlzcGxheUFsaWFzOiBcIlRZUEVfUEFUVEVSTlwifV07XHJcbiAgICAgICAgdm0uYWRkckltcENvbXBhbnlOYW1lRXJyb3I9W3t0eXBzOiBcInJlcXVpcmVkXCIsIGRpc3BsYXlBbGlhczogXCJNU0dfRVJSX01BTkRcIn1dO1xyXG4gICAgICAgIHZtLiRvbkluaXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgdm0ubGFuZ0xpc3Q9W0VOR0xJU0gsRlJFTkNIXTtcclxuICAgICAgICAgICAgX3NldElkTmFtZXMoKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2bS4kb25DaGFuZ2VzPWZ1bmN0aW9uKGNoYW5nZXMpe1xyXG4gICAgICAgICAgICBpZihjaGFuZ2VzLmNvbnRhY3RSZWNvcmQpe1xyXG4gICAgICAgICAgICAgICAgdm0uY29udGFjdE1vZGVsID0gY2hhbmdlcy5jb250YWN0UmVjb3JkLmN1cnJlbnRWYWx1ZTtcclxuXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGNoYW5nZXMuaXNBbWVuZCkge1xyXG4gICAgICAgICAgICAgICAgdm0uaXNFZGl0YWJsZSA9IGNoYW5nZXMuaXNBbWVuZC5jdXJyZW50VmFsdWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYoY2hhbmdlcy5mYXhNYW5kYXRvcnkpe1xyXG4gICAgICAgICAgICAgICB2bS5mYXhSZXF1aXJlZD1jaGFuZ2VzLmZheE1hbmRhdG9yeS5jdXJyZW50VmFsdWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYoY2hhbmdlcy5maWVsZFN1ZmZpeCl7XHJcbiAgICAgICAgICAgICAgICB2bS5mbGRJZD1jaGFuZ2VzLmZpZWxkU3VmZml4LmN1cnJlbnRWYWx1ZTtcclxuICAgICAgICAgICAgICAgIGlmKCF2bS5mbGRJZCl7XHJcbiAgICAgICAgICAgICAgICAgICAgdm0uZmxkSWQ9XCJcIjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9O1xyXG4gICAgICAgIHZtLnNob3dFcnJvcj1mdW5jdGlvbihjdHJsKXtcclxuICAgICAgICAgICAgaWYoIWN0cmwpe1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmKChjdHJsLiRpbnZhbGlkICYmIGN0cmwuJHRvdWNoZWQpIHx8ICh2bS5zaG93RXJyb3JzKCkmJmN0cmwuJGludmFsaWQgKSl7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZVxyXG4gICAgICAgIH1cclxuICAgICAgICB2bS5zaG93Um91dGluZ0lkRXJyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gIHZtLmNvbnRhY3RGb3JtW3ZtLnJvdXRpbmdJZGVudGlmaWVySWRdLiRpbnZhbGlkO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdm0uaGFzQWRkckltcENvbXBhbnkgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmICh2bS5hZGRySW1wQ29tcGFueU5hbWUubGVuZ3RoID4gMCl7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfTtcclxuXHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIF9zZXRJZE5hbWVzKCkge1xyXG4gICAgICAgICAgICB2YXIgc2NvcGVJZCA9IHZtLmZsZElkKyBcIl9cIiArICRzY29wZS4kaWQ7XHJcbiAgICAgICAgICAgIHZtLmZpcnN0TmFtZUlkPVwiZmlyc3ROYW1lXCIgKyBzY29wZUlkO1xyXG4gICAgICAgICAgICB2bS5sYXN0TmFtZUlkPVwibGFzdE5hbWVcIiArIHNjb3BlSWQ7XHJcbiAgICAgICAgICAgIHZtLmxhbmdDb3JyZXNwb25kSWQ9XCJsYW5nQ29ycmVzcG9uZFwiICsgc2NvcGVJZDtcclxuICAgICAgICAgICAgdm0uam9iVGl0bGVJZD1cImpvYlRpdGxlXCIgKyBzY29wZUlkO1xyXG4gICAgICAgICAgICB2bS5mYXhJZD1cImZheF9udW1iZXJcIiArIHNjb3BlSWQ7XHJcbiAgICAgICAgICAgIHZtLnBob25lTnVtYmVySWQ9XCJwaG9uZU51bWJlclwiICsgc2NvcGVJZDtcclxuICAgICAgICAgICAgdm0ucGhvbmVFeHRJZD1cInBob25lRXh0XCIgKyBzY29wZUlkO1xyXG4gICAgICAgICAgICB2bS5jb250YWN0RW1haWxJZD1cImNvbnRhY3RFbWFpbFwiICsgc2NvcGVJZDtcclxuICAgICAgICAgICAgdm0ucm91dGluZ0lkZW50aWZpZXJJZD1cInJvdXRpbmdfaWRcIiArIHNjb3BlSWQ7XHJcbiAgICAgICAgICAgIHZtLmltcENvbXBhbnlOYW1lSWQ9XCJpbXBfY29tcGFueV9uYW1lXCIgKyBzY29wZUlkO1xyXG4gICAgICAgIH1cclxuICAgICAgICAkc2NvcGUuJHdhdGNoKCdjb250Q3RybC5jb250YWN0Rm9ybS4kZXJyb3InLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZtLnVwZGF0ZUVycm9yU3VtbWFyeSgpO1xyXG4gICAgICAgIH0sIHRydWUpO1xyXG4gICAgfVxyXG5cclxufSkoKTtcclxuXHJcbiIsIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IGRraWx0eSBvbiA4LzE0LzIwMTYuXHJcbiAqL1xyXG5cclxuKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKCdhcHBsaWNhdGlvbkluZm8nLCBbJ251bWJlckZvcm1hdCcsJ2hwZmJDb25zdGFudHMnLCdlcnJvclN1bW1hcnlNb2R1bGUnLCdlcnJvck1lc3NhZ2VNb2R1bGUnXSlcclxufSkoKTtcclxuXHJcbihmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgnYXBwbGljYXRpb25JbmZvJylcclxuICAgICAgICAuY29tcG9uZW50KCdjbXBBcHBsaWNhdGlvbkluZm8nLCB7XHJcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnYXBwL3NjcmlwdHMvY29tcG9uZW50cy9hcHBsaWNhdGlvbkluZm8vdHBsLWFwcGxpY2F0aW9uLWluZm9fMjAyMDA5MDlfMTUyNS5odG1sJyxcclxuICAgICAgICAgICAgY29udHJvbGxlcjogQXBwbEluZm9DdHJsLFxyXG4gICAgICAgICAgICBjb250cm9sbGVyQXM6ICdpbmZvQ3RybCcsXHJcbiAgICAgICAgICAgIGJpbmRpbmdzOiB7XHJcbiAgICAgICAgICAgICAgICByZWNvcmQ6ICc8JyxcclxuICAgICAgICAgICAgICAgIHVzZXJUeXBlOiAnPCcsXHJcbiAgICAgICAgICAgICAgICBpc0luY29tcGxldGU6ICc8JyxcclxuICAgICAgICAgICAgICAgIGlzSGlkZTogJzwnLFxyXG4gICAgICAgICAgICAgICAgY29uZmlndXJlSWRGaWVsZDogJzwnLFxyXG4gICAgICAgICAgICAgICAgc2V0VHlwZTogJyYnXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICBBcHBsSW5mb0N0cmwuJGluamVjdD1bJ05FV19UWVBFJywnQU1FTkRfVFlQRScsJ0FQUFJPVkVEX1RZUEUnLCdFWFRFUk5BTF9UWVBFJywnJHNjb3BlJywgJyR0cmFuc2xhdGUnXTtcclxuXHJcbiAgICBmdW5jdGlvbiBBcHBsSW5mb0N0cmwoTkVXX1RZUEUsQU1FTkRfVFlQRSxBUFBST1ZFRF9UWVBFLEVYVEVSTkFMX1RZUEUsICRzY29wZSwgJHRyYW5zbGF0ZSkge1xyXG4gICAgICAgIHZhciB2bSA9IHRoaXM7XHJcbiAgICAgICAgdm0uYXBwbFR5cGVzID0gW05FV19UWVBFLCBBTUVORF9UWVBFLCBBUFBST1ZFRF9UWVBFXTtcclxuICAgICAgICB2bS5mb3JtVHlwZSA9IEVYVEVSTkFMX1RZUEU7XHJcbiAgICAgICAgdm0uaW5mb01vZGVsID0ge1xyXG4gICAgICAgICAgICBhcHBsaWNhdGlvblR5cGU6IFwiTkVXXCIsXHJcbiAgICAgICAgICAgIGFwcGxpY2F0aW9uVHlwZVRleHQ6XCJcIixcclxuICAgICAgICAgICAgZW5yb2xtZW50VmVyc2lvbjogXCIwLjBcIixcclxuICAgICAgICAgICAgZGF0ZVNhdmVkOiBcIlwiLFxyXG4gICAgICAgICAgICByZWFzb25BbWVuZDpcIlwiXHJcbiAgICAgICAgfTtcclxuICAgICAgICB2bS5maWVsZElkTGFiZWwgPSBcIlwiO1xyXG4gICAgICAgIHZtLm1pbkZpZWxkTGVuZ3RoID0gXCJcIjtcclxuICAgICAgICB2bS5pc051bWJlcj1mYWxzZTtcclxuICAgICAgICB2bS5maWVsZExlbmd0aCA9IFwiXCI7XHJcbiAgICAgICAgdm0udGFnTmFtZSA9IFwiZmllbGRJZFwiO1xyXG4gICAgICAgIHZtLnNldEFzSW5jb21wbGV0ZSA9IHRydWU7XHJcbiAgICAgICAgdm0uZXJyb3JNc2cgPSBcIlwiO1xyXG4gICAgICAgIHZtLm1heEVycm9yTXNnID0gXCJcIjtcclxuICAgICAgICB2bS5pc0Rvc3NpZXIgPSBmYWxzZTtcclxuICAgICAgICB2bS5pc051bWJlcj1mYWxzZTtcclxuICAgICAgICB2bS5pc0FtZW5kID0gZmFsc2U7XHJcbiAgICAgICAgdm0ucmVxdWlyZWRPbmx5ID0gW3t0eXBlOiBcInJlcXVpcmVkXCIsIGRpc3BsYXlBbGlhczogXCJNU0dfRVJSX01BTkRcIn1dO1xyXG4gICAgICAgIHZtLm1pbjZFcnJvciA9IFtcclxuICAgICAgICAgICAge3R5cGU6IFwicmVxdWlyZWRcIiwgZGlzcGxheUFsaWFzOiBcIk1TR19FUlJfTUFORFwifSxcclxuICAgICAgICAgICAge3R5cGU6IFwibWlubGVuZ3RoXCIsIGRpc3BsYXlBbGlhczogXCJNU0dfTEVOR1RIX01JTjVcIn1cclxuICAgICAgICBdO1xyXG4gICAgICAgIHZtLm1pbjdFcnJvciA9IFtcclxuICAgICAgICAgICAge3R5cGU6IFwicmVxdWlyZWRcIiwgZGlzcGxheUFsaWFzOiBcIk1TR19FUlJfTUFORFwifSxcclxuICAgICAgICAgICAge3R5cGU6IFwibWlubGVuZ3RoXCIsIGRpc3BsYXlBbGlhczogXCJNU0dfTEVOR1RIX01JTjVcIn0sXHJcbiAgICAgICAgICAgIHt0eXBlOiBcInBhdHRlcm5cIiwgZGlzcGxheUFsaWFzOiBcIk1TR19GT1JNQVRfQ0hBUl82RElHSVRTXCJ9XHJcbiAgICAgICAgXTtcclxuICAgICAgICB2bS4kb25Jbml0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAvLy9kbyBpbml0XHJcbiAgICAgICAgICAgIHZtLmluZm9Nb2RlbC5hcHBsaWNhdGlvblR5cGVUZXh0ID0gJHRyYW5zbGF0ZS5pbnN0YW50KHZtLmluZm9Nb2RlbC5hcHBsaWNhdGlvblR5cGUpO1xyXG4gICAgICAgICAgICBfc2V0SWROYW1lcygpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgdm0uJG9uQ2hhbmdlcyA9IGZ1bmN0aW9uIChjaGFuZ2VzKSB7XHJcbiAgICAgICAgICAgIGlmIChjaGFuZ2VzLnVzZXJUeXBlKSB7XHJcbiAgICAgICAgICAgICAgICB2bS5mb3JtVHlwZSA9IGNoYW5nZXMudXNlclR5cGUuY3VycmVudFZhbHVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChjaGFuZ2VzLnJlY29yZCkge1xyXG4gICAgICAgICAgICAgICAgdm0uaW5mb01vZGVsID0gY2hhbmdlcy5yZWNvcmQuY3VycmVudFZhbHVlO1xyXG4gICAgICAgICAgICAgICAgaWYodm0uaW5mb01vZGVsLmFwcGxpY2F0aW9uVHlwZT09PUFNRU5EX1RZUEUpIHtcclxuICAgICAgICAgICAgICAgICAgICB2bS5pc0FtZW5kID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYodm0uaW5mb01vZGVsLmFwcGxpY2F0aW9uVHlwZT09PUFQUFJPVkVEX1RZUEUgJiYgIXZtLmlzRW1wdHkodm0uaW5mb01vZGVsLnJlYXNvbkFtZW5kKSl7XHJcbiAgICAgICAgICAgICAgICAgICAgdm0uaXNBbWVuZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNle1xyXG4gICAgICAgICAgICAgICAgICAgIHZtLmlzQW1lbmQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoY2hhbmdlcy5pc0luY29tcGxldGUpIHtcclxuICAgICAgICAgICAgICAgIHZtLnNldEFzSW5jb21wbGV0ZSA9IGNoYW5nZXMuaXNJbmNvbXBsZXRlLmN1cnJlbnRWYWx1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoY2hhbmdlcy5jb25maWd1cmVJZEZpZWxkKSB7XHJcbiAgICAgICAgICAgICAgICBfc2V0Q29uZmlnSXRlbXMoY2hhbmdlcy5jb25maWd1cmVJZEZpZWxkLmN1cnJlbnRWYWx1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYoY2hhbmdlcy5zaG93RXJyb3JTdW1tYXJ5KXtcclxuICAgICAgICAgICAgICAgIHZtLnNob3dTdW1tYXJ5PWNoYW5nZXMuc2hvd0Vycm9yU3VtbWFyeS5jdXJyZW50VmFsdWU7XHJcbiAgICAgICAgICAgICAgICB2bS51cGRhdGVFcnJvclN1bW1hcnlTdGF0ZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICBmdW5jdGlvbiBfc2V0Q29uZmlnSXRlbXMoY29uZmlnSnNvbikge1xyXG4gICAgICAgICAgICB2bS5maWVsZElkTGFiZWwgPSBjb25maWdKc29uLmxhYmVsO1xyXG4gICAgICAgICAgICB2bS5maWVsZExlbmd0aCA9IGNvbmZpZ0pzb24uZmllbGRMZW5ndGg7IC8vdGhpcyBpcyB0aGUgbWF4XHJcbiAgICAgICAgICAgIHZtLnRhZ05hbWUgPSBjb25maWdKc29uLnRhZ05hbWU7XHJcbiAgICAgICAgICAgIGlmIChjb25maWdKc29uLm1pbkZpZWxkTGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICB2bS5taW5GaWVsZExlbmd0aCA9IGNvbmZpZ0pzb24ubWluRmllbGRMZW5ndGg7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB2bS5taW5GaWVsZExlbmd0aCA9IGNvbmZpZ0pzb24uZmllbGRMZW5ndGg7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdm0uZXJyb3JNc2cgPSBjb25maWdKc29uLmVycm9yTXNnO1xyXG5cclxuICAgICAgICAgICAgaWYgKGNvbmZpZ0pzb24ubWluRXJyb3JNc2cpIHtcclxuICAgICAgICAgICAgICAgIHZtLm1pbkVycm9yTXNnID0gY29uZmlnSnNvbi5taW5FcnJvck1zZztcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHZtLm1pbkVycm9yTXNnID0gY29uZmlnSnNvbi5lcnJvck1zZztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZihjb25maWdKc29uLmlzTnVtYmVyKXtcclxuICAgICAgICAgICAgICAgIHZtLmlzTnVtYmVyPWNvbmZpZ0pzb24uaXNOdW1iZXI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdm0uaXNEb3NzaWVyID0gY29uZmlnSnNvbi5pc0Rvc3NpZXI7XHJcbiAgICAgICAgICAgIGlmIChhbmd1bGFyLmlzVW5kZWZpbmVkKHZtLmlzRG9zc2llcikpIHtcclxuICAgICAgICAgICAgICAgIHZtLmlzRG9zc2llciA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZtLnNob3dBbWVuZE1zZz1mdW5jdGlvbigpe1xyXG5cclxuICAgICAgICAgICAgaWYoIXZtLnJlY29yZCl7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHZtLnJlY29yZC5hcHBsaWNhdGlvblR5cGU9PT1BTUVORF9UWVBFO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZtLnNob3dBbWVuZEJ1dHRvbiA9IGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgIHJldHVybiAhdm0uaXNIaWRlO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZtLmlzRXh0ZXJuID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdm0uZm9ybVR5cGUgPT09IEVYVEVSTkFMX1RZUEU7XHJcbiAgICAgICAgfTtcclxuICAgICAgICB2bS5zZXRBbWVuZFN0YXRlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAvL1RPRE8gaGFyZGNvZGUgc2hvdWxkIGJlIHNlcnZpY2VcclxuICAgICAgICAgICAgdm0uc2V0VHlwZSh7dHlwZTogQU1FTkRfVFlQRX0pO1xyXG4gICAgICAgICAgICB2bS5pc0FtZW5kID0gdHJ1ZTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBfc2V0SWROYW1lcygpIHtcclxuICAgICAgICAgICAgdmFyIHNjb3BlSWQ9XCJfXCIrICAkc2NvcGUuJGlkO1xyXG4gICAgICAgICAgICB2bS5maWVsZElkID0gXCJmaWVsZElkXCIgK3Njb3BlSWQ7XHJcbiAgICAgICAgICAgIHZtLnJlYXNvbkFtZW5kID0gXCJyZWFzb25fYW1lbmRcIiArIHNjb3BlSWQ7XHJcbiAgICAgICAgICAgIHZtLmNvbXBJZCA9IFwiY29tcGFueV9pZFwiKyBzY29wZUlkO1xyXG4gICAgICAgICAgICB2bS5kb3NzaWVySWQgPSBcImRvc3NpZXJfaWRcIiArIHNjb3BlSWQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2bS5pc0VtcHR5ID0gZnVuY3Rpb24oYVZhbHVlKXtcclxuICAgICAgICAgICAgcmV0dXJuICh0eXBlb2YgYVZhbHVlID09PSAndW5kZWZpbmVkJyB8fCBhVmFsdWUgPT09IG51bGwgfHwgYVZhbHVlID09PSBcIlwiKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2bS5zaG93RXJyb3IgPSBmdW5jdGlvbiAoY3RybCkge1xyXG4gICAgICAgICAgICBpZighY3RybCl7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuICgoY3RybC4kaW52YWxpZCAmJiBjdHJsLiR0b3VjaGVkKSB8fCAodm0uc2hvd1N1bW1hcnkgJiYgY3RybC4kaW52YWxpZCkpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgfVxyXG59KSgpO1xyXG4iLCIoZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ2NvbXBhbnlNYWluJywgW1xyXG4gICAgICAgICAgICAnY29tcGFueVNlcnZpY2UnLFxyXG4gICAgICAgICAgICAnYXBwbGljYXRpb25JbmZvU2VydmljZScsXHJcbiAgICAgICAgICAgICdjb21wYW55SGVscFRleHQnLFxyXG4gICAgICAgICAgICAnbmdNZXNzYWdlcycsXHJcbiAgICAgICAgICAgICduZ0FyaWEnLFxyXG4gICAgICAgICAgICAnYWRkcmVzc0xpc3QnLFxyXG4gICAgICAgICAgICAnY29udGFjdExpc3QyJyxcclxuICAgICAgICAgICAgJ2ZpbGVJTycsXHJcbiAgICAgICAgICAgICduZ1Nhbml0aXplJyxcclxuICAgICAgICAgICAgJ2FwcGxpY2F0aW9uSW5mbycsXHJcbiAgICAgICAgICAgICdmaWx0ZXJMaXN0cycsXHJcbiAgICAgICAgICAgICdocGZiQ29uc3RhbnRzJyxcclxuICAgICAgICAgICAgJ3VpLmJvb3RzdHJhcCcsXHJcbiAgICAgICAgICAgICdlcnJvclN1bW1hcnlNb2R1bGUnLFxyXG4gICAgICAgICAgICAnYWxlcnRNb2R1bGUnLFxyXG4gICAgICAgICAgICAnZm9jdXMtaWYnXHJcbiAgICAgICAgXSlcclxufSkoKTtcclxuXHJcbihmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgnY29tcGFueU1haW4nKVxyXG4gICAgICAgIC5jb21wb25lbnQoJ2NtcENvbXBhbnlNYWluJywge1xyXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2FwcC9zY3JpcHRzL2NvbXBvbmVudHMvY29tcGFueU1haW4vdHBsLWNvbXBhbnktbWFpbl8yMDIwMDkwOV8xNTI1Lmh0bWwnLFxyXG4gICAgICAgICAgICBjb250cm9sbGVyOiBjb21wYW55TWFpbkN0cmwsXHJcbiAgICAgICAgICAgIGNvbnRyb2xsZXJBczogJ21haW4nLFxyXG4gICAgICAgICAgICBiaW5kaW5nczoge1xyXG4gICAgICAgICAgICAgICAgZm9ybVR5cGU6ICdAJ1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgY29tcGFueU1haW5DdHJsLiRpbmplY3QgPSBbJ0NvbXBhbnlTZXJ2aWNlJywgJ0FwcGxpY2F0aW9uSW5mb1NlcnZpY2UnLCAnaHBmYkZpbGVQcm9jZXNzaW5nJywgJyRmaWx0ZXInLCAnJHNjb3BlJywgJ0lOVEVSTkFMX1RZUEUnLCAnRVhURVJOQUxfVFlQRScsICdBUFBST1ZFRF9UWVBFJywgJ0FNRU5EX1RZUEUnLCdFTkdMSVNIJywnZ2V0Um9sZUxpc3RzJywnJHRyYW5zbGF0ZScsJyRhbmNob3JTY3JvbGwnLCckbG9jYXRpb24nXTtcclxuXHJcbiAgICBmdW5jdGlvbiBjb21wYW55TWFpbkN0cmwoQ29tcGFueVNlcnZpY2UsIEFwcGxpY2F0aW9uSW5mb1NlcnZpY2UsIGhwZmJGaWxlUHJvY2Vzc2luZywgJGZpbHRlciwgJHNjb3BlLCBJTlRFUk5BTF9UWVBFLCBFWFRFUk5BTF9UWVBFLCBBUFBST1ZFRF9UWVBFLCBBTUVORF9UWVBFLCBFTkdMSVNILCBnZXRSb2xlTGlzdHMsICR0cmFuc2xhdGUsICRhbmNob3JTY3JvbGwsICRsb2NhdGlvbikge1xyXG5cclxuICAgICAgICB2YXIgdm0gPSB0aGlzO1xyXG4gICAgICAgIHZtLnVzZXJUeXBlID0gRVhURVJOQUxfVFlQRTtcclxuICAgICAgICB2bS5pc0luY29tcGxldGUgPSB0cnVlO1xyXG4gICAgICAgIHZtLmZvcm1BbWVuZFR5cGUgPSBmYWxzZTtcclxuICAgICAgICB2bS5zYXZlWE1MTGFiZWwgPSBcIlNBVkVfRFJBRlRcIjtcclxuICAgICAgICB2bS51cGRhdGVWYWx1ZXMgPSAwO1xyXG4gICAgICAgIHZtLmFwcGxpY2F0aW9uSW5mb1NlcnZpY2UgPSBuZXcgQXBwbGljYXRpb25JbmZvU2VydmljZSgpO1xyXG4gICAgICAgIHZtLnNob3dDb250ZW50ID0gX2xvYWRGaWxlQ29udGVudDtcclxuICAgICAgICB2bS5kaXNhYmxlWE1MID0gdHJ1ZTtcclxuICAgICAgICB2bS5kaXNhYmxlRHJhZnRCdXR0b24gPSBmYWxzZTtcclxuICAgICAgICB2bS5zaG93QW1lbmROb3RlID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHZtLmNvbmZpZ0NvbXBhbnkgPSB7XHJcbiAgICAgICAgICAgIFwibGFiZWxcIjogXCJDT01QQU5ZX0lEXCIsXHJcbiAgICAgICAgICAgIFwibWluRmllbGRMZW5ndGhcIjogXCI1XCIsXHJcbiAgICAgICAgICAgIFwiZmllbGRMZW5ndGhcIjogXCI2XCIsXHJcbiAgICAgICAgICAgIFwidGFnTmFtZVwiOiBcImNvbXBhbnlJZFwiLFxyXG4gICAgICAgICAgICBcIm1pbkVycm9yTXNnXCI6IFwiTVNHX0xFTkdUSF9NSU41XCIsXHJcbiAgICAgICAgICAgIFwiZXJyb3JNc2dcIjogXCJNU0dfTEVOR1RIXzZOVU1cIlxyXG4gICAgICAgIH07XHJcbiAgICAgICAgdm0uY29tcGFueVNlcnZpY2UgPSBuZXcgQ29tcGFueVNlcnZpY2UoKTtcclxuICAgICAgICB2bS5yb290VGFnID0gJyc7XHJcbiAgICAgICAgaWYgKHZtLmNvbXBhbnlTZXJ2aWNlKSB7XHJcbiAgICAgICAgICAgIHZtLnJvb3RUYWcgPSB2bS5jb21wYW55U2VydmljZS5nZXRSb290VGFnKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZtLmFwcGxUeXBlcyA9IHZtLmNvbXBhbnlTZXJ2aWNlLmdldEFwcGxpY2F0aW9uVHlwZXMoKTtcclxuICAgICAgICB2bS5mb3JtVHlwZUxpc3QgPSBnZXRSb2xlTGlzdHMuZ2V0Rm9ybVR5cGVzKCk7XHJcbiAgICAgICAgdm0uY29tcGFueSA9IHZtLmNvbXBhbnlTZXJ2aWNlLmdldE1vZGVsSW5mbygpO1xyXG4gICAgICAgIHZtLmFkZHJlc3NMaXN0ID0gW107XHJcbiAgICAgICAgdm0uYWRkckltcENvbXBhbnlOYW1lID1bXTtcclxuICAgICAgICB2bS5pbmRleExpc3QgPSB2bS5jb21wYW55U2VydmljZS5oZWxwVGV4dFNlcXVlbmNlcztcclxuICAgICAgICB2bS5hbGVydHMgPSBbZmFsc2UsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCBmYWxzZV07XHJcbiAgICAgICAgLyoqdm0uYWxlcnRBbmNob3JzID0gW1wibG9hZC1pbnN0cnVjdGlvbnMtdG9nZ2xlXCIsXHJcbiAgICAgICAgICAgIFwibG9hZC1pbnN0cnVjdGlvbnMtdG9nZ2xlXCIsXHJcbiAgICAgICAgICAgIFwibG9hZC1pbnN0cnVjdGlvbnMtdG9nZ2xlXCIsXHJcbiAgICAgICAgICAgIFwibG9hZC1pbnN0cnVjdGlvbnMtdG9nZ2xlXCIsXHJcbiAgICAgICAgICAgIFwibG9hZC1pbnN0cnVjdGlvbnMtdG9nZ2xlXCIsXHJcbiAgICAgICAgICAgIFwibG9hZC1pbnN0cnVjdGlvbnMtdG9nZ2xlXCJdOyAqKi9cclxuICAgICAgICB2bS51cGRhdGVTdW1tYXJ5PWZhbHNlO1xyXG4gICAgICAgIHZtLnNob3dFcnJvclN1bW1hcnk9ZmFsc2U7XHJcbiAgICAgICAgdm0ucHJpdmFjeVN0YXQ9ZmFsc2U7XHJcbiAgICAgICAgdm0uaXNGaWxlTG9hZGVkPWZhbHNlO1xyXG4gICAgICAgIHZtLnNhdmVQcmVzc2VkPWZhbHNlOyAvL3VzZWQgZm9yIGZvY3VzXHJcbiAgICAgICAgdm0uZm9jdXNTdW1tYXJ5ID0gMDsgLy9tZXNzYWdpbmcgdG8gc2V0IGZvY3VzIG9uIHRoZSBlcnJvciBzdW1tYXJ5XHJcbiAgICAgICAgdm0ubGFuZyA9ICR0cmFuc2xhdGUucHJvcG9zZWRMYW5ndWFnZSgpIHx8ICR0cmFuc2xhdGUudXNlKCk7XHJcbiAgICAgICAgdm0ucmVxdWlyZWRPbmx5RXJyb3IgPSBbe3R5cGU6IFwicmVxdWlyZWRcIiwgZGlzcGxheUFsaWFzOiBcIk1TR19FUlJfTUFORFwifV07XHJcbiAgICAgICAgdm0uZXhjbHVzaW9ucyA9IHtcclxuICAgICAgICAgICAgXCJjb250YWN0UmVjLmNvbnRhY3RSZWNGb3JtXCI6IFwidHJ1ZVwiLFxyXG4gICAgICAgICAgICBcImFkZHJlc3NSZWMuYWRkcmVzc1JlY0Zvcm1cIjogXCJ0cnVlXCJcclxuICAgICAgICB9O1xyXG4gICAgICAgIHZtLmFsaWFzPXtcclxuXHJcbiAgICAgICAgICAgIFwiY29udGFjdFJvbGVzVmFsaWRcIjoge1xyXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiZWxlbWVudFwiLFxyXG4gICAgICAgICAgICAgICAgXCJ0YXJnZXRcIjogXCJjb250YWN0TGlzdFwiXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIFwiYWRkcmVzc1JvbGVzVmFsaWRcIjoge1xyXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiZWxlbWVudFwiLFxyXG4gICAgICAgICAgICAgICAgXCJ0YXJnZXRcIjogXCJhZGRyZXNzTGlzdFwiXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIFwiaW1wb3J0ZXJJZFZhbGlkXCI6IHtcclxuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcImVsZW1lbnRcIixcclxuICAgICAgICAgICAgICAgIFwidGFyZ2V0XCI6IFwiYWRkcmVzc0xpc3RcIlxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBcImNvbnRhY3RJbXBvcnRlclZhaWxkXCI6e1xyXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiZWxlbWVudFwiLFxyXG4gICAgICAgICAgICAgICAgXCJ0YXJnZXRcIjogXCJjb250YWN0TGlzdFwiXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2bS5pbml0VXNlciA9IGZ1bmN0aW9uIChpZCkge1xyXG5cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2bS4kb25Jbml0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAvL2FkZCBpbml0IGNvZGUgaGVyZVxyXG4gICAgICAgICAgICAvL3Jlc2V0IGluc3RydWN0aW9uc1xyXG4gICAgICAgICAgICBfc2V0SWROYW1lcygpO1xyXG5cclxuICAgICAgICAgICAgdm0uYWxlcnRzID0gW2ZhbHNlLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgZmFsc2VdO1xyXG4gICAgICAgICAgICB2bS51cGRhdGVTdW1tYXJ5PWZhbHNlO1xyXG4gICAgICAgICAgICB2bS5zaG93RXJyb3JTdW1tYXJ5PWZhbHNlO1xyXG4gICAgICAgICAgICB2bS5zYXZlUHJlc3NlZD1mYWxzZTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2bS4kb25DaGFuZ2VzID0gZnVuY3Rpb24gKGNoYW5nZXMpIHtcclxuICAgICAgICAgICAgaWYgKGNoYW5nZXMuZm9ybVR5cGUpIHtcclxuICAgICAgICAgICAgICAgIHZtLnVzZXJUeXBlID0gY2hhbmdlcy5mb3JtVHlwZS5jdXJyZW50VmFsdWU7XHJcbiAgICAgICAgICAgICAgICBpZiAodm0udXNlclR5cGUgPT0gSU5URVJOQUxfVFlQRSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZtLnNhdmVYTUxMYWJlbCA9IFwiQVBQUk9WRV9GSU5BTFwiXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHZtLnNhdmVYTUxMYWJlbCA9IFwiU0FWRV9EUkFGVFwiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAbmdkb2MgbWV0aG9kIC1yZXR1cm5zIHdoZXRoZXIgdGhpcyBhcHBsaWNhdGlvbiBpcyBhbiBhbWVuZG1lbnRcclxuICAgICAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuICAgICAgICAgKi9cclxuICAgICAgICB2bS5zZXRBbWVuZCA9IGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgICAgIHZtLmZvcm1BbWVuZFR5cGUgPSAodm0uY29tcGFueS5hcHBsaWNhdGlvblR5cGUgPT09IEFNRU5EX1RZUEUpO1xyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgaWYodm0uY29tcGFueS5hcHBsaWNhdGlvblR5cGUgPT09IEFQUFJPVkVEX1RZUEUgJiYgdm0udXNlclR5cGUgPT09IEVYVEVSTkFMX1RZUEUpe1xyXG4gICAgICAgICAgICAgICAgdm0uY29tcGFueS5yZWFzb25BbWVuZD1cIlwiO1xyXG4gICAgICAgICAgICB9Ki9cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEBuZ2RvYyBtZXRob2QgU2F2ZXMgdGhlIG1vZGVsIGNvbnRlbnQgaW4gSlNPTiBmb3JtYXRcclxuICAgICAgICAgKi9cclxuICAgICAgICB2bS5zYXZlSnNvbiA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIHdyaXRlUmVzdWx0ID0gX3RyYW5zZm9ybUZpbGUoKTtcclxuICAgICAgICAgICAgaHBmYkZpbGVQcm9jZXNzaW5nLndyaXRlQXNKc29uKHdyaXRlUmVzdWx0LCBfY3JlYXRlRmlsZW5hbWUoKSwgdm0ucm9vdFRhZyk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAbmdkb2MgbWV0aG9kIC0gc2F2ZXMgdGhlIGRhdGEgbW9kZWwgYXMgWE1MIGZvcm1hdFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHZtLnNhdmVYTUwgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodm0uY29tcGFueUVucm9sRm9ybS4kaW52YWxpZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZtLnNob3dFcnJvclN1bW1hcnkgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIHZtLnVwZGF0ZUVycm9yU3VtbWFyeSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZtLnNhdmVQcmVzc2VkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB2bS5mb2N1c1N1bW1hcnkrKztcclxuICAgICAgICAgICAgICAgICAgICBnb1RvRXJyb3JTdW1tYXJ5KCk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh2bS5jb21wYW55RW5yb2xGb3JtW1wiYWRkcmVzc0xpc3RDdHJsLmFkZHJlc3NMaXN0Rm9ybVwiXS4kcHJpc3RpbmUgJiYgdm0uY29tcGFueUVucm9sRm9ybVtcImNvbnRhY3RMaXN0Q3RybC5jb250YWN0TGlzdEZvcm1cIl0uJHByaXN0aW5lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB3cml0ZVJlc3VsdCA9IF90cmFuc2Zvcm1GaWxlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhwZmJGaWxlUHJvY2Vzc2luZy53cml0ZUFzWG1sKHdyaXRlUmVzdWx0LCBfY3JlYXRlRmlsZW5hbWUoKSwgdm0ucm9vdFRhZyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZtLmNvbXBhbnlTZXJ2aWNlLmdldFhTTEZpbGVOYW1lKCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2bS5zaG93RXJyb3JTdW1tYXJ5ID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZtLmNvbXBhbnlFbnJvbEZvcm0uJHNldFByaXN0aW5lKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZtLnNhdmVQcmVzc2VkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZtLmxhbmcgPT09IEVOR0xJU0gpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsZXJ0KFwiUGxlYXNlIHNhdmUgdGhlIHVuc2F2ZWQgaW5wdXQgZGF0YSBiZWZvcmUgZ2VuZXJhdGluZyBYTUwgZmlsZS5cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGVydChcIlZldWlsbGV6IHNhdXZlZ2FyZGVyIGxlcyBkb25uw6llcyBkJ2VudHLDqWUgbm9uIGVucmVnaXN0csOpZXMgYXZhbnQgZGUgZ8OpbsOpcmVyIGxlIGZpY2hpZXIgWE1MLlwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBnb1RvRXJyb3JTdW1tYXJ5KCkge1xyXG4gICAgICAgICAgICB2YXIgbWFzdGVyRXJyb3IgPSBhbmd1bGFyLmVsZW1lbnQoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI21hc3Rlci1lcnJvcicpKTtcclxuICAgICAgICAgICAgaWYgKG1hc3RlckVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICAkbG9jYXRpb24uaGFzaCgnbWFzdGVyLWVycm9yJyk7XHJcbiAgICAgICAgICAgICAgICAkYW5jaG9yU2Nyb2xsKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIENyZWF0ZXMgYSBmaWxlbmFtZSBiYXNlZCBvbiBIQyBzcGVjaWZpY2F0aW9uc1xyXG4gICAgICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBmdW5jdGlvbiBfY3JlYXRlRmlsZW5hbWUoKSB7XHJcbiAgICAgICAgICAgIHZhciBkcmFmdF9wcmVmaXggPSBcIkRSQUZUUkVQQ09cIjtcclxuICAgICAgICAgICAgdmFyIGZpbmFsX3ByZWZpeCA9IFwiSENSRVBDT1wiO1xyXG4gICAgICAgICAgICB2YXIgZmlsZW5hbWUgPSBcIlwiO1xyXG4gICAgICAgICAgICB2YXIgc2VwYXJhdG9yPVwiLVwiO1xyXG4gICAgICAgICAgICBpZiAodm0udXNlclR5cGUgPT09IElOVEVSTkFMX1RZUEUpIHtcclxuXHJcbiAgICAgICAgICAgICAgICBmaWxlbmFtZSA9IGZpbmFsX3ByZWZpeDtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGZpbGVuYW1lID0gZHJhZnRfcHJlZml4O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh2bS5jb21wYW55LmNvbXBhbnlJZCkge1xyXG4gICAgICAgICAgICAgICAgZmlsZW5hbWUgPSBmaWxlbmFtZSArIHNlcGFyYXRvcisgdm0uY29tcGFueS5jb21wYW55SWQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHZtLmNvbXBhbnkuZW5yb2xtZW50VmVyc2lvbikge1xyXG4gICAgICAgICAgICAgICAgZmlsZW5hbWUgPSBmaWxlbmFtZSArIHNlcGFyYXRvcisgIHZtLmNvbXBhbnkuZW5yb2xtZW50VmVyc2lvbjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmaWxlbmFtZT1maWxlbmFtZS5yZXBsYWNlKFwiLlwiLHNlcGFyYXRvcik7XHJcbiAgICAgICAgICAgIHJldHVybiBmaWxlbmFtZS50b0xvd2VyQ2FzZSgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQG5nZGNjIG1ldGhvZCB1cGRhdGVzIGRhdGEgYW5kIGluY3JlbWVudHMgdmVyc2lvbiBiZWZvcmUgY3JlYXRpbmcganNvblxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGZ1bmN0aW9uIF90cmFuc2Zvcm1GaWxlKCkge1xyXG4gICAgICAgICAgICB1cGRhdGVEYXRlKCk7XHJcbiAgICAgICAgICAgIGlmICghdm0uaXNFeHRlcm4oKSkge1xyXG4gICAgICAgICAgICAgICAgaWYoIXZtLmNvbXBhbnlFbnJvbEZvcm0uJHByaXN0aW5lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdm0uY29tcGFueS5lbnJvbG1lbnRWZXJzaW9uID0gdm0uYXBwbGljYXRpb25JbmZvU2VydmljZS5pbmNyZW1lbnRNYWpvclZlcnNpb24odm0uY29tcGFueS5lbnJvbG1lbnRWZXJzaW9uKTtcclxuICAgICAgICAgICAgICAgICAgICB2bS5jb21wYW55LmFwcGxpY2F0aW9uVHlwZSA9IEFwcGxpY2F0aW9uSW5mb1NlcnZpY2UucHJvdG90eXBlLmdldEFwcHJvdmVkVHlwZSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdm0uY29tcGFueS5lbnJvbG1lbnRWZXJzaW9uID0gdm0uYXBwbGljYXRpb25JbmZvU2VydmljZS5pbmNyZW1lbnRNaW5vclZlcnNpb24odm0uY29tcGFueS5lbnJvbG1lbnRWZXJzaW9uKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB2bS5jb21wYW55U2VydmljZS50cmFuc2Zvcm1Ub0ZpbGVPYmoodm0uY29tcGFueSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAkc2NvcGUuJHdhdGNoKFwibWFpbi5jb21wYW55RW5yb2xGb3JtLiRlcnJvclwiLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIC8vZGlzYWJsZVhNTFNhdmUoKVxyXG4gICAgICAgICAgICB2bS51cGRhdGVFcnJvclN1bW1hcnkoKTtcclxuICAgICAgICB9LCB0cnVlKTtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZGlzYWJsZVhNTFNhdmUoKSB7XHJcbiAgICAgICAgICAgIHZhciBpc0FwcHJvdmVkRXh0ZXJuYWwgPSAodm0uY29tcGFueS5hcHBsaWNhdGlvblR5cGUgPT09IHZtLmNvbXBhbnlTZXJ2aWNlLmdldEFwcHJvdmVkVHlwZSgpICYmIHZtLmlzRXh0ZXJuKCkpO1xyXG4gICAgICAgICAgICB2bS5kaXNhYmxlRHJhZnRCdXR0b24gPSBpc0FwcHJvdmVkRXh0ZXJuYWw7XHJcbiAgICAgICAgICAgIHZtLmRpc2FibGVYTUwgPSB2bS5jb21wYW55RW5yb2xGb3JtLiRpbnZhbGlkIHx8IGlzQXBwcm92ZWRFeHRlcm5hbDsgLy91c2VkIHRvIGRpc2FibGUgdGhlIGdlbmVyYXRlIHhtbCBidXR0b25cclxuICAgICAgICAgICAgLy92bS5zaG93RXJyb3JTdW1tYXJ5PXRydWU7XHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZGlzYWJsZUpTT05TYXZlKCkge1xyXG5cclxuICAgICAgICAgICAgdm0uZGlzYWJsZUpzb24gPSAodm0uY29tcGFueS5hcHBsaWNhdGlvblR5cGUgPT09IHZtLmNvbXBhbnlTZXJ2aWNlLmdldEFwcHJvdmVkVHlwZSgpICYmIHZtLmlzRXh0ZXJuKCkpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBfc2V0Q29tcGxldGUoKSB7XHJcbiAgICAgICAgICAgIHZtLmlzSW5jb21wbGV0ZSA9ICF2bS5jb21wYW55LmNvbXBhbnlJZDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIF9sb2FkRmlsZUNvbnRlbnQoZmlsZUNvbnRlbnQpIHtcclxuICAgICAgICAgICAgaWYgKCFmaWxlQ29udGVudClyZXR1cm47XHJcbiAgICAgICAgICAgIHZtLmNvbXBhbnlTZXJ2aWNlID0gbmV3IENvbXBhbnlTZXJ2aWNlKCk7XHJcbiAgICAgICAgICAgIHZhciByZXN1bHRKc29uID0gZmlsZUNvbnRlbnQuanNvblJlc3VsdDtcclxuICAgICAgICAgICAgaWYgKHJlc3VsdEpzb24pIHtcclxuICAgICAgICAgICAgICAgIHZtLmNvbXBhbnlTZXJ2aWNlLnRyYW5zZm9ybUZyb21GaWxlT2JqKHJlc3VsdEpzb24pO1xyXG4gICAgICAgICAgICAgICAgdm0uY29tcGFueSA9IHt9O1xyXG4gICAgICAgICAgICAgICAgYW5ndWxhci5leHRlbmQodm0uY29tcGFueSwgdm0uY29tcGFueVNlcnZpY2UuZ2V0TW9kZWxJbmZvKCkpO1xyXG4gICAgICAgICAgICAgICAgdm0uaGFzQWRkckltcENvbXBhbnlOYW1lKHZtLmNvbXBhbnkuYWRkcmVzc0xpc3QpO1xyXG4gICAgICAgICAgICAgICAgX3NldENvbXBsZXRlKCk7XHJcbiAgICAgICAgICAgICAgICB2bS5zZXRBbWVuZCgpO1xyXG4gICAgICAgICAgICAgICAgdm0uaXNGaWxlTG9hZGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIHZtLnNob3dFcnJvclN1bW1hcnk9ZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB2bS5jb21wYW55RW5yb2xGb3JtLiRzZXREaXJ0eSgpO1xyXG4gICAgICAgICAgICAgICAgdm0uc2hvd0FtZW5kTm90ZSA9ICh2bS5jb21wYW55LmFwcGxpY2F0aW9uVHlwZSA9PT0gdm0uY29tcGFueVNlcnZpY2UuZ2V0QXBwcm92ZWRUeXBlKCkgJiYgdm0uaXNFeHRlcm4oKSk7XHJcbiAgICAgICAgICAgICAgICB2bS5jb21wYW55LmFwcGxpY2F0aW9uVHlwZVRleHQgPSAkdHJhbnNsYXRlLmluc3RhbnQodm0uY29tcGFueS5hcHBsaWNhdGlvblR5cGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGRpc2FibGVYTUxTYXZlKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBuZ2RvYyBtZXRob2QgdG8gc2V0IHRoZSBhcHBsaWNhdGlvbiB0eXBlIHRvIGFtZW5kXHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICB2bS5zZXRBcHBsVHlwZSA9IGZ1bmN0aW9uICh0eXBlKSB7XHJcblxyXG4gICAgICAgICAgICB2bS5jb21wYW55LmFwcGxpY2F0aW9uVHlwZSA9IHR5cGU7XHJcbiAgICAgICAgICAgIHZtLmNvbXBhbnkuYXBwbGljYXRpb25UeXBlVGV4dCA9ICR0cmFuc2xhdGUuaW5zdGFudCh2bS5jb21wYW55LmFwcGxpY2F0aW9uVHlwZSk7XHJcbiAgICAgICAgICAgIGRpc2FibGVYTUxTYXZlKCk7XHJcbiAgICAgICAgICAgIHZtLnNldEFtZW5kKCk7XHJcbiAgICAgICAgICAgIHZtLmNvbXBhbnkucmVhc29uQW1lbmQ9XCJcIjtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvL3VzZWQgb24gdXBkYXRlXHJcbiAgICAgICAgdm0ub25VcGRhdGVBZGRyZXNzTGlzdCA9IGZ1bmN0aW9uIChuZXdMaXN0KSB7XHJcbiAgICAgICAgICAgIHZtLmNvbXBhbnkuYWRkcmVzc0xpc3QgPSBuZXdMaXN0O1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZtLmdldE5ld0FkZHJlc3MgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB2bS5jb21wYW55U2VydmljZS5jcmVhdGVBZGRyZXNzUmVjb3JkKCk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdm0uZ2V0TmV3Q29udGFjdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHZtLmNvbXBhbnlTZXJ2aWNlLmNyZWF0ZUNvbnRhY3RSZWNvcmQoKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvL1RPRE8gcmVtb3ZlP1xyXG4gICAgICAgIHZtLnVwZGF0ZUFkZHJlc3NSZWNvcmQgPSBmdW5jdGlvbiAoYWRkcmVzcykge1xyXG4gICAgICAgICAgICBpZiAoIWFkZHJlc3MpIHJldHVybjtcclxuICAgICAgICAgICAgdmFyIGlkeCA9IHZtLmNvbXBhbnkuYWRkcmVzc0xpc3QuaW5kZXhPZihcclxuICAgICAgICAgICAgICAgICRmaWx0ZXIoJ2ZpbHRlcicpKHZtLmNvbXBhbnkuYWRkcmVzc0xpc3QsIHthZGRyZXNzSUQ6IGFkZHJlc3MuYWRkcmVzc0lEfSwgdHJ1ZSlbMF1cclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgdm0uY29tcGFueS5hZGRyZXNzTGlzdFtpZHhdID0gYWRkcmVzcztcclxuICAgICAgICAgICAgdmFyIHRlbXAgPSB2bS5jb21wYW55LmFkZHJlc3NMaXN0O1xyXG4gICAgICAgICAgICB2bS5jb21wYW55LmFkZHJlc3NMaXN0ID0gW107XHJcbiAgICAgICAgICAgIHZtLmNvbXBhbnkuYWRkcmVzc0xpc3QgPSB0ZW1wO1xyXG4gICAgICAgICB9O1xyXG5cclxuICAgICAgICB2bS5oYXNBZGRySW1wQ29tcGFueU5hbWUgPSBmdW5jdGlvbiAoYWRkcmVzc0xpc3QpIHtcclxuICAgICAgICAgICAgdm0uYWRkckltcENvbXBhbnlOYW1lID0gW107XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPTA7IGk8IGFkZHJlc3NMaXN0Lmxlbmd0aDsgaSsrKXtcclxuICAgICAgICAgICAgICAgIGlmKGFkZHJlc3NMaXN0W2ldLmFkZHJlc3NSb2xlLmltcG9ydGVyKXtcclxuICAgICAgICAgICAgICAgICAgICB2bS5hZGRySW1wQ29tcGFueU5hbWUucHVzaChhZGRyZXNzTGlzdFtpXS5jb21wYW55TmFtZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHZtLmFkZHJJbXBDb21wYW55TmFtZTtcclxuICAgICAgICB9O1xyXG5cclxuXHJcbiAgICAgICAgdm0uaXNJbXBDb21wYW55TmFtZVVzZWQgPSBmdW5jdGlvbiAoY29tcGFueU5hbWUpIHtcclxuXHJcbiAgICAgICAgICAgZm9yICh2YXIgaT0wOyBpPCB2bS5jb21wYW55LmNvbnRhY3RMaXN0Lmxlbmd0aDsgaSsrKXtcclxuICAgICAgICAgICAgICAgIGlmKGNvbXBhbnlOYW1lICE9PVwiXCIgJiYgY29tcGFueU5hbWUgPT09IHZtLmNvbXBhbnkuY29udGFjdExpc3RbaV0uaW1wQ29tcGFueU5hbWUpe1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvL1RPRE8gcmVtb3ZlP1xyXG4gICAgICAgIHZtLm9uVXBkYXRlQ29udGFjdExpc3QgPSBmdW5jdGlvbiAobmV3TGlzdCkge1xyXG4gICAgICAgICAgICB2bS5jb21wYW55LmNvbnRhY3RMaXN0ID0gbmV3TGlzdDtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAbmdkb2MgbWV0aG9kIC11cGRhdGVzIHRoZSBkYXRlIGZpZWxkIHRvIHRoZSBjdXJyZW50IGRhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBmdW5jdGlvbiB1cGRhdGVEYXRlKCkge1xyXG4gICAgICAgICAgICBpZiAodm0uY29tcGFueSkge1xyXG4gICAgICAgICAgICAgICAgdm0uY29tcGFueS5kYXRlU2F2ZWQgPSB2bS5hcHBsaWNhdGlvbkluZm9TZXJ2aWNlLmdldFRvZGF5RGF0ZSgpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZtLmlzRXh0ZXJuID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdm0udXNlclR5cGUgPT09IEVYVEVSTkFMX1RZUEU7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAbmdkb2MgbWV0aG9kIHdoZW4gYSBmb3JtIGdldHMgYXBwcm92ZWRcclxuICAgICAgICAgKiByZW1vdmUgYW55IGFtZW5kbWVudCBjaGVja2JveGVzXHJcbiAgICAgICAgICovXHJcblxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBDbG9zZXMgdGhlIGluc3RydWN0aW9uIGFsZXJ0c1xyXG4gICAgICAgICAqIEBwYXJhbSB2YWx1ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHZtLmNsb3NlQWxlcnQgPSBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgaWYgKGFuZ3VsYXIuaXNVbmRlZmluZWQodmFsdWUpKSByZXR1cm47XHJcbiAgICAgICAgICAgIGlmICh2YWx1ZSA8IHZtLmFsZXJ0cy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIHZtLmFsZXJ0c1t2YWx1ZV0gPSBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8qXHJcbiAgICAgICAgTWFrZXMgYW4gaW5zdHJ1Y3Rpb24gdmlzaWJsZSBiYXNlZWQgb24gYW4gaW5kZXggcGFzc2VkIGluXHJcbiAgICAgICAgSW5kZXggc2V0cyB0aGUgVUkgc3RhdGUgaW4gdGhlIGFsZXJ0cyBhcnJheVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHZtLmFkZEluc3RydWN0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XHJcblxyXG4gICAgICAgICAgICBpZiAoYW5ndWxhci5pc1VuZGVmaW5lZCh2YWx1ZSkpIHJldHVybjtcclxuICAgICAgICAgICAgaWYgKHZhbHVlIDwgdm0uYWxlcnRzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgdm0uYWxlcnRzW3ZhbHVlXSA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBJbmNyZW1lbnRzIHRoZSBjb251bnRlciB0byBzZW5kIGEgc2lnbmFsIHRvIHVwZGF0ZSB0aGUgZXJyb3Igc3VtbWFyeSBtb2R1bGVcclxuICAgICAgICAgICovXHJcbiAgICAgICAgdm0udXBkYXRlRXJyb3JTdW1tYXJ5PWZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgIHZtLnVwZGF0ZVN1bW1hcnk9IHZtLnVwZGF0ZVN1bW1hcnkrMTtcclxuXHJcbiAgICAgICAgfTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBEZXRlcm1pbmVzIGlmIHRoZSBjdXJyZW50IGxhbmd1YWdlIGlzIGZyZW5jaFxyXG4gICAgICAgICAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHZtLmlzRnJlbmNoPWZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgIHJldHVybih2bS5sYW5nIT09IEVOR0xJU0gpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZtLnRlbXA9ZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coJHNjb3BlKVxyXG4gICAgICAgIH07XHJcblxyXG5cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gX3NldElkTmFtZXMoKSB7XHJcbiAgICAgICAgICAgIHZhciBzY29wZUlkPVwiX1wiKyAgJHNjb3BlLiRpZDtcclxuICAgICAgICAgICAgdm0uZm9ybUlkID0gXCJjb21wYW55X2Zvcm1cIiArc2NvcGVJZDtcclxuICAgICAgICAgICAgdm0ucHJpdmFjeVN0YXRlbWVudElEID0gXCJwcml2YWN5X3N0YXRlbWVudFwiICtzY29wZUlkO1xyXG4gICAgICAgICAgICB2bS50eXBlSWQ9XCJkb3NzaWVyX3R5cGVcIisgc2NvcGVJZDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEZvciBpbmRpdmlkdWFsIGNvbnRyb2xzLCB3aGV0aGVyIHRvIHNob3cgdGhlIGVycm9yIGZvciBhIGZpZWRsXHJcbiAgICAgICAgICogQHBhcmFtIGN0cmwuaXNJbnZhbGlkIC0gY29udHJvbCAkaW52YWxpZCBmbGFnXHJcbiAgICAgICAgICogQHBhcmFtIGN0cmwuaXNUb3VjaGVkIC1jb250cm9sICR0b3VjaGVkIGZsYWdcclxuICAgICAgICAgKiBAcmV0dXJucyB7Knxkb3NzaWVyQ3RybC5zaG93RXJyb3JzfVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHZtLnNob3dFcnJvciA9IGZ1bmN0aW9uIChjdHJsKSB7XHJcbiAgICAgICAgICAgIGlmICh2bS5zaG93RXJyb3JTdW1tYXJ5KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZighY3RybCB8fCBjdHJsLiR1bnRvdWNoZWQpe1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiAoKGN0cmwuJGludmFsaWQgJiYgY3RybC4kdG91Y2hlZCkgfHwgKHZtLnNob3dFcnJvclN1bW1hcnkgJiYgY3RybC4kaW52YWxpZCkpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgfVxyXG5cclxufSkoKTtcclxuIl19

!function(){"use strict";angular.module("transactionApp",["transactionMainModule","pascalprecht.translate","ngMessages","ngAria","ui.bootstrap","translations","ngSanitize"])}(),function(){"use strict";function MainController(){var vm=this;vm.userType}angular.module("transactionApp").controller("MainController",MainController)}(),function(){"use strict";angular.module("transactionApp").config(["$translateProvider","$httpProvider","$locationProvider",function($translateProvider,$httpProvider,$locationProvider){$locationProvider.html5Mode({enabled:!0,requireBase:!1,rewriteLinks:!1}),$translateProvider.directivePriority(1),$translateProvider.preferredLanguage("en"),$translateProvider.useLoader("customLoad"),$translateProvider.useSanitizeValueStrategy(null),$translateProvider.forceAsyncReload(!0),$httpProvider.defaults.headers.get||($httpProvider.defaults.headers.get={}),$httpProvider.defaults.headers.get["If-Modified-Since"]="Mon, 26 Jul 1997 05:00:00 GMT",$httpProvider.defaults.headers.get["Cache-Control"]="no-cache",$httpProvider.defaults.headers.get.Pragma="no-cache"}])}(),angular.module("translations",[]).config(["$translateProvider",function($translateProvider){$translateProvider.translations("en",{CITY:"City or Town",COUNTRY:"Country",PROVINCE:"Province",POSTAL:"Postal Code",PROVSTATE:"Province or State",STATE:"State",STREET:"Street Address",ZIP:"Zip Code",COMPANY:"Company",ADD_ADDRESS:"Add Address",CITY_TOWN:"City or Town",SAVE_ADDR:"Save Address",DELETE_ADDR:"Delete Address",ADDR_INFO:"Address Information",ADDR_DETAILS:"Address Details",ADDR_ROLE_LEGEND:"Select one or more roles for this company",ADDR_REP_ROLE_LEGEND:"Select one or more roles for this company representative",PRODUCTS_IMPORTED:"Imported Products",PRODUCT_TYPES:"Products imported by this Company",ALL_PRODUCTS:"All Products",SELECTED_PRODUCTS:"Some Products",IDENTIFY_PRODUCTS:"Provide the Dossier Identifiers for the products that are imported by this Company",ADD_DOSSIER_ID:"Add Dossier ID",COUNTRY_CHOOSE:"Choose a country",COUNTRY_SEARCH:"Select or Search for country",PROVINCELIST:"Province or State"}),$translateProvider.translations("fr",{CITY:"Ville",COUNTRY:"Pays",PROVINCE:"Province",POSTAL:"Code postal",PROVSTATE:"Province ou état",STATE:"État",STREET:"Rue",ZIP:"Code ZIP",COMPANY:"Compagnie",ADD_ADDRESS:"Ajouter Addresse",CITY_TOWN:"Ville",SAVE_ADDR:"Enregistrer l'adresse",DELETE_ADDR:"Supprimer Addresse",ADDR_INFO:"Information d'adresse",ADDR_DETAILS:"Détails de l'adresse",ADDR_ROLE_LEGEND:"Sélectionner un ou plusieurs rôles pour cette compagnie",ADDR_REP_ROLE_LEGEND:"Sélectionner un ou plusieurs rôles pour ce représentant de la compagnie",PRODUCTS_IMPORTED:"Produits importé",PRODUCT_TYPES:"Produits importé par cette compagnie",ALL_PRODUCTS:"Tous les produits",SELECTED_PRODUCTS:"Certain produits",IDENTIFY_PRODUCTS:"Fournir les numéros de dossier pour les produits importés par cette compagnie",ADD_DOSSIER_ID:"Ajouter un numéro de dossier",COUNTRY_CHOOSE:"Choisir un pays",COUNTRY_SEARCH:"Selectionner ou rechercher le pays",PROVINCELIST:"Province or State"}),$translateProvider.translations("en",{AB:"Alberta",BC:"British Columbia",MB:"Manitoba",NB:"New Brunswick",NL:"Newfoundland and Labrador",NT:"Northwest Territories",NS:"Nova Scotia",NU:"Nunavut",ON:"Ontario",PE:"Prince Edward Island",QC:"Quebec",SK:"Saskatchewan",YT:"Yukon",AL:"Alabama",AK:"Alaska",AZ:"Arizona",AR:"Arkansas",CA:"California",CO:"Colorado",CT:"Connecticut",DE:"Delaware",DC:"District of Columbia",FL:"Florida",GA:"Georgia",HI:"Hawaii",ID:"Idaho",IL:"Illinois",IN:"Indiana",IA:"Iowa",KS:"Kansas",KY:"Kentucky",LA:"Louisiana",ME:"Maine",MD:"Maryland",MA:"Massachusetts",MI:"Michigan",MN:"Minnesota",MS:"Mississippi",MOS:"Missouri",MT:"Montana",NE:"Nebraska",NV:"Nevada",NH:"New Hampshire",NJ:"New Jersey",NM:"New Mexico",NY:"New York",NC:"North Carolina",ND:"North Dakota",OH:"Ohio",OK:"Oklahoma",OR:"Oregon",PA:"Pennsylvania",RI:"Rhode Island",SC:"South Carolina",SD:"South Dakota",TN:"Tennessee",TX:"Texas",UT:"Utah",VT:"Vermont",VA:"Virginia",WA:"Washington",WV:"West Virginia",WI:"Wisconsin",WY:"Wyoming"}),$translateProvider.translations("fr",{AB:"Alberta",BC:"Colombie-Britannique",PE:"Île-du-Prince-Édouard",MB:"Manitoba",NB:"Nouveau-Brunswick",NS:"Nouvelle-Écosse",NU:"Nunavut",ON:"Ontario",QC:"Québec",SK:"Saskatchewan",NL:"Terre-Neuve et Labrador",NT:"Territoires du Nord-Ouest",YT:"Yukon",AL:"Alabama",AK:"Alaska",AZ:"Arizona",AR:"Arkansas",CA:"Californie",NC:"Caroline du nord",SC:"Caroline du sud",CO:"Colorado",CT:"Connecticut",ND:"Dakota du nord",SD:"Dakota du sud",DE:"Delaware",DC:"District de Columbia",FL:"Floride",GA:"Géorgie",HI:"Hawaii",ID:"Idaho",IL:"Illinois",IN:"Indiana",IA:"Iowa",KS:"Kansas",KY:"Kentucky",NY:"L'état de New York",WA:"L'état de washington",LA:"Louisiane",ME:"Maine",MD:"Maryland",MA:"Massachusetts",MI:"Michigan",MN:"Minnesota",MS:"Mississippi",MOS:"Missouri",MT:"Montana",NE:"Nebraska",NV:"Nevada",NH:"New Hampshire",NJ:"New Jersey",NM:"Nouveau-mexique",OH:"Ohio",OK:"Oklahoma",OR:"Oregon",PA:"Pennsylvanie",RI:"Rhode Island",TN:"Tennessee",TX:"Texas",UT:"Utah",VT:"Vermont",VA:"Virginie",WV:"Virginie-occidentale",WI:"Wisconsin",WY:"Wyoming"}),$translateProvider.translations("en",{FIRSTNAME:"First Name",LASTNAME:"Last Name",INITIALS:"Initials",LANGCORRESPOND:"Language of Correspondence",JOBTITLE:"Job Title",SALUTATION:"Salutation",SALUT_MR:"Mr.",SALUT_MS:"Ms.",SALUT_DR:"Dr.",SALUT_MRS:"Mrs.",ROLE_PRIMARY:"Primary",ROLE_SECONDARY:"Alternate",CONTACTEMAIL:"Email",FAX_NUMBER:"Fax Number",PHONE_EXT:"Phone Extension",ROLES:"Roles",PHONENUMBER:"Phone Number",CONTACT_INFO:"Company Representative Information",REP_CONTACT:"Regulatory Enrolment Process Contact",ONE_ROLE:"Role",CONTACT_DETAILS:"Company Representative Details",ADD_CONTACT:"Add REP Contact",CONTACT_ROLE_LEGEND:"Select one or more roles for this company representative",CONTACT_ROLE_INSTRUCT:"Company Representative Role Instructions",ADD_REPRES:"Add Company Representative",DELETE_REPRES:"Delete Company Rep.",SAVE_REPRES:"Save Company Rep.",IMP_COMPANY_NAME:"Canadian Importer Company Name"}),$translateProvider.translations("fr",{FIRSTNAME:"Prénom",LASTNAME:"Nom de famille",INITIALS:"Initiales",LANGCORRESPOND:"Langue de correspondance",JOBTITLE:"Titre",SALUTATION:"Appel",SALUT_MR:"M.",SALUT_MS:"Mme",SALUT_DR:"Dr.",SALUT_MRS:"Mlle",ROLE_PRIMARY:"Primaire",ROLE_SECONDARY:"Alterner",CONTACTEMAIL:"Courriel",FAX_NUMBER:"Numéro de télécopieur",PHONE_EXT:"Extension de téléphone",ADDR_ROLES:"Rôles",PHONENUMBER:"Numéro de téléphone",CONTACT_INFO:"Renseignements sur le représentant de la compagnie",REP_CONTACT:"Personne-ressource pour le PIR",ONE_ROLE:"Rôle",CONTACT_DETAILS:"Détails du représentant de la compagnie",ADD_CONTACT:"Ajouter la personne-ressource pour le PIR",CONTACT_ROLE_LEGEND:"Sélectionner un ou plusieurs rôles pour ce représentant de la compagnie",ADD_REPRES:"Ajouter un représentant de la compagnie",DELETE_REPRES:"Supprimer le représentant de la compagnie",SAVE_REPRES:"Enregistrer le représentant de la compagnie",ROLES:"Rôles",IMP_COMPANY_NAME:"Nom de la compagnie de l'importateur canadien"}),$translateProvider.translations("en",{APPL_STATUS:"Enrolment Status",ENROL_VERSION:"Enrolment Version",DATE_SAVED:"Date Last Saved",AMEND_ENROL:"Amend Enrolment",AMEND_MSG:"Edit records to be amended below.",REASON_AMEND:"Reason for filing"}),$translateProvider.translations("fr",{APPL_STATUS:"Statut de l'inscription",ENROL_VERSION:"Version de l'inscription",DATE_SAVED:" Date du dernier enregistrement",AMEND_ENROL:"Modifier l'inscription",AMEND_MSG:"Changer les enregistrements à modifier ci-dessous.",REASON_AMEND:"Raison de déposer"}),$translateProvider.translations("en",{SELECT_LOAD:"Select a file to load",MSG_SUCCESS_LOAD:"The file was loaded successfully",MSG_ERR_JSONPARSE:"Error: there was an error parsing the working file.",MSG_ERR_XMLPARSE:"Error: there was an error parsing the draft XML file.",MSG_ERR_FILE_LOAD:"Error: there was a problem loading the file.",MSG_ERR_FILE_TYPE:"Error: An invalid file type was selected.",MSG_ERR_FORM_TYPE:"Error: the wrong form type was selected for this form.",MSG_ERR_CHECKSUM_FAIL:"Error: the checksum in the file does not match the calculated checksum",MSG_ERR_FILE_VERSION:"Error: An invalid file version was selected."}),$translateProvider.translations("fr",{SELECT_LOAD:"Sélectionnez un fichier à charger",MSG_SUCCESS_LOAD:"Le fichier a été chargé avec succès",MSG_ERR_JSONPARSE:"Erreur: il y a eu une erreur en analysant le fichier de travail.",MSG_ERR_XMLPARSE:"Erreur: il y avait une erreur d'analyse du projet de fichier XML,",MSG_ERR_FILE_LOAD:"Erreur: il y a eu un problème lors du chargement du fichier.",MSG_ERR_FILE_TYPE:"Erreur: un type de fichier invalide a été sélectionné.",MSG_ERR_FORM_TYPE:"Erreur: le type de formulaire incorrect a été sélectionné pour ce formulaire.",MSG_ERR_CHECKSUM_FAIL:"Erreur: La somme de contrôle dans le fichier ne correspond pas à la somme de contrôle calculée.",MSG_ERR_FILE_VERSION:"Erreur: un version de fichier invalide a été sélectionné."}),$translateProvider.translations("en",{Y:"Yes",N:"No",ADD:"Add",DELETEROW:"Delete Row",SELECTEDROW:"Selected Row",REQUIRED:"(required)",ROLES_SELECT:"Select one or more roles for this record",NEW:"New",AMEND:"Amend",APPROVED:"Approved",FINAL:"Final",CLICK_TOGGLE:"Click to toggle the collapse or expand details for this address.",AMEND_RECORD:"Amend Record",en:"English",fr:"French",ADD_RECORD:"Add Record",SAVE_RECORD:"Save Record",DELETE_RECORD:"Delete Record",COPY_RECORD:"Copy Record",DISCARD_CHANGES:"Discard Changes",REPSECONDARY:"Alternate Regulatory Enrolment Process contact",REPPRIMARY:"Regulatory Enrolment Process contact",MAILING:"Regulatory Mailing / Annual Contact Address",BILLING:"Billing Address",MANUFACTURER:"Manufacturer / Sponsor Mailing Address",IMPORTER_ADDRESS:"Canadian Importer Mailing Address",CAN_IMP:"Canadian Importer Contact",CONTACTMAILING:"Regulatory Mailing / Annual Contact",CONTACTBILLING:"Billing Contact",CONTACTMANUFACTURER:"Manufacturer / Sponsor Contact",CONTACT_IMPORTER:"Importer Contact",APPROVE_FINAL:"Generate Final XML",SAVE_DRAFT:"Save Draft XML",PRIMARY:"Primary",SECONDARY:"Alternate",TOGGLE_EXPAND:"Click to toggle collapse or expand details of row",CONTROL_NUMBER:"Control Number",REP_CONTACT_INFO:"Regulatory Enrolment Process Contact Information",SAVE_CONTACT:"Save Contact",DELETE_CONTACT:"Delete Contact",COMPANY_ID:"Company Identifier",DOSSIER_ID:"Dossier Identifier",IMPORTER:"Importer",IMPORTERID:"Importer Company Identifier",IMPORTER_COMPANY_NAME:"Importer Company Name",IMPORTER_COMPANY_ID_IF:"Importer Company Identifier (if applicable)",IMPORTER_COMPANY_NAME_IF:"Importer Company Name (if applicable)",ERRORS:"Errors",UNKNOWN:"Unknown",BIOLOGIC:"Biologic",PHARMACEUTICAL:"Pharmaceutical",VETERINARY:"Veterinary",CLINICAL_TRIAL:"Clinical Trial",HELP_FILE_LOAD:"file load instructions",EXPAND:"Expand",HELP_ACTIVITY_MAIN:"Activity Instructions",HELP_ACTIVITY_REP:"Regulatory Enrolment Process Contact Instructions",CALENDAR:"Pick date from calendar",HIDE_CALENDAR:"Hide Calendar (escape key)",OTHER:"Other",HELP_REP_CONTACT:"Regulatory Enrolment Process Contact Instructions",OTHER_UNITS:"Units other details",COMPANYNAME:"Company Name",FULLLEGALNAME:" (Full Legal Name)",BUSINESSNUMBER:"Business Number",ACOMPANYNAME:"Company Name (Full legal name - no abbreviations)",COPY:"Copy",DELETE:"Delete",SAVE_WORKING:"Save Working Copy",COMPANY_NOABBREV:"Company Name (Full Legal Name)",CLOSE_ALERT:"Collapse instructions",COLLAPSE:"Collapse",CONTROL_NUM:"Control Number",OTHER_DETAILS:"Other - specify",PROD_NAME:"Product Name",PROD_NAME_HELP:"Product Name Instructions",PROP_NAME_HELP:"Proper, Common or Non-proprietary Name Instructions",RELATED_INFO_HELP:"Related Information Instructions",DOSSIER_TYPE:"Dossier Type",LEAST_5_CHAR:" (5 characters)","5_OR_6_CHAR":" ( 5 or 6 characters)",LEAST_7_CHAR:" (7 characters)",INCLUDE_AREA_CODE:" (including area code)",LEAST_6_DIGIT:" (6 digits only)",LEAST_5_DIGIT:" (5 digits only)",LEAST_9_CHAR:" (9 characters)",INSTRUCTION:"Instruction",RETURN_INSTRUCTION:"Return to instruction reference ",PRIVACY_NOTICE_STATEMENT:"Privacy Notice Statement",SECURITY_DISCLAIMER:"Security Disclaimer",PRIVACY_STATEMENT:"By submitting your personal information, you are consenting to its collection, use and disclosure in accordance with the Privacy Notice Statement.",FOOTNOTE_INSTRUCTION:"Instructions for completing sections on form",SECTION_IS_NOT_VISIBLE:"[ This section may not be visible. ]",FAX_NOT_AVAILABLE_1:" (Use 0000000000 if not available)",FAX_NOT_AVAILABLE_2:" (Use 0000000000 if not available) By not entering a fax number, you authorise receipt of billing communication by email.",NOT_APPLICABLE:"Not applicable",D21:"Biologic (Human)",D22:"Pharmaceutical (Human)",D24:"Veterinary",D26:"Clinical Trial",D21_DESCR:"Biologic dossier applies to all biologic products and radiopharmaceuticals under the Biologics and Radiopharmaceutical Drugs Directorate (BRDD) and Marketed Health Products Directorate (MHPD) mandate.",D22_DESCR:"Pharmaceutical dossier applies to all pharmaceutical products for human use, non-prescription and ethical products, disinfectants under the Pharmaceutical Drugs Directorate (PDD),  Natural and Non-Prescription Health Products Directorate (NNHPD) and Marketed Health Products Directorate (MHPD) mandates.",D24_DESCR:"Veterinary dossier applies to all pharmaceuticals for veterinary use, non-prescription and ethical products under the Veterinary Drugs Directorate (VDD) mandate",BROWSER:"Browser",TABLE_EXPANDED_STATE:"Expanded State",PROTECTED_B:'Protected "B" when completed',ROUTING_ID:"Routing Identifier",REFERRER:" referrer",CHAR_6_DIGITS:" (a lowercase letter followed by 6 numbers)",FORMAT_TYPE_MINLENGTH:"Incorrect format - less than minimum length",FORMAT_TYPE_PATTERN:"Incorrect format - the dossier identifier is incorrect for this dossier type. Please verify the dossier identifer and dossier type for your product."}),$translateProvider.translations("fr",{Y:"Oui",N:"Non",ADD:"fr_Add",DELETEROW:"fr_Delete Row",SELECTEDROW:"fr_Selected Row",REQUIRED:"(obligatoire)",ROLES_SELECT:"fr_Select one or more roles for this record",NEW:"Nouvelle",AMEND:"Modification",APPROVED:"fr_Approved",FINAL:"Finale",CLICK_TOGGLE:"fr_Click to toggle the collapse or expand details for this address.",AMEND_RECORD:"fr_Amend Record",en:"Anglais",fr:"Français",ADD_RECORD:"Ajouter un enregistrement",SAVE_RECORD:"Enregistrer",DELETE_RECORD:"Supprimer l'enregistrement",COPY_RECORD:"Copier",DISCARD_CHANGES:"Éliminer les modifications",REPSECONDARY:"Personne-resource supplémentaire pour le processus d'inscription réglemetaire",REPPRIMARY:"Personne-ressource pour le processus d'inscription réglementaire",MAILING:"Contact pour le l'address courrier réglementaire / adresse pour l'annuelle",BILLING:"Adresse de facturation",MANUFACTURER:"Adresse postale du fabricant / promoteur",IMPORTER_ADDRESS:"Adresse postale de l'importateur canadien",CONTACTMAILING:"Courrier réglementaire / adresse de personne-ressource pour l'annuelle",CAN_IMP:"Personne-ressource pour l'importateur canadien",CONTACTBILLING:"Personne-ressource de facturation",CONTACTMANUFACTURER:"Personne-ressource du fabricant/promoteur",CONTACT_IMPORTER:"Personne-ressource de l'importateur",APPROVE_FINAL:"Générer le XML finale",SAVE_DRAFT:"Enregistrer le brouillon XML",PRIMARY:"fr_Primary",SECONDARY:"fr_Alternate",TOGGLE_EXPAND:"Cliquez pour réduire ou ouvrir les détails de la ligne ",CONTROL_NUMBER:"Numéro de contrôle",REP_CONTACT_INFO:"fr_Main Contact Information",SAVE_CONTACT:"fr_Save Contact",DELETE_CONTACT:"fr_Delete Contact",COMPANY_ID:"Numéro de la compagnie",DOSSIER_ID:"Numéro de dossier",IMPORTER:"Importateur",IMPORTERID:"Numéro de compagnie de l'importateur",IMPORTER_COMPANY_NAME:"Nom de compagnie de l'importateur",IMPORTER_COMPANY_ID_IF:"fr_Importer Company Identification (if applicable)",IMPORTER_COMPANY_NAME_IF:"fr_Importer Company Name (if applicable)",ERRORS:"Erreurs",UNKNOWN:"Inconnu",BIOLOGIC:"fr_Biologic",PHARMACEUTICAL:"fr_Pharmaceutical",HELP_FILE_LOAD:"fr_File Load Instructions",EXPAND:"fr_Expand",HELP_ACTIVITY_MAIN:"fr_Activity Instructions",HELP_ACTIVITY_REP:"fr_Regulatory Enrolment Process Contact Instructions",CALENDAR:"fr_Pick date from calendar",HIDE_CALENDAR:"fr_Hide Calendar (escape key)",OTHER:"Autre",HELP_REP_CONTACT:"Regulatory Enrolment Process Contact Instructions",OTHER_UNITS:"Unités, autre détails",COMPANYNAME:"Nom de la compagnie",FULLLEGALNAME:" (nom légal complet)",BUSINESSNUMBER:"Numéro d'entreprise",ACOMPANYNAME:"Nom de la compagnie (nom légal complet, sans abbréviation)",COPY:"fr_Copy",DELETE:"Supprimer",SAVE_WORKING:"Enregistrer une copie de travail",COMPANY_NOABBREV:"Nom de la compagnie (nom légal complet)",CLOSE_ALERT:"Minimiser les instructions",COLLAPSE:"Minimiser les",CONTROL_NUM:"Numéro de contrôle",OTHER_DETAILS:"Autre détails",PROD_NAME:"Nom du produit",PROD_NAME_HELP:"fr_Product Name Instructions",PROP_NAME_HELP:"fr_Proper, Common or Non-proprietary Name Instructions",RELATED_INFO_HELP:"fr_Related Information Instructions",DOSSIER_TYPE:"Type de dossier",LEAST_5_CHAR:" fr_(at least 5 characters)","5_OR_6_CHAR":" (5 ou 6 caractères)",LEAST_7_CHAR:" (7 caractères)",INCLUDE_AREA_CODE:" (y compris indicatif régional)",LEAST_6_DIGIT:" (6 chiffres seulement)",LEAST_5_DIGIT:" (5 chiffres seulement)",LEAST_9_CHAR:" (9 caractères)",INSTRUCTION:"Instructions",RETURN_INSTRUCTION:"Revenir à la référence de l'instruction ",PRIVACY_STATEMENT_HELP:"fr_View Privacy Notice Statement",PRIVACY_NOTICE_STATEMENT:"Énoncé de confidentialité",SECURITY_DISCLAIMER:"Avis de non-responsabilité concernant la sécurité",PRIVACY_STATEMENT:"En soumettant vos renseignements personnels, vous consentez à sa collecte, à son utilisation et à sa divulgation conformément à l'énoncé de confidentialité.",FOOTNOTE_INSTRUCTION:"Instructions pour compléter les sections du formulaire",SECTION_IS_NOT_VISIBLE:"[ Cette section peut ne pas être visible. ]",FAX_NOT_AVAILABLE_1:" (Si pas disponible, utilisez 0000000000)",FAX_NOT_AVAILABLE_2:" (Si pas disponible, utilisez 0000000000) Si vous n’indiquez pas un numéro de télécopieur, vous autorisez la réception de la communication de facturation par courriel.",NOT_APPLICABLE:"fr_Not applicable",D21:"Biologique (Humaine)",D22:"Pharmaceutique (Humaine)",D24:"Vétérinaire",D26:"Essai clinique",D21_DESCR:"Le dossier biologique s’applique à tous les produits biologiques et radiopharmaceutiques relevant du mandat de la Direction des médicaments biologiques et radiopharmaceutiques (DMBR) et de la Direction des produits de santé commercialisés (DPSC).",D22_DESCR:"Le dossier pharmaceutique s’applique à tous les produits pharmaceutiques, en sans ordonnance et désinfectants relevant du mandat de la Direction des médicaments pharmaceutiques (DMP), de la Direction des produits de santé naturels et sans ordonnance (DPSNSO) et de la Direction des produits de santé commercialisés (DPSC).",D24_DESCR:"Le dossier vétérinaire s'applique à tous les produits pharmaceutiques à usage vétérinaire, sans ordonnance et éthiques relevant du mandat de la Direction des médicaments vétérinaires (DMV)",BROWSER:"Navigateur",TABLE_EXPANDED_STATE:"État ouvert",PROTECTED_B:'Protégé "B" une fois rempli',ROUTING_ID:"Identificateur  d'acheminement",REFERRER:" référent",CHAR_6_DIGITS:" (composé d’une lettre minuscule suivie de six chiffres)",FORMAT_TYPE_MINLENGTH:"Format incorrect - moins que la longueur minimale",FORMAT_TYPE_PATTERN:"Format incorrect - le numéro de dossier est incorrect pour ce type de dossier. Veuillez vérifier le numéro de dossier et le type de dossier pour votre produit."}),$translateProvider.translations("en",{MSG_ERR_MAND:"This field is required",MSG_ERR_EMAIL_FORMAT:"Please enter a valid email address.",MSG_ERR_ROLE:"This field is required",MSG_ERR_DISITYPE:"Please select at least one disinfectant type",MSG_ERR_ADDRESS:"Please select at least one address",MSG_ERR_CONTACT_NUM:"All the roles have to be used for the contacts",MSG_ERR_PHONE_FORMAT:"The format is not valid",MSG_ERR_FAX_FORMAT:"The format is not valid",MSG_ERR_ALLROLE:"The roles of manufacturer, mailing, billing, and primary REP contact  have not all been selected among the list of contacts",MSG_ERR_ADDRESSSROLE:"The roles of manufacturer, mailing, and billing have not all been selected among the list of addresses",MSG_ERR_POSTAL:"Please specify a valid postal code",MSG_ERR_ZIP:"Please specify a valid zip code.",MSG_ERR_DATE_FORMAT:"Please enter a valid date.",MANUFACT_SEL:"Role already Selected",MAIL_SEL:"Role already Selected",BILLING_SEL:"Role already Selected",IMPORTER_SEL:"Role already Selected",REPPRIM_SEL:"Role already Selected",REPALT_SEL:"Role already Selected",MSG_LENGTH_MIN5:"Must be five numbers.",MSG_LENGTH_6:"Less than minimum length.",MSG_LENGTH_6NUM:"Less than minimum length.",MSG_LENGTH_6NUM_CN:"Must be six numbers",MSG_LENGTH_8NUM:"Less than minimum length.",MSG_LENGTH_7:"Incorrect format - Less than minimum length.",MSG_LENGTH_7NUM:"Less than minimum length.",ONE_REP:"At least one contact is required.",MSG_ERR_NOTIF_SEL:"Please select at least one notifiable change.",MSG_ERR_MIN_POS:"Must be a positive number",MSG_ERR_MAX:"Exceeds the maximum",MSG_FORMAT_CHAR_6DIGITS:"ID should be a letter plus 6 digits.",MSG_ERR_DUPLICATED_SYSTEM:"Duplicated System.",MSG_FORMAT_ALPHA_NUMBERIC:"Incorrect format - must be lowercase letter followed by six numbers",MSG_ERR_INVALID_END_DATE:"End Date should not be earlier than Start Date.",MSG_DAY_MAX:"The value must be less than or equal to 999",MSG_HOUR_MAX:"The value must be less than or equal to 99"}),$translateProvider.translations("fr",{MSG_ERR_MAND:"Ce champ est obligatoire.",MSG_ERR_ROLE:"fr_Please select at least one role",MSG_ERR_DISITYPE:"Veuillez sélectionner au moins un type de désinfectant",MSG_ERR_ADDRESS:"fr_Please select at least one address",MSG_ERR_EMAIL_FORMAT:"Veuillez fournir une adresse courriel valide.",MSG_ERR_CONTACT_NUM:"fr_All the roles have to be used for the company contacts",MSG_ERR_PHONE_FORMAT:"Veuillez fournir un numéro de téléphone valide.",MSG_ERR_FAX_FORMAT:"Veuillez fournir un numéro de télécopieur valide.",MSG_ERR_ALLROLE:"fr_Across the contact records, the roles of manufacturer, mailing, billing, and REP primary contact must be selected",MSG_ERR_ADDRESSSROLE:"fr_The roles of manufacturer, mailing, and billing have not all been selected among the list of addresses",MSG_ERR_POSTAL:"Veuillez fournir un code postal valide",MSG_ERR_ZIP:"Veuillez fournir un code postal valide.",MSG_ERR_DATE_FORMAT:"Veuillez fournir une une date valide.",MANUFACT_SEL:"Rôle déjà sélectionné",MAIL_SEL:"Rôle déjà sélectionné",BILLING_SEL:"Rôle déjà sélectionné",IMPORTER_SEL:"fr_Importer Role already Selected",REPPRIM_SEL:"Rôle déjà sélectionné",REPALT_SEL:"Rôle déjà sélectionné",MSG_LENGTH_MIN5:"Veuillez fournir 5 chiffres.",MSG_LENGTH_6:"Veuillez fournir au moins 6 caractères.",MSG_LENGTH_6NUM:"Veuillez fournir 6 chiffres.",MSG_LENGTH_6NUM_CN:"Veuillez fournir 6 chiffres.",MSG_LENGTH_8NUM:"Veuillez fournir 8 chiffres.",MSG_LENGTH_7:"Format incorrect - Veuillez fournir 7 caractères.",MSG_LENGTH_7NUM:"Veuillez fournir  7 chiffres.",ONE_REP:"Au moins un contact est requis",MSG_ERR_NOTIF_SEL:"Sélectionnez au moins un changement de déclaration",MSG_ERR_MIN_POS:"Doit être un nombre positif",MSG_ERR_MAX:"Dépasse le maximum.",MSG_FORMAT_CHAR_6DIGITS:"fr_ID should be a letter plus 6 digits.",MSG_ERR_DUPLICATED_SYSTEM:"fr_Duplicated System.",MSG_FORMAT_ALPHA_NUMBERIC:"Format incorrect - composé d’une lettre suivie de six chiffres",MSG_ERR_INVALID_END_DATE:"La date de fin ne doit pas être antérieure à la date de début",MSG_DAY_MAX:"La valeur doit être inférieure ou égale à 999",MSG_HOUR_MAX:"La valeur doit être inférieure ou égale à 99"}),$translateProvider.translations("en",{ADD_TRANSACTION:"New Record",SEQUENCE_NUM:"Sequence Number",NEW:"NEW",EXISTING:"EXISTING",DATE_SUBMITTED:"Date Submitted (YYYY-MM-DD)",SEQUENCE_DESCRIPT:"Regulatory Transaction Description",IS_ACTCHANGES:"Same as Regulatory Activity Contact for this Submission?",COMPANY_ID:"Company Identifier",DOSSIER_ID:"Dossier Identifier",DOSSIER_NAME:"Dossier Name",IS_ECTD:"Is this an eCTD transaction?",IS_SOLICITED:"Is this solicited information?",SOLICITED_RQ:"Requester of Solicited Information",SOLICITED_RQ_OTHER:"Other Requester Details",REP_CONTACT_INFO:"Main Contact Information",PROJ_MANAGER_NAME:"Name of Regulatory Project Manager, if known",DATED:"Dated (YYYY-MM-DD)",START_DATE:"Start Date (YYYY-MM-DD)",END_DATE:"End Date (YYYY-MM-DD)",REG_ACTIVITY:"Regulatory Activity",REG_ACTIVITY_TYPE:"Regulatory Activity Type",SEQUENCE_TYPE:"Regulatory Transaction Description",VERSION_NO:"Version Number",BRIEF_DESC:"Brief Description",BRIEF_DESC_CHANGE:"Brief Description of change",ADMINISTRATIVE:"Administrative",BENEFIT_RISK_ASSESS:"Benefit Risk Assessment",BLOOD_EST:"Blood Establishment",CANCEL_LETTER:"Cancellation Letter",CHANGE_TO_DIN:"Change to DIN",COMMENTS_NOC:"Comments on Notice of Decision",COMMENTS_SUMMARY_BASIS:"Comments on Summary Basis of Decision (SBD)",COMMENTS_REGULARTORY_DECISION:"Comments on Regulatory Decision Summary",DIN_DISCONTINUED:"Discontinuation of Sale Notification",DRUG_NOTIF_FORM:"Drug Notification Form (Market Notification)",FOR_PERIOD:"For Period of",FOR_NOC:"For NOC/c products",FINAL_RISK_COM:"Final Risk Communication Document",IMMEDIATE_NOTIFICATION:"Immediate Notification",INITIAL:"INITIAL",MEETING_MINUTES:"Minutes of Meeting",NOTIFICATION_CHANGE:"Notification of Change in Benefit-Risk Profile",NOTIFICATION_INTERRUPT_SALE:"Notification for Interruption of Sale (DIN Dormant)",PANDEMIC_APPL:"Pandemic Application",POST_CLEARANCE_DATA:"Post Clearance Data",POST_MARKET_SURV:"Post-Market Surveillance",POST_NOC_CHANGE:"Post NOC Change",POST_AUTH_DIV1_CHANGE:"Post-Authorization Division 1 Change",PRESUB_MEETING_PKG:"Submission Meeting Package",PRESUB_MEETING_RQ:"Submission Meeting Request",PRIORITY_REVIEW_RQ:"Priority Review Request",PRODUCT_LABELLING_POST_APPROVAL:"Product Labelling - Post Approval",PRISTINE_PM:"Pristine PM",SECOND_LANG_PM:"Second Language PM",PRISTINE_PM_2LANG:"Second Language PM and Final Package Insert",CLIN_CLARIF_RESPONSE:"Response to Clinical Clarification Request",EMAIL_RQ_RESPONSE:"Response to E-mail Request",HSC_RQ_RESPONSE:"Response to Human Safety Clarification Request",QHSC_RQ_RESPONSE:"Response to Quality & Human Safety Clarification Request",CHSC_RQ_RESPONSE:"Response to Clinical & Human Safety Clarification Request",QCHSC_RQ_RESPONSE:"Response to Quality, Clinical and Human Safety Clarification Request",LABEL_CLARIF_RESPONSE:"Response to Labelling Clarification Request",MHPD_RQ_RESPONSE:"Response to MHPD Letter",NOC_RESPONSE:"Response to NOC/c-QN",NOD_RESPONSE:"Response to NOD",NON_RESPONSE:"Response to NON",NOL_RESPONSE:"Response to NOL",PROCESSING_CLARIF_RESPONSE:"Response to Processing Clarification Request",QUAL_CLIN_CLARIF_RESPONSE:"Response to Quality & Clinical Clarification Request",QUAL_CLARIF_RESPONSE:"Response to Quality Clarification Request",SCREENING_ACCEPT_RESPONSE:"Response to Screening Acceptance Letter",SCREENING_CLARIF_RESPONSE:"Response to Screening Clarification Request",SDN_RESPONSE:"Response to SDN",PHONE_RQ_RESPONSE:"Response to Telephone Request",RISK_COMMUN_DOC:"Risk Communication Document",RMP_VERSION_DATE:"Risk Management Plan (RMP)",SIGNAL_WORK_UP:"Signal Work Up",UNSOLICITED_DATA:"Unsolicited Information",YEAR_LIST_OF_CHANGE:"Year(s) of change, list of change number(s) ",NONCLIN_CLARIF_RESPONSE:"Response to Non-clinical Clarification Request ",BE_CLARIF_RESPONSE:"Response to BE Clarification Request",RECON_DECIS_LTR_INTENT:"Reconsideration of Decision - Letter of Intent",RECON_DECIS_RQ_RECON:"Reconsideration of Decision - Request for Reconsideration",RECON_DECIS_OTHER_INFO:"Reconsideration of Decision - Other Information",LABEL_PREAPPROVAL_2LANG:"Second Language Label - Pre-Approval",POST_ANTH_CHANGE:"Post Authorization Change",ROLLING_INFO:"Rolling Information",PROTOCOL_REVIEW:"Protocol Review",LIFECYCLE_TITLE:"Transaction Details",REG_CONTACT_THIS:"Contact for THIS Regulatory Activity",REG_ACT_CONTACT:"Regulatory Activity Contact",TRANSACTION_HDING:"Regulatory Information",LOAD_TRANSACTION:"Load a Regulatory Transaction File",COMPANY_INFO:"A. Company Information",ADDRESS_INFO:"B. Address Information",COMPANY_REP_THIS:"Company Representative",GENERATE_FINAL:"Generate Final XML",CONFIRM_CONTACT_VALID:"I confirm that the above regulatory activity contact information is valid.",YEAR_CHANGE:"Year(s) of change, list of change number(s)",YEARS:"Year",CLARIF_RESPONSE:"Response to Clarification Request",CORR_PATENT_MED:"Correspondence - Patented Medicines",ALLEGATION_NOTICE:"Notice of Allegation",FORM_IV:"Form IV",FORM_V:"Form V",CONSENT_LTR:"Consent Letter",DATA_PROTECT_CORRESP:"Correspondence - Data Protection",CHOOSE_REQUEST:"Choose a requester",LIST_DESCRIPT:"List Description",ADV_COMP_REQ:"Advertising Complaint Request for Information",CSOtRMP:"Canadian Specific Opioid RMP",DISSEM_LIST:"Dissemination List",FOREIGN_SAFETY_NOTIFICATION:"Foreign Safety Action Notification",ISSUE_SAFETY_REQUEST:"Issue Related Summary Report Request",PATIENT_SAFETY_INFO:"Patient Safety Information (Medication error)",PUB_RELEASE_INFO:"Public Release of Clinical Information",RESSESS_ORDER:"Reassessment Order",WRITTEN_CONSULT_REQ:"Request for Written Consultation",TEST_STUDIES_ORDER:"Test and Studies Order",TERM_COND_COMM:"Terms and Conditions Commitment",YEAR:"Year",CTN_ADMINISTRATIVE:"CTN-Administrative Change to",CTN_APPENDIX:"CTN-Appendix",CTN_CONTACT:"CTN-Contact Change",CTN_CROSS:"CTN-Cross Reference Letter",CTN_DATA:"CTN-Data Safety Monitoring Committee",CTN_DEAR:"CTN-Dear Investigator/Doctor Letter",CTN_DILUENT:"CTN-Diluent Change",CTN_DRUG_PROD:"CTN-Drug Product Change",CTN_DRUG_SUBS:"CTN-Drug Substance change",CTN_ENROLLMENT:"CTN-Enrollment Suspension",CTN_ETHICS:"CTN-Ethics Board Communications",CTN_EXCLUSION_INCLUSION:"CTN-Exclusion/Inclusion Criteria Revision",CTN_INFORMED:"CTN-Informed Consent Form Update",CTN_INVESTIGATOR:"CTN-Investigator’s Brochure Update",CTN_NEW_MANUFACTURING:"CTN-New Manufacturing Site for",CTN_NEW_PKG:"CTN-New Packaging/Labelling Site",CTN_NEW_QC:"CTN-New QC Testing Site",CTN_NOL:"CTN-NOL Response",CTN_PACKAGING_LABELLING:"CTN-Packaging/Labelling Name Change",CTN_PM:"CTN-PM Update",CTN_PROTOCOL_INFO_UPDATE:"CTN-Protocol and Informed Consent Form Update",CTN_PROTOCOL_UPDATE:"CTN-Protocol Update/Change",CTN_QOS:"CTN-QOS Update",CTN_REFUSALS:"CTN-Refusals by Foreign Regulatory Authorities/REBs",CTN_REGULATORY:"CTN-Regulatory Hold",CTN_RESPONSE:"CTN-Response to Information Request",CTN_SAFETY:"CTN-Safety Update",CTN_SHELF_PD:"CTN-Shelf Life Extension for DP",CTN_SHELF_DS:"CTN-Shelf Life Extension for DS",CTN_SITE:"CTN-Site Closure",CTN_SOURCE:"CTN-Source Change of",CTN_STRAIN:"CTN-Strain Change",CTN_STUDY_COMPLETION:"CTN-Study Completion",CTN_STUDY_DISC:"CTN-Study Discontinuation due to",CTN_STUDY_EXT:"CTN-Study Recruitment Timeline Extension",CTN_STUDY_SUS:"CTN-Study Suspension",CTN_TRANS_OWN:"CTN-Transfer of Ownership",CTN_FORM_BROC_UPDATES:"CTN-Informed Consent Form and Investigator’s Brochure Updates",CTN_IMPD_UPDATE:"CTN-IMPD Update",CTN_NEW_SUMM_ADF:"CTN-New Summary of Additional Drugs Form",CLINICAL:"CLINICAL",CLINICAL_QUALITY:"CLINICAL & QUALITY",QUALITY:"QUALITY",INITIAL_TEAT_SOLU_MONO:"INITIAL - Teat Solutions Monograph",REQ_ACCEPTED:"Request Accepted",SND_LANG_PM:"Second Language PM",REQUESTER_NAME:"Name of requester",REQUESTER_NAME2:"Name of requester 2",REQUESTER_NAME3:"Name of requester 3",DEFER_FEES:" A deferral of payment is requested with this transaction.",DEFER_STATEMENT:"The statement supporting the deferral request is included.",FEE_REMISSION:"Fee Remission is requested with this transaction",STATEMENT_REVENUE:"A statement signed by the individual responsible for the applicant's financial affairs is included to certify that the fee payable is greater than 10% of the anticipated gross revenue",
SUB_CLASS:"Submission Class",FEE_AMOUNT:"Fees",FEE_DESCRIPTION:"Submission Description",REMISSION_ELIGIBLE:"You are eligible to apply for fee remission. The submission fee is greater than 10% of anticipated gross revenues.",REMISSION_INELIGIBLE:"You are not eligible to apply for fee remission. The submission fee is less than 10% of anticipated gross revenues.",IS_FEE_TRANSACTION:"Are new or revised fees associated with this transaction? Please identify fees when applying for remission.",REGULATORY_FEES:"Fees",GROSS_REVENUE:"Anticipated gross revenue for this drug product during the fee verification period",TEN_PERCENT_REVENUE:"10% of anticipated gross revenue",REQUIRED_DOC:"Required Documentation",SUPPORTING_DOC:"Please include the required signed statement AND at least one of the support documentation to establish that the applicable fee payable is greater than 10% of the anticipated gross revenue from sales of the drug product in Canada during the fee verification period.",EST_MARKET_SHARE:"Estimated market share (that is [i.e.], product's market potential compared to the total market for similar products in Canada)",SIMILAR_PRODUCT:"Comparison to similar products on the Canadian market or other similar markets (e.g., United States, European Union)",SALES_HISTORY:"Sales history prior to product upgrades or sales history of similar products",MARKETING_PLAN:"Marketing plan/product plan for the drug product",AVG_SALES:"Average sale price and demand",FEES_LESS10K:"Fees of $10,000 or less must be paid at the time of filing of the submission, supplement or application. Please complete the",ADVANCE_PAYMENT:"Advance Payment Details for Drug Submissions and Master Files.",SPONSOR_INVOICE:"Review fees must not be included with the submission, supplement or application. Sponsors will be invoiced for fees of more than $10,000.",PAYMENT_METHODS:"Please select all the payment methods you intend to use",ONE_PAYMENT_METHOD:"Please select all the payment methods you intend to use",ONE_FEE_DOC:"At least one of the support documentation to establish that the applicable fee payable is greater than 10% of the anticipated gross revenue from sales of the drug product in Canada during the fee verification period",PLEASE_REMIT:"Please pay the remission processing fee of $590 using the Advance Payment Details for Drug Submissions and Master Files.",APPLY_DEFER:"You are applying for a deferral. Please send no payment with this form.",BANK_DRAFT:"International Bank Draft",MONEY_ORDER:"Money Order",CHEQUE:"Cheque",PAYMENT:"Payment",CREDIT:"MasterCard/Visa/American Express (AMEX)",BANK_WIRE:"Wire (include bank confirmation)",EXISTING_CREDIT:"Existing credit",PREFEERED_OPTION:"Bill Payment Service Option (preferred method)",REG_TRANSACT:"Regulatory Transaction",LIFE_REC:"Transaction Details Record",ONELIFEREC:"One transaction details record is required.",SAVELIFEREC:"One transaction details record is required to save.","LIFECYCLECTRL.LIFECYCLEDETAILSFORM":"with a Transaction Details Record",IS_NEW_ACTIVITY:"Is this transaction for a new or existing regulatory activity?",IS_SIGNED_3RD_PARTY:"Is the contact for this regulatory activity a third party corresponding on behalf of the manufacturer/sponsor?",AUT_LETTER_NOTE:"A signed third party authorization form is required for regulatory activities listed on the form. Refer to the list in the notes/requirements section of the form posted on Health Canada's website.",IS_PRIORITY:"Was this regulatory activity approved for priority review?",IS_NOC:"Was this regulatory activity approved for NOC/C review?",IS_ADMIN_SUBMISSION:"Is this an Administrative Submission or Application?",ADMIN_DESCRIPT:"Administrative Submission or administrative component description",ADMIN_SUB_TYPE:"Reason for Administrative Submission or Application",ACTIVITY_LEAD:"Regulatory Activity Lead",OTHER_DOC_DETAILS:"Other Documentation Details","B14-20160301-09":"Pharmaceutical","B14-20160301-02":"Biological","B14-20160301-10":"Post-Market Vigilance (for Marketed Health Products Directorate (MHPD))","B14-20160301-06":"Consumer Health Product","B14-20160301-11":"Veterinary","B14-20160301-04":"Clinical Trial - Biologics","B14-20160301-05":"Clinical Trial - Pharmaceutical",RESET:"RESET",RESET_INFO:"To enable the 'generate final XML' button, select the 'RESET' button to clear transaction specific fields.",FEE_REMIT_NO_PAYMENT:"Please remit no payment with this transaction. Payment of the fees will be required upon issuance of an invoice",MITIGATION_TYPE:"The following mitigation measures are available (select one). Sponsors must certify that they meet the criteria as outlined in the Food and Drug Regulations.",CERTIFY_ORGANIZATION:"We certify that we meet the definition of small business and have registered our company with Health Canada prior to submitting this submission/application. We understand that failure to register as a small business prior to submitting this submission/application will result in the full fee being charged.",CERTIFY_ORGANIZATION_A:"a total number of employees less than 100 people, or",CERTIFY_ORGANIZATION_B:"a total annual gross revenue between $30,000 and $5 million.",SMALL_BUSINESS_FEE_APPLICATION:"We have not previously filed a submission/application in respect of a drug with Health Canada. We are filing our first submission/application.",FIRST_SUBMISSION:"This is my first submission/application",CERTIFY_GOVERMENT_ORGANIZATION:"We certify that our organization is a branch or agency of the Government of Canada or of a province or territory",CERTIFY_URGENT_HEALTH_NEED:"We certify that the drug in our submission/application is on the List of Drugs for an Urgent Public Health Need as per the Access to Drugs in Exceptional Circumstances Regulations AND",DRUG_THE_SAME_INGREDIENT:"the drug has the same medicinal ingredient, strength and route of administration, and is in a comparable dosage form, as a drug that may be imported under subsection C.10.001(2) of those Regulations;",NO_DRUG_IDENTIFICATION_NUMBER:"no drug identification number has been assigned under section C.01.014.2 of those Regulations for the drug or for another drug that has the same medicinal ingredient, strength and route of administration and is in a comparable dosage form; and",NO_NOTICE_COMPLIANCE:"no notice of compliance has been issued under section C.08.004 of those Regulations in respect of the drug or another drug that has the same medicinal ingredient, strength and route of administration and is in a comparable dosage form.",CERTIFY_FUNDED_HEALTH_INSTITUTION:"We certify that our institution is funded by the Government of Canada or the government of a province or territory and that it is",CERTIFY_FUNDED_HEALTH_INSTITUTION_A:"licensed, approved or designated by a province in accordance with the laws of the province to provide care or treatment to persons or animals suffering from any form of disease or illness; or",CERTIFY_FUNDED_HEALTH_INSTITUTION_B:"owned or operated by the Government of Canada or the government of a province and that provides health services.",CERTIFY_ISAD:"We certify that we have filed an application for a designated COVID-19 drug under the Interim Order Respecting the Importation, Sale and Advertising of Drugs for Use in Relation to COVID-19 (ISAD), and that a submission has not previously been filed seeking approval for that same drug",TYPE_MIN:"End Date should not be earlier than Start Date.",FEE_PAY_NOTICE:"Do not send fee payment with your submission, supplement or application. Health Canada will verify the fee and issue an invoice accordingly. For information on payment of invoices and current fees, please visit",FEES_AND_FUNDING_REV:"the Fees and Funding webpage",FEES_AND_FUNDING_URL:"https://www.canada.ca/en/health-canada/services/drugs-health-products/funding-fees.html",MITIGATION_MEASURES:"Mitigation Measures",PROD_PROTOCOL:"Protocol Number",CTA_FROM:"From [time]",CTA_TO:"To [time]","COVIR-19":"COVID-19 Interim Order Application","COVIR-19AMD":"COVID-19 Interim Order Ap - Amendment",REG_ACTIVITY_LEAD_DESC:"Regulatory Activity Lead Description",ACTIVITY_LEAD_PHA:"Pharmaceutical: Includes all regulatory activities and transactions for prescription pharmaceuticals and ethical products under the Pharmaceutical Drugs Directorate (PDD) mandate. This lead is not applicable for non-prescription pharmaceutical or disinfectant products or post-market vigilance regulatory activities.",ACTIVITY_LEAD_BIO:"Biological: Includes all regulatory activities and transactions under the Biologics and Radiopharmaceutical Drugs Directorate (BRDD) mandate (biologics/radiopharmaceuticals).",ACTIVITY_LEAD_PMV:"Post-Market Vigilance: Includes all regulatory activities and transactions under the Marketed Health Products Directorate (MHPD) mandate (prescription and non-prescription pharmaceuticals for human use, biologics, radiopharmaceuticals).",ACTIVITY_LEAD_CHP:"Consumer Health Products: Includes all regulatory activities and transactions for non-prescription pharmaceuticals and disinfectants under the Natural and Non-Prescription Health Products Directorate (NNHPD) mandate.",ACTIVITY_LEAD_VET:"Veterinary: Includes all regulatory activities and transactions for prescription and non-prescription pharmaceuticals under the Veterinary Drugs Directorate (VDD) mandate.",HT_LOAD_FILE_2:"When continuing with a working copy, the format of the file to load should be .hcsc.",HT_LOAD_FILE_3:"When viewing/updating a final XML file, the format of the file to load should be .xml.",HT_DOSSIER_TYPE_1:"Biologic dossier applies to all biologic products and radiopharmaceuticals",HT_DOSSIER_TYPE_2:"Pharmaceutical dossier applies to all pharmaceutical products for human use, non-prescription and ethical products, disinfectants",HT_DOSSIER_TYPE_3:"Clinical Trial dossier applies to all pharmaceutical products for human use, biologic products and radiopharmaceuticals, non-prescription and ethical products, and disinfectants",HT_DOSSIER_TYPE_4:"Veterinary dossier applies to all pharmaceuticals for veterinary use, non-prescription and ethical products",HT_COMP_ID_1:"The Company Identifier can be obtained from the latest Health Canada issued final company XML file, or the 'company code' found on the Annual Drug Notification Form (ADNF).",HT_COMP_ID_2:"Company Identifier must be 5 digits, add leading zero when required.",HT_DOSSIER_ID:"Dossier Identifier - The dossier identifier is a code created by Health Canada to uniquely identify the dossier.  For existing dossiers the dossier ID can be verified from the Drug Submission Tracking System – Industry Access (DSTS-IA).  If a dossier ID has not yet been assigned, sponsors must request for one using the appropriate form, available on the REP information webpage.",HT_DOSSIER_ID_0:"The format of a Dossier Identifier is a letter followed by six digits. (e.g. x######). For example in this field you would need to enter one of the following depending on the dossier type:",HT_DOSSIER_ID_1:"eCTD formatted dossier – e######",HT_DOSSIER_ID_2:"Non-eCTD formatted dossier for Division 1 Human drugs – d######",HT_DOSSIER_ID_3:"Non-eCTD formatted dossier for Division 8 Human drugs – p######",HT_DOSSIER_ID_4:"Non-eCTD formatted dossier for Division 5 Human drugs – c######",HT_DOSSIER_ID_5:"Non-eCTD formatted dossier for Veterinery Drugs drugs – v######",HT_PROD_NAME_1:"Only include the name of the products impacted by this regulatory activity. For multiple products, list and separate their product names with a semi-colon (;).",HT_PROD_NAME_2:"The product name is the name assigned by the manufacturer/sponsor to distinguish the drug (product) and under which the drug is to be sold/advertised. It is also the name used to identify the product in all correspondence related to the submission and on the product label(s) and Product Monograph and/or Package Insert, if applicable. If the brand name has not yet been determined, the proper or common name of the drug or research code may be used.",HT_PROD_NAME_3:"The product name input in this field will only be reviewed with the initial transaction of a dossier (i.e. sequence 0000 for eCTD format). For all subsequence transactions, any changes to the product name should be captured and will be reviewed using the product information template. Product name changes on this template will not be reviewed.",HT_PROD_NAME_4:"For clinical trials: Please enter the name of the investigational product, and where there is more than one investigational product, all of them should be captured. An investigational product corresponds to a product involved in the conduct of a clinical trial. It could be a product not available in Canada, a product in development or a product already approved in Canada but used outside the approved indication.",HT_PROTOCOL_NUM:"The protocol number must be assigned by the sponsor for each protocol when submitting a clinical trial application (CTA) to Health Canada. Sponsors are encouraged to include a protocol number for Pre-CTA meeting requests if available. In general, a protocol number is a variable length, alpha-numeric sequence used by sponsors to assign a reference number to their protocol. The protocol number for clinical trials should remain the same for the duration of the trial. When updating their documents, including protocols, sponsors should, in accordance with their internal record/document management practices, apply version control principles. When submitting a CTA-Amendment or Notification, sponsors should indicate the version or amendment number of the protocol. For more information on the correct numbering of the protocol version or amendment provided in CTA-A or CTA-N, please consult the",HT_PROTOCOL_NUM_SUB:" Guidance for Completing the Drug Submission Application Form",HT_PROTOCOL_NUM_SUB_URL:"https://www.canada.ca/en/health-canada/services/drugs-health-products/drug-products/applications-submissions/forms/guidance-completing-drug-submission-application-form.html",HT_REFER_TO:"Refer to the",HT_ARE_FEES:"The fee section is required to be completed in order to properly apply for fee mitigation measures.",HT_PRIO_REV:"Guidance for Industry - Priority Review of Drug Submissions",HT_PRIO_REV_URL:"https://www.canada.ca/en/health-canada/services/drugs-health-products/drug-products/applications-submissions/guidance-documents/priority-review/drug-submissions.html",HT_NOC_REV:"Guidance Document: Notice of Compliance with Conditions (NOC/c)",HT_NOC_REV_URL:"https://www.canada.ca/en/health-canada/services/drugs-health-products/drug-products/applications-submissions/guidance-documents/notice-compliance-conditions.html",HT_ADMIN_SUB:"Guidance Administrative Processing of Submissions and Applications Involving Human or Disinfectant Drugs",HT_ADMIN_SUB_URL:"https://www.canada.ca/en/health-canada/services/drugs-health-products/drug-products/applications-submissions/guidance-documents/administrative-processing-human-disinfectant-drugs-2019/document.html",HT_ADMIN_SUB_1:"For instructions regarding administrative submission for veterinary drugs, please contact vdd.skmd.so-dgps.dmv.cp@hc-sc.gc.ca.",HT_CTRL_NUM_1:"Enter the 6 digit control number associated with this regulatory activity (if known).",HT_CTRL_NUM_2:"Enter “000000” for regulatory transactions that Do Not require a control number (e.g. Level III - Post-NOC Changes, UDRA -  eCTD Dossier Clean-up).",HT_CTRL_NUM_3:"Enter “000000” for the first transaction of a NEW regulatory activity, where a control number has not yet been assigned.",HT_CTRL_NUM_4:"Enter the pre-assigned control number for the first transaction of a new regulatory activity that was communicated by Health Canada (e.g. via an Advisement Letter).",HT_CTRL_NUM_5:"Drug Notification Form(s) (DNF) should be filed under the same control number it has been issued for the product(s) that are now being sold on the market.",HT_ACT_LEAD_1:"Biological: Includes all regulatory activities and transactions under the Biologics and Radiopharmaceutical Drugs Directorate (BRDD) mandate (biologics/radiopharmaceuticals).",HT_ACT_LEAD_2:"Clinical Trial – Biologics: Includes all regulatory activities and transactions for clinical trials for biologics under the Biologics and Genetic Therapies Directorate (BGTD) mandate.",HT_ACT_LEAD_3:"Clinical Trials – Pharmaceuticals: Includes all regulatory activities and transactions for clinical trials for prescription pharmaceuticals under the Therapeutic Products Directorate (TPD) mandate and  for biologics under the Biologics and Genetic Therapies Directorate (BGTD) mandate",HT_ACT_LEAD_4:"Consumer Health Products: Includes all regulatory activities and transactions for non-prescription pharmaceuticals and disinfectants under the Natural and Non-Prescription Health Products Directorate (NNHPD) mandate.",HT_ACT_LEAD_5:"Pharmaceutical: Includes all regulatory activities and transactions for prescription pharmaceuticals and ethical products under the Pharmaceutical Drugs Directorate (PDD) mandate.",HT_ACT_LEAD_6:"Post-Market Vigilance: Includes all regulatory activities and transactions under the Marketed Health Products Directorate (MHPD) mandate (prescription and non-prescription pharmaceuticals for human use, biologics, radiopharmaceuticals).",HT_ACT_LEAD_7:"Veterinary: Includes all regulatory activities and transactions for prescription and non-O33prescription pharmaceuticals under the Veterinary Drugs Directorate (VDD) mandate.",HT_YEAR_CHANGE_1:"For pharmaceuticals for veterinary and human use, biologics and radiopharmaceuticals, refer to the: ",HT_YEAR_CHANGE_2:"Post-Notice of Compliance (NOC) Changes: ",HT_YEAR_CHANGE_3:"Quality Guidance",HT_YEAR_CHANGE_4:"Safety and Efficacy",HT_YEAR_CHANGE_URL_1:"https://www.canada.ca/en/health-canada/services/drugs-health-products/drug-products/applications-submissions/guidance-documents/post-notice-compliance-changes/quality-document.html",HT_YEAR_CHANGE_URL_2:"https://www.canada.ca/en/health-canada/services/drugs-health-products/drug-products/applications-submissions/guidance-documents/post-notice-compliance-changes/safety-efficacy-document.html",HT_YEAR_CHANGE_5:"For pharmaceuticals for veterinary use, also refer to:",HT_YEAR_CHANGE_6:"Guidance for Industry – Preparation of Veterinary New Drug Submissions for innovative drugs",HT_YEAR_CHANGE_7:"Guidance for Industry – Preparation of Veterinary Abbreviated New Drug Submissions – Generic Drugs for generic drugs ",HT_YEAR_CHANGE_URL_3:"https://www.canada.ca/en/health-canada/services/drugs-health-products/veterinary-drugs/legislation-guidelines/guidance-documents/guidance-industry-preparation-veterinary-new-drug-submissions-health-canada-2007.html",HT_YEAR_CHANGE_URL_4:"https://www.canada.ca/en/health-canada/services/drugs-health-products/veterinary-drugs/legislation-guidelines/guidance-documents/guidance-industry-preparation-veterinary-abbreviated-new-drug-submissions-generic-drugs-health-canada-2009-1.html",HT_YEAR_CHANGE_8:"Include the year that the change took place, the name of the guidance document and the number or letter of the corresponding change in the appropriate guidance document, when applicable. ",HT_YEAR_CHANGE_9:"2018; Post-NOC Changes: Quality; 15, 18, 23",HT_YEAR_CHANGE_10:"June 2017 to May 2018 14, 16, 27",HT_YEAR_CHANGE_11:"2016, 2017, 2018, 5, 8, 17",HT_YEAR_CHANGE_12:"For pharmaceuticals for human use, biologics and radiopharmaceuticals, refer to the: ",HT_YEAR_CHANGE_13:"For example: ",HT_YEAR_CHANGE_14:"Include the year that the change took place, the name of the guidance document and the number or letter of the corresponding change in the appropriate guidance document, when applicable. Otherwise, briefly describe the change:",HT_DESC_CHANGE_1:"Reference the applicable appendix or sections of the Post-Notice of Compliance (NOC) Changes Guidance Documents and identify the changes.",HT_DESC_CHANGE_2:"i.e. Quality Document- 3.2.S Drug Substance #1, 2d, 9b, 17,",HT_DESC_CHANGE_3:"i.e. Quality Document - 3.2.S Drug Substance (Kits/radiopharmaceuticals containing drug substance of chemical origin) - #3, 9, 10c",HT_DESC_CHANGE_4:"i.e.  Safety and Efficacy Document -  Supplements - a, d.",HT_REQ_SOL:"If the name of the requester is unknown, enter the generic email the request was sent from.",HT_FROM:"Time should be entered in this format: number, followed by one of the words hours, days or months.",HT_FEES_1:"For more information related to fees, refer to the",HT_FEES_2:"Guidance Document: Fees for the Review of Human and Disinfectant Drug Submissions and Applications",HT_FEES_URL:"https://www.canada.ca/en/health-canada/services/drugs-health-products/drug-products/fees/fees-review-drug-submissions-applications.html",HT_CONTACT_1:"Information provided here pertains to the contact specific to the subject regulatory activity, i.e., the person/company to whom Health Canada should direct correspondence about the subject regulatory activity.",HT_CONTACT_2:"the contact specific to the subject regulatory activity,",HT_CONTACT_3:" i.e., the person/company to whom Health Canada should direct correspondence about the subject regulatory activity.",HT_CONTACT_4:"Please note that it is up to the discretion of Health Canada to decide the method of correspondence.",HT_CONTACT_6:"Sponsors should update this information if required; otherwise confirm that the information is still valid.",HT_CONTACT_7:"Enter the name of the company to which the regulatory activity contact belongs. If the contact does not belong to a company, enter the name of the contact.",ROUTING_ID_1:"The Routing identifier (ID) is a unique identifier within the Common Electronic Submissions Gateway (CESG) used to identify specific gateway account, whether it uses the Applicability Statement 2 (AS2) or WebTrader interfaces.",ROUTING_ID_2:"For the WebTrader users, the routing identifier is automatically assigned to each account by the system. It can be retrieved from the receipt message. Navigate to the WebTrader Inbox, click on “Receipt”, “View” document. Document Content page opens up and the routing identifier can be found under attribute: “X-Cyclone-To:”",ROUTING_ID_3:"For the AS2 users, the routing identifier has to be created by the company. It is recommended that the company's data universal numbering system number be used, but any alpha-numeric text string is acceptable.",ROUTING_ID_5:"For any further questions on the routing identifier, please contact the Food and Drug Administration Help Desk at ",HT_XML_1:"A final regulatory transaction XML file must be included in section 1.2.1 for each of your REP transactions.",HT_XML_2:"Refer to the REP guidance document for detailed information.",HT_XML_3:"A final regulatory transaction XML file must be included in: ",HT_XML_4:"Human Drugs - :section 1.2.1 of the transaction using REP",HT_XML_5:"Veterinary Drugs - section 1.5 of the transaction using REP",NOTICE_APR_2020:"Important Note: This template includes the revised Fees effective April 1, 2020 and should be used for regulatory transactions intended for filing on or AFTER April 1, 2020.",RA_TYPE_NOTE_UDRA:"If your transaction description does not fit any category of listed transaction descriptions, contact the appropriate directorate at Health Canada via email: <br /> For biologics and radiopharmaceuticals for human use: <a href='mailto:brdd.ora@hc-sc.gc.ca'>brdd.ora@hc-sc.gc.ca</a> <br /> For pharmaceuticals for human use: <a href='mailto:rpmd-dgpr@hc-sc.gc.ca'>rpmd-dgpr@hc-sc.gc.ca</a> <br> For non-prescriptions and disinfectants: <a href='mailto:rpmd-dgpr@hc-sc.gc.ca'>nded-demvso@hc-sc.gc.ca</a>",RA_TYPE_NOTE_L3NOC:"There is no control number associated with this regulatory activity",RA_TYPE_NOTE_NC:"Fees are not applicable to this regulatory activity type (for human biologic or radiopharmaceutical drug quality changes)",RA_TYPE_NOTE_DIN:"Refer to Drug Identification Number (DIN) Guidance Document",RA_TYPE_NOTE_PDC:"Fees are not applicable to this regulatory activity type",RA_TYPE_NOTE_PDINN:"Should not be used for Drug Notification Forms.",INITIAL_DESCR:"First transaction of the new regulatory activity for a product that does not have an existing DIN.",PANDEMIC_APPL_DESCR:"First transaction of a new regulatory activity.",POST_ANTH_CHANGE_DESCR:"First transaction of a new regulatory activity.",POST_NOC_DIV1_CHANGE_DESCR:"First transaction of a new regulatory activity.",POST_CLEARANCE_DATA_DESCR:"Transactions related to an already cleared regulatory activity with existing control number. This is not applicable to transactions related to post-market vigilance regulatory activities.",POST_NOC_CHANGE_DESCR:"First transaction of a new regulatory activity.",PROCESSING_CLARIF_RESPONSE_DESCR:"Response to Health Canada clarification request during processing.",ROLLING_INFO_DESCR:"For subsequent transaction containing information identified as part of the plan.",CHANGE_TO_DIN_DESCR:"First transaction of a new regulatory activity for a product that already has an existing DIN.",CANCEL_LETTER_DESCR:"Transaction to officially withdraw the regulatory activity.",ADMIN_DESCR:"First transaction of a new regulatory activity for an administrative change according to the Guidance Document: ",ADMIN_DESCR_LINK_LABEL:"Administrative Processing of Submissions and Applications Involving Human or Disinfectant Drugs",ADMIN_DESCR_URL:"https://www.canada.ca/en/health-canada/services/drugs-health-products/drug-products/applications-submissions/guidance-documents/administrative-processing-human-disinfectant-drugs-2019/document.html",MEETING_MINUTES_DESCR:"Transaction to provide minutes from a pre-submission meeting.",SCREENING_CLARIF_RESPONSE_DESCR:"Response to Health Canada clarification request during screening.",PRESUB_MEETING_RQ_DESCR:"Transaction to request a pre-submission meeting.",UNSOLICITED_DATA_DESCR:"See “unsolicited information” section of the Guidance Document: Management of Drug Submissions and Applications.",REFER_TO_GUIDE_DOC:"Refer to the Guidance Document: ",ADMIN_GUIDE_DOC:"Administrative Processing of Submissions and Applications Involving Human or Disinfectant Drugs.",ADMIN_GUIDE_DOC_URL:"https://www.canada.ca/en/health-canada/services/drugs-health-products/drug-products/applications-submissions/guidance-documents/administrative-processing-human-disinfectant-drugs-2019/document.html",ADMIN_GUIDE_DOC_NOTE:"Note: The administrative fee class should be selected.",ADMIN_GUIDE_DOC_NOTE2:"The Transaction description “Administrative” should be used for the first transaction for this regulatory activity.",ADMIN_GUIDE_DOC:"Administrative Processing of Submissions and Applications Involving Human or Disinfectant Drugs.",ADMIN_GUIDE_DOC_URL:"https://www.canada.ca/en/health-canada/services/drugs-health-products/drug-products/applications-submissions/guidance-documents/administrative-processing-human-disinfectant-drugs-2019/document.html",ADMIN_GUIDE_DOC_NOTE:"Note: The administrative fee class should be selected.",ADMIN_GUIDE_DOC_NOTE2:"The Transaction description “Administrative” should be used for the first transaction for this regulatory activity.",WITHDRAWAL_NOF_FORM:"Withdrawal of Drug Notification Form",ADVISEMENT_LETTER_RESPONSE:"Response to Advisement Letter to update the Product Monograph",NOF_DRUG_SHORT:"Notification on Drug Shortage",QUALITY_ISSU:"Quality issue raised by company and/or other regulator",GMP_COMP_ISSU:"GMP compliance issue raised by other regulators",RECLASS_LOT_RELEASE:"Reclassification request under BRDD Lot Release Program",NOC_COMPLIANCE:"Notice of Compliance with Conditions (NOC/c) – commitment",UDRA_CANCEL_LETTER:"Cancellation Letter for UDRA",SEQUENCE_CLEANUP:"eCTD Dossier Clean-up",UDRA_MEETING_MINUTES:"Minutes of Meeting for UDRA",UDRA_EMAIL_RQ_RESPONSE:"Response to E-mail Request for UDRA",UDRA_PROCESSING_CLARIF_RESPONSE:"Response to Processing Clarification Request for UDRA",GEN_VOL_NOF:"General / Voluntary Notification",ADVISEMENT_LETTER_RESPONSE_DESCR:"When providing rationale to not incorporate changes requested via advisement letter. ",NOF_DRUG_SHORT_DESCR:"When notifying Health Canada about a drug shortage, including a request for Special Lot Release related to the drug shortage.",QUALITY_ISSU_DESCR:"When notifying Health Canada about quality related issues (example: Notification of an Out-Of-Specification (OOS) results).",GMP_COMP_ISSU_DESCR:"When notifying Health Canada about issues/concerns with media fill failures, sterility, violation of GMPs, out of specifications results (example: failure of appearance test due to visible particles), potency assay, stability, etc. which are not subject to submission filing.",RECLASS_LOT_RELEASE_DESCR:"When submitting outside of a regulatory activity.",NOC_COMPLIANCE_DESCR:"When submitting information to Health Canada as per the Guidance Document: <a href='https://www.canada.ca/en/health-canada/services/drugs-health-products/drug-products/applications-submissions/guidance-documents/notice-compliance-conditions.html'>Notice of Compliance with Conditions (NOC/c)</a>: <ul> <li> Annual Progress Report of Confirmatory Trials </li> <li> Rationale for re-negotiation of NOC/c commitment(s)</li></ul> ",UDRA_CANCEL_LETTER_DESCR:"Transaction to officially withdraw a submitted UDRA. Verify DSTS-IA for the correct control number. ",SEQUENCE_CLEANUP_DESCR:"Transaction to provide when making in the eCTD dossier placement, node, attributes or other dossier corrections. It is not permitted to provide content files in this transaction other than the Cover letter (.pdf), REP RT file (.xml). Notify ereview@hc-sc.gc.ca prior to sending this transaction via the electronic gateway. ",UDRA_MEETING_MINUTES_DESCR:"Transaction to provide minutes from a meeting that was conducted regarding a filed UDRA. Verify DSTS-IA for the correct control number.",UDRA_EMAIL_RQ_RESPONSE_DESCR:"Response to Health Canada clarification request related to an UDRA. Verify DSTS-IA for the correct control number. Provide Health Canada issued correspondence.",UDRA_PROCESSING_CLARIF_RESPONSE_DESCR:"Response to Health Canada clarification request during processing of the UDRA by Office of Submissions and Intellectual Property. Provide Health Canada issued correspondence.",GEN_VOL_NOF_DESCR:"Contact Health Canada via email prior to using this regulatory transaction description. <br> For biologics and radiopharmaceuticals for human use: <a href='mailto:brdd.ora@hc-sc.gc.ca'>brdd.ora@hc-sc.gc.ca</a> <br> For pharmaceuticals for human use: <a href='mailto:rpmd-dgpr@hc-sc.gc.ca'>rpmd-dgpr@hc-sc.gc.ca</a> <br> For non-prescriptions and disinfectants: <a href='mailto:nded-demvso@hc-sc.gc.ca'>nded-demvso@hc-sc.gc.ca</a>",DIN_DISCONTINUED_DESCR:"When reporting that the sale of the product (DIN) has been discontinued including discontinuation date, lot number and expiry date of the last lot distributed. DIN will be canceled by Health Canada",NOTIFICATION_INTERRUPT_SALE_DESCR:"When reporting that the product (DIN) has not been sold for twelve consecutive months",POST_MARKET_SURV_DESCR:"Examples include: Unsolicited submission of stand-alone elements of an RMP such as updates to protocol and results of post-approval studies, educational materials; proposals for change in frequency of PSUR/PBRER submission; proposals for discontinuation of continued monitoring strategies; plans for risk mitigation activities in other jurisdictions; and EU/PRAC assessments. <br> For the submission of information requested by MHPD, use 'Response to MHPD Letter'.",MHPD_RQ_LETTER_DESCR:"Response to MHPD Letter following review of post-authorization scientific review. Respond as directed within the MHPD correspondence.",BENEFIT_RISK_ASSESS_DESCR:"Response to HC request for a benefit-risk assessment made to MAH either voluntarily or under section 21.31 of the Food and Drugs Act, or sections C.01.052 and C.01.013 of the Food and Drugs Regulations.",NOTIFICATION_CHANGE_DESCR:"Notification to Minister that there has been a significant change in what is known about the benefit—risk profile of the drug, as required under C.01.018 (4) of the Food and Drug Regulations.",
TEST_STUDIES_ORDER_DESCR:"Response to Order by HC as requested under section 21.32 of the Food and Drugs Act.",ISSUE_SAFETY_REQUEST_DESCR:"Response to Health Canada's request to submit an Issue-Related Summary Report under C.01.019 of the Food and Drug Regulations.",FOREIGN_SAFETY_NOTIFICATION_DESCR:"Submitted as required under Section C.01.050 of the Food and Drug Regulations.",RISK_COMMUN_DOC_DESCR:"First draft of the Health Product Risk Communication (HPRC) in Word format.",FINAL_RISK_COM_DESCR:"Health Product Risk Communication (HPRC) final versions in English and French and in Word and PDF format.",DISSEM_LIST_DESCR:"Dissemination strategy and dissemination results.",PATIENT_SAFETY_INFO_DESCR:"Response to Health Canada's request to provide information  or changes as oulined in the MHPD letter. Examples of these requests could be additional information,  additional monitoring, label changes, etc.",IMMEDIATE_NOTIFICATION_DESCR:"Immediate Notifications are for minor changes where timely awareness is necessary. Health Canada should be notified within the time window extending from 21 days before and 14 days after the implementation date. This reporting category also includes the majority of major and moderate changes that have been downgraded to minor quality changes as a result of the execution of a PACMP or through a negotiated EC and associated reporting category.",RA_TYPE_NOTE_EUANDS:"Health Canada will not invoice fees for Extraordinary Use New Drugs filed under C.08.002.1 of the Food and Drug Regulations (FDR), however please ensure the applicable submission class is selected in the fee section below.",RA_TYPE_NOTE_EUNDS:"Health Canada will not invoice fees for Extraordinary Use New Drugs filed under C.08.002.1 of the Food and Drug Regulations (FDR), however please ensure the applicable submission class is selected in the fee section below.",RA_TYPE_NOTE_EUSANDS:"Health Canada will not invoice fees for Extraordinary Use New Drugs filed under C.08.002.1 of the Food and Drug Regulations (FDR), however please ensure the applicable submission class is selected in the fee section below.",RA_TYPE_NOTE_EUSNDS:"Health Canada will not invoice fees for Extraordinary Use New Drugs filed under C.08.002.1 of the Food and Drug Regulations (FDR), however please ensure the applicable submission class is selected in the fee section below.",RA_TYPE_NOTE_PSURPV:"For NOC/c products",RQ_REVIEW_REPORT:"Request Review Report(s)"}),$translateProvider.translations("fr",{ADD_TRANSACTION:"Ajouter un enregistrement",SEQUENCE_NUM:"Numéro de séquence",NEW:"Nouvelle",EXISTING:"Existant",DATE_SUBMITTED:"Date de soumission (AAAA-MM-JJ)",SEQUENCE_DESCRIPT:"Description de la transactions de réglementation",IS_ACTCHANGES:"Même que la personne-ressource de l'activité réglementaire pour cette soumission?",COMPANY_ID:"Numéro de la compagnie",DOSSIER_ID:"Numéro de dossier",DOSSIER_NAME:"Nom du dossier",IS_ECTD:"Est-ce une transaction eCTD?",IS_SOLICITED:"Cette information est-elle sollicitée?",SOLICITED_RQ:"Demandeur d’information sollicitée",SOLICITED_RQ_OTHER:"Autres détails du demandeur",REP_CONTACT_INFO:"Coordonnées principales",PROJ_MANAGER_NAME:"Responsable de projet réglementaire, si connu",DATED:"Daté",START_DATE:"Date de début",END_DATE:"Date de fin",REG_ACTIVITY:"Activité réglemetaire",REG_ACTIVITY_TYPE:"Type d'activité réglementaire",SEQUENCE_TYPE:"Description de la transaction de réglementation",VERSION_NO:"Numéro de la version",BRIEF_DESC:"Brève description",BRIEF_DESC_CHANGE:"Brève description des modifications apportées",ADMINISTRATIVE:"Administratif",BENEFIT_RISK_ASSESS:"Évaluation des risques et des avantages",BLOOD_EST:"Établissement de sang",CANCEL_LETTER:"Lettre d’annulation",CHANGE_TO_DIN:"Modification du code d’IND (DIN)",COMMENTS_NOC:"Commentaires sur l’avis de décision",COMMENTS_SUMMARY_BASIS:"Commentaires sur le sommaire des motifs de décision (SMD)",COMMENTS_REGULARTORY_DECISION:"Commentaires sur le sommaire de décision réglementaire",DIN_DISCONTINUED:"Avis de cessation de vente",DRUG_NOTIF_FORM:"Formulaire de notification de drogue (de mise en marché)",FOR_PERIOD:"Pour une période de",FOR_NOC:"For our les produits AC-C",FINAL_RISK_COM:"Document final de communication sur les risques",IMMEDIATE_NOTIFICATION:"Notification Immédiate",INITIAL:"INITIAL",MEETING_MINUTES:"Procès-verbal de la réunion",NOTIFICATION_CHANGE:"Avis de changement du profil des risques et avantages",NOTIFICATION_INTERRUPT_SALE:"Avis de douze mois sans vente (État de DIN dormant)",PANDEMIC_APPL:"Application en cas de pandémie",POST_CLEARANCE_DATA:"Données consécutives à l’habilitation de sécurité",POST_MARKET_SURV:"Surveillance après la mise en marché",POST_NOC_CHANGE:"Modification de l’avis de conformité",POST_AUTH_DIV1_CHANGE:"Modification en vertu de la Section 1 après l’autorisation",PRESUB_MEETING_PKG:"Trousse de la réunion préalable à la présentation",PRESUB_MEETING_RQ:"Demande de réunion préalable à la présentation",PRIORITY_REVIEW_RQ:"Demande d’examen prioritaire",PRODUCT_LABELLING_POST_APPROVAL:"Étiquetage des produits – après l’autorisation",PRISTINE_PM:"Pristine PM",SECOND_LANG_PM:"Monographie de produit dans la langue seconde",PRISTINE_PM_2LANG:"Monographie de produit et encarts d’accompagnement dans la langue seconde",CLIN_CLARIF_RESPONSE:"Réponse à la demande de clarification clinique",EMAIL_RQ_RESPONSE:"Réponse à une demande par courriel",HSC_RQ_RESPONSE:"Réponse à la demande de clarification en ce qui concerne la sécurité pour les humains",QHSC_RQ_RESPONSE:"Réponse à la demande de clarification concernant la qualité et la sécurité pour les humains",CHSC_RQ_RESPONSE:"Réponse à la demande de clarification concernant les aspects cliniques et la sécurité pour les humains",QCHSC_RQ_RESPONSE:"Réponse à la demande de clarification concernant la qualité, les aspects cliniques et la sécurité pour les humains",LABEL_CLARIF_RESPONSE:"Réponse à la demande de clarification de l’étiquetage",MHPD_RQ_RESPONSE:"Réponse à une lettre de la DPSC",NOC_RESPONSE:"Réponse à l’avis de conformité/ avec conditions - avis d’admissibilité",NOD_RESPONSE:"Réponse à l’avis d’insuffisance",NON_RESPONSE:"Réponse à l’avis de non-conformité",NOL_RESPONSE:"Réponse à la lettre de non-objection",PROCESSING_CLARIF_RESPONSE:"Réponse à la demande de clarification sur le traitement",QUAL_CLIN_CLARIF_RESPONSE:"Réponse à la demande de clarification sur la qualité et les aspects cliniques",QUAL_CLARIF_RESPONSE:"Réponse à la demande de clarification sur la qualité",SCREENING_ACCEPT_RESPONSE:"Réponse à la lettre d’acceptation à l’examen préliminaire",SCREENING_CLARIF_RESPONSE:"Réponse à une demande de clarification au cours de l’examen préliminaire",SDN_RESPONSE:"Réponse à un avis d’insuffisance à l’examen préliminaire",PHONE_RQ_RESPONSE:"Réponse à une demande téléphonique",RISK_COMMUN_DOC:"Document de communication sur les risques",RMP_VERSION_DATE:"Plan de gestion des risques",SIGNAL_WORK_UP:"Signal Work Up",UNSOLICITED_DATA:"Renseignements non sollicités",YEAR_LIST_OF_CHANGE:"Année(s) de changement, liste du ou des changements",NONCLIN_CLARIF_RESPONSE:"Réponse à la demande de clarification non clinique",BE_CLARIF_RESPONSE:"Réponse à la demande d’étude de bioéquivalence",RECON_DECIS_LTR_INTENT:"Réexamen de la décision - Lettre d’intention",RECON_DECIS_RQ_RECON:"Réexamen de la décision - Demande de réexamen",RECON_DECIS_OTHER_INFO:"Réexamen de la décision - Autres renseignements",LABEL_PREAPPROVAL_2LANG:"Étiquette en langue seconde - préapprobation",POST_ANTH_CHANGE:"Modification après l’autorisation",ROLLING_INFO:"Information continue",WITHDRAWAL_NOF_FORM:"Retrait du formulaire de déclaration de médicament",PROTOCOL_REVIEW:"Examens de protocole",LIFECYCLE_TITLE:"Détails de la transaction",REG_CONTACT_THIS:"Personne-ressource pour cette activité réglementaire",REG_ACT_CONTACT:"Personne-ressource pour cette activité réglementaire",TRANSACTION_HDING:"Information réglementaire",LOAD_TRANSACTION:"Charger un fichier de transaction réglementaire",COMPANY_INFO:"A. Information sur la compagnie",ADDRESS_INFO:"B. Adresse",COMPANY_REP_THIS:"Représentant de la compagnie",GENERATE_FINAL:"Générer le XML final",CONFIRM_CONTACT_VALID:"Je confirme que l'information de la personne-ressource de l’activité réglementaire ci-dessus est valide.",YEAR_CHANGE:"Année(s) de changement, liste du/des numéro(s) de changement",YEARS:"Année",CLARIF_RESPONSE:"Réponse à la demande de clarification",CORR_PATENT_MED:"Correspondance - Médicaments brevetés",ALLEGATION_NOTICE:"Avis d’allégation",FORM_IV:"Formulaire IV",FORM_V:"Formulaire V",CONSENT_LTR:"Lettre de consentement",DATA_PROTECT_CORRESP:"Correspondance - Protection des données",CHOOSE_REQUEST:"Choose a requester",LIST_DESCRIPT:"List Description",ADV_COMP_REQ:"Demande de renseignements concernant une plainte en matière de publicité",CSOtRMP:"PGR concernant les produits contenant des opioïdes vendus au Canada",DISSEM_LIST:"Liste de distribution",FOREIGN_SAFETY_NOTIFICATION:"Communications étrangères relatives aux risques",ISSUE_SAFETY_REQUEST:"Demande d'un rapport de synthèse relatif à un sujet de préoccupation",PATIENT_SAFETY_INFO:"Renseignements sur la sécurité des patients (erreur de médication)",PUB_RELEASE_INFO:"Diffusion publique de renseignements cliniques",RESSESS_ORDER:"Ordonnance de réévaluation",WRITTEN_CONSULT_REQ:"Demande de consultation écrite",TEST_STUDIES_ORDER:"Ordonnance concernant des essais et des études",TERM_COND_COMM:"Règles de participation prévues dans les conditions générales",YEAR:"Année",CTN_ADMINISTRATIVE:"CTN-Administrative Change to",CTN_APPENDIX:"CTN-Appendix",CTN_CONTACT:"CTN-Contact Change",CTN_CROSS:"CTN-Cross Reference Letter",CTN_DATA:"CTN-Data Safety Monitoring Committee",CTN_DEAR:"CTN-Dear Investigator/Doctor Letter",CTN_DILUENT:"CTN-Diluent Change",CTN_DRUG_PROD:"CTN-Drug Product Change",CTN_DRUG_SUBS:"CTN-Drug Substance change",CTN_ENROLLMENT:"CTN-Enrollment Suspension",CTN_ETHICS:"CTN-Ethics Board Communications",CTN_EXCLUSION_INCLUSION:"CTN-Exclusion/Inclusion Criteria Revision",CTN_INFORMED:"CTN-Informed Consent Form Update",CTN_INVESTIGATOR:"CTN-Investigator’s Brochure Update",CTN_NEW_MANUFACTURING:"CTN-New Manufacturing Site for",CTN_NEW_PKG:"CTN-New Packaging/Labelling Site",CTN_NEW_QC:"CTN-New QC Testing Site",CTN_NOL:"CTN-NOL Response",CTN_PACKAGING_LABELLING:"CTN-Packaging/Labelling Name Change",CTN_PM:"CTN-PM Update",CTN_PROTOCOL_INFO_UPDATE:"CTN-Protocol and Informed Consent Form Update",CTN_PROTOCOL_UPDATE:"CTN-Protocol Update/Change",CTN_QOS:"CTN-QOS Update",CTN_REFUSALS:"CTN-Refusals by Foreign Regulatory Authorities/REBs",CTN_REGULATORY:"CTN-Regulatory Hold",CTN_RESPONSE:"CTN-Response to Information Request",CTN_SAFETY:"CTN-Safety Update",CTN_SHELF_PD:"CTN-Shelf Life Extension for DP",CTN_SHELF_DS:"CTN-Shelf Life Extension for DS",CTN_SITE:"CTN-Site Closure",CTN_SOURCE:"CTN-Source Change of",CTN_STRAIN:"CTN-Strain Change",CTN_STUDY_COMPLETION:"CTN-Study Completion",CTN_STUDY_DISC:"CTN-Study Discontinuation due to",CTN_STUDY_EXT:"CTN-Study Recruitment Timeline Extension",CTN_STUDY_SUS:"CTN-Study Suspension",CTN_TRANS_OWN:"CTN-Transfer of Ownership",CTN_FORM_BROC_UPDATES:"CTN-Informed Consent Form and Investigator’s Brochure Updates",CTN_IMPD_UPDATE:"CTN-IMPD Update",CTN_NEW_SUMM_ADF:"CTN-New Summary of Additional Drugs Form",CLINICAL:"CLINICAL",CLINICAL_QUALITY:"CLINICAL & QUALITY",QUALITY:"QUALITY",INITIAL_TEAT_SOLU_MONO:"INITIAL - Monographie de solutions antiseptiques pour les trayons",REQ_ACCEPTED:"Demande acceptée",SND_LANG_PM:"Étiquettes en langue seconde",REQUESTER_NAME:"Nom du demandeur",REQUESTER_NAME2:"Nom du demandeur 2",REQUESTER_NAME3:"Nom du demandeur 3",DEFER_FEES:" Un paiement différé est demandé avec cette transaction",DEFER_STATEMENT:"La déclaration à l’appui de la demande de report de paiement est inclus.",FEE_REMISSION:"Une remise de frais est demandé avec cette transaction",STATEMENT_REVENUE:"Une déclaration signée par le responsable des affaires financières du demandeur est inclus pour attester que les frais payables sont plus élevés que 10% des revenus bruts anticipés.",SUB_CLASS:"Catégorie de la présentation",FEE_AMOUNT:"Frais",FEE_DESCRIPTION:"Description de la présentation",REMISSION_ELIGIBLE:"Vous êtes admissible à présenter une demande de remise des frais. Les frais de soumission sont supérieurs à 10 % des recettes brutes prévues.",REMISSION_INELIGIBLE:"Vous n’êtes pas admissible à une remise des frais. Les frais de soumission sont inférieurs à 10 % des recettes brutes prévues.",IS_FEE_TRANSACTION:"Est-ce que des frais nouveaux ou révisés sont associés à cette transaction? Veuillez identifier les frais lors de la demande de remise.",REGULATORY_FEES:"Frais",GROSS_REVENUE:"Les recettes brutes prévues pour ce médicament pour la période de vérification des frais payer",TEN_PERCENT_REVENUE:"10% des recettes brutes prévues",REQUIRED_DOC:"Documents nécéssaire",SUPPORTING_DOC:"Veuillez inclure la déclaration exigée signée ET au moins un des documents de soutien pour l’établissement des frais applicables supérieurs à 10 % des revenus bruts prévus pour les ventes du produit au Canada au cours de la période de vérification.",EST_MARKET_SHARE:"La part estimée du marché (c’est-à-dire le potentiel de marché du produit par rapport à la demande totale du marché pour des produits similaires au Canada)",SIMILAR_PRODUCT:"Une comparaison avec des produits similaires offerts sur le marché canadien ou d’autres marchés similaires (par exemple États-Unis, Union européenne, etc.)",SALES_HISTORY:"Un historique des ventes avant l’amélioration du produit ou un historique des ventes de produits similaires",MARKETING_PLAN:"Un plan de marketing ou un plan de produit pour le produit pharmaceutique",AVG_SALES:"Le prix de vente moyen et la demande",FEES_LESS10K:"Des frais de 10 000 $ ou moins doivent être soumis au moment du dépôt de la présentation, le supplément ou la demande. S’il vous plaît remplir le formulaire Détails du paiement en avance pour présentations de drogues et fiches maîtresses.",ADVANCE_PAYMENT:"Détails du paiement pour les présentations de drogue et les fiches maîtresses.",SPONSOR_INVOICE:"Les frais d’examen ne doivent pas être inclus dans la présentation, le supplément à une présentation ou la demande de drogue. Les factures de plus de 10 000 $ seront envoyées aux promoteurs.",PAYMENT_METHODS:"Veuillez sélectionner tous les modes de paiement que vous avez l’intention d’utiliser.",ONE_PAYMENT_METHOD:"Veuillez sélectionner tous les modes de paiement que vous avez l’intention d’utiliser.",ONE_FEE_DOC:"Au moins un des documents de soutien établissant que les frais applicables, supérieurs à 10 % des revenus bruts, sont prévus de la vente du produit au Canada au cours de la période de vérification.",PLEASE_REMIT:"Veuillez payer les frais de traitement de la remise de 590$ en utilisant les détails du paiement en avance pour présentations de drogues et fiches maîtresses.",APPLY_DEFER:"Vous demandez le report du paiement. Veuillez envoyer le présent formulaire sans aucun paiement.",BANK_DRAFT:"Traite bancaire internationale",MONEY_ORDER:"Mandat",CHEQUE:"Chèque",PAYMENT:"Paiement",CREDIT:"MasterCard/Visa/American Express (AMEX)",BANK_WIRE:"Transfert bancaire (incluez la confirmation de la banque)",EXISTING_CREDIT:"Paiement au moyen d’un crédit existant",PREFEERED_OPTION:"Option de service de paiement de factures (méthode préférée)",REG_TRANSACT:"Transaction réglementaire",LIFE_REC:"Détails de l'enregistrement du transaction",ONELIFEREC:"Un enregistrement des détails de la transaction est obligatoire.",SAVELIFEREC:"Un enregistrement des détails de la transaction est nécessaire pour enregistrer.","LIFECYCLECTRL.LIFECYCLEDETAILSFORM":"avec un ou plus des champs dans la section Détails de la transaction",IS_NEW_ACTIVITY:"Est-ce que cette transaction concerne une activité réglementaire nouvelle ou existante?",IS_SIGNED_3RD_PARTY:"Le contact pour cette activité de réglementation est-il un tiers correspondant au nom du fabricant / sponsor?",AUT_LETTER_NOTE:"Un formulaire d’autorisation signé par le tiers est requis pour les activités réglementaires énumérées sur le formulaire. Reportez-vous à la liste figurant dans la section des notes/exigences du formulaire publiée sur le site Web de Santé Canada.",IS_PRIORITY:"Cette activité de réglementation a-t-elle été approuvée aux fins d’examen prioritaire?",IS_NOC:"Cette activité de réglementation a-t-elle été approuvée aux fins d’examen pour un AC-C? ",IS_ADMIN_SUBMISSION:"S'agit-il d'une demande administrative ou d'une présentation?",ADMIN_DESCRIPT:"Description de la présentation administrative ou de la composante administrative",ADMIN_SUB_TYPE:"Raison de la demande administrative ou de la présentation",ACTIVITY_LEAD:"Responsable de l’activité réglementaire",OTHER_DOC_DETAILS:"Autres Détails de la Documentation","B14-20160301-09":"Pharmaceutique","B14-20160301-02":"Biologique","B14-20160301-10":"Vigilance après la commercialisation (pour la Direction des produits de santé commercialisés (DPSC))","B14-20160301-06":"Produit de santé destinés aux consommateurs","B14-20160301-11":"Vétérinaire","B14-20160301-04":"Essai clinique - biologiques","B14-20160301-05":"Essai clinique - pharmaceutique",RESET:"Réinitialiser",RESET_INFO:"Si vous souhaitez activer le bouton « Générer le XML final », cliquez sur le bouton « Réinitialiser » pour effacer les renseignements spécifiques à la transaction.",FEE_REMIT_NO_PAYMENT:"Veuillez ne fournir aucun paiement avec cette transaction. Le paiement des frais sera exigé sur présentation d'une facture,",MITIGATION_TYPE:"Il est possible de se prévaloir des mesures d’atténuation suivantes (choisir un). Les promoteurs doivent certifier qu’ils satisfont aux critères établis dans le Règlement sur les aliments et drogues.",CERTIFY_ORGANIZATION:"Nous certifions que nous répondons à la définition de petites entreprises et que nous avons enregistré notre entreprise auprès de Santé Canada avant de soumettre cette soumission ou demande. Nous comprenons que le fait de ne pas s'inscrire en tant que petite entreprise avant de soumettre cette soumission ou demande entraînera l'inscription intégrale à la totalité des frais.",CERTIFY_ORGANIZATION_A:"un nombre total d'employés de moins de 100 personnes, ou,",CERTIFY_ORGANIZATION_B:"un revenu brut annuel total compris entre 30 000 et 5 millions de dollars.",SMALL_BUSINESS_FEE_APPLICATION:"Nous n'avons pas encore déposé de demande d'un médicament auprès de Santé Canada. Nous sommes en train de déposer notre première demande de traitement de médicaments.",FIRST_SUBMISSION:"C'est ma première soumission / application",CERTIFY_GOVERMENT_ORGANIZATION:"Nous certifions que notre organisation est une Direction générale ou une agence du gouvernement du Canada ou d’une province ou d’un territoire.",CERTIFY_URGENT_HEALTH_NEED:"Nous certifions que le médicament faisant l’objet de la présentation ou de la demande se trouve dans la liste des médicaments utilisés pour des besoins urgents en matière de santé publique conformément au Règlement sur l’accès aux médicaments dans des circonstances exceptionnelles, et que:",DRUG_THE_SAME_INGREDIENT:"Le médicament comporte le même ingrédient médicinal, la même concentration et la même voie d’administration, ainsi qu’une forme dosifiée comparable, qu’un médicament qui pourrait être importé en vertu du paragraphe C.10.001(2) de ce règlement;",NO_DRUG_IDENTIFICATION_NUMBER:"Aucun numéro d’identification de médicament n’a été attribué en vertu de l’article C.01.014.2 de ce règlement pour ce médicament ou pour un autre médicament qui comporte le même ingrédient médicinal, la même concentration et la même voie d’administration et est offert dans une forme dosifiée comparable;",NO_NOTICE_COMPLIANCE:"Aucun avis de conformité n’a été émis en vertu de l’article C.08.004 de ce règlement pour ce médicament ou pour un autre médicament qui comporte le même ingrédient médicinal, la même concentration et la même voie d’administration et est offert dans une forme dosifiée comparable;",CERTIFY_FUNDED_HEALTH_INSTITUTION:"Nous certifions que notre établissement est financé par le gouvernement du Canada ou le gouvernement d’une province ou d’un territoire et que cet établissement :",CERTIFY_FUNDED_HEALTH_INSTITUTION_A:"est autorisé, approuvé ou désigné par une province en conformité avec les lois de cette province pour fournir des soins ou des traitements à des personnes ou à des animaux souffrant de quelque maladie que ce soit ou",CERTIFY_FUNDED_HEALTH_INSTITUTION_B:"est la propriété du gouvernement du Canada ou est exploité par ce dernier ou par le gouvernement d’une province et fournit des soins de santé.",CERTIFY_ISAD:"Nous certifions que nous avons déposé une demande pour un médicament COVID-19 désigné en vertu de l'ordonnance provisoire concernant l'importation, la vente et la publicité de médicaments à utiliser en relation avec le COVID-19 (ISAD), et qu'une soumission n'a pas été déposée auparavant pour approbation pour ce même médicament.",TYPE_MIN:"La date de fin ne doit pas être antérieure à la date de début.",FEE_PAY_NOTICE:"N'envoyez aucun paiement avec votre présentation, supplément ou demande. Santé Canada vérifiera le montant des frais et présentera une facture en conséquence.  Pour plus d'informations sur le paiement des factures et les frais en vigueur, veuillez consulter la page web : ",FEES_AND_FUNDING_REV:"Financement et frais",FEES_AND_FUNDING_URL:"https://www.canada.ca/fr/sante-canada/services/medicaments-produits-sante/financement-frais.html",MITIGATION_MEASURES:"Mesures d'atténuation",REG_ACTIVITY_LEAD_DESC:"Description du responsable de l'activité de réglementation",ACTIVITY_LEAD_PHA:"Pharmaceutique: comprend toutes les activités et transactions réglementaires relatives aux produits pharmaceutiques sur ordonnance et aux produits éthiques sous le mandat de la direction des médicaments pharmaceutiques (DMP). Cette piste ne s'applique pas aux produits pharmaceutiques ou désinfectants sans ordonnance ni aux activités de réglementation de la vigilance post-commercialisation. ",ACTIVITY_LEAD_BIO:"Biologique: Comprend toutes les activités et transactions de réglementation relevant du mandat de la Direction des produits biologiques et des médicaments radiopharmaceutiques (DMBR) (produits biologiques / radiopharmaceutiques).",ACTIVITY_LEAD_PMV:"Vigilance post-commercialisation: Comprend toutes les activités et transactions réglementaires relevant du mandat de la Direction des produits de santé commercialisés (DPSC) (produits pharmaceutiques sur ordonnance et sans ordonnance à usage humain, produits biologiques, radiopharmaceutiques)",ACTIVITY_LEAD_CHP:"Produit de santé destinés aux consommateurs: Comprend toutes les activités et transactions réglementaires concernant les produits pharmaceutiques et désinfectants sans ordonnance sous le mandat de la Direction des produits de santé naturels et sans ordonnance (DPSNSO).",ACTIVITY_LEAD_VET:"Vétérinaire: Comprend toutes les activités et transactions réglementaires relatives aux produits pharmaceutiques sur ordonnance et en vente libre sous le mandat de la Direction des médicaments vétérinaires (DMV).",HT_LOAD_FILE_2:"Lors de la production d’une copie de travail, le fichier doit être chargé en format .hcsc.",HT_LOAD_FILE_3:"Lors de la consultation ou de la mise à jour d’une version finale du fichier XML, le fichier doit être chargé en format .xml.",HT_DOSSIER_TYPE_1:"Le dossier biologique s’applique à tous les produits biologiques et radiopharmaceutiques.",HT_DOSSIER_TYPE_2:"Le dossier pharmaceutique s’applique à tous les produits pharmaceutiques, en sans ordonnance et désinfectants.",HT_DOSSIER_TYPE_3:"Le dossier d'essai clinique s'applique à tous les produits pharmaceutiques à usage humain, aux produits biologiques et radiopharmaceutiques, aux produits sans ordonnance et éthiques et aux désinfectants",HT_DOSSIER_TYPE_4:"Le dossier vétérinaire s'applique à tous les produits pharmaceutiques à usage vétérinaire, sans ordonnance et produits éthiques",HT_COMP_ID_1:"L’identificateur de la compagnie peut être obtenu à partir du dernier fichier XML de compagnie émis par Santé Canada, ou du « code de compagnie » figurant dans le formulaire annuel de notification des médicaments (FADN).",HT_COMP_ID_2:"Le numéro de la compagnie doit comprendre 5 chiffres. Ajoutez un zéro au début, si nécessaire.",HT_DOSSIER_ID:"Identificateur de dossier - L'identificateur de dossier est un code créé par Santé Canada pour identifier le dossier de façon unique. Si inconnu, un identificateur de dossier peut être obtenu auprès du Système de suivi des présentations de drogues - Accès à l'industrie (DSTS-IA). Si un identificateur de dossier n'a pas encore été attribué, les promoteurs devraient poser une demande en utilisant le formulaire approprié, disponible sur la page Web d'information du PIR.",HT_DOSSIER_ID_0:"Le format de l’identificateur de dossier est une lettre minuscule suivie de six chiffres (par exemple x######). Par exemple, dans ce champ, veuillez saisir l'un des éléments suivants en fonction du type de dossier:",HT_DOSSIER_ID_1:"Dossier formaté eCTD - e######",HT_DOSSIER_ID_2:"Dossier formaté non-eCTD pour la division 1 Médicaments à usage humain - d######",HT_DOSSIER_ID_3:"Dossier formaté non-eCTD pour la division 8 Médicaments à usage humain - p######",HT_DOSSIER_ID_4:"fr_Non-eCTD formatted dossier for Division 5 Human drugs – c######",HT_DOSSIER_ID_5:"Dossier formaté non-eCTD pour les médicaments vétérinaires - v ######",HT_PROD_NAME_1:"Veuillez indiquer le nom des produits incluent dans cette activité réglementaire. Si plusieurs produits sont inclus, veuillez les énumérer et les séparer par un point virgule (;).",HT_PROD_NAME_2:"Le nom du produit est le nom assigné par le fabricant ou le promoteur afin de distinguer le médicament ou le produit sous lequel il est annoncé et vendu. Il est également utilisé pour identifier le produit dans toutes les correspondences en lien avec une soumission ou une application en plus de se retrouver sur l'étiquetage, la monographie de produit et l'encart, lorsqu'applicable. Si le nom du produit n'a pas encore été déterminé, le nom propre, le nom common ou le code de recherche du médicament ou du produit peut être utilisé.",HT_PROD_NAME_3:"L’entrée de nom de produit dans ce champ ne sera examinée qu’avec la transaction initiale d’un dossier (exemple : sequence 0000 pour le format eCTD). Pour toutes les transactions de sous-séquence, toutes les modifications apportées au nom du produit doivent être capturées et seront examinées à l’aide du modèle d’informations sur le produit. Les modifications de nom de produit sur ce modèle ne seront pas examinées.",HT_PROD_NAME_4:"Pour les essais cliniques: veuillez saisir le nom du produit expérimental et, s'il existe plusieurs produits expérimentaux, tous doivent être saisis. Un produit expérimental correspond à un produit impliqué dans la conduite d'un essai clinique. Il pourrait s'agir d'un produit non disponible au Canada, d'un produit en développement ou d'un produit déjà approuvé au Canada mais utilisé en dehors de l'indication approuvée.",HT_PROTOCOL_NUM:"Le numéro de protocole doit être attribué par le promoteur pour chaque protocole lors de la soumission d'une demande d'essai clinique (CTA) à Santé Canada. Les promoteurs sont encouragés à inclure un numéro de protocole pour les demandes de réunion pré-CTA si disponible. En général, un numéro de protocole est une séquence alphanumérique de longueur variable utilisée par les sponsors pour attribuer un numéro de référence à leur protocole. Le numéro de protocole des essais cliniques doit rester le même pendant la durée de l'essai. Lors de la mise à jour de leurs documents, y compris les protocoles, les promoteurs doivent, conformément à leurs pratiques internes de gestion des enregistrements / documents, appliquer les principes de contrôle de version. Lors de la soumission d'une modification ou d'une notification CTA, les promoteurs doivent indiquer la version ou le numéro de modification du protocole. Pour plus d'informations sur la numérotation correcte de la version du protocole ou de l'amendement fourni dans CTA-A ou CTA-N, veuillez consulter le",HT_PROTOCOL_NUM_SUB:"Guide pour remplir le formulaire de demande de présentation de drogue",HT_PROTOCOL_NUM_SUB_URL:"https://www.canada.ca/fr/sante-canada/services/medicaments-produits-sante/medicaments/demandes-presentations/formulaires/directives-facon-remplir-formulaire-presentation.html",HT_REFER_TO:"Veuillez consulter la",HT_ARE_FEES:"La section portant  sur les frais doit être remplie afin présenter correctement une demande de mesures d'atténuation des frais.",HT_PRIO_REV:"Ligne directrice à l'intention de l'industrie : Évaluation prioritaire des présentations de drogues",HT_PRIO_REV_URL:"https://www.canada.ca/fr/sante-canada/services/medicaments-produits-sante/medicaments/demandes-presentations/lignes-directrices/evaluation-prioritaire/intention-industrie-presentations-drogues.html",HT_NOC_REV:"Ligne directrice : Avis de conformité avec conditions (AC-C)",HT_NOC_REV_URL:"https://www.canada.ca/fr/sante-canada/services/medicaments-produits-sante/medicaments/demandes-presentations/lignes-directrices/avis-conformite-conditions.html",HT_ADMIN_SUB:"Ligne Directrice: Traitement administratif des présentations et des demandes concernant les médicaments destinés aux humains ou les désinfectants",HT_ADMIN_SUB_URL:"https://www.canada.ca/fr/sante-canada/services/medicaments-produits-sante/medicaments/demandes-presentations/lignes-directrices/traitement-administratif-humains-desinfectants-medicaments-2019/document.html",HT_ADMIN_SUB_1:"Pour obtenir des instructions concernant la soumission administrative des médicaments vétérinaires, veuillez communiquer avec vdd.skmd.so-dgps.dmv.cp@hc-sc.gc.ca",HT_CTRL_NUM_1:"Entrez le numéro de contrôle à six chiffres associé à cette activité de réglementation (s’il est connu).",HT_CTRL_NUM_2:"Entrez « 000000 » pour les transactions réglementaires qui n’exigent pas de numéro de contrôle (p. ex., niveau III - Changements survenus après l’AC; et réorganisation des dossiers en format eCTD).",HT_CTRL_NUM_3:"Entrez « 000000 » pour la première transaction d’une NOUVELLE activité de réglementation pour laquelle un numéro de contrôle n’a pas été encore attribué.",HT_CTRL_NUM_4:"Entrez le numéro de contrôle préalablement attribué pour la première transaction d’une nouvelle activité de réglementation communiquée par Santé Canada (p. ex., au moyen d’une lettre d’avis).",HT_CTRL_NUM_5:"Les formulaires de déclaration de médicament (FDM) doivent être soumis sous le même numéro de contrôle que celui attribué aux produits qui sont actuellement en vente sur le marché.",HT_ACT_LEAD_1:"Biologique: Comprend toutes les transactions et les activités appliquées pour les produits biologiques ou radiopharmaceutiques qui relèvent du mandat de la direction des médicaments biologiques et radiopharmaceutiques (anciennement connu sous le nom de la direction des médicaments biologiques et radiopharmaceutiques (DMBR).",HT_ACT_LEAD_2:"Essai clinique - produits biologiques: Comprend toutes les activités de réglementation et les transactions pour les essais cliniques de produits biologiques dans le cadre du mandat de la Direction des produits biologiques et des thérapies génétiques (BGTD).",HT_ACT_LEAD_3:"fr_ Clinical Trials – Pharmaceuticals: Includes all regulatory activities and transactions for clinical trials for prescription pharmaceuticals under the Therapeutic Products Directorate (TPD) mandate and  for biologics under the Biologics and Genetic Therapies Directorate (BGTD) mandate",HT_ACT_LEAD_4:"Produits de santé destinés aux consommateurs: Comprend toutes les transactions et activités d'activités pour les médicaments sans ordonnance qui relèvent du mandat de la Direction des produits de santé naturels et sans ordonnance (DPSNSO).",HT_ACT_LEAD_5:"Pharmaceutique: Comprend toutes les transactions et activités d'activités pour les médicaments avec ordonnance ou qui sont administrés ou obtenus par le biais d'un professionnel de la santé qui soulève le mandat de la direction des médicaments pharmaceutiques (DMP).",
HT_ACT_LEAD_6:"Vigilance après commercialisation: Comprend toutes les transactions et activités d'activités pour les médicaments avec ou sans ordonnance pour l'utilisation humaine et les produits biologiques et radiopharmaceutiques qui relèvent du mandat de la Direction des produits de santé commercialisés (DPSC).",HT_ACT_LEAD_7:"Vétérinaire: Comprend toutes les activités et transactions réglementaires relatives aux produits pharmaceutiques sur ordonnance et sans-ordonnance sous le mandat de la Direction des médicaments vétérinaires (DMV)",HT_YEAR_CHANGE_1:"Pour les produits pharmaceutiques à usage vétérinaire et humain, les produits biologiques et radiopharmaceutiques, reportez-vous au:",HT_YEAR_CHANGE_2:"Changements survenus après l'avis de conformité (AC): ",HT_YEAR_CHANGE_3:"Document sur la qualité",HT_YEAR_CHANGE_4:"Document sur l'innocuité et l'efficacité",HT_YEAR_CHANGE_URL_1:"https://www.canada.ca/fr/sante-canada/services/medicaments-produits-sante/medicaments/demandes-presentations/lignes-directrices/changements-survenus-apres-avis-conformite/document-qualite.html",HT_YEAR_CHANGE_URL_2:"https://www.canada.ca/fr/sante-canada/services/medicaments-produits-sante/medicaments/demandes-presentations/lignes-directrices/changements-survenus-apres-avis-conformite/document-innocuite-efficacite.html",HT_YEAR_CHANGE_5:"Pour les produits pharmaceutiques à usage vétérinaire, reportez-vous également à:",HT_YEAR_CHANGE_6:"Guide à l'intention de l'industrie - Préparation des présentations de médicaments vétérinaires pour des médicaments innovants",HT_YEAR_CHANGE_7:"Guide à l'intention de l'industrie - Préparation des présentations abrégées de drogues nouvelles vétérinaires - Médicaments génériques pour les médicaments génériques",HT_YEAR_CHANGE_URL_3:"https://www.canada.ca/fr/sante-canada/services/medicaments-produits-sante/medicaments-veterinaires/legislation-lignes-directrices/lignes-directrices/ligne-directrice-intention-industrie-preparation-presentations-drogues-nouvelles-veterinaires-sante-canada-2007.html",HT_YEAR_CHANGE_URL_4:"https://www.canada.ca/fr/sante-canada/services/medicaments-produits-sante/medicaments-veterinaires/legislation-lignes-directrices/lignes-directrices/ligne-directrice-intention-industrie-preparation-presentations-abregees-drogues-nouvelles-veterinaires-medicaments-generiques-sante-canada-2009.html",HT_YEAR_CHANGE_8:"Include l'année au cours duquel le change a été fait, le nom de la ligne directrice et le numéro ou la lettre correspondant au changement dans cette même ligne directrice, lorsqu'applicable. ",HT_YEAR_CHANGE_9:" 2018; Changements après: qualité; 15, 18, 23",HT_YEAR_CHANGE_10:"Juin 2017 au ma1 2018 14, 16, 27",HT_YEAR_CHANGE_11:"2016, 2017, 2018, 5, 8, 17",HT_YEAR_CHANGE_12:"Pour les médicaments et les produits biologiques et radiopharmaceutiques, veuillez consulter:",HT_YEAR_CHANGE_13:"Par exemple:",HT_YEAR_CHANGE_14:"fr_Include the year that the change took place, the name of the guidance document and the number or letter of the corresponding change in the appropriate guidance document, when applicable. Otherwise, briefly describe the change:",HT_DESC_CHANGE_1:"Consultez les sections pertinentes des annexes des lignes directrices changements survenus après l'avis de conformité (AC) pour identifier les changements nécessaires:",HT_DESC_CHANGE_2:"c. à d., Document sur la qualité - 3.2.S Substance médicamenteuse no 1, 2d, 9b, 17;",HT_DESC_CHANGE_3:"c.-à-d., Document sur la qualité - 3.2.S Substance médicamenteuse (Trousses/Produits radiopharmaceutiques contenant des substances d’origine chimique) - no 3, 9, 10c;",HT_DESC_CHANGE_4:"c. à d., Document sur l’innocuité et l’efficacité - Suppléments - a, d.",HT_REQ_SOL:"Si le nom du demandeur est inconnu, entrez l'adresse courriel générique à partir duquel la demande a été envoyée.",HT_FROM:"fr_Time should be entered in this format: number, followed by one of the words hours, days or months.",HT_FEES_1:"Veuillez consulter la publication suivante",HT_FEES_2:"Ligne directrice : Frais pour l’examen des présentations et des demandes de médicaments à usage humain et de désinfectants assimilés à une drogue",HT_FEES_URL:"https://www.canada.ca/fr/sante-canada/services/medicaments-produits-sante/medicaments/frais/examen-presentations-demandes-drogue.html",HT_CONTACT_1:"Les renseignements fournis concernent la personne à contacter pour cette activité réglementaire c.-à-d., la personne ou la compagnie à qui Santé Canada doit adresser toute correspondance ayant trait à l’activité en question.",HT_CONTACT_2:"la personne à contacter pour cette activité réglementaire;",HT_CONTACT_3:" c.-à-d., la personne ou l’entreprise à qui Santé Canada doit adresser toute correspondance ayant trait à l’activité en question.",HT_CONTACT_4:"Veuillez noter que le choix du mode de correspondance revient à Santé Canada.",HT_CONTACT_6:"Les promoteurs doivent mettre à jour ces renseignements au besoin ou confirmer que l’information est toujours valide.",HT_CONTACT_7:"Entrez le nom de la compagnie à laquelle appartient la personne-ressource associée à l’ cette activité. Si la personne-ressource n’est pas associée à cette compagnie, entrez son nom.",ROUTING_ID_1:"L'identificateur d'acheminement (ID) est un identifiant unique à chaque compte créé sur le Portail Commun de Demandes Électroniques (PCDE). Il est utilisé pour identifier le type de compte sur une des deux interfaces du portail soit l'Applicability Statement 2 (AS2) ou le WebTrader.",ROUTING_ID_2:"Pour les utilisateurs de l’interface Webtrader, votre identificateur d’acheminement se retrouve dans l’avis de réception. Pour y accédez, veillez aller à la boîte de réception WebTrader et cliquez sur «Reçu» et «Afficher» le document. La page de Contenu du document affichera et l'identificateur d’acheminement se trouve sous l'attribut: «X-Cyclone-To:»",ROUTING_ID_3:"Pour les utilisateurs de l'interface AS2, l'identificateur d'acheminement doit être créé par la compagnie. Il est recommandé que le numéro du système de numérotation universel de la compagnie soit utilisé. Cependant, il est important de noter d'une liste de caractères alphanumériques est tout aussi acceptable.",ROUTING_ID_5:"Pour toutes autres questions sur la recherche de l'identificateur d'acheminement, veuillez contacter directement le service de dépannage de la Food and Drug Administration au ",HT_XML_1:"Chaque transaction du PIR doit contenir une version finale du fichier de transaction réglementaire (en format XML) dans la section 1.2.1.",HT_XML_2:"Reportez-vous au document d'orientation du RIP pour des informations détaillées.",HT_XML_3:"Un fichier XML de transaction réglementaire (RT) final doit être inclus dans",HT_XML_4:"Drogues humaines - section 1.2.1 de la transaction utilisant le PIR.",HT_XML_5:"Médicaments vétérinaires - section 1.5 de la transaction utilisant le PIR.",NOTICE_APR_2020:"Remarque importante: Ce modèle comprend les frais révisés à partir du 1er avril 2020 et devrait être utilisé pour les transactions réglementaires prévues à être déposées le 1er avril 2020 ou APRÈS.",PROD_PROTOCOL:"Numéro de protocol",CTA_FROM:"De [l'heure]",CTA_TO:"À [l'heure]","COVIR-19":"Demande d'ordonnance provisoire COVID-19","COVIR-19AMD":"Demande d'ordonnance provisoire COVID-19 - Modification",RA_TYPE_NOTE_UDRA:"Si la description de votre transaction ne correspond à aucune des catégories de transactions répertoriées, veuillez contacter la direction appropriée à Santé Canada par courriel: <br>Pour les produits biologiques et les radiopharmaceutiques à usage humain :  <a href='mailto:brdd.ora@hc-sc.gc.ca'>brdd.ora@hc-sc.gc.ca</a> <br>Pour les médicaments à usage humain : <a href='mailto:rpmd-dgpr@hc-sc.gc.ca'>rpmd-dgpr@hc-sc.gc.ca</a> <br>Pour les produits en vente libre et les désinfectants : <a href='mailto:rpmd-dgpr@hc-sc.gc.ca'>rpmd-dgpr@hc-sc.gc.ca</a>",RA_TYPE_NOTE_L3NOC:"Il n'y a pas de numéro de contrôle associé à cette activité réglementaire",RA_TYPE_NOTE_NC:"Les frais ne s'appliquent pas à ce type d'activité réglementaire (pour des changements dans la qualité de médicaments radiopharmaceutiques ou biologiques destinés à l'usage humain)",RA_TYPE_NOTE_DIN:"Veuillez consulter ligne directrice identification numérique attribuée à une drogue (DIN)",RA_TYPE_NOTE_PDC:"Les frais ne s'appliquent pas à ce type d'activité réglementaire",RA_TYPE_NOTE_PDINN:"Ne doit pas être utilisé pour les formulaires de notification de drogue.",INITIAL_DESCR:"Première transaction d’une nouvelle activité réglementaire pour un produit qui n'a pas de DIN existant.",PANDEMIC_APPL_DESCR:"Première transaction d'une nouvelle activité réglementaire.",POST_ANTH_CHANGE_DESCR:"Première transaction d'une nouvelle activité réglementaire.",POST_NOC_DIV1_CHANGE_DESCR:"Première transaction d'une nouvelle activité réglementaire.",POST_CLEARANCE_DATA_DESCR:"Transactions liées à une activité réglementaire déjà compensée avec numéro de contrôle existant. Cela ne s'applique pas aux transactions liées aux activités de réglementation de la vigilance post-commercialisation.",POST_NOC_CHANGE_DESCR:"Première transaction d'une nouvelle activité réglementaire.",PROCESSING_CLARIF_RESPONSE_DESCR:"Réponse à la demande de clarification de Santé Canada pendant le traitement.",ROLLING_INFO_DESCR:"Pour une transaction ultérieure contenant des informations identifiées dans le cadre du plan.",CHANGE_TO_DIN_DESCR:"Première transaction d’une nouvelle activité réglementaire pour un produit qui n'a pas de DIN existant.",CANCEL_LETTER_DESCR:"Transaction visant à retirer officiellement l'activité de réglementation.",ADMIN_DESCR:"Première transaction d'une nouvelle activité réglementaire pour un changement administratif selon la Ligne directrice : ",ADMIN_DESCR_LINK_LABEL:"Traitement administratif des présentations et des demandes concernant les médicaments destinés aux humains ou les désinfectants",ADMIN_DESCR_URL:"https://www.canada.ca/fr/sante-canada/services/medicaments-produits-sante/medicaments/demandes-presentations/lignes-directrices/traitement-administratif-humains-desinfectants-medicaments-2019/document.html",MEETING_MINUTES_DESCR:"Transaction pour fournir le procès-verbal d'une réunion de pré-soumission.",SCREENING_CLARIF_RESPONSE_DESCR:"Réponse à la demande de clarification de Santé Canada pendant d'examen préliminaire.",PRESUB_MEETING_RQ_DESCR:"Transaction pour demander une réunion de pré-soumission.",UNSOLICITED_DATA_DESCR:"Veuillez consulter la section 'Information non sollicitée' dans le Ligne directrice : Gestion des présentations et des demandes de drogue",REFER_TO_GUIDE_DOC:"Veuillez consulter la Ligne directrice : ",ADMIN_GUIDE_DOC:"Traitement administratif des présentations et des demandes concernant les médicaments destinés aux humains ou les désinfectants",ADMIN_GUIDE_DOC_URL:"https://www.canada.ca/fr/sante-canada/services/medicaments-produits-sante/medicaments/demandes-presentations/lignes-directrices/traitement-administratif-humains-desinfectants-medicaments-2019/document.html",ADMIN_GUIDE_DOC_NOTE:"Remarque : La catégorie de frais administratifs doit être sélectionnée.",ADMIN_GUIDE_DOC_NOTE2:"La description de la transaction « Administratif » doit être utilisée pour la première transaction pour cette activité de réglementation.",ADVISEMENT_LETTER_RESPONSE:"Réponse à la lettre de mise en garde de mettre à jour la monographie de produit",NOF_DRUG_SHORT:"Avis de pénurie de médicaments",QUALITY_ISSU:"Problème de qualité soulevé par la compagnie et/ou un autre organisme de réglementation",GMP_COMP_ISSU:"Problèmes de conformité aux BPF relevés par d’autres organismes de réglementation",RECLASS_LOT_RELEASE:"Demande de reclassification dans le cadre du Programme d’autorisation de mise en circulation des lots de la DPBTG",NOC_COMPLIANCE:"Avis de conformité avec conditions (AC-C) - engagement",UDRA_CANCEL_LETTER:"Lettre d'annulation pour l'ARND",SEQUENCE_CLEANUP:"Nettoyage du dossier eCTD",UDRA_MEETING_MINUTES:"Procès-verbal de la réunion pour l'ARND",UDRA_EMAIL_RQ_RESPONSE:"Réponse à une demande par courrier électronique pour l'ARND",UDRA_PROCESSING_CLARIF_RESPONSE:"Réponse à la demande de clarification du traitement pour l'ARND",GEN_VOL_NOF:"Notification générale / volontaire",ADVISEMENT_LETTER_RESPONSE_DESCR:"Lorsqu’il s’agit de justifier la non-intégration des modifications demandées par lettre de mise en garde.",NOF_DRUG_SHORT_DESCR:"Lorsqu’on avise Santé Canada d’une pénurie de médicaments, y compris une demande de mise en circulation spéciale de lots liée à la pénurie de médicaments.",QUALITY_ISSU_DESCR:"Lorsqu'il s'agit de notifier à Santé Canada des problèmes liés à la qualité (exemple : Notification de résultats non conformes).",GMP_COMP_ISSU_DESCR:"Lorsqu'il s'agit de notifier à Santé Canada des problèmes/préoccupations concernant des défauts de remplissage du support, la stérilité, le non-respect des BPF, les résultats non conformes (p. ex. échec du test de défaillance d’apparence en raison de particules visibles), les essais de puissance, la stabilité, etc. qui ne sont pas soumis à la présentation.",RECLASS_LOT_RELEASE_DESCR:"Lorsqu’on présente une demande en dehors d’une activité réglementaire.",NOC_COMPLIANCE_DESCR:"Lors de la soumission d'informations à Santé Canada conformément au document d'orientation :  <a href='//www.canada.ca/fr/sante-canada/services/medicaments-produits-sante/medicaments/demandes-presentations/lignes-directrices/avis-conformite-conditions.html'>Avis de conformité avec conditions</a> (AC-C)  <ul><li>Rapport annuel sur l'état d'avancement des essais de confirmation</li><li>Justification de la renégociation de l'avis de conformité avec conditions/engagement(s)</li></ul>",UDRA_CANCEL_LETTER_DESCR:"Transaction permettant de retirer officiellement un ARND soumis. Vérifier le numéro de contrôle correct dans le SSPD-AI.",SEQUENCE_CLEANUP_DESCR:"Transaction à fournir lorsque l'on effectue dans le dossier eCTD des corrections de placement, de nœuds, d'attributs ou d'autres corrections de dossier. Il n'est pas permis de fournir des fichiers de contenu dans cette transaction autres que la lettre d'accompagnement (.pdf), le fichier PIR TR (.xml). Notifier ereview@hc-sc.gc.ca avant d'envoyer cette transaction via la passerelle électronique.",UDRA_MEETING_MINUTES_DESCR:"Transaction visant à fournir le procès-verbal d'une réunion tenue au sujet d'une ARND déposée. Vérifier le numéro de contrôle correct dans le SSPD-AI.",UDRA_EMAIL_RQ_RESPONSE_DESCR:"Réponse à la demande de clarification de Santé Canada relative à une ARND. Veuillez vérifier le numéro de contrôle correct dans le SSPD-AI. Fournir la correspondance émise par Santé Canada.",UDRA_PROCESSING_CLARIF_RESPONSE_DESCR:"Réponse à la demande de clarification de Santé Canada pendant le traitement de l'ARND par le Bureau des soumissions et de la propriété intellectuelle. Fournir la correspondance émise par Santé Canada.",GEN_VOL_NOF_DESCR:"Contactez Santé Canada par courriel avant d'utiliser cette description de transaction réglementaire.<br> Pour les produits biologiques et radiopharmaceutiques à usage humain : <a href='mailto:brdd.ora@hc-sc.gc.ca'>brdd.ora@hc-sc.gc.ca</a> <br>Pour les produits pharmaceutiques à usage humain : <a href='mailto:rpmd-dgpr@hc-sc.gc.ca'>rpmd-dgpr@hc-sc.gc.ca</a> <br>Pour les produits en vente libre et les désinfectants : <a href='mailto:nded-demvso@hc-sc.gc.ca'>nded-demvso@hc-sc.gc.ca</a> ",DIN_DISCONTINUED_DESCR:"Utilise pour déclarer que la vente d’un médicament (DIN) a cessé. Inclus la date de la cessation de la vente, la date d’expiration du dernier lot distribué et le numéro de ce lot. Santé Canada annule le DIN",NOTIFICATION_INTERRUPT_SALE_DESCR:"Utilise pour déclarer qu'un médicament (DIN) n'a pas été vendu pendant au moins 12 mois consécutifs",POST_MARKET_SURVEILLANCE_DESCR:"Par exemple: Soumission non solicitée d'un document individuel en lien avec un PGR tel qu'une mise à jour à un protocole ou des résultats d'études après autorisation, des matériaux éducatifs; une proposition reliée à un changement quant à la fréquence des soumissions de RPPV/RPEAR; une proposition de cesser les stratégies de surveillance continue; des plans d'activités d'atténuation des risques dans d'autres pays; et des évaluations de l'Europe/PRAC. <br> Pour la présentation d'information demandée par la DPSC, veuillez utiliser 'Réponse à une lettre de la DPSC'.",MHPD_RQ_LETTER_DESCR:"En réponse à une lettre envoyée par la DPSC suivant un examen scientifique après la commercialisation. Veuillez répondre tel qu'indiqué dans la lettre de la DPSC.",BENEFIT_RISK_ASSESS_DESCR:"En réponse à une demande de Santé Canada concernant l'évaluation des avantages et des risques présentés au DAMM de façon volontaire ou sous l'article 21.31 de la Loi sur les aliments et drogues, ou les articles C.01.052 et C.01.013 du Règlement sur les aliments et drogues.",NOTIFICATION_CHANGE_DESCR:"Avis au ministre d'un changement important concernant ce qui est connu à propos des risques et des avantages d'un produit, comme prévu sous l'article C.01.018 (4) du Règlement sur les aliments et drogues.",TEST_STUDIES_ORDER_DESCR:"En réponse à une ordonnance par Santé Canada comme demandé sous l'article 21.32 de la Loi sur les aliments et drogues.",ISSUE_SAFETY_REQUEST_DESCR:"En réponse à une demande de Santé Canada de présenter un rapport de synthèse relatif à un sujet de préoccupation sous l'article C.01.019 du Règlement sur les aliments et drogues.",FOREIGN_SAFETY_NOTIFICATION_DESCR:"Présenter tel que prévu sous l'article C.01.050 du Règlement sur les aliments et drogues.",RISK_COMMUN_DOC_DESCR:"Première ébauche de la communication de risques liés aux produits de santé en format Word.",FINAL_RISK_COM_DESCR:"Versions finales de la communication de risques liés aux produits de santé en anglais et en français et en format Word et PDF.",DISSEM_LIST_DESCR:"Stratégie de diffusion et résultats de diffusion.",PATIENT_SAFETY_INFO_DESCR:"En réponse à la demande de Santé Canada de fournir des informations ou des modifications comme indiqué dans la lettre de la DPSC. Des exemples de ces demandes pourraient inclure des informations supplémentaires, une surveillance supplémentaire, des modifications d'étiquettes, etc.",IMMEDIATE_NOTIFICATION_DESCR:"Les notifications immédiates concernent les changements mineurs pour lesquels une prise de conscience en temps opportun est nécessaire. Santé Canada doit être informé dans une fenêtre allant de 21 jours avant et 14 jours après la date de mise en œuvre. Cette catégorie de changement  comprend également la majorité des changements majeurs et modérés qui ont été rétrogradés en changements de qualité mineurs à la suite de l'exécution d'un PGCAA ou via un CE négocié et la catégorie de changement associée.",RA_TYPE_NOTE_EUANDS:"Santé Canada ne facturera pas de frais pour les drogues nouvelles à usage extraordinaire déposées en vertu de l'article C.08.002.1 du Règlement sur les aliments et drogues (RAD). Cependant, veuillez vous assurer que la classe de présentation applicable est sélectionnée dans la section des frais ci-dessous.",RA_TYPE_NOTE_EUNDS:"Santé Canada ne facturera pas de frais pour les drogues nouvelles à usage extraordinaire déposées en vertu de l'article C.08.002.1 du Règlement sur les aliments et drogues (RAD). Cependant, veuillez vous assurer que la classe de présentation applicable est sélectionnée dans la section des frais ci-dessous.",RA_TYPE_NOTE_EUSANDS:"Santé Canada ne facturera pas de frais pour les drogues nouvelles à usage extraordinaire déposées en vertu de l'article C.08.002.1 du Règlement sur les aliments et drogues (RAD). Cependant, veuillez vous assurer que la classe de présentation applicable est sélectionnée dans la section des frais ci-dessous.",RA_TYPE_NOTE_EUSNDS:"Santé Canada ne facturera pas de frais pour les drogues nouvelles à usage extraordinaire déposées en vertu de l'article C.08.002.1 du Règlement sur les aliments et drogues (RAD). Cependant, veuillez vous assurer que la classe de présentation applicable est sélectionnée dans la section des frais ci-dessous.",RA_TYPE_NOTE_PSURPV:"Pour les produits AC-C",RQ_REVIEW_REPORT:"Demande de rapport(s) d’examen"}),$translateProvider.translations("en",{ING_NAME:"Ingredient Name",N_ING_NAME:"Ingredient Name",ING_ROLE:"Role",CAS_NUM:"Chemical Abstract Services(CAS)",CAS_FULL:"Chemical Abstract Services Number",STANDARD:"Standard",STRENGTH:"Strength",OPERATOR:"Operator",VALUE:"Value",EQUALS:"Equals",NOT_GREAT_THAN:"Not More Than",NOT_LESS_THAN:"Not Less Than",RANGE_LOWER_LIMIT:"Lower Limit",RANGE_UPPER_LIMIT:"Upper Limit",STRENGTH_OPERATOR:"Strength - Operator",STRENGTH_VALUE:"Strength - Value",STRENGTH_RANGE_LOWER_LIMIT:"Strength - Lower limit",STRENGTH_DATA2:"Strength - Upper limit",UNITS:"Units",UNIT:"Unit",UNIT_PRESENTATION:"Unit of Presentation",UNIT_MEASURE:"Unit of Measure",OTHER_UNIT_PRESENTATION:"Other Details",OTHER_UNIT_MEASURE:"Other Details",PER_STRENGTH:"Per",PER_VALUE:"Per Value",ISBASE:"Calculated as Base?",CAB_YES1:"Yes, my ingredient is supplied as a salt, but calculated as a base",CAB_YES2:"Yes, my ingredient is supplied as a base, and calculated as a base",CAB_NO:"No, my ingredient is supplied as a salt, and calculated as a salt",CAB_NO2:"No, my product is a biologic",CAB_NO3:"No, my ingredient is not a salt",IS_NANO_MATERIAL:"Is this a nanomaterial?",NANO_MATERIAL:"Nanomaterial",NANO_MATERIAL_OTHER:"Indicate the type of nanomaterial",ANIMAL_HUMAN_SOURCED:"Animal or Human Sourced?",INGREDIENT_LIST:"Ingredient List",ROLE:"Role",INGREDIENT:"Ingredient",INGREDIENTS:"Ingredients",MED:"Medicinal Ingredient",NONMED:"Non-Medicinal Ingredient",VARIANT_NAME:"Formulation Variant Name (if applicable)",VARIANT_NAME_HEADER:"Formulation Variant Name",NMI_PROPRIETARY_INFO_CHKBX:"I attest that the details for this non-medicinal ingredient are unknown as they are proprietary information.",NMI_PROPRIETARY_INFO_LBL:"The proprietary information can be found in the following",NMI_PROPRIETARY_INFO_FLD_NOTE:"Note: if the referenced information is unacceptable, further details will be requested.",PURPOSE:"Purpose",CONTAINER_TYPE:"Container Type",PACKAGE_SIZE:"Package Size",MATERIAL_NAME:"Material Name",PRESENT_IN_FINAL:"Present in final Container",INGRED_DETAILS:"Ingredient Details",MEDICINAL_INGRED_DETAILS:"Medicinal (Active) Ingredient Details",NONMEDICINAL_INGRED_DETAILS:"Non-Medicinal Ingredient Details",CONTAINER_TYPE_DETAILS:"Container Type",MATERIAL_DETAILS:"Animal and / or Human Sourced Materials Details",CALCULATED_AS_BASE:"Calculated as Base?",SHELF_LIFE_NUMBERS:"Value",MIN_TEMP:"Minimum, Celsius",MAX_TEMP:"Maximum, Celsius",TEMP_RANGE:"Temperature Range",SHELF_LIFE:"Shelf Life",OTHER_SHELF_LIFE_CONSIDER:"Other Shelf Life Considerations",IN_FINAL_CONTAINER:"Present in Final Container?",OTHER_ROA_DETAILS:"Other",OTHER_ROA:"Other Route of Administration",ROA_LBL:"Route of Admin",ROA_LBL_ROA:"Route of Administration",ROA_ABREV:"ROA",FORMULATION:"Formulation",FORMULATIONS:"Formulations",FORMULATION_DETAILS:"Formulation",FORMULATION_NAME:"Formulation Name",FORM_ID:"Identifier",ANIMAL_CTRY_ORIGIN:"Country of Origin of the Animals",ADD_ROA:"Add Route of Administration",MEDICINAL_INGRED:"A. Medicinal (Active) Ingredients",NONMEDICINAL_INGRED:"B. Non-Medicinal Ingredients",IS_ANIMAL_HUMAN_MATERIAL:"Was Animal and/or Human Sourced Material (other than the ingredient listed in the formulation above) used at any stage in the manufacturing of the drug?",CONTAINER_TYPES:"Container Types, Package Size and Shelf Life",ANIMAL_HUMAN_HDING:"Animal and / or Human Sourced Materials used at any stage in the manufacture of the drug",ROA_TITLE:"Routes of Administration",COUNTRIES_MANUFACT:"Countries of manufacture for this product",IN_LIST:"In list",UNITS_SRCH:"Select or Search Units",SOURCED_INFO:"Please complete additional details related to this ingredient in section “12. Animal/Human Sourced Ingredient/Material”",SOURCED_INFO_MATERIAL:"Please complete additional details related to this material in section “12. Animal/Human Sourced Ingredient/Material”",DELETE_FORMULATION:"Delete Formulation",COPY_FORMULATION:"Copy formulation",ADD_FORMULATION:"Add formulation",SELECT_DOSAGE:"Select a dosage form",SELECT_ROA:"Choose a Route of Administration",ADD_INGREDIENT:"Add Ingredient",ADD_CONTAINER:"Add Container Type",ADD_ROUTES_ADMINISTRATION:"Add Routes of Administration",ADD_COUNTRY_MANUFACTURE:"Add Countries of manufacture",ADD_ANIMAL_HUMAN_MATERIAL:"Add Animal and / or Human Sourced Materials",ADD_MATERIAL:"Add Material",AH_SOURCED_INSTRUCT:"Animal / Human Sourced Instructions",INGREDIENT_NAME_INSTRUCT:"Ingredient Name Instructions",FORM_REC_INSTRUCT:"Formulation Record Instructions",MATERIALS_INSTRUCT:"Sourced Materials Instructions",COUNTRIES_MANUFACT_INSTRUCT:"Countries of manufacture Instructions",CONTAINER_INSTRUCT:"Container Type Instructions",PACKAGE_SIZE_INSTRUCT:"Package Size Instructions",SHELF_LIFE_INSTRUCT:"Shelf Life Instructions",STANDARD_INSTRUCT:"Standard Instructions",IS_NANO_INSTRUCT:"Is Nanomaterial Instructions",VARIANT_INSTRUCT:"Variant Name Instructions",PURPOSE_INSTRUCT:"Purpose Instructions",IMPORTER_INSTRUCT:"Importer Instructions","CMP-FORMULATION-RECORD":"in formulation","MIRCTRL.MATERIALINGRECORDFORM":"in the animal and / or human sourced materials details","INGRECCTRL.ACTIVEINGFORM":"in the medicinal ingredient details","NINGRECCTRL.NONMEDINGFORM":"in the non-medicinal ingredient details","CTRCTRL.CONTAINERTYPEFORM":"in the container type details","FORMULCTRL.FORMULATIONSFORM":"in the formulations section",INGREDIENT_INSTRUCT:"Ingredient Instructions",SHELF_LIFE_NUMBER:"Value",MATERIAL_INGREDIENT_LIST:"Material Ingredient List",ANIMAL_SOURCES:"Animal Sources"}),$translateProvider.translations("fr",{ING_NAME:"Nom de l’ingrédient",N_ING_NAME:"Nom de l’ingrédient",ING_ROLE:"Rôle",CAS_NUM:"Chemical Abstracts Service(CAS)",CAS_FULL:"Numéro Chemical Abstracts Service",STANDARD:"Norme",STRENGTH:"Concentration",OPERATOR:"Opérateur",VALUE:"Valeur",EQUALS:"Egale",NOT_GREAT_THAN:"Pas plus de",NOT_LESS_THAN:"Pas moins de",RANGE_LOWER_LIMIT:"Limite inférieure",RANGE_UPPER_LIMIT:"Limite supérieure",STRENGTH_OPERATOR:"Concentration - Opérateur",STRENGTH_VALUE:"Concentration - Valeur",STRENGTH_RANGE_LOWER_LIMIT:"Concentration - Limite inférieure",STRENGTH_DATA2:"Concentration - Limite supérieure",UNITS:"Unités",UNIT:"Unité",UNIT_PRESENTATION:"Unité de présentation",UNIT_MEASURE:"Unité de mesure",OTHER_UNIT_PRESENTATION:"Autre détails",OTHER_UNIT_MEASURE:"Autre détails",PER_STRENGTH:"Par",PER_VALUE:"Par Valeur",ISBASE:"Calculé sous forme de base?",CAB_YES1:"Oui, mon ingrédient est fourni comme un sel, mais calculé comme une base",CAB_YES2:"Oui, mon ingrédient est fourni comme une base, et calculé comme une base",CAB_NO:"Non, mon ingrédient est fourni comme un sel, et calculé comme un sel",CAB_NO2:"Non, mon product est un produit biologique",CAB_NO3:"Non, mon ingrédient n'est pas un sel",IS_NANO_MATERIAL:"Est-ce un nanomatériau?",NANO_MATERIAL:"Nanomatériau",NANO_MATERIAL_OTHER:"Indiquer le type de nanomatériau",ANIMAL_HUMAN_SOURCED:"Source d'animale ou humaine?",INGREDIENT_LIST:"Liste d'ingrédients",ROLE:"Rôle",INGREDIENT:"Ingrédient",INGREDIENTS:"Ingrédients",MED:"Ingrédient médicinal actif",NONMED:"Ingrédient non-médicinal actif",VARIANT_NAME:"Nom de la variante de la formulation (le cas échéant)",VARIANT_NAME_HEADER:"Nom de la variante de la formulation",NMI_PROPRIETARY_INFO_CHKBX:"J'atteste que les détails de cet ingrédient non médicinal sont inconnus car il s'agit d'informations exclusives.",NMI_PROPRIETARY_INFO_LBL:"Les informations exclusives peuvent être trouvées",NMI_PROPRIETARY_INFO_FLD_NOTE:"Remarque: si les informations référencées ne sont pas acceptables, des détails supplémentaires vous seront demandés.",PURPOSE_INSTRUCT:"Purpose Instructions",PURPOSE:"But",CONTAINER_TYPE:"Type de contenant",PACKAGE_SIZE:"Capacité de l'emballage",MATERIAL_NAME:"Nom du matériel",PRESENT_IN_FINAL:"Présence dans le contenant final",INGRED_DETAILS:"Ingrédient",MEDICINAL_INGRED_DETAILS:"fr_Medicinal (Active) Ingredient Details",NONMEDICINAL_INGRED_DETAILS:"Non-Medicinal Ingredient Details",CONTAINER_TYPE_DETAILS:"Type de contenant",MATERIAL_DETAILS:"Détail de matériaux de source d'animale et/ou humaine",CALCULATED_AS_BASE:"Calculé comme base?",SHELF_LIFE_NUMBERS:"Valeur",MIN_TEMP:"Minimum, Celsius",MAX_TEMP:"Maximum, Celsius",TEMP_RANGE:"Écart de température",SHELF_LIFE:"Durée de vie",OTHER_SHELF_LIFE_CONSIDER:" Autres considérations relatives à la durée de vie",IN_FINAL_CONTAINER:"Présence dans le contenant final?",OTHER_ROA_DETAILS:"Autre",OTHER_ROA:"Autre voie d'administration",ROA_LBL:"Voie d'admin",ROA_LBL_ROA:"Voie d'administration",ROA_ABREV:"fr_ROA",FORMULATION:"Formulation",FORMULATIONS:"Formulations",FORMULATION_DETAILS:"Formulation",FORMULATION_NAME:"Nom de la formulation",FORM_ID:"Numéro",ANIMAL_CTRY_ORIGIN:"Pays d'origine des animaux",ADD_ROA:"Ajouter une voie d'administration",MEDICINAL_INGRED:"fr_Medicinal (Active) Ingredients",NONMEDICINAL_INGRED:"fr_Non-Medicinal Ingredients",IS_ANIMAL_HUMAN_MATERIAL:"Est-ce un matériel(aux) de source humaine et/ou animale (autre que l’ingrédient figurant dans la formulation ci-dessus) était utilisé(s) à l’une ou l’autre étape de la fabrication du produit?",CONTAINER_TYPES:" Type de contenant, capacité de l'emballage et durée de vie",ANIMAL_HUMAN_HDING:"Matériel(aux) de source humaine et/ou animale utilisé à l’une ou l’autre étape de la fabrication du produit",ROA_TITLE:"Voie d'administration",COUNTRIES_MANUFACT:"Pays de fabrication pour ce produit",IN_LIST:"Dans la liste",UNITS_SRCH:"fr_Select or Search Units",SOURCED_INFO:"Veuillez fournir des détails supplémentaires lié à cet ingrédient dans la section « 12. L'ingrédient ou matériel source humaine ou d'animale »",SOURCED_INFO_MATERIAL:"Veuillez fournir des détails supplémentaires lié à cet matière dans la section « 12. L'ingrédient ou matériel source humaine ou d'animale »",DELETE_FORMULATION:"Supprimer la formulation",COPY_FORMULATION:"Copier la formulation",ADD_FORMULATION:"Ajouter une formulation",SELECT_DOSAGE:"fr_Select a dosage form",SELECT_ROA:"fr_Choose a Route of Administration",ADD_CONTAINER:"Ajouter un type de contenant",ADD_INGREDIENT:"Ajouter un ingrédient",AH_SOURCED_INSTRUCT:"fr_Animal / Human Sourced Instructions",ADD_ROUTES_ADMINISTRATION:"Ajouter une voie d'administration",ADD_COUNTRY_MANUFACTURE:"Ajouter un pays de fabrication",ADD_ANIMAL_HUMAN_MATERIAL:"Ajouter matériaux de source humaine et/ou animale",ADD_MATERIAL:"fr_Add Material",INGREDIENT_NAME_INSTRUCT:"fr_Ingredient Name Instructions",FORM_REC_INSTRUCT:"fr_Formulation Record Instructions",MATERIALS_INSTRUCT:"fr_Sourced Materials Instructions",COUNTRIES_MANUFACT_INSTRUCT:"fr_Countries of manufacture Instructions",CONTAINER_INSTRUCT:"fr_Container Type Instructions",PACKAGE_SIZE_INSTRUCT:"fr_Package Size Instructions",SHELF_LIFE_INSTRUCT:"fr_Shelf Life Instructions",STANDARD_INSTRUCT:"fr_Standard Instructions",IS_NANO_INSTRUCT:"fr_Is Nanomaterial Instructions",VARIANT_INSTRUCT:"fr_Variant Name Instructions",IMPORTER_INSTRUCT:"fr_Importer Instructions","CMP-FORMULATION-RECORD":" dans la section formulation","INGRECCTRL.ACTIVEINGFORM":"dans les détails des ingrédients médicinaux","MIRCTRL.MATERIALINGRECORDFORM":"dans les détails de matériaux de source d'animale et/ou humaine","NINGRECCTRL.NONMEDINGFORM":"fr_in the nom-medicinal ingredient details","FORMULCTRL.FORMULATIONSFORM":"dans la section formulation",INGREDIENT_INSTRUCT:"Ingredient Instructions","CTRCTRL.CONTAINERTYPEFORM":"dans les détails du type de conteneur",SHELF_LIFE_NUMBER:"Valeur",MATERIAL_INGREDIENT_LIST:"Liste des ingrédients matériels",ANIMAL_SOURCES:"Sources d'animales"}),$translateProvider.translations("en",{FOR_THE:"The ",THERE_ARE_ERRORS:"There are errors",FORM_NOT_SAVED:"The form could not be saved because ",NOT_SAVED:" could not be saved because ",ERRORS_FOUND:" errors were found.",
ERROR_FOUND:"error was found.",TYPE_REQUIRED:"This field is required.",TYPE_EMAIL:"Please enter a valid email address.",TYPE_DUPLICATEROLE:"This role has already been selected.",TYPE_DUPLICATESYS:"This system has already been selected.",TYPE_MIN:"Less than minimum value",TYPE_MINLENGTH:"Less than minimum length",POSTAL_FORMAT:"Please enter a valid format",TYPE_DATE:"Please enter a valid date",TYPE_NUMBER:"Please enter a valid number",TYPE_PATTERN:"Incorrect format",MSG_VALUE_MAX:"Value is not within valid limits",COMPANY_IN_USE:"The importer is in use for Company Representative Details, delete that record first."}),$translateProvider.translations("fr",{FOR_THE:"Pour le ",THERE_ARE_ERRORS:"Il y a des erreurs",FORM_NOT_SAVED:"Le formulaire n’a pas pu être enregistré car ",NOT_SAVED:" n’a pas pu être enregistré car ",ERRORS_FOUND:"erreurs ont été trouvées.",ERROR_FOUND:"erreur a été trouvée.",TYPE_REQUIRED:"Ce champ est obligatoire.",TYPE_EMAIL:"Veuillez fournir une adresse électronique valide.",TYPE_DUPLICATEROLE:"Ce rôle a déjà été sélectionné.",TYPE_DUPLICATESYS:"Ce système a été déjà sélectionné.",TYPE_MIN:"Moins que la valeur minimale.",TYPE_MINLENGTH:"Veuillez fournir au moins 5 chiffres.",POSTAL_FORMAT:"Entrez un format valide.",TYPE_DATE:"Veuillez fournir une une date valide.",TYPE_NUMBER:"Veuillez fournir un numéro valide.",TYPE_PATTERN:"Format incorrect",MSG_VALUE_MAX:"La valeur n'est pas dans les limites valides",COMPANY_IN_USE:"L'importateur est en cours d'utilisation pour les Détails du représentant de la compagnie, supprimez ce premier enregistrement."})}]),function(){"use strict";angular.module("updateLang",[])}(),function(){"use strict";function updateLangCtrl(){function link(scope,element,attrs){"CAS_NUMfr"==attrs.setCondition&&element.attr("lang","en")}var directive={link:link,restrict:"A",require:"?ngModel"};return directive}angular.module("updateLang").directive("updateLang",updateLangCtrl)}(),function(){"use strict";angular.module("numberFormat",[])}(),function(){"use strict";function digitsCtrl(){function link(scope,element,attrs,modelCtrl){modelCtrl.$parsers.push(function(inputValue){if(void 0==inputValue)return"";var isNumber=!1,max=-1,ignore=!1,tempVal=""+inputValue;attrs.type&&"number"===attrs.type&&(isNumber=!0),attrs.onlyMax&&(max=parseInt(attrs.onlyMax));var regexIntNeg=/[^0-9-]/g,integerReg=/[^0-9]/g,regexValue=integerReg;if("intNeg"==attrs.onlyDigits?regexValue=regexIntNeg:"false"===attrs.onlyDigits?ignore=!0:regexValue=integerReg,ignore)return inputValue;var transformedInput=tempVal.replace(regexValue,"");return max>0&&(transformedInput=transformedInput.substring(0,max)),transformedInput!==tempVal&&(isNumber&&transformedInput&&(transformedInput=parseFloat(transformedInput)),modelCtrl.$setViewValue(transformedInput),modelCtrl.$render()),transformedInput})}var directive={link:link,restrict:"A",require:"?ngModel"};return directive}angular.module("numberFormat").directive("onlyDigits",digitsCtrl)}(),function(){"use strict";var myModule=angular.module("commonUtilsServiceModule",["hpfbConstants"]);myModule.factory("utils",["$filter","$translate","FRENCH",function($filter,$translate,FRENCH){var factoryObj={};return factoryObj.getCurrentLang=function(){return $translate.proposedLanguage()||$translate.use()},factoryObj.isFrench=function(lang){return lang===FRENCH},factoryObj.covertCodeDescriptionFromModelToJson=function(modelObj,lang){var jsonObj={};return jsonObj._id=modelObj.id,jsonObj._label_en=modelObj.en,jsonObj._label_fr=modelObj.fr,factoryObj.isFrench(lang)?jsonObj.__text=jsonObj._label_fr:jsonObj.__text=jsonObj._label_en,jsonObj},factoryObj.filterByJsonId=function(dataArray,jsonObj){var obj="";if(jsonObj){var filteredJsonObj=$filter("filter")(dataArray,{id:jsonObj._id});filteredJsonObj&&(filteredJsonObj.length>1?angular.forEach(filteredJsonObj,function(d){d.id===jsonObj._id&&(obj=d)}):obj=filteredJsonObj[0])}return obj},factoryObj}])}(),function(){angular.module("activityFormFilterModule",["hpfbConstants"])}(),function(){function getService(){function _getPharmaRAList(raList){for(var newList=[],i=0;i<raList.length;i++)switch(raList[i].id){case"B02-20160301-001":newList.push(raList[i]);break;case"B02-20160301-031":newList.push(raList[i]);break;case"B02-20160301-032":newList.push(raList[i]);break;case"B02-20160301-038":newList.push(raList[i]);break;case"B02-20160301-047":newList.push(raList[i]);break;case"B02-20160301-049":newList.push(raList[i]);break;case"B02-20160301-051":newList.push(raList[i]);break;case"B02-20160301-075":newList.push(raList[i]);break;case"B02-20160301-077":newList.push(raList[i]);break;case"B02-20160301-082":newList.push(raList[i]);break;case"B02-20160301-084":newList.push(raList[i]);break;case"B02-20160301-085":newList.push(raList[i]);break;case"B02-20160301-088":newList.push(raList[i]);break;case"B02-20160301-018":newList.push(raList[i]);break;case"B02-20160301-020":newList.push(raList[i]);break;case"B02-20160301-021":newList.push(raList[i]);break;case"B02-20160301-043":newList.push(raList[i]);break;case"B02-20160301-070":newList.push(raList[i]);break;case"B02-20190627-07":newList.push(raList[i]);break;case"B02-20190627-08":newList.push(raList[i]);break;case"B02-20160819-01":newList.push(raList[i]);break;case"B02-20190627-06":newList.push(raList[i]);break;case"B02-20210108-01":newList.push(raList[i])}return newList}function _getBiolRAList(raList){for(var newList=[],i=0;i<raList.length;i++)switch(raList[i].id){case"B02-20160301-001":newList.push(raList[i]);break;case"B02-20160301-031":newList.push(raList[i]);break;case"B02-20160301-032":newList.push(raList[i]);break;case"B02-20160301-038":newList.push(raList[i]);break;case"B02-20160301-046":newList.push(raList[i]);break;case"B02-20160301-047":newList.push(raList[i]);break;case"B02-20160301-049":newList.push(raList[i]);break;case"B02-20160301-050":newList.push(raList[i]);break;case"B02-20160301-051":newList.push(raList[i]);break;case"B02-20160301-075":newList.push(raList[i]);break;case"B02-20160301-077":newList.push(raList[i]);break;case"B02-20160301-082":newList.push(raList[i]);break;case"B02-20160301-084":newList.push(raList[i]);break;case"B02-20160301-085":newList.push(raList[i]);break;case"B02-20160301-088":newList.push(raList[i]);break;case"B02-20160301-089":newList.push(raList[i]);break;case"B02-20160301-019":newList.push(raList[i]);break;case"B02-20160301-043":newList.push(raList[i]);break;case"B02-20160301-071":newList.push(raList[i]);break;case"B02-20190627-07":newList.push(raList[i]);break;case"B02-20190627-08":newList.push(raList[i]);break;case"B02-20190627-06":newList.push(raList[i]);break;case"B02-20210108-01":newList.push(raList[i]);break;case"B02-20180522-01":newList.push(raList[i])}return newList}function _getPostMarketRAList(raList){for(var newList=[],i=0;i<raList.length;i++)switch(raList[i].id){case"B02-20160301-069":newList.push(raList[i]);break;case"B02-20160301-078":newList.push(raList[i]);break;case"B02-20160301-079":newList.push(raList[i]);break;case"B02-20160301-080":newList.push(raList[i]);break;case"B02-20190627-01":newList.push(raList[i]);break;case"B02-20190627-02":newList.push(raList[i]);break;case"B02-20190627-03":newList.push(raList[i]);break;case"B02-20190627-04":newList.push(raList[i]);break;case"B02-20190627-05":newList.push(raList[i]);break;case"B02-20160301-068":newList.push(raList[i]);break;case"B02-20240625-01":newList.push(raList[i])}return newList}function _getConsumHealthList(raList){for(var newList=[],i=0;i<raList.length;i++)switch(raList[i].id){case"B02-20160301-001":newList.push(raList[i]);break;case"B02-20160301-031":newList.push(raList[i]);break;case"B02-20160301-032":newList.push(raList[i]);break;case"B02-20160301-038":newList.push(raList[i]);break;case"B02-20160301-047":newList.push(raList[i]);break;case"B02-20160301-049":newList.push(raList[i]);break;case"B02-20160301-051":newList.push(raList[i]);break;case"B02-20160301-075":newList.push(raList[i]);break;case"B02-20160301-077":newList.push(raList[i]);break;case"B02-20160301-082":newList.push(raList[i]);break;case"B02-20160301-084":newList.push(raList[i]);break;case"B02-20160301-085":newList.push(raList[i]);break;case"B02-20160301-088":newList.push(raList[i]);break;case"B02-20160301-018":newList.push(raList[i]);break;case"B02-20160301-020":newList.push(raList[i]);break;case"B02-20160301-021":newList.push(raList[i]);break;case"B02-20160301-043":newList.push(raList[i]);break;case"B02-20160301-070":newList.push(raList[i]);break;case"B02-20190627-07":newList.push(raList[i]);break;case"B02-20190627-08":newList.push(raList[i]);break;case"B02-20160819-01":newList.push(raList[i]);break;case"B02-20190627-06":newList.push(raList[i]);break;case"B02-20210108-01":newList.push(raList[i])}return newList}function _getVeterinaryList(raList){for(var newList=[],veterinaryArray=["B02-20160301-001","B02-20160301-022","B02-20160301-038","B02-20160301-041","B02-20160301-043","B02-20160301-046","B02-20160301-047","B02-20160301-048","B02-20160301-049","B02-20160301-050","B02-20160301-051","B02-20240625-01","B02-20160301-076","B02-20160301-079","B02-20180912-01","B02-20160301-082","B02-20160301-084"],i=0;i<veterinaryArray.length;i++)for(var j=0;j<raList.length;j++)if(veterinaryArray[i]==raList[j].id){newList.push(raList[j]);break}return newList}function _getClinicalBioList(raList){for(var newList=[],veterinaryArray=["B02-20160301-014","B02-20160301-015","B02-20160301-072"],i=0;i<veterinaryArray.length;i++)for(var j=0;j<raList.length;j++)if(veterinaryArray[i]==raList[j].id){newList.push(raList[j]);break}return newList}function _getLinicalPhaList(raList){for(var newList=[],veterinaryArray=["B02-20160301-014","B02-20160301-015","B02-20160301-072"],i=0;i<veterinaryArray.length;i++)for(var j=0;j<raList.length;j++)if(veterinaryArray[i]==raList[j].id){newList.push(raList[j]);break}return newList}var service={getPharmaRAList:_getPharmaRAList,getBiolRAList:_getBiolRAList,getConsumHealthList:_getConsumHealthList,getPostMarketRAList:_getPostMarketRAList,getVeterinaryList:_getVeterinaryList,getClinicalBioList:_getClinicalBioList,getClinicalPhaList:_getLinicalPhaList};return service}angular.module("activityFormFilterModule").factory("ActivityFormFilterService",getService),getService.inject=[]}(),function(){"use strict";angular.module("hpfbConstants",[]),angular.module("hpfbConstants").constant("SOFTWARE_VERSION","4.4.0").constant("PROD","PROD").constant("CANADA","CAN").constant("OTHER","OTHER").constant("YES","Y").constant("NO","N").constant("USA","USA").constant("UNKNOWN","UNKNOWN").constant("NEW","New").constant("EXISTING","Existing").constant("ENGLISH","en").constant("FRENCH","fr").constant("NEW_TYPE","NEW").constant("APPROVED_TYPE","FINAL").constant("DEPRECATED_APPROVED_TYPE","APPROVED").constant("AMEND_TYPE","AMEND").constant("INTERNAL_TYPE","INT").constant("EXTERNAL_TYPE","EXT").constant("PHARMA_TYPE","PHARMA").constant("RELATIVE_FOLDER_DATA","../data/").constant("CSP_XSL","CSP_Enrolment.xsl").constant("HCSC","hcsc").constant("XML","xml").constant("XSL_PREFIX","https://raw.githubusercontent.com/HealthCanada/HPFB/master/Regulatory-Enrolment-Process-REP/v_2_2/Style-Sheets/").constant("ADVANCE_FEE_PAYMENT_EN","https://www.canada.ca/content/dam/hc-sc/migration/hc-sc/dhp-mps/alt_formats/pdf/prodpharma/applic-demande/form/adv-pa-av2-eng.pdf").constant("ADVANCE_FEE_PAYMENT_FR","https://www.canada.ca/content/dam/hc-sc/migration/hc-sc/dhp-mps/alt_formats/pdf/prodpharma/applic-demande/form/adv-pa-av2-fra.pdf")}(),function(){"use strict";angular.module("filterLists",["hpfbConstants"])}(),function(){"use strict";function orderByTranslatedCountry($translate,$filter,CANADA,USA){return function(array,objKey){var result=[],translated=[];return angular.forEach(array,function(value){translated.push({key:value,label:$translate.instant(value)})}),result.push(CANADA),result.push(USA),angular.forEach($filter("orderBy")(translated,"label"),function(sortedObject){sortedObject.key!==CANADA&&sortedObject.key!==USA&&result.push(sortedObject.key)}),result}}function orderByTranslatedCountryAndLabel($translate,$filter,CANADA,USA){return function(array){var result=[],translated=[];return angular.forEach(array,function(value){translated.push({key:value,label:$translate.instant(value)})}),result.push({key:CANADA,label:$translate.instant(CANADA)}),result.push({key:USA,label:$translate.instant(USA)}),angular.forEach($filter("orderBy")(translated,"label"),function(sortedObject){sortedObject.key!==CANADA&&sortedObject.key!==USA&&result.push(sortedObject)}),result}}function findCountryObj(){return function(array,targetKey){for(var i=0;i<array.length;i++)if(array[i].key===targetKey)return array[i];return null}}function orderByTranslated($translate,$filter){return function(array){var result=[],translated=[];return angular.forEach(array,function(value){translated.push({key:value,label:$translate.instant(value)})}),angular.forEach($filter("orderBy")(translated,"label"),function(sortedObject){result.push(sortedObject.key)}),result}}function sequenceOrderBy($filter){return function(array){var result=[];return angular.forEach($filter("orderBy")(array,"sequence",!0),function(sortedObject){result.push(sortedObject)}),result}}function orderByTranslatedOtherFirst($translate,$filter,OTHER){return function(array){var result=[],translated=[];return angular.forEach(array,function(value){translated.push({key:value,label:$translate.instant(value)})}),result.push(OTHER),angular.forEach($filter("orderBy")(translated,"label"),function(sortedObject){sortedObject.key!==OTHER&&result.push(sortedObject.key)}),result}}function _orderByLocale(){return function(items,lang){return items.sort(function(a,b){return a[lang].localeCompare(b[lang],lang)}),items}}function _findById($filter){return function(array,searchJson){var initialResult=$filter("filter")(array,searchJson);if(!initialResult)return null;if(1===initialResult.length)return initialResult[0];for(var i=0;i<initialResult.length;i++)if(initialResult[i].id===searchJson.id)return initialResult[i];return null}}angular.module("filterLists").filter("orderByTranslatedCountry",orderByTranslatedCountry).filter("orderByTranslated",orderByTranslated).filter("orderByTranslatedOtherFirst",orderByTranslatedOtherFirst).filter("orderByCountryAndLabel",orderByTranslatedCountryAndLabel).filter("orderByLocale",_orderByLocale).filter("findCountryObject",findCountryObj).filter("findListItemById",_findById).filter("sequenceOrderDescending",sequenceOrderBy),orderByTranslatedCountry.$inject=["$translate","$filter","CANADA","USA"],orderByTranslated.$inject=["$translate","$filter"],orderByTranslatedOtherFirst.$inject=["$translate","$filter","OTHER"],_findById.$inject=["$filter"]}(),function(){"use strict";angular.module("dataLists",["hpfbConstants"])}(),function(){"use strict";function getService(UNKNOWN){function _getEnvString(){return vm.env?vm.env:"@@envValue"}function _setEnvString(value){vm.env=value.env}function _createCountryArray(translateJson){vm.countryList=translateJson}function _getUnknownCountryRec(){return{id:UNKNOWN,en:"Unknown",fr:"Inconnu"}}function getCountryValuesArray(){return vm.countryList}function getProvinceValuesArray(){return["AB","BC","MB","NB","NL","NT","NS","NU","ON","PE","QC","SK","YT"]}function getUSStatesValueArray(){return["AL","AK","AZ","AR","CA","CO","CT","DE","DC","FL","GA","HI","ID","IL","IN","IA","KS","KY","LA","ME","MD","MA","MI","MN","MS","MOS","MT","NE","NV","NH","NJ","NM","NY","NC","ND","OH","OK","OR","PA","RI","SC","SD","TN","TX","UT","VT","VA","WA","WV","WI","WY"]}var vm=this;vm.env="",vm.countryList=[];var service={getEnv:_getEnvString,setEnv:_setEnvString,getCountries:getCountryValuesArray,getProvinces:getProvinceValuesArray,getUSStates:getUSStatesValueArray,createCountryList:_createCountryArray,getUnknownCountryRecord:_getUnknownCountryRec};return service}angular.module("dataLists").factory("getCountryAndProvinces",getService),getService.inject=["UNKNOWN"]}(),function(){"use strict";function getSalService($filter,$q,$http,$translate,OTHER,FRENCH,RELATIVE_FOLDER_DATA){function getSalValuesArray(){return["SALUT_DR","SALUT_MR","SALUT_MRS","SALUT_MS"]}function getLanguagesValuesArray(){return["en","fr"]}var vm=this;vm.internalContacts=[],vm.adminSubTypeArray=[];var service={getSalutationList:getSalValuesArray,getLanguages:getLanguagesValuesArray};return service}angular.module("dataLists").factory("getContactLists",getSalService),getSalService.$inject=["$filter","$q","$http","$translate","OTHER","FRENCH","RELATIVE_FOLDER_DATA"]}(),function(){"use strict";function getRolesService(){function getRoleValuesArray(){return["","ROLE_PRIMARY","ROLE_SECONDARY"]}function _getFormTypes(env){return env?[_biologic,_pharma,_veterinary]:[_biologic,_pharma,_clinical,_veterinary]}function _getBiologic(){return _biologic}function _getPharmaceutical(){return _pharma}function _getVeterinary(){return _veterinary}function _getClinicalTrial(){return _clinical}var _biologic="D21",_pharma="D22",_veterinary="D24",_clinical="D26",service={getContactRoles:getRoleValuesArray,getFormTypes:_getFormTypes,getBiologicType:_getBiologic,getPharmaType:_getPharmaceutical,getVeterinary:_getVeterinary,getClinicalTrial:_getClinicalTrial};return service}angular.module("dataLists").factory("getRoleLists",getRolesService)}(),function(){"use strict";function getService($filter,$q,$http,$translate,OTHER,FRENCH,RELATIVE_FOLDER_DATA){function _createSortedArray(jsonList,lang){var result=[];return angular.forEach($filter("orderByLocale")(jsonList,lang),function(sortedObject){result.push(sortedObject)}),result}function _getAdminSubType(){return vm.adminSubTypeArray&&0!==vm.adminSubTypeArray.length?vm.adminSubTypeArray:_loadAdminType()}function _loadAdminType(){var deferred=$q.defer(),url=RELATIVE_FOLDER_DATA+"adminSubType.json";return $http.get(url).success(function(data,status,headers,config){var lang=$translate.proposedLanguage()||$translate.use(),newList=_createSortedArray(data,lang);vm.adminSubTypeArray=newList,deferred.resolve(newList)}).error(function(data,status,headers,config){deferred.reject(status)}),deferred.promise}var vm=this;vm.adminSubTypeArray=[];var service={getAdminSubType:_getAdminSubType};return service}angular.module("dataLists").factory("dataListLoader",getService),getService.$inject=["$filter","$q","$http","$translate","OTHER","FRENCH","RELATIVE_FOLDER_DATA"]}(),function(){"use strict";angular.module("services",[])}(),function(){"use strict";function getTransactionSeq($http,$q){function yesNoArray(){return["Y","N"]}function _getEnvString(){return vm.env?vm.env:"@@envValue"}function _setEnvString(value){vm.env=value.env}function _getVerString(){return vm.ver?vm.ver:"@@verValue"}function _setVerString(value){vm.ver=value.ver}function _createRaArray(value){vm.raTypeArray=value}function _createFeeArray(value){vm.feeTypeArray=value}function _createMitigationArray(value){vm.mitigationTypeArray=value}function getTransactionDescriptionsArray(){return vm.allActivities}function getActivityArray(){return vm.raTypeArray}function _getfeeTypeArray(){return vm.feeTypeArray}function _getMitigationTypeArray(){return vm.mitigationTypeArray}function getPresubArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE]}function getANDSArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.COMMENTS_NOC,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.INITIAL,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.PRODUCT_LABELLING_POST_APPROVAL,vm.allActivities.PUB_RELEASE_INFO,vm.allActivities.BE_CLARIF_RESPONSE,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.NOC_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.NON_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.CORR_PATENT_MED,vm.allActivities.ALLEGATION_NOTICE,vm.allActivities.FORM_IV,vm.allActivities.FORM_V,vm.allActivities.CONSENT_LTR,vm.allActivities.DATA_PROTECT_CORRESP,vm.allActivities.WITHDRAWAL_NOF_FORM,vm.allActivities.DIN_DISCONTINUED,vm.allActivities.NOTIFICATION_INTERRUPT_SALE,vm.allActivities.IMMEDIATE_NOTIFICATION,vm.allActivities.RQ_REVIEW_REPORT]}function getEUNDSArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.BE_CLARIF_RESPONSE,vm.allActivities.CANCEL_LETTER,vm.allActivities.COMMENTS_NOC,vm.allActivities.COMMENTS_SUMMARY_BASIS,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.INITIAL,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.PUB_RELEASE_INFO,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.NOC_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.NON_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.CORR_PATENT_MED,vm.allActivities.ALLEGATION_NOTICE,vm.allActivities.FORM_IV,vm.allActivities.FORM_V,vm.allActivities.CONSENT_LTR,vm.allActivities.DATA_PROTECT_CORRESP,vm.allActivities.WITHDRAWAL_NOF_FORM,vm.allActivities.NONCLIN_CLARIF_RESPONSE,vm.allActivities.PRODUCT_LABELLING_POST_APPROVAL,vm.allActivities.DIN_DISCONTINUED,vm.allActivities.NOTIFICATION_INTERRUPT_SALE,vm.allActivities.IMMEDIATE_NOTIFICATION,vm.allActivities.RQ_REVIEW_REPORT]}function getEUSNDSArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.BE_CLARIF_RESPONSE,vm.allActivities.CANCEL_LETTER,vm.allActivities.COMMENTS_NOC,vm.allActivities.COMMENTS_SUMMARY_BASIS,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.POST_NOC_CHANGE,vm.allActivities.PUB_RELEASE_INFO,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.NOC_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.NON_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.CORR_PATENT_MED,vm.allActivities.ALLEGATION_NOTICE,vm.allActivities.FORM_IV,vm.allActivities.FORM_V,vm.allActivities.CONSENT_LTR,vm.allActivities.DATA_PROTECT_CORRESP,vm.allActivities.WITHDRAWAL_NOF_FORM,vm.allActivities.NONCLIN_CLARIF_RESPONSE,vm.allActivities.PRODUCT_LABELLING_POST_APPROVAL,vm.allActivities.IMMEDIATE_NOTIFICATION,vm.allActivities.RQ_REVIEW_REPORT]}function getLevel3Array(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.YEAR_LIST_OF_CHANGE,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE]}function getNDSArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.COMMENTS_NOC,vm.allActivities.COMMENTS_SUMMARY_BASIS,vm.allActivities.COMMENTS_REGULARTORY_DECISION,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.INITIAL,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.PUB_RELEASE_INFO,vm.allActivities.BE_CLARIF_RESPONSE,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.NOC_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.NON_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.CORR_PATENT_MED,vm.allActivities.ALLEGATION_NOTICE,vm.allActivities.FORM_IV,vm.allActivities.FORM_V,vm.allActivities.CONSENT_LTR,vm.allActivities.DATA_PROTECT_CORRESP,vm.allActivities.WITHDRAWAL_NOF_FORM,vm.allActivities.NONCLIN_CLARIF_RESPONSE,vm.allActivities.PRODUCT_LABELLING_POST_APPROVAL,vm.allActivities.DIN_DISCONTINUED,vm.allActivities.NOTIFICATION_INTERRUPT_SALE,vm.allActivities.IMMEDIATE_NOTIFICATION,vm.allActivities.RQ_REVIEW_REPORT]}function _getNDSCVArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.COMMENTS_NOC,vm.allActivities.COMMENTS_SUMMARY_BASIS,vm.allActivities.COMMENTS_REGULARTORY_DECISION,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.INITIAL,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.PUB_RELEASE_INFO,vm.allActivities.BE_CLARIF_RESPONSE,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.NOC_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.NON_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.CORR_PATENT_MED,vm.allActivities.FORM_IV,vm.allActivities.CONSENT_LTR,vm.allActivities.DATA_PROTECT_CORRESP,vm.allActivities.WITHDRAWAL_NOF_FORM,vm.allActivities.ROLLING_INFO,vm.allActivities.NONCLIN_CLARIF_RESPONSE,vm.allActivities.PRODUCT_LABELLING_POST_APPROVAL,vm.allActivities.DIN_DISCONTINUED,vm.allActivities.NOTIFICATION_INTERRUPT_SALE,vm.allActivities.IMMEDIATE_NOTIFICATION,vm.allActivities.RQ_REVIEW_REPORT]}function getPSURCArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.FOR_PERIOD,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.MEETING_MINUTES,vm.allActivities.MHPD_RQ_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE]}function getPSURPVArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.FOR_PERIOD,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.MEETING_MINUTES,vm.allActivities.MHPD_RQ_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE]}function getRMPPVArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.CSOtRMP,vm.allActivities.MEETING_MINUTES,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.MHPD_RQ_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.RMP_VERSION_DATE,vm.allActivities.PRESUB_MEETING_RQ]}function getSANDSArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.COMMENTS_NOC,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.POST_NOC_CHANGE,vm.allActivities.PUB_RELEASE_INFO,vm.allActivities.BE_CLARIF_RESPONSE,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.NOC_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.NON_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.CORR_PATENT_MED,vm.allActivities.ALLEGATION_NOTICE,vm.allActivities.FORM_IV,vm.allActivities.FORM_V,vm.allActivities.CONSENT_LTR,vm.allActivities.WITHDRAWAL_NOF_FORM,vm.allActivities.DATA_PROTECT_CORRESP,vm.allActivities.PRODUCT_LABELLING_POST_APPROVAL,vm.allActivities.IMMEDIATE_NOTIFICATION,vm.allActivities.RQ_REVIEW_REPORT]}function getSNDSArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.COMMENTS_NOC,vm.allActivities.COMMENTS_SUMMARY_BASIS,vm.allActivities.COMMENTS_REGULARTORY_DECISION,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.POST_NOC_CHANGE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.PUB_RELEASE_INFO,vm.allActivities.BE_CLARIF_RESPONSE,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.NOC_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.NON_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.CORR_PATENT_MED,vm.allActivities.ALLEGATION_NOTICE,vm.allActivities.FORM_IV,vm.allActivities.FORM_V,vm.allActivities.CONSENT_LTR,vm.allActivities.DATA_PROTECT_CORRESP,vm.allActivities.WITHDRAWAL_NOF_FORM,vm.allActivities.NONCLIN_CLARIF_RESPONSE,vm.allActivities.PRODUCT_LABELLING_POST_APPROVAL,vm.allActivities.IMMEDIATE_NOTIFICATION,vm.allActivities.RQ_REVIEW_REPORT]}function getSNDSCArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.COMMENTS_NOC,vm.allActivities.COMMENTS_SUMMARY_BASIS,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_NOC_CHANGE,vm.allActivities.PUB_RELEASE_INFO,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.NOC_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.NON_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.CORR_PATENT_MED,vm.allActivities.ALLEGATION_NOTICE,vm.allActivities.FORM_IV,vm.allActivities.FORM_V,vm.allActivities.CONSENT_LTR,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.WITHDRAWAL_NOF_FORM,vm.allActivities.DATA_PROTECT_CORRESP,vm.allActivities.PRODUCT_LABELLING_POST_APPROVAL,vm.allActivities.RQ_REVIEW_REPORT];
}function getUDPVArray(){return[vm.allActivities.BENEFIT_RISK_ASSESS,vm.allActivities.CANCEL_LETTER,vm.allActivities.NOTIFICATION_CHANGE,vm.allActivities.POST_MARKET_SURV,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.MEETING_MINUTES,vm.allActivities.MHPD_RQ_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.RISK_COMMUN_DOC,vm.allActivities.UNSOLICITED_DATA]}function getUDRAArray(){return[vm.allActivities.ADVISEMENT_LETTER_RESPONSE,vm.allActivities.NOF_DRUG_SHORT,vm.allActivities.QUALITY_ISSU,vm.allActivities.GMP_COMP_ISSU,vm.allActivities.RECLASS_LOT_RELEASE,vm.allActivities.NOC_COMPLIANCE,vm.allActivities.UDRA_CANCEL_LETTER,vm.allActivities.SEQUENCE_CLEANUP,vm.allActivities.UDRA_MEETING_MINUTES,vm.allActivities.UDRA_EMAIL_RQ_RESPONSE,vm.allActivities.UDRA_PROCESSING_CLARIF_RESPONSE,vm.allActivities.GEN_VOL_NOF]}function getConsultArray(){return[vm.allActivities.PANDEMIC_APPL]}function _getMPNCArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.WRITTEN_CONSULT_REQ,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ]}function _getMPNDSArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.WRITTEN_CONSULT_REQ,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ]}function _getMPCOVArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ]}function _getMPSNDSArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.WRITTEN_CONSULT_REQ,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ]}function _getPANDArray(){return[vm.allActivities.BE_CLARIF_RESPONSE,vm.allActivities.CANCEL_LETTER,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.COMMENTS_NOC,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.INITIAL,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PANDEMIC_APPL,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.NOC_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.NON_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.CORR_PATENT_MED,vm.allActivities.ALLEGATION_NOTICE,vm.allActivities.FORM_IV,vm.allActivities.FORM_V,vm.allActivities.CONSENT_LTR,vm.allActivities.DATA_PROTECT_CORRESP,vm.allActivities.NONCLIN_CLARIF_RESPONSE]}function _getPBRERCArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.FOR_PERIOD,vm.allActivities.MHPD_RQ_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE]}function _getPBRERPVArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.FOR_PERIOD,vm.allActivities.MHPD_RQ_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE]}function _getPRNDSArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.MEETING_MINUTES,vm.allActivities.PRIORITY_REVIEW_RQ,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.RQ_REVIEW_REPORT]}function _getPRSNDSArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.MEETING_MINUTES,vm.allActivities.PRIORITY_REVIEW_RQ,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.RQ_REVIEW_REPORT]}function getYBPRArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.FOR_PERIOD,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.MEETING_MINUTES,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.RQ_REVIEW_REPORT]}function getDSurArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.FOR_PERIOD,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.MEETING_MINUTES,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.PHONE_RQ_RESPONSE]}function getDINAArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.CHANGE_TO_DIN,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.INITIAL,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.PRODUCT_LABELLING_POST_APPROVAL,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.BE_CLARIF_RESPONSE,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.NON_RESPONSE,vm.allActivities.WITHDRAWAL_NOF_FORM,vm.allActivities.NOD_RESPONSE,vm.allActivities.DIN_DISCONTINUED,vm.allActivities.NOTIFICATION_INTERRUPT_SALE,vm.allActivities.RQ_REVIEW_REPORT]}function getV_DINVArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.CHANGE_TO_DIN,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.INITIAL,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.HSC_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QHSC_RQ_RESPONSE,vm.allActivities.CHSC_RQ_RESPONSE,vm.allActivities.QCHSC_RQ_RESPONSE,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.INITIAL_TEAT_SOLU_MONO,vm.allActivities.WITHDRAWAL_NOF_FORM,vm.allActivities.NOD_RESPONSE,vm.allActivities.DIN_DISCONTINUED,vm.allActivities.NOTIFICATION_INTERRUPT_SALE]}function getDINBArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.CHANGE_TO_DIN,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.INITIAL,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.PRODUCT_LABELLING_POST_APPROVAL,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.NON_RESPONSE,vm.allActivities.WITHDRAWAL_NOF_FORM,vm.allActivities.NOD_RESPONSE,vm.allActivities.DIN_DISCONTINUED,vm.allActivities.NOTIFICATION_INTERRUPT_SALE,vm.allActivities.IMMEDIATE_NOTIFICATION,vm.allActivities.RQ_REVIEW_REPORT]}function getDINDArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.CHANGE_TO_DIN,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.INITIAL,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.NON_RESPONSE,vm.allActivities.WITHDRAWAL_NOF_FORM,vm.allActivities.NOD_RESPONSE,vm.allActivities.DIN_DISCONTINUED,vm.allActivities.NOTIFICATION_INTERRUPT_SALE,vm.allActivities.RQ_REVIEW_REPORT]}function getDINFArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.CHANGE_TO_DIN,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.INITIAL,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.WITHDRAWAL_NOF_FORM,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.DIN_DISCONTINUED,vm.allActivities.NOTIFICATION_INTERRUPT_SALE,vm.allActivities.RQ_REVIEW_REPORT]}function getMPDINArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.WRITTEN_CONSULT_REQ,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE]}function getPDCArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_AUTH_DIV1_CHANGE,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.NOL_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.PRODUCT_LABELLING_POST_APPROVAL,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.RQ_REVIEW_REPORT,vm.allActivities.SDN_RESPONSE]}function getPDCBArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_AUTH_DIV1_CHANGE,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.NOL_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.PRODUCT_LABELLING_POST_APPROVAL,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.RQ_REVIEW_REPORT,vm.allActivities.SDN_RESPONSE]}function _getIRSRPVArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.ISSUE_SAFETY_REQUEST,vm.allActivities.MEETING_MINUTES,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PRESUB_MEETING_RQ]}function _getPAPVArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.MHPD_RQ_RESPONSE,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.POST_MARKET_SURV,vm.allActivities.PROCESSING_CLARIF_RESPONSE]}function _getPSAPVArray(){return[vm.allActivities.ADV_COMP_REQ,vm.allActivities.CANCEL_LETTER,vm.allActivities.PATIENT_SAFETY_INFO,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.MHPD_RQ_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE]}function _getRCPVArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.DISSEM_LIST,vm.allActivities.FINAL_RISK_COM,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.RISK_COMMUN_DOC]}function _getREGPVArray(){return[vm.allActivities.BENEFIT_RISK_ASSESS,vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.NOTIFICATION_CHANGE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.TEST_STUDIES_ORDER,vm.allActivities.MHPD_RQ_RESPONSE]}function _getSANDSCArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.COMMENTS_NOC,vm.allActivities.COMMENTS_SUMMARY_BASIS,vm.allActivities.CONSENT_LTR,vm.allActivities.DATA_PROTECT_CORRESP,vm.allActivities.CORR_PATENT_MED,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.FORM_IV,vm.allActivities.FORM_V,vm.allActivities.MEETING_MINUTES,vm.allActivities.ALLEGATION_NOTICE,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.POST_NOC_CHANGE,vm.allActivities.PUB_RELEASE_INFO,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.NOC_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.NON_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.WITHDRAWAL_NOF_FORM,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.PRODUCT_LABELLING_POST_APPROVAL,vm.allActivities.RQ_REVIEW_REPORT]}function _getPostDINArray(){return[vm.allActivities.YEAR,vm.allActivities.CANCEL_LETTER,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE]}function _getEUANDSArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.BE_CLARIF_RESPONSE,vm.allActivities.CANCEL_LETTER,vm.allActivities.COMMENTS_NOC,vm.allActivities.COMMENTS_SUMMARY_BASIS,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.INITIAL,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.PUB_RELEASE_INFO,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.NOC_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.NON_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.CORR_PATENT_MED,vm.allActivities.ALLEGATION_NOTICE,vm.allActivities.FORM_IV,vm.allActivities.FORM_V,vm.allActivities.CONSENT_LTR,vm.allActivities.DATA_PROTECT_CORRESP,vm.allActivities.WITHDRAWAL_NOF_FORM,vm.allActivities.NONCLIN_CLARIF_RESPONSE,vm.allActivities.PRODUCT_LABELLING_POST_APPROVAL,vm.allActivities.DIN_DISCONTINUED,vm.allActivities.NOTIFICATION_INTERRUPT_SALE,vm.allActivities.IMMEDIATE_NOTIFICATION,vm.allActivities.RQ_REVIEW_REPORT]}function _getEUSANDSArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.BE_CLARIF_RESPONSE,vm.allActivities.CANCEL_LETTER,vm.allActivities.COMMENTS_NOC,vm.allActivities.COMMENTS_SUMMARY_BASIS,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.PUB_RELEASE_INFO,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.NOC_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.NON_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.CORR_PATENT_MED,vm.allActivities.ALLEGATION_NOTICE,vm.allActivities.FORM_IV,vm.allActivities.FORM_V,vm.allActivities.CONSENT_LTR,vm.allActivities.DATA_PROTECT_CORRESP,vm.allActivities.WITHDRAWAL_NOF_FORM,vm.allActivities.NONCLIN_CLARIF_RESPONSE,vm.allActivities.PRODUCT_LABELLING_POST_APPROVAL,vm.allActivities.IMMEDIATE_NOTIFICATION,vm.allActivities.RQ_REVIEW_REPORT]}function getV_AndsArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.CONSENT_LTR,vm.allActivities.DATA_PROTECT_CORRESP,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.CORR_PATENT_MED,vm.allActivities.FORM_IV,vm.allActivities.FORM_V,vm.allActivities.INITIAL,vm.allActivities.MEETING_MINUTES,vm.allActivities.ALLEGATION_NOTICE,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.HSC_RQ_RESPONSE,vm.allActivities.QHSC_RQ_RESPONSE,vm.allActivities.CHSC_RQ_RESPONSE,vm.allActivities.QCHSC_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.NON_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.WITHDRAWAL_NOF_FORM,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.DIN_DISCONTINUED,vm.allActivities.NOTIFICATION_INTERRUPT_SALE]}function getCtaArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.INITIAL,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.NOL_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.CTN_ADMINISTRATIVE,vm.allActivities.CTN_APPENDIX,vm.allActivities.CTN_CONTACT,vm.allActivities.CTN_DATA,vm.allActivities.CTN_DEAR,vm.allActivities.CTN_DILUENT,vm.allActivities.CTN_DRUG_PROD,vm.allActivities.CTN_DRUG_SUBS,vm.allActivities.CTN_ENROLLMENT,vm.allActivities.CTN_ETHICS,vm.allActivities.CTN_IMPD_UPDATE,vm.allActivities.CTN_INFORMED,vm.allActivities.CTN_FORM_BROC_UPDATES,vm.allActivities.CTN_INVESTIGATOR,vm.allActivities.CTN_NEW_MANUFACTURING,vm.allActivities.CTN_NEW_PKG,vm.allActivities.CTN_NEW_QC,vm.allActivities.CTN_NEW_SUMM_ADF,vm.allActivities.CTN_PACKAGING_LABELLING,vm.allActivities.CTN_PROTOCOL_INFO_UPDATE,vm.allActivities.CTN_PROTOCOL_UPDATE,vm.allActivities.CTN_QOS,vm.allActivities.CTN_REFUSALS,vm.allActivities.CTN_REGULATORY,vm.allActivities.CTN_RESPONSE,vm.allActivities.CTN_SAFETY,vm.allActivities.CTN_SHELF_PD,vm.allActivities.CTN_SHELF_DS,vm.allActivities.CTN_SITE,vm.allActivities.CTN_SOURCE,vm.allActivities.CTN_STRAIN,vm.allActivities.CTN_STUDY_COMPLETION,vm.allActivities.CTN_STUDY_DISC,vm.allActivities.CTN_STUDY_EXT,vm.allActivities.CTN_STUDY_SUS,vm.allActivities.CTN_TRANS_OWN]}function getCta_aArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.NOL_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.CLINICAL,vm.allActivities.CLINICAL_QUALITY,vm.allActivities.QUALITY]}function getPreCtaArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ]}function getV_Level3Array(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.YEAR_LIST_OF_CHANGE]}function getV_MpdinArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ]}function getV_MpncArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ]}function getV_MpndsArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ]}function getV_MpsndsArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ]}function getV_MpandsArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ]}function getV_MpsandsArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ]}function getV_RccArray(){return[vm.allActivities.REQ_ACCEPTED]}function getV_NcArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.POST_NOC_CHANGE,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.HSC_RQ_RESPONSE,vm.allActivities.QHSC_RQ_RESPONSE,vm.allActivities.CHSC_RQ_RESPONSE,vm.allActivities.QCHSC_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.NOL_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.UNSOLICITED_DATA]}function getB_NcArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.POST_NOC_CHANGE,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.NOL_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.PRODUCT_LABELLING_POST_APPROVAL,vm.allActivities.RQ_REVIEW_REPORT]}function getNcArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.NOL_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.UNSOLICITED_DATA]}function _getV_NDSCVArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.CONSENT_LTR,vm.allActivities.DATA_PROTECT_CORRESP,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.CORR_PATENT_MED,vm.allActivities.FORM_IV,vm.allActivities.INITIAL,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.HSC_RQ_RESPONSE,vm.allActivities.QHSC_RQ_RESPONSE,vm.allActivities.CHSC_RQ_RESPONSE,vm.allActivities.QCHSC_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.ROLLING_INFO,vm.allActivities.WITHDRAWAL_NOF_FORM,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.DIN_DISCONTINUED,vm.allActivities.NOTIFICATION_INTERRUPT_SALE]}function getV_NdsArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.CONSENT_LTR,vm.allActivities.DATA_PROTECT_CORRESP,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.CORR_PATENT_MED,vm.allActivities.FORM_IV,vm.allActivities.FORM_V,vm.allActivities.INITIAL,vm.allActivities.MEETING_MINUTES,vm.allActivities.ALLEGATION_NOTICE,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.HSC_RQ_RESPONSE,vm.allActivities.QHSC_RQ_RESPONSE,vm.allActivities.CHSC_RQ_RESPONSE,vm.allActivities.QCHSC_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.WITHDRAWAL_NOF_FORM,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.DIN_DISCONTINUED,vm.allActivities.NOTIFICATION_INTERRUPT_SALE]}function getV_PsurPvArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.FOR_PERIOD,vm.allActivities.MEETING_MINUTES,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.HSC_RQ_RESPONSE,vm.allActivities.QHSC_RQ_RESPONSE,vm.allActivities.CHSC_RQ_RESPONSE,vm.allActivities.QCHSC_RQ_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE]}function getV_SandsArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.CONSENT_LTR,vm.allActivities.DATA_PROTECT_CORRESP,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.CORR_PATENT_MED,vm.allActivities.FORM_IV,vm.allActivities.FORM_V,vm.allActivities.MEETING_MINUTES,vm.allActivities.ALLEGATION_NOTICE,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.POST_NOC_CHANGE,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.HSC_RQ_RESPONSE,vm.allActivities.QHSC_RQ_RESPONSE,vm.allActivities.CHSC_RQ_RESPONSE,vm.allActivities.QCHSC_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.NON_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.WITHDRAWAL_NOF_FORM,vm.allActivities.UNSOLICITED_DATA]}function getV_SndsArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.CONSENT_LTR,vm.allActivities.DATA_PROTECT_CORRESP,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.CORR_PATENT_MED,vm.allActivities.FORM_IV,vm.allActivities.FORM_V,vm.allActivities.MEETING_MINUTES,vm.allActivities.ALLEGATION_NOTICE,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.POST_NOC_CHANGE,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.HSC_RQ_RESPONSE,vm.allActivities.QHSC_RQ_RESPONSE,vm.allActivities.CHSC_RQ_RESPONSE,vm.allActivities.QCHSC_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.NON_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.WITHDRAWAL_NOF_FORM,vm.allActivities.UNSOLICITED_DATA]}function getV_UdraArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.DIN_DISCONTINUED,vm.allActivities.NOTIFICATION_INTERRUPT_SALE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.QHSC_RQ_RESPONSE,vm.allActivities.CHSC_RQ_RESPONSE,vm.allActivities.QCHSC_RQ_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.UNSOLICITED_DATA]}function _getCoVir19Array(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.CLARIF_RESPONSE,vm.allActivities.PUB_RELEASE_INFO,vm.allActivities.BE_CLARIF_RESPONSE,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.WITHDRAWAL_NOF_FORM,vm.allActivities.PANDEMIC_APPL,vm.allActivities.ROLLING_INFO];
}function _getCoVir19AmdArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_ANTH_CHANGE,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.CLARIF_RESPONSE,vm.allActivities.PUB_RELEASE_INFO,vm.allActivities.BE_CLARIF_RESPONSE,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.WITHDRAWAL_NOF_FORM,vm.allActivities.ROLLING_INFO]}function _getV_CoV19Array(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.MEETING_MINUTES,vm.allActivities.PANDEMIC_APPL,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.CLARIF_RESPONSE,vm.allActivities.HSC_RQ_RESPONSE,vm.allActivities.QHSC_RQ_RESPONSE,vm.allActivities.CHSC_RQ_RESPONSE,vm.allActivities.QCHSC_RQ_RESPONSE,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.WITHDRAWAL_NOF_FORM,vm.allActivities.ROLLING_INFO]}function _getV_CoV19AmdArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_ANTH_CHANGE,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.CLARIF_RESPONSE,vm.allActivities.HSC_RQ_RESPONSE,vm.allActivities.QHSC_RQ_RESPONSE,vm.allActivities.CHSC_RQ_RESPONSE,vm.allActivities.QCHSC_RQ_RESPONSE,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.WITHDRAWAL_NOF_FORM,vm.allActivities.ROLLING_INFO]}function _getV_PROREArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.PROTOCOL_REVIEW,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.HSC_RQ_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.QHSC_RQ_RESPONSE,vm.allActivities.CHSC_RQ_RESPONSE,vm.allActivities.QCHSC_RQ_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA]}function _getNFAArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.FOREIGN_SAFETY_NOTIFICATION,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE]}function _getBEArray(){return[vm.allActivities.BLOOD_EST]}function _getActivityLeadArray(){return[vm.PHARMA,vm.BIOLOGICAL,vm.POSTMARKET,vm.CONSUMERHEALTH]}function _getActivityLeadD22Array(){return[vm.PHARMA,vm.POSTMARKET,vm.CONSUMERHEALTH]}function _getActivityLeadD21Array(){return[vm.BIOLOGICAL,vm.POSTMARKET]}function _getActivityLeadD24Array(){return[vm.VETERINARY]}function _getActivityLeadD26Array(){return[vm.CLINICAL_BIO,vm.CLINICAL_PHA]}function _getPharmaceutical(){return vm.D22}function _getBiologic(){return vm.D21}function _getVeterinary(){return vm.D24}function _getClinical(){return vm.D26}function _getBiologicalLead(){return vm.BIOLOGICAL}function _getPharmaLead(){return vm.PHARMA}function _getPostMarketLead(){return vm.POSTMARKET}function _getConsumHealthLead(){return vm.CONSUMERHEALTH}function _getVeterinaryLead(){return vm.VETERINARY}function _getClinicalBioLead(){return vm.CLINICAL_BIO}function _getClinicalPhaLead(){return vm.CLINICAL_PHA}function _getShelfLifeUnitsArray(){return[{id:"YR",en:"Years",fr:"Années"},{id:"MO",en:"Months",fr:"Mois"},{id:"DA",en:"Days",fr:"Jours"},{id:"HR",en:"Hours",fr:"Heures"},{id:"MI",en:"Minutes",fr:"Minutes"}]}function _getTxDescEn(){return allActivitiesEn}function _getTxDescFr(){return allActivitiesFr}var vm=this;vm.env="",vm.ver=[],vm.raTypeArray=[],vm.feeTypeArray=[],vm.mitigationTypeArray=[],vm.D21="D21",vm.D22="D22",vm.D24="D24",vm.D26="D26",vm.BIOLOGICAL="B14-20160301-02",vm.CONSUMERHEALTH="B14-20160301-06",vm.PHARMA="B14-20160301-09",vm.POSTMARKET="B14-20160301-10",vm.VETERINARY="B14-20160301-11",vm.CLINICAL_BIO="B14-20160301-02",vm.CLINICAL_PHA="B14-20160301-09",vm.allActivities={ADMINISTRATIVE:"ADMINISTRATIVE",BENEFIT_RISK_ASSESS:"BENEFIT_RISK_ASSESS",CANCEL_LETTER:"CANCEL_LETTER",CHANGE_TO_DIN:"CHANGE_TO_DIN",CLARIF_RESPONSE:"CLARIF_RESPONSE",COMMENTS_NOC:"COMMENTS_NOC",COMMENTS_SUMMARY_BASIS:"COMMENTS_SUMMARY_BASIS",COMMENTS_REGULARTORY_DECISION:"COMMENTS_REGULARTORY_DECISION",DIN_DISCONTINUED:"DIN_DISCONTINUED",DRUG_NOTIF_FORM:"DRUG_NOTIF_FORM",FOR_PERIOD:"FOR_PERIOD",FOR_NOC:"FOR_NOC",FINAL_RISK_COM:"FINAL_RISK_COM",INITIAL:"INITIAL",MEETING_MINUTES:"MEETING_MINUTES",NOTIFICATION_CHANGE:"NOTIFICATION_CHANGE",NOTIFICATION_INTERRUPT_SALE:"NOTIFICATION_INTERRUPT_SALE",PANDEMIC_APPL:"PANDEMIC_APPL",POST_CLEARANCE_DATA:"POST_CLEARANCE_DATA",POST_MARKET_SURV:"POST_MARKET_SURV",POST_NOC_CHANGE:"POST_NOC_CHANGE",POST_AUTH_DIV1_CHANGE:"POST_AUTH_DIV1_CHANGE",PRESUB_MEETING_PKG:"PRESUB_MEETING_PKG",PRESUB_MEETING_RQ:"PRESUB_MEETING_RQ",PRIORITY_REVIEW_RQ:"PRIORITY_REVIEW_RQ",PRODUCT_LABELLING_POST_APPROVAL:"PRODUCT_LABELLING_POST_APPROVAL",CLIN_CLARIF_RESPONSE:"CLIN_CLARIF_RESPONSE",EMAIL_RQ_RESPONSE:"EMAIL_RQ_RESPONSE",HSC_RQ_RESPONSE:"HSC_RQ_RESPONSE",QHSC_RQ_RESPONSE:"QHSC_RQ_RESPONSE",CHSC_RQ_RESPONSE:"CHSC_RQ_RESPONSE",QCHSC_RQ_RESPONSE:"QCHSC_RQ_RESPONSE",LABEL_CLARIF_RESPONSE:"LABEL_CLARIF_RESPONSE",MHPD_RQ_RESPONSE:"MHPD_RQ_RESPONSE",NOC_RESPONSE:"NOC_RESPONSE",NOD_RESPONSE:"NOD_RESPONSE",NOL_RESPONSE:"NOL_RESPONSE",NON_RESPONSE:"NON_RESPONSE",PROCESSING_CLARIF_RESPONSE:"PROCESSING_CLARIF_RESPONSE",QUAL_CLIN_CLARIF_RESPONSE:"QUAL_CLIN_CLARIF_RESPONSE",QUAL_CLARIF_RESPONSE:"QUAL_CLARIF_RESPONSE",RECON_DECIS_LTR_INTENT:"RECON_DECIS_LTR_INTENT",RECON_DECIS_RQ_RECON:"RECON_DECIS_RQ_RECON",RECON_DECIS_OTHER_INFO:"RECON_DECIS_OTHER_INFO",SCREENING_ACCEPT_RESPONSE:"SCREENING_ACCEPT_RESPONSE",SCREENING_CLARIF_RESPONSE:"SCREENING_CLARIF_RESPONSE",SDN_RESPONSE:"SDN_RESPONSE",LABEL_PREAPPROVAL_2LANG:"LABEL_PREAPPROVAL_2LANG",PHONE_RQ_RESPONSE:"PHONE_RQ_RESPONSE",RISK_COMMUN_DOC:"RISK_COMMUN_DOC",RMP_VERSION_DATE:"RMP_VERSION_DATE",UNSOLICITED_DATA:"UNSOLICITED_DATA",YEAR_LIST_OF_CHANGE:"YEAR_LIST_OF_CHANGE",BE_CLARIF_RESPONSE:"BE_CLARIF_RESPONSE",CORR_PATENT_MED:"CORR_PATENT_MED",ALLEGATION_NOTICE:"ALLEGATION_NOTICE",FORM_IV:"FORM_IV",FORM_V:"FORM_V",CONSENT_LTR:"CONSENT_LTR",DATA_PROTECT_CORRESP:"DATA_PROTECT_CORRESP",NONCLIN_CLARIF_RESPONSE:"NONCLIN_CLARIF_RESPONSE",ADV_COMP_REQ:"ADV_COMP_REQ",CSOtRMP:"CSOtRMP",DISSEM_LIST:"DISSEM_LIST",FOREIGN_SAFETY_NOTIFICATION:"FOREIGN_SAFETY_NOTIFICATION",ISSUE_SAFETY_REQUEST:"ISSUE_SAFETY_REQUEST",PATIENT_SAFETY_INFO:"PATIENT_SAFETY_INFO",PUB_RELEASE_INFO:"PUB_RELEASE_INFO",RESSESS_ORDER:"RESSESS_ORDER",WRITTEN_CONSULT_REQ:"WRITTEN_CONSULT_REQ",TEST_STUDIES_ORDER:"TEST_STUDIES_ORDER",TERM_COND_COMM:"TERM_COND_COMM",YEAR:"YEAR",CTN_ADMINISTRATIVE:"CTN_ADMINISTRATIVE",CTN_APPENDIX:"CTN_APPENDIX",CTN_CONTACT:"CTN_CONTACT",CTN_DATA:"CTN_DATA",CTN_DEAR:"CTN_DEAR",CTN_DILUENT:"CTN_DILUENT",CTN_DRUG_PROD:"CTN_DRUG_PROD",CTN_DRUG_SUBS:"CTN_DRUG_SUBS",CTN_ENROLLMENT:"CTN_ENROLLMENT",CTN_ETHICS:"CTN_ETHICS",CTN_INFORMED:"CTN_INFORMED",CTN_INVESTIGATOR:"CTN_INVESTIGATOR",CTN_NEW_MANUFACTURING:"CTN_NEW_MANUFACTURING",CTN_NEW_PKG:"CTN_NEW_PKG",CTN_NEW_QC:"CTN_NEW_QC",CTN_PACKAGING_LABELLING:"CTN_PACKAGING_LABELLING",CTN_PROTOCOL_INFO_UPDATE:"CTN_PROTOCOL_INFO_UPDATE",CTN_PROTOCOL_UPDATE:"CTN_PROTOCOL_UPDATE",CTN_QOS:"CTN_QOS",CTN_REFUSALS:"CTN_REFUSALS",CTN_REGULATORY:"CTN_REGULATORY",CTN_RESPONSE:"CTN_RESPONSE",CTN_SAFETY:"CTN_SAFETY",CTN_SHELF_PD:"CTN_SHELF_PD",CTN_SHELF_DS:"CTN_SHELF_DS",CTN_SITE:"CTN_SITE",CTN_SOURCE:"CTN_SOURCE",CTN_STRAIN:"CTN_STRAIN",CTN_STUDY_COMPLETION:"CTN_STUDY_COMPLETION",CTN_STUDY_DISC:"CTN_STUDY_DISC",CTN_STUDY_EXT:"CTN_STUDY_EXT",CTN_STUDY_SUS:"CTN_STUDY_SUS",CTN_TRANS_OWN:"CTN_TRANS_OWN",CLINICAL:"CLINICAL",CLINICAL_QUALITY:"CLINICAL_QUALITY",QUALITY:"QUALITY",INITIAL_TEAT_SOLU_MONO:"INITIAL_TEAT_SOLU_MONO",REQ_ACCEPTED:"REQ_ACCEPTED",CTN_FORM_BROC_UPDATES:"CTN_FORM_BROC_UPDATES",CTN_IMPD_UPDATE:"CTN_IMPD_UPDATE",CTN_NEW_SUMM_ADF:"CTN_NEW_SUMM_ADF",COVIR_19:"COVIR-19",COVIR_19AMD:"COVIR-19AMD",POST_ANTH_CHANGE:"POST_ANTH_CHANGE",ROLLING_INFO:"ROLLING_INFO",WITHDRAWAL_NOF_FORM:"WITHDRAWAL_NOF_FORM",PROTOCOL_REVIEW:"PROTOCOL_REVIEW",BLOOD_EST:"BLOOD_EST",ADVISEMENT_LETTER_RESPONSE:"ADVISEMENT_LETTER_RESPONSE",NOF_DRUG_SHORT:"NOF_DRUG_SHORT",QUALITY_ISSU:"QUALITY_ISSU",GMP_COMP_ISSU:"GMP_COMP_ISSU",RECLASS_LOT_RELEASE:"RECLASS_LOT_RELEASE",NOC_COMPLIANCE:"NOC_COMPLIANCE",UDRA_CANCEL_LETTER:"UDRA_CANCEL_LETTER",SEQUENCE_CLEANUP:"SEQUENCE_CLEANUP",UDRA_MEETING_MINUTES:"UDRA_MEETING_MINUTES",UDRA_EMAIL_RQ_RESPONSE:"UDRA_EMAIL_RQ_RESPONSE",UDRA_PROCESSING_CLARIF_RESPONSE:"UDRA_PROCESSING_CLARIF_RESPONSE",GEN_VOL_NOF:"GEN_VOL_NOF",IMMEDIATE_NOTIFICATION:"IMMEDIATE_NOTIFICATION",RQ_REVIEW_REPORT:"RQ_REVIEW_REPORT"};const allActivitiesEn={ADMINISTRATIVE:"Administrative",BENEFIT_RISK_ASSESS:"Benefit Risk Assessment",CANCEL_LETTER:"Cancellation Letter",CHANGE_TO_DIN:"Change to DIN",CLARIF_RESPONSE:"Response to Clarification Request",COMMENTS_NOC:"Comments on Notice of Decision",COMMENTS_SUMMARY_BASIS:"Comments on Summary Basis of Decision (SBD)",COMMENTS_REGULARTORY_DECISION:"Comments on Regulatory Decision Summary",DIN_DISCONTINUED:"Discontinuation of Sale Notification",DRUG_NOTIF_FORM:"Drug Notification Form (Market Notification)",FOR_PERIOD:"For Period of",FOR_NOC:"For NOC/c products",FINAL_RISK_COM:"Final Risk Communication Document",IMMEDIATE_NOTIFICATION:"Immediate Notification",INITIAL:"INITIAL",MEETING_MINUTES:"Minutes of Meeting",NOTIFICATION_CHANGE:"Notification of Change in Benefit-Risk Profile",NOTIFICATION_INTERRUPT_SALE:"Notification for Interruption of Sale (DIN Dormant)",PANDEMIC_APPL:"Pandemic Application",POST_CLEARANCE_DATA:"Post Clearance Data",POST_MARKET_SURV:"Post Market Surveillance",POST_NOC_CHANGE:"Post NOC Change",POST_AUTH_DIV1_CHANGE:"Post-Authorization Division 1 Change",PRESUB_MEETING_PKG:"Submission Meeting Package",PRESUB_MEETING_RQ:"Submission Meeting Request",PRIORITY_REVIEW_RQ:"Priority Review Request",PRODUCT_LABELLING_POST_APPROVAL:"Product Labelling - Post Approval",CLIN_CLARIF_RESPONSE:"Response to Clinical Clarification Request",EMAIL_RQ_RESPONSE:"Response to E-mail Request",HSC_RQ_RESPONSE:"Response to Human Safety Clarification Request",QHSC_RQ_RESPONSE:"Response to Quality & Human Safety Clarification Request",CHSC_RQ_RESPONSE:"Response to Clinical & Human Safety Clarification Request",QCHSC_RQ_RESPONSE:"Response to Quality, Clinical and Human Safety Clarification Request",LABEL_CLARIF_RESPONSE:"Response to Labelling Clarification Request",MHPD_RQ_RESPONSE:"Response to MHPD Letter",NOC_RESPONSE:"Response to NOC/c-QN",NOD_RESPONSE:"Response to NOD",NOL_RESPONSE:"Response to NOL",NON_RESPONSE:"Response to NON",PROCESSING_CLARIF_RESPONSE:"Response to Processing Clarification Request",QUAL_CLIN_CLARIF_RESPONSE:"Response to Quality & Clinical Clarification Request",QUAL_CLARIF_RESPONSE:"Response to Quality Clarification Request",RECON_DECIS_LTR_INTENT:"Reconsideration of Decision - Letter of Intent",RECON_DECIS_RQ_RECON:"Reconsideration of Decision - Request for Reconsideration",RECON_DECIS_OTHER_INFO:"Reconsideration of Decision - Other Information",SCREENING_ACCEPT_RESPONSE:"Response to Screening Acceptance Letter",SCREENING_CLARIF_RESPONSE:"Response to Screening Clarification Request",SDN_RESPONSE:"Response to SDN",LABEL_PREAPPROVAL_2LANG:"Second Language Label - Pre-Approval",PHONE_RQ_RESPONSE:"Response to Telephone Request",RISK_COMMUN_DOC:"Risk Communication Document",RMP_VERSION_DATE:"Risk Management Plan (RMP)",UNSOLICITED_DATA:"Unsolicited Information",YEAR_LIST_OF_CHANGE:"Year(s) of change, list of change number(s) ",BE_CLARIF_RESPONSE:"Response to BE Clarification Request",CORR_PATENT_MED:"Correspondence - Patented Medicines",ALLEGATION_NOTICE:"Notice of Allegation",FORM_IV:"Form IV",FORM_V:"Form V",CONSENT_LTR:"Consent Letter",DATA_PROTECT_CORRESP:"Correspondence - Data Protection",NONCLIN_CLARIF_RESPONSE:"Response to Non-clinical Clarification Request ",ADV_COMP_REQ:"Advertising Complaint Request for Information",CSOtRMP:"Canadian Specific Opioid RMP",DISSEM_LIST:"Dissemination List",FOREIGN_SAFETY_NOTIFICATION:"Foreign Safety Action Notification",ISSUE_SAFETY_REQUEST:"Issue Related Summary Report Request",PATIENT_SAFETY_INFO:"Patient Safety Information (Medication error)",PUB_RELEASE_INFO:"Public Release of Clinical Information",RESSESS_ORDER:"Reassessment Order",WRITTEN_CONSULT_REQ:"Request for Written Consultation",TEST_STUDIES_ORDER:"Test and Studies Order",TERM_COND_COMM:"Terms and Conditions Commitment",YEAR:"Year",CTN_ADMINISTRATIVE:"CTN-Administrative Change to",CTN_APPENDIX:"CTN-Appendix",CTN_CONTACT:"CTN-Contact Change",CTN_DATA:"CTN-Data Safety Monitoring Committee",CTN_DEAR:"CTN-Dear Investigator/Doctor Letter",CTN_DILUENT:"CTN-Diluent Change",CTN_DRUG_PROD:"CTN-Drug Product Change",CTN_DRUG_SUBS:"CTN-Drug Substance change",CTN_ENROLLMENT:"CTN-Enrollment Suspension",CTN_ETHICS:"CTN-Ethics Board Communications",CTN_INFORMED:"CTN-Informed Consent Form Update",CTN_INVESTIGATOR:"CTN-Investigator’s Brochure Update",CTN_NEW_MANUFACTURING:"CTN-New Manufacturing Site for",CTN_NEW_PKG:"CTN-New Packaging/Labelling Site",CTN_NEW_QC:"CTN-New QC Testing Site",CTN_PACKAGING_LABELLING:"CTN-Packaging/Labelling Name Change",CTN_PROTOCOL_INFO_UPDATE:"CTN-Protocol and Informed Consent Form Update",CTN_PROTOCOL_UPDATE:"CTN-Protocol Update/Change",CTN_QOS:"CTN-QOS Update",CTN_REFUSALS:"CTN-Refusals by Foreign Regulatory Authorities/REBs",CTN_REGULATORY:"CTN-Regulatory Hold",CTN_RESPONSE:"CTN-Response to Information Request",CTN_SAFETY:"CTN-Safety Update",CTN_SHELF_PD:"CTN-Shelf Life Extension for DP",CTN_SHELF_DS:"CTN-Shelf Life Extension for DS",CTN_SITE:"CTN-Site Closure",CTN_SOURCE:"CTN-Source Change of",CTN_STRAIN:"CTN-Strain Change",CTN_STUDY_COMPLETION:"CTN-Study Completion",CTN_STUDY_DISC:"CTN-Study Discontinuation due to",CTN_STUDY_EXT:"CTN-Study Recruitment Timeline Extension",CTN_STUDY_SUS:"CTN-Study Suspension",CTN_TRANS_OWN:"CTN-Transfer of Ownership",CLINICAL:"CLINICAL",CLINICAL_QUALITY:"CLINICAL & QUALITY",QUALITY:"QUALITY",INITIAL_TEAT_SOLU_MONO:"INITIAL - Teat Solutions Monograph",REQ_ACCEPTED:"Request Accepted",CTN_FORM_BROC_UPDATES:"CTN-Informed Consent Form and Investigator’s Brochure Updates",CTN_IMPD_UPDATE:"CTN-IMPD Update",CTN_NEW_SUMM_ADF:"CTN-New Summary of Additional Drugs Form","COVIR-19":"COVID-19 Interim Order Application","COVIR-19AMD":"COVID-19 Interim Order Ap - Amendment",POST_ANTH_CHANGE:"Post Authorization Change",ROLLING_INFO:"Rolling Information",WITHDRAWAL_NOF_FORM:"Withdrawal of Drug Notification Form",PROTOCOL_REVIEW:"Protocol Review",BLOOD_EST:"Blood Establishment",ADVISEMENT_LETTER_RESPONSE:"Response to Advisement Letter to update the Product Monograph",NOF_DRUG_SHORT:"Notification on Drug Shortage",QUALITY_ISSU:"Quality issue raised by company and/or other regulator",GMP_COMP_ISSU:"GMP compliance issue raised by other regulators",RECLASS_LOT_RELEASE:"Reclassification request under BRDD Lot Release Program",NOC_COMPLIANCE:"Notice of Compliance with Conditions (NOC/c) – commitment",UDRA_CANCEL_LETTER:"Cancellation Letter for UDRA",SEQUENCE_CLEANUP:"eCTD Dossier Clean-up",UDRA_MEETING_MINUTES:"Minutes of Meeting for UDRA",UDRA_EMAIL_RQ_RESPONSE:"Response to E-mail Request for UDRA",UDRA_PROCESSING_CLARIF_RESPONSE:"Response to Processing Clarification Request for UDRA",GEN_VOL_NOF:"General / Voluntary Notification",RQ_REVIEW_REPORT:"Request for Review Report(s)"},allActivitiesFr={ADMINISTRATIVE:"Administratif",BENEFIT_RISK_ASSESS:"Évaluation des risques et des avantages",CANCEL_LETTER:"Lettre d’annulation",CHANGE_TO_DIN:"Modification du code d’IND (DIN)",CLARIF_RESPONSE:"Réponse à la demande de clarification",COMMENTS_NOC:"Commentaires sur l’avis de décision",COMMENTS_SUMMARY_BASIS:"Commentaires sur le sommaire des motifs de décision (SMD)",COMMENTS_REGULARTORY_DECISION:"Commentaires sur le sommaire de décision réglementaire",DIN_DISCONTINUED:"Avis de cessation de vente",DRUG_NOTIF_FORM:"Formulaire de notification de drogue (de mise en marché)",FOR_PERIOD:"Pour une période de",FOR_NOC:"For our les produits AC-C",FINAL_RISK_COM:"Document final de communication sur les risques",IMMEDIATE_NOTIFICATION:"Notification Immédiate",INITIAL:"INITIAL",MEETING_MINUTES:"Procès-verbal de la réunion",NOTIFICATION_CHANGE:"Avis de changement du profil des risques et avantages",NOTIFICATION_INTERRUPT_SALE:"Avis de douze mois sans vente (État de DIN dormant)",PANDEMIC_APPL:"Application en cas de pandémie",POST_CLEARANCE_DATA:"Données consécutives à l’habilitation de sécurité",POST_MARKET_SURV:"Surveillance après la mise en marché",POST_NOC_CHANGE:"Modification de l’avis de conformité",POST_AUTH_DIV1_CHANGE:"Modification en vertu de la Section 1 après l’autorisation",PRESUB_MEETING_PKG:"Trousse de la réunion préalable à la présentation",PRESUB_MEETING_RQ:"Demande de réunion préalable à la présentation",PRIORITY_REVIEW_RQ:"Demande d’examen prioritaire",PRODUCT_LABELLING_POST_APPROVAL:"Étiquetage des produits – après l’autorisation",CLIN_CLARIF_RESPONSE:"Réponse à la demande de clarification clinique",EMAIL_RQ_RESPONSE:"Réponse à une demande par courriel",HSC_RQ_RESPONSE:"Réponse à la demande de clarification en ce qui concerne la sécurité pour les humains",QHSC_RQ_RESPONSE:"Réponse à la demande de clarification concernant la qualité et la sécurité pour les humains",CHSC_RQ_RESPONSE:"Réponse à la demande de clarification concernant les aspects cliniques et la sécurité pour les humains",QCHSC_RQ_RESPONSE:"Réponse à la demande de clarification concernant la qualité, les aspects cliniques et la sécurité pour les humains",LABEL_CLARIF_RESPONSE:"Réponse à la demande de clarification de l’étiquetage",MHPD_RQ_RESPONSE:"Réponse à une lettre de la DPSC",NOC_RESPONSE:"Réponse à l’avis de conformité/ avec conditions - avis d’admissibilité",NOD_RESPONSE:"Réponse à l’avis d’insuffisance",NON_RESPONSE:"Réponse à l’avis de non-conformité",NOL_RESPONSE:"Réponse à la lettre de non-objection",PROCESSING_CLARIF_RESPONSE:"Réponse à la demande de clarification sur le traitement",QUAL_CLIN_CLARIF_RESPONSE:"Réponse à la demande de clarification sur la qualité et les aspects cliniques",QUAL_CLARIF_RESPONSE:"Réponse à la demande de clarification sur la qualité",RECON_DECIS_LTR_INTENT:"Réexamen de la décision - Lettre d’intention",RECON_DECIS_RQ_RECON:"Réexamen de la décision - Demande de réexamen",RECON_DECIS_OTHER_INFO:"Réexamen de la décision - Autres renseignements",SCREENING_ACCEPT_RESPONSE:"Réponse à la lettre d’acceptation à l’examen préliminaire",SCREENING_CLARIF_RESPONSE:"Réponse à une demande de clarification au cours de l’examen préliminaire",SDN_RESPONSE:"Réponse à un avis d’insuffisance à l’examen préliminaire",LABEL_PREAPPROVAL_2LANG:"Étiquette en langue seconde - préapprobation",PHONE_RQ_RESPONSE:"Réponse à une demande téléphonique",RISK_COMMUN_DOC:"Document de communication sur les risques",RMP_VERSION_DATE:"Plan de gestion des risques",UNSOLICITED_DATA:"Renseignements non sollicités",YEAR_LIST_OF_CHANGE:"Year(s) of change, list of change number(s) ",BE_CLARIF_RESPONSE:"Réponse à la demande d’étude de bioéquivalence",CORR_PATENT_MED:"Correspondance - Médicaments brevetés",ALLEGATION_NOTICE:"Avis d’allégation",FORM_IV:"Formulaire IV",FORM_V:"Formulaire V",CONSENT_LTR:"Lettre de consentement",DATA_PROTECT_CORRESP:"Correspondance - Protection des données",NONCLIN_CLARIF_RESPONSE:"Réponse à la demande de clarification non clinique",ADV_COMP_REQ:"Demande de renseignements concernant une plainte en matière de publicité",CSOtRMP:"PGR concernant les produits contenant des opioïdes vendus au Canada",DISSEM_LIST:"Liste de distribution",FOREIGN_SAFETY_NOTIFICATION:"Communications étrangères relatives aux risques",ISSUE_SAFETY_REQUEST:"Demande d'un rapport de synthèse relatif à un sujet de préoccupation",PATIENT_SAFETY_INFO:"Renseignements sur la sécurité des patients (erreur de médication)",PUB_RELEASE_INFO:"Diffusion publique de renseignements cliniques",RESSESS_ORDER:"Ordonnance de réévaluation",WRITTEN_CONSULT_REQ:"Demande de consultation écrite",TEST_STUDIES_ORDER:"Ordonnance concernant des essais et des études",TERM_COND_COMM:"Règles de participation prévues dans les conditions générales",YEAR:"Année",CTN_ADMINISTRATIVE:"CTN-Administrative Change to",CTN_APPENDIX:"CTN-Appendix",CTN_CONTACT:"CTN-Contact Change",CTN_DATA:"CTN-Data Safety Monitoring Committee",CTN_DEAR:"CTN-Dear Investigator/Doctor Letter",CTN_DILUENT:"CTN-Diluent Change",CTN_DRUG_PROD:"CTN-Drug Product Change",CTN_DRUG_SUBS:"CTN-Drug Substance change",CTN_ENROLLMENT:"CTN-Enrollment Suspension",CTN_ETHICS:"CTN-Ethics Board Communications",CTN_INFORMED:"CTN-Informed Consent Form Update",CTN_INVESTIGATOR:"CTN-Investigator’s Brochure Update",CTN_NEW_MANUFACTURING:"CTN-New Manufacturing Site for",CTN_NEW_PKG:"CTN-New Packaging/Labelling Site",CTN_NEW_QC:"CTN-New QC Testing Site",CTN_PACKAGING_LABELLING:"CTN-Packaging/Labelling Name Change",CTN_PROTOCOL_INFO_UPDATE:"CTN-Protocol and Informed Consent Form Update",CTN_PROTOCOL_UPDATE:"CTN-Protocol Update/Change",CTN_QOS:"CTN-QOS Update",CTN_REFUSALS:"CTN-Refusals by Foreign Regulatory Authorities/REBs",CTN_REGULATORY:"CTN-Regulatory Hold",CTN_RESPONSE:"CTN-Response to Information Request",CTN_SAFETY:"CTN-Safety Update",CTN_SHELF_PD:"CTN-Shelf Life Extension for DP",CTN_SHELF_DS:"CTN-Shelf Life Extension for DS",CTN_SITE:"CTN-Site Closure",CTN_SOURCE:"CTN-Source Change of",CTN_STRAIN:"CTN-Strain Change",CTN_STUDY_COMPLETION:"CTN-Study Completion",CTN_STUDY_DISC:"CTN-Study Discontinuation due to",CTN_STUDY_EXT:"CTN-Study Recruitment Timeline Extension",CTN_STUDY_SUS:"CTN-Study Suspension",CTN_TRANS_OWN:"CTN-Transfer of Ownership",CLINICAL:"CLINICAL",CLINICAL_QUALITY:"CLINICAL & QUALITY",QUALITY:"QUALITY",INITIAL_TEAT_SOLU_MONO:"INITIAL - Monographie de solutions antiseptiques pour les trayons",REQ_ACCEPTED:"Demande acceptée",CTN_FORM_BROC_UPDATES:"CTN-Informed Consent Form and Investigator’s Brochure Updates",CTN_IMPD_UPDATE:"CTN-IMPD Update",CTN_NEW_SUMM_ADF:"CTN-New Summary of Additional Drugs Form","COVIR-19":"Demande d'ordonnance provisoire COVID-19","COVIR-19AMD":"Demande d'ordonnance provisoire COVID-19 - Modification",POST_ANTH_CHANGE_DESCR:"Première transaction d'une nouvelle activité réglementaire.",ROLLING_INFO:"Information continue",WITHDRAWAL_NOF_FORM:"Retrait du formulaire de déclaration de médicament",PROTOCOL_REVIEW:"Examens de protocole",BLOOD_EST:"Établissement de sang",ADVISEMENT_LETTER_RESPONSE:"Réponse à la lettre de mise en garde de mettre à jour la monographie de produit",NOF_DRUG_SHORT:"Avis de pénurie de médicaments",QUALITY_ISSU:"Problème de qualité soulevé par la compagnie et/ou un autre organisme de réglementation",GMP_COMP_ISSU:"Problèmes de conformité aux BPF relevés par d’autres organismes de réglementation",RECLASS_LOT_RELEASE:"Demande de reclassification dans le cadre du Programme d’autorisation de mise en circulation des lots de la DPBTG",NOC_COMPLIANCE:"Avis de conformité avec conditions (AC-C) - engagement",UDRA_CANCEL_LETTER:"Lettre d'annulation pour l'ARND",SEQUENCE_CLEANUP:"Nettoyage du dossier eCTD",UDRA_MEETING_MINUTES:"Procès-verbal de la réunion pour l'ARND",UDRA_EMAIL_RQ_RESPONSE:"Réponse à une demande par courrier électronique pour l'ARND",UDRA_PROCESSING_CLARIF_RESPONSE:"Réponse à la demande de clarification du traitement pour l'ARND",GEN_VOL_NOF:"Notification générale / volontaire",RQ_REVIEW_REPORT:"Demande de rapport(s) d'examen"};var service={getEnv:_getEnvString,setEnv:_setEnvString,getVer:_getVerString,setVer:_setVerString,getTransactionDescriptions:getTransactionDescriptionsArray,getActivityTypes:getActivityArray,createRaTypes:_createRaArray,getPharmaceuticalValue:_getPharmaceutical,getBiologicValue:_getBiologic,getVeterinaryValue:_getVeterinary,getClinicalValue:_getClinical,getBiologicalLeadValue:_getBiologicalLead,getPharmaLeadValue:_getPharmaLead,getPostMarketLeadValue:_getPostMarketLead,getConsumHealthLeadValue:_getConsumHealthLead,getVeterinaryLeadValue:_getVeterinaryLead,getClinicalBioLeadValue:_getClinicalBioLead,getClinicalPhaLeadValue:_getClinicalPhaLead,getPresubTypes:getPresubArray,getAndsType:getANDSArray,getV_AndsType:getV_AndsArray,getCtaType:getCtaArray,getCta_aType:getCta_aArray,getPreCtaType:getPreCtaArray,getDinaType:getDINAArray,getV_DinvType:getV_DINVArray,getDinbType:getDINBArray,getDindType:getDINDArray,getDinfType:getDINFArray,getDSurType:getDSurArray,getEundsType:getEUNDSArray,getEusndsType:getEUSNDSArray,getLevel3Type:getLevel3Array,getV_Level3Type:getV_Level3Array,getMPDINType:getMPDINArray,getV_MpdinType:getV_MpdinArray,getNcType:getNcArray,getV_NcType:getV_NcArray,getB_NcType:getB_NcArray,getNdsType:getNDSArray,getV_NdsType:getV_NdsArray,getPdcType:getPDCArray,getPdcBType:getPDCBArray,getPresubType:getPresubArray,getpSurCType:getPSURCArray,getpSurPvType:getPSURPVArray,getV_PsurPvType:getV_PsurPvArray,getRmpPvType:getRMPPVArray,getSandsType:getSANDSArray,getV_SandsType:getV_SandsArray,getSndsType:getSNDSArray,getV_SndsType:getV_SndsArray,getSndsCType:getSNDSCArray,getUdpvType:getUDPVArray,getUdraType:getUDRAArray,getV_UdraType:getV_UdraArray,getYbprType:getYBPRArray,getConsultType:getConsultArray,getMPNCType:_getMPNCArray,getV_MpncType:getV_MpncArray,getMPNDSType:_getMPNDSArray,getMPCOVType:_getMPCOVArray,getV_MpndsType:getV_MpndsArray,getV_MpandsType:getV_MpandsArray,getV_MpsandsType:getV_MpsandsArray,getV_RccType:getV_RccArray,getMPSNDSType:_getMPSNDSArray,getV_MpsndsType:getV_MpsndsArray,getPANDType:_getPANDArray,getPBRERCType:_getPBRERCArray,getPBRERPVType:_getPBRERPVArray,getPRNDSType:_getPRNDSArray,getPRSNDSType:_getPRSNDSArray,getIRSRPVType:_getIRSRPVArray,getPAPVType:_getPAPVArray,getPSAPVType:_getPSAPVArray,getRCPVType:_getRCPVArray,getREGPVType:_getREGPVArray,getSANDSCType:_getSANDSCArray,getPostDINType:_getPostDINArray,getEUANDSType:_getEUANDSArray,getEUSANDSType:_getEUSANDSArray,getNDSCVType:_getNDSCVArray,getYesNoList:yesNoArray,getFeeList:_getfeeTypeArray,createFeeTypes:_createFeeArray,getMitigationList:_getMitigationTypeArray,createMitigationList:_createMitigationArray,getActivityLeadList:_getActivityLeadArray,getActivityLeadListByD22:_getActivityLeadD22Array,getActivityLeadListByD21:_getActivityLeadD21Array,getActivityLeadListByD24:_getActivityLeadD24Array,getActivityLeadListByD26:_getActivityLeadD26Array,getShelfLifeUnitsList:_getShelfLifeUnitsArray,getCOVIR19Type:_getCoVir19Array,getV_COV19Type:_getV_CoV19Array,getCOVID19AMDType:_getCoVir19AmdArray,getV_COV19AMDType:_getV_CoV19AmdArray,getVNDSCVType:_getV_NDSCVArray,getVPROREType:_getV_PROREArray,getBEType:_getBEArray,getNFAType:_getNFAArray,getTxDescEn:_getTxDescEn,getTxDescFr:_getTxDescFr};return service}angular.module("services").factory("TransactionLists",getTransactionSeq),getTransactionSeq.inject=["$http","$q"]}(),function(){"use strict";angular.module("services",[])}(),function(){"use strict";function getTransactionSeq($http,$q){function yesNoArray(){return["Y","N"]}function _getEnvString(){return vm.env?vm.env:"PROD"}function _setEnvString(value){vm.env=value.env}function _getVerString(){return vm.ver?vm.ver:"@@verValue"}function _setVerString(value){vm.ver=value.ver}function _createRaArray(value){vm.raTypeArray=value}function _createFeeArray(value){vm.feeTypeArray=value}function _createMitigationArray(value){vm.mitigationTypeArray=value}function getTransactionDescriptionsArray(){return vm.allActivities}function getActivityArray(){return vm.raTypeArray}function _getfeeTypeArray(){return vm.feeTypeArray}function _getMitigationTypeArray(){return vm.mitigationTypeArray}function getPresubArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE]}function getANDSArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.COMMENTS_NOC,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.INITIAL,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.PRODUCT_LABELLING_POST_APPROVAL,vm.allActivities.PUB_RELEASE_INFO,vm.allActivities.BE_CLARIF_RESPONSE,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.NOC_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.NON_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.CORR_PATENT_MED,vm.allActivities.ALLEGATION_NOTICE,vm.allActivities.FORM_IV,vm.allActivities.FORM_V,vm.allActivities.CONSENT_LTR,vm.allActivities.DATA_PROTECT_CORRESP,vm.allActivities.WITHDRAWAL_NOF_FORM,vm.allActivities.DIN_DISCONTINUED,vm.allActivities.NOTIFICATION_INTERRUPT_SALE,vm.allActivities.IMMEDIATE_NOTIFICATION,vm.allActivities.RQ_REVIEW_REPORT]}function getEUNDSArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.BE_CLARIF_RESPONSE,vm.allActivities.CANCEL_LETTER,vm.allActivities.COMMENTS_NOC,vm.allActivities.COMMENTS_SUMMARY_BASIS,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.INITIAL,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.PUB_RELEASE_INFO,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.NOC_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.NON_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.CORR_PATENT_MED,vm.allActivities.ALLEGATION_NOTICE,vm.allActivities.FORM_IV,vm.allActivities.FORM_V,vm.allActivities.CONSENT_LTR,vm.allActivities.DATA_PROTECT_CORRESP,vm.allActivities.WITHDRAWAL_NOF_FORM,vm.allActivities.NONCLIN_CLARIF_RESPONSE,vm.allActivities.PRODUCT_LABELLING_POST_APPROVAL,vm.allActivities.DIN_DISCONTINUED,vm.allActivities.NOTIFICATION_INTERRUPT_SALE,vm.allActivities.IMMEDIATE_NOTIFICATION,vm.allActivities.RQ_REVIEW_REPORT]}function getEUSNDSArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.BE_CLARIF_RESPONSE,vm.allActivities.CANCEL_LETTER,vm.allActivities.COMMENTS_NOC,vm.allActivities.COMMENTS_SUMMARY_BASIS,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.POST_NOC_CHANGE,vm.allActivities.PUB_RELEASE_INFO,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.NOC_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.NON_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.CORR_PATENT_MED,vm.allActivities.ALLEGATION_NOTICE,vm.allActivities.FORM_IV,vm.allActivities.FORM_V,vm.allActivities.CONSENT_LTR,vm.allActivities.DATA_PROTECT_CORRESP,vm.allActivities.WITHDRAWAL_NOF_FORM,vm.allActivities.NONCLIN_CLARIF_RESPONSE,vm.allActivities.PRODUCT_LABELLING_POST_APPROVAL,vm.allActivities.IMMEDIATE_NOTIFICATION,vm.allActivities.RQ_REVIEW_REPORT];
}function getLevel3Array(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.YEAR_LIST_OF_CHANGE,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE]}function getNDSArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.COMMENTS_NOC,vm.allActivities.COMMENTS_SUMMARY_BASIS,vm.allActivities.COMMENTS_REGULARTORY_DECISION,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.INITIAL,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.PUB_RELEASE_INFO,vm.allActivities.BE_CLARIF_RESPONSE,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.NOC_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.NON_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.CORR_PATENT_MED,vm.allActivities.ALLEGATION_NOTICE,vm.allActivities.FORM_IV,vm.allActivities.FORM_V,vm.allActivities.CONSENT_LTR,vm.allActivities.DATA_PROTECT_CORRESP,vm.allActivities.WITHDRAWAL_NOF_FORM,vm.allActivities.NONCLIN_CLARIF_RESPONSE,vm.allActivities.PRODUCT_LABELLING_POST_APPROVAL,vm.allActivities.DIN_DISCONTINUED,vm.allActivities.NOTIFICATION_INTERRUPT_SALE,vm.allActivities.IMMEDIATE_NOTIFICATION,vm.allActivities.RQ_REVIEW_REPORT]}function _getNDSCVArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.COMMENTS_NOC,vm.allActivities.COMMENTS_SUMMARY_BASIS,vm.allActivities.COMMENTS_REGULARTORY_DECISION,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.INITIAL,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.PUB_RELEASE_INFO,vm.allActivities.BE_CLARIF_RESPONSE,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.NOC_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.NON_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.CORR_PATENT_MED,vm.allActivities.FORM_IV,vm.allActivities.CONSENT_LTR,vm.allActivities.DATA_PROTECT_CORRESP,vm.allActivities.WITHDRAWAL_NOF_FORM,vm.allActivities.ROLLING_INFO,vm.allActivities.NONCLIN_CLARIF_RESPONSE,vm.allActivities.PRODUCT_LABELLING_POST_APPROVAL,vm.allActivities.DIN_DISCONTINUED,vm.allActivities.NOTIFICATION_INTERRUPT_SALE,vm.allActivities.IMMEDIATE_NOTIFICATION,vm.allActivities.RQ_REVIEW_REPORT]}function getPSURCArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.FOR_PERIOD,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.MEETING_MINUTES,vm.allActivities.MHPD_RQ_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE]}function getPSURPVArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.FOR_PERIOD,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.MEETING_MINUTES,vm.allActivities.MHPD_RQ_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE]}function getRMPPVArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.CSOtRMP,vm.allActivities.MEETING_MINUTES,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.MHPD_RQ_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.RMP_VERSION_DATE,vm.allActivities.PRESUB_MEETING_RQ]}function getSANDSArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.COMMENTS_NOC,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.POST_NOC_CHANGE,vm.allActivities.PUB_RELEASE_INFO,vm.allActivities.BE_CLARIF_RESPONSE,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.NOC_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.NON_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.CORR_PATENT_MED,vm.allActivities.ALLEGATION_NOTICE,vm.allActivities.FORM_IV,vm.allActivities.FORM_V,vm.allActivities.CONSENT_LTR,vm.allActivities.WITHDRAWAL_NOF_FORM,vm.allActivities.DATA_PROTECT_CORRESP,vm.allActivities.PRODUCT_LABELLING_POST_APPROVAL,vm.allActivities.IMMEDIATE_NOTIFICATION,vm.allActivities.RQ_REVIEW_REPORT]}function getSNDSArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.COMMENTS_NOC,vm.allActivities.COMMENTS_SUMMARY_BASIS,vm.allActivities.COMMENTS_REGULARTORY_DECISION,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.POST_NOC_CHANGE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.PUB_RELEASE_INFO,vm.allActivities.BE_CLARIF_RESPONSE,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.NOC_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.NON_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.CORR_PATENT_MED,vm.allActivities.ALLEGATION_NOTICE,vm.allActivities.FORM_IV,vm.allActivities.FORM_V,vm.allActivities.CONSENT_LTR,vm.allActivities.DATA_PROTECT_CORRESP,vm.allActivities.WITHDRAWAL_NOF_FORM,vm.allActivities.NONCLIN_CLARIF_RESPONSE,vm.allActivities.PRODUCT_LABELLING_POST_APPROVAL,vm.allActivities.IMMEDIATE_NOTIFICATION,vm.allActivities.RQ_REVIEW_REPORT]}function getSNDSCArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.COMMENTS_NOC,vm.allActivities.COMMENTS_SUMMARY_BASIS,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_NOC_CHANGE,vm.allActivities.PUB_RELEASE_INFO,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.NOC_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.NON_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.CORR_PATENT_MED,vm.allActivities.ALLEGATION_NOTICE,vm.allActivities.FORM_IV,vm.allActivities.FORM_V,vm.allActivities.CONSENT_LTR,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.WITHDRAWAL_NOF_FORM,vm.allActivities.DATA_PROTECT_CORRESP,vm.allActivities.PRODUCT_LABELLING_POST_APPROVAL,vm.allActivities.RQ_REVIEW_REPORT]}function getUDPVArray(){return[vm.allActivities.BENEFIT_RISK_ASSESS,vm.allActivities.CANCEL_LETTER,vm.allActivities.NOTIFICATION_CHANGE,vm.allActivities.POST_MARKET_SURV,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.MEETING_MINUTES,vm.allActivities.MHPD_RQ_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.RISK_COMMUN_DOC,vm.allActivities.UNSOLICITED_DATA]}function getUDRAArray(){return[vm.allActivities.ADVISEMENT_LETTER_RESPONSE,vm.allActivities.NOF_DRUG_SHORT,vm.allActivities.QUALITY_ISSU,vm.allActivities.GMP_COMP_ISSU,vm.allActivities.RECLASS_LOT_RELEASE,vm.allActivities.NOC_COMPLIANCE,vm.allActivities.UDRA_CANCEL_LETTER,vm.allActivities.SEQUENCE_CLEANUP,vm.allActivities.UDRA_MEETING_MINUTES,vm.allActivities.UDRA_EMAIL_RQ_RESPONSE,vm.allActivities.UDRA_PROCESSING_CLARIF_RESPONSE,vm.allActivities.GEN_VOL_NOF]}function getConsultArray(){return[vm.allActivities.PANDEMIC_APPL]}function _getMPNCArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.WRITTEN_CONSULT_REQ,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ]}function _getMPNDSArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.WRITTEN_CONSULT_REQ,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ]}function _getMPCOVArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ]}function _getMPSNDSArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.WRITTEN_CONSULT_REQ,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ]}function _getPANDArray(){return[vm.allActivities.BE_CLARIF_RESPONSE,vm.allActivities.CANCEL_LETTER,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.COMMENTS_NOC,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.INITIAL,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PANDEMIC_APPL,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.NOC_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.NON_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.CORR_PATENT_MED,vm.allActivities.ALLEGATION_NOTICE,vm.allActivities.FORM_IV,vm.allActivities.FORM_V,vm.allActivities.CONSENT_LTR,vm.allActivities.DATA_PROTECT_CORRESP,vm.allActivities.NONCLIN_CLARIF_RESPONSE]}function _getPBRERCArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.FOR_PERIOD,vm.allActivities.MHPD_RQ_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE]}function _getPBRERPVArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.FOR_PERIOD,vm.allActivities.MHPD_RQ_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE]}function _getPRNDSArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.MEETING_MINUTES,vm.allActivities.PRIORITY_REVIEW_RQ,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.RQ_REVIEW_REPORT]}function _getPRSNDSArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.MEETING_MINUTES,vm.allActivities.PRIORITY_REVIEW_RQ,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.RQ_REVIEW_REPORT]}function getYBPRArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.FOR_PERIOD,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.MEETING_MINUTES,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.RQ_REVIEW_REPORT]}function getDSurArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.FOR_PERIOD,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.MEETING_MINUTES,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.PHONE_RQ_RESPONSE]}function getDINAArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.CHANGE_TO_DIN,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.INITIAL,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.PRODUCT_LABELLING_POST_APPROVAL,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.BE_CLARIF_RESPONSE,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.NON_RESPONSE,vm.allActivities.WITHDRAWAL_NOF_FORM,vm.allActivities.NOD_RESPONSE,vm.allActivities.DIN_DISCONTINUED,vm.allActivities.NOTIFICATION_INTERRUPT_SALE,vm.allActivities.RQ_REVIEW_REPORT]}function getV_DINVArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.CHANGE_TO_DIN,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.INITIAL,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.HSC_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QHSC_RQ_RESPONSE,vm.allActivities.CHSC_RQ_RESPONSE,vm.allActivities.QCHSC_RQ_RESPONSE,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.INITIAL_TEAT_SOLU_MONO,vm.allActivities.WITHDRAWAL_NOF_FORM,vm.allActivities.NOD_RESPONSE,vm.allActivities.DIN_DISCONTINUED,vm.allActivities.NOTIFICATION_INTERRUPT_SALE]}function getDINBArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.CHANGE_TO_DIN,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.INITIAL,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.PRODUCT_LABELLING_POST_APPROVAL,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.NON_RESPONSE,vm.allActivities.WITHDRAWAL_NOF_FORM,vm.allActivities.NOD_RESPONSE,vm.allActivities.DIN_DISCONTINUED,vm.allActivities.NOTIFICATION_INTERRUPT_SALE,vm.allActivities.IMMEDIATE_NOTIFICATION,vm.allActivities.RQ_REVIEW_REPORT]}function getDINDArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.CHANGE_TO_DIN,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.INITIAL,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.NON_RESPONSE,vm.allActivities.WITHDRAWAL_NOF_FORM,vm.allActivities.NOD_RESPONSE,vm.allActivities.DIN_DISCONTINUED,vm.allActivities.NOTIFICATION_INTERRUPT_SALE,vm.allActivities.RQ_REVIEW_REPORT]}function getDINFArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.CHANGE_TO_DIN,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.INITIAL,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.WITHDRAWAL_NOF_FORM,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.DIN_DISCONTINUED,vm.allActivities.NOTIFICATION_INTERRUPT_SALE,vm.allActivities.RQ_REVIEW_REPORT]}function getMPDINArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.WRITTEN_CONSULT_REQ,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE]}function getPDCArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_AUTH_DIV1_CHANGE,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.NOL_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.PRODUCT_LABELLING_POST_APPROVAL,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.RQ_REVIEW_REPORT,vm.allActivities.SDN_RESPONSE]}function getPDCBArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_AUTH_DIV1_CHANGE,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.NOL_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.PRODUCT_LABELLING_POST_APPROVAL,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.RQ_REVIEW_REPORT,vm.allActivities.SDN_RESPONSE]}function _getIRSRPVArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.ISSUE_SAFETY_REQUEST,vm.allActivities.MEETING_MINUTES,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PRESUB_MEETING_RQ]}function _getPAPVArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.MHPD_RQ_RESPONSE,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.POST_MARKET_SURV,vm.allActivities.PROCESSING_CLARIF_RESPONSE]}function _getPSAPVArray(){return[vm.allActivities.ADV_COMP_REQ,vm.allActivities.CANCEL_LETTER,vm.allActivities.PATIENT_SAFETY_INFO,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.MHPD_RQ_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE]}function _getRCPVArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.DISSEM_LIST,vm.allActivities.FINAL_RISK_COM,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.RISK_COMMUN_DOC]}function _getREGPVArray(){return[vm.allActivities.BENEFIT_RISK_ASSESS,vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.NOTIFICATION_CHANGE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.TEST_STUDIES_ORDER,vm.allActivities.MHPD_RQ_RESPONSE]}function _getSANDSCArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.COMMENTS_NOC,vm.allActivities.COMMENTS_SUMMARY_BASIS,vm.allActivities.CONSENT_LTR,vm.allActivities.DATA_PROTECT_CORRESP,vm.allActivities.CORR_PATENT_MED,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.FORM_IV,vm.allActivities.FORM_V,vm.allActivities.MEETING_MINUTES,vm.allActivities.ALLEGATION_NOTICE,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.POST_NOC_CHANGE,vm.allActivities.PUB_RELEASE_INFO,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.NOC_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.NON_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.WITHDRAWAL_NOF_FORM,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.PRODUCT_LABELLING_POST_APPROVAL,vm.allActivities.RQ_REVIEW_REPORT]}function _getPostDINArray(){return[vm.allActivities.YEAR,vm.allActivities.CANCEL_LETTER,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE]}function _getEUANDSArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.BE_CLARIF_RESPONSE,vm.allActivities.CANCEL_LETTER,vm.allActivities.COMMENTS_NOC,vm.allActivities.COMMENTS_SUMMARY_BASIS,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.INITIAL,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.PUB_RELEASE_INFO,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.NOC_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.NON_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.CORR_PATENT_MED,vm.allActivities.ALLEGATION_NOTICE,vm.allActivities.FORM_IV,vm.allActivities.FORM_V,vm.allActivities.CONSENT_LTR,vm.allActivities.DATA_PROTECT_CORRESP,vm.allActivities.WITHDRAWAL_NOF_FORM,vm.allActivities.NONCLIN_CLARIF_RESPONSE,vm.allActivities.PRODUCT_LABELLING_POST_APPROVAL,vm.allActivities.DIN_DISCONTINUED,vm.allActivities.NOTIFICATION_INTERRUPT_SALE,vm.allActivities.IMMEDIATE_NOTIFICATION,vm.allActivities.RQ_REVIEW_REPORT]}function _getEUSANDSArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.BE_CLARIF_RESPONSE,vm.allActivities.CANCEL_LETTER,vm.allActivities.COMMENTS_NOC,vm.allActivities.COMMENTS_SUMMARY_BASIS,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.PUB_RELEASE_INFO,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.NOC_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.NON_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.CORR_PATENT_MED,vm.allActivities.ALLEGATION_NOTICE,vm.allActivities.FORM_IV,vm.allActivities.FORM_V,vm.allActivities.CONSENT_LTR,vm.allActivities.DATA_PROTECT_CORRESP,vm.allActivities.WITHDRAWAL_NOF_FORM,vm.allActivities.NONCLIN_CLARIF_RESPONSE,vm.allActivities.PRODUCT_LABELLING_POST_APPROVAL,vm.allActivities.IMMEDIATE_NOTIFICATION,vm.allActivities.RQ_REVIEW_REPORT]}function getV_AndsArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.CONSENT_LTR,vm.allActivities.DATA_PROTECT_CORRESP,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.CORR_PATENT_MED,vm.allActivities.FORM_IV,vm.allActivities.FORM_V,vm.allActivities.INITIAL,vm.allActivities.MEETING_MINUTES,vm.allActivities.ALLEGATION_NOTICE,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.HSC_RQ_RESPONSE,vm.allActivities.QHSC_RQ_RESPONSE,vm.allActivities.CHSC_RQ_RESPONSE,vm.allActivities.QCHSC_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.NON_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.WITHDRAWAL_NOF_FORM,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.DIN_DISCONTINUED,vm.allActivities.NOTIFICATION_INTERRUPT_SALE]}function getCtaArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.INITIAL,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.NOL_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.CTN_ADMINISTRATIVE,vm.allActivities.CTN_APPENDIX,vm.allActivities.CTN_CONTACT,vm.allActivities.CTN_DATA,vm.allActivities.CTN_DEAR,vm.allActivities.CTN_DILUENT,vm.allActivities.CTN_DRUG_PROD,vm.allActivities.CTN_DRUG_SUBS,vm.allActivities.CTN_ENROLLMENT,vm.allActivities.CTN_ETHICS,vm.allActivities.CTN_IMPD_UPDATE,vm.allActivities.CTN_INFORMED,vm.allActivities.CTN_FORM_BROC_UPDATES,vm.allActivities.CTN_INVESTIGATOR,vm.allActivities.CTN_NEW_MANUFACTURING,vm.allActivities.CTN_NEW_PKG,vm.allActivities.CTN_NEW_QC,vm.allActivities.CTN_NEW_SUMM_ADF,vm.allActivities.CTN_PACKAGING_LABELLING,vm.allActivities.CTN_PROTOCOL_INFO_UPDATE,vm.allActivities.CTN_PROTOCOL_UPDATE,vm.allActivities.CTN_QOS,vm.allActivities.CTN_REFUSALS,vm.allActivities.CTN_REGULATORY,vm.allActivities.CTN_RESPONSE,vm.allActivities.CTN_SAFETY,vm.allActivities.CTN_SHELF_PD,vm.allActivities.CTN_SHELF_DS,vm.allActivities.CTN_SITE,vm.allActivities.CTN_SOURCE,vm.allActivities.CTN_STRAIN,vm.allActivities.CTN_STUDY_COMPLETION,vm.allActivities.CTN_STUDY_DISC,vm.allActivities.CTN_STUDY_EXT,vm.allActivities.CTN_STUDY_SUS,vm.allActivities.CTN_TRANS_OWN]}function getCta_aArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.NOL_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.CLINICAL,vm.allActivities.CLINICAL_QUALITY,vm.allActivities.QUALITY]}function getPreCtaArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ]}function getV_Level3Array(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.YEAR_LIST_OF_CHANGE]}function getV_MpdinArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ]}function getV_MpncArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ]}function getV_MpndsArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ]}function getV_MpsndsArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ]}function getV_MpandsArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ]}function getV_MpsandsArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ]}function getV_RccArray(){return[vm.allActivities.REQ_ACCEPTED]}function getV_NcArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.POST_NOC_CHANGE,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.HSC_RQ_RESPONSE,vm.allActivities.QHSC_RQ_RESPONSE,vm.allActivities.CHSC_RQ_RESPONSE,vm.allActivities.QCHSC_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.NOL_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.UNSOLICITED_DATA];
}function getB_NcArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.POST_NOC_CHANGE,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.NOL_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.PRODUCT_LABELLING_POST_APPROVAL,vm.allActivities.RQ_REVIEW_REPORT]}function getNcArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.NOL_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.UNSOLICITED_DATA]}function _getV_NDSCVArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.CONSENT_LTR,vm.allActivities.DATA_PROTECT_CORRESP,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.CORR_PATENT_MED,vm.allActivities.FORM_IV,vm.allActivities.INITIAL,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.HSC_RQ_RESPONSE,vm.allActivities.QHSC_RQ_RESPONSE,vm.allActivities.CHSC_RQ_RESPONSE,vm.allActivities.QCHSC_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.ROLLING_INFO,vm.allActivities.WITHDRAWAL_NOF_FORM,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.DIN_DISCONTINUED,vm.allActivities.NOTIFICATION_INTERRUPT_SALE]}function getV_NdsArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.CONSENT_LTR,vm.allActivities.DATA_PROTECT_CORRESP,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.CORR_PATENT_MED,vm.allActivities.FORM_IV,vm.allActivities.FORM_V,vm.allActivities.INITIAL,vm.allActivities.MEETING_MINUTES,vm.allActivities.ALLEGATION_NOTICE,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.HSC_RQ_RESPONSE,vm.allActivities.QHSC_RQ_RESPONSE,vm.allActivities.CHSC_RQ_RESPONSE,vm.allActivities.QCHSC_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.WITHDRAWAL_NOF_FORM,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.DIN_DISCONTINUED,vm.allActivities.NOTIFICATION_INTERRUPT_SALE]}function getV_PsurPvArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.FOR_PERIOD,vm.allActivities.MEETING_MINUTES,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.HSC_RQ_RESPONSE,vm.allActivities.QHSC_RQ_RESPONSE,vm.allActivities.CHSC_RQ_RESPONSE,vm.allActivities.QCHSC_RQ_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE]}function getV_SandsArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.CONSENT_LTR,vm.allActivities.DATA_PROTECT_CORRESP,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.CORR_PATENT_MED,vm.allActivities.FORM_IV,vm.allActivities.FORM_V,vm.allActivities.MEETING_MINUTES,vm.allActivities.ALLEGATION_NOTICE,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.POST_NOC_CHANGE,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.HSC_RQ_RESPONSE,vm.allActivities.QHSC_RQ_RESPONSE,vm.allActivities.CHSC_RQ_RESPONSE,vm.allActivities.QCHSC_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.NON_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.WITHDRAWAL_NOF_FORM,vm.allActivities.UNSOLICITED_DATA]}function getV_SndsArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.CONSENT_LTR,vm.allActivities.DATA_PROTECT_CORRESP,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.CORR_PATENT_MED,vm.allActivities.FORM_IV,vm.allActivities.FORM_V,vm.allActivities.MEETING_MINUTES,vm.allActivities.ALLEGATION_NOTICE,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.POST_NOC_CHANGE,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.HSC_RQ_RESPONSE,vm.allActivities.QHSC_RQ_RESPONSE,vm.allActivities.CHSC_RQ_RESPONSE,vm.allActivities.QCHSC_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.NON_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.WITHDRAWAL_NOF_FORM,vm.allActivities.UNSOLICITED_DATA]}function getV_UdraArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.DIN_DISCONTINUED,vm.allActivities.NOTIFICATION_INTERRUPT_SALE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.QHSC_RQ_RESPONSE,vm.allActivities.CHSC_RQ_RESPONSE,vm.allActivities.QCHSC_RQ_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.UNSOLICITED_DATA]}function _getCoVir19Array(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.CLARIF_RESPONSE,vm.allActivities.PUB_RELEASE_INFO,vm.allActivities.BE_CLARIF_RESPONSE,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.WITHDRAWAL_NOF_FORM,vm.allActivities.PANDEMIC_APPL,vm.allActivities.ROLLING_INFO]}function _getCoVir19AmdArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_ANTH_CHANGE,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.CLARIF_RESPONSE,vm.allActivities.PUB_RELEASE_INFO,vm.allActivities.BE_CLARIF_RESPONSE,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.WITHDRAWAL_NOF_FORM,vm.allActivities.ROLLING_INFO]}function _getV_CoV19Array(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.MEETING_MINUTES,vm.allActivities.PANDEMIC_APPL,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.CLARIF_RESPONSE,vm.allActivities.HSC_RQ_RESPONSE,vm.allActivities.QHSC_RQ_RESPONSE,vm.allActivities.CHSC_RQ_RESPONSE,vm.allActivities.QCHSC_RQ_RESPONSE,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.WITHDRAWAL_NOF_FORM,vm.allActivities.ROLLING_INFO]}function _getV_CoV19AmdArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_ANTH_CHANGE,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.CLARIF_RESPONSE,vm.allActivities.HSC_RQ_RESPONSE,vm.allActivities.QHSC_RQ_RESPONSE,vm.allActivities.CHSC_RQ_RESPONSE,vm.allActivities.QCHSC_RQ_RESPONSE,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.WITHDRAWAL_NOF_FORM,vm.allActivities.ROLLING_INFO]}function _getV_PROREArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.PROTOCOL_REVIEW,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.HSC_RQ_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.QHSC_RQ_RESPONSE,vm.allActivities.CHSC_RQ_RESPONSE,vm.allActivities.QCHSC_RQ_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA]}function _getNFAArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.FOREIGN_SAFETY_NOTIFICATION,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE]}function _getBEArray(){return[vm.allActivities.BLOOD_EST]}function _getActivityLeadArray(){return[vm.PHARMA,vm.BIOLOGICAL,vm.POSTMARKET,vm.CONSUMERHEALTH]}function _getActivityLeadD22Array(){return[vm.PHARMA,vm.POSTMARKET,vm.CONSUMERHEALTH]}function _getActivityLeadD21Array(){return[vm.BIOLOGICAL,vm.POSTMARKET]}function _getActivityLeadD24Array(){return[vm.VETERINARY]}function _getActivityLeadD26Array(){return[vm.CLINICAL_BIO,vm.CLINICAL_PHA]}function _getPharmaceutical(){return vm.D22}function _getBiologic(){return vm.D21}function _getVeterinary(){return vm.D24}function _getClinical(){return vm.D26}function _getBiologicalLead(){return vm.BIOLOGICAL}function _getPharmaLead(){return vm.PHARMA}function _getPostMarketLead(){return vm.POSTMARKET}function _getConsumHealthLead(){return vm.CONSUMERHEALTH}function _getVeterinaryLead(){return vm.VETERINARY}function _getClinicalBioLead(){return vm.CLINICAL_BIO}function _getClinicalPhaLead(){return vm.CLINICAL_PHA}function _getShelfLifeUnitsArray(){return[{id:"YR",en:"Years",fr:"Années"},{id:"MO",en:"Months",fr:"Mois"},{id:"DA",en:"Days",fr:"Jours"},{id:"HR",en:"Hours",fr:"Heures"},{id:"MI",en:"Minutes",fr:"Minutes"}]}function _getTxDescEn(){return allActivitiesEn}function _getTxDescFr(){return allActivitiesFr}var vm=this;vm.env="",vm.ver=[],vm.raTypeArray=[],vm.feeTypeArray=[],vm.mitigationTypeArray=[],vm.D21="D21",vm.D22="D22",vm.D24="D24",vm.D26="D26",vm.BIOLOGICAL="B14-20160301-02",vm.CONSUMERHEALTH="B14-20160301-06",vm.PHARMA="B14-20160301-09",vm.POSTMARKET="B14-20160301-10",vm.VETERINARY="B14-20160301-11",vm.CLINICAL_BIO="B14-20160301-02",vm.CLINICAL_PHA="B14-20160301-09",vm.allActivities={ADMINISTRATIVE:"ADMINISTRATIVE",BENEFIT_RISK_ASSESS:"BENEFIT_RISK_ASSESS",CANCEL_LETTER:"CANCEL_LETTER",CHANGE_TO_DIN:"CHANGE_TO_DIN",CLARIF_RESPONSE:"CLARIF_RESPONSE",COMMENTS_NOC:"COMMENTS_NOC",COMMENTS_SUMMARY_BASIS:"COMMENTS_SUMMARY_BASIS",COMMENTS_REGULARTORY_DECISION:"COMMENTS_REGULARTORY_DECISION",DIN_DISCONTINUED:"DIN_DISCONTINUED",DRUG_NOTIF_FORM:"DRUG_NOTIF_FORM",FOR_PERIOD:"FOR_PERIOD",FOR_NOC:"FOR_NOC",FINAL_RISK_COM:"FINAL_RISK_COM",INITIAL:"INITIAL",MEETING_MINUTES:"MEETING_MINUTES",NOTIFICATION_CHANGE:"NOTIFICATION_CHANGE",NOTIFICATION_INTERRUPT_SALE:"NOTIFICATION_INTERRUPT_SALE",PANDEMIC_APPL:"PANDEMIC_APPL",POST_CLEARANCE_DATA:"POST_CLEARANCE_DATA",POST_MARKET_SURV:"POST_MARKET_SURV",POST_NOC_CHANGE:"POST_NOC_CHANGE",POST_AUTH_DIV1_CHANGE:"POST_AUTH_DIV1_CHANGE",PRESUB_MEETING_PKG:"PRESUB_MEETING_PKG",PRESUB_MEETING_RQ:"PRESUB_MEETING_RQ",PRIORITY_REVIEW_RQ:"PRIORITY_REVIEW_RQ",PRODUCT_LABELLING_POST_APPROVAL:"PRODUCT_LABELLING_POST_APPROVAL",CLIN_CLARIF_RESPONSE:"CLIN_CLARIF_RESPONSE",EMAIL_RQ_RESPONSE:"EMAIL_RQ_RESPONSE",HSC_RQ_RESPONSE:"HSC_RQ_RESPONSE",QHSC_RQ_RESPONSE:"QHSC_RQ_RESPONSE",CHSC_RQ_RESPONSE:"CHSC_RQ_RESPONSE",QCHSC_RQ_RESPONSE:"QCHSC_RQ_RESPONSE",LABEL_CLARIF_RESPONSE:"LABEL_CLARIF_RESPONSE",MHPD_RQ_RESPONSE:"MHPD_RQ_RESPONSE",NOC_RESPONSE:"NOC_RESPONSE",NOD_RESPONSE:"NOD_RESPONSE",NOL_RESPONSE:"NOL_RESPONSE",NON_RESPONSE:"NON_RESPONSE",PROCESSING_CLARIF_RESPONSE:"PROCESSING_CLARIF_RESPONSE",QUAL_CLIN_CLARIF_RESPONSE:"QUAL_CLIN_CLARIF_RESPONSE",QUAL_CLARIF_RESPONSE:"QUAL_CLARIF_RESPONSE",RECON_DECIS_LTR_INTENT:"RECON_DECIS_LTR_INTENT",RECON_DECIS_RQ_RECON:"RECON_DECIS_RQ_RECON",RECON_DECIS_OTHER_INFO:"RECON_DECIS_OTHER_INFO",SCREENING_ACCEPT_RESPONSE:"SCREENING_ACCEPT_RESPONSE",SCREENING_CLARIF_RESPONSE:"SCREENING_CLARIF_RESPONSE",SDN_RESPONSE:"SDN_RESPONSE",LABEL_PREAPPROVAL_2LANG:"LABEL_PREAPPROVAL_2LANG",PHONE_RQ_RESPONSE:"PHONE_RQ_RESPONSE",RISK_COMMUN_DOC:"RISK_COMMUN_DOC",RMP_VERSION_DATE:"RMP_VERSION_DATE",UNSOLICITED_DATA:"UNSOLICITED_DATA",YEAR_LIST_OF_CHANGE:"YEAR_LIST_OF_CHANGE",BE_CLARIF_RESPONSE:"BE_CLARIF_RESPONSE",CORR_PATENT_MED:"CORR_PATENT_MED",ALLEGATION_NOTICE:"ALLEGATION_NOTICE",FORM_IV:"FORM_IV",FORM_V:"FORM_V",CONSENT_LTR:"CONSENT_LTR",DATA_PROTECT_CORRESP:"DATA_PROTECT_CORRESP",NONCLIN_CLARIF_RESPONSE:"NONCLIN_CLARIF_RESPONSE",ADV_COMP_REQ:"ADV_COMP_REQ",CSOtRMP:"CSOtRMP",DISSEM_LIST:"DISSEM_LIST",FOREIGN_SAFETY_NOTIFICATION:"FOREIGN_SAFETY_NOTIFICATION",ISSUE_SAFETY_REQUEST:"ISSUE_SAFETY_REQUEST",PATIENT_SAFETY_INFO:"PATIENT_SAFETY_INFO",PUB_RELEASE_INFO:"PUB_RELEASE_INFO",RESSESS_ORDER:"RESSESS_ORDER",WRITTEN_CONSULT_REQ:"WRITTEN_CONSULT_REQ",TEST_STUDIES_ORDER:"TEST_STUDIES_ORDER",TERM_COND_COMM:"TERM_COND_COMM",YEAR:"YEAR",CTN_ADMINISTRATIVE:"CTN_ADMINISTRATIVE",CTN_APPENDIX:"CTN_APPENDIX",CTN_CONTACT:"CTN_CONTACT",CTN_DATA:"CTN_DATA",CTN_DEAR:"CTN_DEAR",CTN_DILUENT:"CTN_DILUENT",CTN_DRUG_PROD:"CTN_DRUG_PROD",CTN_DRUG_SUBS:"CTN_DRUG_SUBS",CTN_ENROLLMENT:"CTN_ENROLLMENT",CTN_ETHICS:"CTN_ETHICS",CTN_INFORMED:"CTN_INFORMED",CTN_INVESTIGATOR:"CTN_INVESTIGATOR",CTN_NEW_MANUFACTURING:"CTN_NEW_MANUFACTURING",CTN_NEW_PKG:"CTN_NEW_PKG",CTN_NEW_QC:"CTN_NEW_QC",CTN_PACKAGING_LABELLING:"CTN_PACKAGING_LABELLING",CTN_PROTOCOL_INFO_UPDATE:"CTN_PROTOCOL_INFO_UPDATE",CTN_PROTOCOL_UPDATE:"CTN_PROTOCOL_UPDATE",CTN_QOS:"CTN_QOS",CTN_REFUSALS:"CTN_REFUSALS",CTN_REGULATORY:"CTN_REGULATORY",CTN_RESPONSE:"CTN_RESPONSE",CTN_SAFETY:"CTN_SAFETY",CTN_SHELF_PD:"CTN_SHELF_PD",CTN_SHELF_DS:"CTN_SHELF_DS",CTN_SITE:"CTN_SITE",CTN_SOURCE:"CTN_SOURCE",CTN_STRAIN:"CTN_STRAIN",CTN_STUDY_COMPLETION:"CTN_STUDY_COMPLETION",CTN_STUDY_DISC:"CTN_STUDY_DISC",CTN_STUDY_EXT:"CTN_STUDY_EXT",CTN_STUDY_SUS:"CTN_STUDY_SUS",CTN_TRANS_OWN:"CTN_TRANS_OWN",CLINICAL:"CLINICAL",CLINICAL_QUALITY:"CLINICAL_QUALITY",QUALITY:"QUALITY",INITIAL_TEAT_SOLU_MONO:"INITIAL_TEAT_SOLU_MONO",REQ_ACCEPTED:"REQ_ACCEPTED",CTN_FORM_BROC_UPDATES:"CTN_FORM_BROC_UPDATES",CTN_IMPD_UPDATE:"CTN_IMPD_UPDATE",CTN_NEW_SUMM_ADF:"CTN_NEW_SUMM_ADF",COVIR_19:"COVIR-19",COVIR_19AMD:"COVIR-19AMD",POST_ANTH_CHANGE:"POST_ANTH_CHANGE",ROLLING_INFO:"ROLLING_INFO",WITHDRAWAL_NOF_FORM:"WITHDRAWAL_NOF_FORM",PROTOCOL_REVIEW:"PROTOCOL_REVIEW",BLOOD_EST:"BLOOD_EST",ADVISEMENT_LETTER_RESPONSE:"ADVISEMENT_LETTER_RESPONSE",NOF_DRUG_SHORT:"NOF_DRUG_SHORT",QUALITY_ISSU:"QUALITY_ISSU",GMP_COMP_ISSU:"GMP_COMP_ISSU",RECLASS_LOT_RELEASE:"RECLASS_LOT_RELEASE",NOC_COMPLIANCE:"NOC_COMPLIANCE",UDRA_CANCEL_LETTER:"UDRA_CANCEL_LETTER",SEQUENCE_CLEANUP:"SEQUENCE_CLEANUP",UDRA_MEETING_MINUTES:"UDRA_MEETING_MINUTES",UDRA_EMAIL_RQ_RESPONSE:"UDRA_EMAIL_RQ_RESPONSE",UDRA_PROCESSING_CLARIF_RESPONSE:"UDRA_PROCESSING_CLARIF_RESPONSE",GEN_VOL_NOF:"GEN_VOL_NOF",IMMEDIATE_NOTIFICATION:"IMMEDIATE_NOTIFICATION",RQ_REVIEW_REPORT:"RQ_REVIEW_REPORT"};const allActivitiesEn={ADMINISTRATIVE:"Administrative",BENEFIT_RISK_ASSESS:"Benefit Risk Assessment",CANCEL_LETTER:"Cancellation Letter",CHANGE_TO_DIN:"Change to DIN",CLARIF_RESPONSE:"Response to Clarification Request",COMMENTS_NOC:"Comments on Notice of Decision",COMMENTS_SUMMARY_BASIS:"Comments on Summary Basis of Decision (SBD)",COMMENTS_REGULARTORY_DECISION:"Comments on Regulatory Decision Summary",DIN_DISCONTINUED:"Discontinuation of Sale Notification",DRUG_NOTIF_FORM:"Drug Notification Form (Market Notification)",FOR_PERIOD:"For Period of",FOR_NOC:"For NOC/c products",FINAL_RISK_COM:"Final Risk Communication Document",IMMEDIATE_NOTIFICATION:"Immediate Notification",INITIAL:"INITIAL",MEETING_MINUTES:"Minutes of Meeting",NOTIFICATION_CHANGE:"Notification of Change in Benefit-Risk Profile",NOTIFICATION_INTERRUPT_SALE:"Notification for Interruption of Sale (DIN Dormant)",PANDEMIC_APPL:"Pandemic Application",POST_CLEARANCE_DATA:"Post Clearance Data",POST_MARKET_SURV:"Post Market Surveillance",POST_NOC_CHANGE:"Post NOC Change",POST_AUTH_DIV1_CHANGE:"Post-Authorization Division 1 Change",PRESUB_MEETING_PKG:"Submission Meeting Package",PRESUB_MEETING_RQ:"Submission Meeting Request",PRIORITY_REVIEW_RQ:"Priority Review Request",PRODUCT_LABELLING_POST_APPROVAL:"Product Labelling - Post Approval",CLIN_CLARIF_RESPONSE:"Response to Clinical Clarification Request",EMAIL_RQ_RESPONSE:"Response to E-mail Request",HSC_RQ_RESPONSE:"Response to Human Safety Clarification Request",QHSC_RQ_RESPONSE:"Response to Quality & Human Safety Clarification Request",CHSC_RQ_RESPONSE:"Response to Clinical & Human Safety Clarification Request",QCHSC_RQ_RESPONSE:"Response to Quality, Clinical and Human Safety Clarification Request",LABEL_CLARIF_RESPONSE:"Response to Labelling Clarification Request",MHPD_RQ_RESPONSE:"Response to MHPD Letter",NOC_RESPONSE:"Response to NOC/c-QN",NOD_RESPONSE:"Response to NOD",NOL_RESPONSE:"Response to NOL",NON_RESPONSE:"Response to NON",PROCESSING_CLARIF_RESPONSE:"Response to Processing Clarification Request",QUAL_CLIN_CLARIF_RESPONSE:"Response to Quality & Clinical Clarification Request",QUAL_CLARIF_RESPONSE:"Response to Quality Clarification Request",RECON_DECIS_LTR_INTENT:"Reconsideration of Decision - Letter of Intent",RECON_DECIS_RQ_RECON:"Reconsideration of Decision - Request for Reconsideration",RECON_DECIS_OTHER_INFO:"Reconsideration of Decision - Other Information",SCREENING_ACCEPT_RESPONSE:"Response to Screening Acceptance Letter",SCREENING_CLARIF_RESPONSE:"Response to Screening Clarification Request",SDN_RESPONSE:"Response to SDN",LABEL_PREAPPROVAL_2LANG:"Second Language Label - Pre-Approval",PHONE_RQ_RESPONSE:"Response to Telephone Request",RISK_COMMUN_DOC:"Risk Communication Document",RMP_VERSION_DATE:"Risk Management Plan (RMP)",UNSOLICITED_DATA:"Unsolicited Information",YEAR_LIST_OF_CHANGE:"Year(s) of change, list of change number(s) ",BE_CLARIF_RESPONSE:"Response to BE Clarification Request",CORR_PATENT_MED:"Correspondence - Patented Medicines",ALLEGATION_NOTICE:"Notice of Allegation",FORM_IV:"Form IV",FORM_V:"Form V",CONSENT_LTR:"Consent Letter",DATA_PROTECT_CORRESP:"Correspondence - Data Protection",NONCLIN_CLARIF_RESPONSE:"Response to Non-clinical Clarification Request ",ADV_COMP_REQ:"Advertising Complaint Request for Information",CSOtRMP:"Canadian Specific Opioid RMP",DISSEM_LIST:"Dissemination List",FOREIGN_SAFETY_NOTIFICATION:"Foreign Safety Action Notification",ISSUE_SAFETY_REQUEST:"Issue Related Summary Report Request",PATIENT_SAFETY_INFO:"Patient Safety Information (Medication error)",PUB_RELEASE_INFO:"Public Release of Clinical Information",RESSESS_ORDER:"Reassessment Order",WRITTEN_CONSULT_REQ:"Request for Written Consultation",TEST_STUDIES_ORDER:"Test and Studies Order",TERM_COND_COMM:"Terms and Conditions Commitment",YEAR:"Year",CTN_ADMINISTRATIVE:"CTN-Administrative Change to",CTN_APPENDIX:"CTN-Appendix",CTN_CONTACT:"CTN-Contact Change",CTN_DATA:"CTN-Data Safety Monitoring Committee",CTN_DEAR:"CTN-Dear Investigator/Doctor Letter",CTN_DILUENT:"CTN-Diluent Change",CTN_DRUG_PROD:"CTN-Drug Product Change",CTN_DRUG_SUBS:"CTN-Drug Substance change",CTN_ENROLLMENT:"CTN-Enrollment Suspension",CTN_ETHICS:"CTN-Ethics Board Communications",CTN_INFORMED:"CTN-Informed Consent Form Update",CTN_INVESTIGATOR:"CTN-Investigator’s Brochure Update",CTN_NEW_MANUFACTURING:"CTN-New Manufacturing Site for",CTN_NEW_PKG:"CTN-New Packaging/Labelling Site",CTN_NEW_QC:"CTN-New QC Testing Site",CTN_PACKAGING_LABELLING:"CTN-Packaging/Labelling Name Change",CTN_PROTOCOL_INFO_UPDATE:"CTN-Protocol and Informed Consent Form Update",CTN_PROTOCOL_UPDATE:"CTN-Protocol Update/Change",CTN_QOS:"CTN-QOS Update",CTN_REFUSALS:"CTN-Refusals by Foreign Regulatory Authorities/REBs",CTN_REGULATORY:"CTN-Regulatory Hold",CTN_RESPONSE:"CTN-Response to Information Request",CTN_SAFETY:"CTN-Safety Update",CTN_SHELF_PD:"CTN-Shelf Life Extension for DP",CTN_SHELF_DS:"CTN-Shelf Life Extension for DS",CTN_SITE:"CTN-Site Closure",CTN_SOURCE:"CTN-Source Change of",CTN_STRAIN:"CTN-Strain Change",CTN_STUDY_COMPLETION:"CTN-Study Completion",CTN_STUDY_DISC:"CTN-Study Discontinuation due to",CTN_STUDY_EXT:"CTN-Study Recruitment Timeline Extension",CTN_STUDY_SUS:"CTN-Study Suspension",CTN_TRANS_OWN:"CTN-Transfer of Ownership",CLINICAL:"CLINICAL",CLINICAL_QUALITY:"CLINICAL & QUALITY",QUALITY:"QUALITY",INITIAL_TEAT_SOLU_MONO:"INITIAL - Teat Solutions Monograph",REQ_ACCEPTED:"Request Accepted",CTN_FORM_BROC_UPDATES:"CTN-Informed Consent Form and Investigator’s Brochure Updates",CTN_IMPD_UPDATE:"CTN-IMPD Update",CTN_NEW_SUMM_ADF:"CTN-New Summary of Additional Drugs Form","COVIR-19":"COVID-19 Interim Order Application","COVIR-19AMD":"COVID-19 Interim Order Ap - Amendment",POST_ANTH_CHANGE:"Post Authorization Change",ROLLING_INFO:"Rolling Information",WITHDRAWAL_NOF_FORM:"Withdrawal of Drug Notification Form",PROTOCOL_REVIEW:"Protocol Review",BLOOD_EST:"Blood Establishment",ADVISEMENT_LETTER_RESPONSE:"Response to Advisement Letter to update the Product Monograph",NOF_DRUG_SHORT:"Notification on Drug Shortage",QUALITY_ISSU:"Quality issue raised by company and/or other regulator",GMP_COMP_ISSU:"GMP compliance issue raised by other regulators",RECLASS_LOT_RELEASE:"Reclassification request under BRDD Lot Release Program",NOC_COMPLIANCE:"Notice of Compliance with Conditions (NOC/c) – commitment",UDRA_CANCEL_LETTER:"Cancellation Letter for UDRA",SEQUENCE_CLEANUP:"eCTD Dossier Clean-up",UDRA_MEETING_MINUTES:"Minutes of Meeting for UDRA",UDRA_EMAIL_RQ_RESPONSE:"Response to E-mail Request for UDRA",UDRA_PROCESSING_CLARIF_RESPONSE:"Response to Processing Clarification Request for UDRA",GEN_VOL_NOF:"General / Voluntary Notification",RQ_REVIEW_REPORT:"Request for Review Report(s)"},allActivitiesFr={ADMINISTRATIVE:"Administratif",BENEFIT_RISK_ASSESS:"Évaluation des risques et des avantages",CANCEL_LETTER:"Lettre d’annulation",CHANGE_TO_DIN:"Modification du code d’IND (DIN)",CLARIF_RESPONSE:"Réponse à la demande de clarification",COMMENTS_NOC:"Commentaires sur l’avis de décision",COMMENTS_SUMMARY_BASIS:"Commentaires sur le sommaire des motifs de décision (SMD)",COMMENTS_REGULARTORY_DECISION:"Commentaires sur le sommaire de décision réglementaire",DIN_DISCONTINUED:"Avis de cessation de vente",DRUG_NOTIF_FORM:"Formulaire de notification de drogue (de mise en marché)",FOR_PERIOD:"Pour une période de",FOR_NOC:"For our les produits AC-C",FINAL_RISK_COM:"Document final de communication sur les risques",IMMEDIATE_NOTIFICATION:"Notification Immédiate",INITIAL:"INITIAL",MEETING_MINUTES:"Procès-verbal de la réunion",NOTIFICATION_CHANGE:"Avis de changement du profil des risques et avantages",NOTIFICATION_INTERRUPT_SALE:"Avis de douze mois sans vente (État de DIN dormant)",PANDEMIC_APPL:"Application en cas de pandémie",POST_CLEARANCE_DATA:"Données consécutives à l’habilitation de sécurité",POST_MARKET_SURV:"Surveillance après la mise en marché",POST_NOC_CHANGE:"Modification de l’avis de conformité",POST_AUTH_DIV1_CHANGE:"Modification en vertu de la Section 1 après l’autorisation",PRESUB_MEETING_PKG:"Trousse de la réunion préalable à la présentation",PRESUB_MEETING_RQ:"Demande de réunion préalable à la présentation",PRIORITY_REVIEW_RQ:"Demande d’examen prioritaire",PRODUCT_LABELLING_POST_APPROVAL:"Étiquetage des produits – après l’autorisation",CLIN_CLARIF_RESPONSE:"Réponse à la demande de clarification clinique",EMAIL_RQ_RESPONSE:"Réponse à une demande par courriel",HSC_RQ_RESPONSE:"Réponse à la demande de clarification en ce qui concerne la sécurité pour les humains",QHSC_RQ_RESPONSE:"Réponse à la demande de clarification concernant la qualité et la sécurité pour les humains",CHSC_RQ_RESPONSE:"Réponse à la demande de clarification concernant les aspects cliniques et la sécurité pour les humains",QCHSC_RQ_RESPONSE:"Réponse à la demande de clarification concernant la qualité, les aspects cliniques et la sécurité pour les humains",LABEL_CLARIF_RESPONSE:"Réponse à la demande de clarification de l’étiquetage",MHPD_RQ_RESPONSE:"Réponse à une lettre de la DPSC",NOC_RESPONSE:"Réponse à l’avis de conformité/ avec conditions - avis d’admissibilité",NOD_RESPONSE:"Réponse à l’avis d’insuffisance",NON_RESPONSE:"Réponse à l’avis de non-conformité",NOL_RESPONSE:"Réponse à la lettre de non-objection",PROCESSING_CLARIF_RESPONSE:"Réponse à la demande de clarification sur le traitement",QUAL_CLIN_CLARIF_RESPONSE:"Réponse à la demande de clarification sur la qualité et les aspects cliniques",QUAL_CLARIF_RESPONSE:"Réponse à la demande de clarification sur la qualité",RECON_DECIS_LTR_INTENT:"Réexamen de la décision - Lettre d’intention",RECON_DECIS_RQ_RECON:"Réexamen de la décision - Demande de réexamen",RECON_DECIS_OTHER_INFO:"Réexamen de la décision - Autres renseignements",SCREENING_ACCEPT_RESPONSE:"Réponse à la lettre d’acceptation à l’examen préliminaire",SCREENING_CLARIF_RESPONSE:"Réponse à une demande de clarification au cours de l’examen préliminaire",SDN_RESPONSE:"Réponse à un avis d’insuffisance à l’examen préliminaire",LABEL_PREAPPROVAL_2LANG:"Étiquette en langue seconde - préapprobation",PHONE_RQ_RESPONSE:"Réponse à une demande téléphonique",RISK_COMMUN_DOC:"Document de communication sur les risques",RMP_VERSION_DATE:"Plan de gestion des risques",UNSOLICITED_DATA:"Renseignements non sollicités",YEAR_LIST_OF_CHANGE:"Year(s) of change, list of change number(s) ",BE_CLARIF_RESPONSE:"Réponse à la demande d’étude de bioéquivalence",CORR_PATENT_MED:"Correspondance - Médicaments brevetés",ALLEGATION_NOTICE:"Avis d’allégation",FORM_IV:"Formulaire IV",FORM_V:"Formulaire V",CONSENT_LTR:"Lettre de consentement",DATA_PROTECT_CORRESP:"Correspondance - Protection des données",NONCLIN_CLARIF_RESPONSE:"Réponse à la demande de clarification non clinique",ADV_COMP_REQ:"Demande de renseignements concernant une plainte en matière de publicité",CSOtRMP:"PGR concernant les produits contenant des opioïdes vendus au Canada",DISSEM_LIST:"Liste de distribution",FOREIGN_SAFETY_NOTIFICATION:"Communications étrangères relatives aux risques",ISSUE_SAFETY_REQUEST:"Demande d'un rapport de synthèse relatif à un sujet de préoccupation",PATIENT_SAFETY_INFO:"Renseignements sur la sécurité des patients (erreur de médication)",PUB_RELEASE_INFO:"Diffusion publique de renseignements cliniques",RESSESS_ORDER:"Ordonnance de réévaluation",WRITTEN_CONSULT_REQ:"Demande de consultation écrite",TEST_STUDIES_ORDER:"Ordonnance concernant des essais et des études",TERM_COND_COMM:"Règles de participation prévues dans les conditions générales",YEAR:"Année",CTN_ADMINISTRATIVE:"CTN-Administrative Change to",CTN_APPENDIX:"CTN-Appendix",CTN_CONTACT:"CTN-Contact Change",CTN_DATA:"CTN-Data Safety Monitoring Committee",CTN_DEAR:"CTN-Dear Investigator/Doctor Letter",CTN_DILUENT:"CTN-Diluent Change",CTN_DRUG_PROD:"CTN-Drug Product Change",CTN_DRUG_SUBS:"CTN-Drug Substance change",CTN_ENROLLMENT:"CTN-Enrollment Suspension",CTN_ETHICS:"CTN-Ethics Board Communications",CTN_INFORMED:"CTN-Informed Consent Form Update",CTN_INVESTIGATOR:"CTN-Investigator’s Brochure Update",CTN_NEW_MANUFACTURING:"CTN-New Manufacturing Site for",CTN_NEW_PKG:"CTN-New Packaging/Labelling Site",CTN_NEW_QC:"CTN-New QC Testing Site",CTN_PACKAGING_LABELLING:"CTN-Packaging/Labelling Name Change",CTN_PROTOCOL_INFO_UPDATE:"CTN-Protocol and Informed Consent Form Update",CTN_PROTOCOL_UPDATE:"CTN-Protocol Update/Change",CTN_QOS:"CTN-QOS Update",CTN_REFUSALS:"CTN-Refusals by Foreign Regulatory Authorities/REBs",CTN_REGULATORY:"CTN-Regulatory Hold",CTN_RESPONSE:"CTN-Response to Information Request",CTN_SAFETY:"CTN-Safety Update",CTN_SHELF_PD:"CTN-Shelf Life Extension for DP",CTN_SHELF_DS:"CTN-Shelf Life Extension for DS",CTN_SITE:"CTN-Site Closure",CTN_SOURCE:"CTN-Source Change of",CTN_STRAIN:"CTN-Strain Change",CTN_STUDY_COMPLETION:"CTN-Study Completion",CTN_STUDY_DISC:"CTN-Study Discontinuation due to",CTN_STUDY_EXT:"CTN-Study Recruitment Timeline Extension",CTN_STUDY_SUS:"CTN-Study Suspension",CTN_TRANS_OWN:"CTN-Transfer of Ownership",CLINICAL:"CLINICAL",CLINICAL_QUALITY:"CLINICAL & QUALITY",QUALITY:"QUALITY",INITIAL_TEAT_SOLU_MONO:"INITIAL - Monographie de solutions antiseptiques pour les trayons",REQ_ACCEPTED:"Demande acceptée",CTN_FORM_BROC_UPDATES:"CTN-Informed Consent Form and Investigator’s Brochure Updates",CTN_IMPD_UPDATE:"CTN-IMPD Update",CTN_NEW_SUMM_ADF:"CTN-New Summary of Additional Drugs Form","COVIR-19":"Demande d'ordonnance provisoire COVID-19","COVIR-19AMD":"Demande d'ordonnance provisoire COVID-19 - Modification",POST_ANTH_CHANGE_DESCR:"Première transaction d'une nouvelle activité réglementaire.",ROLLING_INFO:"Information continue",WITHDRAWAL_NOF_FORM:"Retrait du formulaire de déclaration de médicament",PROTOCOL_REVIEW:"Examens de protocole",BLOOD_EST:"Établissement de sang",ADVISEMENT_LETTER_RESPONSE:"Réponse à la lettre de mise en garde de mettre à jour la monographie de produit",NOF_DRUG_SHORT:"Avis de pénurie de médicaments",QUALITY_ISSU:"Problème de qualité soulevé par la compagnie et/ou un autre organisme de réglementation",GMP_COMP_ISSU:"Problèmes de conformité aux BPF relevés par d’autres organismes de réglementation",RECLASS_LOT_RELEASE:"Demande de reclassification dans le cadre du Programme d’autorisation de mise en circulation des lots de la DPBTG",NOC_COMPLIANCE:"Avis de conformité avec conditions (AC-C) - engagement",
UDRA_CANCEL_LETTER:"Lettre d'annulation pour l'ARND",SEQUENCE_CLEANUP:"Nettoyage du dossier eCTD",UDRA_MEETING_MINUTES:"Procès-verbal de la réunion pour l'ARND",UDRA_EMAIL_RQ_RESPONSE:"Réponse à une demande par courrier électronique pour l'ARND",UDRA_PROCESSING_CLARIF_RESPONSE:"Réponse à la demande de clarification du traitement pour l'ARND",GEN_VOL_NOF:"Notification générale / volontaire",RQ_REVIEW_REPORT:"Demande de rapport(s) d'examen"};var service={getEnv:_getEnvString,setEnv:_setEnvString,getVer:_getVerString,setVer:_setVerString,getTransactionDescriptions:getTransactionDescriptionsArray,getActivityTypes:getActivityArray,createRaTypes:_createRaArray,getPharmaceuticalValue:_getPharmaceutical,getBiologicValue:_getBiologic,getVeterinaryValue:_getVeterinary,getClinicalValue:_getClinical,getBiologicalLeadValue:_getBiologicalLead,getPharmaLeadValue:_getPharmaLead,getPostMarketLeadValue:_getPostMarketLead,getConsumHealthLeadValue:_getConsumHealthLead,getVeterinaryLeadValue:_getVeterinaryLead,getClinicalBioLeadValue:_getClinicalBioLead,getClinicalPhaLeadValue:_getClinicalPhaLead,getPresubTypes:getPresubArray,getAndsType:getANDSArray,getV_AndsType:getV_AndsArray,getCtaType:getCtaArray,getCta_aType:getCta_aArray,getPreCtaType:getPreCtaArray,getDinaType:getDINAArray,getV_DinvType:getV_DINVArray,getDinbType:getDINBArray,getDindType:getDINDArray,getDinfType:getDINFArray,getDSurType:getDSurArray,getEundsType:getEUNDSArray,getEusndsType:getEUSNDSArray,getLevel3Type:getLevel3Array,getV_Level3Type:getV_Level3Array,getMPDINType:getMPDINArray,getV_MpdinType:getV_MpdinArray,getNcType:getNcArray,getV_NcType:getV_NcArray,getB_NcType:getB_NcArray,getNdsType:getNDSArray,getV_NdsType:getV_NdsArray,getPdcType:getPDCArray,getPdcBType:getPDCBArray,getPresubType:getPresubArray,getpSurCType:getPSURCArray,getpSurPvType:getPSURPVArray,getV_PsurPvType:getV_PsurPvArray,getRmpPvType:getRMPPVArray,getSandsType:getSANDSArray,getV_SandsType:getV_SandsArray,getSndsType:getSNDSArray,getV_SndsType:getV_SndsArray,getSndsCType:getSNDSCArray,getUdpvType:getUDPVArray,getUdraType:getUDRAArray,getV_UdraType:getV_UdraArray,getYbprType:getYBPRArray,getConsultType:getConsultArray,getMPNCType:_getMPNCArray,getV_MpncType:getV_MpncArray,getMPNDSType:_getMPNDSArray,getMPCOVType:_getMPCOVArray,getV_MpndsType:getV_MpndsArray,getV_MpandsType:getV_MpandsArray,getV_MpsandsType:getV_MpsandsArray,getV_RccType:getV_RccArray,getMPSNDSType:_getMPSNDSArray,getV_MpsndsType:getV_MpsndsArray,getPANDType:_getPANDArray,getPBRERCType:_getPBRERCArray,getPBRERPVType:_getPBRERPVArray,getPRNDSType:_getPRNDSArray,getPRSNDSType:_getPRSNDSArray,getIRSRPVType:_getIRSRPVArray,getPAPVType:_getPAPVArray,getPSAPVType:_getPSAPVArray,getRCPVType:_getRCPVArray,getREGPVType:_getREGPVArray,getSANDSCType:_getSANDSCArray,getPostDINType:_getPostDINArray,getEUANDSType:_getEUANDSArray,getEUSANDSType:_getEUSANDSArray,getNDSCVType:_getNDSCVArray,getYesNoList:yesNoArray,getFeeList:_getfeeTypeArray,createFeeTypes:_createFeeArray,getMitigationList:_getMitigationTypeArray,createMitigationList:_createMitigationArray,getActivityLeadList:_getActivityLeadArray,getActivityLeadListByD22:_getActivityLeadD22Array,getActivityLeadListByD21:_getActivityLeadD21Array,getActivityLeadListByD24:_getActivityLeadD24Array,getActivityLeadListByD26:_getActivityLeadD26Array,getShelfLifeUnitsList:_getShelfLifeUnitsArray,getCOVIR19Type:_getCoVir19Array,getV_COV19Type:_getV_CoV19Array,getCOVID19AMDType:_getCoVir19AmdArray,getV_COV19AMDType:_getV_CoV19AmdArray,getVNDSCVType:_getV_NDSCVArray,getVPROREType:_getV_PROREArray,getBEType:_getBEArray,getNFAType:_getNFAArray,getTxDescEn:_getTxDescEn,getTxDescFr:_getTxDescFr};return service}angular.module("services").factory("TransactionLists",getTransactionSeq),getTransactionSeq.inject=["$http","$q"]}(),function(){"use strict";angular.module("transactionLoadService",["dataLists","hpfbConstants","services"])}(),function(){"use strict";angular.module("transactionLoadService").factory("customLoad",["$http","$q","$filter","getCountryAndProvinces","CANADA","USA","OTHER","RELATIVE_FOLDER_DATA","getContactLists","TransactionLists",function($http,$q,$filter,getCountryAndProvinces,CANADA,USA,OTHER,RELATIVE_FOLDER_DATA,getContactLists,TransactionLists){function _createTranslateList(jsonList,lang){lang||(lang="en");for(var resultList={},i=0;i<jsonList.length;i++)resultList[jsonList[i].id]=jsonList[i][lang];return resultList}function _createSortedArrayNAFirst(jsonList,lang){var result=[],canadaRecord=null,usaRecord=null;return angular.forEach($filter("orderByLocale")(jsonList,lang),function(sortedObject){sortedObject.id===USA?usaRecord=sortedObject:sortedObject.id===CANADA?canadaRecord=sortedObject:result.push(sortedObject)}),usaRecord&&result.unshift(usaRecord),canadaRecord&&result.unshift(canadaRecord),result}function _createSortedArray(jsonList,lang){var result=[];return angular.forEach($filter("orderByLocale")(jsonList,lang),function(sortedObject){result.push(sortedObject)}),result}function _createSortedArrayRAType(jsonList,lang){var result=[],placeLast=[];return angular.forEach($filter("orderByLocale")(jsonList,lang),function(sortedObject){"B02-20160301-088"===sortedObject.id?placeLast.push(sortedObject):result.push(sortedObject)}),result=result.concat(placeLast)}return function(options){var deferred=$q.defer(),versionsUrl=RELATIVE_FOLDER_DATA+"versions.json",envUrl=RELATIVE_FOLDER_DATA+"env.json",countryUrl=RELATIVE_FOLDER_DATA+"countries.json",raTypeUrl=RELATIVE_FOLDER_DATA+"raType.json",feeUrl=RELATIVE_FOLDER_DATA+"feeClass.json",mitigationUrl=RELATIVE_FOLDER_DATA+"mitigationType.json",resultTranslateList={};return $http.get(versionsUrl).then(function(response){TransactionLists.setVer(response.data)}),$http.get(envUrl).then(function(response){TransactionLists.setEnv(response.data)}),$http.get(countryUrl).then(function(response){var newList=_createSortedArrayNAFirst(response.data,options.key),translateList=_createTranslateList(newList,options.key);getCountryAndProvinces.createCountryList(newList),angular.extend(resultTranslateList,translateList)}),$http.get(raTypeUrl).then(function(response){var newList=_createSortedArrayRAType(response.data,options.key),translateList=_createTranslateList(newList,options.key);TransactionLists.createRaTypes(newList),angular.extend(resultTranslateList,translateList)}),$http.get(feeUrl).then(function(response){var newList=_createSortedArray(response.data,options.key),translateList=_createTranslateList(newList,options.key);TransactionLists.createFeeTypes(newList),angular.extend(resultTranslateList,translateList)}),$http.get(mitigationUrl).then(function(response){var newList=_createSortedArray(response.data,options.key),translateList=_createTranslateList(newList,options.key);TransactionLists.createMitigationList(newList),angular.extend(resultTranslateList,translateList)})["catch"](function(error){console.warn("An error occurred with transaction List Load: "+error.status),deferred.reject(resultTranslateList)})["finally"](function(){deferred.resolve(resultTranslateList)}),deferred.promise}}])}(),function(){"use strict";angular.module("transactionService",["dataLists","services","commonUtilsServiceModule","hpfbConstants"])}(),function(){"use strict";function TransactionService($filter,$translate,getCountryAndProvinces,getContactLists,dataListLoader,utils,TransactionLists,YES,NO,HCSC,ENGLISH,FRENCH,XSL_PREFIX,PROD){function TransactionService(){var defaultTransactionData=_getEmptyTransactionModel(currentSoftwareVersion);angular.extend(this._default,defaultTransactionData),this.rootTag="TRANSACTION_ENROL",this.currSequence=0,this.xslFileName=xslName,this.helpTextSequences=isForProd?{loadFileInx:0,dossierTypeInx:0,compIdInx:0,dossiIdInx:0,prodNameInx:0,prRevInx:0,nocRevInx:0,adminSubInx:0,ctrlNumInx:0,actLeadInx:0,yearChgInx:0,descChgInx:0,reqSoliInx:0,areFeesInx:0,feesInx:0,contactInx:0,routingIdInx:0,genXmlInx:0}:{loadFileInx:0,dossierTypeInx:0,compIdInx:0,dossiIdInx:0,prodNameInx:0,protoNumInx:0,adminSubInx:0,ctrlNumInx:0,actLeadInx:0,yearChgInx:0,descChgInx:0,reqSoliInx:0,fromInx:0,areFeesInx:0,feesInx:0,contactInx:0,routingIdInx:0,genXmlInx:0};for(var keys=Object.keys(this.helpTextSequences),i=0;i<keys.length;i++)this.helpTextSequences[keys[i]]=i+1}this.baseRequesters=[],this.userList=[],this.isFinal=!1,this.$onInit=function(){loadUserListData()};var isForProd=PROD===TransactionLists.getEnv(),versions=TransactionLists.getVer(),xslName="REP_RT_"+versions.RT.major+"_"+versions.RT.minor+".xsl",currentSoftwareVersion=versions.RT.major+"."+versions.RT.minor+"."+versions.RT.patch;return TransactionService.prototype={_default:{},isFinal:!1,getRootTag:function(){return"TRANSACTION_ENROL"},getXSLFileName:function(){return this.xslFileName},transformFromFileObj:function(jsonObj){var transactionInfo=this.getTransactionInfo(jsonObj[this.rootTag]);this._default={},this._default=transactionInfo},transformToFileObj:function(jsonObj){var today=_getToday(),subt="";jsonObj.isAdminSub&&jsonObj.subType&&(subt=utils.covertCodeDescriptionFromModelToJson(jsonObj.subType,utils.getCurrentLang()));var resultJson={TRANSACTION_ENROL:{template_type:"PHARMA",date_saved:today,software_version:currentSoftwareVersion,data_checksum:jsonObj.dataChecksum,is_third_party:jsonObj.isThirdParty,is_priority:jsonObj.isPriority,is_noc:jsonObj.isNoc,is_admin_sub:jsonObj.isAdminSub,sub_type:subt}},ectd=this._transformEctdToFile(jsonObj.ectd);return resultJson.TRANSACTION_ENROL.ectd=ectd,resultJson.TRANSACTION_ENROL.is_fees=jsonObj.isFees,jsonObj.isFees!==NO&&(resultJson.TRANSACTION_ENROL.fee_details=this._mapFeeDetailsToOutput(jsonObj.feeDetails,YES,NO,$filter)),resultJson.TRANSACTION_ENROL.is_activity_changes=jsonObj.isActivityChanges,resultJson.TRANSACTION_ENROL.company_name=jsonObj.companyName,resultJson.TRANSACTION_ENROL.regulatory_activity_address=_mapAddressToOutput($translate,jsonObj.activityAddress),resultJson.TRANSACTION_ENROL.regulatory_activity_contact=_mapContactToOutput($translate,jsonObj.activityContact),resultJson.TRANSACTION_ENROL.confirm_regulatory_contact=jsonObj.confirmContactValid===!0?"Y":"N",resultJson},_transformEctdToFile:function(jsonObj){var ectd={};ectd.company_id=jsonObj.companyId,ectd.dossier_id=jsonObj.dossierId;var currentLang=$translate.proposedLanguage()||$translate.use(),dt_text=$translate.instant(jsonObj.dossierType,"","",currentLang);return ectd.dossier_type={_id:jsonObj.dossierType,__text:dt_text},ectd.product_name=jsonObj.productName,ectd.product_protocol=jsonObj.productProtocol,"D24"==jsonObj.dossierType&&(jsonObj.lifecycleRecord.activityLead="B14-20160301-11"),ectd.lifecycle_record=this._mapLifecycleListToOutput(jsonObj.lifecycleRecord),ectd},_transformEctdFromFile:function(model,jsonObj){model.ectd=_getEmptyEctdSection(),model.ectd.companyId=jsonObj.company_id,model.ectd.dossierId=jsonObj.dossier_id,model.ectd.dossierType=jsonObj.dossier_type._id,model.ectd.productName=jsonObj.product_name,model.ectd.productProtocol=jsonObj.product_protocol,model.ectd.lifecycleRecord=this._mapLifecycleList(jsonObj.lifecycle_record)},getModelInfo:function(){return this._default},getTransactionInfo:function(jsonObj){if(!jsonObj)return this._default;var model=_getEmptyTransactionModel(currentSoftwareVersion);return model.dateSaved=jsonObj.date_saved,model.dataChecksum=jsonObj.data_checksum,model.isThirdParty=jsonObj.is_third_party,model.isPriority=jsonObj.is_priority,model.isNoc=jsonObj.is_noc,model.isAdminSub=jsonObj.is_admin_sub,model.subType=utils.filterByJsonId(this.getAdminSubTypeList(),jsonObj.sub_type),jsonObj.software_version===currentSoftwareVersion?(model.isFees=jsonObj.is_fees,model.feeDetails=null,model.isFees!==NO&&(model.feeDetails=this._mapFeeDetailsFromOutput(jsonObj.fee_details))):(model.isFees=null,model.feeDetails=null),jsonObj.importFileType===HCSC?(this.isFinal=!1,model.confirmContactValid=!1):(this.isFinal=!0,model.confirmContactValid=!0),model.isActivityChanges=jsonObj.is_activity_changes,model.companyName=jsonObj.company_name,model.activityContact=_transformContactFromFileObj(jsonObj.regulatory_activity_contact),model.activityAddress=_transformAddressFromFileObj($translate,$filter,getCountryAndProvinces,jsonObj.regulatory_activity_address),this._transformEctdFromFile(model,jsonObj.ectd),model},getNewTransaction:function(isEctd){var model=_createLifeCycleModel(),sequenceNum=this.getNextSequenceNumber();return isEctd?model.sequence=sequenceNum:model.sequence="",model},getCurrentSequence:function(){return this.currSequence},setSequenceNumber:function(startVal){if(null===startVal)return!1;var converted=parseInt(startVal);if(isNaN(converted))return this.currSequence=0,!1;this.currSequence=converted;var model=this.getModelInfo();if(model.ectd.lifecycleRecord&&model.ectd.lifecycleRecord.length>0)for(var i=model.ectd.lifecycleRecord.length-1;i>=0;i--){var rec=model.ectd.lifecycleRecord[i];rec.sequence=this.getNextSequenceNumber()}return!0},getNextSequenceNumber:function(){for(var seqText=""+this.currSequence,pad=4-seqText.length,padText="",i=0;i<pad;i++)padText+="0";return seqText=padText+seqText,this.currSequence++,seqText},deprecateSequenceNumber:function(){this.currSequence--},_mapLifecycleList:function(jsonObj){return jsonObj?jsonObj instanceof Array?_transformLifecycleRecFromFileObj(jsonObj[0],$filter,TransactionLists):_transformLifecycleRecFromFileObj(jsonObj,$filter,TransactionLists):{}},_setNextSequenceOnLoad:function(sequence){this.currSequence<0&&(this.currSequence=0),isNaN(sequence)||sequence>=this.currSequence&&(this.currSequence=sequence+1)},_mapLifecycleListToOutput:function(jsonObj){var result=[];if(!jsonObj)return result;jsonObj instanceof Array||(jsonObj=[jsonObj]);for(var i=0;i<jsonObj.length;i++){var record=_mapLifecycleRecToOutput($translate,jsonObj[i],ENGLISH,FRENCH);if(1===jsonObj.length)return record;result.push(record)}return result},resetEctdSection:function(){this._default.hasOwnProperty("ectd")&&(this._default.ectd.companyId="",this._default.ectd.dossierId="",this._default.ectd.dossierType="",this._default.ectd.productName="",this._default.ectd.lifecycleRecord&&this._default.ectd.lifecycleRecord>0&&(this._default.ectd.lifecycleRecord=[this._default.ectd.lifecycleRecord[0]]))},createFeeDetails:function(){return _createFeeDetails()},getDefaultLifecycleRecord:function(){return _createLifeCycleModel()}},TransactionService.prototype._mapFeeDetailsToOutput=function(feeObj){var result=_createEmptyFeeDetailsForOutput(NO);if(angular.isUndefined(feeObj)||!feeObj)return null;if(result.submission_class="",feeObj.submissionClass&&feeObj.submissionClass.id){var currentLang=$translate.proposedLanguage()||$translate.use();result.submission_class=_getSubmissionClassForOutput(feeObj.submissionClass,currentLang,ENGLISH,FRENCH),result.submission_description=_getSubDescription(feeObj.submissionClass,currentLang,ENGLISH,FRENCH)}if(result.mitigation.mitigation_type="",feeObj.mitigation.mitigationType&&feeObj.mitigation.mitigationType.id){var tempType=angular.fromJson(angular.toJson(feeObj.mitigation.mitigationType));result.mitigation.mitigation_type={_id:tempType.id,_label_en:tempType.en,_label_fr:tempType.fr,__text:currentLang==ENGLISH?tempType.en:tempType.fr}}return result.mitigation.certify_organization=feeObj.mitigation.certifyOrganization===!0?"Y":"N",result.mitigation.small_business_fee_application=feeObj.mitigation.smallBusinessFeeApplication,result.mitigation.certify_goverment_organization=feeObj.mitigation.certifyGovermentOrganization===!0?"Y":"N",result.mitigation.certify_urgent_health_need=feeObj.mitigation.certifyUrgentHealthNeed===!0?"Y":"N",result.mitigation.certify_funded_health_institution=feeObj.mitigation.certifyFundedHealthInstitution===!0?"Y":"N",result.mitigation.certify_isad=feeObj.mitigation.certifyIsad===!0?"Y":"N",result},TransactionService.prototype._mapFeeDetailsFromOutput=function(feeObj){var result=_createFeeDetails();return angular.isUndefined(feeObj)||!feeObj?result:(feeObj.submission_class&&feeObj.submission_class._id&&(result.submissionClass=$filter("findListItemById")(TransactionLists.getFeeList(),{id:feeObj.submission_class._id})),feeObj.mitigation&&(feeObj.mitigation.mitigation_type&&feeObj.mitigation.mitigation_type._id&&(result.mitigation.mitigationType=$filter("findListItemById")(TransactionLists.getMitigationList(),{id:feeObj.mitigation.mitigation_type._id})),result.mitigation.certifyOrganization=feeObj.mitigation.certify_organization===YES,result.mitigation.smallBusinessFeeApplication=feeObj.mitigation.small_business_fee_application,result.mitigation.certifyGovermentOrganization=feeObj.mitigation.certify_goverment_organization===YES,result.mitigation.certifyUrgentHealthNeed=feeObj.mitigation.certify_urgent_health_need===YES,result.mitigation.certifyFundedHealthInstitution=feeObj.mitigation.certify_funded_health_institution===YES,result.mitigation.certifyIsad=feeObj.mitigation.certify_isad===YES),result)},TransactionService.prototype.getAdminSubTypeList=function(){return dataListLoader.getAdminSubType()},TransactionService}function _getSubmissionClassForOutput(subTypeRec,currentLang,ENGLISH,FRENCH){var result={};return result._id=subTypeRec.id,result._label_en=subTypeRec.en,result._label_fr=subTypeRec.fr,currentLang===ENGLISH?result.__text=subTypeRec.en:currentLang===FRENCH&&(result.__text=subTypeRec.fr),result}function _getSubDescription(subDescrRec,currentLang,ENGLISH,FRENCH){var result={};return result._label_en=subDescrRec.description_en,result._label_fr=subDescrRec.description_fr,currentLang===ENGLISH?result.__text=subDescrRec.description_en:currentLang===FRENCH&&(result.__text=subDescrRec.description_fr),result}function _transformLifecycleRecFromFileObj(lifecycleObj,$filter,TransactionLists){var lifecycleRec=_createLifeCycleModel();return lifecycleObj?(lifecycleRec.controlNumber=lifecycleObj.control_number,lifecycleObj.regulatory_activity_lead&&(lifecycleRec.activityLead=lifecycleObj.regulatory_activity_lead._id),lifecycleRec.activityType="",lifecycleObj.regulatory_activity_type&&(lifecycleRec.activityType=$filter("filter")(TransactionLists.getActivityTypes(),{id:lifecycleObj.regulatory_activity_type._id})[0],lifecycleRec.activityTypeDisplay=lifecycleRec.activityType.id),lifecycleObj.sequence_description_value&&(lifecycleRec.descriptionValue=lifecycleObj.sequence_description_value._id),lifecycleRec.startDate=lifecycleObj.sequence_from_date,lifecycleRec.endDate=lifecycleObj.sequence_to_date,lifecycleRec.details=lifecycleObj.sequence_details,lifecycleRec.detailsChange=lifecycleObj.sequence_details_change,lifecycleRec.sequenceVersion=lifecycleObj.sequence_version,lifecycleRec.year=lifecycleObj.sequence_year,lifecycleRec.sequenceConcat=lifecycleObj.transaction_description,lifecycleRec.requesterName=lifecycleObj.requester_name?""==lifecycleObj.requester_name._id?lifecycleObj.requester_name.__text:{id:lifecycleObj.requester_name._id,text:lifecycleObj.requester_name.__text}:"",lifecycleRec.requesterName2=lifecycleObj.requester_name2?""==lifecycleObj.requester_name2._id?lifecycleObj.requester_name2.__text:{id:lifecycleObj.requester_name2._id,text:lifecycleObj.requester_name2.__text}:"",lifecycleRec.requesterName3=lifecycleObj.requester_name3?""==lifecycleObj.requester_name3._id?lifecycleObj.requester_name3.__text:{id:lifecycleObj.requester_name3._id,text:lifecycleObj.requester_name3.__text}:"",lifecycleRec.requesterNameTxt=lifecycleObj.requester_name?lifecycleObj.requester_name.__text:"",lifecycleRec.requesterName2Txt=lifecycleObj.requester_name2?lifecycleObj.requester_name2.__text:"",lifecycleRec.requesterName3Txt=lifecycleObj.requester_name3?lifecycleObj.requester_name3.__text:"",lifecycleRec.isSaved=!0,lifecycleRec.fromValue=lifecycleObj.from_time,lifecycleRec.toValue=lifecycleObj.to_time,lifecycleRec):lifecycleRec}function _mapLifecycleRecToOutput($translate,lifecycleObj,ENGLISH,FRENCH){var lifecycleRec={};lifecycleRec.control_number=lifecycleObj.controlNumber;var currentLang=$translate.proposedLanguage()||$translate.use();if(lifecycleRec.regulatory_activity_lead="",lifecycleObj.activityLead){var ral_text=$translate.instant(lifecycleObj.activityLead,"","",currentLang);lifecycleRec.regulatory_activity_lead={_id:lifecycleObj.activityLead,__text:ral_text}}if(lifecycleRec.regulatory_activity_type="",lifecycleObj.activityType&&(lifecycleRec.regulatory_activity_type={},_setActivityTypeValuesForOutput(lifecycleObj.activityType,lifecycleRec.regulatory_activity_type,currentLang,ENGLISH,FRENCH)),lifecycleRec.sequence_description_value="",lifecycleObj.descriptionValue){var sdv_text=$translate.instant(lifecycleObj.descriptionValue,"","",currentLang);lifecycleRec.sequence_description_value={_id:lifecycleObj.descriptionValue,__text:sdv_text}}lifecycleRec.sequence_from_date=angular.isDate(lifecycleObj.startDate)?lifecycleObj.startDate.toISOString().substr(0,10):lifecycleObj.startDate,lifecycleRec.sequence_to_date=angular.isDate(lifecycleObj.endDate)?lifecycleObj.endDate.toISOString().substr(0,10):lifecycleObj.endDate,lifecycleRec.sequence_details=lifecycleObj.details,lifecycleRec.sequence_details_change=lifecycleObj.detailsChange,lifecycleRec.sequence_version=lifecycleObj.sequenceVersion,lifecycleRec.sequence_year=lifecycleObj.year,lifecycleRec.transaction_description=lifecycleObj.sequenceConcat;var tempRequesterName="";return lifecycleObj.requesterName&&lifecycleObj.requesterName.id?(tempRequesterName=lifecycleObj.requesterName.id,lifecycleRec.requester_name={_id:lifecycleObj.requesterName.id,__text:lifecycleObj.requesterName.text}):(tempRequesterName=lifecycleObj.requesterName,""!=lifecycleObj.requesterName?lifecycleRec.requester_name={_id:"",__text:lifecycleObj.requesterName.text?lifecycleObj.requesterName.text:lifecycleObj.requesterName}:lifecycleRec.requester_name={}),lifecycleObj.requesterName2&&lifecycleObj.requesterName2.id?(tempRequesterName=tempRequesterName+"\r\n"+lifecycleObj.requesterName2.id,lifecycleRec.requester_name2={_id:lifecycleObj.requesterName2.id,__text:lifecycleObj.requesterName2.text}):""!=lifecycleObj.requesterName2?(tempRequesterName=tempRequesterName+"\r\n"+lifecycleObj.requesterName2,lifecycleRec.requester_name2={_id:"",__text:lifecycleObj.requesterName2.text?lifecycleObj.requesterName2.text:lifecycleObj.requesterName2}):lifecycleRec.requester_name2={},lifecycleObj.requesterName3&&lifecycleObj.requesterName3.id?(tempRequesterName=tempRequesterName+"\r\n"+lifecycleObj.requesterName3.id,lifecycleRec.requester_name3={_id:lifecycleObj.requesterName3.id,__text:lifecycleObj.requesterName3.text}):""!=lifecycleObj.requesterName3?(tempRequesterName=tempRequesterName+"\r\n"+lifecycleObj.requesterName3,lifecycleRec.requester_name3={_id:"",__text:lifecycleObj.requesterName3.text?lifecycleObj.requesterName3.text:lifecycleObj.requesterName3}):lifecycleRec.requester_name3={},lifecycleRec.requester_of_solicited_information=tempRequesterName,lifecycleRec.from_time=lifecycleObj.fromValue,lifecycleRec.to_time=lifecycleObj.toValue,lifecycleRec}function _setActivityTypeValuesForOutput(srcActivityTypeRec,destActivityTypeRec,currentLang,ENGLISH,FRENCH){destActivityTypeRec._id=srcActivityTypeRec.id,destActivityTypeRec._label_en=srcActivityTypeRec.en,destActivityTypeRec._label_fr=srcActivityTypeRec.fr,currentLang===ENGLISH?destActivityTypeRec.__text=destActivityTypeRec._label_en:currentLang===FRENCH&&(destActivityTypeRec.__text=destActivityTypeRec._label_fr),destActivityTypeRec._id=srcActivityTypeRec.id}function _getEmptyEctdSection(){var ectd={};return ectd.companyId="",ectd.dossierId="",ectd.dossierType="",ectd.productName="",ectd.lifecycleRecord=[],ectd}function _transformContactFromFileObj(contactObj){var contact={};return contactObj?(contact.givenName=contactObj.given_name,contact.initials=contactObj.initials,contact.surname=contactObj.surname,contact.title=contactObj.job_title,contact.language=contactObj.language_correspondance._id,contact.phone=contactObj.phone_num,contact.phoneExt=contactObj.phone_ext,contact.fax=contactObj.fax_num,contact.email=contactObj.email,contact.routingId=contactObj.RoutingID,contact):(console.error("There is no contact object"),contact)}function _mapContactToOutput($translate,contactObj){var contact={},currentLang=$translate.proposedLanguage()||$translate.use();return contact.given_name=contactObj.givenName,contact.initials=contactObj.initials,contact.surname=contactObj.surname,contact.job_title=contactObj.title,contact.language_correspondance={_id:contactObj.language,__text:$translate.instant(contactObj.language,"","",currentLang)},contact.phone_num=contactObj.phone,contact.phone_ext=contactObj.phoneExt,contact.fax_num=contactObj.fax,contact.email=contactObj.email,contact.RoutingID=contactObj.routingId,contact}function _mapAddressToOutput($translate,addressObj){var address={};address.street_address=addressObj.street,address.city=addressObj.city;var currentLang=$translate.proposedLanguage()||$translate.use();return addressObj.stateList?"MOS"===addressObj.stateList?address.province_lov={_id:"MO",__text:"Missouri"}:address.province_lov={_id:addressObj.stateList,__text:$translate.instant(addressObj.stateList,"","",currentLang)}:address.province_lov="",address.province_text=addressObj.stateText,address.country="",addressObj.country&&(address.country={_id:addressObj.country.id,_label_en:addressObj.country.en,_label_fr:addressObj.country.fr,__text:$translate.instant(addressObj.country.id,"","",currentLang)}),address.postal_code=addressObj.postalCode,address}function _transformAddressFromFileObj($translate,$filter,getCountryAndProvinces,addressObj){var address={};address.street=addressObj.street_address,address.city=addressObj.city,addressObj.province_lov?addressObj.province_lov._id?"MO"===addressObj.province_lov._id?address.stateList="MOS":address.stateList=addressObj.province_lov._id:address.stateList=addressObj.province_lov:address.stateList="",address.stateText=addressObj.province_text,address.country="";var currentLang=$translate.proposedLanguage()||$translate.use();return addressObj.country._id?(address.country=$filter("filter")(getCountryAndProvinces.getCountries(),{id:addressObj.country._id})[0],address.countryHtml=$translate.instant(address.country.id,"","",currentLang),address.countryDisplay=address.country.id):addressObj.country&&(address.country=$filter("filter")(getCountryAndProvinces.getCountries(),{id:addressObj.country.__text})[0],address.countryHtml=$translate.instant(address.country.id,"","",currentLang),address.countryDisplay=address.country.id),address.postalCode=addressObj.postal_code,address}function _createLifeCycleModel(){var defaultRecord={controlNumber:"",activityLead:"",activityType:"",activityTypeDisplay:"",descriptionValue:"",startDate:"",endDate:"",details:"",detailsChange:"",sequenceVersion:"",sequenceConcat:"",year:"",requesterName:"",requesterName2:"",requesterName3:"",requesterNameTxt:"",requesterName2Txt:"",requesterName3Txt:"",isSaved:!0,fromValue:"",toValue:""};return defaultRecord}function _createAddressModel(){return{street:"",city:"",stateList:"",stateText:"",country:"",countryDisplay:"",postalCode:""}}function _createContactModel(){var contact={};return contact.givenName="",contact.initials="",contact.surname="",contact.jobTitle="",contact.language="",contact.phoneNum="",contact.phoneExt="",contact.fax="",contact.email="",contact.routingId="",contact}function _getToday(){function pad(n){return n<10?"0"+n:n}var d=new Date,isoDate=d.getFullYear()+"-"+pad(d.getMonth()+1)+"-"+pad(d.getDate());return isoDate}function _getEmptyTransactionModel(_formVersion){var defaultTransactionData={dataChecksum:"",dateSaved:"",softwareVersion:_formVersion,isThirdParty:"",isPriority:"",isNoc:"",isAdminSub:"",subType:"",ectd:{companyId:"",dossierId:"",dossierType:"",productName:"",productProtocol:"",lifecycleRecord:_createLifeCycleModel()},isFees:"",resetBtnClicked:!1,feeDetails:_createFeeDetails(),isActivityChanges:"Y",companyName:"",activityAddress:_createAddressModel(),confirmContactValid:!1,activityContact:_createContactModel()};return defaultTransactionData}function _createFeeDetails(){var feeObj={submissionClass:null,mitigation:{mitigationType:"",certifyOrganization:!1,smallBusinessFeeApplication:"",firstSubmission:null,certifyGovermentOrganization:!1,certifyUrgentHealthNeed:!1,certifyFundedHealthInstitution:!1,certifyIsad:!1}};return feeObj}function _createEmptyFeeDetailsForOutput(NO){var feeObj={submission_class:null,submission_description:null,fee:"",mitigation:{mitigation_type:"",certify_organization:NO,small_business_fee_application:NO,certify_goverment_organization:NO,certify_urgent_health_need:NO,certify_funded_health_institution:NO,certify_isad:NO}};return feeObj}angular.module("transactionService").factory("TransactionService",TransactionService),TransactionService.$inject=["$filter","$translate","getCountryAndProvinces","getContactLists","dataListLoader","utils","TransactionLists","YES","NO","HCSC","ENGLISH","FRENCH","XSL_PREFIX","PROD"]}(),function(){"use strict";angular.module("transactionHelpText",["services","filterLists"])}(),function(){"use strict";function TransactionHelpTextCtrl($translate,$scope,PROD,TransactionLists,getRoleLists){var vm=this;vm.lang=$translate.proposedLanguage()||$translate.use(),vm.isForProd=PROD===TransactionLists.getEnv(),vm.formTypeList=getRoleLists.getFormTypes(vm.isForProd),vm.$onInit=function(){}}angular.module("transactionHelpText").component("cmpTransactionHelpText",{templateUrl:"app/scripts/components/transactionHelpText/tpl-transaction-help-text_20240910_0916.html",controller:TransactionHelpTextCtrl,controllerAs:"help",bindings:{htIndxList:"<"}}),TransactionHelpTextCtrl.$inject=["$translate","$scope","PROD","TransactionLists","getRoleLists"]}(),function(){"use strict";angular.module("transactionFeesModule",["services","hpfbConstants","errorMessageModule"])}(),function(){"use strict";function transactionFeesController($scope,$window,$translate,TransactionLists,YES,NO,ENGLISH,FRENCH,ADVANCE_FEE_PAYMENT_EN,ADVANCE_FEE_PAYMENT_FR){function clearRemitRequiredDocs(){vm.model&&(vm.model.requiredDocs.revStat=!1,vm.model.requiredDocs.estMarketShare=!1,vm.model.requiredDocs.comparison=!1,vm.model.requiredDocs.salesHistory=!1,vm.model.requiredDocs.marketPlan=!1,vm.model.requiredDocs.avgSalePrice=!1,vm.model.requiredDocs.other=!1,vm.model.requiredDocs.otherDetails="")}function _setIdNames(){var scopeId="_"+$scope.$id;vm.submClassId="sub_class"+scopeId,vm.descriptId="fee_description"+scopeId,vm.feeId="fee_amount"+scopeId,vm.remitId="fee_remission"+scopeId,vm.paymentSelectedId="one_payment_method"+scopeId,vm.feeDocSelectedId="one_fee_doc"+scopeId,vm.revenueId="GROSS_REVENUE"+scopeId,vm.percentId="calcPercent"+scopeId,vm.deferralStateId="DEFER_STATEMENT"+scopeId,vm.statement10Id="STATEMENT_REVENUE"+scopeId,vm.otherId="other"+scopeId,vm.otherDetailsId="other_doc_details"+scopeId,vm.paymentFsId="fs_payment_methods"+scopeId,vm.feeDocFsId="fs_fee_docs"+scopeId,vm.deferId="defer_fees"+scopeId,vm.mitigationTypeId="mitigation_type"+scopeId,vm.certifyOrganizationId="certify_organization"+scopeId,vm.smallBusinessFeeApplicationId="small_business_fee_application"+scopeId,vm.certifyFundedHealthInstitutionId="certify_funded_health_institution"+scopeId,vm.certifyUrgentHealthNeedId="certify_urgent_health_need"+scopeId,vm.certifyGovermentOrganizationId="certify_goverment_organization"+scopeId,vm.certifyIsadId="certify_isad"+scopeId}var vm=this;vm.currencyFrench=new Intl.NumberFormat("fr-CA",{style:"currency",currency:"CAD",minimumFractionDigits:2}),vm.currencyEnglish=new Intl.NumberFormat("en-CA",{style:"currency",currency:"CAD",minimumFractionDigits:2}),vm.model={},vm.submissionType={},vm.onePaymentSelected="",vm.oneFeeDocSelected="",vm.yesNoList=[YES,NO],vm.feeDocKeys=["estMarketShare","comparison","salesHistory","marketPlan","avgSalePrice","other"],vm.requiredOnly=[{type:"required",displayAlias:"MSG_ERR_MAND"}],vm.requiredOnlyError=[{type:"required",displayAlias:"MSG_ERR_MAND"},{type:"number",displayAlias:"TYPE_NUMBER"}],vm.onePaymentError=[{
type:"required",displayAlias:"MSG_ERR_MAND"}],vm.oneFeeDocError=[{type:"required",displayAlias:"MSG_ERR_MAND"}],vm.alerts=[!1,!1,!1],vm.lang=$translate.use(),vm.$onInit=function(){_setIdNames(),vm.submissionType=TransactionLists.getFeeList(),vm.mitigationList=TransactionLists.getMitigationList(),vm.alerts=[!1,!1,!1];for(var i=0;i<vm.submissionType.length;i++)vm.submissionType[i].text=vm.submissionType[i][$translate.use()]},vm.errorsTemp=function(){return!0},vm.$onChanges=function(changes){changes.language&&(vm.lang=changes.language.currentValue),changes.feeRecord&&(vm.model=changes.feeRecord.currentValue),changes.showErrorSummary&&(vm.showSummary=changes.showErrorSummary.currentValue)},vm.showError=function(ctrl){return!!ctrl&&(!!(ctrl.$invalid&&ctrl.$touched||vm.showSummary&&ctrl.$invalid)||void 0)},vm.isPaymentSelected=function(){for(var methodSelected=!1,keys=Object.keys(vm.model.paymentMethod),i=0;i<keys.length;i++)if(vm.model.paymentMethod[keys[i]]===!0){methodSelected=!0;break}return vm.onePaymentSelected="",methodSelected?(vm.onePaymentSelected=!0,!0):(vm.onePaymentSelected=!1,!1)},vm.isFeeDocSelected=function(){for(var feeDocSelected=!1,i=0;i<vm.feeDocKeys.length;i++)if(vm.model.requiredDocs[vm.feeDocKeys[i]]===!0){feeDocSelected=!0;break}return vm.oneFeeDocSelected="",feeDocSelected?(vm.oneFeeDocSelected=!0,!0):(vm.oneFeeDocSelected=!1,!1)},vm.isFeeRemit=function(){return vm.model.feeRemission===YES||(vm.model.grossRevenue=0,vm.model.percentGross=0,!1)},vm.calcValue=function(){var result=.1*parseFloat(vm.model.grossRevenue);isNaN(result)&&(result=0),vm.model.percentGross=result.toFixed(2)},vm.isDeferral=function(){return!!vm.model&&(vm.model.deferralRequest===YES||(vm.model.requiredDocs.deferralStat=!1,!1))},vm.showDocumentationSection=function(){return!(!vm.isEligible()&&!vm.isDeferral())},vm.showPaymentMethods=function(){if(!vm.model)return!1;var showPM=!vm.isDeferral()&&!vm.isEligible()&&vm.isLess10K()||vm.isEligible();return showPM||(vm.model.paymentMethod={creditCard:!1,cheque:!1,moneyOrder:!1,bankDraft:!1,existingCredit:!1,bankWire:!1,billPayment:!1}),showPM},vm.isSendNoFees=function(){return!!(vm.model&&vm.model.submissionClass&&vm.model.submissionClass.fee)&&!(vm.isLess10K()||vm.isEligible()||vm.isDeferral()||vm.isFeeRemit())},vm.isFrench=function(){return vm.lang!==ENGLISH},vm.showPaymentSection=function(){return!vm.isDeferral()&&vm.isFeeRemit()||vm.isEligible()&&vm.isLess10K()||vm.isEligible()&&!vm.isLess10K()||vm.isDeferral()&&!vm.isEligible()},vm.showPaymentPanel=function(){return!!(vm.model&&vm.model.submissionClass&&vm.model.submissionClass.fee)&&!(vm.isSendNoFees()||vm.isDeferral()||vm.isFeeRemit())},vm.isEligible=function(){return vm.model&&vm.model.submissionClass&&vm.model.submissionClass.fee?!!(vm.isFeeRemit()&&parseInt(vm.model.percentGross)<parseInt(vm.model.submissionClass.fee))||(clearRemitRequiredDocs(),!1):(clearRemitRequiredDocs(),!1)},vm.isLess10K=function(){return!(!vm.model||!vm.model.submissionClass)&&vm.model.submissionClass.fee<1e4},vm.openPaymentForm=function(){var feelink=ADVANCE_FEE_PAYMENT_EN;vm.lang===FRENCH&&(feelink=ADVANCE_FEE_PAYMENT_FR),$window.open(feelink,"_blank")},vm.setDocOther=function(){return!!vm.model&&(!!vm.model.requiredDocs.other||(vm.model.requiredDocs.otherDetails="",!1))},vm.getFee=function(){return vm.model&&vm.model.submissionClass&&vm.model.submissionClass.fee?vm.getCurrency(vm.model.submissionClass.fee):""},vm.getPpercentGross=function(){return vm.getCurrency(vm.model.percentGross)},vm.getCurrency=function(money){return money?vm.lang==ENGLISH?vm.currencyEnglish.format(money):vm.currencyFrench.format(money):""},vm.closeAlert=function(value){angular.isUndefined(value)||value<vm.alerts.length&&(vm.alerts[value]=!1)},vm.addInstruct=function(value){angular.isUndefined(value)||value<vm.alerts.length&&(vm.alerts[value]=!0)},vm.isSmallBusiness=function(){return!!vm.model&&(!(!vm.model.mitigation.mitigationType||"SMALL_BUSINESS"!==vm.model.mitigation.mitigationType.id)||(vm.model.mitigation.certifyOrganization=!1,vm.model.mitigation.smallBusinessFeeApplication="",!1))},vm.isUrgentHealthNeed=function(){return!!vm.model&&(!(!vm.model.mitigation.mitigationType||"URGENT_HEALTH_NEED"!==vm.model.mitigation.mitigationType.id)||(vm.model.mitigation.certifyUrgentHealthNeed=!1,!1))},vm.isFundedHealthInstitution=function(){return!!vm.model&&(!(!vm.model.mitigation.mitigationType||"FUNDED_INSTITUTION"!==vm.model.mitigation.mitigationType.id)||(vm.model.mitigation.certifyFundedHealthInstitution=!1,!1))},vm.isGovermentOrganization=function(){return!!vm.model&&(!(!vm.model.mitigation.mitigationType||"GOVERMENT_ORGANIZATION"!==vm.model.mitigation.mitigationType.id)||(vm.model.mitigation.certifyGovermentOrganization=!1,!1))},vm.isISAD=function(){return!!vm.model&&(!(!vm.model.mitigation.mitigationType||"ISAD"!==vm.model.mitigation.mitigationType.id)||(vm.model.mitigation.certifyIsad=!1,!1))},vm.setTouch=function(ctrl){ctrl&&ctrl.$setTouched()}}angular.module("transactionFeesModule").component("cmpTransactionFees",{templateUrl:"app/scripts/components/transactionFees/tpl-transaction-fees_20240910_0916.html",controller:transactionFeesController,controllerAs:"transFeeCtrl",bindings:{feeRecord:"<",language:"<",showErrorSummary:"<",updateErrorSummary:"&"}}),transactionFeesController.$inject=["$scope","$window","$translate","TransactionLists","YES","NO","ENGLISH","FRENCH","ADVANCE_FEE_PAYMENT_EN","ADVANCE_FEE_PAYMENT_FR"]}(),function(){"use strict";angular.module("errorSummaryModule",["focus-if"])}(),function(){"use strict";function errorSummaryController($scope,$location,$anchorScroll){function _isErrorSummaryVisible(){return vm.isVisible&&vm.errorArray&&vm.errorArray.length>0}function _hideRequiredRecordErrors(errors){var keys=Object.keys(errors);if(keys instanceof Array||(keys=[keys]),keys.indexOf("ingRecCtrl.activeIngForm")>-1)for(var i=0;i<keys.length;i++)if(keys[i].indexOf("no_active")>-1){delete errors[keys[i]];break}if(keys.indexOf("ctrCtrl.containerTypeForm")>-1)for(var i=0;i<keys.length;i++)if(keys[i].indexOf("no_container")>-1){delete errors[keys[i]];break}}function _getErr(errorObj,resultsList,parent){for(var keys=Object.keys(errorObj),i=0;i<keys.length;i++){var record=errorObj[keys[i]];record instanceof Array||(record=[record]);for(var j=0;j<record.length;j++){var numIndex=record[j].$name.lastIndexOf("_"),transcludeName="";if(numIndex>0&&(transcludeName=record[j].$name.substring(0,numIndex)),record[j].$invalid===!0&&record[j].$name.indexOf(".")>0)if(vm.exclusions&&vm.exclusions.hasOwnProperty(record[j].$name)){var tabIndex=vm.exclusions[record[j].$name].indexOf("tab_"),tabId=-1;tabIndex>-1&&(tabId=vm.exclusions[record[j].$name].substr(tabIndex+4),tabId=parseInt(tabId)),angular.merge(resultsList,_createSummaryRecord(record[j].$name,keys[i],parent,tabId))}else _getErr(record[j].$error,resultsList,record[j].$name);else if(vm.transcludeNames.hasOwnProperty(transcludeName)){var exIndex=record[j].$name.indexOf(transcludeName),expandIndex=record[j].$name.substring(exIndex+transcludeName.length+1);angular.merge(resultsList,_createExpanderRecord(record[j].$name,transcludeName,keys[i],parent,expandIndex))}else if(record[j].$invalid===!0&&!resultsList.hasOwnProperty(record[j].$name)){var result=_processRecord(record[j].$name,keys[i],parent);"SAVELIFEREC"===result[record[j].$name].translateKey&&(result[record[j].$name].type=""),angular.merge(resultsList,result)}}}}function _scrubFieldName(rawName){var separator="_",index=rawName.lastIndexOf(separator),cleanedName="";return cleanedName=index>-1?rawName.substring(0,index):rawName}function _getElementScope(rawName){var separator="_",nameSplit=rawName.split(separator),scopeId=parseInt(nameSplit[nameSplit.length-1]);return angular.isNumber(scopeId)||(scopeId=""),scopeId}function _processRecord(error_Name,errorType,parent){var result={},scrubName=_scrubFieldName(error_Name),scopeId=_getElementScope(error_Name),errorKey="TYPE_"+errorType.toUpperCase(),destId=error_Name;if(vm.alias&&vm.alias.hasOwnProperty(scrubName)){var aliasRec=vm.alias[scrubName];switch(aliasRec.type.toLowerCase()){case"fieldset":var searchId=aliasRec.parent+"_"+scopeId,destObj=$("#"+searchId).find("input:visible:first");destObj.length>0&&(destId=destObj[0].id);break;case"element":destId=aliasRec.target+"_"+scopeId;break;case"elementnoid":destId=aliasRec.target;break;case"pattern":"pattern"===errorType&&(errorKey=aliasRec.errorType);break;case"select2":var searchId=aliasRec.name+"_match"+scopeId,destObj=$("#"+searchId);destObj.length>0&&(destId=searchId);break;case"min":"min"===errorType&&(errorKey=aliasRec.errorType);break;case"max":"max"===errorType&&(errorKey=aliasRec.errorType);break;case"minlength":"minlength"===errorType&&(errorKey=aliasRec.errorType);break;case"maxlength":"maxlength"===errorType&&(errorKey=aliasRec.errorType);break;case"buttonsearch":errorKey="TYPE_REQUIRED",$.each($("button","#"+vm.startFormId),function(k){var temp_attr=$(this).attr("id");temp_attr&&temp_attr.indexOf(aliasRec.buttonName)>-1&&(destId=temp_attr)});break;default:console.warn("No type found "+aliasRec.type)}}return result[error_Name]||(result[error_Name]={name:destId,errorName:error_Name,translateKey:scrubName.toUpperCase(),type:errorKey,parent:parent,concat:parent+"."+error_Name,isSummary:!1}),result}function _sortErrorsByDomOrder(){var domFieldList={};$.each($("input, select, textarea, fieldset"),function(k){var temp_attr=$(this).attr("id");temp_attr&&(domFieldList[temp_attr]=k)});for(var keyList=Object.keys(domFieldList),p=0;p<keyList.length;p++){if(keyList[p].indexOf("focusser-")>-1){var parentName=angular.element(document.querySelector("#"+keyList[p])).parent().attr("name");parentName&&(keyList[p]=parentName)}vm.uniqueErrorList[keyList[p]]||(keyList.splice(p,1),p--)}for(var sortedDomJsonList={},v=0;v<keyList.length;v++)0==keyList[v].indexOf("no_")&&(keyList[v]=keyList[v].replace("no_","list_")),sortedDomJsonList[keyList[v]]=v;var newErrors=Object.keys(vm.uniqueErrorList).map(function(k){return vm.uniqueErrorList[k]}),notDefined={};if(newErrors.length>0)for(var i=0;i<newErrors.length;){var currRec=newErrors[i],targetName=currRec.errorName,destIndex=sortedDomJsonList[targetName];if(angular.isDefined(destIndex)&&destIndex!==i){var tempRec=angular.copy(newErrors[destIndex]);newErrors[destIndex]=angular.copy(currRec),newErrors[i]=angular.copy(tempRec)}else angular.isDefined(destIndex)||(notDefined[currRec.name]={rec:currRec,pos:i}),i++}return _sortUnknowns(notDefined,newErrors),newErrors}function _sortUnknowns(unknownJson,sortList){for(var unknownArray=Object.keys(unknownJson).map(function(k){return unknownJson[k]}),i=0;i<unknownArray.length;i++){var unknownRec=unknownArray[i],unknownName=unknownRec.rec.name,scopeIndex=_getElementScope(unknownName);if(angular.isNumber(scopeIndex))for(var g=sortList.length-1;g>=0;g--){var sortRec=sortList[g],sortScope=_getElementScope(sortRec.name);if(angular.isNumber(sortScope)&&sortScope===scopeIndex&&unknownName!==sortRec.name){sortList.move(unknownRec.pos,g+1);break}}}}function _createSummaryRecord(name,type,parent,tabId){var result={};return angular.isDefined(tabId)||(tabId=-1),result[name]={name:name,type:type,translateKey:name.toUpperCase(),parent:parent,concat:parent+"."+name,tabId:tabId,isSummary:!0},result}function _createExpanderRecord(name,transcludeName,type,parent,expanderIndex){var result={};return result[name]={name:name,type:type,translateKey:transcludeName.toUpperCase(),parent:parent,concat:parent+"."+name,isSummary:!0,toExpand:!0,exIndex:parseInt(expanderIndex)},result}var vm=this;vm.parentRef=null,vm.errorArray=[],vm.uniqueErrorList={},vm.isVisible=!1,vm.nameAddendum="",vm.rootError="",vm.isFocusInput=0,vm.exclusions={},vm.alias={},vm.transcludeNames={},vm.headingPreamble="",vm.headerLevel="",vm.startFormId="",vm.$onInit=function(){},vm.$onChanges=function(changes){changes.setHeadingLevel&&angular.isDefined(changes.setHeadingLevel.currentValue)&&(vm.headerLevel=changes.setHeadingLevel.currentValue.toLowerCase()),changes.nameSuffix&&(vm.nameAddendum="-"+changes.nameSuffix.currentValue),changes.formPreamble&&(vm.headingPreamble=changes.formPreamble.currentValue),changes.exclusionList&&(vm.exclusions=changes.exclusionList.currentValue),changes.aliasList&&(vm.alias=changes.aliasList.currentValue),changes.formRef&&vm.getErrorsSumm(changes.formRef.currentValue.$error,changes.formRef.currentValue.$name),changes.showErrors&&(vm.isVisible=changes.showErrors.currentValue),changes.updateErrors&&vm.formRef&&vm.isVisible&&vm.getErrorsSumm(vm.formRef.$error,vm.formRef.$name),changes.makeFocused&&changes.makeFocused.currentValue&&(vm.isFocusInput=vm.isFocusInput+1),changes.formId&&(vm.startFormId=changes.formId.currentValue),changes.transcludeList&&changes.transcludeList.currentValue&&(vm.transcludeNames=changes.transcludeList.currentValue)},vm.calcIsVisible=function(){var summaryIsVisible=_isErrorSummaryVisible();return summaryIsVisible||$scope.$emit("childErrorSummaryHide",+vm.nameAddendum),summaryIsVisible},vm.scrollTo=function(errorRecord){var hashId="";errorRecord&&(hashId=errorRecord.isSummary?"errors-summary-"+errorRecord.name:errorRecord.name,vm.expandRecord({index:errorRecord.exIndex}),$location.hash(hashId),$anchorScroll())},vm.selectVisibleTab=function(errorRecord){"errors-summary-"+errorRecord.name;vm.selectTab({index:errorRecord.tabId})},vm.isSummaryLink=function(errorRecord){return errorRecord.isSummary&&!angular.isDefined(errorRecord.toExpand)&&angular.isDefined(errorRecord.tabId)&&parseInt(errorRecord.tabId)<0},vm.isList=function(errorRecord){return errorRecord.name.indexOf("list_")>=0},vm.isTabLink=function(errorRecord){return errorRecord.isSummary&&angular.isDefined(errorRecord.tabId)&&parseInt(errorRecord.tabId)>-1},vm.isExpanderLink=function(errorRecord){return angular.isDefined(errorRecord.toExpand)},$scope.$on("childErrorSummaryHide",function(event,data){if(_isErrorSummaryVisible())for(var errorSummaryBroadcastName=data.message,i=0;i<vm.errorArray.length;i++){var errorRecord=errorArray[i];errorRecord.isSummary&&errorRecord.name===errorSummaryBroadcastName&&vm.errorArray.splice(i,1)}}),vm.getErrorsSumm=function(myformErrors,name){if(vm.errorArray=[],vm.uniqueErrorList={},_getErr(myformErrors,vm.uniqueErrorList,name),_hideRequiredRecordErrors(vm.uniqueErrorList),"COMPANY_FORM"==vm.formPreamble){vm.errorArray=Object.keys(vm.uniqueErrorList).map(function(k){return vm.uniqueErrorList[k]});for(var temp=vm.errorArray[0],i=0;i<vm.errorArray.length-1;i++)vm.errorArray[i]=vm.errorArray[i+1],"required"==vm.errorArray[i].type&&(vm.errorArray[i].type="TYPE_REQUIRED");vm.errorArray[vm.errorArray.length-1]=temp}else{var newErrors=_sortErrorsByDomOrder();angular.equals(vm.errorArray,newErrors)||(vm.errorArray=newErrors)}},Array.prototype.move=function(from,to){to<0&&(to=0),to>=this.length&&(to=this.length-1),this.splice(to,0,this.splice(from,1)[0])}}angular.module("errorSummaryModule").component("cmpErrorSummary",{templateUrl:"app/scripts/components/error-summary/tpl-error-summary_20240910_0916.html",controller:errorSummaryController,controllerAs:"errSummaryCtrl",bindings:{formRef:"<",showErrors:"<",updateErrors:"<",nameSuffix:"@",formPreamble:"@",makeFocused:"<",setHeadingLevel:"@",exclusionList:"<",transcludeList:"<",formId:"<",aliasList:"<",expandRecord:"&",selectTab:"&"}}),errorSummaryController.$inject=["$scope","$location","$anchorScroll"]}(),function(){"use strict";angular.module("errorMessageModule",[])}(),function(){"use strict";function errorMessageController(){var vm=this;vm.field_name="",vm.form_ref=null,vm.fieldRecords=[],vm.$onChanges=function(changes){changes.fieldName&&(vm.field_name=changes.fieldName.currentValue),changes.formRef&&(vm.form_ref=changes.formRef.currentValue),changes.errorTypes&&(vm.fieldRecords=changes.errorTypes.currentValue)},vm.showErrorMessage=function(){return!!vm.form_ref&&(angular.isUndefined(vm.fieldName)?(console.warn("No field name for: "+vm.form_ref.$name),!1):angular.isUndefined(vm.form_ref[vm.fieldName])?(console.warn("lookup undefined "+vm.form_ref.$name+"."+vm.fieldName),!1):vm.showError()&&vm.form_ref[vm.fieldName].$invalid||vm.form_ref[vm.fieldName].$touched&&vm.form_ref[vm.fieldName].$invalid)}}angular.module("errorMessageModule").component("cmpErrorMessage",{templateUrl:"app/scripts/components/error-message/tpl-error-message_20240910_0916.html",controller:errorMessageController,controllerAs:"errMessageCtrl",bindings:{fieldName:"<",formRef:"<",showError:"&",errorTypes:"<"}})}(),function(){"use strict";angular.module("alertModule",[])}(),function(){"use strict";function alertController(){var vm=this;vm.alertVisible=!1,vm.closeMsgAlias="CLOSE_ALERT",vm.anchor=null,vm.$onInit=function(){vm.alertVisible=!1},vm.$onChanges=function(changes){changes.msg&&(vm.closeMsgAlias=changes.msg.currentValue),changes.uiState&&(vm.alertVisible=changes.uiState.currentValue),changes.myAnchor&&(vm.anchor=changes.myAnchor.currentValue)},vm.open=function(){vm.updateState()},vm.close=function(){vm.updateState(),vm.anchor&&document.getElementById(vm.anchor).focus()},vm.isAlertVisible=function(){return vm.alertVisible}}angular.module("alertModule").component("cmpAlert",{templateUrl:"app/scripts/components/alertComponent/tpl-alert_20240910_0916.html",transclude:!0,bindings:{uiState:"<",msg:"@",myAnchor:"<",updateState:"&",type:"@"},controller:alertController,controllerAs:"alertCtrl"}),alertController.$inject=[]}(),function(){"use strict";angular.module("addressModule",["hpfbConstants","dataLists","filterLists","ui.select","errorMessageModule"])}(),function(){"use strict";function addressCtrl(getCountryAndProvinces,$translate,CANADA,USA,$scope){function _setIdNames(){var scopeId=vm.fldId+"_"+$scope.$id;vm.streetId="STREET"+scopeId,vm.cityId="CITY"+scopeId,vm.countryId="COUNTRY"+scopeId,vm.stateTextId="proveState"+scopeId,vm.stateListId="state"+scopeId,vm.provinceListId="province"+scopeId,vm.postalId="postal"+scopeId,vm.zipId="zip"+scopeId}var vm=this;vm.isEditable=!0,vm.ngModelOptSetting={updateOn:"blur"},vm.lang=$translate.proposedLanguage()||$translate.use(),vm.addressModel={addressID:"",isDetailValid:!1,street:"",city:"",country:"",countryHtml:"",countryDisplay:"",stateLov:"",stateText:"",postalCode:""},vm.countryIsEditable=!0,vm.canadianPostalCodePattern="^(?!.*[DFIOQU])[A-VXYa-vxy][0-9][A-Za-z] ?[0-9][A-Za-z][0-9]$",vm.usaZipCode="^[0-9]{5}(?:-[0-9]{4})?$",vm.hideProvinceText=!1,vm.showProvince=!1,vm.showState=!1,vm.countryList=getCountryAndProvinces.getCountries(),vm.fdId="",vm.requiredOnly=[{type:"required",displayAlias:"MSG_ERR_MAND"}],vm.postalErrorList=[{type:"required",displayAlias:"MSG_ERR_MAND"},{type:"pattern",displayAlias:"POSTAL_FORMAT"}],vm.provStateErrorName="PROVSTATE",vm.focusOnProvinceState=!1,vm.$onInit=function(){vm.addressRecord&&(vm.addressModel=vm.addressRecord,vm.provListLabel=getProvinceListLabel(),vm.postalLabel=getPostalLabel(),vm.isPostalRequired=isPostalRequiredFn(),vm.provinces=getProvinceStateList(),vm.hideProvinceText=getProvinceTextState(),vm.postalPattern=getPostalPattern(),vm.hideProvinceDdl=!vm.hideProvinceText),_setIdNames()},vm.$onChanges=function(changes){changes.addressRecord&&(vm.addressModel=changes.addressRecord.currentValue,vm.countryChanged()),changes.isAmend&&(vm.isEditable=changes.isAmend.currentValue),changes.fieldSuffix&&(vm.fldId=changes.fieldSuffix.currentValue,vm.fldId||(vm.fldId="")),changes.updateCountry&&vm.countryChanged(),changes.countryEditable&&(vm.countryIsEditable=changes.countryEditable.currentValue,angular.isUndefined(vm.countryIsEditable)&&(vm.countryIsEditable=!0))},vm.countryChanged=function(){void 0===vm.addressModel.country.id||vm.addressModel.country.en!==vm.addressModel.countryHtml&&vm.addressModel.country.fr!==vm.addressModel.countryHtml?(vm.addressModel.countryHtml="",vm.addressModel.countryDisplay="",vm.isPostalRequired=!1,vm.hideProvinceText=!1,vm.showProvince=!1,vm.showState=!1,vm.hideProvinceDdl=!vm.hideProvinceText,vm.postalLabel=getPostalLabel()):(vm.addressModel.countryDisplay=vm.addressModel.country.id,vm.provListLabel=getProvinceListLabel(),vm.postalLabel=getPostalLabel(),vm.isPostalRequired=isPostalRequiredFn(),vm.provinces=getProvinceStateList(),vm.hideProvinceText=getProvinceTextState(),vm.postalPattern=getPostalPattern(),vm.hideProvinceDdl=!vm.hideProvinceText,vm.isCountryCanada()),vm.updateErrorSummary()},vm.isCountryCanada=function(){return vm.addressModel&&vm.addressModel.country&&vm.addressModel.country.id===CANADA?(vm.postalErrorList=[{type:"required",displayAlias:"MSG_ERR_MAND"},{type:"pattern",displayAlias:"POSTAL_FORMAT"}],!0):(vm.postalErrorList=[{type:"required",displayAlias:"MSG_ERR_MAND"},{type:"pattern",displayAlias:"POSTAL_FORMAT"}],!1)},vm.showError=function(ctrl){return!!ctrl&&!!(ctrl.$invalid&&ctrl.$touched||vm.showErrors()&&ctrl.$invalid)},vm.onDeleteButtonClick=function(){vm.onDelete({addressId:vm.addressModel.addressID})},vm.onDiscardButtonClick=function(){vm.addressModel=angular.extend({},vm.addressRecord),vm.addressForm.$setPristine()},vm.isCountryEditable=function(){return vm.isEditable&&vm.countryIsEditable},vm.postalCodeChanged=function(){var postal=vm.addressModel.postalCode;postal&&(postal=postal.toUpperCase(),6==postal.length&&vm.addressModel.country.id===CANADA&&(postal=postal.substring(0,3)+" "+postal.substring(3,postal.length)),vm.addressModel.postalCode=postal,vm.updateErrorSummary())};var getProvinceTextState=function(){var isCanOrUsa=isPostalRequiredFn();return isCanOrUsa?vm.addressModel.stateText="":vm.addressModel.stateList="",isCanOrUsa},isPostalRequiredFn=function(){return vm.addressModel.country.id===CANADA||vm.addressModel.country.id===USA},getProvinceStateList=function(){return vm.addressModel.country.id===CANADA?(vm.showProvince=!0,vm.showState=!1,getCountryAndProvinces.getProvinces()):vm.addressModel.country.id===USA?(vm.showProvince=!1,vm.showState=!0,getCountryAndProvinces.getUSStates()):(vm.showProvince=!1,void(vm.showState=!1))},getProvinceListLabel=function(){var label=vm.addressModel.country.id===USA?"STATE":"PROVINCE";return label},getPostalLabel=function(){var label=vm.addressModel.country.id===USA?"ZIP":"POSTAL";return label},getPostalPattern=function(){var postalPtrn=null;return vm.addressModel.country.id===USA?postalPtrn=/^[0-9]{5}(?:-[0-9]{4})?$/:vm.addressModel.country.id===CANADA&&(postalPtrn=/^(?!.*[DFIOQU])[A-VXYa-vxy][0-9][A-Za-z] ?[0-9][A-Za-z][0-9]$/),postalPtrn};vm.countryChange=function(){for(var found=!1,i=0;i<vm.countryList.length;i++){var option=vm.countryList[i];if(option[vm.lang]===vm.addressModel.countryHtml){vm.addressModel.country=option,found=!0;break}}found||(vm.addressModel.countryHtml="",""!=vm.addressModel.country&&""!=vm.addressModel.country.id&&(vm.addressModel.country={}),vm.addressModel.countryDisplay=""),vm.countryChanged()},vm.countryTabKey=function(){vm.focusOnProvinceState=!0},vm.leaveProvinceState=function(){vm.focusOnProvinceState=!1},$scope.$watch("adr.addressForm.$error",function(){vm.updateErrorSummary()},!0)}angular.module("addressModule").config(function(uiSelectConfig){uiSelectConfig.theme="select2"}).component("cmpAddressDetails",{templateUrl:"app/scripts/components/addressDetails/tpl-address-details_20240910_0916.html",controller:addressCtrl,controllerAs:"adr",bindings:{addressRecord:"<",onUpdate:"&",showErrors:"&",isAmend:"<",updateErrorSummary:"&",fieldSuffix:"<",countryEditable:"<",updateCountry:"<"}}),addressCtrl.$inject=["getCountryAndProvinces","$translate","CANADA","USA","$scope"]}(),function(){"use strict";angular.module("lcDetailsModule",["ui.bootstrap","activityFormFilterModule","errorSummaryModule","errorMessageModule"])}(),function(){"use strict";function lifecycleRecCtrl(ActivityFormFilterService,TransactionLists,$filter,$translate,$scope){function _updateLocalModel(record){vm.lifecycleModel=record,convertToDate(),vm.selectActivityLeadList(),vm.setSequenceList(!1),vm.setDetailsState(),vm.selectActivityList()}function setAsYearOnly(){vm.fromTo=!1,vm.endDateVisible=!1,vm.startDateVisible=!1,vm.descriptionVisible=!1,vm.descriptionChangeVisible=!1,vm.versionVisible=!1,vm.yearVisible=!0,vm.yearChangeVisible=!1,vm.requesterVisible=!1,vm.lifecycleModel.startDate="",vm.lifecycleModel.endDate="",vm.lifecycleModel.sequenceVersion="",vm.lifecycleModel.requesterName="",vm.lifecycleModel.requesterName2="",vm.lifecycleModel.requesterName3="",vm.lifecycleModel.requesterNameTxt="",vm.lifecycleModel.requesterName2Txt="",vm.lifecycleModel.requesterName3Txt="",vm.lifecycleModel.fromValue="",vm.lifecycleModel.toValue=""}function setAsDescriptionYear(){vm.fromTo=!1,vm.endDateVisible=!1,vm.startDateVisible=!1,vm.descriptionVisible=!1,vm.descriptionChangeVisible=!1,vm.versionVisible=!1,vm.yearVisible=!1,vm.yearChangeVisible=!0,vm.requesterVisible=!1,vm.lifecycleModel.startDate="",vm.lifecycleModel.endDate="",vm.lifecycleModel.sequenceVersion="",vm.lifecycleModel.requesterName="",vm.lifecycleModel.requesterName2="",vm.lifecycleModel.requesterName3="",vm.lifecycleModel.requesterNameTxt="",vm.lifecycleModel.requesterName2Txt="",vm.lifecycleModel.requesterName3Txt="",vm.lifecycleModel.fromValue="",vm.lifecycleModel.toValue=""}function setDetailsAsNone(){vm.fromTo=!1,vm.endDateVisible=!1,vm.startDateVisible=!1,vm.descriptionVisible=!1,vm.descriptionChangeVisible=!1,vm.versionVisible=!1,vm.yearVisible=!1,vm.yearChangeVisible=!1,vm.requesterVisible=!1,vm.lifecycleModel.year="",vm.lifecycleModel.startDate="",vm.lifecycleModel.endDate="",vm.lifecycleModel.details="",vm.lifecycleModel.sequenceVersion="",vm.lifecycleModel.requesterName="",vm.lifecycleModel.requesterName2="",vm.lifecycleModel.requesterName3="",vm.lifecycleModel.requesterNameTxt="",vm.lifecycleModel.requesterName2Txt="",vm.lifecycleModel.requesterName3Txt="",vm.lifecycleModel.fromValue="",vm.lifecycleModel.toValue=""}function setAsDescription(){vm.fromTo=!1,vm.endDateVisible=!1,vm.startDateVisible=!1,vm.descriptionVisible=!0,vm.descriptionChangeVisible=!1,vm.versionVisible=!1,vm.yearVisible=!1,vm.yearChangeVisible=!1,vm.requesterVisible=!1,vm.descriptionLabel="BRIEF_DESC",vm.lifecycleModel.year="",vm.lifecycleModel.startDate="",vm.lifecycleModel.endDate="",vm.lifecycleModel.sequenceVersion="",vm.lifecycleModel.requesterName="",vm.lifecycleModel.requesterName2="",vm.lifecycleModel.requesterName3="",vm.lifecycleModel.requesterNameTxt="",vm.lifecycleModel.requesterName2Txt="",vm.lifecycleModel.requesterName3Txt="",vm.lifecycleModel.fromValue="",vm.lifecycleModel.toValue=""}function setAsStartDate(){vm.fromTo=!1,vm.endDateVisible=!1,vm.startDateVisible=!0,vm.descriptionVisible=!1,vm.descriptionChangeVisible=!1,vm.versionVisible=!1,vm.yearVisible=!1,vm.yearChangeVisible=!1,vm.requesterVisible=!1,vm.lifecycleModel.year="",vm.lifecycleModel.endDate="",vm.lifecycleModel.details="",vm.lifecycleModel.sequenceVersion="",vm.lifecycleModel.requesterName="",vm.lifecycleModel.requesterName2="",vm.lifecycleModel.requesterName3="",vm.lifecycleModel.requesterNameTxt="",vm.lifecycleModel.requesterName2Txt="",vm.lifecycleModel.requesterName3Txt="",vm.lifecycleModel.fromValue="",vm.lifecycleModel.toValue=""}function setVersionAndDate(){vm.fromTo=!1,vm.endDateVisible=!1,vm.startDateVisible=!0,vm.descriptionVisible=!1,vm.descriptionChangeVisible=!1,vm.versionVisible=!0,vm.versionLabel="VERSION_NO",vm.yearVisible=!1,vm.yearChangeVisible=!1,vm.requesterVisible=!1,vm.lifecycleModel.year="",vm.lifecycleModel.endDate="",vm.lifecycleModel.details="",vm.lifecycleModel.requesterName="",vm.lifecycleModel.requesterName2="",vm.lifecycleModel.requesterName3="",vm.lifecycleModel.requesterNameTxt="",vm.lifecycleModel.requesterName2Txt="",vm.lifecycleModel.requesterName3Txt="",vm.lifecycleModel.fromValue="",vm.lifecycleModel.toValue=""}function setVersion(){vm.fromTo=!1,vm.endDateVisible=!1,vm.startDateVisible=!1,vm.descriptionVisible=!1,vm.descriptionChangeVisible=!1,vm.versionVisible=!0,vm.versionLabel="VERSION_NO",vm.yearVisible=!1,vm.yearChangeVisible=!1,vm.requesterVisible=!1,vm.lifecycleModel.year="",vm.lifecycleModel.endDate="",vm.lifecycleModel.details="",vm.lifecycleModel.requesterName="",vm.lifecycleModel.requesterName2="",vm.lifecycleModel.requesterName3="",vm.lifecycleModel.requesterNameTxt="",vm.lifecycleModel.requesterName2Txt="",vm.lifecycleModel.requesterName3Txt="",vm.lifecycleModel.fromValue="",vm.lifecycleModel.toValue=""}function setAsDatePeriod(){vm.fromTo=!1,vm.endDateVisible=!0,vm.startDateVisible=!0,vm.descriptionVisible=!1,vm.descriptionChangeVisible=!1,vm.versionVisible=!1,vm.yearVisible=!1,vm.yearChangeVisible=!1,vm.requesterVisible=!1,vm.lifecycleModel.year="",vm.lifecycleModel.details="",vm.lifecycleModel.sequenceVersion="",vm.lifecycleModel.requesterName="",vm.lifecycleModel.requesterName2="",vm.lifecycleModel.requesterName3="",vm.lifecycleModel.requesterNameTxt="",vm.lifecycleModel.requesterName2Txt="",vm.lifecycleModel.requesterName3Txt="",vm.lifecycleModel.fromValue="",vm.lifecycleModel.toValue=""}function setAsFromTo(){vm.fromTo=!0,vm.endDateVisible=!1,vm.startDateVisible=!1,vm.descriptionVisible=!1,vm.descriptionChangeVisible=!1,vm.versionVisible=!1,vm.yearVisible=!1,vm.yearChangeVisible=!1,vm.requesterVisible=!1,vm.lifecycleModel.year="",vm.lifecycleModel.details="",vm.lifecycleModel.sequenceVersion="",vm.lifecycleModel.requesterName="",vm.lifecycleModel.requesterName2="",vm.lifecycleModel.requesterName3="",vm.lifecycleModel.requesterNameTxt="",vm.lifecycleModel.requesterName2Txt="",vm.lifecycleModel.requesterName3Txt=""}function setAsRequesterwithDate(){vm.fromTo=!1,vm.endDateVisible=!1,vm.startDateVisible=!0,vm.descriptionVisible=!1,vm.descriptionChangeVisible=!1,vm.versionVisible=!1,vm.yearVisible=!1,vm.yearChangeVisible=!1,vm.requesterVisible=!0,vm.lifecycleModel.year="",vm.lifecycleModel.endDate="",vm.lifecycleModel.details="",vm.lifecycleModel.sequenceVersion="",vm.lifecycleModel.fromValue="",vm.lifecycleModel.toValue=""}function setAsDescriptionChange(){vm.fromTo=!1,vm.endDateVisible=!1,vm.startDateVisible=!1,vm.descriptionVisible=!1,vm.descriptionChangeVisible=!0,vm.versionVisible=!1,vm.yearVisible=!1,vm.yearChangeVisible=!1,vm.requesterVisible=!1,vm.lifecycleModel.startDate="",vm.lifecycleModel.endDate="",vm.lifecycleModel.year="",vm.lifecycleModel.details="",vm.lifecycleModel.sequenceVersion="",vm.lifecycleModel.requesterName="",vm.lifecycleModel.requesterName2="",vm.lifecycleModel.requesterName3="",vm.lifecycleModel.requesterNameTxt="",vm.lifecycleModel.requesterName2Txt="",vm.lifecycleModel.requesterName3Txt="",vm.lifecycleModel.fromValue="",vm.lifecycleModel.toValue=""}function setAsDescriptionWithDate(){vm.fromTo=!1,vm.endDateVisible=!1,vm.startDateVisible=!0,vm.descriptionVisible=!0,vm.descriptionChangeVisible=!1,vm.versionVisible=!1,vm.yearVisible=!1,vm.yearChangeVisible=!1,vm.requesterVisible=!1,vm.lifecycleModel.endDate="",vm.lifecycleModel.year="",vm.lifecycleModel.sequenceVersion="",vm.lifecycleModel.requesterName="",vm.lifecycleModel.requesterName2="",vm.lifecycleModel.requesterName3="",vm.lifecycleModel.requesterNameTxt="",vm.lifecycleModel.requesterName2Txt="",vm.lifecycleModel.requesterName3Txt="",vm.lifecycleModel.fromValue="",vm.lifecycleModel.toValue=""}function convertDate(value){if(!value)return"";var date=new Date(value),m_names=["01","02","03","04","05","06","07","08","09","10","11","12"],d_names=["","01","02","03","04","05","06","07","08","09","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25","26","27","28","29","30","31"],result="";return result=date.getFullYear()+"-"+m_names[date.getMonth()]+"-"+d_names[date.getDate()]}function convertToDate(){vm.lifecycleModel&&vm.lifecycleModel.dateFiled&&(vm.lifecycleModel.dateFiled=_parseDate(vm.lifecycleModel.dateFiled)),vm.lifecycleModel&&vm.lifecycleModel.startDate&&(vm.lifecycleModel.startDate=_parseDate(vm.lifecycleModel.startDate)),vm.lifecycleModel&&vm.lifecycleModel.endDate&&(vm.lifecycleModel.endDate=_parseDate(vm.lifecycleModel.endDate))}function _parseDate(value){
var dateArray=value.split("-");3!==dateArray.length&&console.error("_parseDate error not 3 parts");var aDate=new Date(dateArray[0],dateArray[1]-1,dateArray[2]);return aDate}function _setIdNames(){var scopeId="_"+$scope.$id;vm.lifecycleDetailsFormId="life_detail_form"+scopeId,vm.dateSubId="date_submitted"+scopeId,vm.controlNumId="control_num"+scopeId,vm.regActivityId="reg_activity_type"+scopeId,vm.seqDescriptId="sequence_type"+scopeId,vm.startDateId="start_date"+scopeId,vm.dateId="dated"+scopeId,vm.endDateId="end_date"+scopeId,vm.yearId="year"+scopeId,vm.yearChangeId="year_change"+scopeId,vm.descriptId="brief_desc"+scopeId,vm.versionId="version_no"+scopeId,vm.activityLeadId="activity_lead"+scopeId,vm.requesterNameId="requester_name"+scopeId,vm.requesterNameId2="requester_name2"+scopeId,vm.requesterNameId3="requester_name3"+scopeId,vm.descriptChangeId="brief_desc_change"+scopeId,vm.fromValueId="fromValue"+scopeId,vm.toValueId="toValue"+scopeId,vm.activityLeadNoteId="reg_activity_lead_desc"+scopeId}function _createTxDescSortedArray(selectedTxDescList){var lang=$translate.proposedLanguage()||$translate.use();const allTxDescriptions="fr"===lang?TransactionLists.getTxDescFr():TransactionLists.getTxDescEn();var sortedTxDescs=[],placeLast=[],lastTxDesc=["ADVISEMENT_LETTER_RESPONSE","NOF_DRUG_SHORT","QUALITY_ISSU","GMP_COMP_ISSU","RECLASS_LOT_RELEASE","NOC_COMPLIANCE","UDRA_CANCEL_LETTER","SEQUENCE_CLEANUP","UDRA_MEETING_MINUTES","UDRA_EMAIL_RQ_RESPONSE","UDRA_PROCESSING_CLARIF_RESPONSE","GEN_VOL_NOF"],txDescLabels=selectedTxDescList.map(function(txDesc){return{code:txDesc,label:allTxDescriptions[txDesc]}});txDescLabels.forEach(function(item){lastTxDesc.includes(item.code)?placeLast.push(item.label):sortedTxDescs.push(item.label)}),sortedTxDescs.sort(function(a,b){return a.localeCompare(b,lang)}),sortedTxDescs=sortedTxDescs.concat(placeLast);var sortedIds=sortedTxDescs.map(function(label){return _findKeyByValue(label)});return sortedIds}function _findKeyByValue(value){var lang=$translate.proposedLanguage()||$translate.use();const allTxDescriptions="fr"===lang?TransactionLists.getTxDescFr():TransactionLists.getTxDescEn();for(var key in allTxDescriptions)if(allTxDescriptions[key]===value)return key;return null}var vm=this;vm.activityList=TransactionLists.getActivityTypes(),vm.selfLifeUnitsList=TransactionLists.getShelfLifeUnitsList(),vm.activityTypeList=[],vm.pharmaList=[],vm.biolList=[],vm.postMarketList=[],vm.consumHealthList=[],vm.veterinaryList=[],vm.clinicalBioList=[],vm.clinicalPhaList=[],vm.sequenceList=[],vm.descriptionList=[],vm.requesterList=[],vm.lifecycleModel=vm.lifecycleRecord,vm.endDateVisible=!1,vm.yearVisible=!1,vm.yearChangeVisible=!1,vm.requesterVisible=!1,vm.descriptionVisible=!1,vm.fromTo=!1,vm.descriptionChangeVisible=!1,vm.versionVisible=!1,vm.ectd=!1,vm.popOpened=!1,vm.alerts=[!1,!1],vm.dateOptions={showWeeks:!1},vm.lang=$translate.proposedLanguage()||$translate.use(),vm.descriptionObj=TransactionLists.getTransactionDescriptions(),vm.leadList=[],vm.isActivityLeadSet=!1,vm.activityLeadNote="",vm.activityTypeMapping={"B02-20160301-014":TransactionLists.getCtaType(),"B02-20160301-015":TransactionLists.getCta_aType(),"B02-20160301-072":TransactionLists.getPreCtaType()},vm.updateSummary=0,vm.showSummary=!1,vm.focusSummary=0,vm.dateFormatError=[{type:"required",displayAlias:"MSG_ERR_MAND"},{type:"date",displayAlias:"MSG_ERR_DATE_FORMAT"},{type:"min",displayAlias:"MSG_ERR_INVALID_END_DATE"}],vm.minLength6Error=[{type:"required",displayAlias:"MSG_ERR_MAND"},{type:"minlength",displayAlias:"MSG_LENGTH_6NUM_CN"}],vm.requiredOnly=[{type:"required",displayAlias:"MSG_ERR_MAND"}],vm.numberError=[{type:"required",displayAlias:"MSG_ERR_MAND"},{type:"number",displayAlias:"TYPE_NUMBER"}],vm.$onInit=function(){_setIdNames()},vm.$onChanges=function(changes){changes.dossierType&&(vm.dossierType=changes.dossierType.currentValue,vm.dossierType===TransactionLists.getPharmaceuticalValue()?vm.leadList=TransactionLists.getActivityLeadListByD22():vm.dossierType===TransactionLists.getBiologicValue()?vm.leadList=TransactionLists.getActivityLeadListByD21():vm.dossierType===TransactionLists.getVeterinaryValue()?(vm.leadList=TransactionLists.getActivityLeadListByD24(),vm.lifecycleModel.activityLead="B14-20160301-11",vm.selectActivityList()):vm.dossierType===TransactionLists.getClinicalValue()?vm.leadList=TransactionLists.getActivityLeadListByD26():vm.leadList=[],vm.lifecycleModel.activityLead="",vm.lifecycleModel.activityType="",vm.lifecycleModel.descriptionValue="",setDetailsAsNone(),vm.isActivityLeadSet=!1,vm.activityLeadNote="",vm.activityTypeNote="",vm.activityDescrNote=""),changes.lifecycleRecord&&_updateLocalModel(changes.lifecycleRecord.currentValue),changes.isEctd&&(vm.ectd=changes.isEctd.currentValue),changes.sequenceUpdated&&!changes.lifecycleRecord&&vm.lifecycleRecord&&(vm.lifecycleModel.sequence=vm.lifecycleRecord.sequence,_updateLocalModel(vm.lifecycleRecord)),changes.showErrorSummary&&(vm.showSummary=changes.showErrorSummary.currentValue,vm.updateErrorSummaryState()),changes.errorSummaryUpdate&&vm.updateErrorSummaryState()},$scope.$watch("lifecycleCtrl.lifecycleDetailsForm.$dirty",function(){vm.lifecycleDetailsForm.$dirty&&vm.isDetailValid({state:!1})},!0),$scope.$watch("lifecycleCtrl.lifecycleDetailsForm.$error",function(){vm.updateErrorSummaryState(),vm.updateErrorSummary()},!0),vm.userChanged=function(e){"requesterName"==e?vm.lifecycleModel.requesterName=vm.retrieveUser(vm.lifecycleModel.requesterNameTxt):"requesterName2"==e?vm.lifecycleModel.requesterName2=vm.retrieveUser(vm.lifecycleModel.requesterName2Txt):"requesterName3"==e&&(vm.lifecycleModel.requesterName3=vm.retrieveUser(vm.lifecycleModel.requesterName3Txt))},vm.updateErrorSummaryState=function(){vm.updateSummary=vm.updateSummary+1},vm.retrieveUser=function(userName){for(var i=0;i<vm.requesterList.length;i++){var user=vm.requesterList[i];if(user.en==userName)return user}return userName},vm.openStartDate=function(){vm.startDateOpen=!0},vm.openEndDate=function(){vm.endDateOpen=!0},vm.openFiledDate=function(){vm.filedDateOpen=!0},vm.disableDeleteState=function(){if(!vm.ectd)return!0;var value=parseInt(vm.lifecycleModel.sequence);return value!=vm.enableDeleteIndex()},vm.selectActivityLeadList=function(){if(!vm.dossierType)return void(vm.leadList=[]);switch(vm.dossierType){case TransactionLists.getPharmaceuticalValue():vm.leadList=TransactionLists.getActivityLeadListByD22();break;case TransactionLists.getBiologicValue():vm.leadList=TransactionLists.getActivityLeadListByD21();break;case TransactionLists.getVeterinaryValue():vm.leadList=TransactionLists.getActivityLeadListByD24(),vm.lifecycleModel.activityLead="B14-20160301-11",vm.selectActivityList();break;case TransactionLists.getClinicalValue():vm.leadList=TransactionLists.getActivityLeadListByD26();break;default:vm.leadList=[]}},vm.selectActivityList=function(){if(!vm.lifecycleModel.activityLead)return vm.activityTypeList=[],vm.updateProductProtocol({value:!1}),vm.isActivityLeadSet=!1,void(vm.activityLeadNote="");switch(vm.isActivityLeadSet=!0,(!vm.activityList||vm.activityList.length<1)&&(vm.activityList=TransactionLists.getActivityTypes()),vm.lifecycleModel.activityLead){case TransactionLists.getBiologicalLeadValue():0==vm.biolList.length&&(vm.biolList=ActivityFormFilterService.getBiolRAList(vm.activityList)),0==vm.clinicalBioList.length&&(vm.clinicalBioList=ActivityFormFilterService.getClinicalBioList(vm.activityList)),vm.dossierType===TransactionLists.getBiologicValue()?vm.activityTypeList=vm.biolList:vm.activityTypeList=vm.clinicalBioList,vm.activityLeadNote="ACTIVITY_LEAD_BIO";break;case TransactionLists.getPharmaLeadValue():0==vm.pharmaList.length&&(vm.pharmaList=ActivityFormFilterService.getPharmaRAList(vm.activityList)),0==vm.clinicalPhaList.length&&(vm.clinicalPhaList=ActivityFormFilterService.getClinicalPhaList(vm.activityList)),vm.dossierType===TransactionLists.getPharmaceuticalValue()?vm.activityTypeList=vm.pharmaList:vm.activityTypeList=vm.clinicalPhaList,vm.activityLeadNote="ACTIVITY_LEAD_PHA";break;case TransactionLists.getPostMarketLeadValue():0==vm.postMarketList.length&&(vm.postMarketList=ActivityFormFilterService.getPostMarketRAList(vm.activityList)),vm.activityTypeList=vm.postMarketList,vm.activityLeadNote="ACTIVITY_LEAD_PMV";break;case TransactionLists.getConsumHealthLeadValue():0==vm.consumHealthList.length&&(vm.consumHealthList=ActivityFormFilterService.getConsumHealthList(vm.activityList)),vm.activityTypeList=vm.consumHealthList,vm.activityLeadNote="ACTIVITY_LEAD_CHP";break;case TransactionLists.getVeterinaryLeadValue():0==vm.veterinaryList.length&&(vm.veterinaryList=ActivityFormFilterService.getVeterinaryList(vm.activityList)),vm.activityTypeList=vm.veterinaryList,vm.activityLeadNote="ACTIVITY_LEAD_VET";break;default:vm.lifecycleModel.activityLead&&console.warn("Not a valid lead choice"),vm.activityTypeList=[],vm.isActivityLeadSet=!1}if(vm.lifecycleModel.activityType){var temp=$filter("filter")(vm.activityTypeList,{id:vm.lifecycleModel.activityType.id})[0];vm.lifecycleModel.activityType=temp}vm.lifecycleModel.activityType?vm.setSequenceList(!1):(vm.lifecycleModel.activityTypeDisplay="",vm.lifecycleModel.descriptionValue="",vm.descriptionList="",setDetailsAsNone(),vm.activityTypeNote="",vm.activityDescrNote="",vm.setConcatDetails()),vm.updateErrorSummaryState()},vm.setSequenceList=function(templateChanges){if(templateChanges&&(vm.activityDescrNote=""),!vm.lifecycleModel.activityType)return vm.lifecycleModel.activityTypeDisplay="",vm.lifecycleModel.descriptionValue="",vm.descriptionList="",setDetailsAsNone(),vm.setConcatDetails(),vm.activityTypeNote="",void(vm.activityDescrNote="");var value=vm.lifecycleModel.activityType.id,temp=vm.lifecycleModel.descriptionValue;switch(vm.lifecycleModel.activityTypeDisplay=vm.lifecycleModel.activityType.id,vm.lifecycleModel.descriptionValue="",value){case"B02-20160301-001":"B14-20160301-11"===vm.lifecycleModel.activityLead?vm.descriptionList=TransactionLists.getV_AndsType():vm.descriptionList=TransactionLists.getAndsType();break;case"B02-20160301-018":"B14-20160301-11"===vm.lifecycleModel.activityLead?vm.descriptionList=TransactionLists.getV_DinaType():vm.descriptionList=TransactionLists.getDinaType();break;case"B02-20160301-022":vm.descriptionList=TransactionLists.getV_DinvType();break;case"B02-20160301-019":vm.descriptionList=TransactionLists.getDinbType();break;case"B02-20160301-031":vm.descriptionList=TransactionLists.getEundsType();break;case"B02-20160301-032":vm.descriptionList=TransactionLists.getEusndsType();break;case"B02-20160301-038":"B14-20160301-11"===vm.lifecycleModel.activityLead?vm.descriptionList=TransactionLists.getV_Level3Type():vm.descriptionList=TransactionLists.getLevel3Type();break;case"B02-20160301-046":"B14-20160301-11"===vm.lifecycleModel.activityLead?vm.descriptionList=TransactionLists.getV_MpncType():vm.descriptionList=TransactionLists.getMPNCType();break;case"B02-20160301-047":"B14-20160301-11"===vm.lifecycleModel.activityLead?vm.descriptionList=TransactionLists.getV_MpndsType():vm.descriptionList=TransactionLists.getMPNDSType();break;case"B02-20160301-049":"B14-20160301-11"===vm.lifecycleModel.activityLead?vm.descriptionList=TransactionLists.getV_MpsndsType():vm.descriptionList=TransactionLists.getMPSNDSType();break;case"B02-20160301-050":"B14-20160301-11"===vm.lifecycleModel.activityLead?vm.descriptionList=TransactionLists.getV_NcType():"B14-20160301-02"===vm.lifecycleModel.activityLead?vm.descriptionList=TransactionLists.getB_NcType():vm.descriptionList=TransactionLists.getNcType();break;case"B02-20160301-051":"B14-20160301-11"===vm.lifecycleModel.activityLead?vm.descriptionList=TransactionLists.getV_NdsType():vm.descriptionList=TransactionLists.getNdsType();break;case"B02-20160301-070":vm.descriptionList=TransactionLists.getPdcType();break;case"B02-20160301-071":vm.descriptionList=TransactionLists.getPdcBType();break;case"B02-20160301-067":vm.descriptionList=TransactionLists.getPANDType();break;case"B02-20160301-068":vm.descriptionList=TransactionLists.getPBRERCType();break;case"B02-20160301-069":vm.descriptionList=TransactionLists.getPBRERPVType();break;case"B02-20160301-075":vm.descriptionList=TransactionLists.getPRNDSType();break;case"B02-20160301-077":vm.descriptionList=TransactionLists.getPRSNDSType();break;case"B02-20160301-078":vm.descriptionList=TransactionLists.getpSurCType();break;case"B02-20160301-079":"B14-20160301-11"===vm.lifecycleModel.activityLead?vm.descriptionList=TransactionLists.getV_PsurPvType():vm.descriptionList=TransactionLists.getpSurPvType();break;case"B02-20160301-080":vm.descriptionList=TransactionLists.getRmpPvType();break;case"B02-20160301-082":"B14-20160301-11"===vm.lifecycleModel.activityLead?vm.descriptionList=TransactionLists.getV_SandsType():vm.descriptionList=TransactionLists.getSandsType();break;case"B02-20160301-084":"B14-20160301-11"===vm.lifecycleModel.activityLead?vm.descriptionList=TransactionLists.getV_SndsType():vm.descriptionList=TransactionLists.getSndsType();break;case"B02-20160301-085":vm.descriptionList=TransactionLists.getSndsCType();break;case"B02-20160301-088":"B14-20160301-11"===vm.lifecycleModel.activityLead?vm.descriptionList=TransactionLists.getV_UdraType():vm.descriptionList=TransactionLists.getUdraType();break;case"B02-20160301-089":vm.descriptionList=TransactionLists.getYbprType();break;case"B02-20160301-028":vm.descriptionList=TransactionLists.getDSurType();break;case"B02-20160301-043":"B14-20160301-11"===vm.lifecycleModel.activityLead?vm.descriptionList=TransactionLists.getV_MpdinType():vm.descriptionList=TransactionLists.getMPDINType();break;case"B02-20160301-020":vm.descriptionList=TransactionLists.getDindType();break;case"B02-20160301-021":vm.descriptionList=TransactionLists.getDinfType();break;case"B02-20190627-01":vm.descriptionList=TransactionLists.getIRSRPVType();break;case"B02-20190627-02":vm.descriptionList=TransactionLists.getPAPVType();break;case"B02-20190627-03":vm.descriptionList=TransactionLists.getPSAPVType();break;case"B02-20190627-04":vm.descriptionList=TransactionLists.getRCPVType();break;case"B02-20190627-05":vm.descriptionList=TransactionLists.getREGPVType();break;case"B02-20190627-06":vm.descriptionList=TransactionLists.getSANDSCType();break;case"B02-20160819-01":vm.descriptionList=TransactionLists.getPostDINType();break;case"B02-20190627-07":vm.descriptionList=TransactionLists.getEUANDSType();break;case"B02-20190627-08":vm.descriptionList=TransactionLists.getEUSANDSType();break;case"B02-20160301-041":vm.descriptionList=TransactionLists.getV_MpandsType();break;case"B02-20160301-048":vm.descriptionList=TransactionLists.getV_MpsandsType();break;case"B02-20180912-01":vm.descriptionList=TransactionLists.getV_RccType();break;case"B02-20200417-01":"B14-20160301-11"===vm.lifecycleModel.activityLead?vm.descriptionList=TransactionLists.getV_COV19Type():vm.descriptionList=TransactionLists.getCOVIR19Type();break;case"B02-20200417-02":"B14-20160301-11"===vm.lifecycleModel.activityLead?vm.descriptionList=TransactionLists.getV_COV19AMDType():vm.descriptionList=TransactionLists.getCOVID19AMDType();break;case"B02-20201028-01":vm.descriptionList=TransactionLists.getMPCOVType();break;case"B02-20201214-01":vm.descriptionList=TransactionLists.getMPCOVType();break;case"B02-20210108-01":"B14-20160301-11"===vm.lifecycleModel.activityLead?vm.descriptionList=TransactionLists.getVNDSCVType():vm.descriptionList=TransactionLists.getNDSCVType();break;case"B02-20160301-076":vm.descriptionList=TransactionLists.getVPROREType();break;case"B02-20180522-01":vm.descriptionList=TransactionLists.getBEType();break;case"B02-20240625-01":vm.descriptionList=TransactionLists.getNFAType();break;default:try{vm.descriptionList=vm.activityTypeMapping[value]}catch(e){vm.descriptionList=""}}if("D21"!=vm.dossierType&&"B14-20160301-02"!=vm.lifecycleModel.activityLead){var index=vm.descriptionList.indexOf("IMMEDIATE_NOTIFICATION");index>-1&&vm.descriptionList.splice(index,1)}vm.descriptionList=_createTxDescSortedArray(vm.descriptionList);var isPreCta="B02-20160301-072"===value;switch(vm.updateProductProtocol({value:isPreCta}),temp&&vm.descriptionList.indexOf(temp)!==-1?vm.lifecycleModel.descriptionValue=temp:setDetailsAsNone(),value){case"B02-20160301-088":vm.activityTypeNote="RA_TYPE_NOTE_UDRA";break;case"B02-20160301-038":vm.activityTypeNote="RA_TYPE_NOTE_L3NOC";break;case"B02-20160301-050":vm.activityTypeNote="RA_TYPE_NOTE_NC";break;case"B02-20160301-018":case"B02-20160301-020":case"B02-20160301-021":vm.activityTypeNote="RA_TYPE_NOTE_DIN";break;case"B02-20160301-070":vm.activityTypeNote="RA_TYPE_NOTE_PDC";break;case"B02-20160301-071":vm.activityTypeNote="RA_TYPE_NOTE_PDC";break;case"B02-20160819-01":vm.activityTypeNote="RA_TYPE_NOTE_PDINN";break;case"B02-20190627-07":vm.activityTypeNote="RA_TYPE_NOTE_EUANDS";break;case"B02-20160301-031":vm.activityTypeNote="RA_TYPE_NOTE_EUNDS";break;case"B02-20190627-08":vm.activityTypeNote="RA_TYPE_NOTE_EUSANDS";break;case"B02-20160301-032":vm.activityTypeNote="RA_TYPE_NOTE_EUSNDS";break;case"B02-20160301-079":vm.activityTypeNote="RA_TYPE_NOTE_PSURPV";break;default:vm.activityTypeNote=""}vm.activityTypeNote=$translate.instant(vm.activityTypeNote),"B02-20160301-038"===value&&(vm.lifecycleModel.controlNumber="000000")},vm.setDetailsState=function(){var value=vm.lifecycleModel.descriptionValue;if(!vm.lifecycleModel.activityType.id)return void(vm.descriptionList=[]);switch(value){case vm.descriptionObj.ADMINISTRATIVE:case vm.descriptionObj.CANCEL_LETTER:case vm.descriptionObj.CHANGE_TO_DIN:case vm.descriptionObj.DIN_DISCONTINUED:case vm.descriptionObj.DRUG_NOTIF_FORM:case vm.descriptionObj.INITIAL:case vm.descriptionObj.NOTIFICATION_INTERRUPT_SALE:case vm.descriptionObj.PANDEMIC_APPL:case vm.descriptionObj.POST_CLEARANCE_DATA:case vm.descriptionObj.POST_AUTH_DIV1_CHANGE:case vm.descriptionObj.PRESUB_MEETING_PKG:case vm.descriptionObj.PRIORITY_REVIEW_RQ:case vm.descriptionObj.PRISTINE_PM:case vm.descriptionObj.PRISTINE_PM_2LANG:case vm.descriptionObj.PUB_RELEASE_INFO:case vm.descriptionObj.RESSESS_ORDER:case vm.descriptionObj.WRITTEN_CONSULT_REQ:case vm.descriptionObj.RECON_DECIS_LTR_INTENT:case vm.descriptionObj.RECON_DECIS_RQ_RECON:case vm.descriptionObj.RECON_DECIS_OTHER_INFO:case vm.descriptionObj.LABEL_PREAPPROVAL_2LANG:case vm.descriptionObj.SIGNAL_WORK_UP:case vm.descriptionObj.PRESUB_MEETING_RQ:case vm.descriptionObj.CORR_PATENT_MED:case vm.descriptionObj.ALLEGATION_NOTICE:case vm.descriptionObj.FORM_IV:case vm.descriptionObj.FORM_V:case vm.descriptionObj.CONSENT_LTR:case vm.descriptionObj.DATA_PROTECT_CORRESP:case vm.descriptionObj.SEQUENCE_CLEANUP:case vm.descriptionObj.TERM_COND_COMM:setDetailsAsNone(),vm.setConcatDetails();break;case vm.descriptionObj.COMMENTS_NOC:case vm.descriptionObj.COMMENTS_SUMMARY_BASIS:setAsRequesterwithDate(),vm.setConcatDetails();break;case vm.descriptionObj.COMMENTS_REGULARTORY_DECISION:case vm.descriptionObj.MEETING_MINUTES:case vm.descriptionObj.ADVISEMENT_LETTER_RESPONSE:case vm.descriptionObj.ADV_COMP_REQ:case vm.descriptionObj.NOC_RESPONSE:case vm.descriptionObj.NOD_RESPONSE:case vm.descriptionObj.NON_RESPONSE:case vm.descriptionObj.SDN_RESPONSE:case vm.descriptionObj.SCREENING_ACCEPT_RESPONSE:case vm.descriptionObj.NOL_RESPONSE:case vm.descriptionObj.UDRA_MEETING_MINUTES:case vm.descriptionObj.CTN_ETHICS:case vm.descriptionObj.CTN_RESPONSE:setAsStartDate(),vm.setConcatDetails();break;case vm.descriptionObj.RMP_VERSION_DATE:case vm.descriptionObj.CSOtRMP:case vm.descriptionObj.CTN_INVESTIGATOR:case vm.descriptionObj.CTN_FORM_BROC_UPDATES:setVersionAndDate(),vm.setConcatDetails();break;case vm.descriptionObj.CTN_INFORMED:case vm.descriptionObj.CTN_PROTOCOL_INFO_UPDATE:case vm.descriptionObj.CTN_PROTOCOL_UPDATE:case vm.descriptionObj.CTN_IMPD_UPDATE:setVersion(),vm.setConcatDetails();break;case vm.descriptionObj.FOR_PERIOD:setAsDatePeriod(),vm.setConcatDetails();break;case vm.descriptionObj.UNSOLICITED_DATA:case vm.descriptionObj.CTN_ADMINISTRATIVE:case vm.descriptionObj.CTN_APPENDIX:case vm.descriptionObj.CTN_NEW_MANUFACTURING:case vm.descriptionObj.CTN_CONTACT:case vm.descriptionObj.CTN_SAFETY:case vm.descriptionObj.CTN_SOURCE:case vm.descriptionObj.CTN_STUDY_DISC:case vm.descriptionObj.ROLLING_INFO:setAsDescription(),vm.setConcatDetails();break;case vm.descriptionObj.YEAR_LIST_OF_CHANGE:setAsDescriptionYear(),vm.setConcatDetails();break;case vm.descriptionObj.BE_CLARIF_RESPONSE:case vm.descriptionObj.CLIN_CLARIF_RESPONSE:case vm.descriptionObj.EMAIL_RQ_RESPONSE:case vm.descriptionObj.HSC_RQ_RESPONSE:case vm.descriptionObj.LABEL_CLARIF_RESPONSE:case vm.descriptionObj.NONCLIN_CLARIF_RESPONSE:case vm.descriptionObj.PROCESSING_CLARIF_RESPONSE:case vm.descriptionObj.QUAL_CLIN_CLARIF_RESPONSE:case vm.descriptionObj.QUAL_CLARIF_RESPONSE:case vm.descriptionObj.SCREENING_CLARIF_RESPONSE:case vm.descriptionObj.PHONE_RQ_RESPONSE:case vm.descriptionObj.CLARIF_RESPONSE:case vm.descriptionObj.QHSC_RQ_RESPONSE:case vm.descriptionObj.CHSC_RQ_RESPONSE:case vm.descriptionObj.UDRA_EMAIL_RQ_RESPONSE:case vm.descriptionObj.UDRA_PROCESSING_CLARIF_RESPONSE:case vm.descriptionObj.QCHSC_RQ_RESPONSE:setAsRequesterwithDate(),vm.setConcatDetails();break;case vm.descriptionObj.POST_NOC_CHANGE:setAsDescriptionChange(),vm.setConcatDetails();break;case vm.descriptionObj.CTN_DATA:setAsDescriptionWithDate(),vm.setConcatDetails();break;case vm.descriptionObj.YEAR:setAsYearOnly(),vm.setConcatDetails();break;case vm.descriptionObj.CTN_SHELF_PD:case vm.descriptionObj.CTN_SHELF_DS:setAsFromTo(),vm.setConcatDetails();break;default:setDetailsAsNone(),vm.setConcatDetails()}switch(value){case vm.descriptionObj.ADMINISTRATIVE:vm.activityDescrNote="ADMIN_DESCR";break;case vm.descriptionObj.CANCEL_LETTER:vm.activityDescrNote="CANCEL_LETTER_DESCR";break;case vm.descriptionObj.CHANGE_TO_DIN:vm.activityDescrNote="CHANGE_TO_DIN_DESCR";break;case vm.descriptionObj.ROLLING_INFO:vm.activityDescrNote="ROLLING_INFO_DESCR";break;case vm.descriptionObj.PROCESSING_CLARIF_RESPONSE:vm.activityDescrNote="PROCESSING_CLARIF_RESPONSE_DESCR";break;case vm.descriptionObj.POST_NOC_CHANGE:vm.activityDescrNote="POST_NOC_CHANGE_DESCR";break;case vm.descriptionObj.POST_CLEARANCE_DATA:vm.activityDescrNote="POST_CLEARANCE_DATA_DESCR";break;case vm.descriptionObj.POST_AUTH_DIV1_CHANGE:vm.activityDescrNote="POST_NOC_DIV1_CHANGE_DESCR";break;case vm.descriptionObj.POST_ANTH_CHANGE:vm.activityDescrNote="POST_ANTH_CHANGE_DESCR";break;case vm.descriptionObj.PANDEMIC_APPL:vm.activityDescrNote="PANDEMIC_APPL_DESCR";break;case vm.descriptionObj.INITIAL:vm.activityDescrNote="INITIAL_DESCR";break;case vm.descriptionObj.MEETING_MINUTES:vm.activityDescrNote="MEETING_MINUTES_DESCR";break;case vm.descriptionObj.SCREENING_CLARIF_RESPONSE:vm.activityDescrNote="SCREENING_CLARIF_RESPONSE_DESCR";break;case vm.descriptionObj.PRESUB_MEETING_RQ:vm.activityDescrNote="PRESUB_MEETING_RQ_DESCR";break;case vm.descriptionObj.UNSOLICITED_DATA:vm.activityDescrNote="UNSOLICITED_DATA_DESCR";break;case vm.descriptionObj.ADVISEMENT_LETTER_RESPONSE:vm.activityDescrNote="ADVISEMENT_LETTER_RESPONSE_DESCR";break;case vm.descriptionObj.NOF_DRUG_SHORT:vm.activityDescrNote="NOF_DRUG_SHORT_DESCR";break;case vm.descriptionObj.QUALITY_ISSU:vm.activityDescrNote="QUALITY_ISSU_DESCR";break;case vm.descriptionObj.GMP_COMP_ISSU:vm.activityDescrNote="GMP_COMP_ISSU_DESCR";break;case vm.descriptionObj.RECLASS_LOT_RELEASE:vm.activityDescrNote="RECLASS_LOT_RELEASE_DESCR";break;case vm.descriptionObj.NOC_COMPLIANCE:vm.activityDescrNote="NOC_COMPLIANCE_DESCR";break;case vm.descriptionObj.UDRA_CANCEL_LETTER:vm.activityDescrNote="UDRA_CANCEL_LETTER_DESCR";break;case vm.descriptionObj.SEQUENCE_CLEANUP:vm.activityDescrNote="SEQUENCE_CLEANUP_DESCR";break;case vm.descriptionObj.UDRA_MEETING_MINUTES:vm.activityDescrNote="UDRA_MEETING_MINUTES_DESCR";break;case vm.descriptionObj.UDRA_EMAIL_RQ_RESPONSE:vm.activityDescrNote="UDRA_EMAIL_RQ_RESPONSE_DESCR";break;case vm.descriptionObj.UDRA_PROCESSING_CLARIF_RESPONSE:vm.activityDescrNote="UDRA_PROCESSING_CLARIF_RESPONSE_DESCR";break;case vm.descriptionObj.GEN_VOL_NOF:vm.activityDescrNote="GEN_VOL_NOF_DESCR";break;case vm.descriptionObj.DIN_DISCONTINUED:vm.activityDescrNote="DIN_DISCONTINUED_DESCR";break;case vm.descriptionObj.NOTIFICATION_INTERRUPT_SALE:vm.activityDescrNote="NOTIFICATION_INTERRUPT_SALE_DESCR";break;case vm.descriptionObj.POST_MARKET_SURV:vm.activityDescrNote="POST_MARKET_SURV_DESCR";break;case vm.descriptionObj.MHPD_RQ_RESPONSE:vm.activityDescrNote="MHPD_RQ_LETTER_DESCR";break;case vm.descriptionObj.BENEFIT_RISK_ASSESS:vm.activityDescrNote="BENEFIT_RISK_ASSESS_DESCR";break;case vm.descriptionObj.NOTIFICATION_CHANGE:vm.activityDescrNote="NOTIFICATION_CHANGE_DESCR";break;case vm.descriptionObj.TEST_STUDIES_ORDER:vm.activityDescrNote="TEST_STUDIES_ORDER_DESCR";break;case vm.descriptionObj.ISSUE_SAFETY_REQUEST:vm.activityDescrNote="ISSUE_SAFETY_REQUEST_DESCR";break;case vm.descriptionObj.FOREIGN_SAFETY_NOTIFICATION:vm.activityDescrNote="FOREIGN_SAFETY_NOTIFICATION_DESCR";break;case vm.descriptionObj.RISK_COMMUN_DOC:vm.activityDescrNote="RISK_COMMUN_DOC_DESCR";break;case vm.descriptionObj.FINAL_RISK_COM:vm.activityDescrNote="FINAL_RISK_COM_DESCR";break;case vm.descriptionObj.DISSEM_LIST:vm.activityDescrNote="DISSEM_LIST_DESCR";break;case vm.descriptionObj.PATIENT_SAFETY_INFO:vm.activityDescrNote="PATIENT_SAFETY_INFO_DESCR";break;case vm.descriptionObj.IMMEDIATE_NOTIFICATION:vm.activityDescrNote="IMMEDIATE_NOTIFICATION_DESCR";break;default:vm.activityDescrNote=""}vm.activityDescrNote=$translate.instant(vm.activityDescrNote)},vm.setConcatDetails=function(){var startDate="",endDate="",concatText="",lang=$translate.proposedLanguage()||$translate.use(),transactionDescription=$translate.instant(vm.lifecycleModel.descriptionValue,"","",lang);vm.descriptionVisible&&!vm.yearChangeVisible&&(concatText=transactionDescription+" - "+vm.lifecycleModel.details),vm.startDateVisible&&(startDate=convertDate(vm.lifecycleModel.startDate),concatText=vm.versionVisible?"en"==lang?" dated "+startDate:" daté du "+startDate:"en"==lang?(concatText?concatText:transactionDescription)+" dated "+startDate:(concatText?concatText:transactionDescription)+" daté du "+startDate),vm.endDateVisible&&(endDate=convertDate(vm.lifecycleModel.endDate),concatText="en"==lang?transactionDescription+" "+startDate+" to "+endDate:transactionDescription+" "+startDate+" à "+endDate),vm.versionVisible&&(concatText=transactionDescription===vm.descriptionObj.RMP_VERSION_DATE?transactionDescription+" "+vm.lifecycleModel.sequenceVersion+concatText:transactionDescription===vm.descriptionObj.CTN_PROTOCOL_INFO_UPDATE?"CTN-Protocol version "+vm.lifecycleModel.sequenceVersion+" and Informed Consent Form version "+vm.lifecycleModel.sequenceVersion+" Update":transactionDescription===vm.descriptionObj.CTN_FORM_BROC_UPDATES?"CTN-Informed Consent Form version "+vm.lifecycleModel.sequenceVersion+" and Investigator’s Brochure version "+vm.lifecycleModel.sequenceVersion+concatText+" Updates":transactionDescription+" version "+vm.lifecycleModel.sequenceVersion+concatText),vm.yearChangeVisible&&(concatText=vm.lifecycleModel.year+", "+vm.lifecycleModel.details),vm.yearVisible&&(concatText=vm.lifecycleModel.year),vm.descriptionChangeVisible&&(concatText=transactionDescription+"\n"+vm.lifecycleModel.detailsChange),vm.fromTo&&(concatText="en"==lang?transactionDescription+" From "+vm.lifecycleModel.fromValue+" To "+vm.lifecycleModel.toValue:transactionDescription+" De "+vm.lifecycleModel.fromValue+" à "+vm.lifecycleModel.toValue),concatText||(concatText=transactionDescription),vm.lifecycleModel.sequenceConcat=concatText},vm["delete"]=function(){vm.onDelete({id:vm.lifecycleModel.sequence})},vm.discardChanges=function(){vm.lifecycleDetailsForm.$pristine||(_updateLocalModel(vm.lifecycleRecord),vm.lifecycleDetailsForm.$setPristine(),vm.isDetailValid({state:vm.lifecycleDetailsForm.$valid}))},vm.updateValid=function(){vm.isDetailValid({state:vm.lifecycleDetailsForm.$valid&&!vm.lifecycleDetailsForm.$dirty})},vm.updateLivecycleModel=function(){vm.lifecycleDetailsForm.$valid?(vm.isDetailValid({state:!0}),vm.lifecycleDetailsForm.$setPristine(),vm.onUpdate({record:vm.lifecycleModel})):(vm.showSummary=!0,vm.makeFocused(),vm.updateErrorSummaryState())},vm.makeFocused=function(){vm.focusSummary=vm.focusSummary+1},vm.showError=function(ctrl){return!!ctrl&&!!(ctrl.$invalid&&ctrl.$touched||vm.showSummary&&ctrl.$invalid)},vm.addInstruct=function(value){angular.isUndefined(value)||value<vm.alerts.length&&(vm.alerts[value]=!0)},vm.closeAlert=function(value){angular.isUndefined(value)||value<vm.alerts.length&&(vm.alerts[value]=!1)}}angular.module("lcDetailsModule").component("cmpLifecycleDetails",{templateUrl:"app/scripts/components/lifecycleDetails/tpl-lifecycle-details_20240910_0916.html",controller:lifecycleRecCtrl,controllerAs:"lifecycleCtrl",bindings:{lifecycleRecord:"<",onUpdate:"&",isDetailValid:"&",onDelete:"&",enableDeleteIndex:"&",isEctd:"<",dossierType:"<",sequenceUpdated:"<",errorSummaryUpdate:"<",showErrorSummary:"<",updateErrorSummary:"&",updateProductProtocol:"&",htIndxList:"<",hideRaLead:"<"}}),lifecycleRecCtrl.$inject=["ActivityFormFilterService","TransactionLists","$filter","$translate","$scope"]}(),function(){"use strict";angular.module("lifecycleList",["filterLists","lcDetailsModule","expandingTable"])}(),function(){"use strict";function lifecycleListCtrl($filter,TransactionLists){function _checkFirstRecord(){if(vm.lifecycleList&&0!==vm.lifecycleList.length&&!(vm.lifecycleList.length>1)){var record=angular.copy(vm.lifecycleList[0]);if(vm.ectdValue){for(var seqText=""+vm.startingSequence,pad=4-seqText.length,padText="",i=0;i<pad;i++)padText+="0";seqText=padText+seqText,record.sequence=seqText}else record.sequence="";vm.lifecycleList[0]=record}}function convertDate(value){if(!value)return value;var aDate=new Date(value),month=+(aDate.getMonth()+1);month<10&&(month="0"+month);var day=aDate.getDate();day<10&&(day="0"+day);var result=aDate.getFullYear()+"-"+month+"-"+day;return result}var vm=this;vm.selectRecord=-1,vm.isDetailsValid=!0,vm.lifecycleList=[],vm.setCollapsed=0,vm.deletableIndex=0,vm.oneRecord="",vm.ectdValue=!1,vm.isParentDirty=!1,vm.addFocused=!1,vm.resetCollapsed=!1,vm.activityTypes=[],vm.startingSequence=0,vm.seqUpdated=!1,vm.showSummary=!1,vm.finalState=!1,vm.requiredFlag=!0,vm.finalRecNum=0,vm.columnDef=[{label:"CONTROL_NUMBER",binding:"controlNumber",width:"8"},{label:"ACTIVITY_LEAD",binding:"activityLead",width:"12"},{label:"REG_ACTIVITY_TYPE",binding:"activityTypeDisplay",width:"30"},{label:"SEQUENCE_TYPE",binding:"sequenceConcat",width:"48"}],vm.$onInit=function(){vm.activityTypes=TransactionLists.getActivityTypes(),vm.selectRecord=0,vm.addFocused=!1,vm.startingSequence=0},vm.$onChanges=function(changes){changes.records&&(vm.lifecycleList=changes.records.currentValue,vm.lifecycleList.length<1&&vm.addTransaction(),vm.isDetailsValid=!0,vm.updateErrorState(),vm.startingSequence=0),changes.parentDirty&&(vm.isParentDirty=changes.parentDirty.currentValue),changes.isEctd&&(vm.ectdValue=changes.isEctd.currentValue,_checkFirstRecord()),changes.sequenceUpdated&&(vm.seqUpdated=changes.sequenceUpdated.currentValue),changes.showErrorSummary&&(vm.showSummary=changes.showErrorSummary.currentValue),changes.isFinal&&(vm.finalState=changes.isFinal.currentValue,vm.finalRecNum=0),changes.isFileLoaded&&changes.isFileLoaded.currentValue&&(vm.requiredFlag=!1)},vm.deleteRecord=function(aID){var idx=vm.lifecycleList.indexOf($filter("filter")(vm.lifecycleList,{sequence:aID},!0)[0]);vm.lifecycleList.splice(idx,1),vm.onUpdate({newList:vm.lifecycleList}),vm.selectRecord=-1,vm.isDetailsValid=!0,vm.deprecateSequence(),vm.updateErrorState(),vm.requiredFlag=!1,vm.resetCollapsed=!vm.resetCollapsed,vm.addFocused=!1},vm.lastRecordSequence=function(){return vm.getCurrentSequence()-1},vm.updateErrorState=function(){if(vm.lifecycleList&&0!==vm.lifecycleList.length){
for(var i=0;i<vm.lifecycleList.length;i++)if(vm.lifecycleList[i].isSaved)return void(vm.oneRecord="is value");vm.oneRecord=""}else vm.oneRecord=""},vm.addTransaction=function(){var defaultTransaction=vm.getNewTransaction();vm.lifecycleList.unshift(defaultTransaction),vm.resetCollapsed=!vm.resetCollapsed,vm.selectRecord=0,vm.finalState&&vm.finalRecNum++,vm.addFocused=!1,vm.setValid(!1),vm.updateErrorState()},vm.setStartingSequence=function(){(isNaN(vm.startingSequence)||null===vm.startingSequence)&&(vm.startingSequence=0),vm.setSequenceValue({start:vm.startingSequence})},vm.isSelectedRecord=function(){return 0===vm.selectRecord},vm.isAddDisabled=function(){return vm.lifecycleList.length>0},vm.setValid=function(detailValid){vm.isDetailsValid=detailValid},vm.onUpdateLifecycleRecord=function(record){var idx=vm.lifecycleList.indexOf($filter("filter")(vm.lifecycleList,{sequence:record.sequence},!0)[0]);record.dateFiled=convertDate(record.dateFiled),record.startDate=convertDate(record.startDate),record.endDate=convertDate(record.endDate),record.isSaved=!0,vm.lifecycleList[idx]=angular.copy(record),vm.setValid(!0),vm.selectRecord=-1,vm.requiredFlag=!1,vm.resetCollapsed=!vm.resetCollapsed,vm.addFocused=!0,vm.updateErrorState()}}angular.module("lifecycleList").component("cmpLifecycleList",{templateUrl:"app/scripts/components/lifecycleList/tpl-lifecycle-list_20240910_0916.html",bindings:{records:"<",onUpdate:"&",isAmend:"&",isFinal:"<",isFileLoaded:"<",getNewTransaction:"&",setSequenceValue:"&",deprecateSequence:"&",showErrorSummary:"<",isEctd:"<",getDossierType:"<",parentDirty:"<",sequenceUpdated:"<",getCurrentSequence:"&"},controller:lifecycleListCtrl,controllerAs:"lifeListCtrl"}),lifecycleListCtrl.$inject=["$filter","TransactionLists"]}(),function(){"use strict";angular.module("fileIO",[])}(),function(){"use strict";function ngFileSelect(hpfbFileReader){function link(scope,element,attrs){scope.rootTag=attrs.rootTag,element.bind("change",function(e){scope.file=(e.srcElement||e.target).files[0],hpfbFileReader.readAsDataText(scope.file,scope).then(function(result){scope.hpfbFileSelect({fileContent:result})})})}var directive={link:link,restrict:"A",scope:{hpfbFileSelect:"&"}};return directive}angular.module("fileIO").directive("hpfbFileSelect",ngFileSelect),ngFileSelect.$inject=["hpfbFileProcessing"]}(),function(){"use strict";function FileSelectController(hpfbFileProcessing){var vm=this;vm.fileTypes=".xml, .hcsc",vm.modelCallback=function(fileContent){if(vm.status="",fileContent&&fileContent.jsonResult){var versionArray=fileContent.jsonResult[vm.rootElem].software_version.split(".");vm.versionExpected&&vm.versionExpected!==versionArray[0]?(fileContent=null,vm.status="MSG_ERR_FILE_VERSION"):(vm.status=fileContent.messages,vm.updateModelRoot({fileContent:fileContent}))}else vm.status=fileContent.messages,vm.updateModelRoot({fileContent:fileContent});angular.element(fileLoad).trigger("focus")},angular.element(hpfbFileProcessingZone).on("dragover",function(e){e.stopPropagation(),e.preventDefault()}),angular.element(hpfbFileProcessingZone).on("dragenter",function(e){e.stopPropagation(),e.preventDefault(),e.originalEvent.dataTransfer.dropEffect="link"}),angular.element(hpfbFileProcessingZone).on("drop",function(e){e.stopPropagation(),e.preventDefault(),$("document").ready(function(){$("#fileLoad")[0].files=e.originalEvent.dataTransfer.files,$("#fileLoad").trigger("change")})})}angular.module("fileIO").component("hpfbFileSelect",{templateUrl:"app/scripts/components/fileIO/fileSelect_20240910_0916.html",controller:FileSelectController,bindings:{updateModelRoot:"&",rootElem:"@",versionExpected:"@"}}),FileSelectController.$inject=["hpfbFileProcessing"]}(),function(){"use strict";function FileWriteController(hpfbFileProcessing){function _generateFile(){"JSON"===vm.saveType.toUpperCase()?hpfbFileProcessing.writeAsJson(vm.jsonToSave,vm.fileName,vm.rootTag):"XML"===vm.saveType.toUpperCase()&&hpfbFileProcessing.writeAsXml(vm.jsonToSave,vm.fileName,vm.rootTag)}function _init(){vm.buttonDisabled?"true"===vm.buttonDisabled.toLowerCase()?vm.buttonDisabled=!0:"false"===vm.buttonDisabled.toLowerCase()?vm.buttonDisabled=!1:vm.buttonDisabled=!1:vm.buttonDisabled=!1}var vm=this;vm.$onInit=_init,vm.generate=_generateFile}angular.module("fileIO").component("hpfbFileSave",{templateUrl:"app/scripts/components/fileIO/fileSave_20240910_0916.html",controller:FileWriteController,bindings:{jsonToSave:"<",rootTag:"@",saveType:"@",buttonLabel:"@",buttonDisabled:"@"}}),FileWriteController.$inject=["hpfbFileProcessing"]}(),function(){"use strict";function fileReader($q){function onLoad(reader,deferred,scope,file){return function(){scope.$apply(function(){if(file){var splitFile=file.name.split("."),fileType=splitFile[splitFile.length-1];fileType.toLowerCase()==draft_file_type?(convertToJSONObjects(reader,scope),checkRootTagMatch(reader,scope)):"xml"===fileType.toLowerCase()?(convertXMLToJSONObjects(reader,scope),checkRootTagMatch(reader,scope)):(convertResult.parseResult=null,convertResult.messages=msg_err_fileType,reader.parseResult=convertResult)}deferred.resolve(reader.parseResult)})}}function onError(reader,deferred,scope){return function(){scope.$apply(function(){deferred.reject(msg_err_load)})}}function getReader(deferred,scope,file){var reader=new FileReader;return reader.onload=onLoad(reader,deferred,scope,file),reader.onError=onError(reader,deferred,scope),reader.parseResult=null,reader}function readAsDataText(file,scope){var deferred=$q.defer(),reader=getReader(deferred,scope,file);return file?reader.readAsText(file):(reader.parseResult=convertResult,reader.parseResult.messages="",reader.parseResult.jsonResult=null,deferred.resolve(reader.parseResult)),deferred.promise}function convertToJSONObjects(reader,scope){try{convertResult.jsonResult=JSON.parse(reader.result),convertResult.jsonResult[scope.rootTag].importFileType=draft_file_type,convertResult.messages=msg_success,reader.parseResult=convertResult}catch(e){convertResult.jsonResult=null,convertResult.messages=msg_err_jsonparse,reader.parseResult=convertResult}}function convertXMLToJSONObjects(reader,scope){var xmlConfig={escapeMode:!0,emptyNodeForm:"text",useDoubleQuotes:!0},xmlConverter=new X2JS(xmlConfig);convertResult.jsonResult=xmlConverter.xml_str2json(reader.result),convertResult.jsonResult&&convertResult.jsonResult[scope.rootTag]?(convertResult.messages=msg_success,convertResult.jsonResult[scope.rootTag].importFileType="xml"):convertResult.messages=msg_err_xmlparse,reader.parseResult=convertResult}function convertJSONObjectsToXML(jsonObj){var xmlConfig={escapeMode:!0,emptyNodeForm:"text",useDoubleQuotes:!0},jsonConverter=new X2JS(xmlConfig),xmlResult=null;return xmlResult=jsonConverter.json2xml_str(jsonObj)}function checkRootTagMatch(reader,scope){scope.rootTag&&reader.parseResult&&reader.parseResult.jsonResult&&(reader.parseResult.jsonResult[scope.rootTag]||(reader.parseResult.jsonResult=null,reader.parseResult.messages=msg_err_formType))}function jsonToFile(jsonObj,fileName,rootTag){if(jsonObj){var makeStrSave=JSON.stringify(jsonObj),blob=new Blob([makeStrSave],{type:"text/plain;charset=utf-8"});fileName?fileName+="."+draft_file_type:fileName="hpfbDraft."+draft_file_type,saveAs(blob,fileName)}}function xmlToFile(jsonObj,fileName,rootTag,xslName){if(jsonObj){var xmlResult=convertJSONObjectsToXML(jsonObj);xmlResult=xslName?'<?xml version="1.0" encoding="UTF-8"?><?xml-stylesheet  type="text/xsl" href="'+xslName+'"?>'+xmlResult:'<?xml version="1.0" encoding="UTF-8"?><?xml-stylesheet  type="text/xsl" href="REP_Combined.xsl"?>'+xmlResult;var blob=new Blob([xmlResult],{type:"text/plain;charset=utf-8"});fileName?fileName+=".xml":fileName="hpfbXML.xml",saveAs(blob,fileName)}}var msg_success="MSG_SUCCESS_LOAD",msg_err_jsonparse="MSG_ERR_JSONPARSE",msg_err_xmlparse="MSG_ERR_XMLPARSE",msg_err_load="MSG_ERR_FILE_LOAD",msg_err_fileType="MSG_ERR_FILE_TYPE",msg_err_formType="MSG_ERR_FORM_TYPE",draft_file_type="hcsc",convertResult={jsonResult:"",messages:""},service={readAsDataText:readAsDataText,writeAsJson:jsonToFile,writeAsXml:xmlToFile};return service}angular.module("fileIO").factory("hpfbFileProcessing",fileReader),fileReader.$inject=["$q"]}(),function(){"use strict";angular.module("expandingTable",[])}(),function(){"use strict";function expandingTableCtrl($filter,$scope,$translate){function _setNumberColumns(){vm.disableErrorCol&&(vm.numberCols=vm.numberCols+1)}function _recalculateColumnDefs(colDefs,numCols){var caretWidth=2,errorWidth=5,totalWidth=caretWidth+errorWidth,toSubtract=totalWidth/numCols,result=[];if(vm.disableErrorCol)return colDefs;for(var i=0;i<numCols;i++){var oneDef=angular.copy(colDefs[i]);oneDef.width>toSubtract&&(oneDef.width=oneDef.width-toSubtract),result.push(oneDef)}return result}function updateTableRow(textIndex){var selectIndex=parseInt(textIndex);selectIndex>=0&&vm.selectTableRow(selectIndex)}function _createArray(arraySize,initialVal){for(var anArray=[],i=0;i<arraySize;i++)anArray.push(initialVal);return anArray}var vm=this;vm.focused=!1,vm.columnDefinitions={},vm.disableExpand=!1,vm.tableRowExpanded=!1,vm.tableRowIndexCurrExpanded="",vm.tableRowIndexPrevExpanded="",vm.numberCols=1,vm.disableErrorCol=!1,vm.dayDataCollapse=_createArray(0,!0),vm.formName="expandTblCtrl.transcludeForm",vm.lang=$translate.proposedLanguage()||$translate.use(),vm.$onInit=function(){vm.listItems&&(vm.dayDataCollapse=_createArray(vm.listItems.length,!0))},vm.getExpandedState=function(row){return!(row!==vm.tableRowIndexCurrExpanded&&vm.dayDataCollapse[row]&&(!vm.transcludeForm[row]||vm.transcludeForm[row].$valid))},vm.$onChanges=function(changes){if(changes.listItems&&(vm.listItems?vm.dayDataCollapse=_createArray(vm.listItems.length,!0):vm.dayDataCollapse=_createArray(0,!0),vm.resetTableRow()),changes.tname&&changes.tname.currentValue&&(vm.formName=changes.tname.currentValue),changes.resetToCollapsed&&(vm.resetTableRow(),changes.selectRecord||updateTableRow(vm.selectRecord)),changes.selectRecord){var selectIndex=parseInt(changes.selectRecord.currentValue);selectIndex>=0?vm.selectTableRow(selectIndex):vm.resetTableRow()}changes.disableSelection&&(vm.disableExpand=changes.disableSelection.currentValue),changes.columnDef&&(vm.numberCols=changes.columnDef.currentValue.length,vm.columnDefinitions=_recalculateColumnDefs(changes.columnDef.currentValue,vm.numberCols),_setNumberColumns()),changes.disableErrColumn&&(vm.disableErrorCol=changes.disableErrColumn.currentValue,vm.numberCols=vm.columnDef.length,vm.disableErrorCol=!0,_setNumberColumns())},vm.formInError=function(aForm){return aForm&&aForm.$invalid?"Y":"N"},vm.deletedRow=function(){vm.tableRowExpanded=!1,vm.tableRowIndexCurrExpanded=""},vm.resetTableRow=function(){vm.tableRowIndexPrevExpanded="",vm.tableRowExpanded=!1,vm.tableRowIndexCurrExpanded="",vm.listItems?vm.dayDataCollapse=_createArray(vm.listItems.length,!0):_createArray(0,!0)},vm.dayDataCollapseFn=function(){for(var i=0;vm.listItems.length-1;i+=1)vm.dayDataCollapse.append("true")},vm.selectTableRow=function(index){vm.disableExpand||("undefined"===vm.dayDataCollapse?vm.dayDataCollapse=vm.dayDataCollapseFn():vm.tableRowExpanded===!1&&""===vm.tableRowIndexCurrExpanded?(vm.tableRowIndexPrevExpanded="",vm.tableRowExpanded=!0,vm.tableRowIndexCurrExpanded=index,vm.dayDataCollapse[index]=!1):vm.tableRowExpanded===!0&&(vm.tableRowIndexCurrExpanded===index?(vm.tableRowExpanded=!1,vm.tableRowIndexCurrExpanded="",vm.dayDataCollapse[index]=!0):(vm.tableRowIndexPrevExpanded=vm.tableRowIndexCurrExpanded,vm.tableRowIndexCurrExpanded=index,vm.dayDataCollapse[vm.tableRowIndexPrevExpanded]=!0,vm.dayDataCollapse[vm.tableRowIndexCurrExpanded]=!1)))},vm.isRequiredRecordSet=function(){return!(!vm.isRequiredRecord||vm.isInternal)},vm.isRecordShowsOutside=function(row){return vm.isInternal?!vm.dayDataCollapse[row]:(vm.transcludeForm[row]&&vm.transcludeForm[row].$invalid&&(vm.dayDataCollapse[row]=!1),!(vm.dayDataCollapse[row]&&(!vm.transcludeForm[row]||vm.transcludeForm[row].$valid))||vm.isRequiredRecordSet())},vm.isRecordShowsInside=function(row){return!vm.isInternal||!(vm.dayDataCollapse[row]&&vm.transcludeForm[row].$valid)}}angular.module("expandingTable").component("cmpExpandingTable",{templateUrl:"app/scripts/components/expandingTable/tpl-expanding-table_20240910_0916.html",controller:expandingTableCtrl,controllerAs:"expandTblCtrl",transclude:!0,bindings:{title:"@",preId:"@",listItems:"<",columnDef:"<",disableSelection:"<",isRequiredRecord:"<",isInternal:"<",selectRecord:"<",resetToCollapsed:"<",newRecordShown:"<",disableErrColumn:"@",tname:"@"}}),expandingTableCtrl.$inject=["$filter","$scope","$translate"]}(),function(){"use strict";angular.module("contactModule",["dataLists","hpfbConstants","errorMessageModule"])}(),function(){"use strict";function contactCtrl(getContactLists,ENGLISH,FRENCH,$scope){function _setIdNames(){var scopeId=vm.fldId+"_"+$scope.$id;vm.firstNameId="firstName"+scopeId,vm.lastNameId="lastName"+scopeId,vm.langCorrespondId="langCorrespond"+scopeId,vm.jobTitleId="jobTitle"+scopeId,vm.faxId="fax_number"+scopeId,vm.phoneNumberId="phoneNumber"+scopeId,vm.phoneExtId="phoneExt"+scopeId,vm.contactEmailId="contactEmail"+scopeId,vm.routingIdentifierId="routing_id"+scopeId}var vm=this;vm.isEditable=!0,vm.ngModelOptSetting={updateOn:"blur"},vm.langCorresppond=[ENGLISH,FRENCH],vm.faxRequired=!1,vm.phoneReg=/^([0-9]*$)/,vm.emailReg=/^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$/,vm.contactModel={givenName:"",surname:"",initials:"",title:"",language:"",phone:"",phoneExt:"",fax:"",email:"",routingId:""},vm.inputModelOptions={updateOn:"blur"},vm.fldId="",vm.requiredOnly=[{type:"required",displayAlias:"MSG_ERR_MAND"}],vm.emailError=[{type:"required",displayAlias:"MSG_ERR_MAND"},{type:"pattern",displayAlias:"MSG_ERR_EMAIL_FORMAT"}],vm.phoneError=[{type:"required",displayAlias:"MSG_ERR_MAND"},{type:"pattern",displayAlias:"MSG_ERR_PHONE_FORMAT"}],vm.faxError=[{type:"required",displayAlias:"MSG_ERR_MAND"},{type:"pattern",displayAlias:"MSG_ERR_FAX_FORMAT"}],vm.routingIdError=[{type:"required",displayAlias:"MSG_ERR_MAND"},{type:"pattern",displayAlias:"TYPE_PATTERN"}],vm.$onInit=function(){vm.langList=[ENGLISH,FRENCH],_setIdNames()},vm.$onChanges=function(changes){changes.contactRecord&&(vm.contactModel=changes.contactRecord.currentValue),changes.isAmend&&(vm.isEditable=changes.isAmend.currentValue),changes.faxMandatory&&(vm.faxRequired=changes.faxMandatory.currentValue),changes.fieldSuffix&&(vm.fldId=changes.fieldSuffix.currentValue,vm.fldId||(vm.fldId=""))},vm.showError=function(ctrl){return!!ctrl&&!!(ctrl.$invalid&&ctrl.$touched||vm.showErrors()&&ctrl.$invalid)},vm.showRoutingIdErr=function(){return vm.contactForm[vm.routingIdentifierId].$invalid},$scope.$watch("contCtrl.contactForm.$error",function(){vm.updateErrorSummary()},!0)}angular.module("contactModule").component("cmpContactDetails",{templateUrl:"app/scripts/components/contactDetails/tpl-contact-details_20240910_0916.html",controller:contactCtrl,controllerAs:"contCtrl",bindings:{contactRecord:"<",onUpdate:"&",isAmend:"<",showErrors:"&",faxMandatory:"@",updateErrorSummary:"&",fieldSuffix:"<",routingIdIndex:"<",showRoutingId:"&",isContact:"<",templateName:"@"}}),contactCtrl.$inject=["getContactLists","ENGLISH","FRENCH","$scope"]}(),function(){"use strict";angular.module("transactionInfo",["lifecycleList","transactionService","services","filterLists","hpfbConstants","ui.bootstrap","dataLists","ui.select","addressModule","contactModule","transactionFeesModule","alertModule","errorMessageModule"])}(),function(){"use strict";function transactionInfoCtrl($scope,OTHER,YES,NO,PROD,TransactionLists,TransactionService,getRoleLists,ENGLISH,FRENCH){function isEctdValue(){return vm.transactionModel.isEctd===YES}function isActivityChangesValue(){return vm.transactionModel.isActivityChanges===YES}function loadAdminSubData(){vm.transactionService.getAdminSubTypeList().then(function(data){return vm.adminSubTypeList=data,!0})}function _setIdNames(){var scopeId="_"+$scope.$id;vm.companyId="company_id"+scopeId,vm.dossierId="dossier_id"+scopeId,vm.productNameId="prod_name"+scopeId,vm.productProtocolId="prod_protocol"+scopeId,vm.isEctdId="is_ectd"+scopeId,vm.solictedRqId="solicited_rq"+scopeId,vm.solicitedOtherId="solicited_rq_other"+scopeId,vm.companyNameId="company_noabbrev"+scopeId,vm.contactSameId="confirm_contact_valid"+scopeId,vm.isFeesId="is_fee_transaction"+scopeId,vm.typeId="dossier_type"+scopeId,vm.thirdPartyId="is_signed_3rd_party"+scopeId,vm.isAdminSubId="is_admin_submission"+scopeId,vm.adminSubTypeId="admin_sub_type"+scopeId,vm.isPriorityId="is_priority"+scopeId,vm.isNocId="is_noc"+scopeId}var vm=this;vm.transactionService=new TransactionService,vm.ngModelOptSetting={updateOn:"blur"},vm.transactionModel={},vm.yesNoList=[YES,NO],vm.showAdminSub=!1,vm.showEctdSection=!0,vm.showSolicitedDetail=!1,vm.showOtherSolicitedDetail=!1,vm.activityEditable=!0,vm.isEctd=!1,vm.hideRaLead=!1,vm.selectedDossierType="",vm.alerts=[!1,!1,!1,!1,!1,!1,!1,!1,!1],vm.userList=[],vm.isForProd=PROD===TransactionLists.getEnv(),vm.formTypeList=getRoleLists.getFormTypes(vm.isForProd),vm.lang=ENGLISH,vm.sequenceChange=!1,vm.requiredOnly=[{type:"required",displayAlias:"MSG_ERR_MAND"}],vm.min5Error=[{type:"required",displayAlias:"MSG_ERR_MAND"},{type:"minlength",displayAlias:"MSG_LENGTH_MIN5"}],vm.formatError=[{type:"required",displayAlias:"MSG_ERR_MAND"},{type:"minlength",displayAlias:"FORMAT_TYPE_MINLENGTH"},{type:"pattern",displayAlias:"FORMAT_TYPE_PATTERN"}],vm.showSummary=!1,vm.disablePtclNum=!1,vm.$onInit=function(){_setIdNames(),vm.setThirdParty(),vm.setAdminSubmission(),vm.updateEctdState(),vm.updateDossierTypeState(),loadAdminSubData(),vm.finalState=!1,vm.displayResetBtn=!1,vm.getFee()},vm.$onChanges=function(changes){changes.transactionRoot&&(vm.transactionModel=changes.transactionRoot.currentValue,vm.setThirdParty(),vm.setAdminSubmission(),vm.updateEctdState(),vm.selectedDossierType=vm.transactionModel.ectd.dossierType,"UNASSIGNED"===vm.transactionModel.ectd.productProtocol&&(vm.disablePtclNum=!0)),changes.language&&(vm.lang=changes.language.currentValue),changes.sequenceUpdated&&(vm.sequenceChange=changes.sequenceUpdated.currentValue),changes.showErrorSummary&&(vm.showSummary=changes.showErrorSummary.currentValue),changes.isFinal&&(vm.finalState=changes.isFinal.currentValue)},vm.isPB=function(){return"D21"===vm.transactionModel.ectd.dossierType||"D22"===vm.transactionModel.ectd.dossierType||(vm.transactionModel.ectd.isPriority="",vm.transactionModel.ectd.isNoc="",!1)},vm.isPBV=function(){return"D21"===vm.transactionModel.ectd.dossierType||"D22"===vm.transactionModel.ectd.dossierType||"D24"===vm.transactionModel.ectd.dossierType||(vm.transactionModel.ectd.isPriority="",vm.transactionModel.ectd.isNoc="",!1)},vm.isFeesIndicated=function(){return vm.transactionModel.isFees!==NO},vm.getNewTransaction=function(){return vm.getTransaction()},vm.setSequence=function(start){(isNaN(start)||null===start)&&(start=0),vm.setStartingSequence({startVal:start})},vm.getNewRepContact=function(){return vm.getRepContact()},vm.subtractSequence=function(){vm.deprecateSequence()},vm.showFormErrors=function(){},vm.showErrors=function(){return vm.showSummary},vm.showError=function(ctrl){if(ctrl)return!!(ctrl.$invalid&&ctrl.$touched||vm.showSummary&&ctrl.$invalid)},vm.setTouch=function(ctrl){ctrl&&ctrl.$setTouched()},vm.updateActivityType=function(){vm.transactionModel.isPriority="",vm.transactionModel.isNoc="",vm.transactionModel.isAdminSub="",vm.transactionModel.subType="",vm.showAdminSub=!1},vm.setThirdParty=function(){vm.showThirdPartyNote=vm.transactionModel.isThirdParty===YES,vm.transactionModel.isThirdParty===NO&&(vm.transactionModel.companyName="",vm.transactionModel.activityAddress={street:"",city:"",stateList:"",stateText:"",country:"",countryDisplay:"",postalCode:""})},vm.updateEctdState=function(){isEctdValue()?vm.isEctd=!0:vm.isEctd=!1},vm.updateDossierTypeState=function(){vm.selectedDossierType=vm.transactionModel.ectd.dossierType,"D26"===vm.selectedDossierType?(vm.transactionModel.isPriority="",vm.transactionModel.isNoc="",vm.transactionModel.isAdminSub="",vm.transactionModel.subType="",vm.showAdminSub=!1,vm.hideRaLead=!1):(vm.transactionModel.ectd.productProtocol="",vm.disablePtclNum=!1,"D24"===vm.selectedDossierType?(vm.transactionModel.isPriority="",vm.transactionModel.isNoc="",vm.hideRaLead=!0):(vm.transactionModel.isFees="",vm.transactionModel.feeDetails=null,vm.hideRaLead=!1))},vm.faxMandatory=function(){return"D21"===vm.selectedDossierType||"D22"===vm.selectedDossierType},vm.updateFeeState=function(){vm.transactionModel.isFees===NO?vm.transactionModel.feeDetails=null:vm.transactionModel.feeDetails=vm.getFee()},vm.updateActivityChanges=function(){vm.activityEditable=isActivityChangesValue()},vm.updateRequesterList=function(list){list&&(vm.transactionModel.solicitedRequesterReord=list)},vm.setAdminSubmission=function(){vm.transactionModel.isAdminSub===YES?vm.showAdminSub=!0:(vm.showAdminSub=!1,vm.transactionModel.subType="")},vm.addInstruct=function(value){angular.isUndefined(value)||value<vm.alerts.length&&(vm.alerts[value]=!0)},vm.closeAlert=function(value){angular.isUndefined(value)||value<vm.alerts.length&&(vm.alerts[value]=!1)},vm.isFrench=function(){return vm.lang===FRENCH},vm.resetSpecificValues=function(){vm.finalState&&(vm.updateActivityType(),vm.setThirdParty(),vm.setAdminSubmission(),vm.transactionModel.ectd.lifecycleModel=vm.getNewTransaction(),vm.transactionModel.ectd.lifecycleRecord=angular.copy(vm.transactionModel.ectd.lifecycleModel),vm.transactionModel.feeDetails=null,vm.transactionModel.confirmContactValid=!1,vm.transactionModel.resetBtnClicked=!0)},vm.showRoutingId=function(){return 0},$scope.$watch("transInfoCtrl.transInfoForm.$error",function(){vm.updateErrorSummary()},!0),vm.updateProductProtocol=function(value){vm.disablePtclNum=value,value?vm.transactionModel.ectd.productProtocol="UNASSIGNED":"UNASSIGNED"===vm.transactionModel.ectd.productProtocol&&(vm.transactionModel.ectd.productProtocol="")}}angular.module("transactionInfo").config(function(uiSelectConfig){uiSelectConfig.theme="select2"}).component("cmpTransactionInfo",{templateUrl:"app/scripts/components/transactionInfo/tpl-transaction-info_20240910_0916.html",controller:transactionInfoCtrl,controllerAs:"transInfoCtrl",bindings:{transactionRoot:"<",isAmend:"<",isFinal:"<",isFileLoaded:"<",getTransaction:"&",setStartingSequence:"&",getRepContact:"&",getFee:"&",resetEctd:"&",deprecateSequence:"&",language:"<",sequenceUpdated:"<",getCurrentSequence:"&",showErrorSummary:"<",updateErrorSummary:"&",defaultLifecycleRecord:"&",htIndxList:"<"}}),transactionInfoCtrl.$inject=["$scope","OTHER","YES","NO","PROD","TransactionLists","TransactionService","getRoleLists","ENGLISH","FRENCH"]}(),function(){"use strict";angular.module("transactionMainModule",["transactionInfo","transactionService","transactionLoadService","transactionHelpText","fileIO","services","dataLists","filterLists","numberFormat","updateLang","errorSummaryModule","errorMessageModule"])}(),function(){"use strict";function TransactionMainCtrl(TransactionService,hpfbFileProcessing,$filter,$translate,$scope,ENGLISH,EXTERNAL_TYPE,$anchorScroll,$location){function _getFileName(rtObj){var date=new Date,filename="RT",dossierId=rtObj.TRANSACTION_ENROL.ectd.dossier_id,month=date.getMonth()+1,day=date.getDate(),hours=date.getHours(),minutes=date.getMinutes(),separator="-";return month<10&&(month="0"+month),day<10&&(day="0"+day),hours<10&&(hours="0"+hours),minutes<10&&(minutes="0"+minutes),filename=filename+separator+dossierId+separator+date.getFullYear()+separator+month+separator+day+separator+hours+minutes,filename.toLowerCase()}function _transformFile(){return vm.transactionService.transformToFileObj(vm.transaction)}function _loadFileContent(fileContent){if(fileContent){var resultJson=fileContent.jsonResult;resultJson&&(vm.transactionService.transformFromFileObj(resultJson),vm.transaction={},vm.transaction=vm.transactionService.getModelInfo(),vm.isFinal=vm.transactionService.isFinal,vm.isFileLoaded=!0,vm.isFinal&&(vm.privacyStat=!1))}}function _setIdNames(){var scopeId="_"+$scope.$id;vm.formId="transaction_form"+scopeId,vm.privacyStatementID="privacy_statement"+scopeId}function goToErrorSummary(){var masterError=angular.element(document.querySelector("#master-error"));masterError&&($location.hash("master-error"),$anchorScroll())}var vm=this;vm.savePressed=!1,vm.userType=EXTERNAL_TYPE,vm.transactionService=new TransactionService,vm.rootTag=vm.transactionService.getRootTag(),vm.transaction=vm.transactionService.getModelInfo(),vm.indexList=vm.transactionService.helpTextSequences,vm.showContent=_loadFileContent,vm.alerts=[!1,!1,!1],vm.lang=$translate.proposedLanguage()||$translate.use(),vm.sequenceUpdated=!1,vm.isFinal=!1,vm.isFileLoaded=!1,vm.updateSummary=0,vm.focusSummary=0,vm.transcludeList={},vm.alias={saveLifeRec:{type:"buttonSearch",buttonName:"saveLifecycleRec"},oneLifeRec:{type:"elementnoid",target:"transactionList"},one_payment_method:{type:"fieldset",parent:"fs_payment_methods"},one_fee_doc:{type:"element",target:"fs_fee_docs"},postal:{type:"pattern",errorType:"POSTAL_FORMAT"},contactEmail:{type:"pattern",errorType:"MSG_ERR_EMAIL_FORMAT"},control_num:{type:"minlength",errorType:"MSG_LENGTH_6NUM_CN"},dossier_id:{type:"pattern",errorType:"FORMAT_TYPE_PATTERN"}},vm.requiredOnly=[{type:"required",displayAlias:"MSG_ERR_MAND"}],vm.privacyStat=!1,vm.$onInit=function(){vm.updateSummary=vm.updateSummary+1,vm.updateSummary=vm.updateSummary+1,_setIdNames(),$("#privacyNoticeStatement").trigger("wb-init.wb-details"),$("#securityDisclaimer").trigger("wb-init.wb-details"),$("#footnoteInstruction").trigger("wb-init.wb-details")},vm.saveJson=function(){var writeResult=_transformFile();vm.rootTag=vm.transactionService.getRootTag(),hpfbFileProcessing.writeAsJson(writeResult,_getFileName(writeResult),vm.rootTag),vm.savePressed=!0},vm.saveXML=function(){if(vm.transactionEnrolForm.$invalid)vm.focusSummary++,vm.updateErrorSummaryState(),vm.savePressed=!0,goToErrorSummary();else{var writeResult=_transformFile();hpfbFileProcessing.writeAsXml(writeResult,_getFileName(writeResult),vm.rootTag,vm.transactionService.getXSLFileName()),vm.savePressed=!1}},vm.updateErrorSummaryState=function(){vm.updateSummary=vm.updateSummary+1},vm.disableFinalXmlBtn=function(){return!!vm.isFinal&&!vm.transaction.resetBtnClicked},vm.getNewRepContact=function(){return vm.transactionService.createRepContact()},vm.setSequenceNumber=function(startVal){vm.transactionService.setSequenceNumber(startVal);vm.sequenceUpdated=!vm.sequenceUpdated},vm.updateAddressRecord=function(address){if(address){var idx=vm.company.addressList.indexOf($filter("filter")(vm.company.addressList,{addressID:address.addressID},!0)[0]);vm.company.addressList[idx]=address;var temp=vm.company.addressList;vm.company.addressList=[],vm.company.addressList=temp}},vm.isExtern=function(){return vm.userType==EXTERNAL_TYPE},vm.showErrors=function(){return vm.savePressed},vm.addInstruct=function(value){angular.isUndefined(value)||value<vm.alerts.length&&(vm.alerts[value]=!0)},vm.closeAlert=function(value){angular.isUndefined(value)||value<vm.alerts.length&&(vm.alerts[value]=!1)},vm.isFrench=function(){return vm.lang!==ENGLISH},vm.showError=function(ctrl){return!!vm.savePressed||!(!ctrl||ctrl.$untouched)&&(ctrl.$invalid&&ctrl.$touched||vm.savePressed&&ctrl.$invalid)}}angular.module("transactionMainModule").component("cmpTransactionMain",{templateUrl:"app/scripts/components/transactionMain/tpl-transaction-main_20240910_0916.html",controller:TransactionMainCtrl,controllerAs:"main"}),TransactionMainCtrl.$inject=["TransactionService","hpfbFileProcessing","$filter","$translate","$scope","ENGLISH","EXTERNAL_TYPE","$anchorScroll","$location"]}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,

!function(){"use strict";angular.module("activityApp",["pascalprecht.translate","activityLists","activityMain","translations"])}(),function(){"use strict";function MainController(){var vm=this;vm.formType="INT"}angular.module("activityApp").controller("MainController",MainController)}(),function(){"use strict";angular.module("activityApp").config(["$translateProvider",function($translateProvider){$translateProvider.directivePriority(1),$translateProvider.preferredLanguage("fr"),$translateProvider.useSanitizeValueStrategy(null)}])}(),angular.module("translations",[]).config(["$translateProvider",function($translateProvider){$translateProvider.translations("en",{LOAD_ACTIVITY:"Load a Regulatory Activity Enrolment File",REG_ACTIVITY_INSTRUCT:"Regulatory Activity Instructions",ACTIVE_ENROL:"Regulatory Activity Enrolment",IS_SOLICITED:"Will the submission be signed / filed by a third party on behalf of the manufacturer / sponsor?",RATIONALE_SNDS:"Rationale for all SNDS, SANDS, (all human drug types); Veterinary Supplemental New Drug Submission (VSNDS), Veterinary Supplemental Abbreviated New Drug Submission( VSANDS) (All veterinary drug types); or for biological drug DIN submissions",NEW_ROA:"New route of administration, dosage form and / or strength",REPLACE_STERIL:"Replace sterility test with process parametric release",NEW_CLAIMS:"New claims / use, indications, recommended administration or dosage regime",CONFIRM_STUDY:"Confirmatory studies",CHANGE_FORM:"Change in formulation or method of manufacturing with clinical / bio data",CHANGE_SUBSTANCE:"Change in drug substance / product (site, method, equipment, process control)",OTHER_SPECIFY:"Other (please specify):",TYPE_VNC:"Type of Notifiable Chance (NC) or Veterinary Notifiable Change (VNC) submission",CHANGE_LABEL:"Change in text of labelling",CHANGE_DRUGSUB:"Change in drug substance (source, synthesis)",CHANGE_SPEC:"Change in specifications (medicinal or non-medicinal ingredient, pharmaceutical form, analytical method)",CHANGE_EXPIRY:"Change in expiry period/storage conditions",CHANGE_MANMETHOD:"Change in manufacturing method",CHANGE_MANSITE:"Change in manufacturing site",CHANGE_CONTAIN:"Change in container size for parenteral drug",CHANGE_PACKAGE:"Change in packaging specifications for parenteral / inhalation drug",CHANGE_MATERIAL:"Change in packaging material composition",ACTIVITY_LEAD:"Activity Lead",FEE_CLASS:"Fee Class",NOT_LASA:"I confirm that this administrative submission is NOT a Look-alike Sound-alike (LASA) submission",REASON_FILE:"Reason for filing this Regulatory Activity",RELATED_ACTIVITIES:"Related Regulatory Activity (Referred to in this Administrative Submission)",ACTIVITY_TYPE:"Regulatory Activity Type",DATE_CLEARED:"Date Cleared",CONTROL_NUM:"Control Number",MANUFACT_NAME:"Manufacturer / Sponsor Name [Full Legal Name - No Abbreviations]",REASON_FILING:"Reason for Filing this Regulatory Activity",ASSOC_DINS:"Associated Drug Identification Numbers (DIN)",ADD_DIN:"Add DIN",SAVE_ACTIVITY:"Save Activity",OTHER_DETAILS:"Other (please specify)",DIN_ABRREV:"DIN",DELETE_ACTIVITY:"Delete Activity",ADD_ACTIVITY:"Add Activity",AUT_LETTER:"Please include Third Party Authorization letter in the REP folder when submitting via the CESG",DOSSIER_ID_PREV:"Dossier Id (Previously File Number)",RELATED_ACTIVITY:"Related Activity",AMEND_ACTIVITY:"Amend Related Activity",IS_ADMIN_SUB:"Is this a regulatory administrative submission?",LICENCE_AGREE:"Is this an administrative submission license agreement?",DIN_TRANSFER:"I confirm that this Administrative Submission is a DIN transfer of ownership",REGACTIVSEARCH:"Select or search for a Regulatory Activity Type"}),$translateProvider.translations("fr",{LOAD_ACTIVITY:"fr_Load a Regulatory Activity Enrolment File",REG_ACTIVITY_INSTRUCT:"Regulatory Activity Instructions",ACTIVE_ENROL:"fr_Regulatory Activity Enrolment",IS_SOLICITED:"fr_Will the submission be signed / filed by a third party on behalf of the manufacturer / sponsor?",RATIONALE_SNDS:"fr_Rationale for all SNDS, SANDS, (all human drug types); Veterinary Supplemental New Drug Submission (VSNDS), Veterinary Supplemental Abbreviated New Drug Submission( VSANDS) (All veterinary drug types); or for biological drug DIN submissions",NEW_ROA:"fr_New route of administration, dosage form and / or strength",REPLACE_STERIL:"fr_Replace sterility test with process parametric release",NEW_CLAIMS:"fr_New claims / use, indications, recommended administration or dosage regime",CONFIRM_STUDY:"fr_Confirmatory studies",CHANGE_SUBSTANCE:"fr_Change in drug substance/product (site, method, equipment, process control",OTHER_SPECIFY:"fr_Other (please specify):",TYPE_VNC:"fr_Type of Notifiable Chance (NC) or Veterinary Notifiable Change (VNC) submission",CHANGE_LABEL:"fr_Change in text of labelling",CHANGE_DRUGSUB:"fr_Change in drug substance (source, synthesis)",CHANGE_FORM:"Modification de la formulation",CHANGE_SPEC:"Modification dans les spécifications (ingrédients médicinaux ou non médicinaux, forme posologique, méthode d’analyse)",CHANGE_EXPIRY:"Modification de la durée de conservation/des conditions d’entreposage",CHANGE_MANMETHOD:"Modification du procédé de fabrication",CHANGE_MANSITE:"Modification du site de fabrication",CHANGE_CONTAIN:"Modification du format du récipient dans le cas d’un médicament administré par voie parentérale",CHANGE_PACKAGE:"Modification des spécifications du conditionnement dans le cas d’un médicament administré par voie parentérale/par inhalation",CHANGE_MATERIAL:"Modification de la composition du matériel de conditionnement",COMPANY_ID:"fr_Company Id",DOSSIER_ID:"fr_Dossier Id",ACTIVITY_LEAD:"fr_Activity Lead",FEE_CLASS:"fr_Fee Class",NOT_LASA:"fr_I confirm that this administrative submission type is NOT a Look-alike Sound-alike (LASA) submission",REASON_FILE:"fr_Reason for filing this Regulatory Activity",RELATED_ACTIVITIES:"fr_Related Regulatory Activity (Referred to in this Administrative Submission)",ACTIVITY_TYPE:"fr_Regulatory Activity Type",DATE_CLEARED:"fr_Date Cleared",CONTROL_NUM:"fr_Control Number",MANUFACT_NAME:"fr_Manufacturer / Sponsor Name [Full Legal Name - No Abbreviations]",REASON_FILING:"fr_Reason for Filing this Regulatory Activity",ASSOC_DINS:"fr_Associated Drug Identification Numbers (DIN)",ADD_DIN:"fr_Add DIN",SAVE_ACTIVITY:"fr_Save Activity",OTHER_DETAILS:"fr_Other Details",DIN_ABRREV:"DIN",DELETE_ACTIVITY:"fr_Delete Activity",AUT_LETTER:"fr_Please include Third Party Authorization letter in the REP folder when submitting via the CESG",DOSSIER_ID_PREV:"fr_Dossier Id (Previously File Number)",RELATED_ACTIVITY:"fr_Related Activity",AMEND_ACTIVITY:"fr_Amend Related Activity",IS_ADMIN_SUB:"fr_Is this an administrative submission license agreement?",LICENCE_AGREE:"fr_Is this an administrative submission license agreement",DIN_TRANSFER:"fr_I confirm that this Administrative Submission is a DIN transfer of ownership",REGACTIVSEARCH:"fr_Select or search for Regulatory Activity Type"}),$translateProvider.translations("en",{"B14-20160301-09":"Pharmaceutical","B14-20160301-02":"Biological","B14-20160301-10":"Post-Market Pharmacovigilance","B14-20160301-07":"Drug Master File",UNASSIGNED:"Unassigned"}),$translateProvider.translations("fr",{"B14-20160301-09":"fr_Pharmaceutical","B14-20160301-02":"fr_Biological","B14-20160301-10":"fr_Post-Market Pharmacovigilance","B14-20160301-07":"fr_Drug Master File",UNASSIGNED:"fr_Unassigned"}),$translateProvider.translations("en",{FIRST_NAME:"First Name",LAST_NAME:"Last Name",INITIALS:"Initials",LANGUAGE_CORRESPONDENCE:"Language of Correspondance",JOB_TITLE:"Job Title",SALUTATION:"Salutation",SALUT_MR:"Mr.",SALUT_MS:"Ms.",SALUT_DR:"Dr.",SALUT_MRS:"Mrs.",ROLE_PRIMARY:"Primary",ROLE_SECONDARY:"Alternate",EMAIL:"Email",FAX_NUMBER:"Fax Number",PHONE_EXT:"Phone Extension",ROLES:"Roles",PHONE_NUMBER:"Phone Number",CONTACT_INFO:"Company Representative Information",AMEND:"Amend",REP_CONTACT:"REP Contact",ONE_ROLE:"Role",CONTACT_DETAILS:"Company Representative Details",ADD_CONTACT:"Add REP Contact",CONTACT_ROLE_LEGEND:"Select one or more roles for this company representative",ADD_REPRES:"Add Company Representative",DELETE_REPRES:"Delete Company Rep.",SAVE_REPRES:"Save Company Rep."}),$translateProvider.translations("fr",{FIRST_NAME:"Prénom",LAST_NAME:"Nom",INITIALS:"Initials",LANGUAGE_CORRESPONDENCE:"Langue de Correspondance",JOB_TITLE:"Job Title",SALUTATION:"Titre de civilité",SALUT_MR:"M.",SALUT_MS:"Mme",SALUT_DR:"Dr.",SALUT_MRS:"Mlle",ROLE_PRIMARY:"Primaire",ROLE_SECONDARY:"Alterner",EMAIL:"Courriel",FAX_NUMBER:"Numéro de télécopieur",PHONE_EXT:"Numéro de poste",ADDR_ROLES:"fr_Roles",PHONE_NUMBER:"Numéro de téléphone",CONTACT_INFO:"fr_Company Representative Information",AMEND:"fr_Amend",REP_CONTACT:"fr_REP Contact",ONE_ROLE:"fr_Role",CONTACT_DETAILS:"fr_Company Representative Details",ADD_CONTACT:"fr_Add REP Contact",CONTACT_ROLE_LEGEND:"fr_Select one or more roles for this company representative"}),$translateProvider.translations("en",{APPL_STATUS:"Application Status",ENROL_VERSION:"Enrolment Version",DATE_SAVED:"Date Last Saved",AMEND_ENROL:"Amend Enrolment"}),$translateProvider.translations("fr",{APPL_STATUS:"fr_Application Status",ENROL_VERSION:"fr_Enrolment Version",DATE_SAVED:"fr_Date Last Saved",AMEND_ENROL:"fr_Amend Enrolment"}),$translateProvider.translations("en",{SELECT_LOAD:"Select a file to load",MSG_SUCCESS_LOAD:"The file was loaded successfully",MSG_ERR_JSONPARSE:"Error: there was an error parsing the working file.",MSG_ERR_XMLPARSE:"Error: there was an error parsing the draft XML file.",MSG_ERR_FILE_LOAD:"Error: there was a problem loading the file.",MSG_ERR_FILE_TYPE:"Error: An invalid file type was selected.",MSG_ERR_FORM_TYPE:"Error: the wrong form type was selected for this form.",MSG_ERR_CHECKSUM_FAIL:"Error: the checksum in the file does not match the calculated checksum"}),$translateProvider.translations("fr",{SELECT_LOAD:"fr_Select a data file to load",MSG_SUCCESS_LOAD:"fr_The file was loaded successfully",MSG_ERR_JSONPARSE:"fr_Error: there was an error parsing the working file.",MSG_ERR_XMLPARSE:"fr_Error: there was an error parsing the draft XML file.",MSG_ERR_FILE_LOAD:"fr_Error: there was a problem loading the file.",MSG_ERR_FILE_TYPE:"fr_Error: An invalid file type was selected.",MSG_ERR_FORM_TYPE:"fr_Error: the wrong form type was selected for this form.",MSG_ERR_CHECKSUM_FAIL:"fr_Error: the checksum in the file does not match the calculated checksum"}),$translateProvider.translations("en",{Y:"Yes",N:"No",DELETEROW:"Delete Row",SELECTEDROW:"Selected Row",REQUIRED:"(required)",ROLES_SELECT:"Select one or more roles for this record",NEW:"New",AMEND:"Amend",APPROVED:"Approved",CLICK_TOGGLE:"Click to toggle the collapse or expand details for this address.",AMEND_RECORD:"Amend Record",en:"English",fr:"French",DISCARD_CHANGES:"Discard Changes",REP_ALT:"Alternate REP contact",REP_PRIM:"Primary REP contact",MAILING:"Regulatory Mailing / Annual Contact",BILLING:"Billing Address",MANUFACT:"Manufacturer / Sponsor Mailing Address",IMPORTER:"Canadian Importer Mailing Address",APPROVE_FINAL:"Approve Final XML",SAVE_DRAFT:"Save Draft for Filing",PRIMARY:"Primary",SECONDARY:"Alternate",TOGGLE_EXPAND:"Click to toggle collapse or expand details of row",SAVE_WORK:"Save Working Copy",CONTROL_NUMBER:"Control Number",REP_CONTACT_INFO:"REP Contact Information",SAVE_CONTACT:"Save Contact",DELETE_CONTACT:"Delete Contact",COMPANY_ID:"Company Id",DOSSIER_ID:"Dossier Id",ERRORS:"Errors",UNKNOWN:"Unknown",BIOLOGIC:"Biologic",PHARMACEUTICAL:"Pharmaceutical",HELP_FILE_LOAD:"File Load Instructions",HELP_ACTIVITY_MAIN:"Activity Instructions",HELP_ACTIVITY_REP:"REP Contact Instructions",CALENDAR:"Pick date from calendar",HIDE_CALENDAR:"Hide Calendar (escape key)",OTHER:"Other",HELP_REP_CONTACT:"REP Contact Instructions",OTHER_UNITS:"Units other details",COMPANY_NOABBREV:"Company Name (Full legal name - no abbreviations)"}),$translateProvider.translations("fr",{Y:"Oui",N:"Non",DELETEROW:"fr_Delete Row",SELECTEDROW:"Selected Row",REQUIRED:"(requis)",ROLES_SELECT:"fr_Select one or more roles for this record",NEW:"fr_New",AMEND:"fr_Amend",APPROVED:"fr_Approved",CLICK_TOGGLE:"fr_Click to toggle the collapse or expand details for this address.",AMEND_RECORD:"fr_Amend Record",en:"Anglais",fr:"Français",DISCARD_CHANGES:"fr_Discard Changes",REP_ALT:"fr_Alternate REP contact",REP_PRIM:"fr_Primary REP contact",MAILING:"Contact pour le courrier réglementaire",BILLING:"fr_Billing",MANUFACT:"fr_Manufacturer",IMPORTER:"Importateur canadien",APPROVE_FINAL:"fr_Approve Final XML",PRIMARY:"fr_Primary",SECONDARY:"fr_Alternate",TOGGLE_EXPAND:"fr_Click to toggle collapse or expand details of row",SAVE_DRAFT:"fr_Save Draft for filing",CONTROL_NUMBER:"fr_Control Number",REP_CONTACT_INFO:"fr_Main Contact Information",SAVE_CONTACT:"fr_Save Contact",DELETE_CONTACT:"fr_Delete Contact",COMPANY_ID:"fr_Company Id",DOSSIER_ID:"fr_Dossier Id",ERRORS:"Erreurs",UNKNOWN:"Inconnu",BIOLOGIC:"fr_Biologic",PHARMACEUTICAL:"fr_Pharmaceutical",HELP_FILE_LOAD:"fr_File Load Instructions",HELP_ACTIVITY_MAIN:"fr_Activity Instructions",HELP_ACTIVITY_REP:"fr_REP Contact Instructions",CALENDAR:"fr_Pick date from calendar",HIDE_CALENDAR:"fr_Hide Calendar (escape key)",OTHER:"Autre",HELP_REP_CONTACT:"fr_REP Contact Instructions",OTHER_UNITS:"fr_Units other details",COMPANY_NOABBREV:"fr_Company Name (Full legal name - no abbreviations)"}),$translateProvider.translations("en",{MSG_ERR_MAND:"This field is required",MSG_ERR_EMAIL_FORMAT:"Please enter a valid email address.",MSG_ERR_ROLE:"Please select at least one role",MSG_ERR_CONTACT_NUM:"All the roles have to be used for the contacts",MSG_ERR_PHONE_FORMAT:"Please specify a valid phone number",MSG_ERR_ALLROLE:"The roles of manufacturer, mailing, billing, and primary REP contact  have not all been selected among the list of contacts",MSG_ERR_ADDRESSSROLE:"The roles of manufacturer, mailing, and billing have not all been selected among the list of addresses",MSG_ERR_POSTAL:"Please specify a valid postal code.",MSG_ERR_ZIP:"Please specify a valid zip code.",MSG_ERR_DATE_FORMAT:"The date format is incorrect.",MAILING_SEL:"Mailing Role already Selected",MANUFACT_SEL:"Manufacturer Role already Selected",MAIL_SEL:"Mailing Role already Selected",BILLING_SEL:"Billing Role already Selected",IMPORTER_SEL:"Importer Role already Selected",REPPRIM_SEL:"REP Primary Role already Selected",REPALT_SEL:"REP Alternate Role already Selected",MSG_LENGTH_6:"Please enter 6 characters.",MSG_LENGTH_6NUM:"Please enter 6 digits.",MSG_LENGTH_8NUM:"Please enter 8 digits.",MSG_LENGTH_7:"Please enter 7 characters.",MSG_LENGTH_7NUM:"Please enter 7 digits.",MSG_ERR_ONE_REP:"At least one contact is required.",MSG_ERR_ONE_LIFE_REC:"One lifecycle record is required.",MSG_ERR_RATIONALE_SEL:"Please select at least one rationale.",MSG_ERR_NOTIF_SEL:"Please select at least one notifiable change."}),$translateProvider.translations("fr",{MSG_ERR_MAND:"Ce champ est obligatoire.",MSG_ERR_EMAIL_FORMAT:"Veuillez fournir une adresse électronique valide.",MSG_ERR_CONTACT_NUM:"fr_All the roles have to be used for the company contacts",MSG_ERR_PHONE_FORMAT:"fr_Please specify a valid phone number",MSG_ERR_ALLROLE:"fr_Across the contact records, the roles of manufacturer, mailing, billing, and REP primary contact must be selected",MSG_ERR_ADDRESSSROLE:"fr_The roles of manufacturer, mailing, and billing have not all been selected among the list of addresses",MSG_ERR_POSTAL:"fr_Please specify a valid postal code.",MSG_ERR_ZIP:"fr_Please specify a valid zip code.",MSG_ERR_DATE_FORMAT:"fr_The date format is incorrect.",MANUFACT_SEL:"fr_Manufacturer Role already Selected",MAIL_SEL:"fr_Mailing Role already Selected",BILLING_SEL:"fr_Billing Role already Selected",IMPORTER_SEL:"fr_Importer Role already Selected",REPPRIM_SEL:"fr_REP Primary Role already Selected",REPALT_SEL:"fr_REP Alternate Role already Selected",MSG_LENGTH_6:"fr_Please enter 6 characters.",MSG_LENGTH_6NUM:"fr_Please enter 6 digits.",MSG_LENGTH_8NUM:"fr_Please enter 8 digits.",MSG_LENGTH_7:"fr_Please enter 7 characters.",MSG_LENGTH_7NUM:"fr_Please enter 7 digits.",MSG_ERR_ONE_REP:"fr_At least one contact is required.",MSG_ERR_ONE_LIFE_REC:"fr_One lifecycle record is required.",MSG_ERR_RATIONALE_SEL:"fr_Please select at least one rationale.",MSG_ERR_NOTIF_SEL:"fr_Please select at least one notifiable change."})}]),function(){"use strict";angular.module("numberFormat",[])}(),function(){"use strict";function digitsCtrl(){function link(scope,element,attrs,modelCtrl){modelCtrl.$parsers.push(function(inputValue){if(void 0==inputValue)return"";var isNumber=!1,max=-1,tempVal=""+inputValue;attrs.type&&"number"===attrs.type&&(isNumber=!0),attrs.onlyMax&&(max=parseInt(attrs.onlyMax));var regexIntNeg=/[^0-9-]/g,integerReg=/[^0-9]/g,regexValue=integerReg;regexValue="intNeg"==attrs.onlyDigits?regexIntNeg:integerReg;var transformedInput=tempVal.replace(regexValue,"");return max>0&&(transformedInput=transformedInput.substring(0,max)),transformedInput!==tempVal&&(isNumber&&transformedInput&&(transformedInput=parseFloat(transformedInput)),modelCtrl.$setViewValue(transformedInput),modelCtrl.$render()),transformedInput})}var directive={link:link,restrict:"A",require:"?ngModel"};return directive}angular.module("numberFormat").directive("onlyDigits",digitsCtrl)}(),function(){"use strict";angular.module("commonStaticLists",["hpfbConstants"])}(),function(){"use strict";function getService(YES,NO){function _getYes(){return YES}function _getNo(){return NO}function _getYesNoArray(){return[YES,NO]}var service={getYesNoList:_getYesNoArray,getYesValue:_getYes,getNoValue:_getNo()};return service}angular.module("commonStaticLists").factory("CommonLists",getService),getService.$inject=["YES","NO"]}(),function(){"use strict";angular.module("dataLists",["hpfbConstants"])}(),function(){"use strict";function getService(UNKNOWN){function _createCountryArray(translateJson){vm.countryList=translateJson}function _getUnknownCountryRec(){return{id:UNKNOWN,en:"Unknown",fr:"Inconnu"}}function getCountryValuesArray(){return vm.countryList}function getProvinceValuesArray(){return["AB","BC","MB","NB","NL","NT","NS","NU","ON","PE","QC","SK","YT"]}function getUSStatesValueArray(){return["AL","AK","AZ","AR","CA","CO","CT","DE","DC","FL","GA","HI","ID","IL","IN","IA","KS","KY","LA","ME","MD","MA","MI","MN","MS","MO","MT","NE","NV","NH","NJ","NM","NY","NC","ND","OH","OK","OR","PA","RI","SC","SD","TN","TX","UT","VT","VA","WA","WV","WI","WY"]}var vm=this;vm.countryList=[];var service={getCountries:getCountryValuesArray,getProvinces:getProvinceValuesArray,getUSStates:getUSStatesValueArray,createCountryList:_createCountryArray,getUnknownCountryRecord:_getUnknownCountryRec};return service}angular.module("dataLists").factory("getCountryAndProvinces",getService),getService.inject=["UNKNOWN"]}(),function(){"use strict";function getSalService($filter,$q,$http,$translate,OTHER,FRENCH){function getSalValuesArray(){return["SALUT_DR","SALUT_MR","SALUT_MRS","SALUT_MS"]}function getLanguagesValuesArray(){return["en","fr"]}function _createInternalContacts(){var deferred=$q.defer(),contactsUrl="data/internalContacts.json";return vm.internalContacts&&0!==vm.internalContacts.length?deferred.resolve(vm.internalContacts):$http.get(contactsUrl).success(function(data,status,headers,config){var newList=_createSortedArray(data,"en"),lang=$translate.proposedLanguage()||$translate.use(),otherRec={id:OTHER,en:"Other"};lang===FRENCH&&(otherRec.en="Autre"),newList.unshift(otherRec),vm.internalContacts=newList,deferred.resolve(newList)}).error(function(data,status,headers,config){deferred.reject(status)}),deferred.promise}function _getInternalContacts(){return _createInternalContacts()}function _createSortedArray(jsonList,lang){var result=[];return angular.forEach($filter("orderByLocale")(jsonList,lang),function(sortedObject){result.push(sortedObject)}),result}var vm=this;vm.internalContacts=[];var service={getSalutationList:getSalValuesArray,getLanguages:getLanguagesValuesArray,createInternalContacts:_createInternalContacts,getInternalContacts:_getInternalContacts};return service}angular.module("dataLists").factory("getContactLists",getSalService),getSalService.$inject=["$filter","$q","$http","$translate","OTHER","FRENCH"]}(),function(){"use strict";function getRolesService(){function getRoleValuesArray(){return["","ROLE_PRIMARY","ROLE_SECONDARY"]}function _getFormTypes(){return[_biologic,_pharma]}function _getBiologic(){return _biologic}function _getPharmaceutical(){return _pharma}var _biologic="BIOLOGIC",_pharma="PHARMACEUTICAL",service={getContactRoles:getRoleValuesArray,getFormTypes:_getFormTypes,getBiologicType:_getBiologic,getPharmaType:_getPharmaceutical};return service}angular.module("dataLists").factory("getRoleLists",getRolesService)}(),function(){"use strict";angular.module("services",[])}(),function(){"use strict";function getTransactionSeq($http,$q){function yesNoArray(){return["Y","N"]}function _createRaArray(value){vm.raTypeArray=value}function getTransactionDescriptionsArray(){return["ADMINISTRATIVE","BENEFIT_RISK_ASSESS","CANCEL_LETTER","CHANGE_TO_DIN","COMMENTS_NOC","COMMENTS_SUMMARY_BASIS","DIN_DISCONTINUED","DRUG_NOTIF_FORM","FOR_PERIOD","INITIAL","MEETING_MINUTES","NOTIFICATION_CHANGE","PANDEMIC_APPL","POST_CLEARANCE_DATA","POST_MARKET_SURV","POST_NOC_CHANGE","POST_AUTH_DIV1_CHANGE","PRESUB_MEETING_PKG","PRIORITY_REVIEW_RQ","PRISTINE_PM","PRISTINE_PM_2LANG","ADVISEMENT_LETTER_RESPONSE","CLIN_CLARIF_RESPONSE","EMAIL_RQ_RESPONSE","LABEL_CLARIF_RESPONSE","MHPD_RQ_RESPONSE","NOC_RESPONSE","NOD_RESPONSE","NOL_RESPONSE","NON_RESPONSE","PROCESSING_CLARIF_RESPONSE","QUAL_CLIN_CLARIF_RESPONSE","QUAL_CLARIF_RESPONSE","SCREENING_ACCEPT_RESPONSE","SCREENING_CLARIF_RESPONSE","SDN_RESPONSE","PHONE_RQ_RESPONSE","RISK_COMMUN_DOC","RMP_VERSION_DATE","SIGNAL_WORK_UP","UNSOLICITED_DATA","YEAR_LIST_OF_CHANGE","BE_CLARIF_RESPONSE"]}function getActivityArray(){return vm.raTypeArray}function getPresubArray(){return["CANCEL_LETTER","MEETING_MINUTES","EMAIL_RQ_RESPONSE","PROCESSING_CLARIF_RESPONSE","PHONE_RQ_RESPONSE"]}function getANDSArray(){return["ADMINISTRATIVE","CANCEL_LETTER","DRUG_NOTIF_FORM","INITIAL","POST_CLEARANCE_DATA","PRISTINE_PM","PRISTINE_PM_2LANG","BE_CLARIF_RESPONSE","CLIN_CLARIF_RESPONSE","EMAIL_RQ_RESPONSE","LABEL_CLARIF_RESPONSE","NOC_RESPONSE","NOD_RESPONSE","NON_RESPONSE","PROCESSING_CLARIF_RESPONSE","QUAL_CLIN_CLARIF_RESPONSE","QUAL_CLARIF_RESPONSE","SCREENING_ACCEPT_RESPONSE","SCREENING_CLARIF_RESPONSE","SDN_RESPONSE","PHONE_RQ_RESPONSE"]}function getDINAArray(){return["ADMINISTRATIVE","CANCEL_LETTER","DRUG_NOTIF_FORM","INITIAL","POST_CLEARANCE_DATA","PRESUB_MEETING_PKG","PRISTINE_PM","PRISTINE_PM_2LANG","CLIN_CLARIF_RESPONSE","EMAIL_RQ_RESPONSE","LABEL_CLARIF_RESPONSE","PROCESSING_CLARIF_RESPONSE","QUAL_CLIN_CLARIF_RESPONSE","QUAL_CLARIF_RESPONSE","SCREENING_ACCEPT_RESPONSE","SCREENING_CLARIF_RESPONSE","PHONE_RQ_RESPONSE","UNSOLICITED_DATA"]}function getDINBArray(){return["ADMINISTRATIVE","CANCEL_LETTER","DRUG_NOTIF_FORM","INITIAL","POST_CLEARANCE_DATA","PRESUB_MEETING_PKG","PRISTINE_PM","PRISTINE_PM_2LANG","CLIN_CLARIF_RESPONSE","EMAIL_RQ_RESPONSE","LABEL_CLARIF_RESPONSE","PROCESSING_CLARIF_RESPONSE","QUAL_CLIN_CLARIF_RESPONSE","QUAL_CLARIF_RESPONSE","SCREENING_ACCEPT_RESPONSE","SCREENING_CLARIF_RESPONSE","PHONE_RQ_RESPONSE","UNSOLICITED_DATA"]}function getEUNDSArray(){return["ADMINISTRATIVE","CANCEL_LETTER","COMMENTS_SUMMARY_BASIS","DRUG_NOTIF_FORM","INITIAL","POST_CLEARANCE_DATA","PRISTINE_PM","PRISTINE_PM_2LANG","CLIN_CLARIF_RESPONSE","EMAIL_RQ_RESPONSE","LABEL_CLARIF_RESPONSE","NOC_RESPONSE","NOD_RESPONSE","NON_RESPONSE","PROCESSING_CLARIF_RESPONSE","QUAL_CLIN_CLARIF_RESPONSE","QUAL_CLARIF_RESPONSE","SCREENING_ACCEPT_RESPONSE","SCREENING_CLARIF_RESPONSE","SDN_RESPONSE","PHONE_RQ_RESPONSE","UNSOLICITED_DATA"]}function getEUSNDSArray(){return["ADMINISTRATIVE","CANCEL_LETTER","COMMENTS_SUMMARY_BASIS","DRUG_NOTIF_FORM","POST_CLEARANCE_DATA","POST_NOC_CHANGE","PRISTINE_PM","PRISTINE_PM_2LANG","CLIN_CLARIF_RESPONSE","EMAIL_RQ_RESPONSE","LABEL_CLARIF_RESPONSE","NOC_RESPONSE","NOD_RESPONSE","NON_RESPONSE","PROCESSING_CLARIF_RESPONSE","QUAL_CLIN_CLARIF_RESPONSE","QUAL_CLARIF_RESPONSE","SCREENING_ACCEPT_RESPONSE","SCREENING_CLARIF_RESPONSE","SDN_RESPONSE","PHONE_RQ_RESPONSE","UNSOLICITED_DATA"]}function getLevel3Array(){return["CANCEL_LETTER","EMAIL_RQ_RESPONSE","PROCESSING_CLARIF_RESPONSE","PHONE_RQ_RESPONSE","YEAR_LIST_OF_CHANGE"]}function getNCArray(){return["ADMINISTRATIVE","CANCEL_LETTER","COMMENTS_SUMMARY_BASIS","DRUG_NOTIF_FORM","POST_CLEARANCE_DATA","POST_NOC_CHANGE","PRESUB_MEETING_PKG","PRISTINE_PM","PRISTINE_PM_2LANG","CLIN_CLARIF_RESPONSE","EMAIL_RQ_RESPONSE","LABEL_CLARIF_RESPONSE","NOL_RESPONSE","PROCESSING_CLARIF_RESPONSE","QUAL_CLIN_CLARIF_RESPONSE","QUAL_CLARIF_RESPONSE","SCREENING_ACCEPT_RESPONSE","SCREENING_CLARIF_RESPONSE","SDN_RESPONSE","PHONE_RQ_RESPONSE","UNSOLICITED_DATA"]}function getNDSArray(){return["CANCEL_LETTER","COMMENTS_NOC","COMMENTS_SUMMARY_BASIS","DRUG_NOTIF_FORM","INITIAL","POST_CLEARANCE_DATA","PRESUB_MEETING_PKG","PRIORITY_REVIEW_RQ","PRISTINE_PM","PRISTINE_PM_2LANG","BE_CLARIF_RESPONSE","CLIN_CLARIF_RESPONSE","EMAIL_RQ_RESPONSE","LABEL_CLARIF_RESPONSE","NOC_RESPONSE","NOD_RESPONSE","NON_RESPONSE","PROCESSING_CLARIF_RESPONSE","QUAL_CLIN_CLARIF_RESPONSE","QUAL_CLARIF_RESPONSE","SCREENING_ACCEPT_RESPONSE","SCREENING_CLARIF_RESPONSE","SDN_RESPONSE","PHONE_RQ_RESPONSE","UNSOLICITED_DATA"]}function getPDCArray(){return["CANCEL_LETTER","POST_AUTH_DIV1_CHANGE","EMAIL_RQ_RESPONSE","PROCESSING_CLARIF_RESPONSE","PHONE_RQ_RESPONSE"]}function getPDCBArray(){return["CANCEL_LETTER","POST_AUTH_DIV1_CHANGE","EMAIL_RQ_RESPONSE","PROCESSING_CLARIF_RESPONSE","PHONE_RQ_RESPONSE"]}function getPSURCArray(){return["CANCEL_LETTER","FOR_PERIOD","CLIN_CLARIF_RESPONSE","EMAIL_RQ_RESPONSE","PROCESSING_CLARIF_RESPONSE","PHONE_RQ_RESPONSE"]}function getPSURPVArray(){return["CANCEL_LETTER","FOR_PERIOD","EMAIL_RQ_RESPONSE","PROCESSING_CLARIF_RESPONSE","PHONE_RQ_RESPONSE"]}function getRMPPVArray(){return["CANCEL_LETTER","EMAIL_RQ_RESPONSE","PROCESSING_CLARIF_RESPONSE","PHONE_RQ_RESPONSE","RMP_VERSION_DATE"]}function getSANDSArray(){return["ADMINISTRATIVE","CANCEL_LETTER","DRUG_NOTIF_FORM","POST_CLEARANCE_DATA","POST_NOC_CHANGE","PRISTINE_PM","PRISTINE_PM_2LANG","BE_CLARIF_RESPONSE","CLIN_CLARIF_RESPONSE","EMAIL_RQ_RESPONSE","LABEL_CLARIF_RESPONSE","NOC_RESPONSE","NOD_RESPONSE","NON_RESPONSE","PROCESSING_CLARIF_RESPONSE","QUAL_CLIN_CLARIF_RESPONSE","QUAL_CLARIF_RESPONSE","SCREENING_ACCEPT_RESPONSE","SCREENING_CLARIF_RESPONSE","SDN_RESPONSE","PHONE_RQ_RESPONSE","UNSOLICITED_DATA"]}function getSNDSArray(){return["ADMINISTRATIVE","CANCEL_LETTER","COMMENTS_SUMMARY_BASIS","DRUG_NOTIF_FORM","POST_CLEARANCE_DATA","POST_NOC_CHANGE","PRESUB_MEETING_PKG","PRIORITY_REVIEW_RQ","PRISTINE_PM","PRISTINE_PM_2LANG","BE_CLARIF_RESPONSE","CLIN_CLARIF_RESPONSE","EMAIL_RQ_RESPONSE","LABEL_CLARIF_RESPONSE","NOC_RESPONSE","NOD_RESPONSE","NON_RESPONSE","PROCESSING_CLARIF_RESPONSE","QUAL_CLIN_CLARIF_RESPONSE","QUAL_CLARIF_RESPONSE","SCREENING_ACCEPT_RESPONSE","SCREENING_CLARIF_RESPONSE","SDN_RESPONSE","PHONE_RQ_RESPONSE","UNSOLICITED_DATA"]}function getSNDSCArray(){return["CANCEL_LETTER","POST_NOC_CHANGE","PRISTINE_PM","PRISTINE_PM_2LANG","CLIN_CLARIF_RESPONSE","EMAIL_RQ_RESPONSE","LABEL_CLARIF_RESPONSE","NOC_RESPONSE","NOD_RESPONSE","NON_RESPONSE","PROCESSING_CLARIF_RESPONSE","PHONE_RQ_RESPONSE","RISK_COMMUN_DOC","SIGNAL_WORK_UP"]}function getUDPVArray(){return["BENEFIT_RISK_ASSESS","CANCEL_LETTER","NOTIFICATION_CHANGE","POST_MARKET_SURV","EMAIL_RQ_RESPONSE","MHPD_RQ_RESPONSE","PROCESSING_CLARIF_RESPONSE","PHONE_RQ_RESPONSE","RISK_COMMUN_DOC","SIGNAL_WORK_UP"]}function getUDRAVArray(){return["CANCEL_LETTER","DIN_DISCONTINUED","ADVISEMENT_LETTER_RESPONSE","EMAIL_RQ_RESPONSE","PROCESSING_CLARIF_RESPONSE","PHONE_RQ_RESPONSE","UNSOLICITED_DATA"]}function getConsultArray(){return["PANDEMIC_APPL"]}function _getMPNCArray(){return["CANCEL_LETTER","MEETING_MINUTES","EMAIL_RQ_RESPONSE","PROCESSING_CLARIF_RESPONSE","PHONE_RQ_RESPONSE"]}function _getMPNDSArray(){return["CANCEL_LETTER","MEETING_MINUTES","EMAIL_RQ_RESPONSE","PROCESSING_CLARIF_RESPONSE","PHONE_RQ_RESPONSE"]}function _getMPSNDSArray(){return["CANCEL_LETTER","MEETING_MINUTES","EMAIL_RQ_RESPONSE","PROCESSING_CLARIF_RESPONSE","PHONE_RQ_RESPONSE"]}function _getPANDArray(){return["CANCEL_LETTER","EMAIL_RQ_RESPONSE","PROCESSING_CLARIF_RESPONSE","PHONE_RQ_RESPONSE"]}function _getPBRERCArray(){return["CANCEL_LETTER","EMAIL_RQ_RESPONSE","PROCESSING_CLARIF_RESPONSE","PHONE_RQ_RESPONSE"]}function _getPBRERPVArray(){return["CANCEL_LETTER","EMAIL_RQ_RESPONSE","PROCESSING_CLARIF_RESPONSE","PHONE_RQ_RESPONSE"]}function _getPRNDSArray(){return["CANCEL_LETTER","EMAIL_RQ_RESPONSE","PROCESSING_CLARIF_RESPONSE","PHONE_RQ_RESPONSE"]}function _getPRSNDSArray(){return["CANCEL_LETTER","EMAIL_RQ_RESPONSE","PROCESSING_CLARIF_RESPONSE","PHONE_RQ_RESPONSE"]}function getYBPRArray(){return["CANCEL_LETTER","FOR_PERIOD","EMAIL_RQ_RESPONSE","PROCESSING_CLARIF_RESPONSE","PHONE_RQ_RESPONSE"]}var vm=this;vm.raTypeArray=[];var service={getTransactionDescriptions:getTransactionDescriptionsArray,getActivityTypes:getActivityArray,createRaTypes:_createRaArray,getPresubTypes:getPresubArray,getAndsType:getANDSArray,getDinaType:getDINAArray,getDinbType:getDINBArray,getEundsType:getEUNDSArray,getEusndsType:getEUSNDSArray,getLevel3Type:getLevel3Array,getNcType:getNCArray,getNdsType:getNDSArray,getPdcType:getPDCArray,getPdcBType:getPDCBArray,getPresubType:getPresubArray,getpSurCType:getPSURCArray,getpSurPvType:getPSURPVArray,getRmpPvType:getRMPPVArray,getSandsType:getSANDSArray,getSndsType:getSNDSArray,getSndsCArray:getSNDSCArray,getUdpvType:getUDPVArray,getUdraType:getUDRAVArray,getYbprType:getYBPRArray,getConsultType:getConsultArray,getMPNCType:_getMPNCArray,getMPNDSType:_getMPNDSArray,getMPSNDSType:_getMPSNDSArray,getPANDType:_getPANDArray,getPBRERCType:_getPBRERCArray,getPBRERPVType:_getPBRERPVArray,getPRNDSType:_getPRNDSArray,getPRSNDSType:_getPRSNDSArray,getYesNoList:yesNoArray};return service}angular.module("services").factory("TransactionLists",getTransactionSeq),getTransactionSeq.inject=["$http","$q"]}(),function(){"use strict";angular.module("filterLists",["hpfbConstants"])}(),function(){"use strict";function orderByTranslatedCountry($translate,$filter,CANADA,USA){return function(array,objKey){var result=[],translated=[];return angular.forEach(array,function(value){translated.push({key:value,label:$translate.instant(value)})}),result.push(CANADA),result.push(USA),angular.forEach($filter("orderBy")(translated,"label"),function(sortedObject){sortedObject.key!==CANADA&&sortedObject.key!==USA&&result.push(sortedObject.key)}),result}}function orderByTranslatedCountryAndLabel($translate,$filter,CANADA,USA){return function(array){var result=[],translated=[];return angular.forEach(array,function(value){translated.push({key:value,label:$translate.instant(value)})}),result.push({key:CANADA,label:$translate.instant(CANADA)}),result.push({key:USA,label:$translate.instant(USA)}),angular.forEach($filter("orderBy")(translated,"label"),function(sortedObject){sortedObject.key!==CANADA&&sortedObject.key!==USA&&result.push(sortedObject)}),result}}function findCountryObj(){return function(array,targetKey){for(var i=0;i<array.length;i++)if(array[i].key===targetKey)return array[i];return null}}function orderByTranslated($translate,$filter){return function(array){var result=[],translated=[];return angular.forEach(array,function(value){translated.push({key:value,label:$translate.instant(value)})}),angular.forEach($filter("orderBy")(translated,"label"),function(sortedObject){result.push(sortedObject.key)}),result}}function sequenceOrderBy($filter){return function(array){var result=[];return angular.forEach($filter("orderBy")(array,"sequence",!0),function(sortedObject){result.push(sortedObject);
}),result}}function orderByTranslatedOtherFirst($translate,$filter,OTHER){return function(array){var result=[],translated=[];return angular.forEach(array,function(value){translated.push({key:value,label:$translate.instant(value)})}),result.push(OTHER),angular.forEach($filter("orderBy")(translated,"label"),function(sortedObject){sortedObject.key!==OTHER&&result.push(sortedObject.key)}),result}}function _orderByLocale(){return function(items,lang){return items.sort(function(a,b){return a[lang].localeCompare(b[lang],lang)}),items}}angular.module("filterLists").filter("orderByTranslatedCountry",orderByTranslatedCountry).filter("orderByTranslated",orderByTranslated).filter("orderByTranslatedOtherFirst",orderByTranslatedOtherFirst).filter("orderByCountryAndLabel",orderByTranslatedCountryAndLabel).filter("orderByLocale",_orderByLocale).filter("findCountryObject",findCountryObj).filter("sequenceOrderDescending",sequenceOrderBy),orderByTranslatedCountry.$inject=["$translate","$filter","CANADA","USA"],orderByTranslated.$inject=["$translate","$filter"],orderByTranslatedOtherFirst.$inject=["$translate","$filter","OTHER"]}(),function(){"use strict";angular.module("repContactService",[])}(),function(){"use strict";function RepContactService(){function RepContactService(){}return RepContactService.prototype={_default:{}},RepContactService.prototype.getPrimaryRole=function(){return"PRIMARY"},RepContactService.prototype.getSecondaryRole=function(){return"SECONDARY"},RepContactService.prototype.createRepContact=function(repContactList){if(repContactList){var PRIMARY=this.getPrimaryRole(),SECONDARY=this.getSecondaryRole(),contact=_createDefaultRepContact(),currentContacts=repContactList;if(0==currentContacts.length)contact.repRole=PRIMARY;else{contact.repRole=PRIMARY;for(var i=0;i<currentContacts.length;i++)if(currentContacts[i].repRole==PRIMARY){contact.repRole=SECONDARY;break}}return contact}},RepContactService}function _createDefaultRepContact(){var repcontact=_createContactModel();return repcontact.repRole="",repcontact.amend=!1,repcontact}function _createContactModel(){var contact={};return contact.salutation="",contact.givenName="",contact.initials="",contact.surname="",contact.title="",contact.language="",contact.phone="",contact.phoneExt="",contact.fax="",contact.email="",contact}angular.module("repContactService").factory("RepContactService",RepContactService)}(),function(){"use strict";angular.module("hpfbConstants",[]),angular.module("hpfbConstants").constant("CANADA","CAN").constant("OTHER","OTHER").constant("YES","Y").constant("NO","N").constant("USA","USA").constant("UNKNOWN","UNKNOWN").constant("ENGLISH","en").constant("FRENCH","fr")}(),function(){"use strict";angular.module("applicationInfoService",[])}(),function(){"use strict";function ApplicationInfoService(){function ApplicationInfoService(){}return ApplicationInfoService.prototype.getTodayDate=function(){function pad(n){return n<10?"0"+n:n}var d=new Date,isoDate=d.getFullYear()+"-"+pad(d.getMonth()+1)+"-"+pad(d.getDate());return isoDate},ApplicationInfoService.prototype.incrementMinorVersion=function(enrolmentVersion){var result;if(enrolmentVersion){var parts=enrolmentVersion.split("."),dec=parseInt(parts[1]);result=parts[0]+"."+(dec+1)}else result="0.1";return result},ApplicationInfoService.prototype.incrementMajorVersion=function(enrolmentVersion){var result;if(enrolmentVersion){var parts=enrolmentVersion.split("."),whole=parseInt(parts[0]);result=whole+1+".0"}else result="1.0";return result},ApplicationInfoService.prototype.getApplicationStatusList=function(){return["NEW","AMEND","APPROVED"]},ApplicationInfoService.prototype.getApprovedType=function(){return"APPROVED"},ApplicationInfoService.prototype.getAmendType=function(){return"AMEND"},ApplicationInfoService}angular.module("applicationInfoService").factory("ApplicationInfoService",ApplicationInfoService)}(),function(){"use strict";angular.module("activityLists",[])}(),function(){"use strict";function getService($http,$q,$filter,$translate){function _getfeeClassArray(){return vm.feeClassArray&&0!==vm.feeClassArray.length?vm.feeClassArray:_loadFeeType()}function _loadFeeType(){var deferred=$q.defer(),feeClassUrl="data/feeClass.json";return $http.get(feeClassUrl).success(function(data,status,headers,config){var lang=$translate.proposedLanguage()||$translate.use(),newList=_createSortedArray(data,lang);vm.feeClassArray=newList,deferred.resolve(newList)}).error(function(data,status,headers,config){deferred.reject(status)}),deferred.promise}function _getRaTypeArray(){return vm.raTypeArray&&0!==vm.raTypeArray.length?vm.raTypeArray:_loadRaType()}function _loadRaType(){var deferred=$q.defer(),raTypeUrl="data/raType.json";return $http.get(raTypeUrl).success(function(data,status,headers,config){var lang=$translate.proposedLanguage()||$translate.use(),newList=_createSortedArray(data,lang);vm.raTypeArray=newList,deferred.resolve(newList)}).error(function(data,status,headers,config){deferred.reject(status)}),deferred.promise}function _getActivityLeadArray(){return["B14-20160301-09",vm.BIOLOGICAL,"B14-20160301-10","B14-20160301-07"]}function _getBiologicalLead(){return vm.BIOLOGICAL}function _getNC_raType(){return vm.NC_raType}function _getSANDS_raType(){return vm.SANDS_raType}function _getSNDS_raType(){return vm.SNDS_raType}function _getDIN_raType(){return vm.DIN_raType}function _createSortedArray(jsonList,lang){var result=[];return angular.forEach($filter("orderByLocale")(jsonList,lang),function(sortedObject){result.push(sortedObject)}),result}var vm=this;vm.feeClassArray=[],vm.raTypeArray=[],vm.BIOLOGICAL="B14-20160301-02",vm.NC_raType="B02-20160301-050",vm.SANDS_raType="B02-20160301-082",vm.SNDS_raType="B02-20160301-084",vm.DIN_raType="no used- deprecated?";var service={getFeeClassList:_getfeeClassArray,getRaTypeList:_getRaTypeArray,getActivityLeadList:_getActivityLeadArray,getBiologicalLeadValue:_getBiologicalLead,getSANDSRaTypeValue:_getSANDS_raType,getSNDSTypeValue:_getSNDS_raType,getNCTypeValue:_getNC_raType,getDINTypeValue:_getDIN_raType};return service}angular.module("activityLists").factory("ActivityListFactory",getService),getService.inject=["$http","$q","$filter","$translate"]}(),function(){"use strict";angular.module("activityService",["hpfbConstants","activityLists"])}(),function(){"use strict";function ActivityService(YES,NO,ActivityListFactory,$filter,$translate){function ActivityService(){var defaultActivityData={companyId:"",dstsControlNumber:"",enrolmentVersion:"",dateSaved:"",applicationType:"NEW",softwareVersion:"1.0.0",dataChecksum:"",dossierIdPrefix:"HC6-024-",dossierId:"",regActivityLead:"",regActivityType:"",feeClass:"",reasonFiling:"",isThirdParty:"",isAdminSub:"",relatedActivity:{},contactRecord:[]};defaultActivityData.rationaleTypes=_createRationalTypes(),defaultActivityData.notifiableChangeTypes=_createNotifiableChangeTypes(),defaultActivityData.relatedActivity=_getEmptyActivity(),angular.extend(this._default,defaultActivityData),this.rootTag="ACTIVITY_ENROL",this.activityId=0}return ActivityService.prototype={_default:{},SANDS:ActivityListFactory.getSANDSRaTypeValue(),SNDS:ActivityListFactory.getSNDSTypeValue(),NC:ActivityListFactory.getNCTypeValue(),VNC:"VNC",BIOLOGIC:ActivityListFactory.getBiologicalLeadValue(),DIN:ActivityListFactory.getDINTypeValue()},ActivityService.prototype.getRootTag=function(){return this.rootTag},ActivityService.prototype.transformToFileObj=function(jsonObj){var activity={ACTIVITY_ENROL:{template_type:"PHARMA",company_id:jsonObj.companyId,dsts_control_number:jsonObj.dstsControlNumber,enrolment_version:jsonObj.enrolmentVersion,date_saved:jsonObj.dateSaved,application_type:jsonObj.applicationType,software_version:jsonObj.softwareVersion,data_checksum:jsonObj.dataChecksum,dossier_id_prefix:jsonObj.dossierIdPrefix,dossier_id:jsonObj.dossierId,dossier_id_concat:"",reg_activity_lead:jsonObj.regActivityLead,reg_activity_type:"",fee_class:"",reason_filing:jsonObj.reasonFiling,is_third_party:jsonObj.isThirdParty,is_admin_submission:jsonObj.isAdminSub,notifiable_change_types:{},rationale_types:{}}};return jsonObj.feeClass&&(activity[this.rootTag].fee_class={_label_en:jsonObj.feeClass.en,_label_fr:jsonObj.feeClass.fr,__text:jsonObj.feeClass.id}),jsonObj.regActivityType&&(activity[this.rootTag].reg_activity_type={_label_en:jsonObj.regActivityType.en,_label_fr:jsonObj.regActivityType.fr,__text:jsonObj.regActivityType.id}),activity[this.rootTag].notifiable_change_types=_mapNotifiableChangeTypesToOutput(jsonObj.notifiableChangeTypes),activity[this.rootTag].rationale_types=_mapRationaleTypeToOutput(jsonObj.rationaleTypes),jsonObj.isAdminSub===YES&&(activity[this.rootTag].related_activity=this.tranformRelatedActivityToFileObj(jsonObj.relatedActivity)),activity[this.rootTag].contact_record=this.transformContactListToFileObj(jsonObj.contactRecord),jsonObj.dossierId?activity[this.rootTag].dossier_id_concat=jsonObj.dossierIdPrefix+jsonObj.dossierId:activity[this.rootTag].dossier_id_concat="",activity},ActivityService.prototype.mapContactList=function(jsonObj){return _mapRegulatoryContactList(jsonObj)},ActivityService.prototype.transformContactListToFileObj=function(jsonObj){return _transformRegulatoryContactListToFileObj(jsonObj)},ActivityService.prototype.tranformRelatedActivityToFileObj=function(jsonObj){var activity={};activity.sponsor_name=jsonObj.sponsorName,activity.date_cleared="";var dateCleared=jsonObj.dateCleared,month="",day="";return dateCleared&&(month=dateCleared.getMonth()+1,day=dateCleared.getDate(),month<10&&(month="0"+month),day<10&&(day="0"+day),activity.date_cleared=dateCleared.getFullYear()+"-"+month+"-"+day),activity.reg_activity_type="",activity.reg_activity_type={_label_en:jsonObj.regActivityType.en,_label_fr:jsonObj.regActivityType.fr,__text:jsonObj.regActivityType.id},activity.control_number=jsonObj.controlNumber,activity.license_agreement=jsonObj.licenseAgree,activity.din_transfer=jsonObj.dinTransfer===!0?YES:NO,activity.not_lasa=jsonObj.notLasa===!0?YES:NO,activity},ActivityService.prototype.getModelInfo=function(){return this._default},ActivityService.prototype.getActivityInfo=function(jsonObj){if(!jsonObj)return this._default;var model={};model.companyId=jsonObj.company_id,model.dstsControlNumber=jsonObj.dsts_control_number,model.enrolmentVersion=jsonObj.enrolment_version,model.dateSaved=jsonObj.date_saved,model.applicationType=jsonObj.application_type,model.softwareVersion=jsonObj.software_version,model.dataChecksum=jsonObj.software_version,model.dossierIdPrefix=jsonObj.dossier_id_prefix,model.dossierId=jsonObj.dossier_id,model.regActivityLead=jsonObj.reg_activity_lead,model.regActivityType=$filter("filter")(ActivityListFactory.getRaTypeList(),{id:jsonObj.reg_activity_type.__text})[0],model.feeClass=$filter("filter")(ActivityListFactory.getFeeClassList(),{id:jsonObj.fee_class.__text})[0],model.reasonFiling=jsonObj.reason_filing,model.isThirdParty=jsonObj.is_third_party,model.isAdminSub=jsonObj.is_admin_submission,model.notifiableChangeTypes=_transformNotifiableChangeTypeFromFileObj(jsonObj.notifiable_change_types),model.rationaleTypes=_transformRationaleTypeFromFileObj(jsonObj.rationale_types),model.relatedActivity={};var repContacts={contactRecord:[]};return jsonObj.related_activity&&(model.relatedActivity=this.transformRelatedRegActivityFromFileObj(jsonObj.related_activity)),jsonObj.contact_record&&(repContacts.contactRecord=this.mapContactList(jsonObj.contact_record)),angular.merge(model,repContacts)},ActivityService.prototype.resetRationale=function(){this._default.rationaleTypes=_createRationalTypes()},ActivityService.prototype.resetNotifiableChanges=function(){this._default.notifiableChangeTypes=_createNotifiableChangeTypes()},ActivityService.prototype.transformFromFileObj=function(jsonObj){var activityInfo=this.getActivityInfo(jsonObj[this.rootTag]);this._default=activityInfo},ActivityService.prototype.getNewActivity=function(){var activity={activityId:this.getNextActivityId(),regActivityType:"",dateCleared:"",dstsControlNumber:"",dossierId:"",manufacturerName:"",reasonFiling:"",assocDins:[]};return activity},ActivityService.prototype.isNotifiableChange=function(value){return!!value&&(value===this.VNC||value===this.NC)},ActivityService.prototype.isRationale=function(activity,lead){return!!activity&&(activity===this.SANDS||activity===this.SNDS||activity===this.DIN&&lead===this.BIOLOGIC)},ActivityService.prototype.updateActivityId=function(value){isNaN(value)||value>this.activityId&&(this.activityId=value)},ActivityService.prototype.getNextActivityId=function(){return this.activityId=this.activityId+1,this.activityId},ActivityService.prototype.resetActivityId=function(value){value?this.activityId=value:this.activityId=0},ActivityService.prototype.getEmptyRelatedActivity=function(){return _getEmptyActivity()},ActivityService.prototype.transformRelatedRegActivityFromFileObj=function(jsonObj){var relatedActivity=this.getEmptyRelatedActivity();return relatedActivity.sponsorName=jsonObj.sponsor_name,relatedActivity.dateCleared="",jsonObj.date_cleared&&(relatedActivity.dateCleared=_parseDate(jsonObj.date_cleared)),relatedActivity.regActivityType=$filter("filter")(ActivityListFactory.getRaTypeList(),{id:jsonObj.reg_activity_type.__text})[0],relatedActivity.controlNumber=Number(jsonObj.control_number),relatedActivity.licenseAgree=jsonObj.license_agreement,relatedActivity.dinTransfer=jsonObj.din_transfer===YES,relatedActivity.notLasa=jsonObj.not_lasa===YES,relatedActivity},ActivityService}function _mapRegulatoryContactList(jsonObj){var result=[];if(!jsonObj)return result;jsonObj instanceof Array||(jsonObj=[jsonObj]);for(var i=0;i<jsonObj.length;i++)result.push(_transformRepContactFromFileObj(jsonObj[i]));return result}function _transformRegulatoryContactListToFileObj(jsonObj){var result=[];if(!jsonObj)return result;jsonObj instanceof Array||(jsonObj=[jsonObj]);for(var i=0;i<jsonObj.length;i++)result.push(_mapRepContactToOutput(jsonObj[i]));return result}function _transformRepContactFromFileObj(repObj){var repContact=_transformContactFromFileObj(repObj.rep_contact_details);return repContact.repRole=repObj.rep_contact_role,repContact.amend="Y"===repObj.amend_record,repContact}function _mapRepContactToOutput(repObj){var repContact={};return repContact.rep_contact_role=repObj.repRole,repContact.amend_record=repObj.amend===!0?"Y":"N",repContact.rep_contact_details=_mapContactToOutput(repObj),repContact}function _transformContactFromFileObj(contactObj){var contact={};return contactObj?(contact.salutation=contactObj.salutation,contact.givenName=contactObj.given_name,contact.initials=contactObj.initials,contact.surname=contactObj.surname,contact.title=contactObj.job_title,contact.language=contactObj.language_correspondance,contact.phone=contactObj.phone_num,contact.phoneExt=contactObj.phone_ext,contact.fax=contactObj.fax_num,contact.email=contactObj.email,contact):(console.error("There is no contact object"),contact)}function _mapContactToOutput(contactObj){var contact={};return contact.salutation=contactObj.salutation,contact.given_name=contactObj.givenName,contact.initials=contactObj.initials,contact.surname=contactObj.surname,contact.job_title=contactObj.title,contact.language_correspondance=contactObj.language,contact.phone_num=contactObj.phone,contact.phone_ext=contactObj.phoneExt,contact.fax_num=contactObj.fax,contact.email=contactObj.email,contact}function _createRationalTypes(){return{newRoa:!1,newClaims:!1,changeFormulation:!1,changeDrugSubstance:!1,replaceSterility:!1,confirmitoryStudies:!1,otherRationale:!1,otherRationaleDetails:""}}function _createNotifiableChangeTypes(){return{textLabelChange:!1,drugSubstanceChange:!1,formulationChange:!1,specificationChange:!1,expiryStorageChange:!1,manufactMethodChange:!1,manufactSiteChange:!1,containerSizeChange:!1,packagingSpecChange:!1,packagingMaterialsChange:!1,otherChangeDetails:""}}function _mapNotifiableChangeTypesToOutput(jsonObj){return jsonObj?{text_label_change:jsonObj.textLabelChange===!0?"Y":"N",drug_substance_change:jsonObj.drugSubstanceChange===!0?"Y":"N",formulation_change:jsonObj.formulationChange===!0?"Y":"N",specification_change:jsonObj.specificationChange===!0?"Y":"N",expiry_storage_change:jsonObj.expiryStorageChange===!0?"Y":"N",manufact_method_change:jsonObj.manufactMethodChange===!0?"Y":"N",manufact_site_change:jsonObj.manufactSiteChange===!0?"Y":"N",container_size_change:jsonObj.containerSizeChange===!0?"Y":"N",packaging_spec_change:jsonObj.packagingSpecChange===!0?"Y":"N",packaging_materials_change:jsonObj.packagingMaterialsChange===!0?"Y":"N",other_change_details:jsonObj.otherChangeDetails}:null}function _transformNotifiableChangeTypeFromFileObj(jsonObj){return jsonObj?{textLabelChange:"Y"===jsonObj.text_label_change,drugSubstanceChange:"Y"===jsonObj.drug_substance_change,formulationChange:"Y"===jsonObj.formulation_change,specificationChange:"Y"===jsonObj.specification_change,expiryStorageChange:"Y"===jsonObj.expiry_storage_change,manufactMethodChange:"Y"===jsonObj.manufact_method_change,manufactSiteChange:"Y"===jsonObj.manufact_site_change,containerSizeChange:"Y"===jsonObj.container_size_change,packagingSpecChange:"Y"===jsonObj.packaging_spec_change,packagingMaterialsChange:"Y"===jsonObj.packaging_materials_change,otherChangeDetails:jsonObj.other_change_details}:null}function _transformRationaleTypeFromFileObj(jsonObj){return jsonObj?{newRoa:"Y"===jsonObj.new_roa,newClaims:"Y"===jsonObj.new_claims,changeFormulation:"Y"===jsonObj.change_formulation,changeDrugSubstance:"Y"===jsonObj.change_drug_substance,replaceSterility:"Y"===jsonObj.replace_sterility,confirmitoryStudies:"Y"===jsonObj.confirmitory_studies,otherRationale:"Y"===jsonObj.other_rationale,otherRationaleDetails:jsonObj.other_rationale_details}:null}function _mapRationaleTypeToOutput(jsonObj){return jsonObj?{new_roa:jsonObj.newRoa===!0?"Y":"N",new_claims:jsonObj.newClaims===!0?"Y":"N",change_formulation:jsonObj.changeFormulation===!0?"Y":"N",change_drug_substance:jsonObj.changeDrugSubstance===!0?"Y":"N",replace_sterility:jsonObj.replaceSterility===!0?"Y":"N",confirmitory_studies:jsonObj.confirmitoryStudies===!0?"Y":"N",other_rationale:jsonObj.otherRationale===!0?"Y":"N",other_rationale_details:jsonObj.otherRationaleDetails}:null}function _parseDate(value){var dateArray=value.split("-");3!=dateArray.length&&console.error("_parseDate error not 3 parts");var aDate=new Date(dateArray[0],dateArray[1]-1,dateArray[2]);return aDate}function _getEmptyActivity(){return{sponsorName:"",dateCleared:"",regActivityType:"",controlNumber:"",licenseAgree:"",dinTransfer:"",notLasa:!1}}angular.module("activityService").factory("ActivityService",ActivityService),ActivityService.$inject=["YES","NO","ActivityListFactory","$filter","$translate"]}(),function(){"use strict";angular.module("adminSubmission",["numberFormat","hpfbConstants","ui.bootstrap","ui.select"])}(),function(){"use strict";function AdminSubCtrl(NO,$translate){var vm=this;vm.dateFormat="yyyy-MM-dd",vm.dinTransferShow=!1,vm.model={sponsorName:"",dateCleared:"",regActivityType:"",controlNumber:"",licenseAgree:"",dinTransfer:"",notLasa:!1},vm.lang=$translate.proposedLanguage()||$translate.use(),vm.dateOptions={showWeeks:!1},vm.openRefDate=function(){vm.refDateOpen=!0},vm.yesNoList=vm.yesNoTypes(),vm.activityTypeList=vm.activityTypes({isPilot:!0}),vm.$onInit=function(){vm.isLicenseAgreement()},vm.$onChanges=function(changes){changes.record&&(vm.model=changes.record.currentValue,vm.isLicenseAgreement())},vm.showError=function(isTouched,isInvalid){if(isTouched&&isInvalid||isInvalid&&vm.showErrors)return!0},vm.showErrorCheckBox=function(isTouched,value){return!value&&isTouched||vm.showErrors&&!value},vm.isLicenseAgreement=function(){vm.model&&NO===vm.model.licenseAgree?vm.dinTransferShow=!0:(vm.dinTransferShow=!1,vm.model.dinTransfer=!1)}}angular.module("adminSubmission").component("cmpAdminSub",{templateUrl:"app/scripts/components/adminSubmission/tpl-admin-sub_20170124_1227.html",controller:AdminSubCtrl,controllerAs:"adminCtrl",bindings:{record:"<",showErrors:"<",activityTypes:"&",yesNoTypes:"&"}}),AdminSubCtrl.$inject=["NO","$translate"]}(),function(){"use strict";angular.module("contactModule25",["contactModule"])}(),function(){"use strict";function contactRecCtrl($scope){var vm=this;vm.savePressed=!1,vm.formAmend=!1,vm.isContact=!0,vm.isNotEditable=!1,vm.contactModel={},vm.editState=!0,vm.$onInit=function(){},vm.$onChanges=function(changes){changes.contactRecord&&(console.log(changes.contactRecord.currentValue),vm.contactModel=angular.copy(changes.contactRecord.currentValue),vm.setEditableState()),changes.isAmend&&(vm.formAmend=changes.isAmend.currentValue,vm.setEditableState())},vm["delete"]=function(){vm.onDelete({contactId:vm.contactModel.repRole})},vm.discardChanges=function(){if(!vm.contactRecForm.$pristine){var currRecord=vm.contactRecord;vm.contactModel=angular.copy(currRecord),vm.setNotEditable(),vm.contactRecForm.$setPristine(),vm.isDetailValid({state:vm.contactRecForm.$valid}),vm.savePressed=!1}},vm.updateValid=function(){vm.isDetailValid({state:vm.contactRecForm.$valid&&!vm.contactRecForm.$dirty})},$scope.$watch("contactRec.contactRecForm.$dirty",function(){vm.contactRecForm.$dirty&&vm.isDetailValid({state:!1})},!0),vm.updateContactModel=function(){vm.contactRecForm.$valid&&(vm.isDetailValid({state:!0}),vm.contactRecForm.$setPristine(),vm.onUpdate({contact:vm.contactModel})),vm.savePressed=!0},vm.showErrors=function(){return vm.savePressed},vm.setEditableState=function(){vm.formAmend?vm.formAmend&&vm.contactModel.amend?vm.editState=!0:vm.editState=!1:vm.editState=!0}}angular.module("contactModule25").component("cmpRepContactRecord",{templateUrl:"app/scripts/components/rep-contact-record/tpl-rep-contact-record_20170124_1227.html",controller:contactRecCtrl,controllerAs:"contactRec",bindings:{contactRecord:"<",onUpdate:"&",updateValid:"&",onDelete:"&",isDetailValid:"&",isAmend:"<"}}),contactRecCtrl.$inject=["$scope"]}(),function(){"use strict";angular.module("contactModule26",["contactModule25","expandingTable","repContactService"])}(),function(){"use strict";function contactListCtrl($filter,RepContactService){var vm=this;vm.selectRecord=-1,vm.isDetailValid=!0,vm.contactList=[],vm.oneRecord="",vm.isParentDirty=!1,vm.formAmend=!1,vm.resetCollapsed=!1;var repContactService=new RepContactService;vm.columnDef=[{label:"FIRST_NAME",binding:"givenName",width:"40"},{label:"LAST_NAME",binding:"surname",width:"40"},{label:"ONE_ROLE",binding:"repRole",width:"20"}],vm.$onInit=function(){vm.focused=!1},vm.$onChanges=function(changes){changes.contacts&&(vm.contactList=changes.contacts.currentValue,vm.updateErrorState()),changes.parentDirty&&(vm.isParentDirty=changes.parentDirty.currentValue),changes.isAmend&&(vm.formAmend=changes.isAmend.currentValue)},vm.isAddContact=function(){return!(vm.contactList.length>1)&&vm.isDetailValid},vm.showNoRecordError=function(isInvalid){return vm.isParentDirty&&isInvalid||vm.showListErrors()&&isInvalid},vm.setValid=function(value){vm.isDetailValid=value},vm.showError=function(){return vm.contactListForm.$invalid&&!vm.contactListForm.$pristine||vm.contactListForm.$invalid&&vm.showListErrors()},vm.onUpdateContactRecord=function(record){var idx=vm.contactList.indexOf($filter("filter")(vm.contactList,{repRole:record.repRole},!0)[0]);vm.contactList[idx]=angular.copy(record),vm.updateErrorState(),vm.contactListForm.$setPristine(),vm.resetCollapsed=!vm.resetCollapsed,vm.disableAdd()},vm.updateErrorState=function(){vm.contactList&&vm.contactList.length>0?vm.oneRecord="is value":vm.oneRecord=""},vm.deleteContact=function(cID){var idx=vm.contactList.indexOf($filter("filter")(vm.contactList,{repRole:cID},!0)[0]);if(vm.contactList.splice(idx,1),1===vm.contactList.length&&"PRIMARY"!==vm.contactList[0].repRole){vm.contactList[0].repRole="PRIMARY";var temp=angular.copy(vm.contactList);vm.contactList=[],vm.contactList=temp}vm.updateErrorState(),vm.disableAdd(),vm.setValid(!0),vm.selectRecord=-1,vm.resetCollapsed=!vm.resetCollapsed},vm.addContact=function(){var defaultContact=repContactService.createRepContact(vm.contactList);vm.contactList.push(defaultContact),vm.selectRecord=vm.contactList.length-1,vm.setValid(!1)},vm.disableAdd=function(){if(!vm.contactList)return!1;var isInvalid=!vm.isDetailValid||2==vm.contactList.length||vm.contactList.length>0&&vm.contactListForm.$invalid;return isInvalid}}angular.module("contactModule26").component("cmpRepContactList",{templateUrl:"app/scripts/components/repContactList/tpl-rep-contact-list_20170124_1227.html",controller:contactListCtrl,controllerAs:"contactListCtrl",bindings:{contacts:"<",showListErrors:"&",parentDirty:"<",isAmend:"<"}}),contactListCtrl.$inject=["$filter","RepContactService"]}(),function(){"use strict";angular.module("fileIO",[])}(),function(){"use strict";function ngFileSelect(hpfbFileReader){function link(scope,element,attrs){scope.rootTag=attrs.rootTag,element.bind("change",function(e){scope.file=(e.srcElement||e.target).files[0],hpfbFileReader.readAsDataText(scope.file,scope).then(function(result){scope.hpfbFileSelect({fileContent:result})})})}var directive={link:link,restrict:"A",scope:{hpfbFileSelect:"&"}};return directive}angular.module("fileIO").directive("hpfbFileSelect",ngFileSelect),ngFileSelect.$inject=["hpfbFileProcessing"]}(),function(){"use strict";function FileSelectController(hpfbFileProcessing){var vm=this;vm.fileTypes=".xml, .hcsc",vm.modelCallback=function(fileContent){vm.status="",fileContent&&(vm.status=fileContent.messages),vm.updateModelRoot({fileContent:fileContent}),angular.element(fileLoad).trigger("focus")}}angular.module("fileIO").component("hpfbFileSelect",{templateUrl:"app/scripts/components/fileIO/fileSelect_20170124_1227.html",controller:FileSelectController,bindings:{updateModelRoot:"&",rootElem:"@"}}),FileSelectController.$inject=["hpfbFileProcessing"]}(),function(){"use strict";function FileWriteController(hpfbFileProcessing){function _generateFile(){"JSON"===vm.saveType.toUpperCase()?hpfbFileProcessing.writeAsJson(vm.jsonToSave,vm.fileName,vm.rootTag):"XML"===vm.saveType.toUpperCase()&&hpfbFileProcessing.writeAsXml(vm.jsonToSave,vm.fileName,vm.rootTag)}function _init(){vm.buttonDisabled?"true"===vm.buttonDisabled.toLowerCase()?vm.buttonDisabled=!0:"false"===vm.buttonDisabled.toLowerCase()?vm.buttonDisabled=!1:vm.buttonDisabled=!1:vm.buttonDisabled=!1}var vm=this;vm.$onInit=_init,vm.generate=_generateFile}angular.module("fileIO").component("hpfbFileSave",{templateUrl:"app/scripts/components/fileIO/fileSave_20170124_1227.html",controller:FileWriteController,bindings:{jsonToSave:"<",rootTag:"@",saveType:"@",buttonLabel:"@",buttonDisabled:"@"}}),FileWriteController.$inject=["hpfbFileProcessing"]}(),function(){"use strict";function fileReader($q){function onLoad(reader,deferred,scope,file){return function(){scope.$apply(function(){if(file){var splitFile=file.name.split("."),fileType=splitFile[splitFile.length-1];fileType.toLowerCase()==draft_file_type?(convertToJSONObjects(reader),checkRootTagMatch(reader,scope)):"xml"===fileType.toLowerCase()?(convertXMLToJSONObjects(reader),checkRootTagMatch(reader,scope)):(convertResult.parseResult=null,convertResult.messages=msg_err_fileType,reader.parseResult=convertResult)}deferred.resolve(reader.parseResult)})}}function onError(reader,deferred,scope){return function(){scope.$apply(function(){deferred.reject(msg_err_load)})}}function getReader(deferred,scope,file){var reader=new FileReader;return reader.onload=onLoad(reader,deferred,scope,file),reader.onError=onError(reader,deferred,scope),reader.parseResult=null,reader}function readAsDataText(file,scope){var deferred=$q.defer(),reader=getReader(deferred,scope,file);return file?reader.readAsText(file):(reader.parseResult=convertResult,reader.parseResult.messages="",reader.parseResult.jsonResult=null,deferred.resolve(reader.parseResult)),deferred.promise}function convertToJSONObjects(reader){try{convertResult.jsonResult=JSON.parse(reader.result),convertResult.messages=msg_success,reader.parseResult=convertResult}catch(e){convertResult.jsonResult=null,convertResult.messages=msg_err_jsonparse,reader.parseResult=convertResult}}function convertXMLToJSONObjects(reader){var xmlConfig={escapeMode:!0,emptyNodeForm:"text",useDoubleQuotes:!0},xmlConverter=new X2JS(xmlConfig);convertResult.jsonResult=xmlConverter.xml_str2json(reader.result),null===convertResult.jsonResult?convertResult.messages=msg_err_xmlparse:convertResult.messages=msg_success,reader.parseResult=convertResult}function convertJSONObjectsToXML(jsonObj){var xmlConfig={escapeMode:!0,emptyNodeForm:"text",useDoubleQuotes:!0},jsonConverter=new X2JS(xmlConfig),xmlResult=null;return xmlResult=jsonConverter.json2xml_str(jsonObj)}function checkRootTagMatch(reader,scope){scope.rootTag&&reader.parseResult&&reader.parseResult.jsonResult&&(reader.parseResult.jsonResult[scope.rootTag]||(reader.parseResult.jsonResult=null,reader.parseResult.messages=msg_err_formType))}function jsonToFile(jsonObj,fileName,rootTag){if(jsonObj){var makeStrSave=JSON.stringify(jsonObj),blob=new Blob([makeStrSave],{type:"text/plain;charset=utf-8"});fileName?fileName+="."+draft_file_type:fileName="hpfbDraft."+draft_file_type,saveAs(blob,fileName)}}function xmlToFile(jsonObj,fileName,rootTag){if(jsonObj){var xmlResult=convertJSONObjectsToXML(jsonObj);xmlResult='<?xml version="1.0" encoding="UTF-8"?><?xml-stylesheet href="REP_Combined.xsl" type="text/xsl"?>'+xmlResult;var blob=new Blob([xmlResult],{type:"text/plain;charset=utf-8"});fileName?fileName+=".xml":fileName="hpfbXML.xml",saveAs(blob,fileName)}}var msg_success="MSG_SUCCESS_LOAD",msg_err_jsonparse="MSG_ERR_JSONPARSE",msg_err_xmlparse="MSG_ERR_XMLPARSE",msg_err_load="MSG_ERR_FILE_LOAD",msg_err_fileType="MSG_ERR_FILE_TYPE",msg_err_formType="MSG_ERR_FORM_TYPE",draft_file_type="hcsc",convertResult={jsonResult:"",messages:""},service={readAsDataText:readAsDataText,writeAsJson:jsonToFile,writeAsXml:xmlToFile};return service}angular.module("fileIO").factory("hpfbFileProcessing",fileReader),fileReader.$inject=["$q"]}(),function(){"use strict";angular.module("expandingTable",[])}(),function(){"use strict";function expandingTableCtrl($filter){function _setNumberColumns(){vm.disableErrorCol?vm.numberCols=vm.numberCols+1:vm.numberCols=vm.numberCols+2}function _recalculateColumnDefs(colDefs,numCols){var caretWidth=2,errorWidth=5,totalWidth=caretWidth+errorWidth,toSubtract=totalWidth/numCols,result=[];if(vm.disableErrorCol)return colDefs;for(var i=0;i<numCols;i++){var oneDef=angular.copy(colDefs[i]);oneDef.width>toSubtract&&(oneDef.width=oneDef.width-toSubtract),result.push(oneDef)}return result}function updateTableRow(textIndex){var selectIndex=parseInt(textIndex);selectIndex>=0&&vm.selectTableRow(selectIndex)}function _createArray(arraySize,initialVal){for(var anArray=[],i=0;i<arraySize;i++)anArray.push(initialVal);return anArray}var vm=this;vm.focused=!1,vm.columnDefinitions={},vm.disableExpand=!1,vm.tableRowExpanded=!1,vm.tableRowIndexCurrExpanded="",vm.tableRowIndexPrevExpanded="",vm.numberCols=vm.columnDef.length+2,vm.disableErrorCol=!1,vm.dayDataCollapse=_createArray(0,!0),vm.$onInit=function(){vm.listItems&&(vm.dayDataCollapse=_createArray(vm.listItems.length,!0))},vm.getExpandedState=function(row){return row===vm.tableRowIndexCurrExpanded},vm.$onChanges=function(changes){if(changes.listItems&&(vm.listItems?vm.dayDataCollapse=_createArray(vm.listItems.length,!0):vm.dayDataCollapse=_createArray(0,!0),vm.resetTableRow()),changes.resetToCollapsed&&(vm.resetTableRow(),changes.selectRecord||updateTableRow(vm.selectRecord)),changes.selectRecord){var selectIndex=parseInt(changes.selectRecord.currentValue);selectIndex>=0?vm.selectTableRow(selectIndex):vm.resetTableRow()}changes.disableSelection&&(vm.disableExpand=changes.disableSelection.currentValue),changes.columnDef&&(vm.numberCols=changes.columnDef.currentValue.length,vm.columnDefinitions=_recalculateColumnDefs(changes.columnDef.currentValue,vm.numberCols),
_setNumberColumns()),changes.disableErrColumn&&(vm.disableErrorCol=changes.disableErrColumn.currentValue,vm.numberCols=vm.columnDef.length,_setNumberColumns())},vm.formInError=function(aForm){return aForm&&aForm.$invalid?"Y":"N"},vm.deletedRow=function(){vm.tableRowExpanded=!1,vm.tableRowIndexCurrExpanded=""},vm.resetTableRow=function(){vm.tableRowIndexPrevExpanded="",vm.tableRowExpanded=!1,vm.tableRowIndexCurrExpanded="",vm.listItems?vm.dayDataCollapse=_createArray(vm.listItems.length,!0):_createArray(0,!0)},vm.dayDataCollapseFn=function(){for(var i=0;vm.listItems.length-1;i+=1)vm.dayDataCollapse.append("true")},vm.selectTableRow=function(index){vm.disableExpand||("undefined"===vm.dayDataCollapse?vm.dayDataCollapse=vm.dayDataCollapseFn():vm.tableRowExpanded===!1&&""===vm.tableRowIndexCurrExpanded?(vm.tableRowIndexPrevExpanded="",vm.tableRowExpanded=!0,vm.tableRowIndexCurrExpanded=index,vm.dayDataCollapse[index]=!1):vm.tableRowExpanded===!0&&(vm.tableRowIndexCurrExpanded===index?(vm.tableRowExpanded=!1,vm.tableRowIndexCurrExpanded="",vm.dayDataCollapse[index]=!0):(vm.tableRowIndexPrevExpanded=vm.tableRowIndexCurrExpanded,vm.tableRowIndexCurrExpanded=index,vm.dayDataCollapse[vm.tableRowIndexPrevExpanded]=!0,vm.dayDataCollapse[vm.tableRowIndexCurrExpanded]=!1)))}}angular.module("expandingTable").component("cmpExpandingTable",{templateUrl:"app/scripts/components/expandingTable/tpl-expanding-table_20170124_1227.html",controller:expandingTableCtrl,controllerAs:"expandTblCtrl",transclude:!0,bindings:{title:"@",listItems:"<",columnDef:"<",disableSelection:"<",selectRecord:"<",resetToCollapsed:"<",disableErrColumn:"@"}}),expandingTableCtrl.$inject=["$filter"]}(),function(){"use strict";angular.module("contactModule",["dataLists","hpfbConstants"])}(),function(){"use strict";function contactCtrl(getContactLists,ENGLISH,FRENCH){var vm=this;vm.isEditable=!0,vm.ngModelOptSetting={updateOn:"blur"},vm.salutationList=getContactLists.getSalutationList(),vm.langCorresppond=[ENGLISH,FRENCH],vm.phoneReg=/\(?([0-9]{3})\)?([ .-]?)([0-9]{3})\2([0-9]{4})/,vm.contactModel={isDetailValid:!1,contactId:"",amendRecord:!1,addressRole:{manufacturer:!1,mailing:!1,billing:!1,importer:!1},contactRole:"",salutation:"",givenName:"",surname:"",initials:"",title:"",phone:"",PhoneExt:"",fax:""},vm.$onInit=function(){vm.langList=[ENGLISH,FRENCH]},vm.$onChanges=function(changes){changes.contactRecord&&(vm.contactModel=changes.contactRecord.currentValue),changes.isAmend&&(vm.isEditable=changes.isAmend.currentValue)},vm.showError=function(ctrl){return!!(ctrl.$invalid&&ctrl.$touched||vm.showErrors()&&ctrl.$invalid)}}angular.module("contactModule").component("cmpContactDetails",{templateUrl:"app/scripts/components/contactDetails/tpl-contact-details_20170124_1227.html",controller:contactCtrl,controllerAs:"contCtrl",bindings:{contactRecord:"<",onUpdate:"&",isAmend:"<",showErrors:"&"}}),contactCtrl.$inject=["getContactLists","ENGLISH","FRENCH"]}(),function(){"use strict";angular.module("applicationInfo",[])}(),function(){"use strict";function ApplInfoCtrl(){function _setConfigItems(configJson){vm.fieldIdLabel=configJson.label,vm.fieldLength=configJson.fieldLength,vm.tagName=configJson.tagName,vm.errorMsg=configJson.errorMsg,vm.isDossier=configJson.isDossier,angular.isUndefined(vm.isDossier)&&(vm.isDossier=!1)}var vm=this;vm.applTypes=["NEW","AMEND","APPROVED"],vm.formType="EXT",vm.infoModel={applicationType:"NEW",enrolmentVersion:"0.0",dateSaved:""},vm.fieldIdLabel="",vm.fieldLength="",vm.tagName="fieldId",vm.setAsIncomplete=!0,vm.errorMsg="",vm.isDossier=!1,vm.$onInit=function(){},vm.$onChanges=function(changes){changes.userType&&(vm.formType=changes.userType.currentValue),changes.record&&(vm.infoModel=changes.record.currentValue),changes.isIncomplete&&(vm.setAsIncomplete=changes.isIncomplete.currentValue),changes.configureIdField&&_setConfigItems(changes.configureIdField.currentValue)},vm.isExtern=function(){return"EXT"==vm.formType},vm.setAmendState=function(){vm.setType({type:"AMEND"})}}angular.module("applicationInfo").component("cmpApplicationInfo",{templateUrl:"app/scripts/components/applicationInfo/tpl-application-info_20170124_1227.html",controller:ApplInfoCtrl,controllerAs:"infoCtrl",bindings:{record:"<",userType:"<",isIncomplete:"<",configureIdField:"<",setType:"&"}})}(),function(){"use strict";angular.module("activityForm",[])}(),function(){"use strict";function activityRationaleCtrl(){var vm=this;vm.record={},vm.requiredState=!1,vm.rationaleSelected="",vm.$onChanges=function(changes){changes.activityRecord&&(vm.record=changes.activityRecord.currentValue,vm.updateErrorState()),changes.isRequired&&(vm.requiredState=changes.isRequired.currentValue,vm.updateErrorState())},vm.showError=function(isTouched,isInvalid){return!!(isInvalid&&isTouched||vm.showErrors()&&isInvalid)},vm.updateErrorState=function(){vm.record.newRoa||vm.record.newClaims||vm.record.changeFormulation||vm.record.changeDrugSubstance||vm.record.replaceSterility||vm.record.confirmitoryStudies||vm.record.otherRationaleDetails?vm.rationaleSelected="value":vm.rationaleSelected=""},vm.showErrorMissing=function(){return!!vm.requiredState&&(!vm.rationaleSelected&&(!!(!vm.activityTypeForm.$pristine&&vm.activityTypeForm.$invalid||vm.showErrors()&&vm.activityTypeForm.$invalid||vm.activityTypeForm.$touched&&vm.activityTypeForm.$invalid)||void 0))}}angular.module("activityForm").component("cmpActivityRationale",{templateUrl:"app/scripts/components/activityRationale/tpl-activity-rationale_20170124_1227.html",controller:activityRationaleCtrl,controllerAs:"actRatCtrl",bindings:{activityRecord:"<",isRequired:"<",showErrors:"&"}})}(),function(){"use strict";angular.module("activityMain",["pascalprecht.translate","ngMessages","ngAria","fileIO","ngSanitize","activityService","applicationInfoService","applicationInfo","filterLists","commonStaticLists","activityChange","activityForm","numberFormat","contactModule26","contactModule","contactModule25","adminSubmission","activityLists","ui.bootstrap","ui.select"])}(),function(){"use strict";function activityMainCtrl(ActivityService,ApplicationInfoService,hpfbFileProcessing,$scope,$translate,CommonLists,ActivityListFactory){function loadActivityData(){ActivityListFactory.getRaTypeList().then(function(data){return vm.activityTypeList=data,!0})}function loadFeeData(){ActivityListFactory.getFeeClassList().then(function(data){return vm.feeClassList=data,!0})}function _createFilename(){var draft_prefix="DRAFTREPRA",final_prefix="HCREPRA",filename="";return filename="INT"===vm.userType?final_prefix:draft_prefix,vm.activityRoot&&vm.activityRoot.dstsControlNumber&&(filename=filename+"_"+vm.activityRoot.dstsControlNumber),vm.activityRoot.enrolmentVersion&&(filename=filename+"_"+vm.activityRoot.enrolmentVersion),filename;var filename}function _transformFile(){return updateDate(),vm.isExtern()?vm.activityRoot.enrolmentVersion=vm.applicationInfoService.incrementMinorVersion(vm.activityRoot.enrolmentVersion):(vm.activityRoot.enrolmentVersion=vm.applicationInfoService.incrementMajorVersion(vm.activityRoot.enrolmentVersion),vm.activityRoot.applicationType=ApplicationInfoService.getApprovedType(),updateModelOnApproval()),_updateInfoValues(),vm.activityService.transformToFileObj(vm.activityRoot)}function _updateInfoValues(){vm.updateValues++}function disableXMLSave(){vm.disableXML=vm.activityEnrolForm.$invalid||vm.activityRoot.applicationType==vm.applicationInfoService.getApprovedType()&&vm.isExtern()}function disableJSONSave(){vm.disableJson=vm.activityRoot.applicationType==vm.applicationInfoService.getApprovedType()&&vm.isExtern()}function _setComplete(){vm.isIncomplete=!vm.activityRoot.dstsControlNumber}function _loadFileContent(fileContent){if(fileContent){vm.activityService=new ActivityService;var resultJson=fileContent.jsonResult;resultJson&&(vm.activityService.transformFromFileObj(resultJson),vm.activityRoot={},vm.activityRoot=vm.activityService.getModelInfo(),_setComplete()),vm.showAllErrors=!0,disableXMLSave(),disableJSONSave(),vm.setThirdParty(),vm.updateActivityType(),vm.setAdminSubmission()}}function _setApplTypeToAmend(){vm.activityRoot.applicationType=vm.ApplicationInfoService.getAmendType(),disableXMLSave()}function updateDate(){vm.activityRoot&&(vm.activityRoot.dateSaved=vm.applicationInfoService.getTodayDate())}function updateModelOnApproval(){if(vm.activityRoot&&vm.activityRoot.contactRecord)for(var j=0;j<vm.activityRoot.contactRecord.length;j++)vm.activityRoot.contactRecord[j].amend=!1}var vm=this;vm.isIncomplete=!0,vm.userType="EXT",vm.saveXMLLabel="SAVE_DRAFT",vm.updateValues=0,vm.setAmendState=_setApplTypeToAmend,vm.showContent=_loadFileContent,vm.disableXML=!0,vm.showAllErrors=!1,vm.formAmend=!1,vm.isNotifiable=!1,vm.isRationale=!1,vm.showActivity=!1,vm.lang=$translate.proposedLanguage()||$translate.use(),vm.activityService=new ActivityService,vm.applicationInfoService=new ApplicationInfoService,vm.rootTag=vm.activityService.getRootTag(),vm.activityRoot=vm.activityService.getModelInfo(),vm.leadList=ActivityListFactory.getActivityLeadList(),vm.alerts=[],vm.configField={label:"CONTROL_NUMBER",fieldLength:"6",tagName:"dstsControlNumber",errorMsg:"MSG_LENGTH_6"},vm.CommonLists=CommonLists,vm.yesNoList=vm.CommonLists.getYesNoList(),vm.alert1={type:"info",msg:"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi feugiat nunc et tempor malesuada. Nullam tristique ligula blandit, posuere est ac, sagittis mi. In hac habitasse platea dictumst. Interdum et malesuada fames ac ante ipsum primis in faucibus. Cras ullamcorper sagittis erat ac lobortis. Suspendisse bibendum sed mauris eget condimentum. Suspendisse egestas ligula a libero tincidunt, ut vehicula sem fermentum. Quisque semper scelerisque urna, in dignissim odio condimentum ac. Nullam suscipit malesuada magna, eget lacinia nulla tempor id. Curabitur tristique ipsum libero, ut pulvinar ipsum venenatis non. Ut porta, sem non blandit aliquet, ante mauris porta ex, quis iaculis elit orci eu leo. Morbi at enim nec odio ullamcorper molestie. Nulla sit amet magna consequat, blandit orci a, porta eros. Sed enim nisl, tempus ac imperdiet a, ornare gravida sapien. Curabitur ultricies dolor aliquet bibendum accumsan.",show:!1},vm.alert2={type:"info",msg:"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi feugiat nunc et tempor malesuada. Nullam tristique ligula blandit, posuere est ac, sagittis mi. In hac habitasse platea dictumst. Interdum et malesuada fames ac ante ipsum primis in faucibus. Cras ullamcorper sagittis erat ac lobortis. Suspendisse bibendum sed mauris eget condimentum. Suspendisse egestas ligula a libero tincidunt, ut vehicula sem fermentum. Quisque semper scelerisque urna, in dignissim odio condimentum ac. Nullam suscipit malesuada magna, eget lacinia nulla tempor id. Curabitur tristique ipsum libero, ut pulvinar ipsum venenatis non. Ut porta, sem non blandit aliquet, ante mauris porta ex, quis iaculis elit orci eu leo. Morbi at enim nec odio ullamcorper molestie. Nulla sit amet magna consequat, blandit orci a, porta eros. Sed enim nisl, tempus ac imperdiet a, ornare gravida sapien. Curabitur ultricies dolor aliquet bibendum accumsan.",show:!1},vm.alert3={type:"info",msg:"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi feugiat nunc et tempor malesuada. Nullam tristique ligula blandit, posuere est ac, sagittis mi. In hac habitasse platea dictumst. Interdum et malesuada fames ac ante ipsum primis in faucibus. Cras ullamcorper sagittis erat ac lobortis. Suspendisse bibendum sed mauris eget condimentum. Suspendisse egestas ligula a libero tincidunt, ut vehicula sem fermentum. Quisque semper scelerisque urna, in dignissim odio condimentum ac. Nullam suscipit malesuada magna, eget lacinia nulla tempor id. Curabitur tristique ipsum libero, ut pulvinar ipsum venenatis non. Ut porta, sem non blandit aliquet, ante mauris porta ex, quis iaculis elit orci eu leo. Morbi at enim nec odio ullamcorper molestie. Nulla sit amet magna consequat, blandit orci a, porta eros. Sed enim nisl, tempus ac imperdiet a, ornare gravida sapien. Curabitur ultricies dolor aliquet bibendum accumsan.",show:!1},vm.initUser=function(id){},vm.$onInit=function(){vm.setThirdParty(),vm.updateActivityType(),vm.setAdminSubmission(),loadActivityData(),loadFeeData()},vm.$onChanges=function(changes){changes.formType&&(vm.userType=changes.formType.currentValue,"INT"==vm.userType?vm.saveXMLLabel="APPROVE_FINAL":vm.saveXMLLabel="SAVE_DRAFT")},vm.isAmend=function(){return vm.formAmend},vm.saveJson=function(){var writeResult=_transformFile();hpfbFileProcessing.writeAsJson(writeResult,_createFilename(),vm.rootTag),vm.showAllErrors=!0,_setComplete()},vm.saveXML=function(){var writeResult=_transformFile();hpfbFileProcessing.writeAsXml(writeResult,_createFilename(),vm.rootTag),_setComplete()},vm.showError=function(isTouched,isInvalid){return isInvalid&&isTouched||vm.showErrors()&&isInvalid},vm.showErrorCheck=function(isTouched,value){return!value&&isTouched||vm.showErrors()&&!value},vm.showErrors=function(){return vm.showAllErrors},vm.setThirdParty=function(){vm.thirdPartyState="Y"===vm.activityRoot.isThirdParty},vm.setApplicationType=function(value){vm.activityRoot.applicationType=value,vm.formAmend=vm.activityRoot.applicationType===vm.applicationInfoService.getAmendType(),disableXMLSave()},vm.setAdminSubmission=function(){vm.activityRoot.isAdminSub===vm.CommonLists.getYesValue()?vm.showActivity=!0:(vm.activityRoot.relatedActivity=vm.activityService.getEmptyRelatedActivity(),vm.showActivity=!1)},vm.updateActivityType=function(){vm.activityService.isNotifiableChange(vm.activityRoot.regActivityType.id)?(vm.activityService.resetRationale(),vm.isNotifiable=!0,vm.isRationale=!1):vm.activityService.isRationale(vm.activityRoot.regActivityType.id,vm.activityRoot.regActivityLead)?(vm.isRationale=!0,vm.activityService.resetNotifiableChanges(),vm.isNotifiable=!1):(vm.activityService.resetNotifiableChanges(),vm.activityService.resetRationale(),vm.isNotifiable=!1,vm.isRationale=!1)},$scope.$watch("main.activityEnrolForm.$valid",function(){disableXMLSave()},!0),vm.isExtern=function(){return"EXT"==vm.userType},vm.closeAlert=function(value){switch(value){case"1":vm.alert1.show=!1;break;case"2":vm.alert2.show=!1;break;case"3":vm.alert3.show=!1}},vm.addInstruct=function(value){switch(value){case"1":vm.alert1.show=!0;break;case"2":vm.alert2.show=!0;break;case"3":vm.alert3.show=!0}}}angular.module("activityMain").config(function(uiSelectConfig){uiSelectConfig.theme="select2"}).component("cmpActivityMain",{templateUrl:"app/scripts/components/activityMain/tpl-activity-main_20170124_1227.html",controller:activityMainCtrl,controllerAs:"main",bindings:{formType:"@"}}),activityMainCtrl.$inject=["ActivityService","ApplicationInfoService","hpfbFileProcessing","$scope","$translate","CommonLists","ActivityListFactory"]}(),function(){"use strict";angular.module("activityChange",[])}(),function(){"use strict";function activityChangeCtrl(){var vm=this;vm.record={},vm.rationaleSelected="",vm.$onChanges=function(changes){changes.activityRecord&&(vm.record=changes.activityRecord.currentValue,vm.updateErrorState()),changes.isRequired&&(vm.requiredState=changes.isRequired.currentValue,vm.updateErrorState())},vm.showError=function(isTouched,isInvalid){return!!(isInvalid&&isTouched||vm.showErrors()&&isInvalid)},vm.updateErrorState=function(){vm.record.textLabelChange||vm.record.drugSubstanceChange||vm.record.formulationChange||vm.record.specificationChange||vm.record.expiryStorageChange||vm.record.manufactMethodChange||vm.record.containerSizeChange||vm.record.packagingSpecChange||vm.record.packagingMaterialsChange||vm.record.otherChangeDetails?vm.rationaleSelected="value":vm.rationaleSelected=""},vm.showErrorMissing=function(){return!!vm.requiredState&&(!vm.rationaleSelected&&(!!(!vm.notifChangeForm.$pristine&&vm.notifChangeForm.$invalid||vm.showErrors()&&vm.notifChangeForm.$invalid||vm.notifChangeForm.$touched&&vm.notifChangeForm.$invalid)||void 0))}}angular.module("activityChange").component("cmpActivityChange",{templateUrl:"app/scripts/components/activityChangeType/tpl-activity-change_20170124_1227.html",controller:activityChangeCtrl,controllerAs:"actChangeCtrl",bindings:{activityRecord:"<",isRequired:"<",showErrors:"&"}})}();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFjdGl2aXR5QXBwSU5ULWZyLmpzIiwiYWN0aXZpdHlUcmFuc2xhdGlvbnMuanMiLCJvbmx5LWRpZ2l0c18yMDE3MDEyNF8xMjI3LmpzIiwiY29tbW9uLWxpc3RzXzIwMTcwMTI0XzEyMjcuanMiLCJkYXRhLWxpc3RzXzIwMTcwMTI0XzEyMjcuanMiLCJkYXRhLWxpc3RzLmFjdGl2aXR5XzIwMTcwMTI0XzEyMjcuanMiLCJmaWx0ZXItbGlzdHNfMjAxNzAxMjRfMTIyNy5qcyIsInJlcC1jb250YWN0LXNlcnZpY2VfMjAxNzAxMjRfMTIyNy5qcyIsImhwZmItY29uc3RhbnRzXzIwMTcwMTI0XzEyMjcuanMiLCJhcHBsaWNhdGlvbi1pbmZvLXNlcnZpY2VfMjAxNzAxMjRfMTIyNy5qcyIsImFjdGl2aXR5LWxpc3RzXzIwMTcwMTI0XzEyMjcuanMiLCJhY3Rpdml0eS1zZXJ2aWNlXzIwMTcwMTI0XzEyMjcuanMiLCJjbXAtYWRtaW4tc3ViXzIwMTcwMTI0XzEyMjcuanMiLCJjbXAtcmVwLWNvbnRhY3QtcmVjb3JkXzIwMTcwMTI0XzEyMjcuanMiLCJjbXAtcmVwLWNvbnRhY3QtbGlzdF8yMDE3MDEyNF8xMjI3LmpzIiwiRmlsZUlPLmhwZmJGaWxlUmVhZGVyXzIwMTcwMTI0XzEyMjcuanMiLCJjbXAtZXhwYW5kaW5nLXRhYmxlXzIwMTcwMTI0XzEyMjcuanMiLCJjbXAtY29udGFjdC1kZXRhaWxzXzIwMTcwMTI0XzEyMjcuanMiLCJjbXAtYXBwbGljYXRpb24taW5mb18yMDE3MDEyNF8xMjI3LmpzIiwiY21wLWFjdGl2aXR5LXJhdGlvbmFsZV8yMDE3MDEyNF8xMjI3LmpzIiwiY21wLWFjdGl2aXR5LW1haW5fMjAxNzAxMjRfMTIyNy5qcyIsImNtcC1hY3Rpdml0eS1jaGFuZ2VfMjAxNzAxMjRfMTIyNy5qcyJdLCJuYW1lcyI6WyJhbmd1bGFyIiwibW9kdWxlIiwiTWFpbkNvbnRyb2xsZXIiLCJ2bSIsInRoaXMiLCJmb3JtVHlwZSIsImNvbnRyb2xsZXIiLCJjb25maWciLCIkdHJhbnNsYXRlUHJvdmlkZXIiLCJkaXJlY3RpdmVQcmlvcml0eSIsInByZWZlcnJlZExhbmd1YWdlIiwidXNlU2FuaXRpemVWYWx1ZVN0cmF0ZWd5IiwidHJhbnNsYXRpb25zIiwiTE9BRF9BQ1RJVklUWSIsIlJFR19BQ1RJVklUWV9JTlNUUlVDVCIsIkFDVElWRV9FTlJPTCIsIklTX1NPTElDSVRFRCIsIlJBVElPTkFMRV9TTkRTIiwiTkVXX1JPQSIsIlJFUExBQ0VfU1RFUklMIiwiTkVXX0NMQUlNUyIsIkNPTkZJUk1fU1RVRFkiLCJDSEFOR0VfRk9STSIsIkNIQU5HRV9TVUJTVEFOQ0UiLCJPVEhFUl9TUEVDSUZZIiwiVFlQRV9WTkMiLCJDSEFOR0VfTEFCRUwiLCJDSEFOR0VfRFJVR1NVQiIsIkNIQU5HRV9TUEVDIiwiQ0hBTkdFX0VYUElSWSIsIkNIQU5HRV9NQU5NRVRIT0QiLCJDSEFOR0VfTUFOU0lURSIsIkNIQU5HRV9DT05UQUlOIiwiQ0hBTkdFX1BBQ0tBR0UiLCJDSEFOR0VfTUFURVJJQUwiLCJBQ1RJVklUWV9MRUFEIiwiRkVFX0NMQVNTIiwiTk9UX0xBU0EiLCJSRUFTT05fRklMRSIsIlJFTEFURURfQUNUSVZJVElFUyIsIkFDVElWSVRZX1RZUEUiLCJEQVRFX0NMRUFSRUQiLCJDT05UUk9MX05VTSIsIk1BTlVGQUNUX05BTUUiLCJSRUFTT05fRklMSU5HIiwiQVNTT0NfRElOUyIsIkFERF9ESU4iLCJTQVZFX0FDVElWSVRZIiwiT1RIRVJfREVUQUlMUyIsIkRJTl9BQlJSRVYiLCJERUxFVEVfQUNUSVZJVFkiLCJBRERfQUNUSVZJVFkiLCJBVVRfTEVUVEVSIiwiRE9TU0lFUl9JRF9QUkVWIiwiUkVMQVRFRF9BQ1RJVklUWSIsIkFNRU5EX0FDVElWSVRZIiwiSVNfQURNSU5fU1VCIiwiTElDRU5DRV9BR1JFRSIsIkRJTl9UUkFOU0ZFUiIsIlJFR0FDVElWU0VBUkNIIiwiQ09NUEFOWV9JRCIsIkRPU1NJRVJfSUQiLCJCMTQtMjAxNjAzMDEtMDkiLCJCMTQtMjAxNjAzMDEtMDIiLCJCMTQtMjAxNjAzMDEtMTAiLCJCMTQtMjAxNjAzMDEtMDciLCJVTkFTU0lHTkVEIiwiRklSU1RfTkFNRSIsIkxBU1RfTkFNRSIsIklOSVRJQUxTIiwiTEFOR1VBR0VfQ09SUkVTUE9OREVOQ0UiLCJKT0JfVElUTEUiLCJTQUxVVEFUSU9OIiwiU0FMVVRfTVIiLCJTQUxVVF9NUyIsIlNBTFVUX0RSIiwiU0FMVVRfTVJTIiwiUk9MRV9QUklNQVJZIiwiUk9MRV9TRUNPTkRBUlkiLCJFTUFJTCIsIkZBWF9OVU1CRVIiLCJQSE9ORV9FWFQiLCJST0xFUyIsIlBIT05FX05VTUJFUiIsIkNPTlRBQ1RfSU5GTyIsIkFNRU5EIiwiUkVQX0NPTlRBQ1QiLCJPTkVfUk9MRSIsIkNPTlRBQ1RfREVUQUlMUyIsIkFERF9DT05UQUNUIiwiQ09OVEFDVF9ST0xFX0xFR0VORCIsIkFERF9SRVBSRVMiLCJERUxFVEVfUkVQUkVTIiwiU0FWRV9SRVBSRVMiLCJBRERSX1JPTEVTIiwiQVBQTF9TVEFUVVMiLCJFTlJPTF9WRVJTSU9OIiwiREFURV9TQVZFRCIsIkFNRU5EX0VOUk9MIiwiU0VMRUNUX0xPQUQiLCJNU0dfU1VDQ0VTU19MT0FEIiwiTVNHX0VSUl9KU09OUEFSU0UiLCJNU0dfRVJSX1hNTFBBUlNFIiwiTVNHX0VSUl9GSUxFX0xPQUQiLCJNU0dfRVJSX0ZJTEVfVFlQRSIsIk1TR19FUlJfRk9STV9UWVBFIiwiTVNHX0VSUl9DSEVDS1NVTV9GQUlMIiwiWSIsIk4iLCJERUxFVEVST1ciLCJTRUxFQ1RFRFJPVyIsIlJFUVVJUkVEIiwiUk9MRVNfU0VMRUNUIiwiTkVXIiwiQVBQUk9WRUQiLCJDTElDS19UT0dHTEUiLCJBTUVORF9SRUNPUkQiLCJlbiIsImZyIiwiRElTQ0FSRF9DSEFOR0VTIiwiUkVQX0FMVCIsIlJFUF9QUklNIiwiTUFJTElORyIsIkJJTExJTkciLCJNQU5VRkFDVCIsIklNUE9SVEVSIiwiQVBQUk9WRV9GSU5BTCIsIlNBVkVfRFJBRlQiLCJQUklNQVJZIiwiU0VDT05EQVJZIiwiVE9HR0xFX0VYUEFORCIsIlNBVkVfV09SSyIsIkNPTlRST0xfTlVNQkVSIiwiUkVQX0NPTlRBQ1RfSU5GTyIsIlNBVkVfQ09OVEFDVCIsIkRFTEVURV9DT05UQUNUIiwiRVJST1JTIiwiVU5LTk9XTiIsIkJJT0xPR0lDIiwiUEhBUk1BQ0VVVElDQUwiLCJIRUxQX0ZJTEVfTE9BRCIsIkhFTFBfQUNUSVZJVFlfTUFJTiIsIkhFTFBfQUNUSVZJVFlfUkVQIiwiQ0FMRU5EQVIiLCJISURFX0NBTEVOREFSIiwiT1RIRVIiLCJIRUxQX1JFUF9DT05UQUNUIiwiT1RIRVJfVU5JVFMiLCJDT01QQU5ZX05PQUJCUkVWIiwiTVNHX0VSUl9NQU5EIiwiTVNHX0VSUl9FTUFJTF9GT1JNQVQiLCJNU0dfRVJSX1JPTEUiLCJNU0dfRVJSX0NPTlRBQ1RfTlVNIiwiTVNHX0VSUl9QSE9ORV9GT1JNQVQiLCJNU0dfRVJSX0FMTFJPTEUiLCJNU0dfRVJSX0FERFJFU1NTUk9MRSIsIk1TR19FUlJfUE9TVEFMIiwiTVNHX0VSUl9aSVAiLCJNU0dfRVJSX0RBVEVfRk9STUFUIiwiTUFJTElOR19TRUwiLCJNQU5VRkFDVF9TRUwiLCJNQUlMX1NFTCIsIkJJTExJTkdfU0VMIiwiSU1QT1JURVJfU0VMIiwiUkVQUFJJTV9TRUwiLCJSRVBBTFRfU0VMIiwiTVNHX0xFTkdUSF82IiwiTVNHX0xFTkdUSF82TlVNIiwiTVNHX0xFTkdUSF84TlVNIiwiTVNHX0xFTkdUSF83IiwiTVNHX0xFTkdUSF83TlVNIiwiTVNHX0VSUl9PTkVfUkVQIiwiTVNHX0VSUl9PTkVfTElGRV9SRUMiLCJNU0dfRVJSX1JBVElPTkFMRV9TRUwiLCJNU0dfRVJSX05PVElGX1NFTCIsImRpZ2l0c0N0cmwiLCJsaW5rIiwic2NvcGUiLCJlbGVtZW50IiwiYXR0cnMiLCJtb2RlbEN0cmwiLCIkcGFyc2VycyIsInB1c2giLCJpbnB1dFZhbHVlIiwidW5kZWZpbmVkIiwiaXNOdW1iZXIiLCJtYXgiLCJ0ZW1wVmFsIiwicGFyc2VJbnQiLCJyZWdleEludE5lZyIsImludGVnZXJSZWciLCJyZWdleFZhbHVlIiwidHJhbnNmb3JtZWRJbnB1dCIsInJlcGxhY2UiLCJzdWJzdHJpbmciLCJwYXJzZUZsb2F0IiwiJHNldFZpZXdWYWx1ZSIsIiRyZW5kZXIiLCJkaXJlY3RpdmUiLCJyZXN0cmljdCIsInJlcXVpcmUiLCJnZXRTZXJ2aWNlIiwiWUVTIiwiTk8iLCJfZ2V0WWVzIiwiX2dldE5vIiwiX2dldFllc05vQXJyYXkiLCJzZXJ2aWNlIiwiZ2V0WWVzTm9MaXN0IiwiZ2V0WWVzVmFsdWUiLCJnZXROb1ZhbHVlIiwiZmFjdG9yeSIsIiRpbmplY3QiLCJfY3JlYXRlQ291bnRyeUFycmF5IiwidHJhbnNsYXRlSnNvbiIsImNvdW50cnlMaXN0IiwiX2dldFVua25vd25Db3VudHJ5UmVjIiwiaWQiLCJnZXRDb3VudHJ5VmFsdWVzQXJyYXkiLCJnZXRQcm92aW5jZVZhbHVlc0FycmF5IiwiZ2V0VVNTdGF0ZXNWYWx1ZUFycmF5IiwiZ2V0Q291bnRyaWVzIiwiZ2V0UHJvdmluY2VzIiwiZ2V0VVNTdGF0ZXMiLCJjcmVhdGVDb3VudHJ5TGlzdCIsImdldFVua25vd25Db3VudHJ5UmVjb3JkIiwiaW5qZWN0IiwiZ2V0U2FsU2VydmljZSIsIiRmaWx0ZXIiLCIkcSIsIiRodHRwIiwiJHRyYW5zbGF0ZSIsIkZSRU5DSCIsImdldFNhbFZhbHVlc0FycmF5IiwiZ2V0TGFuZ3VhZ2VzVmFsdWVzQXJyYXkiLCJfY3JlYXRlSW50ZXJuYWxDb250YWN0cyIsImRlZmVycmVkIiwiZGVmZXIiLCJjb250YWN0c1VybCIsImludGVybmFsQ29udGFjdHMiLCJsZW5ndGgiLCJyZXNvbHZlIiwiZ2V0Iiwic3VjY2VzcyIsImRhdGEiLCJzdGF0dXMiLCJoZWFkZXJzIiwibmV3TGlzdCIsIl9jcmVhdGVTb3J0ZWRBcnJheSIsImxhbmciLCJwcm9wb3NlZExhbmd1YWdlIiwidXNlIiwib3RoZXJSZWMiLCJ1bnNoaWZ0IiwiZXJyb3IiLCJyZWplY3QiLCJwcm9taXNlIiwiX2dldEludGVybmFsQ29udGFjdHMiLCJqc29uTGlzdCIsInJlc3VsdCIsImZvckVhY2giLCJzb3J0ZWRPYmplY3QiLCJnZXRTYWx1dGF0aW9uTGlzdCIsImdldExhbmd1YWdlcyIsImNyZWF0ZUludGVybmFsQ29udGFjdHMiLCJnZXRJbnRlcm5hbENvbnRhY3RzIiwiZ2V0Um9sZXNTZXJ2aWNlIiwiZ2V0Um9sZVZhbHVlc0FycmF5IiwiX2dldEZvcm1UeXBlcyIsIl9iaW9sb2dpYyIsIl9waGFybWEiLCJfZ2V0QmlvbG9naWMiLCJfZ2V0UGhhcm1hY2V1dGljYWwiLCJnZXRDb250YWN0Um9sZXMiLCJnZXRGb3JtVHlwZXMiLCJnZXRCaW9sb2dpY1R5cGUiLCJnZXRQaGFybWFUeXBlIiwiZ2V0VHJhbnNhY3Rpb25TZXEiLCJ5ZXNOb0FycmF5IiwiX2NyZWF0ZVJhQXJyYXkiLCJ2YWx1ZSIsInJhVHlwZUFycmF5IiwiZ2V0VHJhbnNhY3Rpb25EZXNjcmlwdGlvbnNBcnJheSIsImdldEFjdGl2aXR5QXJyYXkiLCJnZXRQcmVzdWJBcnJheSIsImdldEFORFNBcnJheSIsImdldERJTkFBcnJheSIsImdldERJTkJBcnJheSIsImdldEVVTkRTQXJyYXkiLCJnZXRFVVNORFNBcnJheSIsImdldExldmVsM0FycmF5IiwiZ2V0TkNBcnJheSIsImdldE5EU0FycmF5IiwiZ2V0UERDQXJyYXkiLCJnZXRQRENCQXJyYXkiLCJnZXRQU1VSQ0FycmF5IiwiZ2V0UFNVUlBWQXJyYXkiLCJnZXRSTVBQVkFycmF5IiwiZ2V0U0FORFNBcnJheSIsImdldFNORFNBcnJheSIsImdldFNORFNDQXJyYXkiLCJnZXRVRFBWQXJyYXkiLCJnZXRVRFJBVkFycmF5IiwiZ2V0Q29uc3VsdEFycmF5IiwiX2dldE1QTkNBcnJheSIsIl9nZXRNUE5EU0FycmF5IiwiX2dldE1QU05EU0FycmF5IiwiX2dldFBBTkRBcnJheSIsIl9nZXRQQlJFUkNBcnJheSIsIl9nZXRQQlJFUlBWQXJyYXkiLCJfZ2V0UFJORFNBcnJheSIsIl9nZXRQUlNORFNBcnJheSIsImdldFlCUFJBcnJheSIsImdldFRyYW5zYWN0aW9uRGVzY3JpcHRpb25zIiwiZ2V0QWN0aXZpdHlUeXBlcyIsImNyZWF0ZVJhVHlwZXMiLCJnZXRQcmVzdWJUeXBlcyIsImdldEFuZHNUeXBlIiwiZ2V0RGluYVR5cGUiLCJnZXREaW5iVHlwZSIsImdldEV1bmRzVHlwZSIsImdldEV1c25kc1R5cGUiLCJnZXRMZXZlbDNUeXBlIiwiZ2V0TmNUeXBlIiwiZ2V0TmRzVHlwZSIsImdldFBkY1R5cGUiLCJnZXRQZGNCVHlwZSIsImdldFByZXN1YlR5cGUiLCJnZXRwU3VyQ1R5cGUiLCJnZXRwU3VyUHZUeXBlIiwiZ2V0Um1wUHZUeXBlIiwiZ2V0U2FuZHNUeXBlIiwiZ2V0U25kc1R5cGUiLCJnZXRTbmRzQ0FycmF5IiwiZ2V0VWRwdlR5cGUiLCJnZXRVZHJhVHlwZSIsImdldFlicHJUeXBlIiwiZ2V0Q29uc3VsdFR5cGUiLCJnZXRNUE5DVHlwZSIsImdldE1QTkRTVHlwZSIsImdldE1QU05EU1R5cGUiLCJnZXRQQU5EVHlwZSIsImdldFBCUkVSQ1R5cGUiLCJnZXRQQlJFUlBWVHlwZSIsImdldFBSTkRTVHlwZSIsImdldFBSU05EU1R5cGUiLCJvcmRlckJ5VHJhbnNsYXRlZENvdW50cnkiLCJDQU5BREEiLCJVU0EiLCJhcnJheSIsIm9iaktleSIsInRyYW5zbGF0ZWQiLCJrZXkiLCJsYWJlbCIsImluc3RhbnQiLCJvcmRlckJ5VHJhbnNsYXRlZENvdW50cnlBbmRMYWJlbCIsImZpbmRDb3VudHJ5T2JqIiwidGFyZ2V0S2V5IiwiaSIsIm9yZGVyQnlUcmFuc2xhdGVkIiwic2VxdWVuY2VPcmRlckJ5Iiwib3JkZXJCeVRyYW5zbGF0ZWRPdGhlckZpcnN0IiwiX29yZGVyQnlMb2NhbGUiLCJpdGVtcyIsInNvcnQiLCJhIiwiYiIsImxvY2FsZUNvbXBhcmUiLCJmaWx0ZXIiLCJSZXBDb250YWN0U2VydmljZSIsInByb3RvdHlwZSIsIl9kZWZhdWx0IiwiZ2V0UHJpbWFyeVJvbGUiLCJnZXRTZWNvbmRhcnlSb2xlIiwiY3JlYXRlUmVwQ29udGFjdCIsInJlcENvbnRhY3RMaXN0IiwiY29udGFjdCIsIl9jcmVhdGVEZWZhdWx0UmVwQ29udGFjdCIsImN1cnJlbnRDb250YWN0cyIsInJlcFJvbGUiLCJyZXBjb250YWN0IiwiX2NyZWF0ZUNvbnRhY3RNb2RlbCIsImFtZW5kIiwic2FsdXRhdGlvbiIsImdpdmVuTmFtZSIsImluaXRpYWxzIiwic3VybmFtZSIsInRpdGxlIiwibGFuZ3VhZ2UiLCJwaG9uZSIsInBob25lRXh0IiwiZmF4IiwiZW1haWwiLCJjb25zdGFudCIsIkFwcGxpY2F0aW9uSW5mb1NlcnZpY2UiLCJnZXRUb2RheURhdGUiLCJwYWQiLCJuIiwiZCIsIkRhdGUiLCJpc29EYXRlIiwiZ2V0RnVsbFllYXIiLCJnZXRNb250aCIsImdldERhdGUiLCJpbmNyZW1lbnRNaW5vclZlcnNpb24iLCJlbnJvbG1lbnRWZXJzaW9uIiwicGFydHMiLCJzcGxpdCIsImRlYyIsImluY3JlbWVudE1ham9yVmVyc2lvbiIsIndob2xlIiwiZ2V0QXBwbGljYXRpb25TdGF0dXNMaXN0IiwiZ2V0QXBwcm92ZWRUeXBlIiwiZ2V0QW1lbmRUeXBlIiwiX2dldGZlZUNsYXNzQXJyYXkiLCJmZWVDbGFzc0FycmF5IiwiX2xvYWRGZWVUeXBlIiwiZmVlQ2xhc3NVcmwiLCJfZ2V0UmFUeXBlQXJyYXkiLCJfbG9hZFJhVHlwZSIsInJhVHlwZVVybCIsIl9nZXRBY3Rpdml0eUxlYWRBcnJheSIsIkJJT0xPR0lDQUwiLCJfZ2V0QmlvbG9naWNhbExlYWQiLCJfZ2V0TkNfcmFUeXBlIiwiTkNfcmFUeXBlIiwiX2dldFNBTkRTX3JhVHlwZSIsIlNBTkRTX3JhVHlwZSIsIl9nZXRTTkRTX3JhVHlwZSIsIlNORFNfcmFUeXBlIiwiX2dldERJTl9yYVR5cGUiLCJESU5fcmFUeXBlIiwiZ2V0RmVlQ2xhc3NMaXN0IiwiZ2V0UmFUeXBlTGlzdCIsImdldEFjdGl2aXR5TGVhZExpc3QiLCJnZXRCaW9sb2dpY2FsTGVhZFZhbHVlIiwiZ2V0U0FORFNSYVR5cGVWYWx1ZSIsImdldFNORFNUeXBlVmFsdWUiLCJnZXROQ1R5cGVWYWx1ZSIsImdldERJTlR5cGVWYWx1ZSIsIkFjdGl2aXR5U2VydmljZSIsIkFjdGl2aXR5TGlzdEZhY3RvcnkiLCJkZWZhdWx0QWN0aXZpdHlEYXRhIiwiY29tcGFueUlkIiwiZHN0c0NvbnRyb2xOdW1iZXIiLCJkYXRlU2F2ZWQiLCJhcHBsaWNhdGlvblR5cGUiLCJzb2Z0d2FyZVZlcnNpb24iLCJkYXRhQ2hlY2tzdW0iLCJkb3NzaWVySWRQcmVmaXgiLCJkb3NzaWVySWQiLCJyZWdBY3Rpdml0eUxlYWQiLCJyZWdBY3Rpdml0eVR5cGUiLCJmZWVDbGFzcyIsInJlYXNvbkZpbGluZyIsImlzVGhpcmRQYXJ0eSIsImlzQWRtaW5TdWIiLCJyZWxhdGVkQWN0aXZpdHkiLCJjb250YWN0UmVjb3JkIiwicmF0aW9uYWxlVHlwZXMiLCJfY3JlYXRlUmF0aW9uYWxUeXBlcyIsIm5vdGlmaWFibGVDaGFuZ2VUeXBlcyIsIl9jcmVhdGVOb3RpZmlhYmxlQ2hhbmdlVHlwZXMiLCJfZ2V0RW1wdHlBY3Rpdml0eSIsImV4dGVuZCIsInJvb3RUYWciLCJhY3Rpdml0eUlkIiwiU0FORFMiLCJTTkRTIiwiTkMiLCJWTkMiLCJESU4iLCJnZXRSb290VGFnIiwidHJhbnNmb3JtVG9GaWxlT2JqIiwianNvbk9iaiIsImFjdGl2aXR5IiwiQUNUSVZJVFlfRU5ST0wiLCJ0ZW1wbGF0ZV90eXBlIiwiY29tcGFueV9pZCIsImRzdHNfY29udHJvbF9udW1iZXIiLCJlbnJvbG1lbnRfdmVyc2lvbiIsImRhdGVfc2F2ZWQiLCJhcHBsaWNhdGlvbl90eXBlIiwic29mdHdhcmVfdmVyc2lvbiIsImRhdGFfY2hlY2tzdW0iLCJkb3NzaWVyX2lkX3ByZWZpeCIsImRvc3NpZXJfaWQiLCJkb3NzaWVyX2lkX2NvbmNhdCIsInJlZ19hY3Rpdml0eV9sZWFkIiwicmVnX2FjdGl2aXR5X3R5cGUiLCJmZWVfY2xhc3MiLCJyZWFzb25fZmlsaW5nIiwiaXNfdGhpcmRfcGFydHkiLCJpc19hZG1pbl9zdWJtaXNzaW9uIiwibm90aWZpYWJsZV9jaGFuZ2VfdHlwZXMiLCJyYXRpb25hbGVfdHlwZXMiLCJfbGFiZWxfZW4iLCJfbGFiZWxfZnIiLCJfX3RleHQiLCJfbWFwTm90aWZpYWJsZUNoYW5nZVR5cGVzVG9PdXRwdXQiLCJfbWFwUmF0aW9uYWxlVHlwZVRvT3V0cHV0IiwicmVsYXRlZF9hY3Rpdml0eSIsInRyYW5mb3JtUmVsYXRlZEFjdGl2aXR5VG9GaWxlT2JqIiwiY29udGFjdF9yZWNvcmQiLCJ0cmFuc2Zvcm1Db250YWN0TGlzdFRvRmlsZU9iaiIsIm1hcENvbnRhY3RMaXN0IiwiX21hcFJlZ3VsYXRvcnlDb250YWN0TGlzdCIsIl90cmFuc2Zvcm1SZWd1bGF0b3J5Q29udGFjdExpc3RUb0ZpbGVPYmoiLCJzcG9uc29yX25hbWUiLCJzcG9uc29yTmFtZSIsImRhdGVfY2xlYXJlZCIsImRhdGVDbGVhcmVkIiwibW9udGgiLCJkYXkiLCJjb250cm9sX251bWJlciIsImNvbnRyb2xOdW1iZXIiLCJsaWNlbnNlX2FncmVlbWVudCIsImxpY2Vuc2VBZ3JlZSIsImRpbl90cmFuc2ZlciIsImRpblRyYW5zZmVyIiwibm90X2xhc2EiLCJub3RMYXNhIiwiZ2V0TW9kZWxJbmZvIiwiZ2V0QWN0aXZpdHlJbmZvIiwibW9kZWwiLCJfdHJhbnNmb3JtTm90aWZpYWJsZUNoYW5nZVR5cGVGcm9tRmlsZU9iaiIsIl90cmFuc2Zvcm1SYXRpb25hbGVUeXBlRnJvbUZpbGVPYmoiLCJyZXBDb250YWN0cyIsInRyYW5zZm9ybVJlbGF0ZWRSZWdBY3Rpdml0eUZyb21GaWxlT2JqIiwibWVyZ2UiLCJyZXNldFJhdGlvbmFsZSIsInJlc2V0Tm90aWZpYWJsZUNoYW5nZXMiLCJ0cmFuc2Zvcm1Gcm9tRmlsZU9iaiIsImFjdGl2aXR5SW5mbyIsImdldE5ld0FjdGl2aXR5IiwiZ2V0TmV4dEFjdGl2aXR5SWQiLCJtYW51ZmFjdHVyZXJOYW1lIiwiYXNzb2NEaW5zIiwiaXNOb3RpZmlhYmxlQ2hhbmdlIiwiaXNSYXRpb25hbGUiLCJsZWFkIiwidXBkYXRlQWN0aXZpdHlJZCIsImlzTmFOIiwicmVzZXRBY3Rpdml0eUlkIiwiZ2V0RW1wdHlSZWxhdGVkQWN0aXZpdHkiLCJfcGFyc2VEYXRlIiwiTnVtYmVyIiwiQXJyYXkiLCJfdHJhbnNmb3JtUmVwQ29udGFjdEZyb21GaWxlT2JqIiwiX21hcFJlcENvbnRhY3RUb091dHB1dCIsInJlcE9iaiIsInJlcENvbnRhY3QiLCJfdHJhbnNmb3JtQ29udGFjdEZyb21GaWxlT2JqIiwicmVwX2NvbnRhY3RfZGV0YWlscyIsInJlcF9jb250YWN0X3JvbGUiLCJhbWVuZF9yZWNvcmQiLCJfbWFwQ29udGFjdFRvT3V0cHV0IiwiY29udGFjdE9iaiIsImdpdmVuX25hbWUiLCJqb2JfdGl0bGUiLCJsYW5ndWFnZV9jb3JyZXNwb25kYW5jZSIsInBob25lX251bSIsInBob25lX2V4dCIsImZheF9udW0iLCJjb25zb2xlIiwibmV3Um9hIiwibmV3Q2xhaW1zIiwiY2hhbmdlRm9ybXVsYXRpb24iLCJjaGFuZ2VEcnVnU3Vic3RhbmNlIiwicmVwbGFjZVN0ZXJpbGl0eSIsImNvbmZpcm1pdG9yeVN0dWRpZXMiLCJvdGhlclJhdGlvbmFsZSIsIm90aGVyUmF0aW9uYWxlRGV0YWlscyIsInRleHRMYWJlbENoYW5nZSIsImRydWdTdWJzdGFuY2VDaGFuZ2UiLCJmb3JtdWxhdGlvbkNoYW5nZSIsInNwZWNpZmljYXRpb25DaGFuZ2UiLCJleHBpcnlTdG9yYWdlQ2hhbmdlIiwibWFudWZhY3RNZXRob2RDaGFuZ2UiLCJtYW51ZmFjdFNpdGVDaGFuZ2UiLCJjb250YWluZXJTaXplQ2hhbmdlIiwicGFja2FnaW5nU3BlY0NoYW5nZSIsInBhY2thZ2luZ01hdGVyaWFsc0NoYW5nZSIsIm90aGVyQ2hhbmdlRGV0YWlscyIsInRleHRfbGFiZWxfY2hhbmdlIiwiZHJ1Z19zdWJzdGFuY2VfY2hhbmdlIiwiZm9ybXVsYXRpb25fY2hhbmdlIiwic3BlY2lmaWNhdGlvbl9jaGFuZ2UiLCJleHBpcnlfc3RvcmFnZV9jaGFuZ2UiLCJtYW51ZmFjdF9tZXRob2RfY2hhbmdlIiwibWFudWZhY3Rfc2l0ZV9jaGFuZ2UiLCJjb250YWluZXJfc2l6ZV9jaGFuZ2UiLCJwYWNrYWdpbmdfc3BlY19jaGFuZ2UiLCJwYWNrYWdpbmdfbWF0ZXJpYWxzX2NoYW5nZSIsIm90aGVyX2NoYW5nZV9kZXRhaWxzIiwibmV3X3JvYSIsIm5ld19jbGFpbXMiLCJjaGFuZ2VfZm9ybXVsYXRpb24iLCJjaGFuZ2VfZHJ1Z19zdWJzdGFuY2UiLCJyZXBsYWNlX3N0ZXJpbGl0eSIsImNvbmZpcm1pdG9yeV9zdHVkaWVzIiwib3RoZXJfcmF0aW9uYWxlIiwib3RoZXJfcmF0aW9uYWxlX2RldGFpbHMiLCJkYXRlQXJyYXkiLCJhRGF0ZSIsIkFkbWluU3ViQ3RybCIsImRhdGVGb3JtYXQiLCJkaW5UcmFuc2ZlclNob3ciLCJkYXRlT3B0aW9ucyIsInNob3dXZWVrcyIsIm9wZW5SZWZEYXRlIiwicmVmRGF0ZU9wZW4iLCJ5ZXNOb0xpc3QiLCJ5ZXNOb1R5cGVzIiwiYWN0aXZpdHlUeXBlTGlzdCIsImFjdGl2aXR5VHlwZXMiLCJpc1BpbG90IiwiJG9uSW5pdCIsImlzTGljZW5zZUFncmVlbWVudCIsIiRvbkNoYW5nZXMiLCJjaGFuZ2VzIiwicmVjb3JkIiwiY3VycmVudFZhbHVlIiwic2hvd0Vycm9yIiwiaXNUb3VjaGVkIiwiaXNJbnZhbGlkIiwic2hvd0Vycm9ycyIsInNob3dFcnJvckNoZWNrQm94IiwiY29tcG9uZW50IiwidGVtcGxhdGVVcmwiLCJjb250cm9sbGVyQXMiLCJiaW5kaW5ncyIsImNvbnRhY3RSZWNDdHJsIiwiJHNjb3BlIiwic2F2ZVByZXNzZWQiLCJmb3JtQW1lbmQiLCJpc0NvbnRhY3QiLCJpc05vdEVkaXRhYmxlIiwiY29udGFjdE1vZGVsIiwiZWRpdFN0YXRlIiwibG9nIiwiY29weSIsInNldEVkaXRhYmxlU3RhdGUiLCJpc0FtZW5kIiwib25EZWxldGUiLCJjb250YWN0SWQiLCJkaXNjYXJkQ2hhbmdlcyIsImNvbnRhY3RSZWNGb3JtIiwiJHByaXN0aW5lIiwiY3VyclJlY29yZCIsInNldE5vdEVkaXRhYmxlIiwiJHNldFByaXN0aW5lIiwiaXNEZXRhaWxWYWxpZCIsInN0YXRlIiwiJHZhbGlkIiwidXBkYXRlVmFsaWQiLCIkZGlydHkiLCIkd2F0Y2giLCJ1cGRhdGVDb250YWN0TW9kZWwiLCJvblVwZGF0ZSIsImNvbnRhY3RMaXN0Q3RybCIsInNlbGVjdFJlY29yZCIsImNvbnRhY3RMaXN0Iiwib25lUmVjb3JkIiwiaXNQYXJlbnREaXJ0eSIsInJlc2V0Q29sbGFwc2VkIiwicmVwQ29udGFjdFNlcnZpY2UiLCJjb2x1bW5EZWYiLCJiaW5kaW5nIiwid2lkdGgiLCJmb2N1c2VkIiwiY29udGFjdHMiLCJ1cGRhdGVFcnJvclN0YXRlIiwicGFyZW50RGlydHkiLCJpc0FkZENvbnRhY3QiLCJzaG93Tm9SZWNvcmRFcnJvciIsInNob3dMaXN0RXJyb3JzIiwic2V0VmFsaWQiLCJjb250YWN0TGlzdEZvcm0iLCIkaW52YWxpZCIsIm9uVXBkYXRlQ29udGFjdFJlY29yZCIsImlkeCIsImluZGV4T2YiLCJkaXNhYmxlQWRkIiwiZGVsZXRlQ29udGFjdCIsImNJRCIsInNwbGljZSIsInRlbXAiLCJhZGRDb250YWN0IiwiZGVmYXVsdENvbnRhY3QiLCJuZ0ZpbGVTZWxlY3QiLCJocGZiRmlsZVJlYWRlciIsImJpbmQiLCJlIiwiZmlsZSIsInNyY0VsZW1lbnQiLCJ0YXJnZXQiLCJmaWxlcyIsInJlYWRBc0RhdGFUZXh0IiwidGhlbiIsImhwZmJGaWxlU2VsZWN0IiwiZmlsZUNvbnRlbnQiLCJGaWxlU2VsZWN0Q29udHJvbGxlciIsImhwZmJGaWxlUHJvY2Vzc2luZyIsImZpbGVUeXBlcyIsIm1vZGVsQ2FsbGJhY2siLCJtZXNzYWdlcyIsInVwZGF0ZU1vZGVsUm9vdCIsImZpbGVMb2FkIiwidHJpZ2dlciIsInJvb3RFbGVtIiwiRmlsZVdyaXRlQ29udHJvbGxlciIsIl9nZW5lcmF0ZUZpbGUiLCJzYXZlVHlwZSIsInRvVXBwZXJDYXNlIiwid3JpdGVBc0pzb24iLCJqc29uVG9TYXZlIiwiZmlsZU5hbWUiLCJ3cml0ZUFzWG1sIiwiX2luaXQiLCJidXR0b25EaXNhYmxlZCIsInRvTG93ZXJDYXNlIiwiZ2VuZXJhdGUiLCJidXR0b25MYWJlbCIsImZpbGVSZWFkZXIiLCJvbkxvYWQiLCJyZWFkZXIiLCIkYXBwbHkiLCJzcGxpdEZpbGUiLCJuYW1lIiwiZmlsZVR5cGUiLCJkcmFmdF9maWxlX3R5cGUiLCJjb252ZXJ0VG9KU09OT2JqZWN0cyIsImNoZWNrUm9vdFRhZ01hdGNoIiwiY29udmVydFhNTFRvSlNPTk9iamVjdHMiLCJjb252ZXJ0UmVzdWx0IiwicGFyc2VSZXN1bHQiLCJtc2dfZXJyX2ZpbGVUeXBlIiwib25FcnJvciIsIm1zZ19lcnJfbG9hZCIsImdldFJlYWRlciIsIkZpbGVSZWFkZXIiLCJvbmxvYWQiLCJyZWFkQXNUZXh0IiwianNvblJlc3VsdCIsIkpTT04iLCJwYXJzZSIsIm1zZ19zdWNjZXNzIiwibXNnX2Vycl9qc29ucGFyc2UiLCJ4bWxDb25maWciLCJlc2NhcGVNb2RlIiwiZW1wdHlOb2RlRm9ybSIsInVzZURvdWJsZVF1b3RlcyIsInhtbENvbnZlcnRlciIsIlgySlMiLCJ4bWxfc3RyMmpzb24iLCJtc2dfZXJyX3htbHBhcnNlIiwiY29udmVydEpTT05PYmplY3RzVG9YTUwiLCJqc29uQ29udmVydGVyIiwieG1sUmVzdWx0IiwianNvbjJ4bWxfc3RyIiwibXNnX2Vycl9mb3JtVHlwZSIsImpzb25Ub0ZpbGUiLCJtYWtlU3RyU2F2ZSIsInN0cmluZ2lmeSIsImJsb2IiLCJCbG9iIiwidHlwZSIsInNhdmVBcyIsInhtbFRvRmlsZSIsImV4cGFuZGluZ1RhYmxlQ3RybCIsIl9zZXROdW1iZXJDb2x1bW5zIiwiZGlzYWJsZUVycm9yQ29sIiwibnVtYmVyQ29scyIsIl9yZWNhbGN1bGF0ZUNvbHVtbkRlZnMiLCJjb2xEZWZzIiwibnVtQ29scyIsImNhcmV0V2lkdGgiLCJlcnJvcldpZHRoIiwidG90YWxXaWR0aCIsInRvU3VidHJhY3QiLCJvbmVEZWYiLCJ1cGRhdGVUYWJsZVJvdyIsInRleHRJbmRleCIsInNlbGVjdEluZGV4Iiwic2VsZWN0VGFibGVSb3ciLCJfY3JlYXRlQXJyYXkiLCJhcnJheVNpemUiLCJpbml0aWFsVmFsIiwiYW5BcnJheSIsImNvbHVtbkRlZmluaXRpb25zIiwiZGlzYWJsZUV4cGFuZCIsInRhYmxlUm93RXhwYW5kZWQiLCJ0YWJsZVJvd0luZGV4Q3VyckV4cGFuZGVkIiwidGFibGVSb3dJbmRleFByZXZFeHBhbmRlZCIsImRheURhdGFDb2xsYXBzZSIsImxpc3RJdGVtcyIsImdldEV4cGFuZGVkU3RhdGUiLCJyb3ciLCJyZXNldFRhYmxlUm93IiwicmVzZXRUb0NvbGxhcHNlZCIsImRpc2FibGVTZWxlY3Rpb24iLCJkaXNhYmxlRXJyQ29sdW1uIiwiZm9ybUluRXJyb3IiLCJhRm9ybSIsImRlbGV0ZWRSb3ciLCJkYXlEYXRhQ29sbGFwc2VGbiIsImFwcGVuZCIsImluZGV4IiwidHJhbnNjbHVkZSIsImNvbnRhY3RDdHJsIiwiZ2V0Q29udGFjdExpc3RzIiwiRU5HTElTSCIsImlzRWRpdGFibGUiLCJuZ01vZGVsT3B0U2V0dGluZyIsInVwZGF0ZU9uIiwic2FsdXRhdGlvbkxpc3QiLCJsYW5nQ29ycmVzcHBvbmQiLCJwaG9uZVJlZyIsImFtZW5kUmVjb3JkIiwiYWRkcmVzc1JvbGUiLCJtYW51ZmFjdHVyZXIiLCJtYWlsaW5nIiwiYmlsbGluZyIsImltcG9ydGVyIiwiY29udGFjdFJvbGUiLCJQaG9uZUV4dCIsImxhbmdMaXN0IiwiY3RybCIsIiR0b3VjaGVkIiwiQXBwbEluZm9DdHJsIiwiX3NldENvbmZpZ0l0ZW1zIiwiY29uZmlnSnNvbiIsImZpZWxkSWRMYWJlbCIsImZpZWxkTGVuZ3RoIiwidGFnTmFtZSIsImVycm9yTXNnIiwiaXNEb3NzaWVyIiwiaXNVbmRlZmluZWQiLCJhcHBsVHlwZXMiLCJpbmZvTW9kZWwiLCJzZXRBc0luY29tcGxldGUiLCJ1c2VyVHlwZSIsImlzSW5jb21wbGV0ZSIsImNvbmZpZ3VyZUlkRmllbGQiLCJpc0V4dGVybiIsInNldEFtZW5kU3RhdGUiLCJzZXRUeXBlIiwiYWN0aXZpdHlSYXRpb25hbGVDdHJsIiwicmVxdWlyZWRTdGF0ZSIsInJhdGlvbmFsZVNlbGVjdGVkIiwiYWN0aXZpdHlSZWNvcmQiLCJpc1JlcXVpcmVkIiwic2hvd0Vycm9yTWlzc2luZyIsImFjdGl2aXR5VHlwZUZvcm0iLCJhY3Rpdml0eU1haW5DdHJsIiwiQ29tbW9uTGlzdHMiLCJsb2FkQWN0aXZpdHlEYXRhIiwibG9hZEZlZURhdGEiLCJmZWVDbGFzc0xpc3QiLCJfY3JlYXRlRmlsZW5hbWUiLCJkcmFmdF9wcmVmaXgiLCJmaW5hbF9wcmVmaXgiLCJmaWxlbmFtZSIsImFjdGl2aXR5Um9vdCIsIl90cmFuc2Zvcm1GaWxlIiwidXBkYXRlRGF0ZSIsImFwcGxpY2F0aW9uSW5mb1NlcnZpY2UiLCJ1cGRhdGVNb2RlbE9uQXBwcm92YWwiLCJfdXBkYXRlSW5mb1ZhbHVlcyIsImFjdGl2aXR5U2VydmljZSIsInVwZGF0ZVZhbHVlcyIsImRpc2FibGVYTUxTYXZlIiwiZGlzYWJsZVhNTCIsImFjdGl2aXR5RW5yb2xGb3JtIiwiZGlzYWJsZUpTT05TYXZlIiwiZGlzYWJsZUpzb24iLCJfc2V0Q29tcGxldGUiLCJfbG9hZEZpbGVDb250ZW50IiwicmVzdWx0SnNvbiIsInNob3dBbGxFcnJvcnMiLCJzZXRUaGlyZFBhcnR5IiwidXBkYXRlQWN0aXZpdHlUeXBlIiwic2V0QWRtaW5TdWJtaXNzaW9uIiwiX3NldEFwcGxUeXBlVG9BbWVuZCIsImoiLCJzYXZlWE1MTGFiZWwiLCJzaG93Q29udGVudCIsImlzTm90aWZpYWJsZSIsInNob3dBY3Rpdml0eSIsImxlYWRMaXN0IiwiYWxlcnRzIiwiY29uZmlnRmllbGQiLCJhbGVydDEiLCJtc2ciLCJzaG93IiwiYWxlcnQyIiwiYWxlcnQzIiwiaW5pdFVzZXIiLCJzYXZlSnNvbiIsIndyaXRlUmVzdWx0Iiwic2F2ZVhNTCIsInNob3dFcnJvckNoZWNrIiwidGhpcmRQYXJ0eVN0YXRlIiwic2V0QXBwbGljYXRpb25UeXBlIiwiY2xvc2VBbGVydCIsImFkZEluc3RydWN0IiwidWlTZWxlY3RDb25maWciLCJ0aGVtZSIsImFjdGl2aXR5Q2hhbmdlQ3RybCIsIm5vdGlmQ2hhbmdlRm9ybSJdLCJtYXBwaW5ncyI6IkNBR0EsV0FDQSxZQUNBQSxTQUNBQyxPQUFBLGVBQ0EseUJBQ0EsZ0JBQ0EsZUFDQSxvQkFJQSxXQUNBLFlBS0EsU0FBQUMsa0JBQ0EsR0FBQUMsSUFBQUMsSUFDQUQsSUFBQUUsU0FBQSxNQU5BTCxRQUNBQyxPQUFBLGVBQ0FLLFdBQUEsaUJBQUFKLG1CQVFBLFdBQ0EsWUFDQUYsU0FDQUMsT0FBQSxlQUNBTSxRQUFBLHFCQUFBLFNBQUFDLG9CQUNBQSxtQkFBQUMsa0JBQUEsR0FDQUQsbUJBQUFFLGtCQUFBLE1BRUFGLG1CQUFBRyx5QkFBQSxZQ2xDQVgsUUFBQUMsT0FBQSxtQkFBQU0sUUFBQSxxQkFBQSxTQUFBQyxvQkFDQUEsbUJBQUFJLGFBQUEsTUFDQUMsY0FBQSw0Q0FDQUMsc0JBQUEsbUNBQ0FDLGFBQUEsZ0NBQ0FDLGFBQUEsa0dBQ0FDLGVBQUEsbVBBQ0FDLFFBQUEsNkRBQ0FDLGVBQUEseURBQ0FDLFdBQUEsNkVBQ0FDLGNBQUEsdUJBQ0FDLFlBQUEsNEVBQ0FDLGlCQUFBLGdGQUNBQyxjQUFBLDBCQUNBQyxTQUFBLGtGQUNBQyxhQUFBLDhCQUNBQyxlQUFBLCtDQUNBQyxZQUFBLDJHQUNBQyxjQUFBLDZDQUNBQyxpQkFBQSxpQ0FDQUMsZUFBQSwrQkFDQUMsZUFBQSwrQ0FDQUMsZUFBQSxzRUFDQUMsZ0JBQUEsMkNBQ0FDLGNBQUEsZ0JBQ0FDLFVBQUEsWUFDQUMsU0FBQSxrR0FDQUMsWUFBQSw2Q0FDQUMsbUJBQUEsOEVBQ0FDLGNBQUEsMkJBQ0FDLGFBQUEsZUFDQUMsWUFBQSxpQkFDQUMsY0FBQSxtRUFDQUMsY0FBQSw2Q0FDQUMsV0FBQSwrQ0FDQUMsUUFBQSxVQUNBQyxjQUFBLGdCQUNBQyxjQUFBLHlCQUNBQyxXQUFBLE1BQ0FDLGdCQUFB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KzBCLGtCQUFBLElBSUEvMEIsR0FBQWsxQixpQkFBQSxXQUNBLFFBQUFsMUIsR0FBQTgwQixpQkFHQTkwQixHQUFBKzBCLHdCQUlBLzBCLEdBQUEyNEIsZ0JBQUF0USxXQUFBcm9CLEdBQUEyNEIsZ0JBQUF2TyxVQUFBcHFCLEdBQUErbUIsY0FBQS9tQixHQUFBMjRCLGdCQUFBdk8sVUFDQXBxQixHQUFBMjRCLGdCQUFBakYsVUFBQTF6QixHQUFBMjRCLGdCQUFBdk8sV0FEQSxVQWxFQXZxQixRQUNBQyxPQUFBLGtCQUNBbW5CLFVBQUEscUJBQ0FDLFlBQUEsbUZBQ0EvbUIsV0FBQXU0QixtQkFDQXZSLGFBQUEsZ0JBRUFDLFVBQ0E0TixlQUFBLElBQ0FDLFdBQUEsSUFDQWxPLFdBQUEiLCJmaWxlIjoiYWN0aXZpdHlBcHBJTlQtZnJfMjAxNzAxMjRfMTIzMS5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQ3JlYXRlZCBieSBka2lsdHkgb24gOC8yNi8yMDE2LlxyXG4gKi9cclxuKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKCdhY3Rpdml0eUFwcCcsIFtcclxuICAgICAgICAgICAgJ3Bhc2NhbHByZWNodC50cmFuc2xhdGUnLFxyXG4gICAgICAgICAgICAnYWN0aXZpdHlMaXN0cycsXHJcbiAgICAgICAgICAgICdhY3Rpdml0eU1haW4nLFxyXG4gICAgICAgICAgICAndHJhbnNsYXRpb25zJ1xyXG4gICAgICAgIF0pXHJcbn0pKCk7XHJcblxyXG4oZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ2FjdGl2aXR5QXBwJylcclxuICAgICAgICAuY29udHJvbGxlcignTWFpbkNvbnRyb2xsZXInLCBNYWluQ29udHJvbGxlcik7XHJcblxyXG4gICAgZnVuY3Rpb24gTWFpbkNvbnRyb2xsZXIoKSB7XHJcbiAgICAgICAgdmFyIHZtID0gdGhpcztcclxuICAgICAgICB2bS5mb3JtVHlwZSA9ICdJTlQnO1xyXG4gICAgfVxyXG59KSgpO1xyXG4vL3Rlc3RcclxuKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKCdhY3Rpdml0eUFwcCcpXHJcbiAgICAgICAgLmNvbmZpZyhbJyR0cmFuc2xhdGVQcm92aWRlcicsIGZ1bmN0aW9uICgkdHJhbnNsYXRlUHJvdmlkZXIpIHtcclxuICAgICAgICAgICAgJHRyYW5zbGF0ZVByb3ZpZGVyLmRpcmVjdGl2ZVByaW9yaXR5KDEpO1xyXG4gICAgICAgICAgICAkdHJhbnNsYXRlUHJvdmlkZXIucHJlZmVycmVkTGFuZ3VhZ2UoJ2ZyJyk7XHJcbiAgICAgICAgICAgLy8gJHRyYW5zbGF0ZVByb3ZpZGVyLnVzZUxvYWRlcignY3VzdG9tTG9hZCcpO1xyXG4gICAgICAgICAgICAkdHJhbnNsYXRlUHJvdmlkZXIudXNlU2FuaXRpemVWYWx1ZVN0cmF0ZWd5KG51bGwpO1xyXG4gICAgICAgICAgIC8vICR0cmFuc2xhdGVQcm92aWRlci5mb3JjZUFzeW5jUmVsb2FkKHRydWUpOyAvL25lZWRlZCBmb3IgdGhlIGN1c3RvbSBsb2FkZXJcclxuXHJcbiAgICAgICAgfV0pO1xyXG59KSgpOyIsImFuZ3VsYXIubW9kdWxlKFwidHJhbnNsYXRpb25zXCIsIFtdKS5jb25maWcoW1wiJHRyYW5zbGF0ZVByb3ZpZGVyXCIsIGZ1bmN0aW9uKCR0cmFuc2xhdGVQcm92aWRlcikge1xuJHRyYW5zbGF0ZVByb3ZpZGVyLnRyYW5zbGF0aW9ucyhcImVuXCIsIHtcclxuICBcIkxPQURfQUNUSVZJVFlcIjogXCJMb2FkIGEgUmVndWxhdG9yeSBBY3Rpdml0eSBFbnJvbG1lbnQgRmlsZVwiLFxyXG4gIFwiUkVHX0FDVElWSVRZX0lOU1RSVUNUXCI6IFwiUmVndWxhdG9yeSBBY3Rpdml0eSBJbnN0cnVjdGlvbnNcIixcclxuICBcIkFDVElWRV9FTlJPTFwiOlwiUmVndWxhdG9yeSBBY3Rpdml0eSBFbnJvbG1lbnRcIixcclxuICBcIklTX1NPTElDSVRFRFwiOiBcIldpbGwgdGhlIHN1Ym1pc3Npb24gYmUgc2lnbmVkIC8gZmlsZWQgYnkgYSB0aGlyZCBwYXJ0eSBvbiBiZWhhbGYgb2YgdGhlIG1hbnVmYWN0dXJlciAvIHNwb25zb3I/XCIsXHJcbiAgXCJSQVRJT05BTEVfU05EU1wiOlwiUmF0aW9uYWxlIGZvciBhbGwgU05EUywgU0FORFMsIChhbGwgaHVtYW4gZHJ1ZyB0eXBlcyk7IFZldGVyaW5hcnkgU3VwcGxlbWVudGFsIE5ldyBEcnVnIFN1Ym1pc3Npb24gKFZTTkRTKSwgVmV0ZXJpbmFyeSBTdXBwbGVtZW50YWwgQWJicmV2aWF0ZWQgTmV3IERydWcgU3VibWlzc2lvbiggVlNBTkRTKSAoQWxsIHZldGVyaW5hcnkgZHJ1ZyB0eXBlcyk7IG9yIGZvciBiaW9sb2dpY2FsIGRydWcgRElOIHN1Ym1pc3Npb25zXCIsXHJcbiAgXCJORVdfUk9BXCI6XCJOZXcgcm91dGUgb2YgYWRtaW5pc3RyYXRpb24sIGRvc2FnZSBmb3JtIGFuZCAvIG9yIHN0cmVuZ3RoXCIsXHJcbiAgXCJSRVBMQUNFX1NURVJJTFwiOlwiUmVwbGFjZSBzdGVyaWxpdHkgdGVzdCB3aXRoIHByb2Nlc3MgcGFyYW1ldHJpYyByZWxlYXNlXCIsXHJcbiAgXCJORVdfQ0xBSU1TXCI6XCJOZXcgY2xhaW1zIC8gdXNlLCBpbmRpY2F0aW9ucywgcmVjb21tZW5kZWQgYWRtaW5pc3RyYXRpb24gb3IgZG9zYWdlIHJlZ2ltZVwiLFxyXG4gIFwiQ09ORklSTV9TVFVEWVwiOlwiQ29uZmlybWF0b3J5IHN0dWRpZXNcIixcclxuICBcIkNIQU5HRV9GT1JNXCI6XCJDaGFuZ2UgaW4gZm9ybXVsYXRpb24gb3IgbWV0aG9kIG9mIG1hbnVmYWN0dXJpbmcgd2l0aCBjbGluaWNhbCAvIGJpbyBkYXRhXCIsXHJcbiAgXCJDSEFOR0VfU1VCU1RBTkNFXCI6IFwiQ2hhbmdlIGluIGRydWcgc3Vic3RhbmNlIC8gcHJvZHVjdCAoc2l0ZSwgbWV0aG9kLCBlcXVpcG1lbnQsIHByb2Nlc3MgY29udHJvbClcIixcclxuICBcIk9USEVSX1NQRUNJRllcIjogXCJPdGhlciAocGxlYXNlIHNwZWNpZnkpOlwiLFxyXG4gIFwiVFlQRV9WTkNcIjogXCJUeXBlIG9mIE5vdGlmaWFibGUgQ2hhbmNlIChOQykgb3IgVmV0ZXJpbmFyeSBOb3RpZmlhYmxlIENoYW5nZSAoVk5DKSBzdWJtaXNzaW9uXCIsXHJcbiAgXCJDSEFOR0VfTEFCRUxcIjpcIkNoYW5nZSBpbiB0ZXh0IG9mIGxhYmVsbGluZ1wiLFxyXG4gIFwiQ0hBTkdFX0RSVUdTVUJcIjpcIkNoYW5nZSBpbiBkcnVnIHN1YnN0YW5jZSAoc291cmNlLCBzeW50aGVzaXMpXCIsXHJcbiAgXCJDSEFOR0VfU1BFQ1wiOlwiQ2hhbmdlIGluIHNwZWNpZmljYXRpb25zIChtZWRpY2luYWwgb3Igbm9uLW1lZGljaW5hbCBpbmdyZWRpZW50LCBwaGFybWFjZXV0aWNhbCBmb3JtLCBhbmFseXRpY2FsIG1ldGhvZClcIixcclxuICBcIkNIQU5HRV9FWFBJUllcIjpcIkNoYW5nZSBpbiBleHBpcnkgcGVyaW9kL3N0b3JhZ2UgY29uZGl0aW9uc1wiLFxyXG4gIFwiQ0hBTkdFX01BTk1FVEhPRFwiOlwiQ2hhbmdlIGluIG1hbnVmYWN0dXJpbmcgbWV0aG9kXCIsXHJcbiAgXCJDSEFOR0VfTUFOU0lURVwiOlwiQ2hhbmdlIGluIG1hbnVmYWN0dXJpbmcgc2l0ZVwiLFxyXG4gIFwiQ0hBTkdFX0NPTlRBSU5cIjpcIkNoYW5nZSBpbiBjb250YWluZXIgc2l6ZSBmb3IgcGFyZW50ZXJhbCBkcnVnXCIsXHJcbiAgXCJDSEFOR0VfUEFDS0FHRVwiOlwiQ2hhbmdlIGluIHBhY2thZ2luZyBzcGVjaWZpY2F0aW9ucyBmb3IgcGFyZW50ZXJhbCAvIGluaGFsYXRpb24gZHJ1Z1wiLFxyXG4gIFwiQ0hBTkdFX01BVEVSSUFMXCI6IFwiQ2hhbmdlIGluIHBhY2thZ2luZyBtYXRlcmlhbCBjb21wb3NpdGlvblwiLFxyXG4gIFwiQUNUSVZJVFlfTEVBRFwiOiBcIkFjdGl2aXR5IExlYWRcIixcclxuICBcIkZFRV9DTEFTU1wiOiBcIkZlZSBDbGFzc1wiLFxyXG4gIFwiTk9UX0xBU0FcIjogXCJJIGNvbmZpcm0gdGhhdCB0aGlzIGFkbWluaXN0cmF0aXZlIHN1Ym1pc3Npb24gaXMgTk9UIGEgTG9vay1hbGlrZSBTb3VuZC1hbGlrZSAoTEFTQSkgc3VibWlzc2lvblwiLFxyXG4gIFwiUkVBU09OX0ZJTEVcIjogXCJSZWFzb24gZm9yIGZpbGluZyB0aGlzIFJlZ3VsYXRvcnkgQWN0aXZpdHlcIixcclxuICBcIlJFTEFURURfQUNUSVZJVElFU1wiOiBcIlJlbGF0ZWQgUmVndWxhdG9yeSBBY3Rpdml0eSAoUmVmZXJyZWQgdG8gaW4gdGhpcyBBZG1pbmlzdHJhdGl2ZSBTdWJtaXNzaW9uKVwiLFxyXG4gIFwiQUNUSVZJVFlfVFlQRVwiOiBcIlJlZ3VsYXRvcnkgQWN0aXZpdHkgVHlwZVwiLFxyXG4gIFwiREFURV9DTEVBUkVEXCI6IFwiRGF0ZSBDbGVhcmVkXCIsXHJcbiAgXCJDT05UUk9MX05VTVwiOiBcIkNvbnRyb2wgTnVtYmVyXCIsXHJcbiAgXCJNQU5VRkFDVF9OQU1FXCI6IFwiTWFudWZhY3R1cmVyIC8gU3BvbnNvciBOYW1lIFtGdWxsIExlZ2FsIE5hbWUgLSBObyBBYmJyZXZpYXRpb25zXVwiLFxyXG4gIFwiUkVBU09OX0ZJTElOR1wiOiBcIlJlYXNvbiBmb3IgRmlsaW5nIHRoaXMgUmVndWxhdG9yeSBBY3Rpdml0eVwiLFxyXG4gIFwiQVNTT0NfRElOU1wiOiBcIkFzc29jaWF0ZWQgRHJ1ZyBJZGVudGlmaWNhdGlvbiBOdW1iZXJzIChESU4pXCIsXHJcbiAgXCJBRERfRElOXCI6IFwiQWRkIERJTlwiLFxyXG4gIFwiU0FWRV9BQ1RJVklUWVwiOiBcIlNhdmUgQWN0aXZpdHlcIixcclxuICBcIk9USEVSX0RFVEFJTFNcIjogXCJPdGhlciAocGxlYXNlIHNwZWNpZnkpXCIsXHJcbiAgXCJESU5fQUJSUkVWXCI6IFwiRElOXCIsXHJcbiAgXCJERUxFVEVfQUNUSVZJVFlcIjogXCJEZWxldGUgQWN0aXZpdHlcIixcclxuICBcIkFERF9BQ1RJVklUWVwiOiBcIkFkZCBBY3Rpdml0eVwiLFxyXG4gIFwiQVVUX0xFVFRFUlwiOiBcIlBsZWFzZSBpbmNsdWRlIFRoaXJkIFBhcnR5IEF1dGhvcml6YXRpb24gbGV0dGVyIGluIHRoZSBSRVAgZm9sZGVyIHdoZW4gc3VibWl0dGluZyB2aWEgdGhlIENFU0dcIixcclxuICBcIkRPU1NJRVJfSURfUFJFVlwiOiBcIkRvc3NpZXIgSWQgKFByZXZpb3VzbHkgRmlsZSBOdW1iZXIpXCIsXHJcbiAgXCJSRUxBVEVEX0FDVElWSVRZXCI6IFwiUmVsYXRlZCBBY3Rpdml0eVwiLFxyXG4gIFwiQU1FTkRfQUNUSVZJVFlcIjogXCJBbWVuZCBSZWxhdGVkIEFjdGl2aXR5XCIsXHJcbiAgXCJJU19BRE1JTl9TVUJcIjogXCJJcyB0aGlzIGEgcmVndWxhdG9yeSBhZG1pbmlzdHJhdGl2ZSBzdWJtaXNzaW9uP1wiLFxyXG4gIFwiTElDRU5DRV9BR1JFRVwiOiBcIklzIHRoaXMgYW4gYWRtaW5pc3RyYXRpdmUgc3VibWlzc2lvbiBsaWNlbnNlIGFncmVlbWVudD9cIixcclxuICBcIkRJTl9UUkFOU0ZFUlwiOiBcIkkgY29uZmlybSB0aGF0IHRoaXMgQWRtaW5pc3RyYXRpdmUgU3VibWlzc2lvbiBpcyBhIERJTiB0cmFuc2ZlciBvZiBvd25lcnNoaXBcIixcclxuICBcIlJFR0FDVElWU0VBUkNIXCI6XCJTZWxlY3Qgb3Igc2VhcmNoIGZvciBhIFJlZ3VsYXRvcnkgQWN0aXZpdHkgVHlwZVwiXHJcbn0pO1xuXG4kdHJhbnNsYXRlUHJvdmlkZXIudHJhbnNsYXRpb25zKFwiZnJcIiwge1xyXG4gIFwiTE9BRF9BQ1RJVklUWVwiOiBcImZyX0xvYWQgYSBSZWd1bGF0b3J5IEFjdGl2aXR5IEVucm9sbWVudCBGaWxlXCIsXHJcbiAgXCJSRUdfQUNUSVZJVFlfSU5TVFJVQ1RcIjogXCJSZWd1bGF0b3J5IEFjdGl2aXR5IEluc3RydWN0aW9uc1wiLFxyXG4gIFwiQUNUSVZFX0VOUk9MXCI6IFwiZnJfUmVndWxhdG9yeSBBY3Rpdml0eSBFbnJvbG1lbnRcIixcclxuICBcIklTX1NPTElDSVRFRFwiOiBcImZyX1dpbGwgdGhlIHN1Ym1pc3Npb24gYmUgc2lnbmVkIC8gZmlsZWQgYnkgYSB0aGlyZCBwYXJ0eSBvbiBiZWhhbGYgb2YgdGhlIG1hbnVmYWN0dXJlciAvIHNwb25zb3I/XCIsXHJcbiAgXCJSQVRJT05BTEVfU05EU1wiOiBcImZyX1JhdGlvbmFsZSBmb3IgYWxsIFNORFMsIFNBTkRTLCAoYWxsIGh1bWFuIGRydWcgdHlwZXMpOyBWZXRlcmluYXJ5IFN1cHBsZW1lbnRhbCBOZXcgRHJ1ZyBTdWJtaXNzaW9uIChWU05EUyksIFZldGVyaW5hcnkgU3VwcGxlbWVudGFsIEFiYnJldmlhdGVkIE5ldyBEcnVnIFN1Ym1pc3Npb24oIFZTQU5EUykgKEFsbCB2ZXRlcmluYXJ5IGRydWcgdHlwZXMpOyBvciBmb3IgYmlvbG9naWNhbCBkcnVnIERJTiBzdWJtaXNzaW9uc1wiLFxyXG4gIFwiTkVXX1JPQVwiOiBcImZyX05ldyByb3V0ZSBvZiBhZG1pbmlzdHJhdGlvbiwgZG9zYWdlIGZvcm0gYW5kIC8gb3Igc3RyZW5ndGhcIixcclxuICBcIlJFUExBQ0VfU1RFUklMXCI6IFwiZnJfUmVwbGFjZSBzdGVyaWxpdHkgdGVzdCB3aXRoIHByb2Nlc3MgcGFyYW1ldHJpYyByZWxlYXNlXCIsXHJcbiAgXCJORVdfQ0xBSU1TXCI6IFwiZnJfTmV3IGNsYWltcyAvIHVzZSwgaW5kaWNhdGlvbnMsIHJlY29tbWVuZGVkIGFkbWluaXN0cmF0aW9uIG9yIGRvc2FnZSByZWdpbWVcIixcclxuICBcIkNPTkZJUk1fU1RVRFlcIjogXCJmcl9Db25maXJtYXRvcnkgc3R1ZGllc1wiLFxyXG4gIFwiQ0hBTkdFX1NVQlNUQU5DRVwiOiBcImZyX0NoYW5nZSBpbiBkcnVnIHN1YnN0YW5jZS9wcm9kdWN0IChzaXRlLCBtZXRob2QsIGVxdWlwbWVudCwgcHJvY2VzcyBjb250cm9sXCIsXHJcbiAgXCJPVEhFUl9TUEVDSUZZXCI6IFwiZnJfT3RoZXIgKHBsZWFzZSBzcGVjaWZ5KTpcIixcclxuICBcIlRZUEVfVk5DXCI6IFwiZnJfVHlwZSBvZiBOb3RpZmlhYmxlIENoYW5jZSAoTkMpIG9yIFZldGVyaW5hcnkgTm90aWZpYWJsZSBDaGFuZ2UgKFZOQykgc3VibWlzc2lvblwiLFxyXG4gIFwiQ0hBTkdFX0xBQkVMXCI6IFwiZnJfQ2hhbmdlIGluIHRleHQgb2YgbGFiZWxsaW5nXCIsXHJcbiAgXCJDSEFOR0VfRFJVR1NVQlwiOiBcImZyX0NoYW5nZSBpbiBkcnVnIHN1YnN0YW5jZSAoc291cmNlLCBzeW50aGVzaXMpXCIsXHJcbiAgXCJDSEFOR0VfRk9STVwiOiBcIk1vZGlmaWNhdGlvbiBkZSBsYSBmb3JtdWxhdGlvblwiLFxyXG4gIFwiQ0hBTkdFX1NQRUNcIjogXCJNb2RpZmljYXRpb24gZGFucyBsZXMgc3DDqWNpZmljYXRpb25zIChpbmdyw6lkaWVudHMgbcOpZGljaW5hdXggb3Ugbm9uIG3DqWRpY2luYXV4LCBmb3JtZSBwb3NvbG9naXF1ZSwgbcOpdGhvZGUgZOKAmWFuYWx5c2UpXCIsXHJcbiAgXCJDSEFOR0VfRVhQSVJZXCI6IFwiTW9kaWZpY2F0aW9uIGRlIGxhIGR1csOpZSBkZSBjb25zZXJ2YXRpb24vZGVzIGNvbmRpdGlvbnMgZOKAmWVudHJlcG9zYWdlXCIsXHJcbiAgXCJDSEFOR0VfTUFOTUVUSE9EXCI6IFwiTW9kaWZpY2F0aW9uIGR1IHByb2PDqWTDqSBkZSBmYWJyaWNhdGlvblwiLFxyXG4gIFwiQ0hBTkdFX01BTlNJVEVcIjogXCJNb2RpZmljYXRpb24gZHUgc2l0ZSBkZSBmYWJyaWNhdGlvblwiLFxyXG4gIFwiQ0hBTkdFX0NPTlRBSU5cIjogXCJNb2RpZmljYXRpb24gZHUgZm9ybWF0IGR1IHLDqWNpcGllbnQgZGFucyBsZSBjYXMgZOKAmXVuIG3DqWRpY2FtZW50IGFkbWluaXN0csOpIHBhciB2b2llIHBhcmVudMOpcmFsZVwiLFxyXG4gIFwiQ0hBTkdFX1BBQ0tBR0VcIjogXCJNb2RpZmljYXRpb24gZGVzIHNww6ljaWZpY2F0aW9ucyBkdSBjb25kaXRpb25uZW1lbnQgZGFucyBsZSBjYXMgZOKAmXVuIG3DqWRpY2FtZW50IGFkbWluaXN0csOpIHBhciB2b2llIHBhcmVudMOpcmFsZS9wYXIgaW5oYWxhdGlvblwiLFxyXG4gIFwiQ0hBTkdFX01BVEVSSUFMXCI6IFwiTW9kaWZpY2F0aW9uIGRlIGxhIGNvbXBvc2l0aW9uIGR1IG1hdMOpcmllbCBkZSBjb25kaXRpb25uZW1lbnRcIixcclxuICBcIkNPTVBBTllfSURcIjogXCJmcl9Db21wYW55IElkXCIsXHJcbiAgXCJET1NTSUVSX0lEXCI6IFwiZnJfRG9zc2llciBJZFwiLFxyXG4gIFwiQUNUSVZJVFlfTEVBRFwiOiBcImZyX0FjdGl2aXR5IExlYWRcIixcclxuICBcIkZFRV9DTEFTU1wiOiBcImZyX0ZlZSBDbGFzc1wiLFxyXG4gIFwiTk9UX0xBU0FcIjogXCJmcl9JIGNvbmZpcm0gdGhhdCB0aGlzIGFkbWluaXN0cmF0aXZlIHN1Ym1pc3Npb24gdHlwZSBpcyBOT1QgYSBMb29rLWFsaWtlIFNvdW5kLWFsaWtlIChMQVNBKSBzdWJtaXNzaW9uXCIsXHJcbiAgXCJSRUFTT05fRklMRVwiOiBcImZyX1JlYXNvbiBmb3IgZmlsaW5nIHRoaXMgUmVndWxhdG9yeSBBY3Rpdml0eVwiLFxyXG4gIFwiUkVMQVRFRF9BQ1RJVklUSUVTXCI6IFwiZnJfUmVsYXRlZCBSZWd1bGF0b3J5IEFjdGl2aXR5IChSZWZlcnJlZCB0byBpbiB0aGlzIEFkbWluaXN0cmF0aXZlIFN1Ym1pc3Npb24pXCIsXHJcbiAgXCJBQ1RJVklUWV9UWVBFXCI6IFwiZnJfUmVndWxhdG9yeSBBY3Rpdml0eSBUeXBlXCIsXHJcbiAgXCJEQVRFX0NMRUFSRURcIjogXCJmcl9EYXRlIENsZWFyZWRcIixcclxuICBcIkNPTlRST0xfTlVNXCI6IFwiZnJfQ29udHJvbCBOdW1iZXJcIixcclxuICBcIk1BTlVGQUNUX05BTUVcIjogXCJmcl9NYW51ZmFjdHVyZXIgLyBTcG9uc29yIE5hbWUgW0Z1bGwgTGVnYWwgTmFtZSAtIE5vIEFiYnJldmlhdGlvbnNdXCIsXHJcbiAgXCJSRUFTT05fRklMSU5HXCI6IFwiZnJfUmVhc29uIGZvciBGaWxpbmcgdGhpcyBSZWd1bGF0b3J5IEFjdGl2aXR5XCIsXHJcbiAgXCJBU1NPQ19ESU5TXCI6IFwiZnJfQXNzb2NpYXRlZCBEcnVnIElkZW50aWZpY2F0aW9uIE51bWJlcnMgKERJTilcIixcclxuICBcIkFERF9ESU5cIjogXCJmcl9BZGQgRElOXCIsXHJcbiAgXCJTQVZFX0FDVElWSVRZXCI6IFwiZnJfU2F2ZSBBY3Rpdml0eVwiLFxyXG4gIFwiT1RIRVJfREVUQUlMU1wiOiBcImZyX090aGVyIERldGFpbHNcIixcclxuICBcIkRJTl9BQlJSRVZcIjogXCJESU5cIixcclxuICBcIkRFTEVURV9BQ1RJVklUWVwiOiBcImZyX0RlbGV0ZSBBY3Rpdml0eVwiLFxyXG4gIFwiQVVUX0xFVFRFUlwiOiBcImZyX1BsZWFzZSBpbmNsdWRlIFRoaXJkIFBhcnR5IEF1dGhvcml6YXRpb24gbGV0dGVyIGluIHRoZSBSRVAgZm9sZGVyIHdoZW4gc3VibWl0dGluZyB2aWEgdGhlIENFU0dcIixcclxuICBcIkRPU1NJRVJfSURfUFJFVlwiOiBcImZyX0Rvc3NpZXIgSWQgKFByZXZpb3VzbHkgRmlsZSBOdW1iZXIpXCIsXHJcbiAgXCJSRUxBVEVEX0FDVElWSVRZXCI6IFwiZnJfUmVsYXRlZCBBY3Rpdml0eVwiLFxyXG4gIFwiQU1FTkRfQUNUSVZJVFlcIjogXCJmcl9BbWVuZCBSZWxhdGVkIEFjdGl2aXR5XCIsXHJcbiAgXCJJU19BRE1JTl9TVUJcIjogXCJmcl9JcyB0aGlzIGFuIGFkbWluaXN0cmF0aXZlIHN1Ym1pc3Npb24gbGljZW5zZSBhZ3JlZW1lbnQ/XCIsXHJcbiAgXCJMSUNFTkNFX0FHUkVFXCI6IFwiZnJfSXMgdGhpcyBhbiBhZG1pbmlzdHJhdGl2ZSBzdWJtaXNzaW9uIGxpY2Vuc2UgYWdyZWVtZW50XCIsXHJcbiAgXCJESU5fVFJBTlNGRVJcIjogXCJmcl9JIGNvbmZpcm0gdGhhdCB0aGlzIEFkbWluaXN0cmF0aXZlIFN1Ym1pc3Npb24gaXMgYSBESU4gdHJhbnNmZXIgb2Ygb3duZXJzaGlwXCIsXHJcbiAgXCJSRUdBQ1RJVlNFQVJDSFwiOlwiZnJfU2VsZWN0IG9yIHNlYXJjaCBmb3IgUmVndWxhdG9yeSBBY3Rpdml0eSBUeXBlXCJcclxuXHJcbn0pO1xuXG4kdHJhbnNsYXRlUHJvdmlkZXIudHJhbnNsYXRpb25zKFwiZW5cIiwge1xyXG4gIC8qXCJDVEFcIjogXCJDVEEgLSBDbGluaWNhbCBUcmlhbCBBcHBsaWNhdGlvblwiLFxyXG4gIFwiQ1RBQVwiOiBcIkNUQS1BIC0gQ2xpbmljYWwgVHJpYWwgQXBwbGljYXRpb24gQW1lbmRtZW50XCIsXHJcbiAgXCJORFNcIjogXCJORFMgLSBOZXcgRHJ1ZyBTdWJtaXNzaW9uXCIsXHJcbiAgXCJTTkRTXCI6IFwiU05EUyAtIFN1cHBsZW1lbnRhbCBOZXcgRHJ1ZyBTdWJtaXNzaW9uXCIsXHJcbiAgXCJBTkRTXCI6IFwiQU5EUyAtIEFiYnJldmlhdGVkIE5ldyBEcnVnIFN1Ym1pc3Npb25cIixcclxuICBcIlNBTkRTXCI6IFwiU0FORFMgLSBTdXBwbGVtZW50YWwgQWJicmV2aWF0ZWQgTmV3IERydWcgU3VibWlzc2lvblwiLFxyXG4gIFwiTkNcIjogXCJOQyAtIE5vdGlmaWFibGUgQ2hhbmdlXCIsXHJcbiAgXCJESU5cIjogXCJESU4gLSBEcnVnIElkZW50aWZpY2F0aW9uIE51bWJlciBzdWJtaXNzaW9uIC0gYWxsIHR5cGVzXCIsXHJcbiAgXCJQRENcIjogXCJQREMgLSBQb3N0LUF1dGhvcml6YXRpb24gRGl2aXNpb24gMSBDaGFuZ2VcIixcclxuICBcIkFETUlOXCI6IFwiQURNSU4gLSBBZG1pbmlzdHJhdGl2ZSBtYW51ZmFjdHVyZXIgbmFtZSAvIHByb2R1Y3QgbmFtZSBjaGFuZ2UgLyBsaWNlbnNpbmcgYWdyZWVtZW50c1wiLFxyXG4gIFwiVklORFwiOiBcIlZJTkQgLSBWZXRlcmluYXJ5IEludmVzdGlnYXRpb25hbCBOZXcgRHJ1Z1wiLFxyXG4gIFwiVklOREFNXCI6IFwiVklORC1BTSBWZXRlcmluYXJ5IEludmVzdGlnYXRpb25hbCBOZXcgRHJ1ZyBBbWVuZG1lbnRcIixcclxuICBcIlZORFNcIjogXCJWTkRTIC0gVmV0ZXJpbmFyeSBOZXcgRHJ1ZyBTdWJtaXNzaW9uXCIsXHJcbiAgXCJWQU5EU1wiOiBcIlZBTkRTIC0gVmV0ZXJpbmFyeSBBYmJyZXZpYXRlZCBOZXcgRHJ1ZyBTdWJtaXNzaW9uXCIsXHJcbiAgXCJWU0FORFNcIjogXCJWU0FORFMgLSBWZXRlcmluYXJ5IFN1cHBsZW1lbnRhbCBBYmJyZXZpYXRlZCBOZXcgRHJ1ZyBTdWJtaXNzaW9uXCIsXHJcbiAgXCJWTkNcIjogXCJWTkMgLSBWZXRlcmluYXJ5IE5vdGlmaWFibGUgQ2hhbmdlXCIsXHJcbiAgXCJWRElOXCI6IFwiVkRJTiAtIFZldGVyaW5hcnkgRHJ1ZyBJZGVudGlmaWNhdGlvbiBOdW1iZXIgc3VibWlzc2lvbiAtIGFsbCB0eXBlc1wiLCovXHJcbiAgXCJCMTQtMjAxNjAzMDEtMDlcIjpcdFwiUGhhcm1hY2V1dGljYWxcIixcclxuICBcIkIxNC0yMDE2MDMwMS0wMlwiOlx0XCJCaW9sb2dpY2FsXCIsXHJcbiAgXCJCMTQtMjAxNjAzMDEtMTBcIjpcdFwiUG9zdC1NYXJrZXQgUGhhcm1hY292aWdpbGFuY2VcIixcclxuICBcIkIxNC0yMDE2MDMwMS0wN1wiOlx0XCJEcnVnIE1hc3RlciBGaWxlXCIsXHJcbiAgXCJVTkFTU0lHTkVEXCI6IFwiVW5hc3NpZ25lZFwiXHJcbn0pO1xuXG4kdHJhbnNsYXRlUHJvdmlkZXIudHJhbnNsYXRpb25zKFwiZnJcIiwge1xyXG4gLyogXCJDVEFcIjogXCJERUMgLSBEZW1hbmRlIGTigJllc3NhaSBjbGluaXF1ZVwiLFxyXG4gIFwiQ1RBQVwiOiBcIk1ERUMgLSBNb2RpZmljYXRpb24gw6AgdW5lIGRlbWFuZGUgZOKAmWVzc2FpIGNsaW5pcXVlXCIsXHJcbiAgXCJORFNcIjogXCJQcsOpc2VudGF0aW9uIGRlIGRyb2d1ZSBub3V2ZWxsZSAoUEROKVwiLFxyXG4gIFwiU05EU1wiOiBcIlBTRE4gLSBTdXBwbMOpbWVudCDDoCB1bmUgcHLDqXNlbnRhdGlvbiBkZSBkcm9ndWUgbm91dmVsbGVcIixcclxuICBcIkFORFNcIjogXCJQQUROIC0gUHLDqXNlbnRhdGlvbiBhYnLDqWfDqWUgZGUgZHJvZ3VlIG5vdXZlbGxlXCIsXHJcbiAgXCJTQU5EU1wiOiBcIlBTQUROIC0gU3VwcGzDqW1lbnQgw6AgdW5lIHByw6lzZW50YXRpb24gYWJyw6lnw6llIGRlIGRyb2d1ZSBub3V2ZWxsZVwiLFxyXG4gIFwiTkNcIjogXCJQTSAtIFByw6lhdmlzIGRlIG1vZGlmaWNhdGlvblwiLFxyXG4gIFwiRElOXCI6IFwiRElOIC0gRGVtYW5kZSBk4oCZaWRlbnRpZmljYXRpb24gbnVtw6lyaXF1ZSBkZSBkcm9ndWVcIixcclxuICBcIlBEQ1wiOiBcIlBEQyAtIE1vZGlmaWNhdGlvbiBwb3N0w6lyaWV1cmUgw6AgbOKAmWF1dG9yaXNhdGlvbiBhY2NvcmTDqWUgY29uZm9ybcOpbWVudCBhdSB0aXRyZSAxXCIsXHJcbiAgXCJBRE1JTlwiOiBcIkFETUlOIC1DaGFuZ2VtZW50IGRlIG5hdHVyZSBhZG1pbmlzdHJhdGl2ZVwiLFxyXG4gIFwiVklORFwiOiBcIkROUlYgLSBEcm9ndWVzIG5vdXZlbGxlcyBkZSByZWNoZXJjaGUgw6AgdXNhZ2UgdsOpdMOpcmluYWlyZVwiLFxyXG4gIFwiVklOREFNXCI6IFwiTUROUlYtTW9kaWZpY2F0aW9uIMOgIGRlcyBkcm9ndWVzIG5vdXZlbGxlcyBkZSByZWNoZXJjaGUgw6AgdXNhZ2UgdsOpdMOpcmluYWlyZSAoKVwiLFxyXG4gIFwiVk5EU1wiOiBcIlBETlYgLSBQcsOpc2VudGF0aW9uIGRlIGRyb2d1ZSBub3V2ZWxsZSDDoCB1c2FnZSB2w6l0w6lyaW5haXJlXCIsXHJcbiAgXCJWQU5EU1wiOiBcIlBBRE5WIC0gUHLDqXNlbnRhdGlvbiBhYnLDqWfDqWUgZGUgZHJvZ3VlIG5vdXZlbGxlIMOgIHVzYWdlIHbDqXTDqXJpbmFpcmVcIixcclxuICBcIlZTQU5EU1wiOiBcIlBTQUROViAtIFByw6lzZW50YXRpb24gc3VwcGzDqW1lbnRhaXJlIGFicsOpZ8OpZSBkZSBkcm9ndWUgbm91dmVsbGUgw6AgdXNhZ2UgdsOpdMOpcmluYWlyZVwiLFxyXG4gIFwiVk5DXCI6IFwiUE1WIC0gUHLDqWF2aXMgZGUgbW9kaWZpY2F0aW9uIGTigJl1biBtw6lkaWNhbWVudCDDoCB1c2FnZSB2w6l0w6lyaW5haXJlXCIsXHJcbiAgXCJWRElOXCI6IFwiRElOViAtIERlbWFuZGUgZOKAmWlkZW50aWZpY2F0aW9uIG51bcOpcmlxdWUgZGUgZHJvZ3VlIMOgIHVzYWdlIHbDqXTDqXJpbmFpcmUgLSB0b3VzIGxlcyB0eXBlc1wiLCovXHJcbiAvKiBcIkJJT0xPR0lDXCI6IFwiZnJfQmlvbG9naWNcIixcclxuICBcIkNIUFwiOiBcImZyX0NIUCAtIFwiLFxyXG4gIFwiRE1GXCI6IFwiZnJfRE1GIC0gRHJ1ZyBNYXN0ZXIgRmlsZVwiLFxyXG4gIFwiUEhBUk1BXCI6IFwiZnJfUGhhcm1hIC0gXCIsXHJcbiAgXCJQTVZJR0lMQU5DRVwiOiBcImZyX1BNIFZpZ2lsYW5jZSAtIFwiLFxyXG4gIFwiTURcIjogXCJmcl9NRCAtIFwiLFxyXG4gIFwiVkVUXCI6IFwiZnJfVmV0IC0gXCIsKi9cclxuICBcIkIxNC0yMDE2MDMwMS0wOVwiOlx0XCJmcl9QaGFybWFjZXV0aWNhbFwiLFxyXG4gIFwiQjE0LTIwMTYwMzAxLTAyXCI6XHRcImZyX0Jpb2xvZ2ljYWxcIixcclxuICBcIkIxNC0yMDE2MDMwMS0xMFwiOlx0XCJmcl9Qb3N0LU1hcmtldCBQaGFybWFjb3ZpZ2lsYW5jZVwiLFxyXG4gIFwiQjE0LTIwMTYwMzAxLTA3XCI6XHRcImZyX0RydWcgTWFzdGVyIEZpbGVcIixcclxuICBcIlVOQVNTSUdORURcIjogICAgICAgICBcImZyX1VuYXNzaWduZWRcIlxyXG59KTtcblxuJHRyYW5zbGF0ZVByb3ZpZGVyLnRyYW5zbGF0aW9ucyhcImVuXCIsIHtcclxuICBcIkZJUlNUX05BTUVcIjogXCJGaXJzdCBOYW1lXCIsXHJcbiAgXCJMQVNUX05BTUVcIjogXCJMYXN0IE5hbWVcIixcclxuICBcIklOSVRJQUxTXCI6IFwiSW5pdGlhbHNcIixcclxuICBcIkxBTkdVQUdFX0NPUlJFU1BPTkRFTkNFXCI6IFwiTGFuZ3VhZ2Ugb2YgQ29ycmVzcG9uZGFuY2VcIixcclxuICBcIkpPQl9USVRMRVwiOiBcIkpvYiBUaXRsZVwiLFxyXG4gIFwiU0FMVVRBVElPTlwiOiBcIlNhbHV0YXRpb25cIixcclxuICBcIlNBTFVUX01SXCI6IFwiTXIuXCIsXHJcbiAgXCJTQUxVVF9NU1wiOiBcIk1zLlwiLFxyXG4gIFwiU0FMVVRfRFJcIjogXCJEci5cIixcclxuICBcIlNBTFVUX01SU1wiOiBcIk1ycy5cIixcclxuICBcIlJPTEVfUFJJTUFSWVwiOiBcIlByaW1hcnlcIixcclxuICBcIlJPTEVfU0VDT05EQVJZXCI6IFwiQWx0ZXJuYXRlXCIsXHJcbiAgXCJFTUFJTFwiOiAgXCJFbWFpbFwiLFxyXG4gIFwiRkFYX05VTUJFUlwiOiBcIkZheCBOdW1iZXJcIixcclxuICBcIlBIT05FX0VYVFwiOiBcIlBob25lIEV4dGVuc2lvblwiLFxyXG4gIFwiUk9MRVNcIjogXCJSb2xlc1wiLFxyXG4gIFwiUEhPTkVfTlVNQkVSXCI6IFwiUGhvbmUgTnVtYmVyXCIsXHJcbiAgXCJDT05UQUNUX0lORk9cIjogXCJDb21wYW55IFJlcHJlc2VudGF0aXZlIEluZm9ybWF0aW9uXCIsXHJcbiAgXCJBTUVORFwiOiBcIkFtZW5kXCIsXHJcbiAgXCJSRVBfQ09OVEFDVFwiOiAgXCJSRVAgQ29udGFjdFwiLFxyXG4gIFwiT05FX1JPTEVcIjogXCJSb2xlXCIsXHJcbiAgXCJDT05UQUNUX0RFVEFJTFNcIjogXCJDb21wYW55IFJlcHJlc2VudGF0aXZlIERldGFpbHNcIixcclxuICBcIkFERF9DT05UQUNUXCI6IFwiQWRkIFJFUCBDb250YWN0XCIsXHJcbiAgXCJDT05UQUNUX1JPTEVfTEVHRU5EXCI6IFwiU2VsZWN0IG9uZSBvciBtb3JlIHJvbGVzIGZvciB0aGlzIGNvbXBhbnkgcmVwcmVzZW50YXRpdmVcIixcclxuICBcIkFERF9SRVBSRVNcIjogXCJBZGQgQ29tcGFueSBSZXByZXNlbnRhdGl2ZVwiLFxyXG4gIFwiREVMRVRFX1JFUFJFU1wiOiBcIkRlbGV0ZSBDb21wYW55IFJlcC5cIixcclxuICBcIlNBVkVfUkVQUkVTXCI6IFwiU2F2ZSBDb21wYW55IFJlcC5cIlxyXG59KTtcblxuJHRyYW5zbGF0ZVByb3ZpZGVyLnRyYW5zbGF0aW9ucyhcImZyXCIsIHtcclxuICBcIkZJUlNUX05BTUVcIjogXCJQcsOpbm9tXCIsXHJcbiAgXCJMQVNUX05BTUVcIjogXCJOb21cIixcclxuICBcIklOSVRJQUxTXCI6IFwiSW5pdGlhbHNcIixcclxuICBcIkxBTkdVQUdFX0NPUlJFU1BPTkRFTkNFXCI6IFwiTGFuZ3VlIGRlIENvcnJlc3BvbmRhbmNlXCIsXHJcbiAgXCJKT0JfVElUTEVcIjogXCJKb2IgVGl0bGVcIixcclxuICBcIlNBTFVUQVRJT05cIjogXCJUaXRyZSBkZSBjaXZpbGl0w6lcIixcclxuICBcIlNBTFVUX01SXCI6IFwiTS5cIixcclxuICBcIlNBTFVUX01TXCI6IFwiTW1lXCIsXHJcbiAgXCJTQUxVVF9EUlwiOiBcIkRyLlwiLFxyXG4gIFwiU0FMVVRfTVJTXCI6IFwiTWxsZVwiLFxyXG4gIFwiUk9MRV9QUklNQVJZXCI6IFwiUHJpbWFpcmVcIixcclxuICBcIlJPTEVfU0VDT05EQVJZXCI6IFwiQWx0ZXJuZXJcIixcclxuICBcIkVNQUlMXCI6IFwiQ291cnJpZWxcIixcclxuICBcIkZBWF9OVU1CRVJcIjogXCJOdW3DqXJvIGRlIHTDqWzDqWNvcGlldXJcIixcclxuICBcIlBIT05FX0VYVFwiOiBcIk51bcOpcm8gZGUgcG9zdGVcIixcclxuICBcIkFERFJfUk9MRVNcIjpcImZyX1JvbGVzXCIsXHJcbiAgXCJQSE9ORV9OVU1CRVJcIjogXCJOdW3DqXJvIGRlIHTDqWzDqXBob25lXCIsXHJcbiAgXCJDT05UQUNUX0lORk9cIjogXCJmcl9Db21wYW55IFJlcHJlc2VudGF0aXZlIEluZm9ybWF0aW9uXCIsXHJcbiAgXCJBTUVORFwiOiBcImZyX0FtZW5kXCIsXHJcbiAgXCJSRVBfQ09OVEFDVFwiOiAgXCJmcl9SRVAgQ29udGFjdFwiLFxyXG4gIFwiT05FX1JPTEVcIjogXCJmcl9Sb2xlXCIsXHJcbiAgXCJDT05UQUNUX0RFVEFJTFNcIjogXCJmcl9Db21wYW55IFJlcHJlc2VudGF0aXZlIERldGFpbHNcIixcclxuICBcIkFERF9DT05UQUNUXCI6IFwiZnJfQWRkIFJFUCBDb250YWN0XCIsXHJcbiAgXCJDT05UQUNUX1JPTEVfTEVHRU5EXCI6IFwiZnJfU2VsZWN0IG9uZSBvciBtb3JlIHJvbGVzIGZvciB0aGlzIGNvbXBhbnkgcmVwcmVzZW50YXRpdmVcIlxyXG59KTtcblxuJHRyYW5zbGF0ZVByb3ZpZGVyLnRyYW5zbGF0aW9ucyhcImVuXCIsIHtcclxuICBcIkFQUExfU1RBVFVTXCI6IFwiQXBwbGljYXRpb24gU3RhdHVzXCIsXHJcbiAgXCJFTlJPTF9WRVJTSU9OXCI6IFwiRW5yb2xtZW50IFZlcnNpb25cIixcclxuICBcIkRBVEVfU0FWRURcIjogXCJEYXRlIExhc3QgU2F2ZWRcIixcclxuICBcIkFNRU5EX0VOUk9MXCI6ICBcIkFtZW5kIEVucm9sbWVudFwiXHJcbn0pO1xuXG4kdHJhbnNsYXRlUHJvdmlkZXIudHJhbnNsYXRpb25zKFwiZnJcIiwge1xyXG4gIFwiQVBQTF9TVEFUVVNcIjogXCJmcl9BcHBsaWNhdGlvbiBTdGF0dXNcIixcclxuICBcIkVOUk9MX1ZFUlNJT05cIjogXCJmcl9FbnJvbG1lbnQgVmVyc2lvblwiLFxyXG4gIFwiREFURV9TQVZFRFwiOiBcImZyX0RhdGUgTGFzdCBTYXZlZFwiLFxyXG4gIFwiQU1FTkRfRU5ST0xcIjogXCJmcl9BbWVuZCBFbnJvbG1lbnRcIlxyXG59KTtcblxuJHRyYW5zbGF0ZVByb3ZpZGVyLnRyYW5zbGF0aW9ucyhcImVuXCIsIHtcclxuICBcIlNFTEVDVF9MT0FEXCI6IFwiU2VsZWN0IGEgZmlsZSB0byBsb2FkXCIsXHJcbiAgXCJNU0dfU1VDQ0VTU19MT0FEXCI6IFwiVGhlIGZpbGUgd2FzIGxvYWRlZCBzdWNjZXNzZnVsbHlcIixcclxuICBcIk1TR19FUlJfSlNPTlBBUlNFXCI6IFwiRXJyb3I6IHRoZXJlIHdhcyBhbiBlcnJvciBwYXJzaW5nIHRoZSB3b3JraW5nIGZpbGUuXCIsXHJcbiAgXCJNU0dfRVJSX1hNTFBBUlNFXCI6IFwiRXJyb3I6IHRoZXJlIHdhcyBhbiBlcnJvciBwYXJzaW5nIHRoZSBkcmFmdCBYTUwgZmlsZS5cIixcclxuICBcIk1TR19FUlJfRklMRV9MT0FEXCI6IFwiRXJyb3I6IHRoZXJlIHdhcyBhIHByb2JsZW0gbG9hZGluZyB0aGUgZmlsZS5cIixcclxuICBcIk1TR19FUlJfRklMRV9UWVBFXCI6IFwiRXJyb3I6IEFuIGludmFsaWQgZmlsZSB0eXBlIHdhcyBzZWxlY3RlZC5cIixcclxuICBcIk1TR19FUlJfRk9STV9UWVBFXCI6IFwiRXJyb3I6IHRoZSB3cm9uZyBmb3JtIHR5cGUgd2FzIHNlbGVjdGVkIGZvciB0aGlzIGZvcm0uXCIsXHJcbiAgXCJNU0dfRVJSX0NIRUNLU1VNX0ZBSUxcIjogXCJFcnJvcjogdGhlIGNoZWNrc3VtIGluIHRoZSBmaWxlIGRvZXMgbm90IG1hdGNoIHRoZSBjYWxjdWxhdGVkIGNoZWNrc3VtXCJcclxufSk7XG5cbiR0cmFuc2xhdGVQcm92aWRlci50cmFuc2xhdGlvbnMoXCJmclwiLCB7XHJcbiAgXCJTRUxFQ1RfTE9BRFwiOiBcImZyX1NlbGVjdCBhIGRhdGEgZmlsZSB0byBsb2FkXCIsXHJcbiAgXCJNU0dfU1VDQ0VTU19MT0FEXCI6IFwiZnJfVGhlIGZpbGUgd2FzIGxvYWRlZCBzdWNjZXNzZnVsbHlcIixcclxuICBcIk1TR19FUlJfSlNPTlBBUlNFXCI6IFwiZnJfRXJyb3I6IHRoZXJlIHdhcyBhbiBlcnJvciBwYXJzaW5nIHRoZSB3b3JraW5nIGZpbGUuXCIsXHJcbiAgXCJNU0dfRVJSX1hNTFBBUlNFXCI6IFwiZnJfRXJyb3I6IHRoZXJlIHdhcyBhbiBlcnJvciBwYXJzaW5nIHRoZSBkcmFmdCBYTUwgZmlsZS5cIixcclxuICBcIk1TR19FUlJfRklMRV9MT0FEXCI6IFwiZnJfRXJyb3I6IHRoZXJlIHdhcyBhIHByb2JsZW0gbG9hZGluZyB0aGUgZmlsZS5cIixcclxuICBcIk1TR19FUlJfRklMRV9UWVBFXCI6IFwiZnJfRXJyb3I6IEFuIGludmFsaWQgZmlsZSB0eXBlIHdhcyBzZWxlY3RlZC5cIixcclxuICBcIk1TR19FUlJfRk9STV9UWVBFXCI6IFwiZnJfRXJyb3I6IHRoZSB3cm9uZyBmb3JtIHR5cGUgd2FzIHNlbGVjdGVkIGZvciB0aGlzIGZvcm0uXCIsXHJcbiAgXCJNU0dfRVJSX0NIRUNLU1VNX0ZBSUxcIjogXCJmcl9FcnJvcjogdGhlIGNoZWNrc3VtIGluIHRoZSBmaWxlIGRvZXMgbm90IG1hdGNoIHRoZSBjYWxjdWxhdGVkIGNoZWNrc3VtXCJcclxufSk7XG5cbiR0cmFuc2xhdGVQcm92aWRlci50cmFuc2xhdGlvbnMoXCJlblwiLCB7XHJcbiAgXCJZXCI6IFwiWWVzXCIsXHJcbiAgXCJOXCI6IFwiTm9cIixcclxuICBcIkRFTEVURVJPV1wiOiBcIkRlbGV0ZSBSb3dcIixcclxuICBcIlNFTEVDVEVEUk9XXCI6IFwiU2VsZWN0ZWQgUm93XCIsXHJcbiAgXCJSRVFVSVJFRFwiOiBcIihyZXF1aXJlZClcIixcclxuICBcIlJPTEVTX1NFTEVDVFwiOiBcIlNlbGVjdCBvbmUgb3IgbW9yZSByb2xlcyBmb3IgdGhpcyByZWNvcmRcIixcclxuICBcIk5FV1wiOiBcIk5ld1wiLFxyXG4gIFwiQU1FTkRcIjogXCJBbWVuZFwiLFxyXG4gIFwiQVBQUk9WRURcIjogXCJBcHByb3ZlZFwiLFxyXG4gIFwiQ0xJQ0tfVE9HR0xFXCI6IFwiQ2xpY2sgdG8gdG9nZ2xlIHRoZSBjb2xsYXBzZSBvciBleHBhbmQgZGV0YWlscyBmb3IgdGhpcyBhZGRyZXNzLlwiLFxyXG4gIFwiQU1FTkRfUkVDT1JEXCI6IFwiQW1lbmQgUmVjb3JkXCIsXHJcbiAgXCJlblwiOiBcIkVuZ2xpc2hcIixcclxuICBcImZyXCI6IFwiRnJlbmNoXCIsXHJcbiAgXCJESVNDQVJEX0NIQU5HRVNcIjogXCJEaXNjYXJkIENoYW5nZXNcIixcclxuICBcIlJFUF9BTFRcIjogXCJBbHRlcm5hdGUgUkVQIGNvbnRhY3RcIixcclxuICBcIlJFUF9QUklNXCI6IFwiUHJpbWFyeSBSRVAgY29udGFjdFwiLFxyXG4gIFwiTUFJTElOR1wiOiBcIlJlZ3VsYXRvcnkgTWFpbGluZyAvIEFubnVhbCBDb250YWN0XCIsXHJcbiAgXCJCSUxMSU5HXCI6IFwiQmlsbGluZyBBZGRyZXNzXCIsXHJcbiAgXCJNQU5VRkFDVFwiOiBcIk1hbnVmYWN0dXJlciAvIFNwb25zb3IgTWFpbGluZyBBZGRyZXNzXCIsXHJcbiAgXCJJTVBPUlRFUlwiOiBcIkNhbmFkaWFuIEltcG9ydGVyIE1haWxpbmcgQWRkcmVzc1wiLFxyXG4gIFwiQVBQUk9WRV9GSU5BTFwiOiBcIkFwcHJvdmUgRmluYWwgWE1MXCIsXHJcbiAgXCJTQVZFX0RSQUZUXCI6IFwiU2F2ZSBEcmFmdCBmb3IgRmlsaW5nXCIsXHJcbiAgXCJQUklNQVJZXCI6IFwiUHJpbWFyeVwiLFxyXG4gIFwiU0VDT05EQVJZXCI6IFwiQWx0ZXJuYXRlXCIsXHJcbiAgXCJUT0dHTEVfRVhQQU5EXCI6IFwiQ2xpY2sgdG8gdG9nZ2xlIGNvbGxhcHNlIG9yIGV4cGFuZCBkZXRhaWxzIG9mIHJvd1wiLFxyXG4gIFwiU0FWRV9XT1JLXCI6IFwiU2F2ZSBXb3JraW5nIENvcHlcIixcclxuICBcIkNPTlRST0xfTlVNQkVSXCI6IFwiQ29udHJvbCBOdW1iZXJcIixcclxuICBcIlJFUF9DT05UQUNUX0lORk9cIjogXCJSRVAgQ29udGFjdCBJbmZvcm1hdGlvblwiLFxyXG4gIFwiU0FWRV9DT05UQUNUXCI6XCJTYXZlIENvbnRhY3RcIixcclxuICBcIkRFTEVURV9DT05UQUNUXCI6XCJEZWxldGUgQ29udGFjdFwiLFxyXG4gIFwiQ09NUEFOWV9JRFwiOiBcIkNvbXBhbnkgSWRcIixcclxuICBcIkRPU1NJRVJfSURcIjogXCJEb3NzaWVyIElkXCIsXHJcbiAgXCJFUlJPUlNcIjpcIkVycm9yc1wiLFxyXG4gIFwiVU5LTk9XTlwiOiBcIlVua25vd25cIixcclxuICBcIkJJT0xPR0lDXCI6IFwiQmlvbG9naWNcIixcclxuICBcIlBIQVJNQUNFVVRJQ0FMXCI6IFwiUGhhcm1hY2V1dGljYWxcIixcclxuICBcIkhFTFBfRklMRV9MT0FEXCI6IFwiRmlsZSBMb2FkIEluc3RydWN0aW9uc1wiLFxyXG4gIFwiSEVMUF9BQ1RJVklUWV9NQUlOXCI6IFwiQWN0aXZpdHkgSW5zdHJ1Y3Rpb25zXCIsXHJcbiAgXCJIRUxQX0FDVElWSVRZX1JFUFwiOiBcIlJFUCBDb250YWN0IEluc3RydWN0aW9uc1wiLFxyXG4gIFwiQ0FMRU5EQVJcIjogXCJQaWNrIGRhdGUgZnJvbSBjYWxlbmRhclwiLFxyXG4gIFwiSElERV9DQUxFTkRBUlwiOiBcIkhpZGUgQ2FsZW5kYXIgKGVzY2FwZSBrZXkpXCIsXHJcbiAgXCJPVEhFUlwiOiBcIk90aGVyXCIsXHJcbiAgXCJIRUxQX1JFUF9DT05UQUNUXCI6IFwiUkVQIENvbnRhY3QgSW5zdHJ1Y3Rpb25zXCIsXHJcbiAgXCJPVEhFUl9VTklUU1wiOiBcIlVuaXRzIG90aGVyIGRldGFpbHNcIixcclxuICBcIkNPTVBBTllfTk9BQkJSRVZcIjpcIkNvbXBhbnkgTmFtZSAoRnVsbCBsZWdhbCBuYW1lIC0gbm8gYWJicmV2aWF0aW9ucylcIlxyXG59KTtcblxuJHRyYW5zbGF0ZVByb3ZpZGVyLnRyYW5zbGF0aW9ucyhcImZyXCIsIHtcclxuICBcIllcIjogXCJPdWlcIixcclxuICBcIk5cIjogXCJOb25cIixcclxuICBcIkRFTEVURVJPV1wiOiBcImZyX0RlbGV0ZSBSb3dcIixcclxuICBcIlNFTEVDVEVEUk9XXCI6IFwiU2VsZWN0ZWQgUm93XCIsXHJcbiAgXCJSRVFVSVJFRFwiOiBcIihyZXF1aXMpXCIsXHJcbiAgXCJST0xFU19TRUxFQ1RcIjogXCJmcl9TZWxlY3Qgb25lIG9yIG1vcmUgcm9sZXMgZm9yIHRoaXMgcmVjb3JkXCIsXHJcbiAgXCJORVdcIjogXCJmcl9OZXdcIixcclxuICBcIkFNRU5EXCI6IFwiZnJfQW1lbmRcIixcclxuICBcIkFQUFJPVkVEXCI6IFwiZnJfQXBwcm92ZWRcIixcclxuICBcIkNMSUNLX1RPR0dMRVwiOiBcImZyX0NsaWNrIHRvIHRvZ2dsZSB0aGUgY29sbGFwc2Ugb3IgZXhwYW5kIGRldGFpbHMgZm9yIHRoaXMgYWRkcmVzcy5cIixcclxuICBcIkFNRU5EX1JFQ09SRFwiOiBcImZyX0FtZW5kIFJlY29yZFwiLFxyXG4gIFwiZW5cIjogXCJBbmdsYWlzXCIsXHJcbiAgXCJmclwiOiBcIkZyYW7Dp2Fpc1wiLFxyXG4gIFwiRElTQ0FSRF9DSEFOR0VTXCI6IFwiZnJfRGlzY2FyZCBDaGFuZ2VzXCIsXHJcbiAgXCJSRVBfQUxUXCI6IFwiZnJfQWx0ZXJuYXRlIFJFUCBjb250YWN0XCIsXHJcbiAgXCJSRVBfUFJJTVwiOiBcImZyX1ByaW1hcnkgUkVQIGNvbnRhY3RcIixcclxuICBcIk1BSUxJTkdcIjogXCJDb250YWN0IHBvdXIgbGUgY291cnJpZXIgcsOpZ2xlbWVudGFpcmVcIixcclxuICBcIkJJTExJTkdcIjogXCJmcl9CaWxsaW5nXCIsXHJcbiAgXCJNQU5VRkFDVFwiOiBcImZyX01hbnVmYWN0dXJlclwiLFxyXG4gIFwiSU1QT1JURVJcIjogXCJJbXBvcnRhdGV1ciBjYW5hZGllblwiLFxyXG4gIFwiQVBQUk9WRV9GSU5BTFwiOiBcImZyX0FwcHJvdmUgRmluYWwgWE1MXCIsXHJcbiAgXCJQUklNQVJZXCI6IFwiZnJfUHJpbWFyeVwiLFxyXG4gIFwiU0VDT05EQVJZXCI6IFwiZnJfQWx0ZXJuYXRlXCIsXHJcbiAgXCJUT0dHTEVfRVhQQU5EXCI6IFwiZnJfQ2xpY2sgdG8gdG9nZ2xlIGNvbGxhcHNlIG9yIGV4cGFuZCBkZXRhaWxzIG9mIHJvd1wiLFxyXG4gIFwiU0FWRV9EUkFGVFwiOiBcImZyX1NhdmUgRHJhZnQgZm9yIGZpbGluZ1wiLFxyXG4gIFwiQ09OVFJPTF9OVU1CRVJcIjogXCJmcl9Db250cm9sIE51bWJlclwiLFxyXG4gIFwiUkVQX0NPTlRBQ1RfSU5GT1wiOiBcImZyX01haW4gQ29udGFjdCBJbmZvcm1hdGlvblwiLFxyXG4gIFwiU0FWRV9DT05UQUNUXCI6IFwiZnJfU2F2ZSBDb250YWN0XCIsXHJcbiAgXCJERUxFVEVfQ09OVEFDVFwiOiBcImZyX0RlbGV0ZSBDb250YWN0XCIsXHJcbiAgXCJDT01QQU5ZX0lEXCI6IFwiZnJfQ29tcGFueSBJZFwiLFxyXG4gIFwiRE9TU0lFUl9JRFwiOiBcImZyX0Rvc3NpZXIgSWRcIixcclxuICBcIkVSUk9SU1wiOiBcIkVycmV1cnNcIixcclxuICBcIlVOS05PV05cIjogXCJJbmNvbm51XCIsXHJcbiAgXCJCSU9MT0dJQ1wiOiBcImZyX0Jpb2xvZ2ljXCIsXHJcbiAgXCJQSEFSTUFDRVVUSUNBTFwiOiBcImZyX1BoYXJtYWNldXRpY2FsXCIsXHJcbiAgXCJIRUxQX0ZJTEVfTE9BRFwiOiBcImZyX0ZpbGUgTG9hZCBJbnN0cnVjdGlvbnNcIixcclxuICBcIkhFTFBfQUNUSVZJVFlfTUFJTlwiOiBcImZyX0FjdGl2aXR5IEluc3RydWN0aW9uc1wiLFxyXG4gIFwiSEVMUF9BQ1RJVklUWV9SRVBcIjogXCJmcl9SRVAgQ29udGFjdCBJbnN0cnVjdGlvbnNcIixcclxuICBcIkNBTEVOREFSXCI6IFwiZnJfUGljayBkYXRlIGZyb20gY2FsZW5kYXJcIixcclxuICBcIkhJREVfQ0FMRU5EQVJcIjogXCJmcl9IaWRlIENhbGVuZGFyIChlc2NhcGUga2V5KVwiLFxyXG4gIFwiT1RIRVJcIjogXCJBdXRyZVwiLFxyXG4gIFwiSEVMUF9SRVBfQ09OVEFDVFwiOiBcImZyX1JFUCBDb250YWN0IEluc3RydWN0aW9uc1wiLFxyXG4gIFwiT1RIRVJfVU5JVFNcIjogXCJmcl9Vbml0cyBvdGhlciBkZXRhaWxzXCIsXHJcbiAgXCJDT01QQU5ZX05PQUJCUkVWXCI6XCJmcl9Db21wYW55IE5hbWUgKEZ1bGwgbGVnYWwgbmFtZSAtIG5vIGFiYnJldmlhdGlvbnMpXCJcclxufSk7XG5cbiR0cmFuc2xhdGVQcm92aWRlci50cmFuc2xhdGlvbnMoXCJlblwiLCB7XHJcbiAgXCJNU0dfRVJSX01BTkRcIjogXCJUaGlzIGZpZWxkIGlzIHJlcXVpcmVkXCIsXHJcbiAgXCJNU0dfRVJSX0VNQUlMX0ZPUk1BVFwiOiBcIlBsZWFzZSBlbnRlciBhIHZhbGlkIGVtYWlsIGFkZHJlc3MuXCIsXHJcbiAgXCJNU0dfRVJSX1JPTEVcIjogXCJQbGVhc2Ugc2VsZWN0IGF0IGxlYXN0IG9uZSByb2xlXCIsXHJcbiAgXCJNU0dfRVJSX0NPTlRBQ1RfTlVNXCI6IFwiQWxsIHRoZSByb2xlcyBoYXZlIHRvIGJlIHVzZWQgZm9yIHRoZSBjb250YWN0c1wiLFxyXG4gIFwiTVNHX0VSUl9QSE9ORV9GT1JNQVRcIjogXCJQbGVhc2Ugc3BlY2lmeSBhIHZhbGlkIHBob25lIG51bWJlclwiLFxyXG4gIFwiTVNHX0VSUl9BTExST0xFXCI6IFwiVGhlIHJvbGVzIG9mIG1hbnVmYWN0dXJlciwgbWFpbGluZywgYmlsbGluZywgYW5kIHByaW1hcnkgUkVQIGNvbnRhY3QgIGhhdmUgbm90IGFsbCBiZWVuIHNlbGVjdGVkIGFtb25nIHRoZSBsaXN0IG9mIGNvbnRhY3RzXCIsXHJcbiAgXCJNU0dfRVJSX0FERFJFU1NTUk9MRVwiOiBcIlRoZSByb2xlcyBvZiBtYW51ZmFjdHVyZXIsIG1haWxpbmcsIGFuZCBiaWxsaW5nIGhhdmUgbm90IGFsbCBiZWVuIHNlbGVjdGVkIGFtb25nIHRoZSBsaXN0IG9mIGFkZHJlc3Nlc1wiLFxyXG4gIFwiTVNHX0VSUl9QT1NUQUxcIjogXCJQbGVhc2Ugc3BlY2lmeSBhIHZhbGlkIHBvc3RhbCBjb2RlLlwiLFxyXG4gIFwiTVNHX0VSUl9aSVBcIjogXCJQbGVhc2Ugc3BlY2lmeSBhIHZhbGlkIHppcCBjb2RlLlwiLFxyXG4gIFwiTVNHX0VSUl9EQVRFX0ZPUk1BVFwiOiBcIlRoZSBkYXRlIGZvcm1hdCBpcyBpbmNvcnJlY3QuXCIsXHJcbiAgXCJNQUlMSU5HX1NFTFwiOiBcIk1haWxpbmcgUm9sZSBhbHJlYWR5IFNlbGVjdGVkXCIsXHJcbiAgXCJNQU5VRkFDVF9TRUxcIjogXCJNYW51ZmFjdHVyZXIgUm9sZSBhbHJlYWR5IFNlbGVjdGVkXCIsXHJcbiAgXCJNQUlMX1NFTFwiOiBcIk1haWxpbmcgUm9sZSBhbHJlYWR5IFNlbGVjdGVkXCIsXHJcbiAgXCJCSUxMSU5HX1NFTFwiOiBcIkJpbGxpbmcgUm9sZSBhbHJlYWR5IFNlbGVjdGVkXCIsXHJcbiAgXCJJTVBPUlRFUl9TRUxcIjogXCJJbXBvcnRlciBSb2xlIGFscmVhZHkgU2VsZWN0ZWRcIixcclxuICBcIlJFUFBSSU1fU0VMXCI6IFwiUkVQIFByaW1hcnkgUm9sZSBhbHJlYWR5IFNlbGVjdGVkXCIsXHJcbiAgXCJSRVBBTFRfU0VMXCI6IFwiUkVQIEFsdGVybmF0ZSBSb2xlIGFscmVhZHkgU2VsZWN0ZWRcIixcclxuICBcIk1TR19MRU5HVEhfNlwiOiBcIlBsZWFzZSBlbnRlciA2IGNoYXJhY3RlcnMuXCIsXHJcbiAgXCJNU0dfTEVOR1RIXzZOVU1cIjogXCJQbGVhc2UgZW50ZXIgNiBkaWdpdHMuXCIsXHJcbiAgXCJNU0dfTEVOR1RIXzhOVU1cIjogXCJQbGVhc2UgZW50ZXIgOCBkaWdpdHMuXCIsXHJcbiAgXCJNU0dfTEVOR1RIXzdcIjogXCJQbGVhc2UgZW50ZXIgNyBjaGFyYWN0ZXJzLlwiLFxyXG4gIFwiTVNHX0xFTkdUSF83TlVNXCI6IFwiUGxlYXNlIGVudGVyIDcgZGlnaXRzLlwiLFxyXG4gIFwiTVNHX0VSUl9PTkVfUkVQXCI6IFwiQXQgbGVhc3Qgb25lIGNvbnRhY3QgaXMgcmVxdWlyZWQuXCIsXHJcbiAgXCJNU0dfRVJSX09ORV9MSUZFX1JFQ1wiOiBcIk9uZSBsaWZlY3ljbGUgcmVjb3JkIGlzIHJlcXVpcmVkLlwiLFxyXG4gIFwiTVNHX0VSUl9SQVRJT05BTEVfU0VMXCI6IFwiUGxlYXNlIHNlbGVjdCBhdCBsZWFzdCBvbmUgcmF0aW9uYWxlLlwiLFxyXG4gIFwiTVNHX0VSUl9OT1RJRl9TRUxcIjogXCJQbGVhc2Ugc2VsZWN0IGF0IGxlYXN0IG9uZSBub3RpZmlhYmxlIGNoYW5nZS5cIlxyXG59KTtcblxuJHRyYW5zbGF0ZVByb3ZpZGVyLnRyYW5zbGF0aW9ucyhcImZyXCIsIHtcclxuICBcIk1TR19FUlJfTUFORFwiOiBcIkNlIGNoYW1wIGVzdCBvYmxpZ2F0b2lyZS5cIixcclxuICBcIk1TR19FUlJfRU1BSUxfRk9STUFUXCI6IFwiVmV1aWxsZXogZm91cm5pciB1bmUgYWRyZXNzZSDDqWxlY3Ryb25pcXVlIHZhbGlkZS5cIixcclxuICBcIk1TR19FUlJfQ09OVEFDVF9OVU1cIjogXCJmcl9BbGwgdGhlIHJvbGVzIGhhdmUgdG8gYmUgdXNlZCBmb3IgdGhlIGNvbXBhbnkgY29udGFjdHNcIixcclxuICBcIk1TR19FUlJfUEhPTkVfRk9STUFUXCI6IFwiZnJfUGxlYXNlIHNwZWNpZnkgYSB2YWxpZCBwaG9uZSBudW1iZXJcIixcclxuICBcIk1TR19FUlJfQUxMUk9MRVwiOiBcImZyX0Fjcm9zcyB0aGUgY29udGFjdCByZWNvcmRzLCB0aGUgcm9sZXMgb2YgbWFudWZhY3R1cmVyLCBtYWlsaW5nLCBiaWxsaW5nLCBhbmQgUkVQIHByaW1hcnkgY29udGFjdCBtdXN0IGJlIHNlbGVjdGVkXCIsXHJcbiAgXCJNU0dfRVJSX0FERFJFU1NTUk9MRVwiOiBcImZyX1RoZSByb2xlcyBvZiBtYW51ZmFjdHVyZXIsIG1haWxpbmcsIGFuZCBiaWxsaW5nIGhhdmUgbm90IGFsbCBiZWVuIHNlbGVjdGVkIGFtb25nIHRoZSBsaXN0IG9mIGFkZHJlc3Nlc1wiLFxyXG4gIFwiTVNHX0VSUl9QT1NUQUxcIjogXCJmcl9QbGVhc2Ugc3BlY2lmeSBhIHZhbGlkIHBvc3RhbCBjb2RlLlwiLFxyXG4gIFwiTVNHX0VSUl9aSVBcIjogXCJmcl9QbGVhc2Ugc3BlY2lmeSBhIHZhbGlkIHppcCBjb2RlLlwiLFxyXG4gIFwiTVNHX0VSUl9EQVRFX0ZPUk1BVFwiOiBcImZyX1RoZSBkYXRlIGZvcm1hdCBpcyBpbmNvcnJlY3QuXCIsXHJcbiAgXCJNQU5VRkFDVF9TRUxcIjogXCJmcl9NYW51ZmFjdHVyZXIgUm9sZSBhbHJlYWR5IFNlbGVjdGVkXCIsXHJcbiAgXCJNQUlMX1NFTFwiOiBcImZyX01haWxpbmcgUm9sZSBhbHJlYWR5IFNlbGVjdGVkXCIsXHJcbiAgXCJCSUxMSU5HX1NFTFwiOiBcImZyX0JpbGxpbmcgUm9sZSBhbHJlYWR5IFNlbGVjdGVkXCIsXHJcbiAgXCJJTVBPUlRFUl9TRUxcIjogXCJmcl9JbXBvcnRlciBSb2xlIGFscmVhZHkgU2VsZWN0ZWRcIixcclxuICBcIlJFUFBSSU1fU0VMXCI6IFwiZnJfUkVQIFByaW1hcnkgUm9sZSBhbHJlYWR5IFNlbGVjdGVkXCIsXHJcbiAgXCJSRVBBTFRfU0VMXCI6IFwiZnJfUkVQIEFsdGVybmF0ZSBSb2xlIGFscmVhZHkgU2VsZWN0ZWRcIixcclxuICBcIk1TR19MRU5HVEhfNlwiOiBcImZyX1BsZWFzZSBlbnRlciA2IGNoYXJhY3RlcnMuXCIsXHJcbiAgXCJNU0dfTEVOR1RIXzZOVU1cIjogXCJmcl9QbGVhc2UgZW50ZXIgNiBkaWdpdHMuXCIsXHJcbiAgXCJNU0dfTEVOR1RIXzhOVU1cIjogXCJmcl9QbGVhc2UgZW50ZXIgOCBkaWdpdHMuXCIsXHJcbiAgXCJNU0dfTEVOR1RIXzdcIjogXCJmcl9QbGVhc2UgZW50ZXIgNyBjaGFyYWN0ZXJzLlwiLFxyXG4gIFwiTVNHX0xFTkdUSF83TlVNXCI6IFwiZnJfUGxlYXNlIGVudGVyIDcgZGlnaXRzLlwiLFxyXG4gIFwiTVNHX0VSUl9PTkVfUkVQXCI6IFwiZnJfQXQgbGVhc3Qgb25lIGNvbnRhY3QgaXMgcmVxdWlyZWQuXCIsXHJcbiAgXCJNU0dfRVJSX09ORV9MSUZFX1JFQ1wiOiBcImZyX09uZSBsaWZlY3ljbGUgcmVjb3JkIGlzIHJlcXVpcmVkLlwiLFxyXG4gIFwiTVNHX0VSUl9SQVRJT05BTEVfU0VMXCI6IFwiZnJfUGxlYXNlIHNlbGVjdCBhdCBsZWFzdCBvbmUgcmF0aW9uYWxlLlwiLFxyXG4gIFwiTVNHX0VSUl9OT1RJRl9TRUxcIjogXCJmcl9QbGVhc2Ugc2VsZWN0IGF0IGxlYXN0IG9uZSBub3RpZmlhYmxlIGNoYW5nZS5cIlxyXG59XHJcbik7XG59XSk7XG4iLCIvKipcclxuICogQ3JlYXRlZCBieSBka2lsdHkgb24gOS8xLzIwMTYuXHJcbiAqL1xyXG5cclxuXHJcbihmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ251bWJlckZvcm1hdCcsIFtdKTtcclxuXHJcbn0pKCk7XHJcblxyXG4oZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKCdudW1iZXJGb3JtYXQnKVxyXG4gICAgICAgIC5kaXJlY3RpdmUoJ29ubHlEaWdpdHMnLCBkaWdpdHNDdHJsKTtcclxuXHJcbiAgICBmdW5jdGlvbiBkaWdpdHNDdHJsKCkge1xyXG4gICAgICAgIHZhciBkaXJlY3RpdmUgPSB7XHJcblxyXG4gICAgICAgICAgICBsaW5rOiBsaW5rLFxyXG4gICAgICAgICAgICByZXN0cmljdDogJ0EnLFxyXG4gICAgICAgICAgICByZXF1aXJlOiAnP25nTW9kZWwnXHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4gZGlyZWN0aXZlO1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBsaW5rKHNjb3BlLCBlbGVtZW50LCBhdHRycywgbW9kZWxDdHJsKSB7XHJcbiAgICAgICAgICAgIG1vZGVsQ3RybC4kcGFyc2Vycy5wdXNoKGZ1bmN0aW9uIChpbnB1dFZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaW5wdXRWYWx1ZSA9PSB1bmRlZmluZWQpIHJldHVybiAnJztcclxuICAgICAgICAgICAgICAgIHZhciBpc051bWJlciA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgdmFyIG1heCA9IC0xO1xyXG4gICAgICAgICAgICAgICAgdmFyIHRlbXBWYWwgPSBcIlwiICsgaW5wdXRWYWx1ZTtcclxuICAgICAgICAgICAgICAgIGlmIChhdHRyc1sndHlwZSddICYmIGF0dHJzWyd0eXBlJ10gPT09ICdudW1iZXInKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaXNOdW1iZXIgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmIChhdHRyc1snb25seU1heCddKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbWF4ID0gcGFyc2VJbnQoYXR0cnNbJ29ubHlNYXgnXSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB2YXIgcmVnZXhJbnROZWcgPSAvW14wLTktXS9nO1xyXG4gICAgICAgICAgICAgICAgdmFyIGludGVnZXJSZWcgPSAvW14wLTldL2c7IC8vZGVmYXVsdFxyXG4gICAgICAgICAgICAgICAgdmFyIHJlZ2V4VmFsdWUgPSBpbnRlZ2VyUmVnO1xyXG4gICAgICAgICAgICAgICAgaWYgKGF0dHJzWydvbmx5RGlnaXRzJ10gPT0gJ2ludE5lZycpIHtcclxuICAgICAgICAgICAgICAgICAgICByZWdleFZhbHVlID0gcmVnZXhJbnROZWc7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlZ2V4VmFsdWUgPSBpbnRlZ2VyUmVnXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB2YXIgdHJhbnNmb3JtZWRJbnB1dCA9IHRlbXBWYWwucmVwbGFjZShyZWdleFZhbHVlLCAnJyk7XHJcbiAgICAgICAgICAgICAgICBpZiAobWF4ID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybWVkSW5wdXQgPSB0cmFuc2Zvcm1lZElucHV0LnN1YnN0cmluZygwLCBtYXgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHRyYW5zZm9ybWVkSW5wdXQgIT09IHRlbXBWYWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaXNOdW1iZXIgJiYgdHJhbnNmb3JtZWRJbnB1dCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2Zvcm1lZElucHV0ID0gcGFyc2VGbG9hdCh0cmFuc2Zvcm1lZElucHV0KVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBtb2RlbEN0cmwuJHNldFZpZXdWYWx1ZSh0cmFuc2Zvcm1lZElucHV0KTtcclxuICAgICAgICAgICAgICAgICAgICBtb2RlbEN0cmwuJHJlbmRlcigpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRyYW5zZm9ybWVkSW5wdXQ7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbn0pKCk7XHJcblxyXG5cclxuXHJcbiIsIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IGRraWx0eSBvbiAwNS8wMS8yMDE3LlxyXG4gKiBMaXN0cyB0aGF0IGFyZSBjb21tb24gYW5kIHN0YXRpYywgaS5lLiBub3QgbG9hZGVkIGZyb20gYSBkeW5hbWljIHNvdXJjZVxyXG4gKi9cclxuXHJcblxyXG4oZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKCdjb21tb25TdGF0aWNMaXN0cycsIFsnaHBmYkNvbnN0YW50cyddKTtcclxuXHJcbn0pKCk7XHJcblxyXG4oZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ2NvbW1vblN0YXRpY0xpc3RzJylcclxuICAgICAgICAuZmFjdG9yeSgnQ29tbW9uTGlzdHMnLCBnZXRTZXJ2aWNlKTtcclxuXHJcbiAgICAvKiBAbmdJbmplY3QgKi9cclxuICAgIGdldFNlcnZpY2UuJGluamVjdCA9IFsnWUVTJywgJ05PJ107XHJcbiAgICBmdW5jdGlvbiBnZXRTZXJ2aWNlKFlFUywgTk8pIHtcclxuXHJcbiAgICAgICAgdmFyIHNlcnZpY2UgPSB7XHJcbiAgICAgICAgICAgIGdldFllc05vTGlzdDogX2dldFllc05vQXJyYXksXHJcbiAgICAgICAgICAgIGdldFllc1ZhbHVlOiBfZ2V0WWVzLFxyXG4gICAgICAgICAgICBnZXROb1ZhbHVlOiBfZ2V0Tm8oKVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIHNlcnZpY2U7XHJcblxyXG4gICAgICAgIC8vLy8vLy8vLy8vLy8vLy9cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gX2dldFllcygpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFlFUztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIF9nZXRObygpIHtcclxuICAgICAgICAgICAgcmV0dXJuIE5PO1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIF9nZXRZZXNOb0FycmF5KCkge1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgICAgIFtcclxuICAgICAgICAgICAgICAgICAgICBZRVMsXHJcbiAgICAgICAgICAgICAgICAgICAgTk9cclxuICAgICAgICAgICAgICAgIF1cclxuICAgICAgICAgICAgKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICB9XHJcblxyXG59KSgpO1xyXG5cclxuXHJcbiIsIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IGRraWx0eSBvbiA2LzQvMjAxNi5cclxuICovXHJcblxyXG4vKipcclxuICogQG5nZG9jIG1vZHVsZSBkZWNsYXJhdGlvbiBmb3IgZGF0YWxpc3RzXHJcbiAqL1xyXG4oZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKCdkYXRhTGlzdHMnLCBbJ2hwZmJDb25zdGFudHMnXSk7XHJcblxyXG59KSgpO1xyXG5cclxuLyoqXHJcbiAqIGdldENvdW50cnlBbmRQcm92aW5jZXMgc2VydmljZXNcclxuICogUmV0dXJucyBDYW5hZGEgb3IgVVMgY29uZGVzLCBjYW5hZGEgcHJvdmluY2VzLCB1cyBzdGF0ZXNcclxuICovXHJcbihmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ2RhdGFMaXN0cycpXHJcbiAgICAgICAgLmZhY3RvcnkoJ2dldENvdW50cnlBbmRQcm92aW5jZXMnLCBnZXRTZXJ2aWNlKTtcclxuXHJcbiAgICAvKiBAbmdJbmplY3QgKi9cclxuICAgIGdldFNlcnZpY2UuaW5qZWN0ID0gWydVTktOT1dOJ107XHJcbiAgICBmdW5jdGlvbiBnZXRTZXJ2aWNlKFVOS05PV04pIHtcclxuICAgICAgICB2YXIgdm0gPSB0aGlzO1xyXG4gICAgICAgIHZtLmNvdW50cnlMaXN0ID0gW107XHJcbiAgICAgICAgdmFyIHNlcnZpY2UgPSB7XHJcbiAgICAgICAgICAgIGdldENvdW50cmllczogZ2V0Q291bnRyeVZhbHVlc0FycmF5LFxyXG4gICAgICAgICAgICBnZXRQcm92aW5jZXM6IGdldFByb3ZpbmNlVmFsdWVzQXJyYXksXHJcbiAgICAgICAgICAgIGdldFVTU3RhdGVzOiBnZXRVU1N0YXRlc1ZhbHVlQXJyYXksXHJcbiAgICAgICAgICAgIGNyZWF0ZUNvdW50cnlMaXN0OiBfY3JlYXRlQ291bnRyeUFycmF5LFxyXG4gICAgICAgICAgICBnZXRVbmtub3duQ291bnRyeVJlY29yZDogX2dldFVua25vd25Db3VudHJ5UmVjXHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4gc2VydmljZTtcclxuXHJcbiAgICAgICAgLy8vLy8vLy8vLy8vLy8vL1xyXG5cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gX2NyZWF0ZUNvdW50cnlBcnJheSh0cmFuc2xhdGVKc29uKSB7XHJcbiAgICAgICAgICAgIHZtLmNvdW50cnlMaXN0ID0gdHJhbnNsYXRlSnNvbjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIF9nZXRVbmtub3duQ291bnRyeVJlYygpIHtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIFwiaWRcIjogVU5LTk9XTixcclxuICAgICAgICAgICAgICAgIFwiZW5cIjogXCJVbmtub3duXCIsXHJcbiAgICAgICAgICAgICAgICBcImZyXCI6IFwiSW5jb25udVwiXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy90b2RvIHdoeSBpcyB0aGlzIGxpc3RlZCB0d2ljZT9cclxuICAgICAgICBmdW5jdGlvbiBnZXRDb3VudHJ5VmFsdWVzQXJyYXkoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB2bS5jb3VudHJ5TGlzdDtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICBmdW5jdGlvbiBnZXRQcm92aW5jZVZhbHVlc0FycmF5KCkge1xyXG4gICAgICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICAgICAgW1xyXG4gICAgICAgICAgICAgICAgICAgICdBQicsXHJcbiAgICAgICAgICAgICAgICAgICAgJ0JDJyxcclxuICAgICAgICAgICAgICAgICAgICAnTUInLFxyXG4gICAgICAgICAgICAgICAgICAgICdOQicsXHJcbiAgICAgICAgICAgICAgICAgICAgJ05MJyxcclxuICAgICAgICAgICAgICAgICAgICAnTlQnLFxyXG4gICAgICAgICAgICAgICAgICAgICdOUycsXHJcbiAgICAgICAgICAgICAgICAgICAgJ05VJyxcclxuICAgICAgICAgICAgICAgICAgICAnT04nLFxyXG4gICAgICAgICAgICAgICAgICAgICdQRScsXHJcbiAgICAgICAgICAgICAgICAgICAgJ1FDJyxcclxuICAgICAgICAgICAgICAgICAgICAnU0snLFxyXG4gICAgICAgICAgICAgICAgICAgICdZVCdcclxuICAgICAgICAgICAgICAgIF1cclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGdldFVTU3RhdGVzVmFsdWVBcnJheSgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgICAgIFtcclxuICAgICAgICAgICAgICAgICAgICAnQUwnLFxyXG4gICAgICAgICAgICAgICAgICAgICdBSycsXHJcbiAgICAgICAgICAgICAgICAgICAgJ0FaJyxcclxuICAgICAgICAgICAgICAgICAgICAnQVInLFxyXG4gICAgICAgICAgICAgICAgICAgICdDQScsXHJcbiAgICAgICAgICAgICAgICAgICAgJ0NPJyxcclxuICAgICAgICAgICAgICAgICAgICAnQ1QnLFxyXG4gICAgICAgICAgICAgICAgICAgICdERScsXHJcbiAgICAgICAgICAgICAgICAgICAgJ0RDJyxcclxuICAgICAgICAgICAgICAgICAgICAnRkwnLFxyXG4gICAgICAgICAgICAgICAgICAgICdHQScsXHJcbiAgICAgICAgICAgICAgICAgICAgJ0hJJyxcclxuICAgICAgICAgICAgICAgICAgICAnSUQnLFxyXG4gICAgICAgICAgICAgICAgICAgICdJTCcsXHJcbiAgICAgICAgICAgICAgICAgICAgJ0lOJyxcclxuICAgICAgICAgICAgICAgICAgICAnSUEnLFxyXG4gICAgICAgICAgICAgICAgICAgICdLUycsXHJcbiAgICAgICAgICAgICAgICAgICAgJ0tZJyxcclxuICAgICAgICAgICAgICAgICAgICAnTEEnLFxyXG4gICAgICAgICAgICAgICAgICAgICdNRScsXHJcbiAgICAgICAgICAgICAgICAgICAgJ01EJyxcclxuICAgICAgICAgICAgICAgICAgICAnTUEnLFxyXG4gICAgICAgICAgICAgICAgICAgICdNSScsXHJcbiAgICAgICAgICAgICAgICAgICAgJ01OJyxcclxuICAgICAgICAgICAgICAgICAgICAnTVMnLFxyXG4gICAgICAgICAgICAgICAgICAgICdNTycsXHJcbiAgICAgICAgICAgICAgICAgICAgJ01UJyxcclxuICAgICAgICAgICAgICAgICAgICAnTkUnLFxyXG4gICAgICAgICAgICAgICAgICAgICdOVicsXHJcbiAgICAgICAgICAgICAgICAgICAgJ05IJyxcclxuICAgICAgICAgICAgICAgICAgICAnTkonLFxyXG4gICAgICAgICAgICAgICAgICAgICdOTScsXHJcbiAgICAgICAgICAgICAgICAgICAgJ05ZJyxcclxuICAgICAgICAgICAgICAgICAgICAnTkMnLFxyXG4gICAgICAgICAgICAgICAgICAgICdORCcsXHJcbiAgICAgICAgICAgICAgICAgICAgJ09IJyxcclxuICAgICAgICAgICAgICAgICAgICAnT0snLFxyXG4gICAgICAgICAgICAgICAgICAgICdPUicsXHJcbiAgICAgICAgICAgICAgICAgICAgJ1BBJyxcclxuICAgICAgICAgICAgICAgICAgICAnUkknLFxyXG4gICAgICAgICAgICAgICAgICAgICdTQycsXHJcbiAgICAgICAgICAgICAgICAgICAgJ1NEJyxcclxuICAgICAgICAgICAgICAgICAgICAnVE4nLFxyXG4gICAgICAgICAgICAgICAgICAgICdUWCcsXHJcbiAgICAgICAgICAgICAgICAgICAgJ1VUJyxcclxuICAgICAgICAgICAgICAgICAgICAnVlQnLFxyXG4gICAgICAgICAgICAgICAgICAgICdWQScsXHJcbiAgICAgICAgICAgICAgICAgICAgJ1dBJyxcclxuICAgICAgICAgICAgICAgICAgICAnV1YnLFxyXG4gICAgICAgICAgICAgICAgICAgICdXSScsXHJcbiAgICAgICAgICAgICAgICAgICAgJ1dZJ1xyXG4gICAgICAgICAgICAgICAgXSk7XHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICB9XHJcblxyXG59KSgpO1xyXG5cclxuKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgnZGF0YUxpc3RzJylcclxuICAgICAgICAuZmFjdG9yeSgnZ2V0Q29udGFjdExpc3RzJywgZ2V0U2FsU2VydmljZSk7IC8vdG9kbyByZW5hbWUgc2VydmljZVxyXG5cclxuICAgIC8qIEBuZ0luamVjdCAqL1xyXG4gICAgZ2V0U2FsU2VydmljZS4kaW5qZWN0ID0gWyckZmlsdGVyJywgJyRxJywgJyRodHRwJywgJyR0cmFuc2xhdGUnLCAnT1RIRVInLCAnRlJFTkNIJ107XHJcbiAgICBmdW5jdGlvbiBnZXRTYWxTZXJ2aWNlKCRmaWx0ZXIsICRxLCAkaHR0cCwkdHJhbnNsYXRlLCBPVEhFUiwgRlJFTkNIKSB7XHJcbiAgICAgICAgdmFyIHZtID0gdGhpcztcclxuICAgICAgICB2bS5pbnRlcm5hbENvbnRhY3RzID0gW107XHJcbiAgICAgICAgdmFyIHNlcnZpY2UgPSB7XHJcbiAgICAgICAgICAgIGdldFNhbHV0YXRpb25MaXN0OiBnZXRTYWxWYWx1ZXNBcnJheSxcclxuICAgICAgICAgICAgZ2V0TGFuZ3VhZ2VzOiBnZXRMYW5ndWFnZXNWYWx1ZXNBcnJheSwgLy9UT0RPIG1ha2UgY29uc3RhbnRzXHJcbiAgICAgICAgICAgIGNyZWF0ZUludGVybmFsQ29udGFjdHM6IF9jcmVhdGVJbnRlcm5hbENvbnRhY3RzLFxyXG4gICAgICAgICAgICBnZXRJbnRlcm5hbENvbnRhY3RzOiBfZ2V0SW50ZXJuYWxDb250YWN0c1xyXG5cclxuICAgICAgICB9O1xyXG4gICAgICAgIHJldHVybiBzZXJ2aWNlO1xyXG5cclxuICAgICAgICAvLy8vLy8vLy8vLy8vLy8vXHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGdldFNhbFZhbHVlc0FycmF5KCkge1xyXG4gICAgICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICAgICAgW1xyXG4gICAgICAgICAgICAgICAgICAgICdTQUxVVF9EUicsXHJcbiAgICAgICAgICAgICAgICAgICAgJ1NBTFVUX01SJyxcclxuICAgICAgICAgICAgICAgICAgICAnU0FMVVRfTVJTJyxcclxuICAgICAgICAgICAgICAgICAgICAnU0FMVVRfTVMnXHJcbiAgICAgICAgICAgICAgICBdKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGdldExhbmd1YWdlc1ZhbHVlc0FycmF5KCkge1xyXG4gICAgICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICAgICAgW1xyXG4gICAgICAgICAgICAgICAgICAgIFwiZW5cIixcclxuICAgICAgICAgICAgICAgICAgICBcImZyXCJcclxuICAgICAgICAgICAgICAgIF0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gX2NyZWF0ZUludGVybmFsQ29udGFjdHMoKSB7XHJcbiAgICAgICAgICAgIHZhciBkZWZlcnJlZCA9ICRxLmRlZmVyKCk7XHJcbiAgICAgICAgICAgIHZhciBjb250YWN0c1VybCA9IFwiZGF0YS9pbnRlcm5hbENvbnRhY3RzLmpzb25cIjtcclxuICAgICAgICAgICAgaWYgKCF2bS5pbnRlcm5hbENvbnRhY3RzIHx8IHZtLmludGVybmFsQ29udGFjdHMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAkaHR0cC5nZXQoY29udGFjdHNVcmwpXHJcbiAgICAgICAgICAgICAgICAgICAgLnN1Y2Nlc3MoZnVuY3Rpb24gKGRhdGEsIHN0YXR1cywgaGVhZGVycywgY29uZmlnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuZXdMaXN0ID0gX2NyZWF0ZVNvcnRlZEFycmF5KGRhdGEsICdlbicpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbGFuZyA9ICR0cmFuc2xhdGUucHJvcG9zZWRMYW5ndWFnZSgpIHx8ICR0cmFuc2xhdGUudXNlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vdGhpcyBpcyBhIGJpdCBvZiBhIGhhY2ssIGJ1dCBzYXZlcyB1bmVjZXNzYXJ5IHNwYWNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvdGhlclJlYyA9IHtcImlkXCI6IE9USEVSLCBcImVuXCI6IFwiT3RoZXJcIn07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsYW5nID09PSBGUkVOQ0gpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG90aGVyUmVjLmVuID0gXCJBdXRyZVwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld0xpc3QudW5zaGlmdChvdGhlclJlYyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZtLmludGVybmFsQ29udGFjdHMgPSBuZXdMaXN0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKG5ld0xpc3QpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgLmVycm9yKGZ1bmN0aW9uIChkYXRhLCBzdGF0dXMsIGhlYWRlcnMsIGNvbmZpZykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZWplY3Qoc3RhdHVzKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKHZtLmludGVybmFsQ29udGFjdHMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gX2dldEludGVybmFsQ29udGFjdHMoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gX2NyZWF0ZUludGVybmFsQ29udGFjdHMoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIF9jcmVhdGVTb3J0ZWRBcnJheShqc29uTGlzdCwgbGFuZykge1xyXG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gW107XHJcbiAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaCgkZmlsdGVyKCdvcmRlckJ5TG9jYWxlJykoanNvbkxpc3QsIGxhbmcpLCBmdW5jdGlvbiAoc29ydGVkT2JqZWN0KSB7XHJcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaChzb3J0ZWRPYmplY3QpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICB9XHJcblxyXG4gICAgfVxyXG5cclxuXHJcbn0pKCk7XHJcblxyXG5cclxuLyoqXHJcbiAqIENvbnRhY3Qgcm9sZSBsaXN0IHNlcnZpY2VcclxuICovXHJcbihmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ2RhdGFMaXN0cycpXHJcbiAgICAgICAgLmZhY3RvcnkoJ2dldFJvbGVMaXN0cycsIGdldFJvbGVzU2VydmljZSk7XHJcblxyXG4gICAgLyogQG5nSW5qZWN0ICovXHJcbiAgICBmdW5jdGlvbiBnZXRSb2xlc1NlcnZpY2UoKSB7XHJcbiAgICAgICAgdmFyIF9iaW9sb2dpYyA9ICdCSU9MT0dJQyc7XHJcbiAgICAgICAgdmFyIF9waGFybWEgPSAnUEhBUk1BQ0VVVElDQUwnO1xyXG4gICAgICAgIC8qJ0RSVUdfTUFTVEVSX0ZJTEUnLFxyXG4gICAgICAgICAnTUVESUNBTF9ERVZJQ0UnKi9cclxuICAgICAgICB2YXIgc2VydmljZSA9IHtcclxuICAgICAgICAgICAgZ2V0Q29udGFjdFJvbGVzOiBnZXRSb2xlVmFsdWVzQXJyYXksXHJcbiAgICAgICAgICAgIGdldEZvcm1UeXBlczogX2dldEZvcm1UeXBlcyxcclxuICAgICAgICAgICAgZ2V0QmlvbG9naWNUeXBlOiBfZ2V0QmlvbG9naWMsXHJcbiAgICAgICAgICAgIGdldFBoYXJtYVR5cGU6IF9nZXRQaGFybWFjZXV0aWNhbFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIHNlcnZpY2U7XHJcblxyXG4gICAgICAgIC8vLy8vLy8vLy8vLy8vLy9cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZ2V0Um9sZVZhbHVlc0FycmF5KCkge1xyXG4gICAgICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICAgICAgW1xyXG4gICAgICAgICAgICAgICAgICAgICcnLFxyXG4gICAgICAgICAgICAgICAgICAgICdST0xFX1BSSU1BUlknLFxyXG4gICAgICAgICAgICAgICAgICAgICdST0xFX1NFQ09OREFSWSdcclxuICAgICAgICAgICAgICAgIF0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gX2dldEZvcm1UeXBlcygpIHtcclxuICAgICAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgICAgIFtcclxuICAgICAgICAgICAgICAgICAgICBfYmlvbG9naWMsXHJcbiAgICAgICAgICAgICAgICAgICAgX3BoYXJtYVxyXG4gICAgICAgICAgICAgICAgXSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBfZ2V0QmlvbG9naWMoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBfYmlvbG9naWM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBfZ2V0UGhhcm1hY2V1dGljYWwoKSB7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gX3BoYXJtYTtcclxuICAgICAgICB9XHJcblxyXG4gICAgfVxyXG5cclxufSkoKTtcclxuIiwiLyoqXHJcbiAqIENyZWF0ZWQgYnkgZGtpbHR5IG9uIDEyLzA4LzIwMTYuXHJcbiAqIEBuZ2RvYyBtb2R1bGUgLWdldHMgdGhlIGxpc3Qgb2YgdHJhbnNhY3Rpb24gYWN0aXZpdHkgdHB5ZXNcclxuICovXHJcbihmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ3NlcnZpY2VzJywgW10pO1xyXG5cclxufSkoKTtcclxuXHJcblxyXG4oZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKCdzZXJ2aWNlcycpXHJcbiAgICAgICAgLmZhY3RvcnkoJ1RyYW5zYWN0aW9uTGlzdHMnLCBnZXRUcmFuc2FjdGlvblNlcSk7XHJcblxyXG4gICAgLyogQG5nSW5qZWN0ICovXHJcbiAgICBnZXRUcmFuc2FjdGlvblNlcS5pbmplY3QgPSBbJyRodHRwJywgJyRxJ107XHJcblxyXG4gICAgZnVuY3Rpb24gZ2V0VHJhbnNhY3Rpb25TZXEoJGh0dHAsJHEpIHtcclxuICAgICAgICB2YXIgdm0gPSB0aGlzO1xyXG4gICAgICAgIHZtLnJhVHlwZUFycmF5ID0gW107XHJcblxyXG4gICAgICAgIHZhciBzZXJ2aWNlID0ge1xyXG4gICAgICAgICAgICBnZXRUcmFuc2FjdGlvbkRlc2NyaXB0aW9uczogZ2V0VHJhbnNhY3Rpb25EZXNjcmlwdGlvbnNBcnJheSxcclxuICAgICAgICAgICAgZ2V0QWN0aXZpdHlUeXBlczogZ2V0QWN0aXZpdHlBcnJheSxcclxuICAgICAgICAgICAgY3JlYXRlUmFUeXBlczogX2NyZWF0ZVJhQXJyYXksXHJcbiAgICAgICAgICAgIGdldFByZXN1YlR5cGVzOiBnZXRQcmVzdWJBcnJheSxcclxuICAgICAgICAgICAgZ2V0QW5kc1R5cGU6IGdldEFORFNBcnJheSxcclxuICAgICAgICAgICAgZ2V0RGluYVR5cGU6IGdldERJTkFBcnJheSxcclxuICAgICAgICAgICAgZ2V0RGluYlR5cGU6IGdldERJTkJBcnJheSxcclxuICAgICAgICAgICAgZ2V0RXVuZHNUeXBlOiBnZXRFVU5EU0FycmF5LFxyXG4gICAgICAgICAgICBnZXRFdXNuZHNUeXBlOiBnZXRFVVNORFNBcnJheSxcclxuICAgICAgICAgICAgZ2V0TGV2ZWwzVHlwZTogZ2V0TGV2ZWwzQXJyYXksXHJcbiAgICAgICAgICAgIGdldE5jVHlwZTogZ2V0TkNBcnJheSxcclxuICAgICAgICAgICAgZ2V0TmRzVHlwZTogZ2V0TkRTQXJyYXksXHJcbiAgICAgICAgICAgIGdldFBkY1R5cGU6IGdldFBEQ0FycmF5LFxyXG4gICAgICAgICAgICBnZXRQZGNCVHlwZTogZ2V0UERDQkFycmF5LFxyXG4gICAgICAgICAgICBnZXRQcmVzdWJUeXBlOiBnZXRQcmVzdWJBcnJheSxcclxuICAgICAgICAgICAgZ2V0cFN1ckNUeXBlOiBnZXRQU1VSQ0FycmF5LFxyXG4gICAgICAgICAgICBnZXRwU3VyUHZUeXBlOiBnZXRQU1VSUFZBcnJheSxcclxuICAgICAgICAgICAgZ2V0Um1wUHZUeXBlOiBnZXRSTVBQVkFycmF5LFxyXG4gICAgICAgICAgICBnZXRTYW5kc1R5cGU6IGdldFNBTkRTQXJyYXksXHJcbiAgICAgICAgICAgIGdldFNuZHNUeXBlOiBnZXRTTkRTQXJyYXksXHJcbiAgICAgICAgICAgIGdldFNuZHNDQXJyYXk6IGdldFNORFNDQXJyYXksXHJcbiAgICAgICAgICAgIGdldFVkcHZUeXBlOiBnZXRVRFBWQXJyYXksXHJcbiAgICAgICAgICAgIGdldFVkcmFUeXBlOiBnZXRVRFJBVkFycmF5LFxyXG4gICAgICAgICAgICBnZXRZYnByVHlwZTogZ2V0WUJQUkFycmF5LFxyXG4gICAgICAgICAgICBnZXRDb25zdWx0VHlwZTogZ2V0Q29uc3VsdEFycmF5LFxyXG4gICAgICAgICAgICBnZXRNUE5DVHlwZTogX2dldE1QTkNBcnJheSxcclxuICAgICAgICAgICAgZ2V0TVBORFNUeXBlOiBfZ2V0TVBORFNBcnJheSxcclxuICAgICAgICAgICAgZ2V0TVBTTkRTVHlwZTogX2dldE1QU05EU0FycmF5LFxyXG4gICAgICAgICAgICBnZXRQQU5EVHlwZTogX2dldFBBTkRBcnJheSxcclxuICAgICAgICAgICAgZ2V0UEJSRVJDVHlwZTogX2dldFBCUkVSQ0FycmF5LFxyXG4gICAgICAgICAgICBnZXRQQlJFUlBWVHlwZTogX2dldFBCUkVSUFZBcnJheSxcclxuICAgICAgICAgICAgZ2V0UFJORFNUeXBlOiBfZ2V0UFJORFNBcnJheSxcclxuICAgICAgICAgICAgZ2V0UFJTTkRTVHlwZTpfZ2V0UFJTTkRTQXJyYXksXHJcbiAgICAgICAgICAgIGdldFllc05vTGlzdDogeWVzTm9BcnJheVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIHNlcnZpY2U7XHJcblxyXG4gICAgICAgIC8vLy8vLy8vLy8vLy8vLy9cclxuXHJcbiAgICAgICAgLy9UT0RPIG1ha2UgbGlzdHMgYmUgYWN0aXZpdHkuLiB5aWtlcyFcclxuXHJcbiAgICAgICAgZnVuY3Rpb24geWVzTm9BcnJheSgpIHtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiAoW1xyXG4gICAgICAgICAgICAgICAgXCJZXCIsXHJcbiAgICAgICAgICAgICAgICBcIk5cIlxyXG4gICAgICAgICAgICBdKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIF9jcmVhdGVSYUFycmF5KHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHZtLnJhVHlwZUFycmF5ID12YWx1ZTtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICAvL3JldHVybnMgYSBsaXN0IG9mIGFsbCB0aGUgdW5pcXVlIGRlc2NyaXB0aW9uIHZhbHVlc1xyXG4gICAgICAgIGZ1bmN0aW9uIGdldFRyYW5zYWN0aW9uRGVzY3JpcHRpb25zQXJyYXkoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgICAgICBbXHJcbiAgICAgICAgICAgICAgICAgICAgXCJBRE1JTklTVFJBVElWRVwiLCAvL2FkbWluaXN0cmF0aXZlXHJcbiAgICAgICAgICAgICAgICAgICAgXCJCRU5FRklUX1JJU0tfQVNTRVNTXCIsIC8vYmVuZWZpdCByaXNrIGFzc2Vzc21lbnRcclxuICAgICAgICAgICAgICAgICAgICBcIkNBTkNFTF9MRVRURVJcIiwgLy9jYW5jZWxsYXRpb24gbGV0dGVyXHJcbiAgICAgICAgICAgICAgICAgICAgXCJDSEFOR0VfVE9fRElOXCIsIC8vY2hhbmdlcyB0byBkaW5cclxuICAgICAgICAgICAgICAgICAgICBcIkNPTU1FTlRTX05PQ1wiLCAvLyBjb21tZW50cyBvbiBub3RpY2Ugb2YgZGVjaXNpb25cclxuICAgICAgICAgICAgICAgICAgICBcIkNPTU1FTlRTX1NVTU1BUllfQkFTSVNcIiwgLy9jb21tbWVudHMgb24gc3VtbWFyeSBiYXNpc1xyXG4gICAgICAgICAgICAgICAgICAgIFwiRElOX0RJU0NPTlRJTlVFRFwiLCAvLyBkaW4gZGlzY29udGludWVkXHJcbiAgICAgICAgICAgICAgICAgICAgXCJEUlVHX05PVElGX0ZPUk1cIiwgLy8gZHJ1ZyBub3RpZmljYXRpb24gZm9ybVxyXG4gICAgICAgICAgICAgICAgICAgIFwiRk9SX1BFUklPRFwiLCAvL2ZvciBwZXJpb2Qgb2YgLi4uLlxyXG4gICAgICAgICAgICAgICAgICAgIFwiSU5JVElBTFwiLCAvL0luaXRpYWxcclxuICAgICAgICAgICAgICAgICAgICBcIk1FRVRJTkdfTUlOVVRFU1wiLCAvL21pbnV0ZXMgb2YgbWVldGluZyBkYXRlZFxyXG4gICAgICAgICAgICAgICAgICAgIFwiTk9USUZJQ0FUSU9OX0NIQU5HRVwiLCAvL25vdGlmaWNhaXRvbiBvZiBjaGFuZ2UgaW4gYmVuZWZpdCBwcm9maWxlXHJcbiAgICAgICAgICAgICAgICAgICAgXCJQQU5ERU1JQ19BUFBMXCIsIC8vcGFuZGVtaWMgYXBwbGljYWl0b25cclxuICAgICAgICAgICAgICAgICAgICBcIlBPU1RfQ0xFQVJBTkNFX0RBVEFcIiwgLy9wb3N0IGNsZWFyYW5jZSBkYXRhXHJcbiAgICAgICAgICAgICAgICAgICAgXCJQT1NUX01BUktFVF9TVVJWXCIsIC8vIHBvc3QgbWFya2V0aW5nIHN1cnZlaWxsYW5jZVxyXG4gICAgICAgICAgICAgICAgICAgIFwiUE9TVF9OT0NfQ0hBTkdFXCIsIC8vUG9zdCBOT0MgY2hhbmdlXHJcbiAgICAgICAgICAgICAgICAgICAgXCJQT1NUX0FVVEhfRElWMV9DSEFOR0VcIiwgLy8gUG9zdCBhdXRvcml6YXRpb24gRGl2aXNpb24gMSBjaGFuZ2VcclxuICAgICAgICAgICAgICAgICAgICBcIlBSRVNVQl9NRUVUSU5HX1BLR1wiLCAvLyBwcmVzdWJtaXNzaW9uIG1lZXRpbmcgcGFja2FnZVxyXG4gICAgICAgICAgICAgICAgICAgIFwiUFJJT1JJVFlfUkVWSUVXX1JRXCIsIC8vIFByaW9yaXR5IHJld2lldyByZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICAgICAgXCJQUklTVElORV9QTVwiLCAvLyBQcmlzdGluZSBQTVxyXG4gICAgICAgICAgICAgICAgICAgIFwiUFJJU1RJTkVfUE1fMkxBTkdcIiwgLy8gcHJpc3RpbmUgUE0gc2Vjb25kIGxhbmd1YWdlXHJcbiAgICAgICAgICAgICAgICAgICAgXCJBRFZJU0VNRU5UX0xFVFRFUl9SRVNQT05TRVwiLCAvL1JFc3Bvc2UgdG8gQWR2aXNlbWVudCBMZXR0ZXIgZGF0ZWRcclxuICAgICAgICAgICAgICAgICAgICBcIkNMSU5fQ0xBUklGX1JFU1BPTlNFXCIsIC8vUmVzcG9uc2UgdG8gY2xpbmljYWwgY2xhcmlmaWFjdGlvbiByZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICAgICAgXCJFTUFJTF9SUV9SRVNQT05TRVwiLC8vIHJlc3BvbnNlIHRvIGVtYWlsIHJlcXVlc3RcclxuICAgICAgICAgICAgICAgICAgICBcIkxBQkVMX0NMQVJJRl9SRVNQT05TRVwiLCAvL1Jlc3BvbnNlIHRvIGxhYmVsbGluZyBjbGFyaWZpY2F0aW9uIHJlcXVlc3RcclxuICAgICAgICAgICAgICAgICAgICBcIk1IUERfUlFfUkVTUE9OU0VcIiwgLy9SZXNwb25zZSB0byBNSFBEIHJlcXVlc3RzXHJcbiAgICAgICAgICAgICAgICAgICAgXCJOT0NfUkVTUE9OU0VcIiwgLy9yZXNwb25zZSB0byBOT0MvIGMtUW5cclxuICAgICAgICAgICAgICAgICAgICBcIk5PRF9SRVNQT05TRVwiLCAvL1Jlc3BvbnNlIHRvIE5PRFxyXG4gICAgICAgICAgICAgICAgICAgIFwiTk9MX1JFU1BPTlNFXCIsIC8vUmVzcG9uc2UgdG8gTk9MIGRhdGVkXHJcbiAgICAgICAgICAgICAgICAgICAgXCJOT05fUkVTUE9OU0VcIiwgLy9SZXNwb25zZSB0byBOT05cclxuICAgICAgICAgICAgICAgICAgICBcIlBST0NFU1NJTkdfQ0xBUklGX1JFU1BPTlNFXCIsIC8vUmVzcG9uc2UgdG8gcHJvY2Vzc2luZyBDbGFyaWZpY2F0aW9uIFJlcXVlc3RcclxuICAgICAgICAgICAgICAgICAgICBcIlFVQUxfQ0xJTl9DTEFSSUZfUkVTUE9OU0VcIiwgLy9SZXNwb25zZSB0byBxdWFsaXR5IGFuZCBDbGluaWNhbCBjbGFyaWZpY2F0aW9uIFJFcXVlc3RcclxuICAgICAgICAgICAgICAgICAgICBcIlFVQUxfQ0xBUklGX1JFU1BPTlNFXCIsIC8vUmVzcG9uc2UgdG8gUXVhbGl0eSBDbGFyaWZpY2F0aW9uIHJlcXVlc3RcclxuICAgICAgICAgICAgICAgICAgICBcIlNDUkVFTklOR19BQ0NFUFRfUkVTUE9OU0VcIiwgLy9yZXNwb25zZSB0byBzY3JlZW5pbmcgYWNjZXB0YW5jZSBsZXR0ZXJcclxuICAgICAgICAgICAgICAgICAgICBcIlNDUkVFTklOR19DTEFSSUZfUkVTUE9OU0VcIiwgLy8gcmVzcG9uc2UgdG8gc2NyZWVuaW5nIGNsYXJpZmljYXRpb24gcmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgICAgIFwiU0ROX1JFU1BPTlNFXCIsIC8vcmVzcG9uc2UgdG8gU0ROXHJcbiAgICAgICAgICAgICAgICAgICAgXCJQSE9ORV9SUV9SRVNQT05TRVwiLCAvL1Jlc3BvbnNlIHRvIHRlbGVwaG9uZSBSZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICAgICAgXCJSSVNLX0NPTU1VTl9ET0NcIiwgLy9SaXNrIGNvbW11bmljYXRpb24gZG9jdW1lbnRcclxuICAgICAgICAgICAgICAgICAgICBcIlJNUF9WRVJTSU9OX0RBVEVcIiwgLy9STVAgdmVyaXNvblxyXG4gICAgICAgICAgICAgICAgICAgIFwiU0lHTkFMX1dPUktfVVBcIiwgLy9TaWduYWwgV29yayB1cFxyXG4gICAgICAgICAgICAgICAgICAgIFwiVU5TT0xJQ0lURURfREFUQVwiLCAvL1Vuc29saWNpdGVkIERhdGFcclxuICAgICAgICAgICAgICAgICAgICBcIllFQVJfTElTVF9PRl9DSEFOR0VcIiwgLy9ZZWFyLCBsaXN0IG9mIGNoYW5nZSBudW1iZXIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJCRV9DTEFSSUZfUkVTUE9OU0VcIiAvL1Jlc3BvbnNlIHRvIEJFIGNsYXJpZmljYXRpb24gcmVxdWVzdCBkYXRlZC4uXHJcbiAgICAgICAgICAgICAgICBdKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGdldEFjdGl2aXR5QXJyYXkoKSB7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gKHZtLnJhVHlwZUFycmF5KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGdldFByZXN1YkFycmF5KCkge1xyXG4gICAgICAgICAgICByZXR1cm4gKFtcclxuICAgICAgICAgICAgICAgIFwiQ0FOQ0VMX0xFVFRFUlwiLFxyXG4gICAgICAgICAgICAgICAgXCJNRUVUSU5HX01JTlVURVNcIixcclxuICAgICAgICAgICAgICAgIFwiRU1BSUxfUlFfUkVTUE9OU0VcIixcclxuICAgICAgICAgICAgICAgIFwiUFJPQ0VTU0lOR19DTEFSSUZfUkVTUE9OU0VcIixcclxuICAgICAgICAgICAgICAgIFwiUEhPTkVfUlFfUkVTUE9OU0VcIlxyXG4gICAgICAgICAgICBdKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGdldEFORFNBcnJheSgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIChbXHJcbiAgICAgICAgICAgICAgICBcIkFETUlOSVNUUkFUSVZFXCIsIC8vYWRtaW5pc3RyYXRpdmVcclxuICAgICAgICAgICAgICAgIFwiQ0FOQ0VMX0xFVFRFUlwiLCAvL2NhbmNlbGxhdGlvbiBsZXR0ZXJcclxuICAgICAgICAgICAgICAgIFwiRFJVR19OT1RJRl9GT1JNXCIsIC8vIGRydWcgbm90aWZpY2F0aW9uIGZvcm1cclxuICAgICAgICAgICAgICAgIFwiSU5JVElBTFwiLCAvL0luaXRpYWxcclxuICAgICAgICAgICAgICAgIFwiUE9TVF9DTEVBUkFOQ0VfREFUQVwiLCAvL3Bvc3QgY2xlYXJhbmNlIGRhdGFcclxuICAgICAgICAgICAgICAgIFwiUFJJU1RJTkVfUE1cIiwgLy8gUHJpc3RpbmUgUE1cclxuICAgICAgICAgICAgICAgIFwiUFJJU1RJTkVfUE1fMkxBTkdcIiwgLy8gcHJpc3RpbmUgUE0gc2Vjb25kIGxhbmd1YWdlXHJcbiAgICAgICAgICAgICAgICBcIkJFX0NMQVJJRl9SRVNQT05TRVwiLFxyXG4gICAgICAgICAgICAgICAgXCJDTElOX0NMQVJJRl9SRVNQT05TRVwiLCAvL1Jlc3BvbnNlIHRvIGNsaW5pY2FsIGNsYXJpZmlhY3Rpb24gcmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgXCJFTUFJTF9SUV9SRVNQT05TRVwiLC8vIHJlc3BvbnNlIHRvIGVtYWlsIHJlcXVlc3RcclxuICAgICAgICAgICAgICAgIFwiTEFCRUxfQ0xBUklGX1JFU1BPTlNFXCIsIC8vUmVzcG9uc2UgdG8gbGFiZWxsaW5nIGNsYXJpZmljYXRpb24gcmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgXCJOT0NfUkVTUE9OU0VcIiwgLy9yZXNwb25zZSB0byBOT0MvIGMtUW5cclxuICAgICAgICAgICAgICAgIFwiTk9EX1JFU1BPTlNFXCIsIC8vUmVzcG9uc2UgdG8gTk9EXHJcbiAgICAgICAgICAgICAgICBcIk5PTl9SRVNQT05TRVwiLCAvL1Jlc3BvbnNlIHRvIE5PTlxyXG4gICAgICAgICAgICAgICAgXCJQUk9DRVNTSU5HX0NMQVJJRl9SRVNQT05TRVwiLCAvL1Jlc3BvbnNlIHRvIHByb2Nlc3NpbmcgIENsYXJpZmljYXRpb24gUmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgXCJRVUFMX0NMSU5fQ0xBUklGX1JFU1BPTlNFXCIsIC8vUmVzcG9uc2UgdG8gcXVhbGl0eSBhbmQgQ2xpbmljYWwgY2xhcmlmaWNhdGlvbiBSRXF1ZXN0XHJcbiAgICAgICAgICAgICAgICBcIlFVQUxfQ0xBUklGX1JFU1BPTlNFXCIsIC8vUmVzcG9uc2UgdG8gUXVhbGl0eSBDbGFyaWZpY2F0aW9uIHJlcXVlc3RcclxuICAgICAgICAgICAgICAgIFwiU0NSRUVOSU5HX0FDQ0VQVF9SRVNQT05TRVwiLCAvL3Jlc3BvbnNlIHRvIHNjcmVlbmluZyBhY2NlcHRhbmNlIGxldHRlclxyXG4gICAgICAgICAgICAgICAgXCJTQ1JFRU5JTkdfQ0xBUklGX1JFU1BPTlNFXCIsIC8vIHJlc3BvbnNlIHRvIHNjcmVlbmluZyBjbGFyaWZpY2F0aW9uIHJlcXVlc3RcclxuICAgICAgICAgICAgICAgIFwiU0ROX1JFU1BPTlNFXCIsIC8vcmVzcG9uc2UgdG8gU0ROXHJcbiAgICAgICAgICAgICAgICBcIlBIT05FX1JRX1JFU1BPTlNFXCIgLy9SZXNwb25zZSB0byB0ZWxlcGhvbmUgUmVxdWVzdFxyXG4gICAgICAgICAgICBdKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGdldERJTkFBcnJheSgpIHtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiAoW1xyXG4gICAgICAgICAgICAgICAgXCJBRE1JTklTVFJBVElWRVwiLCAvL2FkbWluaXN0cmF0aXZlXHJcbiAgICAgICAgICAgICAgICBcIkNBTkNFTF9MRVRURVJcIiwgLy9jYW5jZWxsYXRpb24gbGV0dGVyXHJcbiAgICAgICAgICAgICAgICBcIkRSVUdfTk9USUZfRk9STVwiLCAvLyBkcnVnIG5vdGlmaWNhdGlvbiBmb3JtXHJcbiAgICAgICAgICAgICAgICBcIklOSVRJQUxcIiwgLy9Jbml0aWFsXHJcbiAgICAgICAgICAgICAgICBcIlBPU1RfQ0xFQVJBTkNFX0RBVEFcIiwgLy9wb3N0IGNsZWFyYW5jZSBkYXRhXHJcbiAgICAgICAgICAgICAgICBcIlBSRVNVQl9NRUVUSU5HX1BLR1wiLCAvLyBwcmVzdWJtaXNzaW9uIG1lZXRpbmcgcGFja2FnZVxyXG4gICAgICAgICAgICAgICAgXCJQUklTVElORV9QTVwiLCAvLyBQcmlzdGluZSBQTVxyXG4gICAgICAgICAgICAgICAgXCJQUklTVElORV9QTV8yTEFOR1wiLCAvLyBwcmlzdGluZSBQTSBzZWNvbmQgbGFuZ3VhZ2VcclxuICAgICAgICAgICAgICAgIFwiQ0xJTl9DTEFSSUZfUkVTUE9OU0VcIiwgLy9SZXNwb25zZSB0byBjbGluaWNhbCBjbGFyaWZpYWN0aW9uIHJlcXVlc3RcclxuICAgICAgICAgICAgICAgIFwiRU1BSUxfUlFfUkVTUE9OU0VcIiwvLyByZXNwb25zZSB0byBlbWFpbCByZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICBcIkxBQkVMX0NMQVJJRl9SRVNQT05TRVwiLCAvL1Jlc3BvbnNlIHRvIGxhYmVsbGluZyBjbGFyaWZpY2F0aW9uIHJlcXVlc3RcclxuICAgICAgICAgICAgICAgIFwiUFJPQ0VTU0lOR19DTEFSSUZfUkVTUE9OU0VcIiwgLy9SZXNwb25zZSB0byBwcm9jZXNzaW5nIENsYXJpZmljYXRpb24gUmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgXCJRVUFMX0NMSU5fQ0xBUklGX1JFU1BPTlNFXCIsIC8vUmVzcG9uc2UgdG8gcXVhbGl0eSBhbmQgQ2xpbmljYWwgY2xhcmlmaWNhdGlvbiBSRXF1ZXN0XHJcbiAgICAgICAgICAgICAgICBcIlFVQUxfQ0xBUklGX1JFU1BPTlNFXCIsIC8vUmVzcG9uc2UgdG8gUXVhbGl0eSBDbGFyaWZpY2F0aW9uIHJlcXVlc3RcclxuICAgICAgICAgICAgICAgIFwiU0NSRUVOSU5HX0FDQ0VQVF9SRVNQT05TRVwiLCAvL3Jlc3BvbnNlIHRvIHNjcmVlbmluZyBhY2NlcHRhbmNlIGxldHRlclxyXG4gICAgICAgICAgICAgICAgXCJTQ1JFRU5JTkdfQ0xBUklGX1JFU1BPTlNFXCIsIC8vIHJlc3BvbnNlIHRvIHNjcmVlbmluZyBjbGFyaWZpY2F0aW9uIHJlcXVlc3RcclxuICAgICAgICAgICAgICAgIFwiUEhPTkVfUlFfUkVTUE9OU0VcIiwgLy9SZXNwb25zZSB0byB0ZWxlcGhvbmUgUmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgXCJVTlNPTElDSVRFRF9EQVRBXCIgLy9VbnNvbGljaXRlZCBEYXRhXHJcbiAgICAgICAgICAgIF0pO1xyXG5cclxuXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvL25vdGUgRElOQiBpcyB0aGUgc2FtZSBhcyBESU5BXHJcbiAgICAgICAgZnVuY3Rpb24gZ2V0RElOQkFycmF5KCkge1xyXG4gICAgICAgICAgICByZXR1cm4gKFtcclxuICAgICAgICAgICAgICAgIFwiQURNSU5JU1RSQVRJVkVcIiwgLy9hZG1pbmlzdHJhdGl2ZVxyXG4gICAgICAgICAgICAgICAgXCJDQU5DRUxfTEVUVEVSXCIsIC8vY2FuY2VsbGF0aW9uIGxldHRlclxyXG4gICAgICAgICAgICAgICAgXCJEUlVHX05PVElGX0ZPUk1cIiwgLy8gZHJ1ZyBub3RpZmljYXRpb24gZm9ybVxyXG4gICAgICAgICAgICAgICAgXCJJTklUSUFMXCIsIC8vSW5pdGlhbFxyXG4gICAgICAgICAgICAgICAgXCJQT1NUX0NMRUFSQU5DRV9EQVRBXCIsIC8vcG9zdCBjbGVhcmFuY2UgZGF0YVxyXG4gICAgICAgICAgICAgICAgXCJQUkVTVUJfTUVFVElOR19QS0dcIiwgLy8gcHJlc3VibWlzc2lvbiBtZWV0aW5nIHBhY2thZ2VcclxuICAgICAgICAgICAgICAgIFwiUFJJU1RJTkVfUE1cIiwgLy8gUHJpc3RpbmUgUE1cclxuICAgICAgICAgICAgICAgIFwiUFJJU1RJTkVfUE1fMkxBTkdcIiwgLy8gcHJpc3RpbmUgUE0gc2Vjb25kIGxhbmd1YWdlXHJcbiAgICAgICAgICAgICAgICBcIkNMSU5fQ0xBUklGX1JFU1BPTlNFXCIsIC8vUmVzcG9uc2UgdG8gY2xpbmljYWwgY2xhcmlmaWFjdGlvbiByZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICBcIkVNQUlMX1JRX1JFU1BPTlNFXCIsLy8gcmVzcG9uc2UgdG8gZW1haWwgcmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgXCJMQUJFTF9DTEFSSUZfUkVTUE9OU0VcIiwgLy9SZXNwb25zZSB0byBsYWJlbGxpbmcgY2xhcmlmaWNhdGlvbiByZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICBcIlBST0NFU1NJTkdfQ0xBUklGX1JFU1BPTlNFXCIsIC8vUmVzcG9uc2UgdG8gcHJvY2Vzc2luZyBDbGFyaWZpY2F0aW9uIFJlcXVlc3RcclxuICAgICAgICAgICAgICAgIFwiUVVBTF9DTElOX0NMQVJJRl9SRVNQT05TRVwiLCAvL1Jlc3BvbnNlIHRvIHF1YWxpdHkgYW5kIENsaW5pY2FsIGNsYXJpZmljYXRpb24gUkVxdWVzdFxyXG4gICAgICAgICAgICAgICAgXCJRVUFMX0NMQVJJRl9SRVNQT05TRVwiLCAvL1Jlc3BvbnNlIHRvIFF1YWxpdHkgQ2xhcmlmaWNhdGlvbiByZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICBcIlNDUkVFTklOR19BQ0NFUFRfUkVTUE9OU0VcIiwgLy9yZXNwb25zZSB0byBzY3JlZW5pbmcgYWNjZXB0YW5jZSBsZXR0ZXJcclxuICAgICAgICAgICAgICAgIFwiU0NSRUVOSU5HX0NMQVJJRl9SRVNQT05TRVwiLCAvLyByZXNwb25zZSB0byBzY3JlZW5pbmcgY2xhcmlmaWNhdGlvbiByZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICBcIlBIT05FX1JRX1JFU1BPTlNFXCIsIC8vUmVzcG9uc2UgdG8gdGVsZXBob25lIFJlcXVlc3RcclxuICAgICAgICAgICAgICAgIFwiVU5TT0xJQ0lURURfREFUQVwiIC8vVW5zb2xpY2l0ZWQgRGF0YVxyXG4gICAgICAgICAgICBdKTtcclxuXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBnZXRFVU5EU0FycmF5KCkge1xyXG4gICAgICAgICAgICByZXR1cm4gKFtcclxuICAgICAgICAgICAgICAgIFwiQURNSU5JU1RSQVRJVkVcIiwgLy9hZG1pbmlzdHJhdGl2ZVxyXG4gICAgICAgICAgICAgICAgXCJDQU5DRUxfTEVUVEVSXCIsIC8vY2FuY2VsbGF0aW9uIGxldHRlclxyXG4gICAgICAgICAgICAgICAgXCJDT01NRU5UU19TVU1NQVJZX0JBU0lTXCIsIC8vY29tbW1lbnRzIG9uIHN1bW1hcnkgYmFzaXNcclxuICAgICAgICAgICAgICAgIFwiRFJVR19OT1RJRl9GT1JNXCIsIC8vIGRydWcgbm90aWZpY2F0aW9uIGZvcm1cclxuICAgICAgICAgICAgICAgIFwiSU5JVElBTFwiLCAvL0luaXRpYWxcclxuICAgICAgICAgICAgICAgIFwiUE9TVF9DTEVBUkFOQ0VfREFUQVwiLCAvL3Bvc3QgY2xlYXJhbmNlIGRhdGFcclxuICAgICAgICAgICAgICAgIFwiUFJJU1RJTkVfUE1cIiwgLy8gUHJpc3RpbmUgUE1cclxuICAgICAgICAgICAgICAgIFwiUFJJU1RJTkVfUE1fMkxBTkdcIiwgLy8gcHJpc3RpbmUgUE0gc2Vjb25kIGxhbmd1YWdlXHJcbiAgICAgICAgICAgICAgICBcIkNMSU5fQ0xBUklGX1JFU1BPTlNFXCIsIC8vUmVzcG9uc2UgdG8gY2xpbmljYWwgY2xhcmlmaWFjdGlvbiByZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICBcIkVNQUlMX1JRX1JFU1BPTlNFXCIsLy8gcmVzcG9uc2UgdG8gZW1haWwgcmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgXCJMQUJFTF9DTEFSSUZfUkVTUE9OU0VcIiwgLy9SZXNwb25zZSB0byBsYWJlbGxpbmcgY2xhcmlmaWNhdGlvbiByZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICBcIk5PQ19SRVNQT05TRVwiLCAvL3Jlc3BvbnNlIHRvIE5PQy8gYy1RblxyXG4gICAgICAgICAgICAgICAgXCJOT0RfUkVTUE9OU0VcIiwgLy9SZXNwb25zZSB0byBOT0RcclxuICAgICAgICAgICAgICAgIFwiTk9OX1JFU1BPTlNFXCIsIC8vUmVzcG9uc2UgdG8gTk9OXHJcbiAgICAgICAgICAgICAgICBcIlBST0NFU1NJTkdfQ0xBUklGX1JFU1BPTlNFXCIsIC8vUmVzcG9uc2UgdG8gcHJvY2Vzc2luZyBDbGFyaWZpY2F0aW9uIFJlcXVlc3RcclxuICAgICAgICAgICAgICAgIFwiUVVBTF9DTElOX0NMQVJJRl9SRVNQT05TRVwiLCAvL1Jlc3BvbnNlIHRvIHF1YWxpdHkgYW5kIENsaW5pY2FsIGNsYXJpZmljYXRpb24gUkVxdWVzdFxyXG4gICAgICAgICAgICAgICAgXCJRVUFMX0NMQVJJRl9SRVNQT05TRVwiLCAvL1Jlc3BvbnNlIHRvIFF1YWxpdHkgQ2xhcmlmaWNhdGlvbiByZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICBcIlNDUkVFTklOR19BQ0NFUFRfUkVTUE9OU0VcIiwgLy9yZXNwb25zZSB0byBzY3JlZW5pbmcgYWNjZXB0YW5jZSBsZXR0ZXJcclxuICAgICAgICAgICAgICAgIFwiU0NSRUVOSU5HX0NMQVJJRl9SRVNQT05TRVwiLCAvLyByZXNwb25zZSB0byBzY3JlZW5pbmcgY2xhcmlmaWNhdGlvbiByZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICBcIlNETl9SRVNQT05TRVwiLCAvL3Jlc3BvbnNlIHRvIFNETlxyXG4gICAgICAgICAgICAgICAgXCJQSE9ORV9SUV9SRVNQT05TRVwiLCAvL1Jlc3BvbnNlIHRvIHRlbGVwaG9uZSBSZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICBcIlVOU09MSUNJVEVEX0RBVEFcIiAvL1Vuc29saWNpdGVkIERhdGFcclxuICAgICAgICAgICAgXSk7XHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZ2V0RVVTTkRTQXJyYXkoKSB7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gKFtcclxuICAgICAgICAgICAgICAgIFwiQURNSU5JU1RSQVRJVkVcIiwgLy9hZG1pbmlzdHJhdGl2ZVxyXG4gICAgICAgICAgICAgICAgXCJDQU5DRUxfTEVUVEVSXCIsIC8vY2FuY2VsbGF0aW9uIGxldHRlclxyXG4gICAgICAgICAgICAgICAgXCJDT01NRU5UU19TVU1NQVJZX0JBU0lTXCIsIC8vY29tbW1lbnRzIG9uIHN1bW1hcnkgYmFzaXNcclxuICAgICAgICAgICAgICAgIFwiRFJVR19OT1RJRl9GT1JNXCIsIC8vIGRydWcgbm90aWZpY2F0aW9uIGZvcm1cclxuICAgICAgICAgICAgICAgIFwiUE9TVF9DTEVBUkFOQ0VfREFUQVwiLCAvL3Bvc3QgY2xlYXJhbmNlIGRhdGFcclxuICAgICAgICAgICAgICAgIFwiUE9TVF9OT0NfQ0hBTkdFXCIsIC8vUG9zdCBOT0MgY2hhbmdlXHJcbiAgICAgICAgICAgICAgICBcIlBSSVNUSU5FX1BNXCIsIC8vIFByaXN0aW5lIFBNXHJcbiAgICAgICAgICAgICAgICBcIlBSSVNUSU5FX1BNXzJMQU5HXCIsIC8vIHByaXN0aW5lIFBNIHNlY29uZCBsYW5ndWFnZVxyXG4gICAgICAgICAgICAgICAgXCJDTElOX0NMQVJJRl9SRVNQT05TRVwiLCAvL1Jlc3BvbnNlIHRvIGNsaW5pY2FsIGNsYXJpZmlhY3Rpb24gcmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgXCJFTUFJTF9SUV9SRVNQT05TRVwiLC8vIHJlc3BvbnNlIHRvIGVtYWlsIHJlcXVlc3RcclxuICAgICAgICAgICAgICAgIFwiTEFCRUxfQ0xBUklGX1JFU1BPTlNFXCIsIC8vUmVzcG9uc2UgdG8gbGFiZWxsaW5nIGNsYXJpZmljYXRpb24gcmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgXCJOT0NfUkVTUE9OU0VcIiwgLy9yZXNwb25zZSB0byBOT0MvIGMtUW5cclxuICAgICAgICAgICAgICAgIFwiTk9EX1JFU1BPTlNFXCIsIC8vUmVzcG9uc2UgdG8gTk9EXHJcbiAgICAgICAgICAgICAgICBcIk5PTl9SRVNQT05TRVwiLCAvL1Jlc3BvbnNlIHRvIE5PTlxyXG4gICAgICAgICAgICAgICAgXCJQUk9DRVNTSU5HX0NMQVJJRl9SRVNQT05TRVwiLCAvL1Jlc3BvbnNlIHRvIHByb2Nlc3NpbmcgQ2xhcmlmaWNhdGlvbiBSZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICBcIlFVQUxfQ0xJTl9DTEFSSUZfUkVTUE9OU0VcIiwgLy9SZXNwb25zZSB0byBxdWFsaXR5IGFuZCBDbGluaWNhbCBjbGFyaWZpY2F0aW9uIFJFcXVlc3RcclxuICAgICAgICAgICAgICAgIFwiUVVBTF9DTEFSSUZfUkVTUE9OU0VcIiwgLy9SZXNwb25zZSB0byBRdWFsaXR5IENsYXJpZmljYXRpb24gcmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgXCJTQ1JFRU5JTkdfQUNDRVBUX1JFU1BPTlNFXCIsIC8vcmVzcG9uc2UgdG8gc2NyZWVuaW5nIGFjY2VwdGFuY2UgbGV0dGVyXHJcbiAgICAgICAgICAgICAgICBcIlNDUkVFTklOR19DTEFSSUZfUkVTUE9OU0VcIiwgLy8gcmVzcG9uc2UgdG8gc2NyZWVuaW5nIGNsYXJpZmljYXRpb24gcmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgXCJTRE5fUkVTUE9OU0VcIiwgLy9yZXNwb25zZSB0byBTRE5cclxuICAgICAgICAgICAgICAgIFwiUEhPTkVfUlFfUkVTUE9OU0VcIiwgLy9SZXNwb25zZSB0byB0ZWxlcGhvbmUgUmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgXCJVTlNPTElDSVRFRF9EQVRBXCIgLy9VbnNvbGljaXRlZCBEYXRhXHJcbiAgICAgICAgICAgIF0pO1xyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGdldExldmVsM0FycmF5KCkge1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIChbXHJcbiAgICAgICAgICAgICAgICBcIkNBTkNFTF9MRVRURVJcIiwgLy9jYW5jZWxsYXRpb24gbGV0dGVyXHJcbiAgICAgICAgICAgICAgICBcIkVNQUlMX1JRX1JFU1BPTlNFXCIsLy8gcmVzcG9uc2UgdG8gZW1haWwgcmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgXCJQUk9DRVNTSU5HX0NMQVJJRl9SRVNQT05TRVwiLCAvL1Jlc3BvbnNlIHRvIHByb2Nlc3NpbmcgQ2xhcmlmaWNhdGlvbiBSZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICBcIlBIT05FX1JRX1JFU1BPTlNFXCIsIC8vUmVzcG9uc2UgdG8gdGVsZXBob25lIFJlcXVlc3RcclxuICAgICAgICAgICAgICAgIFwiWUVBUl9MSVNUX09GX0NIQU5HRVwiIC8vWWVhciwgbGlzdCBvZiBjaGFuZ2UgbnVtYmVyLFxyXG4gICAgICAgICAgICBdKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGdldE5DQXJyYXkoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAoW1xyXG4gICAgICAgICAgICAgICAgXCJBRE1JTklTVFJBVElWRVwiLCAvL2FkbWluaXN0cmF0aXZlXHJcbiAgICAgICAgICAgICAgICBcIkNBTkNFTF9MRVRURVJcIiwgLy9jYW5jZWxsYXRpb24gbGV0dGVyXHJcbiAgICAgICAgICAgICAgICBcIkNPTU1FTlRTX1NVTU1BUllfQkFTSVNcIiwgLy9jb21tbWVudHMgb24gc3VtbWFyeSBiYXNpc1xyXG4gICAgICAgICAgICAgICAgXCJEUlVHX05PVElGX0ZPUk1cIiwgLy8gZHJ1ZyBub3RpZmljYXRpb24gZm9ybVxyXG4gICAgICAgICAgICAgICAgXCJQT1NUX0NMRUFSQU5DRV9EQVRBXCIsIC8vcG9zdCBjbGVhcmFuY2UgZGF0YVxyXG4gICAgICAgICAgICAgICAgXCJQT1NUX05PQ19DSEFOR0VcIiwgLy9Qb3N0IE5PQyBjaGFuZ2VcclxuICAgICAgICAgICAgICAgIFwiUFJFU1VCX01FRVRJTkdfUEtHXCIsIC8vIHByZXN1Ym1pc3Npb24gbWVldGluZyBwYWNrYWdlXHJcbiAgICAgICAgICAgICAgICBcIlBSSVNUSU5FX1BNXCIsIC8vIFByaXN0aW5lIFBNXHJcbiAgICAgICAgICAgICAgICBcIlBSSVNUSU5FX1BNXzJMQU5HXCIsIC8vIHByaXN0aW5lIFBNIHNlY29uZCBsYW5ndWFnZVxyXG4gICAgICAgICAgICAgICAgXCJDTElOX0NMQVJJRl9SRVNQT05TRVwiLCAvL1Jlc3BvbnNlIHRvIGNsaW5pY2FsIGNsYXJpZmlhY3Rpb24gcmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgXCJFTUFJTF9SUV9SRVNQT05TRVwiLC8vIHJlc3BvbnNlIHRvIGVtYWlsIHJlcXVlc3RcclxuICAgICAgICAgICAgICAgIFwiTEFCRUxfQ0xBUklGX1JFU1BPTlNFXCIsIC8vUmVzcG9uc2UgdG8gbGFiZWxsaW5nIGNsYXJpZmljYXRpb24gcmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgXCJOT0xfUkVTUE9OU0VcIiwgLy9SZXNwb25zZSB0byBOT0wgZGF0ZWRcclxuICAgICAgICAgICAgICAgIFwiUFJPQ0VTU0lOR19DTEFSSUZfUkVTUE9OU0VcIiwgLy9SZXNwb25zZSB0byBwcm9jZXNzaW5nIENsYXJpZmljYXRpb24gUmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgXCJRVUFMX0NMSU5fQ0xBUklGX1JFU1BPTlNFXCIsIC8vUmVzcG9uc2UgdG8gcXVhbGl0eSBhbmQgQ2xpbmljYWwgY2xhcmlmaWNhdGlvbiBSRXF1ZXN0XHJcbiAgICAgICAgICAgICAgICBcIlFVQUxfQ0xBUklGX1JFU1BPTlNFXCIsIC8vUmVzcG9uc2UgdG8gUXVhbGl0eSBDbGFyaWZpY2F0aW9uIHJlcXVlc3RcclxuICAgICAgICAgICAgICAgIFwiU0NSRUVOSU5HX0FDQ0VQVF9SRVNQT05TRVwiLCAvL3Jlc3BvbnNlIHRvIHNjcmVlbmluZyBhY2NlcHRhbmNlIGxldHRlclxyXG4gICAgICAgICAgICAgICAgXCJTQ1JFRU5JTkdfQ0xBUklGX1JFU1BPTlNFXCIsIC8vIHJlc3BvbnNlIHRvIHNjcmVlbmluZyBjbGFyaWZpY2F0aW9uIHJlcXVlc3RcclxuICAgICAgICAgICAgICAgIFwiU0ROX1JFU1BPTlNFXCIsIC8vcmVzcG9uc2UgdG8gU0ROXHJcbiAgICAgICAgICAgICAgICBcIlBIT05FX1JRX1JFU1BPTlNFXCIsIC8vUmVzcG9uc2UgdG8gdGVsZXBob25lIFJlcXVlc3RcclxuICAgICAgICAgICAgICAgIFwiVU5TT0xJQ0lURURfREFUQVwiIC8vVW5zb2xpY2l0ZWQgRGF0YVxyXG4gICAgICAgICAgICBdKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGdldE5EU0FycmF5KCkge1xyXG4gICAgICAgICAgICByZXR1cm4gKFtcclxuICAgICAgICAgICAgICAgIFwiQ0FOQ0VMX0xFVFRFUlwiLCAvL2NhbmNlbGxhdGlvbiBsZXR0ZXJcclxuICAgICAgICAgICAgICAgIFwiQ09NTUVOVFNfTk9DXCIsIC8vIGNvbW1lbnRzIG9uIG5vdGljZSBvZiBkZWNpc2lvblxyXG4gICAgICAgICAgICAgICAgXCJDT01NRU5UU19TVU1NQVJZX0JBU0lTXCIsIC8vY29tbW1lbnRzIG9uIHN1bW1hcnkgYmFzaXNcclxuICAgICAgICAgICAgICAgIFwiRFJVR19OT1RJRl9GT1JNXCIsIC8vIGRydWcgbm90aWZpY2F0aW9uIGZvcm1cclxuICAgICAgICAgICAgICAgIFwiSU5JVElBTFwiLCAvL0luaXRpYWxcclxuICAgICAgICAgICAgICAgIFwiUE9TVF9DTEVBUkFOQ0VfREFUQVwiLCAvL3Bvc3QgY2xlYXJhbmNlIGRhdGFcclxuICAgICAgICAgICAgICAgIFwiUFJFU1VCX01FRVRJTkdfUEtHXCIsIC8vIHByZXN1Ym1pc3Npb24gbWVldGluZyBwYWNrYWdlXHJcbiAgICAgICAgICAgICAgICBcIlBSSU9SSVRZX1JFVklFV19SUVwiLCAvLyBQcmlvcml0eSByZXdpZXcgcmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgXCJQUklTVElORV9QTVwiLCAvLyBQcmlzdGluZSBQTVxyXG4gICAgICAgICAgICAgICAgXCJQUklTVElORV9QTV8yTEFOR1wiLCAvLyBwcmlzdGluZSBQTSBzZWNvbmQgbGFuZ3VhZ2VcclxuICAgICAgICAgICAgICAgIFwiQkVfQ0xBUklGX1JFU1BPTlNFXCIsIC8vUmVzcG9uc2UgdG8gQkUgY2xhcmlmaWNhdGlvbiByZXF1ZXN0IGRhdGVkLi5cclxuICAgICAgICAgICAgICAgIFwiQ0xJTl9DTEFSSUZfUkVTUE9OU0VcIiwgLy9SZXNwb25zZSB0byBjbGluaWNhbCBjbGFyaWZpYWN0aW9uIHJlcXVlc3RcclxuICAgICAgICAgICAgICAgIFwiRU1BSUxfUlFfUkVTUE9OU0VcIiwvLyByZXNwb25zZSB0byBlbWFpbCByZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICBcIkxBQkVMX0NMQVJJRl9SRVNQT05TRVwiLCAvL1Jlc3BvbnNlIHRvIGxhYmVsbGluZyBjbGFyaWZpY2F0aW9uIHJlcXVlc3RcclxuICAgICAgICAgICAgICAgIFwiTk9DX1JFU1BPTlNFXCIsIC8vcmVzcG9uc2UgdG8gTk9DLyBjLVFuXHJcbiAgICAgICAgICAgICAgICBcIk5PRF9SRVNQT05TRVwiLCAvL1Jlc3BvbnNlIHRvIE5PRFxyXG4gICAgICAgICAgICAgICAgXCJOT05fUkVTUE9OU0VcIiwgLy9SZXNwb25zZSB0byBOT05cclxuICAgICAgICAgICAgICAgIFwiUFJPQ0VTU0lOR19DTEFSSUZfUkVTUE9OU0VcIiwgLy9SZXNwb25zZSB0byBwcm9jZXNzaW5nIENsYXJpZmljYXRpb24gUmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgXCJRVUFMX0NMSU5fQ0xBUklGX1JFU1BPTlNFXCIsIC8vUmVzcG9uc2UgdG8gcXVhbGl0eSBhbmQgQ2xpbmljYWwgY2xhcmlmaWNhdGlvbiBSRXF1ZXN0XHJcbiAgICAgICAgICAgICAgICBcIlFVQUxfQ0xBUklGX1JFU1BPTlNFXCIsIC8vUmVzcG9uc2UgdG8gUXVhbGl0eSBDbGFyaWZpY2F0aW9uIHJlcXVlc3RcclxuICAgICAgICAgICAgICAgIFwiU0NSRUVOSU5HX0FDQ0VQVF9SRVNQT05TRVwiLCAvL3Jlc3BvbnNlIHRvIHNjcmVlbmluZyBhY2NlcHRhbmNlIGxldHRlclxyXG4gICAgICAgICAgICAgICAgXCJTQ1JFRU5JTkdfQ0xBUklGX1JFU1BPTlNFXCIsIC8vIHJlc3BvbnNlIHRvIHNjcmVlbmluZyBjbGFyaWZpY2F0aW9uIHJlcXVlc3RcclxuICAgICAgICAgICAgICAgIFwiU0ROX1JFU1BPTlNFXCIsIC8vcmVzcG9uc2UgdG8gU0ROXHJcbiAgICAgICAgICAgICAgICBcIlBIT05FX1JRX1JFU1BPTlNFXCIsIC8vUmVzcG9uc2UgdG8gdGVsZXBob25lIFJlcXVlc3RcclxuICAgICAgICAgICAgICAgIFwiVU5TT0xJQ0lURURfREFUQVwiIC8vVW5zb2xpY2l0ZWQgRGF0YVxyXG4gICAgICAgICAgICBdKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZ2V0UERDQXJyYXkoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAoW1xyXG4gICAgICAgICAgICAgICAgXCJDQU5DRUxfTEVUVEVSXCIsIC8vY2FuY2VsbGF0aW9uIGxldHRlclxyXG4gICAgICAgICAgICAgICAgXCJQT1NUX0FVVEhfRElWMV9DSEFOR0VcIiwgLy8gUG9zdCBhdXRvcml6YXRpb24gRGl2aXNpb24gMSBjaGFuZ2VcclxuICAgICAgICAgICAgICAgIFwiRU1BSUxfUlFfUkVTUE9OU0VcIiwvLyByZXNwb25zZSB0byBlbWFpbCByZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICBcIlBST0NFU1NJTkdfQ0xBUklGX1JFU1BPTlNFXCIsIC8vUmVzcG9uc2UgdG8gcHJvY2Vzc2luZyBDbGFyaWZpY2F0aW9uIFJlcXVlc3RcclxuICAgICAgICAgICAgICAgIFwiUEhPTkVfUlFfUkVTUE9OU0VcIiAvL1Jlc3BvbnNlIHRvIHRlbGVwaG9uZSBSZXF1ZXN0XHJcbiAgICAgICAgICAgIF0pXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvL1BEQyBhbmQgUERDQiBoYXZlIHRoZSBzYW1lIGNvbnRlbnQgY3VycmVudGx5XHJcbiAgICAgICAgZnVuY3Rpb24gZ2V0UERDQkFycmF5KCkge1xyXG4gICAgICAgICAgICByZXR1cm4gKFtcclxuICAgICAgICAgICAgICAgIFwiQ0FOQ0VMX0xFVFRFUlwiLCAvL2NhbmNlbGxhdGlvbiBsZXR0ZXJcclxuICAgICAgICAgICAgICAgIFwiUE9TVF9BVVRIX0RJVjFfQ0hBTkdFXCIsIC8vIFBvc3QgYXV0b3JpemF0aW9uIERpdmlzaW9uIDEgY2hhbmdlXHJcbiAgICAgICAgICAgICAgICBcIkVNQUlMX1JRX1JFU1BPTlNFXCIsLy8gcmVzcG9uc2UgdG8gZW1haWwgcmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgXCJQUk9DRVNTSU5HX0NMQVJJRl9SRVNQT05TRVwiLCAvL1Jlc3BvbnNlIHRvIHByb2Nlc3NpbmcgQ2xhcmlmaWNhdGlvbiBSZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICBcIlBIT05FX1JRX1JFU1BPTlNFXCIgLy9SZXNwb25zZSB0byB0ZWxlcGhvbmUgUmVxdWVzdFxyXG4gICAgICAgICAgICBdKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZ2V0UFNVUkNBcnJheSgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIChbXHJcbiAgICAgICAgICAgICAgICBcIkNBTkNFTF9MRVRURVJcIiwgLy9jYW5jZWxsYXRpb24gbGV0dGVyXHJcbiAgICAgICAgICAgICAgICBcIkZPUl9QRVJJT0RcIiwgLy9mb3IgcGVyaW9kIG9mIC4uLi5cclxuICAgICAgICAgICAgICAgIFwiQ0xJTl9DTEFSSUZfUkVTUE9OU0VcIiwgLy9SZXNwb25zZSB0byBjbGluaWNhbCBjbGFyaWZpYWN0aW9uIHJlcXVlc3RcclxuICAgICAgICAgICAgICAgIFwiRU1BSUxfUlFfUkVTUE9OU0VcIiwvLyByZXNwb25zZSB0byBlbWFpbCByZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICBcIlBST0NFU1NJTkdfQ0xBUklGX1JFU1BPTlNFXCIsIC8vUmVzcG9uc2UgdG8gcHJvY2Vzc2luZyBDbGFyaWZpY2F0aW9uIFJlcXVlc3RcclxuICAgICAgICAgICAgICAgIFwiUEhPTkVfUlFfUkVTUE9OU0VcIiAvL1Jlc3BvbnNlIHRvIHRlbGVwaG9uZSBSZXF1ZXN0XHJcbiAgICAgICAgICAgIF0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZ2V0UFNVUlBWQXJyYXkoKSB7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gKFtcclxuICAgICAgICAgICAgICAgIFwiQ0FOQ0VMX0xFVFRFUlwiLCAvL2NhbmNlbGxhdGlvbiBsZXR0ZXJcclxuICAgICAgICAgICAgICAgIFwiRk9SX1BFUklPRFwiLCAvL2ZvciBwZXJpb2Qgb2YgLi4uLlxyXG4gICAgICAgICAgICAgICAgXCJFTUFJTF9SUV9SRVNQT05TRVwiLC8vIHJlc3BvbnNlIHRvIGVtYWlsIHJlcXVlc3RcclxuICAgICAgICAgICAgICAgIFwiUFJPQ0VTU0lOR19DTEFSSUZfUkVTUE9OU0VcIiwgLy9SZXNwb25zZSB0byBwcm9jZXNzaW5nIENsYXJpZmljYXRpb24gUmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgXCJQSE9ORV9SUV9SRVNQT05TRVwiIC8vUmVzcG9uc2UgdG8gdGVsZXBob25lIFJlcXVlc3RcclxuICAgICAgICAgICAgXSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBnZXRSTVBQVkFycmF5KCkge1xyXG4gICAgICAgICAgICByZXR1cm4gKFtcclxuICAgICAgICAgICAgICAgIFwiQ0FOQ0VMX0xFVFRFUlwiLCAvL2NhbmNlbGxhdGlvbiBsZXR0ZXJcclxuICAgICAgICAgICAgICAgIFwiRU1BSUxfUlFfUkVTUE9OU0VcIiwvLyByZXNwb25zZSB0byBlbWFpbCByZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICBcIlBST0NFU1NJTkdfQ0xBUklGX1JFU1BPTlNFXCIsIC8vUmVzcG9uc2UgdG8gcHJvY2Vzc2luZyBDbGFyaWZpY2F0aW9uIFJlcXVlc3RcclxuICAgICAgICAgICAgICAgIFwiUEhPTkVfUlFfUkVTUE9OU0VcIiwgLy9SZXNwb25zZSB0byB0ZWxlcGhvbmUgUmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgXCJSTVBfVkVSU0lPTl9EQVRFXCIgLy9STVAgdmVyaXNvblxyXG4gICAgICAgICAgICBdKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGdldFNBTkRTQXJyYXkoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAoW1xyXG4gICAgICAgICAgICAgICAgXCJBRE1JTklTVFJBVElWRVwiLCAvL2FkbWluaXN0cmF0aXZlXHJcbiAgICAgICAgICAgICAgICBcIkNBTkNFTF9MRVRURVJcIiwgLy9jYW5jZWxsYXRpb24gbGV0dGVyXHJcbiAgICAgICAgICAgICAgICBcIkRSVUdfTk9USUZfRk9STVwiLCAvLyBkcnVnIG5vdGlmaWNhdGlvbiBmb3JtXHJcbiAgICAgICAgICAgICAgICBcIlBPU1RfQ0xFQVJBTkNFX0RBVEFcIiwgLy9wb3N0IGNsZWFyYW5jZSBkYXRhXHJcbiAgICAgICAgICAgICAgICBcIlBPU1RfTk9DX0NIQU5HRVwiLCAvL1Bvc3QgTk9DIGNoYW5nZVxyXG4gICAgICAgICAgICAgICAgXCJQUklTVElORV9QTVwiLCAvLyBQcmlzdGluZSBQTVxyXG4gICAgICAgICAgICAgICAgXCJQUklTVElORV9QTV8yTEFOR1wiLCAvLyBwcmlzdGluZSBQTSBzZWNvbmQgbGFuZ3VhZ2VcclxuICAgICAgICAgICAgICAgIFwiQkVfQ0xBUklGX1JFU1BPTlNFXCIsIC8vUmVzcG9uc2UgdG8gQkUgY2xhcmlmaWNhdGlvbiByZXF1ZXN0IGRhdGVkLi5cclxuICAgICAgICAgICAgICAgIFwiQ0xJTl9DTEFSSUZfUkVTUE9OU0VcIiwgLy9SZXNwb25zZSB0byBjbGluaWNhbCBjbGFyaWZpYWN0aW9uIHJlcXVlc3RcclxuICAgICAgICAgICAgICAgIFwiRU1BSUxfUlFfUkVTUE9OU0VcIiwvLyByZXNwb25zZSB0byBlbWFpbCByZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICBcIkxBQkVMX0NMQVJJRl9SRVNQT05TRVwiLCAvL1Jlc3BvbnNlIHRvIGxhYmVsbGluZyBjbGFyaWZpY2F0aW9uIHJlcXVlc3RcclxuICAgICAgICAgICAgICAgIFwiTk9DX1JFU1BPTlNFXCIsIC8vcmVzcG9uc2UgdG8gTk9DLyBjLVFuXHJcbiAgICAgICAgICAgICAgICBcIk5PRF9SRVNQT05TRVwiLCAvL1Jlc3BvbnNlIHRvIE5PRFxyXG4gICAgICAgICAgICAgICAgXCJOT05fUkVTUE9OU0VcIiwgLy9SZXNwb25zZSB0byBOT05cclxuICAgICAgICAgICAgICAgIFwiUFJPQ0VTU0lOR19DTEFSSUZfUkVTUE9OU0VcIiwgLy9SZXNwb25zZSB0byBwcm9jZXNzaW5nIENsYXJpZmljYXRpb24gUmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgXCJRVUFMX0NMSU5fQ0xBUklGX1JFU1BPTlNFXCIsIC8vUmVzcG9uc2UgdG8gcXVhbGl0eSBhbmQgQ2xpbmljYWwgY2xhcmlmaWNhdGlvbiBSRXF1ZXN0XHJcbiAgICAgICAgICAgICAgICBcIlFVQUxfQ0xBUklGX1JFU1BPTlNFXCIsIC8vUmVzcG9uc2UgdG8gUXVhbGl0eSBDbGFyaWZpY2F0aW9uIHJlcXVlc3RcclxuICAgICAgICAgICAgICAgIFwiU0NSRUVOSU5HX0FDQ0VQVF9SRVNQT05TRVwiLCAvL3Jlc3BvbnNlIHRvIHNjcmVlbmluZyBhY2NlcHRhbmNlIGxldHRlclxyXG4gICAgICAgICAgICAgICAgXCJTQ1JFRU5JTkdfQ0xBUklGX1JFU1BPTlNFXCIsIC8vIHJlc3BvbnNlIHRvIHNjcmVlbmluZyBjbGFyaWZpY2F0aW9uIHJlcXVlc3RcclxuICAgICAgICAgICAgICAgIFwiU0ROX1JFU1BPTlNFXCIsIC8vcmVzcG9uc2UgdG8gU0ROXHJcbiAgICAgICAgICAgICAgICBcIlBIT05FX1JRX1JFU1BPTlNFXCIsIC8vUmVzcG9uc2UgdG8gdGVsZXBob25lIFJlcXVlc3RcclxuICAgICAgICAgICAgICAgIFwiVU5TT0xJQ0lURURfREFUQVwiIC8vVW5zb2xpY2l0ZWQgRGF0YVxyXG4gICAgICAgICAgICBdKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGdldFNORFNBcnJheSgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIChbXHJcbiAgICAgICAgICAgICAgICBcIkFETUlOSVNUUkFUSVZFXCIsIC8vYWRtaW5pc3RyYXRpdmVcclxuICAgICAgICAgICAgICAgIFwiQ0FOQ0VMX0xFVFRFUlwiLCAvL2NhbmNlbGxhdGlvbiBsZXR0ZXJcclxuICAgICAgICAgICAgICAgIFwiQ09NTUVOVFNfU1VNTUFSWV9CQVNJU1wiLCAvL2NvbW1tZW50cyBvbiBzdW1tYXJ5IGJhc2lzXHJcbiAgICAgICAgICAgICAgICBcIkRSVUdfTk9USUZfRk9STVwiLCAvLyBkcnVnIG5vdGlmaWNhdGlvbiBmb3JtXHJcbiAgICAgICAgICAgICAgICBcIlBPU1RfQ0xFQVJBTkNFX0RBVEFcIiwgLy9wb3N0IGNsZWFyYW5jZSBkYXRhXHJcbiAgICAgICAgICAgICAgICBcIlBPU1RfTk9DX0NIQU5HRVwiLCAvL1Bvc3QgTk9DIGNoYW5nZVxyXG4gICAgICAgICAgICAgICAgXCJQUkVTVUJfTUVFVElOR19QS0dcIiwgLy8gcHJlc3VibWlzc2lvbiBtZWV0aW5nIHBhY2thZ2VcclxuICAgICAgICAgICAgICAgIFwiUFJJT1JJVFlfUkVWSUVXX1JRXCIsIC8vIFByaW9yaXR5IHJld2lldyByZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICBcIlBSSVNUSU5FX1BNXCIsIC8vIFByaXN0aW5lIFBNXHJcbiAgICAgICAgICAgICAgICBcIlBSSVNUSU5FX1BNXzJMQU5HXCIsIC8vIHByaXN0aW5lIFBNIHNlY29uZCBsYW5ndWFnZVxyXG4gICAgICAgICAgICAgICAgXCJCRV9DTEFSSUZfUkVTUE9OU0VcIiwgLy9SZXNwb25zZSB0byBCRSBjbGFyaWZpY2F0aW9uIHJlcXVlc3QgZGF0ZWQuLlxyXG4gICAgICAgICAgICAgICAgXCJDTElOX0NMQVJJRl9SRVNQT05TRVwiLCAvL1Jlc3BvbnNlIHRvIGNsaW5pY2FsIGNsYXJpZmlhY3Rpb24gcmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgXCJFTUFJTF9SUV9SRVNQT05TRVwiLC8vIHJlc3BvbnNlIHRvIGVtYWlsIHJlcXVlc3RcclxuICAgICAgICAgICAgICAgIFwiTEFCRUxfQ0xBUklGX1JFU1BPTlNFXCIsIC8vUmVzcG9uc2UgdG8gbGFiZWxsaW5nIGNsYXJpZmljYXRpb24gcmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgXCJOT0NfUkVTUE9OU0VcIiwgLy9yZXNwb25zZSB0byBOT0MvIGMtUW5cclxuICAgICAgICAgICAgICAgIFwiTk9EX1JFU1BPTlNFXCIsIC8vUmVzcG9uc2UgdG8gTk9EXHJcbiAgICAgICAgICAgICAgICBcIk5PTl9SRVNQT05TRVwiLCAvL1Jlc3BvbnNlIHRvIE5PTlxyXG4gICAgICAgICAgICAgICAgXCJQUk9DRVNTSU5HX0NMQVJJRl9SRVNQT05TRVwiLCAvL1Jlc3BvbnNlIHRvIHByb2Nlc3NpbmcgQ2xhcmlmaWNhdGlvbiBSZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICBcIlFVQUxfQ0xJTl9DTEFSSUZfUkVTUE9OU0VcIiwgLy9SZXNwb25zZSB0byBxdWFsaXR5IGFuZCBDbGluaWNhbCBjbGFyaWZpY2F0aW9uIFJFcXVlc3RcclxuICAgICAgICAgICAgICAgIFwiUVVBTF9DTEFSSUZfUkVTUE9OU0VcIiwgLy9SZXNwb25zZSB0byBRdWFsaXR5IENsYXJpZmljYXRpb24gcmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgXCJTQ1JFRU5JTkdfQUNDRVBUX1JFU1BPTlNFXCIsIC8vcmVzcG9uc2UgdG8gc2NyZWVuaW5nIGFjY2VwdGFuY2UgbGV0dGVyXHJcbiAgICAgICAgICAgICAgICBcIlNDUkVFTklOR19DTEFSSUZfUkVTUE9OU0VcIiwgLy8gcmVzcG9uc2UgdG8gc2NyZWVuaW5nIGNsYXJpZmljYXRpb24gcmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgXCJTRE5fUkVTUE9OU0VcIiwgLy9yZXNwb25zZSB0byBTRE5cclxuICAgICAgICAgICAgICAgIFwiUEhPTkVfUlFfUkVTUE9OU0VcIiwgLy9SZXNwb25zZSB0byB0ZWxlcGhvbmUgUmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgXCJVTlNPTElDSVRFRF9EQVRBXCIgLy9VbnNvbGljaXRlZCBEYXRhXHJcbiAgICAgICAgICAgIF0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZ2V0U05EU0NBcnJheSgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIChbXHJcbiAgICAgICAgICAgICAgICBcIkNBTkNFTF9MRVRURVJcIiwgLy9jYW5jZWxsYXRpb24gbGV0dGVyXHJcbiAgICAgICAgICAgICAgICBcIlBPU1RfTk9DX0NIQU5HRVwiLCAvL1Bvc3QgTk9DIGNoYW5nZVxyXG4gICAgICAgICAgICAgICAgXCJQUklTVElORV9QTVwiLCAvLyBQcmlzdGluZSBQTVxyXG4gICAgICAgICAgICAgICAgXCJQUklTVElORV9QTV8yTEFOR1wiLCAvLyBwcmlzdGluZSBQTSBzZWNvbmQgbGFuZ3VhZ2VcclxuICAgICAgICAgICAgICAgIFwiQ0xJTl9DTEFSSUZfUkVTUE9OU0VcIiwgLy9SZXNwb25zZSB0byBjbGluaWNhbCBjbGFyaWZpYWN0aW9uIHJlcXVlc3RcclxuICAgICAgICAgICAgICAgIFwiRU1BSUxfUlFfUkVTUE9OU0VcIiwvLyByZXNwb25zZSB0byBlbWFpbCByZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICBcIkxBQkVMX0NMQVJJRl9SRVNQT05TRVwiLCAvL1Jlc3BvbnNlIHRvIGxhYmVsbGluZyBjbGFyaWZpY2F0aW9uIHJlcXVlc3RcclxuICAgICAgICAgICAgICAgIFwiTk9DX1JFU1BPTlNFXCIsIC8vcmVzcG9uc2UgdG8gTk9DLyBjLVFuXHJcbiAgICAgICAgICAgICAgICBcIk5PRF9SRVNQT05TRVwiLCAvL1Jlc3BvbnNlIHRvIE5PRFxyXG4gICAgICAgICAgICAgICAgXCJOT05fUkVTUE9OU0VcIiwgLy9SZXNwb25zZSB0byBOT05cclxuICAgICAgICAgICAgICAgIFwiUFJPQ0VTU0lOR19DTEFSSUZfUkVTUE9OU0VcIiwgLy9SZXNwb25zZSB0byBwcm9jZXNzaW5nIENsYXJpZmljYXRpb24gUmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgXCJQSE9ORV9SUV9SRVNQT05TRVwiLCAvL1Jlc3BvbnNlIHRvIHRlbGVwaG9uZSBSZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICBcIlJJU0tfQ09NTVVOX0RPQ1wiLCAvL1Jpc2sgY29tbXVuaWNhdGlvbiBkb2N1bWVudFxyXG4gICAgICAgICAgICAgICAgXCJTSUdOQUxfV09SS19VUFwiIC8vU2lnbmFsIFdvcmsgdXBcclxuICAgICAgICAgICAgXSk7XHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZ2V0VURQVkFycmF5KCkge1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIChbXHJcbiAgICAgICAgICAgICAgICBcIkJFTkVGSVRfUklTS19BU1NFU1NcIiwgLy9iZW5lZml0IHJpc2sgYXNzZXNzbWVudFxyXG4gICAgICAgICAgICAgICAgXCJDQU5DRUxfTEVUVEVSXCIsIC8vY2FuY2VsbGF0aW9uIGxldHRlclxyXG4gICAgICAgICAgICAgICAgXCJOT1RJRklDQVRJT05fQ0hBTkdFXCIsIC8vbm90aWZpY2FpdG9uIG9mIGNoYW5nZSBpbiBiZW5lZml0IHByb2ZpbGVcclxuICAgICAgICAgICAgICAgIFwiUE9TVF9NQVJLRVRfU1VSVlwiLCAvLyBwb3N0IG1hcmtldGluZyBzdXJ2ZWlsbGFuY2VcclxuICAgICAgICAgICAgICAgIFwiRU1BSUxfUlFfUkVTUE9OU0VcIiwvLyByZXNwb25zZSB0byBlbWFpbCByZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICBcIk1IUERfUlFfUkVTUE9OU0VcIiwgLy9SZXNwb25zZSB0byBNSFBEIHJlcXVlc3RzXHJcbiAgICAgICAgICAgICAgICBcIlBST0NFU1NJTkdfQ0xBUklGX1JFU1BPTlNFXCIsIC8vUmVzcG9uc2UgdG8gcHJvY2Vzc2luZyBDbGFyaWZpY2F0aW9uIFJlcXVlc3RcclxuICAgICAgICAgICAgICAgIFwiUEhPTkVfUlFfUkVTUE9OU0VcIiwgLy9SZXNwb25zZSB0byB0ZWxlcGhvbmUgUmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgXCJSSVNLX0NPTU1VTl9ET0NcIiwgLy9SaXNrIGNvbW11bmljYXRpb24gZG9jdW1lbnRcclxuICAgICAgICAgICAgICAgIFwiU0lHTkFMX1dPUktfVVBcIiAvL1NpZ25hbCBXb3JrIHVwXHJcbiAgICAgICAgICAgIF0pXHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZ2V0VURSQVZBcnJheSgpIHtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiAoW1xyXG4gICAgICAgICAgICAgICAgXCJDQU5DRUxfTEVUVEVSXCIsIC8vY2FuY2VsbGF0aW9uIGxldHRlclxyXG4gICAgICAgICAgICAgICAgXCJESU5fRElTQ09OVElOVUVEXCIsIC8vIGRpbiBkaXNjb250aW51ZWRcclxuICAgICAgICAgICAgICAgIFwiQURWSVNFTUVOVF9MRVRURVJfUkVTUE9OU0VcIiwgLy9SRXNwb3NlIHRvIEFkdmlzZW1lbnQgTGV0dGVyIGRhdGVkXHJcbiAgICAgICAgICAgICAgICBcIkVNQUlMX1JRX1JFU1BPTlNFXCIsLy8gcmVzcG9uc2UgdG8gZW1haWwgcmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgXCJQUk9DRVNTSU5HX0NMQVJJRl9SRVNQT05TRVwiLCAvL1Jlc3BvbnNlIHRvIHByb2Nlc3NpbmcgQ2xhcmlmaWNhdGlvbiBSZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICBcIlBIT05FX1JRX1JFU1BPTlNFXCIsIC8vUmVzcG9uc2UgdG8gdGVsZXBob25lIFJlcXVlc3RcclxuICAgICAgICAgICAgICAgIFwiVU5TT0xJQ0lURURfREFUQVwiXHJcbiAgICAgICAgICAgIF0pXHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZ2V0Q29uc3VsdEFycmF5KCkge1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIChbXHJcbiAgICAgICAgICAgICAgICBcIlBBTkRFTUlDX0FQUExcIiAvL3BhbmRlbWljIGFwcGxpY2FpdG9uLFxyXG4gICAgICAgICAgICBdKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gX2dldE1QTkNBcnJheSgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIChbXHJcbiAgICAgICAgICAgICAgICBcIkNBTkNFTF9MRVRURVJcIiwgLy9jYW5jZWxsYXRpb24gbGV0dGVyXHJcbiAgICAgICAgICAgICAgICBcIk1FRVRJTkdfTUlOVVRFU1wiLFxyXG4gICAgICAgICAgICAgICAgXCJFTUFJTF9SUV9SRVNQT05TRVwiLC8vIHJlc3BvbnNlIHRvIGVtYWlsIHJlcXVlc3RcclxuICAgICAgICAgICAgICAgIFwiUFJPQ0VTU0lOR19DTEFSSUZfUkVTUE9OU0VcIiwgLy9SZXNwb25zZSB0byBwcm9jZXNzaW5nIENsYXJpZmljYXRpb24gUmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgXCJQSE9ORV9SUV9SRVNQT05TRVwiIC8vUmVzcG9uc2UgdG8gdGVsZXBob25lIFJlcXVlc3RcclxuICAgICAgICAgICAgXSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBfZ2V0TVBORFNBcnJheSgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIChbXHJcbiAgICAgICAgICAgICAgICBcIkNBTkNFTF9MRVRURVJcIiwgLy9jYW5jZWxsYXRpb24gbGV0dGVyXHJcbiAgICAgICAgICAgICAgICBcIk1FRVRJTkdfTUlOVVRFU1wiLFxyXG4gICAgICAgICAgICAgICAgXCJFTUFJTF9SUV9SRVNQT05TRVwiLC8vIHJlc3BvbnNlIHRvIGVtYWlsIHJlcXVlc3RcclxuICAgICAgICAgICAgICAgIFwiUFJPQ0VTU0lOR19DTEFSSUZfUkVTUE9OU0VcIiwgLy9SZXNwb25zZSB0byBwcm9jZXNzaW5nIENsYXJpZmljYXRpb24gUmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgXCJQSE9ORV9SUV9SRVNQT05TRVwiIC8vUmVzcG9uc2UgdG8gdGVsZXBob25lIFJlcXVlc3RcclxuICAgICAgICAgICAgXSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBfZ2V0TVBTTkRTQXJyYXkoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAoW1xyXG4gICAgICAgICAgICAgICAgXCJDQU5DRUxfTEVUVEVSXCIsIC8vY2FuY2VsbGF0aW9uIGxldHRlclxyXG4gICAgICAgICAgICAgICAgXCJNRUVUSU5HX01JTlVURVNcIixcclxuICAgICAgICAgICAgICAgIFwiRU1BSUxfUlFfUkVTUE9OU0VcIiwvLyByZXNwb25zZSB0byBlbWFpbCByZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICBcIlBST0NFU1NJTkdfQ0xBUklGX1JFU1BPTlNFXCIsIC8vUmVzcG9uc2UgdG8gcHJvY2Vzc2luZyBDbGFyaWZpY2F0aW9uIFJlcXVlc3RcclxuICAgICAgICAgICAgICAgIFwiUEhPTkVfUlFfUkVTUE9OU0VcIiAvL1Jlc3BvbnNlIHRvIHRlbGVwaG9uZSBSZXF1ZXN0XHJcbiAgICAgICAgICAgIF0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gX2dldFBBTkRBcnJheSgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIChbXHJcbiAgICAgICAgICAgICAgICBcIkNBTkNFTF9MRVRURVJcIiwgLy9jYW5jZWxsYXRpb24gbGV0dGVyXHJcbiAgICAgICAgICAgICAgICBcIkVNQUlMX1JRX1JFU1BPTlNFXCIsLy8gcmVzcG9uc2UgdG8gZW1haWwgcmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgXCJQUk9DRVNTSU5HX0NMQVJJRl9SRVNQT05TRVwiLCAvL1Jlc3BvbnNlIHRvIHByb2Nlc3NpbmcgQ2xhcmlmaWNhdGlvbiBSZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICBcIlBIT05FX1JRX1JFU1BPTlNFXCIgLy9SZXNwb25zZSB0byB0ZWxlcGhvbmUgUmVxdWVzdFxyXG4gICAgICAgICAgICBdKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIF9nZXRQQlJFUkNBcnJheSgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIChbXHJcbiAgICAgICAgICAgICAgICBcIkNBTkNFTF9MRVRURVJcIiwgLy9jYW5jZWxsYXRpb24gbGV0dGVyXHJcbiAgICAgICAgICAgICAgICBcIkVNQUlMX1JRX1JFU1BPTlNFXCIsLy8gcmVzcG9uc2UgdG8gZW1haWwgcmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgXCJQUk9DRVNTSU5HX0NMQVJJRl9SRVNQT05TRVwiLCAvL1Jlc3BvbnNlIHRvIHByb2Nlc3NpbmcgQ2xhcmlmaWNhdGlvbiBSZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICBcIlBIT05FX1JRX1JFU1BPTlNFXCIgLy9SZXNwb25zZSB0byB0ZWxlcGhvbmUgUmVxdWVzdFxyXG4gICAgICAgICAgICBdKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIF9nZXRQQlJFUlBWQXJyYXkoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAoW1xyXG4gICAgICAgICAgICAgICAgXCJDQU5DRUxfTEVUVEVSXCIsIC8vY2FuY2VsbGF0aW9uIGxldHRlclxyXG4gICAgICAgICAgICAgICAgXCJFTUFJTF9SUV9SRVNQT05TRVwiLC8vIHJlc3BvbnNlIHRvIGVtYWlsIHJlcXVlc3RcclxuICAgICAgICAgICAgICAgIFwiUFJPQ0VTU0lOR19DTEFSSUZfUkVTUE9OU0VcIiwgLy9SZXNwb25zZSB0byBwcm9jZXNzaW5nIENsYXJpZmljYXRpb24gUmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgXCJQSE9ORV9SUV9SRVNQT05TRVwiIC8vUmVzcG9uc2UgdG8gdGVsZXBob25lIFJlcXVlc3RcclxuICAgICAgICAgICAgXSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiAgX2dldFBSTkRTQXJyYXkoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAoW1xyXG4gICAgICAgICAgICAgICAgXCJDQU5DRUxfTEVUVEVSXCIsIC8vY2FuY2VsbGF0aW9uIGxldHRlclxyXG4gICAgICAgICAgICAgICAgXCJFTUFJTF9SUV9SRVNQT05TRVwiLC8vIHJlc3BvbnNlIHRvIGVtYWlsIHJlcXVlc3RcclxuICAgICAgICAgICAgICAgIFwiUFJPQ0VTU0lOR19DTEFSSUZfUkVTUE9OU0VcIiwgLy9SZXNwb25zZSB0byBwcm9jZXNzaW5nIENsYXJpZmljYXRpb24gUmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgXCJQSE9ORV9SUV9SRVNQT05TRVwiIC8vUmVzcG9uc2UgdG8gdGVsZXBob25lIFJlcXVlc3RcclxuICAgICAgICAgICAgXSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBfZ2V0UFJTTkRTQXJyYXkoKXtcclxuICAgICAgICAgICAgcmV0dXJuIChbXHJcbiAgICAgICAgICAgICAgICBcIkNBTkNFTF9MRVRURVJcIiwgLy9jYW5jZWxsYXRpb24gbGV0dGVyXHJcbiAgICAgICAgICAgICAgICBcIkVNQUlMX1JRX1JFU1BPTlNFXCIsLy8gcmVzcG9uc2UgdG8gZW1haWwgcmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgXCJQUk9DRVNTSU5HX0NMQVJJRl9SRVNQT05TRVwiLCAvL1Jlc3BvbnNlIHRvIHByb2Nlc3NpbmcgQ2xhcmlmaWNhdGlvbiBSZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICBcIlBIT05FX1JRX1JFU1BPTlNFXCIgLy9SZXNwb25zZSB0byB0ZWxlcGhvbmUgUmVxdWVzdFxyXG4gICAgICAgICAgICBdKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGdldFlCUFJBcnJheSgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIChbXHJcbiAgICAgICAgICAgICAgICBcIkNBTkNFTF9MRVRURVJcIiwgLy9jYW5jZWxsYXRpb24gbGV0dGVyXHJcbiAgICAgICAgICAgICAgICBcIkZPUl9QRVJJT0RcIiwgLy9mb3IgcGVyaW9kIG9mIC4uLi5cclxuICAgICAgICAgICAgICAgIFwiRU1BSUxfUlFfUkVTUE9OU0VcIiwvLyByZXNwb25zZSB0byBlbWFpbCByZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICBcIlBST0NFU1NJTkdfQ0xBUklGX1JFU1BPTlNFXCIsIC8vUmVzcG9uc2UgdG8gcHJvY2Vzc2luZyBDbGFyaWZpY2F0aW9uIFJlcXVlc3RcclxuICAgICAgICAgICAgICAgIFwiUEhPTkVfUlFfUkVTUE9OU0VcIiAvL1Jlc3BvbnNlIHRvIHRlbGVwaG9uZSBSZXF1ZXN0XHJcbiAgICAgICAgICAgIF0pO1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgfVxyXG59KSgpO1xyXG4iLCIvKipcclxuICogQ3JlYXRlZCBieSBka2lsdHkgb24gMDcvMDYvMjAxNi5cclxuICpcclxuICovXHJcblxyXG4oZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ2ZpbHRlckxpc3RzJywgWydocGZiQ29uc3RhbnRzJ10pO1xyXG59KSgpO1xyXG5cclxuKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgnZmlsdGVyTGlzdHMnKVxyXG4gICAgICAgIC5maWx0ZXIoJ29yZGVyQnlUcmFuc2xhdGVkQ291bnRyeScsIG9yZGVyQnlUcmFuc2xhdGVkQ291bnRyeSlcclxuICAgICAgICAuZmlsdGVyKCdvcmRlckJ5VHJhbnNsYXRlZCcsIG9yZGVyQnlUcmFuc2xhdGVkKVxyXG4gICAgICAgIC5maWx0ZXIoJ29yZGVyQnlUcmFuc2xhdGVkT3RoZXJGaXJzdCcsIG9yZGVyQnlUcmFuc2xhdGVkT3RoZXJGaXJzdClcclxuICAgICAgICAuZmlsdGVyKCdvcmRlckJ5Q291bnRyeUFuZExhYmVsJywgb3JkZXJCeVRyYW5zbGF0ZWRDb3VudHJ5QW5kTGFiZWwpXHJcbiAgICAgICAgLmZpbHRlcignb3JkZXJCeUxvY2FsZScsX29yZGVyQnlMb2NhbGUpXHJcbiAgICAgICAgLmZpbHRlcignZmluZENvdW50cnlPYmplY3QnLCBmaW5kQ291bnRyeU9iailcclxuICAgICAgICAuZmlsdGVyKCdzZXF1ZW5jZU9yZGVyRGVzY2VuZGluZycsIHNlcXVlbmNlT3JkZXJCeSk7XHJcblxyXG4gICAgb3JkZXJCeVRyYW5zbGF0ZWRDb3VudHJ5LiRpbmplY3QgPSBbJyR0cmFuc2xhdGUnLCAnJGZpbHRlcicsICdDQU5BREEnLCAnVVNBJ107XHJcbiAgICBvcmRlckJ5VHJhbnNsYXRlZC4kaW5qZWN0ID0gWyckdHJhbnNsYXRlJywgJyRmaWx0ZXInXTtcclxuICAgIG9yZGVyQnlUcmFuc2xhdGVkT3RoZXJGaXJzdC4kaW5qZWN0ID0gWyckdHJhbnNsYXRlJywgJyRmaWx0ZXInLCAnT1RIRVInXTtcclxuXHJcbiAgICBmdW5jdGlvbiBvcmRlckJ5VHJhbnNsYXRlZENvdW50cnkoJHRyYW5zbGF0ZSwgJGZpbHRlciwgQ0FOQURBLCBVU0EpIHtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGFycmF5LCBvYmpLZXkpIHtcclxuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IFtdO1xyXG4gICAgICAgICAgICB2YXIgdHJhbnNsYXRlZCA9IFtdO1xyXG4gICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goYXJyYXksIGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgdHJhbnNsYXRlZC5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICBrZXk6IHZhbHVlLFxyXG4gICAgICAgICAgICAgICAgICAgIGxhYmVsOiAkdHJhbnNsYXRlLmluc3RhbnQodmFsdWUpXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKENBTkFEQSk7XHJcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKFVTQSk7XHJcbiAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaCgkZmlsdGVyKCdvcmRlckJ5JykodHJhbnNsYXRlZCwgJ2xhYmVsJyksIGZ1bmN0aW9uIChzb3J0ZWRPYmplY3QpIHtcclxuICAgICAgICAgICAgICAgIGlmIChzb3J0ZWRPYmplY3Qua2V5ICE9PSBDQU5BREEgJiYgc29ydGVkT2JqZWN0LmtleSAhPT0gVVNBKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goc29ydGVkT2JqZWN0LmtleSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBPcmRlcnMgY291bnRyeSBsaXN0IGJ5IHRyYW5zbGF0ZWQgdmFsdWUgYW5kIGNyZWF0ZXMgYSBsaXN0IG9mIHNhdmVkIGFuZCBkaXNwbGF5ZWQgdmFsdWVcclxuICAgICAqIEBwYXJhbSAkdHJhbnNsYXRlXHJcbiAgICAgKiBAcGFyYW0gJGZpbHRlclxyXG4gICAgICogQHBhcmFtIENBTkFEQVxyXG4gICAgICogQHBhcmFtIFVTQVxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBvcmRlckJ5VHJhbnNsYXRlZENvdW50cnlBbmRMYWJlbCgkdHJhbnNsYXRlLCAkZmlsdGVyLCBDQU5BREEsIFVTQSkge1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoYXJyYXkpIHtcclxuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IFtdO1xyXG4gICAgICAgICAgICB2YXIgdHJhbnNsYXRlZCA9IFtdO1xyXG4gICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goYXJyYXksIGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgdHJhbnNsYXRlZC5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICBrZXk6IHZhbHVlLFxyXG4gICAgICAgICAgICAgICAgICAgIGxhYmVsOiAkdHJhbnNsYXRlLmluc3RhbnQodmFsdWUpXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAvL3RvcCBvZiB0aGUgbGlzdFxyXG4gICAgICAgICAgICByZXN1bHQucHVzaCh7a2V5OiBDQU5BREEsIGxhYmVsOiAkdHJhbnNsYXRlLmluc3RhbnQoQ0FOQURBKX0pO1xyXG4gICAgICAgICAgICByZXN1bHQucHVzaCh7a2V5OiBVU0EsIGxhYmVsOiAkdHJhbnNsYXRlLmluc3RhbnQoVVNBKX0pO1xyXG4gICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goJGZpbHRlcignb3JkZXJCeScpKHRyYW5zbGF0ZWQsICdsYWJlbCcpLCBmdW5jdGlvbiAoc29ydGVkT2JqZWN0KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoc29ydGVkT2JqZWN0LmtleSAhPT0gQ0FOQURBICYmIHNvcnRlZE9iamVjdC5rZXkgIT09IFVTQSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHNvcnRlZE9iamVjdCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gZmluZENvdW50cnlPYmooKSB7XHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhcnJheSwgdGFyZ2V0S2V5KSB7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyYXkubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGlmIChhcnJheVtpXS5rZXkgPT09IHRhcmdldEtleSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoYXJyYXlbaV0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsOyAvL25vdCBmb3VuZFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG5cclxuICAgIGZ1bmN0aW9uIG9yZGVyQnlUcmFuc2xhdGVkKCR0cmFuc2xhdGUsICRmaWx0ZXIpIHtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGFycmF5KSB7XHJcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSBbXTtcclxuICAgICAgICAgICAgdmFyIHRyYW5zbGF0ZWQgPSBbXTtcclxuICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKGFycmF5LCBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIHRyYW5zbGF0ZWQucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAga2V5OiB2YWx1ZSxcclxuICAgICAgICAgICAgICAgICAgICBsYWJlbDogJHRyYW5zbGF0ZS5pbnN0YW50KHZhbHVlKVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goJGZpbHRlcignb3JkZXJCeScpKHRyYW5zbGF0ZWQsICdsYWJlbCcpLCBmdW5jdGlvbiAoc29ydGVkT2JqZWN0KSB7XHJcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaChzb3J0ZWRPYmplY3Qua2V5KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBzZXF1ZW5jZU9yZGVyQnkoJGZpbHRlcikge1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoYXJyYXkpIHtcclxuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IFtdO1xyXG4gICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goJGZpbHRlcignb3JkZXJCeScpKGFycmF5LCAnc2VxdWVuY2UnLCB0cnVlKSwgZnVuY3Rpb24gKHNvcnRlZE9iamVjdCkge1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goc29ydGVkT2JqZWN0KTtcclxuXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgLypcclxuICAgICBPcmRlcnMgdmFsdWVzXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIG9yZGVyQnlUcmFuc2xhdGVkT3RoZXJGaXJzdCgkdHJhbnNsYXRlLCAkZmlsdGVyLCBPVEhFUikge1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoYXJyYXkpIHtcclxuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IFtdO1xyXG4gICAgICAgICAgICB2YXIgdHJhbnNsYXRlZCA9IFtdO1xyXG4gICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goYXJyYXksIGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgdHJhbnNsYXRlZC5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICBrZXk6IHZhbHVlLFxyXG4gICAgICAgICAgICAgICAgICAgIGxhYmVsOiAkdHJhbnNsYXRlLmluc3RhbnQodmFsdWUpXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKE9USEVSKTtcclxuICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKCRmaWx0ZXIoJ29yZGVyQnknKSh0cmFuc2xhdGVkLCAnbGFiZWwnKSwgZnVuY3Rpb24gKHNvcnRlZE9iamVjdCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHNvcnRlZE9iamVjdC5rZXkgIT09IE9USEVSKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goc29ydGVkT2JqZWN0LmtleSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTb3J0cyBieSBsb2NhbGUgc3BlY2lmaWVkIGJ5IGFuZ3VsYXIgdHJhbnNsYXRlXHJcbiAgICAgKiBAcGFyYW0gJHRyYW5zbGF0ZVxyXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufVxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gX29yZGVyQnlMb2NhbGUoKSB7XHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChpdGVtcyxsYW5nKSB7XHJcblxyXG4gICAgICAgICAgICBpdGVtcy5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYVtsYW5nXS5sb2NhbGVDb21wYXJlKGJbbGFuZ10sbGFuZyk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICByZXR1cm4gaXRlbXM7XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgfSkoKTsiLCIvKipcclxuICogQ3JlYXRlZCBieSBka2lsdHkgb24gMjIvMDkvMjAxNi5cclxuICovXHJcblxyXG5cclxuKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKCdyZXBDb250YWN0U2VydmljZScsIFtdKVxyXG59KSgpO1xyXG5cclxuXHJcbihmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgncmVwQ29udGFjdFNlcnZpY2UnKVxyXG4gICAgICAgIC5mYWN0b3J5KCdSZXBDb250YWN0U2VydmljZScsIFJlcENvbnRhY3RTZXJ2aWNlKTtcclxuXHJcbiAgICBmdW5jdGlvbiBSZXBDb250YWN0U2VydmljZSgpIHtcclxuXHJcbiAgICAgICAgLy9jb25zdHJ1Y3RvclxyXG4gICAgICAgIGZ1bmN0aW9uIFJlcENvbnRhY3RTZXJ2aWNlKCkge1xyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIFJlcENvbnRhY3RTZXJ2aWNlLnByb3RvdHlwZSA9IHtcclxuICAgICAgICAgICAgX2RlZmF1bHQ6IHt9XHJcbiAgICAgICAgfTtcclxuICAgICAgICBSZXBDb250YWN0U2VydmljZS5wcm90b3R5cGUuZ2V0UHJpbWFyeVJvbGU9ZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgcmV0dXJuIFwiUFJJTUFSWVwiO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgUmVwQ29udGFjdFNlcnZpY2UucHJvdG90eXBlLmdldFNlY29uZGFyeVJvbGU9ZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgcmV0dXJuIFwiU0VDT05EQVJZXCI7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgUmVwQ29udGFjdFNlcnZpY2UucHJvdG90eXBlLmNyZWF0ZVJlcENvbnRhY3QgPSBmdW5jdGlvbihyZXBDb250YWN0TGlzdCl7XHJcbiAgICAgICAgICAgIGlmKCFyZXBDb250YWN0TGlzdCkgcmV0dXJuO1xyXG4gICAgICAgICAgICB2YXIgUFJJTUFSWT10aGlzLmdldFByaW1hcnlSb2xlKCk7XHJcbiAgICAgICAgICAgIHZhciBTRUNPTkRBUlk9dGhpcy5nZXRTZWNvbmRhcnlSb2xlKCk7XHJcbiAgICAgICAgICAgIHZhciBjb250YWN0ID0gX2NyZWF0ZURlZmF1bHRSZXBDb250YWN0KCk7XHJcblxyXG4gICAgICAgICAgICB2YXIgY3VycmVudENvbnRhY3RzID0gcmVwQ29udGFjdExpc3Q7XHJcbiAgICAgICAgICAgIGlmIChjdXJyZW50Q29udGFjdHMubGVuZ3RoID09IDApIHtcclxuICAgICAgICAgICAgICAgIGNvbnRhY3QucmVwUm9sZSA9IFBSSU1BUlk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjb250YWN0LnJlcFJvbGUgPSBQUklNQVJZO1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjdXJyZW50Q29udGFjdHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoY3VycmVudENvbnRhY3RzW2ldLnJlcFJvbGUgPT0gUFJJTUFSWSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250YWN0LnJlcFJvbGUgPSBTRUNPTkRBUlk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gY29udGFjdFxyXG4gICAgICAgIH07XHJcblxyXG5cclxuICAgICAgICByZXR1cm4gUmVwQ29udGFjdFNlcnZpY2U7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlcyBhIGRlZmF1bHQgUkVQIGNvbnRhY3Qgd2l0aCBubyByb2xlIGFzc2lnbmVkXHJcbiAgICAgKiBAcmV0dXJucyB7Kn1cclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIF9jcmVhdGVEZWZhdWx0UmVwQ29udGFjdCgpe1xyXG5cclxuICAgICAgICB2YXIgcmVwY29udGFjdD0gIF9jcmVhdGVDb250YWN0TW9kZWwoKTtcclxuICAgICAgICByZXBjb250YWN0LnJlcFJvbGUgPSBcIlwiO1xyXG4gICAgICAgIHJlcGNvbnRhY3QuYW1lbmQ9ZmFsc2U7XHJcbiAgICAgICAgcmV0dXJuIHJlcGNvbnRhY3RcclxuICAgIH1cclxuXHJcblxyXG4gICAgZnVuY3Rpb24gX2NyZWF0ZUNvbnRhY3RNb2RlbCgpIHtcclxuICAgICAgICB2YXIgY29udGFjdCA9IHt9O1xyXG4gICAgICAgIGNvbnRhY3Quc2FsdXRhdGlvbiA9IFwiXCI7XHJcbiAgICAgICAgY29udGFjdC5naXZlbk5hbWUgPSBcIlwiO1xyXG4gICAgICAgIGNvbnRhY3QuaW5pdGlhbHMgPSBcIlwiO1xyXG4gICAgICAgIGNvbnRhY3Quc3VybmFtZSA9IFwiXCI7XHJcbiAgICAgICAgY29udGFjdC50aXRsZSA9IFwiXCI7XHJcbiAgICAgICAgY29udGFjdC5sYW5ndWFnZSA9IFwiXCI7XHJcbiAgICAgICAgY29udGFjdC5waG9uZSA9IFwiXCI7XHJcbiAgICAgICAgY29udGFjdC5waG9uZUV4dCA9IFwiXCI7XHJcbiAgICAgICAgY29udGFjdC5mYXggPSBcIlwiO1xyXG4gICAgICAgIGNvbnRhY3QuZW1haWwgPSBcIlwiO1xyXG4gICAgICAgIHJldHVybiBjb250YWN0O1xyXG4gICAgfVxyXG5cclxuXHJcblxyXG59KSgpO1xyXG4iLCIvKipcclxuICogQ3JlYXRlZCBieSBoY3VzZXIgb24gMDcvMDYvMjAxNi5cclxuICovXHJcbihmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ2hwZmJDb25zdGFudHMnLCBbXSk7XHJcblxyXG4gICAgYW5ndWxhci5tb2R1bGUoJ2hwZmJDb25zdGFudHMnKVxyXG4gICAgICAgIC5jb25zdGFudCgnQ0FOQURBJywnQ0FOJylcclxuICAgICAgICAuY29uc3RhbnQoJ09USEVSJywgJ09USEVSJylcclxuICAgICAgICAuY29uc3RhbnQoJ1lFUycsICdZJylcclxuICAgICAgICAuY29uc3RhbnQoJ05PJywgJ04nKVxyXG4gICAgICAgIC5jb25zdGFudCgnVVNBJywnVVNBJylcclxuICAgICAgICAuY29uc3RhbnQoXCJVTktOT1dOXCIsXCJVTktOT1dOXCIpXHJcbiAgICAgICAgLmNvbnN0YW50KFwiRU5HTElTSFwiLFwiZW5cIilcclxuICAgICAgICAuY29uc3RhbnQoXCJGUkVOQ0hcIixcImZyXCIpO1xyXG5cclxufSkoKTsiLCIvKipcclxuICogQ3JlYXRlZCBieSBka2lsdHkgb24gOC8yNi8yMDE2LlxyXG4gKi9cclxuLyoqXHJcbiAqIENyZWF0ZWQgYnkgZGtpbHR5IG9uIDEyLzA4LzIwMTYuXHJcbiAqL1xyXG5cclxuKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgnYXBwbGljYXRpb25JbmZvU2VydmljZScsIFtdKVxyXG59KSgpO1xyXG5cclxuXHJcbihmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgnYXBwbGljYXRpb25JbmZvU2VydmljZScpXHJcbiAgICAgICAgLmZhY3RvcnkoJ0FwcGxpY2F0aW9uSW5mb1NlcnZpY2UnLCBBcHBsaWNhdGlvbkluZm9TZXJ2aWNlKTtcclxuXHJcbiAgICBmdW5jdGlvbiBBcHBsaWNhdGlvbkluZm9TZXJ2aWNlKCkge1xyXG4gICAgICAgIGZ1bmN0aW9uIEFwcGxpY2F0aW9uSW5mb1NlcnZpY2UoKSB7XHJcbiAgICAgICAgICAgIC8vY29uc3RydWN0b3IgaGVyZVxyXG4gICAgICAgIH1cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAbmdkb2MgbWV0aG9kIGdldHMgdGhlIGN1cnJlbnQgZGF0ZSBmb3JtYXR0ZWQgYXMgWVlZWS1NTS1ERFxyXG4gICAgICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBBcHBsaWNhdGlvbkluZm9TZXJ2aWNlLnByb3RvdHlwZS5nZXRUb2RheURhdGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBkID0gbmV3IERhdGUoKTtcclxuICAgICAgICAgICAgdmFyIGlzb0RhdGUgPSBkLmdldEZ1bGxZZWFyKCkgKyAnLSdcclxuICAgICAgICAgICAgICAgICsgcGFkKGQuZ2V0TW9udGgoKSArIDEpICsgJy0nXHJcbiAgICAgICAgICAgICAgICArIHBhZChkLmdldERhdGUoKSk7XHJcbiAgICAgICAgICAgIHJldHVybiAoaXNvRGF0ZSk7XHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIHBhZChuKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbiA8IDEwID8gJzAnICsgbiA6IG5cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgQXBwbGljYXRpb25JbmZvU2VydmljZS5wcm90b3R5cGUuaW5jcmVtZW50TWlub3JWZXJzaW9uID0gZnVuY3Rpb24gKGVucm9sbWVudFZlcnNpb24pIHtcclxuICAgICAgICAgICAgdmFyIHJlc3VsdDtcclxuICAgICAgICAgICAgaWYgKCFlbnJvbG1lbnRWZXJzaW9uKSB7XHJcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBcIjAuMVwiO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdmFyIHBhcnRzID0gZW5yb2xtZW50VmVyc2lvbi5zcGxpdCgnLicpO1xyXG4gICAgICAgICAgICAgICAgdmFyIGRlYyA9IHBhcnNlSW50KHBhcnRzWzFdKTtcclxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHBhcnRzWzBdICsgXCIuXCIgKyAoZGVjICsgMSk7XHJcblxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiAocmVzdWx0KTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEluY3JlbWVudHMgdGhlIG1ham9yIHZlcnNpb24uIFNldHMgdGhlIG1pbm9yIHRvIGZhbHNlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgQXBwbGljYXRpb25JbmZvU2VydmljZS5wcm90b3R5cGUuaW5jcmVtZW50TWFqb3JWZXJzaW9uID0gZnVuY3Rpb24gKGVucm9sbWVudFZlcnNpb24pIHtcclxuICAgICAgICAgICAgdmFyIHJlc3VsdDtcclxuICAgICAgICAgICAgaWYgKCFlbnJvbG1lbnRWZXJzaW9uKSB7XHJcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBcIjEuMFwiO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdmFyIHBhcnRzID0gZW5yb2xtZW50VmVyc2lvbi5zcGxpdCgnLicpO1xyXG4gICAgICAgICAgICAgICAgdmFyIHdob2xlID0gcGFyc2VJbnQocGFydHNbMF0pO1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gKHdob2xlICsgMSkgKyBcIi4wXCJcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgQXBwbGljYXRpb25JbmZvU2VydmljZS5wcm90b3R5cGUuZ2V0QXBwbGljYXRpb25TdGF0dXNMaXN0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gKFtcIk5FV1wiLCBcIkFNRU5EXCIsIFwiQVBQUk9WRURcIl0pXHJcbiAgICAgICAgfTtcclxuICAgICAgICBBcHBsaWNhdGlvbkluZm9TZXJ2aWNlLnByb3RvdHlwZS5nZXRBcHByb3ZlZFR5cGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBcIkFQUFJPVkVEXCI7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBBcHBsaWNhdGlvbkluZm9TZXJ2aWNlLnByb3RvdHlwZS5nZXRBbWVuZFR5cGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBcIkFNRU5EXCI7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLy8gUmV0dXJuIGEgcmVmZXJlbmNlIHRvIHRoZSBvYmplY3RcclxuICAgICAgICByZXR1cm4gQXBwbGljYXRpb25JbmZvU2VydmljZTtcclxuICAgIH1cclxuXHJcblxyXG59KSgpO1xyXG4iLCIvKipcclxuICogQ3JlYXRlZCBieSBka2lsdHkgb24gMTYvMDEvMjAxNy5cclxuICovXHJcbi8qKlxyXG4gKiBAbmdkb2MgbW9kdWxlIGRlY2xhcmF0aW9uIGZvciBkYXRhbGlzdHNcclxuICovXHJcbihmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgnYWN0aXZpdHlMaXN0cycsIFtdKTtcclxuXHJcbn0pKCk7XHJcblxyXG4oZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKCdhY3Rpdml0eUxpc3RzJylcclxuICAgICAgICAuZmFjdG9yeSgnQWN0aXZpdHlMaXN0RmFjdG9yeScsIGdldFNlcnZpY2UpO1xyXG5cclxuICAgIC8qIEBuZ0luamVjdCAqL1xyXG4gICAgZ2V0U2VydmljZS5pbmplY3QgPSBbJyRodHRwJywgJyRxJywnJGZpbHRlcicsJyR0cmFuc2xhdGUnXTtcclxuICAgIGZ1bmN0aW9uIGdldFNlcnZpY2UoJGh0dHAsJHEsICRmaWx0ZXIsJHRyYW5zbGF0ZSkge1xyXG4gICAgICAgIHZhciB2bSA9IHRoaXM7XHJcbiAgICAgICAgdm0uZmVlQ2xhc3NBcnJheSA9IFtdO1xyXG4gICAgICAgIHZtLnJhVHlwZUFycmF5PVtdO1xyXG4gICAgICAgIHZtLkJJT0xPR0lDQUw9ICBcIkIxNC0yMDE2MDMwMS0wMlwiOyAvL2Jpb2xvZ2ljYWxcclxuICAgICAgICB2bS5OQ19yYVR5cGU9XCJCMDItMjAxNjAzMDEtMDUwXCI7XHJcbiAgICAgICAgdm0uU0FORFNfcmFUeXBlPVwiQjAyLTIwMTYwMzAxLTA4MlwiO1xyXG4gICAgICAgIHZtLlNORFNfcmFUeXBlPVwiQjAyLTIwMTYwMzAxLTA4NFwiO1xyXG4gICAgICAgIHZtLkRJTl9yYVR5cGU9XCJubyB1c2VkLSBkZXByZWNhdGVkP1wiO1xyXG4gICAgICAgIHZhciBzZXJ2aWNlID0ge1xyXG4gICAgICAgICAgICBnZXRGZWVDbGFzc0xpc3Q6IF9nZXRmZWVDbGFzc0FycmF5LFxyXG4gICAgICAgICAgICAvL2NyZWF0ZUZlZUNsYXNzTGlzdDpfY3JlYXRlZmVlQ2xhc3NBcnJheSxcclxuICAgICAgICAgICAgZ2V0UmFUeXBlTGlzdDogX2dldFJhVHlwZUFycmF5LFxyXG4gICAgICAgICAgICAvL2NyZWF0ZVJhVHlwZUxpc3Q6X2NyZWF0ZVJhVHlwZUFycmF5LFxyXG4gICAgICAgICAgICBnZXRBY3Rpdml0eUxlYWRMaXN0Ol9nZXRBY3Rpdml0eUxlYWRBcnJheSxcclxuICAgICAgICAgICAgZ2V0QmlvbG9naWNhbExlYWRWYWx1ZTpfZ2V0QmlvbG9naWNhbExlYWQsXHJcbiAgICAgICAgICAgIGdldFNBTkRTUmFUeXBlVmFsdWU6X2dldFNBTkRTX3JhVHlwZSxcclxuICAgICAgICAgICAgZ2V0U05EU1R5cGVWYWx1ZTogX2dldFNORFNfcmFUeXBlLFxyXG4gICAgICAgICAgICBnZXROQ1R5cGVWYWx1ZTogIF9nZXROQ19yYVR5cGUsXHJcbiAgICAgICAgICAgIGdldERJTlR5cGVWYWx1ZTogIF9nZXRESU5fcmFUeXBlXHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4gc2VydmljZTtcclxuXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEdldHMgdGhlIGZlZSBjbGFzcyBsaXN0LiBJZiB0aGUgbGlzdCBoYXMgbm90IGJlZW4gcmV0cmlldmVkLCBnZXRzIGZyb20gaHR0cCByZXF1ZXN0XHJcbiAgICAgICAgICogQHJldHVybnMgeyp9XHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBmdW5jdGlvbiBfZ2V0ZmVlQ2xhc3NBcnJheSgpe1xyXG4gICAgICAgICAgICBpZighIHZtLmZlZUNsYXNzQXJyYXl8fCB2bS5mZWVDbGFzc0FycmF5Lmxlbmd0aD09PTApIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBfbG9hZEZlZVR5cGUoKVxyXG4gICAgICAgICAgICB9ZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gKHZtLmZlZUNsYXNzQXJyYXkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBHZXRzIHRoZSBmZWV0eXBlIGxpc3QgYnkgaHR0cCByZXF1ZXN0XHJcbiAgICAgICAgICogSnNvbiBwYXRoIGhhcmQgY29kZWQgaW4gZnVuY3Rpb25cclxuICAgICAgICAgKiBAcmV0dXJucyB7Kn1cclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGZ1bmN0aW9uIF9sb2FkRmVlVHlwZSgpe1xyXG4gICAgICAgICAgICB2YXIgZGVmZXJyZWQgPSAkcS5kZWZlcigpO1xyXG4gICAgICAgICAgICB2YXIgZmVlQ2xhc3NVcmwgPVwiZGF0YS9mZWVDbGFzcy5qc29uXCI7XHJcbiAgICAgICAgICAgICRodHRwLmdldChmZWVDbGFzc1VybCkuXHJcbiAgICAgICAgICAgIHN1Y2Nlc3MoZnVuY3Rpb24oZGF0YSwgc3RhdHVzLCBoZWFkZXJzLCBjb25maWcpIHtcclxuICAgICAgICAgICAgICAgIHZhciBsYW5nID0gJHRyYW5zbGF0ZS5wcm9wb3NlZExhbmd1YWdlKCkgfHwgJHRyYW5zbGF0ZS51c2UoKTtcclxuICAgICAgICAgICAgICAgIHZhciBuZXdMaXN0ID0gX2NyZWF0ZVNvcnRlZEFycmF5KGRhdGEsIGxhbmcpO1xyXG4gICAgICAgICAgICAgICAgdm0uZmVlQ2xhc3NBcnJheT1uZXdMaXN0O1xyXG4gICAgICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZShuZXdMaXN0KTtcclxuICAgICAgICAgICAgfSkuXHJcbiAgICAgICAgICAgIGVycm9yKGZ1bmN0aW9uKGRhdGEsIHN0YXR1cywgaGVhZGVycywgY29uZmlnKSB7XHJcbiAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZWplY3Qoc3RhdHVzKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogRGVwcmVjcmF0ZWQuIFdhcyB1c2VkIGJ5IHRoZSBsb2FkIHNlcnZpY2UgZm9yIHRyYW5zYWxhdGlvbnMgVE9ETzogcmVtb3ZlP1xyXG4gICAgICAgICAqIEBwYXJhbSB2YWx1ZVxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZnVuY3Rpb24gX2NyZWF0ZWZlZUNsYXNzQXJyYXkodmFsdWUpe1xyXG4gICAgICAgICAgICB2bS5mZWVDbGFzc0FycmF5PXZhbHVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogR2V0cyB0aGUgUmVndWxhdG9yeSBhY3Rpdml0eSB0eXBlIGxpc3QuIGlmIGRvZXNuJ3QgZXhpc3QsIG1ha2VzIGFuIGh0dHAgcmVxdWVzdFxyXG4gICAgICAgICAqIEByZXR1cm5zIHsqfVxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZnVuY3Rpb24gX2dldFJhVHlwZUFycmF5KCl7XHJcblxyXG4gICAgICAgICAgICBpZighdm0ucmFUeXBlQXJyYXl8fHZtLnJhVHlwZUFycmF5Lmxlbmd0aD09PTApIHtcclxuICAgICAgICAgICAgICAgICAgIHJldHVybiBfbG9hZFJhVHlwZSgpXHJcbiAgICAgICAgICAgIH1lbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAodm0ucmFUeXBlQXJyYXkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBSZWd1bGF0b3J5IEFjdGl2aXR5IHR5cGUgaHR0cCByZXF1ZXN0IGFwcGFyYXR1cy4gV2FpdHMgdmlhIGEgcHJvbWlzZVxyXG4gICAgICAgICAqIEByZXR1cm5zIHsqfVxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZnVuY3Rpb24gX2xvYWRSYVR5cGUoKXtcclxuICAgICAgICAgICAgdmFyIGRlZmVycmVkID0gJHEuZGVmZXIoKTtcclxuICAgICAgICAgICAgdmFyIHJhVHlwZVVybCA9XCJkYXRhL3JhVHlwZS5qc29uXCI7XHJcbiAgICAgICAgICAgICRodHRwLmdldChyYVR5cGVVcmwpLlxyXG4gICAgICAgICAgICBzdWNjZXNzKGZ1bmN0aW9uKGRhdGEsIHN0YXR1cywgaGVhZGVycywgY29uZmlnKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgbGFuZyA9ICR0cmFuc2xhdGUucHJvcG9zZWRMYW5ndWFnZSgpIHx8ICR0cmFuc2xhdGUudXNlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuZXdMaXN0ID0gX2NyZWF0ZVNvcnRlZEFycmF5KGRhdGEsIGxhbmcpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICB2bS5yYVR5cGVBcnJheT1uZXdMaXN0O1xyXG4gICAgICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZShuZXdMaXN0KTtcclxuICAgICAgICAgICAgfSkuXHJcbiAgICAgICAgICAgIGVycm9yKGZ1bmN0aW9uKGRhdGEsIHN0YXR1cywgaGVhZGVycywgY29uZmlnKSB7XHJcbiAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZWplY3Qoc3RhdHVzKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogRGVwcmVjdGF0ZWQuIFdhcyB1c2VkIGJ5IGxvYWQgc2VydmljZSAuIFRPRE86IHJlbW92ZT9cclxuICAgICAgICAgKiBAcGFyYW0gdmFsdWVcclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGZ1bmN0aW9uIF9jcmVhdGVSYVR5cGVBcnJheSh2YWx1ZSl7XHJcblxyXG4gICAgICAgICAgICB2bS5yYVR5cGVBcnJheT12YWx1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEdldHMgdGhlIGFjdGl2aXR5IGxlYWQgYXJyYXkuIEhhcmQgY29kZWQgYXMgdGhlIGJpb2xvZ2ljYWwgZW50cnkgaGFzIGJ1c2luZXNzIGxvZ2ljXHJcbiAgICAgICAgICogQHJldHVybnMge3N0cmluZ1tdfVxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZnVuY3Rpb24gX2dldEFjdGl2aXR5TGVhZEFycmF5KCl7XHJcbiAgICAgICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgICAgICBbXHJcbiAgICAgICAgICAgICAgICAgICAgXCJCMTQtMjAxNjAzMDEtMDlcIiwgLy9QaGFybWFjZXV0aWNhbFxyXG4gICAgICAgICAgICAgICAgICAgIHZtLkJJT0xPR0lDQUwsIC8vQmlvbG9naWNhbFxyXG4gICAgICAgICAgICAgICAgICAgIFwiQjE0LTIwMTYwMzAxLTEwXCIsIC8vUG9zdC1NYXJrZXQgUGhhcm1hY292aWdpbGFuY2VcclxuICAgICAgICAgICAgICAgICAgICBcIkIxNC0yMDE2MDMwMS0wN1wiIC8vRHJ1ZyBNYXN0ZXIgRmlsZVxyXG4gICAgICAgICAgICAgICAgXVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogUmV0dXJucyB0aGUgYmlvbG9naWNhbCBBY3Rpdml0eSBMZWFkIHZhbHVlXHJcbiAgICAgICAgICogQHJldHVybnMge3N0cmluZ31cclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGZ1bmN0aW9uIF9nZXRCaW9sb2dpY2FsTGVhZCgpe1xyXG4gICAgICAgICAgICByZXR1cm4gdm0uQklPTE9HSUNBTDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFJldHVybnNcclxuICAgICAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZnVuY3Rpb24gX2dldE5DX3JhVHlwZSgpe1xyXG4gICAgICAgICAgICByZXR1cm4gIHZtLk5DX3JhVHlwZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZnVuY3Rpb24gX2dldFNBTkRTX3JhVHlwZSgpe1xyXG4gICAgICAgICAgICByZXR1cm4gdm0uU0FORFNfcmFUeXBlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmdW5jdGlvbiBfZ2V0U05EU19yYVR5cGUoKXtcclxuICAgICAgICAgICAgcmV0dXJuIHZtLlNORFNfcmFUeXBlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmdW5jdGlvbiBfZ2V0RElOX3JhVHlwZSgpe1xyXG4gICAgICAgICAgICByZXR1cm4gdm0uRElOX3JhVHlwZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIF9jcmVhdGVTb3J0ZWRBcnJheShqc29uTGlzdCwgbGFuZykge1xyXG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gW107XHJcbiAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaCgkZmlsdGVyKCdvcmRlckJ5TG9jYWxlJykoanNvbkxpc3QsIGxhbmcpLCBmdW5jdGlvbiAoc29ydGVkT2JqZWN0KSB7XHJcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaChzb3J0ZWRPYmplY3QpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICB9XHJcblxyXG4gICAgfS8vZW5kIHNlcnZpY2UgZnVuY3Rpb25cclxufSkoKTsiLCJcclxuLyoqXHJcbiAqIENyZWF0ZWQgYnkgZGtpbHR5IG9uIDEyLzA4LzIwMTYuXHJcbiAqL1xyXG5cclxuKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKCdhY3Rpdml0eVNlcnZpY2UnLCBbJ2hwZmJDb25zdGFudHMnLCdhY3Rpdml0eUxpc3RzJ10pXHJcbn0pKCk7XHJcblxyXG4oZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ2FjdGl2aXR5U2VydmljZScpXHJcbiAgICAgICAgLmZhY3RvcnkoJ0FjdGl2aXR5U2VydmljZScsIEFjdGl2aXR5U2VydmljZSk7XHJcbiAgICBBY3Rpdml0eVNlcnZpY2UuJGluamVjdCA9IFsnWUVTJywgJ05PJywnQWN0aXZpdHlMaXN0RmFjdG9yeScsJyRmaWx0ZXInLCckdHJhbnNsYXRlJ107XHJcbiAgICBmdW5jdGlvbiBBY3Rpdml0eVNlcnZpY2UoWUVTLCBOTyxBY3Rpdml0eUxpc3RGYWN0b3J5LCAkZmlsdGVyLCR0cmFuc2xhdGUpIHtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gQWN0aXZpdHlTZXJ2aWNlKCkge1xyXG4gICAgICAgICAgICAvL2NvbnN0cnVjdGlvbiBsb2dpY1xyXG4gICAgICAgICAgICB2YXIgZGVmYXVsdEFjdGl2aXR5RGF0YSA9IHtcclxuICAgICAgICAgICAgICAgIFwiY29tcGFueUlkXCI6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBcImRzdHNDb250cm9sTnVtYmVyXCI6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBcImVucm9sbWVudFZlcnNpb25cIjogXCJcIixcclxuICAgICAgICAgICAgICAgIFwiZGF0ZVNhdmVkXCI6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBcImFwcGxpY2F0aW9uVHlwZVwiOiBcIk5FV1wiLFxyXG4gICAgICAgICAgICAgICAgXCJzb2Z0d2FyZVZlcnNpb25cIjogXCIxLjAuMFwiLFxyXG4gICAgICAgICAgICAgICAgXCJkYXRhQ2hlY2tzdW1cIjogXCJcIixcclxuICAgICAgICAgICAgICAgIFwiZG9zc2llcklkUHJlZml4XCI6IFwiSEM2LTAyNC1cIixcclxuICAgICAgICAgICAgICAgIFwiZG9zc2llcklkXCI6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBcInJlZ0FjdGl2aXR5TGVhZFwiOiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgXCJyZWdBY3Rpdml0eVR5cGVcIjogXCJcIixcclxuICAgICAgICAgICAgICAgIFwiZmVlQ2xhc3NcIjogXCJcIixcclxuICAgICAgICAgICAgICAgIFwicmVhc29uRmlsaW5nXCI6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBcImlzVGhpcmRQYXJ0eVwiOiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgXCJpc0FkbWluU3ViXCI6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBcInJlbGF0ZWRBY3Rpdml0eVwiOiB7fSxcclxuICAgICAgICAgICAgICAgIFwiY29udGFjdFJlY29yZFwiOiBbXVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBkZWZhdWx0QWN0aXZpdHlEYXRhLnJhdGlvbmFsZVR5cGVzID0gX2NyZWF0ZVJhdGlvbmFsVHlwZXMoKTtcclxuICAgICAgICAgICAgZGVmYXVsdEFjdGl2aXR5RGF0YS5ub3RpZmlhYmxlQ2hhbmdlVHlwZXMgPSBfY3JlYXRlTm90aWZpYWJsZUNoYW5nZVR5cGVzKCk7XHJcbiAgICAgICAgICAgIGRlZmF1bHRBY3Rpdml0eURhdGEucmVsYXRlZEFjdGl2aXR5ID0gX2dldEVtcHR5QWN0aXZpdHkoKTtcclxuICAgICAgICAgICAgYW5ndWxhci5leHRlbmQodGhpcy5fZGVmYXVsdCwgZGVmYXVsdEFjdGl2aXR5RGF0YSk7XHJcbiAgICAgICAgICAgIHRoaXMucm9vdFRhZyA9IFwiQUNUSVZJVFlfRU5ST0xcIjtcclxuICAgICAgICAgICAgdGhpcy5hY3Rpdml0eUlkID0gMDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIEFjdGl2aXR5U2VydmljZS5wcm90b3R5cGUgPSB7XHJcbiAgICAgICAgICAgIF9kZWZhdWx0OiB7fSxcclxuICAgICAgICAgICAgU0FORFM6IEFjdGl2aXR5TGlzdEZhY3RvcnkuZ2V0U0FORFNSYVR5cGVWYWx1ZSgpLFxyXG4gICAgICAgICAgICBTTkRTOiBBY3Rpdml0eUxpc3RGYWN0b3J5LmdldFNORFNUeXBlVmFsdWUoKSxcclxuICAgICAgICAgICAgTkM6ICBBY3Rpdml0eUxpc3RGYWN0b3J5LmdldE5DVHlwZVZhbHVlKCksXHJcbiAgICAgICAgICAgIFZOQzogXCJWTkNcIixcclxuICAgICAgICAgICAgQklPTE9HSUM6IEFjdGl2aXR5TGlzdEZhY3RvcnkuZ2V0QmlvbG9naWNhbExlYWRWYWx1ZSgpLFxyXG4gICAgICAgICAgICBESU46IEFjdGl2aXR5TGlzdEZhY3RvcnkuZ2V0RElOVHlwZVZhbHVlKClcclxuXHJcbiAgICAgICAgfTtcclxuXHJcblxyXG4gICAgICAgIEFjdGl2aXR5U2VydmljZS5wcm90b3R5cGUuZ2V0Um9vdFRhZyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuICh0aGlzLnJvb3RUYWcpXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQG5nZG9jIHRyYW5zZm9ybXMgdGhlIG9iamVjdCBtb2RlbCB0byB0aGUgY29tcGF0aWJsZSBmaWxlIEpTT04gb2JqZWNjdCBiYXNlIHRyYW5zZm9ybSBjYWxsISFcclxuICAgICAgICAgKiBAcGFyYW0ganNvbk9ialxyXG4gICAgICAgICAqIEByZXR1cm5zIChqc29uKSBvYmplY3QgY29tcGF0aWJsZSB3aXRoIHRoZSB4bWwgc2NoZW1hXHJcbiAgICAgICAgICogKi9cclxuICAgICAgICBBY3Rpdml0eVNlcnZpY2UucHJvdG90eXBlLnRyYW5zZm9ybVRvRmlsZU9iaiA9IGZ1bmN0aW9uIChqc29uT2JqKSB7XHJcbiAgICAgICAgICAgIHZhciBhY3Rpdml0eSA9IHtcclxuICAgICAgICAgICAgICAgIEFDVElWSVRZX0VOUk9MOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVfdHlwZTogXCJQSEFSTUFcIixcclxuICAgICAgICAgICAgICAgICAgICBjb21wYW55X2lkOiBqc29uT2JqLmNvbXBhbnlJZCxcclxuICAgICAgICAgICAgICAgICAgICBkc3RzX2NvbnRyb2xfbnVtYmVyOiBqc29uT2JqLmRzdHNDb250cm9sTnVtYmVyLFxyXG4gICAgICAgICAgICAgICAgICAgIGVucm9sbWVudF92ZXJzaW9uOiBqc29uT2JqLmVucm9sbWVudFZlcnNpb24sXHJcbiAgICAgICAgICAgICAgICAgICAgZGF0ZV9zYXZlZDoganNvbk9iai5kYXRlU2F2ZWQsXHJcbiAgICAgICAgICAgICAgICAgICAgYXBwbGljYXRpb25fdHlwZToganNvbk9iai5hcHBsaWNhdGlvblR5cGUsXHJcbiAgICAgICAgICAgICAgICAgICAgc29mdHdhcmVfdmVyc2lvbjoganNvbk9iai5zb2Z0d2FyZVZlcnNpb24sXHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YV9jaGVja3N1bToganNvbk9iai5kYXRhQ2hlY2tzdW0sXHJcbiAgICAgICAgICAgICAgICAgICAgZG9zc2llcl9pZF9wcmVmaXg6IGpzb25PYmouZG9zc2llcklkUHJlZml4LFxyXG4gICAgICAgICAgICAgICAgICAgIGRvc3NpZXJfaWQ6IGpzb25PYmouZG9zc2llcklkLFxyXG4gICAgICAgICAgICAgICAgICAgIGRvc3NpZXJfaWRfY29uY2F0OiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgICAgIHJlZ19hY3Rpdml0eV9sZWFkOiBqc29uT2JqLnJlZ0FjdGl2aXR5TGVhZCxcclxuICAgICAgICAgICAgICAgICAgICByZWdfYWN0aXZpdHlfdHlwZTogXCJcIixcclxuICAgICAgICAgICAgICAgICAgICBmZWVfY2xhc3M6XCJcIixcclxuICAgICAgICAgICAgICAgICAgICByZWFzb25fZmlsaW5nOiBqc29uT2JqLnJlYXNvbkZpbGluZyxcclxuICAgICAgICAgICAgICAgICAgICBpc190aGlyZF9wYXJ0eToganNvbk9iai5pc1RoaXJkUGFydHksXHJcbiAgICAgICAgICAgICAgICAgICAgaXNfYWRtaW5fc3VibWlzc2lvbjoganNvbk9iai5pc0FkbWluU3ViLFxyXG4gICAgICAgICAgICAgICAgICAgIG5vdGlmaWFibGVfY2hhbmdlX3R5cGVzOiB7fSxcclxuICAgICAgICAgICAgICAgICAgICByYXRpb25hbGVfdHlwZXM6IHt9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgaWYoanNvbk9iai5mZWVDbGFzcykge1xyXG4gICAgICAgICAgICAgICAgYWN0aXZpdHlbdGhpcy5yb290VGFnXS5mZWVfY2xhc3M9e1xyXG4gICAgICAgICAgICAgICAgICAgIF9sYWJlbF9lbjoganNvbk9iai5mZWVDbGFzcy5lbixcclxuICAgICAgICAgICAgICAgICAgICBfbGFiZWxfZnI6IGpzb25PYmouZmVlQ2xhc3MuZnIsXHJcbiAgICAgICAgICAgICAgICAgICAgX190ZXh0OiAganNvbk9iai5mZWVDbGFzcy5pZFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmKGpzb25PYmoucmVnQWN0aXZpdHlUeXBlKSB7XHJcbiAgICAgICAgICAgICAgICBhY3Rpdml0eVt0aGlzLnJvb3RUYWddLnJlZ19hY3Rpdml0eV90eXBlID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIF9sYWJlbF9lbjoganNvbk9iai5yZWdBY3Rpdml0eVR5cGUuZW4sXHJcbiAgICAgICAgICAgICAgICAgICAgX2xhYmVsX2ZyOiBqc29uT2JqLnJlZ0FjdGl2aXR5VHlwZS5mcixcclxuICAgICAgICAgICAgICAgICAgICBfX3RleHQ6IGpzb25PYmoucmVnQWN0aXZpdHlUeXBlLmlkXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGFjdGl2aXR5W3RoaXMucm9vdFRhZ10ubm90aWZpYWJsZV9jaGFuZ2VfdHlwZXMgPSBfbWFwTm90aWZpYWJsZUNoYW5nZVR5cGVzVG9PdXRwdXQoanNvbk9iai5ub3RpZmlhYmxlQ2hhbmdlVHlwZXMpO1xyXG4gICAgICAgICAgICBhY3Rpdml0eVt0aGlzLnJvb3RUYWddLnJhdGlvbmFsZV90eXBlcyA9IF9tYXBSYXRpb25hbGVUeXBlVG9PdXRwdXQoanNvbk9iai5yYXRpb25hbGVUeXBlcyk7XHJcbiAgICAgICAgICAgIGlmIChqc29uT2JqLmlzQWRtaW5TdWIgPT09IFlFUykge1xyXG4gICAgICAgICAgICAgICAgYWN0aXZpdHlbdGhpcy5yb290VGFnXS5yZWxhdGVkX2FjdGl2aXR5ID0gdGhpcy50cmFuZm9ybVJlbGF0ZWRBY3Rpdml0eVRvRmlsZU9iaihqc29uT2JqLnJlbGF0ZWRBY3Rpdml0eSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLyogaWYgKHJlbGF0ZWRBY3RMaXN0ICYmIHJlbGF0ZWRBY3RMaXN0Lmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgIC8vdGhlIGNoZWNrc3VtIGRvZXNuJ3QgbGlrZSBlbXB0eSB0YWdzIG9mIGZvcm1hdCA8dGFnLz4gYW5kIHRoaXMgaXMgb3B0aW9uYWwgaW4gdGhlIHNjaGVtYVxyXG4gICAgICAgICAgICAgYWN0aXZpdHlbdGhpcy5yb290VGFnXS5yZWxhdGVkX2FjdGl2aXR5ID0gcmVsYXRlZEFjdExpc3Q7XHJcbiAgICAgICAgICAgICB9Ki9cclxuICAgICAgICAgICAgYWN0aXZpdHlbdGhpcy5yb290VGFnXS5jb250YWN0X3JlY29yZCA9IHRoaXMudHJhbnNmb3JtQ29udGFjdExpc3RUb0ZpbGVPYmooanNvbk9iai5jb250YWN0UmVjb3JkKTtcclxuICAgICAgICAgICAgLy9kbyBvdGhlciBzdHVmZlxyXG4gICAgICAgICAgICBpZiAoanNvbk9iai5kb3NzaWVySWQpIHtcclxuICAgICAgICAgICAgICAgIGFjdGl2aXR5W3RoaXMucm9vdFRhZ10uZG9zc2llcl9pZF9jb25jYXQgPSAoanNvbk9iai5kb3NzaWVySWRQcmVmaXggKyBqc29uT2JqLmRvc3NpZXJJZCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvL2lmIHRoZXJlIGlzIG5vIGlkIHZhbHVlIGp1c3QgbWFrZSB0aGlzIGVtcHR5XHJcbiAgICAgICAgICAgICAgICBhY3Rpdml0eVt0aGlzLnJvb3RUYWddLmRvc3NpZXJfaWRfY29uY2F0ID0gXCJcIjtcclxuICAgICAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgICAgIHJldHVybiBhY3Rpdml0eTtcclxuXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgQWN0aXZpdHlTZXJ2aWNlLnByb3RvdHlwZS5tYXBDb250YWN0TGlzdCA9IGZ1bmN0aW9uIChqc29uT2JqKSB7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gX21hcFJlZ3VsYXRvcnlDb250YWN0TGlzdChqc29uT2JqKTtcclxuXHJcbiAgICAgICAgfTtcclxuICAgICAgICBBY3Rpdml0eVNlcnZpY2UucHJvdG90eXBlLnRyYW5zZm9ybUNvbnRhY3RMaXN0VG9GaWxlT2JqID0gZnVuY3Rpb24gKGpzb25PYmopIHtcclxuICAgICAgICAgICAgcmV0dXJuIF90cmFuc2Zvcm1SZWd1bGF0b3J5Q29udGFjdExpc3RUb0ZpbGVPYmooanNvbk9iaik7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLy9UT0RPIG9ic29sZXRlP1xyXG4gICAgICAgIEFjdGl2aXR5U2VydmljZS5wcm90b3R5cGUudHJhbmZvcm1SZWxhdGVkQWN0aXZpdHlUb0ZpbGVPYmogPSBmdW5jdGlvbiAoanNvbk9iaikge1xyXG5cclxuICAgICAgICAgICAgdmFyIGFjdGl2aXR5ID0ge307XHJcbiAgICAgICAgICAgIGFjdGl2aXR5LnNwb25zb3JfbmFtZSA9IGpzb25PYmouc3BvbnNvck5hbWU7XHJcbiAgICAgICAgICAgIGFjdGl2aXR5LmRhdGVfY2xlYXJlZCA9IFwiXCI7XHJcbiAgICAgICAgICAgIHZhciBkYXRlQ2xlYXJlZCA9IGpzb25PYmouZGF0ZUNsZWFyZWQ7XHJcbiAgICAgICAgICAgIHZhciBtb250aCA9IFwiXCI7XHJcbiAgICAgICAgICAgIHZhciBkYXkgPSBcIlwiO1xyXG4gICAgICAgICAgICBpZiAoZGF0ZUNsZWFyZWQpIHtcclxuICAgICAgICAgICAgICAgIG1vbnRoID0gZGF0ZUNsZWFyZWQuZ2V0TW9udGgoKSArIDE7XHJcbiAgICAgICAgICAgICAgICBkYXkgPSBkYXRlQ2xlYXJlZC5nZXREYXRlKCk7XHJcbiAgICAgICAgICAgICAgICBpZiAobW9udGggPCAxMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vdG9kbyBoYWNrXHJcbiAgICAgICAgICAgICAgICAgICAgbW9udGggPSBcIjBcIiArIG1vbnRoO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGRheSA8IDEwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGF5ID0gXCIwXCIgKyBkYXk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgYWN0aXZpdHkuZGF0ZV9jbGVhcmVkID0gZGF0ZUNsZWFyZWQuZ2V0RnVsbFllYXIoKSArICctJyArIChtb250aCkgKyAnLScgKyBkYXk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGFjdGl2aXR5LnJlZ19hY3Rpdml0eV90eXBlID0gXCJcIjtcclxuXHJcbiAgICAgICAgICAgIGFjdGl2aXR5LnJlZ19hY3Rpdml0eV90eXBlID0ge1xyXG4gICAgICAgICAgICAgICAgX2xhYmVsX2VuOiAganNvbk9iai5yZWdBY3Rpdml0eVR5cGUuZW4sXHJcbiAgICAgICAgICAgICAgICBfbGFiZWxfZnI6ICAganNvbk9iai5yZWdBY3Rpdml0eVR5cGUuZnIsXHJcbiAgICAgICAgICAgICAgICBfX3RleHQ6ICAganNvbk9iai5yZWdBY3Rpdml0eVR5cGUuaWRcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgYWN0aXZpdHkuY29udHJvbF9udW1iZXIgPSBqc29uT2JqLmNvbnRyb2xOdW1iZXI7XHJcbiAgICAgICAgICAgIGFjdGl2aXR5LmxpY2Vuc2VfYWdyZWVtZW50ID0ganNvbk9iai5saWNlbnNlQWdyZWU7XHJcbiAgICAgICAgICAgIGFjdGl2aXR5LmRpbl90cmFuc2ZlciA9IGpzb25PYmouZGluVHJhbnNmZXIgPT09IHRydWUgPyBZRVMgOiBOTztcclxuICAgICAgICAgICAgYWN0aXZpdHkubm90X2xhc2EgPSBqc29uT2JqLm5vdExhc2EgPT09IHRydWUgPyBZRVMgOiBOTztcclxuICAgICAgICAgICAgcmV0dXJuIGFjdGl2aXR5O1xyXG5cclxuICAgICAgICB9O1xyXG4gICAgICAgIEFjdGl2aXR5U2VydmljZS5wcm90b3R5cGUuZ2V0TW9kZWxJbmZvID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZGVmYXVsdDtcclxuICAgICAgICB9O1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBuZ2RvYyBtZXRob2QtIHRyYW5zZm9ybXMgdGhlIGZpbGUganNvbiB0byBhIG1vZGVsIG9iamVjdFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIEFjdGl2aXR5U2VydmljZS5wcm90b3R5cGUuZ2V0QWN0aXZpdHlJbmZvID0gZnVuY3Rpb24gKGpzb25PYmopIHtcclxuICAgICAgICAgICAgaWYgKCFqc29uT2JqKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fZGVmYXVsdDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgbW9kZWwgPSB7fTtcclxuICAgICAgICAgICAgbW9kZWwuY29tcGFueUlkID0ganNvbk9iai5jb21wYW55X2lkO1xyXG4gICAgICAgICAgICBtb2RlbC5kc3RzQ29udHJvbE51bWJlciA9IGpzb25PYmouZHN0c19jb250cm9sX251bWJlcjtcclxuICAgICAgICAgICAgbW9kZWwuZW5yb2xtZW50VmVyc2lvbiA9IGpzb25PYmouZW5yb2xtZW50X3ZlcnNpb247XHJcbiAgICAgICAgICAgIG1vZGVsLmRhdGVTYXZlZCA9IGpzb25PYmouZGF0ZV9zYXZlZDtcclxuICAgICAgICAgICAgbW9kZWwuYXBwbGljYXRpb25UeXBlID0ganNvbk9iai5hcHBsaWNhdGlvbl90eXBlO1xyXG4gICAgICAgICAgICBtb2RlbC5zb2Z0d2FyZVZlcnNpb24gPSBqc29uT2JqLnNvZnR3YXJlX3ZlcnNpb247XHJcbiAgICAgICAgICAgIG1vZGVsLmRhdGFDaGVja3N1bSA9IGpzb25PYmouc29mdHdhcmVfdmVyc2lvbjtcclxuICAgICAgICAgICAgbW9kZWwuZG9zc2llcklkUHJlZml4ID0ganNvbk9iai5kb3NzaWVyX2lkX3ByZWZpeDtcclxuICAgICAgICAgICAgbW9kZWwuZG9zc2llcklkID0ganNvbk9iai5kb3NzaWVyX2lkO1xyXG4gICAgICAgICAgICBtb2RlbC5yZWdBY3Rpdml0eUxlYWQgPSBqc29uT2JqLnJlZ19hY3Rpdml0eV9sZWFkO1xyXG4gICAgICAgICAgICBtb2RlbC5yZWdBY3Rpdml0eVR5cGUgPSAkZmlsdGVyKCdmaWx0ZXInKShBY3Rpdml0eUxpc3RGYWN0b3J5LmdldFJhVHlwZUxpc3QoKSwge2lkOiAganNvbk9iai5yZWdfYWN0aXZpdHlfdHlwZS5fX3RleHR9KVswXTtcclxuICAgICAgICAgICAgbW9kZWwuZmVlQ2xhc3MgPSAgJGZpbHRlcignZmlsdGVyJykoQWN0aXZpdHlMaXN0RmFjdG9yeS5nZXRGZWVDbGFzc0xpc3QoKSwge2lkOiAganNvbk9iai5mZWVfY2xhc3MuX190ZXh0fSlbMF07XHJcbiAgICAgICAgICAgIG1vZGVsLnJlYXNvbkZpbGluZyA9IGpzb25PYmoucmVhc29uX2ZpbGluZztcclxuICAgICAgICAgICAgbW9kZWwuaXNUaGlyZFBhcnR5ID0ganNvbk9iai5pc190aGlyZF9wYXJ0eTtcclxuICAgICAgICAgICAgbW9kZWwuaXNBZG1pblN1YiA9IGpzb25PYmouaXNfYWRtaW5fc3VibWlzc2lvbjtcclxuXHJcbiAgICAgICAgICAgIG1vZGVsLm5vdGlmaWFibGVDaGFuZ2VUeXBlcyA9IF90cmFuc2Zvcm1Ob3RpZmlhYmxlQ2hhbmdlVHlwZUZyb21GaWxlT2JqKGpzb25PYmoubm90aWZpYWJsZV9jaGFuZ2VfdHlwZXMpO1xyXG4gICAgICAgICAgICBtb2RlbC5yYXRpb25hbGVUeXBlcyA9IF90cmFuc2Zvcm1SYXRpb25hbGVUeXBlRnJvbUZpbGVPYmooanNvbk9iai5yYXRpb25hbGVfdHlwZXMpO1xyXG4gICAgICAgICAgICBtb2RlbC5yZWxhdGVkQWN0aXZpdHkgPSB7fTtcclxuXHJcbiAgICAgICAgICAgIHZhciByZXBDb250YWN0cyA9IHtjb250YWN0UmVjb3JkOiBbXX07XHJcblxyXG4gICAgICAgICAgICBpZiAoanNvbk9iai5yZWxhdGVkX2FjdGl2aXR5KSB7XHJcbiAgICAgICAgICAgICAgICBtb2RlbC5yZWxhdGVkQWN0aXZpdHkgPSB0aGlzLnRyYW5zZm9ybVJlbGF0ZWRSZWdBY3Rpdml0eUZyb21GaWxlT2JqKGpzb25PYmoucmVsYXRlZF9hY3Rpdml0eSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChqc29uT2JqLmNvbnRhY3RfcmVjb3JkKSB7XHJcbiAgICAgICAgICAgICAgICByZXBDb250YWN0cy5jb250YWN0UmVjb3JkID0gdGhpcy5tYXBDb250YWN0TGlzdChqc29uT2JqLmNvbnRhY3RfcmVjb3JkKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBhbmd1bGFyLm1lcmdlKG1vZGVsLCByZXBDb250YWN0cyk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgQWN0aXZpdHlTZXJ2aWNlLnByb3RvdHlwZS5yZXNldFJhdGlvbmFsZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdGhpcy5fZGVmYXVsdC5yYXRpb25hbGVUeXBlcyA9IF9jcmVhdGVSYXRpb25hbFR5cGVzKCk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBBY3Rpdml0eVNlcnZpY2UucHJvdG90eXBlLnJlc2V0Tm90aWZpYWJsZUNoYW5nZXMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2RlZmF1bHQubm90aWZpYWJsZUNoYW5nZVR5cGVzID0gX2NyZWF0ZU5vdGlmaWFibGVDaGFuZ2VUeXBlcygpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIG5nRG9jIG1ldGhvZC0gbWFwcGluZyBmcm9tIHRoZSB0cmFuc2FjdGlvbiBmaWxlIGpzb24gb2JqZWN0IHRvIHRoZSBpbnRlcm5hbCByZXByZXNlbnRhdGlvblxyXG4gICAgICAgICAqIEBwYXJhbSBqc29uT2JqIHRoZSBqc29uIG9iamVjdCBnZW5lcmF0ZWQgZnJvbSB0aGUgZmlsZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIEFjdGl2aXR5U2VydmljZS5wcm90b3R5cGUudHJhbnNmb3JtRnJvbUZpbGVPYmogPSBmdW5jdGlvbiAoanNvbk9iaikge1xyXG4gICAgICAgICAgICB2YXIgYWN0aXZpdHlJbmZvID0gdGhpcy5nZXRBY3Rpdml0eUluZm8oanNvbk9ialt0aGlzLnJvb3RUYWddKTtcclxuICAgICAgICAgICAgLy9nZXQgcmlkIG9mIHByZXZpb3VzIGRlZmF1bHQgaWYgaXQgZXhpc3RzXHJcbiAgICAgICAgICAgIHRoaXMuX2RlZmF1bHQgPSBhY3Rpdml0eUluZm87XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgQWN0aXZpdHlTZXJ2aWNlLnByb3RvdHlwZS5nZXROZXdBY3Rpdml0eSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIGFjdGl2aXR5ID0ge1xyXG4gICAgICAgICAgICAgICAgYWN0aXZpdHlJZDogdGhpcy5nZXROZXh0QWN0aXZpdHlJZCgpLFxyXG4gICAgICAgICAgICAgICAgXCJyZWdBY3Rpdml0eVR5cGVcIjogXCJcIixcclxuICAgICAgICAgICAgICAgIFwiZGF0ZUNsZWFyZWRcIjogXCJcIixcclxuICAgICAgICAgICAgICAgIFwiZHN0c0NvbnRyb2xOdW1iZXJcIjogXCJcIixcclxuICAgICAgICAgICAgICAgIFwiZG9zc2llcklkXCI6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBcIm1hbnVmYWN0dXJlck5hbWVcIjogXCJcIixcclxuICAgICAgICAgICAgICAgIFwicmVhc29uRmlsaW5nXCI6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBcImFzc29jRGluc1wiOiBbXVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICByZXR1cm4gYWN0aXZpdHk7XHJcbiAgICAgICAgfTtcclxuXHJcblxyXG4gICAgICAgIEFjdGl2aXR5U2VydmljZS5wcm90b3R5cGUuaXNOb3RpZmlhYmxlQ2hhbmdlID0gZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgIGlmICghdmFsdWUpIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgaWYgKHZhbHVlID09PSB0aGlzLlZOQyB8fCB2YWx1ZSA9PT0gdGhpcy5OQykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgQWN0aXZpdHlTZXJ2aWNlLnByb3RvdHlwZS5pc1JhdGlvbmFsZSA9IGZ1bmN0aW9uIChhY3Rpdml0eSwgbGVhZCkge1xyXG5cclxuICAgICAgICAgICAgaWYgKCFhY3Rpdml0eSkgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICBpZiAoYWN0aXZpdHkgPT09IHRoaXMuU0FORFMgfHwgYWN0aXZpdHkgPT09IHRoaXMuU05EUykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGFjdGl2aXR5ID09PSB0aGlzLkRJTiAmJiBsZWFkID09PSB0aGlzLkJJT0xPR0lDKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgIC8qICBBY3Rpdml0eVNlcnZpY2UucHJvdG90eXBlLmdldEFjdGl2aXR5VHlwZUxpc3QgPSBmdW5jdGlvbiAoaXNQaWxvdCkge1xyXG5cclxuICAgICAgICAgICAgdmFyIGFjdGl2aXR5TGlzdCA9IFtcclxuICAgICAgICAgICAgICAgIFwiQ1RBXCIsXHJcbiAgICAgICAgICAgICAgICBcIkNUQUFcIixcclxuICAgICAgICAgICAgICAgIFwiTkRTXCIsXHJcbiAgICAgICAgICAgICAgICB0aGlzLlNORFMsXHJcbiAgICAgICAgICAgICAgICBcIkFORFNcIixcclxuICAgICAgICAgICAgICAgIHRoaXMuU0FORFMsXHJcbiAgICAgICAgICAgICAgICB0aGlzLk5DLFxyXG4gICAgICAgICAgICAgICAgdGhpcy5ESU4sXHJcbiAgICAgICAgICAgICAgICBcIlBEQ1wiLFxyXG4gICAgICAgICAgICAgICAgXCJBRE1JTlwiXHJcbiAgICAgICAgICAgIF07XHJcblxyXG5cclxuICAgICAgICAgICAgaWYgKCFpc1BpbG90KSB7XHJcbiAgICAgICAgICAgICAgICBhY3Rpdml0eUxpc3QucHVzaChcclxuICAgICAgICAgICAgICAgICAgICBcIlZJTkRcIixcclxuICAgICAgICAgICAgICAgICAgICBcIlZJTkRBTVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwiVk5EU1wiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwiVkFORFNcIixcclxuICAgICAgICAgICAgICAgICAgICBcIlZTQU5EU1wiLFxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuVk5DLFxyXG4gICAgICAgICAgICAgICAgICAgIFwiVkRJTlwiKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBhY3Rpdml0eUxpc3Q7XHJcbiAgICAgICAgfTsqL1xyXG5cclxuICAgICAgICBBY3Rpdml0eVNlcnZpY2UucHJvdG90eXBlLnVwZGF0ZUFjdGl2aXR5SWQgPSBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgaWYgKGlzTmFOKHZhbHVlKSkgcmV0dXJuO1xyXG4gICAgICAgICAgICBpZiAodmFsdWUgPiB0aGlzLmFjdGl2aXR5SWQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuYWN0aXZpdHlJZCA9IHZhbHVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICBBY3Rpdml0eVNlcnZpY2UucHJvdG90eXBlLmdldE5leHRBY3Rpdml0eUlkID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB0aGlzLmFjdGl2aXR5SWQgPSB0aGlzLmFjdGl2aXR5SWQgKyAxO1xyXG4gICAgICAgICAgICByZXR1cm4gKHRoaXMuYWN0aXZpdHlJZCk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBBY3Rpdml0eVNlcnZpY2UucHJvdG90eXBlLnJlc2V0QWN0aXZpdHlJZCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICBpZiAoIXZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmFjdGl2aXR5SWQgPSAwO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5hY3Rpdml0eUlkID0gdmFsdWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBBY3Rpdml0eVNlcnZpY2UucHJvdG90eXBlLmdldEVtcHR5UmVsYXRlZEFjdGl2aXR5ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gX2dldEVtcHR5QWN0aXZpdHkoKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIENyZWF0ZXMgdGhlIGludGVybmFsIG1vZGVsIGZvciBSZWxhdGVkIEFjdGl2aXR5IG9uIGEgZmlsZSBsb2FkXHJcbiAgICAgICAgICogQHBhcmFtIGpzb25PYmpcclxuICAgICAgICAgKi9cclxuICAgICAgICAvL1RPRE8gZGVwcmVjYXRlZFxyXG4gICAgICAgIEFjdGl2aXR5U2VydmljZS5wcm90b3R5cGUudHJhbnNmb3JtUmVsYXRlZFJlZ0FjdGl2aXR5RnJvbUZpbGVPYmogPSBmdW5jdGlvbiAoanNvbk9iaikge1xyXG4gICAgICAgICAgICB2YXIgcmVsYXRlZEFjdGl2aXR5ID0gdGhpcy5nZXRFbXB0eVJlbGF0ZWRBY3Rpdml0eSgpO1xyXG4gICAgICAgICAgICByZWxhdGVkQWN0aXZpdHkuc3BvbnNvck5hbWUgPSBqc29uT2JqLnNwb25zb3JfbmFtZTtcclxuICAgICAgICAgICAgcmVsYXRlZEFjdGl2aXR5LmRhdGVDbGVhcmVkID0gXCJcIjtcclxuICAgICAgICAgICAgaWYgKGpzb25PYmouZGF0ZV9jbGVhcmVkKSB7cmVsYXRlZEFjdGl2aXR5LmRhdGVDbGVhcmVkID0gX3BhcnNlRGF0ZShqc29uT2JqLmRhdGVfY2xlYXJlZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy9yZWxhdGVkQWN0aXZpdHkucmVnQWN0aXZpdHlUeXBlID0ganNvbk9iai5yZWdfYWN0aXZpdHlfdHlwZTtcclxuICAgICAgICAgICAgcmVsYXRlZEFjdGl2aXR5LnJlZ0FjdGl2aXR5VHlwZSAgPSAkZmlsdGVyKCdmaWx0ZXInKShBY3Rpdml0eUxpc3RGYWN0b3J5LmdldFJhVHlwZUxpc3QoKSwge2lkOiAganNvbk9iai5yZWdfYWN0aXZpdHlfdHlwZS5fX3RleHR9KVswXTtcclxuXHJcblxyXG4gICAgICAgICAgICByZWxhdGVkQWN0aXZpdHkuY29udHJvbE51bWJlciA9IE51bWJlcihqc29uT2JqLmNvbnRyb2xfbnVtYmVyKTtcclxuICAgICAgICAgICAgcmVsYXRlZEFjdGl2aXR5LmxpY2Vuc2VBZ3JlZSA9IGpzb25PYmoubGljZW5zZV9hZ3JlZW1lbnQ7XHJcbiAgICAgICAgICAgIHJlbGF0ZWRBY3Rpdml0eS5kaW5UcmFuc2ZlciA9IGpzb25PYmouZGluX3RyYW5zZmVyID09PSBZRVM7XHJcbiAgICAgICAgICAgIHJlbGF0ZWRBY3Rpdml0eS5ub3RMYXNhID0ganNvbk9iai5ub3RfbGFzYSA9PT0gWUVTO1xyXG4gICAgICAgICAgICByZXR1cm4gcmVsYXRlZEFjdGl2aXR5O1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8vIFJldHVybiBhIHJlZmVyZW5jZSB0byB0aGUgb2JqZWN0XHJcbiAgICAgICAgcmV0dXJuIEFjdGl2aXR5U2VydmljZTtcclxuICAgIH0vL2VuZCBvZiBBY3Rpdml0eVNlcnZpY2UgT2JqZWN0IGRlZmluaXRpb25cclxuXHJcbiAgICAvKipcclxuICAgICAqIHRyYW5zZm9ybXMgZnJvbSBhIGZpbGUgb2JqZWN0XHJcbiAgICAgKiBAcGFyYW0ganNvbk9ialxyXG4gICAgICogQHJldHVybnMgKGFycmF5KSBvZiBjb250YWN0cy4gRW1wdHkgaWYgdGhlcmUgYXJlIG5vbmVcclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIF9tYXBSZWd1bGF0b3J5Q29udGFjdExpc3QoanNvbk9iaikge1xyXG4gICAgICAgIHZhciByZXN1bHQgPSBbXTtcclxuICAgICAgICBpZiAoIWpzb25PYmopIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgaWYgKCEoanNvbk9iaiBpbnN0YW5jZW9mIEFycmF5KSkge1xyXG4gICAgICAgICAgICAvL21ha2UgaXQgYW4gYXJyYXksIGNhc2UgdGhlcmUgaXMgb25seSBvbmVcclxuICAgICAgICAgICAganNvbk9iaiA9IFtqc29uT2JqXVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBqc29uT2JqLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKF90cmFuc2Zvcm1SZXBDb250YWN0RnJvbUZpbGVPYmooanNvbk9ialtpXSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gKHJlc3VsdClcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBfdHJhbnNmb3JtUmVndWxhdG9yeUNvbnRhY3RMaXN0VG9GaWxlT2JqKGpzb25PYmopIHtcclxuICAgICAgICB2YXIgcmVzdWx0ID0gW107XHJcbiAgICAgICAgaWYgKCFqc29uT2JqKSByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgIGlmICghKGpzb25PYmogaW5zdGFuY2VvZiBBcnJheSkpIHtcclxuICAgICAgICAgICAgLy9tYWtlIGl0IGFuIGFycmF5LCBjYXNlIHRoZXJlIGlzIG9ubHkgb25lXHJcbiAgICAgICAgICAgIGpzb25PYmogPSBbanNvbk9ial1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwganNvbk9iai5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICByZXN1bHQucHVzaChfbWFwUmVwQ29udGFjdFRvT3V0cHV0KGpzb25PYmpbaV0pKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIChyZXN1bHQpXHJcblxyXG5cclxuICAgIH1cclxuXHJcblxyXG4gICAgZnVuY3Rpb24gX3RyYW5zZm9ybVJlcENvbnRhY3RGcm9tRmlsZU9iaihyZXBPYmopIHtcclxuXHJcbiAgICAgICAgdmFyIHJlcENvbnRhY3QgPSBfdHJhbnNmb3JtQ29udGFjdEZyb21GaWxlT2JqKHJlcE9iai5yZXBfY29udGFjdF9kZXRhaWxzKTtcclxuICAgICAgICByZXBDb250YWN0LnJlcFJvbGUgPSByZXBPYmoucmVwX2NvbnRhY3Rfcm9sZTtcclxuICAgICAgICByZXBDb250YWN0LmFtZW5kID0gcmVwT2JqLmFtZW5kX3JlY29yZCA9PT0gJ1knO1xyXG4gICAgICAgIHJldHVybiAocmVwQ29udGFjdCk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gX21hcFJlcENvbnRhY3RUb091dHB1dChyZXBPYmopIHtcclxuICAgICAgICB2YXIgcmVwQ29udGFjdCA9IHt9O1xyXG4gICAgICAgIHJlcENvbnRhY3QucmVwX2NvbnRhY3Rfcm9sZSA9IHJlcE9iai5yZXBSb2xlO1xyXG4gICAgICAgIHJlcENvbnRhY3QuYW1lbmRfcmVjb3JkID0gcmVwT2JqLmFtZW5kID09PSB0cnVlID8gJ1knIDogJ04nO1xyXG4gICAgICAgIC8vZGVmbGF0dGVuIHRoZSBvYmplY3RcclxuICAgICAgICByZXBDb250YWN0LnJlcF9jb250YWN0X2RldGFpbHMgPSBfbWFwQ29udGFjdFRvT3V0cHV0KHJlcE9iaik7XHJcbiAgICAgICAgcmV0dXJuIHJlcENvbnRhY3Q7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gX3RyYW5zZm9ybUNvbnRhY3RGcm9tRmlsZU9iaihjb250YWN0T2JqKSB7XHJcbiAgICAgICAgdmFyIGNvbnRhY3QgPSB7fTtcclxuICAgICAgICBpZiAoIWNvbnRhY3RPYmopIHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIlRoZXJlIGlzIG5vIGNvbnRhY3Qgb2JqZWN0XCIpO1xyXG4gICAgICAgICAgICByZXR1cm4gY29udGFjdDtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29udGFjdC5zYWx1dGF0aW9uID0gY29udGFjdE9iai5zYWx1dGF0aW9uO1xyXG4gICAgICAgIGNvbnRhY3QuZ2l2ZW5OYW1lID0gY29udGFjdE9iai5naXZlbl9uYW1lO1xyXG4gICAgICAgIGNvbnRhY3QuaW5pdGlhbHMgPSBjb250YWN0T2JqLmluaXRpYWxzO1xyXG4gICAgICAgIGNvbnRhY3Quc3VybmFtZSA9IGNvbnRhY3RPYmouc3VybmFtZTtcclxuICAgICAgICBjb250YWN0LnRpdGxlID0gY29udGFjdE9iai5qb2JfdGl0bGU7XHJcbiAgICAgICAgY29udGFjdC5sYW5ndWFnZSA9IGNvbnRhY3RPYmoubGFuZ3VhZ2VfY29ycmVzcG9uZGFuY2U7XHJcbiAgICAgICAgY29udGFjdC5waG9uZSA9IGNvbnRhY3RPYmoucGhvbmVfbnVtO1xyXG4gICAgICAgIGNvbnRhY3QucGhvbmVFeHQgPSBjb250YWN0T2JqLnBob25lX2V4dDtcclxuICAgICAgICBjb250YWN0LmZheCA9IGNvbnRhY3RPYmouZmF4X251bTtcclxuICAgICAgICBjb250YWN0LmVtYWlsID0gY29udGFjdE9iai5lbWFpbDtcclxuICAgICAgICByZXR1cm4gY29udGFjdDtcclxuICAgIH1cclxuXHJcblxyXG4gICAgZnVuY3Rpb24gX21hcENvbnRhY3RUb091dHB1dChjb250YWN0T2JqKSB7XHJcblxyXG4gICAgICAgIHZhciBjb250YWN0ID0ge307XHJcbiAgICAgICAgY29udGFjdC5zYWx1dGF0aW9uID0gY29udGFjdE9iai5zYWx1dGF0aW9uO1xyXG4gICAgICAgIGNvbnRhY3QuZ2l2ZW5fbmFtZSA9IGNvbnRhY3RPYmouZ2l2ZW5OYW1lO1xyXG4gICAgICAgIGNvbnRhY3QuaW5pdGlhbHMgPSBjb250YWN0T2JqLmluaXRpYWxzO1xyXG4gICAgICAgIGNvbnRhY3Quc3VybmFtZSA9IGNvbnRhY3RPYmouc3VybmFtZTtcclxuICAgICAgICBjb250YWN0LmpvYl90aXRsZSA9IGNvbnRhY3RPYmoudGl0bGU7XHJcbiAgICAgICAgY29udGFjdC5sYW5ndWFnZV9jb3JyZXNwb25kYW5jZSA9IGNvbnRhY3RPYmoubGFuZ3VhZ2U7XHJcbiAgICAgICAgY29udGFjdC5waG9uZV9udW0gPSBjb250YWN0T2JqLnBob25lO1xyXG4gICAgICAgIGNvbnRhY3QucGhvbmVfZXh0ID0gY29udGFjdE9iai5waG9uZUV4dDtcclxuICAgICAgICBjb250YWN0LmZheF9udW0gPSBjb250YWN0T2JqLmZheDtcclxuICAgICAgICBjb250YWN0LmVtYWlsID0gY29udGFjdE9iai5lbWFpbDtcclxuICAgICAgICByZXR1cm4gY29udGFjdDtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLy9UT0RPIG1ha2UgYSBzdGFuZGFyZCBzZXJ2aWNlXHJcblxyXG4gICAgLyogZnVuY3Rpb24gX2NyZWF0ZUNvbnRhY3RNb2RlbCgpIHtcclxuICAgICAgICB2YXIgY29udGFjdCA9IHt9O1xyXG5cclxuICAgICAgICBjb250YWN0LnNhbHV0YXRpb24gPSBcIlwiO1xyXG4gICAgICAgIGNvbnRhY3QuZ2l2ZW5OYW1lID0gXCJcIjtcclxuICAgICAgICBjb250YWN0LmluaXRpYWxzID0gXCJcIjtcclxuICAgICAgICBjb250YWN0LnN1cm5hbWUgPSBcIlwiO1xyXG4gICAgICAgIGNvbnRhY3Quam9iVGl0bGUgPSBcIlwiO1xyXG4gICAgICAgIGNvbnRhY3QubGFuZ3VhZ2VDb3JyZXNwb25kYW5jZSA9IFwiXCI7XHJcbiAgICAgICAgY29udGFjdC5waG9uZU51bSA9IFwiXCI7XHJcbiAgICAgICAgY29udGFjdC5waG9uZUV4dCA9IFwiXCI7XHJcbiAgICAgICAgY29udGFjdC5mYXggPSBcIlwiO1xyXG4gICAgICAgIGNvbnRhY3QuZW1haWwgPSBcIlwiO1xyXG4gICAgICAgIHJldHVybiBjb250YWN0O1xyXG4gICAgIH0qL1xyXG5cclxuICAgIC8vdG9kbyBkZXByZWNhdGVkXHJcblxyXG5cclxuICAgIGZ1bmN0aW9uIF9jcmVhdGVSYXRpb25hbFR5cGVzKCkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIC8qICBcInJhdGlvbmFsZVR5cGVzXCI6IHsqL1xyXG4gICAgICAgICAgICBcIm5ld1JvYVwiOiBmYWxzZSxcclxuICAgICAgICAgICAgXCJuZXdDbGFpbXNcIjogZmFsc2UsXHJcbiAgICAgICAgICAgIFwiY2hhbmdlRm9ybXVsYXRpb25cIjogZmFsc2UsXHJcbiAgICAgICAgICAgIFwiY2hhbmdlRHJ1Z1N1YnN0YW5jZVwiOiBmYWxzZSxcclxuICAgICAgICAgICAgXCJyZXBsYWNlU3RlcmlsaXR5XCI6IGZhbHNlLFxyXG4gICAgICAgICAgICBcImNvbmZpcm1pdG9yeVN0dWRpZXNcIjogZmFsc2UsXHJcbiAgICAgICAgICAgIFwib3RoZXJSYXRpb25hbGVcIjogZmFsc2UsXHJcbiAgICAgICAgICAgIFwib3RoZXJSYXRpb25hbGVEZXRhaWxzXCI6IFwiXCJcclxuICAgICAgICAgICAgLyogfSovXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBfY3JlYXRlTm90aWZpYWJsZUNoYW5nZVR5cGVzKCkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIC8vL1wibm90aWZpYWJsZUNoYW5nZVR5cGVzXCI6IHtcclxuICAgICAgICAgICAgXCJ0ZXh0TGFiZWxDaGFuZ2VcIjogZmFsc2UsXHJcbiAgICAgICAgICAgIFwiZHJ1Z1N1YnN0YW5jZUNoYW5nZVwiOiBmYWxzZSxcclxuICAgICAgICAgICAgXCJmb3JtdWxhdGlvbkNoYW5nZVwiOiBmYWxzZSxcclxuICAgICAgICAgICAgXCJzcGVjaWZpY2F0aW9uQ2hhbmdlXCI6IGZhbHNlLFxyXG4gICAgICAgICAgICBcImV4cGlyeVN0b3JhZ2VDaGFuZ2VcIjogZmFsc2UsXHJcbiAgICAgICAgICAgIFwibWFudWZhY3RNZXRob2RDaGFuZ2VcIjogZmFsc2UsXHJcbiAgICAgICAgICAgIFwibWFudWZhY3RTaXRlQ2hhbmdlXCI6IGZhbHNlLFxyXG4gICAgICAgICAgICBcImNvbnRhaW5lclNpemVDaGFuZ2VcIjogZmFsc2UsXHJcbiAgICAgICAgICAgIFwicGFja2FnaW5nU3BlY0NoYW5nZVwiOiBmYWxzZSxcclxuICAgICAgICAgICAgXCJwYWNrYWdpbmdNYXRlcmlhbHNDaGFuZ2VcIjogZmFsc2UsXHJcbiAgICAgICAgICAgIFwib3RoZXJDaGFuZ2VEZXRhaWxzXCI6IFwiXCJcclxuICAgICAgICAgICAgLy99XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEBuZ2RvYyBjb252ZXJ0cyBub3RpZmFibGUgY2hhbmdlIGRhdGEgb2JqZWN0IHRvIGEgZmlsZSBvYmplY3RcclxuICAgICAqIEBwYXJhbSBqc29uT2JqIC0gdGhlIGRhdGEgb2JqZWN0IHRvIGNvbnZlcnRcclxuICAgICAqIEByZXR1cm5zIHtqc29ufSByZXByZXNlbnRpbmcgdGhlIGZpbGUgb2JqZWN0IGZvciBhIG5vdGlmaWFibGUgY2hhbmdlXHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBfbWFwTm90aWZpYWJsZUNoYW5nZVR5cGVzVG9PdXRwdXQoanNvbk9iaikge1xyXG4gICAgICAgIGlmICghanNvbk9iaikgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgXCJ0ZXh0X2xhYmVsX2NoYW5nZVwiOiBqc29uT2JqLnRleHRMYWJlbENoYW5nZSA9PT0gdHJ1ZSA/ICdZJyA6ICdOJyxcclxuICAgICAgICAgICAgXCJkcnVnX3N1YnN0YW5jZV9jaGFuZ2VcIjoganNvbk9iai5kcnVnU3Vic3RhbmNlQ2hhbmdlID09PSB0cnVlID8gJ1knIDogJ04nLFxyXG4gICAgICAgICAgICBcImZvcm11bGF0aW9uX2NoYW5nZVwiOiBqc29uT2JqLmZvcm11bGF0aW9uQ2hhbmdlID09PSB0cnVlID8gJ1knIDogJ04nLFxyXG4gICAgICAgICAgICBcInNwZWNpZmljYXRpb25fY2hhbmdlXCI6IGpzb25PYmouc3BlY2lmaWNhdGlvbkNoYW5nZSA9PT0gdHJ1ZSA/ICdZJyA6ICdOJyxcclxuICAgICAgICAgICAgXCJleHBpcnlfc3RvcmFnZV9jaGFuZ2VcIjoganNvbk9iai5leHBpcnlTdG9yYWdlQ2hhbmdlID09PSB0cnVlID8gJ1knIDogJ04nLFxyXG4gICAgICAgICAgICBcIm1hbnVmYWN0X21ldGhvZF9jaGFuZ2VcIjoganNvbk9iai5tYW51ZmFjdE1ldGhvZENoYW5nZSA9PT0gdHJ1ZSA/ICdZJyA6ICdOJyxcclxuICAgICAgICAgICAgXCJtYW51ZmFjdF9zaXRlX2NoYW5nZVwiOiBqc29uT2JqLm1hbnVmYWN0U2l0ZUNoYW5nZSA9PT0gdHJ1ZSA/ICdZJyA6ICdOJyxcclxuICAgICAgICAgICAgXCJjb250YWluZXJfc2l6ZV9jaGFuZ2VcIjoganNvbk9iai5jb250YWluZXJTaXplQ2hhbmdlID09PSB0cnVlID8gJ1knIDogJ04nLFxyXG4gICAgICAgICAgICBcInBhY2thZ2luZ19zcGVjX2NoYW5nZVwiOiBqc29uT2JqLnBhY2thZ2luZ1NwZWNDaGFuZ2UgPT09IHRydWUgPyAnWScgOiAnTicsXHJcbiAgICAgICAgICAgIFwicGFja2FnaW5nX21hdGVyaWFsc19jaGFuZ2VcIjoganNvbk9iai5wYWNrYWdpbmdNYXRlcmlhbHNDaGFuZ2UgPT09IHRydWUgPyAnWScgOiAnTicsXHJcbiAgICAgICAgICAgIFwib3RoZXJfY2hhbmdlX2RldGFpbHNcIjoganNvbk9iai5vdGhlckNoYW5nZURldGFpbHNcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQG5nZG9jIG1ldGhvZCB0cmFuc2Zvcm1zIGEgZmlsZSBqc29uIG9iamVjdCB0byBhIGRhdGEgb2JqZWN0XHJcbiAgICAgKiBAcGFyYW0ganNvbk9iaiAtIHRoZSBmaWxlIGpzb24gb2JqZWN0IHRvIGNvbnZlcnRcclxuICAgICAqIEByZXR1cm5zIHtqc29ufSBjb252ZXJ0ZWQganNvbiBvYmplY3RcclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIF90cmFuc2Zvcm1Ob3RpZmlhYmxlQ2hhbmdlVHlwZUZyb21GaWxlT2JqKGpzb25PYmopIHtcclxuICAgICAgICBpZiAoIWpzb25PYmopIHJldHVybiBudWxsO1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIFwidGV4dExhYmVsQ2hhbmdlXCI6IGpzb25PYmoudGV4dF9sYWJlbF9jaGFuZ2UgPT09ICdZJyxcclxuICAgICAgICAgICAgXCJkcnVnU3Vic3RhbmNlQ2hhbmdlXCI6IGpzb25PYmouZHJ1Z19zdWJzdGFuY2VfY2hhbmdlID09PSAnWScsXHJcbiAgICAgICAgICAgIFwiZm9ybXVsYXRpb25DaGFuZ2VcIjoganNvbk9iai5mb3JtdWxhdGlvbl9jaGFuZ2UgPT09ICdZJyxcclxuICAgICAgICAgICAgXCJzcGVjaWZpY2F0aW9uQ2hhbmdlXCI6IGpzb25PYmouc3BlY2lmaWNhdGlvbl9jaGFuZ2UgPT09ICdZJyxcclxuICAgICAgICAgICAgXCJleHBpcnlTdG9yYWdlQ2hhbmdlXCI6IGpzb25PYmouZXhwaXJ5X3N0b3JhZ2VfY2hhbmdlID09PSAnWScsXHJcbiAgICAgICAgICAgIFwibWFudWZhY3RNZXRob2RDaGFuZ2VcIjoganNvbk9iai5tYW51ZmFjdF9tZXRob2RfY2hhbmdlID09PSAnWScsXHJcbiAgICAgICAgICAgIFwibWFudWZhY3RTaXRlQ2hhbmdlXCI6IGpzb25PYmoubWFudWZhY3Rfc2l0ZV9jaGFuZ2UgPT09ICdZJyxcclxuICAgICAgICAgICAgXCJjb250YWluZXJTaXplQ2hhbmdlXCI6IGpzb25PYmouY29udGFpbmVyX3NpemVfY2hhbmdlID09PSAnWScsXHJcbiAgICAgICAgICAgIFwicGFja2FnaW5nU3BlY0NoYW5nZVwiOiBqc29uT2JqLnBhY2thZ2luZ19zcGVjX2NoYW5nZSA9PT0gJ1knLFxyXG4gICAgICAgICAgICBcInBhY2thZ2luZ01hdGVyaWFsc0NoYW5nZVwiOiBqc29uT2JqLnBhY2thZ2luZ19tYXRlcmlhbHNfY2hhbmdlID09PSAnWScsXHJcbiAgICAgICAgICAgIFwib3RoZXJDaGFuZ2VEZXRhaWxzXCI6IGpzb25PYmoub3RoZXJfY2hhbmdlX2RldGFpbHNcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICBmdW5jdGlvbiBfdHJhbnNmb3JtUmF0aW9uYWxlVHlwZUZyb21GaWxlT2JqKGpzb25PYmopIHtcclxuICAgICAgICBpZiAoIWpzb25PYmopIHJldHVybiBudWxsO1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIFwibmV3Um9hXCI6IGpzb25PYmoubmV3X3JvYSA9PT0gJ1knLFxyXG4gICAgICAgICAgICBcIm5ld0NsYWltc1wiOiBqc29uT2JqLm5ld19jbGFpbXMgPT09ICdZJyxcclxuICAgICAgICAgICAgXCJjaGFuZ2VGb3JtdWxhdGlvblwiOiBqc29uT2JqLmNoYW5nZV9mb3JtdWxhdGlvbiA9PT0gJ1knLFxyXG4gICAgICAgICAgICBcImNoYW5nZURydWdTdWJzdGFuY2VcIjoganNvbk9iai5jaGFuZ2VfZHJ1Z19zdWJzdGFuY2UgPT09ICdZJyxcclxuICAgICAgICAgICAgXCJyZXBsYWNlU3RlcmlsaXR5XCI6IGpzb25PYmoucmVwbGFjZV9zdGVyaWxpdHkgPT09ICdZJyxcclxuICAgICAgICAgICAgXCJjb25maXJtaXRvcnlTdHVkaWVzXCI6IGpzb25PYmouY29uZmlybWl0b3J5X3N0dWRpZXMgPT09ICdZJyxcclxuICAgICAgICAgICAgXCJvdGhlclJhdGlvbmFsZVwiOiBqc29uT2JqLm90aGVyX3JhdGlvbmFsZSA9PT0gJ1knLFxyXG4gICAgICAgICAgICBcIm90aGVyUmF0aW9uYWxlRGV0YWlsc1wiOiBqc29uT2JqLm90aGVyX3JhdGlvbmFsZV9kZXRhaWxzXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBfbWFwUmF0aW9uYWxlVHlwZVRvT3V0cHV0KGpzb25PYmopIHtcclxuICAgICAgICBpZiAoIWpzb25PYmopIHJldHVybiBudWxsO1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIFwibmV3X3JvYVwiOiBqc29uT2JqLm5ld1JvYSA9PT0gdHJ1ZSA/ICdZJyA6ICdOJyxcclxuICAgICAgICAgICAgXCJuZXdfY2xhaW1zXCI6IGpzb25PYmoubmV3Q2xhaW1zID09PSB0cnVlID8gJ1knIDogJ04nLFxyXG4gICAgICAgICAgICBcImNoYW5nZV9mb3JtdWxhdGlvblwiOiBqc29uT2JqLmNoYW5nZUZvcm11bGF0aW9uID09PSB0cnVlID8gJ1knIDogJ04nLFxyXG4gICAgICAgICAgICBcImNoYW5nZV9kcnVnX3N1YnN0YW5jZVwiOiBqc29uT2JqLmNoYW5nZURydWdTdWJzdGFuY2UgPT09IHRydWUgPyAnWScgOiAnTicsXHJcbiAgICAgICAgICAgIFwicmVwbGFjZV9zdGVyaWxpdHlcIjoganNvbk9iai5yZXBsYWNlU3RlcmlsaXR5ID09PSB0cnVlID8gJ1knIDogJ04nLFxyXG4gICAgICAgICAgICBcImNvbmZpcm1pdG9yeV9zdHVkaWVzXCI6IGpzb25PYmouY29uZmlybWl0b3J5U3R1ZGllcyA9PT0gdHJ1ZSA/ICdZJyA6ICdOJyxcclxuICAgICAgICAgICAgXCJvdGhlcl9yYXRpb25hbGVcIjoganNvbk9iai5vdGhlclJhdGlvbmFsZSA9PT0gdHJ1ZSA/ICdZJyA6ICdOJyxcclxuICAgICAgICAgICAgXCJvdGhlcl9yYXRpb25hbGVfZGV0YWlsc1wiOiBqc29uT2JqLm90aGVyUmF0aW9uYWxlRGV0YWlsc1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgLy9UT0RPIGRlbGV0ZVxyXG4gICAgLyogIGZ1bmN0aW9uIF9tYXBSZWxhdGVkUmVnQWN0aXZpdHlUb091dHB1dChqc29uT2JqKSB7XHJcbiAgICAgICAgaWYgKCFqc29uT2JqKSByZXR1cm4gbnVsbDtcclxuICAgICAgICB2YXIgcmVnQWN0aXZpdHlUeXBlID0ge1xyXG4gICAgICAgICAgICBcImFjdGl2aXR5X2lkXCI6IGpzb25PYmouYWN0aXZpdHlJZCxcclxuICAgICAgICAgICAgXCJhbWVuZF9yZWNvcmRcIjoganNvbk9iai5hbWVuZFJlY29yZCA9PT0gdHJ1ZSA/ICdZJyA6ICdOJyxcclxuICAgICAgICAgICAgXCJyZWdfYWN0aXZpdHlfdHlwZVwiOiBqc29uT2JqLnJlZ0FjdGl2aXR5VHlwZSxcclxuICAgICAgICAgICAgXCJkYXRlX2NsZWFyZWRcIjogXCJcIixcclxuXHJcbiAgICAgICAgICAgIFwiY29udHJvbF9udW1iZXJcIjoganNvbk9iai5kc3RzQ29udHJvbE51bWJlcixcclxuICAgICAgICAgICAgXCJkb3NzaWVyX2lkXCI6IGpzb25PYmouZG9zc2llcklkLFxyXG4gICAgICAgICAgICBcIm1hbnVmYWN0dXJlcl9uYW1lXCI6IGpzb25PYmoubWFudWZhY3R1cmVyTmFtZSxcclxuICAgICAgICAgICAgXCJyZWFzb25fZmlsaW5nXCI6IGpzb25PYmoucmVhc29uRmlsaW5nLFxyXG4gICAgICAgICAgICBcImFzc29jX2RpbnNcIjogW11cclxuICAgICAgICB9O1xyXG4gICAgICAgIHZhciBkYXRlQ2xlYXJlZCA9IGpzb25PYmouZGF0ZUNsZWFyZWQ7XHJcbiAgICAgICAgdmFyIG1vbnRoID0gXCJcIjtcclxuICAgICAgICB2YXIgZGF5ID0gXCJcIjtcclxuICAgICAgICBpZiAoZGF0ZUNsZWFyZWQpIHtcclxuICAgICBtb250aCA9IGRhdGVDbGVhcmVkLmdldE1vbnRoKCkgKyAxO1xyXG4gICAgIGRheSA9IGRhdGVDbGVhcmVkLmdldERhdGUoKTtcclxuICAgICAgICAgICAgaWYgKG1vbnRoIDwgMTApIHtcclxuICAgICAgICAgICAgICAgIC8vdG9kbyBoYWNrXHJcbiAgICAgICAgICAgICAgICBtb250aCA9IFwiMFwiICsgbW9udGg7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGRheSA8IDEwKSB7XHJcbiAgICAgICAgICAgICAgICBkYXkgPSBcIjBcIiArIGRheTtcclxuICAgICAgICAgICAgfVxyXG4gICAgIHJlZ0FjdGl2aXR5VHlwZS5kYXRlX2NsZWFyZWQgPSBkYXRlQ2xlYXJlZC5nZXRGdWxsWWVhcigpICsgJy0nICsgKG1vbnRoKSArICctJyArIGRheTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGRpbnMgPSBfbWFwUmVsYXRlZERpbnNUb091dHB1dChqc29uT2JqLmFzc29jRGlucyk7XHJcbiAgICAgICAgaWYgKGRpbnMgJiYgZGlucy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIHJlZ0FjdGl2aXR5VHlwZS5hc3NvY19kaW5zID0gZGlucztcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZWdBY3Rpdml0eVR5cGUuYXNzb2NfZGlucyA9IFwiXCI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZWdBY3Rpdml0eVR5cGU7XHJcbiAgICAgfSovXHJcblxyXG5cclxuICAgIC8qIGZ1bmN0aW9uIF90cmFuc2Zvcm1SZWxhdGVkRGluc0xpc3RGcm9tRmlsZU9iaihqc29uT2JqKSB7XHJcbiAgICAgICAgdmFyIHJlc3VsdCA9IFtdO1xyXG4gICAgICAgIGlmICghanNvbk9iaikgcmV0dXJuIHJlc3VsdDtcclxuXHJcbiAgICAgICAgaWYgKCEoanNvbk9iaiBpbnN0YW5jZW9mIEFycmF5KSkge1xyXG4gICAgICAgICAgICAvL21ha2UgaXQgYW4gYXJyYXksIGNhc2UgdGhlcmUgaXMgb25seSBvbmVcclxuICAgICAgICAgICAganNvbk9iaiA9IFtqc29uT2JqXVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXN1bHQgPSBbXTtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGpzb25PYmoubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgcmVzdWx0LnB1c2goe1wiZGluTnVtYmVyXCI6IGpzb25PYmpbaV0uZGluX251bWJlcn0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgIH0qL1xyXG5cclxuICAgIC8qIGZ1bmN0aW9uIF9tYXBSZWxhdGVkRGluc1RvT3V0cHV0KGpzb25PYmopIHtcclxuICAgICAgICB2YXIgcmVzdWx0ID0gXCJcIjtcclxuICAgICAgICBpZiAoIWpzb25PYmopIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgaWYgKCEoanNvbk9iaiBpbnN0YW5jZW9mIEFycmF5KSkge1xyXG4gICAgICAgICAgICAvL21ha2UgaXQgYW4gYXJyYXksIGNhc2UgdGhlcmUgaXMgb25seSBvbmVcclxuICAgICAgICAgICAganNvbk9iaiA9IFtqc29uT2JqXVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXN1bHQgPSBbXTtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGpzb25PYmoubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgcmVzdWx0LnB1c2goe1wiZGluX251bWJlclwiOiBqc29uT2JqW2ldLmRpbk51bWJlcn0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICB9Ki9cclxuXHJcbiAgICBmdW5jdGlvbiBfcGFyc2VEYXRlKHZhbHVlKSB7XHJcbiAgICAgICAgdmFyIGRhdGVBcnJheSA9IHZhbHVlLnNwbGl0KCctJyk7XHJcbiAgICAgICAgaWYgKGRhdGVBcnJheS5sZW5ndGggIT0gMykge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKChcIl9wYXJzZURhdGUgZXJyb3Igbm90IDMgcGFydHNcIikpXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBhRGF0ZSA9IG5ldyBEYXRlKGRhdGVBcnJheVswXSwgZGF0ZUFycmF5WzFdIC0gMSwgZGF0ZUFycmF5WzJdKTtcclxuICAgICAgICByZXR1cm4gYURhdGU7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gX2dldEVtcHR5QWN0aXZpdHkoKSB7XHJcblxyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcInNwb25zb3JOYW1lXCI6IFwiXCIsXHJcbiAgICAgICAgICAgIFwiZGF0ZUNsZWFyZWRcIjogXCJcIixcclxuICAgICAgICAgICAgXCJyZWdBY3Rpdml0eVR5cGVcIjogXCJcIixcclxuICAgICAgICAgICAgXCJjb250cm9sTnVtYmVyXCI6IFwiXCIsXHJcbiAgICAgICAgICAgIFwibGljZW5zZUFncmVlXCI6IFwiXCIsXHJcbiAgICAgICAgICAgIFwiZGluVHJhbnNmZXJcIjogXCJcIixcclxuICAgICAgICAgICAgXCJub3RMYXNhXCI6IGZhbHNlXHJcbiAgICAgICAgfVxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcblxyXG59KSgpO1xyXG5cclxuIiwiLyoqXHJcbiAqIENyZWF0ZWQgYnkgZGtpbHR5IG9uIDA0LzAxLzIwMTcuXHJcbiAqL1xyXG4oZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ2FkbWluU3VibWlzc2lvbicsIFsnbnVtYmVyRm9ybWF0JywgJ2hwZmJDb25zdGFudHMnLCAndWkuYm9vdHN0cmFwJywgJ3VpLnNlbGVjdCddKVxyXG59KSgpO1xyXG5cclxuKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKCdhZG1pblN1Ym1pc3Npb24nKVxyXG4gICAgICAgIC5jb21wb25lbnQoJ2NtcEFkbWluU3ViJywge1xyXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2FwcC9zY3JpcHRzL2NvbXBvbmVudHMvYWRtaW5TdWJtaXNzaW9uL3RwbC1hZG1pbi1zdWJfMjAxNzAxMjRfMTIyNy5odG1sJyxcclxuICAgICAgICAgICAgY29udHJvbGxlcjogQWRtaW5TdWJDdHJsLFxyXG4gICAgICAgICAgICBjb250cm9sbGVyQXM6ICdhZG1pbkN0cmwnLFxyXG4gICAgICAgICAgICBiaW5kaW5nczoge1xyXG4gICAgICAgICAgICAgICAgcmVjb3JkOiAnPCcsXHJcbiAgICAgICAgICAgICAgICBzaG93RXJyb3JzOiAnPCcsXHJcbiAgICAgICAgICAgICAgICBhY3Rpdml0eVR5cGVzOiAnJicsXHJcbiAgICAgICAgICAgICAgICB5ZXNOb1R5cGVzOiAnJidcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgIEFkbWluU3ViQ3RybC4kaW5qZWN0ID0gWydOTycsJyR0cmFuc2xhdGUnXTtcclxuXHJcbiAgICBmdW5jdGlvbiBBZG1pblN1YkN0cmwoTk8sICR0cmFuc2xhdGUpIHtcclxuICAgICAgICB2YXIgdm0gPSB0aGlzO1xyXG4gICAgICAgIHZtLmRhdGVGb3JtYXQgPSAneXl5eS1NTS1kZCc7XHJcbiAgICAgICAgdm0uZGluVHJhbnNmZXJTaG93ID0gZmFsc2U7XHJcbiAgICAgICAgdm0ubW9kZWwgPSB7XHJcbiAgICAgICAgICAgIHNwb25zb3JOYW1lOiBcIlwiLFxyXG4gICAgICAgICAgICBkYXRlQ2xlYXJlZDogXCJcIixcclxuICAgICAgICAgICAgXCJyZWdBY3Rpdml0eVR5cGVcIjogXCJcIixcclxuICAgICAgICAgICAgXCJjb250cm9sTnVtYmVyXCI6IFwiXCIsXHJcbiAgICAgICAgICAgIFwibGljZW5zZUFncmVlXCI6IFwiXCIsXHJcbiAgICAgICAgICAgIFwiZGluVHJhbnNmZXJcIjogXCJcIixcclxuICAgICAgICAgICAgXCJub3RMYXNhXCI6IGZhbHNlXHJcbiAgICAgICAgfTtcclxuICAgICAgICB2bS5sYW5nID0gJHRyYW5zbGF0ZS5wcm9wb3NlZExhbmd1YWdlKCkgfHwgJHRyYW5zbGF0ZS51c2UoKTtcclxuICAgICAgICB2bS5kYXRlT3B0aW9ucyA9IHtcclxuICAgICAgICAgICAgc2hvd1dlZWtzOiBmYWxzZVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgdm0ub3BlblJlZkRhdGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZtLnJlZkRhdGVPcGVuID0gdHJ1ZTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2bS55ZXNOb0xpc3QgPSB2bS55ZXNOb1R5cGVzKCk7XHJcbiAgICAgICAgdm0uYWN0aXZpdHlUeXBlTGlzdCA9IHZtLmFjdGl2aXR5VHlwZXMoe2lzUGlsb3Q6IHRydWV9KTsgLy9pcyBwaWxvdFxyXG4gICAgICAgIHZtLiRvbkluaXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZtLmlzTGljZW5zZUFncmVlbWVudCgpO1xyXG4gICAgICAgICAgICAvLy9kbyBpbml0XHJcbiAgICAgICAgfTtcclxuICAgICAgICB2bS4kb25DaGFuZ2VzID0gZnVuY3Rpb24gKGNoYW5nZXMpIHtcclxuICAgICAgICAgICAgaWYgKGNoYW5nZXMucmVjb3JkKSB7XHJcbiAgICAgICAgICAgICAgICB2bS5tb2RlbCA9IGNoYW5nZXMucmVjb3JkLmN1cnJlbnRWYWx1ZTtcclxuICAgICAgICAgICAgICAgIHZtLmlzTGljZW5zZUFncmVlbWVudCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICB2bS5zaG93RXJyb3IgPSBmdW5jdGlvbiAoaXNUb3VjaGVkLCBpc0ludmFsaWQpIHtcclxuICAgICAgICAgICAgaWYgKChpc1RvdWNoZWQgJiYgaXNJbnZhbGlkKSB8fCAoaXNJbnZhbGlkICYmIHZtLnNob3dFcnJvcnMpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogRXJyb3IgZGlzcGxheSBzcGVjaWZpY2FsbHkgZm9yIGNoZWNrYm94XHJcbiAgICAgICAgICogQHBhcmFtIGlzVG91Y2hlZFxyXG4gICAgICAgICAqIEBwYXJhbSB2YWx1ZVxyXG4gICAgICAgICAqIEByZXR1cm5zIHtib29sZWFufCp9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdm0uc2hvd0Vycm9yQ2hlY2tCb3ggPSBmdW5jdGlvbiAoaXNUb3VjaGVkLCB2YWx1ZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gKCF2YWx1ZSAmJiBpc1RvdWNoZWQpIHx8ICh2bS5zaG93RXJyb3JzICYmICF2YWx1ZSApO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZtLmlzTGljZW5zZUFncmVlbWVudCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgLy9pZiBubyB0aGVuIHNob3cgZGluIHRyYW5zZmVyIGNoZWNrYm94XHJcbiAgICAgICAgICAgIGlmICh2bS5tb2RlbCAmJiBOTyA9PT0gdm0ubW9kZWwubGljZW5zZUFncmVlKSB7XHJcbiAgICAgICAgICAgICAgICB2bS5kaW5UcmFuc2ZlclNob3cgPSB0cnVlO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdm0uZGluVHJhbnNmZXJTaG93ID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB2bS5tb2RlbC5kaW5UcmFuc2ZlciA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgIH1cclxufSkoKTsiLCIvKipcclxuICogQ3JlYXRlZCBieSBka2lsdHkgb24gOC81LzIwMTYuXHJcbiAqL1xyXG5cclxuKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgnY29udGFjdE1vZHVsZTI1JywgWydjb250YWN0TW9kdWxlJ10pXHJcbn0pKCk7XHJcblxyXG4oZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKCdjb250YWN0TW9kdWxlMjUnKVxyXG4gICAgICAgIC5jb21wb25lbnQoJ2NtcFJlcENvbnRhY3RSZWNvcmQnLCB7XHJcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnYXBwL3NjcmlwdHMvY29tcG9uZW50cy9yZXAtY29udGFjdC1yZWNvcmQvdHBsLXJlcC1jb250YWN0LXJlY29yZF8yMDE3MDEyNF8xMjI3Lmh0bWwnLFxyXG4gICAgICAgICAgICBjb250cm9sbGVyOiBjb250YWN0UmVjQ3RybCxcclxuICAgICAgICAgICAgY29udHJvbGxlckFzOiAnY29udGFjdFJlYycsXHJcbiAgICAgICAgICAgIGJpbmRpbmdzOiB7XHJcbiAgICAgICAgICAgICAgICBjb250YWN0UmVjb3JkOiAnPCcsXHJcbiAgICAgICAgICAgICAgICBvblVwZGF0ZTogJyYnLFxyXG4gICAgICAgICAgICAgICAgdXBkYXRlVmFsaWQ6ICcmJyxcclxuICAgICAgICAgICAgICAgIG9uRGVsZXRlOiAnJicsXHJcbiAgICAgICAgICAgICAgICBpc0RldGFpbFZhbGlkOiAnJicsXHJcbiAgICAgICAgICAgICAgICBpc0FtZW5kOic8J1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICBjb250YWN0UmVjQ3RybC4kaW5qZWN0PVsnJHNjb3BlJ107XHJcbiAgICBmdW5jdGlvbiBjb250YWN0UmVjQ3RybCgkc2NvcGUpIHtcclxuICAgICAgICB2YXIgdm0gPSB0aGlzO1xyXG4gICAgICAgIHZtLnNhdmVQcmVzc2VkID0gZmFsc2U7XHJcbiAgICAgICAgdm0uZm9ybUFtZW5kPWZhbHNlO1xyXG4gICAgICAgIHZtLmlzQ29udGFjdCA9IHRydWU7IC8vdXNlZCB0byBzZXQgdGhlIHN0YXRlIG9mIHRoZSByb2xlXHJcbiAgICAgICAgdm0uaXNOb3RFZGl0YWJsZSA9IGZhbHNlO1xyXG4gICAgICAgIHZtLmNvbnRhY3RNb2RlbCA9IHt9O1xyXG4gICAgICAgIHZtLmVkaXRTdGF0ZSA9IHRydWU7XHJcblxyXG4gICAgICAgIHZtLiRvbkluaXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIC8vYWZ0ZXIgaW5pdCBkbyBub3QgaW5pdGlhbGlzZSB2YXJpYWJsZXMgaGVyZSBvbmNoYW5nZXMgaXMgY2FsbGVkIGZpcnN0XHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogRHVlIHRvIGJpbmRpbmcgd2l0aCB0YWJsZSBleHBhbmRlciB0aGlzIG1ldGhvZCBkb2VzIG5vdCBnZXQgY2FsbGVkXHJcbiAgICAgICAgICogQHBhcmFtIGNoYW5nZXNcclxuICAgICAgICAgKi9cclxuICAgICAgICB2bS4kb25DaGFuZ2VzID0gZnVuY3Rpb24gKGNoYW5nZXMpIHtcclxuICAgICAgICAgICAgLy9ob3cgdGhpcyBpcyBjdXJyZW50bHkgd2lyZWQsIHRoaXMgd2lsbCBuZXZlciBmaXJlIVxyXG4gICAgICAgICAgICBpZiAoY2hhbmdlcy5jb250YWN0UmVjb3JkKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhjaGFuZ2VzLmNvbnRhY3RSZWNvcmQuY3VycmVudFZhbHVlKVxyXG4gICAgICAgICAgICAgICAgdm0uY29udGFjdE1vZGVsID0gYW5ndWxhci5jb3B5KGNoYW5nZXMuY29udGFjdFJlY29yZC5jdXJyZW50VmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgdm0uc2V0RWRpdGFibGVTdGF0ZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmKGNoYW5nZXMuaXNBbWVuZCl7XHJcbiAgICAgICAgICAgICAgICB2bS5mb3JtQW1lbmQ9Y2hhbmdlcy5pc0FtZW5kLmN1cnJlbnRWYWx1ZTtcclxuICAgICAgICAgICAgICAgIHZtLnNldEVkaXRhYmxlU3RhdGUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogIGNhbGxzIHRoZSBkZWxldGUgZnVuY3Rpb24gb24gdGhlIHBhcmVudFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHZtLmRlbGV0ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdm0ub25EZWxldGUoe2NvbnRhY3RJZDogdm0uY29udGFjdE1vZGVsLnJlcFJvbGV9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLyogQG5nZG9jIG1ldGhvZCAtZGlzY2FyZHMgdGhlIGNoYW5nZXMgYW5kIHJldmVydHMgdG8gdGhlIG1vZGVsXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKi9cclxuICAgICAgICB2bS5kaXNjYXJkQ2hhbmdlcyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKHZtLmNvbnRhY3RSZWNGb3JtLiRwcmlzdGluZSkgcmV0dXJuO1xyXG4gICAgICAgICAgICB2YXIgY3VyclJlY29yZCA9IHZtLmNvbnRhY3RSZWNvcmQ7XHJcbiAgICAgICAgICAgIHZtLmNvbnRhY3RNb2RlbCA9IGFuZ3VsYXIuY29weShjdXJyUmVjb3JkKTtcclxuICAgICAgICAgICAgdm0uc2V0Tm90RWRpdGFibGUoKVxyXG4gICAgICAgICAgICAvL3NpbmNlIHdlIGFyZSByZXZlcnRpbmcgYmFjayB0byB0aGUgbGFzdCBzYXZlIHNob3VsZCBiZSBwcmlzdGluZVxyXG4gICAgICAgICAgICB2bS5jb250YWN0UmVjRm9ybS4kc2V0UHJpc3RpbmUoKTtcclxuICAgICAgICAgICAgdm0uaXNEZXRhaWxWYWxpZCh7c3RhdGU6IHZtLmNvbnRhY3RSZWNGb3JtLiR2YWxpZH0pO1xyXG4gICAgICAgICAgICB2bS5zYXZlUHJlc3NlZCA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQG5nZG9jIG1ldGhvZCAtVXBkYXRlcyB0aGUgcGFyZW50IG9uIHdoZXRoZXIgdGhpcyByZWNvcmQgaXMgdmFsaWQgb3Igbm90XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdm0udXBkYXRlVmFsaWQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZtLmlzRGV0YWlsVmFsaWQoe3N0YXRlOiAodm0uY29udGFjdFJlY0Zvcm0uJHZhbGlkICYmICF2bS5jb250YWN0UmVjRm9ybS4kZGlydHkpfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIElmIHRoZSBmb3JtIGlzIGRpcnR5IGFsd2F5cyBzZXQgdGhhdCBpdCBpcyBub3QgdmFsaWRcclxuICAgICAgICAgKi9cclxuICAgICAgICAkc2NvcGUuJHdhdGNoKCdjb250YWN0UmVjLmNvbnRhY3RSZWNGb3JtLiRkaXJ0eScsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAvL2lmIHN0YXRlbWVudCByZWR1bmRhbnQ/XHJcbiAgICAgICAgIGlmKHZtLmNvbnRhY3RSZWNGb3JtLiRkaXJ0eSkge1xyXG4gICAgICAgICB2bS5pc0RldGFpbFZhbGlkKHtzdGF0ZTpmYWxzZX0pXHJcbiAgICAgICAgIH1cclxuICAgICAgICAgfSwgdHJ1ZSk7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFVwZGF0ZXMgdGhlIGNvbnRhY3QgbW9kZWwgdXNlZCBieSB0aGUgc2F2ZSBidXR0b25cclxuICAgICAgICAgKi9cclxuICAgICAgICB2bS51cGRhdGVDb250YWN0TW9kZWwgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmICh2bS5jb250YWN0UmVjRm9ybS4kdmFsaWQpIHtcclxuICAgICAgICAgICAgICAgIC8vdm0uY29udGFjdE1vZGVsLmlzRGV0YWlsVmFsaWQgPSB0cnVlOyBUT0RPIHJlbW92ZVxyXG4gICAgICAgICAgICAgICAgdm0uaXNEZXRhaWxWYWxpZCh7c3RhdGU6IHRydWV9KVxyXG4gICAgICAgICAgICAgICAgdm0uY29udGFjdFJlY0Zvcm0uJHNldFByaXN0aW5lKCk7XHJcbiAgICAgICAgICAgICAgICB2bS5vblVwZGF0ZSh7Y29udGFjdDogdm0uY29udGFjdE1vZGVsfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdm0uc2F2ZVByZXNzZWQgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAbmdkb2MgbWV0aG9kIHRvZ2dsZXMgZXJyb3Igc3RhdGUgdG8gbWFrZSBlcnJvcnMgdmlzaWJsZVxyXG4gICAgICAgICAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHZtLnNob3dFcnJvcnMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAodm0uc2F2ZVByZXNzZWQpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2bS5zZXRFZGl0YWJsZVN0YXRlID0gZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICAgICAgaWYgKCF2bS5mb3JtQW1lbmQpIHtcclxuICAgICAgICAgICAgICAgIHZtLmVkaXRTdGF0ZSA9IHRydWU7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodm0uZm9ybUFtZW5kICYmIHZtLmNvbnRhY3RNb2RlbC5hbWVuZCkge1xyXG4gICAgICAgICAgICAgICAgdm0uZWRpdFN0YXRlID0gdHJ1ZTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHZtLmVkaXRTdGF0ZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuXHJcblxyXG4gICAgfVxyXG5cclxuXHJcbn0pKCk7IiwiLyoqXHJcbiAqIENyZWF0ZWQgYnkgZGtpbHR5IG9uIDgvNi8yMDE2LlxyXG4gKi9cclxuXHJcblxyXG4oZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKCdjb250YWN0TW9kdWxlMjYnLCBbJ2NvbnRhY3RNb2R1bGUyNScsICdleHBhbmRpbmdUYWJsZScsICdyZXBDb250YWN0U2VydmljZSddKVxyXG59KSgpO1xyXG5cclxuKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgnY29udGFjdE1vZHVsZTI2JylcclxuICAgICAgICAuY29tcG9uZW50KCdjbXBSZXBDb250YWN0TGlzdCcsIHtcclxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdhcHAvc2NyaXB0cy9jb21wb25lbnRzL3JlcENvbnRhY3RMaXN0L3RwbC1yZXAtY29udGFjdC1saXN0XzIwMTcwMTI0XzEyMjcuaHRtbCcsXHJcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6IGNvbnRhY3RMaXN0Q3RybCxcclxuICAgICAgICAgICAgY29udHJvbGxlckFzOiAnY29udGFjdExpc3RDdHJsJyxcclxuICAgICAgICAgICAgYmluZGluZ3M6IHtcclxuICAgICAgICAgICAgICAgIGNvbnRhY3RzOiAnPCcsXHJcbiAgICAgICAgICAgICAgICAvLyAgb25VcGRhdGU6ICcmJyxcclxuICAgICAgICAgICAgICAgIC8vIGdldE5ld0NvbnRhY3Q6ICcmJyxcclxuICAgICAgICAgICAgICAgIHNob3dMaXN0RXJyb3JzOiAnJicsXHJcbiAgICAgICAgICAgICAgICBwYXJlbnREaXJ0eTogJzwnLFxyXG4gICAgICAgICAgICAgICAgaXNBbWVuZDogJzwnXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIGNvbnRhY3RMaXN0Q3RybC4kaW5qZWN0ID0gWyckZmlsdGVyJywgJ1JlcENvbnRhY3RTZXJ2aWNlJ11cclxuICAgIGZ1bmN0aW9uIGNvbnRhY3RMaXN0Q3RybCgkZmlsdGVyLCBSZXBDb250YWN0U2VydmljZSkge1xyXG4gICAgICAgIHZhciB2bSA9IHRoaXM7XHJcbiAgICAgICAgdm0uc2VsZWN0UmVjb3JkID0gLTE7IC8vdGhlIHJlY29yZCB0byBzZWxlY3RcclxuICAgICAgICB2bS5pc0RldGFpbFZhbGlkID0gdHJ1ZTsgLy91c2VkIHRvIHRyYWNrIGlmIGRldGFpbHMgdmFsaWQuIElmIHRoZXkgYXJlICBub3QgZG8gbm90IGFsbG93IGV4cGFuZGVyIGNvbGxhcHNlXHJcbiAgICAgICAgdm0uY29udGFjdExpc3QgPSBbXTtcclxuICAgICAgICB2bS5vbmVSZWNvcmQgPSBcIlwiOyAvL3VzaW5nIHJlcXVpcmVkIGFzIHRoZSB2YWxpZGFpdG9uXHJcbiAgICAgICAgdm0uaXNQYXJlbnREaXJ0eSA9IGZhbHNlOyAvL3RyYWNrcyB3aGV0aGVyIHRoZSBwYXJlbnQgZm9ybSBoYXMgYmVlbiBkaXJ0aWVkXHJcbiAgICAgICAgdm0uZm9ybUFtZW5kID0gZmFsc2U7XHJcbiAgICAgICAgdm0ucmVzZXRDb2xsYXBzZWQgPSBmYWxzZTtcclxuICAgICAgICB2YXIgcmVwQ29udGFjdFNlcnZpY2UgPSBuZXcgUmVwQ29udGFjdFNlcnZpY2UoKTtcclxuICAgICAgICB2bS5jb2x1bW5EZWYgPSBbXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGxhYmVsOiBcIkZJUlNUX05BTUVcIixcclxuICAgICAgICAgICAgICAgIGJpbmRpbmc6IFwiZ2l2ZW5OYW1lXCIsXHJcbiAgICAgICAgICAgICAgICB3aWR0aDogXCI0MFwiXHJcbiAgICAgICAgICAgIH0sXHJcblxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBsYWJlbDogXCJMQVNUX05BTUVcIixcclxuICAgICAgICAgICAgICAgIGJpbmRpbmc6IFwic3VybmFtZVwiLFxyXG4gICAgICAgICAgICAgICAgd2lkdGg6IFwiNDBcIlxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBsYWJlbDogXCJPTkVfUk9MRVwiLFxyXG4gICAgICAgICAgICAgICAgYmluZGluZzogXCJyZXBSb2xlXCIsXHJcbiAgICAgICAgICAgICAgICB3aWR0aDogXCIyMFwiXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICBdXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogdXNpbmcgdG8gZ2V0IGNvbnRhY3QgbGlzdFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHZtLiRvbkluaXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZtLmZvY3VzZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgLy8gdm0uY29udGFjdExpc3QgPSB2bS5jb250YWN0cztcclxuICAgICAgICB9XHJcbiAgICAgICAgdm0uJG9uQ2hhbmdlcyA9IGZ1bmN0aW9uIChjaGFuZ2VzKSB7XHJcbiAgICAgICAgICAgIGlmIChjaGFuZ2VzLmNvbnRhY3RzKSB7XHJcbiAgICAgICAgICAgICAgICB2bS5jb250YWN0TGlzdCA9IGNoYW5nZXMuY29udGFjdHMuY3VycmVudFZhbHVlO1xyXG4gICAgICAgICAgICAgICAgdm0udXBkYXRlRXJyb3JTdGF0ZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChjaGFuZ2VzLnBhcmVudERpcnR5KSB7XHJcbiAgICAgICAgICAgICAgICB2bS5pc1BhcmVudERpcnR5ID0gY2hhbmdlcy5wYXJlbnREaXJ0eS5jdXJyZW50VmFsdWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGNoYW5nZXMuaXNBbWVuZCkge1xyXG4gICAgICAgICAgICAgICAgdm0uZm9ybUFtZW5kID0gY2hhbmdlcy5pc0FtZW5kLmN1cnJlbnRWYWx1ZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9XHJcbiAgICAgICAgdm0uaXNBZGRDb250YWN0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAodm0uY29udGFjdExpc3QubGVuZ3RoID4gMSkge1xyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gKHZtLmlzRGV0YWlsVmFsaWQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdm0uc2hvd05vUmVjb3JkRXJyb3IgPSBmdW5jdGlvbiAoaXNJbnZhbGlkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAoKHZtLmlzUGFyZW50RGlydHkgJiYgaXNJbnZhbGlkICApIHx8ICh2bS5zaG93TGlzdEVycm9ycygpICYmIGlzSW52YWxpZCkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdm0uc2V0VmFsaWQgPSBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgdm0uaXNEZXRhaWxWYWxpZCA9IHZhbHVlOyAvL3RoaXMgaXMgYSBzaGFyZWQgdmFsdWVcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZtLnNob3dFcnJvciA9IGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiAodm0uY29udGFjdExpc3RGb3JtLiRpbnZhbGlkICYmICF2bS5jb250YWN0TGlzdEZvcm0uJHByaXN0aW5lKSB8fCAodm0uY29udGFjdExpc3RGb3JtLiRpbnZhbGlkICYmIHZtLnNob3dMaXN0RXJyb3JzKCkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdm0ub25VcGRhdGVDb250YWN0UmVjb3JkID0gZnVuY3Rpb24gKHJlY29yZCkge1xyXG4gICAgICAgICAgICB2YXIgaWR4ID0gdm0uY29udGFjdExpc3QuaW5kZXhPZihcclxuICAgICAgICAgICAgICAgICRmaWx0ZXIoJ2ZpbHRlcicpKHZtLmNvbnRhY3RMaXN0LCB7cmVwUm9sZTogcmVjb3JkLnJlcFJvbGV9LCB0cnVlKVswXVxyXG4gICAgICAgICAgICApOyAvL1RPRE8gZml4IGZpbHRlclxyXG4gICAgICAgICAgICB2bS5jb250YWN0TGlzdFtpZHhdID0gYW5ndWxhci5jb3B5KHJlY29yZCk7XHJcbiAgICAgICAgICAgIHZtLnVwZGF0ZUVycm9yU3RhdGUoKTtcclxuICAgICAgICAgICAgdm0uY29udGFjdExpc3RGb3JtLiRzZXRQcmlzdGluZSgpO1xyXG4gICAgICAgICAgICB2bS5yZXNldENvbGxhcHNlZCA9ICF2bS5yZXNldENvbGxhcHNlZDtcclxuICAgICAgICAgICAgdm0uZGlzYWJsZUFkZCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvKioqXHJcbiAgICAgICAgICogVHJhY2tzIGlmIG5vIHJlY29yZHNcclxuICAgICAgICAgKi9cclxuICAgICAgICB2bS51cGRhdGVFcnJvclN0YXRlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAodm0uY29udGFjdExpc3QgJiYgdm0uY29udGFjdExpc3QubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgdm0ub25lUmVjb3JkID0gXCJpcyB2YWx1ZVwiO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdm0ub25lUmVjb3JkID0gXCJcIjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9XHJcbiAgICAgICAgdm0uZGVsZXRlQ29udGFjdCA9IGZ1bmN0aW9uIChjSUQpIHtcclxuICAgICAgICAgICAgdmFyIGlkeCA9IHZtLmNvbnRhY3RMaXN0LmluZGV4T2YoXHJcbiAgICAgICAgICAgICAgICAkZmlsdGVyKCdmaWx0ZXInKSh2bS5jb250YWN0TGlzdCwge3JlcFJvbGU6IGNJRH0sIHRydWUpWzBdXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIHZtLmNvbnRhY3RMaXN0LnNwbGljZShpZHgsIDEpO1xyXG4gICAgICAgICAgICAvL2NoZWNrIGlmIG9ubHkgb25lIHJlY29yZFxyXG4gICAgICAgICAgICAvL3RvZG8gZ2V0IEFsdGVybmF0ZVxyXG4gICAgICAgICAgICBpZiAodm0uY29udGFjdExpc3QubGVuZ3RoID09PSAxICYmIHZtLmNvbnRhY3RMaXN0WzBdLnJlcFJvbGUgIT09IFwiUFJJTUFSWVwiKSB7XHJcbiAgICAgICAgICAgICAgICB2bS5jb250YWN0TGlzdFswXS5yZXBSb2xlID0gXCJQUklNQVJZXCJcclxuICAgICAgICAgICAgICAgIHZhciB0ZW1wPWFuZ3VsYXIuY29weSh2bS5jb250YWN0TGlzdCk7XHJcbiAgICAgICAgICAgICAgICB2bS5jb250YWN0TGlzdD1bXVxyXG4gICAgICAgICAgICAgICAgdm0uY29udGFjdExpc3Q9dGVtcDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy92bS5vblVwZGF0ZSh7bmV3TGlzdDogdm0uY29udGFjdExpc3R9KTtcclxuICAgICAgICAgICAgdm0udXBkYXRlRXJyb3JTdGF0ZSgpO1xyXG4gICAgICAgICAgICB2bS5kaXNhYmxlQWRkKClcclxuICAgICAgICAgICAgdm0uc2V0VmFsaWQodHJ1ZSk7XHJcbiAgICAgICAgICAgIHZtLnNlbGVjdFJlY29yZCA9IC0xO1xyXG4gICAgICAgICAgICB2bS5yZXNldENvbGxhcHNlZCA9ICF2bS5yZXNldENvbGxhcHNlZDtcclxuICAgICAgICB9XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQWRkcyBhIGNvbnRhY3QgdG8gdGhlIGNvbnRhY3QgbGlzdFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHZtLmFkZENvbnRhY3QgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBkZWZhdWx0Q29udGFjdCA9IHJlcENvbnRhY3RTZXJ2aWNlLmNyZWF0ZVJlcENvbnRhY3Qodm0uY29udGFjdExpc3QpO1xyXG4gICAgICAgICAgICB2bS5jb250YWN0TGlzdC5wdXNoKGRlZmF1bHRDb250YWN0KTtcclxuICAgICAgICAgICAgLy9zZWxlY3QgdGFibGUgcm93IGZpcnN0IHRoZW4gbWFrZSBpbnZhbGlkXHJcbiAgICAgICAgICAgIHZtLnNlbGVjdFJlY29yZCA9ICh2bS5jb250YWN0TGlzdC5sZW5ndGggLSAxKTtcclxuICAgICAgICAgICAgdm0uc2V0VmFsaWQoZmFsc2UpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdm0uZGlzYWJsZUFkZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKCF2bS5jb250YWN0TGlzdCkgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB2YXIgaXNJbnZhbGlkID0gIXZtLmlzRGV0YWlsVmFsaWQgfHwgdm0uY29udGFjdExpc3QubGVuZ3RoID09IDIgfHwgKHZtLmNvbnRhY3RMaXN0Lmxlbmd0aCA+IDAgJiYgdm0uY29udGFjdExpc3RGb3JtLiRpbnZhbGlkKVxyXG4gICAgICAgICAgICAgICAvLyB8fCAodm0uY29udGFjdExpc3RGb3JtLiR2YWxpZCAmJiB2bS5jb250YWN0TGlzdEZvcm0uJGRpcnR5KTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBpc0ludmFsaWQ7XHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICB9XHJcblxyXG59KSgpO1xyXG4iLCIvKipcclxuICogQ3JlYXRlZCBieSBka2lsdHkgb24gMTIvMDcvMjAxNi5cclxuICovXHJcblxyXG4oZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ2ZpbGVJTycsIFtdKTtcclxuXHJcbn0pKCk7XHJcblxyXG4oZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG4gICAgLyoqXHJcbiAgICAgKiBAbmdkb2MgZGlyZWN0aXZlIC1hdHRyaWJ1dGUgZGlyZWN0aXZlIGZvciBmaWxlIGxvYWQuIFBsYWNlIG9uIGZpbGUgaW5wdXQgZWxlbWVudFxyXG4gICAgICogYXR0cmlidXRlIG11c3QgYmUgYm91bmQgdG8gYSBmdW5jdGlvbiB3aXRoIGEgcGFyYW1ldGVyIG5hbWVkIGZpbGVDb250ZW50LiBPbiBsb2FkXHJcbiAgICAgKiB0aGUgZnVuY3Rpb24gd2lsbCBiZSBjYWxsZWQgdG8gdXBkYXRlIHZhbHVlc1xyXG4gICAgICovXHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgnZmlsZUlPJylcclxuICAgICAgICAuZGlyZWN0aXZlKCdocGZiRmlsZVNlbGVjdCcsIG5nRmlsZVNlbGVjdCk7XHJcblxyXG4gICAgbmdGaWxlU2VsZWN0LiRpbmplY3QgPSBbJ2hwZmJGaWxlUHJvY2Vzc2luZyddO1xyXG4gICAgZnVuY3Rpb24gbmdGaWxlU2VsZWN0KGhwZmJGaWxlUmVhZGVyKSB7XHJcbiAgICAgICAgdmFyIGRpcmVjdGl2ZSA9IHtcclxuXHJcbiAgICAgICAgICAgIGxpbms6IGxpbmssXHJcbiAgICAgICAgICAgIHJlc3RyaWN0OiAnQScsXHJcbiAgICAgICAgICAgIHNjb3BlOiB7XHJcbiAgICAgICAgICAgICAgICBocGZiRmlsZVNlbGVjdDogXCImXCIsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4gZGlyZWN0aXZlO1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBsaW5rKHNjb3BlLCBlbGVtZW50LCBhdHRycykge1xyXG4gICAgICAgICAgICBzY29wZS5yb290VGFnID0gYXR0cnMucm9vdFRhZztcclxuICAgICAgICAgICAgZWxlbWVudC5iaW5kKFwiY2hhbmdlXCIsIGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgICAgICBzY29wZS5maWxlID0gKGUuc3JjRWxlbWVudCB8fCBlLnRhcmdldCkuZmlsZXNbMF07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGhwZmJGaWxlUmVhZGVyLnJlYWRBc0RhdGFUZXh0KHNjb3BlLmZpbGUsIHNjb3BlKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY29wZS5ocGZiRmlsZVNlbGVjdCh7ZmlsZUNvbnRlbnQ6IHJlc3VsdH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG5cclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9XHJcblxyXG4gICAgfVxyXG59KSgpO1xyXG5cclxuKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuICAgIC8qKlxyXG4gICAgICogQG5nZG9jIGNvbXBvbmVudC0gZmlsZVNlbGVjdCBVSSBmb3IgbG9hZGluZyBmaWxlcyBpbnRvIGEgZGF0YSBtb2RlbFxyXG4gICAgICogQHBhcmFtIHVwZGF0ZU1vZGVsUm9vdC0gdGhlIGZ1bmN0aW9uIHRvIGNhbGwgYW5kIHBhc3MgdGhlIEpTT04gbW9kZWxcclxuICAgICAqIEBwYXJhbSByb290RWxlbSAtIHRoZSBuYW1lIG9mIHRoZSByb290IGVsZW1lbnQuIFVzZWQgZm9yIGNvbXBhcmluZyB0byB0aGUgbG9hZGVkIGZpbGVcclxuICAgICAqL1xyXG4gICAgYW5ndWxhci5tb2R1bGUoJ2ZpbGVJTycpLmNvbXBvbmVudCgnaHBmYkZpbGVTZWxlY3QnLCB7XHJcbiAgICAgICAgdGVtcGxhdGVVcmw6ICdhcHAvc2NyaXB0cy9jb21wb25lbnRzL2ZpbGVJTy9maWxlU2VsZWN0XzIwMTcwMTI0XzEyMjcuaHRtbCcsXHJcbiAgICAgICAgY29udHJvbGxlcjogRmlsZVNlbGVjdENvbnRyb2xsZXIsXHJcbiAgICAgICAgYmluZGluZ3M6IHtcclxuICAgICAgICAgICAgdXBkYXRlTW9kZWxSb290OiAnJicsXHJcbiAgICAgICAgICAgIHJvb3RFbGVtOiAnQCcsXHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG5cclxuICAgIEZpbGVTZWxlY3RDb250cm9sbGVyLiRpbmplY3QgPSBbJ2hwZmJGaWxlUHJvY2Vzc2luZyddXHJcbiAgICBmdW5jdGlvbiBGaWxlU2VsZWN0Q29udHJvbGxlcihocGZiRmlsZVByb2Nlc3NpbmcpIHtcclxuICAgICAgICB2YXIgdm0gPSB0aGlzO1xyXG4gICAgICAgIHZtLmZpbGVUeXBlcyA9IFwiLnhtbCwgLmhjc2NcIlxyXG4gICAgICAgIHZtLm1vZGVsQ2FsbGJhY2sgPSBmdW5jdGlvbiAoZmlsZUNvbnRlbnQpIHtcclxuICAgICAgICAgICAgdm0uc3RhdHVzID0gXCJcIlxyXG4gICAgICAgICAgICBpZiAoZmlsZUNvbnRlbnQpIHtcclxuICAgICAgICAgICAgICAgIHZtLnN0YXR1cyA9IGZpbGVDb250ZW50Lm1lc3NhZ2VzO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZtLnVwZGF0ZU1vZGVsUm9vdCh7ZmlsZUNvbnRlbnQ6IGZpbGVDb250ZW50fSk7XHJcbiAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudChmaWxlTG9hZCkudHJpZ2dlcignZm9jdXMnKTtcclxuXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxufSkoKTtcclxuXHJcbihmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAbmdkb2MgY29tcG9uZW50IC0gdGhlIFVJIGNvbXBvbmVudCBmb3Igc2F2aW5nIGEgZGF0YSBtb2RlbFxyXG4gICAgICogQHBhcmFtIGpzb25Ub1NhdmUtIHRoZSBKU09OIGRhdGEgbW9kZWwgdG8gc2F2ZVxyXG4gICAgICogQHBhcmFtICByb290VGFnIC0gdGhlIHN0cmluZyBuYW1lIG9mIHRoZSByb290IHRhZy4gTmVlZGVkIGZvciBsb29rdXBzXHJcbiAgICAgKiBAcGFyYW0gc2F2ZVR5cGUtIHZhbGlkIHZhbHVlcyBhcmUgJ2pzb24nIG9yICd4bWwnXHJcbiAgICAgKiBAcGFyYW0gYnV0dG9uTGFiZWwgLXRoZSBsYWJlbCBmb3IgdGhlIHNhdmUgYnV0dG9uXHJcbiAgICAgKi9cclxuICAgIGFuZ3VsYXIubW9kdWxlKCdmaWxlSU8nKS5jb21wb25lbnQoJ2hwZmJGaWxlU2F2ZScsIHtcclxuICAgICAgICB0ZW1wbGF0ZVVybDogJ2FwcC9zY3JpcHRzL2NvbXBvbmVudHMvZmlsZUlPL2ZpbGVTYXZlXzIwMTcwMTI0XzEyMjcuaHRtbCcsXHJcbiAgICAgICAgY29udHJvbGxlcjogRmlsZVdyaXRlQ29udHJvbGxlcixcclxuICAgICAgICBiaW5kaW5nczoge1xyXG4gICAgICAgICAgICBqc29uVG9TYXZlOiAnPCcsXHJcbiAgICAgICAgICAgIHJvb3RUYWc6ICdAJyxcclxuICAgICAgICAgICAgc2F2ZVR5cGU6ICdAJyxcclxuICAgICAgICAgICAgYnV0dG9uTGFiZWw6ICdAJyxcclxuICAgICAgICAgICAgYnV0dG9uRGlzYWJsZWQ6J0AnXHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG5cclxuICAgIEZpbGVXcml0ZUNvbnRyb2xsZXIuJGluamVjdCA9IFsnaHBmYkZpbGVQcm9jZXNzaW5nJ11cclxuICAgIC8qKlxyXG4gICAgICogQG5nZG9jIGNvbnRyb2xsZXIgLSBjb250cm9sbGVyIGZvciBmaWxlIHdyaXRpbmdcclxuICAgICAqIEBwYXJhbSBocGZiRmlsZVByb2Nlc3NpbmcgLSB0aGUgc2VydmljZSB0aGF0IGRvZXMgYWxsIHRoZSBmaWxlIGNyZWF0aW9uIGFuZCB2YWxpZGF0aW9uXHJcbiAgICAgKiBAY29uc3RydWN0ZXIgX2luaXQtIGluaXRpYWxpemVzIHN0YXRlIGFzIG5lZWRlZC4gVXBkYXRlcyBidXR0b24gZGlzYWJsZWRcclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gRmlsZVdyaXRlQ29udHJvbGxlcihocGZiRmlsZVByb2Nlc3NpbmcpIHtcclxuXHJcbiAgICAgICAgdmFyIHZtID0gdGhpcztcclxuICAgICAgICB2bS4kb25Jbml0ID1faW5pdDtcclxuICAgICAgICB2bS5nZW5lcmF0ZSA9IF9nZW5lcmF0ZUZpbGU7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIF9nZW5lcmF0ZUZpbGUoKXtcclxuICAgICAgICAgICAgaWYgKHZtLnNhdmVUeXBlLnRvVXBwZXJDYXNlKCkgPT09IFwiSlNPTlwiKSB7XHJcbiAgICAgICAgICAgICAgICBocGZiRmlsZVByb2Nlc3Npbmcud3JpdGVBc0pzb24odm0uanNvblRvU2F2ZSwgdm0uZmlsZU5hbWUsIHZtLnJvb3RUYWcpO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHZtLnNhdmVUeXBlLnRvVXBwZXJDYXNlKCkgPT09IFwiWE1MXCIpIHtcclxuICAgICAgICAgICAgICAgIGhwZmJGaWxlUHJvY2Vzc2luZy53cml0ZUFzWG1sKHZtLmpzb25Ub1NhdmUsIHZtLmZpbGVOYW1lLCB2bS5yb290VGFnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBmdW5jdGlvbiBfaW5pdCgpe1xyXG4gICAgICAgICAgIC8vZGlzYWJsZWQgc3RhdGVcclxuICAgICAgICAgICAgaWYoIXZtLmJ1dHRvbkRpc2FibGVkKXtcclxuICAgICAgICAgICAgICAgdm0uYnV0dG9uRGlzYWJsZWQ9ZmFsc2U7XHJcbiAgICAgICAgICAgIH1lbHNlIGlmKHZtLmJ1dHRvbkRpc2FibGVkLnRvTG93ZXJDYXNlKCk9PT1cInRydWVcIil7XHJcbiAgICAgICAgICAgICAgICB2bS5idXR0b25EaXNhYmxlZD10cnVlXHJcbiAgICAgICAgICAgIH1lbHNlIGlmKHZtLmJ1dHRvbkRpc2FibGVkLnRvTG93ZXJDYXNlKCk9PT1cImZhbHNlXCIpe1xyXG4gICAgICAgICAgICAgICAgdm0uYnV0dG9uRGlzYWJsZWQ9ZmFsc2U7XHJcbiAgICAgICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICAgICAgdm0uYnV0dG9uRGlzYWJsZWQ9ZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0pKCk7XHJcblxyXG5cclxuKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuICAgIC8qKlxyXG4gICAgICogQG5nZG9jIHNlcnZpY2UtIHByb2Nlc3NlcyBhbGwgZmlsZXMgZm9yIGxvYWQgYW5kIHdyaXRpbmdcclxuICAgICAqL1xyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ2ZpbGVJTycpXHJcbiAgICAgICAgLmZhY3RvcnkoJ2hwZmJGaWxlUHJvY2Vzc2luZycsIGZpbGVSZWFkZXIpO1xyXG5cclxuICAgIGZpbGVSZWFkZXIuJGluamVjdCA9IFsnJHEnXTtcclxuICAgIC8qIEBuZ0luamVjdCAqL1xyXG4gICAgZnVuY3Rpb24gZmlsZVJlYWRlcigkcSkge1xyXG4gICAgICAgIC8vY29uc3RhbnRzIHVzZWQgZm9yIG1lc3NhZ2luZ1xyXG4gICAgICAgIHZhciBtc2dfc3VjY2VzcyA9IFwiTVNHX1NVQ0NFU1NfTE9BRFwiOyAvL2xvYWQgd2FzIGEgc3VjY2Vzc1xyXG4gICAgICAgIHZhciBtc2dfZXJyX2pzb25wYXJzZSA9IFwiTVNHX0VSUl9KU09OUEFSU0VcIjsgLy9qc29uIHBhcnNpbmcgZXJyb3JcclxuICAgICAgICB2YXIgbXNnX2Vycl94bWxwYXJzZSA9IFwiTVNHX0VSUl9YTUxQQVJTRVwiOyAvL3htbCBwYXJzaW5nIGVycm9yXHJcbiAgICAgICAgdmFyIG1zZ19lcnJfbG9hZCA9IFwiTVNHX0VSUl9GSUxFX0xPQURcIjsgLy9maWxlIGxvYWQgZXJyb3JcclxuICAgICAgICB2YXIgbXNnX2Vycl9maWxlVHlwZSA9IFwiTVNHX0VSUl9GSUxFX1RZUEVcIjsgLy9maWxlIHR5cGUgZXJyb3JcclxuICAgICAgICB2YXIgbXNnX2Vycl9mb3JtVHlwZSA9IFwiTVNHX0VSUl9GT1JNX1RZUEVcIjsgLy8gdmFsaWQganNvbiBidXQgaW5jb3JyZWN0IHJvb3QgdGFnXHJcbiAgICAgICAgdmFyIG1zZ19lcnJfY2hlY2tzdW1fY29tcGFyZUZhaWwgPSBcIk1TR19FUlJfQ0hFQ0tTVU1fRkFJTFwiXHJcbiAgICAgICAgdmFyIGRyYWZ0X2ZpbGVfdHlwZSA9IFwiaGNzY1wiOyAvLyB0eXBlIG9mIGZpbGUgc3VmZml4IGZvciBKU09OIGZpbGVzLiBDYW4gY2hhbmdlIHRvIHByb2Nlc3Mgb3RoZXIgdHlwZXNcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAbmdPYmplY3Q6IHVzZWQgdG8gc3RvcmUgdGhlIGpzb25SZXN1bHQgYW5kIGFueSBtZXNzYWdlc1xyXG4gICAgICAgICAqIEB0eXBlIHt7anNvblJlc3VsdDogc3RyaW5nLCBtZXNzYWdlczogc3RyaW5nfX1cclxuICAgICAgICAgKi9cclxuICAgICAgICB2YXIgY29udmVydFJlc3VsdCA9IHtcclxuICAgICAgICAgICAganNvblJlc3VsdDogXCJcIixcclxuICAgICAgICAgICAgbWVzc2FnZXM6IFwiXCJcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHNlcnZpY2UgPSB7XHJcbiAgICAgICAgICAgIHJlYWRBc0RhdGFUZXh0OiByZWFkQXNEYXRhVGV4dCxcclxuICAgICAgICAgICAgd3JpdGVBc0pzb246IGpzb25Ub0ZpbGUsXHJcbiAgICAgICAgICAgIHdyaXRlQXNYbWw6IHhtbFRvRmlsZVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIHNlcnZpY2U7XHJcblxyXG4gICAgICAgIC8vLy8vLy8vLy8vLy8vLy9cclxuICAgICAgICBmdW5jdGlvbiBvbkxvYWQocmVhZGVyLCBkZWZlcnJlZCwgc2NvcGUsIGZpbGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHNjb3BlLiRhcHBseShmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZpbGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNwbGl0RmlsZSA9IGZpbGUubmFtZS5zcGxpdCgnLicpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZmlsZVR5cGUgPSBzcGxpdEZpbGVbc3BsaXRGaWxlLmxlbmd0aCAtIDFdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoKGZpbGVUeXBlLnRvTG93ZXJDYXNlKCkpID09IGRyYWZ0X2ZpbGVfdHlwZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udmVydFRvSlNPTk9iamVjdHMocmVhZGVyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoZWNrUm9vdFRhZ01hdGNoKHJlYWRlciwgc2NvcGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogQXMgcGVyIG1lZXRpbmcgb2Ygb2N0IDIxXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVhZGVyLnBhcnNlUmVzdWx0Lmpzb25SZXN1bHQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21wYXJlSGFzaEluSnNvbihyZWFkZXIsIHNjb3BlLnJvb3RUYWcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSovXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoKGZpbGVUeXBlLnRvTG93ZXJDYXNlKCkgPT09IFwieG1sXCIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb252ZXJ0WE1MVG9KU09OT2JqZWN0cyhyZWFkZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2tSb290VGFnTWF0Y2gocmVhZGVyLCBzY29wZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBBcyBwZXIgbWVldGluZyBvZiBvY3QgMjFcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZWFkZXIucGFyc2VSZXN1bHQuanNvblJlc3VsdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBhcmVIYXNoSW5YTUwocmVhZGVyLCBzY29wZSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0qL1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnZlcnRSZXN1bHQucGFyc2VSZXN1bHQgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udmVydFJlc3VsdC5tZXNzYWdlcyA9IG1zZ19lcnJfZmlsZVR5cGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWFkZXIucGFyc2VSZXN1bHQgPSBjb252ZXJ0UmVzdWx0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUocmVhZGVyLnBhcnNlUmVzdWx0KTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBvbkVycm9yKHJlYWRlciwgZGVmZXJyZWQsIHNjb3BlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBzY29wZS4kYXBwbHkoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vVE9ETyBuZWVkIHRvIHJldmlldyByZWplY3QgY2FzZVxyXG4gICAgICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlamVjdChtc2dfZXJyX2xvYWQpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZnVuY3Rpb24gZ2V0UmVhZGVyKGRlZmVycmVkLCBzY29wZSwgZmlsZSkge1xyXG4gICAgICAgICAgICB2YXIgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcclxuICAgICAgICAgICAgLy9leHRlbmQgdGhlIGZpbGVSZWFkZXIgb2JqZWN0XHJcbiAgICAgICAgICAgIHJlYWRlci5vbmxvYWQgPSBvbkxvYWQocmVhZGVyLCBkZWZlcnJlZCwgc2NvcGUsIGZpbGUpO1xyXG4gICAgICAgICAgICByZWFkZXIub25FcnJvciA9IG9uRXJyb3IocmVhZGVyLCBkZWZlcnJlZCwgc2NvcGUpO1xyXG4gICAgICAgICAgICByZWFkZXIucGFyc2VSZXN1bHQgPSBudWxsO1xyXG4gICAgICAgICAgICByZXR1cm4gcmVhZGVyO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gcmVhZEFzRGF0YVRleHQoZmlsZSwgc2NvcGUpIHtcclxuICAgICAgICAgICAgdmFyIGRlZmVycmVkID0gJHEuZGVmZXIoKTtcclxuICAgICAgICAgICAgdmFyIHJlYWRlciA9IGdldFJlYWRlcihkZWZlcnJlZCwgc2NvcGUsIGZpbGUpO1xyXG5cclxuICAgICAgICAgICAgaWYgKGZpbGUpIHtcclxuICAgICAgICAgICAgICAgIHJlYWRlci5yZWFkQXNUZXh0KGZpbGUpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmVhZGVyLnBhcnNlUmVzdWx0ID0gY29udmVydFJlc3VsdDtcclxuICAgICAgICAgICAgICAgIHJlYWRlci5wYXJzZVJlc3VsdC5tZXNzYWdlcyA9IFwiXCI7XHJcbiAgICAgICAgICAgICAgICByZWFkZXIucGFyc2VSZXN1bHQuanNvblJlc3VsdCA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAvL2Nhc2Ugb2YgY2xlYXJpbmcgb3V0IHRoZSBtZXNzYWdlcyBhcyBubyBmaWxlIHdhcyBzZWxlY3RlZFxyXG4gICAgICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZShyZWFkZXIucGFyc2VSZXN1bHQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gY29udmVydFRvSlNPTk9iamVjdHMocmVhZGVyKSB7XHJcblxyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgY29udmVydFJlc3VsdC5qc29uUmVzdWx0ID0gSlNPTi5wYXJzZShyZWFkZXIucmVzdWx0KTtcclxuICAgICAgICAgICAgICAgIGNvbnZlcnRSZXN1bHQubWVzc2FnZXMgPSBtc2dfc3VjY2VzcztcclxuICAgICAgICAgICAgICAgIHJlYWRlci5wYXJzZVJlc3VsdCA9IGNvbnZlcnRSZXN1bHQ7XHJcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgIGNvbnZlcnRSZXN1bHQuanNvblJlc3VsdCA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICBjb252ZXJ0UmVzdWx0Lm1lc3NhZ2VzID0gbXNnX2Vycl9qc29ucGFyc2U7XHJcbiAgICAgICAgICAgICAgICByZWFkZXIucGFyc2VSZXN1bHQgPSBjb252ZXJ0UmVzdWx0O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAbmdkb2MgbWV0aG9kIGNvbnZlcnRzIGEgdmFsaWQgWE1MIGZpbGUgdG8gYSBKU09OIG9iamVjdFxyXG4gICAgICAgICAqIEBwYXJhbSByZWFkZXItIHRoZSBleHRlbmRlZCBmaWxlIHJlYWRlciBvYmplY3RcclxuICAgICAgICAgKiBAcmV0dXJucyBudWxsXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZnVuY3Rpb24gY29udmVydFhNTFRvSlNPTk9iamVjdHMocmVhZGVyKSB7XHJcbiAgICAgICAgICAgIHZhciB4bWxDb25maWcgPSB7XHJcbiAgICAgICAgICAgICAgICBlc2NhcGVNb2RlOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgZW1wdHlOb2RlRm9ybTogXCJ0ZXh0XCIsXHJcbiAgICAgICAgICAgICAgICB1c2VEb3VibGVRdW90ZXM6IHRydWVcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgeG1sQ29udmVydGVyID0gbmV3IFgySlMoeG1sQ29uZmlnKTtcclxuICAgICAgICAgICAgLy9jb252ZXJ0cyBYTUwgYXMgYSBzdHJpbmcgdG8gYSBqc29uXHJcbiAgICAgICAgICAgIGNvbnZlcnRSZXN1bHQuanNvblJlc3VsdCA9IHhtbENvbnZlcnRlci54bWxfc3RyMmpzb24ocmVhZGVyLnJlc3VsdCk7XHJcblxyXG4gICAgICAgICAgICBpZiAoY29udmVydFJlc3VsdC5qc29uUmVzdWx0ID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBjb252ZXJ0UmVzdWx0Lm1lc3NhZ2VzID0gbXNnX2Vycl94bWxwYXJzZTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNvbnZlcnRSZXN1bHQubWVzc2FnZXMgPSBtc2dfc3VjY2VzcztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZWFkZXIucGFyc2VSZXN1bHQgPSBjb252ZXJ0UmVzdWx0O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gY29udmVydEpTT05PYmplY3RzVG9YTUwoanNvbk9iaikge1xyXG4gICAgICAgICAgICB2YXIgeG1sQ29uZmlnID0ge1xyXG4gICAgICAgICAgICAgICAgZXNjYXBlTW9kZTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIGVtcHR5Tm9kZUZvcm06IFwidGV4dFwiLFxyXG4gICAgICAgICAgICAgICAgdXNlRG91YmxlUXVvdGVzOiB0cnVlXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIGpzb25Db252ZXJ0ZXIgPSBuZXcgWDJKUyh4bWxDb25maWcpO1xyXG4gICAgICAgICAgICB2YXIgeG1sUmVzdWx0ID0gbnVsbDtcclxuICAgICAgICAgICAgLy9jb252ZXJ0cyBYTUwgYXMgYSBzdHJpbmcgdG8gYSBqc29uXHJcbiAgICAgICAgICAgIHhtbFJlc3VsdCA9IGpzb25Db252ZXJ0ZXIuanNvbjJ4bWxfc3RyKGpzb25PYmopXHJcbiAgICAgICAgICAgIHJldHVybiAoeG1sUmVzdWx0KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBuZ0RvYyBtZXRob2QgLSBjaGVja3MgaWYgdGhlIHJvb3QgdGFnIG1hdGNoZXMgdGhlIGV4cGVjdGVkLiBJZiBpdCBkb2Vzbid0IG1hdGNoLCBjbGVhcnMgdGhlIGRhdGFcclxuICAgICAgICAgKiBhbmQgc2V0cyB0aGUgZXJyb3IgbWVzc2FnZVxyXG4gICAgICAgICAqIEBwYXJhbSByZWFkZXIgdGhlIGZpbGUgcmVhZGVyIG9iamVjdCB0aGF0IGlzIHVzZWQgdG8gcmVhZCBpbiBhIGZpbGVcclxuICAgICAgICAgKiBAcGFyYW0gc2NvcGUgLSBzY29wZSBvZiB0aGUgc2VydmljZVxyXG4gICAgICAgICAqICBAcmV0dXJucyBudWxsXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZnVuY3Rpb24gY2hlY2tSb290VGFnTWF0Y2gocmVhZGVyLCBzY29wZSkge1xyXG4gICAgICAgICAgICBpZiAoIXNjb3BlLnJvb3RUYWcgfHwgIXJlYWRlci5wYXJzZVJlc3VsdCB8fCAhcmVhZGVyLnBhcnNlUmVzdWx0Lmpzb25SZXN1bHQpIHJldHVybjtcclxuXHJcbiAgICAgICAgICAgIGlmICghcmVhZGVyLnBhcnNlUmVzdWx0Lmpzb25SZXN1bHRbc2NvcGUucm9vdFRhZ10pIHtcclxuICAgICAgICAgICAgICAgIHJlYWRlci5wYXJzZVJlc3VsdC5qc29uUmVzdWx0ID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIHJlYWRlci5wYXJzZVJlc3VsdC5tZXNzYWdlcyA9IG1zZ19lcnJfZm9ybVR5cGU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBuZ2RvYyBtZXRob2QgLSBpbnNlcnRzIGEgaGFzaCB2YWx1ZSBpbnRvIGEganNvbiBvYmplY3QuIEhhc2ggaXMgY2FsY3VsYXRlZCBvbiB0aGUgZW50aXJlIGpzb25cclxuICAgICAgICAgKiBAcGFyYW0ganNvbk9iai0gdGhlIGpzb24gb2JqZWN0IHRvIGhhc2hcclxuICAgICAgICAgKiBAcGFyYW0gcm9vdFRhZy0gdGhlIHJvb3QgdGFnIG9mIHRoZSBqc29uT2JqZWN0LiBVc2VkIGZvciBsb29rdXBzXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZnVuY3Rpb24gaW5zZXJ0SGFzaEluSnNvbihqc29uT2JqLCByb290VGFnKSB7XHJcbiAgICAgICAgICAgIGpzb25PYmpbcm9vdFRhZ10uZGF0YV9jaGVja3N1bSA9IFwiXCI7XHJcbiAgICAgICAgICAgIHZhciBoYXNoID0gQ3J5cHRvSlMuU0hBMjU2KEpTT04uc3RyaW5naWZ5KGpzb25PYmopKTtcclxuICAgICAgICAgICAganNvbk9ialtyb290VGFnXS5kYXRhX2NoZWNrc3VtID0gaGFzaC50b1N0cmluZygpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAbmdkb2MgbWV0aG9kIC0gY29tcGFyZXMgdGhlIGhhc2ggaW4gdGhlIEpTT04gdG8gdGhlIGNhbGN1bGF0ZWQgSlNPTiBoYXNoXHJcbiAgICAgICAgICogQHBhcmFtIHJlYWRlci0gdGhlIHJlYWRlciBleHRlbmRlZCBvYmplY3QgdGhhdCBjb250YWlucyB0aGUganNvblxyXG4gICAgICAgICAqIEBwYXJhbSByb290VGFnLSB0aGUgcm9vdCB0YWcgb2YgdGhlIGpzb25PYmplY3QuIFVzZWQgZm9yIGxvb2t1cHNcclxuICAgICAgICAgKi9cclxuICAgICAgICBmdW5jdGlvbiBjb21wYXJlSGFzaEluSnNvbihyZWFkZXIsIHJvb3RUYWcpIHtcclxuICAgICAgICAgICAgdmFyIGN1cnJlbnRUYWdWYWx1ZSA9IHJlYWRlci5wYXJzZVJlc3VsdC5qc29uUmVzdWx0W3Jvb3RUYWddLmRhdGFfY2hlY2tzdW07XHJcbiAgICAgICAgICAgIHJlYWRlci5wYXJzZVJlc3VsdC5qc29uUmVzdWx0W3Jvb3RUYWddLmRhdGFfY2hlY2tzdW0gPSBcIlwiO1xyXG4gICAgICAgICAgICB2YXIgZ2VuZXJhdGVkSGFzaCA9IENyeXB0b0pTLlNIQTI1NihKU09OLnN0cmluZ2lmeShyZWFkZXIucGFyc2VSZXN1bHQuanNvblJlc3VsdCkpO1xyXG4gICAgICAgICAgICBpZiAoY3VycmVudFRhZ1ZhbHVlICE9PSBnZW5lcmF0ZWRIYXNoLnRvU3RyaW5nKCkpIHtcclxuICAgICAgICAgICAgICAgIHJlYWRlci5wYXJzZVJlc3VsdC5qc29uUmVzdWx0ID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIHJlYWRlci5wYXJzZVJlc3VsdC5tZXNzYWdlcyA9IG1zZ19lcnJfY2hlY2tzdW1fY29tcGFyZUZhaWw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQG5nZG9jIG1ldGhvZCAtIGNvbXBhcmVzIHRoZSBoYXNoIGluIHRoZSBYTUwgdG8gdGhlIGNhbGN1bGF0ZWQgWE1MIGhhc2hcclxuICAgICAgICAgKiBAcGFyYW0gcmVhZGVyLSB0aGUgcmVhZGVyIGV4dGVuZGVkIG9iamVjdCB0aGF0IGNvbnRhaW5zIHRoZSBqc29uXHJcbiAgICAgICAgICogQHBhcmFtIHJvb3RUYWctIHRoZSByb290IHRhZyBvZiB0aGUganNvbk9iamVjdC4gVXNlZCBmb3IgbG9va3Vwc1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGZ1bmN0aW9uIGNvbXBhcmVIYXNoSW5YTUwocmVhZGVyLCBzY29wZSkge1xyXG4gICAgICAgICAgICB2YXIgY3VycmVudFRhZ1ZhbHVlID0gcmVhZGVyLnBhcnNlUmVzdWx0Lmpzb25SZXN1bHRbc2NvcGUucm9vdFRhZ10uZGF0YV9jaGVja3N1bTtcclxuICAgICAgICAgICAgdmFyIGNvbnZlcnRlZFRvSnNvbj0gcmVhZGVyLnBhcnNlUmVzdWx0Lmpzb25SZXN1bHQ7XHJcbiAgICAgICAgICAgLy9yZW1vdmUgY2hlY2tzdW1cclxuICAgICAgICAgICAgY29udmVydGVkVG9Kc29uW3Njb3BlLnJvb3RUYWddLmRhdGFfY2hlY2tzdW0gPSBcIlwiO1xyXG4gICAgICAgICAgICAvL2NvbnZlcnQgdG8geG1sXHJcbiAgICAgICAgICAgIHZhciB4bWxSZXN1bHQgPSBjb252ZXJ0SlNPTk9iamVjdHNUb1hNTChjb252ZXJ0ZWRUb0pzb24pXHJcbiAgICAgICAgICAgIHNjb3BlLmhhc2ggPSBDcnlwdG9KUy5TSEEyNTYoeG1sUmVzdWx0KTtcclxuICAgICAgICAgICAgaWYgKGN1cnJlbnRUYWdWYWx1ZSAhPT0gc2NvcGUuaGFzaC50b1N0cmluZygpKSB7XHJcbiAgICAgICAgICAgICAgICByZWFkZXIucGFyc2VSZXN1bHQuanNvblJlc3VsdCA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICByZWFkZXIucGFyc2VSZXN1bHQubWVzc2FnZXMgPSBtc2dfZXJyX2NoZWNrc3VtX2NvbXBhcmVGYWlsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBqc29uVG9GaWxlKGpzb25PYmosIGZpbGVOYW1lLCByb290VGFnKSB7XHJcbiAgICAgICAgICAgIGlmICghanNvbk9iaikgcmV0dXJuO1xyXG4gICAgICAgICAgICAvL2luc2VydEhhc2hJbkpzb24oanNvbk9iaiwgcm9vdFRhZykgYXMgcGVyIE9jdCAyMSBtZWV0aW5nIG5vIGNoZWNrc3VtXHJcbiAgICAgICAgICAgIHZhciBtYWtlU3RyU2F2ZSA9IEpTT04uc3RyaW5naWZ5KGpzb25PYmopO1xyXG4gICAgICAgICAgICB2YXIgYmxvYiA9IG5ldyBCbG9iKFttYWtlU3RyU2F2ZV0sIHt0eXBlOiBcInRleHQvcGxhaW47Y2hhcnNldD11dGYtOFwifSk7XHJcbiAgICAgICAgICAgIGlmICghZmlsZU5hbWUpIHtcclxuICAgICAgICAgICAgICAgIGZpbGVOYW1lID0gXCJocGZiRHJhZnQuXCIgKyBkcmFmdF9maWxlX3R5cGU7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBmaWxlTmFtZSArPSBcIi5cIiArIGRyYWZ0X2ZpbGVfdHlwZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBzYXZlQXMoYmxvYiwgZmlsZU5hbWUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24geG1sVG9GaWxlKGpzb25PYmosIGZpbGVOYW1lLCByb290VGFnKSB7XHJcbiAgICAgICAgICAgIGlmICghanNvbk9iaikgcmV0dXJuO1xyXG4gICAgICAgICAgICAvL0FzIHBlciBtZWV0aW5nIG9mIE9jdCAyMSwgaWdub3JlIGNoZWNrc3VtXHJcbiAgICAgICAgICAgIC8vY2xlYXIgb3V0IGFueSBwcmV2aW91cyB2YWx1ZSBpZiBpdCBleGlzdHNcclxuICAgICAgICAgICAgLy9qc29uT2JqW3Jvb3RUYWddLmRhdGFfY2hlY2tzdW0gPSBcIlwiO1xyXG4gICAgICAgICAgICB2YXIgeG1sUmVzdWx0ID0gY29udmVydEpTT05PYmplY3RzVG9YTUwoanNvbk9iailcclxuICAgICAgICAgICAgLy9UT0RPIHRoaXMgbmVlZHMgdG8gYmUgY29uZmlndXJhYmxlXHJcbiAgICAgICAgICAgeG1sUmVzdWx0PSAnPD94bWwgdmVyc2lvbj1cIjEuMFwiIGVuY29kaW5nPVwiVVRGLThcIj8+JysgJzw/eG1sLXN0eWxlc2hlZXQgaHJlZj1cIlJFUF9Db21iaW5lZC54c2xcIiB0eXBlPVwidGV4dC94c2xcIj8+Jyt4bWxSZXN1bHQ7XHJcbiAgICAgICAgICAgLy8gdmFyIGhhc2ggPSBDcnlwdG9KUy5TSEEyNTYoeG1sUmVzdWx0KTtcclxuICAgICAgICAgICAgLy9qc29uT2JqW3Jvb3RUYWddLmRhdGFfY2hlY2tzdW0gPSBoYXNoLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgICAgIC8vcmVnZW5lcmF0ZSB0aGUgeG1sXHJcbiAgICAgICAgICAgIC8veG1sUmVzdWx0ID0gY29udmVydEpTT05PYmplY3RzVG9YTUwoanNvbk9iailcclxuICAgICAgICAgICAgdmFyIGJsb2IgPSBuZXcgQmxvYihbeG1sUmVzdWx0XSwge3R5cGU6IFwidGV4dC9wbGFpbjtjaGFyc2V0PXV0Zi04XCJ9KTtcclxuICAgICAgICAgICAgaWYgKCFmaWxlTmFtZSkge1xyXG4gICAgICAgICAgICAgICAgZmlsZU5hbWUgPSBcImhwZmJYTUwueG1sXCJcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGZpbGVOYW1lICs9IFwiLnhtbFwiO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHNhdmVBcyhibG9iLCBmaWxlTmFtZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59KSgpO1xyXG5cclxuXHJcblxyXG5cclxuIiwiLyoqXHJcbiAqIENyZWF0ZWQgYnkgZGtpbHR5IG9uIDgvNi8yMDE2LlxyXG4gKi9cclxuKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgnZXhwYW5kaW5nVGFibGUnLCBbXSlcclxufSkoKTtcclxuXHJcbihmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ2V4cGFuZGluZ1RhYmxlJylcclxuICAgICAgICAuY29tcG9uZW50KCdjbXBFeHBhbmRpbmdUYWJsZScsIHtcclxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdhcHAvc2NyaXB0cy9jb21wb25lbnRzL2V4cGFuZGluZ1RhYmxlL3RwbC1leHBhbmRpbmctdGFibGVfMjAxNzAxMjRfMTIyNy5odG1sJyxcclxuICAgICAgICAgICAgY29udHJvbGxlcjogZXhwYW5kaW5nVGFibGVDdHJsLFxyXG4gICAgICAgICAgICBjb250cm9sbGVyQXM6ICdleHBhbmRUYmxDdHJsJyxcclxuICAgICAgICAgICAgdHJhbnNjbHVkZTp0cnVlLFxyXG4gICAgICAgICAgICBiaW5kaW5nczoge1xyXG4gICAgICAgICAgICAgICAgdGl0bGU6ICdAJywgLypkZXByZWNhdGVkKi9cclxuICAgICAgICAgICAgICAgIGxpc3RJdGVtczogJzwnLFxyXG4gICAgICAgICAgICAgICAgY29sdW1uRGVmOic8JyxcclxuICAgICAgICAgICAgICAgIGRpc2FibGVTZWxlY3Rpb246JzwnLFxyXG4gICAgICAgICAgICAgICAgc2VsZWN0UmVjb3JkOiAnPCcsXHJcbiAgICAgICAgICAgICAgICByZXNldFRvQ29sbGFwc2VkOiAnPCcsXHJcbiAgICAgICAgICAgICAgICBkaXNhYmxlRXJyQ29sdW1uOidAJ1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICBleHBhbmRpbmdUYWJsZUN0cmwuJGluamVjdCA9IFsnJGZpbHRlciddXHJcbiAgICBmdW5jdGlvbiBleHBhbmRpbmdUYWJsZUN0cmwoJGZpbHRlcikge1xyXG4gICAgICAgIHZhciB2bSA9IHRoaXM7XHJcbiAgICAgICAgdm0uZm9jdXNlZCA9IGZhbHNlO1xyXG4gICAgICAgIHZtLmNvbHVtbkRlZmluaXRpb25zPXt9O1xyXG4gICAgICAgIHZtLmRpc2FibGVFeHBhbmQ9ZmFsc2U7XHJcbiAgICAgICAgdm0udGFibGVSb3dFeHBhbmRlZCA9IGZhbHNlO1xyXG4gICAgICAgIHZtLnRhYmxlUm93SW5kZXhDdXJyRXhwYW5kZWQgPSBcIlwiO1xyXG4gICAgICAgIHZtLnRhYmxlUm93SW5kZXhQcmV2RXhwYW5kZWQgPSBcIlwiO1xyXG4gICAgICAgIHZtLm51bWJlckNvbHM9dm0uY29sdW1uRGVmLmxlbmd0aCsyO1xyXG4gICAgICAgIHZtLmRpc2FibGVFcnJvckNvbD1mYWxzZTtcclxuICAgICAgICB2bS5kYXlEYXRhQ29sbGFwc2UgPSBfY3JlYXRlQXJyYXkoMCwgdHJ1ZSk7XHJcblxyXG4gICAgICAgIHZtLiRvbkluaXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmKHZtLmxpc3RJdGVtcykge1xyXG4gICAgICAgICAgICAgICAgdm0uZGF5RGF0YUNvbGxhcHNlID0gX2NyZWF0ZUFycmF5KHZtLmxpc3RJdGVtcy5sZW5ndGgsIHRydWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2bS5nZXRFeHBhbmRlZFN0YXRlID0gZnVuY3Rpb24gKHJvdykge1xyXG4gICAgICAgICAgICBpZiAocm93ID09PSB2bS50YWJsZVJvd0luZGV4Q3VyckV4cGFuZGVkKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2VcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZtLiRvbkNoYW5nZXMgPSBmdW5jdGlvbiAoY2hhbmdlcykge1xyXG5cclxuXHJcblxyXG4gICAgICAgICAgICBpZiAoY2hhbmdlcy5saXN0SXRlbXMpIHtcclxuICAgICAgICAgICAgICAgIGlmKHZtLmxpc3RJdGVtcykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZtLmRheURhdGFDb2xsYXBzZSA9IF9jcmVhdGVBcnJheSh2bS5saXN0SXRlbXMubGVuZ3RoLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICAgICAgICAgIC8vc2hvdWxkIG5ldmVyIGhhcHBlblxyXG4gICAgICAgICAgICAgICAgICAgIHZtLmRheURhdGFDb2xsYXBzZSA9IF9jcmVhdGVBcnJheSgwLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHZtLnJlc2V0VGFibGVSb3coKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICBSZXNldHMgdGhlIHRhYmxlIHRvIGNvbGxhcHNlZC4gTm90ZSB0aGlzICBpcyBub3QgYSB0cnVlIHJlc2V0XHJcbiAgICAgICAgICAgICBJZiBhIHZhbGlkIGluZGV4IGlzIHNlbGVjdGVkLCB0b2dnbGVzIChFeHBhbmRzKSB0aGUgcm93IGFmdGVyIGEgcmVzZXQuXHJcbiAgICAgICAgICAgICBUaGlzIGFsbG93cyBleHBhbmRpbmcgdGhlIHNhbWUgcm93IGluZGV4IGFmdGVyIGEgcm93IGhhcyBiZWVuIGFkZGVkIGF0IHRoZSBiZWdpbm5pbmdcclxuICAgICAgICAgICAgIEZvciBhIHRydWUgcmVzZXQsIGZpcnN0IHNldCBzZWxlY3QgcmVjb3JkIHRvIC0xXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBpZihjaGFuZ2VzLnJlc2V0VG9Db2xsYXBzZWQpe1xyXG4gICAgICAgICAgICAgICAgLy8gaWYoY2hhbmdlcy5yZXNldFRvQ29sbGFwc2VkLmN1cnJlbnRWYWx1ZSl7XHJcbiAgICAgICAgICAgICAgICAgICAgdm0ucmVzZXRUYWJsZVJvdygpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghY2hhbmdlcy5zZWxlY3RSZWNvcmQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlVGFibGVSb3codm0uc2VsZWN0UmVjb3JkKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvL31cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZihjaGFuZ2VzLnNlbGVjdFJlY29yZCl7XHJcbiAgICAgICAgICAgICAgICB2YXIgc2VsZWN0SW5kZXg9cGFyc2VJbnQoY2hhbmdlcy5zZWxlY3RSZWNvcmQuY3VycmVudFZhbHVlKTtcclxuICAgICAgICAgICAgICAgIGlmKHNlbGVjdEluZGV4Pj0wKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdm0uc2VsZWN0VGFibGVSb3coc2VsZWN0SW5kZXgpO1xyXG4gICAgICAgICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgICAgICAgICAgdm0ucmVzZXRUYWJsZVJvdygpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmKGNoYW5nZXMuZGlzYWJsZVNlbGVjdGlvbil7XHJcbiAgICAgICAgICAgICAgICB2bS5kaXNhYmxlRXhwYW5kPWNoYW5nZXMuZGlzYWJsZVNlbGVjdGlvbi5jdXJyZW50VmFsdWU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmKGNoYW5nZXMuY29sdW1uRGVmKSB7XHJcbiAgICAgICAgICAgICAgICB2bS5udW1iZXJDb2xzPWNoYW5nZXMuY29sdW1uRGVmLmN1cnJlbnRWYWx1ZS5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICB2bS5jb2x1bW5EZWZpbml0aW9ucyA9IF9yZWNhbGN1bGF0ZUNvbHVtbkRlZnMoY2hhbmdlcy5jb2x1bW5EZWYuY3VycmVudFZhbHVlLCAodm0ubnVtYmVyQ29scykpO1xyXG4gICAgICAgICAgICAgICAgX3NldE51bWJlckNvbHVtbnMoKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmKGNoYW5nZXMuZGlzYWJsZUVyckNvbHVtbil7XHJcbiAgICAgICAgICAgICAgICB2bS5kaXNhYmxlRXJyb3JDb2w9Y2hhbmdlcy5kaXNhYmxlRXJyQ29sdW1uLmN1cnJlbnRWYWx1ZTtcclxuICAgICAgICAgICAgICAgIHZtLm51bWJlckNvbHM9dm0uY29sdW1uRGVmLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgIF9zZXROdW1iZXJDb2x1bW5zKCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gX3NldE51bWJlckNvbHVtbnMoKXtcclxuICAgICAgICAgICAgaWYoIHZtLmRpc2FibGVFcnJvckNvbCl7XHJcbiAgICAgICAgICAgICAgICAvL2NhcmV0IG9ubHlcclxuICAgICAgICAgICAgICAgIHZtLm51bWJlckNvbHM9IHZtLm51bWJlckNvbHMrMTtcclxuICAgICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgICAgICAvL2NhcmV0ICsgZXJyb3JcclxuICAgICAgICAgICAgICAgIHZtLm51bWJlckNvbHM9IHZtLm51bWJlckNvbHMrMjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogUmVjYWxjdWxhdGVzIHRoZSBjb2x1bW4gZGVmcyBiYXNlZCBvbiB0aGUgY2FyZXQgY29sdW1uIGFuZCB0aGUgZXJyb3IgY29sdW1uZVxyXG4gICAgICAgICAqIEFzc3VtZXMgdGhhdCB0aGUgY29sdW1uIGRlZmluaXRpb25zIHByb3ZpZGVkIHRvdGFsIDEwMCVcclxuICAgICAgICAgKiBAcGFyYW0gY29sRGVmc1xyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZnVuY3Rpb24gX3JlY2FsY3VsYXRlQ29sdW1uRGVmcyhjb2xEZWZzLG51bUNvbHMpe1xyXG4gICAgICAgICAgICB2YXIgY2FyZXRXaWR0aD0yO1xyXG4gICAgICAgICAgICB2YXIgZXJyb3JXaWR0aD01O1xyXG4gICAgICAgICAgICB2YXIgdG90YWxXaWR0aD1jYXJldFdpZHRoK2Vycm9yV2lkdGg7XHJcbiAgICAgICAgICAgIHZhciB0b1N1YnRyYWN0PXRvdGFsV2lkdGgvbnVtQ29scztcclxuICAgICAgICAgICAgdmFyIHJlc3VsdD1bXTtcclxuICAgICAgICAgICAgLy9kb250JyBib3RoZXIgcmVjYWxjIGlmIG9ubHkgdGhlIGNhcmV0XHJcbiAgICAgICAgICAgIGlmKHZtLmRpc2FibGVFcnJvckNvbCl7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gKGNvbERlZnMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZvcih2YXIgaT0wO2k8bnVtQ29scztpKyspe1xyXG4gICAgICAgICAgICAgICAgdmFyIG9uZURlZj1hbmd1bGFyLmNvcHkoY29sRGVmc1tpXSk7XHJcbiAgICAgICAgICAgICAgICBpZihvbmVEZWYud2lkdGg+dG9TdWJ0cmFjdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG9uZURlZi53aWR0aCA9IG9uZURlZi53aWR0aCAtIHRvU3VidHJhY3Q7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaChvbmVEZWYpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZ1bmN0aW9uIHVwZGF0ZVRhYmxlUm93KHRleHRJbmRleCkge1xyXG4gICAgICAgICAgICB2YXIgc2VsZWN0SW5kZXggPSBwYXJzZUludCh0ZXh0SW5kZXgpO1xyXG4gICAgICAgICAgICBpZiAoc2VsZWN0SW5kZXggPj0gMCkge1xyXG4gICAgICAgICAgICAgICAgdm0uc2VsZWN0VGFibGVSb3coc2VsZWN0SW5kZXgpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH1cclxuICAgICAgICAvL1RPRE8gZ2V0IHZhbHVlIGZyb20gYSBzZXJ2aWNlISFcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUcmFuc2xhdGVzIHdoZW4gYSBmb3JtIGlzIGludmFsaWQgdG8gbG9jYWxpemVkIHRleHRcclxuICAgICAgICAgKiBAcmV0dXJucyB7Kn1cclxuICAgICAgICAgKi9cclxuICAgICAgICB2bS5mb3JtSW5FcnJvcj1mdW5jdGlvbihhRm9ybSl7XHJcbiAgICAgICAgICAgIGlmKCFhRm9ybSkgcmV0dXJuICgnTicpIC8vc2hvdWxkIG5ldmVyIGhhcHBlblxyXG4gICAgICAgICAgICBpZihhRm9ybS4kaW52YWxpZCl7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gKCdZJylcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gKCdOJylcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBVdGlsaXR5IGZ1bmN0aW9uIGZvciBkZXRlcm1pbmluZyB0aGUgbnVtYmVyIG9mIGNvbHVtbnMgdG8gY3JlYXRlXHJcbiAgICAgICAgICogQHBhcmFtIG15b2JqXHJcbiAgICAgICAgICogQHJldHVybnMge251bWJlcn1cclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGZ1bmN0aW9uIF9nZXROdW1iZXJLZXlzKG15b2JqKXtcclxuICAgICAgICAgICAgdmFyIGNvdW50ID0gMDtcclxuICAgICAgICAgICAgZm9yICh2YXIgayBpbiBteW9iaikge1xyXG4gICAgICAgICAgICAgICAgaWYgKG15b2JqLmhhc093blByb3BlcnR5KGspKSBjb3VudCsrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBjb3VudDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIHNwZWNpZmllZCBzaXplIGFuZCBkZWZhdWx0IHZhbHVlc1xyXG4gICAgICAgICAqIEBwYXJhbSBhcnJheVNpemVcclxuICAgICAgICAgKiBAcGFyYW0gaW5pdGlhbFZhbFxyXG4gICAgICAgICAqIEByZXR1cm5zIHtBcnJheX1cclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgICBmdW5jdGlvbiBfY3JlYXRlQXJyYXkoYXJyYXlTaXplLGluaXRpYWxWYWwpe1xyXG4gICAgICAgICB2YXIgYW5BcnJheSA9IFtdO1xyXG4gICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFycmF5U2l6ZTsgaSsrKSBhbkFycmF5LnB1c2ggKGluaXRpYWxWYWwpO1xyXG4gICAgICAgICByZXR1cm4gYW5BcnJheVxyXG4gICAgICAgICB9XHJcblxyXG4gICAgICAgIHZtLmRlbGV0ZWRSb3c9ZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgdm0udGFibGVSb3dFeHBhbmRlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICB2bS50YWJsZVJvd0luZGV4Q3VyckV4cGFuZGVkID0gXCJcIjtcclxuICAgICAgICB9XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQG5nZG9jIHJlc2V0cyB0aGUgdGFibGUgdG8gYSBjb2xsYXBzZWQgc3RhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICB2bS5yZXNldFRhYmxlUm93ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2bS50YWJsZVJvd0luZGV4UHJldkV4cGFuZGVkID0gXCJcIjtcclxuICAgICAgICAgICAgdm0udGFibGVSb3dFeHBhbmRlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICB2bS50YWJsZVJvd0luZGV4Q3VyckV4cGFuZGVkID0gXCJcIjtcclxuICAgICAgICAgICAgaWYodm0ubGlzdEl0ZW1zKSB7XHJcbiAgICAgICAgICAgICAgICB2bS5kYXlEYXRhQ29sbGFwc2UgPSBfY3JlYXRlQXJyYXkodm0ubGlzdEl0ZW1zLmxlbmd0aCwgdHJ1ZSk7XHJcbiAgICAgICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICAgICAgX2NyZWF0ZUFycmF5KDAsIHRydWUpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdm0uZGF5RGF0YUNvbGxhcHNlRm4gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyB2bS5saXN0SXRlbXMubGVuZ3RoIC0gMTsgaSArPSAxKSB7XHJcbiAgICAgICAgICAgICAgICB2bS5kYXlEYXRhQ29sbGFwc2UuYXBwZW5kKCd0cnVlJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIHZtLnNlbGVjdFRhYmxlUm93ID0gZnVuY3Rpb24gKGluZGV4KSB7XHJcbiAgICAgICAgICAgIC8vaWYgc2VsZWN0aW9uXHJcbiAgICAgICAgIGlmICh2bS5kaXNhYmxlRXhwYW5kKSByZXR1cm47XHJcbiAgICAgICAgICAgIGlmICh2bS5kYXlEYXRhQ29sbGFwc2UgPT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgICAgICB2bS5kYXlEYXRhQ29sbGFwc2UgPSB2bS5kYXlEYXRhQ29sbGFwc2VGbigpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICh2bS50YWJsZVJvd0V4cGFuZGVkID09PSBmYWxzZSAmJiB2bS50YWJsZVJvd0luZGV4Q3VyckV4cGFuZGVkID09PSBcIlwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdm0udGFibGVSb3dJbmRleFByZXZFeHBhbmRlZCA9IFwiXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgdm0udGFibGVSb3dFeHBhbmRlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgdm0udGFibGVSb3dJbmRleEN1cnJFeHBhbmRlZCA9IGluZGV4O1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIHZtLnN0b3JlSWRFeHBhbmRlZCA9IHN0b3JlSWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgdm0uZGF5RGF0YUNvbGxhcHNlW2luZGV4XSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh2bS50YWJsZVJvd0V4cGFuZGVkID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZtLnRhYmxlUm93SW5kZXhDdXJyRXhwYW5kZWQgPT09IGluZGV4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZtLnRhYmxlUm93RXhwYW5kZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdm0udGFibGVSb3dJbmRleEN1cnJFeHBhbmRlZCA9IFwiXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZtLmRheURhdGFDb2xsYXBzZVtpbmRleF0gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZtLnRhYmxlUm93SW5kZXhQcmV2RXhwYW5kZWQgPSB2bS50YWJsZVJvd0luZGV4Q3VyckV4cGFuZGVkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2bS50YWJsZVJvd0luZGV4Q3VyckV4cGFuZGVkID0gaW5kZXg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICB2bS5zdG9yZUlkRXhwYW5kZWQgPSBzdG9yZUlkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2bS5kYXlEYXRhQ29sbGFwc2Vbdm0udGFibGVSb3dJbmRleFByZXZFeHBhbmRlZF0gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2bS5kYXlEYXRhQ29sbGFwc2Vbdm0udGFibGVSb3dJbmRleEN1cnJFeHBhbmRlZF0gPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG5cclxuICAgIH1cclxuXHJcblxyXG5cclxufSkoKTtcclxuIiwiLyoqXHJcbiAqIENyZWF0ZWQgYnkgQWJkZXNzYW1hZCBvbiA3LzUvMjAxNi5cclxuICovXHJcblxyXG4oZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKCdjb250YWN0TW9kdWxlJywgW1xyXG4gICAgICAgICAgICAnZGF0YUxpc3RzJyxcclxuICAgICAgICAgICAgJ2hwZmJDb25zdGFudHMnXHJcbiAgICAgICAgXSlcclxufSkoKTtcclxuXHJcbihmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ2NvbnRhY3RNb2R1bGUnKVxyXG4gICAgICAgIC5jb21wb25lbnQoJ2NtcENvbnRhY3REZXRhaWxzJyx7XHJcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnYXBwL3NjcmlwdHMvY29tcG9uZW50cy9jb250YWN0RGV0YWlscy90cGwtY29udGFjdC1kZXRhaWxzXzIwMTcwMTI0XzEyMjcuaHRtbCcsXHJcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6IGNvbnRhY3RDdHJsLFxyXG4gICAgICAgICAgICBjb250cm9sbGVyQXM6ICdjb250Q3RybCcsXHJcbiAgICAgICAgICAgIGJpbmRpbmdzOiB7XHJcbiAgICAgICAgICAgICAgICBjb250YWN0UmVjb3JkOiAnPCcsXHJcbiAgICAgICAgICAgICAgICBvblVwZGF0ZTogJyYnLCAvL3Nob3VsZCBiZSByZW1vdmVkIG5vdCB1c2VkLCBkZXByZWNhdGVkXHJcbiAgICAgICAgICAgICAgICBpc0FtZW5kOiAnPCcsXHJcbiAgICAgICAgICAgICAgICBzaG93RXJyb3JzOiAnJidcclxuICAgICAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgY29udGFjdEN0cmwuJGluamVjdCA9IFsnZ2V0Q29udGFjdExpc3RzJywnRU5HTElTSCcsJ0ZSRU5DSCddO1xyXG4gICAgZnVuY3Rpb24gY29udGFjdEN0cmwoIGdldENvbnRhY3RMaXN0cyxFTkdMSVNILEZSRU5DSCkge1xyXG4gICAgICAgIHZhciB2bSA9IHRoaXM7XHJcbiAgICAgICAgdm0uaXNFZGl0YWJsZSA9IHRydWU7XHJcbiAgICAgICAgdm0ubmdNb2RlbE9wdFNldHRpbmcgPSB7dXBkYXRlT246ICdibHVyJ307XHJcbiAgICAgICAgdm0uc2FsdXRhdGlvbkxpc3QgPSBnZXRDb250YWN0TGlzdHMuZ2V0U2FsdXRhdGlvbkxpc3QoKTtcclxuICAgICAgICB2bS5sYW5nQ29ycmVzcHBvbmQ9W0VOR0xJU0gsRlJFTkNIXTtcclxuICAgICAgICB2bS5waG9uZVJlZz0vXFwoPyhbMC05XXszfSlcXCk/KFsgLi1dPykoWzAtOV17M30pXFwyKFswLTldezR9KS87XHJcbiAgICAgICAgdm0uY29udGFjdE1vZGVsID0ge1xyXG4gICAgICAgICAgICBpc0RldGFpbFZhbGlkOiBmYWxzZSxcclxuICAgICAgICAgICAgY29udGFjdElkOiBcIlwiLFxyXG4gICAgICAgICAgICBhbWVuZFJlY29yZDogZmFsc2UsXHJcbiAgICAgICAgICAgIGFkZHJlc3NSb2xlOiB7XHJcbiAgICAgICAgICAgICAgICBtYW51ZmFjdHVyZXI6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgbWFpbGluZzogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBiaWxsaW5nOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIGltcG9ydGVyOiBmYWxzZVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBjb250YWN0Um9sZTogXCJcIixcclxuICAgICAgICAgICAgc2FsdXRhdGlvbjogXCJcIixcclxuICAgICAgICAgICAgZ2l2ZW5OYW1lOiBcIlwiLFxyXG4gICAgICAgICAgICBzdXJuYW1lOiBcIlwiLFxyXG4gICAgICAgICAgICBpbml0aWFsczogXCJcIixcclxuICAgICAgICAgICAgdGl0bGU6IFwiXCIsXHJcbiAgICAgICAgICAgIHBob25lOiBcIlwiLFxyXG4gICAgICAgICAgICBQaG9uZUV4dDogXCJcIixcclxuICAgICAgICAgICAgZmF4OiBcIlwiXHJcbiAgICAgICAgfTtcclxuICAgICAgICB2bS4kb25Jbml0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgIHZtLmxhbmdMaXN0PVtFTkdMSVNILEZSRU5DSF07XHJcbiAgICAgICAgICAgIC8qY29uc29sZS5sb2coXCJpbml0IGNvbnRhY3QgZGV0YWlsc1wiKTtcclxuICAgICAgICAgICBpZiAodm0uY29udGFjdFJlY29yZCkge1xyXG4gICAgICAgICAgICAgICAgLy9kb2Vzbid0IGNvcHkgYXMgdGhpcyBpcyBhIGR1bWIgY29tcG9uZW50XHJcbiAgICAgICAgICAgICAgICB2bS5jb250YWN0TW9kZWwgPSB2bS5jb250YWN0UmVjb3JkO1xyXG4gICAgICAgICAgICAgfSovXHJcbiAgICAgICAgfTtcclxuICAgICAgICAvL1RPRE8gcmVuYW1lXHJcbiAgICAgICAgdm0uJG9uQ2hhbmdlcz1mdW5jdGlvbihjaGFuZ2VzKXtcclxuICAgICAgICAgICAgaWYoY2hhbmdlcy5jb250YWN0UmVjb3JkKXtcclxuICAgICAgICAgICAgICAgIHZtLmNvbnRhY3RNb2RlbCA9IGNoYW5nZXMuY29udGFjdFJlY29yZC5jdXJyZW50VmFsdWU7XHJcblxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChjaGFuZ2VzLmlzQW1lbmQpIHtcclxuICAgICAgICAgICAgICAgIHZtLmlzRWRpdGFibGUgPSBjaGFuZ2VzLmlzQW1lbmQuY3VycmVudFZhbHVlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH07XHJcbiAgICAgICAgdm0uc2hvd0Vycm9yPWZ1bmN0aW9uKGN0cmwpe1xyXG4gICAgICAgICAgICBpZigoY3RybC4kaW52YWxpZCAmJiBjdHJsLiR0b3VjaGVkKSB8fCAodm0uc2hvd0Vycm9ycygpJiZjdHJsLiRpbnZhbGlkICkpe1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWVcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2VcclxuICAgICAgICB9XHJcblxyXG4gICAgfVxyXG5cclxufSkoKTtcclxuXHJcbiIsIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IGRraWx0eSBvbiA4LzE0LzIwMTYuXHJcbiAqL1xyXG5cclxuKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKCdhcHBsaWNhdGlvbkluZm8nLCBbXSlcclxufSkoKTtcclxuXHJcbihmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgnYXBwbGljYXRpb25JbmZvJylcclxuICAgICAgICAuY29tcG9uZW50KCdjbXBBcHBsaWNhdGlvbkluZm8nLCB7XHJcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnYXBwL3NjcmlwdHMvY29tcG9uZW50cy9hcHBsaWNhdGlvbkluZm8vdHBsLWFwcGxpY2F0aW9uLWluZm9fMjAxNzAxMjRfMTIyNy5odG1sJyxcclxuICAgICAgICAgICAgY29udHJvbGxlcjogQXBwbEluZm9DdHJsLFxyXG4gICAgICAgICAgICBjb250cm9sbGVyQXM6ICdpbmZvQ3RybCcsXHJcbiAgICAgICAgICAgIGJpbmRpbmdzOiB7XHJcbiAgICAgICAgICAgICAgICByZWNvcmQ6ICc8JyxcclxuICAgICAgICAgICAgICAgIHVzZXJUeXBlOiAnPCcsXHJcbiAgICAgICAgICAgICAgICBpc0luY29tcGxldGU6ICc8JyxcclxuICAgICAgICAgICAgICAgIGNvbmZpZ3VyZUlkRmllbGQ6ICc8JyxcclxuICAgICAgICAgICAgICAgIHNldFR5cGU6ICcmJ1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgZnVuY3Rpb24gQXBwbEluZm9DdHJsKCkge1xyXG4gICAgICAgIHZhciB2bSA9IHRoaXM7XHJcbiAgICAgICAgdm0uYXBwbFR5cGVzID0gW1wiTkVXXCIsIFwiQU1FTkRcIiwgXCJBUFBST1ZFRFwiXTtcclxuICAgICAgICB2bS5mb3JtVHlwZSA9ICdFWFQnO1xyXG4gICAgICAgIHZtLmluZm9Nb2RlbCA9IHtcclxuICAgICAgICAgICAgYXBwbGljYXRpb25UeXBlOiBcIk5FV1wiLFxyXG4gICAgICAgICAgICBlbnJvbG1lbnRWZXJzaW9uOiBcIjAuMFwiLFxyXG4gICAgICAgICAgICBkYXRlU2F2ZWQ6IFwiXCJcclxuICAgICAgICB9O1xyXG4gICAgICAgIHZtLmZpZWxkSWRMYWJlbD1cIlwiO1xyXG4gICAgICAgIHZtLmZpZWxkTGVuZ3RoPVwiXCI7XHJcbiAgICAgICAgdm0udGFnTmFtZT1cImZpZWxkSWRcIjtcclxuICAgICAgICB2bS5zZXRBc0luY29tcGxldGUgPSB0cnVlO1xyXG4gICAgICAgIHZtLmVycm9yTXNnID0gXCJcIjtcclxuICAgICAgICB2bS5pc0Rvc3NpZXIgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgdm0uJG9uSW5pdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgLy8vZG8gaW5pdFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgdm0uJG9uQ2hhbmdlcyA9IGZ1bmN0aW9uIChjaGFuZ2VzKSB7XHJcbiAgICAgICAgICAgIGlmIChjaGFuZ2VzLnVzZXJUeXBlKSB7XHJcbiAgICAgICAgICAgICAgICB2bS5mb3JtVHlwZSA9IGNoYW5nZXMudXNlclR5cGUuY3VycmVudFZhbHVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChjaGFuZ2VzLnJlY29yZCkge1xyXG4gICAgICAgICAgICAgICAgdm0uaW5mb01vZGVsID0gY2hhbmdlcy5yZWNvcmQuY3VycmVudFZhbHVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChjaGFuZ2VzLmlzSW5jb21wbGV0ZSkge1xyXG4gICAgICAgICAgICAgICAgdm0uc2V0QXNJbmNvbXBsZXRlID0gY2hhbmdlcy5pc0luY29tcGxldGUuY3VycmVudFZhbHVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmKGNoYW5nZXMuY29uZmlndXJlSWRGaWVsZCl7XHJcbiAgICAgICAgICAgICAgICBfc2V0Q29uZmlnSXRlbXMoY2hhbmdlcy5jb25maWd1cmVJZEZpZWxkLmN1cnJlbnRWYWx1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIGZ1bmN0aW9uIF9zZXRDb25maWdJdGVtcyhjb25maWdKc29uKXtcclxuICAgICAgICAgIHZtLmZpZWxkSWRMYWJlbD0gIGNvbmZpZ0pzb24ubGFiZWw7XHJcbiAgICAgICAgICAgIHZtLmZpZWxkTGVuZ3RoID0gY29uZmlnSnNvbi5maWVsZExlbmd0aDtcclxuICAgICAgICAgIHZtLnRhZ05hbWU9Y29uZmlnSnNvbi50YWdOYW1lO1xyXG4gICAgICAgICAgICB2bS5lcnJvck1zZyA9IGNvbmZpZ0pzb24uZXJyb3JNc2c7XHJcbiAgICAgICAgICAgIHZtLmlzRG9zc2llciA9IGNvbmZpZ0pzb24uaXNEb3NzaWVyO1xyXG4gICAgICAgICAgICBpZiAoYW5ndWxhci5pc1VuZGVmaW5lZCh2bS5pc0Rvc3NpZXIpKSB7XHJcbiAgICAgICAgICAgICAgICB2bS5pc0Rvc3NpZXIgPSBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICB2bS5pc0V4dGVybiA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHZtLmZvcm1UeXBlID09IFwiRVhUXCI7XHJcbiAgICAgICAgfTtcclxuICAgICAgICB2bS5zZXRBbWVuZFN0YXRlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAvL1RPRE8gaGFyZGNvZGUgc2hvdWxkIGJlIHNlcnZpY2VcclxuICAgICAgICAgICAgdm0uc2V0VHlwZSh7dHlwZTogJ0FNRU5EJ30pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICB9XHJcbn0pKCk7XHJcbiIsIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IGRraWx0eSBvbiA4LzI5LzIwMTYuXHJcbiAqL1xyXG5cclxuKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgnYWN0aXZpdHlGb3JtJywgW10pXHJcbn0pKCk7XHJcblxyXG4oZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKCdhY3Rpdml0eUZvcm0nKVxyXG4gICAgICAgIC5jb21wb25lbnQoJ2NtcEFjdGl2aXR5UmF0aW9uYWxlJywge1xyXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2FwcC9zY3JpcHRzL2NvbXBvbmVudHMvYWN0aXZpdHlSYXRpb25hbGUvdHBsLWFjdGl2aXR5LXJhdGlvbmFsZV8yMDE3MDEyNF8xMjI3Lmh0bWwnLFxyXG4gICAgICAgICAgICBjb250cm9sbGVyOiBhY3Rpdml0eVJhdGlvbmFsZUN0cmwsXHJcbiAgICAgICAgICAgIGNvbnRyb2xsZXJBczogJ2FjdFJhdEN0cmwnLFxyXG5cclxuICAgICAgICAgICAgYmluZGluZ3M6IHtcclxuICAgICAgICAgICAgICAgIGFjdGl2aXR5UmVjb3JkOiAnPCcsXHJcbiAgICAgICAgICAgICAgICBpc1JlcXVpcmVkOiAnPCcsXHJcbiAgICAgICAgICAgICAgICBzaG93RXJyb3JzOiBcIiZcIlxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICBmdW5jdGlvbiBhY3Rpdml0eVJhdGlvbmFsZUN0cmwoKSB7XHJcbiAgICAgICAgdmFyIHZtID0gdGhpcztcclxuICAgICAgICB2bS5yZWNvcmQgPSB7fTtcclxuICAgICAgICB2bS5yZXF1aXJlZFN0YXRlID0gZmFsc2U7XHJcbiAgICAgICAgdm0ucmF0aW9uYWxlU2VsZWN0ZWQgPSBcIlwiOyAvL3NldHMgZXJyb3IgaGFuZGxpbmdcclxuICAgICAgICAvKipcclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEBwYXJhbSBjaGFuZ2VzXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdm0uJG9uQ2hhbmdlcyA9IGZ1bmN0aW9uIChjaGFuZ2VzKSB7XHJcbiAgICAgICAgICAgIGlmIChjaGFuZ2VzLmFjdGl2aXR5UmVjb3JkKSB7XHJcbiAgICAgICAgICAgICAgICB2bS5yZWNvcmQgPSBjaGFuZ2VzLmFjdGl2aXR5UmVjb3JkLmN1cnJlbnRWYWx1ZTtcclxuICAgICAgICAgICAgICAgIHZtLnVwZGF0ZUVycm9yU3RhdGUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoY2hhbmdlcy5pc1JlcXVpcmVkKSB7XHJcbiAgICAgICAgICAgICAgICB2bS5yZXF1aXJlZFN0YXRlID0gY2hhbmdlcy5pc1JlcXVpcmVkLmN1cnJlbnRWYWx1ZTtcclxuICAgICAgICAgICAgICAgIHZtLnVwZGF0ZUVycm9yU3RhdGUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgdm0uc2hvd0Vycm9yID0gZnVuY3Rpb24gKGlzVG91Y2hlZCwgaXNJbnZhbGlkKSB7XHJcbiAgICAgICAgICAgIGlmICgoaXNJbnZhbGlkICYmIGlzVG91Y2hlZCkgfHwgKHZtLnNob3dFcnJvcnMoKSAmJiBpc0ludmFsaWQgKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWVcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2VcclxuICAgICAgICB9O1xyXG4gICAgICAgIHZtLnVwZGF0ZUVycm9yU3RhdGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmICh2bS5yZWNvcmQubmV3Um9hIHx8IHZtLnJlY29yZC5uZXdDbGFpbXNcclxuICAgICAgICAgICAgICAgIHx8IHZtLnJlY29yZC5jaGFuZ2VGb3JtdWxhdGlvblxyXG4gICAgICAgICAgICAgICAgfHwgdm0ucmVjb3JkLmNoYW5nZURydWdTdWJzdGFuY2VcclxuICAgICAgICAgICAgICAgIHx8IHZtLnJlY29yZC5yZXBsYWNlU3RlcmlsaXR5XHJcbiAgICAgICAgICAgICAgICB8fCB2bS5yZWNvcmQuY29uZmlybWl0b3J5U3R1ZGllc1xyXG4gICAgICAgICAgICAgICAgfHwgdm0ucmVjb3JkLm90aGVyUmF0aW9uYWxlRGV0YWlsc1xyXG4gICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgIHZtLnJhdGlvbmFsZVNlbGVjdGVkID0gXCJ2YWx1ZVwiXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB2bS5yYXRpb25hbGVTZWxlY3RlZCA9IFwiXCJcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZtLnNob3dFcnJvck1pc3NpbmcgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIC8vVE9ETyBzZXJ2aWNlXHJcbiAgICAgICAgICAgIGlmICghdm0ucmVxdWlyZWRTdGF0ZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh2bS5yYXRpb25hbGVTZWxlY3RlZCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoKCF2bS5hY3Rpdml0eVR5cGVGb3JtLiRwcmlzdGluZSAmJiB2bS5hY3Rpdml0eVR5cGVGb3JtLiRpbnZhbGlkKSB8fCAoIHZtLnNob3dFcnJvcnMoKSAmJiB2bS5hY3Rpdml0eVR5cGVGb3JtLiRpbnZhbGlkKVxyXG4gICAgICAgICAgICAgICAgfHwgKHZtLmFjdGl2aXR5VHlwZUZvcm0uJHRvdWNoZWQgJiYgdm0uYWN0aXZpdHlUeXBlRm9ybS4kaW52YWxpZCkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICB9XHJcbn0pKCk7IiwiLyoqXHJcbiAqIENyZWF0ZWQgYnkgZGtpbHR5IG9uIDkvOC8yMDE2LlxyXG4gKi9cclxuXHJcbihmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ2FjdGl2aXR5TWFpbicsIFtcclxuICAgICAgICAgICAgJ3Bhc2NhbHByZWNodC50cmFuc2xhdGUnLFxyXG4gICAgICAgICAgICAnbmdNZXNzYWdlcycsXHJcbiAgICAgICAgICAgICduZ0FyaWEnLFxyXG4gICAgICAgICAgICAnZmlsZUlPJyxcclxuICAgICAgICAgICAgJ25nU2FuaXRpemUnLFxyXG4gICAgICAgICAgICAnYWN0aXZpdHlTZXJ2aWNlJyxcclxuICAgICAgICAgICAgJ2FwcGxpY2F0aW9uSW5mb1NlcnZpY2UnLFxyXG4gICAgICAgICAgICAnYXBwbGljYXRpb25JbmZvJyxcclxuICAgICAgICAgICAgJ2ZpbHRlckxpc3RzJyxcclxuICAgICAgICAgICAgJ2NvbW1vblN0YXRpY0xpc3RzJyxcclxuICAgICAgICAgICAgJ2FjdGl2aXR5Q2hhbmdlJyxcclxuICAgICAgICAgICAgJ2FjdGl2aXR5Rm9ybScsXHJcbiAgICAgICAgICAgICdudW1iZXJGb3JtYXQnLFxyXG4gICAgICAgICAgICAnY29udGFjdE1vZHVsZTI2JyxcclxuICAgICAgICAgICAgJ2NvbnRhY3RNb2R1bGUnLFxyXG4gICAgICAgICAgICAnY29udGFjdE1vZHVsZTI1JyxcclxuICAgICAgICAgICAgJ2FkbWluU3VibWlzc2lvbicsXHJcbiAgICAgICAgICAgICdhY3Rpdml0eUxpc3RzJyxcclxuICAgICAgICAgICAgJ3VpLmJvb3RzdHJhcCcsXHJcbiAgICAgICAgICAgICd1aS5zZWxlY3QnXHJcbiAgICAgICAgXSlcclxufSkoKTtcclxuXHJcbihmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ2FjdGl2aXR5TWFpbicpXHJcbiAgICAgICAgLmNvbmZpZyhmdW5jdGlvbiAodWlTZWxlY3RDb25maWcpIHtcclxuICAgICAgICAgICAgLy9jaG9pY2VzOiBzZWxlY3QyLCBib290c3RyYXAsIHNlbGVjdGl6ZVxyXG4gICAgICAgICAgICB1aVNlbGVjdENvbmZpZy50aGVtZSA9ICdzZWxlY3QyJztcclxuICAgICAgICB9KVxyXG4gICAgICAgIC5jb21wb25lbnQoJ2NtcEFjdGl2aXR5TWFpbicsIHtcclxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdhcHAvc2NyaXB0cy9jb21wb25lbnRzL2FjdGl2aXR5TWFpbi90cGwtYWN0aXZpdHktbWFpbl8yMDE3MDEyNF8xMjI3Lmh0bWwnLFxyXG4gICAgICAgICAgICBjb250cm9sbGVyOiBhY3Rpdml0eU1haW5DdHJsLFxyXG4gICAgICAgICAgICBjb250cm9sbGVyQXM6ICdtYWluJyxcclxuICAgICAgICAgICAgYmluZGluZ3M6IHtcclxuICAgICAgICAgICAgICAgIGZvcm1UeXBlOiAnQCdcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgIGFjdGl2aXR5TWFpbkN0cmwuJGluamVjdCA9IFsnQWN0aXZpdHlTZXJ2aWNlJywgJ0FwcGxpY2F0aW9uSW5mb1NlcnZpY2UnLCAnaHBmYkZpbGVQcm9jZXNzaW5nJywgJyRzY29wZScsICckdHJhbnNsYXRlJywgJ0NvbW1vbkxpc3RzJywnQWN0aXZpdHlMaXN0RmFjdG9yeSddO1xyXG4gICAgZnVuY3Rpb24gYWN0aXZpdHlNYWluQ3RybChBY3Rpdml0eVNlcnZpY2UsIEFwcGxpY2F0aW9uSW5mb1NlcnZpY2UsIGhwZmJGaWxlUHJvY2Vzc2luZywgJHNjb3BlLCAkdHJhbnNsYXRlLCBDb21tb25MaXN0cywgQWN0aXZpdHlMaXN0RmFjdG9yeSkge1xyXG4gICAgICAgIHZhciB2bSA9IHRoaXM7XHJcbiAgICAgICAgdm0uaXNJbmNvbXBsZXRlID0gdHJ1ZTtcclxuICAgICAgICB2bS51c2VyVHlwZSA9IFwiRVhUXCI7XHJcbiAgICAgICAgdm0uc2F2ZVhNTExhYmVsID0gXCJTQVZFX0RSQUZUXCI7XHJcbiAgICAgICAgdm0udXBkYXRlVmFsdWVzID0gMDtcclxuICAgICAgICB2bS5zZXRBbWVuZFN0YXRlID0gX3NldEFwcGxUeXBlVG9BbWVuZDtcclxuICAgICAgICB2bS5zaG93Q29udGVudCA9IF9sb2FkRmlsZUNvbnRlbnQ7XHJcbiAgICAgICAgdm0uZGlzYWJsZVhNTCA9IHRydWU7XHJcbiAgICAgICAgdm0uc2hvd0FsbEVycm9ycyA9IGZhbHNlO1xyXG4gICAgICAgIHZtLmZvcm1BbWVuZCA9IGZhbHNlO1xyXG4gICAgICAgIHZtLmlzTm90aWZpYWJsZSA9IGZhbHNlO1xyXG4gICAgICAgIHZtLmlzUmF0aW9uYWxlID0gZmFsc2U7XHJcbiAgICAgICAgdm0uc2hvd0FjdGl2aXR5ID0gZmFsc2U7XHJcbiAgICAgICAgdm0ubGFuZyA9ICR0cmFuc2xhdGUucHJvcG9zZWRMYW5ndWFnZSgpIHx8ICR0cmFuc2xhdGUudXNlKCk7XHJcbiAgICAgICAgdm0uYWN0aXZpdHlTZXJ2aWNlID0gbmV3IEFjdGl2aXR5U2VydmljZSgpO1xyXG4gICAgICAgIHZtLmFwcGxpY2F0aW9uSW5mb1NlcnZpY2UgPSBuZXcgQXBwbGljYXRpb25JbmZvU2VydmljZSgpO1xyXG4gICAgICAgIHZtLnJvb3RUYWcgPSB2bS5hY3Rpdml0eVNlcnZpY2UuZ2V0Um9vdFRhZygpO1xyXG4gICAgICAgIHZtLmFjdGl2aXR5Um9vdCA9IHZtLmFjdGl2aXR5U2VydmljZS5nZXRNb2RlbEluZm8oKTtcclxuICAgICAgICB2bS5sZWFkTGlzdD0gQWN0aXZpdHlMaXN0RmFjdG9yeS5nZXRBY3Rpdml0eUxlYWRMaXN0KCk7XHJcbiAgICAgICAgdm0uYWxlcnRzID0gW107XHJcbiAgICAgICAgdm0uY29uZmlnRmllbGQgPSB7XHJcbiAgICAgICAgICAgIFwibGFiZWxcIjogXCJDT05UUk9MX05VTUJFUlwiLFxyXG4gICAgICAgICAgICBcImZpZWxkTGVuZ3RoXCI6IFwiNlwiLFxyXG4gICAgICAgICAgICBcInRhZ05hbWVcIjogXCJkc3RzQ29udHJvbE51bWJlclwiLFxyXG4gICAgICAgICAgICBcImVycm9yTXNnXCI6IFwiTVNHX0xFTkdUSF82XCJcclxuICAgICAgICB9O1xyXG4gICAgICAgIHZtLkNvbW1vbkxpc3RzID0gQ29tbW9uTGlzdHM7XHJcbiAgICAgICAgdm0ueWVzTm9MaXN0ID0gdm0uQ29tbW9uTGlzdHMuZ2V0WWVzTm9MaXN0KCk7XHJcbiAgICAgICAgdm0uYWxlcnQxID0ge1xyXG4gICAgICAgICAgICB0eXBlOiAnaW5mbycsXHJcbiAgICAgICAgICAgIG1zZzogJ0xvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBjb25zZWN0ZXR1ciBhZGlwaXNjaW5nIGVsaXQuIE1vcmJpIGZldWdpYXQgbnVuYyBldCB0ZW1wb3IgbWFsZXN1YWRhLiBOdWxsYW0gdHJpc3RpcXVlIGxpZ3VsYSBibGFuZGl0LCBwb3N1ZXJlIGVzdCBhYywgc2FnaXR0aXMgbWkuIEluIGhhYyBoYWJpdGFzc2UgcGxhdGVhIGRpY3R1bXN0LiBJbnRlcmR1bSBldCBtYWxlc3VhZGEgZmFtZXMgYWMgYW50ZSBpcHN1bSBwcmltaXMgaW4gZmF1Y2lidXMuIENyYXMgdWxsYW1jb3JwZXIgc2FnaXR0aXMgZXJhdCBhYyBsb2JvcnRpcy4gU3VzcGVuZGlzc2UgYmliZW5kdW0gc2VkIG1hdXJpcyBlZ2V0IGNvbmRpbWVudHVtLiBTdXNwZW5kaXNzZSBlZ2VzdGFzIGxpZ3VsYSBhIGxpYmVybyB0aW5jaWR1bnQsIHV0IHZlaGljdWxhIHNlbSBmZXJtZW50dW0uIFF1aXNxdWUgc2VtcGVyIHNjZWxlcmlzcXVlIHVybmEsIGluIGRpZ25pc3NpbSBvZGlvIGNvbmRpbWVudHVtIGFjLiBOdWxsYW0gc3VzY2lwaXQgbWFsZXN1YWRhIG1hZ25hLCBlZ2V0IGxhY2luaWEgbnVsbGEgdGVtcG9yIGlkLiBDdXJhYml0dXIgdHJpc3RpcXVlIGlwc3VtIGxpYmVybywgdXQgcHVsdmluYXIgaXBzdW0gdmVuZW5hdGlzIG5vbi4gVXQgcG9ydGEsIHNlbSBub24gYmxhbmRpdCBhbGlxdWV0LCBhbnRlIG1hdXJpcyBwb3J0YSBleCwgcXVpcyBpYWN1bGlzIGVsaXQgb3JjaSBldSBsZW8uIE1vcmJpIGF0IGVuaW0gbmVjIG9kaW8gdWxsYW1jb3JwZXIgbW9sZXN0aWUuIE51bGxhIHNpdCBhbWV0IG1hZ25hIGNvbnNlcXVhdCwgYmxhbmRpdCBvcmNpIGEsIHBvcnRhIGVyb3MuIFNlZCBlbmltIG5pc2wsIHRlbXB1cyBhYyBpbXBlcmRpZXQgYSwgb3JuYXJlIGdyYXZpZGEgc2FwaWVuLiBDdXJhYml0dXIgdWx0cmljaWVzIGRvbG9yIGFsaXF1ZXQgYmliZW5kdW0gYWNjdW1zYW4uJyxcclxuICAgICAgICAgICAgc2hvdzogZmFsc2VcclxuICAgICAgICB9O1xyXG4gICAgICAgIHZtLmFsZXJ0MiA9IHtcclxuICAgICAgICAgICAgdHlwZTogJ2luZm8nLFxyXG4gICAgICAgICAgICBtc2c6ICdMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2VjdGV0dXIgYWRpcGlzY2luZyBlbGl0LiBNb3JiaSBmZXVnaWF0IG51bmMgZXQgdGVtcG9yIG1hbGVzdWFkYS4gTnVsbGFtIHRyaXN0aXF1ZSBsaWd1bGEgYmxhbmRpdCwgcG9zdWVyZSBlc3QgYWMsIHNhZ2l0dGlzIG1pLiBJbiBoYWMgaGFiaXRhc3NlIHBsYXRlYSBkaWN0dW1zdC4gSW50ZXJkdW0gZXQgbWFsZXN1YWRhIGZhbWVzIGFjIGFudGUgaXBzdW0gcHJpbWlzIGluIGZhdWNpYnVzLiBDcmFzIHVsbGFtY29ycGVyIHNhZ2l0dGlzIGVyYXQgYWMgbG9ib3J0aXMuIFN1c3BlbmRpc3NlIGJpYmVuZHVtIHNlZCBtYXVyaXMgZWdldCBjb25kaW1lbnR1bS4gU3VzcGVuZGlzc2UgZWdlc3RhcyBsaWd1bGEgYSBsaWJlcm8gdGluY2lkdW50LCB1dCB2ZWhpY3VsYSBzZW0gZmVybWVudHVtLiBRdWlzcXVlIHNlbXBlciBzY2VsZXJpc3F1ZSB1cm5hLCBpbiBkaWduaXNzaW0gb2RpbyBjb25kaW1lbnR1bSBhYy4gTnVsbGFtIHN1c2NpcGl0IG1hbGVzdWFkYSBtYWduYSwgZWdldCBsYWNpbmlhIG51bGxhIHRlbXBvciBpZC4gQ3VyYWJpdHVyIHRyaXN0aXF1ZSBpcHN1bSBsaWJlcm8sIHV0IHB1bHZpbmFyIGlwc3VtIHZlbmVuYXRpcyBub24uIFV0IHBvcnRhLCBzZW0gbm9uIGJsYW5kaXQgYWxpcXVldCwgYW50ZSBtYXVyaXMgcG9ydGEgZXgsIHF1aXMgaWFjdWxpcyBlbGl0IG9yY2kgZXUgbGVvLiBNb3JiaSBhdCBlbmltIG5lYyBvZGlvIHVsbGFtY29ycGVyIG1vbGVzdGllLiBOdWxsYSBzaXQgYW1ldCBtYWduYSBjb25zZXF1YXQsIGJsYW5kaXQgb3JjaSBhLCBwb3J0YSBlcm9zLiBTZWQgZW5pbSBuaXNsLCB0ZW1wdXMgYWMgaW1wZXJkaWV0IGEsIG9ybmFyZSBncmF2aWRhIHNhcGllbi4gQ3VyYWJpdHVyIHVsdHJpY2llcyBkb2xvciBhbGlxdWV0IGJpYmVuZHVtIGFjY3Vtc2FuLicsXHJcbiAgICAgICAgICAgIHNob3c6IGZhbHNlXHJcbiAgICAgICAgfTtcclxuICAgICAgICB2bS5hbGVydDMgPSB7XHJcbiAgICAgICAgICAgIHR5cGU6ICdpbmZvJyxcclxuICAgICAgICAgICAgbXNnOiAnTG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2NpbmcgZWxpdC4gTW9yYmkgZmV1Z2lhdCBudW5jIGV0IHRlbXBvciBtYWxlc3VhZGEuIE51bGxhbSB0cmlzdGlxdWUgbGlndWxhIGJsYW5kaXQsIHBvc3VlcmUgZXN0IGFjLCBzYWdpdHRpcyBtaS4gSW4gaGFjIGhhYml0YXNzZSBwbGF0ZWEgZGljdHVtc3QuIEludGVyZHVtIGV0IG1hbGVzdWFkYSBmYW1lcyBhYyBhbnRlIGlwc3VtIHByaW1pcyBpbiBmYXVjaWJ1cy4gQ3JhcyB1bGxhbWNvcnBlciBzYWdpdHRpcyBlcmF0IGFjIGxvYm9ydGlzLiBTdXNwZW5kaXNzZSBiaWJlbmR1bSBzZWQgbWF1cmlzIGVnZXQgY29uZGltZW50dW0uIFN1c3BlbmRpc3NlIGVnZXN0YXMgbGlndWxhIGEgbGliZXJvIHRpbmNpZHVudCwgdXQgdmVoaWN1bGEgc2VtIGZlcm1lbnR1bS4gUXVpc3F1ZSBzZW1wZXIgc2NlbGVyaXNxdWUgdXJuYSwgaW4gZGlnbmlzc2ltIG9kaW8gY29uZGltZW50dW0gYWMuIE51bGxhbSBzdXNjaXBpdCBtYWxlc3VhZGEgbWFnbmEsIGVnZXQgbGFjaW5pYSBudWxsYSB0ZW1wb3IgaWQuIEN1cmFiaXR1ciB0cmlzdGlxdWUgaXBzdW0gbGliZXJvLCB1dCBwdWx2aW5hciBpcHN1bSB2ZW5lbmF0aXMgbm9uLiBVdCBwb3J0YSwgc2VtIG5vbiBibGFuZGl0IGFsaXF1ZXQsIGFudGUgbWF1cmlzIHBvcnRhIGV4LCBxdWlzIGlhY3VsaXMgZWxpdCBvcmNpIGV1IGxlby4gTW9yYmkgYXQgZW5pbSBuZWMgb2RpbyB1bGxhbWNvcnBlciBtb2xlc3RpZS4gTnVsbGEgc2l0IGFtZXQgbWFnbmEgY29uc2VxdWF0LCBibGFuZGl0IG9yY2kgYSwgcG9ydGEgZXJvcy4gU2VkIGVuaW0gbmlzbCwgdGVtcHVzIGFjIGltcGVyZGlldCBhLCBvcm5hcmUgZ3JhdmlkYSBzYXBpZW4uIEN1cmFiaXR1ciB1bHRyaWNpZXMgZG9sb3IgYWxpcXVldCBiaWJlbmR1bSBhY2N1bXNhbi4nLFxyXG4gICAgICAgICAgICBzaG93OiBmYWxzZVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8vVE9ETyByZW1vdmU/XHJcbiAgICAgICAgdm0uaW5pdFVzZXIgPSBmdW5jdGlvbiAoaWQpIHtcclxuICAgICAgICAgICAgLyogaWYgKCFpZCkgaWQgPSAnRVhUJztcclxuICAgICAgICAgICAgIHZtLnVzZXJUeXBlID0gaWQ7XHJcbiAgICAgICAgICAgICBpZiAoaWQgPT0gJ0lOVCcpIHtcclxuICAgICAgICAgICAgIHZtLnNhdmVYTUxMYWJlbCA9IFwiQVBQUk9WRV9GSU5BTFwiXHJcbiAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgdm0uc2F2ZVhNTExhYmVsID0gXCJTQVZFX0RSQUZUXCJcclxuICAgICAgICAgICAgIH0qL1xyXG5cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2bS4kb25Jbml0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2bS5zZXRUaGlyZFBhcnR5KCk7XHJcbiAgICAgICAgICAgIHZtLnVwZGF0ZUFjdGl2aXR5VHlwZSgpO1xyXG4gICAgICAgICAgICB2bS5zZXRBZG1pblN1Ym1pc3Npb24oKTtcclxuICAgICAgICAgICBsb2FkQWN0aXZpdHlEYXRhKCk7XHJcbiAgICAgICAgICAgIGxvYWRGZWVEYXRhKCk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gbG9hZEFjdGl2aXR5RGF0YSgpe1xyXG4gICAgICAgICAgICBBY3Rpdml0eUxpc3RGYWN0b3J5LmdldFJhVHlwZUxpc3QoKVxyXG4gICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24oZGF0YSl7XHJcbiAgICAgICAgICAgICAgICAgICAgdm0uYWN0aXZpdHlUeXBlTGlzdD1kYXRhO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBBc3luY2ggbG9hZCBvZiBGZWUgRGF0YVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGZ1bmN0aW9uIGxvYWRGZWVEYXRhKCl7XHJcbiAgICAgICAgICAgIEFjdGl2aXR5TGlzdEZhY3RvcnkuZ2V0RmVlQ2xhc3NMaXN0KClcclxuICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKGRhdGEpe1xyXG4gICAgICAgICAgICAgICAgICAgIHZtLmZlZUNsYXNzTGlzdD1kYXRhO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2bS4kb25DaGFuZ2VzID0gZnVuY3Rpb24gKGNoYW5nZXMpIHtcclxuICAgICAgICAgICAgaWYgKGNoYW5nZXMuZm9ybVR5cGUpIHtcclxuICAgICAgICAgICAgICAgIHZtLnVzZXJUeXBlID0gY2hhbmdlcy5mb3JtVHlwZS5jdXJyZW50VmFsdWU7XHJcbiAgICAgICAgICAgICAgICBpZiAodm0udXNlclR5cGUgPT0gJ0lOVCcpIHtcclxuICAgICAgICAgICAgICAgICAgICB2bS5zYXZlWE1MTGFiZWwgPSBcIkFQUFJPVkVfRklOQUxcIlxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB2bS5zYXZlWE1MTGFiZWwgPSBcIlNBVkVfRFJBRlRcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAbmdkb2MgbWV0aG9kIC1yZXR1cm5zIHdoZXRoZXIgdGhpcyBhcHBsaWNhdGlvbiBpcyBhbiBhbWVuZG1lbnRcclxuICAgICAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuICAgICAgICAgKi9cclxuICAgICAgICB2bS5pc0FtZW5kID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gKHZtLmZvcm1BbWVuZCk7XHJcbiAgICAgICAgfTtcclxuXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQG5nZG9jIG1ldGhvZCBTYXZlcyB0aGUgbW9kZWwgY29udGVudCBpbiBKU09OIGZvcm1hdFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHZtLnNhdmVKc29uID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgd3JpdGVSZXN1bHQgPSBfdHJhbnNmb3JtRmlsZSgpO1xyXG4gICAgICAgICAgICBocGZiRmlsZVByb2Nlc3Npbmcud3JpdGVBc0pzb24od3JpdGVSZXN1bHQsIF9jcmVhdGVGaWxlbmFtZSgpLCB2bS5yb290VGFnKTtcclxuICAgICAgICAgICAgdm0uc2hvd0FsbEVycm9ycyA9IHRydWU7XHJcbiAgICAgICAgICAgIF9zZXRDb21wbGV0ZSgpXHJcbiAgICAgICAgfTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAbmdkb2MgbWV0aG9kIC0gc2F2ZXMgdGhlIGRhdGEgbW9kZWwgYXMgWE1MIGZvcm1hdFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHZtLnNhdmVYTUwgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciB3cml0ZVJlc3VsdCA9IF90cmFuc2Zvcm1GaWxlKCk7XHJcbiAgICAgICAgICAgIGhwZmJGaWxlUHJvY2Vzc2luZy53cml0ZUFzWG1sKHdyaXRlUmVzdWx0LCBfY3JlYXRlRmlsZW5hbWUoKSwgdm0ucm9vdFRhZyk7XHJcbiAgICAgICAgICAgIF9zZXRDb21wbGV0ZSgpXHJcbiAgICAgICAgfTtcclxuXHJcblxyXG4gICAgICAgIHZtLnNob3dFcnJvciA9IGZ1bmN0aW9uIChpc1RvdWNoZWQsIGlzSW52YWxpZCkge1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIChpc0ludmFsaWQgJiYgaXNUb3VjaGVkKSB8fCAodm0uc2hvd0Vycm9ycygpICYmIGlzSW52YWxpZCApO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgLy9UT0RPIHJlbW92ZT9cclxuICAgICAgICB2bS5zaG93RXJyb3JDaGVjayA9IGZ1bmN0aW9uIChpc1RvdWNoZWQsIHZhbHVlKSB7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gKCF2YWx1ZSAmJiBpc1RvdWNoZWQpIHx8ICh2bS5zaG93RXJyb3JzKCkgJiYgIXZhbHVlICk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLy9UT0RPIGhhbmRsZWQgc2F2ZSBwcmVzc2VkP1xyXG4gICAgICAgIHZtLnNob3dFcnJvcnMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB2bS5zaG93QWxsRXJyb3JzO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgdm0uc2V0VGhpcmRQYXJ0eSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdm0udGhpcmRQYXJ0eVN0YXRlID0gKHZtLmFjdGl2aXR5Um9vdC5pc1RoaXJkUGFydHkgPT09IFwiWVwiKVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZtLnNldEFwcGxpY2F0aW9uVHlwZSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICB2bS5hY3Rpdml0eVJvb3QuYXBwbGljYXRpb25UeXBlID0gdmFsdWU7XHJcbiAgICAgICAgICAgIHZtLmZvcm1BbWVuZCA9IHZtLmFjdGl2aXR5Um9vdC5hcHBsaWNhdGlvblR5cGUgPT09IHZtLmFwcGxpY2F0aW9uSW5mb1NlcnZpY2UuZ2V0QW1lbmRUeXBlKCk7XHJcbiAgICAgICAgICAgIGRpc2FibGVYTUxTYXZlKCk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBTZXRzIHRoZSB2aXNpYmlsaXR5IGFuZCBzdGF0ZSBvZiB0aGUgcmVsYXRlZCBhY3Rpdml0aWVzXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdm0uc2V0QWRtaW5TdWJtaXNzaW9uID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAodm0uYWN0aXZpdHlSb290LmlzQWRtaW5TdWIgPT09IHZtLkNvbW1vbkxpc3RzLmdldFllc1ZhbHVlKCkpIHtcclxuICAgICAgICAgICAgICAgIHZtLnNob3dBY3Rpdml0eSA9IHRydWU7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB2bS5hY3Rpdml0eVJvb3QucmVsYXRlZEFjdGl2aXR5ID0gdm0uYWN0aXZpdHlTZXJ2aWNlLmdldEVtcHR5UmVsYXRlZEFjdGl2aXR5KCk7XHJcbiAgICAgICAgICAgICAgICB2bS5zaG93QWN0aXZpdHkgPSBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAbmdkb2MgLWNyZWF0ZXMgYSBmaWxlbmFtZSBmb3IgYWN0aXZpdHkgZmlsZS4gSWYgaXQgZXhpc3RzLGFkZHMgY29udHJvbCBudW1iZXJcclxuICAgICAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZnVuY3Rpb24gX2NyZWF0ZUZpbGVuYW1lKCkge1xyXG5cclxuXHJcbiAgICAgICAgICAgIHZhciBkcmFmdF9wcmVmaXggPSBcIkRSQUZUUkVQUkFcIjtcclxuICAgICAgICAgICAgdmFyIGZpbmFsX3ByZWZpeCA9IFwiSENSRVBSQVwiO1xyXG4gICAgICAgICAgICB2YXIgZmlsZW5hbWUgPSBcIlwiO1xyXG4gICAgICAgICAgICBpZiAodm0udXNlclR5cGUgPT09ICdJTlQnKSB7IC8vVE9ETyBtYWdpYyBudW1iZXJzXHJcblxyXG4gICAgICAgICAgICAgICAgZmlsZW5hbWUgPSBmaW5hbF9wcmVmaXg7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBmaWxlbmFtZSA9IGRyYWZ0X3ByZWZpeDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodm0uYWN0aXZpdHlSb290ICYmIHZtLmFjdGl2aXR5Um9vdC5kc3RzQ29udHJvbE51bWJlcikge1xyXG4gICAgICAgICAgICAgICAgZmlsZW5hbWUgPSBmaWxlbmFtZSArIFwiX1wiICsgdm0uYWN0aXZpdHlSb290LmRzdHNDb250cm9sTnVtYmVyO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh2bS5hY3Rpdml0eVJvb3QuZW5yb2xtZW50VmVyc2lvbikge1xyXG4gICAgICAgICAgICAgICAgLy92YXIgcGFydHMgPSB2bS5hY3Rpdml0eVJvb3QuZW5yb2xtZW50VmVyc2lvbi5zcGxpdCgnLicpO1xyXG4gICAgICAgICAgICAgICAgZmlsZW5hbWUgPSBmaWxlbmFtZSArIFwiX1wiICsgdm0uYWN0aXZpdHlSb290LmVucm9sbWVudFZlcnNpb247XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGZpbGVuYW1lO1xyXG5cclxuXHJcbiAgICAgICAgICAgIHZhciBmaWxlbmFtZSA9IFwiSENfUkFfRW5yb2xtZW50XCI7XHJcbiAgICAgICAgICAgIGlmICh2bS5hY3Rpdml0eVJvb3QgJiYgdm0uYWN0aXZpdHlSb290LmRzdHNDb250cm9sTnVtYmVyKSB7XHJcbiAgICAgICAgICAgICAgICBmaWxlbmFtZSA9IGZpbGVuYW1lICsgXCJfXCIgKyB2bS5hY3Rpdml0eVJvb3QuZHN0c0NvbnRyb2xOdW1iZXI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGZpbGVuYW1lO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQG5nZGNjIG1ldGhvZCB1cGRhdGVzIGRhdGEgYW5kIGluY3JlbWVudHMgdmVyc2lvbiBiZWZvcmUgY3JlYXRpbmcganNvblxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGZ1bmN0aW9uIF90cmFuc2Zvcm1GaWxlKCkge1xyXG4gICAgICAgICAgICB1cGRhdGVEYXRlKCk7XHJcbiAgICAgICAgICAgIGlmICghdm0uaXNFeHRlcm4oKSkge1xyXG4gICAgICAgICAgICAgICAgdm0uYWN0aXZpdHlSb290LmVucm9sbWVudFZlcnNpb24gPSB2bS5hcHBsaWNhdGlvbkluZm9TZXJ2aWNlLmluY3JlbWVudE1ham9yVmVyc2lvbih2bS5hY3Rpdml0eVJvb3QuZW5yb2xtZW50VmVyc2lvbik7XHJcbiAgICAgICAgICAgICAgICB2bS5hY3Rpdml0eVJvb3QuYXBwbGljYXRpb25UeXBlID0gQXBwbGljYXRpb25JbmZvU2VydmljZS5nZXRBcHByb3ZlZFR5cGUoKTtcclxuICAgICAgICAgICAgICAgIHVwZGF0ZU1vZGVsT25BcHByb3ZhbCgpOyAvL3VwZGF0ZXMgYWxsIHRoZSBhbWVuZFxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdm0uYWN0aXZpdHlSb290LmVucm9sbWVudFZlcnNpb24gPSB2bS5hcHBsaWNhdGlvbkluZm9TZXJ2aWNlLmluY3JlbWVudE1pbm9yVmVyc2lvbih2bS5hY3Rpdml0eVJvb3QuZW5yb2xtZW50VmVyc2lvbik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgX3VwZGF0ZUluZm9WYWx1ZXMoKTtcclxuICAgICAgICAgICAgcmV0dXJuIHZtLmFjdGl2aXR5U2VydmljZS50cmFuc2Zvcm1Ub0ZpbGVPYmoodm0uYWN0aXZpdHlSb290KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZtLnVwZGF0ZUFjdGl2aXR5VHlwZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgLy92bS5hY3Rpdml0eVJvb3QucmVnQWN0aXZpdHlUeXBlXHJcbiAgICAgICAgICAgIGlmICh2bS5hY3Rpdml0eVNlcnZpY2UuaXNOb3RpZmlhYmxlQ2hhbmdlKHZtLmFjdGl2aXR5Um9vdC5yZWdBY3Rpdml0eVR5cGUuaWQpKSB7XHJcbiAgICAgICAgICAgICAgICB2bS5hY3Rpdml0eVNlcnZpY2UucmVzZXRSYXRpb25hbGUoKTtcclxuICAgICAgICAgICAgICAgIHZtLmlzTm90aWZpYWJsZSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB2bS5pc1JhdGlvbmFsZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHZtLmFjdGl2aXR5U2VydmljZS5pc1JhdGlvbmFsZSh2bS5hY3Rpdml0eVJvb3QucmVnQWN0aXZpdHlUeXBlLmlkLCB2bS5hY3Rpdml0eVJvb3QucmVnQWN0aXZpdHlMZWFkKSkge1xyXG4gICAgICAgICAgICAgICAgdm0uaXNSYXRpb25hbGUgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgdm0uYWN0aXZpdHlTZXJ2aWNlLnJlc2V0Tm90aWZpYWJsZUNoYW5nZXMoKTtcclxuICAgICAgICAgICAgICAgIHZtLmlzTm90aWZpYWJsZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHZtLmFjdGl2aXR5U2VydmljZS5yZXNldE5vdGlmaWFibGVDaGFuZ2VzKCk7XHJcbiAgICAgICAgICAgICAgICB2bS5hY3Rpdml0eVNlcnZpY2UucmVzZXRSYXRpb25hbGUoKTtcclxuICAgICAgICAgICAgICAgIHZtLmlzTm90aWZpYWJsZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgdm0uaXNSYXRpb25hbGUgPSBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIF91cGRhdGVJbmZvVmFsdWVzKCkge1xyXG4gICAgICAgICAgICB2bS51cGRhdGVWYWx1ZXMrKztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgICRzY29wZS4kd2F0Y2goXCJtYWluLmFjdGl2aXR5RW5yb2xGb3JtLiR2YWxpZFwiLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGRpc2FibGVYTUxTYXZlKClcclxuICAgICAgICB9LCB0cnVlKTtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZGlzYWJsZVhNTFNhdmUoKSB7XHJcblxyXG4gICAgICAgICAgICB2bS5kaXNhYmxlWE1MID0gdm0uYWN0aXZpdHlFbnJvbEZvcm0uJGludmFsaWQgfHwgKHZtLmFjdGl2aXR5Um9vdC5hcHBsaWNhdGlvblR5cGUgPT0gdm0uYXBwbGljYXRpb25JbmZvU2VydmljZS5nZXRBcHByb3ZlZFR5cGUoKSAmJiB2bS5pc0V4dGVybigpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGRpc2FibGVKU09OU2F2ZSgpIHtcclxuXHJcbiAgICAgICAgICAgIHZtLmRpc2FibGVKc29uID0gKHZtLmFjdGl2aXR5Um9vdC5hcHBsaWNhdGlvblR5cGUgPT0gdm0uYXBwbGljYXRpb25JbmZvU2VydmljZS5nZXRBcHByb3ZlZFR5cGUoKSAmJiB2bS5pc0V4dGVybigpKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gX3NldENvbXBsZXRlKCkge1xyXG4gICAgICAgICAgICB2bS5pc0luY29tcGxldGUgPSAhdm0uYWN0aXZpdHlSb290LmRzdHNDb250cm9sTnVtYmVyO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gX2xvYWRGaWxlQ29udGVudChmaWxlQ29udGVudCkge1xyXG4gICAgICAgICAgICBpZiAoIWZpbGVDb250ZW50KXJldHVybjtcclxuICAgICAgICAgICAgdm0uYWN0aXZpdHlTZXJ2aWNlID0gbmV3IEFjdGl2aXR5U2VydmljZSgpO1xyXG4gICAgICAgICAgICB2YXIgcmVzdWx0SnNvbiA9IGZpbGVDb250ZW50Lmpzb25SZXN1bHQ7XHJcbiAgICAgICAgICAgIGlmIChyZXN1bHRKc29uKSB7XHJcbiAgICAgICAgICAgICAgICB2bS5hY3Rpdml0eVNlcnZpY2UudHJhbnNmb3JtRnJvbUZpbGVPYmoocmVzdWx0SnNvbik7XHJcbiAgICAgICAgICAgICAgICB2bS5hY3Rpdml0eVJvb3QgPSB7fTtcclxuICAgICAgICAgICAgICAgIHZtLmFjdGl2aXR5Um9vdCA9IHZtLmFjdGl2aXR5U2VydmljZS5nZXRNb2RlbEluZm8oKTtcclxuICAgICAgICAgICAgICAgIF9zZXRDb21wbGV0ZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZtLnNob3dBbGxFcnJvcnMgPSB0cnVlO1xyXG4gICAgICAgICAgICBkaXNhYmxlWE1MU2F2ZSgpO1xyXG4gICAgICAgICAgICBkaXNhYmxlSlNPTlNhdmUoKTtcclxuICAgICAgICAgICAgdm0uc2V0VGhpcmRQYXJ0eSgpO1xyXG4gICAgICAgICAgICB2bS51cGRhdGVBY3Rpdml0eVR5cGUoKTtcclxuICAgICAgICAgICAgdm0uc2V0QWRtaW5TdWJtaXNzaW9uKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBuZ2RvYyBtZXRob2QgdG8gc2V0IHRoZSBhcHBsaWNhdGlvbiB0eXBlIHRvIGFtZW5kXHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBmdW5jdGlvbiBfc2V0QXBwbFR5cGVUb0FtZW5kKCkge1xyXG5cclxuICAgICAgICAgICAgdm0uYWN0aXZpdHlSb290LmFwcGxpY2F0aW9uVHlwZSA9IHZtLkFwcGxpY2F0aW9uSW5mb1NlcnZpY2UuZ2V0QW1lbmRUeXBlKCk7XHJcbiAgICAgICAgICAgIGRpc2FibGVYTUxTYXZlKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAbmdkb2MgbWV0aG9kIC11cGRhdGVzIHRoZSBkYXRlIGZpZWxkIHRvIHRoZSBjdXJyZW50IGRhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBmdW5jdGlvbiB1cGRhdGVEYXRlKCkge1xyXG4gICAgICAgICAgICBpZiAodm0uYWN0aXZpdHlSb290KSB7XHJcbiAgICAgICAgICAgICAgICB2bS5hY3Rpdml0eVJvb3QuZGF0ZVNhdmVkID0gdm0uYXBwbGljYXRpb25JbmZvU2VydmljZS5nZXRUb2RheURhdGUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQG5nZG9jIHJldHVybnMgaWYgYW4gZXh0ZXJuYWwgZm9ybVxyXG4gICAgICAgICAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHZtLmlzRXh0ZXJuID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdm0udXNlclR5cGUgPT0gXCJFWFRcIjtcclxuXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQG5nZG9jIG1ldGhvZCB3aGVuIGEgZm9ybSBnZXRzIGFwcHJvdmVkXHJcbiAgICAgICAgICogcmVtb3ZlIGFueSBhbWVuZG1lbnQgY2hlY2tib3hlc1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGZ1bmN0aW9uIHVwZGF0ZU1vZGVsT25BcHByb3ZhbCgpIHtcclxuICAgICAgICAgICAgLy9yZXNldCBhbnkgYW1lbmQgc2VsZWN0aW9uc1xyXG4gICAgICAgICAgICBpZiAoIXZtLmFjdGl2aXR5Um9vdCkgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgaWYgKHZtLmFjdGl2aXR5Um9vdC5jb250YWN0UmVjb3JkKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHZtLmFjdGl2aXR5Um9vdC5jb250YWN0UmVjb3JkLmxlbmd0aDsgaisrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdm0uYWN0aXZpdHlSb290LmNvbnRhY3RSZWNvcmRbal0uYW1lbmQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdm0uY2xvc2VBbGVydCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICBzd2l0Y2ggKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlICcxJzpcclxuICAgICAgICAgICAgICAgICAgICB2bS5hbGVydDEuc2hvdyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnMic6XHJcbiAgICAgICAgICAgICAgICAgICAgdm0uYWxlcnQyLnNob3cgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJzMnOlxyXG4gICAgICAgICAgICAgICAgICAgIHZtLmFsZXJ0My5zaG93ID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2bS5hZGRJbnN0cnVjdCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG5cclxuICAgICAgICAgICAgc3dpdGNoICh2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnMSc6XHJcbiAgICAgICAgICAgICAgICAgICAgdm0uYWxlcnQxLnNob3cgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnMic6XHJcbiAgICAgICAgICAgICAgICAgICAgdm0uYWxlcnQyLnNob3cgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnMyc6XHJcbiAgICAgICAgICAgICAgICAgICAgdm0uYWxlcnQzLnNob3cgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH1cclxuICAgIH1cclxufSkoKTtcclxuXHJcbiIsIlxyXG4vKipcclxuICogQ3JlYXRlZCBieSBka2lsdHkgb24gOC8yOS8yMDE2LlxyXG4gKi9cclxuXHJcbihmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ2FjdGl2aXR5Q2hhbmdlJywgW10pXHJcbn0pKCk7XHJcblxyXG4oZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKCdhY3Rpdml0eUNoYW5nZScpXHJcbiAgICAgICAgLmNvbXBvbmVudCgnY21wQWN0aXZpdHlDaGFuZ2UnLCB7XHJcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnYXBwL3NjcmlwdHMvY29tcG9uZW50cy9hY3Rpdml0eUNoYW5nZVR5cGUvdHBsLWFjdGl2aXR5LWNoYW5nZV8yMDE3MDEyNF8xMjI3Lmh0bWwnLFxyXG4gICAgICAgICAgICBjb250cm9sbGVyOiBhY3Rpdml0eUNoYW5nZUN0cmwsXHJcbiAgICAgICAgICAgIGNvbnRyb2xsZXJBczogJ2FjdENoYW5nZUN0cmwnLFxyXG5cclxuICAgICAgICAgICAgYmluZGluZ3M6IHtcclxuICAgICAgICAgICAgICAgIGFjdGl2aXR5UmVjb3JkOiAnPCcsXHJcbiAgICAgICAgICAgICAgICBpc1JlcXVpcmVkOiAnPCcsXHJcbiAgICAgICAgICAgICAgICBzaG93RXJyb3JzOiBcIiZcIlxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgIC8vIGFjdGl2aXR5Q2hhbmdlQ3RybC4kaW5qZWN0ID0gW107XHJcblxyXG4gICAgZnVuY3Rpb24gIGFjdGl2aXR5Q2hhbmdlQ3RybCgpIHtcclxuICAgICAgICB2YXIgdm0gPSB0aGlzO1xyXG4gICAgICAgIHZtLnJlY29yZD17fTtcclxuICAgICAgICB2bS5yYXRpb25hbGVTZWxlY3RlZCA9IFwiXCI7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAcGFyYW0gY2hhbmdlc1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHZtLiRvbkNoYW5nZXMgPSBmdW5jdGlvbiAoY2hhbmdlcykge1xyXG4gICAgICAgICAgICBpZiAoY2hhbmdlcy5hY3Rpdml0eVJlY29yZCkge1xyXG4gICAgICAgICAgICAgICAgdm0ucmVjb3JkID0gY2hhbmdlcy5hY3Rpdml0eVJlY29yZC5jdXJyZW50VmFsdWU7XHJcbiAgICAgICAgICAgICAgICB2bS51cGRhdGVFcnJvclN0YXRlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGNoYW5nZXMuaXNSZXF1aXJlZCkge1xyXG4gICAgICAgICAgICAgICAgdm0ucmVxdWlyZWRTdGF0ZSA9IGNoYW5nZXMuaXNSZXF1aXJlZC5jdXJyZW50VmFsdWU7XHJcbiAgICAgICAgICAgICAgICB2bS51cGRhdGVFcnJvclN0YXRlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIHZtLnNob3dFcnJvcj1mdW5jdGlvbihpc1RvdWNoZWQsaXNJbnZhbGlkKXtcclxuICAgICAgICAgICAgaWYgKChpc0ludmFsaWQgJiYgaXNUb3VjaGVkKSB8fCAodm0uc2hvd0Vycm9ycygpICYmIGlzSW52YWxpZCApKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZtLnVwZGF0ZUVycm9yU3RhdGUgPSBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgICAgICBpZiAodm0ucmVjb3JkLnRleHRMYWJlbENoYW5nZSB8fCB2bS5yZWNvcmQuZHJ1Z1N1YnN0YW5jZUNoYW5nZVxyXG4gICAgICAgICAgICAgICAgfHwgdm0ucmVjb3JkLmZvcm11bGF0aW9uQ2hhbmdlXHJcbiAgICAgICAgICAgICAgICB8fCB2bS5yZWNvcmQuc3BlY2lmaWNhdGlvbkNoYW5nZVxyXG4gICAgICAgICAgICAgICAgfHwgdm0ucmVjb3JkLmV4cGlyeVN0b3JhZ2VDaGFuZ2VcclxuICAgICAgICAgICAgICAgIHx8IHZtLnJlY29yZC5tYW51ZmFjdE1ldGhvZENoYW5nZVxyXG4gICAgICAgICAgICAgICAgfHwgdm0ucmVjb3JkLmNvbnRhaW5lclNpemVDaGFuZ2VcclxuICAgICAgICAgICAgICAgIHx8IHZtLnJlY29yZC5wYWNrYWdpbmdTcGVjQ2hhbmdlXHJcbiAgICAgICAgICAgICAgICB8fCB2bS5yZWNvcmQucGFja2FnaW5nTWF0ZXJpYWxzQ2hhbmdlXHJcbiAgICAgICAgICAgICAgICB8fCB2bS5yZWNvcmQub3RoZXJDaGFuZ2VEZXRhaWxzXHJcbiAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgdm0ucmF0aW9uYWxlU2VsZWN0ZWQgPSBcInZhbHVlXCJcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHZtLnJhdGlvbmFsZVNlbGVjdGVkID0gXCJcIlxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdm0uc2hvd0Vycm9yTWlzc2luZyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKCF2bS5yZXF1aXJlZFN0YXRlKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHZtLnJhdGlvbmFsZVNlbGVjdGVkKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICgoIXZtLm5vdGlmQ2hhbmdlRm9ybS4kcHJpc3RpbmUgJiYgdm0ubm90aWZDaGFuZ2VGb3JtLiRpbnZhbGlkKSB8fCAoIHZtLnNob3dFcnJvcnMoKSAmJiB2bS5ub3RpZkNoYW5nZUZvcm0uJGludmFsaWQpXHJcbiAgICAgICAgICAgICAgICB8fCAodm0ubm90aWZDaGFuZ2VGb3JtLiR0b3VjaGVkICYmIHZtLm5vdGlmQ2hhbmdlRm9ybS4kaW52YWxpZCkpXHJcbiAgICAgICAgICAgIC8qIGlmKCB2bS5ub3RpZkNoYW5nZUZvcm0uJGludmFsaWQpKi9cclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgfVxyXG59KSgpOyJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==

!function(){"use strict";function MainController($translate,getCountryAndProvinces){var vm=this;vm.formType="INT"}angular.module("dossierApp",["pascalprecht.translate","dossierLoadModule","dossierModule","dataLists","translations"]).controller("MainController",MainController),MainController.$inject=["$translate","getCountryAndProvinces"]}(),function(){"use strict";angular.module("dossierApp").config(["$translateProvider",function($translateProvider){$translateProvider.directivePriority(1),$translateProvider.preferredLanguage("en"),$translateProvider.useLoader("customLoad"),$translateProvider.useSanitizeValueStrategy(null),$translateProvider.forceAsyncReload(!0)}])}(),angular.module("translations",[]).config(["$translateProvider",function($translateProvider){$translateProvider.translations("en",{AEROSOL:"Areosol",BOLUS:"Bolus",CAPSULE:"Capsule",CAPSULE_DELAYED_RELEASE:"Capsule, Delayed Release",CAPSULE_EXTENDED_RELEASE:"Capsule, Delayed Release",CREAM:"Cream",EMULSION:"Emulsion",GAS:"Gas",GEL:"Gel",IMPLANT:"Implant",LOTION:"Lotion",LOZENGE:"Lozenge",OINTMENT:"Ointment",PATCH:"Patch",PATCH_EXTENDED_RELEASE:"Patch Extended-Release",POWDER:"Powder",POWDER_FOR_SOLUTION:"Powder for Solution",POWDER_FOR_SUSPENSION:"Powder for Suspension",SHAMPOO:"Shampoo",SOLUTION:"Solution",SPRAY:"Spray",SPRAY_BAG_ON_VALVE:"Spray, Bag-On-Valve",SPRAY_METERED_DOSE:"Spray, Metered Dose",STICK:"Stick",STRIP:"Strip",SUPPOSITORY:"Suppository",SUSPENSION:"Suspension",SYRUP:"Syrup",TABLET:"Tablet",TABLET_CHEWABLE:"Tablet, Chewable",TABLET_DELAYED_RELEASE:"Tablet, Delayed Release",TABLET_EXTENDED_RELEASE:"Tablet, Extended Release",TABLET_ORALLY_DISINTEGRATING:"Tablet, Orally Disintegrating",WIPE:"Wipe"}),$translateProvider.translations("fr",{AEROSOL:"Aérosol",BOLUS:"Bol",CAPSULE:"Capsule",CAPSULE_DELAYED_RELEASE:"Capsule (à libération retardée)",CAPSULE_EXTENDED_RELEASE:"Capsule (à libération prolongée)",CREAM:"Crème",EMULSION:"Émulsion",GAS:"Gaz",GEL:"Gel",IMPLANT:"Implant",LOTION:"Lotion",LOZENGE:"Pastille",OINTMENT:"Pommade",PATCH:"Timbre",PATCH_EXTENDED_RELEASE:"Timbre (à libération prolongée)",POWDER:"Poudre",POWDER_FOR_SOLUTION:"Poudre pour solution",POWDER_FOR_SUSPENSION:"Poudre pour suspension",SHAMPOO:"Shampoing",SOLUTION:"Solution",SPRAY:"Pulvérisation",SPRAY_BAG_ON_VALVE:"Pulvérisation, sac-sur-valve",SPRAY_METERED_DOSE:"Pulvérisation, à dose mesurée",STICK:"Bâton",STRIP:"Bandelette",SUPPOSITORY:"Suppositoire",SUSPENSION:"Suspension",SYRUP:"Sirop",TABLET:"Comprimé",TABLET_CHEWABLE:"Comprimé (à croquer)",TABLET_DELAYED_RELEASE:"Comprimé (à libération retardée)",TABLET_EXTENDED_RELEASE:"Comprimé (à libération prolongée)",TABLET_ORALLY_DISINTEGRATING:"Comprimé (à désintégration orale)",WIPE:"Serviette"}),$translateProvider.translations("en",{LOAD_DOSSIER:"Load a Dossier Enrolment File",DOSSIER_HDING:"Regulatory Dossier Enrolment",INGRED_LIST:"Ingredients List",INGRED_NAME:"Ingredient Name",SOURCED:"Source From",HUMAN:"Human",ANIMAL:"Animal",TISSUES_ORIGIN:"Tissues or fluids of Origin",ADD_PRODUCT:"Add Product",AMEND_REF:"Amend Canadian Reference Product",BRAND_NAME:"Brand Name",MEDICINAL_INGREDIENT:" Medicinal Ingredient",STRENGTH:"Strength(s)",DOSAGE_FORM:"Dosage Form",DOSAGE_FORM_OTHER:"Dosage Form Other Details",CDN_REF_PRODUCT:" Canadian Reference Product",COMPANY_NAME:"Company Name",COUNTRY_NAME:"Country Name",SAVE:"Save",CANCEL:"Cancel",DELETE:"Delete",SCHED_A:"Schedule A Claims",DIN_FULL:"Drug Identification Number (DIN)",THERA_CLASS:"Therapeutic Classifications",THERA_CLASS_ADD:"Add Therapeutic Classification",THERA_CLASS_NAME:"Therapeutic Classification Name",PROPNAME:"Brand or Proprietary or Product Name (should be the same as the brand name on the product label)",DRUG_PRODUCT:"Drug Product Formulation Information",SIGNED_THIRD:"The submission will be signed or filled by a third party on behalf of the manufacturer or sponsor",INCLUDE_AUTH:"Please include the Third Party Authorization letter in the REP folder when submitting via the  Common Electonic Submissions Gateway (CESG)",RELATED_DOSSIER:"Related Dossier ID [if applicable]",PROPER_NAME:"Proper, Common or Non-Proprietary Name",DRUG_USE:"Drug Use",DELETE_CLASS:"Delete Classification",SOURCED_ANIMAL:"Provide the animal types used for this ingredient",SPECIFY:"Please specify",DETAILS:"Details",REF_PRODUCTS:"Canadian Reference Product(s)",RADIOPHARM:"Radiopharmaceutical",VETERINARY:"Veterinary",DISINFECTANT:"Disinfectant",ADD_A:"Add a ",COUNTRY_MAN:"Country of Manufacture",DELETE_COUNTRY:"Delete Country",ADD_CRP:"Add Canadian Reference Product",IS_CDN_REF:"Are there Canadian Reference Products?",DOSSIER_TYPE:"Dossier Type",INGRED_MAT_NAME:"Ingredient or Material Name",HELP_DOSSIER:"Dossier Instructions",HELP_DRUG_PRODUCT:"Drug Product Instructions"}),$translateProvider.translations("fr",{LOAD_DOSSIER:"fr_Load a Dossier Enrolment File",DOSSIER_HDING:"fr_Regulatory Dossier Enrolment",INGRED_LIST:"Ingredients List",INGRED_NAME:"Ingredient Name",SOURCED:"Source From",HUMAN:"Human",ANIMAL:"Animal",TISSUES_ORIGIN:"Tissues or fluids of Origin",ADD_PRODUCT:"fr_Add Product",AMEND_REF:"fr_Amend Canadian Reference Product",BRAND_NAME:"Marque nominative",MEDICINAL_INGREDIENT:"Ingrédient Médicinaux",STRENGTH:"Concentration",DOSAGE_FORM:"Forme posologique",DOSAGE_FORM_OTHER:"Dosage Form Other Details",CDN_REF_PRODUCT:" Canadian Reference Product",COMPANY_NAME:"Nom du fabricant ou promoteur",COUNTRY_NAME:"fr_Country Name",SAVE:"fr_Save",CANCEL:"fr_Cancel",DELETE:"fr_Delete",SCHED_A:"fr_Schedule A Claims",DIN_FULL:"fr_Drug Identification Number (DIN)",THERA_CLASS:"fr_Therapeutic Classification(s)",THERA_CLASS_ADD:"fr_Add Therapeutic Classification",THERA_CLASS_NAME:"fr_Therapeutic Classification Name",PROPNAME:"fr_Brand or Proprietary or Product Name (should be the same as the brand name on the product label)",DRUG_PRODUCT:"fr_Drug Product Formulation Information",SIGNED_THIRD:"fr_The submission will be signed or filled by a third party on behalf of the manufacturer or sponsor",INCLUDE_AUTH:"fr_Please include the Third Party Authorization letter in the REP folder when submitting via the  Common Electonic Submissions Gateway (CESG)",RELATED_DOSSIER:"fr_Related Dossier ID [if applicable]",PROPER_NAME:"fr_Proper, Common or Non-Proprietary Name",DRUG_USE:"fr_Drug Use",SCHED_A:"fr_This is a non-prescription drug to which one or more Schedule A claims apply",SOURCED_ANIMAL:"fr_Provide the animal types used for this ingredient",SPECIFY:"fr_Please specify the Other",DETAILS:"fr_Details",REF_PRODUCTS:"fr_Canadian Reference Product(s)",DELETE_CLASS:"fr_Delete Classification",ADD_A:"fr_Add a ",COUNTRY_MAN:"fr_Country of Manufacture",DELETE_COUNTRY:"fr_Delete Country",ADD_CRP:"fr_Add Canadian Reference Product",IS_CDN_REF:"fr_Are there Canadian Reference Products?",DOSSIER_TYPE:"fr_Dossier Type",INGRED_MAT_NAME:"fr_Ingredient or Material Name",HELP_DOSSIER:"fr_Dossier Instructions",HELP_DRUG_PRODUCT:"fr_Drug Product Instructions"}),$translateProvider.translations("en",{Y:"Yes",N:"No",UNK:"Unknown",REQUIRED:"(required)",DOSSIER_NUMBER:"Dossier ID",SAVE:"Save",CANCEL:"Cancel",DELETE:"Delete",EDIT:"Edit",CAN_REF_PRODUCTS:"Canadian Reference Products",PROD_NAME:"Product Name"}),$translateProvider.translations("fr",{Y:"Oui",N:"Non",UNK:"Inconnu",REQUIRED:"(requis)",DOSSIER_ID:"fr_Dossier ID",SAVE:"fr_Save",CANCEL:"fr_Cancel",DELETE:"fr_Delete",EDIT:"fr_Edit",CAN_REF_PRODUCTS:"fr_Canadian Reference Products",PROD_NAME:"fr_Product Name"}),$translateProvider.translations("en",{MSG_APP4_TYPE:"At least one source must be selected",MSG_ERR_ONE_SYSTEM:"At least one tissue or fluid of origin must be selected",MSG_ERR_ONE_ANIMAL:"At least one animal source must be selected",MSG_ERR_ONE_ANIMAL_TYPE:"At least one animal type must be selected",MSG_ERR_DRUG_USE:"At least one drug use must be selected",MSG_ONE_SCHEDA:"At least one disease or disorder must be selected",MSG_IS_REQUIRED:"is a required field.",MSG_ERR_INVALID_NUM:"This is not a valid number.",MSG_ERR_ONE_ACTIVE:"At least one active ingredient is required.",MSG_ERR_ONE_FORMULATION:"At least one formulation is required.",MSG_ERR_ONE_MANCOUNTRY:"At least one country of manufacture is required",MSG_ERR_ONE_ROA:"At least one route of administation is required",MSG_ERR_ONE_THERA:"At least one therapeutic classification is required",MSG_ERR_ONE_COUNTRY:"At least one country of origin is required",MSG_ERR_ONE_ROA:"At least one Route of Administration is required",MSG_ERR_ONE_TISSUE:"At lease one Tissues of Fluids source is required",MSG_ERR_ONE_CNTRY_ORIGIN:"At least one Country of origin is required",MSG_ERR_ONE_CDN_REF:"At least one Canadian Reference product is required",MSG_ERR_INVALID_NUM_MIN:"The value must be greater than -273",MSG_ERR_INVALID_NUM_MAX:"The value must be less than 999",MSG_ERR_INVALID_NUM_MIN0:"The value must be greater than 0",MSG_TISSUE_SYS_USED:"This system has been already been selected, please select another."}),$translateProvider.translations("fr",{MSG_APP4_TYPE:"fr_At least one source must be selected",MSG_ERR_ONE_SYSTEM:"fr_At least on tissue or fluid of origin must be selected",MSG_ERR_ONE_ANIMAL:"fr_At least one animal source must be selected",MSG_ERR_ONE_ANIMAL_TYPE:"fr_At least one animal type must be selected.",MSG_ERR_DRUG_USE:"fr_At least one drug use must be selected.",MSG_ONE_SCHEDA:"fr_At least one disease or disorder must be selected.",MSG_IS_REQUIRED:"fr_is a required field.",MSG_ERR_INVALID_NUM:"Veuillez fournir un numéro valide.",MSG_ERR_ONE_ACTIVE:"fr_At least one active ingredient is required.",MSG_ERR_ONE_FORMULATION:"fr_At least one formulation is required.",MSG_ERR_ONE_MANCOUNTRY:"fr_At least one country of manufacture is required",MSG_ERR_ONE_ROA:"fr_At least one route of administation is required",MSG_ERR_ONE_THERA:"fr_At least one therapeutic classification is required",MSG_ERR_ONE_COUNTRY:"fr_At least one country of origin is required",MSG_ERR_ONE_ROA:"fr_At least one Route of Administration is required",MSG_ERR_ONE_TISSUE:"fr_At lease one Tissues of Fluids source is required",MSG_ERR_ONE_CNTRY_ORIGIN:"fr_At least one Country of origin is required",MSG_ERR_ONE_CDN_REF:"fr_At least one Canadian Reference product is required",MSG_ERR_INVALID_NUM_MIN:"fr_The value must be greater than -273",MSG_ERR_INVALID_NUM_MAX:"fr_The value must be less than 999",MSG_ERR_INVALID_NUM_MIN0:"fr_The value must be greater than 0",MSG_TISSUE_SYS_USED:"fr_This system has been already been selected, please select another."}),$translateProvider.translations("en",{NERVOUS_SYSTEM:"Nervous System",BRAIN:"brain",BRAINSTEM:"brain stem",CEREBELLUM:"cerebellum",CEROFLUID:"cerebrospinal fluid",CEROFLUID:"cerebrospinal fluid",DORSALROOT:"dorsal root ganglia",DURAMATER:"dura mater",HYPOTHALAMUS:"hypothalamus",RETINA:"retina or optic nerve",SPINALCORD:"spinal cord",TRIGEMINAL:"trigerminal ganglia",NERVOUS_OTHER:"other nervous system",DIGESTIVE_SYSTEM:"Digestive",APPENDIX:"appendix",BILE:"bile",DISTALILEUM:"distal ileum",LARGEINTEST:"large intestine",SALIVA:"saliva or salivary gland",SMALLINTESTINE:"small intestine other than distal ileum",STOMACH:"stomach",DIGESTIVE_OTHER:"other digestive system",REPRODUCT_SYSTEM:"Reproductive",MILK:"milk or milk products",KIDNEY:"kidney",COLOSTRUM:"colostrum",MAMMARY:"mammary glands",OVARIES:"ovaries",PLACENTA:"placenta",PLACENTAFLUID:"placental fluid",SEMEN:"semen",TESTES:"testes",URINE:"urine",REPROD_OTHER:"other reproductive system",CARDIO_SYSTEM:"Cardio-Respiratory",HEART:"Heart or pericardium",LUNG:"lung",NASALFLUID:"nasal fluid",TRACHEA:"trachea",PLACENTALFLUID:"placental fluid",CARDIO_OTHER:"other cardio-respiratory system",IMMUNE_SYSTEM:"Immune",LYMPH:"lymph nodes",SPLEEN:"spleen",THYMUS:"thymus",TONSILS:"tonsils",IMMUNE_OTHER:"other immune system",SKINGLAND_SYSTEM:"Skin and Glandular",ADRENAL:"adrenal gland or tissue",HAIR:"hair, feathers, hooves",LIVER:"liver",PANCREAS:"pancreas",PITUARYGLAND:"pituitary gland",SKINHIDES:"skin or hides",THYROID:"thyroid or parathyroid",SKIN_OTHER:"other skin or glandular system",MUSCULO_SYSTEM:"Musculo-Skeletal",ABDOMEN:"abdomen",SKULL:"skull",BONES:"bones other than vertebral column or skull",COLLAGEN:"collagen",TENDONS:"tendons or ligaments",VERTEBRALCOLUMN:"vertebral column",MUSCLE:"muscle",MUSCLE_OTHER:"other musculo-skeletal system",OTHERTISSUE_SYSTEM:"Other Tissues or Fluids",ADIPOSE:"adipose or omentum",ASCITES:"acscites",ANTLERV:"antler velvet",SERUM:"serum",WHOLEBLOOD:"whole blood",PLASMA:"plasma",EMBRYONICTISS:"embryonic tissue",FETALTISS:"fetal tissue",BONEMARROW:"bone marrow",EYESCORNEA:"eyes or cornea",GALL:"gall bladder",FLUIDS_OTHER:"other types of tissues or fluids",NONHUMANPRIMATE_TYPE:"Non-human primate type",AQUATIC_TYPE:"Aquatic species such as fish, molluscs and crustacean",AVIAN_TYPE:"Avian such as chicken, turkey and duck",BOVINE_TYPE:"Bovine such as cattle, bison type",CANINE_TYPE:"Canine type",CAPRINE_TYPE:"Caprine such as goat type",CERVIDAE_TYPE:"Cervidae such as deer, elk(wapiti) and moose type",EQUINE_TYPE:"Equine such as horse type",FELINE_TYPE:"Feline such as cat type",OVINE_TYPE:"Ovine type",PORCINE_TYPE:"Porcine such as pig type",RODENT_TYPE:"Rodents such as mouse, hamster, rat and rabbit type",OTHERANIMAL_TYPE:"Other animal type",CONTROLLEDPOP:"Controlled Population",BIOTECHDERIVED:"Biotechnology Derived Animal",CELLLINE:"Cell line",AGEANIMALS:"Age of animals in months",COUNTRYORIGIN:"Country of origin",SPECIFY_THE:"Specify the other ",HUMAN_ANIMAL_SOURCE:"Human / Animal Sourced?",APPENDIX4:"Animal / Human Sourced",MISSING_APPENDIX:"Missing Animal / Human Sourced Ingredients",UNKNOWN_COUNTRY_DETAILS:"Unknown Country Details",ING_DETAILS:"Human / Animal Sourced Record",ANIMAL_TYPE_LBL:"Animal Type Details",ANIMAL_TYPE:"Animal Type",ANIMAL_DETAILS:"Provide the animal type description",ANIMAL_SOURCE:"Animal Source",ANIMAL_TYPE_DETAILS:"Animal Type Details",ANIMAL_SRCS:"Animal Sources",ANIMAL_CTRIES_ORIGIN:"Animal Countries of Origin",ANIMAL_SRC_ADD:"Add Animal Source",TISSUES_FLUIDS_LBL:"Tissues or Fluids Details",SYSTEM_TYPE:"System",SYSTEM_DETAILS:"System Details",SYSTEM_OTHER:"Other Details",TISSUES_FLUIDS_ADD:"Add Tissues or Fluids",TISSUES_FLUIDS_SRCS:"Tissues or Fluids sources",TISSUE_FLUID:"Tissue or Fluid",ANIMAL_SRC:"Animal Source",EXTRA_APPENDIX:"Human / Animal Sourced Records not Referenced in any Formulation",CARDIO_LEGEND:"Select one or more Cardio-Respiratory System selections",NERVOUS_LEGEND:"Select one or more Nervous System selections",OTHER_LEGEND:"Select one or more Other System selections",IMMUNE_LEGEND:"Select one or more Immune System selections",DIGESTIVE_LEGEND:"Select one or more Digestive System selections",REPRODUCTIVE_LEGEND:"Select one or more Reproductive System selections",MUSCLE_LEGEND:"Select one or more Musculo-Skeletal System selections",SKIN_LEGEND:"Select one or more Skin and Glandular System selections",CARDIO_DETAILS:"Other cardio-respiratory system  details",DIGESTIVE_DETAILS:"Other digestive system  details",IMMUNE_DETAILS:"Other immune system  details",MUSCLE_DETAILS:"Other musculo-akeletal system  details",NERVOUS_DETAILS:"Other nervous system  details",OTHERTISS_DETAILS:"Other tissue details",REPRODUCTIVE_DETAILS:"Other reproductive system details",SKIN_DETAILS:"Other skin and glandular system details",ADD_SOURCED:"Add Sourced Ingredient",DELETE_SOURCED:"Delete Sourced Ingredient"}),$translateProvider.translations("fr",{NERVOUS_SYSTEM:"fr_Nervous System",BRAIN:"Cerveau",BRAINSTEM:"Tronc cérébral",CEREBELLUM:"Cervelet",CEROFLUID:"Liquide céphalorachidien (LCR)",DORSALROOT:"Ganglion de la racine dorsale",DURAMATER:"Dure-mère",HYPOTHALAMUS:"Hypothalamus",RETINA:"Moelle épinière",SPINALCORD:"Moelle épinière",TRIGEMINAL:"Ganglion de Gasser",NERVOUS_OTHER:"Veuillez spécifier le système nerveux",DIGESTIVE_SYSTEM:"Système digestif",APPENDIX:"Appendice",BILE:"Bile",DISTALILEUM:"Iléon distal",LARGEINTEST:"Gros intestin",SALIVA:"Salive ou glande salivaire",SMALLINTESTINE:"Intestin grêle, autre que l’iléon distal",STOMACH:"Estomac",DIGESTIVE_OTHER:"Veuillez spécifier le système digestif",REPRODUCT_SYSTEM:"Systèmes reproductif et urinaire",MILK:"Lait ou Produits laitiers",KIDNEY:"Reins",COLOSTRUM:"Reins",MAMMARY:"Glandes mammaires",OVARIES:"Ovaires",PLACENTA:"Placenta",PLACENTAFLUID:"Fluide du placenta",SEMEN:"Sperme",TESTES:"Testicules",URINE:"Testicules",REPROD_OTHER:"Veuillez spécifier le système reproducteur",CARDIO_SYSTEM:"Système cardio-respiratoire",HEART:"Cœur ou péricarde",LUNG:"Cœur/péricarde",NASALFLUID:"Fluide nasal",TRACHEA:"Trachée",PLACENTALFLUID:"Fluide du placenta",CARDIO_OTHER:"Veuillez spécifier le système cardiorespiratoire",IMMUNE_SYSTEM:"Système immunitaire",LYMPH:"Ganglions lymphatiques",SPLEEN:"Rate",THYMUS:"Thymus",TONSILS:"Amygdales","IMMUNE_OTHER ":"Veuillez spécifier le système immunitaire",SKINGLAND_SYSTEM:"Peau et système glandulaire",ADRENAL:"Glande ou tissu surrénalien",HAIR:"Cheveu, plumes, sabots",LIVER:"Foie",PANCREAS:"Pancréas",PITUARYGLAND:"Hypophyse",SKINHIDES:"Peau ou cuirs",THYROID:"Thyroïde ou parathyroïde",SKIN_OTHER:"Veuillez spécifier la peau ou le système glandulaire",ABDOMEN:"Abdomen",SKULL:"Crâne",BONES:"Os autre que la colonne vertébrale et le crâne",COLLAGEN:"Collagène",TENDONS:"Tendons ou ligaments",VERTEBRALCOLUMN:"Colonne vertébrale",MUSCLE:"Colonne vertébrale",MUSCLEDETAIL:"Veuillez spécifier le système musculosquelettique",OTHERTISSUE_SYSTEM:"Autres tissus ou fluides",ADIPOSE:"Veuillez spécifier les tissus adipeux ou épiploon",ASCITES:"Ascite",ANTLERV:"Velours de cervidé",SERUM:"Sérum",WHOLEBLOOD:"Sang entier",PLASMA:"Plasma",EMBRYONICTISS:"Tissu embryonnaire",FETALTISS:"Tissu fœtal",BONEMARROW:"Moelle osseuse",EYESCORNEA:"Yeux ou cornée",GALL:"Vésicule biliaire",FLUIDS_OTHER:"Veuillez spécifier les autres types de tissus ou de fluides d'origine",NONHUMANPRIMATE_TYPE:"fr_Non-human primate type",AQUATIC_TYPE:"fr_Aquatic species such as fish, molluscs and crustacean",AVIAN_TYPE:"fr_Avian such as chicken, turkey and duck",BOVINE_TYPE:"fr_Bovine such as cattle, bison type",CANINE_TYPE:"fr_Canine type",CAPRINE_TYPE:"fr_Caprine such as goat type",CERVIDAE_TYPE:"fr_Cervidae such as deer, elk(wapiti) and moose type",EQUINE_TYPE:"fr_Equine such as horse type",FELINE_TYPE:"fr_Feline such as cat type",OVINE_TYPE:"fr_Ovine type",PORCINE_TYPE:"fr_Porcine such as pig type",RODENT_TYPE:"fr_Rodents such as mouse, hamster, rat and rabbit type",OTHERANIMAL_TYPE:"fr_Other animal type",CONTROLLEDPOP:"fr_Controlled Population",BIOTECHDERIVED:"fr_Biotechnology Derived Animal",CELLLINE:"fr_Cell line",AGEANIMALS:"fr_Age of animals in months",COUNTRYORIGIN:"fr_Country of origin",SPECIFY_THE:"Spécifiez l'autre",MISSING_APPENDIX:"fr_Missing Animal / Human Sourced Ingredients",UNKNOWN_COUNTRY_DETAILS:"fr_Unknown Country Details",ING_DETAILS:"fr_Human / Animal Source Record",APPENDIX4:"fr_Animal / Human Sourced",ANIMAL_TYPE_LBL:"fr_Animal Type Details",ANIMAL_TYPE:"fr_Animal Type",ANIMAL_DETAILS:"fr_Provide the animal type description",ANIMAL_SOURCE:"fr_Animal Source",ANIMAL_TYPE_DETAILS:"fr_Animal Type Details",ANIMAL_SRCS:"fr_Animal Sources",ANIMAL_CTRIES_ORIGIN:"fr_Animal Countries of Origin",ANIMAL_SRC_ADD:"fr_Add Animal Source",TISSUES_FLUIDS_LBL:"fr_Tissues or Fluids Details",SYSTEM_TYPE:"fr_System",SYSTEM_DETAILS:"fr_System Details",SYSTEM_OTHER:"fr_Other Details",TISSUES_FLUIDS_ADD:"fr_Add Tissues or Fluids",TISSUES_FLUIDS_SRCS:"fr_Tissues or Fluids sources",ANIMAL_SRC:"fr_Animal Source",EXTRA_APPENDIX:"fr_Human / Animal Sourced Records not Referenced in any Formulation",CARDIO_DETAILS:"fr_Other cardio-respiratory system  details",DIGESTIVE_DETAILS:"fr_Other digestive system  details",IMMUNE_DETAILS:"fr_Other immune system  details",MUSCLE_DETAILS:"fr_Other musculo-akeletal system  details",NERVOUS_DETAILS:"fr_Other nervous system  details",OTHERTISS_DETAILS:"fr_Other tissue details",REPRODUCTIVE_DETAILS:"Other reproductive system details",SKIN_DETAILS:"fr_Other skin and glandular system details",ADD_SOURCED:"fr_Add Sourced Ingredient",DELETE_SOURCED:"fr_Delete Sourced Ingredient"}),$translateProvider.translations("en",{ACUTEALCOHOL:"Acute Alcholisum",ACUTEANXIETY:"Acute anxiety state",ACUTERESP:"Acute infectious respiratory syndromes",ACUTEINFLAM:"Acute inflammatory and debilitating arthiritis",ACUTEPSYCHOTIC:"Acute psychotic conditions",ADDICTION:"Addiction (except nicotine addiction)",ATERIOSCLEROSIS:"Ateriosclerosis",APPENDICITIS:"Appendicitis",ASTHMA:"Asthma",CANCER:"Cancer",HEARTCONGEST:"Congestive heart failure",CONVULSIONS:"Convulsions",DEMENTIA:"Dementia",DEPRESSION:"Depresssion",DIABETES:"Diabetes",GANGRENE:"Gangrene",GLAUCOMA:"Glaucoma",BLEEDINGDISORDERS:"Haematologic bleeding disorders",HEPATITIS:"Hepatitis",HYPERTENSION:"Hypertension",NAUSEAPREG:"Nausea and vomiting of pregnancy",OBESITY:"Obesity",RHEUMATICFEVER:"Rheumatic fever",SEPTICEMIA:"Septicemia",SEXDISEASE:"Sexually transmitted disease",STRANGHERNIA:"Strangulated hernia",THROMBOTICDISORDER:"Thrombotic and Embolic Disorder",THYROIDDISEASE:"Thyroid disease",UCLERGASTRO:"Ulcer of gastro-intestinal tract",SCHEDA_CLAIMS:"Please list the schedule A Claims and Indications associated with this product",SCHEDA_DISEASE:"Please check the diseases and disorders that apply to the claims made (select at least one)",ISSCHEDA:"This is a non-prescription drug to which one or more Schedule A claims apply"}),$translateProvider.translations("fr",{ACUTEANXIETY:"État anxieux aigu",ACUTERESP:"Syndromes respiratoires infectieux aigus",ACUTEINFLAM:"Arthrite aiguë, inflammatoire et débilitante",ACUTEPSYCHOTIC:"Troubles psychotiques aigus",ADDICTION:"Dépendance (sauf la dépendance à la nicotine)",ATERIOSCLEROSIS:"Artériosclérose",APPENDICITIS:"Appendicite",ASTHMA:"Asthme",CANCER:"Cancer",HEARTCONGEST:"Insuffisance cardiaque congestive",CONVULSIONS:"Convulsions",DEMENTIA:"Démence",DEPRESSION:"Dépression",DIABETES:"Diabète",GANGRENE:"Gangrène",GLAUCOMA:"Glaucome",BLEEDINGDISORDERS:"Affections hématologiques hémorragiques",HEPATITIS:"Hépatite",HYPERTENSION:"Hypertension",NAUSEAPREG:"Nausées et vomissements liés à la grossesse",OBESITY:"Obésité",RHEUMATICFEVER:"Fièvre rhumatismale",SEPTICEMIA:"Septicémie",SEXDISEASE:"Maladies transmises sexuellement",STRANGHERNIA:"Hernie étranglée",THROMBOTICDISORDER:"Maladies thrombotiques et emboliques",THYROIDDISEASE:"Maladie thyroïdienne",UCLERGASTRO:"Ulcères des voies gastro-intestinales",SCHEDA_CLAIMS:"Indiquer les allégations et indications de l’annexe A associées avec ce produit",SCHEDA_DISEASE:"fr_Please check the diseases and disorders that apply to the claims made (select at least one)",ISSCHEDA:"Ce médicament en vente libre auquel une ou plusieurs allégations de l’annexe A s’appliquent"}),$translateProvider.translations("en",{ING_NAME:"Ingredient Name",CAS_NUM:"CAS",CAS_FULL:"Chemical Abstract Services Number",STANDARD:"Standard",STRENGTH:"Strength",UNITS:"Units",PER_STRENGTH:"Per",ISBASE:"Calculated as Base?",NANO_MATERIAL:"Nanomaterial?",NANO_MATERIAL_OTHER:"Indicate the type of nanomaterial",ANIMAL_HUMAN_SOURCED:"Animal or Human Sourced?",ACTIVE_LIST:"Active Ingredient List",NONMEDICINAL_INGREDIENT:" Non-Medicinal Ingredient",VARIANT_NAME:"Variant Name",CONTAINER_TYPE:"Container Type",PACKAGE_SIZE:"Package Size",MATERIAL_NAME:"Material Name",PRESENT_IN_FINAL:"Present in final Container",MEDICINAL_INGRED_DETAILS:"Medicinal (Active) Ingredient Details",NONMEDICINAL_INGRED_DETAILS:"Non-Medicinal Ingredient Details",CONTAINER_TYPE_DETAILS:"Container Type Details",MATERIAL_DETAILS:"Animal and / or Human Sourced Materials Details",CALCULATED_AS_BASE:"Calculated as Base?",SHELF_LIFE_YEARS:"Number of Years",SHELF_LIFE_MONTHS:"Number of Months",MIN_TEMP:"Minimum, Celsius",MAX_TEMP:"Maximum, Celsius",TEMP_RANGE:"Temperature Range",SHELF_LIFE:"Shelf Life",IN_FINAL_CONTAINER:"Present in Final Container?",OTHER_ROA_DETAILS:"Other Route of Administration Details",ROA_LBL:"Route of Administration",ROA_ABREV:"ROA",FORMULATIONS:"Formulations",FORMULATION_DETAILS:"Formulation Record",FORMULATION_NAME:"Formulation Name",FORM_ID:"ID",ANIMAL_CTRY_ORIGIN:"Country of Origin of the Animals",ADD_ROA:"Add Route of Administration",MEDICINAL_INGRED:"A. Medicinal (Active) Ingredients",NONMEDICINAL_INGRED:"B. Non-Medicinal Ingredients",CONTAINER_TYPES:"D. Container Types",ANIMAL_HUMAN_HDING:"C. Animal and / or Human Sourced Materials used at any stage in the manufacture of the drug",ROA_TITLE:"E. Routes of Administration",COUNTRIES_MANUFACT:"F. Countries of manufacture for this drug product",IN_LIST:"In list",UNITS_SRCH:"Select or Search Units",SOURCED_INFO:"Please provide additional details of this ingredient / material on the Animal / Human Source tab.",DELETE_FORMULATION:"Delete Formulation",COPY_FORMULATION:"Copy formulation"}),$translateProvider.translations("fr",{ING_NAME:"Nom de l’ingrédient",CAS_NUM:"CAS",CAS_FULL:"Numéro Chemical Abstracts Service",STANDARD:"Norme",STRENGTH:"Concentration",UNITS:"Unités",PER_STRENGTH:"Par",ISBASE:"Calculé sous forme de base?",NANO_MATERIAL:"Nanomatériau?",NANO_MATERIAL_OTHER:"Indiquer le type de nanomatériau",ANIMAL_HUMAN_SOURCED:"fr_Animal or Human Sourced?",ACTIVE_LIST:"fr_Active Ingredient List",NONMEDICINAL_INGREDIENT:" fr_NonMedicinal Ingredient",VARIANT_NAME:"fr_Variant Name",CONTAINER_TYPE:"fr_Container Type",PACKAGE_SIZE:"fr_Package Size",MATERIAL_NAME:"fr_Material Name",PRESENT_IN_FINAL:"fr_Present in final Container",MEDICINAL_INGRED_DETAILS:"fr_Medicinal (Active) Ingredient Details",NONMEDICINAL_INGRED_DETAILS:"Non-Medicinal Ingredient Details",CONTAINER_TYPE_DETAILS:"Container Type Details",MATERIAL_DETAILS:"Animal and / or Human Sourced Materials Details",CALCULATED_AS_BASE:"fr_Calculated as Base?",SHELF_LIFE_YEARS:"fr_Number of years",SHELF_LIFE_MONTHS:"fr_Number of months",MIN_TEMP:"fr_Minimum, Celsius",MAX_TEMP:"fr_Maximum, Celsius",TEMP_RANGE:"fr_Temperature Range",SHELF_LIFE:"fr_Shelf Life",IN_FINAL_CONTAINER:"fr_Present in Final Container?",OTHER_ROA_DETAILS:"fr_Other Route of Administration Details",ROA_LBL:"fr_Route of Administration",ROA_ABREV:"ROA",FORMULATIONS:"Formulations",APPENDIX4:"Annexe 4",FORMULATION_DETAILS:"fr_Formulation Record",FORMULATION_NAME:"fr_Formulation Name",FORM_ID:"ID",ANIMAL_CTRY_ORIGIN:"fr_Country of Origin of the Animals",ADD_ROA:"fr_Add Route of Administration",MEDICINAL_INGRED:"A. fr_Medicinal (Active) Ingredients",NONMEDICINAL_INGRED:"B. fr_Non-Medicinal Ingredients",CONTAINER_TYPES:"D. fr_Container Types",ANIMAL_HUMAN_HDING:"C. fr_Animal and / or Human Sourced Materials used at any stage in the manufacture of the drug",ROA_TITLE:"E. fr_Routes of Administration",COUNTRIES_MANUFACT:"F. fr_Countries of manufacture for this drug product",NOT_IN_LIST:"fr_Not in list",UNITS_SRCH:"fr_Select or Search Units",SOURCED_INFO:"fr_Please provide additional details of this ingredient/material on the Animal/Human Source tab.",DELETE_FORMULATION:"fr_Delete Formulation",COPY_FORMULATION:"fr_Copy formulation"}),$translateProvider.translations("en",{Y:"Yes",N:"No",DELETEROW:"Delete Row",SELECTEDROW:"Selected Row",REQUIRED:"(required)",ROLES_SELECT:"Select one or more roles for this record",NEW:"New",AMEND:"Amend",APPROVED:"Approved",CLICK_TOGGLE:"Click to toggle the collapse or expand details for this address.",AMEND_RECORD:"Amend Record",en:"English",fr:"French",DISCARD_CHANGES:"Discard Changes",REP_ALT:"Alternate REP contact",REP_PRIM:"Primary REP contact",MAILING:"Regulatory Mailing / Annual Contact",BILLING:"Billing Address",MANUFACT:"Manufacturer / Sponsor Mailing Address",IMPORTER:"Canadian Importer Mailing Address",APPROVE_FINAL:"Approve Final XML",SAVE_DRAFT:"Save Draft for Filing",PRIMARY:"Primary",SECONDARY:"Alternate",TOGGLE_EXPAND:"Click to toggle collapse or expand details of row",SAVE_WORK:"Save Working Copy",CONTROL_NUMBER:"Control Number",REP_CONTACT_INFO:"REP Contact Information",SAVE_CONTACT:"Save Contact",DELETE_CONTACT:"Delete Contact",COMPANY_ID:"Company Id",DOSSIER_ID:"Dossier Id",ERRORS:"Errors",UNKNOWN:"Unknown",BIOLOGIC:"Biologic",PHARMACEUTICAL:"Pharmaceutical",HELP_FILE_LOAD:"File Load Instructions",HELP_ACTIVITY_MAIN:"Activity Instructions",HELP_ACTIVITY_REP:"REP Contact Instructions",CALENDAR:"Pick date from calendar",HIDE_CALENDAR:"Hide Calendar (escape key)",OTHER:"Other",HELP_REP_CONTACT:"REP Contact Instructions",OTHER_UNITS:"Units other details",COMPANY_NOABBREV:"Company Name (Full legal name - no abbreviations)",COPY:"Copy",DELETE:"Delete",SAVE_WORKING:"Save Working Copy"}),$translateProvider.translations("fr",{Y:"Oui",N:"Non",DELETEROW:"fr_Delete Row",SELECTEDROW:"Selected Row",REQUIRED:"(requis)",ROLES_SELECT:"fr_Select one or more roles for this record",NEW:"fr_New",AMEND:"fr_Amend",APPROVED:"fr_Approved",CLICK_TOGGLE:"fr_Click to toggle the collapse or expand details for this address.",AMEND_RECORD:"fr_Amend Record",en:"Anglais",fr:"Français",DISCARD_CHANGES:"fr_Discard Changes",REP_ALT:"fr_Alternate REP contact",REP_PRIM:"fr_Primary REP contact",MAILING:"Contact pour le courrier réglementaire",BILLING:"fr_Billing",MANUFACT:"fr_Manufacturer",IMPORTER:"Importateur canadien",APPROVE_FINAL:"fr_Approve Final XML",PRIMARY:"fr_Primary",SECONDARY:"fr_Alternate",TOGGLE_EXPAND:"fr_Click to toggle collapse or expand details of row",SAVE_DRAFT:"fr_Save Draft for filing",CONTROL_NUMBER:"fr_Control Number",REP_CONTACT_INFO:"fr_Main Contact Information",SAVE_CONTACT:"fr_Save Contact",DELETE_CONTACT:"fr_Delete Contact",COMPANY_ID:"fr_Company Id",DOSSIER_ID:"fr_Dossier Id",ERRORS:"Erreurs",UNKNOWN:"Inconnu",BIOLOGIC:"fr_Biologic",PHARMACEUTICAL:"fr_Pharmaceutical",HELP_FILE_LOAD:"fr_File Load Instructions",HELP_ACTIVITY_MAIN:"fr_Activity Instructions",HELP_ACTIVITY_REP:"fr_REP Contact Instructions",CALENDAR:"fr_Pick date from calendar",HIDE_CALENDAR:"fr_Hide Calendar (escape key)",OTHER:"Autre",HELP_REP_CONTACT:"fr_REP Contact Instructions",OTHER_UNITS:"fr_Units other details",COMPANY_NOABBREV:"fr_Company Name (Full legal name - no abbreviations)",COPY:"fr_Copy",DELETE:"fr_Delete",SAVE_WORKING:"fr_Save Working Copy"}),$translateProvider.translations("en",{SELECT_LOAD:"Select a file to load",MSG_SUCCESS_LOAD:"The file was loaded successfully",MSG_ERR_JSONPARSE:"Error: there was an error parsing the working file.",MSG_ERR_XMLPARSE:"Error: there was an error parsing the draft XML file.",MSG_ERR_FILE_LOAD:"Error: there was a problem loading the file.",MSG_ERR_FILE_TYPE:"Error: An invalid file type was selected.",MSG_ERR_FORM_TYPE:"Error: the wrong form type was selected for this form.",MSG_ERR_CHECKSUM_FAIL:"Error: the checksum in the file does not match the calculated checksum"}),$translateProvider.translations("fr",{SELECT_LOAD:"fr_Select a data file to load",MSG_SUCCESS_LOAD:"fr_The file was loaded successfully",MSG_ERR_JSONPARSE:"fr_Error: there was an error parsing the working file.",MSG_ERR_XMLPARSE:"fr_Error: there was an error parsing the draft XML file.",MSG_ERR_FILE_LOAD:"fr_Error: there was a problem loading the file.",MSG_ERR_FILE_TYPE:"fr_Error: An invalid file type was selected.",MSG_ERR_FORM_TYPE:"fr_Error: the wrong form type was selected for this form.",MSG_ERR_CHECKSUM_FAIL:"fr_Error: the checksum in the file does not match the calculated checksum"}),$translateProvider.translations("en",{APPL_STATUS:"Application Status",ENROL_VERSION:"Enrolment Version",DATE_SAVED:"Date Last Saved",AMEND_ENROL:"Amend Enrolment",AMEND_MSG:"Edit records to be amended below."}),$translateProvider.translations("fr",{APPL_STATUS:"fr_Application Status",ENROL_VERSION:"fr_Enrolment Version",DATE_SAVED:"fr_Date Last Saved",AMEND_ENROL:"fr_Amend Enrolment",AMEND_MSG:"fr_Edit records to be amended below."}),$translateProvider.translations("en",{MSG_ERR_MAND:"This field is required",MSG_ERR_EMAIL_FORMAT:"Please enter a valid email address.",MSG_ERR_ROLE:"Please select at least one role",MSG_ERR_CONTACT_NUM:"All the roles have to be used for the contacts",MSG_ERR_PHONE_FORMAT:"Please specify a valid phone number",
MSG_ERR_ALLROLE:"The roles of manufacturer, mailing, billing, and primary REP contact  have not all been selected among the list of contacts",MSG_ERR_ADDRESSSROLE:"The roles of manufacturer, mailing, and billing have not all been selected among the list of addresses",MSG_ERR_POSTAL:"Please specify a valid postal code.",MSG_ERR_ZIP:"Please specify a valid zip code.",MSG_ERR_DATE_FORMAT:"The date format is incorrect.",MAILING_SEL:"Mailing Role already Selected",MANUFACT_SEL:"Manufacturer Role already Selected",MAIL_SEL:"Mailing Role already Selected",BILLING_SEL:"Billing Role already Selected",IMPORTER_SEL:"Importer Role already Selected",REPPRIM_SEL:"REP Primary Role already Selected",REPALT_SEL:"REP Alternate Role already Selected",MSG_LENGTH_MIN5:"Please enter at least 5 characters",MSG_LENGTH_6:"Please enter 6 characters.",MSG_LENGTH_6NUM:"Please enter 6 digits.",MSG_LENGTH_8NUM:"Please enter 8 digits.",MSG_LENGTH_7:"Please enter 7 characters.",MSG_LENGTH_7NUM:"Please enter 7 digits.",MSG_ERR_ONE_REP:"At least one contact is required.",MSG_ERR_ONE_LIFE_REC:"One lifecycle record is required.",MSG_ERR_RATIONALE_SEL:"Please select at least one rationale.",MSG_ERR_NOTIF_SEL:"Please select at least one notifiable change."}),$translateProvider.translations("fr",{MSG_ERR_MAND:"Ce champ est obligatoire.",MSG_ERR_EMAIL_FORMAT:"Veuillez fournir une adresse électronique valide.",MSG_ERR_CONTACT_NUM:"fr_All the roles have to be used for the company contacts",MSG_ERR_PHONE_FORMAT:"fr_Please specify a valid phone number",MSG_ERR_ALLROLE:"fr_Across the contact records, the roles of manufacturer, mailing, billing, and REP primary contact must be selected",MSG_ERR_ADDRESSSROLE:"fr_The roles of manufacturer, mailing, and billing have not all been selected among the list of addresses",MSG_ERR_POSTAL:"fr_Please specify a valid postal code.",MSG_ERR_ZIP:"fr_Please specify a valid zip code.",MSG_ERR_DATE_FORMAT:"fr_The date format is incorrect.",MANUFACT_SEL:"fr_Manufacturer Role already Selected",MAIL_SEL:"fr_Mailing Role already Selected",BILLING_SEL:"fr_Billing Role already Selected",IMPORTER_SEL:"fr_Importer Role already Selected",REPPRIM_SEL:"fr_REP Primary Role already Selected",REPALT_SEL:"fr_REP Alternate Role already Selected",MSG_LENGTH_MIN5:"fr_Please enter at least 5 digits",MSG_LENGTH_6:"fr_Please enter 6 characters.",MSG_LENGTH_6NUM:"fr_Please enter 6 digits.",MSG_LENGTH_8NUM:"fr_Please enter 8 digits.",MSG_LENGTH_7:"fr_Please enter 7 characters.",MSG_LENGTH_7NUM:"fr_Please enter 7 digits.",MSG_ERR_ONE_REP:"fr_At least one contact is required.",MSG_ERR_ONE_LIFE_REC:"fr_One lifecycle record is required.",MSG_ERR_RATIONALE_SEL:"fr_Please select at least one rationale.",MSG_ERR_NOTIF_SEL:"fr_Please select at least one notifiable change."}),$translateProvider.translations("en",{FIRST_NAME:"First Name",LAST_NAME:"Last Name",INITIALS:"Initials",LANGUAGE_CORRESPONDENCE:"Language of Correspondance",JOB_TITLE:"Job Title",SALUTATION:"Salutation",SALUT_MR:"Mr.",SALUT_MS:"Ms.",SALUT_DR:"Dr.",SALUT_MRS:"Mrs.",ROLE_PRIMARY:"Primary",ROLE_SECONDARY:"Alternate",EMAIL:"Email",FAX_NUMBER:"Fax Number",PHONE_EXT:"Phone Extension",ROLES:"Roles",PHONE_NUMBER:"Phone Number",CONTACT_INFO:"Company Representative Information",AMEND:"Amend",REP_CONTACT:"REP Contact",ONE_ROLE:"Role",CONTACT_DETAILS:"Company Representative Details",ADD_CONTACT:"Add REP Contact",CONTACT_ROLE_LEGEND:"Select one or more roles for this company representative",ADD_REPRES:"Add Company Representative",DELETE_REPRES:"Delete Company Rep.",SAVE_REPRES:"Save Company Rep."}),$translateProvider.translations("fr",{FIRST_NAME:"Prénom",LAST_NAME:"Nom",INITIALS:"Initials",LANGUAGE_CORRESPONDENCE:"Langue de Correspondance",JOB_TITLE:"Job Title",SALUTATION:"Titre de civilité",SALUT_MR:"M.",SALUT_MS:"Mme",SALUT_DR:"Dr.",SALUT_MRS:"Mlle",ROLE_PRIMARY:"Primaire",ROLE_SECONDARY:"Alterner",EMAIL:"Courriel",FAX_NUMBER:"Numéro de télécopieur",PHONE_EXT:"Numéro de poste",ADDR_ROLES:"fr_Roles",PHONE_NUMBER:"Numéro de téléphone",CONTACT_INFO:"fr_Company Representative Information",AMEND:"fr_Amend",REP_CONTACT:"fr_REP Contact",ONE_ROLE:"fr_Role",CONTACT_DETAILS:"fr_Company Representative Details",ADD_CONTACT:"fr_Add REP Contact",CONTACT_ROLE_LEGEND:"fr_Select one or more roles for this company representative"})}]),function(){"use strict";angular.module("numberFormat",[])}(),function(){"use strict";function digitsCtrl(){function link(scope,element,attrs,modelCtrl){modelCtrl.$parsers.push(function(inputValue){if(void 0==inputValue)return"";var isNumber=!1,max=-1,ignore=!1,tempVal=""+inputValue;attrs.type&&"number"===attrs.type&&(isNumber=!0),attrs.onlyMax&&(max=parseInt(attrs.onlyMax));var regexIntNeg=/[^0-9-]/g,integerReg=/[^0-9]/g,regexValue=integerReg;if("intNeg"==attrs.onlyDigits?regexValue=regexIntNeg:"false"===attrs.onlyDigits?ignore=!0:regexValue=integerReg,ignore)return inputValue;var transformedInput=tempVal.replace(regexValue,"");return max>0&&(transformedInput=transformedInput.substring(0,max)),transformedInput!==tempVal&&(isNumber&&transformedInput&&(transformedInput=parseFloat(transformedInput)),modelCtrl.$setViewValue(transformedInput),modelCtrl.$render()),transformedInput})}var directive={link:link,restrict:"A",require:"?ngModel"};return directive}angular.module("numberFormat").directive("onlyDigits",digitsCtrl)}(),function(){"use strict";angular.module("hpfbConstants",[]),angular.module("hpfbConstants").constant("CANADA","CAN").constant("OTHER","OTHER").constant("YES","Y").constant("NO","N").constant("USA","USA").constant("UNKNOWN","UNKNOWN").constant("ENGLISH","en").constant("FRENCH","fr").constant("NEW_TYPE","NEW").constant("APPROVED_TYPE","APPROVED").constant("AMEND_TYPE","AMEND").constant("INTERNAL_TYPE","INT").constant("EXTERNAL_TYPE","EXT")}(),function(){"use strict";angular.module("repContactService",[])}(),function(){"use strict";function RepContactService(){function RepContactService(){}return RepContactService.prototype={_default:{}},RepContactService.prototype.getPrimaryRole=function(){return"PRIMARY"},RepContactService.prototype.getSecondaryRole=function(){return"SECONDARY"},RepContactService.prototype.createRepContact=function(repContactList){if(repContactList){var PRIMARY=this.getPrimaryRole(),SECONDARY=this.getSecondaryRole(),contact=_createDefaultRepContact(),currentContacts=repContactList;if(0==currentContacts.length)contact.repRole=PRIMARY;else{contact.repRole=PRIMARY;for(var i=0;i<currentContacts.length;i++)if(currentContacts[i].repRole==PRIMARY){contact.repRole=SECONDARY;break}}return contact}},RepContactService}function _createDefaultRepContact(){var repcontact=_createContactModel();return repcontact.repRole="",repcontact.amend=!1,repcontact}function _createContactModel(){var contact={};return contact.salutation="",contact.givenName="",contact.initials="",contact.surname="",contact.title="",contact.language="",contact.phone="",contact.phoneExt="",contact.fax="",contact.email="",contact}angular.module("repContactService").factory("RepContactService",RepContactService)}(),function(){"use strict";angular.module("filterLists",["hpfbConstants"])}(),function(){"use strict";function orderByTranslatedCountry($translate,$filter,CANADA,USA){return function(array,objKey){var result=[],translated=[];return angular.forEach(array,function(value){translated.push({key:value,label:$translate.instant(value)})}),result.push(CANADA),result.push(USA),angular.forEach($filter("orderBy")(translated,"label"),function(sortedObject){sortedObject.key!==CANADA&&sortedObject.key!==USA&&result.push(sortedObject.key)}),result}}function orderByTranslatedCountryAndLabel($translate,$filter,CANADA,USA){return function(array){var result=[],translated=[];return angular.forEach(array,function(value){translated.push({key:value,label:$translate.instant(value)})}),result.push({key:CANADA,label:$translate.instant(CANADA)}),result.push({key:USA,label:$translate.instant(USA)}),angular.forEach($filter("orderBy")(translated,"label"),function(sortedObject){sortedObject.key!==CANADA&&sortedObject.key!==USA&&result.push(sortedObject)}),result}}function findCountryObj(){return function(array,targetKey){for(var i=0;i<array.length;i++)if(array[i].key===targetKey)return array[i];return null}}function orderByTranslated($translate,$filter){return function(array){var result=[],translated=[];return angular.forEach(array,function(value){translated.push({key:value,label:$translate.instant(value)})}),angular.forEach($filter("orderBy")(translated,"label"),function(sortedObject){result.push(sortedObject.key)}),result}}function sequenceOrderBy($filter){return function(array){var result=[];return angular.forEach($filter("orderBy")(array,"sequence",!0),function(sortedObject){result.push(sortedObject)}),result}}function orderByTranslatedOtherFirst($translate,$filter,OTHER){return function(array){var result=[],translated=[];return angular.forEach(array,function(value){translated.push({key:value,label:$translate.instant(value)})}),result.push(OTHER),angular.forEach($filter("orderBy")(translated,"label"),function(sortedObject){sortedObject.key!==OTHER&&result.push(sortedObject.key)}),result}}function _orderByLocale(){return function(items,lang){return items.sort(function(a,b){return a[lang].localeCompare(b[lang],lang)}),items}}angular.module("filterLists").filter("orderByTranslatedCountry",orderByTranslatedCountry).filter("orderByTranslated",orderByTranslated).filter("orderByTranslatedOtherFirst",orderByTranslatedOtherFirst).filter("orderByCountryAndLabel",orderByTranslatedCountryAndLabel).filter("orderByLocale",_orderByLocale).filter("findCountryObject",findCountryObj).filter("sequenceOrderDescending",sequenceOrderBy),orderByTranslatedCountry.$inject=["$translate","$filter","CANADA","USA"],orderByTranslated.$inject=["$translate","$filter"],orderByTranslatedOtherFirst.$inject=["$translate","$filter","OTHER"]}(),function(){"use strict";angular.module("dataLists",["hpfbConstants"])}(),function(){"use strict";function getService(UNKNOWN){function _createCountryArray(translateJson){vm.countryList=translateJson}function _getUnknownCountryRec(){return{id:UNKNOWN,en:"Unknown",fr:"Inconnu"}}function getCountryValuesArray(){return vm.countryList}function getProvinceValuesArray(){return["AB","BC","MB","NB","NL","NT","NS","NU","ON","PE","QC","SK","YT"]}function getUSStatesValueArray(){return["AL","AK","AZ","AR","CA","CO","CT","DE","DC","FL","GA","HI","ID","IL","IN","IA","KS","KY","LA","ME","MD","MA","MI","MN","MS","MO","MT","NE","NV","NH","NJ","NM","NY","NC","ND","OH","OK","OR","PA","RI","SC","SD","TN","TX","UT","VT","VA","WA","WV","WI","WY"]}var vm=this;vm.countryList=[];var service={getCountries:getCountryValuesArray,getProvinces:getProvinceValuesArray,getUSStates:getUSStatesValueArray,createCountryList:_createCountryArray,getUnknownCountryRecord:_getUnknownCountryRec};return service}angular.module("dataLists").factory("getCountryAndProvinces",getService),getService.inject=["UNKNOWN"]}(),function(){"use strict";function getSalService($filter,$q,$http,$translate,OTHER,FRENCH){function getSalValuesArray(){return["SALUT_DR","SALUT_MR","SALUT_MRS","SALUT_MS"]}function getLanguagesValuesArray(){return["en","fr"]}function _createInternalContacts(){var deferred=$q.defer(),contactsUrl="data/internalContacts.json";return vm.internalContacts&&0!==vm.internalContacts.length?deferred.resolve(vm.internalContacts):$http.get(contactsUrl).success(function(data,status,headers,config){var newList=_createSortedArray(data,"en"),lang=$translate.proposedLanguage()||$translate.use(),otherRec={id:OTHER,en:"Other"};lang===FRENCH&&(otherRec.en="Autre"),newList.unshift(otherRec),vm.internalContacts=newList,deferred.resolve(newList)}).error(function(data,status,headers,config){deferred.reject(status)}),deferred.promise}function _getInternalContacts(){return _createInternalContacts()}function _createSortedArray(jsonList,lang){var result=[];return angular.forEach($filter("orderByLocale")(jsonList,lang),function(sortedObject){result.push(sortedObject)}),result}var vm=this;vm.internalContacts=[];var service={getSalutationList:getSalValuesArray,getLanguages:getLanguagesValuesArray,createInternalContacts:_createInternalContacts,getInternalContacts:_getInternalContacts};return service}angular.module("dataLists").factory("getContactLists",getSalService),getSalService.$inject=["$filter","$q","$http","$translate","OTHER","FRENCH"]}(),function(){"use strict";function getRolesService(){function getRoleValuesArray(){return["","ROLE_PRIMARY","ROLE_SECONDARY"]}function _getFormTypes(){return[_biologic,_pharma]}function _getBiologic(){return _biologic}function _getPharmaceutical(){return _pharma}var _biologic="BIOLOGIC",_pharma="PHARMACEUTICAL",service={getContactRoles:getRoleValuesArray,getFormTypes:_getFormTypes,getBiologicType:_getBiologic,getPharmaType:_getPharmaceutical};return service}angular.module("dataLists").factory("getRoleLists",getRolesService)}(),function(){"use strict";angular.module("services",[])}(),function(){"use strict";function getTransactionSeq($http,$q){function yesNoArray(){return["Y","N"]}function _createRaArray(value){vm.raTypeArray=value}function getTransactionDescriptionsArray(){return["ADMINISTRATIVE","BENEFIT_RISK_ASSESS","CANCEL_LETTER","CHANGE_TO_DIN","COMMENTS_NOC","COMMENTS_SUMMARY_BASIS","DIN_DISCONTINUED","DRUG_NOTIF_FORM","FOR_PERIOD","INITIAL","MEETING_MINUTES","NOTIFICATION_CHANGE","PANDEMIC_APPL","POST_CLEARANCE_DATA","POST_MARKET_SURV","POST_NOC_CHANGE","POST_AUTH_DIV1_CHANGE","PRESUB_MEETING_PKG","PRIORITY_REVIEW_RQ","PRISTINE_PM","PRISTINE_PM_2LANG","ADVISEMENT_LETTER_RESPONSE","CLIN_CLARIF_RESPONSE","EMAIL_RQ_RESPONSE","LABEL_CLARIF_RESPONSE","MHPD_RQ_RESPONSE","NOC_RESPONSE","NOD_RESPONSE","NOL_RESPONSE","NON_RESPONSE","PROCESSING_CLARIF_RESPONSE","QUAL_CLIN_CLARIF_RESPONSE","QUAL_CLARIF_RESPONSE","SCREENING_ACCEPT_RESPONSE","SCREENING_CLARIF_RESPONSE","SDN_RESPONSE","PHONE_RQ_RESPONSE","RISK_COMMUN_DOC","RMP_VERSION_DATE","SIGNAL_WORK_UP","UNSOLICITED_DATA","YEAR_LIST_OF_CHANGE","BE_CLARIF_RESPONSE"]}function getActivityArray(){return vm.raTypeArray}function getPresubArray(){return["CANCEL_LETTER","MEETING_MINUTES","EMAIL_RQ_RESPONSE","PROCESSING_CLARIF_RESPONSE","PHONE_RQ_RESPONSE"]}function getANDSArray(){return["ADMINISTRATIVE","CANCEL_LETTER","DRUG_NOTIF_FORM","INITIAL","POST_CLEARANCE_DATA","PRISTINE_PM","PRISTINE_PM_2LANG","BE_CLARIF_RESPONSE","CLIN_CLARIF_RESPONSE","EMAIL_RQ_RESPONSE","LABEL_CLARIF_RESPONSE","NOC_RESPONSE","NOD_RESPONSE","NON_RESPONSE","PROCESSING_CLARIF_RESPONSE","QUAL_CLIN_CLARIF_RESPONSE","QUAL_CLARIF_RESPONSE","SCREENING_ACCEPT_RESPONSE","SCREENING_CLARIF_RESPONSE","SDN_RESPONSE","PHONE_RQ_RESPONSE"]}function getDINAArray(){return["ADMINISTRATIVE","CANCEL_LETTER","DRUG_NOTIF_FORM","INITIAL","POST_CLEARANCE_DATA","PRESUB_MEETING_PKG","PRISTINE_PM","PRISTINE_PM_2LANG","CLIN_CLARIF_RESPONSE","EMAIL_RQ_RESPONSE","LABEL_CLARIF_RESPONSE","PROCESSING_CLARIF_RESPONSE","QUAL_CLIN_CLARIF_RESPONSE","QUAL_CLARIF_RESPONSE","SCREENING_ACCEPT_RESPONSE","SCREENING_CLARIF_RESPONSE","PHONE_RQ_RESPONSE","UNSOLICITED_DATA"]}function getDINBArray(){return["ADMINISTRATIVE","CANCEL_LETTER","DRUG_NOTIF_FORM","INITIAL","POST_CLEARANCE_DATA","PRESUB_MEETING_PKG","PRISTINE_PM","PRISTINE_PM_2LANG","CLIN_CLARIF_RESPONSE","EMAIL_RQ_RESPONSE","LABEL_CLARIF_RESPONSE","PROCESSING_CLARIF_RESPONSE","QUAL_CLIN_CLARIF_RESPONSE","QUAL_CLARIF_RESPONSE","SCREENING_ACCEPT_RESPONSE","SCREENING_CLARIF_RESPONSE","PHONE_RQ_RESPONSE","UNSOLICITED_DATA"]}function getEUNDSArray(){return["ADMINISTRATIVE","CANCEL_LETTER","COMMENTS_SUMMARY_BASIS","DRUG_NOTIF_FORM","INITIAL","POST_CLEARANCE_DATA","PRISTINE_PM","PRISTINE_PM_2LANG","CLIN_CLARIF_RESPONSE","EMAIL_RQ_RESPONSE","LABEL_CLARIF_RESPONSE","NOC_RESPONSE","NOD_RESPONSE","NON_RESPONSE","PROCESSING_CLARIF_RESPONSE","QUAL_CLIN_CLARIF_RESPONSE","QUAL_CLARIF_RESPONSE","SCREENING_ACCEPT_RESPONSE","SCREENING_CLARIF_RESPONSE","SDN_RESPONSE","PHONE_RQ_RESPONSE","UNSOLICITED_DATA"]}function getEUSNDSArray(){return["ADMINISTRATIVE","CANCEL_LETTER","COMMENTS_SUMMARY_BASIS","DRUG_NOTIF_FORM","POST_CLEARANCE_DATA","POST_NOC_CHANGE","PRISTINE_PM","PRISTINE_PM_2LANG","CLIN_CLARIF_RESPONSE","EMAIL_RQ_RESPONSE","LABEL_CLARIF_RESPONSE","NOC_RESPONSE","NOD_RESPONSE","NON_RESPONSE","PROCESSING_CLARIF_RESPONSE","QUAL_CLIN_CLARIF_RESPONSE","QUAL_CLARIF_RESPONSE","SCREENING_ACCEPT_RESPONSE","SCREENING_CLARIF_RESPONSE","SDN_RESPONSE","PHONE_RQ_RESPONSE","UNSOLICITED_DATA"]}function getLevel3Array(){return["CANCEL_LETTER","EMAIL_RQ_RESPONSE","PROCESSING_CLARIF_RESPONSE","PHONE_RQ_RESPONSE","YEAR_LIST_OF_CHANGE"]}function getNCArray(){return["ADMINISTRATIVE","CANCEL_LETTER","COMMENTS_SUMMARY_BASIS","DRUG_NOTIF_FORM","POST_CLEARANCE_DATA","POST_NOC_CHANGE","PRESUB_MEETING_PKG","PRISTINE_PM","PRISTINE_PM_2LANG","CLIN_CLARIF_RESPONSE","EMAIL_RQ_RESPONSE","LABEL_CLARIF_RESPONSE","NOL_RESPONSE","PROCESSING_CLARIF_RESPONSE","QUAL_CLIN_CLARIF_RESPONSE","QUAL_CLARIF_RESPONSE","SCREENING_ACCEPT_RESPONSE","SCREENING_CLARIF_RESPONSE","SDN_RESPONSE","PHONE_RQ_RESPONSE","UNSOLICITED_DATA"]}function getNDSArray(){return["CANCEL_LETTER","COMMENTS_NOC","COMMENTS_SUMMARY_BASIS","DRUG_NOTIF_FORM","INITIAL","POST_CLEARANCE_DATA","PRESUB_MEETING_PKG","PRIORITY_REVIEW_RQ","PRISTINE_PM","PRISTINE_PM_2LANG","BE_CLARIF_RESPONSE","CLIN_CLARIF_RESPONSE","EMAIL_RQ_RESPONSE","LABEL_CLARIF_RESPONSE","NOC_RESPONSE","NOD_RESPONSE","NON_RESPONSE","PROCESSING_CLARIF_RESPONSE","QUAL_CLIN_CLARIF_RESPONSE","QUAL_CLARIF_RESPONSE","SCREENING_ACCEPT_RESPONSE","SCREENING_CLARIF_RESPONSE","SDN_RESPONSE","PHONE_RQ_RESPONSE","UNSOLICITED_DATA"]}function getPDCArray(){return["CANCEL_LETTER","POST_AUTH_DIV1_CHANGE","EMAIL_RQ_RESPONSE","PROCESSING_CLARIF_RESPONSE","PHONE_RQ_RESPONSE"]}function getPDCBArray(){return["CANCEL_LETTER","POST_AUTH_DIV1_CHANGE","EMAIL_RQ_RESPONSE","PROCESSING_CLARIF_RESPONSE","PHONE_RQ_RESPONSE"]}function getPSURCArray(){return["CANCEL_LETTER","FOR_PERIOD","CLIN_CLARIF_RESPONSE","EMAIL_RQ_RESPONSE","PROCESSING_CLARIF_RESPONSE","PHONE_RQ_RESPONSE"]}function getPSURPVArray(){return["CANCEL_LETTER","FOR_PERIOD","EMAIL_RQ_RESPONSE","PROCESSING_CLARIF_RESPONSE","PHONE_RQ_RESPONSE"]}function getRMPPVArray(){return["CANCEL_LETTER","EMAIL_RQ_RESPONSE","PROCESSING_CLARIF_RESPONSE","PHONE_RQ_RESPONSE","RMP_VERSION_DATE"]}function getSANDSArray(){return["ADMINISTRATIVE","CANCEL_LETTER","DRUG_NOTIF_FORM","POST_CLEARANCE_DATA","POST_NOC_CHANGE","PRISTINE_PM","PRISTINE_PM_2LANG","BE_CLARIF_RESPONSE","CLIN_CLARIF_RESPONSE","EMAIL_RQ_RESPONSE","LABEL_CLARIF_RESPONSE","NOC_RESPONSE","NOD_RESPONSE","NON_RESPONSE","PROCESSING_CLARIF_RESPONSE","QUAL_CLIN_CLARIF_RESPONSE","QUAL_CLARIF_RESPONSE","SCREENING_ACCEPT_RESPONSE","SCREENING_CLARIF_RESPONSE","SDN_RESPONSE","PHONE_RQ_RESPONSE","UNSOLICITED_DATA"]}function getSNDSArray(){return["ADMINISTRATIVE","CANCEL_LETTER","COMMENTS_SUMMARY_BASIS","DRUG_NOTIF_FORM","POST_CLEARANCE_DATA","POST_NOC_CHANGE","PRESUB_MEETING_PKG","PRIORITY_REVIEW_RQ","PRISTINE_PM","PRISTINE_PM_2LANG","BE_CLARIF_RESPONSE","CLIN_CLARIF_RESPONSE","EMAIL_RQ_RESPONSE","LABEL_CLARIF_RESPONSE","NOC_RESPONSE","NOD_RESPONSE","NON_RESPONSE","PROCESSING_CLARIF_RESPONSE","QUAL_CLIN_CLARIF_RESPONSE","QUAL_CLARIF_RESPONSE","SCREENING_ACCEPT_RESPONSE","SCREENING_CLARIF_RESPONSE","SDN_RESPONSE","PHONE_RQ_RESPONSE","UNSOLICITED_DATA"]}function getSNDSCArray(){return["CANCEL_LETTER","POST_NOC_CHANGE","PRISTINE_PM","PRISTINE_PM_2LANG","CLIN_CLARIF_RESPONSE","EMAIL_RQ_RESPONSE","LABEL_CLARIF_RESPONSE","NOC_RESPONSE","NOD_RESPONSE","NON_RESPONSE","PROCESSING_CLARIF_RESPONSE","PHONE_RQ_RESPONSE","RISK_COMMUN_DOC","SIGNAL_WORK_UP"]}function getUDPVArray(){return["BENEFIT_RISK_ASSESS","CANCEL_LETTER","NOTIFICATION_CHANGE","POST_MARKET_SURV","EMAIL_RQ_RESPONSE","MHPD_RQ_RESPONSE","PROCESSING_CLARIF_RESPONSE","PHONE_RQ_RESPONSE","RISK_COMMUN_DOC","SIGNAL_WORK_UP"]}function getUDRAVArray(){return["CANCEL_LETTER","DIN_DISCONTINUED","ADVISEMENT_LETTER_RESPONSE","EMAIL_RQ_RESPONSE","PROCESSING_CLARIF_RESPONSE","PHONE_RQ_RESPONSE","UNSOLICITED_DATA"]}function getConsultArray(){return["PANDEMIC_APPL"]}function _getMPNCArray(){return["CANCEL_LETTER","MEETING_MINUTES","EMAIL_RQ_RESPONSE","PROCESSING_CLARIF_RESPONSE","PHONE_RQ_RESPONSE"]}function _getMPNDSArray(){return["CANCEL_LETTER","MEETING_MINUTES","EMAIL_RQ_RESPONSE","PROCESSING_CLARIF_RESPONSE","PHONE_RQ_RESPONSE"]}function _getMPSNDSArray(){return["CANCEL_LETTER","MEETING_MINUTES","EMAIL_RQ_RESPONSE","PROCESSING_CLARIF_RESPONSE","PHONE_RQ_RESPONSE"]}function _getPANDArray(){return["CANCEL_LETTER","EMAIL_RQ_RESPONSE","PROCESSING_CLARIF_RESPONSE","PHONE_RQ_RESPONSE"]}function _getPBRERCArray(){return["CANCEL_LETTER","EMAIL_RQ_RESPONSE","PROCESSING_CLARIF_RESPONSE","PHONE_RQ_RESPONSE"]}function _getPBRERPVArray(){return["CANCEL_LETTER","EMAIL_RQ_RESPONSE","PROCESSING_CLARIF_RESPONSE","PHONE_RQ_RESPONSE"]}function _getPRNDSArray(){return["CANCEL_LETTER","EMAIL_RQ_RESPONSE","PROCESSING_CLARIF_RESPONSE","PHONE_RQ_RESPONSE"]}function _getPRSNDSArray(){return["CANCEL_LETTER","EMAIL_RQ_RESPONSE","PROCESSING_CLARIF_RESPONSE","PHONE_RQ_RESPONSE"]}function getYBPRArray(){return["CANCEL_LETTER","FOR_PERIOD","EMAIL_RQ_RESPONSE","PROCESSING_CLARIF_RESPONSE","PHONE_RQ_RESPONSE"]}var vm=this;vm.raTypeArray=[];var service={getTransactionDescriptions:getTransactionDescriptionsArray,getActivityTypes:getActivityArray,createRaTypes:_createRaArray,getPresubTypes:getPresubArray,getAndsType:getANDSArray,getDinaType:getDINAArray,getDinbType:getDINBArray,getEundsType:getEUNDSArray,getEusndsType:getEUSNDSArray,getLevel3Type:getLevel3Array,getNcType:getNCArray,getNdsType:getNDSArray,getPdcType:getPDCArray,getPdcBType:getPDCBArray,getPresubType:getPresubArray,getpSurCType:getPSURCArray,getpSurPvType:getPSURPVArray,getRmpPvType:getRMPPVArray,getSandsType:getSANDSArray,getSndsType:getSNDSArray,getSndsCArray:getSNDSCArray,getUdpvType:getUDPVArray,getUdraType:getUDRAVArray,getYbprType:getYBPRArray,getConsultType:getConsultArray,getMPNCType:_getMPNCArray,getMPNDSType:_getMPNDSArray,getMPSNDSType:_getMPSNDSArray,getPANDType:_getPANDArray,getPBRERCType:_getPBRERCArray,getPBRERPVType:_getPBRERPVArray,getPRNDSType:_getPRNDSArray,getPRSNDSType:_getPRSNDSArray,getYesNoList:yesNoArray};return service}angular.module("services").factory("TransactionLists",getTransactionSeq),getTransactionSeq.inject=["$http","$q"]}(),function(){"use strict";angular.module("applicationInfoService",[])}(),function(){"use strict";function ApplicationInfoService(){function ApplicationInfoService(){}return ApplicationInfoService.prototype.getTodayDate=function(){function pad(n){return n<10?"0"+n:n}var d=new Date,isoDate=d.getFullYear()+"-"+pad(d.getMonth()+1)+"-"+pad(d.getDate());return isoDate},ApplicationInfoService.prototype.incrementMinorVersion=function(enrolmentVersion){var result;if(enrolmentVersion){var parts=enrolmentVersion.split("."),dec=parseInt(parts[1]);result=parts[0]+"."+(dec+1)}else result="0.1";return result},ApplicationInfoService.prototype.incrementMajorVersion=function(enrolmentVersion){var result;if(enrolmentVersion){var parts=enrolmentVersion.split("."),whole=parseInt(parts[0]);result=whole+1+".0"}else result="1.0";return result},ApplicationInfoService.prototype.getApplicationStatusList=function(){return["NEW","AMEND","APPROVED"]},ApplicationInfoService.prototype.getApprovedType=function(){return"APPROVED"},ApplicationInfoService.prototype.getAmendType=function(){return"AMEND"},ApplicationInfoService}angular.module("applicationInfoService").factory("ApplicationInfoService",ApplicationInfoService)}(),function(){"use strict";angular.module("dossierService",["dossierDataLists","hpfbConstants","dataLists"])}(),function(){"use strict";function DossierService(DossierLists,$translate,$filter,getCountryAndProvinces,OTHER,UNKNOWN){function DossierService(){}function DossierService(dossierData){angular.extend(this._default,dossierData)}function getContactList(contacts){var list=[];if(angular.isDefined(contacts)){contacts instanceof Array||(contacts=[contacts]);for(var i=0;i<contacts.length;i++){var contact={};contact.amend="Y"===contacts[i].amend_record,contact.repRole=contacts[i].rep_contact_role,contact.salutation=contacts[i].rep_contact_details.salutation,contact.givenName=contacts[i].rep_contact_details.given_name,contact.surname=contacts[i].rep_contact_details.surname,contact.initials=contacts[i].rep_contact_details.initials,contact.title=contacts[i].rep_contact_details.job_title,contact.phone=contacts[i].rep_contact_details.phone_num,contact.phoneExt=contacts[i].rep_contact_details.phone_ext,contact.fax=contacts[i].rep_contact_details.fax_num,contact.email=contacts[i].rep_contact_details.email,contact.language=contacts[i].rep_contact_details.language_correspondance,list.push(contact)}}return list}function getDiseaseDisorderList(info,diseaseList){if(info&&diseaseList){for(var i=0;i<diseaseList.length;i++){var checkboxRec=diseaseList[i];switch(checkboxRec.name){case"acute-alcohol":checkboxRec.value="Y"===info.acute_alcohol;break;case"acute-anxiety":checkboxRec.value="Y"===info.acute_anxiety;break;case"acute-infectious":checkboxRec.value="Y"===info.acute_infectious;break;case"acute-inflammatory":checkboxRec.value="Y"===info.acute_inflammatory;break;case"acute-psychotic":checkboxRec.value="Y"===info.acute_psychotic;break;case"addiction":checkboxRec.value="Y"===info.addiction;break;case"ateriosclerosis":checkboxRec.value="Y"===info.ateriosclerosis;break;case"appendicitis":checkboxRec.value="Y"===info.appendicitis;break;case"asthma":checkboxRec.value="Y"===info.asthma;break;case"cancer":checkboxRec.value="Y"===info.cancer;break;case"congest-heart-fail":checkboxRec.value="Y"===info.congest_heart_fail;break;case"convulsions":checkboxRec.value="Y"===info.convulsions;break;case"dementia":checkboxRec.value="Y"===info.dementia;break;case"depression":checkboxRec.value="Y"===info.depression;break;case"diabetes":checkboxRec.value="Y"===info.diabetes;break;case"gangrene":checkboxRec.value="Y"===info.gangrene;break;case"glaucoma":checkboxRec.value="Y"===info.glaucoma;break;case"haematologic-bleeding":checkboxRec.value="Y"===info.haematologic_bleeding;break;case"hepatitis":checkboxRec.value="Y"===info.hepatitis;break;case"hypertension":checkboxRec.value="Y"===info.hypertension;break;case"nausea-pregnancy":checkboxRec.value="Y"===info.nausea_pregnancy;break;case"obesity":checkboxRec.value="Y"===info.obesity;break;case"rheumatic-fever":checkboxRec.value="Y"===info.rheumatic_fever;break;case"septicemia":checkboxRec.value="Y"===info.septicemia;break;case"sex-transmit-disease":checkboxRec.value="Y"===info.sex_transmit_disease;break;case"strangulated-hernia":checkboxRec.value="Y"===info.strangulated_hernia;break;case"thrombotic-embolic-disorder":checkboxRec.value="Y"===info.thrombotic_embolic_disorder;break;case"thyroid-disease":checkboxRec.value="Y"===info.thyroid_disease;break;case"ulcer-gastro":checkboxRec.value="Y"===info.ulcer_gastro}}return diseaseList}}function getTherapeuticList(input){var list="";if(input instanceof Array||(input=[input]),input){list=[];for(var i=0;i<input.length;i++){var item={id:""+i+1,name:input[i]};list.push(item)}}return list}function getCanRefProductList(info){var list=[];if(angular.isDefined(info)){info instanceof Array||(info=[info]);for(var i=0;i<info.length;i++){var product={};product.brandName=info[i].brand_name,product.ingId=info[i].ingredient_id,product.ingLabel=info[i].ingredient_name,product.autoIngred="Y",product.ingId||(product.autoIngred="N"),product.dosageForm="",info[i].dosage_form&&(product.dosageForm=$filter("filter")(DossierLists.getDosageFormList(),{id:info[i].dosage_form.__text})[0]),product.dosageFormOther=info[i].dosage_form_other,product.strengths=Number(info[i].strengths),product.units="",info[i].units&&(product.units=$filter("filter")(DossierLists.getUnitsList(),{id:info[i].units.__text})[0]),product.otherUnits=info[i].units_other,product.per=info[i].per,product.companyName=info[i].company_name,list.push(product)}}return list}function getAppendix4IngredientList(info){var list=[],getCountries=function(input){var list=[];input instanceof Array||(input=[input]);for(var i=0;i<input.length;i++){var obj={id:i,country:"",display:"",unknownCountryDetails:""};input[i].country_with_unknown.__text===UNKNOWN?obj.country=getCountryAndProvinces.getUnknownCountryRecord():obj.country=$filter("filter")(getCountryAndProvinces.getCountries(),{id:input[i].country_with_unknown.__text})[0],obj.country&&(obj.display=obj.country.id),obj.unknownCountryDetails=input[i].unknown_country_details,list.push(obj)}return list};if(angular.isDefined(info)){info instanceof Array||(info=[info]);for(var i=0;i<info.length;i++){var ing={};ing.id=info[i].ingredient_id,ing.ingredientName=info[i].ingredient_name,ing.humanSourced="Y"===info[i].human_sourced,ing.animalSourced="Y"===info[i].animal_sourced;var tissues=info[i].tissues_fluids_section,srcAnimal=info[i].animal_sourced_section;if(tissues&&(ing.tissuesFluidsOrigin={},ing.tissuesFluidsOrigin.tissuesList=_getTissuesFluidsModel(tissues)),srcAnimal){ing.sourceAnimalDetails=createEmptyAnimalSourceModel(),ing.sourceAnimalDetails.isCellLine=info[i].animal_sourced_section.is_cell_line,ing.sourceAnimalDetails.isBiotechDerived=info[i].animal_sourced_section.is_biotech_derived,ing.sourceAnimalDetails.isControlledPop=info[i].animal_sourced_section.is_controlled_pop,ing.sourceAnimalDetails.ageAnimals=Number(info[i].animal_sourced_section.animal_age);var animalTypeList=info[i].animal_sourced_section.animal_src_record;animalTypeList instanceof Array||(animalTypeList=[animalTypeList]);for(var srcCount=0;srcCount<animalTypeList.length;srcCount++){var oneRec=animalTypeList[srcCount],animalRecord={};animalRecord.animalType=oneRec.animal_type,animalRecord.animalDetail=oneRec.animal_detail,ing.sourceAnimalDetails.animalSrcList.push(animalRecord)}ing.sourceAnimalDetails.countryList=getCountries(info[i].animal_sourced_section.country_origin_list.country_origin)}list.push(ing)}}return list}function getFormulationList(list){var formulationList=[];return list&&0!==list.length?(list instanceof Array||(list=[list]),angular.forEach(list,function(item){var obj={formulationId:item.formulation_id,formulationName:item.formulation_name};if(item.dosage_form_group.dosage_form){var dosageFormObj=$filter("filter")(DossierLists.getDosageFormList(),{id:item.dosage_form_group.dosage_form.__text})[0];obj.dosageForm=dosageFormObj}else obj.dosageForm=item.dosage_form_group.dosage_form;obj.dosageFormOther=item.dosage_form_group.dosage_form_other,item.nonmedicinal_ingredient&&(obj.nMedIngList=getNonMedIngList(item.nonmedicinal_ingredient)),item.active_ingredient&&(obj.activeIngList=getActiveIngList(item.active_ingredient)),item.container_group&&item.container_group.container_details&&(obj.containerTypes=getContainerTypeList(item.container_group.container_details)),item.material_ingredient&&(obj.animalHumanMaterials=getMaterialList(item.material_ingredient)),item.roa_group&&item.roa_group.roa_details&&(obj.routeAdmins=getRouteAdminList(item.roa_group.roa_details)),item.country_group&&item.country_group.country_manufacturer&&(obj.countryList=getFormulationCountryList(item.country_group.country_manufacturer)),formulationList.push(obj)}),formulationList):formulationList}function getActiveIngList(list){var resultList=[];return list instanceof Array||(list=[list]),angular.forEach(list,function(item){var obj={ingId:item.ingredient_id,ingLabel:item.ingredient_name,autoIngred:"N",cas:item.cas_number,humanAnimalSourced:item.is_human_animal_src,standard:item.ingred_standard,strength:Number(item.strength),per:item.per,units:"",calcAsBase:item.is_base_calc,nanoMaterial:"",nanoMaterialOther:item.nanomaterial_details};if(item.units){var unitsObj=$filter("filter")(DossierLists.getUnitsList(),{id:item.units.__text})[0];obj.units=unitsObj}if(item.is_nanomaterial){var nanoValue=DossierLists.getNanoPrefix()+item.is_nanomaterial.__text;item.is_nanomaterial.__text===OTHER&&(nanoValue=item.is_nanomaterial.__text),
obj.nanoMaterial=$filter("filter")(DossierLists.getNanoMaterials(),{id:nanoValue})[0]}obj.ingId||(obj.autoIngred="N"),resultList.push(obj)}),resultList}function getNonMedIngList(list){var resultList=[];return list instanceof Array||(list=[list]),angular.forEach(list,function(item){var obj={ingId:item.ingredient_id,varId:item.variant_name,ingName:item.ingredient_name,cas:item.cas_number,humanAnimalSourced:item.is_human_animal_src,standard:item.ingred_standard,strength:Number(item.strength),per:item.per,units:"",calcAsBase:item.is_base_calc,nanoMaterial:"",nanoMaterialOther:item.nanomaterial_details};if(item.units&&(obj.units=$filter("filter")(DossierLists.getUnitsList(),{id:item.units.__text})[0]),item.is_nanomaterial){var nanoValue=DossierLists.getNanoPrefix()+item.is_nanomaterial.__text;item.is_nanomaterial.__text===OTHER&&(nanoValue=item.is_nanomaterial.__text),obj.nanoMaterial=$filter("filter")(DossierLists.getNanoMaterials(),{id:nanoValue})[0]}resultList.push(obj)}),resultList}function getContainerTypeList(list){var resultList=[];return list instanceof Array||(list=[list]),angular.forEach(list,function(item){var obj={containerType:item.container_type,packageSize:item.package_size,shelfLifeYears:Number(item.shelf_life_years),shelfLifeMonths:Number(item.shelf_life_months),tempMin:Number(item.temperature_min),tempMax:Number(item.temperature_max)};resultList.push(obj)}),resultList}function getMaterialList(list){var resultList=[];return list instanceof Array||(list=[list]),angular.forEach(list,function(item){var obj={ingredientId:item.ingredient_id,ingredientName:item.ingredient_name,cas:item.cas_number,ingredientStandard:item.ingred_standard,inFinalContainer:item.in_final_container};resultList.push(obj)}),resultList}function getRouteAdminList(list){list instanceof Array||(list=[list]);var resultList=[],_id=0;return angular.forEach(list,function(item){var roaObj=$filter("filter")(DossierLists.getRoa(),{id:item.roa.__text})[0];_id+=1;var obj={id:_id,roa:roaObj,otherRoaDetails:item.roa_other,display:roaObj.id};resultList.push(obj)}),resultList}function getFormulationCountryList(list){var resultList=[],_id=0;return list instanceof Array||(list=[list]),angular.forEach(list,function(item){_id+=1;var obj={id:_id,country:"",display:"",unknownCountryDetails:""};item.__text===UNKNOWN?obj.country=getCountryAndProvinces.getUnknownCountryRecord():obj.country=$filter("filter")(getCountryAndProvinces.getCountries(),{id:item.__text})[0],obj.country&&(obj.display=obj.country.id),resultList.push(obj)}),resultList}function canRefProductListToOutput(info){var resultList=[];if(angular.isDefined(info))for(var i=0;i<info.length;i++){var product={};if(product.brand_name=info[i].brandName,product.ingredient_id=info[i].ingId,product.ingredient_name=info[i].ingLabel,info[i].dosageForm){var splitArray=info[i].dosageForm.id.split(DossierLists.getDosageFormPrefix()),newDosage=splitArray[splitArray.length-1];product.dosage_form={_label_en:info[i].dosageForm.en,_label_fr:info[i].dosageForm.fr,__text:newDosage}}product.dosage_form_other=info[i].dosageFormOther,product.strengths=info[i].strengths,product.units=_unitsFldToOutput(info[i].units,DossierLists.getUnitsPrefix()),product.units_other=info[i].otherUnits,product.per=info[i].per,product.company_name=info[i].companyName,resultList.push(product)}return resultList}function appendix4IngredientListToOutput(info){var appendices=[];if(!angular.isDefined(info))return null;for(var i=0;i<info.length;i++){var ing={};if(ing.ingredient_id=info[i].id,ing.ingredient_name=info[i].ingredientName,ing.animal_sourced=info[i].animalSourced===!0?"Y":"N",ing.human_sourced=info[i].humanSourced===!0?"Y":"N",info[i].tissuesFluidsOrigin){ing.tissues_fluids_section={};for(var b=0;b<info[i].tissuesFluidsOrigin.tissuesList.length;b++){switch(info[i].tissuesFluidsOrigin.tissuesList[b].systemType){case DossierLists.getNervousSystemValue():ing.tissues_fluids_section.nervous_system=_nervousSystemToOutput(info[i].tissuesFluidsOrigin.tissuesList[b].system);break;case DossierLists.getDigestiveSystemValue():ing.tissues_fluids_section.digestive_system=_digestiveSystemToOutput(info[i].tissuesFluidsOrigin.tissuesList[b].system);break;case DossierLists.getImmuneSystemValue():ing.tissues_fluids_section.immune_system=_immuneSystemToOutput(info[i].tissuesFluidsOrigin.tissuesList[b].system);break;case DossierLists.getSkinSystemValue():ing.tissues_fluids_section.skin_system=_skinSystemToOutput(info[i].tissuesFluidsOrigin.tissuesList[b].system);break;case DossierLists.getMuscleSystemValue():ing.tissues_fluids_section.musculo_system=_muscleSystemToOutput(info[i].tissuesFluidsOrigin.tissuesList[b].system);break;case DossierLists.getOtherTissuesSystemValue():ing.tissues_fluids_section.other_system=_otherSystemToOutput(info[i].tissuesFluidsOrigin.tissuesList[b].system);break;case DossierLists.getReproductiveSystemValue():ing.tissues_fluids_section.reproductive_system=_reproductiveSystemToOutput(info[i].tissuesFluidsOrigin.tissuesList[b].system);break;case DossierLists.getCardioSystemValue():ing.tissues_fluids_section.cardio_system=_cardioSystemToOutput(info[i].tissuesFluidsOrigin.tissuesList[b].system)}}}if(info[i].sourceAnimalDetails){ing.animal_sourced_section=createEmptyAnimalSourceForOutput(),ing.animal_sourced_section.is_cell_line=info[i].sourceAnimalDetails.isCellLine,ing.animal_sourced_section.is_biotech_derived=info[i].sourceAnimalDetails.isBiotechDerived,ing.animal_sourced_section.is_controlled_pop=info[i].sourceAnimalDetails.isControlledPop,ing.animal_sourced_section.animal_age=info[i].sourceAnimalDetails.ageAnimals;for(var animalSrcObj=info[i].sourceAnimalDetails,srcCount=0;srcCount<animalSrcObj.animalSrcList.length;srcCount++){var oneRec=animalSrcObj.animalSrcList[srcCount],srcRecordOut={};srcRecordOut.animal_type=oneRec.animalType,srcRecordOut.animal_detail=oneRec.animalDetail,ing.animal_sourced_section.animal_src_record.push(srcRecordOut)}for(var countries=info[i].sourceAnimalDetails.countryList,v=0;v<countries.length;v++){var countryRecord={};countryRecord.country_with_unknown={_label_en:"",_label_fr:"",__text:""},countries[v].country&&(countryRecord.country_with_unknown._label_en=countries[v].country.en,countryRecord.country_with_unknown._label_fr=countries[v].country.fr,countryRecord.country_with_unknown.__text=countries[v].country.id),countryRecord.unknown_country_details=countries[v].unknownCountryDetails,ing.animal_sourced_section.country_origin_list.country_origin.push(countryRecord)}}appendices.push(ing)}return appendices}function formulationListToOutput(list){var formulationList=[];return angular.forEach(list,function(item){var obj={formulation_name:item.formulationName,formulation_id:item.formulationId};if(obj.dosage_form_group={},item.dosageForm){var splitArray=item.dosageForm.id.split(DossierLists.getDosageFormPrefix()),newDosage=splitArray[splitArray.length-1];obj.dosage_form_group.dosage_form={_label_en:item.dosageForm.en,_label_fr:item.dosageForm.fr,__text:newDosage}}obj.dosage_form_group.dosage_form_other=item.dosageFormOther,obj.roa_group={},item.routeAdmins&&item.routeAdmins.length>0&&(obj.roa_group.roa_details=routeAdminToOutput(item.routeAdmins)),obj.container_group={},item.containerTypes&&item.containerTypes.length>0&&(obj.container_group.container_details=containerTypeListToOutput(item.containerTypes)),obj.country_group={},item.countryList&&item.countryList.length>0&&(obj.country_group.country_manufacturer=formulationCountryListToOutput(item.countryList)),item.activeIngList&&item.activeIngList.length>0&&(obj.active_ingredient=activeListToOutput(item.activeIngList)),item.nMedIngList&&item.nMedIngList.length>0&&(obj.nonmedicinal_ingredient=nonMedIngListToOutput(item.nMedIngList)),item.animalHumanMaterials&&item.animalHumanMaterials.length>0&&(obj.material_ingredient=materialListToOutput(item.animalHumanMaterials)),formulationList.push(obj)}),formulationList}function activeListToOutput(activeList){var resultList=[];return angular.forEach(activeList,function(item){var obj={ingredient_id:item.ingId,ingredient_name:item.ingLabel,cas_number:item.cas,ingred_standard:item.standard,is_human_animal_src:item.humanAnimalSourced,strength:item.strength,per:item.per,units:"",units_other:item.otherUnits,is_base_calc:item.calcAsBase,is_nanomaterial:"",nanomaterial_details:item.nanoMaterialOther};obj.units=_unitsFldToOutput(item.units,DossierLists.getUnitsPrefix()),obj.is_nanomaterial=_unitsFldToOutput(item.nanoMaterial,DossierLists.getNanoPrefix()),resultList.push(obj)}),resultList}function _unitsFldToOutput(unitsObj,prefix){var newObj={_label_en:"",_label_fr:"",__text:""};if(!unitsObj||!prefix)return"";var splitArray=unitsObj.id.split(prefix),newUnits=splitArray[splitArray.length-1];return newObj._label_en=unitsObj.en,newObj._label_fr=unitsObj.fr,newObj.__text=newUnits,newObj}function nonMedIngListToOutput(nonMedList){var resultList=[];return angular.forEach(nonMedList,function(item){var obj={ingredient_id:item.ingId,ingredient_name:item.ingName,cas_number:item.cas,ingred_standard:item.standard,is_human_animal_src:item.humanAnimalSourced,variant_name:item.varId,strength:item.strength,per:item.per,units:"",units_other:item.otherUnits,is_base_calc:item.calcAsBase,is_nanomaterial:"",nanomaterial_details:item.nanoMaterialOther};obj.units=_unitsFldToOutput(item.units,DossierLists.getUnitsPrefix()),obj.is_nanomaterial=_unitsFldToOutput(item.nanoMaterial,DossierLists.getNanoPrefix()),resultList.push(obj)}),resultList}function containerTypeListToOutput(containerList){var resultList=[];return angular.forEach(containerList,function(item){var obj={container_type:item.containerType,package_size:item.packageSize,shelf_life_years:item.shelfLifeYears,shelf_life_months:item.shelfLifeMonths,temperature_min:item.tempMin,temperature_max:item.tempMax};resultList.push(obj)}),resultList}function materialListToOutput(list){var resultList=[];return angular.forEach(list,function(item){var obj={ingredient_id:item.ingredientId,ingredient_name:item.ingredientName,cas_number:item.cas,ingred_standard:item.ingredientStandard,in_final_container:item.inFinalContainer};resultList.push(obj)}),resultList}function routeAdminToOutput(list){var resultList=[];return angular.forEach(list,function(item){var splitArray=item.roa.id.split(DossierLists.getRoaPrefix()),newRoa=splitArray[splitArray.length-1],obj={roa:{_label_en:item.roa.en,_label_fr:item.roa.fr,__text:newRoa},roa_other:item.otherRoaDetails};resultList.push(obj)}),resultList}function formulationCountryListToOutput(list){var resultList=[];return angular.forEach(list,function(item){var country={_label_en:item.country.en,_label_fr:item.country.fr,__text:item.country.id};resultList.push(country)}),resultList}function repContactToOutput(contactList){var resultList=[];return angular.forEach(contactList,function(item){var obj={};obj.amend_record=item.amend?"Y":"N",obj.rep_contact_role=item.repRole,obj.rep_contact_details={},obj.rep_contact_details.salutation=item.salutation,obj.rep_contact_details.given_name=item.givenName,obj.rep_contact_details.initials=item.initials,obj.rep_contact_details.surname=item.surname,obj.rep_contact_details.job_title=item.title,obj.rep_contact_details.language_correspondance=item.language,obj.rep_contact_details.phone_num=item.phone,obj.rep_contact_details.phone_ext=item.phoneExt,obj.rep_contact_details.fax_num=item.fax,obj.rep_contact_details.email=item.email,resultList.push(obj)}),resultList}function therapeuticClassToOutput(jsonObj){for(var resultList=[],i=0;i<jsonObj.length;i++)resultList.push(jsonObj[i].name);return resultList}function scheduleAToOutput(jsonObj){var result=createEmptyScheduleAForOutput();result.din_number=jsonObj.drugIdNumber;for(var disorderList=jsonObj.diseaseDisorderList,i=0;i<disorderList.length;i++)switch(disorderList[i].name){case"acute-alcohol":result.acute_alcohol=disorderList[i].value===!0?"Y":"N";break;case"acute-anxiety":result.acute_anxiety=disorderList[i].value===!0?"Y":"N";break;case"acute-infectious":result.acute_infectious=disorderList[i].value===!0?"Y":"N";break;case"acute-inflammatory":result.acute_inflammatory=disorderList[i].value===!0?"Y":"N";break;case"acute-psychotic":result.acute_psychotic=disorderList[i].value===!0?"Y":"N";break;case"addiction":result.addiction=disorderList[i].value===!0?"Y":"N";break;case"ateriosclerosis":result.ateriosclerosis=disorderList[i].value===!0?"Y":"N";break;case"appendicitis":result.appendicitis=disorderList[i].value===!0?"Y":"N";break;case"asthma":result.asthma=disorderList[i].value===!0?"Y":"N";break;case"cancer":result.cancer=disorderList[i].value===!0?"Y":"N";break;case"congest-heart-fail":result.congest_heart_fail=disorderList[i].value===!0?"Y":"N";break;case"convulsions":result.convulsions=disorderList[i].value===!0?"Y":"N";break;case"dementia":result.dementia=disorderList[i].value===!0?"Y":"N";break;case"depression":result.depression=disorderList[i].value===!0?"Y":"N";break;case"diabetes":result.diabetes=disorderList[i].value===!0?"Y":"N";break;case"gangrene":result.gangrene=disorderList[i].value===!0?"Y":"N";break;case"glaucoma":result.glaucoma=disorderList[i].value===!0?"Y":"N";break;case"haematologic-bleeding":result.haematologic_bleeding=disorderList[i].value===!0?"Y":"N";break;case"hepatitis":result.hepatitis=disorderList[i].value===!0?"Y":"N";break;case"hypertension":result.hypertension=disorderList[i].value===!0?"Y":"N";break;case"nausea-pregnancy":result.nausea_pregnancy=disorderList[i].value===!0?"Y":"N";break;case"obesity":result.obesity=disorderList[i].value===!0?"Y":"N";break;case"rheumatic-fever":result.rheumatic_fever=disorderList[i].value===!0?"Y":"N";break;case"septicemia":result.septicemia=disorderList[i].value===!0?"Y":"N";break;case"sex-transmit-disease":result.sex_transmit_disease=disorderList[i].value===!0?"Y":"N";break;case"strangulated-hernia":result.strangulated_hernia=disorderList[i].value===!0?"Y":"N";break;case"thrombotic-embolic-disorder":result.thrombotic_embolic_disorder=disorderList[i].value===!0?"Y":"N";break;case"thyroid-disease":result.thyroid_disease=disorderList[i].value===!0?"Y":"N";break;case"ulcer-gastro":result.ulcer_gastro=disorderList[i].value===!0?"Y":"N"}return result.sched_a_claims_ind_details=jsonObj.scheduleAClaimsIndDetails,result}function createEmptyScheduleAForOutput(){var result={};return result.din_number="",result.acute_alcohol=noValue,result.acute_anxiety=noValue,result.acute_infectious=noValue,result.acute_inflammatory=noValue,result.acute_psychotic=noValue,result.addiction=noValue,result.ateriosclerosis=noValue,result.appendicitis=noValue,result.asthma=noValue,result.cancer=noValue,result.congest_heart_fail=noValue,result.convulsions=noValue,result.dementia=noValue,result.depression=noValue,result.diabetes=noValue,result.gangrene=noValue,result.glaucoma=noValue,result.haematologic_bleeding=noValue,result.hepatitis=noValue,result.hypertension=noValue,result.nausea_pregnancy=noValue,result.obesity=noValue,result.rheumatic_fever=noValue,result.septicemia=noValue,result.sex_transmit_disease=noValue,result.strangulated_hernia=noValue,result.thrombotic_embolic_disorder=noValue,result.thyroid_disease=noValue,result.ulcer_gastro=noValue,result.sched_a_claims_ind_details="",result}function getAppendiceData(appendices){var result={};if(!appendices)return result;for(var i=0;i<appendices.length;i++){var appendix=appendices[i];result[appendix.ingredientName]=i+1}return result}function getAnimalIngredients(formulations){for(var yesValue="Y",allAnimalSourcedNames=[],uniqueList={},i=0;i<formulations.length;i++){var oneFormulation=formulations[i];if(oneFormulation.activeIngList)for(var j=0;j<oneFormulation.activeIngList.length;j++){var oneActive=oneFormulation.activeIngList[j];oneActive.humanAnimalSourced===yesValue&&allAnimalSourcedNames.push(oneActive.ingLabel)}if(oneFormulation.nMedIngList)for(var j=0;j<oneFormulation.nMedIngList.length;j++){var oneActive=oneFormulation.nMedIngList[j];oneActive.humanAnimalSourced===yesValue&&allAnimalSourcedNames.push(oneActive.ingName)}if(oneFormulation.animalHumanMaterials)for(var j=0;j<oneFormulation.animalHumanMaterials.length;j++){var oneActive=oneFormulation.animalHumanMaterials[j];allAnimalSourcedNames.push(oneActive.ingredientName)}}return uniqueList=getUniqueList(allAnimalSourcedNames)}function getMissingAppendices(appendiceList,ingredientJsonList){for(var missingList=[],i=0;i<ingredientJsonList.length;i++)appendiceList.hasOwnProperty(ingredientJsonList[i])?appendiceList[ingredientJsonList[i]]=0:missingList.push(ingredientJsonList[i]);return missingList}function findExtraApppendices(appendixJson){for(var extraList=[],keys=Object.keys(appendixJson),i=0;i<keys.length;i++){var val=appendixJson[keys[i]];val>0&&extraList.push(keys[i])}return extraList}function getUniqueList(arr){for(var u={},a=[],i=0,l=arr.length;i<l;++i)u.hasOwnProperty(arr[i])||(a.push(arr[i]),u[arr[i]]=1);return a}function getDefaultSchedA(){var schedA={};return schedA.drugIdNumber="",schedA.scheduleAClaimsIndDetails="",schedA.diseaseDisorderList=getDefaultDiseaseDisorderList(),schedA}function getDefaultDiseaseDisorderList(){var noModelValue=!1;return[{name:"acute-alcohol",label:"ACUTEALCOHOL",value:noModelValue},{name:"acute-anxiety",label:"ACUTEANXIETY",value:noModelValue},{name:"acute-infectious",label:"ACUTERESP",value:noModelValue},{name:"acute-inflammatory",label:"ACUTEINFLAM",value:noModelValue},{name:"acute-psychotic",label:"ACUTEPSYCHOTIC",value:noModelValue},{name:"addiction",label:"ADDICTION",value:noModelValue},{name:"ateriosclerosis",label:"ATERIOSCLEROSIS",value:noModelValue},{name:"appendicitis",label:"APPENDICITIS",value:noModelValue},{name:"asthma",label:"ASTHMA",value:noModelValue},{name:"cancer",label:"CANCER",value:noModelValue},{name:"congest-heart-fail",label:"HEARTCONGEST",value:noModelValue},{name:"convulsions",label:"CONVULSIONS",value:noModelValue},{name:"dementia",label:"DEMENTIA",value:noModelValue},{name:"depression",label:"DEPRESSION",value:noModelValue},{name:"diabetes",label:"DIABETES",value:noModelValue},{name:"gangrene",label:"GANGRENE",value:noModelValue},{name:"glaucoma",label:"GLAUCOMA",value:noModelValue},{name:"haematologic-bleeding",label:"BLEEDINGDISORDERS",value:noModelValue},{name:"hepatitis",label:"HEPATITIS",value:noModelValue},{name:"hypertension",label:"HYPERTENSION",value:noModelValue},{name:"nausea-pregnancy",label:"NAUSEAPREG",value:noModelValue},{name:"obesity",label:"OBESITY",value:noModelValue},{name:"rheumatic-fever",label:"RHEUMATICFEVER",value:noModelValue},{name:"septicemia",label:"SEPTICEMIA",value:noModelValue},{name:"sex-transmit-disease",label:"SEXDISEASE",value:noModelValue},{name:"strangulated-hernia",label:"STRANGHERNIA",value:noModelValue},{name:"thrombotic-embolic-disorder",label:"THROMBOTICDISORDER",value:noModelValue},{name:"thyroid-disease",label:"THYROIDDISEASE",value:noModelValue},{name:"ulcer-gastro",label:"UCLERGASTRO",value:noModelValue}]}function getDefaultDrugUseList(){var noModelValue=!1,drugUseList=[{name:"human",label:"HUMAN",value:noModelValue},{name:"radio-pharmaceutical",label:"RADIOPHARM",value:noModelValue},{name:"veterinary",label:"VETERINARY",value:noModelValue},{name:"disinfectant",label:"DISINFECTANT",value:noModelValue}];return drugUseList}function loadDrugUseValues(info){for(var drugList=getDefaultDrugUseList(),i=0;i<drugList.length;i++){var rec=drugList[i];switch(rec.name){case"human":rec.value="Y"===info.human_drug_use;break;case"radio-pharmaceutical":rec.value="Y"===info.radiopharm_drug_use;break;case"disinfectant":rec.value="Y"===info.disinfectant_drug_use;break;case"veterinary":rec.value="Y"===info.vet_drug_use}}return drugList}function drugUseValuesToOutput(drugUseArray,outputJson){for(var i=0;i<drugUseArray.length;i++){var rec=drugUseArray[i];switch(rec.name){case"human":outputJson.human_drug_use=rec.value===!0?"Y":"N";break;case"radio-pharmaceutical":outputJson.radiopharm_drug_use=rec.value===!0?"Y":"N";break;case"disinfectant":outputJson.disinfectant_drug_use=rec.value===!0?"Y":"N";break;case"veterinary":outputJson.vet_drug_use=rec.value===!0?"Y":"N"}}}function createEmptyAnimalSourceForOutput(){var record={};return record.animal_src_record=[],record.is_controlled_pop="",record.is_biotech_derived="",record.is_cell_line="",record.animal_age="",record.country_origin_list={},record.country_origin_list.country_origin=[],record}function createEmptyAnimalSourceModel(){var record={};return record.animalSrcList=[],record.isCellLine="",record.isBiotechDerived="",record.isControlledPop="",record.ageAnimals="",record.countryList=[],record}function _createEmptyNervousSystemModel(){var record={};return record.brain=!1,record.brainStem=!1,record.cerebellum=!1,record.ceroFluid=!1,record.dorsalRoot=!1,record.duraMater=!1,record.hypothalamus=!1,record.retina=!1,record.spinalCord=!1,record.trigeminal=!1,record.otherNervous=!1,record.otherDetails="",record}function _createEmptyDigestiveSystemModel(){var record={};return record.appendix=!1,record.bile=!1,record.distalIleum=!1,record.largeIntestine=!1,record.salivaSalivary=!1,record.smallIntestine=!1,record.stomach=!1,record.otherDigestive=!1,record.otherDetails="",record}function _createEmptyImmuneSystemModel(){var record={};return record.lymphNodes=!1,record.spleen=!1,record.thymus=!1,record.tonsils=!1,record.otherImmune=!1,record.otherDetails="",record}function _createEmptyMuscleSystemModel(){var record={};return record.abdomen=!1,record.skull=!1,record.bones=!1,record.collagen=!1,record.tendonsLigaments=!1,record.vertebralColumn=!1,record.muscle=!1,record.otherMuscle=!1,record.otherDetails="",record}function _createEmptyReproductiveSystemModel(){var record={};return record.milkProducts=!1,record.kidney=!1,record.colostrum=!1,record.mammaryGlands=!1,record.ovaries=!1,record.placenta=!1,record.placentalFluid=!1,record.semen=!1,record.testes=!1,record.urine=!1,record.otherReproductive=!1,record.otherDetails="",record}function _createEmptySkinSystemModel(){var record={};return record.adrenalGland=!1,record.hairHoovesFeathers=!1,record.liver=!1,record.pancreas=!1,record.pituitary=!1,record.skinHides=!1,record.thyroidParathyroid=!1,record.otherSkin=!1,record.otherDetails="",record}function _createEmptyOtherSystemModel(){var record={};return record.adipose=!1,record.ascites=!1,record.antlerVelvet=!1,record.serum=!1,record.wholeBlood=!1,record.plasma=!1,record.embryonicTissue=!1,record.fetalTissue=!1,record.boneMarrow=!1,record.eyesCornea=!1,record.gallBladder=!1,record.otherFluids=!1,record.otherDetails="",record}function _createEmptyCardioSystemModel(){var record={};return record.heartPericardium=!1,record.lung=!1,record.nasalFluid=!1,record.trachea=!1,record.otherCardio=!1,record.otherDetails="",record}function _createEmptyNervousSystemforOutput(){var record={};return record.brain=noValue,record.brain_stem=noValue,record.cerebellum=noValue,record.cerebrospinal_fluid=noValue,record.dorsal_root_ganglia=noValue,record.dura_mater=noValue,record.hypothalamus=noValue,record.retina_optic=noValue,record.spinal_cord=noValue,record.trigerminal_ganglia=noValue,record.other_nervous=noValue,record.other_nervous_details="",record}function _createEmptyDigestiveSystemforOutput(){var record={};return record.appendix=noValue,record.bile=noValue,record.distal_ileum=noValue,record.large_intestine=noValue,record.saliva_salivary=noValue,record.small_intestine=noValue,record.stomach=noValue,record.other_digestive=noValue,record.other_digestive_details="",record}function _createEmptyMuscleSystemforOutput(){var record={};return record.abdomen=noValue,record.skull=noValue,record.bones=noValue,record.collagen=noValue,record.tendons_ligaments=noValue,record.vertebral_column=noValue,record.muscle=noValue,record.other_musculo_skeletal=noValue,record.other_musculo_skeletal_details="",record}function _createEmptyReproductiveSystemforOutput(){var record={};return record.milk_products=noValue,record.kidney=noValue,record.colostrum=noValue,record.mammary_glands=noValue,record.ovaries=noValue,record.placenta=noValue,record.placental_fluid=noValue,record.semen=noValue,record.testes=noValue,record.urine=noValue,record.other_reproductive=noValue,record.other_reproductive_details="",record}function _createEmptyCardioSystemforOutput(){var record={};return record.heart_pericardium=noValue,record.lung=noValue,record.nasal_fluid=noValue,record.trachea=noValue,record.other_cardio_respiratory=noValue,record.other_cardio_respiratory_details="",record}function _createEmptyImmuneSystemforOutput(){var record={};return record.lymph_nodes=noValue,record.spleen=noValue,record.thymus=noValue,record.tonsils=noValue,record.other_immune=noValue,record.other_immune_details="",record}function _createEmptySkinSystemforOutput(){var record={};return record.adrenal_gland=noValue,record.hair_hooves_feathers=noValue,record.liver=noValue,record.pancreas=noValue,record.pituitary=noValue,record.skin_hides=noValue,record.thyroid_parathyroid=noValue,record.other_skin_glandular=noValue,record.other_skin_glandular_details="",record}function _createEmptyOtherSystemforOutput(){var record={};return record.adipose=noValue,record.ascites=noValue,record.antler_velvet=noValue,record.serum=noValue,record.whole_blood=noValue,record.plasma=noValue,record.embryonic_tissue=noValue,record.fetal_tissue=noValue,record.bone_marrow=noValue,record.eyes_cornea=noValue,record.gall_bladder=noValue,record.other_fluids_tissues=noValue,record.other_fluids_tissues_details="",record}function _nervousSystemToOutput(jsonObj){var record=_createEmptyNervousSystemforOutput();return record.brain=jsonObj.brain===!0?yesValue:noValue,record.brain_stem=jsonObj.brainStem===!0?yesValue:noValue,record.cerebellum=jsonObj.cerebellum===!0?yesValue:noValue,record.cerebrospinal_fluid=jsonObj.ceroFluid===!0?yesValue:noValue,record.dorsal_root_ganglia=jsonObj.dorsalRoot===!0?yesValue:noValue,record.dura_mater=jsonObj.duraMater===!0?yesValue:noValue,record.hypothalamus=jsonObj.hypothalamus===!0?yesValue:noValue,record.retina_optic=jsonObj.retina===!0?yesValue:noValue,record.spinal_cord=jsonObj.spinalCord===!0?yesValue:noValue,record.trigerminal_ganglia=jsonObj.trigeminal===!0?yesValue:noValue,record.other_nervous=jsonObj.otherNervous===!0?yesValue:noValue,record.other_nervous_details=jsonObj.otherDetails,record}function _digestiveSystemToOutput(jsonObj){var record=_createEmptyDigestiveSystemforOutput();return record.appendix=jsonObj.appendix===!0?yesValue:noValue,record.bile=jsonObj.bile===!0?yesValue:noValue,record.distal_ileum=jsonObj.distalIleum===!0?yesValue:noValue,record.large_intestine=jsonObj.largeIntestine===!0?yesValue:noValue,record.saliva_salivary=jsonObj.salivaSalivary===!0?yesValue:noValue,record.small_intestine=jsonObj.smallIntestine===!0?yesValue:noValue,record.stomach=jsonObj.stomach===!0?yesValue:noValue,record.other_digestive=jsonObj.otherDigestive===!0?yesValue:noValue,record.other_digestive_details=jsonObj.otherDetails,record}function _muscleSystemToOutput(jsonObj){var record=_createEmptyMuscleSystemforOutput();return record.abdomen=jsonObj.abdomen===!0?yesValue:noValue,record.skull=jsonObj.skull===!0?yesValue:noValue,record.bones=jsonObj.bones===!0?yesValue:noValue,record.collagen=jsonObj.collagen===!0?yesValue:noValue,record.tendons_ligaments=jsonObj.tendonsLigaments===!0?yesValue:noValue,record.vertebral_column=jsonObj.vertebralColumn===!0?yesValue:noValue,record.muscle=jsonObj.muscle===!0?yesValue:noValue,record.other_musculo_skeletal=jsonObj.otherMuscle===!0?yesValue:noValue,record.other_musculo_skeletal_details=jsonObj.otherDetails,record}function _reproductiveSystemToOutput(jsonObj){var record=_createEmptyReproductiveSystemforOutput();return record.milk_products=jsonObj.milkProducts===!0?yesValue:noValue,record.kidney=jsonObj.kidney===!0?yesValue:noValue,record.colostrum=jsonObj.colostrum===!0?yesValue:noValue,record.mammary_glands=jsonObj.mammaryGlands===!0?yesValue:noValue,record.ovaries=jsonObj.ovaries===!0?yesValue:noValue,record.placenta=jsonObj.placenta===!0?yesValue:noValue,record.placental_fluid=jsonObj.placentalFluid===!0?yesValue:noValue,record.semen=jsonObj.semen===!0?yesValue:noValue,record.testes=jsonObj.testes===!0?yesValue:noValue,record.urine=jsonObj.urine===!0?yesValue:noValue,record.other_reproductive=jsonObj.otherReproductive===!0?yesValue:noValue,record.other_reproductive_details=jsonObj.otherDetails,record}function _cardioSystemToOutput(jsonObj){var record=_createEmptyCardioSystemforOutput();return record.heart_pericardium=jsonObj.heartPericardium===!0?yesValue:noValue,record.lung=jsonObj.lung===!0?yesValue:noValue,record.nasal_fluid=jsonObj.nasalFluid===!0?yesValue:noValue,record.trachea=jsonObj.trachea===!0?yesValue:noValue,record.other_cardio_respiratory=jsonObj.otherCardio===!0?yesValue:noValue,record.other_cardio_respiratory_details=jsonObj.otherDetails,record}function _immuneSystemToOutput(jsonObj){var record=_createEmptyImmuneSystemforOutput();return record.lymph_nodes=jsonObj.lymphNodes===!0?yesValue:noValue,record.spleen=jsonObj.spleen===!0?yesValue:noValue,record.thymus=jsonObj.thymus===!0?yesValue:noValue,record.tonsils=jsonObj.tonsils===!0?yesValue:noValue,record.other_immune=jsonObj.otherImmune===!0?yesValue:noValue,record.other_immune_details=jsonObj.otherDetails,record}function _otherSystemToOutput(jsonObj){var record=_createEmptyOtherSystemforOutput();return record.adipose=jsonObj.adipose===!0?yesValue:noValue,record.ascites=jsonObj.ascites===!0?yesValue:noValue,record.antler_velvet=jsonObj.antlerVelvet===!0?yesValue:noValue,record.serum=jsonObj.serum===!0?yesValue:noValue,record.whole_blood=jsonObj.wholeBlood===!0?yesValue:noValue,record.plasma=jsonObj.plasma===!0?yesValue:noValue,record.embryonic_tissue=jsonObj.embryonicTissue===!0?yesValue:noValue,record.fetal_tissue=jsonObj.fetalTissue===!0?yesValue:noValue,record.bone_marrow=jsonObj.boneMarrow===!0?yesValue:noValue,record.eyes_cornea=jsonObj.eyesCornea===!0?yesValue:noValue,record.gall_bladder=jsonObj.gallBladder===!0?yesValue:noValue,record.other_fluids_tissues=jsonObj.otherFluids===!0?yesValue:noValue,record.other_fluids_tissues_details=jsonObj.otherDetails,record}function _skinSystemToOutput(jsonObj){var record=_createEmptySkinSystemforOutput();return record.adrenal_gland=jsonObj.adrenalGland===!0?yesValue:noValue,record.hair_hooves_feathers=jsonObj.hairHoovesFeathers===!0?yesValue:noValue,record.liver=jsonObj.liver===!0?yesValue:noValue,record.pancreas=jsonObj.pancreas===!0?yesValue:noValue,record.pituitary=jsonObj.pituitary===!0?yesValue:noValue,record.skin_hides=jsonObj.skinHides===!0?yesValue:noValue,record.thyroid_parathyroid=jsonObj.thyroidParathyroid===!0?yesValue:noValue,record.other_skin_glandular=jsonObj.otherSkin===!0?yesValue:noValue,record.other_skin_glandular_details=jsonObj.otherDetails,record}function _createEmptyTissuesSystemRecord(){return{id:"",systemType:"",detailsConcat:"",system:{},otherDetails:""}}function _getTissuesFluidsModel(json){var result=[],index=1;if(angular.isUndefined(json))return result;if(json.cardio_system){var record=_createEmptyTissuesSystemRecord();record.id=index,index++,record.systemType=DossierLists.getCardioSystemValue(),record.system=_getCardioModel(json.cardio_system),record.otherDetails=record.system.otherDetails,record.detailsConcat=_getConcatTissues(record.system),result.push(record)}if(json.digestive_system){var record=_createEmptyTissuesSystemRecord();record.id=index,index++,record.systemType=DossierLists.getDigestiveSystemValue(),record.system=_getDigestiveModel(json.digestive_system),record.otherDetails=record.system.otherDetails,record.detailsConcat=_getConcatTissues(record.system),result.push(record)}if(json.immune_system){var record=_createEmptyTissuesSystemRecord();record.id=index,index++,record.systemType=DossierLists.getImmuneSystemValue(),record.system=_getImmuneModel(json.immune_system),record.otherDetails=record.system.otherDetails,record.detailsConcat=_getConcatTissues(record.system),result.push(record)}if(json.musculo_system){
var record=_createEmptyTissuesSystemRecord();record.id=index,index++,record.systemType=DossierLists.getMuscleSystemValue(),record.system=_getMuscleSystemModel(json.musculo_system),record.otherDetails=record.system.otherDetails,record.detailsConcat=_getConcatTissues(record.system),result.push(record)}if(json.nervous_system){var record=_createEmptyTissuesSystemRecord();record.id=index,index++,record.systemType=DossierLists.getNervousSystemValue(),record.system=_getNervousModel(json.nervous_system),record.otherDetails=record.system.otherDetails,record.detailsConcat=_getConcatTissues(record.system),result.push(record)}if(json.other_system){var record=_createEmptyTissuesSystemRecord();record.id=index,index++,record.systemType=DossierLists.getOtherTissuesSystemValue(),record.system=_getOtherSystemModel(json.other_system),record.otherDetails=record.system.otherDetails,record.detailsConcat=_getConcatTissues(record.system),result.push(record)}if(json.reproductive_system){var record=_createEmptyTissuesSystemRecord();record.id=index,index++,record.systemType=DossierLists.getReproductiveSystemValue(),record.system=_getReproductiveModel(json.reproductive_system),record.otherDetails=record.system.otherDetails,record.detailsConcat=_getConcatTissues(record.system),result.push(record)}if(json.skin_system){var record=_createEmptyTissuesSystemRecord();record.id=index,index++,record.systemType=DossierLists.getSkinSystemValue(),record.system=_getSkinModel(json.skin_system),record.otherDetails=record.system.otherDetails,record.detailsConcat=_getConcatTissues(record.system),result.push(record)}return result}function _getCardioModel(json){var model=_createEmptyCardioSystemModel();return model.heartPericardium=json.heart_pericardium===yesValue,model.lung=json.lung===yesValue,model.nasalFluid=json.nasal_fluid===yesValue,model.trachea=json.trachea===yesValue,model.otherCardio=json.other_cardio_respiratory===yesValue,model.otherDetails=json.other_cardio_respiratory_details,model}function _getNervousModel(json){var model=_createEmptyNervousSystemModel();return model.brain=json.brain===yesValue,model.brainStem=json.brain_stem===yesValue,model.cerebellum=json.cerebellum===yesValue,model.ceroFluid=json.cerebrospinal_fluid===yesValue,model.dorsalRoot=json.dorsal_root_ganglia===yesValue,model.duraMater=json.dura_mater===yesValue,model.hypothalamus=json.hypothalamus===yesValue,model.retina=json.retina_optic===yesValue,model.spinalCord=json.spinal_cord===yesValue,model.trigeminal=json.trigerminal_ganglia===yesValue,model.otherNervous=json.other_nervous===yesValue,model.otherDetails=json.other_nervous_details,model}function _getReproductiveModel(json){var model=_createEmptyReproductiveSystemModel();return model.milkProducts=json.milk_products===yesValue,model.kidney=json.kidney===yesValue,model.colostrum=json.colostrum===yesValue,model.mammaryGlands=json.mammary_glands===yesValue,model.ovaries=json.ovaries===yesValue,model.placenta=json.placenta===yesValue,model.placentalFluid=json.placental_fluid===yesValue,model.semen=json.semen===yesValue,model.testes=json.testes===yesValue,model.urine=json.urine===yesValue,model.otherReproductive=json.other_reproductive===yesValue,model.otherDetails=json.other_reproductive_details,model}function _getSkinModel(json){var model=_createEmptySkinSystemModel();return model.adrenalGland=json.adrenal_gland===yesValue,model.hairHoovesFeathers=json.hair_hooves_feathers===yesValue,model.liver=json.liver===yesValue,model.pancreas=json.pancreas===yesValue,model.pituitary=json.pituitary===yesValue,model.skinHides=json.skin_hides===yesValue,model.thyroidParathyroid=json.thyroid_parathyroid===yesValue,model.otherSkin=json.other_skin_glandular===yesValue,model.otherDetails=json.other_skin_glandular_details,model}function _getImmuneModel(json){var model=_createEmptyImmuneSystemModel();return model.lymphNodes=json.lymph_nodes===yesValue,model.spleen=json.spleen===yesValue,model.thymus=json.thymus===yesValue,model.tonsils=json.tonsils===yesValue,model.otherImmune=json.other_immune===yesValue,model.otherDetails=json.other_immune_details,model}function _getDigestiveModel(json){var model=_createEmptyDigestiveSystemModel();return model.appendix=json.appendix===yesValue,model.bile=json.bile===yesValue,model.distalIleum=json.distal_ileum===yesValue,model.largeIntestine=json.large_intestine===yesValue,model.salivaSalivary=json.saliva_salivary===yesValue,model.smallIntestine=json.small_intestine===yesValue,model.stomach=json.stomach===yesValue,model.otherDigestive=json.other_digestive===yesValue,model.otherDetails=json.other_digestive_details,model}function _getOtherSystemModel(json){var model=_createEmptyOtherSystemModel();return model.adipose=json.adipose===yesValue,model.ascites=json.ascites===yesValue,model.antlerVelvet=json.antler_velvet===yesValue,model.serum=json.serum===yesValue,model.wholeBlood=json.whole_blood===yesValue,model.plasma=json.plasma===yesValue,model.embryonicTissue=json.embryonic_tissue===yesValue,model.fetalTissue=json.fetal_tissue===yesValue,model.boneMarrow=json.bone_marrow===yesValue,model.eyesCornea=json.eyes_cornea===yesValue,model.gallBladder=json.gall_bladder===yesValue,model.otherFluids=json.other_fluids_tissues===yesValue,model.otherDetails=json.other_fluids_tissues_details,model}function _getMuscleSystemModel(json){var model=_createEmptyMuscleSystemModel();return model.abdomen=json.abdomen===yesValue,model.skull=json.skull===yesValue,model.bones=json.bones===yesValue,model.collagen=json.collagen===yesValue,model.tendonsLigaments=json.tendons_ligaments===yesValue,model.vertebralColumn=json.vertebral_column===yesValue,model.muscle=json.muscle===yesValue,model.otherMuscle=json.other_musculo_skeletal===yesValue,model.otherDetails=json.other_musculo_skeletal_details,model}function _getConcatTissues(json){var labelLookup=DossierLists.getTissuesFluidsLabels(),result="",markupBreak="<br>";if(angular.isUndefined(json))return result;for(var keys=Object.keys(json),i=0;i<keys.length;i++){var val=json[keys[i]];if(val){var alias=labelLookup[keys[i]];if(alias){var currentLang=$translate.proposedLanguage()||$translate.use(),translateText=$translate.instant(alias,"","",currentLang);result=result+translateText+markupBreak}}}return keys.length>0&&(result=result.substring(0,result.length-markupBreak.length)),result}var yesValue="Y",noValue="N";return DossierService.prototype={_default:{dossierID:"",companyID:"",relatedDossierID:"",enrolmentVersion:"0.00",dateSaved:"",applicationType:"NEW",softwareVersion:"1.0.0",dataChecksum:"",dossierType:"",productName:"",properName:"",isRefProducts:"",drugProduct:{thirdPartySigned:"",drugUseList:getDefaultDrugUseList(),isScheduleA:!1,scheduleAGroup:getDefaultSchedA(),therapeutic:[],canRefProducts:[],formulations:[],appendixFourList:[]},contactList:[]},getDefaultObject:function(){return this._default},loadFromFile:function(info){if(!info)return this._default;if(!info.DOSSIER_ENROL)return this._default;info=info.DOSSIER_ENROL;var dossierModel={dossierID:info.dossier_id,companyID:info.company_id,relatedDossierID:info.related_dossier_id,enrolmentVersion:info.enrolment_version,dateSaved:info.date_saved,applicationType:info.application_type,softwareVersion:info.software_version,dataChecksum:info.data_checksum,dossierType:info.dossier_type,productName:info.brand_name,properName:info.common_name,isRefProducts:info.is_ref_products,drugProduct:{thirdPartySigned:info.third_party_signed,drugUseList:loadDrugUseValues(info),isScheduleA:"Y"===info.is_sched_a,therapeutic:[],canRefProducts:getCanRefProductList(info.ref_product_list.cdn_ref_product),formulations:getFormulationList(info.formulation_group.formulation_details),appendixFourList:getAppendix4IngredientList(info.appendix4_group)},contactList:getContactList(info.contact_record)};return info.therapeutic_class_list.therapeutic_class&&(dossierModel.drugProduct.therapeutic=getTherapeuticList(info.therapeutic_class_list.therapeutic_class)),dossierModel.drugProduct.scheduleAGroup=getDefaultSchedA(),info.schedule_a_group&&(dossierModel.drugProduct.scheduleAGroup.drugIdNumber=info.schedule_a_group.din_number,dossierModel.drugProduct.scheduleAGroup.scheduleAClaimsIndDetails=info.schedule_a_group.sched_a_claims_ind_details,getDiseaseDisorderList(info.schedule_a_group,dossierModel.drugProduct.scheduleAGroup.diseaseDisorderList)),dossierModel}},DossierService.prototype.dossierToOutput=function(jsonObj){if(!jsonObj)return null;var baseDossier={};if(baseDossier.company_id=jsonObj.companyID,baseDossier.dossier_id=jsonObj.dossierID,baseDossier.related_dossier_id=jsonObj.relatedDossierID,baseDossier.enrolment_version=jsonObj.enrolmentVersion,baseDossier.date_saved=jsonObj.dateSaved,baseDossier.application_type=jsonObj.applicationType,baseDossier.software_version="1.0.0",baseDossier.data_checksum="",jsonObj.contactList&&(baseDossier.contact_record=repContactToOutput(jsonObj.contactList)),baseDossier.dossier_type=jsonObj.dossierType,baseDossier.brand_name=jsonObj.productName,baseDossier.common_name=jsonObj.properName,baseDossier.third_party_signed=jsonObj.drugProduct.thirdPartySigned,baseDossier.is_ref_products=jsonObj.isRefProducts,baseDossier.ref_product_list={},baseDossier.human_drug_use="N",baseDossier.radiopharm_drug_use="N",baseDossier.vet_drug_use="N",baseDossier.disinfectant_drug_use="N",drugUseValuesToOutput(jsonObj.drugProduct.drugUseList,baseDossier),baseDossier.therapeutic_class_list={},baseDossier.is_sched_a=jsonObj.drugProduct.isScheduleA===!0?"Y":"N",jsonObj.drugProduct.therapeutic&&jsonObj.drugProduct.therapeutic.length>0&&(baseDossier.therapeutic_class_list.therapeutic_class=therapeuticClassToOutput(jsonObj.drugProduct.therapeutic)),jsonObj.drugProduct.canRefProducts&&jsonObj.drugProduct.canRefProducts.length>0&&(baseDossier.ref_product_list.cdn_ref_product=canRefProductListToOutput(jsonObj.drugProduct.canRefProducts)),jsonObj.drugProduct.isScheduleA&&(baseDossier.schedule_a_group=scheduleAToOutput(jsonObj.drugProduct.scheduleAGroup)),jsonObj.drugProduct){var appendix4=appendix4IngredientListToOutput(jsonObj.drugProduct.appendixFourList);appendix4&&appendix4.length>0&&(baseDossier.appendix4_group=appendix4);var formulations=formulationListToOutput(jsonObj.drugProduct.formulations);baseDossier.formulation_group={},formulations&&(baseDossier.formulation_group.formulation_details=formulations)}return{DOSSIER_ENROL:baseDossier}},DossierService.prototype.getMissingAppendix4=function(dossierModel){var missingAppendices=[],extraAppendices=[],results={};if(!dossierModel||!dossierModel.drugProduct)return missingAppendices;var appendices=getAppendiceData(dossierModel.drugProduct.appendixFourList),ingredients=getAnimalIngredients(dossierModel.drugProduct.formulations);return missingAppendices=getMissingAppendices(appendices,ingredients),extraAppendices=findExtraApppendices(appendices),results.missing=missingAppendices,results.extra=extraAppendices,results},DossierService.prototype.getDefaultDiseaseDisorderList=function(){return getDefaultDiseaseDisorderList()},DossierService.prototype.getDefaultNervousSystem=function(){return _createEmptyNervousSystemModel()},DossierService.prototype.getDefaultImmuneSystem=function(){return _createEmptyImmuneSystemModel()},DossierService.prototype.getDefaultDigestiveSystem=function(){return _createEmptyDigestiveSystemModel()},DossierService.prototype.getDefaultMuscleSystem=function(){return _createEmptyMuscleSystemModel()},DossierService.prototype.getDefaultOtherSystem=function(){return _createEmptyOtherSystemModel()},DossierService.prototype.getDefaultReproductiveSystem=function(){return _createEmptyReproductiveSystemModel()},DossierService.prototype.getDefaultCardioSystem=function(){return _createEmptyCardioSystemModel()},DossierService.prototype.getDefaultSkinSystem=function(){return _createEmptySkinSystemModel()},DossierService.prototype.getDefaultScheduleA=function(){return getDefaultSchedA()},DossierService.prototype.getRootTagName=function(){return"DOSSIER_ENROL"},DossierService}angular.module("dossierService").factory("DossierService",DossierService),DossierService.$inject=["DossierLists","$translate","$filter","getCountryAndProvinces","OTHER","UNKNOWN"]}(),function(){"use strict";angular.module("dossierLoadModule",["dataLists","dossierDataLists","hpfbConstants"])}(),function(){"use strict";angular.module("dossierLoadModule").factory("customLoad",["$http","$q","$filter","getCountryAndProvinces","DossierLists","OTHER",function($http,$q,$filter,getCountryAndProvinces,DossierLists,OTHER){function _createTranslateList(jsonList,lang){lang||(lang="en");for(var resultList={},i=0;i<jsonList.length;i++)resultList[jsonList[i].id]=jsonList[i][lang];return resultList}function _createNewSortedArrayWithOther(jsonList,prefix,lang){var newList=_createNewPrefixList(jsonList,prefix);lang||(lang="en");var result=_createSortedArray(newList,lang);return result.unshift({id:OTHER,en:"Other",fr:"Autre"}),result}function _createSortedArray(jsonList,lang){var result=[];return angular.forEach($filter("orderByLocale")(jsonList,lang),function(sortedObject){sortedObject.key!==OTHER&&result.push(sortedObject)}),result}function _createNewPrefixList(jsonList,prefix){for(var newList=[],i=0;i<jsonList.length;i++){var newRec=angular.copy(jsonList[i]);newRec.id=prefix+newRec.id,newList.push(newRec)}return newList}return function(options){var deferred=$q.defer(),dataFolder="data/",roaUrl=dataFolder+"roa.json",countryUrl=dataFolder+"countries.json",nanoUrl="data/nanomaterials.json",unitsUrl=dataFolder+"units.json",dosageFormUrl=dataFolder+"dosageForm.json",resultTranslateList={};return $http.get(unitsUrl).then(function(response){var newList=_createNewSortedArrayWithOther(response.data,DossierLists.getUnitsPrefix(),options.key);return DossierLists.createUnitsList(newList),$http.get(countryUrl)}).then(function(response){var newList=_createSortedArray(response.data,options.key),translateList=_createTranslateList(newList,options.key);return getCountryAndProvinces.createCountryList(newList),angular.extend(resultTranslateList,translateList),$http.get(nanoUrl)}).then(function(response){var newList=_createNewSortedArrayWithOther(response.data,DossierLists.getNanoPrefix(),options.key),translateList=_createTranslateList(newList,options.key);return DossierLists.createNanomaterialList(newList),angular.extend(resultTranslateList,translateList),$http.get(dosageFormUrl)}).then(function(response){var newList=_createNewSortedArrayWithOther(response.data,DossierLists.getDosageFormPrefix(),options.key),translateList=_createTranslateList(newList,options.key);return DossierLists.createDosageFormList(newList),angular.extend(resultTranslateList,translateList),$http.get("data/activeIngred.json")}).then(function(response){return DossierLists.setActiveList(response.data),$http.get(roaUrl)}).then(function(response){var newList=_createNewSortedArrayWithOther(response.data,DossierLists.getRoaPrefix(),options.key),translateList=_createTranslateList(newList,options.key);return DossierLists.createRoaList(newList),angular.extend(resultTranslateList,translateList),response.data})["catch"](function(error){console.warn("An error occurred with Dossier List Load: "+error),deferred.reject(resultTranslateList)})["finally"](function(){deferred.resolve(resultTranslateList)}),deferred.promise}}])}(),function(){"use strict";angular.module("dossierDataLists",[])}(),function(){"use strict";function getService(){function _setActiveArray(data){vm.activeList=data}function _getActiveArray(){return vm.activeList}function getDoseOtherValue(){return OTHER}function getYesValue(){return YES}function getUnknownValue(){return"UNLKNOWN"}function getOtherValue(){return getDoseOtherValue()}function _createNanoArray(translateJson){vm.nanoList=translateJson}function _createDosageFormArray(translateJson){vm.dosageFormList=translateJson}function _createRoaArray(translateJson){vm.roaList=translateJson}function _createUnitsArray(translateJson){vm.unitsList=translateJson}function _getUnitsArray(){return vm.unitsList}function _getRoaListPrefix(){return"ROA_"}function _getDosagePrefix(){return"DOSFORM_"}function _getUnitsPrefix(){return"UNITS_"}function _getNanoPrefix(){return"NANOMAT_"}function getDosageFormsArray(){return vm.dosageFormList}function getNanoMaterialArray(){return vm.nanoList}function getRoaArray(){return vm.roaList}function yesNoArray(){return["Y","N"]}function yesNoUnknownArray(){return["Y","N","UNKNOWN"]}function animalSourcesArray(){return["NONHUMANPRIMATE_TYPE","AQUATIC_TYPE","AVIAN_TYPE","BOVINE_TYPE","CANINE_TYPE","CAPRINE_TYPE","CERVIDAE_TYPE","EQUINE_TYPE","FELINE_TYPE","OVINE_TYPE","PORCINE_TYPE","RODENT_TYPE","OTHERANIMAL_TYPE"]}function tissuesSystemArray(){return[_getDigestiveSystemValue(),_getNervousSystemValue(),_getReproductiveSystemValue(),_getCardioSystemValue(),_getImmuneSystemValue(),_getSkinSystemValue(),_getMuscleSystemValue(),_getOtherTissuesSystemValue()]}function _getDigestiveSystemValue(){return"DIGESTIVE_SYSTEM"}function _getNervousSystemValue(){return"NERVOUS_SYSTEM"}function _getReproductiveSystemValue(){return"REPRODUCT_SYSTEM"}function _getCardioSystemValue(){return"CARDIO_SYSTEM"}function _getImmuneSystemValue(){return"IMMUNE_SYSTEM"}function _getSkinSystemValue(){return"SKINGLAND_SYSTEM"}function _getMuscleSystemValue(){return"MUSCULO_SYSTEM"}function _getOtherTissuesSystemValue(){return"OTHERTISSUE_SYSTEM"}function nervousSystemArray(){return["BRAIN","BRAINSTEM","CEREBELLUM","CEROFLUID","DORSALROOT","DURAMATER","HYPOTHALAMUS","RETINA","SPINALCORD","TRIGEMINAL","NERVOUS_OTHER"]}function digestiveSystemArray(){return["APPENDIX","BILE","DISTALILEUM","LARGEINTEST","SALIVA","SMALLINTESTINE","STOMACH","DIGESTIVE_OTHER"]}function reprodSystemArray(){return["MILK","KIDNEY","COLOSTRUM","MAMMARY","OVARIES","PLACENTA","PLACENTAFLUID","SEMEN","TESTES","URINE","REPROD_OTHER"]}function cardioSystemArray(){return["HEART","LUNG","NASALFLUID","TRACHEA","PLACENTALFLUID","CARDIO_OTHER"]}function immuneSystemArray(){return["LYMPH","SPLEEN","THYMUS","TONSILS","IMMUNE_OTHER"]}function skinSystemArray(){return["ADRENAL","HAIR","LIVER","PANCREAS","PITUARYGLAND","SKINHIDES","THYROID","SKIN_OTHER"]}function muscleSystemArray(){return["ABDOMEN","SKULL","BONES","COLLAGEN","TENDONS","VERTEBRALCOLUMN","MUSCLE_OTHER"]}function otherSystemArray(){return["ADIPOSE","ASCITES","ANTLERV","SERUM","WHOLEBLOOD","PLASMA","EMBRYONICTISS","FETALTISS","BONEMARROW","EYESCORNEA","GALL","FLUIDS_OTHER"]}function _getTissuesFluidsLabels(){return{brain:"BRAIN",brainStem:"BRAINSTEM",cerebellum:"CEREBELLUM",ceroFluid:"CEROFLUID",dorsalRoot:"DORSALROOT",duraMater:"DURAMATER",hypothalmus:"HYPOTHALAMUS",retina:"RETINA",spinalCord:"SPINALCORD",trigeminal:"TRIGEMINAL",appendix:"APPENDIX",bile:"BILE",distalIleum:"DISTALILEUM",largeIntestine:"LARGEINTEST",salivaSalivary:"SALIVA",smallIntestine:"SMALLINTESTINE",stomach:"STOMACH",milkProducts:"MILK",kidney:"KIDNEY",colostrum:"COLOSTRUM",mammaryGlands:"MAMMARY",ovaries:"OVARIES",placenta:"PLACENTA",placentalFluid:"PLACENTAFLUID",semen:"SEMEN",testes:"TESTES",urine:"URINE",heartPericardium:"HEART",lung:"LUNG",nasalFluid:"NASALFLUID",trachea:"TRACHEA",lymphNodes:"LYMPH",spleen:"SPLEEN",thymus:"THYMUS",tonsils:"TONSILS",adrenalGland:"ADRENAL",hairHoovesFeathers:"HAIR",liver:"LIVER",pancreas:"PANCREAS",pituitary:"PITUARYGLAND",skinHides:"SKINHIDES",thyroidParathyroid:"THYROID",abdomen:"ABDOMEN",skull:"SKULL",bones:"BONES",collagen:"COLLAGEN",tendonsLigaments:"TENDONS",vertebralColumn:"VERTEBRALCOLUMN",muscle:"MUSCLE",adipose:"ADIPOSE",ascites:"ASCITES",antlerVelvet:"ANTLERV",serum:"SERUM",wholeBlood:"WHOLEBLOOD",plasma:"PLASMA",embryonicTissue:"EMBRYONICTISS",fetalTissue:"FETALTISS",boneMarrow:"BONEMARROW",eyesCornea:"EYESCORNEA",gallBladder:"GALL"}}var OTHER="OTHER",YES="Y",vm=this;vm.roaList=[],vm.nanoList=[],vm.dosageFormList=[],vm.activeList=[],vm.unitsList=[];var service={setActiveList:_setActiveArray,getActiveList:_getActiveArray,createRoaList:_createRoaArray,createUnitsList:_createUnitsArray,createNanomaterialList:_createNanoArray,createDosageFormList:_createDosageFormArray,getDosageFormList:getDosageFormsArray,getUnitsList:_getUnitsArray,getDosageOther:getDoseOtherValue,getNanoMaterials:getNanoMaterialArray,getRoa:getRoaArray,getOtherValue:getOtherValue,getUnknownValue:getUnknownValue,getYesNoList:yesNoArray,getYesNoUnknownList:yesNoUnknownArray,getAnimalSources:animalSourcesArray,getTissuesSystem:tissuesSystemArray,getNervousSystem:nervousSystemArray,getDigestiveSystem:digestiveSystemArray,getImmuneSystem:immuneSystemArray,getSkinSystem:skinSystemArray,getReprodSystem:reprodSystemArray,getOtherSystem:otherSystemArray,getMuscleSystem:muscleSystemArray,getCardioSystem:cardioSystemArray,getDigestiveSystemValue:_getDigestiveSystemValue,getNervousSystemValue:_getNervousSystemValue,getReproductiveSystemValue:_getReproductiveSystemValue,getCardioSystemValue:_getCardioSystemValue,getImmuneSystemValue:_getImmuneSystemValue,getSkinSystemValue:_getSkinSystemValue,getMuscleSystemValue:_getMuscleSystemValue,getOtherTissuesSystemValue:_getOtherTissuesSystemValue,getYesValue:getYesValue,getTissuesFluidsLabels:_getTissuesFluidsLabels,getRoaPrefix:_getRoaListPrefix,getDosageFormPrefix:_getDosagePrefix,getUnitsPrefix:_getUnitsPrefix,getNanoPrefix:_getNanoPrefix};return service}angular.module("dossierDataLists").factory("DossierLists",getService)}(),function(){"use strict";angular.module("expandingTable",[])}(),function(){"use strict";function expandingTableCtrl($filter){function _setNumberColumns(){vm.disableErrorCol?vm.numberCols=vm.numberCols+1:vm.numberCols=vm.numberCols+2}function _recalculateColumnDefs(colDefs,numCols){var caretWidth=2,errorWidth=5,totalWidth=caretWidth+errorWidth,toSubtract=totalWidth/numCols,result=[];if(vm.disableErrorCol)return colDefs;for(var i=0;i<numCols;i++){var oneDef=angular.copy(colDefs[i]);oneDef.width>toSubtract&&(oneDef.width=oneDef.width-toSubtract),result.push(oneDef)}return result}function updateTableRow(textIndex){var selectIndex=parseInt(textIndex);selectIndex>=0&&vm.selectTableRow(selectIndex)}function _createArray(arraySize,initialVal){for(var anArray=[],i=0;i<arraySize;i++)anArray.push(initialVal);return anArray}var vm=this;vm.focused=!1,vm.columnDefinitions={},vm.disableExpand=!1,vm.tableRowExpanded=!1,vm.tableRowIndexCurrExpanded="",vm.tableRowIndexPrevExpanded="",vm.numberCols=vm.columnDef.length+2,vm.disableErrorCol=!1,vm.dayDataCollapse=_createArray(0,!0),vm.$onInit=function(){vm.listItems&&(vm.dayDataCollapse=_createArray(vm.listItems.length,!0))},vm.getExpandedState=function(row){return row===vm.tableRowIndexCurrExpanded},vm.$onChanges=function(changes){if(changes.listItems&&(vm.listItems?vm.dayDataCollapse=_createArray(vm.listItems.length,!0):vm.dayDataCollapse=_createArray(0,!0),vm.resetTableRow()),changes.resetToCollapsed&&(vm.resetTableRow(),changes.selectRecord||updateTableRow(vm.selectRecord)),changes.selectRecord){var selectIndex=parseInt(changes.selectRecord.currentValue);selectIndex>=0?vm.selectTableRow(selectIndex):vm.resetTableRow()}changes.disableSelection&&(vm.disableExpand=changes.disableSelection.currentValue),changes.columnDef&&(vm.numberCols=changes.columnDef.currentValue.length,vm.columnDefinitions=_recalculateColumnDefs(changes.columnDef.currentValue,vm.numberCols),_setNumberColumns()),changes.disableErrColumn&&(vm.disableErrorCol=changes.disableErrColumn.currentValue,vm.numberCols=vm.columnDef.length,_setNumberColumns())},vm.formInError=function(aForm){return aForm&&aForm.$invalid?"Y":"N"},vm.deletedRow=function(){vm.tableRowExpanded=!1,vm.tableRowIndexCurrExpanded=""},vm.resetTableRow=function(){vm.tableRowIndexPrevExpanded="",vm.tableRowExpanded=!1,vm.tableRowIndexCurrExpanded="",vm.listItems?vm.dayDataCollapse=_createArray(vm.listItems.length,!0):_createArray(0,!0)},vm.dayDataCollapseFn=function(){for(var i=0;vm.listItems.length-1;i+=1)vm.dayDataCollapse.append("true")},vm.selectTableRow=function(index){vm.disableExpand||("undefined"===vm.dayDataCollapse?vm.dayDataCollapse=vm.dayDataCollapseFn():vm.tableRowExpanded===!1&&""===vm.tableRowIndexCurrExpanded?(vm.tableRowIndexPrevExpanded="",vm.tableRowExpanded=!0,vm.tableRowIndexCurrExpanded=index,vm.dayDataCollapse[index]=!1):vm.tableRowExpanded===!0&&(vm.tableRowIndexCurrExpanded===index?(vm.tableRowExpanded=!1,vm.tableRowIndexCurrExpanded="",vm.dayDataCollapse[index]=!0):(vm.tableRowIndexPrevExpanded=vm.tableRowIndexCurrExpanded,vm.tableRowIndexCurrExpanded=index,vm.dayDataCollapse[vm.tableRowIndexPrevExpanded]=!0,vm.dayDataCollapse[vm.tableRowIndexCurrExpanded]=!1)))}}angular.module("expandingTable").component("cmpExpandingTable",{templateUrl:"app/scripts/components/expandingTable/tpl-expanding-table_20170203_1502.html",controller:expandingTableCtrl,controllerAs:"expandTblCtrl",transclude:!0,bindings:{title:"@",listItems:"<",columnDef:"<",disableSelection:"<",selectRecord:"<",resetToCollapsed:"<",disableErrColumn:"@"}}),expandingTableCtrl.$inject=["$filter"]}(),function(){"use strict";angular.module("applicationInfo",["numberFormat","hpfbConstants"])}(),function(){"use strict";function ApplInfoCtrl(NEW_TYPE,AMEND_TYPE,APPROVED_TYPE,EXTERNAL_TYPE){function _setConfigItems(configJson){vm.fieldIdLabel=configJson.label,vm.fieldLength=configJson.fieldLength,vm.tagName=configJson.tagName,configJson.minFieldLength?vm.minFieldLength=configJson.minFieldLength:vm.minFieldLength=configJson.fieldLength,vm.errorMsg=configJson.errorMsg,configJson.minErrorMsg?vm.minErrorMsg=configJson.minErrorMsg:vm.minErrorMsg=configJson.errorMsg,configJson.isNumber&&(vm.isNumber=configJson.isNumber),vm.isDossier=configJson.isDossier,angular.isUndefined(vm.isDossier)&&(vm.isDossier=!1)}var vm=this;vm.applTypes=[NEW_TYPE,AMEND_TYPE,APPROVED_TYPE],vm.formType=EXTERNAL_TYPE,vm.infoModel={applicationType:"NEW",enrolmentVersion:"0.0",dateSaved:""},vm.fieldIdLabel="",vm.minFieldLength="",vm.isNumber=!1,vm.fieldLength="",vm.tagName="fieldId",vm.setAsIncomplete=!0,vm.errorMsg="",vm.maxErrorMsg="",vm.isDossier=!1,vm.isNumber=!1,vm.$onInit=function(){},vm.$onChanges=function(changes){changes.userType&&(vm.formType=changes.userType.currentValue),changes.record&&(vm.infoModel=changes.record.currentValue),changes.isIncomplete&&(vm.setAsIncomplete=changes.isIncomplete.currentValue),changes.configureIdField&&_setConfigItems(changes.configureIdField.currentValue)},vm.showAmendMsg=function(){return!!vm.record&&vm.record.applicationType===AMEND_TYPE},vm.isExtern=function(){return vm.formType==EXTERNAL_TYPE},vm.setAmendState=function(){vm.setType({type:AMEND_TYPE})}}angular.module("applicationInfo").component("cmpApplicationInfo",{templateUrl:"app/scripts/components/applicationInfo/tpl-application-info_20170203_1502.html",controller:ApplInfoCtrl,controllerAs:"infoCtrl",bindings:{record:"<",userType:"<",isIncomplete:"<",configureIdField:"<",setType:"&"}}),ApplInfoCtrl.$inject=["NEW_TYPE","AMEND_TYPE","APPROVED_TYPE","EXTERNAL_TYPE"]}(),function(){"use strict";angular.module("contactModule",["dataLists","hpfbConstants"])}(),function(){"use strict";function contactCtrl(getContactLists,ENGLISH,FRENCH){var vm=this;vm.isEditable=!0,vm.ngModelOptSetting={updateOn:"blur"},vm.salutationList=getContactLists.getSalutationList(),vm.langCorresppond=[ENGLISH,FRENCH],vm.phoneReg=/\(?([0-9]{3})\)?([ .-]?)([0-9]{3})\2([0-9]{4})/,vm.contactModel={isDetailValid:!1,contactId:"",amendRecord:!1,addressRole:{manufacturer:!1,mailing:!1,billing:!1,importer:!1},contactRole:"",salutation:"",givenName:"",surname:"",initials:"",title:"",phone:"",PhoneExt:"",fax:""},vm.$onInit=function(){vm.langList=[ENGLISH,FRENCH]},vm.$onChanges=function(changes){changes.contactRecord&&(vm.contactModel=changes.contactRecord.currentValue),changes.isAmend&&(vm.isEditable=changes.isAmend.currentValue)},vm.showError=function(ctrl){return!!(ctrl.$invalid&&ctrl.$touched||vm.showErrors()&&ctrl.$invalid)}}angular.module("contactModule").component("cmpContactDetails",{templateUrl:"app/scripts/components/contactDetails/tpl-contact-details_20170203_1502.html",controller:contactCtrl,controllerAs:"contCtrl",bindings:{contactRecord:"<",onUpdate:"&",isAmend:"<",showErrors:"&"}}),contactCtrl.$inject=["getContactLists","ENGLISH","FRENCH"]}(),function(){"use strict";angular.module("contactModule25",["contactModule"])}(),function(){"use strict";function contactRecCtrl($scope){var vm=this;vm.savePressed=!1,vm.formAmend=!1,vm.isContact=!0,vm.isNotEditable=!1,vm.contactModel={},vm.editState=!0,vm.$onInit=function(){},vm.$onChanges=function(changes){changes.contactRecord&&(vm.contactModel=angular.copy(changes.contactRecord.currentValue),vm.setEditableState()),changes.isAmend&&(vm.formAmend=changes.isAmend.currentValue,vm.setEditableState())},vm["delete"]=function(){vm.onDelete({contactId:vm.contactModel.repRole})},vm.discardChanges=function(){if(!vm.contactRecForm.$pristine){var currRecord=vm.contactRecord;vm.contactModel=angular.copy(currRecord),vm.setNotEditable(),vm.contactRecForm.$setPristine(),vm.isDetailValid({state:vm.contactRecForm.$valid}),vm.savePressed=!1}},vm.updateValid=function(){vm.isDetailValid({state:vm.contactRecForm.$valid&&!vm.contactRecForm.$dirty})},$scope.$watch("contactRec.contactRecForm.$dirty",function(){vm.contactRecForm.$dirty&&vm.isDetailValid({state:!1})},!0),vm.updateContactModel=function(){vm.contactRecForm.$valid&&(vm.isDetailValid({state:!0}),vm.contactRecForm.$setPristine(),vm.onUpdate({contact:vm.contactModel})),vm.savePressed=!0},vm.showErrors=function(){return vm.savePressed},vm.setEditableState=function(){vm.formAmend?vm.formAmend&&vm.contactModel.amend?vm.editState=!0:vm.editState=!1:vm.editState=!0}}angular.module("contactModule25").component("cmpRepContactRecord",{templateUrl:"app/scripts/components/rep-contact-record/tpl-rep-contact-record_20170203_1502.html",controller:contactRecCtrl,controllerAs:"contactRec",bindings:{contactRecord:"<",onUpdate:"&",updateValid:"&",onDelete:"&",isDetailValid:"&",isAmend:"<"}}),contactRecCtrl.$inject=["$scope"]}(),function(){"use strict";angular.module("contactModule26",["contactModule25","expandingTable","repContactService"])}(),function(){"use strict";function contactListCtrl($filter,RepContactService){var vm=this;vm.selectRecord=-1,vm.isDetailValid=!0,vm.contactList=[],vm.oneRecord="",vm.isParentDirty=!1,vm.formAmend=!1,vm.resetCollapsed=!1;var repContactService=new RepContactService;vm.columnDef=[{label:"FIRST_NAME",binding:"givenName",width:"40"},{label:"LAST_NAME",binding:"surname",width:"40"},{label:"ONE_ROLE",binding:"repRole",width:"20"}],vm.$onInit=function(){vm.focused=!1},vm.$onChanges=function(changes){changes.contacts&&(vm.contactList=changes.contacts.currentValue,vm.updateErrorState()),changes.parentDirty&&(vm.isParentDirty=changes.parentDirty.currentValue),changes.isAmend&&(vm.formAmend=changes.isAmend.currentValue)},vm.isAddContact=function(){return!(vm.contactList.length>1)&&vm.isDetailValid},vm.showNoRecordError=function(isInvalid){return vm.isParentDirty&&isInvalid||vm.showListErrors()&&isInvalid},vm.setValid=function(value){vm.isDetailValid=value},vm.showError=function(){return vm.contactListForm.$invalid&&!vm.contactListForm.$pristine||vm.contactListForm.$invalid&&vm.showListErrors()},vm.onUpdateContactRecord=function(record){var idx=vm.contactList.indexOf($filter("filter")(vm.contactList,{repRole:record.repRole},!0)[0]);vm.contactList[idx]=angular.copy(record),vm.updateErrorState(),vm.contactListForm.$setPristine(),vm.resetCollapsed=!vm.resetCollapsed,vm.disableAdd()},vm.updateErrorState=function(){vm.contactList&&vm.contactList.length>0?vm.oneRecord="is value":vm.oneRecord=""},vm.deleteContact=function(cID){var idx=vm.contactList.indexOf($filter("filter")(vm.contactList,{repRole:cID},!0)[0]);if(vm.contactList.splice(idx,1),1===vm.contactList.length&&"PRIMARY"!==vm.contactList[0].repRole){vm.contactList[0].repRole="PRIMARY";var temp=angular.copy(vm.contactList);vm.contactList=[],vm.contactList=temp}vm.updateErrorState(),vm.disableAdd(),vm.setValid(!0),vm.selectRecord=-1,
vm.resetCollapsed=!vm.resetCollapsed},vm.addContact=function(){var defaultContact=repContactService.createRepContact(vm.contactList);vm.contactList.push(defaultContact),vm.selectRecord=vm.contactList.length-1,vm.setValid(!1)},vm.disableAdd=function(){if(!vm.contactList)return!1;var isInvalid=!vm.isDetailValid||2==vm.contactList.length||vm.contactList.length>0&&vm.contactListForm.$invalid;return isInvalid}}angular.module("contactModule26").component("cmpRepContactList",{templateUrl:"app/scripts/components/repContactList/tpl-rep-contact-list_20170203_1502.html",controller:contactListCtrl,controllerAs:"contactListCtrl",bindings:{contacts:"<",showListErrors:"&",parentDirty:"<",isAmend:"<"}}),contactListCtrl.$inject=["$filter","RepContactService"]}(),function(){"use strict";angular.module("fileIO",[])}(),function(){"use strict";function ngFileSelect(hpfbFileReader){function link(scope,element,attrs){scope.rootTag=attrs.rootTag,element.bind("change",function(e){scope.file=(e.srcElement||e.target).files[0],hpfbFileReader.readAsDataText(scope.file,scope).then(function(result){scope.hpfbFileSelect({fileContent:result})})})}var directive={link:link,restrict:"A",scope:{hpfbFileSelect:"&"}};return directive}angular.module("fileIO").directive("hpfbFileSelect",ngFileSelect),ngFileSelect.$inject=["hpfbFileProcessing"]}(),function(){"use strict";function FileSelectController(hpfbFileProcessing){var vm=this;vm.fileTypes=".xml, .hcsc",vm.modelCallback=function(fileContent){vm.status="",fileContent&&(vm.status=fileContent.messages),vm.updateModelRoot({fileContent:fileContent}),angular.element(fileLoad).trigger("focus")}}angular.module("fileIO").component("hpfbFileSelect",{templateUrl:"app/scripts/components/fileIO/fileSelect_20170203_1502.html",controller:FileSelectController,bindings:{updateModelRoot:"&",rootElem:"@"}}),FileSelectController.$inject=["hpfbFileProcessing"]}(),function(){"use strict";function FileWriteController(hpfbFileProcessing){function _generateFile(){"JSON"===vm.saveType.toUpperCase()?hpfbFileProcessing.writeAsJson(vm.jsonToSave,vm.fileName,vm.rootTag):"XML"===vm.saveType.toUpperCase()&&hpfbFileProcessing.writeAsXml(vm.jsonToSave,vm.fileName,vm.rootTag)}function _init(){vm.buttonDisabled?"true"===vm.buttonDisabled.toLowerCase()?vm.buttonDisabled=!0:"false"===vm.buttonDisabled.toLowerCase()?vm.buttonDisabled=!1:vm.buttonDisabled=!1:vm.buttonDisabled=!1}var vm=this;vm.$onInit=_init,vm.generate=_generateFile}angular.module("fileIO").component("hpfbFileSave",{templateUrl:"app/scripts/components/fileIO/fileSave_20170203_1502.html",controller:FileWriteController,bindings:{jsonToSave:"<",rootTag:"@",saveType:"@",buttonLabel:"@",buttonDisabled:"@"}}),FileWriteController.$inject=["hpfbFileProcessing"]}(),function(){"use strict";function fileReader($q){function onLoad(reader,deferred,scope,file){return function(){scope.$apply(function(){if(file){var splitFile=file.name.split("."),fileType=splitFile[splitFile.length-1];fileType.toLowerCase()==draft_file_type?(convertToJSONObjects(reader),checkRootTagMatch(reader,scope)):"xml"===fileType.toLowerCase()?(convertXMLToJSONObjects(reader),checkRootTagMatch(reader,scope)):(convertResult.parseResult=null,convertResult.messages=msg_err_fileType,reader.parseResult=convertResult)}deferred.resolve(reader.parseResult)})}}function onError(reader,deferred,scope){return function(){scope.$apply(function(){deferred.reject(msg_err_load)})}}function getReader(deferred,scope,file){var reader=new FileReader;return reader.onload=onLoad(reader,deferred,scope,file),reader.onError=onError(reader,deferred,scope),reader.parseResult=null,reader}function readAsDataText(file,scope){var deferred=$q.defer(),reader=getReader(deferred,scope,file);return file?reader.readAsText(file):(reader.parseResult=convertResult,reader.parseResult.messages="",reader.parseResult.jsonResult=null,deferred.resolve(reader.parseResult)),deferred.promise}function convertToJSONObjects(reader){try{convertResult.jsonResult=JSON.parse(reader.result),convertResult.messages=msg_success,reader.parseResult=convertResult}catch(e){convertResult.jsonResult=null,convertResult.messages=msg_err_jsonparse,reader.parseResult=convertResult}}function convertXMLToJSONObjects(reader){var xmlConfig={escapeMode:!0,emptyNodeForm:"text",useDoubleQuotes:!0},xmlConverter=new X2JS(xmlConfig);convertResult.jsonResult=xmlConverter.xml_str2json(reader.result),null===convertResult.jsonResult?convertResult.messages=msg_err_xmlparse:convertResult.messages=msg_success,reader.parseResult=convertResult}function convertJSONObjectsToXML(jsonObj){var xmlConfig={escapeMode:!0,emptyNodeForm:"text",useDoubleQuotes:!0},jsonConverter=new X2JS(xmlConfig),xmlResult=null;return xmlResult=jsonConverter.json2xml_str(jsonObj)}function checkRootTagMatch(reader,scope){scope.rootTag&&reader.parseResult&&reader.parseResult.jsonResult&&(reader.parseResult.jsonResult[scope.rootTag]||(reader.parseResult.jsonResult=null,reader.parseResult.messages=msg_err_formType))}function jsonToFile(jsonObj,fileName,rootTag){if(jsonObj){var makeStrSave=JSON.stringify(jsonObj),blob=new Blob([makeStrSave],{type:"text/plain;charset=utf-8"});fileName?fileName+="."+draft_file_type:fileName="hpfbDraft."+draft_file_type,saveAs(blob,fileName)}}function xmlToFile(jsonObj,fileName,rootTag){if(jsonObj){var xmlResult=convertJSONObjectsToXML(jsonObj);xmlResult='<?xml version="1.0" encoding="UTF-8"?><?xml-stylesheet href="REP_Combined.xsl" type="text/xsl"?>'+xmlResult;var blob=new Blob([xmlResult],{type:"text/plain;charset=utf-8"});fileName?fileName+=".xml":fileName="hpfbXML.xml",saveAs(blob,fileName)}}var msg_success="MSG_SUCCESS_LOAD",msg_err_jsonparse="MSG_ERR_JSONPARSE",msg_err_xmlparse="MSG_ERR_XMLPARSE",msg_err_load="MSG_ERR_FILE_LOAD",msg_err_fileType="MSG_ERR_FILE_TYPE",msg_err_formType="MSG_ERR_FORM_TYPE",draft_file_type="hcsc",convertResult={jsonResult:"",messages:""},service={readAsDataText:readAsDataText,writeAsJson:jsonToFile,writeAsXml:xmlToFile};return service}angular.module("fileIO").factory("hpfbFileProcessing",fileReader),fileReader.$inject=["$q"]}(),function(){"use strict";angular.module("nonMedIngRecordModule",["dossierDataLists","hpfbConstants","ui.select"])}(),function(){"use strict";function nonMedIngRecCtrl(DossierLists,$scope,$translate,OTHER,YES){var self=this;self.nanoMaterialList=DossierLists.getNanoMaterials(),self.yesNoList=DossierLists.getYesNoList(),self.unitsList=DossierLists.getUnitsList(),self.savePressed=!1,self.lang=$translate.proposedLanguage()||$translate.use(),self.ingModel={varId:"",ingName:"",cas:"",standard:"",strength:null,units:"",otherUnits:"",per:"",nanoMaterial:"",nanoMaterialOther:"",calcAsBase:"",humanAnimalSourced:""},self.$onInit=function(){self.savePressed=!1,self.backup=angular.copy(self.ingModel)},self.$onChanges=function(changes){changes.record&&changes.record.currentValue&&(self.ingModel=angular.copy(changes.record.currentValue))},self.saveIng=function(){self.nonMedIngForm.$valid?(self.record?self.onUpdate({ing:self.ingModel}):self.onAddIng({ing:self.ingModel}),self.nonMedIngForm.$setPristine(),self.savePressed=!1):self.savePressed=!0},self.discardChanges=function(){self.ingModel=angular.copy(self.backup),self.nonMedIngForm.$setPristine(),self.onCancel()},self["delete"]=function(){self.record&&self.onDelete()},self.isAnimalHumanSourced=function(){return!!self.ingModel&&self.ingModel.humanAnimalSourced===YES},self.copy=function(){var ingredientCopy=angular.copy(self.ingModel);self.onAddIng({ing:ingredientCopy})},self.showError=function(isInvalid,isTouched){return isInvalid&&isTouched||isInvalid&&self.showErrors()||isInvalid&&self.savePressed},self.isNanoOther=function(){return self.ingModel.nanoMaterial.id===DossierLists.getOtherValue()||(self.ingModel.nanoMaterialOther="",!1)},self.isUnitsOther=function(){return!!self.ingModel&&(self.ingModel.units.id===OTHER||(self.ingModel.otherUnits="",!1))},$scope.$watch("nIngRecCtrl.nonMedIngForm.$dirty",function(){self.isDetailValid({state:!self.nonMedIngForm.$dirty})},!0)}angular.module("nonMedIngRecordModule").component("cmpNonMedIngRecord",{templateUrl:"app/scripts/components/formulations/tpl-non-med-ing-record_20170203_1502.html",controllerAs:"nIngRecCtrl",controller:nonMedIngRecCtrl,bindings:{deleteBtn:"<",record:"<",showErrors:"&",onAddIng:"&",onUpdate:"&",onDelete:"&",onCancel:"&",isDetailValid:"&",recordIndex:"<"}}),nonMedIngRecCtrl.$inject=["DossierLists","$scope","$translate","OTHER","YES"]}(),function(){"use strict";angular.module("nonMedIngListModule",["expandingTable","nonMedIngRecordModule"])}(),function(){"use strict";function nonMedIngListCtrl(){function setRecord(value){self.selectRecord=value}var self=this;self.isDetailValid=!0,self.selectRecord=-1,self.resetToCollapsed=!1,self.newIngFormShown=!1,self.$onInit=function(){self.newIngFormShown=!1,self.isDetailValid=!0,self.selectRecord=-1,self.colNames=[{label:"VARIANT_NAME",binding:"varId",width:"15"},{label:"NONMEDICINAL_INGREDIENT",binding:"ingName",width:"65"},{label:"CAS_NUM",binding:"cas",width:"15"},{label:"HUMAN_ANIMAL_SOURCE",binding:"humanAnimalSourced",width:"10"}],self.ingList=[],self.ingredients&&(self.ingList=self.ingredients)},self.addIng=function(ing){self.setValid(!0),self.ingList.push(ing),self.newIngFormShown=!1,self.resetToCollapsed=!self.resetToCollapsed,self.onUpdate({list:self.ingList}),setRecord(-1)},self.updateIng=function(idx,ing){self.ingList[idx]=angular.copy(ing),self.onUpdate({list:self.ingList}),self.setValid(!0)},self.deleteIng=function(idx){self.ingList.splice(idx,1),self.onUpdate({list:self.ingList}),self.setValid(!0),setRecord(-1),self.resetToCollapsed=!self.resetToCollapsed},self.addNewIngredientState=function(){return self.resetToCollapsed=!self.resetToCollapsed,self.newIngFormShown=!0,self.setValid(!1),self.newIngFormShown},self.addNewDisabled=function(){return self.newIngFormShown||!self.isDetailValid},self.setValid=function(value){self.isDetailValid=value},self.onNewCancel=function(){self.setValid(!0),self.newIngFormShown=!1}}angular.module("nonMedIngListModule").component("cmpNonMedIngList",{templateUrl:"app/scripts/components/formulations/tpl-non-med-ing-list_20170203_1502.html",controller:nonMedIngListCtrl,controllerAs:"nmilCtrl",bindings:{ingredients:"<",onUpdate:"&"}})}(),function(){"use strict";angular.module("materialIngRecordModule",["dossierDataLists"])}(),function(){"use strict";function materialIngRecCtrl(DossierLists,$scope){var self=this;self.yesNoList=DossierLists.getYesNoList(),self.savePressed=!1,self.$onInit=function(){self.mirModel={},self.record&&(self.mirModel=self.record),self.backup=angular.copy(self.mirModel)},self.showError=function(isInvalid,isTouched){return isInvalid&&isTouched||isInvalid&&self.showErrors()||self.savePressed&&isInvalid},self.save=function(){self.materialIngRecordForm.$valid?(self.record?(self.onUpdate({ing:self.mirModel}),self.materialIngRecordForm.$setPristine()):self.onAddNew({ing:self.mirModel}),self.materialIngRecordForm.$setPristine(),self.savePressed=!1):self.savePressed=!0},self.discardChanges=function(){self.mirModel=angular.copy(self.backup),self.materialIngRecordForm.$setPristine(),self.onCancel()},self["delete"]=function(){self.record&&self.onDelete()},$scope.$watch("mirCtrl.materialIngRecordForm.$dirty",function(){self.isDetailValid({state:!self.materialIngRecordForm.$dirty})},!0)}angular.module("materialIngRecordModule").component("cmpMaterialIngRecord",{templateUrl:"app/scripts/components/formulations/tpl-material-ing-record_20170203_1502.html",controllerAs:"mirCtrl",controller:materialIngRecCtrl,bindings:{deleteBtn:"<",record:"<",showErrors:"&",onAddNew:"&",onUpdate:"&",onDelete:"&",onCancel:"&",isDetailValid:"&",recordIndex:"<"}}),materialIngRecCtrl.$inject=["DossierLists","$scope"]}(),function(){"use strict";angular.module("materialIngListModule",["expandingTable","materialIngRecordModule"])}(),function(){"use strict";function materialIngListCtrl(){function setRecord(value){self.selectRecord=value}var self=this;self.isDetailValid=!0,self.selectRecord=-1,self.resetToCollapsed=!1,self.newIngFormShown=!1,self.colNames=[{label:"MATERIAL_NAME",binding:"ingredientName",width:"70"},{label:"CAS_NUM",binding:"cas",width:"15"},{label:"PRESENT_IN_FINAL",binding:"inFinalContainer",width:"15"}],self.$onInit=function(){self.newIngFormShown=!1,self.isDetailValid=!0,self.selectRecord=-1,self.ingList=[],self.ingredients&&(self.ingList=self.ingredients)},self.$onChanges=function(changes){changes.ingredients&&(self.ingList=changes.ingredients.currentValue)},self.addNew=function(ing){self.setValid(!0),self.ingList.push(ing),self.newIngFormShown=!1,self.resetToCollapsed=!self.resetToCollapsed,self.onUpdate({list:self.ingList}),setRecord(-1)},self.updateIng=function(idx,ing){self.ingList[idx]=angular.copy(ing),self.onUpdate({list:self.ingList}),self.setValid(!0)},self.deleteIng=function(idx){self.ingList.splice(idx,1),self.onUpdate({list:self.ingList}),self.setValid(!0),setRecord(-1),self.resetToCollapsed=!self.resetToCollapsed},self.addNewIngredientState=function(){return self.resetToCollapsed=!self.resetToCollapsed,self.newIngFormShown=!0,self.setValid(!1),self.newIngFormShown},self.addNewDisabled=function(){return self.newIngFormShown||!self.isDetailValid},self.setValid=function(value){self.isDetailValid=value},self.onNewCancel=function(){self.setValid(!0),self.newIngFormShown=!1}}angular.module("materialIngListModule").component("cmpMaterialIngList",{templateUrl:"app/scripts/components/formulations/tpl-material-ing-list_20170203_1502.html",controller:materialIngListCtrl,controllerAs:"milCtrl",bindings:{ingredients:"<",onUpdate:"&"}})}(),function(){"use strict";angular.module("formulationRecordModule",["activeIngListModule","nonMedIngListModule","containerTypeListModule","materialIngListModule","roaListModule","dossierDataLists","ui.select"])}(),function(){"use strict";function formulationRecCtrl(DossierLists,$translate){var self=this;self.noCountries="",self.noROAValues="",self.noActiveValues="",self.dosageFormList=DossierLists.getDosageFormList(),self.otherValue=DossierLists.getDosageOther(),self.savePressed=!1,self.lang=$translate.proposedLanguage()||$translate.use(),self.$onInit=function(){self.frmModel={},self.record&&(self.frmModel=self.record)},self["delete"]=function(){self.record&&self.onDelete()},self.copy=function(){if(self.record){var formulationCopy=angular.copy(self.record);self.addCopy({record:formulationCopy})}},self.showError=function(isInvalid,isTouched){return isInvalid&&isTouched||isInvalid&&self.showErrors()||isInvalid&&self.savePressed},self.noCountry=function(){return self.frmModel?self.frmModel.countryList&&0!==self.frmModel.countryList.length?(self.noCountries=self.frmModel.countryList.length,!1):(self.noCountries="",!0):(self.noCountries="",!1)},self.noROA=function(){return self.frmModel?self.frmModel.routeAdmins&&0!==self.frmModel.routeAdmins.length?(self.noROAValues="values",!1):(self.noROAValues="",!0):(self.noROAValues="",!1)},self.noActives=function(){return self.frmModel?self.frmModel.activeIngList&&0!==self.frmModel.activeIngList.length?(self.noActiveValues="values",!1):(self.noActiveValues="",!0):(self.noActiveValues="",!1)},self.updateActiveIngList=function(list){list&&(self.frmModel.activeIngList=list,self.recordChanged())},self.updateNonMedIngList=function(list){list&&(self.frmModel.nMedIngList=list,self.recordChanged())},self.updateContainerTypeList=function(list){list&&(self.frmModel.containerTypes=list)},self.updateMaterialList=function(list){list&&(self.frmModel.animalHumanMaterials=list,self.recordChanged())},self.updateRoaList=function(list){list&&(self.frmModel.routeAdmins=list)},self.updateCountryList=function(list){list&&(self.frmModel.countryList=list)},self.isDosageOther=function(){return!!self.frmModel.dosageForm&&(self.frmModel.dosageForm.id===self.otherValue||(self.frmModel.dosageFormOther="",!1))}}angular.module("formulationRecordModule").config(function(uiSelectConfig){uiSelectConfig.theme="select2"}).component("cmpFormulationRecord",{templateUrl:"app/scripts/components/formulations/tpl-formulation-record_20170203_1502.html",controllerAs:"formulRecCtrl",controller:formulationRecCtrl,bindings:{deleteBtn:"<",record:"<",onUpdate:"&",onDelete:"&",onCancel:"&",showErrors:"&",recordChanged:"&",addCopy:"&"}}),formulationRecCtrl.$inject=["DossierLists","$translate"]}(),function(){"use strict";angular.module("formulationsModule",["expandingTable","formulationRecordModule"])}(),function(){"use strict";function formulationsCtrl(){function setRecord(value){self.selectRecord=value}function getMaxFormulationId(){var out=0,list=self.formulationList;if(list)for(var i=0;i<list.length;i++)list[i].formulationId>out&&(out=list[i].formulationId);return out}var self=this;self.isDetailValid=!0,self.selectRecord=-1,self.resetToCollapsed=!1,self.noFormulations="",self.$onInit=function(){self.newFormShown=!1,self.colNames=[{label:"FORM_ID",binding:"formulationId",width:"15"},{label:"FORMULATION_NAME",binding:"formulationName",width:"85"}],self.formulationList=[],self.formulations&&(self.formulationList=self.formulations),self.updateFormulationsError()},self.$onChanges=function(changes){changes.formulations&&(self.formulationList=changes.formulations.currentValue,self.updateFormulationsError())},self.addNew=function(){var newRecord={formulationId:getMaxFormulationId()+1,formulationName:"",dosageForm:"",dosageFormOther:"",activeIngList:[],nMedIngList:[],containerTypes:[],animalHumanMaterials:[],routeAdmins:[],countryList:[]};self.formulationList.push(newRecord),setRecord(self.formulationList.length-1),self.resetToCollapsed=!self.resetToCollapsed,self.updateFormulationsError()},self.addCopy=function(formulation){formulation&&(formulation.formulationId=getMaxFormulationId()+1,self.formulationList.push(formulation),setRecord(-1),self.resetToCollapsed=!self.resetToCollapsed)},self.update=function(idx,frm){self.formulationList[idx]=angular.copy(frm)},self["delete"]=function(idx){self.formulationList.splice(idx,1)&&setRecord(-1),self.resetToCollapsed=!self.resetToCollapsed,self.updateFormulationsError()},self.updateFormulationsError=function(){return self.formulationList&&self.formulationList.length>0?(self.noFormulations=self.formulationList.length,!1):(self.noFormulations="",!0)}}angular.module("formulationsModule").component("cmpFormulations",{templateUrl:"app/scripts/components/formulations/tpl-formulation-list_20170203_1502.html",controller:formulationsCtrl,controllerAs:"formulCtrl",bindings:{formulations:"<",recordChanged:"&"}})}(),function(){"use strict";angular.module("containerTypeRecordModule",[])}(),function(){"use strict";function containerTypeRecCtrl($scope){var self=this;self.savePressed=!1,self.ctModel={containerType:"",packageSize:"",shelfLifeYears:void 0,shelfLifeMonths:void 0,tempMin:void 0,tempMax:void 0},self.backup=angular.copy(self.ctModel),self.$onInit=function(){self.savePressed=!1},self.$onChanges=function(changes){changes.record&&changes.record.currentValue&&(self.ctModel=angular.copy(changes.record.currentValue),self.ctModel.shelfLifeYears=Number(changes.record.currentValue.shelfLifeYears),self.ctModel.shelfLifeMonths=Number(changes.record.currentValue.shelfLifeMonths),self.ctModel.tempMin=Number(changes.record.currentValue.tempMin),self.ctModel.tempMax=Number(changes.record.currentValue.tempMax),self.backup=angular.copy(self.ctModel))},self.save=function(){self.containerTypeForm.$valid?(self.record?self.onUpdate({cType:self.ctModel}):self.onAddIng({cType:self.ctModel}),self.containerTypeForm.$setPristine(),self.savePressed=!1):self.savePressed=!0},self.discardChanges=function(){self.ctModel=angular.copy(self.backup),self.containerTypeForm.$setPristine(),self.onCancel()},self["delete"]=function(){self.record&&self.onDelete()},self.showError=function(isInvalid,isTouched){return isInvalid&&isTouched||isInvalid&&self.savePressed},$scope.$watch("ctrCtrl.containerTypeForm.$dirty",function(){self.isDetailValid({state:!self.containerTypeForm.$dirty})},!0)}angular.module("containerTypeRecordModule").component("cmpContainerTypeRecord",{templateUrl:"app/scripts/components/formulations/tpl-container-type-record_20170203_1502.html",controllerAs:"ctrCtrl",controller:containerTypeRecCtrl,bindings:{deleteBtn:"<",record:"<",onAddIng:"&",onUpdate:"&",onDelete:"&",onCancel:"&",showErrors:"&",isDetailValid:"&",recordIndex:"<"}}),containerTypeRecCtrl.$inject=["$scope"]}(),function(){"use strict";angular.module("containerTypeListModule",["expandingTable","containerTypeRecordModule"])}(),function(){"use strict";function containerTypeListCtrl(){function setRecord(value){self.selectRecord=value}var self=this;self.isDetailValid=!0,self.selectRecord=-1,self.resetToCollapsed=!1,self.isDetailValid=!0,self.newIngFormShown=!1,self.$onInit=function(){self.selectRecord=-1,self.resetToCollapsed=!1,self.isDetailValid=!0,self.newIngFormShown=!1,self.colNames=[{label:"CONTAINER_TYPE",binding:"containerType",width:"50"},{label:"PACKAGE_SIZE",binding:"packageSize",width:"50"}],self.containerList=[],self.containers&&(self.containerList=self.containers)},self.$onChanges=function(changes){changes.containers&&(self.containerList=changes.containers.currentValue)},self.addNew=function(ing){self.setValid(!0),self.containerList.push(ing),self.newIngFormShown=!1,self.resetToCollapsed=!self.resetToCollapsed,self.onUpdate({list:self.containerList}),setRecord(-1)},self.updateRec=function(idx,ing){self.containerList[idx]=angular.copy(ing),self.onUpdate({list:self.containerList}),self.setValid(!0)},self.deleteRec=function(idx){self.containerList.splice(idx,1),self.onUpdate({list:self.containerList}),self.setValid(!0),setRecord(-1),self.resetToCollapsed=!self.resetToCollapsed},self.setValid=function(value){self.isDetailValid=value},self.addNewDisabled=function(){return self.newIngFormShown||!self.isDetailValid},self.addNewIngredientState=function(){return self.resetToCollapsed=!self.resetToCollapsed,self.newIngFormShown=!0,self.setValid(!1),self.newIngFormShown},self.onNewCancel=function(){self.setValid(!0),self.newIngFormShown=!1}}angular.module("containerTypeListModule").component("cmpContainerTypeList",{templateUrl:"app/scripts/components/formulations/tpl-container-type-list_20170203_1502.html",controller:containerTypeListCtrl,controllerAs:"ctlCtrl",bindings:{containers:"<",onUpdate:"&"}})}(),function(){"use strict";angular.module("activeIngRecordModule",["dossierDataLists","hpfbConstants"])}(),function(){"use strict";function activeIngRecCtrl(DossierLists,$scope,$translate,OTHER,YES){var self=this;self.nanoMaterialList=DossierLists.getNanoMaterials(),self.yesNoList=DossierLists.getYesNoList(),self.activeList=DossierLists.getActiveList(),self.UnitsList=DossierLists.getUnitsList(),self.savePressed=!1,self.lang=$translate.proposedLanguage()||$translate.use(),self.ingModel={autoIngred:"N",ingId:"",ingLabel:"",cas:"",standard:"",strength:null,units:"",otherUnits:"",per:"",nanoMaterial:"",nanoMaterialOther:"",calcAsBase:"",humanAnimalSourced:""},self.$onInit=function(){self.savePressed=!1,self.backup=angular.copy(self.ingModel)},self.$onChanges=function(changes){changes.record&&changes.record.currentValue&&(self.ingModel=angular.copy(changes.record.currentValue),self.ingModel.ingId?self.ingModel.autoIngred="Y":self.ingModel.autoIngred="N")},self.isAnimalHumanSourced=function(){return!!self.ingModel&&self.ingModel.humanAnimalSourced===YES},self.ingredSelectionUpdated=function(item,model,label,event){item?(self.ingModel.ingId=item.id,self.ingModel.autoIngred="Y"):(self.ingModel.ingId="",self.ingModel.autoIngred="N")},self.saveIng=function(){console.log(self.ingModel),self.activeIngForm.$valid?(self.record?self.onUpdate({ing:self.ingModel}):self.onAddIng({ing:self.ingModel}),self.activeIngForm.$setPristine(),self.savePressed=!1):self.savePressed=!0},self.discardChanges=function(){self.ingModel=angular.copy(self.backup),self.activeIngForm.$setPristine(),self.onCancel()},self["delete"]=function(){self.record&&self.onDelete()},self.copy=function(){var ingredientCopy=angular.copy(self.ingModel);self.onAddIng({ing:ingredientCopy})},self.showError=function(isInvalid,isTouched){return isInvalid&&isTouched||isInvalid&&self.showErrors()||isInvalid&&self.savePressed},self.isNanoOther=function(){return self.ingModel.nanoMaterial.id===DossierLists.getOtherValue()||(self.ingModel.nanoMaterialOther="",!1)},self.isUnitsOther=function(){return!!self.ingModel&&(self.ingModel.units.id===OTHER||(self.ingModel.otherUnits="",!1))},$scope.$watch("ingRecCtrl.activeIngForm.$dirty",function(){self.isDetailValid({state:!self.activeIngForm.$dirty})},!0)}angular.module("activeIngRecordModule").component("cmpActiveIngRecord",{templateUrl:"app/scripts/components/formulations/tpl-active-ing-record_20170203_1502.html",controllerAs:"ingRecCtrl",controller:activeIngRecCtrl,bindings:{showErrors:"&",deleteBtn:"<",record:"<",onAddIng:"&",onUpdate:"&",onDelete:"&",onCancel:"&",isDetailValid:"&",recordIndex:"<"}}),activeIngRecCtrl.$inject=["DossierLists","$scope","$translate","OTHER","YES"]}(),function(){"use strict";angular.module("activeIngListModule",["expandingTable","activeIngRecordModule"])}(),function(){"use strict";function activeIngListCtrl(){function setRecord(value){self.selectRecord=value}var self=this;self.selectRecord=-1,self.resetToCollapsed=!1,self.isDetailValid=!0,self.$onInit=function(){self.newIngFormShown=!1,self.isDetailValid=!0,self.selectRecord=-1,self.colNames=[{label:"MEDICINAL_INGREDIENT",binding:"ingLabel",width:"65"},{label:"IN_LIST",binding:"autoIngred",width:"7"},{label:"CAS_NUM",binding:"cas",width:"13"},{label:"HUMAN_ANIMAL_SOURCE",binding:"humanAnimalSourced",width:"15"}],self.ingList=[],self.ingredients&&(self.ingList=self.ingredients)},self.addIng=function(ing){self.setValid(!0),self.ingList.push(ing),self.newIngFormShown=!1,self.resetToCollapsed=!self.resetToCollapsed,self.onUpdate({list:self.ingList}),setRecord(-1)},self.updateIng=function(idx,ing){self.ingList[idx]=angular.copy(ing),self.onUpdate({list:self.ingList}),self.setValid(!0)},self.deleteIng=function(idx){self.ingList.splice(idx,1),self.onUpdate({list:self.ingList}),self.setValid(!0),setRecord(-1),self.resetToCollapsed=!self.resetToCollapsed},self.setValid=function(value){self.isDetailValid=value},self.addNewDisabled=function(){return self.newIngFormShown||!self.isDetailValid},self.addNewIngredientState=function(){return self.resetToCollapsed=!self.resetToCollapsed,self.newIngFormShown=!0,self.setValid(!1),self.newIngFormShown},self.onNewCancel=function(){self.setValid(!0),self.newIngFormShown=!1}}angular.module("activeIngListModule").component("cmpActiveIngList",{templateUrl:"app/scripts/components/formulations/tpl-active-ing-list_20170203_1502.html",controller:activeIngListCtrl,controllerAs:"ailCtrl",bindings:{ingredients:"<",onUpdate:"&"}})}(),function(){"use strict";angular.module("theraClass",["theraClassRecord"])}(),function(){"use strict";function theraListCtrl($filter){function getMaxID(){for(var id=0,i=0;i<vm.model.theraList.length;i++)vm.model.theraList[i].id>id&&(id=vm.model.theraList[i].id);return id}var vm=this;vm.selectRecord=-1,vm.isDetailValid=!0,vm.resetToCollapsed=!0,vm.oneRecord="",vm.model={},vm.model.theraList=[],vm.columnDef=[{label:"THERA_CLASS_NAME",binding:"name",width:"100"}],vm.$onInit=function(){},vm.$onChanges=function(changes){changes.records&&(vm.model.theraList=changes.records.currentValue)},vm.showError=function(isTouched,isInvalid){return!0},vm.setValid=function(value){vm.isDetailValid=value},vm.addNew=function(){var maxID=getMaxID(),item={id:maxID+1,name:""};vm.model.theraList.push(item),vm.resetToCollapsed=!vm.resetToCollapsed,vm.selectRecord=0,vm.selectRecord=vm.model.theraList.length-1},vm.deleteRecord=function(recId){var idx=vm.model.theraList.indexOf($filter("filter")(vm.model.theraList,{id:recId},!0)[0]);vm.model.theraList.splice(idx,1)}}angular.module("theraClass").component("cmpTheraList",{templateUrl:"app/scripts/components/therapeutic-classification/tpl-thera-list_20170203_1502.html",bindings:{records:"<",showErrors:"&"},controller:theraListCtrl,controllerAs:"theraCtrl"}),theraListCtrl.$inject=["$filter"]}(),function(){"use strict";angular.module("theraClassRecord",[])}(),function(){"use strict";function therapeuticClassCtrl(){var vm=this;vm.model={},vm.$onInit=function(){},vm.$onChanges=function(changes){changes.record&&(vm.model=changes.record.currentValue)},vm.deleteRecord=function(){vm.onDelete({id:vm.model.id})},vm.showError=function(isInvalid,isTouched){return isInvalid&&isTouched||isInvalid&&vm.showErrors()}}angular.module("theraClass").component("cmpTheraRecord",{templateUrl:"app/scripts/components/therapeutic-classification/tpl-thera-record_20170203_1502.html",controller:therapeuticClassCtrl,controllerAs:"theraRecCtrl",bindings:{record:"<",onDelete:"&",showErrors:"&"}})}(),function(){"use strict";angular.module("tabModule",["tabsModule"])}(),function(){"use strict";function tabCtrl(){var self=this;self.$onInit=function(){self.tab={title:self.title,selected:!1},self.tabs.addTab(self.tab)}}angular.module("tabModule").component("cmpTab",{templateUrl:"app/scripts/components/tabs/tpl-tab_20170203_1502.html",controller:tabCtrl,controllerAs:"tabCtrl",bindings:{title:"@"},require:{tabs:"^^cmpTabs"},transclude:!0})}(),function(){"use strict";angular.module("tabsModule",["formulationsModule","appendixFourModule"])}(),function(){"use strict";function tabsCtrl($scope){var self=this;self.tabs=[{label:"FORMULATIONS",selected:!0,disabled:!1,errors:!0,form:{}},{label:"APPENDIX4",selected:!1,disabled:!1,errors:!1,form:{}}],self.$onInit=function(){},self.$onChanges=function(){},self.selectTab=function(idx){for(var i=0;i<self.tabs.length;i++)self.tabs[i].selected=!1,idx!==i&&(self.tabs[i].errors=self.tabs[i].form.$invalid);self.tabs[idx].selected=!0}}angular.module("tabsModule").component("cmpTabs",{templateUrl:"app/scripts/components/tabs/tpl-tabs_20170203_1502.html",controller:tabsCtrl,controllerAs:"tabsCtrl",bindings:{formulationList:"<",appendix4List:"<",recordChanged:"&",service:"<"}}),tabsCtrl.$inject=["$scope"]}(),function(){"use strict";angular.module("scheduleAModule",["checkBoxListModule"])}(),function(){"use strict";function scheduleACtrl($scope){var self=this;self.isClaim="",self.expanderOpenState=!1,self.disableExpander=!1,self.$onInit=function(){var noValue=!1;self.scheduleAModel||(self.scheduleAModel={drugIdNumber:"",scheduleAClaimsIndDetails:"",diseaseDisorderList:[{name:"acute-alcohol",label:"ACUTEALCOHOL",value:noValue},{name:"acute-anxiety",label:"ACUTEANXIETY",value:noValue},{name:"acute-infectious",label:"ACUTERESP",value:noValue},{name:"acute-inflammatory",label:"ACUTEINFLAM",value:noValue},{name:"acute-psychotic",label:"ACUTEPSYCHOTIC",value:noValue},{name:"addiction",label:"ADDICTION",value:noValue},{name:"ateriosclerosis",label:"ATERIOSCLEROSIS",value:noValue},{name:"appendicitis",label:"APPENDICITIS",value:noValue},{name:"asthma",label:"ASTHMA",value:noValue},{name:"cancer",label:"CANCER",value:noValue},{name:"congest-heart-fail",label:"HEARTCONGEST",value:noValue},{name:"convulsions",label:"CONVULSIONS",value:noValue},{name:"dementia",label:"DEMENTIA",value:noValue},{name:"depression",label:"DEPRESSION",value:noValue},{name:"diabetes",label:"DIABETES",value:noValue},{name:"gangrene",label:"GANGRENE",value:noValue},{name:"glaucoma",label:"GLAUCOMA",value:noValue},{name:"haematologic-bleeding",label:"BLEEDINGDISORDERS",value:noValue},{name:"hepatitis",label:"HEPATITIS",value:noValue},{name:"hypertension",label:"HYPERTENSION",value:noValue},{name:"nausea-pregnancy",label:"NAUSEAPREG",value:noValue},{name:"obesity",label:"OBESITY",value:noValue},{name:"rheumatic-fever",label:"RHEUMATICFEVER",value:noValue},{name:"septicemia",label:"SEPTICEMIA",value:noValue},{name:"sex-transmit-disease",label:"SEXDISEASE",value:noValue},{name:"strangulated-hernia",label:"STRANGHERNIA",value:noValue},{name:"thrombotic-embolic-disorder",label:"THROMBOTICDISORDER",
value:noValue},{name:"thyroid-disease",label:"THYROIDDISEASE",value:noValue},{name:"ulcer-gastro",label:"UCLERGASTRO",value:noValue}]})},self.$onChanges=function(changes){changes.scheduleGroup&&(self.scheduleAModel=changes.scheduleGroup.currentValue)},self.claimSelected=function(){for(var i=0;i<self.scheduleAModel.diseaseDisorderList.length;i++)if(self.scheduleAModel.diseaseDisorderList[i].value)return self.isClaim="selected",!0;return self.isClaim="",!1},self.noClaimSelected=function(){return!self.claimSelected()},self.showError=function(isInvalid,isTouched){return isInvalid&&isTouched||isInvalid&&self.showErrors()},self.isOpenState=function(){return self.schedAForm.$invalid?(self.expanderOpenState=!0,self.disableExpander=!0):self.disableExpander=!1,self.expanderOpenState},$scope.$watch("$ctrl.schedAForm.$invalid",function(){self.isOpenState()},!0)}angular.module("scheduleAModule").component("cmpScheduleA",{templateUrl:"app/scripts/components/schedule-a/tpl-schedule-a_20170203_1502.html",controller:scheduleACtrl,bindings:{scheduleGroup:"<",onUpdate:"&",onDelete:"&",showErrors:"&"}}),scheduleACtrl.$inject=["$scope"]}(),function(){"use strict";angular.module("roaRecord",["ui.select"])}(),function(){"use strict";function roaRecordController(DossierLists,$translate){var vm=this;vm.roaList=DossierLists.getRoa(),vm.model={},vm.lang=$translate.proposedLanguage()||$translate.use(),vm.$onInit=function(){vm.lang||(vm.lang="en")},vm.$onChanges=function(changes){changes.record&&(vm.model=changes.record.currentValue)},vm.roaChanged=function(item,model){vm.model.display=vm.model.roa.id},vm.deleteRecord=function(){vm.onDelete({id:vm.model.id})},vm.showError=function(isInvalid,isTouched){return isInvalid&&isTouched||isInvalid&&vm.showErrors()},vm.isRoaOther=function(){return vm.model.roa.id==DossierLists.getOtherValue()||(vm.model.otherRoaDetails="",!1)}}angular.module("roaRecord").config(function(uiSelectConfig){uiSelectConfig.theme="select2"}).component("cmpRoaRecord",{templateUrl:"app/scripts/components/route-admin/tpl-roa-record_20170203_1502.html",controller:roaRecordController,controllerAs:"roaRecCtrl",bindings:{record:"<",onDelete:"&",showErrors:"&"}}),roaRecordController.$inject=["DossierLists","$translate"]}(),function(){"use strict";angular.module("roaListModule",["roaRecord"])}(),function(){"use strict";function roaListCtrl($filter){function getMaxID(){for(var id=0,i=0;i<vm.model.roaList.length;i++)vm.model.roaList[i].id>id&&(id=vm.model.roaList[i].id);return id}var vm=this;vm.selectRecord=-1,vm.isDetailValid=!0,vm.resetToCollapsed=!0,vm.oneRecord="",vm.model={},vm.model.roaList=[],vm.columnDef=[{label:"ROA_LBL",binding:"display",width:"40"},{label:"OTHER_ROA_DETAILS",binding:"otherRoaDetails",width:"60"}],vm.$onInit=function(){},vm.$onChanges=function(changes){changes.records&&(vm.model.roaList=changes.records.currentValue)},vm.setValid=function(value){vm.isDetailValid=value},vm.addNew=function(){var maxID=getMaxID(),item={id:maxID+1,roa:{id:"",label_en:"",label_fr:""},otherRoaDetails:"",display:""};vm.model.roaList.push(item),vm.resetToCollapsed=!vm.resetToCollapsed,vm.selectRecord=0,vm.selectRecord=vm.model.roaList.length-1},vm.deleteRecord=function(recId){var idx=vm.model.roaList.indexOf($filter("filter")(vm.model.roaList,{id:recId},!0)[0]);vm.model.roaList.splice(idx,1)}}angular.module("roaListModule").component("cmpRoaList",{templateUrl:"app/scripts/components/route-admin/tpl-roa-list_20170203_1502.html",bindings:{records:"<",showErrors:"&"},controller:roaListCtrl,controllerAs:"roaCtrl"}),roaListCtrl.$inject=["$filter"]}(),function(){"use strict";angular.module("drugUseModule",["checkBoxListModule"])}(),function(){"use strict";function drugUseCtrl(){var self=this;self.$onInit=function(){self.commonName="drugUse",self.myList=[],self.listItems&&(self.myList=self.listItems)},self.$onChanges=function(changes){changes.listItems&&(self.myList=changes.listItems.currentValue)},self.isDrugUseSelected=function(){if(!self.myList)return!0;for(var i=0;i<self.myList.length;i++)if(self.myList[i].value)return!0;return!1},self.showNoRecordError=function(isInvalid){return self.parentDirty&&!self.isDrugUseSelected()||self.showListErrors()&&!self.isDrugUseSelected()}}angular.module("drugUseModule").component("cmpDrugUse",{templateUrl:"app/scripts/components/drug-use/tpl-drug-use_20170203_1502.html",controller:drugUseCtrl,controllerAs:"duCtrl",bindings:{listItems:"<",showListErrors:"&",parentDirty:"<"}})}(),function(){"use strict";var dependencies=["tabsModule","refProductListModule","drugUseModule","scheduleAModule","dossierDataLists","dataLists","filterLists","fileIO","contactModule26","applicationInfoService","applicationInfo","ui.bootstrap","numberFormat","ngMessages","ngAria","theraClass","dossierService","ngSanitize"];angular.module("dossierModule",dependencies)}(),function(){"use strict";function dossierCtrl($scope,hpfbFileProcessing,ApplicationInfoService,DossierService,DossierLists,getRoleLists,YES,INTERNAL_TYPE,EXTERNAL_TYPE){function _loadFileContent(fileContent){if(fileContent){var resultJson=fileContent.jsonResult;resultJson&&(self.dossierModel=self.dossierService.loadFromFile(resultJson)),self.showNoRefReError(),getAppendix4Errors(),_setComplete(),self.showAllErrors=!0,disableXMLSave()}}function getAppendix4Errors(){var appendixCheck=self.dossierService.getMissingAppendix4(self.dossierModel);self.errorAppendix=appendixCheck.missing,self.extraAppendix=appendixCheck.extra}function _setComplete(){self.isIncomplete=!self.activityRoot.dossierID}function disableXMLSave(){var formInvalid=!0;self.dossierForm&&(formInvalid=self.dossierForm.$invalid),self.disableXML=formInvalid||self.dossierModel.applicationType==self.applicationInfoService.getApprovedType()&&self.isExtern()}function _setComplete(){self.isIncomplete=!self.dossierModel.dossierID}function _transformFile(){return updateDate(),self.isExtern()?self.dossierModel.enrolmentVersion=self.applicationInfoService.incrementMinorVersion(self.dossierModel.enrolmentVersion):(self.dossierModel.enrolmentVersion=self.applicationInfoService.incrementMajorVersion(self.dossierModel.enrolmentVersion),self.dossierModel.applicationType=ApplicationInfoService.prototype.getApprovedType()),self.dossierService.dossierToOutput(self.dossierModel)}function _createFilename(){var draft_prefix="DRAFTREPDO",final_prefix="HCREPDO",filename="";return filename=self.userType===INTERNAL_TYPE?final_prefix:draft_prefix,self.dossierModel&&self.dossierModel.dossierID&&(filename=filename+"_"+self.dossierModel.dossierID),self.dossierModel.enrolmentVersion&&(filename=filename+"_"+self.dossierModel.enrolmentVersion),filename}function updateDate(){self.dossierModel&&(self.dossierModel.dateSaved=self.applicationInfoService.getTodayDate())}var self=this;self.showContent=_loadFileContent,self.applicationInfoService=new ApplicationInfoService,self.userType=EXTERNAL_TYPE,self.saveXMLLabel="SAVE_DRAFT",self.yesNoList=DossierLists.getYesNoList(),self.yesValue=DossierLists.getYesValue(),self.formTypeList=getRoleLists.getFormTypes(),self.configField={label:"DOSSIER_ID",fieldLength:"7",tagName:"dossierID",errorMsg:"MSG_LENGTH_7",isDossier:!0},self.isIncomplete=!0,self.formAmend=!1,self.showAllErrors=!1,self.errorAppendix=[],self.extraAppendix=[],self.noThera="",self.oneRefSelected="",self.alert1={type:"info",msg:"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi feugiat nunc et tempor malesuada. Nullam tristique ligula blandit, posuere est ac, sagittis mi. In hac habitasse platea dictumst. Interdum et malesuada fames ac ante ipsum primis in faucibus. Cras ullamcorper sagittis erat ac lobortis. Suspendisse bibendum sed mauris eget condimentum. Suspendisse egestas ligula a libero tincidunt, ut vehicula sem fermentum. Quisque semper scelerisque urna, in dignissim odio condimentum ac. Nullam suscipit malesuada magna, eget lacinia nulla tempor id. Curabitur tristique ipsum libero, ut pulvinar ipsum venenatis non. Ut porta, sem non blandit aliquet, ante mauris porta ex, quis iaculis elit orci eu leo. Morbi at enim nec odio ullamcorper molestie. Nulla sit amet magna consequat, blandit orci a, porta eros. Sed enim nisl, tempus ac imperdiet a, ornare gravida sapien. Curabitur ultricies dolor aliquet bibendum accumsan.",show:!1},self.alert2={type:"info",msg:"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi feugiat nunc et tempor malesuada. Nullam tristique ligula blandit, posuere est ac, sagittis mi. In hac habitasse platea dictumst. Interdum et malesuada fames ac ante ipsum primis in faucibus. Cras ullamcorper sagittis erat ac lobortis. Suspendisse bibendum sed mauris eget condimentum. Suspendisse egestas ligula a libero tincidunt, ut vehicula sem fermentum. Quisque semper scelerisque urna, in dignissim odio condimentum ac. Nullam suscipit malesuada magna, eget lacinia nulla tempor id. Curabitur tristique ipsum libero, ut pulvinar ipsum venenatis non. Ut porta, sem non blandit aliquet, ante mauris porta ex, quis iaculis elit orci eu leo. Morbi at enim nec odio ullamcorper molestie. Nulla sit amet magna consequat, blandit orci a, porta eros. Sed enim nisl, tempus ac imperdiet a, ornare gravida sapien. Curabitur ultricies dolor aliquet bibendum accumsan.",show:!1},self.alert3={type:"info",msg:"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi feugiat nunc et tempor malesuada. Nullam tristique ligula blandit, posuere est ac, sagittis mi. In hac habitasse platea dictumst. Interdum et malesuada fames ac ante ipsum primis in faucibus. Cras ullamcorper sagittis erat ac lobortis. Suspendisse bibendum sed mauris eget condimentum. Suspendisse egestas ligula a libero tincidunt, ut vehicula sem fermentum. Quisque semper scelerisque urna, in dignissim odio condimentum ac. Nullam suscipit malesuada magna, eget lacinia nulla tempor id. Curabitur tristique ipsum libero, ut pulvinar ipsum venenatis non. Ut porta, sem non blandit aliquet, ante mauris porta ex, quis iaculis elit orci eu leo. Morbi at enim nec odio ullamcorper molestie. Nulla sit amet magna consequat, blandit orci a, porta eros. Sed enim nisl, tempus ac imperdiet a, ornare gravida sapien. Curabitur ultricies dolor aliquet bibendum accumsan.",show:!1},self.alert4={type:"info",msg:"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi feugiat nunc et tempor malesuada. Nullam tristique ligula blandit, posuere est ac, sagittis mi. In hac habitasse platea dictumst. Interdum et malesuada fames ac ante ipsum primis in faucibus. Cras ullamcorper sagittis erat ac lobortis. Suspendisse bibendum sed mauris eget condimentum. Suspendisse egestas ligula a libero tincidunt, ut vehicula sem fermentum. Quisque semper scelerisque urna, in dignissim odio condimentum ac. Nullam suscipit malesuada magna, eget lacinia nulla tempor id. Curabitur tristique ipsum libero, ut pulvinar ipsum venenatis non. Ut porta, sem non blandit aliquet, ante mauris porta ex, quis iaculis elit orci eu leo. Morbi at enim nec odio ullamcorper molestie. Nulla sit amet magna consequat, blandit orci a, porta eros. Sed enim nisl, tempus ac imperdiet a, ornare gravida sapien. Curabitur ultricies dolor aliquet bibendum accumsan.",show:!1};var yesValue=YES;self.$onInit=function(){self.dossierService=new DossierService,self.dossierModel=self.dossierService.getDefaultObject()},self.$onChanges=function(changes){changes.formType&&(self.userType=changes.formType.currentValue,self.userType==INTERNAL_TYPE?self.saveXMLLabel="APPROVE_FINAL":self.saveXMLLabel="SAVE_DRAFT")},self.appendixMissingError=function(){return self.errorAppendix&&self.errorAppendix.length>0},self.appendixExtraError=function(){return self.extraAppendix&&self.extraAppendix.length>0},self.thirdPartySignedChanged=function(){return self.dossierModel.drugProduct.thirdPartySigned===yesValue},self.recordsChanged=function(){getAppendix4Errors()},self.isRefProducts=function(){return self.dossierModel.isRefProducts===self.yesValue||(self.dossierModel.drugProduct.canRefProducts=[],!1)},self.setApplicationType=function(value){self.dossierModel.applicationType=value,self.formAmend=self.dossierModel.applicationType===self.applicationInfoService.getAmendType(),disableXMLSave()},self.cdnRefUpdated=function(list){self.showNoRefReError()},self.showNoRefReError=function(){return self.dossierModel.drugProduct.canRefProducts.length>0&&self.dossierModel.isRefProducts===yesValue?(self.oneRefSelected="sel",!1):(self.oneRefSelected="",!0)},$scope.$watch("dos.dossierForm.$invalid",function(){disableXMLSave()},!0),self.isExtern=function(){return self.userType==EXTERNAL_TYPE},self.showErrors=function(){return self.showAllErrors},self.showError=function(isInvalid,isTouched){return isInvalid&&isTouched||self.showErrors()&&isInvalid},self.isSchedA=function(){return!!(self.dossierModel&&self.dossierModel.drugProduct&&self.dossierService)&&(!!self.dossierModel.drugProduct.isScheduleA||(self.dossierModel.drugProduct.scheduleAGroup=self.dossierService.getDefaultScheduleA(),!1))},self.saveJson=function(){var writeResult=_transformFile();hpfbFileProcessing.writeAsJson(writeResult,_createFilename(),self.dossierService.getRootTagName()),self.showAllErrors=!0},self.saveXML=function(){var writeResult=_transformFile();hpfbFileProcessing.writeAsXml(writeResult,_createFilename(),self.dossierService.getRootTagName()),self.showAllErrors=!1},self.noTheraRecs=function(){return self.dossierModel&&self.dossierModel.drugProduct?self.dossierModel.drugProduct.therapeutic&&0!==self.dossierModel.drugProduct.therapeutic.length?(self.noThera=self.dossierModel.drugProduct.therapeutic.length,!1):(self.noThera="",!0):(self.noThera="",!1)},self.closeAlert=function(value){switch(value){case"1":self.alert1.show=!1;break;case"2":self.alert2.show=!1;break;case"3":self.alert3.show=!1;break;case"4":self.alert4.show=!1}},self.addInstruct=function(value){switch(value){case"1":self.alert1.show=!0;break;case"2":self.alert2.show=!0;break;case"3":self.alert3.show=!0;break;case"4":self.alert4.show=!0}}}angular.module("dossierModule").component("cmpDossier",{templateUrl:"app/scripts/components/dossier/tpl-dossier_20170203_1502.html",controller:dossierCtrl,controllerAs:"dos",bindings:{dossierRecordInput:"<",onUpdateDossier:"&",onDeleteDossier:"&",formType:"@",service:"<"}}),dossierCtrl.$inject=["$scope","hpfbFileProcessing","ApplicationInfoService","DossierService","DossierLists","getRoleLists","YES","INTERNAL_TYPE","EXTERNAL_TYPE"]}(),function(){"use strict";angular.module("countryRecordModule",["ui.select","hpfbConstants"])}(),function(){"use strict";function countryRecordController($filter,$translate,UNKNOWN){var vm=this;vm.model={id:"",country:"",unknownCountryDetails:"",display:""},vm.countries=[],vm.lang=$translate.proposedLanguage()||$translate.use(),vm.$onInit=function(){},vm.countryChanged=function($item,$model){vm.model.display=$model.id},vm.$onChanges=function(changes){changes.countryList&&(vm.countries=changes.countryList.currentValue),changes.record&&changes.record.currentValue&&(vm.model=changes.record.currentValue)},vm.deleteRecord=function(){vm.onDelete({id:vm.model.id})},vm.showError=function(isInvalid,isTouched){return isInvalid&&isTouched||isInvalid&&vm.showErrors()},vm.isUnknown=function(){return!(!vm.model||!vm.model.country)&&vm.model.country.id===UNKNOWN}}angular.module("countryRecordModule").config(function(uiSelectConfig){uiSelectConfig.theme="select2"}).component("cmpCountryRecord",{templateUrl:"app/scripts/components/country-list/tpl-country-record_20170203_1502.html",controller:countryRecordController,controllerAs:"countryRecCtrl",bindings:{record:"<",onDelete:"&",showErrors:"&",countryList:"<",fieldsetLabel:"@"}}),countryRecordController.$inject=["$filter","$translate","UNKNOWN"]}(),function(){"use strict";angular.module("countryListModule",["dataLists","countryRecordModule","ui.select","hpfbConstants"])}(),function(){"use strict";function countryListController($filter,getCountryAndProvinces,UNKNOWN){function setUnknownCountryState(isUnknown){var countries=angular.copy(self.baseCountries);if(isUnknown){var unknownRec=getCountryAndProvinces.getUnknownCountryRecord();countries.unshift(unknownRec),self.countryList=countries,self.hasUnknown=!0,self.columnDef=[{label:self.fieldLabel,binding:"display",width:"50"},{label:"UNKNOWN_COUNTRY_DETAILS",binding:"unknownCountryDetails",width:"50"}]}else self.countryList=countries,self.hasUnknown=!1,self.emptyModel={id:"",country:"",unknownCountryDetails:"",display:""},self.columnDef=[{label:self.fieldLabel,binding:"display",width:"100"}]}function setRecord(value){self.selectRecord=value}function getListMaxID(){var out=0,list=self.model.list;if(list)for(var i=0;i<list.length;i++)list[i].id>out&&(out=list[i].id);return out}var self=this;self.baseCountries=getCountryAndProvinces.getCountries(),self.countryList="",self.model={},self.isDetailValid=!0,self.resetToCollapsed=!0,self.selectRecord=0,self.columnDef=[{label:self.fieldLabel,binding:"display",width:"100"}],self.hasUnknown=!1,self.emptyModel={id:"",country:"",unknownCountryDetails:"",display:""},self.$onInit=function(){angular.isUndefined(self.model.list)&&(self.model.list=[]),angular.isUndefined(self.countryList)&&setUnknownCountryState(self.withUnknown)},self.$onChanges=function(changes){changes.withUnknown&&setUnknownCountryState(changes.withUnknown.currentValue),changes.listItems&&(self.model.list=changes.listItems.currentValue)},self.addNew=function(){var item=(getListMaxID(),angular.copy(self.emptyModel));item.id=getListMaxID()+1,self.model.list.push(item),setRecord(-1),self.resetToCollapsed=!self.resetToCollapsed,setRecord(self.model.list.length-1)},self.deleteRecord=function(_id){var idx=self.model.list.indexOf($filter("filter")(self.model.list,{id:_id},!0)[0]);idx<0||self.model.list.splice(idx,1)},self.showError=function(isInvalid,isTouched){return isInvalid&&isTouched||isInvalid&&self.showErrors()}}angular.module("countryListModule").component("cmpCountryList",{templateUrl:"app/scripts/components/country-list/tpl-country-list_20170203_1502.html",controller:countryListController,controllerAs:"countryListCtrl",bindings:{withUnknown:"<",listItems:"<",onUpdate:"&",onDelete:"&",showErrors:"&",fieldLabel:"@"}}),countryListController.$inject=["$filter","getCountryAndProvinces","UNKNOWN"]}(),function(){"use strict";angular.module("checkBoxListModule",[])}(),function(){"use strict";function checkBoxListCtrl(){var self=this;self.numberColumns=4,self.colWidth=3,self.$onInit=function(){},self.$onChanges=function(changes){changes.listItems&&(self.currentModel=changes.listItems.currentValue),changes.numberCols&&changes.numberCols.currentValue&&(self.numberColumns=changes.numberCols.currentValue,self.colWidth=Math.ceil(12/self.numberColumns))},self.someSelected=function(){var object=self.roleModel;return!!object&&Object.keys(object).some(function(key){return object[key]})},self.updateState=function(item){item.value||(item.value=!1,item.hasOtherDetails&&(item.otherText=""))}}angular.module("checkBoxListModule").component("cmpCheckboxList",{templateUrl:"app/scripts/components/checkbox-list/tpl-checkbox-list_20170203_1502.html",controller:checkBoxListCtrl,controllerAs:"chkl",bindings:{title:"@",commonName:"@",listItems:"<",numberCols:"@",onUpdate:"&"}})}(),function(){"use strict";angular.module("refProductListModule",["expandingTable","refProductDetailsModule"])}(),function(){"use strict";function refProductListCtrl(){function setRecord(value){self.selectRecord=value}var self=this;self.isDetailValid=!0,self.selectRecord=-1,self.resetToCollapsed=!1,self.newProductFormShown=!1,self.$onInit=function(){self.newProductFormShown=!1,self.isDetailValid=!0,self.selectRecord=-1,self.colNames=[{label:"BRAND_NAME",binding:"brandName",width:"50"},{label:"COMPANY_NAME",binding:"companyName",width:"50"}],self.productList=[],self.newProductFormShown=!1,self.products&&(self.productList=self.products)},self.$onChanges=function(changes){changes.products&&(self.productList=changes.products.currentValue)},self.addProduct=function(product){self.setValid(!0),self.resetToCollapsed=!self.resetToCollapsed,self.productList.push(product),self.newProductFormShown=!1,self.onUpdate({recs:self.productList}),setRecord(-1)},self.updateProduct=function(idx,product){self.productList[idx]=angular.copy(product),self.setValid(!0),self.onUpdate({recs:self.productList})},self.deleteProduct=function(idx){self.productList.splice(idx,1),self.setValid(!0),setRecord(-1),self.onUpdate({recs:self.productList}),self.resetToCollapsed=!self.resetToCollapsed},self.addNewProductState=function(){return self.resetToCollapsed=!self.resetToCollapsed,self.newProductFormShown=!0,self.setValid(!1),self.newProductFormShown},self.addNewDisabled=function(){return self.newProductFormShown||!self.isDetailValid},self.setValid=function(value){self.isDetailValid=value},self.onNewCancel=function(){self.setValid(!0),self.newProductFormShown=!1}}angular.module("refProductListModule").component("cmpRefProductList",{templateUrl:"app/scripts/components/can-ref-products/tpl-ref-product-list_20170203_1502.html",controller:refProductListCtrl,controllerAs:"crpl",bindings:{products:"<",onUpdate:"&"}})}(),function(){"use strict";angular.module("refProductDetailsModule",["expandingTable","dossierDataLists","filterLists","ui.select","hpfbConstants"])}(),function(){"use strict";function refProductDetailsCtrl(DossierLists,$scope,$translate,OTHER){var self=this;self.dosageFormList=DossierLists.getDosageFormList(),self.unitsList=DossierLists.getUnitsList(),self.activeList=DossierLists.getActiveList(),self.savePressed=!1,self.lang=$translate.proposedLanguage()||$translate.use(),self.productModel={brandName:"",newIngred:"Y",ingId:"",ingLabel:"",strengths:"",units:"",otherUnits:"",per:"",dosageForm:"",dosageFormOther:"",companyName:""},self.$onInit=function(){},self.$onChanges=function(changes){changes.productRecord&&changes.productRecord.currentValue&&(self.productModel=angular.copy(self.productRecord),self.backup=angular.copy(self.productModel),self.savePressed=!1)},self.isDosageOther=function(){return!!self.productModel.dosageForm&&(self.productModel.dosageForm.id===OTHER||(self.productModel.dosageFormOther="",!1))},self.showError=function(ctrl){return ctrl.$touched&&ctrl.$invalid||ctrl.$invalid&&self.showErrors()||ctrl.$invalid&&self.savePressed},self.saveProduct=function(){self.productDetailsForm.$valid?(self.productRecord?self.onUpdate({product:self.productModel}):self.onAddProduct({product:self.productModel}),self.productDetailsForm.$setPristine(),self.savePressed=!1):self.savePressed=!0},self.ingredSelectionUpdated=function(item,model,label,event){self.productModel.ingId=item.id},self.discardChanges=function(){self.productModel=angular.copy(self.backup),self.productDetailsForm.$setPristine(),self.onCancel()},self["delete"]=function(){self.productRecord&&self.onDelete()},self.isUnitsOther=function(){return!!self.productModel&&(self.productModel.units.id===OTHER||(self.productModel.otherUnits="",!1))},$scope.$watch("$ctrl.productDetailsForm.$dirty",function(){self.isDetailValid({state:!self.productDetailsForm.$dirty})},!0)}angular.module("refProductDetailsModule").config(function(uiSelectConfig){uiSelectConfig.theme="select2"}).component("cmpRefProductDetails",{templateUrl:"app/scripts/components/can-ref-products/tpl-ref-product-details_20170203_1502.html",controller:refProductDetailsCtrl,bindings:{productRecord:"<",deleteBtn:"<",onAddProduct:"&",onUpdate:"&",onDelete:"&",onCancel:"&",showErrors:"&",isDetailValid:"&",recordIndex:"<"}}),refProductDetailsCtrl.$inject=["DossierLists","$scope","$translate","OTHER"]}(),function(){"use strict";angular.module("tissuesFluidsList",["tissuesFluidsRecord","expandingTable"])}(),function(){"use strict";function tissuesFluidsListController($filter){function getMaxID(){for(var id=0,i=0;i<vm.model.tissuesFluidsList.length;i++)vm.model.tissuesFluidsList[i].id>id&&(id=vm.model.tissuesFluidsList[i].id);return id}var vm=this;vm.selectRecord=-1,vm.isDetailValid=!0,vm.resetToCollapsed=!0,vm.oneRecord="",vm.model={},vm.model.tissuesFluidsList=[],vm.columnDef=[{label:"SYSTEM_TYPE",binding:"systemType",width:"20"},{label:"SYSTEM_DETAILS",binding:"detailsConcat",width:"40",isHtml:!0},{label:"SYSTEM_OTHER",binding:"otherDetails",width:"40"}],vm.$onInit=function(){vm.isDetailValid=!0,vm.resetToCollapsed=!0,vm.noTissueRecs()},vm.$onChanges=function(changes){changes.records&&(vm.model.tissuesFluidsList=changes.records.currentValue)},vm.setValid=function(value){vm.isDetailValid=value},vm.addNew=function(){var maxID=getMaxID(),item={id:maxID+1,systemType:"",detailsConcat:"",system:{},otherDetails:""};vm.model.tissuesFluidsList.push(item),vm.resetToCollapsed=!vm.resetToCollapsed,vm.selectRecord=0,vm.selectRecord=vm.model.tissuesFluidsList.length-1},vm.deleteRecord=function(recId){var idx=vm.model.tissuesFluidsList.indexOf($filter("filter")(vm.model.tissuesFluidsList,{id:recId},!0)[0]);vm.model.tissuesFluidsList.splice(idx,1)},vm.noTissueRecs=function(){return vm.model.tissuesFluidsList.length>0?(vm.oneRecord="selected",!1):(vm.oneRecord="",!0)},vm.disableAdd=function(){return!vm.noTissueRecs()&&vm.tissuesListForm.$invalid},vm.systemAlreadyUsed=function(systemVal){for(var systemExists=0,i=0;i<vm.model.tissuesFluidsList.length;i++)vm.model.tissuesFluidsList[i].systemType===systemVal&&systemExists++;return systemExists>1}}angular.module("tissuesFluidsList").component("cmpTissuesFluidsList",{templateUrl:"app/scripts/components/appendix-four/tpl-tissuesFluids-list_20170203_1502.html",bindings:{records:"<",showErrors:"&",service:"<"},controller:tissuesFluidsListController,controllerAs:"tissuesListSrcCtrl"}),tissuesFluidsListController.$inject=["$filter"]}(),function(){"use strict";angular.module("tissuesFluidsRecord",["dossierDataLists","nervousModule","digestiveModule","cardioModule","immuneModule","muscleModule","otherTissuesModule","reprodModule","skinModule"])}(),function(){"use strict";function tissuesFluidsController(DossierLists,$translate,$filter){var vm=this;vm.systemList=DossierLists.getTissuesSystem(),vm.fluidsLists=DossierLists,vm.dosService="",vm.isUsed=!1,vm.selectedSystemList=[],vm.model={},vm.$onInit=function(){},vm.$onChanges=function(changes){changes.record&&(vm.model=changes.record.currentValue),changes.service&&(vm.dosService=changes.service.currentValue)},vm.deleteRecord=function(){vm.onDelete({id:vm.model.id})},vm.showError=function(ctrl){return ctrl?ctrl.$invalid&&ctrl.$touched||ctrl.$invalid&&vm.showErrors():(console.warn("No control found in tissuesFluids-record"),!1)},vm.systemChanged=function(ctrl){switch(vm.model.system={},vm.model.detailsConcat="",vm.isUsed=vm.systemUsed({value:vm.model.systemType}),ctrl.$setValidity("duplicateRole",!vm.isUsed),vm.isUsed&&(vm.model.system={},vm.otherDetails="",vm.model.detailsConcat=""),vm.model.systemType){case DossierLists.getNervousSystemValue():vm.model.system=vm.dosService.getDefaultNervousSystem();break;case DossierLists.getDigestiveSystemValue():vm.model.system=vm.dosService.getDefaultDigestiveSystem();break;case DossierLists.getImmuneSystemValue():vm.model.system=vm.dosService.getDefaultImmuneSystem();break;case DossierLists.getMuscleSystemValue():vm.model.system=vm.dosService.getDefaultMuscleSystem();break;case DossierLists.getOtherTissuesSystemValue():vm.model.system=vm.dosService.getDefaultOtherSystem();break;case DossierLists.getReproductiveSystemValue():vm.model.system=vm.dosService.getDefaultReproductiveSystem();break;case DossierLists.getSkinSystemValue():vm.model.system=vm.dosService.getDefaultSkinSystem();break;case DossierLists.getCardioSystemValue():vm.model.system=vm.dosService.getDefaultCardioSystem();break;default:vm.model.system={},vm.otherDetails="",vm.model.detailsConcat=""}vm.otherChanged()},vm.otherChanged=function(){vm.model.otherDetails=vm.model.system.otherDetails},vm.updateConcat=function(alias,toAdd){for(var currentLang=$translate.proposedLanguage()||$translate.use(),translateText=$translate.instant(alias,"","",currentLang),records=vm.model.detailsConcat.split("<br>"),index=-1,i=0;i<records.length;i++)if(records[i]==translateText){index=i;break}if(index===-1&&toAdd){records[0]?records.push(translateText):records[0]=translateText,records=$filter("orderBy")(records),vm.model.detailsConcat="",vm.model.detailsConcat=records[0];for(var s=1;s<records.length;s++)vm.model.detailsConcat=vm.model.detailsConcat+"<br>"+records[s]}else if(!toAdd&&index!==-1){for(var newConcat="",j=0;j<records.length;j++)j!==index&&(newConcat=newConcat+records[j]+"<br>");vm.model.detailsConcat=newConcat.substring(0,newConcat.length-4)}}}angular.module("tissuesFluidsRecord").component("cmpTissuesFluidsRecord",{templateUrl:"app/scripts/components/appendix-four/tpl-tiissueFluids-record_20170203_1502.html",controller:tissuesFluidsController,controllerAs:"tissuesSrcCtrl",bindings:{record:"<",onDelete:"&",showErrors:"&",service:"<",systemUsed:"&"}}),tissuesFluidsController.$inject=["DossierLists","$translate","$filter"]}(),function(){"use strict";angular.module("skinModule",[])}(),function(){"use strict";function skinSystemController(){var vm=this;vm.model={},vm.isSelected="",vm.$onInit=function(){},vm.$onChanges=function(changes){changes.record&&(vm.model=changes.record.currentValue,vm.updateErrorState())},vm.updateErrorState=function(){for(var keys=Object.keys(vm.model),i=0;i<keys.length;i++){var val=vm.model[keys[i]];if(val)return"otherSkin"===keys[i]?vm.model.otherDetails?void(vm.isSelected="selected"):void(vm.isSelected=""):void(vm.isSelected="selected")}vm.isSelected=""},vm.detailsChanged=function(alias,value){vm.concatUpdate({alias:alias,value:value}),vm.updateErrorState()},vm.otherChanged=function(){var state=!1;return vm.model.otherSkin?state=!0:(state=!1,vm.model.otherDetails=""),vm.otherUpdate(),vm.updateErrorState(),state}}angular.module("skinModule").component("cmpSkinSystem",{templateUrl:"app/scripts/components/appendix-four/tpl-skin_20170203_1502.html",controllerAs:"sysCtrl",controller:skinSystemController,bindings:{record:"<",otherUpdate:"&",concatUpdate:"&"}})}(),function(){"use strict";angular.module("reprodModule",[])}(),function(){"use strict";function reproductiveSystemController(){var vm=this;vm.model={},vm.isSelected="",vm.$onInit=function(){},vm.$onChanges=function(changes){changes.record&&(vm.model=changes.record.currentValue,vm.updateErrorState())},vm.detailsChanged=function(alias,value){vm.concatUpdate({alias:alias,value:value}),vm.updateErrorState()},vm.updateErrorState=function(){for(var keys=Object.keys(vm.model),i=0;i<keys.length;i++){var val=vm.model[keys[i]];if(val)return"otherReproductive"===keys[i]?vm.model.otherDetails?void(vm.isSelected="selected"):void(vm.isSelected=""):void(vm.isSelected="selected")}vm.isSelected=""},vm.otherChanged=function(){var state=!1;return vm.model.otherReproductive?state=!0:(state=!1,vm.model.otherDetails=""),vm.otherUpdate(),vm.updateErrorState(),state}}angular.module("reprodModule").component("cmpReproductiveSystem",{templateUrl:"app/scripts/components/appendix-four/tpl-reproductive_20170203_1502.html",controllerAs:"sysCtrl",controller:reproductiveSystemController,bindings:{record:"<",otherUpdate:"&",concatUpdate:"&"}})}(),function(){"use strict";angular.module("otherTissuesModule",[])}(),function(){"use strict";function otherTissueSystemController(){var vm=this;vm.model={},vm.isSelected="",vm.$onInit=function(){},vm.$onChanges=function(changes){changes.record&&(vm.model=changes.record.currentValue,vm.updateErrorState())},vm.detailsChanged=function(alias,value){vm.concatUpdate({alias:alias,value:value}),vm.updateErrorState()},vm.updateErrorState=function(){for(var keys=Object.keys(vm.model),i=0;i<keys.length;i++){var val=vm.model[keys[i]];if(val)return"otherFluids"===keys[i]?vm.model.otherDetails?void(vm.isSelected="selected"):void(vm.isSelected=""):void(vm.isSelected="selected")}vm.isSelected=""},vm.otherChanged=function(){var state=!1;return vm.model.otherFluids?state=!0:(state=!1,vm.model.otherDetails=""),
vm.otherUpdate(),vm.updateErrorState(),state}}angular.module("otherTissuesModule").component("cmpOtherTissuesSystem",{templateUrl:"app/scripts/components/appendix-four/tpl-other-tissue_20170203_1502.html",controllerAs:"sysCtrl",controller:otherTissueSystemController,bindings:{record:"<",otherUpdate:"&",concatUpdate:"&"}})}(),function(){"use strict";angular.module("nervousModule",[])}(),function(){"use strict";function nervousSystemController(){var vm=this;vm.model={},vm.$onInit=function(){vm.isSelected=""},vm.$onChanges=function(changes){changes.record&&(vm.model=changes.record.currentValue,vm.updateErrorState())},vm.detailsChanged=function(alias,value){vm.concatUpdate({alias:alias,value:value}),vm.updateErrorState()},vm.updateErrorState=function(){for(var keys=Object.keys(vm.model),i=0;i<keys.length;i++){var val=vm.model[keys[i]];if(val)return"otherNervous"===keys[i]?vm.model.otherDetails?void(vm.isSelected="selected"):void(vm.isSelected=""):void(vm.isSelected="selected")}vm.isSelected=""},vm.otherChanged=function(){var state=!1;return vm.model.otherNervous?state=!0:(state=!1,vm.model.otherDetails=""),vm.otherUpdate(),vm.updateErrorState(),state}}angular.module("nervousModule").component("cmpNervousSystem",{templateUrl:"app/scripts/components/appendix-four/tpl-nervous_20170203_1502.html",controllerAs:"sysCtrl",controller:nervousSystemController,bindings:{record:"<",otherUpdate:"&",concatUpdate:"&"}})}(),function(){"use strict";angular.module("muscleModule",[])}(),function(){"use strict";function muscleSystemController(){var vm=this;vm.model={},vm.$onInit=function(){vm.isSelected=""},vm.$onChanges=function(changes){changes.record&&(vm.model=changes.record.currentValue,vm.updateErrorState())},vm.detailsChanged=function(alias,value){vm.concatUpdate({alias:alias,value:value}),vm.updateErrorState()},vm.updateErrorState=function(){for(var keys=Object.keys(vm.model),i=0;i<keys.length;i++){var val=vm.model[keys[i]];if(val)return"otherMuscle"===keys[i]?vm.model.otherDetails?void(vm.isSelected="selected"):void(vm.isSelected=""):void(vm.isSelected="selected")}vm.isSelected=""},vm.otherChanged=function(){var state=!1;return vm.model.otherMuscle?state=!0:(state=!1,vm.model.otherDetails=""),vm.otherUpdate(),vm.updateErrorState(),state}}angular.module("muscleModule").component("cmpMuscleSystem",{templateUrl:"app/scripts/components/appendix-four/tpl-muscle_20170203_1502.html",controllerAs:"sysCtrl",controller:muscleSystemController,bindings:{record:"<",otherUpdate:"&",concatUpdate:"&"}})}(),function(){"use strict";angular.module("immuneModule",[])}(),function(){"use strict";function immuneSystemController(){var vm=this;vm.model={},vm.isSelected="",vm.$onInit=function(){},vm.$onChanges=function(changes){changes.record&&(vm.model=changes.record.currentValue,vm.updateErrorState())},vm.detailsChanged=function(alias,value){vm.concatUpdate({alias:alias,value:value}),vm.updateErrorState()},vm.updateErrorState=function(){for(var keys=Object.keys(vm.model),i=0;i<keys.length;i++){var val=vm.model[keys[i]];if(val)return"otherImmune"===keys[i]?vm.model.otherDetails?void(vm.isSelected="selected"):void(vm.isSelected=""):void(vm.isSelected="selected")}vm.isSelected=""},vm.otherChanged=function(){var state=!1;return vm.model.otherImmune?state=!0:(state=!1,vm.model.otherDetails=""),vm.otherUpdate(),vm.updateErrorState(),state}}angular.module("immuneModule").component("cmpImmuneSystem",{templateUrl:"app/scripts/components/appendix-four/tpl-immune_20170203_1502.html",controllerAs:"sysCtrl",controller:immuneSystemController,bindings:{record:"<",otherUpdate:"&",concatUpdate:"&"}})}(),function(){"use strict";angular.module("digestiveModule",[])}(),function(){"use strict";function digestiveSystemController(){var vm=this;vm.model={},vm.isSelected="",vm.$onInit=function(){},vm.$onChanges=function(changes){changes.record&&(vm.model=changes.record.currentValue,vm.updateErrorState())},vm.detailsChanged=function(alias,value){vm.concatUpdate({alias:alias,value:value}),vm.updateErrorState()},vm.updateErrorState=function(){for(var keys=Object.keys(vm.model),i=0;i<keys.length;i++){var val=vm.model[keys[i]];if(val)return"otherDigestive"===keys[i]?vm.model.otherDetails?void(vm.isSelected="selected"):void(vm.isSelected=""):void(vm.isSelected="selected")}vm.isSelected=""},vm.otherChanged=function(){var state=!1;return vm.model.otherDigestive?state=!0:(state=!1,vm.model.otherDetails=""),vm.otherUpdate(),vm.updateErrorState(),state}}angular.module("digestiveModule").component("cmpDigestiveSystem",{templateUrl:"app/scripts/components/appendix-four/tpl-digestive_20170203_1502.html",controllerAs:"sysCtrl",controller:digestiveSystemController,bindings:{record:"<",otherUpdate:"&",concatUpdate:"&"}})}(),function(){"use strict";angular.module("cardioModule",[])}(),function(){"use strict";function cardioSystemController(){var vm=this;vm.model={},vm.isSelected="",vm.$onInit=function(){},vm.$onChanges=function(changes){changes.record&&(vm.model=changes.record.currentValue,vm.updateErrorState())},vm.detailsChanged=function(alias,value){vm.concatUpdate({alias:alias,value:value}),vm.updateErrorState()},vm.updateErrorState=function(){for(var keys=Object.keys(vm.model),i=0;i<keys.length;i++){var val=vm.model[keys[i]];if(val)return"otherCardio"===keys[i]?vm.model.otherDetails?void(vm.isSelected="selected"):void(vm.isSelected=""):void(vm.isSelected="selected")}vm.isSelected=""},vm.otherChanged=function(){var state=!1;return vm.model.otherCardio?state=!0:(state=!1,vm.model.otherDetails=""),vm.otherUpdate(),vm.updateErrorState(),state}}angular.module("cardioModule").component("cmpCardioSystem",{templateUrl:"app/scripts/components/appendix-four/tpl-cardio_20170203_1502.html",controllerAs:"sysCtrl",controller:cardioSystemController,bindings:{record:"<",otherUpdate:"&",concatUpdate:"&"}})}(),function(){"use strict";angular.module("appendixFourModule",["expandingTable","appendix4RecordModule"])}(),function(){"use strict";function appendixFourCtrl(){function getListMaxID(){var out=0,list=self.ingredientList;if(list)for(var i=0;i<list.length;i++)list[i].id>out&&(out=list[i].id);return out}var self=this;self.selectRecord=-1,self.resetToCollapsed=!0,self.colNames=[{label:"INGRED_NAME",binding:"ingredientName",width:"98"}],self.ingredientList=[],self.$onInit=function(){self.newFormShown=!1,self.isDetailValid=!0,self.ingredientList||(self.ingredientList=[])},self.$onChanges=function(changes){changes.ingredients&&(self.ingredientList=changes.ingredients.currentValue)},self.addNew=function(){var newRecord={id:getListMaxID()+1,ingredientName:""};self.ingredientList.push(newRecord),self.resetToCollapsed=!self.resetToCollapsed,self.selectRecord=self.ingredientList.length-1},self.update=function(idx,ing){},self["delete"]=function(idx){self.ingredientList.splice(idx,1)&&(self.resetToCollapsed=!0)}}angular.module("appendixFourModule").component("cmpAppendixFour",{templateUrl:"app/scripts/components/appendix-four/tpl-appendix-four_20170203_1502.html",controller:appendixFourCtrl,controllerAs:"ap4Ctrl",bindings:{ingredients:"<",recordChanged:"&",service:"<"}})}(),function(){"use strict";angular.module("appendix4RecordModule",["tissuesFluidsList","animalSourcedSection"])}(),function(){"use strict";function app4RecCtrl(){var self=this;self.isSourced="";var emptyFluidsTissues={tissuesList:[]},emptyAnimalSource={animalSrcList:[],isCellLine:"",isBiotechDerived:"",isControlledPop:"",ageAnimals:0,countryList:[]};self.model={},self.$onInit=function(){self.isSourcedSelected()},self.$onChanges=function(changes){changes.record&&(self.model=changes.record.currentValue,self.isSourcedSelected())},self.isSourcedSelected=function(){var result=self.model.humanSourced||self.model.animalSourced;return result?self.isSourced=result:self.isSourced="",result},self.noSelectionError=function(){return self.appendix4RecForm.$dirty&&!self.isSourcedSelected()||self.showListErrors()&&!self.isSourcedSelected()},self.showError=function(isInvalid,isTouched){return isInvalid&&isTouched||isInvalid&&self.showListErrors()},self.save=function(){self.record?self.onUpdate({record:self.model}):self.onAddNew({record:self.model})},self["delete"]=function(){self.record&&self.onDelete()},self.updateTissuesFluids=function(input){self.model.tissuesFluidsOrigin=input,self.onUpdate({record:self.model})},self.updateAnimalSourced=function(input){self.model.sourceAnimalDetails=input,self.onUpdate({record:self.model})},self.showTissuesFluids=function(){return self.model.humanSourced||self.model.animalSourced?(self.model.tissuesFluidsOrigin||(self.model.tissuesFluidsOrigin=angular.copy(emptyFluidsTissues)),!0):(self.model.tissuesFluidsOrigin=null,!1)},self.showAnimalSources=function(){return self.showTissuesFluids(),self.model.animalSourced?(self.model.sourceAnimalDetails||(self.model.sourceAnimalDetails=angular.copy(emptyAnimalSource)),!0):(self.model.sourceAnimalDetails=null,!1)}}angular.module("appendix4RecordModule").component("cmpAppendixFourRecord",{templateUrl:"app/scripts/components/appendix-four/tpl-appendix-four-record_20170203_1502.html",controllerAs:"ap4RecCtrl",controller:app4RecCtrl,bindings:{record:"<",showListErrors:"&",onAddNew:"&",onUpdate:"&",onDelete:"&",onCancel:"&",deleteBtn:"<",recordChanged:"&",service:"<"}})}(),function(){"use strict";angular.module("animalSourcedSection",["animalSourcedList","countryListModule","numberFormat"])}(),function(){"use strict";function animalSourcedSectionController($filter,DossierLists){var vm=this;vm.yesNoUnknownList=DossierLists.getYesNoUnknownList(),vm.model={},vm.model.animalSrcSection=[],vm.oneAnimal="",vm.oneCountry="",vm.$onInit=function(){vm.noAnimalSrc()},vm.$onChanges=function(changes){changes.records&&(vm.model=changes.records.currentValue)},vm.showError=function(ctrl){return ctrl?ctrl.$invalid&&ctrl.$touched||ctrl.$invalid&&vm.showErrors():(console.warn("No control animalSourced-section"),!1)},vm.updateCountryList=function(list){vm.model.countryList=list},vm.noAnimalSrc=function(){return vm.model.animalSrcList.length>0?(vm.oneAnimal="selected",!1):(vm.oneAnimal="",!0)},vm.noCountrySrc=function(){return vm.model.countryList.length>0?(vm.oneCountry="selected",!1):(vm.oneCountry="",!0)}}angular.module("animalSourcedSection").component("cmpAnimalSourcedSection",{templateUrl:"app/scripts/components/appendix-four/tpl-animalSourced-section_20170203_1502.html",bindings:{records:"<",showErrors:"&"},controller:animalSourcedSectionController,controllerAs:"animalSectCtrl"}),animalSourcedSectionController.$inject=["$filter","DossierLists"]}(),function(){"use strict";angular.module("animalSourcedRecord",[])}(),function(){"use strict";function animalSourcedController(DossierLists){var vm=this;vm.animalsList=DossierLists.getAnimalSources(),vm.yesNoUnknownList=DossierLists.getYesNoUnknownList(),vm.model={},vm.$onInit=function(){},vm.$onChanges=function(changes){changes.record&&(vm.model=changes.record.currentValue)},vm.deleteRecord=function(){vm.onDelete({id:vm.model.id})},vm.showError=function(ctrl){return ctrl?ctrl.$invalid&&ctrl.$touched||ctrl.$invalid&&vm.showErrors():(console.warn("No control found in animalSourced-record"),!1)}}angular.module("animalSourcedRecord").component("cmpAnimalSourcedRecord",{templateUrl:"app/scripts/components/appendix-four/tpl-animalSourced-record_20170203_1502.html",controller:animalSourcedController,controllerAs:"animalSrcCtrl",bindings:{record:"<",onDelete:"&",showErrors:"&"}}),animalSourcedController.$inject=["DossierLists"]}(),function(){"use strict";angular.module("animalSourcedList",["animalSourcedRecord","expandingTable"])}(),function(){"use strict";function animalSourcedListController($filter){function getMaxID(){for(var id=0,i=0;i<vm.model.animalSrcList.length;i++)vm.model.animalSrcList[i].id>id&&(id=vm.model.animalSrcList[i].id);return id}var vm=this;vm.selectRecord=-1,vm.isDetailValid=!0,vm.resetToCollapsed=!0,vm.oneRecord="",vm.model={},vm.model.animalSrcList=[],vm.columnDef=[{label:"ANIMAL_TYPE",binding:"animalType",width:"40"},{label:"ANIMAL_TYPE_DETAILS",binding:"animalDetail",width:"60"}],vm.$onInit=function(){vm.isDetailValid=!0,vm.resetToCollapsed=!0,vm.oneRecord=""},vm.$onChanges=function(changes){changes.records&&(vm.model.animalSrcList=changes.records.currentValue)},vm.showError=function(isTouched,isInvalid){return!0},vm.setValid=function(value){vm.isDetailValid=value},vm.addNew=function(){var maxID=getMaxID(),item={id:maxID+1,animalType:"",animalDetail:""};vm.model.animalSrcList.push(item),vm.resetToCollapsed=!vm.resetToCollapsed,vm.selectRecord=0,vm.selectRecord=vm.model.animalSrcList.length-1},vm.deleteRecord=function(recId){var idx=vm.model.animalSrcList.indexOf($filter("filter")(vm.model.animalSrcList,{id:recId},!0)[0]);vm.model.animalSrcList.splice(idx,1)}}angular.module("animalSourcedList").component("cmpAnimalSourcedList",{templateUrl:"app/scripts/components/appendix-four/tpl-animalSourced-list_20170203_1502.html",bindings:{records:"<",showErrors:"&"},controller:animalSourcedListController,controllerAs:"animalListCtrl"}),animalSourcedListController.$inject=["$filter"]}();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRvc3NpZXJBcHBJTlQtZW4uanMiLCJkb3NzaWVyVHJhbnNsYXRpb25zLmpzIiwib25seS1kaWdpdHNfMjAxNzAyMDNfMTUwMi5qcyIsImhwZmItY29uc3RhbnRzXzIwMTcwMjAzXzE1MDIuanMiLCJyZXAtY29udGFjdC1zZXJ2aWNlXzIwMTcwMjAzXzE1MDIuanMiLCJmaWx0ZXItbGlzdHNfMjAxNzAyMDNfMTUwMi5qcyIsImRhdGEtbGlzdHNfMjAxNzAyMDNfMTUwMi5qcyIsImRhdGEtbGlzdHMuYWN0aXZpdHlfMjAxNzAyMDNfMTUwMi5qcyIsImFwcGxpY2F0aW9uLWluZm8tc2VydmljZV8yMDE3MDIwM18xNTAyLmpzIiwiZG9zc2llci1zZXJ2aWNlXzIwMTcwMjAzXzE1MDIuanMiLCJkb3NzaWVyLWxvYWQtc2VydmljZV8yMDE3MDIwM18xNTAyLmpzIiwiZG9zc2llci1kYXRhLWxpc3RfMjAxNzAyMDNfMTUwMi5qcyIsImNtcC1leHBhbmRpbmctdGFibGVfMjAxNzAyMDNfMTUwMi5qcyIsImNtcC1hcHBsaWNhdGlvbi1pbmZvXzIwMTcwMjAzXzE1MDIuanMiLCJjbXAtY29udGFjdC1kZXRhaWxzXzIwMTcwMjAzXzE1MDIuanMiLCJjbXAtcmVwLWNvbnRhY3QtcmVjb3JkXzIwMTcwMjAzXzE1MDIuanMiLCJjbXAtcmVwLWNvbnRhY3QtbGlzdF8yMDE3MDIwM18xNTAyLmpzIiwiRmlsZUlPLmhwZmJGaWxlUmVhZGVyXzIwMTcwMjAzXzE1MDIuanMiLCJjbXAtbm9uLW1lZC1pbmctcmVjb3JkXzIwMTcwMjAzXzE1MDIuanMiLCJjbXAtbm9uLW1lZC1pbmctbGlzdF8yMDE3MDIwM18xNTAyLmpzIiwiY21wLW1hdGVyaWFsLWluZy1yZWNvcmRfMjAxNzAyMDNfMTUwMi5qcyIsImNtcC1tYXRlcmlhbC1pbmctbGlzdF8yMDE3MDIwM18xNTAyLmpzIiwiY21wLWZvcm11bGF0aW9uLXJlY29yZF8yMDE3MDIwM18xNTAyLmpzIiwiY21wLWZvcm11bGF0aW9uLWxpc3RfMjAxNzAyMDNfMTUwMi5qcyIsImNtcC1jb250YWluZXItdHlwZS1yZWNvcmRfMjAxNzAyMDNfMTUwMi5qcyIsImNtcC1jb250YWluZXItdHlwZS1saXN0XzIwMTcwMjAzXzE1MDIuanMiLCJjbXAtYWN0aXZlLWluZy1yZWNvcmRfMjAxNzAyMDNfMTUwMi5qcyIsImNtcC1hY3RpdmUtaW5nLWxpc3RfMjAxNzAyMDNfMTUwMi5qcyIsImNtcC10aGVyYS1saXN0XzIwMTcwMjAzXzE1MDIuanMiLCJjbXAtdGhlcmEtcmVjb3JkXzIwMTcwMjAzXzE1MDIuanMiLCJjbXAtdGFiXzIwMTcwMjAzXzE1MDIuanMiLCJjbXAtdGFic18yMDE3MDIwM18xNTAyLmpzIiwiY21wLXNjaGVkdWxlLWFfMjAxNzAyMDNfMTUwMi5qcyIsImNtcC1yb2EtcmVjb3JkXzIwMTcwMjAzXzE1MDIuanMiLCJjbXAtcm9hLWxpc3RfMjAxNzAyMDNfMTUwMi5qcyIsImNtcC1kcnVnLXVzZV8yMDE3MDIwM18xNTAyLmpzIiwiY21wLWRvc3NpZXJfMjAxNzAyMDNfMTUwMi5qcyIsImNtcC1jb3VudHJ5LXJlY29yZF8yMDE3MDIwM18xNTAyLmpzIiwiY21wLWNvdW50cnktbGlzdF8yMDE3MDIwM18xNTAyLmpzIiwiY21wLWNoZWNrYm94LWxpc3RfMjAxNzAyMDNfMTUwMi5qcyIsImNtcC1yZWYtcHJvZHVjdC1saXN0XzIwMTcwMjAzXzE1MDIuanMiLCJjbXAtcmVmLXByb2R1Y3QtZGV0YWlsc18yMDE3MDIwM18xNTAyLmpzIiwiY21wLXRpc3N1ZXNGbHVpZHMtbGlzdF8yMDE3MDIwM18xNTAyLmpzIiwiY21wLXRpc3N1ZUZsdWlkcy1yZWNvcmRfMjAxNzAyMDNfMTUwMi5qcyIsImNtcC1za2luXzIwMTcwMjAzXzE1MDIuanMiLCJjbXAtcmVwcm9kdWN0aXZlXzIwMTcwMjAzXzE1MDIuanMiLCJjbXAtb3RoZXItdGlzc3Vlc18yMDE3MDIwM18xNTAyLmpzIiwiY21wLW5lcnZvdXNfMjAxNzAyMDNfMTUwMi5qcyIsImNtcC1tdXNjbGVfMjAxNzAyMDNfMTUwMi5qcyIsImNtcC1pbW11bmVfMjAxNzAyMDNfMTUwMi5qcyIsImNtcC1kaWdlc3RpdmVfMjAxNzAyMDNfMTUwMi5qcyIsImNtcC1jYXJkaW9fMjAxNzAyMDNfMTUwMi5qcyIsImNtcC1hcHBlbmRpeC1mb3VyXzIwMTcwMjAzXzE1MDIuanMiLCJjbXAtYXBwZW5kaXgtZm91ci1yZWNvcmRfMjAxNzAyMDNfMTUwMi5qcyIsImNtcC1hbmltYWxTb3VyY2VkLXNlY3Rpb25fMjAxNzAyMDNfMTUwMi5qcyIsImNtcC1hbmltYWxTb3VyY2VkLXJlY29yZF8yMDE3MDIwM18xNTAyLmpzIiwiY21wLWFuaW1hbFNvdXJjZWQtbGlzdF8yMDE3MDIwM18xNTAyLmpzIl0sIm5hbWVzIjpbIk1haW5Db250cm9sbGVyIiwiJHRyYW5zbGF0ZSIsImdldENvdW50cnlBbmRQcm92aW5jZXMiLCJ2bSIsInRoaXMiLCJmb3JtVHlwZSIsImFuZ3VsYXIiLCJtb2R1bGUiLCJjb250cm9sbGVyIiwiJGluamVjdCIsImNvbmZpZyIsIiR0cmFuc2xhdGVQcm92aWRlciIsImRpcmVjdGl2ZVByaW9yaXR5IiwicHJlZmVycmVkTGFuZ3VhZ2UiLCJ1c2VMb2FkZXIiLCJ1c2VTYW5pdGl6ZVZhbHVlU3RyYXRlZ3kiLCJmb3JjZUFzeW5jUmVsb2FkIiwidHJhbnNsYXRpb25zIiwiQUVST1NPTCIsIkJPTFVTIiwiQ0FQU1VMRSIsIkNBUFNVTEVfREVMQVlFRF9SRUxFQVNFIiwiQ0FQU1VMRV9FWFRFTkRFRF9SRUxFQVNFIiwiQ1JFQU0iLCJFTVVMU0lPTiIsIkdBUyIsIkdFTCIsIklNUExBTlQiLCJMT1RJT04iLCJMT1pFTkdFIiwiT0lOVE1FTlQiLCJQQVRDSCIsIlBBVENIX0VYVEVOREVEX1JFTEVBU0UiLCJQT1dERVIiLCJQT1dERVJfRk9SX1NPTFVUSU9OIiwiUE9XREVSX0ZPUl9TVVNQRU5TSU9OIiwiU0hBTVBPTyIsIlNPTFVUSU9OIiwiU1BSQVkiLCJTUFJBWV9CQUdfT05fVkFMVkUiLCJTUFJBWV9NRVRFUkVEX0RPU0UiLCJTVElDSyIsIlNUUklQIiwiU1VQUE9TSVRPUlkiLCJTVVNQRU5TSU9OIiwiU1lSVVAiLCJUQUJMRVQiLCJUQUJMRVRfQ0hFV0FCTEUiLCJUQUJMRVRfREVMQVlFRF9SRUxFQVNFIiwiVEFCTEVUX0VYVEVOREVEX1JFTEVBU0UiLCJUQUJMRVRfT1JBTExZX0RJU0lOVEVHUkFUSU5HIiwiV0lQRSIsIkxPQURfRE9TU0lFUiIsIkRPU1NJRVJfSERJTkciLCJJTkdSRURfTElTVCIsIklOR1JFRF9OQU1FIiwiU09VUkNFRCIsIkhVTUFOIiwiQU5JTUFMIiwiVElTU1VFU19PUklHSU4iLCJBRERfUFJPRFVDVCIsIkFNRU5EX1JFRiIsIkJSQU5EX05BTUUiLCJNRURJQ0lOQUxfSU5HUkVESUVOVCIsIlNUUkVOR1RIIiwiRE9TQUdFX0ZPUk0iLCJET1NBR0VfRk9STV9PVEhFUiIsIkNETl9SRUZfUFJPRFVDVCIsIkNPTVBBTllfTkFNRSIsIkNPVU5UUllfTkFNRSIsIlNBVkUiLCJDQU5DRUwiLCJERUxFVEUiLCJTQ0hFRF9BIiwiRElOX0ZVTEwiLCJUSEVSQV9DTEFTUyIsIlRIRVJBX0NMQVNTX0FERCIsIlRIRVJBX0NMQVNTX05BTUUiLCJQUk9QTkFNRSIsIkRSVUdfUFJPRFVDVCIsIlNJR05FRF9USElSRCIsIklOQ0xVREVfQVVUSCIsIlJFTEFURURfRE9TU0lFUiIsIlBST1BFUl9OQU1FIiwiRFJVR19VU0UiLCJERUxFVEVfQ0xBU1MiLCJTT1VSQ0VEX0FOSU1BTCIsIlNQRUNJRlkiLCJERVRBSUxTIiwiUkVGX1BST0RVQ1RTIiwiUkFESU9QSEFSTSIsIlZFVEVSSU5BUlkiLCJESVNJTkZFQ1RBTlQiLCJBRERfQSIsIkNPVU5UUllfTUFOIiwiREVMRVRFX0NPVU5UUlkiLCJBRERfQ1JQIiwiSVNfQ0ROX1JFRiIsIkRPU1NJRVJfVFlQRSIsIklOR1JFRF9NQVRfTkFNRSIsIkhFTFBfRE9TU0lFUiIsIkhFTFBfRFJVR19QUk9EVUNUIiwiWSIsIk4iLCJVTksiLCJSRVFVSVJFRCIsIkRPU1NJRVJfTlVNQkVSIiwiRURJVCIsIkNBTl9SRUZfUFJPRFVDVFMiLCJQUk9EX05BTUUiLCJET1NTSUVSX0lEIiwiTVNHX0FQUDRfVFlQRSIsIk1TR19FUlJfT05FX1NZU1RFTSIsIk1TR19FUlJfT05FX0FOSU1BTCIsIk1TR19FUlJfT05FX0FOSU1BTF9UWVBFIiwiTVNHX0VSUl9EUlVHX1VTRSIsIk1TR19PTkVfU0NIRURBIiwiTVNHX0lTX1JFUVVJUkVEIiwiTVNHX0VSUl9JTlZBTElEX05VTSIsIk1TR19FUlJfT05FX0FDVElWRSIsIk1TR19FUlJfT05FX0ZPUk1VTEFUSU9OIiwiTVNHX0VSUl9PTkVfTUFOQ09VTlRSWSIsIk1TR19FUlJfT05FX1JPQSIsIk1TR19FUlJfT05FX1RIRVJBIiwiTVNHX0VSUl9PTkVfQ09VTlRSWSIsIk1TR19FUlJfT05FX1RJU1NVRSIsIk1TR19FUlJfT05FX0NOVFJZX09SSUdJTiIsIk1TR19FUlJfT05FX0NETl9SRUYiLCJNU0dfRVJSX0lOVkFMSURfTlVNX01JTiIsIk1TR19FUlJfSU5WQUxJRF9OVU1fTUFYIiwiTVNHX0VSUl9JTlZBTElEX05VTV9NSU4wIiwiTVNHX1RJU1NVRV9TWVNfVVNFRCIsIk5FUlZPVVNfU1lTVEVNIiwiQlJBSU4iLCJCUkFJTlNURU0iLCJDRVJFQkVMTFVNIiwiQ0VST0ZMVUlEIiwiRE9SU0FMUk9PVCIsIkRVUkFNQVRFUiIsIkhZUE9USEFMQU1VUyIsIlJFVElOQSIsIlNQSU5BTENPUkQiLCJUUklHRU1JTkFMIiwiTkVSVk9VU19PVEhFUiIsIkRJR0VTVElWRV9TWVNURU0iLCJBUFBFTkRJWCIsIkJJTEUiLCJESVNUQUxJTEVVTSIsIkxBUkdFSU5URVNUIiwiU0FMSVZBIiwiU01BTExJTlRFU1RJTkUiLCJTVE9NQUNIIiwiRElHRVNUSVZFX09USEVSIiwiUkVQUk9EVUNUX1NZU1RFTSIsIk1JTEsiLCJLSURORVkiLCJDT0xPU1RSVU0iLCJNQU1NQVJZIiwiT1ZBUklFUyIsIlBMQUNFTlRBIiwiUExBQ0VOVEFGTFVJRCIsIlNFTUVOIiwiVEVTVEVTIiwiVVJJTkUiLCJSRVBST0RfT1RIRVIiLCJDQVJESU9fU1lTVEVNIiwiSEVBUlQiLCJMVU5HIiwiTkFTQUxGTFVJRCIsIlRSQUNIRUEiLCJQTEFDRU5UQUxGTFVJRCIsIkNBUkRJT19PVEhFUiIsIklNTVVORV9TWVNURU0iLCJMWU1QSCIsIlNQTEVFTiIsIlRIWU1VUyIsIlRPTlNJTFMiLCJJTU1VTkVfT1RIRVIiLCJTS0lOR0xBTkRfU1lTVEVNIiwiQURSRU5BTCIsIkhBSVIiLCJMSVZFUiIsIlBBTkNSRUFTIiwiUElUVUFSWUdMQU5EIiwiU0tJTkhJREVTIiwiVEhZUk9JRCIsIlNLSU5fT1RIRVIiLCJNVVNDVUxPX1NZU1RFTSIsIkFCRE9NRU4iLCJTS1VMTCIsIkJPTkVTIiwiQ09MTEFHRU4iLCJURU5ET05TIiwiVkVSVEVCUkFMQ09MVU1OIiwiTVVTQ0xFIiwiTVVTQ0xFX09USEVSIiwiT1RIRVJUSVNTVUVfU1lTVEVNIiwiQURJUE9TRSIsIkFTQ0lURVMiLCJBTlRMRVJWIiwiU0VSVU0iLCJXSE9MRUJMT09EIiwiUExBU01BIiwiRU1CUllPTklDVElTUyIsIkZFVEFMVElTUyIsIkJPTkVNQVJST1ciLCJFWUVTQ09STkVBIiwiR0FMTCIsIkZMVUlEU19PVEhFUiIsIk5PTkhVTUFOUFJJTUFURV9UWVBFIiwiQVFVQVRJQ19UWVBFIiwiQVZJQU5fVFlQRSIsIkJPVklORV9UWVBFIiwiQ0FOSU5FX1RZUEUiLCJDQVBSSU5FX1RZUEUiLCJDRVJWSURBRV9UWVBFIiwiRVFVSU5FX1RZUEUiLCJGRUxJTkVfVFlQRSIsIk9WSU5FX1RZUEUiLCJQT1JDSU5FX1RZUEUiLCJST0RFTlRfVFlQRSIsIk9USEVSQU5JTUFMX1RZUEUiLCJDT05UUk9MTEVEUE9QIiwiQklPVEVDSERFUklWRUQiLCJDRUxMTElORSIsIkFHRUFOSU1BTFMiLCJDT1VOVFJZT1JJR0lOIiwiU1BFQ0lGWV9USEUiLCJIVU1BTl9BTklNQUxfU09VUkNFIiwiQVBQRU5ESVg0IiwiTUlTU0lOR19BUFBFTkRJWCIsIlVOS05PV05fQ09VTlRSWV9ERVRBSUxTIiwiSU5HX0RFVEFJTFMiLCJBTklNQUxfVFlQRV9MQkwiLCJBTklNQUxfVFlQRSIsIkFOSU1BTF9ERVRBSUxTIiwiQU5JTUFMX1NPVVJDRSIsIkFOSU1BTF9UWVBFX0RFVEFJTFMiLCJBTklNQUxfU1JDUyIsIkFOSU1BTF9DVFJJRVNfT1JJR0lOIiwiQU5JTUFMX1NSQ19BREQiLCJUSVNTVUVTX0ZMVUlEU19MQkwiLCJTWVNURU1fVFlQRSIsIlNZU1RFTV9ERVRBSUxTIiwiU1lTVEVNX09USEVSIiwiVElTU1VFU19GTFVJRFNfQUREIiwiVElTU1VFU19GTFVJRFNfU1JDUyIsIlRJU1NVRV9GTFVJRCIsIkFOSU1BTF9TUkMiLCJFWFRSQV9BUFBFTkRJWCIsIkNBUkRJT19MRUdFTkQiLCJORVJWT1VTX0xFR0VORCIsIk9USEVSX0xFR0VORCIsIklNTVVORV9MRUdFTkQiLCJESUdFU1RJVkVfTEVHRU5EIiwiUkVQUk9EVUNUSVZFX0xFR0VORCIsIk1VU0NMRV9MRUdFTkQiLCJTS0lOX0xFR0VORCIsIkNBUkRJT19ERVRBSUxTIiwiRElHRVNUSVZFX0RFVEFJTFMiLCJJTU1VTkVfREVUQUlMUyIsIk1VU0NMRV9ERVRBSUxTIiwiTkVSVk9VU19ERVRBSUxTIiwiT1RIRVJUSVNTX0RFVEFJTFMiLCJSRVBST0RVQ1RJVkVfREVUQUlMUyIsIlNLSU5fREVUQUlMUyIsIkFERF9TT1VSQ0VEIiwiREVMRVRFX1NPVVJDRUQiLCJJTU1VTkVfT1RIRVIgIiwiTVVTQ0xFREVUQUlMIiwiQUNVVEVBTENPSE9MIiwiQUNVVEVBTlhJRVRZIiwiQUNVVEVSRVNQIiwiQUNVVEVJTkZMQU0iLCJBQ1VURVBTWUNIT1RJQyIsIkFERElDVElPTiIsIkFURVJJT1NDTEVST1NJUyIsIkFQUEVORElDSVRJUyIsIkFTVEhNQSIsIkNBTkNFUiIsIkhFQVJUQ09OR0VTVCIsIkNPTlZVTFNJT05TIiwiREVNRU5USUEiLCJERVBSRVNTSU9OIiwiRElBQkVURVMiLCJHQU5HUkVORSIsIkdMQVVDT01BIiwiQkxFRURJTkdESVNPUkRFUlMiLCJIRVBBVElUSVMiLCJIWVBFUlRFTlNJT04iLCJOQVVTRUFQUkVHIiwiT0JFU0lUWSIsIlJIRVVNQVRJQ0ZFVkVSIiwiU0VQVElDRU1JQSIsIlNFWERJU0VBU0UiLCJTVFJBTkdIRVJOSUEiLCJUSFJPTUJPVElDRElTT1JERVIiLCJUSFlST0lERElTRUFTRSIsIlVDTEVSR0FTVFJPIiwiU0NIRURBX0NMQUlNUyIsIlNDSEVEQV9ESVNFQVNFIiwiSVNTQ0hFREEiLCJJTkdfTkFNRSIsIkNBU19OVU0iLCJDQVNfRlVMTCIsIlNUQU5EQVJEIiwiVU5JVFMiLCJQRVJfU1RSRU5HVEgiLCJJU0JBU0UiLCJOQU5PX01BVEVSSUFMIiwiTkFOT19NQVRFUklBTF9PVEhFUiIsIkFOSU1BTF9IVU1BTl9TT1VSQ0VEIiwiQUNUSVZFX0xJU1QiLCJOT05NRURJQ0lOQUxfSU5HUkVESUVOVCIsIlZBUklBTlRfTkFNRSIsIkNPTlRBSU5FUl9UWVBFIiwiUEFDS0FHRV9TSVpFIiwiTUFURVJJQUxfTkFNRSIsIlBSRVNFTlRfSU5fRklOQUwiLCJNRURJQ0lOQUxfSU5HUkVEX0RFVEFJTFMiLCJOT05NRURJQ0lOQUxfSU5HUkVEX0RFVEFJTFMiLCJDT05UQUlORVJfVFlQRV9ERVRBSUxTIiwiTUFURVJJQUxfREVUQUlMUyIsIkNBTENVTEFURURfQVNfQkFTRSIsIlNIRUxGX0xJRkVfWUVBUlMiLCJTSEVMRl9MSUZFX01PTlRIUyIsIk1JTl9URU1QIiwiTUFYX1RFTVAiLCJURU1QX1JBTkdFIiwiU0hFTEZfTElGRSIsIklOX0ZJTkFMX0NPTlRBSU5FUiIsIk9USEVSX1JPQV9ERVRBSUxTIiwiUk9BX0xCTCIsIlJPQV9BQlJFViIsIkZPUk1VTEFUSU9OUyIsIkZPUk1VTEFUSU9OX0RFVEFJTFMiLCJGT1JNVUxBVElPTl9OQU1FIiwiRk9STV9JRCIsIkFOSU1BTF9DVFJZX09SSUdJTiIsIkFERF9ST0EiLCJNRURJQ0lOQUxfSU5HUkVEIiwiTk9OTUVESUNJTkFMX0lOR1JFRCIsIkNPTlRBSU5FUl9UWVBFUyIsIkFOSU1BTF9IVU1BTl9IRElORyIsIlJPQV9USVRMRSIsIkNPVU5UUklFU19NQU5VRkFDVCIsIklOX0xJU1QiLCJVTklUU19TUkNIIiwiU09VUkNFRF9JTkZPIiwiREVMRVRFX0ZPUk1VTEFUSU9OIiwiQ09QWV9GT1JNVUxBVElPTiIsIk5PVF9JTl9MSVNUIiwiREVMRVRFUk9XIiwiU0VMRUNURURST1ciLCJST0xFU19TRUxFQ1QiLCJORVciLCJBTUVORCIsIkFQUFJPVkVEIiwiQ0xJQ0tfVE9HR0xFIiwiQU1FTkRfUkVDT1JEIiwiZW4iLCJmciIsIkRJU0NBUkRfQ0hBTkdFUyIsIlJFUF9BTFQiLCJSRVBfUFJJTSIsIk1BSUxJTkciLCJCSUxMSU5HIiwiTUFOVUZBQ1QiLCJJTVBPUlRFUiIsIkFQUFJPVkVfRklOQUwiLCJTQVZFX0RSQUZUIiwiUFJJTUFSWSIsIlNFQ09OREFSWSIsIlRPR0dMRV9FWFBBTkQiLCJTQVZFX1dPUksiLCJDT05UUk9MX05VTUJFUiIsIlJFUF9DT05UQUNUX0lORk8iLCJTQVZFX0NPTlRBQ1QiLCJERUxFVEVfQ09OVEFDVCIsIkNPTVBBTllfSUQiLCJFUlJPUlMiLCJVTktOT1dOIiwiQklPTE9HSUMiLCJQSEFSTUFDRVVUSUNBTCIsIkhFTFBfRklMRV9MT0FEIiwiSEVMUF9BQ1RJVklUWV9NQUlOIiwiSEVMUF9BQ1RJVklUWV9SRVAiLCJDQUxFTkRBUiIsIkhJREVfQ0FMRU5EQVIiLCJPVEhFUiIsIkhFTFBfUkVQX0NPTlRBQ1QiLCJPVEhFUl9VTklUUyIsIkNPTVBBTllfTk9BQkJSRVYiLCJDT1BZIiwiU0FWRV9XT1JLSU5HIiwiU0VMRUNUX0xPQUQiLCJNU0dfU1VDQ0VTU19MT0FEIiwiTVNHX0VSUl9KU09OUEFSU0UiLCJNU0dfRVJSX1hNTFBBUlNFIiwiTVNHX0VSUl9GSUxFX0xPQUQiLCJNU0dfRVJSX0ZJTEVfVFlQRSIsIk1TR19FUlJfRk9STV9UWVBFIiwiTVNHX0VSUl9DSEVDS1NVTV9GQUlMIiwiQVBQTF9TVEFUVVMiLCJFTlJPTF9WRVJTSU9OIiwiREFURV9TQVZFRCIsIkFNRU5EX0VOUk9MIiwiQU1FTkRfTVNHIiwiTVNHX0VSUl9NQU5EIiwiTVNHX0VSUl9FTUFJTF9GT1JNQVQiLCJNU0dfRVJSX1JPTEUiLCJNU0dfRVJSX0NPTlRBQ1RfTlVNIiwiTVNHX0VSUl9QSE9ORV9GT1JNQVQiLCJNU0dfRVJSX0FMTFJPTEUiLCJNU0dfRVJSX0FERFJFU1NTUk9MRSIsIk1TR19FUlJfUE9TVEFMIiwiTVNHX0VSUl9aSVAiLCJNU0dfRVJSX0RBVEVfRk9STUFUIiwiTUFJTElOR19TRUwiLCJNQU5VRkFDVF9TRUwiLCJNQUlMX1NFTCIsIkJJTExJTkdfU0VMIiwiSU1QT1JURVJfU0VMIiwiUkVQUFJJTV9TRUwiLCJSRVBBTFRfU0VMIiwiTVNHX0xFTkdUSF9NSU41IiwiTVNHX0xFTkdUSF82IiwiTVNHX0xFTkdUSF82TlVNIiwiTVNHX0xFTkdUSF84TlVNIiwiTVNHX0xFTkdUSF83IiwiTVNHX0xFTkdUSF83TlVNIiwiTVNHX0VSUl9PTkVfUkVQIiwiTVNHX0VSUl9PTkVfTElGRV9SRUMiLCJNU0dfRVJSX1JBVElPTkFMRV9TRUwiLCJNU0dfRVJSX05PVElGX1NFTCIsIkZJUlNUX05BTUUiLCJMQVNUX05BTUUiLCJJTklUSUFMUyIsIkxBTkdVQUdFX0NPUlJFU1BPTkRFTkNFIiwiSk9CX1RJVExFIiwiU0FMVVRBVElPTiIsIlNBTFVUX01SIiwiU0FMVVRfTVMiLCJTQUxVVF9EUiIsIlNBTFVUX01SUyIsIlJPTEVfUFJJTUFSWSIsIlJPTEVfU0VDT05EQVJZIiwiRU1BSUwiLCJGQVhfTlVNQkVSIiwiUEhPTkVfRVhUIiwiUk9MRVMiLCJQSE9ORV9OVU1CRVIiLCJDT05UQUNUX0lORk8iLCJSRVBfQ09OVEFDVCIsIk9ORV9ST0xFIiwiQ09OVEFDVF9ERVRBSUxTIiwiQUREX0NPTlRBQ1QiLCJDT05UQUNUX1JPTEVfTEVHRU5EIiwiQUREX1JFUFJFUyIsIkRFTEVURV9SRVBSRVMiLCJTQVZFX1JFUFJFUyIsIkFERFJfUk9MRVMiLCJkaWdpdHNDdHJsIiwibGluayIsInNjb3BlIiwiZWxlbWVudCIsImF0dHJzIiwibW9kZWxDdHJsIiwiJHBhcnNlcnMiLCJwdXNoIiwiaW5wdXRWYWx1ZSIsInVuZGVmaW5lZCIsImlzTnVtYmVyIiwibWF4IiwiaWdub3JlIiwidGVtcFZhbCIsInBhcnNlSW50IiwicmVnZXhJbnROZWciLCJpbnRlZ2VyUmVnIiwicmVnZXhWYWx1ZSIsInRyYW5zZm9ybWVkSW5wdXQiLCJyZXBsYWNlIiwic3Vic3RyaW5nIiwicGFyc2VGbG9hdCIsIiRzZXRWaWV3VmFsdWUiLCIkcmVuZGVyIiwiZGlyZWN0aXZlIiwicmVzdHJpY3QiLCJyZXF1aXJlIiwiY29uc3RhbnQiLCJSZXBDb250YWN0U2VydmljZSIsInByb3RvdHlwZSIsIl9kZWZhdWx0IiwiZ2V0UHJpbWFyeVJvbGUiLCJnZXRTZWNvbmRhcnlSb2xlIiwiY3JlYXRlUmVwQ29udGFjdCIsInJlcENvbnRhY3RMaXN0IiwiY29udGFjdCIsIl9jcmVhdGVEZWZhdWx0UmVwQ29udGFjdCIsImN1cnJlbnRDb250YWN0cyIsImxlbmd0aCIsInJlcFJvbGUiLCJpIiwicmVwY29udGFjdCIsIl9jcmVhdGVDb250YWN0TW9kZWwiLCJhbWVuZCIsInNhbHV0YXRpb24iLCJnaXZlbk5hbWUiLCJpbml0aWFscyIsInN1cm5hbWUiLCJ0aXRsZSIsImxhbmd1YWdlIiwicGhvbmUiLCJwaG9uZUV4dCIsImZheCIsImVtYWlsIiwiZmFjdG9yeSIsIm9yZGVyQnlUcmFuc2xhdGVkQ291bnRyeSIsIiRmaWx0ZXIiLCJDQU5BREEiLCJVU0EiLCJhcnJheSIsIm9iaktleSIsInJlc3VsdCIsInRyYW5zbGF0ZWQiLCJmb3JFYWNoIiwidmFsdWUiLCJrZXkiLCJsYWJlbCIsImluc3RhbnQiLCJzb3J0ZWRPYmplY3QiLCJvcmRlckJ5VHJhbnNsYXRlZENvdW50cnlBbmRMYWJlbCIsImZpbmRDb3VudHJ5T2JqIiwidGFyZ2V0S2V5Iiwib3JkZXJCeVRyYW5zbGF0ZWQiLCJzZXF1ZW5jZU9yZGVyQnkiLCJvcmRlckJ5VHJhbnNsYXRlZE90aGVyRmlyc3QiLCJfb3JkZXJCeUxvY2FsZSIsIml0ZW1zIiwibGFuZyIsInNvcnQiLCJhIiwiYiIsImxvY2FsZUNvbXBhcmUiLCJmaWx0ZXIiLCJnZXRTZXJ2aWNlIiwiX2NyZWF0ZUNvdW50cnlBcnJheSIsInRyYW5zbGF0ZUpzb24iLCJjb3VudHJ5TGlzdCIsIl9nZXRVbmtub3duQ291bnRyeVJlYyIsImlkIiwiZ2V0Q291bnRyeVZhbHVlc0FycmF5IiwiZ2V0UHJvdmluY2VWYWx1ZXNBcnJheSIsImdldFVTU3RhdGVzVmFsdWVBcnJheSIsInNlcnZpY2UiLCJnZXRDb3VudHJpZXMiLCJnZXRQcm92aW5jZXMiLCJnZXRVU1N0YXRlcyIsImNyZWF0ZUNvdW50cnlMaXN0IiwiZ2V0VW5rbm93bkNvdW50cnlSZWNvcmQiLCJpbmplY3QiLCJnZXRTYWxTZXJ2aWNlIiwiJHEiLCIkaHR0cCIsIkZSRU5DSCIsImdldFNhbFZhbHVlc0FycmF5IiwiZ2V0TGFuZ3VhZ2VzVmFsdWVzQXJyYXkiLCJfY3JlYXRlSW50ZXJuYWxDb250YWN0cyIsImRlZmVycmVkIiwiZGVmZXIiLCJjb250YWN0c1VybCIsImludGVybmFsQ29udGFjdHMiLCJyZXNvbHZlIiwiZ2V0Iiwic3VjY2VzcyIsImRhdGEiLCJzdGF0dXMiLCJoZWFkZXJzIiwibmV3TGlzdCIsIl9jcmVhdGVTb3J0ZWRBcnJheSIsInByb3Bvc2VkTGFuZ3VhZ2UiLCJ1c2UiLCJvdGhlclJlYyIsInVuc2hpZnQiLCJlcnJvciIsInJlamVjdCIsInByb21pc2UiLCJfZ2V0SW50ZXJuYWxDb250YWN0cyIsImpzb25MaXN0IiwiZ2V0U2FsdXRhdGlvbkxpc3QiLCJnZXRMYW5ndWFnZXMiLCJjcmVhdGVJbnRlcm5hbENvbnRhY3RzIiwiZ2V0SW50ZXJuYWxDb250YWN0cyIsImdldFJvbGVzU2VydmljZSIsImdldFJvbGVWYWx1ZXNBcnJheSIsIl9nZXRGb3JtVHlwZXMiLCJfYmlvbG9naWMiLCJfcGhhcm1hIiwiX2dldEJpb2xvZ2ljIiwiX2dldFBoYXJtYWNldXRpY2FsIiwiZ2V0Q29udGFjdFJvbGVzIiwiZ2V0Rm9ybVR5cGVzIiwiZ2V0QmlvbG9naWNUeXBlIiwiZ2V0UGhhcm1hVHlwZSIsImdldFRyYW5zYWN0aW9uU2VxIiwieWVzTm9BcnJheSIsIl9jcmVhdGVSYUFycmF5IiwicmFUeXBlQXJyYXkiLCJnZXRUcmFuc2FjdGlvbkRlc2NyaXB0aW9uc0FycmF5IiwiZ2V0QWN0aXZpdHlBcnJheSIsImdldFByZXN1YkFycmF5IiwiZ2V0QU5EU0FycmF5IiwiZ2V0RElOQUFycmF5IiwiZ2V0RElOQkFycmF5IiwiZ2V0RVVORFNBcnJheSIsImdldEVVU05EU0FycmF5IiwiZ2V0TGV2ZWwzQXJyYXkiLCJnZXROQ0FycmF5IiwiZ2V0TkRTQXJyYXkiLCJnZXRQRENBcnJheSIsImdldFBEQ0JBcnJheSIsImdldFBTVVJDQXJyYXkiLCJnZXRQU1VSUFZBcnJheSIsImdldFJNUFBWQXJyYXkiLCJnZXRTQU5EU0FycmF5IiwiZ2V0U05EU0FycmF5IiwiZ2V0U05EU0NBcnJheSIsImdldFVEUFZBcnJheSIsImdldFVEUkFWQXJyYXkiLCJnZXRDb25zdWx0QXJyYXkiLCJfZ2V0TVBOQ0FycmF5IiwiX2dldE1QTkRTQXJyYXkiLCJfZ2V0TVBTTkRTQXJyYXkiLCJfZ2V0UEFOREFycmF5IiwiX2dldFBCUkVSQ0FycmF5IiwiX2dldFBCUkVSUFZBcnJheSIsIl9nZXRQUk5EU0FycmF5IiwiX2dldFBSU05EU0FycmF5IiwiZ2V0WUJQUkFycmF5IiwiZ2V0VHJhbnNhY3Rpb25EZXNjcmlwdGlvbnMiLCJnZXRBY3Rpdml0eVR5cGVzIiwiY3JlYXRlUmFUeXBlcyIsImdldFByZXN1YlR5cGVzIiwiZ2V0QW5kc1R5cGUiLCJnZXREaW5hVHlwZSIsImdldERpbmJUeXBlIiwiZ2V0RXVuZHNUeXBlIiwiZ2V0RXVzbmRzVHlwZSIsImdldExldmVsM1R5cGUiLCJnZXROY1R5cGUiLCJnZXROZHNUeXBlIiwiZ2V0UGRjVHlwZSIsImdldFBkY0JUeXBlIiwiZ2V0UHJlc3ViVHlwZSIsImdldHBTdXJDVHlwZSIsImdldHBTdXJQdlR5cGUiLCJnZXRSbXBQdlR5cGUiLCJnZXRTYW5kc1R5cGUiLCJnZXRTbmRzVHlwZSIsImdldFNuZHNDQXJyYXkiLCJnZXRVZHB2VHlwZSIsImdldFVkcmFUeXBlIiwiZ2V0WWJwclR5cGUiLCJnZXRDb25zdWx0VHlwZSIsImdldE1QTkNUeXBlIiwiZ2V0TVBORFNUeXBlIiwiZ2V0TVBTTkRTVHlwZSIsImdldFBBTkRUeXBlIiwiZ2V0UEJSRVJDVHlwZSIsImdldFBCUkVSUFZUeXBlIiwiZ2V0UFJORFNUeXBlIiwiZ2V0UFJTTkRTVHlwZSIsImdldFllc05vTGlzdCIsIkFwcGxpY2F0aW9uSW5mb1NlcnZpY2UiLCJnZXRUb2RheURhdGUiLCJwYWQiLCJuIiwiZCIsIkRhdGUiLCJpc29EYXRlIiwiZ2V0RnVsbFllYXIiLCJnZXRNb250aCIsImdldERhdGUiLCJpbmNyZW1lbnRNaW5vclZlcnNpb24iLCJlbnJvbG1lbnRWZXJzaW9uIiwicGFydHMiLCJzcGxpdCIsImRlYyIsImluY3JlbWVudE1ham9yVmVyc2lvbiIsIndob2xlIiwiZ2V0QXBwbGljYXRpb25TdGF0dXNMaXN0IiwiZ2V0QXBwcm92ZWRUeXBlIiwiZ2V0QW1lbmRUeXBlIiwiRG9zc2llclNlcnZpY2UiLCJEb3NzaWVyTGlzdHMiLCJkb3NzaWVyRGF0YSIsImV4dGVuZCIsImdldENvbnRhY3RMaXN0IiwiY29udGFjdHMiLCJsaXN0IiwiaXNEZWZpbmVkIiwiQXJyYXkiLCJhbWVuZF9yZWNvcmQiLCJyZXBfY29udGFjdF9yb2xlIiwicmVwX2NvbnRhY3RfZGV0YWlscyIsImdpdmVuX25hbWUiLCJqb2JfdGl0bGUiLCJwaG9uZV9udW0iLCJwaG9uZV9leHQiLCJmYXhfbnVtIiwibGFuZ3VhZ2VfY29ycmVzcG9uZGFuY2UiLCJnZXREaXNlYXNlRGlzb3JkZXJMaXN0IiwiaW5mbyIsImRpc2Vhc2VMaXN0IiwiY2hlY2tib3hSZWMiLCJuYW1lIiwiYWN1dGVfYWxjb2hvbCIsImFjdXRlX2FueGlldHkiLCJhY3V0ZV9pbmZlY3Rpb3VzIiwiYWN1dGVfaW5mbGFtbWF0b3J5IiwiYWN1dGVfcHN5Y2hvdGljIiwiYWRkaWN0aW9uIiwiYXRlcmlvc2NsZXJvc2lzIiwiYXBwZW5kaWNpdGlzIiwiYXN0aG1hIiwiY2FuY2VyIiwiY29uZ2VzdF9oZWFydF9mYWlsIiwiY29udnVsc2lvbnMiLCJkZW1lbnRpYSIsImRlcHJlc3Npb24iLCJkaWFiZXRlcyIsImdhbmdyZW5lIiwiZ2xhdWNvbWEiLCJoYWVtYXRvbG9naWNfYmxlZWRpbmciLCJoZXBhdGl0aXMiLCJoeXBlcnRlbnNpb24iLCJuYXVzZWFfcHJlZ25hbmN5Iiwib2Jlc2l0eSIsInJoZXVtYXRpY19mZXZlciIsInNlcHRpY2VtaWEiLCJzZXhfdHJhbnNtaXRfZGlzZWFzZSIsInN0cmFuZ3VsYXRlZF9oZXJuaWEiLCJ0aHJvbWJvdGljX2VtYm9saWNfZGlzb3JkZXIiLCJ0aHlyb2lkX2Rpc2Vhc2UiLCJ1bGNlcl9nYXN0cm8iLCJnZXRUaGVyYXBldXRpY0xpc3QiLCJpbnB1dCIsIml0ZW0iLCJnZXRDYW5SZWZQcm9kdWN0TGlzdCIsInByb2R1Y3QiLCJicmFuZE5hbWUiLCJicmFuZF9uYW1lIiwiaW5nSWQiLCJpbmdyZWRpZW50X2lkIiwiaW5nTGFiZWwiLCJpbmdyZWRpZW50X25hbWUiLCJhdXRvSW5ncmVkIiwiZG9zYWdlRm9ybSIsImRvc2FnZV9mb3JtIiwiZ2V0RG9zYWdlRm9ybUxpc3QiLCJfX3RleHQiLCJkb3NhZ2VGb3JtT3RoZXIiLCJkb3NhZ2VfZm9ybV9vdGhlciIsInN0cmVuZ3RocyIsIk51bWJlciIsInVuaXRzIiwiZ2V0VW5pdHNMaXN0Iiwib3RoZXJVbml0cyIsInVuaXRzX290aGVyIiwicGVyIiwiY29tcGFueU5hbWUiLCJjb21wYW55X25hbWUiLCJnZXRBcHBlbmRpeDRJbmdyZWRpZW50TGlzdCIsIm9iaiIsImNvdW50cnkiLCJkaXNwbGF5IiwidW5rbm93bkNvdW50cnlEZXRhaWxzIiwiY291bnRyeV93aXRoX3Vua25vd24iLCJ1bmtub3duX2NvdW50cnlfZGV0YWlscyIsImluZyIsImluZ3JlZGllbnROYW1lIiwiaHVtYW5Tb3VyY2VkIiwiaHVtYW5fc291cmNlZCIsImFuaW1hbFNvdXJjZWQiLCJhbmltYWxfc291cmNlZCIsInRpc3N1ZXMiLCJ0aXNzdWVzX2ZsdWlkc19zZWN0aW9uIiwic3JjQW5pbWFsIiwiYW5pbWFsX3NvdXJjZWRfc2VjdGlvbiIsInRpc3N1ZXNGbHVpZHNPcmlnaW4iLCJ0aXNzdWVzTGlzdCIsIl9nZXRUaXNzdWVzRmx1aWRzTW9kZWwiLCJzb3VyY2VBbmltYWxEZXRhaWxzIiwiY3JlYXRlRW1wdHlBbmltYWxTb3VyY2VNb2RlbCIsImlzQ2VsbExpbmUiLCJpc19jZWxsX2xpbmUiLCJpc0Jpb3RlY2hEZXJpdmVkIiwiaXNfYmlvdGVjaF9kZXJpdmVkIiwiaXNDb250cm9sbGVkUG9wIiwiaXNfY29udHJvbGxlZF9wb3AiLCJhZ2VBbmltYWxzIiwiYW5pbWFsX2FnZSIsImFuaW1hbFR5cGVMaXN0IiwiYW5pbWFsX3NyY19yZWNvcmQiLCJzcmNDb3VudCIsIm9uZVJlYyIsImFuaW1hbFJlY29yZCIsImFuaW1hbFR5cGUiLCJhbmltYWxfdHlwZSIsImFuaW1hbERldGFpbCIsImFuaW1hbF9kZXRhaWwiLCJhbmltYWxTcmNMaXN0IiwiY291bnRyeV9vcmlnaW5fbGlzdCIsImNvdW50cnlfb3JpZ2luIiwiZ2V0Rm9ybXVsYXRpb25MaXN0IiwiZm9ybXVsYXRpb25MaXN0IiwiZm9ybXVsYXRpb25JZCIsImZvcm11bGF0aW9uX2lkIiwiZm9ybXVsYXRpb25OYW1lIiwiZm9ybXVsYXRpb25fbmFtZSIsImRvc2FnZV9mb3JtX2dyb3VwIiwiZG9zYWdlRm9ybU9iaiIsIm5vbm1lZGljaW5hbF9pbmdyZWRpZW50Iiwibk1lZEluZ0xpc3QiLCJnZXROb25NZWRJbmdMaXN0IiwiYWN0aXZlX2luZ3JlZGllbnQiLCJhY3RpdmVJbmdMaXN0IiwiZ2V0QWN0aXZlSW5nTGlzdCIsImNvbnRhaW5lcl9ncm91cCIsImNvbnRhaW5lcl9kZXRhaWxzIiwiY29udGFpbmVyVHlwZXMiLCJnZXRDb250YWluZXJUeXBlTGlzdCIsIm1hdGVyaWFsX2luZ3JlZGllbnQiLCJhbmltYWxIdW1hbk1hdGVyaWFscyIsImdldE1hdGVyaWFsTGlzdCIsInJvYV9ncm91cCIsInJvYV9kZXRhaWxzIiwicm91dGVBZG1pbnMiLCJnZXRSb3V0ZUFkbWluTGlzdCIsImNvdW50cnlfZ3JvdXAiLCJjb3VudHJ5X21hbnVmYWN0dXJlciIsImdldEZvcm11bGF0aW9uQ291bnRyeUxpc3QiLCJyZXN1bHRMaXN0IiwiY2FzIiwiY2FzX251bWJlciIsImh1bWFuQW5pbWFsU291cmNlZCIsImlzX2h1bWFuX2FuaW1hbF9zcmMiLCJzdGFuZGFyZCIsImluZ3JlZF9zdGFuZGFyZCIsInN0cmVuZ3RoIiwiY2FsY0FzQmFzZSIsImlzX2Jhc2VfY2FsYyIsIm5hbm9NYXRlcmlhbCIsIm5hbm9NYXRlcmlhbE90aGVyIiwibmFub21hdGVyaWFsX2RldGFpbHMiLCJ1bml0c09iaiIsImlzX25hbm9tYXRlcmlhbCIsIm5hbm9WYWx1ZSIsImdldE5hbm9QcmVmaXgiLCJnZXROYW5vTWF0ZXJpYWxzIiwidmFySWQiLCJ2YXJpYW50X25hbWUiLCJpbmdOYW1lIiwiY29udGFpbmVyVHlwZSIsImNvbnRhaW5lcl90eXBlIiwicGFja2FnZVNpemUiLCJwYWNrYWdlX3NpemUiLCJzaGVsZkxpZmVZZWFycyIsInNoZWxmX2xpZmVfeWVhcnMiLCJzaGVsZkxpZmVNb250aHMiLCJzaGVsZl9saWZlX21vbnRocyIsInRlbXBNaW4iLCJ0ZW1wZXJhdHVyZV9taW4iLCJ0ZW1wTWF4IiwidGVtcGVyYXR1cmVfbWF4IiwiaW5ncmVkaWVudElkIiwiaW5ncmVkaWVudFN0YW5kYXJkIiwiaW5GaW5hbENvbnRhaW5lciIsImluX2ZpbmFsX2NvbnRhaW5lciIsIl9pZCIsInJvYU9iaiIsImdldFJvYSIsInJvYSIsIm90aGVyUm9hRGV0YWlscyIsInJvYV9vdGhlciIsImNhblJlZlByb2R1Y3RMaXN0VG9PdXRwdXQiLCJzcGxpdEFycmF5IiwiZ2V0RG9zYWdlRm9ybVByZWZpeCIsIm5ld0Rvc2FnZSIsIl9sYWJlbF9lbiIsIl9sYWJlbF9mciIsIl91bml0c0ZsZFRvT3V0cHV0IiwiZ2V0VW5pdHNQcmVmaXgiLCJhcHBlbmRpeDRJbmdyZWRpZW50TGlzdFRvT3V0cHV0IiwiYXBwZW5kaWNlcyIsInN5c3RlbVR5cGUiLCJnZXROZXJ2b3VzU3lzdGVtVmFsdWUiLCJuZXJ2b3VzX3N5c3RlbSIsIl9uZXJ2b3VzU3lzdGVtVG9PdXRwdXQiLCJzeXN0ZW0iLCJnZXREaWdlc3RpdmVTeXN0ZW1WYWx1ZSIsImRpZ2VzdGl2ZV9zeXN0ZW0iLCJfZGlnZXN0aXZlU3lzdGVtVG9PdXRwdXQiLCJnZXRJbW11bmVTeXN0ZW1WYWx1ZSIsImltbXVuZV9zeXN0ZW0iLCJfaW1tdW5lU3lzdGVtVG9PdXRwdXQiLCJnZXRTa2luU3lzdGVtVmFsdWUiLCJza2luX3N5c3RlbSIsIl9za2luU3lzdGVtVG9PdXRwdXQiLCJnZXRNdXNjbGVTeXN0ZW1WYWx1ZSIsIm11c2N1bG9fc3lzdGVtIiwiX211c2NsZVN5c3RlbVRvT3V0cHV0IiwiZ2V0T3RoZXJUaXNzdWVzU3lzdGVtVmFsdWUiLCJvdGhlcl9zeXN0ZW0iLCJfb3RoZXJTeXN0ZW1Ub091dHB1dCIsImdldFJlcHJvZHVjdGl2ZVN5c3RlbVZhbHVlIiwicmVwcm9kdWN0aXZlX3N5c3RlbSIsIl9yZXByb2R1Y3RpdmVTeXN0ZW1Ub091dHB1dCIsImdldENhcmRpb1N5c3RlbVZhbHVlIiwiY2FyZGlvX3N5c3RlbSIsIl9jYXJkaW9TeXN0ZW1Ub091dHB1dCIsImNyZWF0ZUVtcHR5QW5pbWFsU291cmNlRm9yT3V0cHV0IiwiYW5pbWFsU3JjT2JqIiwic3JjUmVjb3JkT3V0IiwiY291bnRyaWVzIiwidiIsImNvdW50cnlSZWNvcmQiLCJmb3JtdWxhdGlvbkxpc3RUb091dHB1dCIsInJvdXRlQWRtaW5Ub091dHB1dCIsImNvbnRhaW5lclR5cGVMaXN0VG9PdXRwdXQiLCJmb3JtdWxhdGlvbkNvdW50cnlMaXN0VG9PdXRwdXQiLCJhY3RpdmVMaXN0VG9PdXRwdXQiLCJub25NZWRJbmdMaXN0VG9PdXRwdXQiLCJtYXRlcmlhbExpc3RUb091dHB1dCIsImFjdGl2ZUxpc3QiLCJwcmVmaXgiLCJuZXdPYmoiLCJuZXdVbml0cyIsIm5vbk1lZExpc3QiLCJjb250YWluZXJMaXN0IiwiZ2V0Um9hUHJlZml4IiwibmV3Um9hIiwicmVwQ29udGFjdFRvT3V0cHV0IiwiY29udGFjdExpc3QiLCJ0aGVyYXBldXRpY0NsYXNzVG9PdXRwdXQiLCJqc29uT2JqIiwic2NoZWR1bGVBVG9PdXRwdXQiLCJjcmVhdGVFbXB0eVNjaGVkdWxlQUZvck91dHB1dCIsImRpbl9udW1iZXIiLCJkcnVnSWROdW1iZXIiLCJkaXNvcmRlckxpc3QiLCJkaXNlYXNlRGlzb3JkZXJMaXN0Iiwic2NoZWRfYV9jbGFpbXNfaW5kX2RldGFpbHMiLCJzY2hlZHVsZUFDbGFpbXNJbmREZXRhaWxzIiwibm9WYWx1ZSIsImdldEFwcGVuZGljZURhdGEiLCJhcHBlbmRpeCIsImdldEFuaW1hbEluZ3JlZGllbnRzIiwiZm9ybXVsYXRpb25zIiwieWVzVmFsdWUiLCJhbGxBbmltYWxTb3VyY2VkTmFtZXMiLCJ1bmlxdWVMaXN0Iiwib25lRm9ybXVsYXRpb24iLCJqIiwib25lQWN0aXZlIiwiZ2V0VW5pcXVlTGlzdCIsImdldE1pc3NpbmdBcHBlbmRpY2VzIiwiYXBwZW5kaWNlTGlzdCIsImluZ3JlZGllbnRKc29uTGlzdCIsIm1pc3NpbmdMaXN0IiwiaGFzT3duUHJvcGVydHkiLCJmaW5kRXh0cmFBcHBwZW5kaWNlcyIsImFwcGVuZGl4SnNvbiIsImV4dHJhTGlzdCIsImtleXMiLCJPYmplY3QiLCJ2YWwiLCJhcnIiLCJ1IiwibCIsImdldERlZmF1bHRTY2hlZEEiLCJzY2hlZEEiLCJnZXREZWZhdWx0RGlzZWFzZURpc29yZGVyTGlzdCIsIm5vTW9kZWxWYWx1ZSIsImdldERlZmF1bHREcnVnVXNlTGlzdCIsImRydWdVc2VMaXN0IiwibG9hZERydWdVc2VWYWx1ZXMiLCJkcnVnTGlzdCIsInJlYyIsImh1bWFuX2RydWdfdXNlIiwicmFkaW9waGFybV9kcnVnX3VzZSIsImRpc2luZmVjdGFudF9kcnVnX3VzZSIsInZldF9kcnVnX3VzZSIsImRydWdVc2VWYWx1ZXNUb091dHB1dCIsImRydWdVc2VBcnJheSIsIm91dHB1dEpzb24iLCJyZWNvcmQiLCJfY3JlYXRlRW1wdHlOZXJ2b3VzU3lzdGVtTW9kZWwiLCJicmFpbiIsImJyYWluU3RlbSIsImNlcmViZWxsdW0iLCJjZXJvRmx1aWQiLCJkb3JzYWxSb290IiwiZHVyYU1hdGVyIiwiaHlwb3RoYWxhbXVzIiwicmV0aW5hIiwic3BpbmFsQ29yZCIsInRyaWdlbWluYWwiLCJvdGhlck5lcnZvdXMiLCJvdGhlckRldGFpbHMiLCJfY3JlYXRlRW1wdHlEaWdlc3RpdmVTeXN0ZW1Nb2RlbCIsImJpbGUiLCJkaXN0YWxJbGV1bSIsImxhcmdlSW50ZXN0aW5lIiwic2FsaXZhU2FsaXZhcnkiLCJzbWFsbEludGVzdGluZSIsInN0b21hY2giLCJvdGhlckRpZ2VzdGl2ZSIsIl9jcmVhdGVFbXB0eUltbXVuZVN5c3RlbU1vZGVsIiwibHltcGhOb2RlcyIsInNwbGVlbiIsInRoeW11cyIsInRvbnNpbHMiLCJvdGhlckltbXVuZSIsIl9jcmVhdGVFbXB0eU11c2NsZVN5c3RlbU1vZGVsIiwiYWJkb21lbiIsInNrdWxsIiwiYm9uZXMiLCJjb2xsYWdlbiIsInRlbmRvbnNMaWdhbWVudHMiLCJ2ZXJ0ZWJyYWxDb2x1bW4iLCJtdXNjbGUiLCJvdGhlck11c2NsZSIsIl9jcmVhdGVFbXB0eVJlcHJvZHVjdGl2ZVN5c3RlbU1vZGVsIiwibWlsa1Byb2R1Y3RzIiwia2lkbmV5IiwiY29sb3N0cnVtIiwibWFtbWFyeUdsYW5kcyIsIm92YXJpZXMiLCJwbGFjZW50YSIsInBsYWNlbnRhbEZsdWlkIiwic2VtZW4iLCJ0ZXN0ZXMiLCJ1cmluZSIsIm90aGVyUmVwcm9kdWN0aXZlIiwiX2NyZWF0ZUVtcHR5U2tpblN5c3RlbU1vZGVsIiwiYWRyZW5hbEdsYW5kIiwiaGFpckhvb3Zlc0ZlYXRoZXJzIiwibGl2ZXIiLCJwYW5jcmVhcyIsInBpdHVpdGFyeSIsInNraW5IaWRlcyIsInRoeXJvaWRQYXJhdGh5cm9pZCIsIm90aGVyU2tpbiIsIl9jcmVhdGVFbXB0eU90aGVyU3lzdGVtTW9kZWwiLCJhZGlwb3NlIiwiYXNjaXRlcyIsImFudGxlclZlbHZldCIsInNlcnVtIiwid2hvbGVCbG9vZCIsInBsYXNtYSIsImVtYnJ5b25pY1Rpc3N1ZSIsImZldGFsVGlzc3VlIiwiYm9uZU1hcnJvdyIsImV5ZXNDb3JuZWEiLCJnYWxsQmxhZGRlciIsIm90aGVyRmx1aWRzIiwiX2NyZWF0ZUVtcHR5Q2FyZGlvU3lzdGVtTW9kZWwiLCJoZWFydFBlcmljYXJkaXVtIiwibHVuZyIsIm5hc2FsRmx1aWQiLCJ0cmFjaGVhIiwib3RoZXJDYXJkaW8iLCJfY3JlYXRlRW1wdHlOZXJ2b3VzU3lzdGVtZm9yT3V0cHV0IiwiYnJhaW5fc3RlbSIsImNlcmVicm9zcGluYWxfZmx1aWQiLCJkb3JzYWxfcm9vdF9nYW5nbGlhIiwiZHVyYV9tYXRlciIsInJldGluYV9vcHRpYyIsInNwaW5hbF9jb3JkIiwidHJpZ2VybWluYWxfZ2FuZ2xpYSIsIm90aGVyX25lcnZvdXMiLCJvdGhlcl9uZXJ2b3VzX2RldGFpbHMiLCJfY3JlYXRlRW1wdHlEaWdlc3RpdmVTeXN0ZW1mb3JPdXRwdXQiLCJkaXN0YWxfaWxldW0iLCJsYXJnZV9pbnRlc3RpbmUiLCJzYWxpdmFfc2FsaXZhcnkiLCJzbWFsbF9pbnRlc3RpbmUiLCJvdGhlcl9kaWdlc3RpdmUiLCJvdGhlcl9kaWdlc3RpdmVfZGV0YWlscyIsIl9jcmVhdGVFbXB0eU11c2NsZVN5c3RlbWZvck91dHB1dCIsInRlbmRvbnNfbGlnYW1lbnRzIiwidmVydGVicmFsX2NvbHVtbiIsIm90aGVyX211c2N1bG9fc2tlbGV0YWwiLCJvdGhlcl9tdXNjdWxvX3NrZWxldGFsX2RldGFpbHMiLCJfY3JlYXRlRW1wdHlSZXByb2R1Y3RpdmVTeXN0ZW1mb3JPdXRwdXQiLCJtaWxrX3Byb2R1Y3RzIiwibWFtbWFyeV9nbGFuZHMiLCJwbGFjZW50YWxfZmx1aWQiLCJvdGhlcl9yZXByb2R1Y3RpdmUiLCJvdGhlcl9yZXByb2R1Y3RpdmVfZGV0YWlscyIsIl9jcmVhdGVFbXB0eUNhcmRpb1N5c3RlbWZvck91dHB1dCIsImhlYXJ0X3BlcmljYXJkaXVtIiwibmFzYWxfZmx1aWQiLCJvdGhlcl9jYXJkaW9fcmVzcGlyYXRvcnkiLCJvdGhlcl9jYXJkaW9fcmVzcGlyYXRvcnlfZGV0YWlscyIsIl9jcmVhdGVFbXB0eUltbXVuZVN5c3RlbWZvck91dHB1dCIsImx5bXBoX25vZGVzIiwib3RoZXJfaW1tdW5lIiwib3RoZXJfaW1tdW5lX2RldGFpbHMiLCJfY3JlYXRlRW1wdHlTa2luU3lzdGVtZm9yT3V0cHV0IiwiYWRyZW5hbF9nbGFuZCIsImhhaXJfaG9vdmVzX2ZlYXRoZXJzIiwic2tpbl9oaWRlcyIsInRoeXJvaWRfcGFyYXRoeXJvaWQiLCJvdGhlcl9za2luX2dsYW5kdWxhciIsIm90aGVyX3NraW5fZ2xhbmR1bGFyX2RldGFpbHMiLCJfY3JlYXRlRW1wdHlPdGhlclN5c3RlbWZvck91dHB1dCIsImFudGxlcl92ZWx2ZXQiLCJ3aG9sZV9ibG9vZCIsImVtYnJ5b25pY190aXNzdWUiLCJmZXRhbF90aXNzdWUiLCJib25lX21hcnJvdyIsImV5ZXNfY29ybmVhIiwiZ2FsbF9ibGFkZGVyIiwib3RoZXJfZmx1aWRzX3Rpc3N1ZXMiLCJvdGhlcl9mbHVpZHNfdGlzc3Vlc19kZXRhaWxzIiwiX2NyZWF0ZUVtcHR5VGlzc3Vlc1N5c3RlbVJlY29yZCIsImRldGFpbHNDb25jYXQiLCJqc29uIiwiaW5kZXgiLCJpc1VuZGVmaW5lZCIsIl9nZXRDYXJkaW9Nb2RlbCIsIl9nZXRDb25jYXRUaXNzdWVzIiwiX2dldERpZ2VzdGl2ZU1vZGVsIiwiX2dldEltbXVuZU1vZGVsIiwiX2dldE11c2NsZVN5c3RlbU1vZGVsIiwiX2dldE5lcnZvdXNNb2RlbCIsIl9nZXRPdGhlclN5c3RlbU1vZGVsIiwiX2dldFJlcHJvZHVjdGl2ZU1vZGVsIiwiX2dldFNraW5Nb2RlbCIsIm1vZGVsIiwibGFiZWxMb29rdXAiLCJnZXRUaXNzdWVzRmx1aWRzTGFiZWxzIiwibWFya3VwQnJlYWsiLCJhbGlhcyIsImN1cnJlbnRMYW5nIiwidHJhbnNsYXRlVGV4dCIsImRvc3NpZXJJRCIsImNvbXBhbnlJRCIsInJlbGF0ZWREb3NzaWVySUQiLCJkYXRlU2F2ZWQiLCJhcHBsaWNhdGlvblR5cGUiLCJzb2Z0d2FyZVZlcnNpb24iLCJkYXRhQ2hlY2tzdW0iLCJkb3NzaWVyVHlwZSIsInByb2R1Y3ROYW1lIiwicHJvcGVyTmFtZSIsImlzUmVmUHJvZHVjdHMiLCJkcnVnUHJvZHVjdCIsInRoaXJkUGFydHlTaWduZWQiLCJpc1NjaGVkdWxlQSIsInNjaGVkdWxlQUdyb3VwIiwidGhlcmFwZXV0aWMiLCJjYW5SZWZQcm9kdWN0cyIsImFwcGVuZGl4Rm91ckxpc3QiLCJnZXREZWZhdWx0T2JqZWN0IiwibG9hZEZyb21GaWxlIiwiZG9zc2llck1vZGVsIiwiZG9zc2llcl9pZCIsImNvbXBhbnlfaWQiLCJyZWxhdGVkX2Rvc3NpZXJfaWQiLCJlbnJvbG1lbnRfdmVyc2lvbiIsImRhdGVfc2F2ZWQiLCJhcHBsaWNhdGlvbl90eXBlIiwic29mdHdhcmVfdmVyc2lvbiIsImRhdGFfY2hlY2tzdW0iLCJkb3NzaWVyX3R5cGUiLCJjb21tb25fbmFtZSIsImlzX3JlZl9wcm9kdWN0cyIsInRoaXJkX3BhcnR5X3NpZ25lZCIsImlzX3NjaGVkX2EiLCJyZWZfcHJvZHVjdF9saXN0IiwiY2RuX3JlZl9wcm9kdWN0IiwiZm9ybXVsYXRpb25fZ3JvdXAiLCJmb3JtdWxhdGlvbl9kZXRhaWxzIiwiYXBwZW5kaXg0X2dyb3VwIiwiY29udGFjdF9yZWNvcmQiLCJ0aGVyYXBldXRpY19jbGFzc19saXN0IiwidGhlcmFwZXV0aWNfY2xhc3MiLCJzY2hlZHVsZV9hX2dyb3VwIiwiZG9zc2llclRvT3V0cHV0IiwiYmFzZURvc3NpZXIiLCJhcHBlbmRpeDQiLCJET1NTSUVSX0VOUk9MIiwiZ2V0TWlzc2luZ0FwcGVuZGl4NCIsIm1pc3NpbmdBcHBlbmRpY2VzIiwiZXh0cmFBcHBlbmRpY2VzIiwicmVzdWx0cyIsImluZ3JlZGllbnRzIiwibWlzc2luZyIsImV4dHJhIiwiZ2V0RGVmYXVsdE5lcnZvdXNTeXN0ZW0iLCJnZXREZWZhdWx0SW1tdW5lU3lzdGVtIiwiZ2V0RGVmYXVsdERpZ2VzdGl2ZVN5c3RlbSIsImdldERlZmF1bHRNdXNjbGVTeXN0ZW0iLCJnZXREZWZhdWx0T3RoZXJTeXN0ZW0iLCJnZXREZWZhdWx0UmVwcm9kdWN0aXZlU3lzdGVtIiwiZ2V0RGVmYXVsdENhcmRpb1N5c3RlbSIsImdldERlZmF1bHRTa2luU3lzdGVtIiwiZ2V0RGVmYXVsdFNjaGVkdWxlQSIsImdldFJvb3RUYWdOYW1lIiwiX2NyZWF0ZVRyYW5zbGF0ZUxpc3QiLCJfY3JlYXRlTmV3U29ydGVkQXJyYXlXaXRoT3RoZXIiLCJfY3JlYXRlTmV3UHJlZml4TGlzdCIsIm5ld1JlYyIsImNvcHkiLCJvcHRpb25zIiwiZGF0YUZvbGRlciIsInJvYVVybCIsImNvdW50cnlVcmwiLCJuYW5vVXJsIiwidW5pdHNVcmwiLCJkb3NhZ2VGb3JtVXJsIiwicmVzdWx0VHJhbnNsYXRlTGlzdCIsInRoZW4iLCJyZXNwb25zZSIsImNyZWF0ZVVuaXRzTGlzdCIsInRyYW5zbGF0ZUxpc3QiLCJjcmVhdGVOYW5vbWF0ZXJpYWxMaXN0IiwiY3JlYXRlRG9zYWdlRm9ybUxpc3QiLCJzZXRBY3RpdmVMaXN0IiwiY3JlYXRlUm9hTGlzdCIsImNvbnNvbGUiLCJ3YXJuIiwiX3NldEFjdGl2ZUFycmF5IiwiX2dldEFjdGl2ZUFycmF5IiwiZ2V0RG9zZU90aGVyVmFsdWUiLCJnZXRZZXNWYWx1ZSIsIllFUyIsImdldFVua25vd25WYWx1ZSIsImdldE90aGVyVmFsdWUiLCJfY3JlYXRlTmFub0FycmF5IiwibmFub0xpc3QiLCJfY3JlYXRlRG9zYWdlRm9ybUFycmF5IiwiZG9zYWdlRm9ybUxpc3QiLCJfY3JlYXRlUm9hQXJyYXkiLCJyb2FMaXN0IiwiX2NyZWF0ZVVuaXRzQXJyYXkiLCJ1bml0c0xpc3QiLCJfZ2V0VW5pdHNBcnJheSIsIl9nZXRSb2FMaXN0UHJlZml4IiwiX2dldERvc2FnZVByZWZpeCIsIl9nZXRVbml0c1ByZWZpeCIsIl9nZXROYW5vUHJlZml4IiwiZ2V0RG9zYWdlRm9ybXNBcnJheSIsImdldE5hbm9NYXRlcmlhbEFycmF5IiwiZ2V0Um9hQXJyYXkiLCJ5ZXNOb1Vua25vd25BcnJheSIsImFuaW1hbFNvdXJjZXNBcnJheSIsInRpc3N1ZXNTeXN0ZW1BcnJheSIsIl9nZXREaWdlc3RpdmVTeXN0ZW1WYWx1ZSIsIl9nZXROZXJ2b3VzU3lzdGVtVmFsdWUiLCJfZ2V0UmVwcm9kdWN0aXZlU3lzdGVtVmFsdWUiLCJfZ2V0Q2FyZGlvU3lzdGVtVmFsdWUiLCJfZ2V0SW1tdW5lU3lzdGVtVmFsdWUiLCJfZ2V0U2tpblN5c3RlbVZhbHVlIiwiX2dldE11c2NsZVN5c3RlbVZhbHVlIiwiX2dldE90aGVyVGlzc3Vlc1N5c3RlbVZhbHVlIiwibmVydm91c1N5c3RlbUFycmF5IiwiZGlnZXN0aXZlU3lzdGVtQXJyYXkiLCJyZXByb2RTeXN0ZW1BcnJheSIsImNhcmRpb1N5c3RlbUFycmF5IiwiaW1tdW5lU3lzdGVtQXJyYXkiLCJza2luU3lzdGVtQXJyYXkiLCJtdXNjbGVTeXN0ZW1BcnJheSIsIm90aGVyU3lzdGVtQXJyYXkiLCJfZ2V0VGlzc3Vlc0ZsdWlkc0xhYmVscyIsImh5cG90aGFsbXVzIiwiZ2V0QWN0aXZlTGlzdCIsImdldERvc2FnZU90aGVyIiwiZ2V0WWVzTm9Vbmtub3duTGlzdCIsImdldEFuaW1hbFNvdXJjZXMiLCJnZXRUaXNzdWVzU3lzdGVtIiwiZ2V0TmVydm91c1N5c3RlbSIsImdldERpZ2VzdGl2ZVN5c3RlbSIsImdldEltbXVuZVN5c3RlbSIsImdldFNraW5TeXN0ZW0iLCJnZXRSZXByb2RTeXN0ZW0iLCJnZXRPdGhlclN5c3RlbSIsImdldE11c2NsZVN5c3RlbSIsImdldENhcmRpb1N5c3RlbSIsImV4cGFuZGluZ1RhYmxlQ3RybCIsIl9zZXROdW1iZXJDb2x1bW5zIiwiZGlzYWJsZUVycm9yQ29sIiwibnVtYmVyQ29scyIsIl9yZWNhbGN1bGF0ZUNvbHVtbkRlZnMiLCJjb2xEZWZzIiwibnVtQ29scyIsImNhcmV0V2lkdGgiLCJlcnJvcldpZHRoIiwidG90YWxXaWR0aCIsInRvU3VidHJhY3QiLCJvbmVEZWYiLCJ3aWR0aCIsInVwZGF0ZVRhYmxlUm93IiwidGV4dEluZGV4Iiwic2VsZWN0SW5kZXgiLCJzZWxlY3RUYWJsZVJvdyIsIl9jcmVhdGVBcnJheSIsImFycmF5U2l6ZSIsImluaXRpYWxWYWwiLCJhbkFycmF5IiwiZm9jdXNlZCIsImNvbHVtbkRlZmluaXRpb25zIiwiZGlzYWJsZUV4cGFuZCIsInRhYmxlUm93RXhwYW5kZWQiLCJ0YWJsZVJvd0luZGV4Q3VyckV4cGFuZGVkIiwidGFibGVSb3dJbmRleFByZXZFeHBhbmRlZCIsImNvbHVtbkRlZiIsImRheURhdGFDb2xsYXBzZSIsIiRvbkluaXQiLCJsaXN0SXRlbXMiLCJnZXRFeHBhbmRlZFN0YXRlIiwicm93IiwiJG9uQ2hhbmdlcyIsImNoYW5nZXMiLCJyZXNldFRhYmxlUm93IiwicmVzZXRUb0NvbGxhcHNlZCIsInNlbGVjdFJlY29yZCIsImN1cnJlbnRWYWx1ZSIsImRpc2FibGVTZWxlY3Rpb24iLCJkaXNhYmxlRXJyQ29sdW1uIiwiZm9ybUluRXJyb3IiLCJhRm9ybSIsIiRpbnZhbGlkIiwiZGVsZXRlZFJvdyIsImRheURhdGFDb2xsYXBzZUZuIiwiYXBwZW5kIiwiY29tcG9uZW50IiwidGVtcGxhdGVVcmwiLCJjb250cm9sbGVyQXMiLCJ0cmFuc2NsdWRlIiwiYmluZGluZ3MiLCJBcHBsSW5mb0N0cmwiLCJORVdfVFlQRSIsIkFNRU5EX1RZUEUiLCJBUFBST1ZFRF9UWVBFIiwiRVhURVJOQUxfVFlQRSIsIl9zZXRDb25maWdJdGVtcyIsImNvbmZpZ0pzb24iLCJmaWVsZElkTGFiZWwiLCJmaWVsZExlbmd0aCIsInRhZ05hbWUiLCJtaW5GaWVsZExlbmd0aCIsImVycm9yTXNnIiwibWluRXJyb3JNc2ciLCJpc0Rvc3NpZXIiLCJhcHBsVHlwZXMiLCJpbmZvTW9kZWwiLCJzZXRBc0luY29tcGxldGUiLCJtYXhFcnJvck1zZyIsInVzZXJUeXBlIiwiaXNJbmNvbXBsZXRlIiwiY29uZmlndXJlSWRGaWVsZCIsInNob3dBbWVuZE1zZyIsImlzRXh0ZXJuIiwic2V0QW1lbmRTdGF0ZSIsInNldFR5cGUiLCJ0eXBlIiwiY29udGFjdEN0cmwiLCJnZXRDb250YWN0TGlzdHMiLCJFTkdMSVNIIiwiaXNFZGl0YWJsZSIsIm5nTW9kZWxPcHRTZXR0aW5nIiwidXBkYXRlT24iLCJzYWx1dGF0aW9uTGlzdCIsImxhbmdDb3JyZXNwcG9uZCIsInBob25lUmVnIiwiY29udGFjdE1vZGVsIiwiaXNEZXRhaWxWYWxpZCIsImNvbnRhY3RJZCIsImFtZW5kUmVjb3JkIiwiYWRkcmVzc1JvbGUiLCJtYW51ZmFjdHVyZXIiLCJtYWlsaW5nIiwiYmlsbGluZyIsImltcG9ydGVyIiwiY29udGFjdFJvbGUiLCJQaG9uZUV4dCIsImxhbmdMaXN0IiwiY29udGFjdFJlY29yZCIsImlzQW1lbmQiLCJzaG93RXJyb3IiLCJjdHJsIiwiJHRvdWNoZWQiLCJzaG93RXJyb3JzIiwib25VcGRhdGUiLCJjb250YWN0UmVjQ3RybCIsIiRzY29wZSIsInNhdmVQcmVzc2VkIiwiZm9ybUFtZW5kIiwiaXNDb250YWN0IiwiaXNOb3RFZGl0YWJsZSIsImVkaXRTdGF0ZSIsInNldEVkaXRhYmxlU3RhdGUiLCJvbkRlbGV0ZSIsImRpc2NhcmRDaGFuZ2VzIiwiY29udGFjdFJlY0Zvcm0iLCIkcHJpc3RpbmUiLCJjdXJyUmVjb3JkIiwic2V0Tm90RWRpdGFibGUiLCIkc2V0UHJpc3RpbmUiLCJzdGF0ZSIsIiR2YWxpZCIsInVwZGF0ZVZhbGlkIiwiJGRpcnR5IiwiJHdhdGNoIiwidXBkYXRlQ29udGFjdE1vZGVsIiwiY29udGFjdExpc3RDdHJsIiwib25lUmVjb3JkIiwiaXNQYXJlbnREaXJ0eSIsInJlc2V0Q29sbGFwc2VkIiwicmVwQ29udGFjdFNlcnZpY2UiLCJiaW5kaW5nIiwidXBkYXRlRXJyb3JTdGF0ZSIsInBhcmVudERpcnR5IiwiaXNBZGRDb250YWN0Iiwic2hvd05vUmVjb3JkRXJyb3IiLCJpc0ludmFsaWQiLCJzaG93TGlzdEVycm9ycyIsInNldFZhbGlkIiwiY29udGFjdExpc3RGb3JtIiwib25VcGRhdGVDb250YWN0UmVjb3JkIiwiaWR4IiwiaW5kZXhPZiIsImRpc2FibGVBZGQiLCJkZWxldGVDb250YWN0IiwiY0lEIiwic3BsaWNlIiwidGVtcCIsImFkZENvbnRhY3QiLCJkZWZhdWx0Q29udGFjdCIsIm5nRmlsZVNlbGVjdCIsImhwZmJGaWxlUmVhZGVyIiwicm9vdFRhZyIsImJpbmQiLCJlIiwiZmlsZSIsInNyY0VsZW1lbnQiLCJ0YXJnZXQiLCJmaWxlcyIsInJlYWRBc0RhdGFUZXh0IiwiaHBmYkZpbGVTZWxlY3QiLCJmaWxlQ29udGVudCIsIkZpbGVTZWxlY3RDb250cm9sbGVyIiwiaHBmYkZpbGVQcm9jZXNzaW5nIiwiZmlsZVR5cGVzIiwibW9kZWxDYWxsYmFjayIsIm1lc3NhZ2VzIiwidXBkYXRlTW9kZWxSb290IiwiZmlsZUxvYWQiLCJ0cmlnZ2VyIiwicm9vdEVsZW0iLCJGaWxlV3JpdGVDb250cm9sbGVyIiwiX2dlbmVyYXRlRmlsZSIsInNhdmVUeXBlIiwidG9VcHBlckNhc2UiLCJ3cml0ZUFzSnNvbiIsImpzb25Ub1NhdmUiLCJmaWxlTmFtZSIsIndyaXRlQXNYbWwiLCJfaW5pdCIsImJ1dHRvbkRpc2FibGVkIiwidG9Mb3dlckNhc2UiLCJnZW5lcmF0ZSIsImJ1dHRvbkxhYmVsIiwiZmlsZVJlYWRlciIsIm9uTG9hZCIsInJlYWRlciIsIiRhcHBseSIsInNwbGl0RmlsZSIsImZpbGVUeXBlIiwiZHJhZnRfZmlsZV90eXBlIiwiY29udmVydFRvSlNPTk9iamVjdHMiLCJjaGVja1Jvb3RUYWdNYXRjaCIsImNvbnZlcnRYTUxUb0pTT05PYmplY3RzIiwiY29udmVydFJlc3VsdCIsInBhcnNlUmVzdWx0IiwibXNnX2Vycl9maWxlVHlwZSIsIm9uRXJyb3IiLCJtc2dfZXJyX2xvYWQiLCJnZXRSZWFkZXIiLCJGaWxlUmVhZGVyIiwib25sb2FkIiwicmVhZEFzVGV4dCIsImpzb25SZXN1bHQiLCJKU09OIiwicGFyc2UiLCJtc2dfc3VjY2VzcyIsIm1zZ19lcnJfanNvbnBhcnNlIiwieG1sQ29uZmlnIiwiZXNjYXBlTW9kZSIsImVtcHR5Tm9kZUZvcm0iLCJ1c2VEb3VibGVRdW90ZXMiLCJ4bWxDb252ZXJ0ZXIiLCJYMkpTIiwieG1sX3N0cjJqc29uIiwibXNnX2Vycl94bWxwYXJzZSIsImNvbnZlcnRKU09OT2JqZWN0c1RvWE1MIiwianNvbkNvbnZlcnRlciIsInhtbFJlc3VsdCIsImpzb24yeG1sX3N0ciIsIm1zZ19lcnJfZm9ybVR5cGUiLCJqc29uVG9GaWxlIiwibWFrZVN0clNhdmUiLCJzdHJpbmdpZnkiLCJibG9iIiwiQmxvYiIsInNhdmVBcyIsInhtbFRvRmlsZSIsIm5vbk1lZEluZ1JlY0N0cmwiLCJzZWxmIiwibmFub01hdGVyaWFsTGlzdCIsInllc05vTGlzdCIsImluZ01vZGVsIiwiYmFja3VwIiwic2F2ZUluZyIsIm5vbk1lZEluZ0Zvcm0iLCJvbkFkZEluZyIsIm9uQ2FuY2VsIiwiaXNBbmltYWxIdW1hblNvdXJjZWQiLCJpbmdyZWRpZW50Q29weSIsImlzVG91Y2hlZCIsImlzTmFub090aGVyIiwiaXNVbml0c090aGVyIiwiZGVsZXRlQnRuIiwicmVjb3JkSW5kZXgiLCJub25NZWRJbmdMaXN0Q3RybCIsInNldFJlY29yZCIsIm5ld0luZ0Zvcm1TaG93biIsImNvbE5hbWVzIiwiaW5nTGlzdCIsImFkZEluZyIsInVwZGF0ZUluZyIsImRlbGV0ZUluZyIsImFkZE5ld0luZ3JlZGllbnRTdGF0ZSIsImFkZE5ld0Rpc2FibGVkIiwib25OZXdDYW5jZWwiLCJtYXRlcmlhbEluZ1JlY0N0cmwiLCJtaXJNb2RlbCIsInNhdmUiLCJtYXRlcmlhbEluZ1JlY29yZEZvcm0iLCJvbkFkZE5ldyIsIm1hdGVyaWFsSW5nTGlzdEN0cmwiLCJhZGROZXciLCJmb3JtdWxhdGlvblJlY0N0cmwiLCJub0NvdW50cmllcyIsIm5vUk9BVmFsdWVzIiwibm9BY3RpdmVWYWx1ZXMiLCJvdGhlclZhbHVlIiwiZnJtTW9kZWwiLCJmb3JtdWxhdGlvbkNvcHkiLCJhZGRDb3B5Iiwibm9Db3VudHJ5Iiwibm9ST0EiLCJub0FjdGl2ZXMiLCJ1cGRhdGVBY3RpdmVJbmdMaXN0IiwicmVjb3JkQ2hhbmdlZCIsInVwZGF0ZU5vbk1lZEluZ0xpc3QiLCJ1cGRhdGVDb250YWluZXJUeXBlTGlzdCIsInVwZGF0ZU1hdGVyaWFsTGlzdCIsInVwZGF0ZVJvYUxpc3QiLCJ1cGRhdGVDb3VudHJ5TGlzdCIsImlzRG9zYWdlT3RoZXIiLCJ1aVNlbGVjdENvbmZpZyIsInRoZW1lIiwiZm9ybXVsYXRpb25zQ3RybCIsImdldE1heEZvcm11bGF0aW9uSWQiLCJvdXQiLCJub0Zvcm11bGF0aW9ucyIsIm5ld0Zvcm1TaG93biIsInVwZGF0ZUZvcm11bGF0aW9uc0Vycm9yIiwibmV3UmVjb3JkIiwiZm9ybXVsYXRpb24iLCJ1cGRhdGUiLCJmcm0iLCJjb250YWluZXJUeXBlUmVjQ3RybCIsImN0TW9kZWwiLCJjb250YWluZXJUeXBlRm9ybSIsImNUeXBlIiwiY29udGFpbmVyVHlwZUxpc3RDdHJsIiwiY29udGFpbmVycyIsInVwZGF0ZVJlYyIsImRlbGV0ZVJlYyIsImFjdGl2ZUluZ1JlY0N0cmwiLCJVbml0c0xpc3QiLCJpbmdyZWRTZWxlY3Rpb25VcGRhdGVkIiwiZXZlbnQiLCJsb2ciLCJhY3RpdmVJbmdGb3JtIiwiYWN0aXZlSW5nTGlzdEN0cmwiLCJ0aGVyYUxpc3RDdHJsIiwiZ2V0TWF4SUQiLCJ0aGVyYUxpc3QiLCJyZWNvcmRzIiwibWF4SUQiLCJkZWxldGVSZWNvcmQiLCJyZWNJZCIsInRoZXJhcGV1dGljQ2xhc3NDdHJsIiwidGFiQ3RybCIsInRhYiIsInNlbGVjdGVkIiwidGFicyIsImFkZFRhYiIsInRhYnNDdHJsIiwiZGlzYWJsZWQiLCJlcnJvcnMiLCJmb3JtIiwic2VsZWN0VGFiIiwiYXBwZW5kaXg0TGlzdCIsInNjaGVkdWxlQUN0cmwiLCJpc0NsYWltIiwiZXhwYW5kZXJPcGVuU3RhdGUiLCJkaXNhYmxlRXhwYW5kZXIiLCJzY2hlZHVsZUFNb2RlbCIsInNjaGVkdWxlR3JvdXAiLCJjbGFpbVNlbGVjdGVkIiwibm9DbGFpbVNlbGVjdGVkIiwiaXNPcGVuU3RhdGUiLCJzY2hlZEFGb3JtIiwicm9hUmVjb3JkQ29udHJvbGxlciIsInJvYUNoYW5nZWQiLCJpc1JvYU90aGVyIiwicm9hTGlzdEN0cmwiLCJsYWJlbF9lbiIsImxhYmVsX2ZyIiwiZHJ1Z1VzZUN0cmwiLCJjb21tb25OYW1lIiwibXlMaXN0IiwiaXNEcnVnVXNlU2VsZWN0ZWQiLCJkZXBlbmRlbmNpZXMiLCJkb3NzaWVyQ3RybCIsImdldFJvbGVMaXN0cyIsIklOVEVSTkFMX1RZUEUiLCJfbG9hZEZpbGVDb250ZW50IiwicmVzdWx0SnNvbiIsImRvc3NpZXJTZXJ2aWNlIiwic2hvd05vUmVmUmVFcnJvciIsImdldEFwcGVuZGl4NEVycm9ycyIsIl9zZXRDb21wbGV0ZSIsInNob3dBbGxFcnJvcnMiLCJkaXNhYmxlWE1MU2F2ZSIsImFwcGVuZGl4Q2hlY2siLCJlcnJvckFwcGVuZGl4IiwiZXh0cmFBcHBlbmRpeCIsImFjdGl2aXR5Um9vdCIsImZvcm1JbnZhbGlkIiwiZG9zc2llckZvcm0iLCJkaXNhYmxlWE1MIiwiYXBwbGljYXRpb25JbmZvU2VydmljZSIsIl90cmFuc2Zvcm1GaWxlIiwidXBkYXRlRGF0ZSIsIl9jcmVhdGVGaWxlbmFtZSIsImRyYWZ0X3ByZWZpeCIsImZpbmFsX3ByZWZpeCIsImZpbGVuYW1lIiwic2hvd0NvbnRlbnQiLCJzYXZlWE1MTGFiZWwiLCJmb3JtVHlwZUxpc3QiLCJjb25maWdGaWVsZCIsIm5vVGhlcmEiLCJvbmVSZWZTZWxlY3RlZCIsImFsZXJ0MSIsIm1zZyIsInNob3ciLCJhbGVydDIiLCJhbGVydDMiLCJhbGVydDQiLCJhcHBlbmRpeE1pc3NpbmdFcnJvciIsImFwcGVuZGl4RXh0cmFFcnJvciIsInRoaXJkUGFydHlTaWduZWRDaGFuZ2VkIiwicmVjb3Jkc0NoYW5nZWQiLCJzZXRBcHBsaWNhdGlvblR5cGUiLCJjZG5SZWZVcGRhdGVkIiwiaXNTY2hlZEEiLCJzYXZlSnNvbiIsIndyaXRlUmVzdWx0Iiwic2F2ZVhNTCIsIm5vVGhlcmFSZWNzIiwiY2xvc2VBbGVydCIsImFkZEluc3RydWN0IiwiZG9zc2llclJlY29yZElucHV0Iiwib25VcGRhdGVEb3NzaWVyIiwib25EZWxldGVEb3NzaWVyIiwiY291bnRyeVJlY29yZENvbnRyb2xsZXIiLCJjb3VudHJ5Q2hhbmdlZCIsIiRpdGVtIiwiJG1vZGVsIiwiaXNVbmtub3duIiwiZmllbGRzZXRMYWJlbCIsImNvdW50cnlMaXN0Q29udHJvbGxlciIsInNldFVua25vd25Db3VudHJ5U3RhdGUiLCJiYXNlQ291bnRyaWVzIiwidW5rbm93blJlYyIsImhhc1Vua25vd24iLCJmaWVsZExhYmVsIiwiZW1wdHlNb2RlbCIsImdldExpc3RNYXhJRCIsIndpdGhVbmtub3duIiwiY2hlY2tCb3hMaXN0Q3RybCIsIm51bWJlckNvbHVtbnMiLCJjb2xXaWR0aCIsImN1cnJlbnRNb2RlbCIsIk1hdGgiLCJjZWlsIiwic29tZVNlbGVjdGVkIiwib2JqZWN0Iiwicm9sZU1vZGVsIiwic29tZSIsInVwZGF0ZVN0YXRlIiwiaGFzT3RoZXJEZXRhaWxzIiwib3RoZXJUZXh0IiwicmVmUHJvZHVjdExpc3RDdHJsIiwibmV3UHJvZHVjdEZvcm1TaG93biIsInByb2R1Y3RMaXN0IiwicHJvZHVjdHMiLCJhZGRQcm9kdWN0IiwicmVjcyIsInVwZGF0ZVByb2R1Y3QiLCJkZWxldGVQcm9kdWN0IiwiYWRkTmV3UHJvZHVjdFN0YXRlIiwicmVmUHJvZHVjdERldGFpbHNDdHJsIiwicHJvZHVjdE1vZGVsIiwibmV3SW5ncmVkIiwicHJvZHVjdFJlY29yZCIsInNhdmVQcm9kdWN0IiwicHJvZHVjdERldGFpbHNGb3JtIiwib25BZGRQcm9kdWN0IiwidGlzc3Vlc0ZsdWlkc0xpc3RDb250cm9sbGVyIiwidGlzc3Vlc0ZsdWlkc0xpc3QiLCJpc0h0bWwiLCJub1Rpc3N1ZVJlY3MiLCJ0aXNzdWVzTGlzdEZvcm0iLCJzeXN0ZW1BbHJlYWR5VXNlZCIsInN5c3RlbVZhbCIsInN5c3RlbUV4aXN0cyIsInRpc3N1ZXNGbHVpZHNDb250cm9sbGVyIiwic3lzdGVtTGlzdCIsImZsdWlkc0xpc3RzIiwiZG9zU2VydmljZSIsImlzVXNlZCIsInNlbGVjdGVkU3lzdGVtTGlzdCIsInN5c3RlbUNoYW5nZWQiLCJzeXN0ZW1Vc2VkIiwiJHNldFZhbGlkaXR5Iiwib3RoZXJDaGFuZ2VkIiwidXBkYXRlQ29uY2F0IiwidG9BZGQiLCJzIiwibmV3Q29uY2F0Iiwic2tpblN5c3RlbUNvbnRyb2xsZXIiLCJpc1NlbGVjdGVkIiwiZGV0YWlsc0NoYW5nZWQiLCJjb25jYXRVcGRhdGUiLCJvdGhlclVwZGF0ZSIsInJlcHJvZHVjdGl2ZVN5c3RlbUNvbnRyb2xsZXIiLCJvdGhlclRpc3N1ZVN5c3RlbUNvbnRyb2xsZXIiLCJuZXJ2b3VzU3lzdGVtQ29udHJvbGxlciIsIm11c2NsZVN5c3RlbUNvbnRyb2xsZXIiLCJpbW11bmVTeXN0ZW1Db250cm9sbGVyIiwiZGlnZXN0aXZlU3lzdGVtQ29udHJvbGxlciIsImNhcmRpb1N5c3RlbUNvbnRyb2xsZXIiLCJhcHBlbmRpeEZvdXJDdHJsIiwiaW5ncmVkaWVudExpc3QiLCJhcHA0UmVjQ3RybCIsImlzU291cmNlZCIsImVtcHR5Rmx1aWRzVGlzc3VlcyIsImVtcHR5QW5pbWFsU291cmNlIiwiaXNTb3VyY2VkU2VsZWN0ZWQiLCJub1NlbGVjdGlvbkVycm9yIiwiYXBwZW5kaXg0UmVjRm9ybSIsInVwZGF0ZVRpc3N1ZXNGbHVpZHMiLCJ1cGRhdGVBbmltYWxTb3VyY2VkIiwic2hvd1Rpc3N1ZXNGbHVpZHMiLCJzaG93QW5pbWFsU291cmNlcyIsImFuaW1hbFNvdXJjZWRTZWN0aW9uQ29udHJvbGxlciIsInllc05vVW5rbm93bkxpc3QiLCJhbmltYWxTcmNTZWN0aW9uIiwib25lQW5pbWFsIiwib25lQ291bnRyeSIsIm5vQW5pbWFsU3JjIiwibm9Db3VudHJ5U3JjIiwiYW5pbWFsU291cmNlZENvbnRyb2xsZXIiLCJhbmltYWxzTGlzdCIsImFuaW1hbFNvdXJjZWRMaXN0Q29udHJvbGxlciJdLCJtYXBwaW5ncyI6IkNBQUEsV0FDQSxZQVdBLFNBQUFBLGdCQUFBQyxXQUFBQyx3QkFDQSxHQUFBQyxJQUFBQyxJQUNBRCxJQUFBRSxTQUFBLE1BVEFDLFFBQUFDLE9BQUEsY0FBQSx5QkFBQSxvQkFBQSxnQkFBQSxZQUFBLGlCQUNBQyxXQUFBLGlCQUFBUixnQkFLQUEsZUFBQVMsU0FBQSxhQUFBLDZCQU9BLFdBQ0EsWUFDQUgsU0FDQUMsT0FBQSxjQUNBRyxRQUFBLHFCQUFBLFNBQUFDLG9CQUVBQSxtQkFBQUMsa0JBQUEsR0FDQUQsbUJBQUFFLGtCQUFBLE1BQ0FGLG1CQUFBRyxVQUFBLGNBQ0FILG1CQUFBSSx5QkFBQSxNQUNBSixtQkFBQUssa0JBQUEsU0M1QkFWLFFBQUFDLE9BQUEsbUJBQUFHLFFBQUEscUJBQUEsU0FBQUMsb0JBQ0FBLG1CQUFBTSxhQUFBLE1BQ0FDLFFBQUEsVUFDQUMsTUFBQSxRQUNBQyxRQUFBLFVBQ0FDLHdCQUFBLDJCQUNBQyx5QkFBQSwyQkFDQUMsTUFBQSxRQUNBQyxTQUFBLFdBQ0FDLElBQUEsTUFDQUMsSUFBQSxNQUNBQyxRQUFBLFVBQ0FDLE9BQUEsU0FDQUMsUUFBQSxVQUNBQyxTQUFBLFdBQ0FDLE1BQUEsUUFDQUMsdUJBQUEseUJBQ0FDLE9BQUEsU0FDQUMsb0JBQUEsc0JBQ0FDLHNCQUFBLHdCQUNBQyxRQUFBLFVBQ0FDLFNBQUEsV0FDQUMsTUFBQSxRQUNBQyxtQkFBQSxzQkFDQUMsbUJBQUEsc0JBQ0FDLE1BQUEsUUFDQUMsTUFBQSxRQUNBQyxZQUFBLGNB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LEdBQUE2eUMsaUJBQ0E3eUMsR0FBQTh5QyxhQUFBLEVBQ0E5eUMsR0FBQTh5QyxhQUFBOXlDLEdBQUFrbkMsTUFBQTFVLGNBQUF2VCxPQUFBLEdBRUFqZixHQUFBb2tELGFBQUEsU0FBQUMsT0FFQSxHQUFBOUssS0FBQXY1QyxHQUFBa25DLE1BQUExVSxjQUFBZ25CLFFBQ0FyNUIsUUFBQSxVQUFBbmdCLEdBQUFrbkMsTUFBQTFVLGVBQUFyUSxHQUFBa2lDLFFBQUEsR0FBQSxHQUNBcmtELElBQUFrbkMsTUFBQTFVLGNBQUFvbkIsT0FBQUwsSUFBQSxJQWhGQXA1QyxRQUNBQyxPQUFBLHFCQUNBb3pDLFVBQUEsd0JBQ0FDLFlBQUEsaUZBQ0FHLFVBQ0FzUSxRQUFBLElBQ0FqTixXQUFBLEtBRUE1MkMsV0FBQTJ2RCw0QkFDQXRjLGFBQUEsbUJBR0FzYyw0QkFBQTF2RCxTQUFBIiwiZmlsZSI6ImRvc3NpZXJBcHBJTlQtZW5fMjAxNzAyMDNfMTUwNC5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuXHJcbiAgICAvL1RPRE86IExhenkgbG9hZCBtb2R1bGVzXHJcbiAgICBhbmd1bGFyLm1vZHVsZSgnZG9zc2llckFwcCcsIFsncGFzY2FscHJlY2h0LnRyYW5zbGF0ZScsICdkb3NzaWVyTG9hZE1vZHVsZScsICdkb3NzaWVyTW9kdWxlJywgJ2RhdGFMaXN0cycsICd0cmFuc2xhdGlvbnMnXSlcclxuICAgICAgICAuY29udHJvbGxlcignTWFpbkNvbnRyb2xsZXInLCBNYWluQ29udHJvbGxlcik7XHJcblxyXG4gIC8qICBhbmd1bGFyLmVsZW1lbnQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBhbmd1bGFyLmJvb3RzdHJhcChkb2N1bWVudCwgWydkb3NzaWVyQXBwJ10pO1xyXG4gICAgfSkqL1xyXG4gICAgTWFpbkNvbnRyb2xsZXIuJGluamVjdCA9IFsnJHRyYW5zbGF0ZScsICdnZXRDb3VudHJ5QW5kUHJvdmluY2VzJ107XHJcbiAgICBmdW5jdGlvbiBNYWluQ29udHJvbGxlcigkdHJhbnNsYXRlLCBnZXRDb3VudHJ5QW5kUHJvdmluY2VzKSB7XHJcbiAgICAgICAgdmFyIHZtID0gdGhpcztcclxuICAgICAgICB2bS5mb3JtVHlwZSA9ICdJTlQnO1xyXG4gICAgfVxyXG59KSgpO1xyXG5cclxuKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKCdkb3NzaWVyQXBwJylcclxuICAgICAgICAuY29uZmlnKFsnJHRyYW5zbGF0ZVByb3ZpZGVyJywgZnVuY3Rpb24gKCR0cmFuc2xhdGVQcm92aWRlcikge1xyXG4gICAgICAgICAgICAvL3RoaXMgcHJldmVudHMgY29uZmxpY3RzIHdpdGggbmdNZXNzYWdlXHJcbiAgICAgICAgICAgICR0cmFuc2xhdGVQcm92aWRlci5kaXJlY3RpdmVQcmlvcml0eSgxKTtcclxuICAgICAgICAgICAgJHRyYW5zbGF0ZVByb3ZpZGVyLnByZWZlcnJlZExhbmd1YWdlKCdlbicpO1xyXG4gICAgICAgICAgICAkdHJhbnNsYXRlUHJvdmlkZXIudXNlTG9hZGVyKCdjdXN0b21Mb2FkJyk7XHJcbiAgICAgICAgICAgICR0cmFuc2xhdGVQcm92aWRlci51c2VTYW5pdGl6ZVZhbHVlU3RyYXRlZ3kobnVsbCk7XHJcbiAgICAgICAgICAgICR0cmFuc2xhdGVQcm92aWRlci5mb3JjZUFzeW5jUmVsb2FkKHRydWUpOyAvL25lZWRlZCBmb3IgdGhlIGN1c3RvbSBsb2FkZXJcclxuICAgICAgICB9XSk7XHJcbn0pKCk7XHJcbiIsImFuZ3VsYXIubW9kdWxlKFwidHJhbnNsYXRpb25zXCIsIFtdKS5jb25maWcoW1wiJHRyYW5zbGF0ZVByb3ZpZGVyXCIsIGZ1bmN0aW9uKCR0cmFuc2xhdGVQcm92aWRlcikge1xuJHRyYW5zbGF0ZVByb3ZpZGVyLnRyYW5zbGF0aW9ucyhcImVuXCIsIHtcclxuICBcIkFFUk9TT0xcIjpcIkFyZW9zb2xcIixcclxuICBcIkJPTFVTXCI6XCJCb2x1c1wiLFxyXG4gIFwiQ0FQU1VMRVwiOlwiQ2Fwc3VsZVwiLFxyXG4gIFwiQ0FQU1VMRV9ERUxBWUVEX1JFTEVBU0VcIjpcIkNhcHN1bGUsIERlbGF5ZWQgUmVsZWFzZVwiLFxyXG4gIFwiQ0FQU1VMRV9FWFRFTkRFRF9SRUxFQVNFXCI6XCJDYXBzdWxlLCBEZWxheWVkIFJlbGVhc2VcIixcclxuICBcIkNSRUFNXCI6XCJDcmVhbVwiLFxyXG4gIFwiRU1VTFNJT05cIjpcIkVtdWxzaW9uXCIsXHJcbiAgXCJHQVNcIjpcIkdhc1wiLFxyXG4gIFwiR0VMXCI6XCJHZWxcIixcclxuICBcIklNUExBTlRcIjpcIkltcGxhbnRcIixcclxuICBcIkxPVElPTlwiOlwiTG90aW9uXCIsXHJcbiAgXCJMT1pFTkdFXCI6XCJMb3plbmdlXCIsXHJcbiAgXCJPSU5UTUVOVFwiOlwiT2ludG1lbnRcIixcclxuICBcIlBBVENIXCI6XCJQYXRjaFwiLFxyXG4gIFwiUEFUQ0hfRVhURU5ERURfUkVMRUFTRVwiOlwiUGF0Y2ggRXh0ZW5kZWQtUmVsZWFzZVwiLFxyXG4gIFwiUE9XREVSXCI6XCJQb3dkZXJcIixcclxuICBcIlBPV0RFUl9GT1JfU09MVVRJT05cIjpcIlBvd2RlciBmb3IgU29sdXRpb25cIixcclxuICBcIlBPV0RFUl9GT1JfU1VTUEVOU0lPTlwiOlwiUG93ZGVyIGZvciBTdXNwZW5zaW9uXCIsXHJcbiAgXCJTSEFNUE9PXCI6XCJTaGFtcG9vXCIsXHJcbiAgXCJTT0xVVElPTlwiOlwiU29sdXRpb25cIixcclxuICBcIlNQUkFZXCI6XCJTcHJheVwiLFxyXG4gIFwiU1BSQVlfQkFHX09OX1ZBTFZFXCI6XCJTcHJheSwgQmFnLU9uLVZhbHZlXCIsXHJcbiAgXCJTUFJBWV9NRVRFUkVEX0RPU0VcIjpcIlNwcmF5LCBNZXRlcmVkIERvc2VcIixcclxuICBcIlNUSUNLXCI6XCJTdGlja1wiLFxyXG4gIFwiU1RSSVBcIjpcIlN0cmlwXCIsXHJcbiAgXCJTVVBQT1NJVE9SWVwiOlwiU3VwcG9zaXRvcnlcIixcclxuICBcIlNVU1BFTlNJT05cIjpcIlN1c3BlbnNpb25cIixcclxuICBcIlNZUlVQXCI6XCJTeXJ1cFwiLFxyXG4gIFwiVEFCTEVUXCI6XCJUYWJsZXRcIixcclxuICBcIlRBQkxFVF9DSEVXQUJMRVwiOlwiVGFibGV0LCBDaGV3YWJsZVwiLFxyXG4gIFwiVEFCTEVUX0RFTEFZRURfUkVMRUFTRVwiOlwiVGFibGV0LCBEZWxheWVkIFJlbGVhc2VcIixcclxuICBcIlRBQkxFVF9FWFRFTkRFRF9SRUxFQVNFXCI6XCJUYWJsZXQsIEV4dGVuZGVkIFJlbGVhc2VcIixcclxuICBcIlRBQkxFVF9PUkFMTFlfRElTSU5URUdSQVRJTkdcIjpcIlRhYmxldCwgT3JhbGx5IERpc2ludGVncmF0aW5nXCIsXHJcbiAgXCJXSVBFXCI6XCJXaXBlXCJcclxufSk7XG5cbiR0cmFuc2xhdGVQcm92aWRlci50cmFuc2xhdGlvbnMoXCJmclwiLCB7XHJcbiAgXCJBRVJPU09MXCI6XCJBw6lyb3NvbFwiLFxyXG4gIFwiQk9MVVNcIjpcIkJvbFwiLFxyXG4gIFwiQ0FQU1VMRVwiOlwiQ2Fwc3VsZVwiLFxyXG4gIFwiQ0FQU1VMRV9ERUxBWUVEX1JFTEVBU0VcIjpcIkNhcHN1bGUgKMOgIGxpYsOpcmF0aW9uIHJldGFyZMOpZSlcIixcclxuICBcIkNBUFNVTEVfRVhURU5ERURfUkVMRUFTRVwiOlwiQ2Fwc3VsZSAow6AgbGliw6lyYXRpb24gcHJvbG9uZ8OpZSlcIixcclxuICBcIkNSRUFNXCI6XCJDcsOobWVcIixcclxuICBcIkVNVUxTSU9OXCI6XCLDiW11bHNpb25cIixcclxuICBcIkdBU1wiOlwiR2F6XCIsXHJcbiAgXCJHRUxcIjpcIkdlbFwiLFxyXG4gIFwiSU1QTEFOVFwiOlwiSW1wbGFudFwiLFxyXG4gIFwiTE9USU9OXCI6XCJMb3Rpb25cIixcclxuICBcIkxPWkVOR0VcIjpcIlBhc3RpbGxlXCIsXHJcbiAgXCJPSU5UTUVOVFwiOlwiUG9tbWFkZVwiLFxyXG4gIFwiUEFUQ0hcIjpcIlRpbWJyZVwiLFxyXG4gIFwiUEFUQ0hfRVhURU5ERURfUkVMRUFTRVwiOlwiVGltYnJlICjDoCBsaWLDqXJhdGlvbiBwcm9sb25nw6llKVwiLFxyXG4gIFwiUE9XREVSXCI6XCJQb3VkcmVcIixcclxuICBcIlBPV0RFUl9GT1JfU09MVVRJT05cIjpcIlBvdWRyZSBwb3VyIHNvbHV0aW9uXCIsXHJcbiAgXCJQT1dERVJfRk9SX1NVU1BFTlNJT05cIjpcIlBvdWRyZSBwb3VyIHN1c3BlbnNpb25cIixcclxuICBcIlNIQU1QT09cIjpcIlNoYW1wb2luZ1wiLFxyXG4gIFwiU09MVVRJT05cIjpcIlNvbHV0aW9uXCIsXHJcbiAgXCJTUFJBWVwiOlwiUHVsdsOpcmlzYXRpb25cIixcclxuICBcIlNQUkFZX0JBR19PTl9WQUxWRVwiOlwiUHVsdsOpcmlzYXRpb24sIHNhYy1zdXItdmFsdmVcIixcclxuICBcIlNQUkFZX01FVEVSRURfRE9TRVwiOlwiUHVsdsOpcmlzYXRpb24sIMOgIGRvc2UgbWVzdXLDqWVcIixcclxuICBcIlNUSUNLXCI6XCJCw6J0b25cIixcclxuICBcIlNUUklQXCI6XCJCYW5kZWxldHRlXCIsXHJcbiAgXCJTVVBQT1NJVE9SWVwiOlwiU3VwcG9zaXRvaXJlXCIsXHJcbiAgXCJTVVNQRU5TSU9OXCI6XCJTdXNwZW5zaW9uXCIsXHJcbiAgXCJTWVJVUFwiOlwiU2lyb3BcIixcclxuICBcIlRBQkxFVFwiOlwiQ29tcHJpbcOpXCIsXHJcbiAgXCJUQUJMRVRfQ0hFV0FCTEVcIjpcIkNvbXByaW3DqSAow6AgY3JvcXVlcilcIixcclxuICBcIlRBQkxFVF9ERUxBWUVEX1JFTEVBU0VcIjpcIkNvbXByaW3DqSAow6AgbGliw6lyYXRpb24gcmV0YXJkw6llKVwiLFxyXG4gIFwiVEFCTEVUX0VYVEVOREVEX1JFTEVBU0VcIjpcIkNvbXByaW3DqSAow6AgbGliw6lyYXRpb24gcHJvbG9uZ8OpZSlcIixcclxuICBcIlRBQkxFVF9PUkFMTFlfRElTSU5URUdSQVRJTkdcIjpcIkNvbXByaW3DqSAow6AgZMOpc2ludMOpZ3JhdGlvbiBvcmFsZSlcIixcclxuICBcIldJUEVcIjpcIlNlcnZpZXR0ZVwiXHJcbn0pO1xuXG4kdHJhbnNsYXRlUHJvdmlkZXIudHJhbnNsYXRpb25zKFwiZW5cIiwge1xyXG4gIFwiTE9BRF9ET1NTSUVSXCI6IFwiTG9hZCBhIERvc3NpZXIgRW5yb2xtZW50IEZpbGVcIixcclxuICBcIkRPU1NJRVJfSERJTkdcIjogXCJSZWd1bGF0b3J5IERvc3NpZXIgRW5yb2xtZW50XCIsXHJcbiAgXCJJTkdSRURfTElTVFwiOiBcIkluZ3JlZGllbnRzIExpc3RcIixcclxuICBcIklOR1JFRF9OQU1FXCI6IFwiSW5ncmVkaWVudCBOYW1lXCIsXHJcbiAgXCJTT1VSQ0VEXCI6IFwiU291cmNlIEZyb21cIixcclxuICBcIkhVTUFOXCI6IFwiSHVtYW5cIixcclxuICBcIkFOSU1BTFwiOiBcIkFuaW1hbFwiLFxyXG4gIFwiVElTU1VFU19PUklHSU5cIjogXCJUaXNzdWVzIG9yIGZsdWlkcyBvZiBPcmlnaW5cIixcclxuICBcIkFERF9QUk9EVUNUXCI6IFwiQWRkIFByb2R1Y3RcIixcclxuICBcIkFNRU5EX1JFRlwiOiBcIkFtZW5kIENhbmFkaWFuIFJlZmVyZW5jZSBQcm9kdWN0XCIsXHJcbiAgXCJCUkFORF9OQU1FXCI6IFwiQnJhbmQgTmFtZVwiLFxyXG4gIFwiTUVESUNJTkFMX0lOR1JFRElFTlRcIjogXCIgTWVkaWNpbmFsIEluZ3JlZGllbnRcIixcclxuICBcIlNUUkVOR1RIXCI6IFwiU3RyZW5ndGgocylcIixcclxuICBcIkRPU0FHRV9GT1JNXCI6IFwiRG9zYWdlIEZvcm1cIixcclxuICBcIkRPU0FHRV9GT1JNX09USEVSXCI6IFwiRG9zYWdlIEZvcm0gT3RoZXIgRGV0YWlsc1wiLFxyXG4gIFwiQ0ROX1JFRl9QUk9EVUNUXCI6IFwiIENhbmFkaWFuIFJlZmVyZW5jZSBQcm9kdWN0XCIsXHJcbiAgXCJDT01QQU5ZX05BTUVcIjogXCJDb21wYW55IE5hbWVcIixcclxuICBcIkNPVU5UUllfTkFNRVwiOiBcIkNvdW50cnkgTmFtZVwiLFxyXG4gIFwiU0FWRVwiOiBcIlNhdmVcIixcclxuICBcIkNBTkNFTFwiOiBcIkNhbmNlbFwiLFxyXG4gIFwiREVMRVRFXCI6IFwiRGVsZXRlXCIsXHJcbiAgXCJTQ0hFRF9BXCI6IFwiU2NoZWR1bGUgQSBDbGFpbXNcIixcclxuICBcIkRJTl9GVUxMXCI6IFwiRHJ1ZyBJZGVudGlmaWNhdGlvbiBOdW1iZXIgKERJTilcIixcclxuICBcIlRIRVJBX0NMQVNTXCI6IFwiVGhlcmFwZXV0aWMgQ2xhc3NpZmljYXRpb25zXCIsXHJcbiAgXCJUSEVSQV9DTEFTU19BRERcIjogXCJBZGQgVGhlcmFwZXV0aWMgQ2xhc3NpZmljYXRpb25cIixcclxuICBcIlRIRVJBX0NMQVNTX05BTUVcIjogXCJUaGVyYXBldXRpYyBDbGFzc2lmaWNhdGlvbiBOYW1lXCIsXHJcbiAgXCJQUk9QTkFNRVwiOiBcIkJyYW5kIG9yIFByb3ByaWV0YXJ5IG9yIFByb2R1Y3QgTmFtZSAoc2hvdWxkIGJlIHRoZSBzYW1lIGFzIHRoZSBicmFuZCBuYW1lIG9uIHRoZSBwcm9kdWN0IGxhYmVsKVwiLFxyXG4gIFwiRFJVR19QUk9EVUNUXCI6IFwiRHJ1ZyBQcm9kdWN0IEZvcm11bGF0aW9uIEluZm9ybWF0aW9uXCIsXHJcbiAgXCJTSUdORURfVEhJUkRcIjogXCJUaGUgc3VibWlzc2lvbiB3aWxsIGJlIHNpZ25lZCBvciBmaWxsZWQgYnkgYSB0aGlyZCBwYXJ0eSBvbiBiZWhhbGYgb2YgdGhlIG1hbnVmYWN0dXJlciBvciBzcG9uc29yXCIsXHJcbiAgXCJJTkNMVURFX0FVVEhcIjogXCJQbGVhc2UgaW5jbHVkZSB0aGUgVGhpcmQgUGFydHkgQXV0aG9yaXphdGlvbiBsZXR0ZXIgaW4gdGhlIFJFUCBmb2xkZXIgd2hlbiBzdWJtaXR0aW5nIHZpYSB0aGUgIENvbW1vbiBFbGVjdG9uaWMgU3VibWlzc2lvbnMgR2F0ZXdheSAoQ0VTRylcIixcclxuICBcIlJFTEFURURfRE9TU0lFUlwiOiBcIlJlbGF0ZWQgRG9zc2llciBJRCBbaWYgYXBwbGljYWJsZV1cIixcclxuICBcIlBST1BFUl9OQU1FXCI6IFwiUHJvcGVyLCBDb21tb24gb3IgTm9uLVByb3ByaWV0YXJ5IE5hbWVcIixcclxuICBcIkRSVUdfVVNFXCI6IFwiRHJ1ZyBVc2VcIixcclxuICBcIkRFTEVURV9DTEFTU1wiOiBcIkRlbGV0ZSBDbGFzc2lmaWNhdGlvblwiLFxyXG4gIFwiU09VUkNFRF9BTklNQUxcIjogXCJQcm92aWRlIHRoZSBhbmltYWwgdHlwZXMgdXNlZCBmb3IgdGhpcyBpbmdyZWRpZW50XCIsXHJcbiAgXCJTUEVDSUZZXCI6IFwiUGxlYXNlIHNwZWNpZnlcIixcclxuICBcIkRFVEFJTFNcIjogXCJEZXRhaWxzXCIsXHJcbiAgXCJSRUZfUFJPRFVDVFNcIjogXCJDYW5hZGlhbiBSZWZlcmVuY2UgUHJvZHVjdChzKVwiLFxyXG4gIFwiUkFESU9QSEFSTVwiOlwiUmFkaW9waGFybWFjZXV0aWNhbFwiLFxyXG4gIFwiVkVURVJJTkFSWVwiOlwiVmV0ZXJpbmFyeVwiLFxyXG4gIFwiRElTSU5GRUNUQU5UXCI6XCJEaXNpbmZlY3RhbnRcIixcclxuICBcIkFERF9BXCI6XCJBZGQgYSBcIixcclxuICBcIkNPVU5UUllfTUFOXCI6IFwiQ291bnRyeSBvZiBNYW51ZmFjdHVyZVwiLFxyXG4gIFwiREVMRVRFX0NPVU5UUllcIjpcIkRlbGV0ZSBDb3VudHJ5XCIsXHJcbiAgXCJBRERfQ1JQXCI6IFwiQWRkIENhbmFkaWFuIFJlZmVyZW5jZSBQcm9kdWN0XCIsXHJcbiAgXCJJU19DRE5fUkVGXCI6IFwiQXJlIHRoZXJlIENhbmFkaWFuIFJlZmVyZW5jZSBQcm9kdWN0cz9cIixcclxuICBcIkRPU1NJRVJfVFlQRVwiOiBcIkRvc3NpZXIgVHlwZVwiLFxyXG4gIFwiSU5HUkVEX01BVF9OQU1FXCI6IFwiSW5ncmVkaWVudCBvciBNYXRlcmlhbCBOYW1lXCIsXHJcbiAgXCJIRUxQX0RPU1NJRVJcIjogXCJEb3NzaWVyIEluc3RydWN0aW9uc1wiLFxyXG4gIFwiSEVMUF9EUlVHX1BST0RVQ1RcIjogXCJEcnVnIFByb2R1Y3QgSW5zdHJ1Y3Rpb25zXCJcclxufSk7XG5cbiR0cmFuc2xhdGVQcm92aWRlci50cmFuc2xhdGlvbnMoXCJmclwiLCB7XHJcbiAgXCJMT0FEX0RPU1NJRVJcIjogXCJmcl9Mb2FkIGEgRG9zc2llciBFbnJvbG1lbnQgRmlsZVwiLFxyXG4gIFwiRE9TU0lFUl9IRElOR1wiOiBcImZyX1JlZ3VsYXRvcnkgRG9zc2llciBFbnJvbG1lbnRcIixcclxuICBcIklOR1JFRF9MSVNUXCI6IFwiSW5ncmVkaWVudHMgTGlzdFwiLFxyXG4gIFwiSU5HUkVEX05BTUVcIjogXCJJbmdyZWRpZW50IE5hbWVcIixcclxuICBcIlNPVVJDRURcIjogXCJTb3VyY2UgRnJvbVwiLFxyXG4gIFwiSFVNQU5cIjogXCJIdW1hblwiLFxyXG4gIFwiQU5JTUFMXCI6IFwiQW5pbWFsXCIsXHJcbiAgXCJUSVNTVUVTX09SSUdJTlwiOiBcIlRpc3N1ZXMgb3IgZmx1aWRzIG9mIE9yaWdpblwiLFxyXG4gIFwiQUREX1BST0RVQ1RcIjogXCJmcl9BZGQgUHJvZHVjdFwiLFxyXG4gIFwiQU1FTkRfUkVGXCI6IFwiZnJfQW1lbmQgQ2FuYWRpYW4gUmVmZXJlbmNlIFByb2R1Y3RcIixcclxuICBcIkJSQU5EX05BTUVcIjogXCJNYXJxdWUgbm9taW5hdGl2ZVwiLFxyXG4gIFwiTUVESUNJTkFMX0lOR1JFRElFTlRcIjogXCJJbmdyw6lkaWVudCBNw6lkaWNpbmF1eFwiLFxyXG4gIFwiU1RSRU5HVEhcIjogXCJDb25jZW50cmF0aW9uXCIsXHJcbiAgXCJET1NBR0VfRk9STVwiOiBcIkZvcm1lIHBvc29sb2dpcXVlXCIsXHJcbiAgXCJET1NBR0VfRk9STV9PVEhFUlwiOiBcIkRvc2FnZSBGb3JtIE90aGVyIERldGFpbHNcIixcclxuICBcIkNETl9SRUZfUFJPRFVDVFwiOiBcIiBDYW5hZGlhbiBSZWZlcmVuY2UgUHJvZHVjdFwiLFxyXG4gIFwiQ09NUEFOWV9OQU1FXCI6IFwiTm9tIGR1IGZhYnJpY2FudCBvdSBwcm9tb3RldXJcIixcclxuICBcIkNPVU5UUllfTkFNRVwiOiBcImZyX0NvdW50cnkgTmFtZVwiLFxyXG4gIFwiU0FWRVwiOiBcImZyX1NhdmVcIixcclxuICBcIkNBTkNFTFwiOiBcImZyX0NhbmNlbFwiLFxyXG4gIFwiREVMRVRFXCI6IFwiZnJfRGVsZXRlXCIsXHJcbiAgXCJTQ0hFRF9BXCI6XCJmcl9TY2hlZHVsZSBBIENsYWltc1wiLFxyXG4gIFwiRElOX0ZVTExcIjpcImZyX0RydWcgSWRlbnRpZmljYXRpb24gTnVtYmVyIChESU4pXCIsXHJcbiAgXCJUSEVSQV9DTEFTU1wiOiBcImZyX1RoZXJhcGV1dGljIENsYXNzaWZpY2F0aW9uKHMpXCIsXHJcbiAgXCJUSEVSQV9DTEFTU19BRERcIjpcImZyX0FkZCBUaGVyYXBldXRpYyBDbGFzc2lmaWNhdGlvblwiLFxyXG4gIFwiVEhFUkFfQ0xBU1NfTkFNRVwiOiBcImZyX1RoZXJhcGV1dGljIENsYXNzaWZpY2F0aW9uIE5hbWVcIixcclxuICBcIlBST1BOQU1FXCI6IFwiZnJfQnJhbmQgb3IgUHJvcHJpZXRhcnkgb3IgUHJvZHVjdCBOYW1lIChzaG91bGQgYmUgdGhlIHNhbWUgYXMgdGhlIGJyYW5kIG5hbWUgb24gdGhlIHByb2R1Y3QgbGFiZWwpXCIsXHJcbiAgXCJEUlVHX1BST0RVQ1RcIjogXCJmcl9EcnVnIFByb2R1Y3QgRm9ybXVsYXRpb24gSW5mb3JtYXRpb25cIixcclxuICBcIlNJR05FRF9USElSRFwiOiBcImZyX1RoZSBzdWJtaXNzaW9uIHdpbGwgYmUgc2lnbmVkIG9yIGZpbGxlZCBieSBhIHRoaXJkIHBhcnR5IG9uIGJlaGFsZiBvZiB0aGUgbWFudWZhY3R1cmVyIG9yIHNwb25zb3JcIixcclxuICBcIklOQ0xVREVfQVVUSFwiOiBcImZyX1BsZWFzZSBpbmNsdWRlIHRoZSBUaGlyZCBQYXJ0eSBBdXRob3JpemF0aW9uIGxldHRlciBpbiB0aGUgUkVQIGZvbGRlciB3aGVuIHN1Ym1pdHRpbmcgdmlhIHRoZSAgQ29tbW9uIEVsZWN0b25pYyBTdWJtaXNzaW9ucyBHYXRld2F5IChDRVNHKVwiLFxyXG4gIFwiUkVMQVRFRF9ET1NTSUVSXCI6IFwiZnJfUmVsYXRlZCBEb3NzaWVyIElEIFtpZiBhcHBsaWNhYmxlXVwiLFxyXG4gIFwiUFJPUEVSX05BTUVcIjogXCJmcl9Qcm9wZXIsIENvbW1vbiBvciBOb24tUHJvcHJpZXRhcnkgTmFtZVwiLFxyXG4gIFwiRFJVR19VU0VcIjogXCJmcl9EcnVnIFVzZVwiLFxyXG4gIFwiU0NIRURfQVwiOiBcImZyX1RoaXMgaXMgYSBub24tcHJlc2NyaXB0aW9uIGRydWcgdG8gd2hpY2ggb25lIG9yIG1vcmUgU2NoZWR1bGUgQSBjbGFpbXMgYXBwbHlcIixcclxuICBcIlNPVVJDRURfQU5JTUFMXCI6IFwiZnJfUHJvdmlkZSB0aGUgYW5pbWFsIHR5cGVzIHVzZWQgZm9yIHRoaXMgaW5ncmVkaWVudFwiLFxyXG4gIFwiU1BFQ0lGWVwiOiBcImZyX1BsZWFzZSBzcGVjaWZ5IHRoZSBPdGhlclwiLFxyXG4gIFwiREVUQUlMU1wiOiBcImZyX0RldGFpbHNcIixcclxuICBcIlJFRl9QUk9EVUNUU1wiOiBcImZyX0NhbmFkaWFuIFJlZmVyZW5jZSBQcm9kdWN0KHMpXCIsXHJcbiAgXCJERUxFVEVfQ0xBU1NcIjogXCJmcl9EZWxldGUgQ2xhc3NpZmljYXRpb25cIixcclxuICBcIkFERF9BXCI6XCJmcl9BZGQgYSBcIixcclxuICBcIkNPVU5UUllfTUFOXCI6IFwiZnJfQ291bnRyeSBvZiBNYW51ZmFjdHVyZVwiLFxyXG4gIFwiREVMRVRFX0NPVU5UUllcIjpcImZyX0RlbGV0ZSBDb3VudHJ5XCIsXHJcbiAgXCJBRERfQ1JQXCI6IFwiZnJfQWRkIENhbmFkaWFuIFJlZmVyZW5jZSBQcm9kdWN0XCIsXHJcbiAgXCJJU19DRE5fUkVGXCI6IFwiZnJfQXJlIHRoZXJlIENhbmFkaWFuIFJlZmVyZW5jZSBQcm9kdWN0cz9cIixcclxuICBcIkRPU1NJRVJfVFlQRVwiOiBcImZyX0Rvc3NpZXIgVHlwZVwiLFxyXG4gIFwiSU5HUkVEX01BVF9OQU1FXCI6IFwiZnJfSW5ncmVkaWVudCBvciBNYXRlcmlhbCBOYW1lXCIsXHJcbiAgXCJIRUxQX0RPU1NJRVJcIjogXCJmcl9Eb3NzaWVyIEluc3RydWN0aW9uc1wiLFxyXG4gIFwiSEVMUF9EUlVHX1BST0RVQ1RcIjogXCJmcl9EcnVnIFByb2R1Y3QgSW5zdHJ1Y3Rpb25zXCJcclxufSk7XG5cbiR0cmFuc2xhdGVQcm92aWRlci50cmFuc2xhdGlvbnMoXCJlblwiLCB7XHJcbiAgXCJZXCI6IFwiWWVzXCIsXHJcbiAgXCJOXCI6IFwiTm9cIixcclxuICBcIlVOS1wiOlwiVW5rbm93blwiLFxyXG4gIFwiUkVRVUlSRURcIjpcIihyZXF1aXJlZClcIixcclxuICBcIkRPU1NJRVJfTlVNQkVSXCI6IFwiRG9zc2llciBJRFwiLFxyXG4gIFwiU0FWRVwiOiBcIlNhdmVcIixcclxuICBcIkNBTkNFTFwiOiBcIkNhbmNlbFwiLFxyXG4gIFwiREVMRVRFXCI6IFwiRGVsZXRlXCIsXHJcbiAgXCJFRElUXCI6IFwiRWRpdFwiLFxyXG4gIFwiQ0FOX1JFRl9QUk9EVUNUU1wiOiBcIkNhbmFkaWFuIFJlZmVyZW5jZSBQcm9kdWN0c1wiLFxyXG4gIFwiUFJPRF9OQU1FXCI6XCJQcm9kdWN0IE5hbWVcIlxyXG59KTtcblxuJHRyYW5zbGF0ZVByb3ZpZGVyLnRyYW5zbGF0aW9ucyhcImZyXCIsIHtcclxuICBcIllcIjogXCJPdWlcIixcclxuICBcIk5cIjogXCJOb25cIixcclxuICBcIlVOS1wiOiBcIkluY29ubnVcIixcclxuICBcIlJFUVVJUkVEXCI6IFwiKHJlcXVpcylcIixcclxuICBcIkRPU1NJRVJfSURcIjogXCJmcl9Eb3NzaWVyIElEXCIsXHJcbiAgXCJTQVZFXCI6IFwiZnJfU2F2ZVwiLFxyXG4gIFwiQ0FOQ0VMXCI6IFwiZnJfQ2FuY2VsXCIsXHJcbiAgXCJERUxFVEVcIjogXCJmcl9EZWxldGVcIixcclxuICBcIkVESVRcIjogXCJmcl9FZGl0XCIsXHJcbiAgXCJDQU5fUkVGX1BST0RVQ1RTXCI6IFwiZnJfQ2FuYWRpYW4gUmVmZXJlbmNlIFByb2R1Y3RzXCIsXHJcbiAgXCJQUk9EX05BTUVcIjpcImZyX1Byb2R1Y3QgTmFtZVwiXHJcbn1cclxuKTtcblxuJHRyYW5zbGF0ZVByb3ZpZGVyLnRyYW5zbGF0aW9ucyhcImVuXCIsIHtcclxuICBcIk1TR19BUFA0X1RZUEVcIjogXCJBdCBsZWFzdCBvbmUgc291cmNlIG11c3QgYmUgc2VsZWN0ZWRcIixcclxuICBcIk1TR19FUlJfT05FX1NZU1RFTVwiOiBcIkF0IGxlYXN0IG9uZSB0aXNzdWUgb3IgZmx1aWQgb2Ygb3JpZ2luIG11c3QgYmUgc2VsZWN0ZWRcIixcclxuICBcIk1TR19FUlJfT05FX0FOSU1BTFwiOiBcIkF0IGxlYXN0IG9uZSBhbmltYWwgc291cmNlIG11c3QgYmUgc2VsZWN0ZWRcIixcclxuICBcIk1TR19FUlJfT05FX0FOSU1BTF9UWVBFXCI6IFwiQXQgbGVhc3Qgb25lIGFuaW1hbCB0eXBlIG11c3QgYmUgc2VsZWN0ZWRcIixcclxuICBcIk1TR19FUlJfRFJVR19VU0VcIjogXCJBdCBsZWFzdCBvbmUgZHJ1ZyB1c2UgbXVzdCBiZSBzZWxlY3RlZFwiLFxyXG4gIFwiTVNHX09ORV9TQ0hFREFcIjogXCJBdCBsZWFzdCBvbmUgZGlzZWFzZSBvciBkaXNvcmRlciBtdXN0IGJlIHNlbGVjdGVkXCIsXHJcbiAgXCJNU0dfSVNfUkVRVUlSRURcIjogXCJpcyBhIHJlcXVpcmVkIGZpZWxkLlwiLFxyXG4gIFwiTVNHX0VSUl9JTlZBTElEX05VTVwiOiBcIlRoaXMgaXMgbm90IGEgdmFsaWQgbnVtYmVyLlwiLFxyXG4gIFwiTVNHX0VSUl9PTkVfQUNUSVZFXCI6IFwiQXQgbGVhc3Qgb25lIGFjdGl2ZSBpbmdyZWRpZW50IGlzIHJlcXVpcmVkLlwiLFxyXG4gIFwiTVNHX0VSUl9PTkVfRk9STVVMQVRJT05cIjogXCJBdCBsZWFzdCBvbmUgZm9ybXVsYXRpb24gaXMgcmVxdWlyZWQuXCIsXHJcbiAgXCJNU0dfRVJSX09ORV9NQU5DT1VOVFJZXCI6IFwiQXQgbGVhc3Qgb25lIGNvdW50cnkgb2YgbWFudWZhY3R1cmUgaXMgcmVxdWlyZWRcIixcclxuICBcIk1TR19FUlJfT05FX1JPQVwiOiBcIkF0IGxlYXN0IG9uZSByb3V0ZSBvZiBhZG1pbmlzdGF0aW9uIGlzIHJlcXVpcmVkXCIsXHJcbiAgXCJNU0dfRVJSX09ORV9USEVSQVwiOiBcIkF0IGxlYXN0IG9uZSB0aGVyYXBldXRpYyBjbGFzc2lmaWNhdGlvbiBpcyByZXF1aXJlZFwiLFxyXG4gIFwiTVNHX0VSUl9PTkVfQ09VTlRSWVwiOiBcIkF0IGxlYXN0IG9uZSBjb3VudHJ5IG9mIG9yaWdpbiBpcyByZXF1aXJlZFwiLFxyXG4gIFwiTVNHX0VSUl9PTkVfUk9BXCI6IFwiQXQgbGVhc3Qgb25lIFJvdXRlIG9mIEFkbWluaXN0cmF0aW9uIGlzIHJlcXVpcmVkXCIsXHJcbiAgXCJNU0dfRVJSX09ORV9USVNTVUVcIjogXCJBdCBsZWFzZSBvbmUgVGlzc3VlcyBvZiBGbHVpZHMgc291cmNlIGlzIHJlcXVpcmVkXCIsXHJcbiAgXCJNU0dfRVJSX09ORV9DTlRSWV9PUklHSU5cIjogXCJBdCBsZWFzdCBvbmUgQ291bnRyeSBvZiBvcmlnaW4gaXMgcmVxdWlyZWRcIixcclxuICBcIk1TR19FUlJfT05FX0NETl9SRUZcIjogXCJBdCBsZWFzdCBvbmUgQ2FuYWRpYW4gUmVmZXJlbmNlIHByb2R1Y3QgaXMgcmVxdWlyZWRcIixcclxuICBcIk1TR19FUlJfSU5WQUxJRF9OVU1fTUlOXCI6IFwiVGhlIHZhbHVlIG11c3QgYmUgZ3JlYXRlciB0aGFuIC0yNzNcIixcclxuICBcIk1TR19FUlJfSU5WQUxJRF9OVU1fTUFYXCI6IFwiVGhlIHZhbHVlIG11c3QgYmUgbGVzcyB0aGFuIDk5OVwiLFxyXG4gIFwiTVNHX0VSUl9JTlZBTElEX05VTV9NSU4wXCI6IFwiVGhlIHZhbHVlIG11c3QgYmUgZ3JlYXRlciB0aGFuIDBcIixcclxuICBcIk1TR19USVNTVUVfU1lTX1VTRURcIjogXCJUaGlzIHN5c3RlbSBoYXMgYmVlbiBhbHJlYWR5IGJlZW4gc2VsZWN0ZWQsIHBsZWFzZSBzZWxlY3QgYW5vdGhlci5cIlxyXG59KTtcblxuJHRyYW5zbGF0ZVByb3ZpZGVyLnRyYW5zbGF0aW9ucyhcImZyXCIsIHtcclxuICBcIk1TR19BUFA0X1RZUEVcIjogXCJmcl9BdCBsZWFzdCBvbmUgc291cmNlIG11c3QgYmUgc2VsZWN0ZWRcIixcclxuICBcIk1TR19FUlJfT05FX1NZU1RFTVwiOiBcImZyX0F0IGxlYXN0IG9uIHRpc3N1ZSBvciBmbHVpZCBvZiBvcmlnaW4gbXVzdCBiZSBzZWxlY3RlZFwiLFxyXG4gIFwiTVNHX0VSUl9PTkVfQU5JTUFMXCI6IFwiZnJfQXQgbGVhc3Qgb25lIGFuaW1hbCBzb3VyY2UgbXVzdCBiZSBzZWxlY3RlZFwiLFxyXG4gIFwiTVNHX0VSUl9PTkVfQU5JTUFMX1RZUEVcIjogXCJmcl9BdCBsZWFzdCBvbmUgYW5pbWFsIHR5cGUgbXVzdCBiZSBzZWxlY3RlZC5cIixcclxuICBcIk1TR19FUlJfRFJVR19VU0VcIjogXCJmcl9BdCBsZWFzdCBvbmUgZHJ1ZyB1c2UgbXVzdCBiZSBzZWxlY3RlZC5cIixcclxuICBcIk1TR19PTkVfU0NIRURBXCI6IFwiZnJfQXQgbGVhc3Qgb25lIGRpc2Vhc2Ugb3IgZGlzb3JkZXIgbXVzdCBiZSBzZWxlY3RlZC5cIixcclxuICBcIk1TR19JU19SRVFVSVJFRFwiOiBcImZyX2lzIGEgcmVxdWlyZWQgZmllbGQuXCIsXHJcbiAgXCJNU0dfRVJSX0lOVkFMSURfTlVNXCI6IFwiVmV1aWxsZXogZm91cm5pciB1biBudW3DqXJvIHZhbGlkZS5cIixcclxuICBcIk1TR19FUlJfT05FX0FDVElWRVwiOiBcImZyX0F0IGxlYXN0IG9uZSBhY3RpdmUgaW5ncmVkaWVudCBpcyByZXF1aXJlZC5cIixcclxuICBcIk1TR19FUlJfT05FX0ZPUk1VTEFUSU9OXCI6XCJmcl9BdCBsZWFzdCBvbmUgZm9ybXVsYXRpb24gaXMgcmVxdWlyZWQuXCIsXHJcbiAgXCJNU0dfRVJSX09ORV9NQU5DT1VOVFJZXCI6IFwiZnJfQXQgbGVhc3Qgb25lIGNvdW50cnkgb2YgbWFudWZhY3R1cmUgaXMgcmVxdWlyZWRcIixcclxuICBcIk1TR19FUlJfT05FX1JPQVwiOiBcImZyX0F0IGxlYXN0IG9uZSByb3V0ZSBvZiBhZG1pbmlzdGF0aW9uIGlzIHJlcXVpcmVkXCIsXHJcbiAgXCJNU0dfRVJSX09ORV9USEVSQVwiOiBcImZyX0F0IGxlYXN0IG9uZSB0aGVyYXBldXRpYyBjbGFzc2lmaWNhdGlvbiBpcyByZXF1aXJlZFwiLFxyXG4gIFwiTVNHX0VSUl9PTkVfQ09VTlRSWVwiOiBcImZyX0F0IGxlYXN0IG9uZSBjb3VudHJ5IG9mIG9yaWdpbiBpcyByZXF1aXJlZFwiLFxyXG4gIFwiTVNHX0VSUl9PTkVfUk9BXCI6IFwiZnJfQXQgbGVhc3Qgb25lIFJvdXRlIG9mIEFkbWluaXN0cmF0aW9uIGlzIHJlcXVpcmVkXCIsXHJcbiAgXCJNU0dfRVJSX09ORV9USVNTVUVcIjogXCJmcl9BdCBsZWFzZSBvbmUgVGlzc3VlcyBvZiBGbHVpZHMgc291cmNlIGlzIHJlcXVpcmVkXCIsXHJcbiAgXCJNU0dfRVJSX09ORV9DTlRSWV9PUklHSU5cIjogXCJmcl9BdCBsZWFzdCBvbmUgQ291bnRyeSBvZiBvcmlnaW4gaXMgcmVxdWlyZWRcIixcclxuICBcIk1TR19FUlJfT05FX0NETl9SRUZcIjogXCJmcl9BdCBsZWFzdCBvbmUgQ2FuYWRpYW4gUmVmZXJlbmNlIHByb2R1Y3QgaXMgcmVxdWlyZWRcIixcclxuICBcIk1TR19FUlJfSU5WQUxJRF9OVU1fTUlOXCI6IFwiZnJfVGhlIHZhbHVlIG11c3QgYmUgZ3JlYXRlciB0aGFuIC0yNzNcIixcclxuICBcIk1TR19FUlJfSU5WQUxJRF9OVU1fTUFYXCI6IFwiZnJfVGhlIHZhbHVlIG11c3QgYmUgbGVzcyB0aGFuIDk5OVwiLFxyXG4gIFwiTVNHX0VSUl9JTlZBTElEX05VTV9NSU4wXCI6IFwiZnJfVGhlIHZhbHVlIG11c3QgYmUgZ3JlYXRlciB0aGFuIDBcIixcclxuICBcIk1TR19USVNTVUVfU1lTX1VTRURcIjogXCJmcl9UaGlzIHN5c3RlbSBoYXMgYmVlbiBhbHJlYWR5IGJlZW4gc2VsZWN0ZWQsIHBsZWFzZSBzZWxlY3QgYW5vdGhlci5cIlxyXG59KTtcblxuJHRyYW5zbGF0ZVByb3ZpZGVyLnRyYW5zbGF0aW9ucyhcImVuXCIsIHtcclxuICBcIk5FUlZPVVNfU1lTVEVNXCI6IFwiTmVydm91cyBTeXN0ZW1cIixcclxuICBcIkJSQUlOXCI6IFwiYnJhaW5cIixcclxuICBcIkJSQUlOU1RFTVwiOiBcImJyYWluIHN0ZW1cIixcclxuICBcIkNFUkVCRUxMVU1cIjogXCJjZXJlYmVsbHVtXCIsXHJcbiAgXCJDRVJPRkxVSURcIjogXCJjZXJlYnJvc3BpbmFsIGZsdWlkXCIsXHJcbiAgXCJDRVJPRkxVSURcIjogXCJjZXJlYnJvc3BpbmFsIGZsdWlkXCIsXHJcbiAgXCJET1JTQUxST09UXCI6IFwiZG9yc2FsIHJvb3QgZ2FuZ2xpYVwiLFxyXG4gIFwiRFVSQU1BVEVSXCI6IFwiZHVyYSBtYXRlclwiLFxyXG4gIFwiSFlQT1RIQUxBTVVTXCI6IFwiaHlwb3RoYWxhbXVzXCIsXHJcbiAgXCJSRVRJTkFcIjogXCJyZXRpbmEgb3Igb3B0aWMgbmVydmVcIixcclxuICBcIlNQSU5BTENPUkRcIjogXCJzcGluYWwgY29yZFwiLFxyXG4gIFwiVFJJR0VNSU5BTFwiOiBcInRyaWdlcm1pbmFsIGdhbmdsaWFcIixcclxuICBcIk5FUlZPVVNfT1RIRVJcIjogXCJvdGhlciBuZXJ2b3VzIHN5c3RlbVwiLFxyXG4gIFwiRElHRVNUSVZFX1NZU1RFTVwiOiBcIkRpZ2VzdGl2ZVwiLFxyXG4gIFwiQVBQRU5ESVhcIjogXCJhcHBlbmRpeFwiLFxyXG4gIFwiQklMRVwiOiBcImJpbGVcIixcclxuICBcIkRJU1RBTElMRVVNXCI6IFwiZGlzdGFsIGlsZXVtXCIsXHJcbiAgXCJMQVJHRUlOVEVTVFwiOiBcImxhcmdlIGludGVzdGluZVwiLFxyXG4gIFwiU0FMSVZBXCI6IFwic2FsaXZhIG9yIHNhbGl2YXJ5IGdsYW5kXCIsXHJcbiAgXCJTTUFMTElOVEVTVElORVwiOiBcInNtYWxsIGludGVzdGluZSBvdGhlciB0aGFuIGRpc3RhbCBpbGV1bVwiLFxyXG4gIFwiU1RPTUFDSFwiOiBcInN0b21hY2hcIixcclxuICBcIkRJR0VTVElWRV9PVEhFUlwiOiBcIm90aGVyIGRpZ2VzdGl2ZSBzeXN0ZW1cIixcclxuICBcIlJFUFJPRFVDVF9TWVNURU1cIjogXCJSZXByb2R1Y3RpdmVcIixcclxuICBcIk1JTEtcIjogXCJtaWxrIG9yIG1pbGsgcHJvZHVjdHNcIixcclxuICBcIktJRE5FWVwiOiBcImtpZG5leVwiLFxyXG4gIFwiQ09MT1NUUlVNXCI6IFwiY29sb3N0cnVtXCIsXHJcbiAgXCJNQU1NQVJZXCI6IFwibWFtbWFyeSBnbGFuZHNcIixcclxuICBcIk9WQVJJRVNcIjogXCJvdmFyaWVzXCIsXHJcbiAgXCJQTEFDRU5UQVwiOiBcInBsYWNlbnRhXCIsXHJcbiAgXCJQTEFDRU5UQUZMVUlEXCI6IFwicGxhY2VudGFsIGZsdWlkXCIsXHJcbiAgXCJTRU1FTlwiOiBcInNlbWVuXCIsXHJcbiAgXCJURVNURVNcIjogXCJ0ZXN0ZXNcIixcclxuICBcIlVSSU5FXCI6IFwidXJpbmVcIixcclxuICBcIlJFUFJPRF9PVEhFUlwiOiBcIm90aGVyIHJlcHJvZHVjdGl2ZSBzeXN0ZW1cIixcclxuICBcIkNBUkRJT19TWVNURU1cIjogXCJDYXJkaW8tUmVzcGlyYXRvcnlcIixcclxuICBcIkhFQVJUXCI6IFwiSGVhcnQgb3IgcGVyaWNhcmRpdW1cIixcclxuICBcIkxVTkdcIjogXCJsdW5nXCIsXHJcbiAgXCJOQVNBTEZMVUlEXCI6IFwibmFzYWwgZmx1aWRcIixcclxuICBcIlRSQUNIRUFcIjogXCJ0cmFjaGVhXCIsXHJcbiAgXCJQTEFDRU5UQUxGTFVJRFwiOiBcInBsYWNlbnRhbCBmbHVpZFwiLFxyXG4gIFwiQ0FSRElPX09USEVSXCI6IFwib3RoZXIgY2FyZGlvLXJlc3BpcmF0b3J5IHN5c3RlbVwiLFxyXG4gIFwiSU1NVU5FX1NZU1RFTVwiOiBcIkltbXVuZVwiLFxyXG4gIFwiTFlNUEhcIjogXCJseW1waCBub2Rlc1wiLFxyXG4gIFwiU1BMRUVOXCI6IFwic3BsZWVuXCIsXHJcbiAgXCJUSFlNVVNcIjogXCJ0aHltdXNcIixcclxuICBcIlRPTlNJTFNcIjogXCJ0b25zaWxzXCIsXHJcbiAgXCJJTU1VTkVfT1RIRVJcIjogXCJvdGhlciBpbW11bmUgc3lzdGVtXCIsXHJcbiAgXCJTS0lOR0xBTkRfU1lTVEVNXCI6IFwiU2tpbiBhbmQgR2xhbmR1bGFyXCIsXHJcbiAgXCJBRFJFTkFMXCI6IFwiYWRyZW5hbCBnbGFuZCBvciB0aXNzdWVcIixcclxuICBcIkhBSVJcIjogXCJoYWlyLCBmZWF0aGVycywgaG9vdmVzXCIsXHJcbiAgXCJMSVZFUlwiOiBcImxpdmVyXCIsXHJcbiAgXCJQQU5DUkVBU1wiOiBcInBhbmNyZWFzXCIsXHJcbiAgXCJQSVRVQVJZR0xBTkRcIjogXCJwaXR1aXRhcnkgZ2xhbmRcIixcclxuICBcIlNLSU5ISURFU1wiOiBcInNraW4gb3IgaGlkZXNcIixcclxuICBcIlRIWVJPSURcIjogXCJ0aHlyb2lkIG9yIHBhcmF0aHlyb2lkXCIsXHJcbiAgXCJTS0lOX09USEVSXCI6IFwib3RoZXIgc2tpbiBvciBnbGFuZHVsYXIgc3lzdGVtXCIsXHJcbiAgXCJNVVNDVUxPX1NZU1RFTVwiOiBcIk11c2N1bG8tU2tlbGV0YWxcIixcclxuICBcIkFCRE9NRU5cIjogXCJhYmRvbWVuXCIsXHJcbiAgXCJTS1VMTFwiOiBcInNrdWxsXCIsXHJcbiAgXCJCT05FU1wiOiBcImJvbmVzIG90aGVyIHRoYW4gdmVydGVicmFsIGNvbHVtbiBvciBza3VsbFwiLFxyXG4gIFwiQ09MTEFHRU5cIjogXCJjb2xsYWdlblwiLFxyXG4gIFwiVEVORE9OU1wiOiBcInRlbmRvbnMgb3IgbGlnYW1lbnRzXCIsXHJcbiAgXCJWRVJURUJSQUxDT0xVTU5cIjogXCJ2ZXJ0ZWJyYWwgY29sdW1uXCIsXHJcbiAgXCJNVVNDTEVcIjogXCJtdXNjbGVcIixcclxuICBcIk1VU0NMRV9PVEhFUlwiOiBcIm90aGVyIG11c2N1bG8tc2tlbGV0YWwgc3lzdGVtXCIsXHJcbiAgXCJPVEhFUlRJU1NVRV9TWVNURU1cIjogXCJPdGhlciBUaXNzdWVzIG9yIEZsdWlkc1wiLFxyXG4gIFwiQURJUE9TRVwiOiBcImFkaXBvc2Ugb3Igb21lbnR1bVwiLFxyXG4gIFwiQVNDSVRFU1wiOiBcImFjc2NpdGVzXCIsXHJcbiAgXCJBTlRMRVJWXCI6IFwiYW50bGVyIHZlbHZldFwiLFxyXG4gIFwiU0VSVU1cIjogXCJzZXJ1bVwiLFxyXG4gIFwiV0hPTEVCTE9PRFwiOiBcIndob2xlIGJsb29kXCIsXHJcbiAgXCJQTEFTTUFcIjogXCJwbGFzbWFcIixcclxuICBcIkVNQlJZT05JQ1RJU1NcIjogXCJlbWJyeW9uaWMgdGlzc3VlXCIsXHJcbiAgXCJGRVRBTFRJU1NcIjogXCJmZXRhbCB0aXNzdWVcIixcclxuICBcIkJPTkVNQVJST1dcIjogXCJib25lIG1hcnJvd1wiLFxyXG4gIFwiRVlFU0NPUk5FQVwiOiBcImV5ZXMgb3IgY29ybmVhXCIsXHJcbiAgXCJHQUxMXCI6IFwiZ2FsbCBibGFkZGVyXCIsXHJcbiAgXCJGTFVJRFNfT1RIRVJcIjogXCJvdGhlciB0eXBlcyBvZiB0aXNzdWVzIG9yIGZsdWlkc1wiLFxyXG4gIFwiTk9OSFVNQU5QUklNQVRFX1RZUEVcIjogXCJOb24taHVtYW4gcHJpbWF0ZSB0eXBlXCIsXHJcbiAgXCJBUVVBVElDX1RZUEVcIjogXCJBcXVhdGljIHNwZWNpZXMgc3VjaCBhcyBmaXNoLCBtb2xsdXNjcyBhbmQgY3J1c3RhY2VhblwiLFxyXG4gIFwiQVZJQU5fVFlQRVwiOiBcIkF2aWFuIHN1Y2ggYXMgY2hpY2tlbiwgdHVya2V5IGFuZCBkdWNrXCIsXHJcbiAgXCJCT1ZJTkVfVFlQRVwiOiBcIkJvdmluZSBzdWNoIGFzIGNhdHRsZSwgYmlzb24gdHlwZVwiLFxyXG4gIFwiQ0FOSU5FX1RZUEVcIjogXCJDYW5pbmUgdHlwZVwiLFxyXG4gIFwiQ0FQUklORV9UWVBFXCI6IFwiQ2FwcmluZSBzdWNoIGFzIGdvYXQgdHlwZVwiLFxyXG4gIFwiQ0VSVklEQUVfVFlQRVwiOiBcIkNlcnZpZGFlIHN1Y2ggYXMgZGVlciwgZWxrKHdhcGl0aSkgYW5kIG1vb3NlIHR5cGVcIixcclxuICBcIkVRVUlORV9UWVBFXCI6IFwiRXF1aW5lIHN1Y2ggYXMgaG9yc2UgdHlwZVwiLFxyXG4gIFwiRkVMSU5FX1RZUEVcIjogXCJGZWxpbmUgc3VjaCBhcyBjYXQgdHlwZVwiLFxyXG4gIFwiT1ZJTkVfVFlQRVwiOiBcIk92aW5lIHR5cGVcIixcclxuICBcIlBPUkNJTkVfVFlQRVwiOiBcIlBvcmNpbmUgc3VjaCBhcyBwaWcgdHlwZVwiLFxyXG4gIFwiUk9ERU5UX1RZUEVcIjogXCJSb2RlbnRzIHN1Y2ggYXMgbW91c2UsIGhhbXN0ZXIsIHJhdCBhbmQgcmFiYml0IHR5cGVcIixcclxuICBcIk9USEVSQU5JTUFMX1RZUEVcIjogXCJPdGhlciBhbmltYWwgdHlwZVwiLFxyXG4gIFwiQ09OVFJPTExFRFBPUFwiOiBcIkNvbnRyb2xsZWQgUG9wdWxhdGlvblwiLFxyXG4gIFwiQklPVEVDSERFUklWRURcIjogXCJCaW90ZWNobm9sb2d5IERlcml2ZWQgQW5pbWFsXCIsXHJcbiAgXCJDRUxMTElORVwiOiBcIkNlbGwgbGluZVwiLFxyXG4gIFwiQUdFQU5JTUFMU1wiOiBcIkFnZSBvZiBhbmltYWxzIGluIG1vbnRoc1wiLFxyXG4gIFwiQ09VTlRSWU9SSUdJTlwiOiBcIkNvdW50cnkgb2Ygb3JpZ2luXCIsXHJcbiAgXCJTUEVDSUZZX1RIRVwiOiBcIlNwZWNpZnkgdGhlIG90aGVyIFwiLFxyXG4gIFwiSFVNQU5fQU5JTUFMX1NPVVJDRVwiOiBcIkh1bWFuIC8gQW5pbWFsIFNvdXJjZWQ/XCIsXHJcbiAgXCJBUFBFTkRJWDRcIjogXCJBbmltYWwgLyBIdW1hbiBTb3VyY2VkXCIsXHJcbiAgXCJNSVNTSU5HX0FQUEVORElYXCI6IFwiTWlzc2luZyBBbmltYWwgLyBIdW1hbiBTb3VyY2VkIEluZ3JlZGllbnRzXCIsXHJcbiAgXCJVTktOT1dOX0NPVU5UUllfREVUQUlMU1wiOlwiVW5rbm93biBDb3VudHJ5IERldGFpbHNcIixcclxuICBcIklOR19ERVRBSUxTXCI6IFwiSHVtYW4gLyBBbmltYWwgU291cmNlZCBSZWNvcmRcIixcclxuICBcIkFOSU1BTF9UWVBFX0xCTFwiOlwiQW5pbWFsIFR5cGUgRGV0YWlsc1wiLFxyXG4gIFwiQU5JTUFMX1RZUEVcIjpcIkFuaW1hbCBUeXBlXCIsXHJcbiAgXCJBTklNQUxfREVUQUlMU1wiOiBcIlByb3ZpZGUgdGhlIGFuaW1hbCB0eXBlIGRlc2NyaXB0aW9uXCIsXHJcbiAgXCJBTklNQUxfU09VUkNFXCI6XCJBbmltYWwgU291cmNlXCIsXHJcbiAgXCJBTklNQUxfVFlQRV9ERVRBSUxTXCI6IFwiQW5pbWFsIFR5cGUgRGV0YWlsc1wiLFxyXG4gIFwiQU5JTUFMX1NSQ1NcIjpcIkFuaW1hbCBTb3VyY2VzXCIsXHJcbiAgXCJBTklNQUxfQ1RSSUVTX09SSUdJTlwiOlwiQW5pbWFsIENvdW50cmllcyBvZiBPcmlnaW5cIixcclxuICBcIkFOSU1BTF9TUkNfQUREXCI6IFwiQWRkIEFuaW1hbCBTb3VyY2VcIixcclxuICBcIlRJU1NVRVNfRkxVSURTX0xCTFwiOiBcIlRpc3N1ZXMgb3IgRmx1aWRzIERldGFpbHNcIixcclxuICBcIlNZU1RFTV9UWVBFXCI6IFwiU3lzdGVtXCIsXHJcbiAgXCJTWVNURU1fREVUQUlMU1wiOiBcIlN5c3RlbSBEZXRhaWxzXCIsXHJcbiAgXCJTWVNURU1fT1RIRVJcIjogXCJPdGhlciBEZXRhaWxzXCIsXHJcbiAgXCJUSVNTVUVTX0ZMVUlEU19BRERcIjogXCJBZGQgVGlzc3VlcyBvciBGbHVpZHNcIixcclxuICBcIlRJU1NVRVNfRkxVSURTX1NSQ1NcIjogXCJUaXNzdWVzIG9yIEZsdWlkcyBzb3VyY2VzXCIsXHJcbiAgXCJUSVNTVUVfRkxVSURcIjogXCJUaXNzdWUgb3IgRmx1aWRcIixcclxuICBcIkFOSU1BTF9TUkNcIjogXCJBbmltYWwgU291cmNlXCIsXHJcbiAgXCJFWFRSQV9BUFBFTkRJWFwiOiBcIkh1bWFuIC8gQW5pbWFsIFNvdXJjZWQgUmVjb3JkcyBub3QgUmVmZXJlbmNlZCBpbiBhbnkgRm9ybXVsYXRpb25cIixcclxuICBcIkNBUkRJT19MRUdFTkRcIjogXCJTZWxlY3Qgb25lIG9yIG1vcmUgQ2FyZGlvLVJlc3BpcmF0b3J5IFN5c3RlbSBzZWxlY3Rpb25zXCIsXHJcbiAgXCJORVJWT1VTX0xFR0VORFwiOiBcIlNlbGVjdCBvbmUgb3IgbW9yZSBOZXJ2b3VzIFN5c3RlbSBzZWxlY3Rpb25zXCIsXHJcbiAgXCJPVEhFUl9MRUdFTkRcIjogXCJTZWxlY3Qgb25lIG9yIG1vcmUgT3RoZXIgU3lzdGVtIHNlbGVjdGlvbnNcIixcclxuICBcIklNTVVORV9MRUdFTkRcIjogXCJTZWxlY3Qgb25lIG9yIG1vcmUgSW1tdW5lIFN5c3RlbSBzZWxlY3Rpb25zXCIsXHJcbiAgXCJESUdFU1RJVkVfTEVHRU5EXCI6IFwiU2VsZWN0IG9uZSBvciBtb3JlIERpZ2VzdGl2ZSBTeXN0ZW0gc2VsZWN0aW9uc1wiLFxyXG4gIFwiUkVQUk9EVUNUSVZFX0xFR0VORFwiOiBcIlNlbGVjdCBvbmUgb3IgbW9yZSBSZXByb2R1Y3RpdmUgU3lzdGVtIHNlbGVjdGlvbnNcIixcclxuICBcIk1VU0NMRV9MRUdFTkRcIjogXCJTZWxlY3Qgb25lIG9yIG1vcmUgTXVzY3Vsby1Ta2VsZXRhbCBTeXN0ZW0gc2VsZWN0aW9uc1wiLFxyXG4gIFwiU0tJTl9MRUdFTkRcIjogXCJTZWxlY3Qgb25lIG9yIG1vcmUgU2tpbiBhbmQgR2xhbmR1bGFyIFN5c3RlbSBzZWxlY3Rpb25zXCIsXHJcbiAgXCJDQVJESU9fREVUQUlMU1wiOiBcIk90aGVyIGNhcmRpby1yZXNwaXJhdG9yeSBzeXN0ZW0gIGRldGFpbHNcIixcclxuICBcIkRJR0VTVElWRV9ERVRBSUxTXCI6IFwiT3RoZXIgZGlnZXN0aXZlIHN5c3RlbSAgZGV0YWlsc1wiLFxyXG4gIFwiSU1NVU5FX0RFVEFJTFNcIjogXCJPdGhlciBpbW11bmUgc3lzdGVtICBkZXRhaWxzXCIsXHJcbiAgXCJNVVNDTEVfREVUQUlMU1wiOiBcIk90aGVyIG11c2N1bG8tYWtlbGV0YWwgc3lzdGVtICBkZXRhaWxzXCIsXHJcbiAgXCJORVJWT1VTX0RFVEFJTFNcIjogXCJPdGhlciBuZXJ2b3VzIHN5c3RlbSAgZGV0YWlsc1wiLFxyXG4gIFwiT1RIRVJUSVNTX0RFVEFJTFNcIjogXCJPdGhlciB0aXNzdWUgZGV0YWlsc1wiLFxyXG4gIFwiUkVQUk9EVUNUSVZFX0RFVEFJTFNcIjogXCJPdGhlciByZXByb2R1Y3RpdmUgc3lzdGVtIGRldGFpbHNcIixcclxuICBcIlNLSU5fREVUQUlMU1wiOiBcIk90aGVyIHNraW4gYW5kIGdsYW5kdWxhciBzeXN0ZW0gZGV0YWlsc1wiLFxyXG4gIFwiQUREX1NPVVJDRURcIjpcIkFkZCBTb3VyY2VkIEluZ3JlZGllbnRcIixcclxuICBcIkRFTEVURV9TT1VSQ0VEXCI6XCJEZWxldGUgU291cmNlZCBJbmdyZWRpZW50XCJcclxufSk7XG5cbiR0cmFuc2xhdGVQcm92aWRlci50cmFuc2xhdGlvbnMoXCJmclwiLCB7XHJcbiAgXCJORVJWT1VTX1NZU1RFTVwiOiBcImZyX05lcnZvdXMgU3lzdGVtXCIsXHJcbiAgXCJCUkFJTlwiOiBcIkNlcnZlYXVcIixcclxuICBcIkJSQUlOU1RFTVwiOiBcIlRyb25jIGPDqXLDqWJyYWxcIixcclxuICBcIkNFUkVCRUxMVU1cIjogXCJDZXJ2ZWxldFwiLFxyXG4gIFwiQ0VST0ZMVUlEXCI6IFwiTGlxdWlkZSBjw6lwaGFsb3JhY2hpZGllbiAoTENSKVwiLFxyXG4gIFwiRE9SU0FMUk9PVFwiOiBcIkdhbmdsaW9uIGRlIGxhIHJhY2luZSBkb3JzYWxlXCIsXHJcbiAgXCJEVVJBTUFURVJcIjogXCJEdXJlLW3DqHJlXCIsXHJcbiAgXCJIWVBPVEhBTEFNVVNcIjogXCJIeXBvdGhhbGFtdXNcIixcclxuICBcIlJFVElOQVwiOiBcIk1vZWxsZSDDqXBpbmnDqHJlXCIsXHJcbiAgXCJTUElOQUxDT1JEXCI6IFwiTW9lbGxlIMOpcGluacOocmVcIixcclxuICBcIlRSSUdFTUlOQUxcIjogXCJHYW5nbGlvbiBkZSBHYXNzZXJcIixcclxuICBcIk5FUlZPVVNfT1RIRVJcIjogXCJWZXVpbGxleiBzcMOpY2lmaWVyIGxlIHN5c3TDqG1lIG5lcnZldXhcIixcclxuICBcIkRJR0VTVElWRV9TWVNURU1cIjogXCJTeXN0w6htZSBkaWdlc3RpZlwiLFxyXG4gIFwiQVBQRU5ESVhcIjogXCJBcHBlbmRpY2VcIixcclxuICBcIkJJTEVcIjogXCJCaWxlXCIsXHJcbiAgXCJESVNUQUxJTEVVTVwiOiBcIklsw6lvbiBkaXN0YWxcIixcclxuICBcIkxBUkdFSU5URVNUXCI6IFwiR3JvcyBpbnRlc3RpblwiLFxyXG4gIFwiU0FMSVZBXCI6IFwiU2FsaXZlIG91IGdsYW5kZSBzYWxpdmFpcmVcIixcclxuICBcIlNNQUxMSU5URVNUSU5FXCI6IFwiSW50ZXN0aW4gZ3LDqmxlLCBhdXRyZSBxdWUgbOKAmWlsw6lvbiBkaXN0YWxcIixcclxuICBcIlNUT01BQ0hcIjogXCJFc3RvbWFjXCIsXHJcbiAgXCJESUdFU1RJVkVfT1RIRVJcIjogXCJWZXVpbGxleiBzcMOpY2lmaWVyIGxlIHN5c3TDqG1lIGRpZ2VzdGlmXCIsXHJcbiAgXCJSRVBST0RVQ1RfU1lTVEVNXCI6IFwiU3lzdMOobWVzIHJlcHJvZHVjdGlmIGV0IHVyaW5haXJlXCIsXHJcbiAgXCJNSUxLXCI6IFwiTGFpdCBvdSBQcm9kdWl0cyBsYWl0aWVyc1wiLFxyXG4gIFwiS0lETkVZXCI6IFwiUmVpbnNcIixcclxuICBcIkNPTE9TVFJVTVwiOiBcIlJlaW5zXCIsXHJcbiAgXCJNQU1NQVJZXCI6IFwiR2xhbmRlcyBtYW1tYWlyZXNcIixcclxuICBcIk9WQVJJRVNcIjogXCJPdmFpcmVzXCIsXHJcbiAgXCJQTEFDRU5UQVwiOiBcIlBsYWNlbnRhXCIsXHJcbiAgXCJQTEFDRU5UQUZMVUlEXCI6IFwiRmx1aWRlIGR1IHBsYWNlbnRhXCIsXHJcbiAgXCJTRU1FTlwiOiBcIlNwZXJtZVwiLFxyXG4gIFwiVEVTVEVTXCI6IFwiVGVzdGljdWxlc1wiLFxyXG4gIFwiVVJJTkVcIjogXCJUZXN0aWN1bGVzXCIsXHJcbiAgXCJSRVBST0RfT1RIRVJcIjogXCJWZXVpbGxleiBzcMOpY2lmaWVyIGxlIHN5c3TDqG1lIHJlcHJvZHVjdGV1clwiLFxyXG4gIFwiQ0FSRElPX1NZU1RFTVwiOiBcIlN5c3TDqG1lIGNhcmRpby1yZXNwaXJhdG9pcmVcIixcclxuICBcIkhFQVJUXCI6IFwiQ8WTdXIgb3UgcMOpcmljYXJkZVwiLFxyXG4gIFwiTFVOR1wiOiBcIkPFk3VyL3DDqXJpY2FyZGVcIixcclxuICBcIk5BU0FMRkxVSURcIjogXCJGbHVpZGUgbmFzYWxcIixcclxuICBcIlRSQUNIRUFcIjogXCJUcmFjaMOpZVwiLFxyXG4gIFwiUExBQ0VOVEFMRkxVSURcIjogXCJGbHVpZGUgZHUgcGxhY2VudGFcIixcclxuICBcIkNBUkRJT19PVEhFUlwiOiBcIlZldWlsbGV6IHNww6ljaWZpZXIgbGUgc3lzdMOobWUgY2FyZGlvcmVzcGlyYXRvaXJlXCIsXHJcbiAgXCJJTU1VTkVfU1lTVEVNXCI6IFwiU3lzdMOobWUgaW1tdW5pdGFpcmVcIixcclxuICBcIkxZTVBIXCI6IFwiR2FuZ2xpb25zIGx5bXBoYXRpcXVlc1wiLFxyXG4gIFwiU1BMRUVOXCI6IFwiUmF0ZVwiLFxyXG4gIFwiVEhZTVVTXCI6IFwiVGh5bXVzXCIsXHJcbiAgXCJUT05TSUxTXCI6IFwiQW15Z2RhbGVzXCIsXHJcbiAgXCJJTU1VTkVfT1RIRVIgXCI6IFwiVmV1aWxsZXogc3DDqWNpZmllciBsZSBzeXN0w6htZSBpbW11bml0YWlyZVwiLFxyXG4gIFwiU0tJTkdMQU5EX1NZU1RFTVwiOiBcIlBlYXUgZXQgc3lzdMOobWUgZ2xhbmR1bGFpcmVcIixcclxuICBcIkFEUkVOQUxcIjogXCJHbGFuZGUgb3UgdGlzc3Ugc3VycsOpbmFsaWVuXCIsXHJcbiAgXCJIQUlSXCI6IFwiQ2hldmV1LCBwbHVtZXMsIHNhYm90c1wiLFxyXG4gIFwiTElWRVJcIjogXCJGb2llXCIsXHJcbiAgXCJQQU5DUkVBU1wiOiBcIlBhbmNyw6lhc1wiLFxyXG4gIFwiUElUVUFSWUdMQU5EXCI6IFwiSHlwb3BoeXNlXCIsXHJcbiAgXCJTS0lOSElERVNcIjogXCJQZWF1IG91IGN1aXJzXCIsXHJcbiAgXCJUSFlST0lEXCI6IFwiVGh5cm/Dr2RlIG91IHBhcmF0aHlyb8OvZGVcIixcclxuICBcIlNLSU5fT1RIRVJcIjogXCJWZXVpbGxleiBzcMOpY2lmaWVyIGxhIHBlYXUgb3UgbGUgc3lzdMOobWUgZ2xhbmR1bGFpcmVcIixcclxuICBcIkFCRE9NRU5cIjogXCJBYmRvbWVuXCIsXHJcbiAgXCJTS1VMTFwiOiBcIkNyw6JuZVwiLFxyXG4gIFwiQk9ORVNcIjogXCJPcyBhdXRyZSBxdWUgbGEgY29sb25uZSB2ZXJ0w6licmFsZSBldCBsZSBjcsOibmVcIixcclxuICBcIkNPTExBR0VOXCI6IFwiQ29sbGFnw6huZVwiLFxyXG4gIFwiVEVORE9OU1wiOiBcIlRlbmRvbnMgb3UgbGlnYW1lbnRzXCIsXHJcbiAgXCJWRVJURUJSQUxDT0xVTU5cIjogXCJDb2xvbm5lIHZlcnTDqWJyYWxlXCIsXHJcbiAgXCJNVVNDTEVcIjogXCJDb2xvbm5lIHZlcnTDqWJyYWxlXCIsXHJcbiAgXCJNVVNDTEVERVRBSUxcIjogXCJWZXVpbGxleiBzcMOpY2lmaWVyIGxlIHN5c3TDqG1lIG11c2N1bG9zcXVlbGV0dGlxdWVcIixcclxuICBcIk9USEVSVElTU1VFX1NZU1RFTVwiOiBcIkF1dHJlcyB0aXNzdXMgb3UgZmx1aWRlc1wiLFxyXG4gIFwiQURJUE9TRVwiOiBcIlZldWlsbGV6IHNww6ljaWZpZXIgbGVzIHRpc3N1cyBhZGlwZXV4IG91IMOpcGlwbG9vblwiLFxyXG4gIFwiQVNDSVRFU1wiOiBcIkFzY2l0ZVwiLFxyXG4gIFwiQU5UTEVSVlwiOiBcIlZlbG91cnMgZGUgY2Vydmlkw6lcIixcclxuICBcIlNFUlVNXCI6IFwiU8OpcnVtXCIsXHJcbiAgXCJXSE9MRUJMT09EXCI6IFwiU2FuZyBlbnRpZXJcIixcclxuICBcIlBMQVNNQVwiOiBcIlBsYXNtYVwiLFxyXG4gIFwiRU1CUllPTklDVElTU1wiOiBcIlRpc3N1IGVtYnJ5b25uYWlyZVwiLFxyXG4gIFwiRkVUQUxUSVNTXCI6IFwiVGlzc3UgZsWTdGFsXCIsXHJcbiAgXCJCT05FTUFSUk9XXCI6IFwiTW9lbGxlIG9zc2V1c2VcIixcclxuICBcIkVZRVNDT1JORUFcIjogXCJZZXV4IG91IGNvcm7DqWVcIixcclxuICBcIkdBTExcIjogXCJWw6lzaWN1bGUgYmlsaWFpcmVcIixcclxuICBcIkZMVUlEU19PVEhFUlwiOiBcIlZldWlsbGV6IHNww6ljaWZpZXIgbGVzIGF1dHJlcyB0eXBlcyBkZSB0aXNzdXMgb3UgZGUgZmx1aWRlcyBkJ29yaWdpbmVcIixcclxuICBcIk5PTkhVTUFOUFJJTUFURV9UWVBFXCI6IFwiZnJfTm9uLWh1bWFuIHByaW1hdGUgdHlwZVwiLFxyXG4gIFwiQVFVQVRJQ19UWVBFXCI6IFwiZnJfQXF1YXRpYyBzcGVjaWVzIHN1Y2ggYXMgZmlzaCwgbW9sbHVzY3MgYW5kIGNydXN0YWNlYW5cIixcclxuICBcIkFWSUFOX1RZUEVcIjogXCJmcl9BdmlhbiBzdWNoIGFzIGNoaWNrZW4sIHR1cmtleSBhbmQgZHVja1wiLFxyXG4gIFwiQk9WSU5FX1RZUEVcIjogXCJmcl9Cb3ZpbmUgc3VjaCBhcyBjYXR0bGUsIGJpc29uIHR5cGVcIixcclxuICBcIkNBTklORV9UWVBFXCI6IFwiZnJfQ2FuaW5lIHR5cGVcIixcclxuICBcIkNBUFJJTkVfVFlQRVwiOiBcImZyX0NhcHJpbmUgc3VjaCBhcyBnb2F0IHR5cGVcIixcclxuICBcIkNFUlZJREFFX1RZUEVcIjogXCJmcl9DZXJ2aWRhZSBzdWNoIGFzIGRlZXIsIGVsayh3YXBpdGkpIGFuZCBtb29zZSB0eXBlXCIsXHJcbiAgXCJFUVVJTkVfVFlQRVwiOiBcImZyX0VxdWluZSBzdWNoIGFzIGhvcnNlIHR5cGVcIixcclxuICBcIkZFTElORV9UWVBFXCI6IFwiZnJfRmVsaW5lIHN1Y2ggYXMgY2F0IHR5cGVcIixcclxuICBcIk9WSU5FX1RZUEVcIjogXCJmcl9PdmluZSB0eXBlXCIsXHJcbiAgXCJQT1JDSU5FX1RZUEVcIjogXCJmcl9Qb3JjaW5lIHN1Y2ggYXMgcGlnIHR5cGVcIixcclxuICBcIlJPREVOVF9UWVBFXCI6IFwiZnJfUm9kZW50cyBzdWNoIGFzIG1vdXNlLCBoYW1zdGVyLCByYXQgYW5kIHJhYmJpdCB0eXBlXCIsXHJcbiAgXCJPVEhFUkFOSU1BTF9UWVBFXCI6IFwiZnJfT3RoZXIgYW5pbWFsIHR5cGVcIixcclxuICBcIkNPTlRST0xMRURQT1BcIjogXCJmcl9Db250cm9sbGVkIFBvcHVsYXRpb25cIixcclxuICBcIkJJT1RFQ0hERVJJVkVEXCI6IFwiZnJfQmlvdGVjaG5vbG9neSBEZXJpdmVkIEFuaW1hbFwiLFxyXG4gIFwiQ0VMTExJTkVcIjogXCJmcl9DZWxsIGxpbmVcIixcclxuICBcIkFHRUFOSU1BTFNcIjogXCJmcl9BZ2Ugb2YgYW5pbWFscyBpbiBtb250aHNcIixcclxuICBcIkNPVU5UUllPUklHSU5cIjogXCJmcl9Db3VudHJ5IG9mIG9yaWdpblwiLFxyXG4gIFwiU1BFQ0lGWV9USEVcIjogXCJTcMOpY2lmaWV6IGwnYXV0cmVcIixcclxuICBcIk1JU1NJTkdfQVBQRU5ESVhcIjogXCJmcl9NaXNzaW5nIEFuaW1hbCAvIEh1bWFuIFNvdXJjZWQgSW5ncmVkaWVudHNcIixcclxuICBcIlVOS05PV05fQ09VTlRSWV9ERVRBSUxTXCI6XCJmcl9Vbmtub3duIENvdW50cnkgRGV0YWlsc1wiLFxyXG4gIFwiSU5HX0RFVEFJTFNcIjogXCJmcl9IdW1hbiAvIEFuaW1hbCBTb3VyY2UgUmVjb3JkXCIsXHJcbiAgXCJBUFBFTkRJWDRcIjogXCJmcl9BbmltYWwgLyBIdW1hbiBTb3VyY2VkXCIsXHJcbiAgXCJBTklNQUxfVFlQRV9MQkxcIjpcImZyX0FuaW1hbCBUeXBlIERldGFpbHNcIixcclxuICBcIkFOSU1BTF9UWVBFXCI6XCJmcl9BbmltYWwgVHlwZVwiLFxyXG4gIFwiQU5JTUFMX0RFVEFJTFNcIjogXCJmcl9Qcm92aWRlIHRoZSBhbmltYWwgdHlwZSBkZXNjcmlwdGlvblwiLFxyXG4gIFwiQU5JTUFMX1NPVVJDRVwiOlwiZnJfQW5pbWFsIFNvdXJjZVwiLFxyXG4gIFwiQU5JTUFMX1RZUEVfREVUQUlMU1wiOiBcImZyX0FuaW1hbCBUeXBlIERldGFpbHNcIixcclxuICBcIkFOSU1BTF9TUkNTXCI6XCJmcl9BbmltYWwgU291cmNlc1wiLFxyXG4gIFwiQU5JTUFMX0NUUklFU19PUklHSU5cIjpcImZyX0FuaW1hbCBDb3VudHJpZXMgb2YgT3JpZ2luXCIsXHJcbiAgXCJBTklNQUxfU1JDX0FERFwiOiBcImZyX0FkZCBBbmltYWwgU291cmNlXCIsXHJcbiAgXCJUSVNTVUVTX0ZMVUlEU19MQkxcIjogXCJmcl9UaXNzdWVzIG9yIEZsdWlkcyBEZXRhaWxzXCIsXHJcbiAgXCJTWVNURU1fVFlQRVwiOiBcImZyX1N5c3RlbVwiLFxyXG4gIFwiU1lTVEVNX0RFVEFJTFNcIjogXCJmcl9TeXN0ZW0gRGV0YWlsc1wiLFxyXG4gIFwiU1lTVEVNX09USEVSXCI6IFwiZnJfT3RoZXIgRGV0YWlsc1wiLFxyXG4gIFwiVElTU1VFU19GTFVJRFNfQUREXCI6IFwiZnJfQWRkIFRpc3N1ZXMgb3IgRmx1aWRzXCIsXHJcbiAgXCJUSVNTVUVTX0ZMVUlEU19TUkNTXCI6IFwiZnJfVGlzc3VlcyBvciBGbHVpZHMgc291cmNlc1wiLFxyXG4gIFwiQU5JTUFMX1NSQ1wiOiBcImZyX0FuaW1hbCBTb3VyY2VcIixcclxuICBcIkVYVFJBX0FQUEVORElYXCI6IFwiZnJfSHVtYW4gLyBBbmltYWwgU291cmNlZCBSZWNvcmRzIG5vdCBSZWZlcmVuY2VkIGluIGFueSBGb3JtdWxhdGlvblwiLFxyXG4gIFwiQ0FSRElPX0RFVEFJTFNcIjogXCJmcl9PdGhlciBjYXJkaW8tcmVzcGlyYXRvcnkgc3lzdGVtICBkZXRhaWxzXCIsXHJcbiAgXCJESUdFU1RJVkVfREVUQUlMU1wiOiBcImZyX090aGVyIGRpZ2VzdGl2ZSBzeXN0ZW0gIGRldGFpbHNcIixcclxuICBcIklNTVVORV9ERVRBSUxTXCI6IFwiZnJfT3RoZXIgaW1tdW5lIHN5c3RlbSAgZGV0YWlsc1wiLFxyXG4gIFwiTVVTQ0xFX0RFVEFJTFNcIjogXCJmcl9PdGhlciBtdXNjdWxvLWFrZWxldGFsIHN5c3RlbSAgZGV0YWlsc1wiLFxyXG4gIFwiTkVSVk9VU19ERVRBSUxTXCI6IFwiZnJfT3RoZXIgbmVydm91cyBzeXN0ZW0gIGRldGFpbHNcIixcclxuICBcIk9USEVSVElTU19ERVRBSUxTXCI6IFwiZnJfT3RoZXIgdGlzc3VlIGRldGFpbHNcIixcclxuICBcIlJFUFJPRFVDVElWRV9ERVRBSUxTXCI6IFwiT3RoZXIgcmVwcm9kdWN0aXZlIHN5c3RlbSBkZXRhaWxzXCIsXHJcbiAgXCJTS0lOX0RFVEFJTFNcIjogXCJmcl9PdGhlciBza2luIGFuZCBnbGFuZHVsYXIgc3lzdGVtIGRldGFpbHNcIixcclxuICBcIkFERF9TT1VSQ0VEXCI6XCJmcl9BZGQgU291cmNlZCBJbmdyZWRpZW50XCIsXHJcbiAgXCJERUxFVEVfU09VUkNFRFwiOlwiZnJfRGVsZXRlIFNvdXJjZWQgSW5ncmVkaWVudFwiXHJcbn0pO1xuXG4kdHJhbnNsYXRlUHJvdmlkZXIudHJhbnNsYXRpb25zKFwiZW5cIiwge1xyXG4gIFwiQUNVVEVBTENPSE9MXCI6XCJBY3V0ZSBBbGNob2xpc3VtXCIsXHJcbiAgXCJBQ1VURUFOWElFVFlcIjpcIkFjdXRlIGFueGlldHkgc3RhdGVcIixcclxuICBcIkFDVVRFUkVTUFwiOlwiQWN1dGUgaW5mZWN0aW91cyByZXNwaXJhdG9yeSBzeW5kcm9tZXNcIixcclxuICBcIkFDVVRFSU5GTEFNXCI6XCJBY3V0ZSBpbmZsYW1tYXRvcnkgYW5kIGRlYmlsaXRhdGluZyBhcnRoaXJpdGlzXCIsXHJcbiAgXCJBQ1VURVBTWUNIT1RJQ1wiOlwiQWN1dGUgcHN5Y2hvdGljIGNvbmRpdGlvbnNcIixcclxuICBcIkFERElDVElPTlwiOlwiQWRkaWN0aW9uIChleGNlcHQgbmljb3RpbmUgYWRkaWN0aW9uKVwiLFxyXG4gIFwiQVRFUklPU0NMRVJPU0lTXCI6XCJBdGVyaW9zY2xlcm9zaXNcIixcclxuICBcIkFQUEVORElDSVRJU1wiOlwiQXBwZW5kaWNpdGlzXCIsXHJcbiAgXCJBU1RITUFcIjpcIkFzdGhtYVwiLFxyXG4gIFwiQ0FOQ0VSXCI6XCJDYW5jZXJcIixcclxuICBcIkhFQVJUQ09OR0VTVFwiOlwiQ29uZ2VzdGl2ZSBoZWFydCBmYWlsdXJlXCIsXHJcbiAgXCJDT05WVUxTSU9OU1wiOlwiQ29udnVsc2lvbnNcIixcclxuICBcIkRFTUVOVElBXCI6XCJEZW1lbnRpYVwiLFxyXG4gIFwiREVQUkVTU0lPTlwiOlwiRGVwcmVzc3Npb25cIixcclxuICBcIkRJQUJFVEVTXCI6XCJEaWFiZXRlc1wiLFxyXG4gIFwiR0FOR1JFTkVcIjpcIkdhbmdyZW5lXCIsXHJcbiAgXCJHTEFVQ09NQVwiOlwiR2xhdWNvbWFcIixcclxuICBcIkJMRUVESU5HRElTT1JERVJTXCI6XCJIYWVtYXRvbG9naWMgYmxlZWRpbmcgZGlzb3JkZXJzXCIsXHJcbiAgXCJIRVBBVElUSVNcIjpcIkhlcGF0aXRpc1wiLFxyXG4gIFwiSFlQRVJURU5TSU9OXCI6XCJIeXBlcnRlbnNpb25cIixcclxuICBcIk5BVVNFQVBSRUdcIjpcIk5hdXNlYSBhbmQgdm9taXRpbmcgb2YgcHJlZ25hbmN5XCIsXHJcbiAgXCJPQkVTSVRZXCI6XCJPYmVzaXR5XCIsXHJcbiAgXCJSSEVVTUFUSUNGRVZFUlwiOlwiUmhldW1hdGljIGZldmVyXCIsXHJcbiAgXCJTRVBUSUNFTUlBXCI6XCJTZXB0aWNlbWlhXCIsXHJcbiAgXCJTRVhESVNFQVNFXCI6XCJTZXh1YWxseSB0cmFuc21pdHRlZCBkaXNlYXNlXCIsXHJcbiAgXCJTVFJBTkdIRVJOSUFcIjpcIlN0cmFuZ3VsYXRlZCBoZXJuaWFcIixcclxuICBcIlRIUk9NQk9USUNESVNPUkRFUlwiOlwiVGhyb21ib3RpYyBhbmQgRW1ib2xpYyBEaXNvcmRlclwiLFxyXG4gIFwiVEhZUk9JRERJU0VBU0VcIjpcIlRoeXJvaWQgZGlzZWFzZVwiLFxyXG4gIFwiVUNMRVJHQVNUUk9cIjpcIlVsY2VyIG9mIGdhc3Ryby1pbnRlc3RpbmFsIHRyYWN0XCIsXHJcbiAgXCJTQ0hFREFfQ0xBSU1TXCI6IFwiUGxlYXNlIGxpc3QgdGhlIHNjaGVkdWxlIEEgQ2xhaW1zIGFuZCBJbmRpY2F0aW9ucyBhc3NvY2lhdGVkIHdpdGggdGhpcyBwcm9kdWN0XCIsXHJcbiAgXCJTQ0hFREFfRElTRUFTRVwiOiBcIlBsZWFzZSBjaGVjayB0aGUgZGlzZWFzZXMgYW5kIGRpc29yZGVycyB0aGF0IGFwcGx5IHRvIHRoZSBjbGFpbXMgbWFkZSAoc2VsZWN0IGF0IGxlYXN0IG9uZSlcIixcclxuICBcIklTU0NIRURBXCI6IFwiVGhpcyBpcyBhIG5vbi1wcmVzY3JpcHRpb24gZHJ1ZyB0byB3aGljaCBvbmUgb3IgbW9yZSBTY2hlZHVsZSBBIGNsYWltcyBhcHBseVwiXHJcbn0pO1xuXG4kdHJhbnNsYXRlUHJvdmlkZXIudHJhbnNsYXRpb25zKFwiZnJcIiwge1xyXG4gIFwiQUNVVEVBTlhJRVRZXCI6XCLDiXRhdCBhbnhpZXV4IGFpZ3VcIixcclxuICBcIkFDVVRFUkVTUFwiOlwiU3luZHJvbWVzIHJlc3BpcmF0b2lyZXMgaW5mZWN0aWV1eCBhaWd1c1wiLFxyXG4gIFwiQUNVVEVJTkZMQU1cIjpcIkFydGhyaXRlIGFpZ3XDqywgaW5mbGFtbWF0b2lyZSBldCBkw6liaWxpdGFudGVcIixcclxuICBcIkFDVVRFUFNZQ0hPVElDXCI6XCJUcm91YmxlcyBwc3ljaG90aXF1ZXMgYWlndXNcIixcclxuICBcIkFERElDVElPTlwiOlwiRMOpcGVuZGFuY2UgKHNhdWYgbGEgZMOpcGVuZGFuY2Ugw6AgbGEgbmljb3RpbmUpXCIsXHJcbiAgXCJBVEVSSU9TQ0xFUk9TSVNcIjpcIkFydMOpcmlvc2Nsw6lyb3NlXCIsXHJcbiAgXCJBUFBFTkRJQ0lUSVNcIjpcIkFwcGVuZGljaXRlXCIsXHJcbiAgXCJBU1RITUFcIjpcIkFzdGhtZVwiLFxyXG4gIFwiQ0FOQ0VSXCI6XCJDYW5jZXJcIixcclxuICBcIkhFQVJUQ09OR0VTVFwiOlwiSW5zdWZmaXNhbmNlIGNhcmRpYXF1ZSBjb25nZXN0aXZlXCIsXHJcbiAgXCJDT05WVUxTSU9OU1wiOlwiQ29udnVsc2lvbnNcIixcclxuICBcIkRFTUVOVElBXCI6XCJEw6ltZW5jZVwiLFxyXG4gIFwiREVQUkVTU0lPTlwiOlwiRMOpcHJlc3Npb25cIixcclxuICBcIkRJQUJFVEVTXCI6XCJEaWFiw6h0ZVwiLFxyXG4gIFwiR0FOR1JFTkVcIjpcIkdhbmdyw6huZVwiLFxyXG4gIFwiR0xBVUNPTUFcIjpcIkdsYXVjb21lXCIsXHJcbiAgXCJCTEVFRElOR0RJU09SREVSU1wiOlwiQWZmZWN0aW9ucyBow6ltYXRvbG9naXF1ZXMgaMOpbW9ycmFnaXF1ZXNcIixcclxuICBcIkhFUEFUSVRJU1wiOlwiSMOpcGF0aXRlXCIsXHJcbiAgXCJIWVBFUlRFTlNJT05cIjpcIkh5cGVydGVuc2lvblwiLFxyXG4gIFwiTkFVU0VBUFJFR1wiOlwiTmF1c8OpZXMgZXQgdm9taXNzZW1lbnRzIGxpw6lzIMOgIGxhIGdyb3NzZXNzZVwiLFxyXG4gIFwiT0JFU0lUWVwiOlwiT2LDqXNpdMOpXCIsXHJcbiAgXCJSSEVVTUFUSUNGRVZFUlwiOlwiRmnDqHZyZSByaHVtYXRpc21hbGVcIixcclxuICBcIlNFUFRJQ0VNSUFcIjpcIlNlcHRpY8OpbWllXCIsXHJcbiAgXCJTRVhESVNFQVNFXCI6XCJNYWxhZGllcyB0cmFuc21pc2VzIHNleHVlbGxlbWVudFwiLFxyXG4gIFwiU1RSQU5HSEVSTklBXCI6XCJIZXJuaWUgw6l0cmFuZ2zDqWVcIixcclxuICBcIlRIUk9NQk9USUNESVNPUkRFUlwiOlwiTWFsYWRpZXMgdGhyb21ib3RpcXVlcyBldCBlbWJvbGlxdWVzXCIsXHJcbiAgXCJUSFlST0lERElTRUFTRVwiOlwiTWFsYWRpZSB0aHlyb8OvZGllbm5lXCIsXHJcbiAgXCJVQ0xFUkdBU1RST1wiOlwiVWxjw6hyZXMgZGVzIHZvaWVzIGdhc3Ryby1pbnRlc3RpbmFsZXNcIixcclxuICBcIlNDSEVEQV9DTEFJTVNcIjpcIkluZGlxdWVyIGxlcyBhbGzDqWdhdGlvbnMgZXQgaW5kaWNhdGlvbnMgZGUgbOKAmWFubmV4ZSBBIGFzc29jacOpZXMgYXZlYyBjZSBwcm9kdWl0XCIsXHJcbiAgXCJTQ0hFREFfRElTRUFTRVwiOiBcImZyX1BsZWFzZSBjaGVjayB0aGUgZGlzZWFzZXMgYW5kIGRpc29yZGVycyB0aGF0IGFwcGx5IHRvIHRoZSBjbGFpbXMgbWFkZSAoc2VsZWN0IGF0IGxlYXN0IG9uZSlcIixcclxuICBcIklTU0NIRURBXCI6IFwiQ2UgbcOpZGljYW1lbnQgZW4gdmVudGUgbGlicmUgYXVxdWVsIHVuZSBvdSBwbHVzaWV1cnMgYWxsw6lnYXRpb25zIGRlIGzigJlhbm5leGUgQSBz4oCZYXBwbGlxdWVudFwiXHJcblxyXG59KTtcblxuJHRyYW5zbGF0ZVByb3ZpZGVyLnRyYW5zbGF0aW9ucyhcImVuXCIsIHtcclxuICBcIklOR19OQU1FXCI6IFwiSW5ncmVkaWVudCBOYW1lXCIsXHJcbiAgXCJDQVNfTlVNXCI6IFwiQ0FTXCIsXHJcbiAgXCJDQVNfRlVMTFwiOiBcIkNoZW1pY2FsIEFic3RyYWN0IFNlcnZpY2VzIE51bWJlclwiLFxyXG4gIFwiU1RBTkRBUkRcIjogXCJTdGFuZGFyZFwiLFxyXG4gIFwiU1RSRU5HVEhcIjogXCJTdHJlbmd0aFwiLFxyXG4gIFwiVU5JVFNcIjogXCJVbml0c1wiLFxyXG4gIFwiUEVSX1NUUkVOR1RIXCI6IFwiUGVyXCIsXHJcbiAgXCJJU0JBU0VcIjogXCJDYWxjdWxhdGVkIGFzIEJhc2U/XCIsXHJcbiAgXCJOQU5PX01BVEVSSUFMXCI6IFwiTmFub21hdGVyaWFsP1wiLFxyXG4gIFwiTkFOT19NQVRFUklBTF9PVEhFUlwiOiBcIkluZGljYXRlIHRoZSB0eXBlIG9mIG5hbm9tYXRlcmlhbFwiLFxyXG4gIFwiQU5JTUFMX0hVTUFOX1NPVVJDRURcIjogXCJBbmltYWwgb3IgSHVtYW4gU291cmNlZD9cIixcclxuICBcIkFDVElWRV9MSVNUXCI6XCJBY3RpdmUgSW5ncmVkaWVudCBMaXN0XCIsXHJcbiAgXCJOT05NRURJQ0lOQUxfSU5HUkVESUVOVFwiOiBcIiBOb24tTWVkaWNpbmFsIEluZ3JlZGllbnRcIixcclxuICBcIlZBUklBTlRfTkFNRVwiOiBcIlZhcmlhbnQgTmFtZVwiLFxyXG4gIFwiQ09OVEFJTkVSX1RZUEVcIjogXCJDb250YWluZXIgVHlwZVwiLFxyXG4gIFwiUEFDS0FHRV9TSVpFXCI6IFwiUGFja2FnZSBTaXplXCIsXHJcbiAgXCJNQVRFUklBTF9OQU1FXCI6IFwiTWF0ZXJpYWwgTmFtZVwiLFxyXG4gIFwiUFJFU0VOVF9JTl9GSU5BTFwiOiBcIlByZXNlbnQgaW4gZmluYWwgQ29udGFpbmVyXCIsXHJcbiAgXCJNRURJQ0lOQUxfSU5HUkVEX0RFVEFJTFNcIjogXCJNZWRpY2luYWwgKEFjdGl2ZSkgSW5ncmVkaWVudCBEZXRhaWxzXCIsXHJcbiAgXCJOT05NRURJQ0lOQUxfSU5HUkVEX0RFVEFJTFNcIjogXCJOb24tTWVkaWNpbmFsIEluZ3JlZGllbnQgRGV0YWlsc1wiLFxyXG4gIFwiQ09OVEFJTkVSX1RZUEVfREVUQUlMU1wiOiBcIkNvbnRhaW5lciBUeXBlIERldGFpbHNcIixcclxuICBcIk1BVEVSSUFMX0RFVEFJTFNcIjogXCJBbmltYWwgYW5kIC8gb3IgSHVtYW4gU291cmNlZCBNYXRlcmlhbHMgRGV0YWlsc1wiLFxyXG4gIFwiQ0FMQ1VMQVRFRF9BU19CQVNFXCI6IFwiQ2FsY3VsYXRlZCBhcyBCYXNlP1wiLFxyXG4gIFwiU0hFTEZfTElGRV9ZRUFSU1wiOiBcIk51bWJlciBvZiBZZWFyc1wiLFxyXG4gIFwiU0hFTEZfTElGRV9NT05USFNcIjogXCJOdW1iZXIgb2YgTW9udGhzXCIsXHJcbiAgXCJNSU5fVEVNUFwiOiBcIk1pbmltdW0sIENlbHNpdXNcIixcclxuICBcIk1BWF9URU1QXCI6IFwiTWF4aW11bSwgQ2Vsc2l1c1wiLFxyXG4gIFwiVEVNUF9SQU5HRVwiOiBcIlRlbXBlcmF0dXJlIFJhbmdlXCIsXHJcbiAgXCJTSEVMRl9MSUZFXCI6IFwiU2hlbGYgTGlmZVwiLFxyXG4gIFwiSU5fRklOQUxfQ09OVEFJTkVSXCI6IFwiUHJlc2VudCBpbiBGaW5hbCBDb250YWluZXI/XCIsXHJcbiAgXCJPVEhFUl9ST0FfREVUQUlMU1wiOiBcIk90aGVyIFJvdXRlIG9mIEFkbWluaXN0cmF0aW9uIERldGFpbHNcIixcclxuICBcIlJPQV9MQkxcIjogXCJSb3V0ZSBvZiBBZG1pbmlzdHJhdGlvblwiLFxyXG4gIFwiUk9BX0FCUkVWXCI6IFwiUk9BXCIsXHJcbiAgXCJGT1JNVUxBVElPTlNcIjpcIkZvcm11bGF0aW9uc1wiLFxyXG4gIFwiRk9STVVMQVRJT05fREVUQUlMU1wiOlwiRm9ybXVsYXRpb24gUmVjb3JkXCIsXHJcbiAgXCJGT1JNVUxBVElPTl9OQU1FXCI6IFwiRm9ybXVsYXRpb24gTmFtZVwiLFxyXG4gIFwiRk9STV9JRFwiOiBcIklEXCIsXHJcbiAgXCJBTklNQUxfQ1RSWV9PUklHSU5cIjogXCJDb3VudHJ5IG9mIE9yaWdpbiBvZiB0aGUgQW5pbWFsc1wiLFxyXG4gIFwiQUREX1JPQVwiOiBcIkFkZCBSb3V0ZSBvZiBBZG1pbmlzdHJhdGlvblwiLFxyXG4gIFwiTUVESUNJTkFMX0lOR1JFRFwiOiBcIkEuIE1lZGljaW5hbCAoQWN0aXZlKSBJbmdyZWRpZW50c1wiLFxyXG4gIFwiTk9OTUVESUNJTkFMX0lOR1JFRFwiOiBcIkIuIE5vbi1NZWRpY2luYWwgSW5ncmVkaWVudHNcIixcclxuICBcIkNPTlRBSU5FUl9UWVBFU1wiOiBcIkQuIENvbnRhaW5lciBUeXBlc1wiLFxyXG4gIFwiQU5JTUFMX0hVTUFOX0hESU5HXCI6IFwiQy4gQW5pbWFsIGFuZCAvIG9yIEh1bWFuIFNvdXJjZWQgTWF0ZXJpYWxzIHVzZWQgYXQgYW55IHN0YWdlIGluIHRoZSBtYW51ZmFjdHVyZSBvZiB0aGUgZHJ1Z1wiLFxyXG4gIFwiUk9BX1RJVExFXCI6IFwiRS4gUm91dGVzIG9mIEFkbWluaXN0cmF0aW9uXCIsXHJcbiAgXCJDT1VOVFJJRVNfTUFOVUZBQ1RcIjogXCJGLiBDb3VudHJpZXMgb2YgbWFudWZhY3R1cmUgZm9yIHRoaXMgZHJ1ZyBwcm9kdWN0XCIsXHJcbiAgXCJJTl9MSVNUXCI6IFwiSW4gbGlzdFwiLFxyXG4gIFwiVU5JVFNfU1JDSFwiOlwiU2VsZWN0IG9yIFNlYXJjaCBVbml0c1wiLFxyXG4gIFwiU09VUkNFRF9JTkZPXCI6XCJQbGVhc2UgcHJvdmlkZSBhZGRpdGlvbmFsIGRldGFpbHMgb2YgdGhpcyBpbmdyZWRpZW50IC8gbWF0ZXJpYWwgb24gdGhlIEFuaW1hbCAvIEh1bWFuIFNvdXJjZSB0YWIuXCIsXHJcbiAgXCJERUxFVEVfRk9STVVMQVRJT05cIjogIFwiRGVsZXRlIEZvcm11bGF0aW9uXCIsXHJcbiAgXCJDT1BZX0ZPUk1VTEFUSU9OXCI6XCJDb3B5IGZvcm11bGF0aW9uXCJcclxufSk7XG5cbiR0cmFuc2xhdGVQcm92aWRlci50cmFuc2xhdGlvbnMoXCJmclwiLCB7XHJcbiAgXCJJTkdfTkFNRVwiOiBcIk5vbSBkZSBs4oCZaW5ncsOpZGllbnRcIixcclxuICBcIkNBU19OVU1cIjogXCJDQVNcIixcclxuICBcIkNBU19GVUxMXCI6IFwiTnVtw6lybyBDaGVtaWNhbCBBYnN0cmFjdHMgU2VydmljZVwiLFxyXG4gIFwiU1RBTkRBUkRcIjogXCJOb3JtZVwiLFxyXG4gIFwiU1RSRU5HVEhcIjogXCJDb25jZW50cmF0aW9uXCIsXHJcbiAgXCJVTklUU1wiOiBcIlVuaXTDqXNcIixcclxuICBcIlBFUl9TVFJFTkdUSFwiOiBcIlBhclwiLFxyXG4gIFwiSVNCQVNFXCI6IFwiQ2FsY3Vsw6kgc291cyBmb3JtZSBkZSBiYXNlP1wiLFxyXG4gIFwiTkFOT19NQVRFUklBTFwiOiBcIk5hbm9tYXTDqXJpYXU/XCIsXHJcbiAgXCJOQU5PX01BVEVSSUFMX09USEVSXCI6IFwiSW5kaXF1ZXIgbGUgdHlwZSBkZSBuYW5vbWF0w6lyaWF1XCIsXHJcbiAgXCJBTklNQUxfSFVNQU5fU09VUkNFRFwiOiBcImZyX0FuaW1hbCBvciBIdW1hbiBTb3VyY2VkP1wiLFxyXG4gIFwiQUNUSVZFX0xJU1RcIjogXCJmcl9BY3RpdmUgSW5ncmVkaWVudCBMaXN0XCIsXHJcbiAgXCJOT05NRURJQ0lOQUxfSU5HUkVESUVOVFwiOiBcIiBmcl9Ob25NZWRpY2luYWwgSW5ncmVkaWVudFwiLFxyXG4gIFwiVkFSSUFOVF9OQU1FXCI6IFwiZnJfVmFyaWFudCBOYW1lXCIsXHJcbiAgXCJDT05UQUlORVJfVFlQRVwiOiBcImZyX0NvbnRhaW5lciBUeXBlXCIsXHJcbiAgXCJQQUNLQUdFX1NJWkVcIjogXCJmcl9QYWNrYWdlIFNpemVcIixcclxuICBcIk1BVEVSSUFMX05BTUVcIjogXCJmcl9NYXRlcmlhbCBOYW1lXCIsXHJcbiAgXCJQUkVTRU5UX0lOX0ZJTkFMXCI6IFwiZnJfUHJlc2VudCBpbiBmaW5hbCBDb250YWluZXJcIixcclxuICBcIk1FRElDSU5BTF9JTkdSRURfREVUQUlMU1wiOiBcImZyX01lZGljaW5hbCAoQWN0aXZlKSBJbmdyZWRpZW50IERldGFpbHNcIixcclxuICBcIk5PTk1FRElDSU5BTF9JTkdSRURfREVUQUlMU1wiOiBcIk5vbi1NZWRpY2luYWwgSW5ncmVkaWVudCBEZXRhaWxzXCIsXHJcbiAgXCJDT05UQUlORVJfVFlQRV9ERVRBSUxTXCI6IFwiQ29udGFpbmVyIFR5cGUgRGV0YWlsc1wiLFxyXG4gIFwiTUFURVJJQUxfREVUQUlMU1wiOiBcIkFuaW1hbCBhbmQgLyBvciBIdW1hbiBTb3VyY2VkIE1hdGVyaWFscyBEZXRhaWxzXCIsXHJcbiAgXCJDQUxDVUxBVEVEX0FTX0JBU0VcIjogXCJmcl9DYWxjdWxhdGVkIGFzIEJhc2U/XCIsXHJcbiAgXCJTSEVMRl9MSUZFX1lFQVJTXCI6IFwiZnJfTnVtYmVyIG9mIHllYXJzXCIsXHJcbiAgXCJTSEVMRl9MSUZFX01PTlRIU1wiOiBcImZyX051bWJlciBvZiBtb250aHNcIixcclxuICBcIk1JTl9URU1QXCI6IFwiZnJfTWluaW11bSwgQ2Vsc2l1c1wiLFxyXG4gIFwiTUFYX1RFTVBcIjogXCJmcl9NYXhpbXVtLCBDZWxzaXVzXCIsXHJcbiAgXCJURU1QX1JBTkdFXCI6IFwiZnJfVGVtcGVyYXR1cmUgUmFuZ2VcIixcclxuICBcIlNIRUxGX0xJRkVcIjogXCJmcl9TaGVsZiBMaWZlXCIsXHJcbiAgXCJJTl9GSU5BTF9DT05UQUlORVJcIjogXCJmcl9QcmVzZW50IGluIEZpbmFsIENvbnRhaW5lcj9cIixcclxuICBcIk9USEVSX1JPQV9ERVRBSUxTXCI6IFwiZnJfT3RoZXIgUm91dGUgb2YgQWRtaW5pc3RyYXRpb24gRGV0YWlsc1wiLFxyXG4gIFwiUk9BX0xCTFwiOiBcImZyX1JvdXRlIG9mIEFkbWluaXN0cmF0aW9uXCIsXHJcbiAgXCJST0FfQUJSRVZcIjogXCJST0FcIixcclxuICBcIkZPUk1VTEFUSU9OU1wiOiBcIkZvcm11bGF0aW9uc1wiLFxyXG4gIFwiQVBQRU5ESVg0XCI6IFwiQW5uZXhlIDRcIixcclxuICBcIkZPUk1VTEFUSU9OX0RFVEFJTFNcIjogXCJmcl9Gb3JtdWxhdGlvbiBSZWNvcmRcIixcclxuICBcIkZPUk1VTEFUSU9OX05BTUVcIjogXCJmcl9Gb3JtdWxhdGlvbiBOYW1lXCIsXHJcbiAgXCJGT1JNX0lEXCI6IFwiSURcIixcclxuICBcIkFOSU1BTF9DVFJZX09SSUdJTlwiOiBcImZyX0NvdW50cnkgb2YgT3JpZ2luIG9mIHRoZSBBbmltYWxzXCIsXHJcbiAgXCJBRERfUk9BXCI6IFwiZnJfQWRkIFJvdXRlIG9mIEFkbWluaXN0cmF0aW9uXCIsXHJcbiAgXCJNRURJQ0lOQUxfSU5HUkVEXCI6IFwiQS4gZnJfTWVkaWNpbmFsIChBY3RpdmUpIEluZ3JlZGllbnRzXCIsXHJcbiAgXCJOT05NRURJQ0lOQUxfSU5HUkVEXCI6IFwiQi4gZnJfTm9uLU1lZGljaW5hbCBJbmdyZWRpZW50c1wiLFxyXG4gIFwiQ09OVEFJTkVSX1RZUEVTXCI6IFwiRC4gZnJfQ29udGFpbmVyIFR5cGVzXCIsXHJcbiAgXCJBTklNQUxfSFVNQU5fSERJTkdcIjogXCJDLiBmcl9BbmltYWwgYW5kIC8gb3IgSHVtYW4gU291cmNlZCBNYXRlcmlhbHMgdXNlZCBhdCBhbnkgc3RhZ2UgaW4gdGhlIG1hbnVmYWN0dXJlIG9mIHRoZSBkcnVnXCIsXHJcbiAgXCJST0FfVElUTEVcIjogXCJFLiBmcl9Sb3V0ZXMgb2YgQWRtaW5pc3RyYXRpb25cIixcclxuICBcIkNPVU5UUklFU19NQU5VRkFDVFwiOiBcIkYuIGZyX0NvdW50cmllcyBvZiBtYW51ZmFjdHVyZSBmb3IgdGhpcyBkcnVnIHByb2R1Y3RcIixcclxuICBcIk5PVF9JTl9MSVNUXCI6IFwiZnJfTm90IGluIGxpc3RcIixcclxuICBcIlVOSVRTX1NSQ0hcIjogXCJmcl9TZWxlY3Qgb3IgU2VhcmNoIFVuaXRzXCIsXHJcbiAgXCJTT1VSQ0VEX0lORk9cIjogXCJmcl9QbGVhc2UgcHJvdmlkZSBhZGRpdGlvbmFsIGRldGFpbHMgb2YgdGhpcyBpbmdyZWRpZW50L21hdGVyaWFsIG9uIHRoZSBBbmltYWwvSHVtYW4gU291cmNlIHRhYi5cIixcclxuICBcIkRFTEVURV9GT1JNVUxBVElPTlwiOiBcImZyX0RlbGV0ZSBGb3JtdWxhdGlvblwiLFxyXG4gIFwiQ09QWV9GT1JNVUxBVElPTlwiOiBcImZyX0NvcHkgZm9ybXVsYXRpb25cIlxyXG59KTtcblxuJHRyYW5zbGF0ZVByb3ZpZGVyLnRyYW5zbGF0aW9ucyhcImVuXCIsIHtcclxuICBcIllcIjogXCJZZXNcIixcclxuICBcIk5cIjogXCJOb1wiLFxyXG4gIFwiREVMRVRFUk9XXCI6IFwiRGVsZXRlIFJvd1wiLFxyXG4gIFwiU0VMRUNURURST1dcIjogXCJTZWxlY3RlZCBSb3dcIixcclxuICBcIlJFUVVJUkVEXCI6IFwiKHJlcXVpcmVkKVwiLFxyXG4gIFwiUk9MRVNfU0VMRUNUXCI6IFwiU2VsZWN0IG9uZSBvciBtb3JlIHJvbGVzIGZvciB0aGlzIHJlY29yZFwiLFxyXG4gIFwiTkVXXCI6IFwiTmV3XCIsXHJcbiAgXCJBTUVORFwiOiBcIkFtZW5kXCIsXHJcbiAgXCJBUFBST1ZFRFwiOiBcIkFwcHJvdmVkXCIsXHJcbiAgXCJDTElDS19UT0dHTEVcIjogXCJDbGljayB0byB0b2dnbGUgdGhlIGNvbGxhcHNlIG9yIGV4cGFuZCBkZXRhaWxzIGZvciB0aGlzIGFkZHJlc3MuXCIsXHJcbiAgXCJBTUVORF9SRUNPUkRcIjogXCJBbWVuZCBSZWNvcmRcIixcclxuICBcImVuXCI6IFwiRW5nbGlzaFwiLFxyXG4gIFwiZnJcIjogXCJGcmVuY2hcIixcclxuICBcIkRJU0NBUkRfQ0hBTkdFU1wiOiBcIkRpc2NhcmQgQ2hhbmdlc1wiLFxyXG4gIFwiUkVQX0FMVFwiOiBcIkFsdGVybmF0ZSBSRVAgY29udGFjdFwiLFxyXG4gIFwiUkVQX1BSSU1cIjogXCJQcmltYXJ5IFJFUCBjb250YWN0XCIsXHJcbiAgXCJNQUlMSU5HXCI6IFwiUmVndWxhdG9yeSBNYWlsaW5nIC8gQW5udWFsIENvbnRhY3RcIixcclxuICBcIkJJTExJTkdcIjogXCJCaWxsaW5nIEFkZHJlc3NcIixcclxuICBcIk1BTlVGQUNUXCI6IFwiTWFudWZhY3R1cmVyIC8gU3BvbnNvciBNYWlsaW5nIEFkZHJlc3NcIixcclxuICBcIklNUE9SVEVSXCI6IFwiQ2FuYWRpYW4gSW1wb3J0ZXIgTWFpbGluZyBBZGRyZXNzXCIsXHJcbiAgXCJBUFBST1ZFX0ZJTkFMXCI6IFwiQXBwcm92ZSBGaW5hbCBYTUxcIixcclxuICBcIlNBVkVfRFJBRlRcIjogXCJTYXZlIERyYWZ0IGZvciBGaWxpbmdcIixcclxuICBcIlBSSU1BUllcIjogXCJQcmltYXJ5XCIsXHJcbiAgXCJTRUNPTkRBUllcIjogXCJBbHRlcm5hdGVcIixcclxuICBcIlRPR0dMRV9FWFBBTkRcIjogXCJDbGljayB0byB0b2dnbGUgY29sbGFwc2Ugb3IgZXhwYW5kIGRldGFpbHMgb2Ygcm93XCIsXHJcbiAgXCJTQVZFX1dPUktcIjogXCJTYXZlIFdvcmtpbmcgQ29weVwiLFxyXG4gIFwiQ09OVFJPTF9OVU1CRVJcIjogXCJDb250cm9sIE51bWJlclwiLFxyXG4gIFwiUkVQX0NPTlRBQ1RfSU5GT1wiOiBcIlJFUCBDb250YWN0IEluZm9ybWF0aW9uXCIsXHJcbiAgXCJTQVZFX0NPTlRBQ1RcIjpcIlNhdmUgQ29udGFjdFwiLFxyXG4gIFwiREVMRVRFX0NPTlRBQ1RcIjpcIkRlbGV0ZSBDb250YWN0XCIsXHJcbiAgXCJDT01QQU5ZX0lEXCI6IFwiQ29tcGFueSBJZFwiLFxyXG4gIFwiRE9TU0lFUl9JRFwiOiBcIkRvc3NpZXIgSWRcIixcclxuICBcIkVSUk9SU1wiOlwiRXJyb3JzXCIsXHJcbiAgXCJVTktOT1dOXCI6IFwiVW5rbm93blwiLFxyXG4gIFwiQklPTE9HSUNcIjogXCJCaW9sb2dpY1wiLFxyXG4gIFwiUEhBUk1BQ0VVVElDQUxcIjogXCJQaGFybWFjZXV0aWNhbFwiLFxyXG4gIFwiSEVMUF9GSUxFX0xPQURcIjogXCJGaWxlIExvYWQgSW5zdHJ1Y3Rpb25zXCIsXHJcbiAgXCJIRUxQX0FDVElWSVRZX01BSU5cIjogXCJBY3Rpdml0eSBJbnN0cnVjdGlvbnNcIixcclxuICBcIkhFTFBfQUNUSVZJVFlfUkVQXCI6IFwiUkVQIENvbnRhY3QgSW5zdHJ1Y3Rpb25zXCIsXHJcbiAgXCJDQUxFTkRBUlwiOiBcIlBpY2sgZGF0ZSBmcm9tIGNhbGVuZGFyXCIsXHJcbiAgXCJISURFX0NBTEVOREFSXCI6IFwiSGlkZSBDYWxlbmRhciAoZXNjYXBlIGtleSlcIixcclxuICBcIk9USEVSXCI6IFwiT3RoZXJcIixcclxuICBcIkhFTFBfUkVQX0NPTlRBQ1RcIjogXCJSRVAgQ29udGFjdCBJbnN0cnVjdGlvbnNcIixcclxuICBcIk9USEVSX1VOSVRTXCI6IFwiVW5pdHMgb3RoZXIgZGV0YWlsc1wiLFxyXG4gIFwiQ09NUEFOWV9OT0FCQlJFVlwiOlwiQ29tcGFueSBOYW1lIChGdWxsIGxlZ2FsIG5hbWUgLSBubyBhYmJyZXZpYXRpb25zKVwiLFxyXG4gIFwiQ09QWVwiOlwiQ29weVwiLFxyXG4gIFwiREVMRVRFXCI6XCJEZWxldGVcIixcclxuICBcIlNBVkVfV09SS0lOR1wiOlwiU2F2ZSBXb3JraW5nIENvcHlcIlxyXG59KTtcblxuJHRyYW5zbGF0ZVByb3ZpZGVyLnRyYW5zbGF0aW9ucyhcImZyXCIsIHtcclxuICBcIllcIjogXCJPdWlcIixcclxuICBcIk5cIjogXCJOb25cIixcclxuICBcIkRFTEVURVJPV1wiOiBcImZyX0RlbGV0ZSBSb3dcIixcclxuICBcIlNFTEVDVEVEUk9XXCI6IFwiU2VsZWN0ZWQgUm93XCIsXHJcbiAgXCJSRVFVSVJFRFwiOiBcIihyZXF1aXMpXCIsXHJcbiAgXCJST0xFU19TRUxFQ1RcIjogXCJmcl9TZWxlY3Qgb25lIG9yIG1vcmUgcm9sZXMgZm9yIHRoaXMgcmVjb3JkXCIsXHJcbiAgXCJORVdcIjogXCJmcl9OZXdcIixcclxuICBcIkFNRU5EXCI6IFwiZnJfQW1lbmRcIixcclxuICBcIkFQUFJPVkVEXCI6IFwiZnJfQXBwcm92ZWRcIixcclxuICBcIkNMSUNLX1RPR0dMRVwiOiBcImZyX0NsaWNrIHRvIHRvZ2dsZSB0aGUgY29sbGFwc2Ugb3IgZXhwYW5kIGRldGFpbHMgZm9yIHRoaXMgYWRkcmVzcy5cIixcclxuICBcIkFNRU5EX1JFQ09SRFwiOiBcImZyX0FtZW5kIFJlY29yZFwiLFxyXG4gIFwiZW5cIjogXCJBbmdsYWlzXCIsXHJcbiAgXCJmclwiOiBcIkZyYW7Dp2Fpc1wiLFxyXG4gIFwiRElTQ0FSRF9DSEFOR0VTXCI6IFwiZnJfRGlzY2FyZCBDaGFuZ2VzXCIsXHJcbiAgXCJSRVBfQUxUXCI6IFwiZnJfQWx0ZXJuYXRlIFJFUCBjb250YWN0XCIsXHJcbiAgXCJSRVBfUFJJTVwiOiBcImZyX1ByaW1hcnkgUkVQIGNvbnRhY3RcIixcclxuICBcIk1BSUxJTkdcIjogXCJDb250YWN0IHBvdXIgbGUgY291cnJpZXIgcsOpZ2xlbWVudGFpcmVcIixcclxuICBcIkJJTExJTkdcIjogXCJmcl9CaWxsaW5nXCIsXHJcbiAgXCJNQU5VRkFDVFwiOiBcImZyX01hbnVmYWN0dXJlclwiLFxyXG4gIFwiSU1QT1JURVJcIjogXCJJbXBvcnRhdGV1ciBjYW5hZGllblwiLFxyXG4gIFwiQVBQUk9WRV9GSU5BTFwiOiBcImZyX0FwcHJvdmUgRmluYWwgWE1MXCIsXHJcbiAgXCJQUklNQVJZXCI6IFwiZnJfUHJpbWFyeVwiLFxyXG4gIFwiU0VDT05EQVJZXCI6IFwiZnJfQWx0ZXJuYXRlXCIsXHJcbiAgXCJUT0dHTEVfRVhQQU5EXCI6IFwiZnJfQ2xpY2sgdG8gdG9nZ2xlIGNvbGxhcHNlIG9yIGV4cGFuZCBkZXRhaWxzIG9mIHJvd1wiLFxyXG4gIFwiU0FWRV9EUkFGVFwiOiBcImZyX1NhdmUgRHJhZnQgZm9yIGZpbGluZ1wiLFxyXG4gIFwiQ09OVFJPTF9OVU1CRVJcIjogXCJmcl9Db250cm9sIE51bWJlclwiLFxyXG4gIFwiUkVQX0NPTlRBQ1RfSU5GT1wiOiBcImZyX01haW4gQ29udGFjdCBJbmZvcm1hdGlvblwiLFxyXG4gIFwiU0FWRV9DT05UQUNUXCI6IFwiZnJfU2F2ZSBDb250YWN0XCIsXHJcbiAgXCJERUxFVEVfQ09OVEFDVFwiOiBcImZyX0RlbGV0ZSBDb250YWN0XCIsXHJcbiAgXCJDT01QQU5ZX0lEXCI6IFwiZnJfQ29tcGFueSBJZFwiLFxyXG4gIFwiRE9TU0lFUl9JRFwiOiBcImZyX0Rvc3NpZXIgSWRcIixcclxuICBcIkVSUk9SU1wiOiBcIkVycmV1cnNcIixcclxuICBcIlVOS05PV05cIjogXCJJbmNvbm51XCIsXHJcbiAgXCJCSU9MT0dJQ1wiOiBcImZyX0Jpb2xvZ2ljXCIsXHJcbiAgXCJQSEFSTUFDRVVUSUNBTFwiOiBcImZyX1BoYXJtYWNldXRpY2FsXCIsXHJcbiAgXCJIRUxQX0ZJTEVfTE9BRFwiOiBcImZyX0ZpbGUgTG9hZCBJbnN0cnVjdGlvbnNcIixcclxuICBcIkhFTFBfQUNUSVZJVFlfTUFJTlwiOiBcImZyX0FjdGl2aXR5IEluc3RydWN0aW9uc1wiLFxyXG4gIFwiSEVMUF9BQ1RJVklUWV9SRVBcIjogXCJmcl9SRVAgQ29udGFjdCBJbnN0cnVjdGlvbnNcIixcclxuICBcIkNBTEVOREFSXCI6IFwiZnJfUGljayBkYXRlIGZyb20gY2FsZW5kYXJcIixcclxuICBcIkhJREVfQ0FMRU5EQVJcIjogXCJmcl9IaWRlIENhbGVuZGFyIChlc2NhcGUga2V5KVwiLFxyXG4gIFwiT1RIRVJcIjogXCJBdXRyZVwiLFxyXG4gIFwiSEVMUF9SRVBfQ09OVEFDVFwiOiBcImZyX1JFUCBDb250YWN0IEluc3RydWN0aW9uc1wiLFxyXG4gIFwiT1RIRVJfVU5JVFNcIjogXCJmcl9Vbml0cyBvdGhlciBkZXRhaWxzXCIsXHJcbiAgXCJDT01QQU5ZX05PQUJCUkVWXCI6XCJmcl9Db21wYW55IE5hbWUgKEZ1bGwgbGVnYWwgbmFtZSAtIG5vIGFiYnJldmlhdGlvbnMpXCIsXHJcbiAgXCJDT1BZXCI6XCJmcl9Db3B5XCIsXHJcbiAgXCJERUxFVEVcIjpcImZyX0RlbGV0ZVwiLFxyXG4gIFwiU0FWRV9XT1JLSU5HXCI6XCJmcl9TYXZlIFdvcmtpbmcgQ29weVwiXHJcbn0pO1xuXG4kdHJhbnNsYXRlUHJvdmlkZXIudHJhbnNsYXRpb25zKFwiZW5cIiwge1xyXG4gIFwiU0VMRUNUX0xPQURcIjogXCJTZWxlY3QgYSBmaWxlIHRvIGxvYWRcIixcclxuICBcIk1TR19TVUNDRVNTX0xPQURcIjogXCJUaGUgZmlsZSB3YXMgbG9hZGVkIHN1Y2Nlc3NmdWxseVwiLFxyXG4gIFwiTVNHX0VSUl9KU09OUEFSU0VcIjogXCJFcnJvcjogdGhlcmUgd2FzIGFuIGVycm9yIHBhcnNpbmcgdGhlIHdvcmtpbmcgZmlsZS5cIixcclxuICBcIk1TR19FUlJfWE1MUEFSU0VcIjogXCJFcnJvcjogdGhlcmUgd2FzIGFuIGVycm9yIHBhcnNpbmcgdGhlIGRyYWZ0IFhNTCBmaWxlLlwiLFxyXG4gIFwiTVNHX0VSUl9GSUxFX0xPQURcIjogXCJFcnJvcjogdGhlcmUgd2FzIGEgcHJvYmxlbSBsb2FkaW5nIHRoZSBmaWxlLlwiLFxyXG4gIFwiTVNHX0VSUl9GSUxFX1RZUEVcIjogXCJFcnJvcjogQW4gaW52YWxpZCBmaWxlIHR5cGUgd2FzIHNlbGVjdGVkLlwiLFxyXG4gIFwiTVNHX0VSUl9GT1JNX1RZUEVcIjogXCJFcnJvcjogdGhlIHdyb25nIGZvcm0gdHlwZSB3YXMgc2VsZWN0ZWQgZm9yIHRoaXMgZm9ybS5cIixcclxuICBcIk1TR19FUlJfQ0hFQ0tTVU1fRkFJTFwiOiBcIkVycm9yOiB0aGUgY2hlY2tzdW0gaW4gdGhlIGZpbGUgZG9lcyBub3QgbWF0Y2ggdGhlIGNhbGN1bGF0ZWQgY2hlY2tzdW1cIlxyXG59KTtcblxuJHRyYW5zbGF0ZVByb3ZpZGVyLnRyYW5zbGF0aW9ucyhcImZyXCIsIHtcclxuICBcIlNFTEVDVF9MT0FEXCI6IFwiZnJfU2VsZWN0IGEgZGF0YSBmaWxlIHRvIGxvYWRcIixcclxuICBcIk1TR19TVUNDRVNTX0xPQURcIjogXCJmcl9UaGUgZmlsZSB3YXMgbG9hZGVkIHN1Y2Nlc3NmdWxseVwiLFxyXG4gIFwiTVNHX0VSUl9KU09OUEFSU0VcIjogXCJmcl9FcnJvcjogdGhlcmUgd2FzIGFuIGVycm9yIHBhcnNpbmcgdGhlIHdvcmtpbmcgZmlsZS5cIixcclxuICBcIk1TR19FUlJfWE1MUEFSU0VcIjogXCJmcl9FcnJvcjogdGhlcmUgd2FzIGFuIGVycm9yIHBhcnNpbmcgdGhlIGRyYWZ0IFhNTCBmaWxlLlwiLFxyXG4gIFwiTVNHX0VSUl9GSUxFX0xPQURcIjogXCJmcl9FcnJvcjogdGhlcmUgd2FzIGEgcHJvYmxlbSBsb2FkaW5nIHRoZSBmaWxlLlwiLFxyXG4gIFwiTVNHX0VSUl9GSUxFX1RZUEVcIjogXCJmcl9FcnJvcjogQW4gaW52YWxpZCBmaWxlIHR5cGUgd2FzIHNlbGVjdGVkLlwiLFxyXG4gIFwiTVNHX0VSUl9GT1JNX1RZUEVcIjogXCJmcl9FcnJvcjogdGhlIHdyb25nIGZvcm0gdHlwZSB3YXMgc2VsZWN0ZWQgZm9yIHRoaXMgZm9ybS5cIixcclxuICBcIk1TR19FUlJfQ0hFQ0tTVU1fRkFJTFwiOiBcImZyX0Vycm9yOiB0aGUgY2hlY2tzdW0gaW4gdGhlIGZpbGUgZG9lcyBub3QgbWF0Y2ggdGhlIGNhbGN1bGF0ZWQgY2hlY2tzdW1cIlxyXG59KTtcblxuJHRyYW5zbGF0ZVByb3ZpZGVyLnRyYW5zbGF0aW9ucyhcImVuXCIsIHtcclxuICBcIkFQUExfU1RBVFVTXCI6IFwiQXBwbGljYXRpb24gU3RhdHVzXCIsXHJcbiAgXCJFTlJPTF9WRVJTSU9OXCI6IFwiRW5yb2xtZW50IFZlcnNpb25cIixcclxuICBcIkRBVEVfU0FWRURcIjogXCJEYXRlIExhc3QgU2F2ZWRcIixcclxuICBcIkFNRU5EX0VOUk9MXCI6ICBcIkFtZW5kIEVucm9sbWVudFwiLFxyXG4gIFwiQU1FTkRfTVNHXCI6XCJFZGl0IHJlY29yZHMgdG8gYmUgYW1lbmRlZCBiZWxvdy5cIlxyXG59KTtcblxuJHRyYW5zbGF0ZVByb3ZpZGVyLnRyYW5zbGF0aW9ucyhcImZyXCIsIHtcclxuICBcIkFQUExfU1RBVFVTXCI6IFwiZnJfQXBwbGljYXRpb24gU3RhdHVzXCIsXHJcbiAgXCJFTlJPTF9WRVJTSU9OXCI6IFwiZnJfRW5yb2xtZW50IFZlcnNpb25cIixcclxuICBcIkRBVEVfU0FWRURcIjogXCJmcl9EYXRlIExhc3QgU2F2ZWRcIixcclxuICBcIkFNRU5EX0VOUk9MXCI6IFwiZnJfQW1lbmQgRW5yb2xtZW50XCIsXHJcbiAgXCJBTUVORF9NU0dcIjpcImZyX0VkaXQgcmVjb3JkcyB0byBiZSBhbWVuZGVkIGJlbG93LlwiXHJcbn0pO1xuXG4kdHJhbnNsYXRlUHJvdmlkZXIudHJhbnNsYXRpb25zKFwiZW5cIiwge1xyXG4gIFwiTVNHX0VSUl9NQU5EXCI6IFwiVGhpcyBmaWVsZCBpcyByZXF1aXJlZFwiLFxyXG4gIFwiTVNHX0VSUl9FTUFJTF9GT1JNQVRcIjogXCJQbGVhc2UgZW50ZXIgYSB2YWxpZCBlbWFpbCBhZGRyZXNzLlwiLFxyXG4gIFwiTVNHX0VSUl9ST0xFXCI6IFwiUGxlYXNlIHNlbGVjdCBhdCBsZWFzdCBvbmUgcm9sZVwiLFxyXG4gIFwiTVNHX0VSUl9DT05UQUNUX05VTVwiOiBcIkFsbCB0aGUgcm9sZXMgaGF2ZSB0byBiZSB1c2VkIGZvciB0aGUgY29udGFjdHNcIixcclxuICBcIk1TR19FUlJfUEhPTkVfRk9STUFUXCI6IFwiUGxlYXNlIHNwZWNpZnkgYSB2YWxpZCBwaG9uZSBudW1iZXJcIixcclxuICBcIk1TR19FUlJfQUxMUk9MRVwiOiBcIlRoZSByb2xlcyBvZiBtYW51ZmFjdHVyZXIsIG1haWxpbmcsIGJpbGxpbmcsIGFuZCBwcmltYXJ5IFJFUCBjb250YWN0ICBoYXZlIG5vdCBhbGwgYmVlbiBzZWxlY3RlZCBhbW9uZyB0aGUgbGlzdCBvZiBjb250YWN0c1wiLFxyXG4gIFwiTVNHX0VSUl9BRERSRVNTU1JPTEVcIjogXCJUaGUgcm9sZXMgb2YgbWFudWZhY3R1cmVyLCBtYWlsaW5nLCBhbmQgYmlsbGluZyBoYXZlIG5vdCBhbGwgYmVlbiBzZWxlY3RlZCBhbW9uZyB0aGUgbGlzdCBvZiBhZGRyZXNzZXNcIixcclxuICBcIk1TR19FUlJfUE9TVEFMXCI6IFwiUGxlYXNlIHNwZWNpZnkgYSB2YWxpZCBwb3N0YWwgY29kZS5cIixcclxuICBcIk1TR19FUlJfWklQXCI6IFwiUGxlYXNlIHNwZWNpZnkgYSB2YWxpZCB6aXAgY29kZS5cIixcclxuICBcIk1TR19FUlJfREFURV9GT1JNQVRcIjogXCJUaGUgZGF0ZSBmb3JtYXQgaXMgaW5jb3JyZWN0LlwiLFxyXG4gIFwiTUFJTElOR19TRUxcIjogXCJNYWlsaW5nIFJvbGUgYWxyZWFkeSBTZWxlY3RlZFwiLFxyXG4gIFwiTUFOVUZBQ1RfU0VMXCI6IFwiTWFudWZhY3R1cmVyIFJvbGUgYWxyZWFkeSBTZWxlY3RlZFwiLFxyXG4gIFwiTUFJTF9TRUxcIjogXCJNYWlsaW5nIFJvbGUgYWxyZWFkeSBTZWxlY3RlZFwiLFxyXG4gIFwiQklMTElOR19TRUxcIjogXCJCaWxsaW5nIFJvbGUgYWxyZWFkeSBTZWxlY3RlZFwiLFxyXG4gIFwiSU1QT1JURVJfU0VMXCI6IFwiSW1wb3J0ZXIgUm9sZSBhbHJlYWR5IFNlbGVjdGVkXCIsXHJcbiAgXCJSRVBQUklNX1NFTFwiOiBcIlJFUCBQcmltYXJ5IFJvbGUgYWxyZWFkeSBTZWxlY3RlZFwiLFxyXG4gIFwiUkVQQUxUX1NFTFwiOiBcIlJFUCBBbHRlcm5hdGUgUm9sZSBhbHJlYWR5IFNlbGVjdGVkXCIsXHJcbiAgXCJNU0dfTEVOR1RIX01JTjVcIjogXCJQbGVhc2UgZW50ZXIgYXQgbGVhc3QgNSBjaGFyYWN0ZXJzXCIsXHJcbiAgXCJNU0dfTEVOR1RIXzZcIjogXCJQbGVhc2UgZW50ZXIgNiBjaGFyYWN0ZXJzLlwiLFxyXG4gIFwiTVNHX0xFTkdUSF82TlVNXCI6IFwiUGxlYXNlIGVudGVyIDYgZGlnaXRzLlwiLFxyXG4gIFwiTVNHX0xFTkdUSF84TlVNXCI6IFwiUGxlYXNlIGVudGVyIDggZGlnaXRzLlwiLFxyXG4gIFwiTVNHX0xFTkdUSF83XCI6IFwiUGxlYXNlIGVudGVyIDcgY2hhcmFjdGVycy5cIixcclxuICBcIk1TR19MRU5HVEhfN05VTVwiOiBcIlBsZWFzZSBlbnRlciA3IGRpZ2l0cy5cIixcclxuICBcIk1TR19FUlJfT05FX1JFUFwiOiBcIkF0IGxlYXN0IG9uZSBjb250YWN0IGlzIHJlcXVpcmVkLlwiLFxyXG4gIFwiTVNHX0VSUl9PTkVfTElGRV9SRUNcIjogXCJPbmUgbGlmZWN5Y2xlIHJlY29yZCBpcyByZXF1aXJlZC5cIixcclxuICBcIk1TR19FUlJfUkFUSU9OQUxFX1NFTFwiOiBcIlBsZWFzZSBzZWxlY3QgYXQgbGVhc3Qgb25lIHJhdGlvbmFsZS5cIixcclxuICBcIk1TR19FUlJfTk9USUZfU0VMXCI6IFwiUGxlYXNlIHNlbGVjdCBhdCBsZWFzdCBvbmUgbm90aWZpYWJsZSBjaGFuZ2UuXCJcclxufSk7XG5cbiR0cmFuc2xhdGVQcm92aWRlci50cmFuc2xhdGlvbnMoXCJmclwiLCB7XHJcbiAgXCJNU0dfRVJSX01BTkRcIjogXCJDZSBjaGFtcCBlc3Qgb2JsaWdhdG9pcmUuXCIsXHJcbiAgXCJNU0dfRVJSX0VNQUlMX0ZPUk1BVFwiOiBcIlZldWlsbGV6IGZvdXJuaXIgdW5lIGFkcmVzc2Ugw6lsZWN0cm9uaXF1ZSB2YWxpZGUuXCIsXHJcbiAgXCJNU0dfRVJSX0NPTlRBQ1RfTlVNXCI6IFwiZnJfQWxsIHRoZSByb2xlcyBoYXZlIHRvIGJlIHVzZWQgZm9yIHRoZSBjb21wYW55IGNvbnRhY3RzXCIsXHJcbiAgXCJNU0dfRVJSX1BIT05FX0ZPUk1BVFwiOiBcImZyX1BsZWFzZSBzcGVjaWZ5IGEgdmFsaWQgcGhvbmUgbnVtYmVyXCIsXHJcbiAgXCJNU0dfRVJSX0FMTFJPTEVcIjogXCJmcl9BY3Jvc3MgdGhlIGNvbnRhY3QgcmVjb3JkcywgdGhlIHJvbGVzIG9mIG1hbnVmYWN0dXJlciwgbWFpbGluZywgYmlsbGluZywgYW5kIFJFUCBwcmltYXJ5IGNvbnRhY3QgbXVzdCBiZSBzZWxlY3RlZFwiLFxyXG4gIFwiTVNHX0VSUl9BRERSRVNTU1JPTEVcIjogXCJmcl9UaGUgcm9sZXMgb2YgbWFudWZhY3R1cmVyLCBtYWlsaW5nLCBhbmQgYmlsbGluZyBoYXZlIG5vdCBhbGwgYmVlbiBzZWxlY3RlZCBhbW9uZyB0aGUgbGlzdCBvZiBhZGRyZXNzZXNcIixcclxuICBcIk1TR19FUlJfUE9TVEFMXCI6IFwiZnJfUGxlYXNlIHNwZWNpZnkgYSB2YWxpZCBwb3N0YWwgY29kZS5cIixcclxuICBcIk1TR19FUlJfWklQXCI6IFwiZnJfUGxlYXNlIHNwZWNpZnkgYSB2YWxpZCB6aXAgY29kZS5cIixcclxuICBcIk1TR19FUlJfREFURV9GT1JNQVRcIjogXCJmcl9UaGUgZGF0ZSBmb3JtYXQgaXMgaW5jb3JyZWN0LlwiLFxyXG4gIFwiTUFOVUZBQ1RfU0VMXCI6IFwiZnJfTWFudWZhY3R1cmVyIFJvbGUgYWxyZWFkeSBTZWxlY3RlZFwiLFxyXG4gIFwiTUFJTF9TRUxcIjogXCJmcl9NYWlsaW5nIFJvbGUgYWxyZWFkeSBTZWxlY3RlZFwiLFxyXG4gIFwiQklMTElOR19TRUxcIjogXCJmcl9CaWxsaW5nIFJvbGUgYWxyZWFkeSBTZWxlY3RlZFwiLFxyXG4gIFwiSU1QT1JURVJfU0VMXCI6IFwiZnJfSW1wb3J0ZXIgUm9sZSBhbHJlYWR5IFNlbGVjdGVkXCIsXHJcbiAgXCJSRVBQUklNX1NFTFwiOiBcImZyX1JFUCBQcmltYXJ5IFJvbGUgYWxyZWFkeSBTZWxlY3RlZFwiLFxyXG4gIFwiUkVQQUxUX1NFTFwiOiBcImZyX1JFUCBBbHRlcm5hdGUgUm9sZSBhbHJlYWR5IFNlbGVjdGVkXCIsXHJcbiAgXCJNU0dfTEVOR1RIX01JTjVcIjogXCJmcl9QbGVhc2UgZW50ZXIgYXQgbGVhc3QgNSBkaWdpdHNcIixcclxuICBcIk1TR19MRU5HVEhfNlwiOiBcImZyX1BsZWFzZSBlbnRlciA2IGNoYXJhY3RlcnMuXCIsXHJcbiAgXCJNU0dfTEVOR1RIXzZOVU1cIjogXCJmcl9QbGVhc2UgZW50ZXIgNiBkaWdpdHMuXCIsXHJcbiAgXCJNU0dfTEVOR1RIXzhOVU1cIjogXCJmcl9QbGVhc2UgZW50ZXIgOCBkaWdpdHMuXCIsXHJcbiAgXCJNU0dfTEVOR1RIXzdcIjogXCJmcl9QbGVhc2UgZW50ZXIgNyBjaGFyYWN0ZXJzLlwiLFxyXG4gIFwiTVNHX0xFTkdUSF83TlVNXCI6IFwiZnJfUGxlYXNlIGVudGVyIDcgZGlnaXRzLlwiLFxyXG4gIFwiTVNHX0VSUl9PTkVfUkVQXCI6IFwiZnJfQXQgbGVhc3Qgb25lIGNvbnRhY3QgaXMgcmVxdWlyZWQuXCIsXHJcbiAgXCJNU0dfRVJSX09ORV9MSUZFX1JFQ1wiOiBcImZyX09uZSBsaWZlY3ljbGUgcmVjb3JkIGlzIHJlcXVpcmVkLlwiLFxyXG4gIFwiTVNHX0VSUl9SQVRJT05BTEVfU0VMXCI6IFwiZnJfUGxlYXNlIHNlbGVjdCBhdCBsZWFzdCBvbmUgcmF0aW9uYWxlLlwiLFxyXG4gIFwiTVNHX0VSUl9OT1RJRl9TRUxcIjogXCJmcl9QbGVhc2Ugc2VsZWN0IGF0IGxlYXN0IG9uZSBub3RpZmlhYmxlIGNoYW5nZS5cIlxyXG59XHJcbik7XG5cbiR0cmFuc2xhdGVQcm92aWRlci50cmFuc2xhdGlvbnMoXCJlblwiLCB7XHJcbiAgXCJGSVJTVF9OQU1FXCI6IFwiRmlyc3QgTmFtZVwiLFxyXG4gIFwiTEFTVF9OQU1FXCI6IFwiTGFzdCBOYW1lXCIsXHJcbiAgXCJJTklUSUFMU1wiOiBcIkluaXRpYWxzXCIsXHJcbiAgXCJMQU5HVUFHRV9DT1JSRVNQT05ERU5DRVwiOiBcIkxhbmd1YWdlIG9mIENvcnJlc3BvbmRhbmNlXCIsXHJcbiAgXCJKT0JfVElUTEVcIjogXCJKb2IgVGl0bGVcIixcclxuICBcIlNBTFVUQVRJT05cIjogXCJTYWx1dGF0aW9uXCIsXHJcbiAgXCJTQUxVVF9NUlwiOiBcIk1yLlwiLFxyXG4gIFwiU0FMVVRfTVNcIjogXCJNcy5cIixcclxuICBcIlNBTFVUX0RSXCI6IFwiRHIuXCIsXHJcbiAgXCJTQUxVVF9NUlNcIjogXCJNcnMuXCIsXHJcbiAgXCJST0xFX1BSSU1BUllcIjogXCJQcmltYXJ5XCIsXHJcbiAgXCJST0xFX1NFQ09OREFSWVwiOiBcIkFsdGVybmF0ZVwiLFxyXG4gIFwiRU1BSUxcIjogIFwiRW1haWxcIixcclxuICBcIkZBWF9OVU1CRVJcIjogXCJGYXggTnVtYmVyXCIsXHJcbiAgXCJQSE9ORV9FWFRcIjogXCJQaG9uZSBFeHRlbnNpb25cIixcclxuICBcIlJPTEVTXCI6IFwiUm9sZXNcIixcclxuICBcIlBIT05FX05VTUJFUlwiOiBcIlBob25lIE51bWJlclwiLFxyXG4gIFwiQ09OVEFDVF9JTkZPXCI6IFwiQ29tcGFueSBSZXByZXNlbnRhdGl2ZSBJbmZvcm1hdGlvblwiLFxyXG4gIFwiQU1FTkRcIjogXCJBbWVuZFwiLFxyXG4gIFwiUkVQX0NPTlRBQ1RcIjogIFwiUkVQIENvbnRhY3RcIixcclxuICBcIk9ORV9ST0xFXCI6IFwiUm9sZVwiLFxyXG4gIFwiQ09OVEFDVF9ERVRBSUxTXCI6IFwiQ29tcGFueSBSZXByZXNlbnRhdGl2ZSBEZXRhaWxzXCIsXHJcbiAgXCJBRERfQ09OVEFDVFwiOiBcIkFkZCBSRVAgQ29udGFjdFwiLFxyXG4gIFwiQ09OVEFDVF9ST0xFX0xFR0VORFwiOiBcIlNlbGVjdCBvbmUgb3IgbW9yZSByb2xlcyBmb3IgdGhpcyBjb21wYW55IHJlcHJlc2VudGF0aXZlXCIsXHJcbiAgXCJBRERfUkVQUkVTXCI6IFwiQWRkIENvbXBhbnkgUmVwcmVzZW50YXRpdmVcIixcclxuICBcIkRFTEVURV9SRVBSRVNcIjogXCJEZWxldGUgQ29tcGFueSBSZXAuXCIsXHJcbiAgXCJTQVZFX1JFUFJFU1wiOiBcIlNhdmUgQ29tcGFueSBSZXAuXCJcclxufSk7XG5cbiR0cmFuc2xhdGVQcm92aWRlci50cmFuc2xhdGlvbnMoXCJmclwiLCB7XHJcbiAgXCJGSVJTVF9OQU1FXCI6IFwiUHLDqW5vbVwiLFxyXG4gIFwiTEFTVF9OQU1FXCI6IFwiTm9tXCIsXHJcbiAgXCJJTklUSUFMU1wiOiBcIkluaXRpYWxzXCIsXHJcbiAgXCJMQU5HVUFHRV9DT1JSRVNQT05ERU5DRVwiOiBcIkxhbmd1ZSBkZSBDb3JyZXNwb25kYW5jZVwiLFxyXG4gIFwiSk9CX1RJVExFXCI6IFwiSm9iIFRpdGxlXCIsXHJcbiAgXCJTQUxVVEFUSU9OXCI6IFwiVGl0cmUgZGUgY2l2aWxpdMOpXCIsXHJcbiAgXCJTQUxVVF9NUlwiOiBcIk0uXCIsXHJcbiAgXCJTQUxVVF9NU1wiOiBcIk1tZVwiLFxyXG4gIFwiU0FMVVRfRFJcIjogXCJEci5cIixcclxuICBcIlNBTFVUX01SU1wiOiBcIk1sbGVcIixcclxuICBcIlJPTEVfUFJJTUFSWVwiOiBcIlByaW1haXJlXCIsXHJcbiAgXCJST0xFX1NFQ09OREFSWVwiOiBcIkFsdGVybmVyXCIsXHJcbiAgXCJFTUFJTFwiOiBcIkNvdXJyaWVsXCIsXHJcbiAgXCJGQVhfTlVNQkVSXCI6IFwiTnVtw6lybyBkZSB0w6lsw6ljb3BpZXVyXCIsXHJcbiAgXCJQSE9ORV9FWFRcIjogXCJOdW3DqXJvIGRlIHBvc3RlXCIsXHJcbiAgXCJBRERSX1JPTEVTXCI6XCJmcl9Sb2xlc1wiLFxyXG4gIFwiUEhPTkVfTlVNQkVSXCI6IFwiTnVtw6lybyBkZSB0w6lsw6lwaG9uZVwiLFxyXG4gIFwiQ09OVEFDVF9JTkZPXCI6IFwiZnJfQ29tcGFueSBSZXByZXNlbnRhdGl2ZSBJbmZvcm1hdGlvblwiLFxyXG4gIFwiQU1FTkRcIjogXCJmcl9BbWVuZFwiLFxyXG4gIFwiUkVQX0NPTlRBQ1RcIjogIFwiZnJfUkVQIENvbnRhY3RcIixcclxuICBcIk9ORV9ST0xFXCI6IFwiZnJfUm9sZVwiLFxyXG4gIFwiQ09OVEFDVF9ERVRBSUxTXCI6IFwiZnJfQ29tcGFueSBSZXByZXNlbnRhdGl2ZSBEZXRhaWxzXCIsXHJcbiAgXCJBRERfQ09OVEFDVFwiOiBcImZyX0FkZCBSRVAgQ29udGFjdFwiLFxyXG4gIFwiQ09OVEFDVF9ST0xFX0xFR0VORFwiOiBcImZyX1NlbGVjdCBvbmUgb3IgbW9yZSByb2xlcyBmb3IgdGhpcyBjb21wYW55IHJlcHJlc2VudGF0aXZlXCJcclxufSk7XG59XSk7XG4iLCIvKipcclxuICogQ3JlYXRlZCBieSBka2lsdHkgb24gOS8xLzIwMTYuXHJcbiAqL1xyXG5cclxuXHJcbihmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ251bWJlckZvcm1hdCcsIFtdKTtcclxuXHJcbn0pKCk7XHJcbi8qKipcclxuICogRGlyZWN0aXZlIGZvciByZXN0cmljdGluZyB1c2VyIGlucHV0IHRvIG51bWJlcnNcclxuICogT3B0aW9uczogdXNlIG9ubHktbWF4IHRvIGluZGljYXRlIHRoZSBudW1iZXIgb2YgZGlnaXRzIChpbnRlZ2VyKVxyXG4gKiAgdXNlIGZsYWcgaW50TmVnIChpZSAgb25seS1kaWdpdHM9XCJpbnROZWdcIikgdG8gaW5kaWNhdGUgdG8gYWxsb3cgbmVnYXRpdmUgbnVtYmVyc1xyXG4gKiAgQ3VycmVudGx5IHRoaXMgZGlyZWN0aXZlIG9ubHkgc3VwcG9ydHMgaW50ZWdlcnNcclxuICovXHJcbihmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ251bWJlckZvcm1hdCcpXHJcbiAgICAgICAgLmRpcmVjdGl2ZSgnb25seURpZ2l0cycsIGRpZ2l0c0N0cmwpO1xyXG5cclxuICAgIGZ1bmN0aW9uIGRpZ2l0c0N0cmwoKSB7XHJcbiAgICAgICAgdmFyIGRpcmVjdGl2ZSA9IHtcclxuXHJcbiAgICAgICAgICAgIGxpbms6IGxpbmssXHJcbiAgICAgICAgICAgIHJlc3RyaWN0OiAnQScsXHJcbiAgICAgICAgICAgIHJlcXVpcmU6ICc/bmdNb2RlbCdcclxuICAgICAgICB9O1xyXG4gICAgICAgIHJldHVybiBkaXJlY3RpdmU7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGxpbmsoc2NvcGUsIGVsZW1lbnQsIGF0dHJzLCBtb2RlbEN0cmwpIHtcclxuICAgICAgICAgICAgbW9kZWxDdHJsLiRwYXJzZXJzLnB1c2goZnVuY3Rpb24gKGlucHV0VmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIGlmIChpbnB1dFZhbHVlID09IHVuZGVmaW5lZCkgcmV0dXJuICcnO1xyXG4gICAgICAgICAgICAgICAgdmFyIGlzTnVtYmVyID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB2YXIgbWF4ID0gLTE7XHJcbiAgICAgICAgICAgICAgICB2YXIgaWdub3JlID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB2YXIgdGVtcFZhbCA9IFwiXCIgKyBpbnB1dFZhbHVlO1xyXG4gICAgICAgICAgICAgICAgaWYgKGF0dHJzWyd0eXBlJ10gJiYgYXR0cnNbJ3R5cGUnXSA9PT0gJ251bWJlcicpIHtcclxuICAgICAgICAgICAgICAgICAgICBpc051bWJlciA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGF0dHJzWydvbmx5TWF4J10pIHtcclxuICAgICAgICAgICAgICAgICAgICBtYXggPSBwYXJzZUludChhdHRyc1snb25seU1heCddKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHZhciByZWdleEludE5lZyA9IC9bXjAtOS1dL2c7XHJcbiAgICAgICAgICAgICAgICB2YXIgaW50ZWdlclJlZyA9IC9bXjAtOV0vZzsgLy9kZWZhdWx0XHJcbiAgICAgICAgICAgICAgICB2YXIgcmVnZXhWYWx1ZSA9IGludGVnZXJSZWc7XHJcbiAgICAgICAgICAgICAgICBpZiAoYXR0cnNbJ29ubHlEaWdpdHMnXSA9PSAnaW50TmVnJykge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlZ2V4VmFsdWUgPSByZWdleEludE5lZztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoYXR0cnNbJ29ubHlEaWdpdHMnXT09PSdmYWxzZScpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZ25vcmU9dHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlZ2V4VmFsdWUgPSBpbnRlZ2VyUmVnO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGlnbm9yZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpbnB1dFZhbHVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdmFyIHRyYW5zZm9ybWVkSW5wdXQgPSB0ZW1wVmFsLnJlcGxhY2UocmVnZXhWYWx1ZSwgJycpO1xyXG4gICAgICAgICAgICAgICAgaWYgKG1heCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICB0cmFuc2Zvcm1lZElucHV0ID0gdHJhbnNmb3JtZWRJbnB1dC5zdWJzdHJpbmcoMCwgbWF4KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh0cmFuc2Zvcm1lZElucHV0ICE9PSB0ZW1wVmFsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzTnVtYmVyICYmIHRyYW5zZm9ybWVkSW5wdXQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNmb3JtZWRJbnB1dCA9IHBhcnNlRmxvYXQodHJhbnNmb3JtZWRJbnB1dClcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgbW9kZWxDdHJsLiRzZXRWaWV3VmFsdWUodHJhbnNmb3JtZWRJbnB1dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgbW9kZWxDdHJsLiRyZW5kZXIoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiB0cmFuc2Zvcm1lZElucHV0O1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG59KSgpO1xyXG5cclxuXHJcblxyXG4iLCIvKipcclxuICogQ3JlYXRlZCBieSBoY3VzZXIgb24gMDcvMDYvMjAxNi5cclxuICovXHJcbihmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ2hwZmJDb25zdGFudHMnLCBbXSk7XHJcblxyXG4gICAgYW5ndWxhci5tb2R1bGUoJ2hwZmJDb25zdGFudHMnKVxyXG4gICAgICAgIC5jb25zdGFudCgnQ0FOQURBJywnQ0FOJylcclxuICAgICAgICAuY29uc3RhbnQoJ09USEVSJywgJ09USEVSJylcclxuICAgICAgICAuY29uc3RhbnQoJ1lFUycsICdZJylcclxuICAgICAgICAuY29uc3RhbnQoJ05PJywgJ04nKVxyXG4gICAgICAgIC5jb25zdGFudCgnVVNBJywnVVNBJylcclxuICAgICAgICAuY29uc3RhbnQoXCJVTktOT1dOXCIsXCJVTktOT1dOXCIpXHJcbiAgICAgICAgLmNvbnN0YW50KFwiRU5HTElTSFwiLFwiZW5cIilcclxuICAgICAgICAuY29uc3RhbnQoXCJGUkVOQ0hcIixcImZyXCIpXHJcbiAgICAgICAgLmNvbnN0YW50KFwiTkVXX1RZUEVcIixcIk5FV1wiKVxyXG4gICAgICAgIC5jb25zdGFudChcIkFQUFJPVkVEX1RZUEVcIixcIkFQUFJPVkVEXCIpXHJcbiAgICAgICAgLmNvbnN0YW50KFwiQU1FTkRfVFlQRVwiLFwiQU1FTkRcIilcclxuICAgICAgICAuY29uc3RhbnQoXCJJTlRFUk5BTF9UWVBFXCIsXCJJTlRcIilcclxuICAgICAgICAuY29uc3RhbnQoXCJFWFRFUk5BTF9UWVBFXCIsXCJFWFRcIik7XHJcblxyXG59KSgpOyIsIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IGRraWx0eSBvbiAyMi8wOS8yMDE2LlxyXG4gKi9cclxuXHJcblxyXG4oZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ3JlcENvbnRhY3RTZXJ2aWNlJywgW10pXHJcbn0pKCk7XHJcblxyXG5cclxuKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKCdyZXBDb250YWN0U2VydmljZScpXHJcbiAgICAgICAgLmZhY3RvcnkoJ1JlcENvbnRhY3RTZXJ2aWNlJywgUmVwQ29udGFjdFNlcnZpY2UpO1xyXG5cclxuICAgIGZ1bmN0aW9uIFJlcENvbnRhY3RTZXJ2aWNlKCkge1xyXG5cclxuICAgICAgICAvL2NvbnN0cnVjdG9yXHJcbiAgICAgICAgZnVuY3Rpb24gUmVwQ29udGFjdFNlcnZpY2UoKSB7XHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgUmVwQ29udGFjdFNlcnZpY2UucHJvdG90eXBlID0ge1xyXG4gICAgICAgICAgICBfZGVmYXVsdDoge31cclxuICAgICAgICB9O1xyXG4gICAgICAgIFJlcENvbnRhY3RTZXJ2aWNlLnByb3RvdHlwZS5nZXRQcmltYXJ5Um9sZT1mdW5jdGlvbigpe1xyXG4gICAgICAgICAgICByZXR1cm4gXCJQUklNQVJZXCI7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBSZXBDb250YWN0U2VydmljZS5wcm90b3R5cGUuZ2V0U2Vjb25kYXJ5Um9sZT1mdW5jdGlvbigpe1xyXG4gICAgICAgICAgICByZXR1cm4gXCJTRUNPTkRBUllcIjtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBSZXBDb250YWN0U2VydmljZS5wcm90b3R5cGUuY3JlYXRlUmVwQ29udGFjdCA9IGZ1bmN0aW9uKHJlcENvbnRhY3RMaXN0KXtcclxuICAgICAgICAgICAgaWYoIXJlcENvbnRhY3RMaXN0KSByZXR1cm47XHJcbiAgICAgICAgICAgIHZhciBQUklNQVJZPXRoaXMuZ2V0UHJpbWFyeVJvbGUoKTtcclxuICAgICAgICAgICAgdmFyIFNFQ09OREFSWT10aGlzLmdldFNlY29uZGFyeVJvbGUoKTtcclxuICAgICAgICAgICAgdmFyIGNvbnRhY3QgPSBfY3JlYXRlRGVmYXVsdFJlcENvbnRhY3QoKTtcclxuXHJcbiAgICAgICAgICAgIHZhciBjdXJyZW50Q29udGFjdHMgPSByZXBDb250YWN0TGlzdDtcclxuICAgICAgICAgICAgaWYgKGN1cnJlbnRDb250YWN0cy5sZW5ndGggPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgY29udGFjdC5yZXBSb2xlID0gUFJJTUFSWTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNvbnRhY3QucmVwUm9sZSA9IFBSSU1BUlk7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGN1cnJlbnRDb250YWN0cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjdXJyZW50Q29udGFjdHNbaV0ucmVwUm9sZSA9PSBQUklNQVJZKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRhY3QucmVwUm9sZSA9IFNFQ09OREFSWTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBjb250YWN0XHJcbiAgICAgICAgfTtcclxuXHJcblxyXG4gICAgICAgIHJldHVybiBSZXBDb250YWN0U2VydmljZTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIGEgZGVmYXVsdCBSRVAgY29udGFjdCB3aXRoIG5vIHJvbGUgYXNzaWduZWRcclxuICAgICAqIEByZXR1cm5zIHsqfVxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gX2NyZWF0ZURlZmF1bHRSZXBDb250YWN0KCl7XHJcblxyXG4gICAgICAgIHZhciByZXBjb250YWN0PSAgX2NyZWF0ZUNvbnRhY3RNb2RlbCgpO1xyXG4gICAgICAgIHJlcGNvbnRhY3QucmVwUm9sZSA9IFwiXCI7XHJcbiAgICAgICAgcmVwY29udGFjdC5hbWVuZD1mYWxzZTtcclxuICAgICAgICByZXR1cm4gcmVwY29udGFjdFxyXG4gICAgfVxyXG5cclxuXHJcbiAgICBmdW5jdGlvbiBfY3JlYXRlQ29udGFjdE1vZGVsKCkge1xyXG4gICAgICAgIHZhciBjb250YWN0ID0ge307XHJcbiAgICAgICAgY29udGFjdC5zYWx1dGF0aW9uID0gXCJcIjtcclxuICAgICAgICBjb250YWN0LmdpdmVuTmFtZSA9IFwiXCI7XHJcbiAgICAgICAgY29udGFjdC5pbml0aWFscyA9IFwiXCI7XHJcbiAgICAgICAgY29udGFjdC5zdXJuYW1lID0gXCJcIjtcclxuICAgICAgICBjb250YWN0LnRpdGxlID0gXCJcIjtcclxuICAgICAgICBjb250YWN0Lmxhbmd1YWdlID0gXCJcIjtcclxuICAgICAgICBjb250YWN0LnBob25lID0gXCJcIjtcclxuICAgICAgICBjb250YWN0LnBob25lRXh0ID0gXCJcIjtcclxuICAgICAgICBjb250YWN0LmZheCA9IFwiXCI7XHJcbiAgICAgICAgY29udGFjdC5lbWFpbCA9IFwiXCI7XHJcbiAgICAgICAgcmV0dXJuIGNvbnRhY3Q7XHJcbiAgICB9XHJcblxyXG5cclxuXHJcbn0pKCk7XHJcbiIsIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IGRraWx0eSBvbiAwNy8wNi8yMDE2LlxyXG4gKlxyXG4gKi9cclxuXHJcbihmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgnZmlsdGVyTGlzdHMnLCBbJ2hwZmJDb25zdGFudHMnXSk7XHJcbn0pKCk7XHJcblxyXG4oZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKCdmaWx0ZXJMaXN0cycpXHJcbiAgICAgICAgLmZpbHRlcignb3JkZXJCeVRyYW5zbGF0ZWRDb3VudHJ5Jywgb3JkZXJCeVRyYW5zbGF0ZWRDb3VudHJ5KVxyXG4gICAgICAgIC5maWx0ZXIoJ29yZGVyQnlUcmFuc2xhdGVkJywgb3JkZXJCeVRyYW5zbGF0ZWQpXHJcbiAgICAgICAgLmZpbHRlcignb3JkZXJCeVRyYW5zbGF0ZWRPdGhlckZpcnN0Jywgb3JkZXJCeVRyYW5zbGF0ZWRPdGhlckZpcnN0KVxyXG4gICAgICAgIC5maWx0ZXIoJ29yZGVyQnlDb3VudHJ5QW5kTGFiZWwnLCBvcmRlckJ5VHJhbnNsYXRlZENvdW50cnlBbmRMYWJlbClcclxuICAgICAgICAuZmlsdGVyKCdvcmRlckJ5TG9jYWxlJyxfb3JkZXJCeUxvY2FsZSlcclxuICAgICAgICAuZmlsdGVyKCdmaW5kQ291bnRyeU9iamVjdCcsIGZpbmRDb3VudHJ5T2JqKVxyXG4gICAgICAgIC5maWx0ZXIoJ3NlcXVlbmNlT3JkZXJEZXNjZW5kaW5nJywgc2VxdWVuY2VPcmRlckJ5KTtcclxuXHJcbiAgICBvcmRlckJ5VHJhbnNsYXRlZENvdW50cnkuJGluamVjdCA9IFsnJHRyYW5zbGF0ZScsICckZmlsdGVyJywgJ0NBTkFEQScsICdVU0EnXTtcclxuICAgIG9yZGVyQnlUcmFuc2xhdGVkLiRpbmplY3QgPSBbJyR0cmFuc2xhdGUnLCAnJGZpbHRlciddO1xyXG4gICAgb3JkZXJCeVRyYW5zbGF0ZWRPdGhlckZpcnN0LiRpbmplY3QgPSBbJyR0cmFuc2xhdGUnLCAnJGZpbHRlcicsICdPVEhFUiddO1xyXG5cclxuICAgIGZ1bmN0aW9uIG9yZGVyQnlUcmFuc2xhdGVkQ291bnRyeSgkdHJhbnNsYXRlLCAkZmlsdGVyLCBDQU5BREEsIFVTQSkge1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoYXJyYXksIG9iaktleSkge1xyXG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gW107XHJcbiAgICAgICAgICAgIHZhciB0cmFuc2xhdGVkID0gW107XHJcbiAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaChhcnJheSwgZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICB0cmFuc2xhdGVkLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgIGtleTogdmFsdWUsXHJcbiAgICAgICAgICAgICAgICAgICAgbGFiZWw6ICR0cmFuc2xhdGUuaW5zdGFudCh2YWx1ZSlcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgcmVzdWx0LnB1c2goQ0FOQURBKTtcclxuICAgICAgICAgICAgcmVzdWx0LnB1c2goVVNBKTtcclxuICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKCRmaWx0ZXIoJ29yZGVyQnknKSh0cmFuc2xhdGVkLCAnbGFiZWwnKSwgZnVuY3Rpb24gKHNvcnRlZE9iamVjdCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHNvcnRlZE9iamVjdC5rZXkgIT09IENBTkFEQSAmJiBzb3J0ZWRPYmplY3Qua2V5ICE9PSBVU0EpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaChzb3J0ZWRPYmplY3Qua2V5KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIE9yZGVycyBjb3VudHJ5IGxpc3QgYnkgdHJhbnNsYXRlZCB2YWx1ZSBhbmQgY3JlYXRlcyBhIGxpc3Qgb2Ygc2F2ZWQgYW5kIGRpc3BsYXllZCB2YWx1ZVxyXG4gICAgICogQHBhcmFtICR0cmFuc2xhdGVcclxuICAgICAqIEBwYXJhbSAkZmlsdGVyXHJcbiAgICAgKiBAcGFyYW0gQ0FOQURBXHJcbiAgICAgKiBAcGFyYW0gVVNBXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIG9yZGVyQnlUcmFuc2xhdGVkQ291bnRyeUFuZExhYmVsKCR0cmFuc2xhdGUsICRmaWx0ZXIsIENBTkFEQSwgVVNBKSB7XHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhcnJheSkge1xyXG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gW107XHJcbiAgICAgICAgICAgIHZhciB0cmFuc2xhdGVkID0gW107XHJcbiAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaChhcnJheSwgZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICB0cmFuc2xhdGVkLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgIGtleTogdmFsdWUsXHJcbiAgICAgICAgICAgICAgICAgICAgbGFiZWw6ICR0cmFuc2xhdGUuaW5zdGFudCh2YWx1ZSlcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIC8vdG9wIG9mIHRoZSBsaXN0XHJcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKHtrZXk6IENBTkFEQSwgbGFiZWw6ICR0cmFuc2xhdGUuaW5zdGFudChDQU5BREEpfSk7XHJcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKHtrZXk6IFVTQSwgbGFiZWw6ICR0cmFuc2xhdGUuaW5zdGFudChVU0EpfSk7XHJcbiAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaCgkZmlsdGVyKCdvcmRlckJ5JykodHJhbnNsYXRlZCwgJ2xhYmVsJyksIGZ1bmN0aW9uIChzb3J0ZWRPYmplY3QpIHtcclxuICAgICAgICAgICAgICAgIGlmIChzb3J0ZWRPYmplY3Qua2V5ICE9PSBDQU5BREEgJiYgc29ydGVkT2JqZWN0LmtleSAhPT0gVVNBKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goc29ydGVkT2JqZWN0KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBmaW5kQ291bnRyeU9iaigpIHtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGFycmF5LCB0YXJnZXRLZXkpIHtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnJheS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgaWYgKGFycmF5W2ldLmtleSA9PT0gdGFyZ2V0S2V5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChhcnJheVtpXSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7IC8vbm90IGZvdW5kXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgZnVuY3Rpb24gb3JkZXJCeVRyYW5zbGF0ZWQoJHRyYW5zbGF0ZSwgJGZpbHRlcikge1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoYXJyYXkpIHtcclxuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IFtdO1xyXG4gICAgICAgICAgICB2YXIgdHJhbnNsYXRlZCA9IFtdO1xyXG4gICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goYXJyYXksIGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgdHJhbnNsYXRlZC5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICBrZXk6IHZhbHVlLFxyXG4gICAgICAgICAgICAgICAgICAgIGxhYmVsOiAkdHJhbnNsYXRlLmluc3RhbnQodmFsdWUpXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaCgkZmlsdGVyKCdvcmRlckJ5JykodHJhbnNsYXRlZCwgJ2xhYmVsJyksIGZ1bmN0aW9uIChzb3J0ZWRPYmplY3QpIHtcclxuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHNvcnRlZE9iamVjdC5rZXkpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHNlcXVlbmNlT3JkZXJCeSgkZmlsdGVyKSB7XHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhcnJheSkge1xyXG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gW107XHJcbiAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaCgkZmlsdGVyKCdvcmRlckJ5JykoYXJyYXksICdzZXF1ZW5jZScsIHRydWUpLCBmdW5jdGlvbiAoc29ydGVkT2JqZWN0KSB7XHJcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaChzb3J0ZWRPYmplY3QpO1xyXG5cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICAvKlxyXG4gICAgIE9yZGVycyB2YWx1ZXNcclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gb3JkZXJCeVRyYW5zbGF0ZWRPdGhlckZpcnN0KCR0cmFuc2xhdGUsICRmaWx0ZXIsIE9USEVSKSB7XHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhcnJheSkge1xyXG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gW107XHJcbiAgICAgICAgICAgIHZhciB0cmFuc2xhdGVkID0gW107XHJcbiAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaChhcnJheSwgZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICB0cmFuc2xhdGVkLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgIGtleTogdmFsdWUsXHJcbiAgICAgICAgICAgICAgICAgICAgbGFiZWw6ICR0cmFuc2xhdGUuaW5zdGFudCh2YWx1ZSlcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgcmVzdWx0LnB1c2goT1RIRVIpO1xyXG4gICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goJGZpbHRlcignb3JkZXJCeScpKHRyYW5zbGF0ZWQsICdsYWJlbCcpLCBmdW5jdGlvbiAoc29ydGVkT2JqZWN0KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoc29ydGVkT2JqZWN0LmtleSAhPT0gT1RIRVIpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaChzb3J0ZWRPYmplY3Qua2V5KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFNvcnRzIGJ5IGxvY2FsZSBzcGVjaWZpZWQgYnkgYW5ndWxhciB0cmFuc2xhdGVcclxuICAgICAqIEBwYXJhbSAkdHJhbnNsYXRlXHJcbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259XHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBfb3JkZXJCeUxvY2FsZSgpIHtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGl0ZW1zLGxhbmcpIHtcclxuXHJcbiAgICAgICAgICAgIGl0ZW1zLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBhW2xhbmddLmxvY2FsZUNvbXBhcmUoYltsYW5nXSxsYW5nKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHJldHVybiBpdGVtcztcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICB9KSgpOyIsIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IGRraWx0eSBvbiA2LzQvMjAxNi5cclxuICovXHJcblxyXG4vKipcclxuICogQG5nZG9jIG1vZHVsZSBkZWNsYXJhdGlvbiBmb3IgZGF0YWxpc3RzXHJcbiAqL1xyXG4oZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKCdkYXRhTGlzdHMnLCBbJ2hwZmJDb25zdGFudHMnXSk7XHJcblxyXG59KSgpO1xyXG5cclxuLyoqXHJcbiAqIGdldENvdW50cnlBbmRQcm92aW5jZXMgc2VydmljZXNcclxuICogUmV0dXJucyBDYW5hZGEgb3IgVVMgY29uZGVzLCBjYW5hZGEgcHJvdmluY2VzLCB1cyBzdGF0ZXNcclxuICovXHJcbihmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ2RhdGFMaXN0cycpXHJcbiAgICAgICAgLmZhY3RvcnkoJ2dldENvdW50cnlBbmRQcm92aW5jZXMnLCBnZXRTZXJ2aWNlKTtcclxuXHJcbiAgICAvKiBAbmdJbmplY3QgKi9cclxuICAgIGdldFNlcnZpY2UuaW5qZWN0ID0gWydVTktOT1dOJ107XHJcbiAgICBmdW5jdGlvbiBnZXRTZXJ2aWNlKFVOS05PV04pIHtcclxuICAgICAgICB2YXIgdm0gPSB0aGlzO1xyXG4gICAgICAgIHZtLmNvdW50cnlMaXN0ID0gW107XHJcbiAgICAgICAgdmFyIHNlcnZpY2UgPSB7XHJcbiAgICAgICAgICAgIGdldENvdW50cmllczogZ2V0Q291bnRyeVZhbHVlc0FycmF5LFxyXG4gICAgICAgICAgICBnZXRQcm92aW5jZXM6IGdldFByb3ZpbmNlVmFsdWVzQXJyYXksXHJcbiAgICAgICAgICAgIGdldFVTU3RhdGVzOiBnZXRVU1N0YXRlc1ZhbHVlQXJyYXksXHJcbiAgICAgICAgICAgIGNyZWF0ZUNvdW50cnlMaXN0OiBfY3JlYXRlQ291bnRyeUFycmF5LFxyXG4gICAgICAgICAgICBnZXRVbmtub3duQ291bnRyeVJlY29yZDogX2dldFVua25vd25Db3VudHJ5UmVjXHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4gc2VydmljZTtcclxuXHJcbiAgICAgICAgLy8vLy8vLy8vLy8vLy8vL1xyXG5cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gX2NyZWF0ZUNvdW50cnlBcnJheSh0cmFuc2xhdGVKc29uKSB7XHJcbiAgICAgICAgICAgIHZtLmNvdW50cnlMaXN0ID0gdHJhbnNsYXRlSnNvbjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIF9nZXRVbmtub3duQ291bnRyeVJlYygpIHtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIFwiaWRcIjogVU5LTk9XTixcclxuICAgICAgICAgICAgICAgIFwiZW5cIjogXCJVbmtub3duXCIsXHJcbiAgICAgICAgICAgICAgICBcImZyXCI6IFwiSW5jb25udVwiXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy90b2RvIHdoeSBpcyB0aGlzIGxpc3RlZCB0d2ljZT9cclxuICAgICAgICBmdW5jdGlvbiBnZXRDb3VudHJ5VmFsdWVzQXJyYXkoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB2bS5jb3VudHJ5TGlzdDtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICBmdW5jdGlvbiBnZXRQcm92aW5jZVZhbHVlc0FycmF5KCkge1xyXG4gICAgICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICAgICAgW1xyXG4gICAgICAgICAgICAgICAgICAgICdBQicsXHJcbiAgICAgICAgICAgICAgICAgICAgJ0JDJyxcclxuICAgICAgICAgICAgICAgICAgICAnTUInLFxyXG4gICAgICAgICAgICAgICAgICAgICdOQicsXHJcbiAgICAgICAgICAgICAgICAgICAgJ05MJyxcclxuICAgICAgICAgICAgICAgICAgICAnTlQnLFxyXG4gICAgICAgICAgICAgICAgICAgICdOUycsXHJcbiAgICAgICAgICAgICAgICAgICAgJ05VJyxcclxuICAgICAgICAgICAgICAgICAgICAnT04nLFxyXG4gICAgICAgICAgICAgICAgICAgICdQRScsXHJcbiAgICAgICAgICAgICAgICAgICAgJ1FDJyxcclxuICAgICAgICAgICAgICAgICAgICAnU0snLFxyXG4gICAgICAgICAgICAgICAgICAgICdZVCdcclxuICAgICAgICAgICAgICAgIF1cclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGdldFVTU3RhdGVzVmFsdWVBcnJheSgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgICAgIFtcclxuICAgICAgICAgICAgICAgICAgICAnQUwnLFxyXG4gICAgICAgICAgICAgICAgICAgICdBSycsXHJcbiAgICAgICAgICAgICAgICAgICAgJ0FaJyxcclxuICAgICAgICAgICAgICAgICAgICAnQVInLFxyXG4gICAgICAgICAgICAgICAgICAgICdDQScsXHJcbiAgICAgICAgICAgICAgICAgICAgJ0NPJyxcclxuICAgICAgICAgICAgICAgICAgICAnQ1QnLFxyXG4gICAgICAgICAgICAgICAgICAgICdERScsXHJcbiAgICAgICAgICAgICAgICAgICAgJ0RDJyxcclxuICAgICAgICAgICAgICAgICAgICAnRkwnLFxyXG4gICAgICAgICAgICAgICAgICAgICdHQScsXHJcbiAgICAgICAgICAgICAgICAgICAgJ0hJJyxcclxuICAgICAgICAgICAgICAgICAgICAnSUQnLFxyXG4gICAgICAgICAgICAgICAgICAgICdJTCcsXHJcbiAgICAgICAgICAgICAgICAgICAgJ0lOJyxcclxuICAgICAgICAgICAgICAgICAgICAnSUEnLFxyXG4gICAgICAgICAgICAgICAgICAgICdLUycsXHJcbiAgICAgICAgICAgICAgICAgICAgJ0tZJyxcclxuICAgICAgICAgICAgICAgICAgICAnTEEnLFxyXG4gICAgICAgICAgICAgICAgICAgICdNRScsXHJcbiAgICAgICAgICAgICAgICAgICAgJ01EJyxcclxuICAgICAgICAgICAgICAgICAgICAnTUEnLFxyXG4gICAgICAgICAgICAgICAgICAgICdNSScsXHJcbiAgICAgICAgICAgICAgICAgICAgJ01OJyxcclxuICAgICAgICAgICAgICAgICAgICAnTVMnLFxyXG4gICAgICAgICAgICAgICAgICAgICdNTycsXHJcbiAgICAgICAgICAgICAgICAgICAgJ01UJyxcclxuICAgICAgICAgICAgICAgICAgICAnTkUnLFxyXG4gICAgICAgICAgICAgICAgICAgICdOVicsXHJcbiAgICAgICAgICAgICAgICAgICAgJ05IJyxcclxuICAgICAgICAgICAgICAgICAgICAnTkonLFxyXG4gICAgICAgICAgICAgICAgICAgICdOTScsXHJcbiAgICAgICAgICAgICAgICAgICAgJ05ZJyxcclxuICAgICAgICAgICAgICAgICAgICAnTkMnLFxyXG4gICAgICAgICAgICAgICAgICAgICdORCcsXHJcbiAgICAgICAgICAgICAgICAgICAgJ09IJyxcclxuICAgICAgICAgICAgICAgICAgICAnT0snLFxyXG4gICAgICAgICAgICAgICAgICAgICdPUicsXHJcbiAgICAgICAgICAgICAgICAgICAgJ1BBJyxcclxuICAgICAgICAgICAgICAgICAgICAnUkknLFxyXG4gICAgICAgICAgICAgICAgICAgICdTQycsXHJcbiAgICAgICAgICAgICAgICAgICAgJ1NEJyxcclxuICAgICAgICAgICAgICAgICAgICAnVE4nLFxyXG4gICAgICAgICAgICAgICAgICAgICdUWCcsXHJcbiAgICAgICAgICAgICAgICAgICAgJ1VUJyxcclxuICAgICAgICAgICAgICAgICAgICAnVlQnLFxyXG4gICAgICAgICAgICAgICAgICAgICdWQScsXHJcbiAgICAgICAgICAgICAgICAgICAgJ1dBJyxcclxuICAgICAgICAgICAgICAgICAgICAnV1YnLFxyXG4gICAgICAgICAgICAgICAgICAgICdXSScsXHJcbiAgICAgICAgICAgICAgICAgICAgJ1dZJ1xyXG4gICAgICAgICAgICAgICAgXSk7XHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICB9XHJcblxyXG59KSgpO1xyXG5cclxuKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgnZGF0YUxpc3RzJylcclxuICAgICAgICAuZmFjdG9yeSgnZ2V0Q29udGFjdExpc3RzJywgZ2V0U2FsU2VydmljZSk7IC8vdG9kbyByZW5hbWUgc2VydmljZVxyXG5cclxuICAgIC8qIEBuZ0luamVjdCAqL1xyXG4gICAgZ2V0U2FsU2VydmljZS4kaW5qZWN0ID0gWyckZmlsdGVyJywgJyRxJywgJyRodHRwJywgJyR0cmFuc2xhdGUnLCAnT1RIRVInLCAnRlJFTkNIJ107XHJcbiAgICBmdW5jdGlvbiBnZXRTYWxTZXJ2aWNlKCRmaWx0ZXIsICRxLCAkaHR0cCwkdHJhbnNsYXRlLCBPVEhFUiwgRlJFTkNIKSB7XHJcbiAgICAgICAgdmFyIHZtID0gdGhpcztcclxuICAgICAgICB2bS5pbnRlcm5hbENvbnRhY3RzID0gW107XHJcbiAgICAgICAgdmFyIHNlcnZpY2UgPSB7XHJcbiAgICAgICAgICAgIGdldFNhbHV0YXRpb25MaXN0OiBnZXRTYWxWYWx1ZXNBcnJheSxcclxuICAgICAgICAgICAgZ2V0TGFuZ3VhZ2VzOiBnZXRMYW5ndWFnZXNWYWx1ZXNBcnJheSwgLy9UT0RPIG1ha2UgY29uc3RhbnRzXHJcbiAgICAgICAgICAgIGNyZWF0ZUludGVybmFsQ29udGFjdHM6IF9jcmVhdGVJbnRlcm5hbENvbnRhY3RzLFxyXG4gICAgICAgICAgICBnZXRJbnRlcm5hbENvbnRhY3RzOiBfZ2V0SW50ZXJuYWxDb250YWN0c1xyXG5cclxuICAgICAgICB9O1xyXG4gICAgICAgIHJldHVybiBzZXJ2aWNlO1xyXG5cclxuICAgICAgICAvLy8vLy8vLy8vLy8vLy8vXHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGdldFNhbFZhbHVlc0FycmF5KCkge1xyXG4gICAgICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICAgICAgW1xyXG4gICAgICAgICAgICAgICAgICAgICdTQUxVVF9EUicsXHJcbiAgICAgICAgICAgICAgICAgICAgJ1NBTFVUX01SJyxcclxuICAgICAgICAgICAgICAgICAgICAnU0FMVVRfTVJTJyxcclxuICAgICAgICAgICAgICAgICAgICAnU0FMVVRfTVMnXHJcbiAgICAgICAgICAgICAgICBdKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGdldExhbmd1YWdlc1ZhbHVlc0FycmF5KCkge1xyXG4gICAgICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICAgICAgW1xyXG4gICAgICAgICAgICAgICAgICAgIFwiZW5cIixcclxuICAgICAgICAgICAgICAgICAgICBcImZyXCJcclxuICAgICAgICAgICAgICAgIF0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gX2NyZWF0ZUludGVybmFsQ29udGFjdHMoKSB7XHJcbiAgICAgICAgICAgIHZhciBkZWZlcnJlZCA9ICRxLmRlZmVyKCk7XHJcbiAgICAgICAgICAgIHZhciBjb250YWN0c1VybCA9IFwiZGF0YS9pbnRlcm5hbENvbnRhY3RzLmpzb25cIjtcclxuICAgICAgICAgICAgaWYgKCF2bS5pbnRlcm5hbENvbnRhY3RzIHx8IHZtLmludGVybmFsQ29udGFjdHMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAkaHR0cC5nZXQoY29udGFjdHNVcmwpXHJcbiAgICAgICAgICAgICAgICAgICAgLnN1Y2Nlc3MoZnVuY3Rpb24gKGRhdGEsIHN0YXR1cywgaGVhZGVycywgY29uZmlnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuZXdMaXN0ID0gX2NyZWF0ZVNvcnRlZEFycmF5KGRhdGEsICdlbicpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbGFuZyA9ICR0cmFuc2xhdGUucHJvcG9zZWRMYW5ndWFnZSgpIHx8ICR0cmFuc2xhdGUudXNlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vdGhpcyBpcyBhIGJpdCBvZiBhIGhhY2ssIGJ1dCBzYXZlcyB1bmVjZXNzYXJ5IHNwYWNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvdGhlclJlYyA9IHtcImlkXCI6IE9USEVSLCBcImVuXCI6IFwiT3RoZXJcIn07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsYW5nID09PSBGUkVOQ0gpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG90aGVyUmVjLmVuID0gXCJBdXRyZVwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld0xpc3QudW5zaGlmdChvdGhlclJlYyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZtLmludGVybmFsQ29udGFjdHMgPSBuZXdMaXN0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKG5ld0xpc3QpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgLmVycm9yKGZ1bmN0aW9uIChkYXRhLCBzdGF0dXMsIGhlYWRlcnMsIGNvbmZpZykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZWplY3Qoc3RhdHVzKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKHZtLmludGVybmFsQ29udGFjdHMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gX2dldEludGVybmFsQ29udGFjdHMoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gX2NyZWF0ZUludGVybmFsQ29udGFjdHMoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIF9jcmVhdGVTb3J0ZWRBcnJheShqc29uTGlzdCwgbGFuZykge1xyXG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gW107XHJcbiAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaCgkZmlsdGVyKCdvcmRlckJ5TG9jYWxlJykoanNvbkxpc3QsIGxhbmcpLCBmdW5jdGlvbiAoc29ydGVkT2JqZWN0KSB7XHJcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaChzb3J0ZWRPYmplY3QpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICB9XHJcblxyXG4gICAgfVxyXG5cclxuXHJcbn0pKCk7XHJcblxyXG5cclxuLyoqXHJcbiAqIENvbnRhY3Qgcm9sZSBsaXN0IHNlcnZpY2VcclxuICovXHJcbihmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ2RhdGFMaXN0cycpXHJcbiAgICAgICAgLmZhY3RvcnkoJ2dldFJvbGVMaXN0cycsIGdldFJvbGVzU2VydmljZSk7XHJcblxyXG4gICAgLyogQG5nSW5qZWN0ICovXHJcbiAgICBmdW5jdGlvbiBnZXRSb2xlc1NlcnZpY2UoKSB7XHJcbiAgICAgICAgdmFyIF9iaW9sb2dpYyA9ICdCSU9MT0dJQyc7XHJcbiAgICAgICAgdmFyIF9waGFybWEgPSAnUEhBUk1BQ0VVVElDQUwnO1xyXG4gICAgICAgIC8qJ0RSVUdfTUFTVEVSX0ZJTEUnLFxyXG4gICAgICAgICAnTUVESUNBTF9ERVZJQ0UnKi9cclxuICAgICAgICB2YXIgc2VydmljZSA9IHtcclxuICAgICAgICAgICAgZ2V0Q29udGFjdFJvbGVzOiBnZXRSb2xlVmFsdWVzQXJyYXksXHJcbiAgICAgICAgICAgIGdldEZvcm1UeXBlczogX2dldEZvcm1UeXBlcyxcclxuICAgICAgICAgICAgZ2V0QmlvbG9naWNUeXBlOiBfZ2V0QmlvbG9naWMsXHJcbiAgICAgICAgICAgIGdldFBoYXJtYVR5cGU6IF9nZXRQaGFybWFjZXV0aWNhbFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIHNlcnZpY2U7XHJcblxyXG4gICAgICAgIC8vLy8vLy8vLy8vLy8vLy9cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZ2V0Um9sZVZhbHVlc0FycmF5KCkge1xyXG4gICAgICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICAgICAgW1xyXG4gICAgICAgICAgICAgICAgICAgICcnLFxyXG4gICAgICAgICAgICAgICAgICAgICdST0xFX1BSSU1BUlknLFxyXG4gICAgICAgICAgICAgICAgICAgICdST0xFX1NFQ09OREFSWSdcclxuICAgICAgICAgICAgICAgIF0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gX2dldEZvcm1UeXBlcygpIHtcclxuICAgICAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgICAgIFtcclxuICAgICAgICAgICAgICAgICAgICBfYmlvbG9naWMsXHJcbiAgICAgICAgICAgICAgICAgICAgX3BoYXJtYVxyXG4gICAgICAgICAgICAgICAgXSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBfZ2V0QmlvbG9naWMoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBfYmlvbG9naWM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBfZ2V0UGhhcm1hY2V1dGljYWwoKSB7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gX3BoYXJtYTtcclxuICAgICAgICB9XHJcblxyXG4gICAgfVxyXG5cclxufSkoKTtcclxuIiwiLyoqXHJcbiAqIENyZWF0ZWQgYnkgZGtpbHR5IG9uIDEyLzA4LzIwMTYuXHJcbiAqIEBuZ2RvYyBtb2R1bGUgLWdldHMgdGhlIGxpc3Qgb2YgdHJhbnNhY3Rpb24gYWN0aXZpdHkgdHB5ZXNcclxuICovXHJcbihmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ3NlcnZpY2VzJywgW10pO1xyXG5cclxufSkoKTtcclxuXHJcblxyXG4oZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKCdzZXJ2aWNlcycpXHJcbiAgICAgICAgLmZhY3RvcnkoJ1RyYW5zYWN0aW9uTGlzdHMnLCBnZXRUcmFuc2FjdGlvblNlcSk7XHJcblxyXG4gICAgLyogQG5nSW5qZWN0ICovXHJcbiAgICBnZXRUcmFuc2FjdGlvblNlcS5pbmplY3QgPSBbJyRodHRwJywgJyRxJ107XHJcblxyXG4gICAgZnVuY3Rpb24gZ2V0VHJhbnNhY3Rpb25TZXEoJGh0dHAsJHEpIHtcclxuICAgICAgICB2YXIgdm0gPSB0aGlzO1xyXG4gICAgICAgIHZtLnJhVHlwZUFycmF5ID0gW107XHJcblxyXG4gICAgICAgIHZhciBzZXJ2aWNlID0ge1xyXG4gICAgICAgICAgICBnZXRUcmFuc2FjdGlvbkRlc2NyaXB0aW9uczogZ2V0VHJhbnNhY3Rpb25EZXNjcmlwdGlvbnNBcnJheSxcclxuICAgICAgICAgICAgZ2V0QWN0aXZpdHlUeXBlczogZ2V0QWN0aXZpdHlBcnJheSxcclxuICAgICAgICAgICAgY3JlYXRlUmFUeXBlczogX2NyZWF0ZVJhQXJyYXksXHJcbiAgICAgICAgICAgIGdldFByZXN1YlR5cGVzOiBnZXRQcmVzdWJBcnJheSxcclxuICAgICAgICAgICAgZ2V0QW5kc1R5cGU6IGdldEFORFNBcnJheSxcclxuICAgICAgICAgICAgZ2V0RGluYVR5cGU6IGdldERJTkFBcnJheSxcclxuICAgICAgICAgICAgZ2V0RGluYlR5cGU6IGdldERJTkJBcnJheSxcclxuICAgICAgICAgICAgZ2V0RXVuZHNUeXBlOiBnZXRFVU5EU0FycmF5LFxyXG4gICAgICAgICAgICBnZXRFdXNuZHNUeXBlOiBnZXRFVVNORFNBcnJheSxcclxuICAgICAgICAgICAgZ2V0TGV2ZWwzVHlwZTogZ2V0TGV2ZWwzQXJyYXksXHJcbiAgICAgICAgICAgIGdldE5jVHlwZTogZ2V0TkNBcnJheSxcclxuICAgICAgICAgICAgZ2V0TmRzVHlwZTogZ2V0TkRTQXJyYXksXHJcbiAgICAgICAgICAgIGdldFBkY1R5cGU6IGdldFBEQ0FycmF5LFxyXG4gICAgICAgICAgICBnZXRQZGNCVHlwZTogZ2V0UERDQkFycmF5LFxyXG4gICAgICAgICAgICBnZXRQcmVzdWJUeXBlOiBnZXRQcmVzdWJBcnJheSxcclxuICAgICAgICAgICAgZ2V0cFN1ckNUeXBlOiBnZXRQU1VSQ0FycmF5LFxyXG4gICAgICAgICAgICBnZXRwU3VyUHZUeXBlOiBnZXRQU1VSUFZBcnJheSxcclxuICAgICAgICAgICAgZ2V0Um1wUHZUeXBlOiBnZXRSTVBQVkFycmF5LFxyXG4gICAgICAgICAgICBnZXRTYW5kc1R5cGU6IGdldFNBTkRTQXJyYXksXHJcbiAgICAgICAgICAgIGdldFNuZHNUeXBlOiBnZXRTTkRTQXJyYXksXHJcbiAgICAgICAgICAgIGdldFNuZHNDQXJyYXk6IGdldFNORFNDQXJyYXksXHJcbiAgICAgICAgICAgIGdldFVkcHZUeXBlOiBnZXRVRFBWQXJyYXksXHJcbiAgICAgICAgICAgIGdldFVkcmFUeXBlOiBnZXRVRFJBVkFycmF5LFxyXG4gICAgICAgICAgICBnZXRZYnByVHlwZTogZ2V0WUJQUkFycmF5LFxyXG4gICAgICAgICAgICBnZXRDb25zdWx0VHlwZTogZ2V0Q29uc3VsdEFycmF5LFxyXG4gICAgICAgICAgICBnZXRNUE5DVHlwZTogX2dldE1QTkNBcnJheSxcclxuICAgICAgICAgICAgZ2V0TVBORFNUeXBlOiBfZ2V0TVBORFNBcnJheSxcclxuICAgICAgICAgICAgZ2V0TVBTTkRTVHlwZTogX2dldE1QU05EU0FycmF5LFxyXG4gICAgICAgICAgICBnZXRQQU5EVHlwZTogX2dldFBBTkRBcnJheSxcclxuICAgICAgICAgICAgZ2V0UEJSRVJDVHlwZTogX2dldFBCUkVSQ0FycmF5LFxyXG4gICAgICAgICAgICBnZXRQQlJFUlBWVHlwZTogX2dldFBCUkVSUFZBcnJheSxcclxuICAgICAgICAgICAgZ2V0UFJORFNUeXBlOiBfZ2V0UFJORFNBcnJheSxcclxuICAgICAgICAgICAgZ2V0UFJTTkRTVHlwZTpfZ2V0UFJTTkRTQXJyYXksXHJcbiAgICAgICAgICAgIGdldFllc05vTGlzdDogeWVzTm9BcnJheVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIHNlcnZpY2U7XHJcblxyXG4gICAgICAgIC8vLy8vLy8vLy8vLy8vLy9cclxuXHJcbiAgICAgICAgLy9UT0RPIG1ha2UgbGlzdHMgYmUgYWN0aXZpdHkuLiB5aWtlcyFcclxuXHJcbiAgICAgICAgZnVuY3Rpb24geWVzTm9BcnJheSgpIHtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiAoW1xyXG4gICAgICAgICAgICAgICAgXCJZXCIsXHJcbiAgICAgICAgICAgICAgICBcIk5cIlxyXG4gICAgICAgICAgICBdKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIF9jcmVhdGVSYUFycmF5KHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHZtLnJhVHlwZUFycmF5ID12YWx1ZTtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICAvL3JldHVybnMgYSBsaXN0IG9mIGFsbCB0aGUgdW5pcXVlIGRlc2NyaXB0aW9uIHZhbHVlc1xyXG4gICAgICAgIGZ1bmN0aW9uIGdldFRyYW5zYWN0aW9uRGVzY3JpcHRpb25zQXJyYXkoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgICAgICBbXHJcbiAgICAgICAgICAgICAgICAgICAgXCJBRE1JTklTVFJBVElWRVwiLCAvL2FkbWluaXN0cmF0aXZlXHJcbiAgICAgICAgICAgICAgICAgICAgXCJCRU5FRklUX1JJU0tfQVNTRVNTXCIsIC8vYmVuZWZpdCByaXNrIGFzc2Vzc21lbnRcclxuICAgICAgICAgICAgICAgICAgICBcIkNBTkNFTF9MRVRURVJcIiwgLy9jYW5jZWxsYXRpb24gbGV0dGVyXHJcbiAgICAgICAgICAgICAgICAgICAgXCJDSEFOR0VfVE9fRElOXCIsIC8vY2hhbmdlcyB0byBkaW5cclxuICAgICAgICAgICAgICAgICAgICBcIkNPTU1FTlRTX05PQ1wiLCAvLyBjb21tZW50cyBvbiBub3RpY2Ugb2YgZGVjaXNpb25cclxuICAgICAgICAgICAgICAgICAgICBcIkNPTU1FTlRTX1NVTU1BUllfQkFTSVNcIiwgLy9jb21tbWVudHMgb24gc3VtbWFyeSBiYXNpc1xyXG4gICAgICAgICAgICAgICAgICAgIFwiRElOX0RJU0NPTlRJTlVFRFwiLCAvLyBkaW4gZGlzY29udGludWVkXHJcbiAgICAgICAgICAgICAgICAgICAgXCJEUlVHX05PVElGX0ZPUk1cIiwgLy8gZHJ1ZyBub3RpZmljYXRpb24gZm9ybVxyXG4gICAgICAgICAgICAgICAgICAgIFwiRk9SX1BFUklPRFwiLCAvL2ZvciBwZXJpb2Qgb2YgLi4uLlxyXG4gICAgICAgICAgICAgICAgICAgIFwiSU5JVElBTFwiLCAvL0luaXRpYWxcclxuICAgICAgICAgICAgICAgICAgICBcIk1FRVRJTkdfTUlOVVRFU1wiLCAvL21pbnV0ZXMgb2YgbWVldGluZyBkYXRlZFxyXG4gICAgICAgICAgICAgICAgICAgIFwiTk9USUZJQ0FUSU9OX0NIQU5HRVwiLCAvL25vdGlmaWNhaXRvbiBvZiBjaGFuZ2UgaW4gYmVuZWZpdCBwcm9maWxlXHJcbiAgICAgICAgICAgICAgICAgICAgXCJQQU5ERU1JQ19BUFBMXCIsIC8vcGFuZGVtaWMgYXBwbGljYWl0b25cclxuICAgICAgICAgICAgICAgICAgICBcIlBPU1RfQ0xFQVJBTkNFX0RBVEFcIiwgLy9wb3N0IGNsZWFyYW5jZSBkYXRhXHJcbiAgICAgICAgICAgICAgICAgICAgXCJQT1NUX01BUktFVF9TVVJWXCIsIC8vIHBvc3QgbWFya2V0aW5nIHN1cnZlaWxsYW5jZVxyXG4gICAgICAgICAgICAgICAgICAgIFwiUE9TVF9OT0NfQ0hBTkdFXCIsIC8vUG9zdCBOT0MgY2hhbmdlXHJcbiAgICAgICAgICAgICAgICAgICAgXCJQT1NUX0FVVEhfRElWMV9DSEFOR0VcIiwgLy8gUG9zdCBhdXRvcml6YXRpb24gRGl2aXNpb24gMSBjaGFuZ2VcclxuICAgICAgICAgICAgICAgICAgICBcIlBSRVNVQl9NRUVUSU5HX1BLR1wiLCAvLyBwcmVzdWJtaXNzaW9uIG1lZXRpbmcgcGFja2FnZVxyXG4gICAgICAgICAgICAgICAgICAgIFwiUFJJT1JJVFlfUkVWSUVXX1JRXCIsIC8vIFByaW9yaXR5IHJld2lldyByZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICAgICAgXCJQUklTVElORV9QTVwiLCAvLyBQcmlzdGluZSBQTVxyXG4gICAgICAgICAgICAgICAgICAgIFwiUFJJU1RJTkVfUE1fMkxBTkdcIiwgLy8gcHJpc3RpbmUgUE0gc2Vjb25kIGxhbmd1YWdlXHJcbiAgICAgICAgICAgICAgICAgICAgXCJBRFZJU0VNRU5UX0xFVFRFUl9SRVNQT05TRVwiLCAvL1JFc3Bvc2UgdG8gQWR2aXNlbWVudCBMZXR0ZXIgZGF0ZWRcclxuICAgICAgICAgICAgICAgICAgICBcIkNMSU5fQ0xBUklGX1JFU1BPTlNFXCIsIC8vUmVzcG9uc2UgdG8gY2xpbmljYWwgY2xhcmlmaWFjdGlvbiByZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICAgICAgXCJFTUFJTF9SUV9SRVNQT05TRVwiLC8vIHJlc3BvbnNlIHRvIGVtYWlsIHJlcXVlc3RcclxuICAgICAgICAgICAgICAgICAgICBcIkxBQkVMX0NMQVJJRl9SRVNQT05TRVwiLCAvL1Jlc3BvbnNlIHRvIGxhYmVsbGluZyBjbGFyaWZpY2F0aW9uIHJlcXVlc3RcclxuICAgICAgICAgICAgICAgICAgICBcIk1IUERfUlFfUkVTUE9OU0VcIiwgLy9SZXNwb25zZSB0byBNSFBEIHJlcXVlc3RzXHJcbiAgICAgICAgICAgICAgICAgICAgXCJOT0NfUkVTUE9OU0VcIiwgLy9yZXNwb25zZSB0byBOT0MvIGMtUW5cclxuICAgICAgICAgICAgICAgICAgICBcIk5PRF9SRVNQT05TRVwiLCAvL1Jlc3BvbnNlIHRvIE5PRFxyXG4gICAgICAgICAgICAgICAgICAgIFwiTk9MX1JFU1BPTlNFXCIsIC8vUmVzcG9uc2UgdG8gTk9MIGRhdGVkXHJcbiAgICAgICAgICAgICAgICAgICAgXCJOT05fUkVTUE9OU0VcIiwgLy9SZXNwb25zZSB0byBOT05cclxuICAgICAgICAgICAgICAgICAgICBcIlBST0NFU1NJTkdfQ0xBUklGX1JFU1BPTlNFXCIsIC8vUmVzcG9uc2UgdG8gcHJvY2Vzc2luZyBDbGFyaWZpY2F0aW9uIFJlcXVlc3RcclxuICAgICAgICAgICAgICAgICAgICBcIlFVQUxfQ0xJTl9DTEFSSUZfUkVTUE9OU0VcIiwgLy9SZXNwb25zZSB0byBxdWFsaXR5IGFuZCBDbGluaWNhbCBjbGFyaWZpY2F0aW9uIFJFcXVlc3RcclxuICAgICAgICAgICAgICAgICAgICBcIlFVQUxfQ0xBUklGX1JFU1BPTlNFXCIsIC8vUmVzcG9uc2UgdG8gUXVhbGl0eSBDbGFyaWZpY2F0aW9uIHJlcXVlc3RcclxuICAgICAgICAgICAgICAgICAgICBcIlNDUkVFTklOR19BQ0NFUFRfUkVTUE9OU0VcIiwgLy9yZXNwb25zZSB0byBzY3JlZW5pbmcgYWNjZXB0YW5jZSBsZXR0ZXJcclxuICAgICAgICAgICAgICAgICAgICBcIlNDUkVFTklOR19DTEFSSUZfUkVTUE9OU0VcIiwgLy8gcmVzcG9uc2UgdG8gc2NyZWVuaW5nIGNsYXJpZmljYXRpb24gcmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgICAgIFwiU0ROX1JFU1BPTlNFXCIsIC8vcmVzcG9uc2UgdG8gU0ROXHJcbiAgICAgICAgICAgICAgICAgICAgXCJQSE9ORV9SUV9SRVNQT05TRVwiLCAvL1Jlc3BvbnNlIHRvIHRlbGVwaG9uZSBSZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICAgICAgXCJSSVNLX0NPTU1VTl9ET0NcIiwgLy9SaXNrIGNvbW11bmljYXRpb24gZG9jdW1lbnRcclxuICAgICAgICAgICAgICAgICAgICBcIlJNUF9WRVJTSU9OX0RBVEVcIiwgLy9STVAgdmVyaXNvblxyXG4gICAgICAgICAgICAgICAgICAgIFwiU0lHTkFMX1dPUktfVVBcIiwgLy9TaWduYWwgV29yayB1cFxyXG4gICAgICAgICAgICAgICAgICAgIFwiVU5TT0xJQ0lURURfREFUQVwiLCAvL1Vuc29saWNpdGVkIERhdGFcclxuICAgICAgICAgICAgICAgICAgICBcIllFQVJfTElTVF9PRl9DSEFOR0VcIiwgLy9ZZWFyLCBsaXN0IG9mIGNoYW5nZSBudW1iZXIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJCRV9DTEFSSUZfUkVTUE9OU0VcIiAvL1Jlc3BvbnNlIHRvIEJFIGNsYXJpZmljYXRpb24gcmVxdWVzdCBkYXRlZC4uXHJcbiAgICAgICAgICAgICAgICBdKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGdldEFjdGl2aXR5QXJyYXkoKSB7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gKHZtLnJhVHlwZUFycmF5KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGdldFByZXN1YkFycmF5KCkge1xyXG4gICAgICAgICAgICByZXR1cm4gKFtcclxuICAgICAgICAgICAgICAgIFwiQ0FOQ0VMX0xFVFRFUlwiLFxyXG4gICAgICAgICAgICAgICAgXCJNRUVUSU5HX01JTlVURVNcIixcclxuICAgICAgICAgICAgICAgIFwiRU1BSUxfUlFfUkVTUE9OU0VcIixcclxuICAgICAgICAgICAgICAgIFwiUFJPQ0VTU0lOR19DTEFSSUZfUkVTUE9OU0VcIixcclxuICAgICAgICAgICAgICAgIFwiUEhPTkVfUlFfUkVTUE9OU0VcIlxyXG4gICAgICAgICAgICBdKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGdldEFORFNBcnJheSgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIChbXHJcbiAgICAgICAgICAgICAgICBcIkFETUlOSVNUUkFUSVZFXCIsIC8vYWRtaW5pc3RyYXRpdmVcclxuICAgICAgICAgICAgICAgIFwiQ0FOQ0VMX0xFVFRFUlwiLCAvL2NhbmNlbGxhdGlvbiBsZXR0ZXJcclxuICAgICAgICAgICAgICAgIFwiRFJVR19OT1RJRl9GT1JNXCIsIC8vIGRydWcgbm90aWZpY2F0aW9uIGZvcm1cclxuICAgICAgICAgICAgICAgIFwiSU5JVElBTFwiLCAvL0luaXRpYWxcclxuICAgICAgICAgICAgICAgIFwiUE9TVF9DTEVBUkFOQ0VfREFUQVwiLCAvL3Bvc3QgY2xlYXJhbmNlIGRhdGFcclxuICAgICAgICAgICAgICAgIFwiUFJJU1RJTkVfUE1cIiwgLy8gUHJpc3RpbmUgUE1cclxuICAgICAgICAgICAgICAgIFwiUFJJU1RJTkVfUE1fMkxBTkdcIiwgLy8gcHJpc3RpbmUgUE0gc2Vjb25kIGxhbmd1YWdlXHJcbiAgICAgICAgICAgICAgICBcIkJFX0NMQVJJRl9SRVNQT05TRVwiLFxyXG4gICAgICAgICAgICAgICAgXCJDTElOX0NMQVJJRl9SRVNQT05TRVwiLCAvL1Jlc3BvbnNlIHRvIGNsaW5pY2FsIGNsYXJpZmlhY3Rpb24gcmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgXCJFTUFJTF9SUV9SRVNQT05TRVwiLC8vIHJlc3BvbnNlIHRvIGVtYWlsIHJlcXVlc3RcclxuICAgICAgICAgICAgICAgIFwiTEFCRUxfQ0xBUklGX1JFU1BPTlNFXCIsIC8vUmVzcG9uc2UgdG8gbGFiZWxsaW5nIGNsYXJpZmljYXRpb24gcmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgXCJOT0NfUkVTUE9OU0VcIiwgLy9yZXNwb25zZSB0byBOT0MvIGMtUW5cclxuICAgICAgICAgICAgICAgIFwiTk9EX1JFU1BPTlNFXCIsIC8vUmVzcG9uc2UgdG8gTk9EXHJcbiAgICAgICAgICAgICAgICBcIk5PTl9SRVNQT05TRVwiLCAvL1Jlc3BvbnNlIHRvIE5PTlxyXG4gICAgICAgICAgICAgICAgXCJQUk9DRVNTSU5HX0NMQVJJRl9SRVNQT05TRVwiLCAvL1Jlc3BvbnNlIHRvIHByb2Nlc3NpbmcgIENsYXJpZmljYXRpb24gUmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgXCJRVUFMX0NMSU5fQ0xBUklGX1JFU1BPTlNFXCIsIC8vUmVzcG9uc2UgdG8gcXVhbGl0eSBhbmQgQ2xpbmljYWwgY2xhcmlmaWNhdGlvbiBSRXF1ZXN0XHJcbiAgICAgICAgICAgICAgICBcIlFVQUxfQ0xBUklGX1JFU1BPTlNFXCIsIC8vUmVzcG9uc2UgdG8gUXVhbGl0eSBDbGFyaWZpY2F0aW9uIHJlcXVlc3RcclxuICAgICAgICAgICAgICAgIFwiU0NSRUVOSU5HX0FDQ0VQVF9SRVNQT05TRVwiLCAvL3Jlc3BvbnNlIHRvIHNjcmVlbmluZyBhY2NlcHRhbmNlIGxldHRlclxyXG4gICAgICAgICAgICAgICAgXCJTQ1JFRU5JTkdfQ0xBUklGX1JFU1BPTlNFXCIsIC8vIHJlc3BvbnNlIHRvIHNjcmVlbmluZyBjbGFyaWZpY2F0aW9uIHJlcXVlc3RcclxuICAgICAgICAgICAgICAgIFwiU0ROX1JFU1BPTlNFXCIsIC8vcmVzcG9uc2UgdG8gU0ROXHJcbiAgICAgICAgICAgICAgICBcIlBIT05FX1JRX1JFU1BPTlNFXCIgLy9SZXNwb25zZSB0byB0ZWxlcGhvbmUgUmVxdWVzdFxyXG4gICAgICAgICAgICBdKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGdldERJTkFBcnJheSgpIHtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiAoW1xyXG4gICAgICAgICAgICAgICAgXCJBRE1JTklTVFJBVElWRVwiLCAvL2FkbWluaXN0cmF0aXZlXHJcbiAgICAgICAgICAgICAgICBcIkNBTkNFTF9MRVRURVJcIiwgLy9jYW5jZWxsYXRpb24gbGV0dGVyXHJcbiAgICAgICAgICAgICAgICBcIkRSVUdfTk9USUZfRk9STVwiLCAvLyBkcnVnIG5vdGlmaWNhdGlvbiBmb3JtXHJcbiAgICAgICAgICAgICAgICBcIklOSVRJQUxcIiwgLy9Jbml0aWFsXHJcbiAgICAgICAgICAgICAgICBcIlBPU1RfQ0xFQVJBTkNFX0RBVEFcIiwgLy9wb3N0IGNsZWFyYW5jZSBkYXRhXHJcbiAgICAgICAgICAgICAgICBcIlBSRVNVQl9NRUVUSU5HX1BLR1wiLCAvLyBwcmVzdWJtaXNzaW9uIG1lZXRpbmcgcGFja2FnZVxyXG4gICAgICAgICAgICAgICAgXCJQUklTVElORV9QTVwiLCAvLyBQcmlzdGluZSBQTVxyXG4gICAgICAgICAgICAgICAgXCJQUklTVElORV9QTV8yTEFOR1wiLCAvLyBwcmlzdGluZSBQTSBzZWNvbmQgbGFuZ3VhZ2VcclxuICAgICAgICAgICAgICAgIFwiQ0xJTl9DTEFSSUZfUkVTUE9OU0VcIiwgLy9SZXNwb25zZSB0byBjbGluaWNhbCBjbGFyaWZpYWN0aW9uIHJlcXVlc3RcclxuICAgICAgICAgICAgICAgIFwiRU1BSUxfUlFfUkVTUE9OU0VcIiwvLyByZXNwb25zZSB0byBlbWFpbCByZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICBcIkxBQkVMX0NMQVJJRl9SRVNQT05TRVwiLCAvL1Jlc3BvbnNlIHRvIGxhYmVsbGluZyBjbGFyaWZpY2F0aW9uIHJlcXVlc3RcclxuICAgICAgICAgICAgICAgIFwiUFJPQ0VTU0lOR19DTEFSSUZfUkVTUE9OU0VcIiwgLy9SZXNwb25zZSB0byBwcm9jZXNzaW5nIENsYXJpZmljYXRpb24gUmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgXCJRVUFMX0NMSU5fQ0xBUklGX1JFU1BPTlNFXCIsIC8vUmVzcG9uc2UgdG8gcXVhbGl0eSBhbmQgQ2xpbmljYWwgY2xhcmlmaWNhdGlvbiBSRXF1ZXN0XHJcbiAgICAgICAgICAgICAgICBcIlFVQUxfQ0xBUklGX1JFU1BPTlNFXCIsIC8vUmVzcG9uc2UgdG8gUXVhbGl0eSBDbGFyaWZpY2F0aW9uIHJlcXVlc3RcclxuICAgICAgICAgICAgICAgIFwiU0NSRUVOSU5HX0FDQ0VQVF9SRVNQT05TRVwiLCAvL3Jlc3BvbnNlIHRvIHNjcmVlbmluZyBhY2NlcHRhbmNlIGxldHRlclxyXG4gICAgICAgICAgICAgICAgXCJTQ1JFRU5JTkdfQ0xBUklGX1JFU1BPTlNFXCIsIC8vIHJlc3BvbnNlIHRvIHNjcmVlbmluZyBjbGFyaWZpY2F0aW9uIHJlcXVlc3RcclxuICAgICAgICAgICAgICAgIFwiUEhPTkVfUlFfUkVTUE9OU0VcIiwgLy9SZXNwb25zZSB0byB0ZWxlcGhvbmUgUmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgXCJVTlNPTElDSVRFRF9EQVRBXCIgLy9VbnNvbGljaXRlZCBEYXRhXHJcbiAgICAgICAgICAgIF0pO1xyXG5cclxuXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvL25vdGUgRElOQiBpcyB0aGUgc2FtZSBhcyBESU5BXHJcbiAgICAgICAgZnVuY3Rpb24gZ2V0RElOQkFycmF5KCkge1xyXG4gICAgICAgICAgICByZXR1cm4gKFtcclxuICAgICAgICAgICAgICAgIFwiQURNSU5JU1RSQVRJVkVcIiwgLy9hZG1pbmlzdHJhdGl2ZVxyXG4gICAgICAgICAgICAgICAgXCJDQU5DRUxfTEVUVEVSXCIsIC8vY2FuY2VsbGF0aW9uIGxldHRlclxyXG4gICAgICAgICAgICAgICAgXCJEUlVHX05PVElGX0ZPUk1cIiwgLy8gZHJ1ZyBub3RpZmljYXRpb24gZm9ybVxyXG4gICAgICAgICAgICAgICAgXCJJTklUSUFMXCIsIC8vSW5pdGlhbFxyXG4gICAgICAgICAgICAgICAgXCJQT1NUX0NMRUFSQU5DRV9EQVRBXCIsIC8vcG9zdCBjbGVhcmFuY2UgZGF0YVxyXG4gICAgICAgICAgICAgICAgXCJQUkVTVUJfTUVFVElOR19QS0dcIiwgLy8gcHJlc3VibWlzc2lvbiBtZWV0aW5nIHBhY2thZ2VcclxuICAgICAgICAgICAgICAgIFwiUFJJU1RJTkVfUE1cIiwgLy8gUHJpc3RpbmUgUE1cclxuICAgICAgICAgICAgICAgIFwiUFJJU1RJTkVfUE1fMkxBTkdcIiwgLy8gcHJpc3RpbmUgUE0gc2Vjb25kIGxhbmd1YWdlXHJcbiAgICAgICAgICAgICAgICBcIkNMSU5fQ0xBUklGX1JFU1BPTlNFXCIsIC8vUmVzcG9uc2UgdG8gY2xpbmljYWwgY2xhcmlmaWFjdGlvbiByZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICBcIkVNQUlMX1JRX1JFU1BPTlNFXCIsLy8gcmVzcG9uc2UgdG8gZW1haWwgcmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgXCJMQUJFTF9DTEFSSUZfUkVTUE9OU0VcIiwgLy9SZXNwb25zZSB0byBsYWJlbGxpbmcgY2xhcmlmaWNhdGlvbiByZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICBcIlBST0NFU1NJTkdfQ0xBUklGX1JFU1BPTlNFXCIsIC8vUmVzcG9uc2UgdG8gcHJvY2Vzc2luZyBDbGFyaWZpY2F0aW9uIFJlcXVlc3RcclxuICAgICAgICAgICAgICAgIFwiUVVBTF9DTElOX0NMQVJJRl9SRVNQT05TRVwiLCAvL1Jlc3BvbnNlIHRvIHF1YWxpdHkgYW5kIENsaW5pY2FsIGNsYXJpZmljYXRpb24gUkVxdWVzdFxyXG4gICAgICAgICAgICAgICAgXCJRVUFMX0NMQVJJRl9SRVNQT05TRVwiLCAvL1Jlc3BvbnNlIHRvIFF1YWxpdHkgQ2xhcmlmaWNhdGlvbiByZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICBcIlNDUkVFTklOR19BQ0NFUFRfUkVTUE9OU0VcIiwgLy9yZXNwb25zZSB0byBzY3JlZW5pbmcgYWNjZXB0YW5jZSBsZXR0ZXJcclxuICAgICAgICAgICAgICAgIFwiU0NSRUVOSU5HX0NMQVJJRl9SRVNQT05TRVwiLCAvLyByZXNwb25zZSB0byBzY3JlZW5pbmcgY2xhcmlmaWNhdGlvbiByZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICBcIlBIT05FX1JRX1JFU1BPTlNFXCIsIC8vUmVzcG9uc2UgdG8gdGVsZXBob25lIFJlcXVlc3RcclxuICAgICAgICAgICAgICAgIFwiVU5TT0xJQ0lURURfREFUQVwiIC8vVW5zb2xpY2l0ZWQgRGF0YVxyXG4gICAgICAgICAgICBdKTtcclxuXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBnZXRFVU5EU0FycmF5KCkge1xyXG4gICAgICAgICAgICByZXR1cm4gKFtcclxuICAgICAgICAgICAgICAgIFwiQURNSU5JU1RSQVRJVkVcIiwgLy9hZG1pbmlzdHJhdGl2ZVxyXG4gICAgICAgICAgICAgICAgXCJDQU5DRUxfTEVUVEVSXCIsIC8vY2FuY2VsbGF0aW9uIGxldHRlclxyXG4gICAgICAgICAgICAgICAgXCJDT01NRU5UU19TVU1NQVJZX0JBU0lTXCIsIC8vY29tbW1lbnRzIG9uIHN1bW1hcnkgYmFzaXNcclxuICAgICAgICAgICAgICAgIFwiRFJVR19OT1RJRl9GT1JNXCIsIC8vIGRydWcgbm90aWZpY2F0aW9uIGZvcm1cclxuICAgICAgICAgICAgICAgIFwiSU5JVElBTFwiLCAvL0luaXRpYWxcclxuICAgICAgICAgICAgICAgIFwiUE9TVF9DTEVBUkFOQ0VfREFUQVwiLCAvL3Bvc3QgY2xlYXJhbmNlIGRhdGFcclxuICAgICAgICAgICAgICAgIFwiUFJJU1RJTkVfUE1cIiwgLy8gUHJpc3RpbmUgUE1cclxuICAgICAgICAgICAgICAgIFwiUFJJU1RJTkVfUE1fMkxBTkdcIiwgLy8gcHJpc3RpbmUgUE0gc2Vjb25kIGxhbmd1YWdlXHJcbiAgICAgICAgICAgICAgICBcIkNMSU5fQ0xBUklGX1JFU1BPTlNFXCIsIC8vUmVzcG9uc2UgdG8gY2xpbmljYWwgY2xhcmlmaWFjdGlvbiByZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICBcIkVNQUlMX1JRX1JFU1BPTlNFXCIsLy8gcmVzcG9uc2UgdG8gZW1haWwgcmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgXCJMQUJFTF9DTEFSSUZfUkVTUE9OU0VcIiwgLy9SZXNwb25zZSB0byBsYWJlbGxpbmcgY2xhcmlmaWNhdGlvbiByZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICBcIk5PQ19SRVNQT05TRVwiLCAvL3Jlc3BvbnNlIHRvIE5PQy8gYy1RblxyXG4gICAgICAgICAgICAgICAgXCJOT0RfUkVTUE9OU0VcIiwgLy9SZXNwb25zZSB0byBOT0RcclxuICAgICAgICAgICAgICAgIFwiTk9OX1JFU1BPTlNFXCIsIC8vUmVzcG9uc2UgdG8gTk9OXHJcbiAgICAgICAgICAgICAgICBcIlBST0NFU1NJTkdfQ0xBUklGX1JFU1BPTlNFXCIsIC8vUmVzcG9uc2UgdG8gcHJvY2Vzc2luZyBDbGFyaWZpY2F0aW9uIFJlcXVlc3RcclxuICAgICAgICAgICAgICAgIFwiUVVBTF9DTElOX0NMQVJJRl9SRVNQT05TRVwiLCAvL1Jlc3BvbnNlIHRvIHF1YWxpdHkgYW5kIENsaW5pY2FsIGNsYXJpZmljYXRpb24gUkVxdWVzdFxyXG4gICAgICAgICAgICAgICAgXCJRVUFMX0NMQVJJRl9SRVNQT05TRVwiLCAvL1Jlc3BvbnNlIHRvIFF1YWxpdHkgQ2xhcmlmaWNhdGlvbiByZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICBcIlNDUkVFTklOR19BQ0NFUFRfUkVTUE9OU0VcIiwgLy9yZXNwb25zZSB0byBzY3JlZW5pbmcgYWNjZXB0YW5jZSBsZXR0ZXJcclxuICAgICAgICAgICAgICAgIFwiU0NSRUVOSU5HX0NMQVJJRl9SRVNQT05TRVwiLCAvLyByZXNwb25zZSB0byBzY3JlZW5pbmcgY2xhcmlmaWNhdGlvbiByZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICBcIlNETl9SRVNQT05TRVwiLCAvL3Jlc3BvbnNlIHRvIFNETlxyXG4gICAgICAgICAgICAgICAgXCJQSE9ORV9SUV9SRVNQT05TRVwiLCAvL1Jlc3BvbnNlIHRvIHRlbGVwaG9uZSBSZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICBcIlVOU09MSUNJVEVEX0RBVEFcIiAvL1Vuc29saWNpdGVkIERhdGFcclxuICAgICAgICAgICAgXSk7XHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZ2V0RVVTTkRTQXJyYXkoKSB7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gKFtcclxuICAgICAgICAgICAgICAgIFwiQURNSU5JU1RSQVRJVkVcIiwgLy9hZG1pbmlzdHJhdGl2ZVxyXG4gICAgICAgICAgICAgICAgXCJDQU5DRUxfTEVUVEVSXCIsIC8vY2FuY2VsbGF0aW9uIGxldHRlclxyXG4gICAgICAgICAgICAgICAgXCJDT01NRU5UU19TVU1NQVJZX0JBU0lTXCIsIC8vY29tbW1lbnRzIG9uIHN1bW1hcnkgYmFzaXNcclxuICAgICAgICAgICAgICAgIFwiRFJVR19OT1RJRl9GT1JNXCIsIC8vIGRydWcgbm90aWZpY2F0aW9uIGZvcm1cclxuICAgICAgICAgICAgICAgIFwiUE9TVF9DTEVBUkFOQ0VfREFUQVwiLCAvL3Bvc3QgY2xlYXJhbmNlIGRhdGFcclxuICAgICAgICAgICAgICAgIFwiUE9TVF9OT0NfQ0hBTkdFXCIsIC8vUG9zdCBOT0MgY2hhbmdlXHJcbiAgICAgICAgICAgICAgICBcIlBSSVNUSU5FX1BNXCIsIC8vIFByaXN0aW5lIFBNXHJcbiAgICAgICAgICAgICAgICBcIlBSSVNUSU5FX1BNXzJMQU5HXCIsIC8vIHByaXN0aW5lIFBNIHNlY29uZCBsYW5ndWFnZVxyXG4gICAgICAgICAgICAgICAgXCJDTElOX0NMQVJJRl9SRVNQT05TRVwiLCAvL1Jlc3BvbnNlIHRvIGNsaW5pY2FsIGNsYXJpZmlhY3Rpb24gcmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgXCJFTUFJTF9SUV9SRVNQT05TRVwiLC8vIHJlc3BvbnNlIHRvIGVtYWlsIHJlcXVlc3RcclxuICAgICAgICAgICAgICAgIFwiTEFCRUxfQ0xBUklGX1JFU1BPTlNFXCIsIC8vUmVzcG9uc2UgdG8gbGFiZWxsaW5nIGNsYXJpZmljYXRpb24gcmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgXCJOT0NfUkVTUE9OU0VcIiwgLy9yZXNwb25zZSB0byBOT0MvIGMtUW5cclxuICAgICAgICAgICAgICAgIFwiTk9EX1JFU1BPTlNFXCIsIC8vUmVzcG9uc2UgdG8gTk9EXHJcbiAgICAgICAgICAgICAgICBcIk5PTl9SRVNQT05TRVwiLCAvL1Jlc3BvbnNlIHRvIE5PTlxyXG4gICAgICAgICAgICAgICAgXCJQUk9DRVNTSU5HX0NMQVJJRl9SRVNQT05TRVwiLCAvL1Jlc3BvbnNlIHRvIHByb2Nlc3NpbmcgQ2xhcmlmaWNhdGlvbiBSZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICBcIlFVQUxfQ0xJTl9DTEFSSUZfUkVTUE9OU0VcIiwgLy9SZXNwb25zZSB0byBxdWFsaXR5IGFuZCBDbGluaWNhbCBjbGFyaWZpY2F0aW9uIFJFcXVlc3RcclxuICAgICAgICAgICAgICAgIFwiUVVBTF9DTEFSSUZfUkVTUE9OU0VcIiwgLy9SZXNwb25zZSB0byBRdWFsaXR5IENsYXJpZmljYXRpb24gcmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgXCJTQ1JFRU5JTkdfQUNDRVBUX1JFU1BPTlNFXCIsIC8vcmVzcG9uc2UgdG8gc2NyZWVuaW5nIGFjY2VwdGFuY2UgbGV0dGVyXHJcbiAgICAgICAgICAgICAgICBcIlNDUkVFTklOR19DTEFSSUZfUkVTUE9OU0VcIiwgLy8gcmVzcG9uc2UgdG8gc2NyZWVuaW5nIGNsYXJpZmljYXRpb24gcmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgXCJTRE5fUkVTUE9OU0VcIiwgLy9yZXNwb25zZSB0byBTRE5cclxuICAgICAgICAgICAgICAgIFwiUEhPTkVfUlFfUkVTUE9OU0VcIiwgLy9SZXNwb25zZSB0byB0ZWxlcGhvbmUgUmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgXCJVTlNPTElDSVRFRF9EQVRBXCIgLy9VbnNvbGljaXRlZCBEYXRhXHJcbiAgICAgICAgICAgIF0pO1xyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGdldExldmVsM0FycmF5KCkge1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIChbXHJcbiAgICAgICAgICAgICAgICBcIkNBTkNFTF9MRVRURVJcIiwgLy9jYW5jZWxsYXRpb24gbGV0dGVyXHJcbiAgICAgICAgICAgICAgICBcIkVNQUlMX1JRX1JFU1BPTlNFXCIsLy8gcmVzcG9uc2UgdG8gZW1haWwgcmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgXCJQUk9DRVNTSU5HX0NMQVJJRl9SRVNQT05TRVwiLCAvL1Jlc3BvbnNlIHRvIHByb2Nlc3NpbmcgQ2xhcmlmaWNhdGlvbiBSZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICBcIlBIT05FX1JRX1JFU1BPTlNFXCIsIC8vUmVzcG9uc2UgdG8gdGVsZXBob25lIFJlcXVlc3RcclxuICAgICAgICAgICAgICAgIFwiWUVBUl9MSVNUX09GX0NIQU5HRVwiIC8vWWVhciwgbGlzdCBvZiBjaGFuZ2UgbnVtYmVyLFxyXG4gICAgICAgICAgICBdKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGdldE5DQXJyYXkoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAoW1xyXG4gICAgICAgICAgICAgICAgXCJBRE1JTklTVFJBVElWRVwiLCAvL2FkbWluaXN0cmF0aXZlXHJcbiAgICAgICAgICAgICAgICBcIkNBTkNFTF9MRVRURVJcIiwgLy9jYW5jZWxsYXRpb24gbGV0dGVyXHJcbiAgICAgICAgICAgICAgICBcIkNPTU1FTlRTX1NVTU1BUllfQkFTSVNcIiwgLy9jb21tbWVudHMgb24gc3VtbWFyeSBiYXNpc1xyXG4gICAgICAgICAgICAgICAgXCJEUlVHX05PVElGX0ZPUk1cIiwgLy8gZHJ1ZyBub3RpZmljYXRpb24gZm9ybVxyXG4gICAgICAgICAgICAgICAgXCJQT1NUX0NMRUFSQU5DRV9EQVRBXCIsIC8vcG9zdCBjbGVhcmFuY2UgZGF0YVxyXG4gICAgICAgICAgICAgICAgXCJQT1NUX05PQ19DSEFOR0VcIiwgLy9Qb3N0IE5PQyBjaGFuZ2VcclxuICAgICAgICAgICAgICAgIFwiUFJFU1VCX01FRVRJTkdfUEtHXCIsIC8vIHByZXN1Ym1pc3Npb24gbWVldGluZyBwYWNrYWdlXHJcbiAgICAgICAgICAgICAgICBcIlBSSVNUSU5FX1BNXCIsIC8vIFByaXN0aW5lIFBNXHJcbiAgICAgICAgICAgICAgICBcIlBSSVNUSU5FX1BNXzJMQU5HXCIsIC8vIHByaXN0aW5lIFBNIHNlY29uZCBsYW5ndWFnZVxyXG4gICAgICAgICAgICAgICAgXCJDTElOX0NMQVJJRl9SRVNQT05TRVwiLCAvL1Jlc3BvbnNlIHRvIGNsaW5pY2FsIGNsYXJpZmlhY3Rpb24gcmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgXCJFTUFJTF9SUV9SRVNQT05TRVwiLC8vIHJlc3BvbnNlIHRvIGVtYWlsIHJlcXVlc3RcclxuICAgICAgICAgICAgICAgIFwiTEFCRUxfQ0xBUklGX1JFU1BPTlNFXCIsIC8vUmVzcG9uc2UgdG8gbGFiZWxsaW5nIGNsYXJpZmljYXRpb24gcmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgXCJOT0xfUkVTUE9OU0VcIiwgLy9SZXNwb25zZSB0byBOT0wgZGF0ZWRcclxuICAgICAgICAgICAgICAgIFwiUFJPQ0VTU0lOR19DTEFSSUZfUkVTUE9OU0VcIiwgLy9SZXNwb25zZSB0byBwcm9jZXNzaW5nIENsYXJpZmljYXRpb24gUmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgXCJRVUFMX0NMSU5fQ0xBUklGX1JFU1BPTlNFXCIsIC8vUmVzcG9uc2UgdG8gcXVhbGl0eSBhbmQgQ2xpbmljYWwgY2xhcmlmaWNhdGlvbiBSRXF1ZXN0XHJcbiAgICAgICAgICAgICAgICBcIlFVQUxfQ0xBUklGX1JFU1BPTlNFXCIsIC8vUmVzcG9uc2UgdG8gUXVhbGl0eSBDbGFyaWZpY2F0aW9uIHJlcXVlc3RcclxuICAgICAgICAgICAgICAgIFwiU0NSRUVOSU5HX0FDQ0VQVF9SRVNQT05TRVwiLCAvL3Jlc3BvbnNlIHRvIHNjcmVlbmluZyBhY2NlcHRhbmNlIGxldHRlclxyXG4gICAgICAgICAgICAgICAgXCJTQ1JFRU5JTkdfQ0xBUklGX1JFU1BPTlNFXCIsIC8vIHJlc3BvbnNlIHRvIHNjcmVlbmluZyBjbGFyaWZpY2F0aW9uIHJlcXVlc3RcclxuICAgICAgICAgICAgICAgIFwiU0ROX1JFU1BPTlNFXCIsIC8vcmVzcG9uc2UgdG8gU0ROXHJcbiAgICAgICAgICAgICAgICBcIlBIT05FX1JRX1JFU1BPTlNFXCIsIC8vUmVzcG9uc2UgdG8gdGVsZXBob25lIFJlcXVlc3RcclxuICAgICAgICAgICAgICAgIFwiVU5TT0xJQ0lURURfREFUQVwiIC8vVW5zb2xpY2l0ZWQgRGF0YVxyXG4gICAgICAgICAgICBdKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGdldE5EU0FycmF5KCkge1xyXG4gICAgICAgICAgICByZXR1cm4gKFtcclxuICAgICAgICAgICAgICAgIFwiQ0FOQ0VMX0xFVFRFUlwiLCAvL2NhbmNlbGxhdGlvbiBsZXR0ZXJcclxuICAgICAgICAgICAgICAgIFwiQ09NTUVOVFNfTk9DXCIsIC8vIGNvbW1lbnRzIG9uIG5vdGljZSBvZiBkZWNpc2lvblxyXG4gICAgICAgICAgICAgICAgXCJDT01NRU5UU19TVU1NQVJZX0JBU0lTXCIsIC8vY29tbW1lbnRzIG9uIHN1bW1hcnkgYmFzaXNcclxuICAgICAgICAgICAgICAgIFwiRFJVR19OT1RJRl9GT1JNXCIsIC8vIGRydWcgbm90aWZpY2F0aW9uIGZvcm1cclxuICAgICAgICAgICAgICAgIFwiSU5JVElBTFwiLCAvL0luaXRpYWxcclxuICAgICAgICAgICAgICAgIFwiUE9TVF9DTEVBUkFOQ0VfREFUQVwiLCAvL3Bvc3QgY2xlYXJhbmNlIGRhdGFcclxuICAgICAgICAgICAgICAgIFwiUFJFU1VCX01FRVRJTkdfUEtHXCIsIC8vIHByZXN1Ym1pc3Npb24gbWVldGluZyBwYWNrYWdlXHJcbiAgICAgICAgICAgICAgICBcIlBSSU9SSVRZX1JFVklFV19SUVwiLCAvLyBQcmlvcml0eSByZXdpZXcgcmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgXCJQUklTVElORV9QTVwiLCAvLyBQcmlzdGluZSBQTVxyXG4gICAgICAgICAgICAgICAgXCJQUklTVElORV9QTV8yTEFOR1wiLCAvLyBwcmlzdGluZSBQTSBzZWNvbmQgbGFuZ3VhZ2VcclxuICAgICAgICAgICAgICAgIFwiQkVfQ0xBUklGX1JFU1BPTlNFXCIsIC8vUmVzcG9uc2UgdG8gQkUgY2xhcmlmaWNhdGlvbiByZXF1ZXN0IGRhdGVkLi5cclxuICAgICAgICAgICAgICAgIFwiQ0xJTl9DTEFSSUZfUkVTUE9OU0VcIiwgLy9SZXNwb25zZSB0byBjbGluaWNhbCBjbGFyaWZpYWN0aW9uIHJlcXVlc3RcclxuICAgICAgICAgICAgICAgIFwiRU1BSUxfUlFfUkVTUE9OU0VcIiwvLyByZXNwb25zZSB0byBlbWFpbCByZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICBcIkxBQkVMX0NMQVJJRl9SRVNQT05TRVwiLCAvL1Jlc3BvbnNlIHRvIGxhYmVsbGluZyBjbGFyaWZpY2F0aW9uIHJlcXVlc3RcclxuICAgICAgICAgICAgICAgIFwiTk9DX1JFU1BPTlNFXCIsIC8vcmVzcG9uc2UgdG8gTk9DLyBjLVFuXHJcbiAgICAgICAgICAgICAgICBcIk5PRF9SRVNQT05TRVwiLCAvL1Jlc3BvbnNlIHRvIE5PRFxyXG4gICAgICAgICAgICAgICAgXCJOT05fUkVTUE9OU0VcIiwgLy9SZXNwb25zZSB0byBOT05cclxuICAgICAgICAgICAgICAgIFwiUFJPQ0VTU0lOR19DTEFSSUZfUkVTUE9OU0VcIiwgLy9SZXNwb25zZSB0byBwcm9jZXNzaW5nIENsYXJpZmljYXRpb24gUmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgXCJRVUFMX0NMSU5fQ0xBUklGX1JFU1BPTlNFXCIsIC8vUmVzcG9uc2UgdG8gcXVhbGl0eSBhbmQgQ2xpbmljYWwgY2xhcmlmaWNhdGlvbiBSRXF1ZXN0XHJcbiAgICAgICAgICAgICAgICBcIlFVQUxfQ0xBUklGX1JFU1BPTlNFXCIsIC8vUmVzcG9uc2UgdG8gUXVhbGl0eSBDbGFyaWZpY2F0aW9uIHJlcXVlc3RcclxuICAgICAgICAgICAgICAgIFwiU0NSRUVOSU5HX0FDQ0VQVF9SRVNQT05TRVwiLCAvL3Jlc3BvbnNlIHRvIHNjcmVlbmluZyBhY2NlcHRhbmNlIGxldHRlclxyXG4gICAgICAgICAgICAgICAgXCJTQ1JFRU5JTkdfQ0xBUklGX1JFU1BPTlNFXCIsIC8vIHJlc3BvbnNlIHRvIHNjcmVlbmluZyBjbGFyaWZpY2F0aW9uIHJlcXVlc3RcclxuICAgICAgICAgICAgICAgIFwiU0ROX1JFU1BPTlNFXCIsIC8vcmVzcG9uc2UgdG8gU0ROXHJcbiAgICAgICAgICAgICAgICBcIlBIT05FX1JRX1JFU1BPTlNFXCIsIC8vUmVzcG9uc2UgdG8gdGVsZXBob25lIFJlcXVlc3RcclxuICAgICAgICAgICAgICAgIFwiVU5TT0xJQ0lURURfREFUQVwiIC8vVW5zb2xpY2l0ZWQgRGF0YVxyXG4gICAgICAgICAgICBdKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZ2V0UERDQXJyYXkoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAoW1xyXG4gICAgICAgICAgICAgICAgXCJDQU5DRUxfTEVUVEVSXCIsIC8vY2FuY2VsbGF0aW9uIGxldHRlclxyXG4gICAgICAgICAgICAgICAgXCJQT1NUX0FVVEhfRElWMV9DSEFOR0VcIiwgLy8gUG9zdCBhdXRvcml6YXRpb24gRGl2aXNpb24gMSBjaGFuZ2VcclxuICAgICAgICAgICAgICAgIFwiRU1BSUxfUlFfUkVTUE9OU0VcIiwvLyByZXNwb25zZSB0byBlbWFpbCByZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICBcIlBST0NFU1NJTkdfQ0xBUklGX1JFU1BPTlNFXCIsIC8vUmVzcG9uc2UgdG8gcHJvY2Vzc2luZyBDbGFyaWZpY2F0aW9uIFJlcXVlc3RcclxuICAgICAgICAgICAgICAgIFwiUEhPTkVfUlFfUkVTUE9OU0VcIiAvL1Jlc3BvbnNlIHRvIHRlbGVwaG9uZSBSZXF1ZXN0XHJcbiAgICAgICAgICAgIF0pXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvL1BEQyBhbmQgUERDQiBoYXZlIHRoZSBzYW1lIGNvbnRlbnQgY3VycmVudGx5XHJcbiAgICAgICAgZnVuY3Rpb24gZ2V0UERDQkFycmF5KCkge1xyXG4gICAgICAgICAgICByZXR1cm4gKFtcclxuICAgICAgICAgICAgICAgIFwiQ0FOQ0VMX0xFVFRFUlwiLCAvL2NhbmNlbGxhdGlvbiBsZXR0ZXJcclxuICAgICAgICAgICAgICAgIFwiUE9TVF9BVVRIX0RJVjFfQ0hBTkdFXCIsIC8vIFBvc3QgYXV0b3JpemF0aW9uIERpdmlzaW9uIDEgY2hhbmdlXHJcbiAgICAgICAgICAgICAgICBcIkVNQUlMX1JRX1JFU1BPTlNFXCIsLy8gcmVzcG9uc2UgdG8gZW1haWwgcmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgXCJQUk9DRVNTSU5HX0NMQVJJRl9SRVNQT05TRVwiLCAvL1Jlc3BvbnNlIHRvIHByb2Nlc3NpbmcgQ2xhcmlmaWNhdGlvbiBSZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICBcIlBIT05FX1JRX1JFU1BPTlNFXCIgLy9SZXNwb25zZSB0byB0ZWxlcGhvbmUgUmVxdWVzdFxyXG4gICAgICAgICAgICBdKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZ2V0UFNVUkNBcnJheSgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIChbXHJcbiAgICAgICAgICAgICAgICBcIkNBTkNFTF9MRVRURVJcIiwgLy9jYW5jZWxsYXRpb24gbGV0dGVyXHJcbiAgICAgICAgICAgICAgICBcIkZPUl9QRVJJT0RcIiwgLy9mb3IgcGVyaW9kIG9mIC4uLi5cclxuICAgICAgICAgICAgICAgIFwiQ0xJTl9DTEFSSUZfUkVTUE9OU0VcIiwgLy9SZXNwb25zZSB0byBjbGluaWNhbCBjbGFyaWZpYWN0aW9uIHJlcXVlc3RcclxuICAgICAgICAgICAgICAgIFwiRU1BSUxfUlFfUkVTUE9OU0VcIiwvLyByZXNwb25zZSB0byBlbWFpbCByZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICBcIlBST0NFU1NJTkdfQ0xBUklGX1JFU1BPTlNFXCIsIC8vUmVzcG9uc2UgdG8gcHJvY2Vzc2luZyBDbGFyaWZpY2F0aW9uIFJlcXVlc3RcclxuICAgICAgICAgICAgICAgIFwiUEhPTkVfUlFfUkVTUE9OU0VcIiAvL1Jlc3BvbnNlIHRvIHRlbGVwaG9uZSBSZXF1ZXN0XHJcbiAgICAgICAgICAgIF0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZ2V0UFNVUlBWQXJyYXkoKSB7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gKFtcclxuICAgICAgICAgICAgICAgIFwiQ0FOQ0VMX0xFVFRFUlwiLCAvL2NhbmNlbGxhdGlvbiBsZXR0ZXJcclxuICAgICAgICAgICAgICAgIFwiRk9SX1BFUklPRFwiLCAvL2ZvciBwZXJpb2Qgb2YgLi4uLlxyXG4gICAgICAgICAgICAgICAgXCJFTUFJTF9SUV9SRVNQT05TRVwiLC8vIHJlc3BvbnNlIHRvIGVtYWlsIHJlcXVlc3RcclxuICAgICAgICAgICAgICAgIFwiUFJPQ0VTU0lOR19DTEFSSUZfUkVTUE9OU0VcIiwgLy9SZXNwb25zZSB0byBwcm9jZXNzaW5nIENsYXJpZmljYXRpb24gUmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgXCJQSE9ORV9SUV9SRVNQT05TRVwiIC8vUmVzcG9uc2UgdG8gdGVsZXBob25lIFJlcXVlc3RcclxuICAgICAgICAgICAgXSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBnZXRSTVBQVkFycmF5KCkge1xyXG4gICAgICAgICAgICByZXR1cm4gKFtcclxuICAgICAgICAgICAgICAgIFwiQ0FOQ0VMX0xFVFRFUlwiLCAvL2NhbmNlbGxhdGlvbiBsZXR0ZXJcclxuICAgICAgICAgICAgICAgIFwiRU1BSUxfUlFfUkVTUE9OU0VcIiwvLyByZXNwb25zZSB0byBlbWFpbCByZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICBcIlBST0NFU1NJTkdfQ0xBUklGX1JFU1BPTlNFXCIsIC8vUmVzcG9uc2UgdG8gcHJvY2Vzc2luZyBDbGFyaWZpY2F0aW9uIFJlcXVlc3RcclxuICAgICAgICAgICAgICAgIFwiUEhPTkVfUlFfUkVTUE9OU0VcIiwgLy9SZXNwb25zZSB0byB0ZWxlcGhvbmUgUmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgXCJSTVBfVkVSU0lPTl9EQVRFXCIgLy9STVAgdmVyaXNvblxyXG4gICAgICAgICAgICBdKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGdldFNBTkRTQXJyYXkoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAoW1xyXG4gICAgICAgICAgICAgICAgXCJBRE1JTklTVFJBVElWRVwiLCAvL2FkbWluaXN0cmF0aXZlXHJcbiAgICAgICAgICAgICAgICBcIkNBTkNFTF9MRVRURVJcIiwgLy9jYW5jZWxsYXRpb24gbGV0dGVyXHJcbiAgICAgICAgICAgICAgICBcIkRSVUdfTk9USUZfRk9STVwiLCAvLyBkcnVnIG5vdGlmaWNhdGlvbiBmb3JtXHJcbiAgICAgICAgICAgICAgICBcIlBPU1RfQ0xFQVJBTkNFX0RBVEFcIiwgLy9wb3N0IGNsZWFyYW5jZSBkYXRhXHJcbiAgICAgICAgICAgICAgICBcIlBPU1RfTk9DX0NIQU5HRVwiLCAvL1Bvc3QgTk9DIGNoYW5nZVxyXG4gICAgICAgICAgICAgICAgXCJQUklTVElORV9QTVwiLCAvLyBQcmlzdGluZSBQTVxyXG4gICAgICAgICAgICAgICAgXCJQUklTVElORV9QTV8yTEFOR1wiLCAvLyBwcmlzdGluZSBQTSBzZWNvbmQgbGFuZ3VhZ2VcclxuICAgICAgICAgICAgICAgIFwiQkVfQ0xBUklGX1JFU1BPTlNFXCIsIC8vUmVzcG9uc2UgdG8gQkUgY2xhcmlmaWNhdGlvbiByZXF1ZXN0IGRhdGVkLi5cclxuICAgICAgICAgICAgICAgIFwiQ0xJTl9DTEFSSUZfUkVTUE9OU0VcIiwgLy9SZXNwb25zZSB0byBjbGluaWNhbCBjbGFyaWZpYWN0aW9uIHJlcXVlc3RcclxuICAgICAgICAgICAgICAgIFwiRU1BSUxfUlFfUkVTUE9OU0VcIiwvLyByZXNwb25zZSB0byBlbWFpbCByZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICBcIkxBQkVMX0NMQVJJRl9SRVNQT05TRVwiLCAvL1Jlc3BvbnNlIHRvIGxhYmVsbGluZyBjbGFyaWZpY2F0aW9uIHJlcXVlc3RcclxuICAgICAgICAgICAgICAgIFwiTk9DX1JFU1BPTlNFXCIsIC8vcmVzcG9uc2UgdG8gTk9DLyBjLVFuXHJcbiAgICAgICAgICAgICAgICBcIk5PRF9SRVNQT05TRVwiLCAvL1Jlc3BvbnNlIHRvIE5PRFxyXG4gICAgICAgICAgICAgICAgXCJOT05fUkVTUE9OU0VcIiwgLy9SZXNwb25zZSB0byBOT05cclxuICAgICAgICAgICAgICAgIFwiUFJPQ0VTU0lOR19DTEFSSUZfUkVTUE9OU0VcIiwgLy9SZXNwb25zZSB0byBwcm9jZXNzaW5nIENsYXJpZmljYXRpb24gUmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgXCJRVUFMX0NMSU5fQ0xBUklGX1JFU1BPTlNFXCIsIC8vUmVzcG9uc2UgdG8gcXVhbGl0eSBhbmQgQ2xpbmljYWwgY2xhcmlmaWNhdGlvbiBSRXF1ZXN0XHJcbiAgICAgICAgICAgICAgICBcIlFVQUxfQ0xBUklGX1JFU1BPTlNFXCIsIC8vUmVzcG9uc2UgdG8gUXVhbGl0eSBDbGFyaWZpY2F0aW9uIHJlcXVlc3RcclxuICAgICAgICAgICAgICAgIFwiU0NSRUVOSU5HX0FDQ0VQVF9SRVNQT05TRVwiLCAvL3Jlc3BvbnNlIHRvIHNjcmVlbmluZyBhY2NlcHRhbmNlIGxldHRlclxyXG4gICAgICAgICAgICAgICAgXCJTQ1JFRU5JTkdfQ0xBUklGX1JFU1BPTlNFXCIsIC8vIHJlc3BvbnNlIHRvIHNjcmVlbmluZyBjbGFyaWZpY2F0aW9uIHJlcXVlc3RcclxuICAgICAgICAgICAgICAgIFwiU0ROX1JFU1BPTlNFXCIsIC8vcmVzcG9uc2UgdG8gU0ROXHJcbiAgICAgICAgICAgICAgICBcIlBIT05FX1JRX1JFU1BPTlNFXCIsIC8vUmVzcG9uc2UgdG8gdGVsZXBob25lIFJlcXVlc3RcclxuICAgICAgICAgICAgICAgIFwiVU5TT0xJQ0lURURfREFUQVwiIC8vVW5zb2xpY2l0ZWQgRGF0YVxyXG4gICAgICAgICAgICBdKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGdldFNORFNBcnJheSgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIChbXHJcbiAgICAgICAgICAgICAgICBcIkFETUlOSVNUUkFUSVZFXCIsIC8vYWRtaW5pc3RyYXRpdmVcclxuICAgICAgICAgICAgICAgIFwiQ0FOQ0VMX0xFVFRFUlwiLCAvL2NhbmNlbGxhdGlvbiBsZXR0ZXJcclxuICAgICAgICAgICAgICAgIFwiQ09NTUVOVFNfU1VNTUFSWV9CQVNJU1wiLCAvL2NvbW1tZW50cyBvbiBzdW1tYXJ5IGJhc2lzXHJcbiAgICAgICAgICAgICAgICBcIkRSVUdfTk9USUZfRk9STVwiLCAvLyBkcnVnIG5vdGlmaWNhdGlvbiBmb3JtXHJcbiAgICAgICAgICAgICAgICBcIlBPU1RfQ0xFQVJBTkNFX0RBVEFcIiwgLy9wb3N0IGNsZWFyYW5jZSBkYXRhXHJcbiAgICAgICAgICAgICAgICBcIlBPU1RfTk9DX0NIQU5HRVwiLCAvL1Bvc3QgTk9DIGNoYW5nZVxyXG4gICAgICAgICAgICAgICAgXCJQUkVTVUJfTUVFVElOR19QS0dcIiwgLy8gcHJlc3VibWlzc2lvbiBtZWV0aW5nIHBhY2thZ2VcclxuICAgICAgICAgICAgICAgIFwiUFJJT1JJVFlfUkVWSUVXX1JRXCIsIC8vIFByaW9yaXR5IHJld2lldyByZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICBcIlBSSVNUSU5FX1BNXCIsIC8vIFByaXN0aW5lIFBNXHJcbiAgICAgICAgICAgICAgICBcIlBSSVNUSU5FX1BNXzJMQU5HXCIsIC8vIHByaXN0aW5lIFBNIHNlY29uZCBsYW5ndWFnZVxyXG4gICAgICAgICAgICAgICAgXCJCRV9DTEFSSUZfUkVTUE9OU0VcIiwgLy9SZXNwb25zZSB0byBCRSBjbGFyaWZpY2F0aW9uIHJlcXVlc3QgZGF0ZWQuLlxyXG4gICAgICAgICAgICAgICAgXCJDTElOX0NMQVJJRl9SRVNQT05TRVwiLCAvL1Jlc3BvbnNlIHRvIGNsaW5pY2FsIGNsYXJpZmlhY3Rpb24gcmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgXCJFTUFJTF9SUV9SRVNQT05TRVwiLC8vIHJlc3BvbnNlIHRvIGVtYWlsIHJlcXVlc3RcclxuICAgICAgICAgICAgICAgIFwiTEFCRUxfQ0xBUklGX1JFU1BPTlNFXCIsIC8vUmVzcG9uc2UgdG8gbGFiZWxsaW5nIGNsYXJpZmljYXRpb24gcmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgXCJOT0NfUkVTUE9OU0VcIiwgLy9yZXNwb25zZSB0byBOT0MvIGMtUW5cclxuICAgICAgICAgICAgICAgIFwiTk9EX1JFU1BPTlNFXCIsIC8vUmVzcG9uc2UgdG8gTk9EXHJcbiAgICAgICAgICAgICAgICBcIk5PTl9SRVNQT05TRVwiLCAvL1Jlc3BvbnNlIHRvIE5PTlxyXG4gICAgICAgICAgICAgICAgXCJQUk9DRVNTSU5HX0NMQVJJRl9SRVNQT05TRVwiLCAvL1Jlc3BvbnNlIHRvIHByb2Nlc3NpbmcgQ2xhcmlmaWNhdGlvbiBSZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICBcIlFVQUxfQ0xJTl9DTEFSSUZfUkVTUE9OU0VcIiwgLy9SZXNwb25zZSB0byBxdWFsaXR5IGFuZCBDbGluaWNhbCBjbGFyaWZpY2F0aW9uIFJFcXVlc3RcclxuICAgICAgICAgICAgICAgIFwiUVVBTF9DTEFSSUZfUkVTUE9OU0VcIiwgLy9SZXNwb25zZSB0byBRdWFsaXR5IENsYXJpZmljYXRpb24gcmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgXCJTQ1JFRU5JTkdfQUNDRVBUX1JFU1BPTlNFXCIsIC8vcmVzcG9uc2UgdG8gc2NyZWVuaW5nIGFjY2VwdGFuY2UgbGV0dGVyXHJcbiAgICAgICAgICAgICAgICBcIlNDUkVFTklOR19DTEFSSUZfUkVTUE9OU0VcIiwgLy8gcmVzcG9uc2UgdG8gc2NyZWVuaW5nIGNsYXJpZmljYXRpb24gcmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgXCJTRE5fUkVTUE9OU0VcIiwgLy9yZXNwb25zZSB0byBTRE5cclxuICAgICAgICAgICAgICAgIFwiUEhPTkVfUlFfUkVTUE9OU0VcIiwgLy9SZXNwb25zZSB0byB0ZWxlcGhvbmUgUmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgXCJVTlNPTElDSVRFRF9EQVRBXCIgLy9VbnNvbGljaXRlZCBEYXRhXHJcbiAgICAgICAgICAgIF0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZ2V0U05EU0NBcnJheSgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIChbXHJcbiAgICAgICAgICAgICAgICBcIkNBTkNFTF9MRVRURVJcIiwgLy9jYW5jZWxsYXRpb24gbGV0dGVyXHJcbiAgICAgICAgICAgICAgICBcIlBPU1RfTk9DX0NIQU5HRVwiLCAvL1Bvc3QgTk9DIGNoYW5nZVxyXG4gICAgICAgICAgICAgICAgXCJQUklTVElORV9QTVwiLCAvLyBQcmlzdGluZSBQTVxyXG4gICAgICAgICAgICAgICAgXCJQUklTVElORV9QTV8yTEFOR1wiLCAvLyBwcmlzdGluZSBQTSBzZWNvbmQgbGFuZ3VhZ2VcclxuICAgICAgICAgICAgICAgIFwiQ0xJTl9DTEFSSUZfUkVTUE9OU0VcIiwgLy9SZXNwb25zZSB0byBjbGluaWNhbCBjbGFyaWZpYWN0aW9uIHJlcXVlc3RcclxuICAgICAgICAgICAgICAgIFwiRU1BSUxfUlFfUkVTUE9OU0VcIiwvLyByZXNwb25zZSB0byBlbWFpbCByZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICBcIkxBQkVMX0NMQVJJRl9SRVNQT05TRVwiLCAvL1Jlc3BvbnNlIHRvIGxhYmVsbGluZyBjbGFyaWZpY2F0aW9uIHJlcXVlc3RcclxuICAgICAgICAgICAgICAgIFwiTk9DX1JFU1BPTlNFXCIsIC8vcmVzcG9uc2UgdG8gTk9DLyBjLVFuXHJcbiAgICAgICAgICAgICAgICBcIk5PRF9SRVNQT05TRVwiLCAvL1Jlc3BvbnNlIHRvIE5PRFxyXG4gICAgICAgICAgICAgICAgXCJOT05fUkVTUE9OU0VcIiwgLy9SZXNwb25zZSB0byBOT05cclxuICAgICAgICAgICAgICAgIFwiUFJPQ0VTU0lOR19DTEFSSUZfUkVTUE9OU0VcIiwgLy9SZXNwb25zZSB0byBwcm9jZXNzaW5nIENsYXJpZmljYXRpb24gUmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgXCJQSE9ORV9SUV9SRVNQT05TRVwiLCAvL1Jlc3BvbnNlIHRvIHRlbGVwaG9uZSBSZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICBcIlJJU0tfQ09NTVVOX0RPQ1wiLCAvL1Jpc2sgY29tbXVuaWNhdGlvbiBkb2N1bWVudFxyXG4gICAgICAgICAgICAgICAgXCJTSUdOQUxfV09SS19VUFwiIC8vU2lnbmFsIFdvcmsgdXBcclxuICAgICAgICAgICAgXSk7XHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZ2V0VURQVkFycmF5KCkge1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIChbXHJcbiAgICAgICAgICAgICAgICBcIkJFTkVGSVRfUklTS19BU1NFU1NcIiwgLy9iZW5lZml0IHJpc2sgYXNzZXNzbWVudFxyXG4gICAgICAgICAgICAgICAgXCJDQU5DRUxfTEVUVEVSXCIsIC8vY2FuY2VsbGF0aW9uIGxldHRlclxyXG4gICAgICAgICAgICAgICAgXCJOT1RJRklDQVRJT05fQ0hBTkdFXCIsIC8vbm90aWZpY2FpdG9uIG9mIGNoYW5nZSBpbiBiZW5lZml0IHByb2ZpbGVcclxuICAgICAgICAgICAgICAgIFwiUE9TVF9NQVJLRVRfU1VSVlwiLCAvLyBwb3N0IG1hcmtldGluZyBzdXJ2ZWlsbGFuY2VcclxuICAgICAgICAgICAgICAgIFwiRU1BSUxfUlFfUkVTUE9OU0VcIiwvLyByZXNwb25zZSB0byBlbWFpbCByZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICBcIk1IUERfUlFfUkVTUE9OU0VcIiwgLy9SZXNwb25zZSB0byBNSFBEIHJlcXVlc3RzXHJcbiAgICAgICAgICAgICAgICBcIlBST0NFU1NJTkdfQ0xBUklGX1JFU1BPTlNFXCIsIC8vUmVzcG9uc2UgdG8gcHJvY2Vzc2luZyBDbGFyaWZpY2F0aW9uIFJlcXVlc3RcclxuICAgICAgICAgICAgICAgIFwiUEhPTkVfUlFfUkVTUE9OU0VcIiwgLy9SZXNwb25zZSB0byB0ZWxlcGhvbmUgUmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgXCJSSVNLX0NPTU1VTl9ET0NcIiwgLy9SaXNrIGNvbW11bmljYXRpb24gZG9jdW1lbnRcclxuICAgICAgICAgICAgICAgIFwiU0lHTkFMX1dPUktfVVBcIiAvL1NpZ25hbCBXb3JrIHVwXHJcbiAgICAgICAgICAgIF0pXHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZ2V0VURSQVZBcnJheSgpIHtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiAoW1xyXG4gICAgICAgICAgICAgICAgXCJDQU5DRUxfTEVUVEVSXCIsIC8vY2FuY2VsbGF0aW9uIGxldHRlclxyXG4gICAgICAgICAgICAgICAgXCJESU5fRElTQ09OVElOVUVEXCIsIC8vIGRpbiBkaXNjb250aW51ZWRcclxuICAgICAgICAgICAgICAgIFwiQURWSVNFTUVOVF9MRVRURVJfUkVTUE9OU0VcIiwgLy9SRXNwb3NlIHRvIEFkdmlzZW1lbnQgTGV0dGVyIGRhdGVkXHJcbiAgICAgICAgICAgICAgICBcIkVNQUlMX1JRX1JFU1BPTlNFXCIsLy8gcmVzcG9uc2UgdG8gZW1haWwgcmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgXCJQUk9DRVNTSU5HX0NMQVJJRl9SRVNQT05TRVwiLCAvL1Jlc3BvbnNlIHRvIHByb2Nlc3NpbmcgQ2xhcmlmaWNhdGlvbiBSZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICBcIlBIT05FX1JRX1JFU1BPTlNFXCIsIC8vUmVzcG9uc2UgdG8gdGVsZXBob25lIFJlcXVlc3RcclxuICAgICAgICAgICAgICAgIFwiVU5TT0xJQ0lURURfREFUQVwiXHJcbiAgICAgICAgICAgIF0pXHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZ2V0Q29uc3VsdEFycmF5KCkge1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIChbXHJcbiAgICAgICAgICAgICAgICBcIlBBTkRFTUlDX0FQUExcIiAvL3BhbmRlbWljIGFwcGxpY2FpdG9uLFxyXG4gICAgICAgICAgICBdKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gX2dldE1QTkNBcnJheSgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIChbXHJcbiAgICAgICAgICAgICAgICBcIkNBTkNFTF9MRVRURVJcIiwgLy9jYW5jZWxsYXRpb24gbGV0dGVyXHJcbiAgICAgICAgICAgICAgICBcIk1FRVRJTkdfTUlOVVRFU1wiLFxyXG4gICAgICAgICAgICAgICAgXCJFTUFJTF9SUV9SRVNQT05TRVwiLC8vIHJlc3BvbnNlIHRvIGVtYWlsIHJlcXVlc3RcclxuICAgICAgICAgICAgICAgIFwiUFJPQ0VTU0lOR19DTEFSSUZfUkVTUE9OU0VcIiwgLy9SZXNwb25zZSB0byBwcm9jZXNzaW5nIENsYXJpZmljYXRpb24gUmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgXCJQSE9ORV9SUV9SRVNQT05TRVwiIC8vUmVzcG9uc2UgdG8gdGVsZXBob25lIFJlcXVlc3RcclxuICAgICAgICAgICAgXSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBfZ2V0TVBORFNBcnJheSgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIChbXHJcbiAgICAgICAgICAgICAgICBcIkNBTkNFTF9MRVRURVJcIiwgLy9jYW5jZWxsYXRpb24gbGV0dGVyXHJcbiAgICAgICAgICAgICAgICBcIk1FRVRJTkdfTUlOVVRFU1wiLFxyXG4gICAgICAgICAgICAgICAgXCJFTUFJTF9SUV9SRVNQT05TRVwiLC8vIHJlc3BvbnNlIHRvIGVtYWlsIHJlcXVlc3RcclxuICAgICAgICAgICAgICAgIFwiUFJPQ0VTU0lOR19DTEFSSUZfUkVTUE9OU0VcIiwgLy9SZXNwb25zZSB0byBwcm9jZXNzaW5nIENsYXJpZmljYXRpb24gUmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgXCJQSE9ORV9SUV9SRVNQT05TRVwiIC8vUmVzcG9uc2UgdG8gdGVsZXBob25lIFJlcXVlc3RcclxuICAgICAgICAgICAgXSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBfZ2V0TVBTTkRTQXJyYXkoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAoW1xyXG4gICAgICAgICAgICAgICAgXCJDQU5DRUxfTEVUVEVSXCIsIC8vY2FuY2VsbGF0aW9uIGxldHRlclxyXG4gICAgICAgICAgICAgICAgXCJNRUVUSU5HX01JTlVURVNcIixcclxuICAgICAgICAgICAgICAgIFwiRU1BSUxfUlFfUkVTUE9OU0VcIiwvLyByZXNwb25zZSB0byBlbWFpbCByZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICBcIlBST0NFU1NJTkdfQ0xBUklGX1JFU1BPTlNFXCIsIC8vUmVzcG9uc2UgdG8gcHJvY2Vzc2luZyBDbGFyaWZpY2F0aW9uIFJlcXVlc3RcclxuICAgICAgICAgICAgICAgIFwiUEhPTkVfUlFfUkVTUE9OU0VcIiAvL1Jlc3BvbnNlIHRvIHRlbGVwaG9uZSBSZXF1ZXN0XHJcbiAgICAgICAgICAgIF0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gX2dldFBBTkRBcnJheSgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIChbXHJcbiAgICAgICAgICAgICAgICBcIkNBTkNFTF9MRVRURVJcIiwgLy9jYW5jZWxsYXRpb24gbGV0dGVyXHJcbiAgICAgICAgICAgICAgICBcIkVNQUlMX1JRX1JFU1BPTlNFXCIsLy8gcmVzcG9uc2UgdG8gZW1haWwgcmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgXCJQUk9DRVNTSU5HX0NMQVJJRl9SRVNQT05TRVwiLCAvL1Jlc3BvbnNlIHRvIHByb2Nlc3NpbmcgQ2xhcmlmaWNhdGlvbiBSZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICBcIlBIT05FX1JRX1JFU1BPTlNFXCIgLy9SZXNwb25zZSB0byB0ZWxlcGhvbmUgUmVxdWVzdFxyXG4gICAgICAgICAgICBdKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIF9nZXRQQlJFUkNBcnJheSgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIChbXHJcbiAgICAgICAgICAgICAgICBcIkNBTkNFTF9MRVRURVJcIiwgLy9jYW5jZWxsYXRpb24gbGV0dGVyXHJcbiAgICAgICAgICAgICAgICBcIkVNQUlMX1JRX1JFU1BPTlNFXCIsLy8gcmVzcG9uc2UgdG8gZW1haWwgcmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgXCJQUk9DRVNTSU5HX0NMQVJJRl9SRVNQT05TRVwiLCAvL1Jlc3BvbnNlIHRvIHByb2Nlc3NpbmcgQ2xhcmlmaWNhdGlvbiBSZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICBcIlBIT05FX1JRX1JFU1BPTlNFXCIgLy9SZXNwb25zZSB0byB0ZWxlcGhvbmUgUmVxdWVzdFxyXG4gICAgICAgICAgICBdKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIF9nZXRQQlJFUlBWQXJyYXkoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAoW1xyXG4gICAgICAgICAgICAgICAgXCJDQU5DRUxfTEVUVEVSXCIsIC8vY2FuY2VsbGF0aW9uIGxldHRlclxyXG4gICAgICAgICAgICAgICAgXCJFTUFJTF9SUV9SRVNQT05TRVwiLC8vIHJlc3BvbnNlIHRvIGVtYWlsIHJlcXVlc3RcclxuICAgICAgICAgICAgICAgIFwiUFJPQ0VTU0lOR19DTEFSSUZfUkVTUE9OU0VcIiwgLy9SZXNwb25zZSB0byBwcm9jZXNzaW5nIENsYXJpZmljYXRpb24gUmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgXCJQSE9ORV9SUV9SRVNQT05TRVwiIC8vUmVzcG9uc2UgdG8gdGVsZXBob25lIFJlcXVlc3RcclxuICAgICAgICAgICAgXSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiAgX2dldFBSTkRTQXJyYXkoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAoW1xyXG4gICAgICAgICAgICAgICAgXCJDQU5DRUxfTEVUVEVSXCIsIC8vY2FuY2VsbGF0aW9uIGxldHRlclxyXG4gICAgICAgICAgICAgICAgXCJFTUFJTF9SUV9SRVNQT05TRVwiLC8vIHJlc3BvbnNlIHRvIGVtYWlsIHJlcXVlc3RcclxuICAgICAgICAgICAgICAgIFwiUFJPQ0VTU0lOR19DTEFSSUZfUkVTUE9OU0VcIiwgLy9SZXNwb25zZSB0byBwcm9jZXNzaW5nIENsYXJpZmljYXRpb24gUmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgXCJQSE9ORV9SUV9SRVNQT05TRVwiIC8vUmVzcG9uc2UgdG8gdGVsZXBob25lIFJlcXVlc3RcclxuICAgICAgICAgICAgXSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBfZ2V0UFJTTkRTQXJyYXkoKXtcclxuICAgICAgICAgICAgcmV0dXJuIChbXHJcbiAgICAgICAgICAgICAgICBcIkNBTkNFTF9MRVRURVJcIiwgLy9jYW5jZWxsYXRpb24gbGV0dGVyXHJcbiAgICAgICAgICAgICAgICBcIkVNQUlMX1JRX1JFU1BPTlNFXCIsLy8gcmVzcG9uc2UgdG8gZW1haWwgcmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgXCJQUk9DRVNTSU5HX0NMQVJJRl9SRVNQT05TRVwiLCAvL1Jlc3BvbnNlIHRvIHByb2Nlc3NpbmcgQ2xhcmlmaWNhdGlvbiBSZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICBcIlBIT05FX1JRX1JFU1BPTlNFXCIgLy9SZXNwb25zZSB0byB0ZWxlcGhvbmUgUmVxdWVzdFxyXG4gICAgICAgICAgICBdKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGdldFlCUFJBcnJheSgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIChbXHJcbiAgICAgICAgICAgICAgICBcIkNBTkNFTF9MRVRURVJcIiwgLy9jYW5jZWxsYXRpb24gbGV0dGVyXHJcbiAgICAgICAgICAgICAgICBcIkZPUl9QRVJJT0RcIiwgLy9mb3IgcGVyaW9kIG9mIC4uLi5cclxuICAgICAgICAgICAgICAgIFwiRU1BSUxfUlFfUkVTUE9OU0VcIiwvLyByZXNwb25zZSB0byBlbWFpbCByZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICBcIlBST0NFU1NJTkdfQ0xBUklGX1JFU1BPTlNFXCIsIC8vUmVzcG9uc2UgdG8gcHJvY2Vzc2luZyBDbGFyaWZpY2F0aW9uIFJlcXVlc3RcclxuICAgICAgICAgICAgICAgIFwiUEhPTkVfUlFfUkVTUE9OU0VcIiAvL1Jlc3BvbnNlIHRvIHRlbGVwaG9uZSBSZXF1ZXN0XHJcbiAgICAgICAgICAgIF0pO1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgfVxyXG59KSgpO1xyXG4iLCIvKipcclxuICogQ3JlYXRlZCBieSBka2lsdHkgb24gOC8yNi8yMDE2LlxyXG4gKi9cclxuLyoqXHJcbiAqIENyZWF0ZWQgYnkgZGtpbHR5IG9uIDEyLzA4LzIwMTYuXHJcbiAqL1xyXG5cclxuKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgnYXBwbGljYXRpb25JbmZvU2VydmljZScsIFtdKVxyXG59KSgpO1xyXG5cclxuXHJcbihmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgnYXBwbGljYXRpb25JbmZvU2VydmljZScpXHJcbiAgICAgICAgLmZhY3RvcnkoJ0FwcGxpY2F0aW9uSW5mb1NlcnZpY2UnLCBBcHBsaWNhdGlvbkluZm9TZXJ2aWNlKTtcclxuXHJcbiAgICBmdW5jdGlvbiBBcHBsaWNhdGlvbkluZm9TZXJ2aWNlKCkge1xyXG4gICAgICAgIGZ1bmN0aW9uIEFwcGxpY2F0aW9uSW5mb1NlcnZpY2UoKSB7XHJcbiAgICAgICAgICAgIC8vY29uc3RydWN0b3IgaGVyZVxyXG4gICAgICAgIH1cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAbmdkb2MgbWV0aG9kIGdldHMgdGhlIGN1cnJlbnQgZGF0ZSBmb3JtYXR0ZWQgYXMgWVlZWS1NTS1ERFxyXG4gICAgICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBBcHBsaWNhdGlvbkluZm9TZXJ2aWNlLnByb3RvdHlwZS5nZXRUb2RheURhdGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBkID0gbmV3IERhdGUoKTtcclxuICAgICAgICAgICAgdmFyIGlzb0RhdGUgPSBkLmdldEZ1bGxZZWFyKCkgKyAnLSdcclxuICAgICAgICAgICAgICAgICsgcGFkKGQuZ2V0TW9udGgoKSArIDEpICsgJy0nXHJcbiAgICAgICAgICAgICAgICArIHBhZChkLmdldERhdGUoKSk7XHJcbiAgICAgICAgICAgIHJldHVybiAoaXNvRGF0ZSk7XHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIHBhZChuKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbiA8IDEwID8gJzAnICsgbiA6IG5cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgQXBwbGljYXRpb25JbmZvU2VydmljZS5wcm90b3R5cGUuaW5jcmVtZW50TWlub3JWZXJzaW9uID0gZnVuY3Rpb24gKGVucm9sbWVudFZlcnNpb24pIHtcclxuICAgICAgICAgICAgdmFyIHJlc3VsdDtcclxuICAgICAgICAgICAgaWYgKCFlbnJvbG1lbnRWZXJzaW9uKSB7XHJcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBcIjAuMVwiO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdmFyIHBhcnRzID0gZW5yb2xtZW50VmVyc2lvbi5zcGxpdCgnLicpO1xyXG4gICAgICAgICAgICAgICAgdmFyIGRlYyA9IHBhcnNlSW50KHBhcnRzWzFdKTtcclxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHBhcnRzWzBdICsgXCIuXCIgKyAoZGVjICsgMSk7XHJcblxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiAocmVzdWx0KTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEluY3JlbWVudHMgdGhlIG1ham9yIHZlcnNpb24uIFNldHMgdGhlIG1pbm9yIHRvIGZhbHNlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgQXBwbGljYXRpb25JbmZvU2VydmljZS5wcm90b3R5cGUuaW5jcmVtZW50TWFqb3JWZXJzaW9uID0gZnVuY3Rpb24gKGVucm9sbWVudFZlcnNpb24pIHtcclxuICAgICAgICAgICAgdmFyIHJlc3VsdDtcclxuICAgICAgICAgICAgaWYgKCFlbnJvbG1lbnRWZXJzaW9uKSB7XHJcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBcIjEuMFwiO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdmFyIHBhcnRzID0gZW5yb2xtZW50VmVyc2lvbi5zcGxpdCgnLicpO1xyXG4gICAgICAgICAgICAgICAgdmFyIHdob2xlID0gcGFyc2VJbnQocGFydHNbMF0pO1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gKHdob2xlICsgMSkgKyBcIi4wXCJcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgQXBwbGljYXRpb25JbmZvU2VydmljZS5wcm90b3R5cGUuZ2V0QXBwbGljYXRpb25TdGF0dXNMaXN0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gKFtcIk5FV1wiLCBcIkFNRU5EXCIsIFwiQVBQUk9WRURcIl0pXHJcbiAgICAgICAgfTtcclxuICAgICAgICBBcHBsaWNhdGlvbkluZm9TZXJ2aWNlLnByb3RvdHlwZS5nZXRBcHByb3ZlZFR5cGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBcIkFQUFJPVkVEXCI7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBBcHBsaWNhdGlvbkluZm9TZXJ2aWNlLnByb3RvdHlwZS5nZXRBbWVuZFR5cGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBcIkFNRU5EXCI7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLy8gUmV0dXJuIGEgcmVmZXJlbmNlIHRvIHRoZSBvYmplY3RcclxuICAgICAgICByZXR1cm4gQXBwbGljYXRpb25JbmZvU2VydmljZTtcclxuICAgIH1cclxuXHJcblxyXG59KSgpO1xyXG4iLCIvKipcclxuICogQ3JlYXRlZCBieSBBYmRlc3NhbWFkIG9uIDcvNi8yMDE2LlxyXG4gKi9cclxuXHJcbihmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ2Rvc3NpZXJTZXJ2aWNlJywgW1xyXG4gICAgICAgICAgICAnZG9zc2llckRhdGFMaXN0cycsXHJcbiAgICAgICAgICAgICdocGZiQ29uc3RhbnRzJyxcclxuICAgICAgICAgICAgJ2RhdGFMaXN0cydcclxuICAgICAgICBdKTtcclxufSkoKTtcclxuXHJcblxyXG4oZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ2Rvc3NpZXJTZXJ2aWNlJylcclxuICAgICAgICAuZmFjdG9yeSgnRG9zc2llclNlcnZpY2UnLCBEb3NzaWVyU2VydmljZSk7XHJcbiAgICBEb3NzaWVyU2VydmljZS4kaW5qZWN0ID0gWydEb3NzaWVyTGlzdHMnLCAnJHRyYW5zbGF0ZScsICckZmlsdGVyJywnZ2V0Q291bnRyeUFuZFByb3ZpbmNlcycsICdPVEhFUicsJ1VOS05PV04nXTtcclxuICAgIGZ1bmN0aW9uIERvc3NpZXJTZXJ2aWNlKERvc3NpZXJMaXN0cywgJHRyYW5zbGF0ZSwgJGZpbHRlcixnZXRDb3VudHJ5QW5kUHJvdmluY2VzLCBPVEhFUiwgVU5LTk9XTikge1xyXG4gICAgICAgIHZhciB5ZXNWYWx1ZSA9ICdZJztcclxuICAgICAgICB2YXIgbm9WYWx1ZSA9ICdOJztcclxuXHJcbiAgICAgICAgLy8gRGVmaW5lIHRoZSBEb3NzaWVyU2VydmljZSBvYmplY3lcclxuICAgICAgICBmdW5jdGlvbiBEb3NzaWVyU2VydmljZSgpIHtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIERvc3NpZXJTZXJ2aWNlKGRvc3NpZXJEYXRhKSB7XHJcbiAgICAgICAgICAgIC8vY29uc3RydWN0aW9uIGxvZ2ljXHJcblxyXG4gICAgICAgICAgICBhbmd1bGFyLmV4dGVuZCh0aGlzLl9kZWZhdWx0LCBkb3NzaWVyRGF0YSk7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgRG9zc2llclNlcnZpY2UucHJvdG90eXBlID0ge1xyXG5cclxuICAgICAgICAgICAgX2RlZmF1bHQ6IHtcclxuICAgICAgICAgICAgICAgIGRvc3NpZXJJRDogXCJcIixcclxuICAgICAgICAgICAgICAgIGNvbXBhbnlJRDogXCJcIixcclxuICAgICAgICAgICAgICAgIHJlbGF0ZWREb3NzaWVySUQ6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBlbnJvbG1lbnRWZXJzaW9uOiBcIjAuMDBcIixcclxuICAgICAgICAgICAgICAgIGRhdGVTYXZlZDogXCJcIixcclxuICAgICAgICAgICAgICAgIGFwcGxpY2F0aW9uVHlwZTogXCJORVdcIixcclxuICAgICAgICAgICAgICAgIHNvZnR3YXJlVmVyc2lvbjogXCIxLjAuMFwiLFxyXG4gICAgICAgICAgICAgICAgZGF0YUNoZWNrc3VtOiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgZG9zc2llclR5cGU6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBwcm9kdWN0TmFtZTogXCJcIixcclxuICAgICAgICAgICAgICAgIHByb3Blck5hbWU6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBpc1JlZlByb2R1Y3RzOiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgZHJ1Z1Byb2R1Y3Q6IHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlyZFBhcnR5U2lnbmVkOiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGRydWdVc2VMaXN0OiBnZXREZWZhdWx0RHJ1Z1VzZUxpc3QoKSxcclxuICAgICAgICAgICAgICAgICAgICBpc1NjaGVkdWxlQTogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgc2NoZWR1bGVBR3JvdXA6IGdldERlZmF1bHRTY2hlZEEoKSxcclxuICAgICAgICAgICAgICAgICAgICB0aGVyYXBldXRpYzogW10sXHJcbiAgICAgICAgICAgICAgICAgICAgY2FuUmVmUHJvZHVjdHM6IFtdLC8vZ3JpZFxyXG4gICAgICAgICAgICAgICAgICAgIGZvcm11bGF0aW9uczogW10sLy90YWIgKyBncmlkICtcclxuICAgICAgICAgICAgICAgICAgICBhcHBlbmRpeEZvdXJMaXN0OiBbXS8qe1xyXG4gICAgICAgICAgICAgICAgICAgICBpbmdyZWRpZW50TGlzdDpbXVxyXG4gICAgICAgICAgICAgICAgICAgICB9Ly90YWIgKyBncmlkICsqL1xyXG5cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBjb250YWN0TGlzdDogW11cclxuXHJcbiAgICAgICAgICAgIH0sXHJcblxyXG4gICAgICAgICAgICBnZXREZWZhdWx0T2JqZWN0OiBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2RlZmF1bHQ7XHJcblxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBsb2FkRnJvbUZpbGU6IGZ1bmN0aW9uIChpbmZvKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCFpbmZvKVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9kZWZhdWx0O1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICghaW5mb1snRE9TU0lFUl9FTlJPTCddKVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9kZWZhdWx0O1xyXG5cclxuICAgICAgICAgICAgICAgIGluZm8gPSBpbmZvWydET1NTSUVSX0VOUk9MJ107XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIGRvc3NpZXJNb2RlbCA9IHtcclxuICAgICAgICAgICAgICAgICAgICBkb3NzaWVySUQ6IGluZm8uZG9zc2llcl9pZCxcclxuICAgICAgICAgICAgICAgICAgICBjb21wYW55SUQ6IGluZm8uY29tcGFueV9pZCxcclxuICAgICAgICAgICAgICAgICAgICByZWxhdGVkRG9zc2llcklEOiBpbmZvLnJlbGF0ZWRfZG9zc2llcl9pZCxcclxuICAgICAgICAgICAgICAgICAgICBlbnJvbG1lbnRWZXJzaW9uOiBpbmZvLmVucm9sbWVudF92ZXJzaW9uLFxyXG4gICAgICAgICAgICAgICAgICAgIGRhdGVTYXZlZDogaW5mby5kYXRlX3NhdmVkLFxyXG4gICAgICAgICAgICAgICAgICAgIGFwcGxpY2F0aW9uVHlwZTogaW5mby5hcHBsaWNhdGlvbl90eXBlLFxyXG4gICAgICAgICAgICAgICAgICAgIHNvZnR3YXJlVmVyc2lvbjogaW5mby5zb2Z0d2FyZV92ZXJzaW9uLFxyXG4gICAgICAgICAgICAgICAgICAgIGRhdGFDaGVja3N1bTogaW5mby5kYXRhX2NoZWNrc3VtLFxyXG4gICAgICAgICAgICAgICAgICAgIGRvc3NpZXJUeXBlOiBpbmZvLmRvc3NpZXJfdHlwZSxcclxuICAgICAgICAgICAgICAgICAgICBwcm9kdWN0TmFtZTogaW5mby5icmFuZF9uYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgIHByb3Blck5hbWU6IGluZm8uY29tbW9uX25hbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgaXNSZWZQcm9kdWN0czogaW5mby5pc19yZWZfcHJvZHVjdHMsXHJcbiAgICAgICAgICAgICAgICAgICAgZHJ1Z1Byb2R1Y3Q6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcmRQYXJ0eVNpZ25lZDogaW5mby50aGlyZF9wYXJ0eV9zaWduZWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRydWdVc2VMaXN0OiBsb2FkRHJ1Z1VzZVZhbHVlcyhpbmZvKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgaXNTY2hlZHVsZUE6IGluZm8uaXNfc2NoZWRfYSA9PT0gJ1knLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGVyYXBldXRpYzpbXSAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhblJlZlByb2R1Y3RzOiBnZXRDYW5SZWZQcm9kdWN0TGlzdChpbmZvLnJlZl9wcm9kdWN0X2xpc3QuY2RuX3JlZl9wcm9kdWN0KSwvL2dyaWRcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9ybXVsYXRpb25zOiBnZXRGb3JtdWxhdGlvbkxpc3QoaW5mby5mb3JtdWxhdGlvbl9ncm91cC5mb3JtdWxhdGlvbl9kZXRhaWxzKSwvL3RhYiArIGdyaWQgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhcHBlbmRpeEZvdXJMaXN0OiBnZXRBcHBlbmRpeDRJbmdyZWRpZW50TGlzdChpbmZvLmFwcGVuZGl4NF9ncm91cClcclxuXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgY29udGFjdExpc3Q6IGdldENvbnRhY3RMaXN0KGluZm8uY29udGFjdF9yZWNvcmQpXHJcblxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIGlmKGluZm8udGhlcmFwZXV0aWNfY2xhc3NfbGlzdC50aGVyYXBldXRpY19jbGFzcykge1xyXG4gICAgICAgICAgICAgICAgICAgIGRvc3NpZXJNb2RlbC5kcnVnUHJvZHVjdC50aGVyYXBldXRpYyA9IGdldFRoZXJhcGV1dGljTGlzdChpbmZvLnRoZXJhcGV1dGljX2NsYXNzX2xpc3QudGhlcmFwZXV0aWNfY2xhc3MpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBkb3NzaWVyTW9kZWwuZHJ1Z1Byb2R1Y3Quc2NoZWR1bGVBR3JvdXAgPSBnZXREZWZhdWx0U2NoZWRBKCk7Ly9hbHdheXMgY3JlYXRlIHRoZSBkZWZhdWx0IGZvciB0aGUgZm9ybXNcclxuICAgICAgICAgICAgICAgIC8vZG9zc2llck1vZGVsLmRydWdQcm9kdWN0LmRydWdVc2VMaXN0PWxvYWREcnVnVXNlVmFsdWVzKGluZm8pO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChpbmZvLnNjaGVkdWxlX2FfZ3JvdXApIHtcclxuICAgICAgICAgICAgICAgICAgICBkb3NzaWVyTW9kZWwuZHJ1Z1Byb2R1Y3Quc2NoZWR1bGVBR3JvdXAuZHJ1Z0lkTnVtYmVyID0gaW5mby5zY2hlZHVsZV9hX2dyb3VwLmRpbl9udW1iZXI7XHJcbiAgICAgICAgICAgICAgICAgICAgZG9zc2llck1vZGVsLmRydWdQcm9kdWN0LnNjaGVkdWxlQUdyb3VwLnNjaGVkdWxlQUNsYWltc0luZERldGFpbHMgPSBpbmZvLnNjaGVkdWxlX2FfZ3JvdXAuc2NoZWRfYV9jbGFpbXNfaW5kX2RldGFpbHM7XHJcbiAgICAgICAgICAgICAgICAgICAgZ2V0RGlzZWFzZURpc29yZGVyTGlzdChpbmZvLnNjaGVkdWxlX2FfZ3JvdXAsIGRvc3NpZXJNb2RlbC5kcnVnUHJvZHVjdC5zY2hlZHVsZUFHcm91cC5kaXNlYXNlRGlzb3JkZXJMaXN0KTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZG9zc2llck1vZGVsO1xyXG5cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAbmdkb2MgTWFpbiBlbnRyeSBwb2ludCBmb3IgY29udmVydGluZyB0aGUgaW50ZXJuYWwgZGF0YSBtb2RlbCB0byBhIGNvbXBhdGlibGUgb3V0cHV0IGZvciB3cml0aW5nXHJcbiAgICAgICAgICogQHBhcmFtIGpzb25PYmpcclxuICAgICAgICAgKiBAcmV0dXJucyB7Kn1cclxuICAgICAgICAgKi9cclxuICAgICAgICBEb3NzaWVyU2VydmljZS5wcm90b3R5cGUuZG9zc2llclRvT3V0cHV0ID0gZnVuY3Rpb24gKGpzb25PYmopIHtcclxuICAgICAgICAgICAgaWYgKCFqc29uT2JqKSByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgdmFyIGJhc2VEb3NzaWVyID0ge307XHJcbiAgICAgICAgICAgIC8vb3JkZXIgaXMgaW1wb3J0YW50ISEhIE11c3QgbWF0Y2ggc2NoZW1hXHJcbiAgICAgICAgICAgIGJhc2VEb3NzaWVyLmNvbXBhbnlfaWQgPSBqc29uT2JqLmNvbXBhbnlJRDsgLy9UT0RPIG1pc3NpbmcgZnJvbSBpbnRlcm5hbCBtb2RlbFxyXG4gICAgICAgICAgICBiYXNlRG9zc2llci5kb3NzaWVyX2lkID0ganNvbk9iai5kb3NzaWVySUQ7IC8vVE9ETyBtaXNzaW5nIGZyb20gIGludGVybmFsIG1vZGVsIGFuZCBYTUwhIE5ldCBOZXdcclxuICAgICAgICAgICAgYmFzZURvc3NpZXIucmVsYXRlZF9kb3NzaWVyX2lkID0ganNvbk9iai5yZWxhdGVkRG9zc2llcklEOyAvL1RPRE8gbWlzc2luZyBmcm9tIG5vZGVsXHJcbiAgICAgICAgICAgIGJhc2VEb3NzaWVyLmVucm9sbWVudF92ZXJzaW9uID0ganNvbk9iai5lbnJvbG1lbnRWZXJzaW9uO1xyXG4gICAgICAgICAgICBiYXNlRG9zc2llci5kYXRlX3NhdmVkID0ganNvbk9iai5kYXRlU2F2ZWQ7XHJcbiAgICAgICAgICAgIGJhc2VEb3NzaWVyLmFwcGxpY2F0aW9uX3R5cGUgPSBqc29uT2JqLmFwcGxpY2F0aW9uVHlwZTtcclxuICAgICAgICAgICAgYmFzZURvc3NpZXIuc29mdHdhcmVfdmVyc2lvbiA9IFwiMS4wLjBcIjsgLy9UT0RPOiBoYXJkIGNvZGUgb3IgbWFrZSBhIGZ1bmN0aW9uLCBzaG91bGQgYmUgY2VudHJhbGx5IGF2YWlsYWJsZVxyXG4gICAgICAgICAgICBiYXNlRG9zc2llci5kYXRhX2NoZWNrc3VtID0gXCJcIjtcclxuICAgICAgICAgICAgaWYgKGpzb25PYmouY29udGFjdExpc3QpIHsgLy9UT0RPIHNraXAgaWYgZW1wdHkgbGlzdD9cclxuICAgICAgICAgICAgICAgIGJhc2VEb3NzaWVyLmNvbnRhY3RfcmVjb3JkID0gcmVwQ29udGFjdFRvT3V0cHV0KGpzb25PYmouY29udGFjdExpc3QpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGJhc2VEb3NzaWVyLmRvc3NpZXJfdHlwZSA9IGpzb25PYmouZG9zc2llclR5cGU7XHJcbiAgICAgICAgICAgIGJhc2VEb3NzaWVyLmJyYW5kX25hbWUgPSBqc29uT2JqLnByb2R1Y3ROYW1lO1xyXG4gICAgICAgICAgICBiYXNlRG9zc2llci5jb21tb25fbmFtZSA9IGpzb25PYmoucHJvcGVyTmFtZTtcclxuICAgICAgICAgICAgYmFzZURvc3NpZXIudGhpcmRfcGFydHlfc2lnbmVkID0ganNvbk9iai5kcnVnUHJvZHVjdC50aGlyZFBhcnR5U2lnbmVkO1xyXG4gICAgICAgICAgICBiYXNlRG9zc2llci5pc19yZWZfcHJvZHVjdHMgPSBqc29uT2JqLmlzUmVmUHJvZHVjdHM7XHJcbiAgICAgICAgICAgIGJhc2VEb3NzaWVyLnJlZl9wcm9kdWN0X2xpc3QgPSB7fTtcclxuICAgICAgICAgICAgLy8gIGJhc2VEb3NzaWVyLnJlZl9wcm9kdWN0X2xpc3QuYW1lbmRfcmVjb3JkID0gXCJOXCIgLy9UT0RPIGltcGxlbWVudCB0aGlzIGZ1bmN0aW9uYWxpdHk/XHJcbiAgICAgICAgICAgIC8vaW5pdGlhbGl6ZSB2YWx1ZXMgYW5kIG9yZGVyXHJcbiAgICAgICAgICAgIGJhc2VEb3NzaWVyLmh1bWFuX2RydWdfdXNlID0gJ04nO1xyXG4gICAgICAgICAgICBiYXNlRG9zc2llci5yYWRpb3BoYXJtX2RydWdfdXNlID0gJ04nO1xyXG4gICAgICAgICAgICBiYXNlRG9zc2llci52ZXRfZHJ1Z191c2UgPSAnTic7XHJcbiAgICAgICAgICAgIGJhc2VEb3NzaWVyLmRpc2luZmVjdGFudF9kcnVnX3VzZSA9ICdOJztcclxuICAgICAgICAgICAgZHJ1Z1VzZVZhbHVlc1RvT3V0cHV0KGpzb25PYmouZHJ1Z1Byb2R1Y3QuZHJ1Z1VzZUxpc3QsIGJhc2VEb3NzaWVyKTtcclxuICAgICAgICAgICAgYmFzZURvc3NpZXIudGhlcmFwZXV0aWNfY2xhc3NfbGlzdCA9IHt9O1xyXG4gICAgICAgICAgICBiYXNlRG9zc2llci5pc19zY2hlZF9hID0ganNvbk9iai5kcnVnUHJvZHVjdC5pc1NjaGVkdWxlQSA9PT0gdHJ1ZSA/ICdZJyA6ICdOJztcclxuXHJcbiAgICAgICAgICAgIGlmIChqc29uT2JqLmRydWdQcm9kdWN0LnRoZXJhcGV1dGljICYmIGpzb25PYmouZHJ1Z1Byb2R1Y3QudGhlcmFwZXV0aWMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgYmFzZURvc3NpZXIudGhlcmFwZXV0aWNfY2xhc3NfbGlzdC50aGVyYXBldXRpY19jbGFzcyA9IHRoZXJhcGV1dGljQ2xhc3NUb091dHB1dChqc29uT2JqLmRydWdQcm9kdWN0LnRoZXJhcGV1dGljKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGpzb25PYmouZHJ1Z1Byb2R1Y3QuY2FuUmVmUHJvZHVjdHMgJiYganNvbk9iai5kcnVnUHJvZHVjdC5jYW5SZWZQcm9kdWN0cy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICBiYXNlRG9zc2llci5yZWZfcHJvZHVjdF9saXN0LmNkbl9yZWZfcHJvZHVjdCA9IGNhblJlZlByb2R1Y3RMaXN0VG9PdXRwdXQoanNvbk9iai5kcnVnUHJvZHVjdC5jYW5SZWZQcm9kdWN0cylcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoanNvbk9iai5kcnVnUHJvZHVjdC5pc1NjaGVkdWxlQSkge1xyXG4gICAgICAgICAgICAgICAgYmFzZURvc3NpZXIuc2NoZWR1bGVfYV9ncm91cCA9IHNjaGVkdWxlQVRvT3V0cHV0KGpzb25PYmouZHJ1Z1Byb2R1Y3Quc2NoZWR1bGVBR3JvdXApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChqc29uT2JqLmRydWdQcm9kdWN0KSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgYXBwZW5kaXg0ID0gYXBwZW5kaXg0SW5ncmVkaWVudExpc3RUb091dHB1dChqc29uT2JqLmRydWdQcm9kdWN0LmFwcGVuZGl4Rm91ckxpc3QpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGFwcGVuZGl4NCAmJiBhcHBlbmRpeDQubGVuZ3RoPjApIHtcclxuICAgICAgICAgICAgICAgICAgICBiYXNlRG9zc2llci5hcHBlbmRpeDRfZ3JvdXAgPSBhcHBlbmRpeDQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB2YXIgZm9ybXVsYXRpb25zID0gZm9ybXVsYXRpb25MaXN0VG9PdXRwdXQoanNvbk9iai5kcnVnUHJvZHVjdC5mb3JtdWxhdGlvbnMpO1xyXG4gICAgICAgICAgICAgICAgYmFzZURvc3NpZXIuZm9ybXVsYXRpb25fZ3JvdXAgPSB7fTtcclxuICAgICAgICAgICAgICAgIGlmIChmb3JtdWxhdGlvbnMpIHtcclxuICAgICAgICAgICAgICAgICAgICBiYXNlRG9zc2llci5mb3JtdWxhdGlvbl9ncm91cC5mb3JtdWxhdGlvbl9kZXRhaWxzID0gZm9ybXVsYXRpb25zO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vZm9yZ290IHRvIGFkZCByb290IHRhZyFcclxuICAgICAgICAgICAgcmV0dXJuIHtET1NTSUVSX0VOUk9MOiBiYXNlRG9zc2llcn07XHJcblxyXG4gICAgICAgIH07XHJcblxyXG5cclxuICAgICAgICBEb3NzaWVyU2VydmljZS5wcm90b3R5cGUuZ2V0TWlzc2luZ0FwcGVuZGl4NCA9IGZ1bmN0aW9uIChkb3NzaWVyTW9kZWwpIHtcclxuICAgICAgICAgICAgdmFyIG1pc3NpbmdBcHBlbmRpY2VzID0gW107XHJcbiAgICAgICAgICAgIHZhciBleHRyYUFwcGVuZGljZXMgPSBbXTtcclxuICAgICAgICAgICAgdmFyIHJlc3VsdHMgPSB7fTtcclxuXHJcbiAgICAgICAgICAgIGlmICghZG9zc2llck1vZGVsIHx8ICFkb3NzaWVyTW9kZWwuZHJ1Z1Byb2R1Y3QpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBtaXNzaW5nQXBwZW5kaWNlcztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBTdGVwIDEgR2V0IGFsbCB0aGUgYXBwZW5kaWNlcyB0aGF0IGV4aXN0XHJcbiAgICAgICAgICAgIHZhciBhcHBlbmRpY2VzID0gZ2V0QXBwZW5kaWNlRGF0YShkb3NzaWVyTW9kZWwuZHJ1Z1Byb2R1Y3QuYXBwZW5kaXhGb3VyTGlzdCk7XHJcbiAgICAgICAgICAgIC8vU3RlcCAyIGdldCBhIHVuaXF1ZSBsaXN0IG9mIGluZ3JlZGllbnRzXHJcbiAgICAgICAgICAgIHZhciBpbmdyZWRpZW50cyA9IGdldEFuaW1hbEluZ3JlZGllbnRzKGRvc3NpZXJNb2RlbC5kcnVnUHJvZHVjdC5mb3JtdWxhdGlvbnMpO1xyXG4gICAgICAgICAgICAvL1N0ZXAgMyBDb21wYXJlLiBEZXRlcm1pbmUgaWYgdGhlcmUgYXJlIG1pc3NpbmcgaW5ncmVkaWVudHNcclxuICAgICAgICAgICAgbWlzc2luZ0FwcGVuZGljZXMgPSBnZXRNaXNzaW5nQXBwZW5kaWNlcyhhcHBlbmRpY2VzLCBpbmdyZWRpZW50cyk7XHJcbiAgICAgICAgICAgIC8vc3RlcCA0IGdldCBleHRyYSBhcHBlbmRpY2VzXHJcbiAgICAgICAgICAgIGV4dHJhQXBwZW5kaWNlcyA9IGZpbmRFeHRyYUFwcHBlbmRpY2VzKGFwcGVuZGljZXMpO1xyXG4gICAgICAgICAgICByZXN1bHRzLm1pc3NpbmcgPSBtaXNzaW5nQXBwZW5kaWNlcztcclxuICAgICAgICAgICAgcmVzdWx0cy5leHRyYSA9IGV4dHJhQXBwZW5kaWNlcztcclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdHM7XHJcbiAgICAgICAgfTtcclxuXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEdldHMgYW4gZW1wdHkgZGlzZWFzZSBkaXNvcmRlciBsaXN0IHdpdGggdmFsdWVzIHNldCB0byBOb1xyXG4gICAgICAgICAqIEByZXR1cm5zIHsqW119XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgRG9zc2llclNlcnZpY2UucHJvdG90eXBlLmdldERlZmF1bHREaXNlYXNlRGlzb3JkZXJMaXN0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZ2V0RGVmYXVsdERpc2Vhc2VEaXNvcmRlckxpc3QoKTtcclxuXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgRG9zc2llclNlcnZpY2UucHJvdG90eXBlLmdldERlZmF1bHROZXJ2b3VzU3lzdGVtID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gX2NyZWF0ZUVtcHR5TmVydm91c1N5c3RlbU1vZGVsKCk7XHJcblxyXG4gICAgICAgIH07XHJcbiAgICAgICAgRG9zc2llclNlcnZpY2UucHJvdG90eXBlLmdldERlZmF1bHRJbW11bmVTeXN0ZW0gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBfY3JlYXRlRW1wdHlJbW11bmVTeXN0ZW1Nb2RlbCgpO1xyXG5cclxuICAgICAgICB9O1xyXG4gICAgICAgIERvc3NpZXJTZXJ2aWNlLnByb3RvdHlwZS5nZXREZWZhdWx0RGlnZXN0aXZlU3lzdGVtID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gX2NyZWF0ZUVtcHR5RGlnZXN0aXZlU3lzdGVtTW9kZWwoKTtcclxuXHJcbiAgICAgICAgfTtcclxuICAgICAgICBEb3NzaWVyU2VydmljZS5wcm90b3R5cGUuZ2V0RGVmYXVsdE11c2NsZVN5c3RlbSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIF9jcmVhdGVFbXB0eU11c2NsZVN5c3RlbU1vZGVsKCk7XHJcblxyXG4gICAgICAgIH07XHJcbiAgICAgICAgRG9zc2llclNlcnZpY2UucHJvdG90eXBlLmdldERlZmF1bHRPdGhlclN5c3RlbSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIF9jcmVhdGVFbXB0eU90aGVyU3lzdGVtTW9kZWwoKTtcclxuXHJcbiAgICAgICAgfTtcclxuICAgICAgICBEb3NzaWVyU2VydmljZS5wcm90b3R5cGUuZ2V0RGVmYXVsdFJlcHJvZHVjdGl2ZVN5c3RlbSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIF9jcmVhdGVFbXB0eVJlcHJvZHVjdGl2ZVN5c3RlbU1vZGVsKCk7XHJcblxyXG4gICAgICAgIH07XHJcbiAgICAgICAgRG9zc2llclNlcnZpY2UucHJvdG90eXBlLmdldERlZmF1bHRDYXJkaW9TeXN0ZW0gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBfY3JlYXRlRW1wdHlDYXJkaW9TeXN0ZW1Nb2RlbCgpO1xyXG5cclxuICAgICAgICB9O1xyXG4gICAgICAgIERvc3NpZXJTZXJ2aWNlLnByb3RvdHlwZS5nZXREZWZhdWx0U2tpblN5c3RlbSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIF9jcmVhdGVFbXB0eVNraW5TeXN0ZW1Nb2RlbCgpO1xyXG5cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBHZXRzIGFuIGVtcHR5IFNjaGVkdWxlIEEgT2JqZWN0XHJcbiAgICAgICAgICogQHJldHVybnMgeyp9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgRG9zc2llclNlcnZpY2UucHJvdG90eXBlLmdldERlZmF1bHRTY2hlZHVsZUEgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAoZ2V0RGVmYXVsdFNjaGVkQSgpKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBEb3NzaWVyU2VydmljZS5wcm90b3R5cGUuZ2V0Um9vdFRhZ05hbWUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAoXCJET1NTSUVSX0VOUk9MXCIpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8vcmV0dXJuIHRoZSBEb3NzaWVyIFNlcnZpY2Ugb2JqZWN0XHJcbiAgICAgICAgcmV0dXJuIERvc3NpZXJTZXJ2aWNlO1xyXG5cclxuXHJcbiAgICAgICAgLy8jIyMjIyMjIyMjIyMjIyNJTlRFUk5BTCBGVU5DVElPTlMgc3RhcnQgaGVyZSMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZ2V0Q29udGFjdExpc3QoY29udGFjdHMpIHtcclxuXHJcbiAgICAgICAgICAgIHZhciBsaXN0ID0gW107XHJcblxyXG4gICAgICAgICAgICBpZiAoYW5ndWxhci5pc0RlZmluZWQoY29udGFjdHMpKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYoIShjb250YWN0cyBpbnN0YW5jZW9mIEFycmF5KSl7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGFjdHM9W2NvbnRhY3RzXTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvbnRhY3RzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNvbnRhY3QgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICBjb250YWN0LmFtZW5kID0gY29udGFjdHNbaV0uYW1lbmRfcmVjb3JkID09PSAnWSc7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGFjdC5yZXBSb2xlID0gY29udGFjdHNbaV0ucmVwX2NvbnRhY3Rfcm9sZTtcclxuICAgICAgICAgICAgICAgICAgICBjb250YWN0LnNhbHV0YXRpb24gPSBjb250YWN0c1tpXS5yZXBfY29udGFjdF9kZXRhaWxzLnNhbHV0YXRpb247XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGFjdC5naXZlbk5hbWUgPSBjb250YWN0c1tpXS5yZXBfY29udGFjdF9kZXRhaWxzLmdpdmVuX25hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGFjdC5zdXJuYW1lID0gY29udGFjdHNbaV0ucmVwX2NvbnRhY3RfZGV0YWlscy5zdXJuYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRhY3QuaW5pdGlhbHMgPSBjb250YWN0c1tpXS5yZXBfY29udGFjdF9kZXRhaWxzLmluaXRpYWxzO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRhY3QudGl0bGUgPSBjb250YWN0c1tpXS5yZXBfY29udGFjdF9kZXRhaWxzLmpvYl90aXRsZTtcclxuICAgICAgICAgICAgICAgICAgICBjb250YWN0LnBob25lID0gY29udGFjdHNbaV0ucmVwX2NvbnRhY3RfZGV0YWlscy5waG9uZV9udW07XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGFjdC5waG9uZUV4dCA9IGNvbnRhY3RzW2ldLnJlcF9jb250YWN0X2RldGFpbHMucGhvbmVfZXh0O1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRhY3QuZmF4ID0gY29udGFjdHNbaV0ucmVwX2NvbnRhY3RfZGV0YWlscy5mYXhfbnVtO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRhY3QuZW1haWwgPSBjb250YWN0c1tpXS5yZXBfY29udGFjdF9kZXRhaWxzLmVtYWlsO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRhY3QubGFuZ3VhZ2UgPSBjb250YWN0c1tpXS5yZXBfY29udGFjdF9kZXRhaWxzLmxhbmd1YWdlX2NvcnJlc3BvbmRhbmNlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBsaXN0LnB1c2goY29udGFjdCk7XHJcblxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIGxpc3Q7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBHZXQgZGlzZWFzZURpc29yZGVyTGlzdFxyXG4gICAgICAgICAqIEBwYXJhbSBpbmZvXHJcbiAgICAgICAgICogQHBhcmFtIGRpc2Vhc2VMaXN0XHJcbiAgICAgICAgICogQHJldHVybnMgeyp9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZnVuY3Rpb24gZ2V0RGlzZWFzZURpc29yZGVyTGlzdChpbmZvLCBkaXNlYXNlTGlzdCkge1xyXG5cclxuICAgICAgICAgICAgaWYgKCFpbmZvIHx8ICFkaXNlYXNlTGlzdCkgcmV0dXJuO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRpc2Vhc2VMaXN0Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgY2hlY2tib3hSZWMgPSBkaXNlYXNlTGlzdFtpXTtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoY2hlY2tib3hSZWMubmFtZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJhY3V0ZS1hbGNvaG9sXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoZWNrYm94UmVjLnZhbHVlID0gaW5mby5hY3V0ZV9hbGNvaG9sID09PSAnWSc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJhY3V0ZS1hbnhpZXR5XCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoZWNrYm94UmVjLnZhbHVlID0gaW5mby5hY3V0ZV9hbnhpZXR5ID09PSAnWSc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJhY3V0ZS1pbmZlY3Rpb3VzXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoZWNrYm94UmVjLnZhbHVlID0gaW5mby5hY3V0ZV9pbmZlY3Rpb3VzID09PSAnWSc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJhY3V0ZS1pbmZsYW1tYXRvcnlcIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2tib3hSZWMudmFsdWUgPSBpbmZvLmFjdXRlX2luZmxhbW1hdG9yeSA9PT0gJ1knO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiYWN1dGUtcHN5Y2hvdGljXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoZWNrYm94UmVjLnZhbHVlID0gaW5mby5hY3V0ZV9wc3ljaG90aWMgPT09ICdZJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcImFkZGljdGlvblwiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGVja2JveFJlYy52YWx1ZSA9IGluZm8uYWRkaWN0aW9uID09PSAnWSc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJhdGVyaW9zY2xlcm9zaXNcIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2tib3hSZWMudmFsdWUgPSBpbmZvLmF0ZXJpb3NjbGVyb3NpcyA9PT0gJ1knO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiYXBwZW5kaWNpdGlzXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoZWNrYm94UmVjLnZhbHVlID0gaW5mby5hcHBlbmRpY2l0aXMgPT09ICdZJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcImFzdGhtYVwiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGVja2JveFJlYy52YWx1ZSA9IGluZm8uYXN0aG1hID09PSAnWSc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiY2FuY2VyXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoZWNrYm94UmVjLnZhbHVlID0gaW5mby5jYW5jZXIgPT09ICdZJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcImNvbmdlc3QtaGVhcnQtZmFpbFwiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGVja2JveFJlYy52YWx1ZSA9IGluZm8uY29uZ2VzdF9oZWFydF9mYWlsID09PSAnWSc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJjb252dWxzaW9uc1wiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGVja2JveFJlYy52YWx1ZSA9IGluZm8uY29udnVsc2lvbnMgPT09ICdZJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJkZW1lbnRpYVwiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGVja2JveFJlYy52YWx1ZSA9IGluZm8uZGVtZW50aWEgPT09ICdZJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJkZXByZXNzaW9uXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoZWNrYm94UmVjLnZhbHVlID0gaW5mby5kZXByZXNzaW9uID09PSAnWSc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiZGlhYmV0ZXNcIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2tib3hSZWMudmFsdWUgPSBpbmZvLmRpYWJldGVzID09PSAnWSc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiZ2FuZ3JlbmVcIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2tib3hSZWMudmFsdWUgPSBpbmZvLmdhbmdyZW5lID09PSAnWSc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiZ2xhdWNvbWFcIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2tib3hSZWMudmFsdWUgPSBpbmZvLmdsYXVjb21hID09PSAnWSc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiaGFlbWF0b2xvZ2ljLWJsZWVkaW5nXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoZWNrYm94UmVjLnZhbHVlID0gaW5mby5oYWVtYXRvbG9naWNfYmxlZWRpbmcgPT09ICdZJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJoZXBhdGl0aXNcIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2tib3hSZWMudmFsdWUgPSBpbmZvLmhlcGF0aXRpcyA9PT0gJ1knO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcImh5cGVydGVuc2lvblwiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGVja2JveFJlYy52YWx1ZSA9IGluZm8uaHlwZXJ0ZW5zaW9uID09PSAnWSc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwibmF1c2VhLXByZWduYW5jeVwiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGVja2JveFJlYy52YWx1ZSA9IGluZm8ubmF1c2VhX3ByZWduYW5jeSA9PT0gJ1knO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcIm9iZXNpdHlcIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2tib3hSZWMudmFsdWUgPSBpbmZvLm9iZXNpdHkgPT09ICdZJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcInJoZXVtYXRpYy1mZXZlclwiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGVja2JveFJlYy52YWx1ZSA9IGluZm8ucmhldW1hdGljX2ZldmVyID09PSAnWSc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJzZXB0aWNlbWlhXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoZWNrYm94UmVjLnZhbHVlID0gaW5mby5zZXB0aWNlbWlhID09PSAnWSc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJzZXgtdHJhbnNtaXQtZGlzZWFzZVwiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGVja2JveFJlYy52YWx1ZSA9IGluZm8uc2V4X3RyYW5zbWl0X2Rpc2Vhc2UgPT09ICdZJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcInN0cmFuZ3VsYXRlZC1oZXJuaWFcIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2tib3hSZWMudmFsdWUgPSBpbmZvLnN0cmFuZ3VsYXRlZF9oZXJuaWEgPT09ICdZJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcInRocm9tYm90aWMtZW1ib2xpYy1kaXNvcmRlclwiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGVja2JveFJlYy52YWx1ZSA9IGluZm8udGhyb21ib3RpY19lbWJvbGljX2Rpc29yZGVyID09PSAnWSc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJ0aHlyb2lkLWRpc2Vhc2VcIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2tib3hSZWMudmFsdWUgPSBpbmZvLnRoeXJvaWRfZGlzZWFzZSA9PT0gJ1knO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwidWxjZXItZ2FzdHJvXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoZWNrYm94UmVjLnZhbHVlID0gaW5mby51bGNlcl9nYXN0cm8gPT09ICdZJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBkaXNlYXNlTGlzdDtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICBmdW5jdGlvbiBnZXRUaGVyYXBldXRpY0xpc3QoaW5wdXQpIHtcclxuICAgICAgICAgICAgdmFyIGxpc3QgPSBcIlwiO1xyXG4gICAgICAgICAgICBpZiAoIShpbnB1dCBpbnN0YW5jZW9mIEFycmF5KSkge1xyXG4gICAgICAgICAgICAgICAgaW5wdXQgPSBbaW5wdXRdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChpbnB1dCkge1xyXG4gICAgICAgICAgICAgICAgbGlzdD1bXTtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaW5wdXQubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgaXRlbSA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgXCJpZFwiOiBcIlwiICsgaSArIDEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBpbnB1dFtpXVxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBsaXN0O1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIC8vZm9ybXVsYXRpb25zIHNlY3Rpb25cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZ2V0Q2FuUmVmUHJvZHVjdExpc3QoaW5mbykge1xyXG4gICAgICAgICAgICB2YXIgbGlzdCA9IFtdO1xyXG5cclxuICAgICAgICAgICAgaWYgKGFuZ3VsYXIuaXNEZWZpbmVkKGluZm8pKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIShpbmZvIGluc3RhbmNlb2YgQXJyYXkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9tYWtlIGl0IGFuIGFycmF5LCBjYXNlIHRoZXJlIGlzIG9ubHkgb25lXHJcbiAgICAgICAgICAgICAgICAgICAgaW5mbyA9IFtpbmZvXVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaW5mby5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBwcm9kdWN0ID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgcHJvZHVjdC5icmFuZE5hbWUgPSBpbmZvW2ldLmJyYW5kX25hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgcHJvZHVjdC5pbmdJZD0gaW5mb1tpXS5pbmdyZWRpZW50X2lkO1xyXG4gICAgICAgICAgICAgICAgICAgIHByb2R1Y3QuaW5nTGFiZWwgPSBpbmZvW2ldLmluZ3JlZGllbnRfbmFtZTtcclxuICAgICAgICAgICAgICAgICAgICBwcm9kdWN0LmF1dG9JbmdyZWQ9XCJZXCI7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghcHJvZHVjdC5pbmdJZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9kdWN0LmF1dG9JbmdyZWQgPSAnTidcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHByb2R1Y3QuZG9zYWdlRm9ybSA9IFwiXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGluZm9baV0uZG9zYWdlX2Zvcm0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvZHVjdC5kb3NhZ2VGb3JtID0gJGZpbHRlcignZmlsdGVyJykoRG9zc2llckxpc3RzLmdldERvc2FnZUZvcm1MaXN0KCksIHtpZDogaW5mb1tpXS5kb3NhZ2VfZm9ybS5fX3RleHR9KVswXTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcHJvZHVjdC5kb3NhZ2VGb3JtT3RoZXIgPSBpbmZvW2ldLmRvc2FnZV9mb3JtX290aGVyO1xyXG4gICAgICAgICAgICAgICAgICAgIHByb2R1Y3Quc3RyZW5ndGhzID0gTnVtYmVyKGluZm9baV0uc3RyZW5ndGhzKTtcclxuICAgICAgICAgICAgICAgICAgICBwcm9kdWN0LnVuaXRzID0gXCJcIjtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaW5mb1tpXS51bml0cykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9kdWN0LnVuaXRzID0gJGZpbHRlcignZmlsdGVyJykoRG9zc2llckxpc3RzLmdldFVuaXRzTGlzdCgpLCB7aWQ6IGluZm9baV0udW5pdHMuX190ZXh0fSlbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHByb2R1Y3Qub3RoZXJVbml0cyA9IGluZm9baV0udW5pdHNfb3RoZXI7XHJcbiAgICAgICAgICAgICAgICAgICAgcHJvZHVjdC5wZXIgPSBpbmZvW2ldLnBlcjtcclxuICAgICAgICAgICAgICAgICAgICBwcm9kdWN0LmNvbXBhbnlOYW1lID0gaW5mb1tpXS5jb21wYW55X25hbWU7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGxpc3QucHVzaChwcm9kdWN0KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgICAgIHJldHVybiBsaXN0O1xyXG5cclxuXHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZ2V0QXBwZW5kaXg0SW5ncmVkaWVudExpc3QoaW5mbykgeyAvL2luZm8gPSBkb3NzaWVyLmFwcGVuZGl4Rm91ci5pbmdyZWRpZW50TGlzdFxyXG4gICAgICAgICAgICB2YXIgbGlzdCA9IFtdO1xyXG4gICAgICAgICAgICAvL1RPRE8gZXh0ZXJuYWxpemVcclxuICAgICAgICAgICAgdmFyIGdldENvdW50cmllcyA9IGZ1bmN0aW9uIChpbnB1dCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGxpc3QgPSBbXTtcclxuICAgICAgICAgICAgICAgIGlmKCEoaW5wdXQgaW5zdGFuY2VvZiBBcnJheSkpe1xyXG4gICAgICAgICAgICAgICAgICAgIGlucHV0PVtpbnB1dF07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGlucHV0Lmxlbmd0aDsgaSsrKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgdmFyIG9iaiA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgXCJpZFwiOiBpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBcImNvdW50cnlcIjpcIlwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBcImRpc3BsYXlcIjpcIlwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBcInVua25vd25Db3VudHJ5RGV0YWlsc1wiOlwiXCJcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKCBpbnB1dFtpXS5jb3VudHJ5X3dpdGhfdW5rbm93bi5fX3RleHQ9PT1VTktOT1dOKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgb2JqLmNvdW50cnkgPSBnZXRDb3VudHJ5QW5kUHJvdmluY2VzLmdldFVua25vd25Db3VudHJ5UmVjb3JkKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfWVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvYmouY291bnRyeSA9ICRmaWx0ZXIoJ2ZpbHRlcicpKGdldENvdW50cnlBbmRQcm92aW5jZXMuZ2V0Q291bnRyaWVzKCksIHtpZDogIGlucHV0W2ldLmNvdW50cnlfd2l0aF91bmtub3duLl9fdGV4dH0pWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZihvYmouY291bnRyeSl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9iai5kaXNwbGF5PW9iai5jb3VudHJ5LmlkXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIG9iai51bmtub3duQ291bnRyeURldGFpbHM9aW5wdXRbaV0udW5rbm93bl9jb3VudHJ5X2RldGFpbHM7XHJcbiAgICAgICAgICAgICAgICAgICAgbGlzdC5wdXNoKG9iaik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbGlzdDtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIGlmIChhbmd1bGFyLmlzRGVmaW5lZChpbmZvKSkge1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICghKGluZm8gaW5zdGFuY2VvZiBBcnJheSkpe1xyXG4gICAgICAgICAgICAgICAgICAgIGluZm89W2luZm9dO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBpbmZvLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGluZyA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgIGluZy5pZCA9IGluZm9baV0uaW5ncmVkaWVudF9pZDtcclxuICAgICAgICAgICAgICAgICAgICBpbmcuaW5ncmVkaWVudE5hbWUgPSBpbmZvW2ldLmluZ3JlZGllbnRfbmFtZTtcclxuICAgICAgICAgICAgICAgICAgICAvLyBpbmcucm9sZSA9IGluZm9baV0uZG9zYWdlX2Zvcm07XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gaW5nLmFic3RyYWN0TnVtID0gaW5mb1tpXS5kb3NhZ2VfZm9ybV9vdGhlcjtcclxuICAgICAgICAgICAgICAgICAgICAvLyBpbmcuc3RhbmRhcmQgPSBpbmZvW2ldLnN0cmVuZ3RocztcclxuICAgICAgICAgICAgICAgICAgICBpbmcuaHVtYW5Tb3VyY2VkID0gaW5mb1tpXS5odW1hbl9zb3VyY2VkID09PSAnWSc7XHJcbiAgICAgICAgICAgICAgICAgICAgaW5nLmFuaW1hbFNvdXJjZWQgPSBpbmZvW2ldLmFuaW1hbF9zb3VyY2VkID09PSAnWSc7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRpc3N1ZXMgPSBpbmZvW2ldLnRpc3N1ZXNfZmx1aWRzX3NlY3Rpb247XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNyY0FuaW1hbCA9IGluZm9baV0uYW5pbWFsX3NvdXJjZWRfc2VjdGlvbjtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRpc3N1ZXMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5nLnRpc3N1ZXNGbHVpZHNPcmlnaW4gPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gaW5nLnRpc3N1ZXNGbHVpZHNPcmlnaW4udGlzc3Vlc0xpc3QgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5nLnRpc3N1ZXNGbHVpZHNPcmlnaW4udGlzc3Vlc0xpc3QgPSBfZ2V0VGlzc3Vlc0ZsdWlkc01vZGVsKHRpc3N1ZXMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL1wiYXA0UmVjQ3RybC5tb2RlbC50aXNzdWVzRmx1aWRzT3JpZ2luLnRpc3N1ZXNMaXN0XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzcmNBbmltYWwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5nLnNvdXJjZUFuaW1hbERldGFpbHMgPSBjcmVhdGVFbXB0eUFuaW1hbFNvdXJjZU1vZGVsKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGluZy5zb3VyY2VBbmltYWxEZXRhaWxzLmlzQ2VsbExpbmUgPSBpbmZvW2ldLmFuaW1hbF9zb3VyY2VkX3NlY3Rpb24uaXNfY2VsbF9saW5lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbmcuc291cmNlQW5pbWFsRGV0YWlscy5pc0Jpb3RlY2hEZXJpdmVkID0gaW5mb1tpXS5hbmltYWxfc291cmNlZF9zZWN0aW9uLmlzX2Jpb3RlY2hfZGVyaXZlZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5nLnNvdXJjZUFuaW1hbERldGFpbHMuaXNDb250cm9sbGVkUG9wID0gaW5mb1tpXS5hbmltYWxfc291cmNlZF9zZWN0aW9uLmlzX2NvbnRyb2xsZWRfcG9wO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbmcuc291cmNlQW5pbWFsRGV0YWlscy5hZ2VBbmltYWxzID0gTnVtYmVyKGluZm9baV0uYW5pbWFsX3NvdXJjZWRfc2VjdGlvbi5hbmltYWxfYWdlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy92YXIgYW5pbWFsU3JjT2JqPWluZm9baV0uc291cmNlQW5pbWFsRGV0YWlscztcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFuaW1hbFR5cGVMaXN0ID0gaW5mb1tpXS5hbmltYWxfc291cmNlZF9zZWN0aW9uLmFuaW1hbF9zcmNfcmVjb3JkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIShhbmltYWxUeXBlTGlzdCBpbnN0YW5jZW9mIEFycmF5KSl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmltYWxUeXBlTGlzdD1bYW5pbWFsVHlwZUxpc3RdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHNyY0NvdW50ID0gMDsgc3JjQ291bnQgPCBhbmltYWxUeXBlTGlzdC5sZW5ndGg7IHNyY0NvdW50KyspIHsgLy9UT0RPIGZ1bmN0aW9uP1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG9uZVJlYyA9IGFuaW1hbFR5cGVMaXN0W3NyY0NvdW50XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhbmltYWxSZWNvcmQgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuaW1hbFJlY29yZC5hbmltYWxUeXBlID0gb25lUmVjLmFuaW1hbF90eXBlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5pbWFsUmVjb3JkLmFuaW1hbERldGFpbCA9IG9uZVJlYy5hbmltYWxfZGV0YWlsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5nLnNvdXJjZUFuaW1hbERldGFpbHMuYW5pbWFsU3JjTGlzdC5wdXNoKGFuaW1hbFJlY29yZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5nLnNvdXJjZUFuaW1hbERldGFpbHMuY291bnRyeUxpc3QgPSBnZXRDb3VudHJpZXMoaW5mb1tpXS5hbmltYWxfc291cmNlZF9zZWN0aW9uLmNvdW50cnlfb3JpZ2luX2xpc3QuY291bnRyeV9vcmlnaW4pXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBsaXN0LnB1c2goaW5nKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gbGlzdDtcclxuXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBSZXR1cm5zIGFuIGVtcHR5IGFuaW1hbCBzb3VyY2UgaW50ZXJuYWwgbW9kZWxcclxuICAgICAgICAgKi9cclxuICAgICAgICBmdW5jdGlvbiBnZXRFbXB0eUFuaW1hbFNvdXJjZU1vZGVsKCkge1xyXG5cclxuICAgICAgICAgICAgdmFyIGVtcHR5QW5pbWFsU291cmNlID0ge307XHJcbiAgICAgICAgICAgIGVtcHR5QW5pbWFsU291cmNlLmFuaW1hbFNyY0xpc3QgPSBbXTtcclxuICAgICAgICAgICAgZW1wdHlBbmltYWxTb3VyY2UuaXNDZWxsTGluZSA9IFwiXCI7XHJcbiAgICAgICAgICAgIGVtcHR5QW5pbWFsU291cmNlLmlzQmlvdGVjaERlcml2ZWQgPSBcIlwiO1xyXG4gICAgICAgICAgICBlbXB0eUFuaW1hbFNvdXJjZS5pc0NvbnRyb2xsZWRQb3AgPSBcIlwiO1xyXG4gICAgICAgICAgICBlbXB0eUFuaW1hbFNvdXJjZS5hZ2VBbmltYWxzID0gXCJcIjtcclxuICAgICAgICAgICAgZW1wdHlBbmltYWxTb3VyY2UuY291bnRyeUxpc3QgPSBbXTtcclxuICAgICAgICAgICAgcmV0dXJuIGVtcHR5QW5pbWFsU291cmNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZ2V0Rm9ybXVsYXRpb25MaXN0KGxpc3QpIHtcclxuXHJcbiAgICAgICAgICAgIHZhciBmb3JtdWxhdGlvbkxpc3QgPSBbXTtcclxuICAgICAgICAgICAgaWYgKCFsaXN0IHx8IGxpc3QubGVuZ3RoID09PSAwKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZvcm11bGF0aW9uTGlzdDtcclxuICAgICAgICAgICAgaWYgKCEobGlzdCBpbnN0YW5jZW9mIEFycmF5KSkge1xyXG4gICAgICAgICAgICAgICAgLy9tYWtlIGl0IGFuIGFycmF5LCBjYXNlIHRoZXJlIGlzIG9ubHkgb25lXHJcbiAgICAgICAgICAgICAgICBsaXN0ID0gW2xpc3RdXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKGxpc3QsIGZ1bmN0aW9uIChpdGVtKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgLy9zdGF0aWMgZmllbGRzXHJcbiAgICAgICAgICAgICAgICB2YXIgb2JqID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIFwiZm9ybXVsYXRpb25JZFwiOiBpdGVtLmZvcm11bGF0aW9uX2lkLFxyXG4gICAgICAgICAgICAgICAgICAgIFwiZm9ybXVsYXRpb25OYW1lXCI6IGl0ZW0uZm9ybXVsYXRpb25fbmFtZVxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIGlmICghaXRlbS5kb3NhZ2VfZm9ybV9ncm91cC5kb3NhZ2VfZm9ybSkge1xyXG4gICAgICAgICAgICAgICAgICAgIG9iai5kb3NhZ2VGb3JtID0gaXRlbS5kb3NhZ2VfZm9ybV9ncm91cC5kb3NhZ2VfZm9ybTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRvc2FnZUZvcm1PYmogPSAkZmlsdGVyKCdmaWx0ZXInKShEb3NzaWVyTGlzdHMuZ2V0RG9zYWdlRm9ybUxpc3QoKSwge2lkOiBpdGVtLmRvc2FnZV9mb3JtX2dyb3VwLmRvc2FnZV9mb3JtLl9fdGV4dH0pWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgIG9iai5kb3NhZ2VGb3JtID0gZG9zYWdlRm9ybU9iajtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvKiBpZiAoIWl0ZW0uZG9zYWdlX2Zvcm1fZ3JvdXAuZG9zYWdlX2Zvcm0gfHwgaXRlbS5kb3NhZ2VfZm9ybV9ncm91cC5kb3NhZ2VfZm9ybSA9PT0gRG9zc2llckxpc3RzLmdldE90aGVyVmFsdWUoKSkge1xyXG4gICAgICAgICAgICAgICAgIG9iai5kb3NhZ2VGb3JtID0gaXRlbS5kb3NhZ2VfZm9ybV9ncm91cC5kb3NhZ2VfZm9ybTtcclxuICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgIG9iai5kb3NhZ2VGb3JtID0gRG9zc2llckxpc3RzLmdldERvc2FnZUZvcm1QcmVmaXgoKSArIGl0ZW0uZG9zYWdlX2Zvcm1fZ3JvdXAuZG9zYWdlX2Zvcm07XHJcbiAgICAgICAgICAgICAgICAgfSovXHJcblxyXG4gICAgICAgICAgICAgICAgb2JqLmRvc2FnZUZvcm1PdGhlciA9IGl0ZW0uZG9zYWdlX2Zvcm1fZ3JvdXAuZG9zYWdlX2Zvcm1fb3RoZXI7XHJcbiAgICAgICAgICAgICAgICBpZiAoaXRlbS5ub25tZWRpY2luYWxfaW5ncmVkaWVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG9iai5uTWVkSW5nTGlzdCA9IGdldE5vbk1lZEluZ0xpc3QoaXRlbS5ub25tZWRpY2luYWxfaW5ncmVkaWVudCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoaXRlbS5hY3RpdmVfaW5ncmVkaWVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG9iai5hY3RpdmVJbmdMaXN0ID0gZ2V0QWN0aXZlSW5nTGlzdChpdGVtLmFjdGl2ZV9pbmdyZWRpZW50KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vY29udGFpbmVyX2dyb3VwIGlzIHN0YXRpYyBidXQgZG8gYSBjaGVjayB0byBiZSBzYWZlXHJcbiAgICAgICAgICAgICAgICBpZiAoaXRlbS5jb250YWluZXJfZ3JvdXAgJiYgaXRlbS5jb250YWluZXJfZ3JvdXAuY29udGFpbmVyX2RldGFpbHMpIHtcclxuICAgICAgICAgICAgICAgICAgICBvYmouY29udGFpbmVyVHlwZXMgPSBnZXRDb250YWluZXJUeXBlTGlzdChpdGVtLmNvbnRhaW5lcl9ncm91cC5jb250YWluZXJfZGV0YWlscyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoaXRlbS5tYXRlcmlhbF9pbmdyZWRpZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgb2JqLmFuaW1hbEh1bWFuTWF0ZXJpYWxzID0gZ2V0TWF0ZXJpYWxMaXN0KGl0ZW0ubWF0ZXJpYWxfaW5ncmVkaWVudCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoaXRlbS5yb2FfZ3JvdXAgJiYgaXRlbS5yb2FfZ3JvdXAucm9hX2RldGFpbHMpIHtcclxuICAgICAgICAgICAgICAgICAgICBvYmoucm91dGVBZG1pbnMgPSBnZXRSb3V0ZUFkbWluTGlzdChpdGVtLnJvYV9ncm91cC5yb2FfZGV0YWlscyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoaXRlbS5jb3VudHJ5X2dyb3VwICYmIGl0ZW0uY291bnRyeV9ncm91cC5jb3VudHJ5X21hbnVmYWN0dXJlcikge1xyXG4gICAgICAgICAgICAgICAgICAgIG9iai5jb3VudHJ5TGlzdCA9IGdldEZvcm11bGF0aW9uQ291bnRyeUxpc3QoaXRlbS5jb3VudHJ5X2dyb3VwLmNvdW50cnlfbWFudWZhY3R1cmVyKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGZvcm11bGF0aW9uTGlzdC5wdXNoKG9iaik7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIGZvcm11bGF0aW9uTGlzdDtcclxuXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBnZXRBY3RpdmVJbmdMaXN0KGxpc3QpIHtcclxuXHJcbiAgICAgICAgICAgIHZhciByZXN1bHRMaXN0ID0gW107XHJcbiAgICAgICAgICAgIGlmICghKGxpc3QgaW5zdGFuY2VvZiBBcnJheSkpIHtcclxuICAgICAgICAgICAgICAgIC8vbWFrZSBpdCBhbiBhcnJheSwgY2FzZSB0aGVyZSBpcyBvbmx5IG9uZVxyXG4gICAgICAgICAgICAgICAgbGlzdCA9IFtsaXN0XVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaChsaXN0LCBmdW5jdGlvbiAoaXRlbSkge1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciBvYmogPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJpbmdJZFwiOiBpdGVtLmluZ3JlZGllbnRfaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJpbmdMYWJlbFwiOiBpdGVtLmluZ3JlZGllbnRfbmFtZSxcclxuICAgICAgICAgICAgICAgICAgICBcImF1dG9JbmdyZWRcIjogXCJOXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJjYXNcIjogaXRlbS5jYXNfbnVtYmVyLFxyXG4gICAgICAgICAgICAgICAgICAgIFwiaHVtYW5BbmltYWxTb3VyY2VkXCI6IGl0ZW0uaXNfaHVtYW5fYW5pbWFsX3NyYyxcclxuICAgICAgICAgICAgICAgICAgICBcInN0YW5kYXJkXCI6IGl0ZW0uaW5ncmVkX3N0YW5kYXJkLFxyXG4gICAgICAgICAgICAgICAgICAgIFwic3RyZW5ndGhcIjogTnVtYmVyKGl0ZW0uc3RyZW5ndGgpLFxyXG4gICAgICAgICAgICAgICAgICAgIFwicGVyXCI6IGl0ZW0ucGVyLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidW5pdHNcIjogXCJcIixcclxuICAgICAgICAgICAgICAgICAgICBcImNhbGNBc0Jhc2VcIjogaXRlbS5pc19iYXNlX2NhbGMsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW5vTWF0ZXJpYWxcIjpcIlwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFub01hdGVyaWFsT3RoZXJcIjogaXRlbS5uYW5vbWF0ZXJpYWxfZGV0YWlsc1xyXG4gICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoaXRlbS51bml0cykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB1bml0c09iaiA9ICRmaWx0ZXIoJ2ZpbHRlcicpKERvc3NpZXJMaXN0cy5nZXRVbml0c0xpc3QoKSwge2lkOiBpdGVtLnVuaXRzLl9fdGV4dH0pWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgIG9iai51bml0cyA9IHVuaXRzT2JqO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYoIGl0ZW0uaXNfbmFub21hdGVyaWFsKXtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbmFub1ZhbHVlPURvc3NpZXJMaXN0cy5nZXROYW5vUHJlZml4KCkraXRlbS5pc19uYW5vbWF0ZXJpYWwuX190ZXh0O1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKGl0ZW0uaXNfbmFub21hdGVyaWFsLl9fdGV4dD09PU9USEVSKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmFub1ZhbHVlPWl0ZW0uaXNfbmFub21hdGVyaWFsLl9fdGV4dDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgb2JqLm5hbm9NYXRlcmlhbD0kZmlsdGVyKCdmaWx0ZXInKShEb3NzaWVyTGlzdHMuZ2V0TmFub01hdGVyaWFscygpICwge2lkOiBuYW5vVmFsdWV9KVswXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vIHVzZWQgdG8gaWRlbnRpZnkgaWYgdGhlIGluZ3JlZGllbnQgaXMgbm90IGZyb20gdGhlIHR5cGUgYWhlYWQgbG9va3VwXHJcbiAgICAgICAgICAgICAgICBpZiAoIW9iai5pbmdJZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG9iai5hdXRvSW5ncmVkID0gJ04nXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXN1bHRMaXN0LnB1c2gob2JqKTtcclxuXHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdExpc3Q7XHJcblxyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGdldE5vbk1lZEluZ0xpc3QobGlzdCkge1xyXG5cclxuICAgICAgICAgICAgdmFyIHJlc3VsdExpc3QgPSBbXTtcclxuICAgICAgICAgICAgaWYgKCEobGlzdCBpbnN0YW5jZW9mIEFycmF5KSkge1xyXG4gICAgICAgICAgICAgICAgLy9tYWtlIGl0IGFuIGFycmF5LCBjYXNlIHRoZXJlIGlzIG9ubHkgb25lXHJcbiAgICAgICAgICAgICAgICBsaXN0ID0gW2xpc3RdXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKGxpc3QsIGZ1bmN0aW9uIChpdGVtKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgb2JqID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIFwiaW5nSWRcIjogaXRlbS5pbmdyZWRpZW50X2lkLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidmFySWRcIjogaXRlbS52YXJpYW50X25hbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJpbmdOYW1lXCI6IGl0ZW0uaW5ncmVkaWVudF9uYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgIFwiY2FzXCI6IGl0ZW0uY2FzX251bWJlcixcclxuICAgICAgICAgICAgICAgICAgICBcImh1bWFuQW5pbWFsU291cmNlZFwiOiBpdGVtLmlzX2h1bWFuX2FuaW1hbF9zcmMsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJzdGFuZGFyZFwiOiBpdGVtLmluZ3JlZF9zdGFuZGFyZCxcclxuICAgICAgICAgICAgICAgICAgICBcInN0cmVuZ3RoXCI6IE51bWJlcihpdGVtLnN0cmVuZ3RoKSxcclxuICAgICAgICAgICAgICAgICAgICBcInBlclwiOiBpdGVtLnBlcixcclxuICAgICAgICAgICAgICAgICAgICBcInVuaXRzXCI6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJjYWxjQXNCYXNlXCI6IGl0ZW0uaXNfYmFzZV9jYWxjLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFub01hdGVyaWFsXCI6XCJcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbm9NYXRlcmlhbE90aGVyXCI6IGl0ZW0ubmFub21hdGVyaWFsX2RldGFpbHNcclxuICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGl0ZW0udW5pdHMpIHtcclxuICAgICAgICAgICAgICAgICAgICBvYmoudW5pdHMgPSAkZmlsdGVyKCdmaWx0ZXInKShEb3NzaWVyTGlzdHMuZ2V0VW5pdHNMaXN0KCksIHtpZDogaXRlbS51bml0cy5fX3RleHR9KVswXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmKCBpdGVtLmlzX25hbm9tYXRlcmlhbCl7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9wcmVmaXhlZCBzbyBuZWVkIHRvIGRvIHRoaW5ncyBkaWZmZXJlbnRseSB0aGFuIHVuaXRzXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5hbm9WYWx1ZT1Eb3NzaWVyTGlzdHMuZ2V0TmFub1ByZWZpeCgpK2l0ZW0uaXNfbmFub21hdGVyaWFsLl9fdGV4dDtcclxuICAgICAgICAgICAgICAgICAgICBpZihpdGVtLmlzX25hbm9tYXRlcmlhbC5fX3RleHQ9PT1PVEhFUil7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbm9WYWx1ZT1pdGVtLmlzX25hbm9tYXRlcmlhbC5fX3RleHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgb2JqLm5hbm9NYXRlcmlhbD0kZmlsdGVyKCdmaWx0ZXInKShEb3NzaWVyTGlzdHMuZ2V0TmFub01hdGVyaWFscygpICwge2lkOiBuYW5vVmFsdWV9KVswXTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICByZXN1bHRMaXN0LnB1c2gob2JqKTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0TGlzdDtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICBmdW5jdGlvbiBnZXRDb250YWluZXJUeXBlTGlzdChsaXN0KSB7XHJcblxyXG4gICAgICAgICAgICB2YXIgcmVzdWx0TGlzdCA9IFtdO1xyXG4gICAgICAgICAgICBpZiAoIShsaXN0IGluc3RhbmNlb2YgQXJyYXkpKSB7XHJcbiAgICAgICAgICAgICAgICAvL21ha2UgaXQgYW4gYXJyYXksIGNhc2UgdGhlcmUgaXMgb25seSBvbmVcclxuICAgICAgICAgICAgICAgIGxpc3QgPSBbbGlzdF1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKGxpc3QsIGZ1bmN0aW9uIChpdGVtKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIG9iaiA9IHtcclxuICAgICAgICAgICAgICAgICAgICBcImNvbnRhaW5lclR5cGVcIjogaXRlbS5jb250YWluZXJfdHlwZSxcclxuICAgICAgICAgICAgICAgICAgICBcInBhY2thZ2VTaXplXCI6IGl0ZW0ucGFja2FnZV9zaXplLFxyXG4gICAgICAgICAgICAgICAgICAgIFwic2hlbGZMaWZlWWVhcnNcIjogTnVtYmVyKGl0ZW0uc2hlbGZfbGlmZV95ZWFycyksXHJcbiAgICAgICAgICAgICAgICAgICAgXCJzaGVsZkxpZmVNb250aHNcIjogTnVtYmVyKGl0ZW0uc2hlbGZfbGlmZV9tb250aHMpLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidGVtcE1pblwiOiBOdW1iZXIoaXRlbS50ZW1wZXJhdHVyZV9taW4pLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidGVtcE1heFwiOiBOdW1iZXIoaXRlbS50ZW1wZXJhdHVyZV9tYXgpXHJcbiAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgIHJlc3VsdExpc3QucHVzaChvYmopO1xyXG5cclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0TGlzdDtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICBmdW5jdGlvbiBnZXRNYXRlcmlhbExpc3QobGlzdCkge1xyXG5cclxuICAgICAgICAgICAgdmFyIHJlc3VsdExpc3QgPSBbXTtcclxuICAgICAgICAgICAgaWYgKCEobGlzdCBpbnN0YW5jZW9mIEFycmF5KSkge1xyXG4gICAgICAgICAgICAgICAgLy9tYWtlIGl0IGFuIGFycmF5LCBjYXNlIHRoZXJlIGlzIG9ubHkgb25lXHJcbiAgICAgICAgICAgICAgICBsaXN0ID0gW2xpc3RdXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKGxpc3QsIGZ1bmN0aW9uIChpdGVtKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgb2JqID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIFwiaW5ncmVkaWVudElkXCI6IGl0ZW0uaW5ncmVkaWVudF9pZCxcclxuICAgICAgICAgICAgICAgICAgICBcImluZ3JlZGllbnROYW1lXCI6IGl0ZW0uaW5ncmVkaWVudF9uYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgIFwiY2FzXCI6IGl0ZW0uY2FzX251bWJlcixcclxuICAgICAgICAgICAgICAgICAgICBcImluZ3JlZGllbnRTdGFuZGFyZFwiOiBpdGVtLmluZ3JlZF9zdGFuZGFyZCxcclxuICAgICAgICAgICAgICAgICAgICBcImluRmluYWxDb250YWluZXJcIjogaXRlbS5pbl9maW5hbF9jb250YWluZXJcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICByZXN1bHRMaXN0LnB1c2gob2JqKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHJldHVybiByZXN1bHRMaXN0O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZ2V0Um91dGVBZG1pbkxpc3QobGlzdCkge1xyXG5cclxuICAgICAgICAgICAgaWYgKCEobGlzdCBpbnN0YW5jZW9mIEFycmF5KSkge1xyXG4gICAgICAgICAgICAgICAgLy9tYWtlIGl0IGFuIGFycmF5LCBjYXNlIHRoZXJlIGlzIG9ubHkgb25lXHJcbiAgICAgICAgICAgICAgICBsaXN0ID0gW2xpc3RdXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHZhciByZXN1bHRMaXN0ID0gW107XHJcblxyXG4gICAgICAgICAgICB2YXIgX2lkID0gMDtcclxuXHJcbiAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaChsaXN0LCBmdW5jdGlvbiAoaXRlbSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHJvYU9iaiA9ICRmaWx0ZXIoJ2ZpbHRlcicpKERvc3NpZXJMaXN0cy5nZXRSb2EoKSwge2lkOiBpdGVtLnJvYS5fX3RleHR9KVswXTtcclxuICAgICAgICAgICAgICAgIF9pZCA9IF9pZCArIDE7XHJcbiAgICAgICAgICAgICAgICB2YXIgb2JqID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIFwiaWRcIjogX2lkLFxyXG4gICAgICAgICAgICAgICAgICAgIFwicm9hXCI6IHJvYU9iaixcclxuICAgICAgICAgICAgICAgICAgICBcIm90aGVyUm9hRGV0YWlsc1wiOiBpdGVtLnJvYV9vdGhlcixcclxuICAgICAgICAgICAgICAgICAgICBcImRpc3BsYXlcIjogcm9hT2JqLmlkXHJcbiAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgIHJlc3VsdExpc3QucHVzaChvYmopO1xyXG5cclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0TGlzdDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGdldEZvcm11bGF0aW9uQ291bnRyeUxpc3QobGlzdCkge1xyXG5cclxuICAgICAgICAgICAgdmFyIHJlc3VsdExpc3QgPSBbXTtcclxuXHJcbiAgICAgICAgICAgIHZhciBfaWQgPSAwO1xyXG5cclxuICAgICAgICAgICAgaWYgKCEobGlzdCBpbnN0YW5jZW9mIEFycmF5KSkge1xyXG4gICAgICAgICAgICAgICAgLy9tYWtlIGl0IGFuIGFycmF5LCBjYXNlIHRoZXJlIGlzIG9ubHkgb25lXHJcbiAgICAgICAgICAgICAgICBsaXN0ID0gW2xpc3RdXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaChsaXN0LCBmdW5jdGlvbiAoaXRlbSkge1xyXG5cclxuICAgICAgICAgICAgICAgIF9pZCA9IF9pZCArIDE7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIG9iaiA9IHtcclxuICAgICAgICAgICAgICAgICAgICBcImlkXCI6IF9pZCxcclxuICAgICAgICAgICAgICAgICAgICBcImNvdW50cnlcIjpcIlwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwiZGlzcGxheVwiOlwiXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ1bmtub3duQ291bnRyeURldGFpbHNcIjpcIlwiXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgaWYoaXRlbS5fX3RleHQ9PT1VTktOT1dOKXtcclxuICAgICAgICAgICAgICAgICAgICBvYmouY291bnRyeSA9IGdldENvdW50cnlBbmRQcm92aW5jZXMuZ2V0VW5rbm93bkNvdW50cnlSZWNvcmQoKTtcclxuICAgICAgICAgICAgICAgIH1lbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBvYmouY291bnRyeSA9ICRmaWx0ZXIoJ2ZpbHRlcicpKGdldENvdW50cnlBbmRQcm92aW5jZXMuZ2V0Q291bnRyaWVzKCksIHtpZDogaXRlbS5fX3RleHR9KVswXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmKG9iai5jb3VudHJ5KXtcclxuICAgICAgICAgICAgICAgICAgICBvYmouZGlzcGxheT1vYmouY291bnRyeS5pZFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmVzdWx0TGlzdC5wdXNoKG9iaik7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdExpc3Q7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvL1RPRE8gZ2V0IHJpZCBvZiwgQW5ndWxhciBmaWx0ZXIgZm9yIHRoaXNcclxuICAgICAgICBTdHJpbmcucHJvdG90eXBlLmNhcGl0YWxpemUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgdGhpcy5zbGljZSgxKS50b0xvd2VyQ2FzZSgpO1xyXG4gICAgICAgICAgICAvL3JldHVybiB0aGlzLnJlcGxhY2UoIC8oXnxcXHMpKFthLXpdKS9nICwgZnVuY3Rpb24obSxwMSxwMil7IHJldHVybiBwMStwMi50b1VwcGVyQ2FzZSgpOyB9ICk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gY2FuUmVmUHJvZHVjdExpc3RUb091dHB1dChpbmZvKSB7XHJcbiAgICAgICAgICAgIHZhciByZXN1bHRMaXN0ID0gW107XHJcblxyXG4gICAgICAgICAgICBpZiAoYW5ndWxhci5pc0RlZmluZWQoaW5mbykpIHtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaW5mby5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBwcm9kdWN0ID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgcHJvZHVjdC5icmFuZF9uYW1lID0gaW5mb1tpXS5icmFuZE5hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAvLyBwcm9kdWN0Lm1lZGljaW5hbF9pbmdyZWRpZW50ID0gaW5mb1tpXS5tZWRJbmdyZWRpZW50O1xyXG4gICAgICAgICAgICAgICAgICAgIHByb2R1Y3QuaW5ncmVkaWVudF9pZD0gaW5mb1tpXS5pbmdJZDtcclxuICAgICAgICAgICAgICAgICAgICBwcm9kdWN0LmluZ3JlZGllbnRfbmFtZSA9IGluZm9baV0uaW5nTGFiZWw7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9tYWtlIGRvc2FnZSBmb3JtIHdpdGggYm90aCBlbmdsaXNoIGFuZCBmcmVuY2ggbGFiZWxzXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpbmZvW2ldLmRvc2FnZUZvcm0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNwbGl0QXJyYXkgPSAoaW5mb1tpXS5kb3NhZ2VGb3JtLmlkKS5zcGxpdChEb3NzaWVyTGlzdHMuZ2V0RG9zYWdlRm9ybVByZWZpeCgpKTsgLy9uZWVkZWQgdG8gcmVtb3ZlIHRoZSBpbnRlcm5hbCB1bmlxdWVuZXNzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuZXdEb3NhZ2UgPSBzcGxpdEFycmF5W3NwbGl0QXJyYXkubGVuZ3RoIC0gMV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHByb2R1Y3QuZG9zYWdlX2Zvcm0gPSBpbmZvW2ldLmRvc2FnZUZvcm07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb2R1Y3QuZG9zYWdlX2Zvcm0gPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfbGFiZWxfZW46IGluZm9baV0uZG9zYWdlRm9ybS5lbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9sYWJlbF9mcjogaW5mb1tpXS5kb3NhZ2VGb3JtLmZyLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX190ZXh0OiBuZXdEb3NhZ2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHByb2R1Y3QuZG9zYWdlX2Zvcm1fb3RoZXIgPSBpbmZvW2ldLmRvc2FnZUZvcm1PdGhlcjtcclxuICAgICAgICAgICAgICAgICAgICBwcm9kdWN0LnN0cmVuZ3RocyA9IGluZm9baV0uc3RyZW5ndGhzO1xyXG4gICAgICAgICAgICAgICAgICAgIHByb2R1Y3QudW5pdHMgPSBfdW5pdHNGbGRUb091dHB1dChpbmZvW2ldLnVuaXRzLCBEb3NzaWVyTGlzdHMuZ2V0VW5pdHNQcmVmaXgoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcHJvZHVjdC51bml0c19vdGhlciA9IGluZm9baV0ub3RoZXJVbml0cztcclxuICAgICAgICAgICAgICAgICAgICBwcm9kdWN0LnBlciA9IGluZm9baV0ucGVyO1xyXG4gICAgICAgICAgICAgICAgICAgIHByb2R1Y3QuY29tcGFueV9uYW1lID0gaW5mb1tpXS5jb21wYW55TmFtZTtcclxuXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdExpc3QucHVzaChwcm9kdWN0KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0TGlzdDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIENvbnZlcnRzIGFsbCB0aGUgYXBwZW5kaXggNCBkYXRhIHRvIG91dHB1dFxyXG4gICAgICAgICAqIEBwYXJhbSBpbmZvXHJcbiAgICAgICAgICogQHJldHVybnMgeyp9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZnVuY3Rpb24gYXBwZW5kaXg0SW5ncmVkaWVudExpc3RUb091dHB1dChpbmZvKSB7XHJcbiAgICAgICAgICAgIHZhciBhcHBlbmRpY2VzID0gW107IC8vVE9ETyBtYXkgbmVlZCBiZXR0ZXIgZXJyb3IgY2hlY2tpbmdcclxuICAgICAgICAgICAgLy9Ob3RlIG9yZGVyIG9mIGVsZW1lbnRzIG11c3QgbWF0Y2ggc2NoZW1hIGZvciB2YWxpZGF0aW9uXHJcbiAgICAgICAgICAgIGlmICghYW5ndWxhci5pc0RlZmluZWQoaW5mbykpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGluZm8ubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHZhciBpbmcgPSB7fTtcclxuICAgICAgICAgICAgICAgIHZhciBvbmVSZWNvcmQgPSB7fTtcclxuICAgICAgICAgICAgICAgIGluZy5pbmdyZWRpZW50X2lkID0gaW5mb1tpXS5pZDtcclxuICAgICAgICAgICAgICAgIGluZy5pbmdyZWRpZW50X25hbWUgPSBpbmZvW2ldLmluZ3JlZGllbnROYW1lO1xyXG4gICAgICAgICAgICAgICAgaW5nLmFuaW1hbF9zb3VyY2VkID0gaW5mb1tpXS5hbmltYWxTb3VyY2VkID09PSB0cnVlID8gJ1knIDogJ04nO1xyXG4gICAgICAgICAgICAgICAgaW5nLmh1bWFuX3NvdXJjZWQgPSBpbmZvW2ldLmh1bWFuU291cmNlZCA9PT0gdHJ1ZSA/ICdZJyA6ICdOJztcclxuXHJcbiAgICAgICAgICAgICAgICAvL291dHB1dCBhbGwgdGhlIHRpc3N1ZXMgYW5kIGZsdWlkc1xyXG4gICAgICAgICAgICAgICAgaWYgKGluZm9baV0udGlzc3Vlc0ZsdWlkc09yaWdpbikge1xyXG4gICAgICAgICAgICAgICAgICAgIGluZy50aXNzdWVzX2ZsdWlkc19zZWN0aW9uID0ge307XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGIgPSAwOyBiIDwgaW5mb1tpXS50aXNzdWVzRmx1aWRzT3JpZ2luLnRpc3N1ZXNMaXN0Lmxlbmd0aDsgYisrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmbHVpZHNSZWMgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChpbmZvW2ldLnRpc3N1ZXNGbHVpZHNPcmlnaW4udGlzc3Vlc0xpc3RbYl0uc3lzdGVtVHlwZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAgIERvc3NpZXJMaXN0cy5nZXROZXJ2b3VzU3lzdGVtVmFsdWUoKTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmcudGlzc3Vlc19mbHVpZHNfc2VjdGlvbi5uZXJ2b3VzX3N5c3RlbSA9IF9uZXJ2b3VzU3lzdGVtVG9PdXRwdXQoaW5mb1tpXS50aXNzdWVzRmx1aWRzT3JpZ2luLnRpc3N1ZXNMaXN0W2JdLnN5c3RlbSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAgIERvc3NpZXJMaXN0cy5nZXREaWdlc3RpdmVTeXN0ZW1WYWx1ZSgpOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZy50aXNzdWVzX2ZsdWlkc19zZWN0aW9uLmRpZ2VzdGl2ZV9zeXN0ZW0gPSBfZGlnZXN0aXZlU3lzdGVtVG9PdXRwdXQoaW5mb1tpXS50aXNzdWVzRmx1aWRzT3JpZ2luLnRpc3N1ZXNMaXN0W2JdLnN5c3RlbSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICAgRG9zc2llckxpc3RzLmdldEltbXVuZVN5c3RlbVZhbHVlKCk6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5nLnRpc3N1ZXNfZmx1aWRzX3NlY3Rpb24uaW1tdW5lX3N5c3RlbSA9IF9pbW11bmVTeXN0ZW1Ub091dHB1dChpbmZvW2ldLnRpc3N1ZXNGbHVpZHNPcmlnaW4udGlzc3Vlc0xpc3RbYl0uc3lzdGVtKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgICBEb3NzaWVyTGlzdHMuZ2V0U2tpblN5c3RlbVZhbHVlKCk6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5nLnRpc3N1ZXNfZmx1aWRzX3NlY3Rpb24uc2tpbl9zeXN0ZW0gPSBfc2tpblN5c3RlbVRvT3V0cHV0KGluZm9baV0udGlzc3Vlc0ZsdWlkc09yaWdpbi50aXNzdWVzTGlzdFtiXS5zeXN0ZW0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgICBEb3NzaWVyTGlzdHMuZ2V0TXVzY2xlU3lzdGVtVmFsdWUoKTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmcudGlzc3Vlc19mbHVpZHNfc2VjdGlvbi5tdXNjdWxvX3N5c3RlbSA9IF9tdXNjbGVTeXN0ZW1Ub091dHB1dChpbmZvW2ldLnRpc3N1ZXNGbHVpZHNPcmlnaW4udGlzc3Vlc0xpc3RbYl0uc3lzdGVtKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgICBEb3NzaWVyTGlzdHMuZ2V0T3RoZXJUaXNzdWVzU3lzdGVtVmFsdWUoKTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmcudGlzc3Vlc19mbHVpZHNfc2VjdGlvbi5vdGhlcl9zeXN0ZW0gPSBfb3RoZXJTeXN0ZW1Ub091dHB1dChpbmZvW2ldLnRpc3N1ZXNGbHVpZHNPcmlnaW4udGlzc3Vlc0xpc3RbYl0uc3lzdGVtKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgICBEb3NzaWVyTGlzdHMuZ2V0UmVwcm9kdWN0aXZlU3lzdGVtVmFsdWUoKTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmcudGlzc3Vlc19mbHVpZHNfc2VjdGlvbi5yZXByb2R1Y3RpdmVfc3lzdGVtID0gX3JlcHJvZHVjdGl2ZVN5c3RlbVRvT3V0cHV0KGluZm9baV0udGlzc3Vlc0ZsdWlkc09yaWdpbi50aXNzdWVzTGlzdFtiXS5zeXN0ZW0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAgIERvc3NpZXJMaXN0cy5nZXRDYXJkaW9TeXN0ZW1WYWx1ZSgpOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZy50aXNzdWVzX2ZsdWlkc19zZWN0aW9uLmNhcmRpb19zeXN0ZW0gPSBfY2FyZGlvU3lzdGVtVG9PdXRwdXQoaW5mb1tpXS50aXNzdWVzRmx1aWRzT3JpZ2luLnRpc3N1ZXNMaXN0W2JdLnN5c3RlbSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGluZm9baV0uc291cmNlQW5pbWFsRGV0YWlscykge1xyXG4gICAgICAgICAgICAgICAgICAgIGluZy5hbmltYWxfc291cmNlZF9zZWN0aW9uID0gY3JlYXRlRW1wdHlBbmltYWxTb3VyY2VGb3JPdXRwdXQoKTtcclxuICAgICAgICAgICAgICAgICAgICAvL2dldCB0aGUgc3RhdGljIHZhbHVlc1xyXG4gICAgICAgICAgICAgICAgICAgIGluZy5hbmltYWxfc291cmNlZF9zZWN0aW9uLmlzX2NlbGxfbGluZSA9IGluZm9baV0uc291cmNlQW5pbWFsRGV0YWlscy5pc0NlbGxMaW5lO1xyXG4gICAgICAgICAgICAgICAgICAgIGluZy5hbmltYWxfc291cmNlZF9zZWN0aW9uLmlzX2Jpb3RlY2hfZGVyaXZlZCA9IGluZm9baV0uc291cmNlQW5pbWFsRGV0YWlscy5pc0Jpb3RlY2hEZXJpdmVkO1xyXG4gICAgICAgICAgICAgICAgICAgIGluZy5hbmltYWxfc291cmNlZF9zZWN0aW9uLmlzX2NvbnRyb2xsZWRfcG9wID0gaW5mb1tpXS5zb3VyY2VBbmltYWxEZXRhaWxzLmlzQ29udHJvbGxlZFBvcDtcclxuICAgICAgICAgICAgICAgICAgICBpbmcuYW5pbWFsX3NvdXJjZWRfc2VjdGlvbi5hbmltYWxfYWdlID0gaW5mb1tpXS5zb3VyY2VBbmltYWxEZXRhaWxzLmFnZUFuaW1hbHM7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9zdGVwIDIgZ2V0IGFsbCB0aGUgYW5pbWFsIHNvdXJjZWVzXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGFuaW1hbFNyY09iaiA9IGluZm9baV0uc291cmNlQW5pbWFsRGV0YWlscztcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBzcmNDb3VudCA9IDA7IHNyY0NvdW50IDwgYW5pbWFsU3JjT2JqLmFuaW1hbFNyY0xpc3QubGVuZ3RoOyBzcmNDb3VudCsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvbmVSZWMgPSBhbmltYWxTcmNPYmouYW5pbWFsU3JjTGlzdFtzcmNDb3VudF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzcmNSZWNvcmRPdXQgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3JjUmVjb3JkT3V0LmFuaW1hbF90eXBlID0gb25lUmVjLmFuaW1hbFR5cGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNyY1JlY29yZE91dC5hbmltYWxfZGV0YWlsID0gb25lUmVjLmFuaW1hbERldGFpbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5nLmFuaW1hbF9zb3VyY2VkX3NlY3Rpb24uYW5pbWFsX3NyY19yZWNvcmQucHVzaChzcmNSZWNvcmRPdXQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAvL3N0ZXAgMyBnZXQgYWxsIHRoZSBjb3VudHJpZXNcclxuICAgICAgICAgICAgICAgICAgICB2YXIgY291bnRyaWVzID0gaW5mb1tpXS5zb3VyY2VBbmltYWxEZXRhaWxzLmNvdW50cnlMaXN0O1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHYgPSAwOyB2IDwgY291bnRyaWVzLmxlbmd0aDsgdisrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjb3VudHJ5UmVjb3JkID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvdW50cnlSZWNvcmQuY291bnRyeV93aXRoX3Vua25vd24gPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfbGFiZWxfZW46IFwiXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfbGFiZWxfZnI6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfX3RleHQ6ICBcIlwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBjb3VudHJpZXNbdl0uY291bnRyeSl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3VudHJ5UmVjb3JkLmNvdW50cnlfd2l0aF91bmtub3duLl9sYWJlbF9lbj0gY291bnRyaWVzW3ZdLmNvdW50cnkuZW47XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3VudHJ5UmVjb3JkLmNvdW50cnlfd2l0aF91bmtub3duLl9sYWJlbF9mcj0gY291bnRyaWVzW3ZdLmNvdW50cnkuZnI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3VudHJ5UmVjb3JkLmNvdW50cnlfd2l0aF91bmtub3duLl9fdGV4dD0gY291bnRyaWVzW3ZdLmNvdW50cnkuaWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvdW50cnlSZWNvcmQudW5rbm93bl9jb3VudHJ5X2RldGFpbHMgPSBjb3VudHJpZXNbdl0udW5rbm93bkNvdW50cnlEZXRhaWxzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbmcuYW5pbWFsX3NvdXJjZWRfc2VjdGlvbi5jb3VudHJ5X29yaWdpbl9saXN0LmNvdW50cnlfb3JpZ2luLnB1c2goY291bnRyeVJlY29yZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYXBwZW5kaWNlcy5wdXNoKGluZyk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgICAgICByZXR1cm4gYXBwZW5kaWNlcztcclxuXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBDcmVhdGVzIHRoZSBmb3JtdWxhdGlvbiBsaXN0IGluIGEgZm9ybWF0IGNvbWFwYXRpYmxlIGZvciBvdXRwdXQgZmlsZVxyXG4gICAgICAgICAqIEBwYXJhbSBsaXN0XHJcbiAgICAgICAgICogQHJldHVybnMge0FycmF5fVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGZ1bmN0aW9uIGZvcm11bGF0aW9uTGlzdFRvT3V0cHV0KGxpc3QpIHtcclxuICAgICAgICAgICAgdmFyIGZvcm11bGF0aW9uTGlzdCA9IFtdO1xyXG4gICAgICAgICAgICAvL09yZGVyIGlzIGltcG9ydGFudCBmb3IgdGhlIFhNTFxyXG4gICAgICAgICAgICBhbmd1bGFyLmZvckVhY2gobGlzdCwgZnVuY3Rpb24gKGl0ZW0pIHtcclxuICAgICAgICAgICAgICAgIHZhciBvYmogPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJmb3JtdWxhdGlvbl9uYW1lXCI6IGl0ZW0uZm9ybXVsYXRpb25OYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgIFwiZm9ybXVsYXRpb25faWRcIjogaXRlbS5mb3JtdWxhdGlvbklkXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgLy9kb3NhZ2VfZm9ybV9ncm91cCwgc3RhdGljIHZhbHVlXHJcbiAgICAgICAgICAgICAgICBvYmouZG9zYWdlX2Zvcm1fZ3JvdXAgPSB7fTtcclxuICAgICAgICAgICAgICAgIGlmIChpdGVtLmRvc2FnZUZvcm0pIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgc3BsaXRBcnJheSA9IChpdGVtLmRvc2FnZUZvcm0uaWQpLnNwbGl0KERvc3NpZXJMaXN0cy5nZXREb3NhZ2VGb3JtUHJlZml4KCkpOyAvL25lZWRlZCB0byByZW1vdmUgdGhlIGludGVybmFsIHVuaXF1ZW5lc3NcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbmV3RG9zYWdlID0gc3BsaXRBcnJheVtzcGxpdEFycmF5Lmxlbmd0aCAtIDFdO1xyXG4gICAgICAgICAgICAgICAgICAgIG9iai5kb3NhZ2VfZm9ybV9ncm91cC5kb3NhZ2VfZm9ybSA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2xhYmVsX2VuOiBpdGVtLmRvc2FnZUZvcm0uZW4sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9sYWJlbF9mcjogaXRlbS5kb3NhZ2VGb3JtLmZyLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfX3RleHQ6IG5ld0Rvc2FnZVxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyB2YXIgc3BsaXRBcnJheSA9IChpdGVtLmRvc2FnZUZvcm0pLnNwbGl0KERvc3NpZXJMaXN0cy5nZXREb3NhZ2VGb3JtUHJlZml4KCkpOyAvL25lZWRlZCB0byByZW1vdmUgdGhlIGludGVybmFsIHVuaXF1ZW5lc3NcclxuICAgICAgICAgICAgICAgIC8vIHZhciBuZXdEb3NhZ2UgPSBzcGxpdEFycmF5W3NwbGl0QXJyYXkubGVuZ3RoIC0gMV07XHJcbiAgICAgICAgICAgICAgICAvLyBvYmouZG9zYWdlX2Zvcm1fZ3JvdXAuZG9zYWdlX2Zvcm0gPSBuZXdEb3NhZ2U7XHJcbiAgICAgICAgICAgICAgICBvYmouZG9zYWdlX2Zvcm1fZ3JvdXAuZG9zYWdlX2Zvcm1fb3RoZXIgPSBpdGVtLmRvc2FnZUZvcm1PdGhlcjtcclxuICAgICAgICAgICAgICAgIG9iai5yb2FfZ3JvdXAgPSB7fTtcclxuICAgICAgICAgICAgICAgIGlmIChpdGVtLnJvdXRlQWRtaW5zICYmIGl0ZW0ucm91dGVBZG1pbnMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG9iai5yb2FfZ3JvdXAucm9hX2RldGFpbHMgPSByb3V0ZUFkbWluVG9PdXRwdXQoaXRlbS5yb3V0ZUFkbWlucyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBvYmouY29udGFpbmVyX2dyb3VwID0ge307XHJcbiAgICAgICAgICAgICAgICBpZiAoaXRlbS5jb250YWluZXJUeXBlcyAmJiBpdGVtLmNvbnRhaW5lclR5cGVzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBvYmouY29udGFpbmVyX2dyb3VwLmNvbnRhaW5lcl9kZXRhaWxzID0gY29udGFpbmVyVHlwZUxpc3RUb091dHB1dChpdGVtLmNvbnRhaW5lclR5cGVzKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIG9iai5jb3VudHJ5X2dyb3VwID0ge307XHJcbiAgICAgICAgICAgICAgICBpZiAoaXRlbS5jb3VudHJ5TGlzdCAmJiBpdGVtLmNvdW50cnlMaXN0Lmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBvYmouY291bnRyeV9ncm91cC5jb3VudHJ5X21hbnVmYWN0dXJlciA9IGZvcm11bGF0aW9uQ291bnRyeUxpc3RUb091dHB1dChpdGVtLmNvdW50cnlMaXN0KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChpdGVtLmFjdGl2ZUluZ0xpc3QgJiYgaXRlbS5hY3RpdmVJbmdMaXN0Lmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBvYmouYWN0aXZlX2luZ3JlZGllbnQgPSBhY3RpdmVMaXN0VG9PdXRwdXQoaXRlbS5hY3RpdmVJbmdMaXN0KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChpdGVtLm5NZWRJbmdMaXN0ICYmIGl0ZW0ubk1lZEluZ0xpc3QubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG9iai5ub25tZWRpY2luYWxfaW5ncmVkaWVudCA9IG5vbk1lZEluZ0xpc3RUb091dHB1dChpdGVtLm5NZWRJbmdMaXN0KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChpdGVtLmFuaW1hbEh1bWFuTWF0ZXJpYWxzICYmIGl0ZW0uYW5pbWFsSHVtYW5NYXRlcmlhbHMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG9iai5tYXRlcmlhbF9pbmdyZWRpZW50ID0gbWF0ZXJpYWxMaXN0VG9PdXRwdXQoaXRlbS5hbmltYWxIdW1hbk1hdGVyaWFscyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBmb3JtdWxhdGlvbkxpc3QucHVzaChvYmopO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgcmV0dXJuIGZvcm11bGF0aW9uTGlzdDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKipcclxuICAgICAgICAgKiBNYXBzIHRoZSBhY3RpdmUgaW5ncmVkaWVudCBsaXN0IHRvIHRoZSBvdXRwdXQgSnNvblxyXG4gICAgICAgICAqIEBwYXJhbSBhY3RpdmVMaXN0XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZnVuY3Rpb24gYWN0aXZlTGlzdFRvT3V0cHV0KGFjdGl2ZUxpc3QpIHtcclxuICAgICAgICAgICAgdmFyIHJlc3VsdExpc3QgPSBbXTtcclxuXHJcbiAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaChhY3RpdmVMaXN0LCBmdW5jdGlvbiAoaXRlbSkge1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciBvYmogPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJpbmdyZWRpZW50X2lkXCI6IGl0ZW0uaW5nSWQsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJpbmdyZWRpZW50X25hbWVcIjogaXRlbS5pbmdMYWJlbCxcclxuICAgICAgICAgICAgICAgICAgICBcImNhc19udW1iZXJcIjogaXRlbS5jYXMsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJpbmdyZWRfc3RhbmRhcmRcIjogaXRlbS5zdGFuZGFyZCxcclxuICAgICAgICAgICAgICAgICAgICBcImlzX2h1bWFuX2FuaW1hbF9zcmNcIjogaXRlbS5odW1hbkFuaW1hbFNvdXJjZWQsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJzdHJlbmd0aFwiOiBpdGVtLnN0cmVuZ3RoLFxyXG4gICAgICAgICAgICAgICAgICAgIFwicGVyXCI6IGl0ZW0ucGVyLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidW5pdHNcIjogXCJcIixcclxuICAgICAgICAgICAgICAgICAgICBcInVuaXRzX290aGVyXCI6IGl0ZW0ub3RoZXJVbml0cyxcclxuICAgICAgICAgICAgICAgICAgICBcImlzX2Jhc2VfY2FsY1wiOiBpdGVtLmNhbGNBc0Jhc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJpc19uYW5vbWF0ZXJpYWxcIjpcIlwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFub21hdGVyaWFsX2RldGFpbHNcIjogaXRlbS5uYW5vTWF0ZXJpYWxPdGhlclxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIC8vaXRlbS51bml0c1xyXG4gICAgICAgICAgICAgICAgb2JqLnVuaXRzID0gX3VuaXRzRmxkVG9PdXRwdXQoaXRlbS51bml0cywgRG9zc2llckxpc3RzLmdldFVuaXRzUHJlZml4KCkpO1xyXG4gICAgICAgICAgICAgICAgb2JqLmlzX25hbm9tYXRlcmlhbD1fdW5pdHNGbGRUb091dHB1dChpdGVtLm5hbm9NYXRlcmlhbCwgRG9zc2llckxpc3RzLmdldE5hbm9QcmVmaXgoKSk7XHJcblxyXG4gICAgICAgICAgICAgICAgcmVzdWx0TGlzdC5wdXNoKG9iaik7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICByZXR1cm4gKHJlc3VsdExpc3QpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqKlxyXG4gICAgICAgICAqIENyZWF0ZXMgdGhlIHN0YW5kYXJkIGpzb24gb2JqZWN0IGZvciB1bml0cyBvZiBtZWFzdXJlXHJcbiAgICAgICAgICogQHBhcmFtIHVuaXRzT2JqXHJcbiAgICAgICAgICogQHBhcmFtIHByZWZpeFxyXG4gICAgICAgICAqIEByZXR1cm5zIHt7X2xhYmVsX2VuOiBzdHJpbmcsIF9sYWJlbF9mcjogc3RyaW5nLCBfX3RleHQ6IHN0cmluZ319XHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBmdW5jdGlvbiBfdW5pdHNGbGRUb091dHB1dCh1bml0c09iaiwgcHJlZml4KSB7XHJcbiAgICAgICAgICAgIHZhciBuZXdPYmogPSB7XHJcbiAgICAgICAgICAgICAgICBcIl9sYWJlbF9lblwiOiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgXCJfbGFiZWxfZnJcIjogXCJcIixcclxuICAgICAgICAgICAgICAgIFwiX190ZXh0XCI6IFwiXCJcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgaWYgKCF1bml0c09iaiB8fCAhcHJlZml4KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJcIjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgc3BsaXRBcnJheSA9ICh1bml0c09iai5pZCkuc3BsaXQocHJlZml4KTsgLy9uZWVkZWQgdG8gcmVtb3ZlIHRoZSBpbnRlcm5hbCB1bmlxdWVuZXNzXHJcbiAgICAgICAgICAgIHZhciBuZXdVbml0cyA9IHNwbGl0QXJyYXlbc3BsaXRBcnJheS5sZW5ndGggLSAxXTtcclxuICAgICAgICAgICAgbmV3T2JqLl9sYWJlbF9lbiA9IHVuaXRzT2JqLmVuO1xyXG4gICAgICAgICAgICBuZXdPYmouX2xhYmVsX2ZyID0gdW5pdHNPYmouZnI7XHJcbiAgICAgICAgICAgIG5ld09iai5fX3RleHQgPSBuZXdVbml0cztcclxuICAgICAgICAgICAgcmV0dXJuIG5ld09iajtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBDb252ZXJ0cyBub25NZWRpY2luYWwgSW5ncmVkaWVudCB0byBhIHRoZSBvdXRwdXQganNvbiBvYmplY3RcclxuICAgICAgICAgKiBAcGFyYW0gbm9uTWVkTGlzdFxyXG4gICAgICAgICAqIEByZXR1cm5zIHtBcnJheX1cclxuICAgICAgICAgKi9cclxuICAgICAgICBmdW5jdGlvbiBub25NZWRJbmdMaXN0VG9PdXRwdXQobm9uTWVkTGlzdCkge1xyXG5cclxuICAgICAgICAgICAgdmFyIHJlc3VsdExpc3QgPSBbXTtcclxuXHJcbiAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaChub25NZWRMaXN0LCBmdW5jdGlvbiAoaXRlbSkge1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciBvYmogPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJpbmdyZWRpZW50X2lkXCI6IGl0ZW0uaW5nSWQsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJpbmdyZWRpZW50X25hbWVcIjogaXRlbS5pbmdOYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgIFwiY2FzX251bWJlclwiOiBpdGVtLmNhcyxcclxuICAgICAgICAgICAgICAgICAgICBcImluZ3JlZF9zdGFuZGFyZFwiOiBpdGVtLnN0YW5kYXJkLFxyXG4gICAgICAgICAgICAgICAgICAgIFwiaXNfaHVtYW5fYW5pbWFsX3NyY1wiOiBpdGVtLmh1bWFuQW5pbWFsU291cmNlZCxcclxuICAgICAgICAgICAgICAgICAgICBcInZhcmlhbnRfbmFtZVwiOiBpdGVtLnZhcklkLFxyXG4gICAgICAgICAgICAgICAgICAgIFwic3RyZW5ndGhcIjogaXRlbS5zdHJlbmd0aCxcclxuICAgICAgICAgICAgICAgICAgICBcInBlclwiOiBpdGVtLnBlcixcclxuICAgICAgICAgICAgICAgICAgICBcInVuaXRzXCI6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ1bml0c19vdGhlclwiOiBpdGVtLm90aGVyVW5pdHMsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJpc19iYXNlX2NhbGNcIjogaXRlbS5jYWxjQXNCYXNlLFxyXG4gICAgICAgICAgICAgICAgICAgIFwiaXNfbmFub21hdGVyaWFsXCI6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW5vbWF0ZXJpYWxfZGV0YWlsc1wiOiBpdGVtLm5hbm9NYXRlcmlhbE90aGVyXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgb2JqLnVuaXRzID0gX3VuaXRzRmxkVG9PdXRwdXQoaXRlbS51bml0cywgRG9zc2llckxpc3RzLmdldFVuaXRzUHJlZml4KCkpO1xyXG4gICAgICAgICAgICAgICAgb2JqLmlzX25hbm9tYXRlcmlhbD1fdW5pdHNGbGRUb091dHB1dChpdGVtLm5hbm9NYXRlcmlhbCwgRG9zc2llckxpc3RzLmdldE5hbm9QcmVmaXgoKSk7XHJcblxyXG4gICAgICAgICAgICAgICAgcmVzdWx0TGlzdC5wdXNoKG9iaik7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0TGlzdDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIENvbnZlcnRzIGNvbnRhaW5lciB0eXBlIHRvIG91dHB1dCBqc29uXHJcbiAgICAgICAgICogQHBhcmFtIGNvbnRhaW5lckxpc3RcclxuICAgICAgICAgKiBAcmV0dXJucyB7QXJyYXl9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZnVuY3Rpb24gY29udGFpbmVyVHlwZUxpc3RUb091dHB1dChjb250YWluZXJMaXN0KSB7XHJcbiAgICAgICAgICAgIHZhciByZXN1bHRMaXN0ID0gW107XHJcbiAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaChjb250YWluZXJMaXN0LCBmdW5jdGlvbiAoaXRlbSkge1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciBvYmogPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJjb250YWluZXJfdHlwZVwiOiBpdGVtLmNvbnRhaW5lclR5cGUsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJwYWNrYWdlX3NpemVcIjogaXRlbS5wYWNrYWdlU2l6ZSxcclxuICAgICAgICAgICAgICAgICAgICBcInNoZWxmX2xpZmVfeWVhcnNcIjogaXRlbS5zaGVsZkxpZmVZZWFycyxcclxuICAgICAgICAgICAgICAgICAgICBcInNoZWxmX2xpZmVfbW9udGhzXCI6IGl0ZW0uc2hlbGZMaWZlTW9udGhzLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidGVtcGVyYXR1cmVfbWluXCI6IGl0ZW0udGVtcE1pbixcclxuICAgICAgICAgICAgICAgICAgICBcInRlbXBlcmF0dXJlX21heFwiOiBpdGVtLnRlbXBNYXhcclxuICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgcmVzdWx0TGlzdC5wdXNoKG9iaik7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0TGlzdDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBuZ2RvYyBNYXBzIG1hdGVyaWFsIHJlY29yZHMgdG8gb3V0cHV0IGpzb25cclxuICAgICAgICAgKiBAcGFyYW0gbGlzdFxyXG4gICAgICAgICAqIEByZXR1cm5zIHtBcnJheX1cclxuICAgICAgICAgKi9cclxuICAgICAgICBmdW5jdGlvbiBtYXRlcmlhbExpc3RUb091dHB1dChsaXN0KSB7XHJcbiAgICAgICAgICAgIHZhciByZXN1bHRMaXN0ID0gW107XHJcbiAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaChsaXN0LCBmdW5jdGlvbiAoaXRlbSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIG9iaiA9IHtcclxuICAgICAgICAgICAgICAgICAgICBcImluZ3JlZGllbnRfaWRcIjogaXRlbS5pbmdyZWRpZW50SWQsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJpbmdyZWRpZW50X25hbWVcIjogaXRlbS5pbmdyZWRpZW50TmFtZSxcclxuICAgICAgICAgICAgICAgICAgICBcImNhc19udW1iZXJcIjogaXRlbS5jYXMsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJpbmdyZWRfc3RhbmRhcmRcIjogaXRlbS5pbmdyZWRpZW50U3RhbmRhcmQsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJpbl9maW5hbF9jb250YWluZXJcIjogaXRlbS5pbkZpbmFsQ29udGFpbmVyXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0TGlzdC5wdXNoKG9iaik7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0TGlzdDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIGNvbnZlcnRzIHJvdXRlIG9mIGFkbWluIHRvIG91dHB1dCBqc29uIGZvcm1hdFxyXG4gICAgICAgICAqIEBwYXJhbSBsaXN0XHJcbiAgICAgICAgICogQHJldHVybnMge0FycmF5fVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGZ1bmN0aW9uIHJvdXRlQWRtaW5Ub091dHB1dChsaXN0KSB7XHJcbiAgICAgICAgICAgIHZhciByZXN1bHRMaXN0ID0gW107XHJcbiAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaChsaXN0LCBmdW5jdGlvbiAoaXRlbSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHNwbGl0QXJyYXkgPSAoaXRlbS5yb2EuaWQpLnNwbGl0KERvc3NpZXJMaXN0cy5nZXRSb2FQcmVmaXgoKSk7IC8vbmVlZGVkIHRvIHJlbW92ZSB0aGUgaW50ZXJuYWwgdW5pcXVlbmVzc1xyXG4gICAgICAgICAgICAgICAgdmFyIG5ld1JvYSA9IHNwbGl0QXJyYXlbc3BsaXRBcnJheS5sZW5ndGggLSAxXTtcclxuICAgICAgICAgICAgICAgIC8vcm9hIGlzIGEgZmllbGQgd2l0aCAyIGF0dHJpYnV0ZXNcclxuICAgICAgICAgICAgICAgIHZhciBvYmogPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJyb2FcIjoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfbGFiZWxfZW46IGl0ZW0ucm9hLmVuLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfbGFiZWxfZnI6IGl0ZW0ucm9hLmZyLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfX3RleHQ6IG5ld1JvYVxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgXCJyb2Ffb3RoZXJcIjogaXRlbS5vdGhlclJvYURldGFpbHNcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICByZXN1bHRMaXN0LnB1c2gob2JqKTtcclxuXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0TGlzdFxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQ291bnRyeSBvZiBvcmlnaW4gbGlzdCB0byBvdXRwdXRcclxuICAgICAgICAgKiBAcGFyYW0gbGlzdFxyXG4gICAgICAgICAqIEByZXR1cm5zIHtBcnJheX1cclxuICAgICAgICAgKi9cclxuICAgICAgICBmdW5jdGlvbiBmb3JtdWxhdGlvbkNvdW50cnlMaXN0VG9PdXRwdXQobGlzdCkge1xyXG5cclxuICAgICAgICAgICAgdmFyIHJlc3VsdExpc3QgPSBbXTtcclxuICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKGxpc3QsIGZ1bmN0aW9uIChpdGVtKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgY291bnRyeT0ge1xyXG4gICAgICAgICAgICAgICAgICAgIF9sYWJlbF9lbjogaXRlbS5jb3VudHJ5LmVuLFxyXG4gICAgICAgICAgICAgICAgICAgIF9sYWJlbF9mcjogaXRlbS5jb3VudHJ5LmZyLFxyXG4gICAgICAgICAgICAgICAgICAgIF9fdGV4dDogaXRlbS5jb3VudHJ5LmlkXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0TGlzdC5wdXNoKGNvdW50cnkpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdExpc3Q7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiByZXBDb250YWN0VG9PdXRwdXQoY29udGFjdExpc3QpIHtcclxuICAgICAgICAgICAgdmFyIHJlc3VsdExpc3QgPSBbXTtcclxuICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKGNvbnRhY3RMaXN0LCBmdW5jdGlvbiAoaXRlbSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIG9iaiA9IHt9O1xyXG4gICAgICAgICAgICAgICAgb2JqLmFtZW5kX3JlY29yZCA9IGl0ZW0uYW1lbmQgPyAnWScgOiAnTic7XHJcbiAgICAgICAgICAgICAgICBvYmoucmVwX2NvbnRhY3Rfcm9sZSA9IGl0ZW0ucmVwUm9sZTsgLy9UT0RPIFhNTCBuZWVkcyB0byBiZSB1cGRhdGVkIVxyXG4gICAgICAgICAgICAgICAgb2JqLnJlcF9jb250YWN0X2RldGFpbHMgPSB7fTtcclxuICAgICAgICAgICAgICAgIG9iai5yZXBfY29udGFjdF9kZXRhaWxzLnNhbHV0YXRpb24gPSBpdGVtLnNhbHV0YXRpb247XHJcbiAgICAgICAgICAgICAgICBvYmoucmVwX2NvbnRhY3RfZGV0YWlscy5naXZlbl9uYW1lID0gaXRlbS5naXZlbk5hbWU7XHJcbiAgICAgICAgICAgICAgICBvYmoucmVwX2NvbnRhY3RfZGV0YWlscy5pbml0aWFscyA9IGl0ZW0uaW5pdGlhbHM7XHJcbiAgICAgICAgICAgICAgICBvYmoucmVwX2NvbnRhY3RfZGV0YWlscy5zdXJuYW1lID0gaXRlbS5zdXJuYW1lO1xyXG4gICAgICAgICAgICAgICAgb2JqLnJlcF9jb250YWN0X2RldGFpbHMuam9iX3RpdGxlID0gaXRlbS50aXRsZTtcclxuICAgICAgICAgICAgICAgIG9iai5yZXBfY29udGFjdF9kZXRhaWxzLmxhbmd1YWdlX2NvcnJlc3BvbmRhbmNlID0gaXRlbS5sYW5ndWFnZTtcclxuICAgICAgICAgICAgICAgIG9iai5yZXBfY29udGFjdF9kZXRhaWxzLnBob25lX251bSA9IGl0ZW0ucGhvbmU7XHJcbiAgICAgICAgICAgICAgICBvYmoucmVwX2NvbnRhY3RfZGV0YWlscy5waG9uZV9leHQgPSBpdGVtLnBob25lRXh0O1xyXG4gICAgICAgICAgICAgICAgb2JqLnJlcF9jb250YWN0X2RldGFpbHMuZmF4X251bSA9IGl0ZW0uZmF4O1xyXG4gICAgICAgICAgICAgICAgb2JqLnJlcF9jb250YWN0X2RldGFpbHMuZW1haWwgPSBpdGVtLmVtYWlsO1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0TGlzdC5wdXNoKG9iaik7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0TGlzdDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKipcclxuICAgICAgICAgKiBDb252ZXJ0cyB0aGUgdGhlcmFwZXV0aWMgY2xhc3NpZmljYXRpb24gdG8gb3V0cHV0IGZvcm1hdFxyXG4gICAgICAgICAqIEBwYXJhbSBqc29uT2JqXHJcbiAgICAgICAgICogQHJldHVybnMge0FycmF5fVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGZ1bmN0aW9uIHRoZXJhcGV1dGljQ2xhc3NUb091dHB1dChqc29uT2JqKSB7XHJcblxyXG4gICAgICAgICAgICB2YXIgcmVzdWx0TGlzdCA9IFtdO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGpzb25PYmoubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIC8vVE9ETyBzYXZlIHRoZSBpZHM/P1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0TGlzdC5wdXNoKGpzb25PYmpbaV0ubmFtZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIChyZXN1bHRMaXN0KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHNjaGVkdWxlQVRvT3V0cHV0KGpzb25PYmopIHtcclxuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IGNyZWF0ZUVtcHR5U2NoZWR1bGVBRm9yT3V0cHV0KCk7XHJcbiAgICAgICAgICAgIHJlc3VsdC5kaW5fbnVtYmVyID0ganNvbk9iai5kcnVnSWROdW1iZXI7XHJcbiAgICAgICAgICAgIHZhciBkaXNvcmRlckxpc3QgPSBqc29uT2JqLmRpc2Vhc2VEaXNvcmRlckxpc3Q7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGlzb3JkZXJMaXN0Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKGRpc29yZGVyTGlzdFtpXS5uYW1lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcImFjdXRlLWFsY29ob2xcIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LmFjdXRlX2FsY29ob2wgPSBkaXNvcmRlckxpc3RbaV0udmFsdWUgPT09IHRydWUgPyAnWScgOiAnTic7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJhY3V0ZS1hbnhpZXR5XCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5hY3V0ZV9hbnhpZXR5ID0gZGlzb3JkZXJMaXN0W2ldLnZhbHVlID09PSB0cnVlID8gJ1knIDogJ04nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiYWN1dGUtaW5mZWN0aW91c1wiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQuYWN1dGVfaW5mZWN0aW91cyA9IGRpc29yZGVyTGlzdFtpXS52YWx1ZSA9PT0gdHJ1ZSA/ICdZJyA6ICdOJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcImFjdXRlLWluZmxhbW1hdG9yeVwiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQuYWN1dGVfaW5mbGFtbWF0b3J5ID0gZGlzb3JkZXJMaXN0W2ldLnZhbHVlID09PSB0cnVlID8gJ1knIDogJ04nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiYWN1dGUtcHN5Y2hvdGljXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5hY3V0ZV9wc3ljaG90aWMgPSBkaXNvcmRlckxpc3RbaV0udmFsdWUgPT09IHRydWUgPyAnWScgOiAnTic7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJhZGRpY3Rpb25cIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LmFkZGljdGlvbiA9IGRpc29yZGVyTGlzdFtpXS52YWx1ZSA9PT0gdHJ1ZSA/ICdZJyA6ICdOJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcImF0ZXJpb3NjbGVyb3Npc1wiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQuYXRlcmlvc2NsZXJvc2lzID0gZGlzb3JkZXJMaXN0W2ldLnZhbHVlID09PSB0cnVlID8gJ1knIDogJ04nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiYXBwZW5kaWNpdGlzXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5hcHBlbmRpY2l0aXMgPSBkaXNvcmRlckxpc3RbaV0udmFsdWUgPT09IHRydWUgPyAnWScgOiAnTic7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJhc3RobWFcIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LmFzdGhtYSA9IGRpc29yZGVyTGlzdFtpXS52YWx1ZSA9PT0gdHJ1ZSA/ICdZJyA6ICdOJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcImNhbmNlclwiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQuY2FuY2VyID0gZGlzb3JkZXJMaXN0W2ldLnZhbHVlID09PSB0cnVlID8gJ1knIDogJ04nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiY29uZ2VzdC1oZWFydC1mYWlsXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5jb25nZXN0X2hlYXJ0X2ZhaWwgPSBkaXNvcmRlckxpc3RbaV0udmFsdWUgPT09IHRydWUgPyAnWScgOiAnTic7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJjb252dWxzaW9uc1wiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQuY29udnVsc2lvbnMgPSBkaXNvcmRlckxpc3RbaV0udmFsdWUgPT09IHRydWUgPyAnWScgOiAnTic7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJkZW1lbnRpYVwiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQuZGVtZW50aWEgPSBkaXNvcmRlckxpc3RbaV0udmFsdWUgPT09IHRydWUgPyAnWScgOiAnTic7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJkZXByZXNzaW9uXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5kZXByZXNzaW9uID0gZGlzb3JkZXJMaXN0W2ldLnZhbHVlID09PSB0cnVlID8gJ1knIDogJ04nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiZGlhYmV0ZXNcIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LmRpYWJldGVzID0gZGlzb3JkZXJMaXN0W2ldLnZhbHVlID09PSB0cnVlID8gJ1knIDogJ04nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcImdhbmdyZW5lXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5nYW5ncmVuZSA9IGRpc29yZGVyTGlzdFtpXS52YWx1ZSA9PT0gdHJ1ZSA/ICdZJyA6ICdOJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcImdsYXVjb21hXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5nbGF1Y29tYSA9IGRpc29yZGVyTGlzdFtpXS52YWx1ZSA9PT0gdHJ1ZSA/ICdZJyA6ICdOJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJoYWVtYXRvbG9naWMtYmxlZWRpbmdcIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LmhhZW1hdG9sb2dpY19ibGVlZGluZyA9IGRpc29yZGVyTGlzdFtpXS52YWx1ZSA9PT0gdHJ1ZSA/ICdZJyA6ICdOJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJoZXBhdGl0aXNcIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LmhlcGF0aXRpcyA9IGRpc29yZGVyTGlzdFtpXS52YWx1ZSA9PT0gdHJ1ZSA/ICdZJyA6ICdOJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJoeXBlcnRlbnNpb25cIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0Lmh5cGVydGVuc2lvbiA9IGRpc29yZGVyTGlzdFtpXS52YWx1ZSA9PT0gdHJ1ZSA/ICdZJyA6ICdOJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJuYXVzZWEtcHJlZ25hbmN5XCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5uYXVzZWFfcHJlZ25hbmN5ID0gZGlzb3JkZXJMaXN0W2ldLnZhbHVlID09PSB0cnVlID8gJ1knIDogJ04nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcIm9iZXNpdHlcIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0Lm9iZXNpdHkgPSBkaXNvcmRlckxpc3RbaV0udmFsdWUgPT09IHRydWUgPyAnWScgOiAnTic7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwicmhldW1hdGljLWZldmVyXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5yaGV1bWF0aWNfZmV2ZXIgPSBkaXNvcmRlckxpc3RbaV0udmFsdWUgPT09IHRydWUgPyAnWScgOiAnTic7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwic2VwdGljZW1pYVwiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQuc2VwdGljZW1pYSA9IGRpc29yZGVyTGlzdFtpXS52YWx1ZSA9PT0gdHJ1ZSA/ICdZJyA6ICdOJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJzZXgtdHJhbnNtaXQtZGlzZWFzZVwiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQuc2V4X3RyYW5zbWl0X2Rpc2Vhc2UgPSBkaXNvcmRlckxpc3RbaV0udmFsdWUgPT09IHRydWUgPyAnWScgOiAnTic7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwic3RyYW5ndWxhdGVkLWhlcm5pYVwiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQuc3RyYW5ndWxhdGVkX2hlcm5pYSA9IGRpc29yZGVyTGlzdFtpXS52YWx1ZSA9PT0gdHJ1ZSA/ICdZJyA6ICdOJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJ0aHJvbWJvdGljLWVtYm9saWMtZGlzb3JkZXJcIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnRocm9tYm90aWNfZW1ib2xpY19kaXNvcmRlciA9IGRpc29yZGVyTGlzdFtpXS52YWx1ZSA9PT0gdHJ1ZSA/ICdZJyA6ICdOJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcInRoeXJvaWQtZGlzZWFzZVwiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQudGh5cm9pZF9kaXNlYXNlID0gZGlzb3JkZXJMaXN0W2ldLnZhbHVlID09PSB0cnVlID8gJ1knIDogJ04nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcInVsY2VyLWdhc3Ryb1wiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQudWxjZXJfZ2FzdHJvID0gZGlzb3JkZXJMaXN0W2ldLnZhbHVlID09PSB0cnVlID8gJ1knIDogJ04nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmVzdWx0LnNjaGVkX2FfY2xhaW1zX2luZF9kZXRhaWxzID0ganNvbk9iai5zY2hlZHVsZUFDbGFpbXNJbmREZXRhaWxzO1xyXG4gICAgICAgICAgICByZXR1cm4gKHJlc3VsdCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBDcmVhdGVzIHRoZSBlbXB0eSBvdXRwdXQgZGF0YSBzdHJ1Y3R1cmUgZm9yIHNjaGVkdWxlIEFcclxuICAgICAgICAgKiBAcmV0dXJucyBqc29uIE9iamVjdFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGZ1bmN0aW9uIGNyZWF0ZUVtcHR5U2NoZWR1bGVBRm9yT3V0cHV0KCkge1xyXG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0ge307XHJcbiAgICAgICAgICAgIC8vZW5mb3JjaW5nIG9yZGVyIGZvciBvdXRwdXRcclxuICAgICAgICAgICAgcmVzdWx0LmRpbl9udW1iZXIgPSBcIlwiO1xyXG4gICAgICAgICAgICByZXN1bHQuYWN1dGVfYWxjb2hvbCA9IG5vVmFsdWU7XHJcbiAgICAgICAgICAgIHJlc3VsdC5hY3V0ZV9hbnhpZXR5ID0gbm9WYWx1ZTtcclxuICAgICAgICAgICAgcmVzdWx0LmFjdXRlX2luZmVjdGlvdXMgPSBub1ZhbHVlO1xyXG4gICAgICAgICAgICByZXN1bHQuYWN1dGVfaW5mbGFtbWF0b3J5ID0gbm9WYWx1ZTtcclxuICAgICAgICAgICAgcmVzdWx0LmFjdXRlX3BzeWNob3RpYyA9IG5vVmFsdWU7XHJcbiAgICAgICAgICAgIHJlc3VsdC5hZGRpY3Rpb24gPSBub1ZhbHVlO1xyXG4gICAgICAgICAgICByZXN1bHQuYXRlcmlvc2NsZXJvc2lzID0gbm9WYWx1ZTtcclxuICAgICAgICAgICAgcmVzdWx0LmFwcGVuZGljaXRpcyA9IG5vVmFsdWU7XHJcbiAgICAgICAgICAgIHJlc3VsdC5hc3RobWEgPSBub1ZhbHVlO1xyXG4gICAgICAgICAgICByZXN1bHQuY2FuY2VyID0gbm9WYWx1ZTtcclxuICAgICAgICAgICAgcmVzdWx0LmNvbmdlc3RfaGVhcnRfZmFpbCA9IG5vVmFsdWU7XHJcbiAgICAgICAgICAgIHJlc3VsdC5jb252dWxzaW9ucyA9IG5vVmFsdWU7XHJcbiAgICAgICAgICAgIHJlc3VsdC5kZW1lbnRpYSA9IG5vVmFsdWU7XHJcbiAgICAgICAgICAgIHJlc3VsdC5kZXByZXNzaW9uID0gbm9WYWx1ZTtcclxuICAgICAgICAgICAgcmVzdWx0LmRpYWJldGVzID0gbm9WYWx1ZTtcclxuICAgICAgICAgICAgcmVzdWx0LmdhbmdyZW5lID0gbm9WYWx1ZTtcclxuICAgICAgICAgICAgcmVzdWx0LmdsYXVjb21hID0gbm9WYWx1ZTtcclxuICAgICAgICAgICAgcmVzdWx0LmhhZW1hdG9sb2dpY19ibGVlZGluZyA9IG5vVmFsdWU7XHJcbiAgICAgICAgICAgIHJlc3VsdC5oZXBhdGl0aXMgPSBub1ZhbHVlO1xyXG4gICAgICAgICAgICByZXN1bHQuaHlwZXJ0ZW5zaW9uID0gbm9WYWx1ZTtcclxuICAgICAgICAgICAgcmVzdWx0Lm5hdXNlYV9wcmVnbmFuY3kgPSBub1ZhbHVlO1xyXG4gICAgICAgICAgICByZXN1bHQub2Jlc2l0eSA9IG5vVmFsdWU7XHJcbiAgICAgICAgICAgIHJlc3VsdC5yaGV1bWF0aWNfZmV2ZXIgPSBub1ZhbHVlO1xyXG4gICAgICAgICAgICByZXN1bHQuc2VwdGljZW1pYSA9IG5vVmFsdWU7XHJcbiAgICAgICAgICAgIHJlc3VsdC5zZXhfdHJhbnNtaXRfZGlzZWFzZSA9IG5vVmFsdWU7XHJcbiAgICAgICAgICAgIHJlc3VsdC5zdHJhbmd1bGF0ZWRfaGVybmlhID0gbm9WYWx1ZTtcclxuICAgICAgICAgICAgcmVzdWx0LnRocm9tYm90aWNfZW1ib2xpY19kaXNvcmRlciA9IG5vVmFsdWU7XHJcbiAgICAgICAgICAgIHJlc3VsdC50aHlyb2lkX2Rpc2Vhc2UgPSBub1ZhbHVlO1xyXG4gICAgICAgICAgICByZXN1bHQudWxjZXJfZ2FzdHJvID0gbm9WYWx1ZTtcclxuICAgICAgICAgICAgcmVzdWx0LnNjaGVkX2FfY2xhaW1zX2luZF9kZXRhaWxzID0gXCJcIjtcclxuICAgICAgICAgICAgcmV0dXJuIChyZXN1bHQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogTWFrZSBsaXN0IG9mIGpzb24gb2JqZWN0cyBmb3IgYXBwZW5kaXggZGF0YVxyXG4gICAgICAgICAqIEBwYXJhbSBhcHBlbmRpY2VzXHJcbiAgICAgICAgICogQHJldHVybnMge3t9fVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGZ1bmN0aW9uIGdldEFwcGVuZGljZURhdGEoYXBwZW5kaWNlcykge1xyXG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0ge307XHJcbiAgICAgICAgICAgIGlmICghYXBwZW5kaWNlcykgcmV0dXJuIHJlc3VsdDtcclxuXHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXBwZW5kaWNlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgdmFyIGFwcGVuZGl4ID0gYXBwZW5kaWNlc1tpXTtcclxuICAgICAgICAgICAgICAgIC8vIHZhciByZWMgPSB7fTtcclxuICAgICAgICAgICAgICAgIHJlc3VsdFthcHBlbmRpeC5pbmdyZWRpZW50TmFtZV0gPSAoaSArIDEpO1xyXG4gICAgICAgICAgICAgICAgLy9yZXN1bHQucHVzaChyZWMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBnZXRBbmltYWxJbmdyZWRpZW50cyhmb3JtdWxhdGlvbnMpIHtcclxuICAgICAgICAgICAgdmFyIHllc1ZhbHVlID0gJ1knO1xyXG4gICAgICAgICAgICB2YXIgYWxsQW5pbWFsU291cmNlZE5hbWVzID0gW107XHJcbiAgICAgICAgICAgIHZhciB1bmlxdWVMaXN0ID0ge307XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZm9ybXVsYXRpb25zLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAvL1N0ZXAgMSBnZXQgYWN0aXZlIGluZ3JlZGllbnRzXHJcbiAgICAgICAgICAgICAgICB2YXIgb25lRm9ybXVsYXRpb24gPSBmb3JtdWxhdGlvbnNbaV07XHJcbiAgICAgICAgICAgICAgICBpZiAob25lRm9ybXVsYXRpb24uYWN0aXZlSW5nTGlzdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgKG9uZUZvcm11bGF0aW9uLmFjdGl2ZUluZ0xpc3QubGVuZ3RoKTsgaisrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvbmVBY3RpdmUgPSBvbmVGb3JtdWxhdGlvbi5hY3RpdmVJbmdMaXN0W2pdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob25lQWN0aXZlLmh1bWFuQW5pbWFsU291cmNlZCA9PT0geWVzVmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsbEFuaW1hbFNvdXJjZWROYW1lcy5wdXNoKG9uZUFjdGl2ZS5pbmdMYWJlbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvL3N0ZXAgMiBnZXQgbm1pIGZsYWdnZWRcclxuICAgICAgICAgICAgICAgIGlmIChvbmVGb3JtdWxhdGlvbi5uTWVkSW5nTGlzdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgKG9uZUZvcm11bGF0aW9uLm5NZWRJbmdMaXN0Lmxlbmd0aCk7IGorKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgb25lQWN0aXZlID0gb25lRm9ybXVsYXRpb24ubk1lZEluZ0xpc3Rbal07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvbmVBY3RpdmUuaHVtYW5BbmltYWxTb3VyY2VkID09PSB5ZXNWYWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxsQW5pbWFsU291cmNlZE5hbWVzLnB1c2gob25lQWN0aXZlLmluZ05hbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy9zdGVwIDMgIGFsbCBtYXRlcmlhbHNcclxuICAgICAgICAgICAgICAgIGlmIChvbmVGb3JtdWxhdGlvbi5hbmltYWxIdW1hbk1hdGVyaWFscykge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgKG9uZUZvcm11bGF0aW9uLmFuaW1hbEh1bWFuTWF0ZXJpYWxzLmxlbmd0aCk7IGorKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgb25lQWN0aXZlID0gb25lRm9ybXVsYXRpb24uYW5pbWFsSHVtYW5NYXRlcmlhbHNbal07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsbEFuaW1hbFNvdXJjZWROYW1lcy5wdXNoKG9uZUFjdGl2ZS5pbmdyZWRpZW50TmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHVuaXF1ZUxpc3QgPSBnZXRVbmlxdWVMaXN0KGFsbEFuaW1hbFNvdXJjZWROYW1lcyk7XHJcbiAgICAgICAgICAgIHJldHVybiAodW5pcXVlTGlzdCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBDcmVhdGUgYSBsaXN0IG9mIG1pc3NpbmcgYXBwZW5kaWNlc1xyXG4gICAgICAgICAqIEBwYXJhbSBhcHBlbmRpY2VMaXN0XHJcbiAgICAgICAgICogQHBhcmFtIGluZ3JlZGllbnRKc29uTGlzdFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGZ1bmN0aW9uIGdldE1pc3NpbmdBcHBlbmRpY2VzKGFwcGVuZGljZUxpc3QsIGluZ3JlZGllbnRKc29uTGlzdCkge1xyXG4gICAgICAgICAgICB2YXIgbWlzc2luZ0xpc3QgPSBbXTtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBpbmdyZWRpZW50SnNvbkxpc3QubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGlmICghYXBwZW5kaWNlTGlzdC5oYXNPd25Qcm9wZXJ0eShpbmdyZWRpZW50SnNvbkxpc3RbaV0pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbWlzc2luZ0xpc3QucHVzaChpbmdyZWRpZW50SnNvbkxpc3RbaV0pO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAvL21ha2UgemVybyBpZiBmb3VuZC4gYW55IHRoYXQgYXJlIG5vdCB6ZXJvIGFyZSBhcHBlbmRpY2VzIHdpdGhvdXQgaW5ncmVkaWVudHNcclxuICAgICAgICAgICAgICAgICAgICBhcHBlbmRpY2VMaXN0W2luZ3JlZGllbnRKc29uTGlzdFtpXV0gPSAwO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBtaXNzaW5nTGlzdDtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICBmdW5jdGlvbiBmaW5kRXh0cmFBcHBwZW5kaWNlcyhhcHBlbmRpeEpzb24pIHtcclxuICAgICAgICAgICAgdmFyIGV4dHJhTGlzdCA9IFtdO1xyXG4gICAgICAgICAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGFwcGVuZGl4SnNvbik7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgdmFyIHZhbCA9IGFwcGVuZGl4SnNvbltrZXlzW2ldXTtcclxuICAgICAgICAgICAgICAgIGlmICh2YWwgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZXh0cmFMaXN0LnB1c2goa2V5c1tpXSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiBleHRyYUxpc3Q7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBnZXRVbmlxdWVMaXN0KGFycikge1xyXG4gICAgICAgICAgICB2YXIgdSA9IHt9LCBhID0gW107XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gYXJyLmxlbmd0aDsgaSA8IGw7ICsraSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCF1Lmhhc093blByb3BlcnR5KGFycltpXSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBhLnB1c2goYXJyW2ldKTtcclxuICAgICAgICAgICAgICAgICAgICB1W2FycltpXV0gPSAxO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBhO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZ2V0RGVmYXVsdFNjaGVkQSgpIHtcclxuXHJcbiAgICAgICAgICAgIHZhciBzY2hlZEEgPSB7fTtcclxuICAgICAgICAgICAgc2NoZWRBLmRydWdJZE51bWJlciA9IFwiXCI7XHJcbiAgICAgICAgICAgIHNjaGVkQS5zY2hlZHVsZUFDbGFpbXNJbmREZXRhaWxzID0gXCJcIjtcclxuICAgICAgICAgICAgc2NoZWRBLmRpc2Vhc2VEaXNvcmRlckxpc3QgPSBnZXREZWZhdWx0RGlzZWFzZURpc29yZGVyTGlzdCgpO1xyXG4gICAgICAgICAgICByZXR1cm4gc2NoZWRBO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogR2V0cyBhbiBlbXB0eSBkaXNlYXNlIGRpc29yZGVyIGxpc3Qgd2l0aCB2YWx1ZXMgc2V0IHRvIE5vXHJcbiAgICAgICAgICogQHJldHVybnMgeypbXX1cclxuICAgICAgICAgKi9cclxuICAgICAgICBmdW5jdGlvbiBnZXREZWZhdWx0RGlzZWFzZURpc29yZGVyTGlzdCgpIHtcclxuICAgICAgICAgICAgdmFyIG5vTW9kZWxWYWx1ZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICAgICAge25hbWU6IFwiYWN1dGUtYWxjb2hvbFwiLCBsYWJlbDogXCJBQ1VURUFMQ09IT0xcIiwgdmFsdWU6IG5vTW9kZWxWYWx1ZX0sXHJcbiAgICAgICAgICAgICAgICB7bmFtZTogXCJhY3V0ZS1hbnhpZXR5XCIsIGxhYmVsOiBcIkFDVVRFQU5YSUVUWVwiLCB2YWx1ZTogbm9Nb2RlbFZhbHVlfSxcclxuICAgICAgICAgICAgICAgIHtuYW1lOiBcImFjdXRlLWluZmVjdGlvdXNcIiwgbGFiZWw6IFwiQUNVVEVSRVNQXCIsIHZhbHVlOiBub01vZGVsVmFsdWV9LFxyXG4gICAgICAgICAgICAgICAge25hbWU6IFwiYWN1dGUtaW5mbGFtbWF0b3J5XCIsIGxhYmVsOiBcIkFDVVRFSU5GTEFNXCIsIHZhbHVlOiBub01vZGVsVmFsdWV9LFxyXG4gICAgICAgICAgICAgICAge25hbWU6IFwiYWN1dGUtcHN5Y2hvdGljXCIsIGxhYmVsOiBcIkFDVVRFUFNZQ0hPVElDXCIsIHZhbHVlOiBub01vZGVsVmFsdWV9LFxyXG4gICAgICAgICAgICAgICAge25hbWU6IFwiYWRkaWN0aW9uXCIsIGxhYmVsOiBcIkFERElDVElPTlwiLCB2YWx1ZTogbm9Nb2RlbFZhbHVlfSxcclxuICAgICAgICAgICAgICAgIHtuYW1lOiBcImF0ZXJpb3NjbGVyb3Npc1wiLCBsYWJlbDogXCJBVEVSSU9TQ0xFUk9TSVNcIiwgdmFsdWU6IG5vTW9kZWxWYWx1ZX0sXHJcbiAgICAgICAgICAgICAgICB7bmFtZTogXCJhcHBlbmRpY2l0aXNcIiwgbGFiZWw6IFwiQVBQRU5ESUNJVElTXCIsIHZhbHVlOiBub01vZGVsVmFsdWV9LFxyXG4gICAgICAgICAgICAgICAge25hbWU6IFwiYXN0aG1hXCIsIGxhYmVsOiBcIkFTVEhNQVwiLCB2YWx1ZTogbm9Nb2RlbFZhbHVlfSxcclxuICAgICAgICAgICAgICAgIHtuYW1lOiBcImNhbmNlclwiLCBsYWJlbDogXCJDQU5DRVJcIiwgdmFsdWU6IG5vTW9kZWxWYWx1ZX0sXHJcbiAgICAgICAgICAgICAgICB7bmFtZTogXCJjb25nZXN0LWhlYXJ0LWZhaWxcIiwgbGFiZWw6IFwiSEVBUlRDT05HRVNUXCIsIHZhbHVlOiBub01vZGVsVmFsdWV9LFxyXG4gICAgICAgICAgICAgICAge25hbWU6IFwiY29udnVsc2lvbnNcIiwgbGFiZWw6IFwiQ09OVlVMU0lPTlNcIiwgdmFsdWU6IG5vTW9kZWxWYWx1ZX0sXHJcbiAgICAgICAgICAgICAgICB7bmFtZTogXCJkZW1lbnRpYVwiLCBsYWJlbDogXCJERU1FTlRJQVwiLCB2YWx1ZTogbm9Nb2RlbFZhbHVlfSxcclxuICAgICAgICAgICAgICAgIHtuYW1lOiBcImRlcHJlc3Npb25cIiwgbGFiZWw6IFwiREVQUkVTU0lPTlwiLCB2YWx1ZTogbm9Nb2RlbFZhbHVlfSxcclxuICAgICAgICAgICAgICAgIHtuYW1lOiBcImRpYWJldGVzXCIsIGxhYmVsOiBcIkRJQUJFVEVTXCIsIHZhbHVlOiBub01vZGVsVmFsdWV9LFxyXG4gICAgICAgICAgICAgICAge25hbWU6IFwiZ2FuZ3JlbmVcIiwgbGFiZWw6IFwiR0FOR1JFTkVcIiwgdmFsdWU6IG5vTW9kZWxWYWx1ZX0sXHJcbiAgICAgICAgICAgICAgICB7bmFtZTogXCJnbGF1Y29tYVwiLCBsYWJlbDogXCJHTEFVQ09NQVwiLCB2YWx1ZTogbm9Nb2RlbFZhbHVlfSxcclxuICAgICAgICAgICAgICAgIHtuYW1lOiBcImhhZW1hdG9sb2dpYy1ibGVlZGluZ1wiLCBsYWJlbDogXCJCTEVFRElOR0RJU09SREVSU1wiLCB2YWx1ZTogbm9Nb2RlbFZhbHVlfSxcclxuICAgICAgICAgICAgICAgIHtuYW1lOiBcImhlcGF0aXRpc1wiLCBsYWJlbDogXCJIRVBBVElUSVNcIiwgdmFsdWU6IG5vTW9kZWxWYWx1ZX0sXHJcbiAgICAgICAgICAgICAgICB7bmFtZTogXCJoeXBlcnRlbnNpb25cIiwgbGFiZWw6IFwiSFlQRVJURU5TSU9OXCIsIHZhbHVlOiBub01vZGVsVmFsdWV9LFxyXG4gICAgICAgICAgICAgICAge25hbWU6IFwibmF1c2VhLXByZWduYW5jeVwiLCBsYWJlbDogXCJOQVVTRUFQUkVHXCIsIHZhbHVlOiBub01vZGVsVmFsdWV9LFxyXG4gICAgICAgICAgICAgICAge25hbWU6IFwib2Jlc2l0eVwiLCBsYWJlbDogXCJPQkVTSVRZXCIsIHZhbHVlOiBub01vZGVsVmFsdWV9LFxyXG4gICAgICAgICAgICAgICAge25hbWU6IFwicmhldW1hdGljLWZldmVyXCIsIGxhYmVsOiBcIlJIRVVNQVRJQ0ZFVkVSXCIsIHZhbHVlOiBub01vZGVsVmFsdWV9LFxyXG4gICAgICAgICAgICAgICAge25hbWU6IFwic2VwdGljZW1pYVwiLCBsYWJlbDogXCJTRVBUSUNFTUlBXCIsIHZhbHVlOiBub01vZGVsVmFsdWV9LFxyXG4gICAgICAgICAgICAgICAge25hbWU6IFwic2V4LXRyYW5zbWl0LWRpc2Vhc2VcIiwgbGFiZWw6IFwiU0VYRElTRUFTRVwiLCB2YWx1ZTogbm9Nb2RlbFZhbHVlfSxcclxuICAgICAgICAgICAgICAgIHtuYW1lOiBcInN0cmFuZ3VsYXRlZC1oZXJuaWFcIiwgbGFiZWw6IFwiU1RSQU5HSEVSTklBXCIsIHZhbHVlOiBub01vZGVsVmFsdWV9LFxyXG4gICAgICAgICAgICAgICAge25hbWU6IFwidGhyb21ib3RpYy1lbWJvbGljLWRpc29yZGVyXCIsIGxhYmVsOiBcIlRIUk9NQk9USUNESVNPUkRFUlwiLCB2YWx1ZTogbm9Nb2RlbFZhbHVlfSxcclxuICAgICAgICAgICAgICAgIHtuYW1lOiBcInRoeXJvaWQtZGlzZWFzZVwiLCBsYWJlbDogXCJUSFlST0lERElTRUFTRVwiLCB2YWx1ZTogbm9Nb2RlbFZhbHVlfSxcclxuICAgICAgICAgICAgICAgIHtuYW1lOiBcInVsY2VyLWdhc3Ryb1wiLCBsYWJlbDogXCJVQ0xFUkdBU1RST1wiLCB2YWx1ZTogbm9Nb2RlbFZhbHVlfVxyXG4gICAgICAgICAgICBdO1xyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qXHJcbiAgICAgICAgICogUmV0dXJucyBhbiBlbXB0eSBsaXN0IG9mIGRydWcgdXNlc1xyXG4gICAgICAgICAqXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZnVuY3Rpb24gZ2V0RGVmYXVsdERydWdVc2VMaXN0KCkge1xyXG4gICAgICAgICAgICB2YXIgbm9Nb2RlbFZhbHVlID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHZhciBkcnVnVXNlTGlzdCA9IFtcclxuICAgICAgICAgICAgICAgIHtcIm5hbWVcIjogXCJodW1hblwiLCBcImxhYmVsXCI6IFwiSFVNQU5cIiwgXCJ2YWx1ZVwiOiBub01vZGVsVmFsdWV9LFxyXG4gICAgICAgICAgICAgICAge1wibmFtZVwiOiBcInJhZGlvLXBoYXJtYWNldXRpY2FsXCIsIFwibGFiZWxcIjogXCJSQURJT1BIQVJNXCIsIFwidmFsdWVcIjogbm9Nb2RlbFZhbHVlfSxcclxuICAgICAgICAgICAgICAgIHtcIm5hbWVcIjogXCJ2ZXRlcmluYXJ5XCIsIFwibGFiZWxcIjogXCJWRVRFUklOQVJZXCIsIFwidmFsdWVcIjogbm9Nb2RlbFZhbHVlfSxcclxuICAgICAgICAgICAgICAgIHtcIm5hbWVcIjogXCJkaXNpbmZlY3RhbnRcIiwgXCJsYWJlbFwiOiBcIkRJU0lORkVDVEFOVFwiLCBcInZhbHVlXCI6IG5vTW9kZWxWYWx1ZX1cclxuICAgICAgICAgICAgXTtcclxuICAgICAgICAgICAgcmV0dXJuIGRydWdVc2VMaXN0O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqKlxyXG4gICAgICAgICAqIExvYWRzIHRoZSBkcnVnIHVzZSBkYXRhIGludG8gYSBjaGVja2JveCBsaXN0IGZvcm1hdDtcclxuICAgICAgICAgKiBAcGFyYW0gaW5mb1xyXG4gICAgICAgICAqIEByZXR1cm5zIHsqfVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGZ1bmN0aW9uIGxvYWREcnVnVXNlVmFsdWVzKGluZm8pIHtcclxuICAgICAgICAgICAgdmFyIGRydWdMaXN0ID0gZ2V0RGVmYXVsdERydWdVc2VMaXN0KCk7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZHJ1Z0xpc3QubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHZhciByZWMgPSBkcnVnTGlzdFtpXTtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAocmVjLm5hbWUpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiaHVtYW5cIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVjLnZhbHVlID0gaW5mby5odW1hbl9kcnVnX3VzZSA9PT0gJ1knO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwicmFkaW8tcGhhcm1hY2V1dGljYWxcIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVjLnZhbHVlID0gaW5mby5yYWRpb3BoYXJtX2RydWdfdXNlID09PSAnWSc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJkaXNpbmZlY3RhbnRcIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVjLnZhbHVlID0gaW5mby5kaXNpbmZlY3RhbnRfZHJ1Z191c2UgPT09ICdZJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcInZldGVyaW5hcnlcIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVjLnZhbHVlID0gaW5mby52ZXRfZHJ1Z191c2UgPT09ICdZJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIChkcnVnTGlzdCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBBZGRzIHRoZSBkcnVnIHVzZSBwcm9wZXJ0aWVzIHRvIHRoZSBvdXRwdXQgSlNPTlxyXG4gICAgICAgICAqIEBwYXJhbSBkcnVnVXNlQXJyYXlcclxuICAgICAgICAgKiBAcGFyYW0gb3V0cHV0SnNvblxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGZ1bmN0aW9uIGRydWdVc2VWYWx1ZXNUb091dHB1dChkcnVnVXNlQXJyYXksIG91dHB1dEpzb24pIHtcclxuXHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZHJ1Z1VzZUFycmF5Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcmVjID0gZHJ1Z1VzZUFycmF5W2ldO1xyXG5cclxuICAgICAgICAgICAgICAgIHN3aXRjaCAocmVjLm5hbWUpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiaHVtYW5cIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgb3V0cHV0SnNvbi5odW1hbl9kcnVnX3VzZSA9IHJlYy52YWx1ZSA9PT0gdHJ1ZSA/ICdZJyA6ICdOJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcInJhZGlvLXBoYXJtYWNldXRpY2FsXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG91dHB1dEpzb24ucmFkaW9waGFybV9kcnVnX3VzZSA9IHJlYy52YWx1ZSA9PT0gdHJ1ZSA/ICdZJyA6ICdOJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcImRpc2luZmVjdGFudFwiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvdXRwdXRKc29uLmRpc2luZmVjdGFudF9kcnVnX3VzZSA9IHJlYy52YWx1ZSA9PT0gdHJ1ZSA/ICdZJyA6ICdOJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcInZldGVyaW5hcnlcIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgb3V0cHV0SnNvbi52ZXRfZHJ1Z191c2UgPSByZWMudmFsdWUgPT09IHRydWUgPyAnWScgOiAnTic7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIENyZWF0ZXMgYW4gYW5pbWFsIHNvdXJjZWQgZW1wdHQganNvbiByZWNvcmQgZm9yIGZpbGUgd3JpdGVcclxuICAgICAgICAgKiBAcmV0dXJucyB7e319XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZnVuY3Rpb24gY3JlYXRlRW1wdHlBbmltYWxTb3VyY2VGb3JPdXRwdXQoKSB7XHJcbiAgICAgICAgICAgIHZhciByZWNvcmQgPSB7fTtcclxuICAgICAgICAgICAgcmVjb3JkLmFuaW1hbF9zcmNfcmVjb3JkID0gW107XHJcbiAgICAgICAgICAgIHJlY29yZC5pc19jb250cm9sbGVkX3BvcCA9IFwiXCI7XHJcbiAgICAgICAgICAgIHJlY29yZC5pc19iaW90ZWNoX2Rlcml2ZWQgPSBcIlwiO1xyXG4gICAgICAgICAgICByZWNvcmQuaXNfY2VsbF9saW5lID0gXCJcIjtcclxuICAgICAgICAgICAgcmVjb3JkLmFuaW1hbF9hZ2UgPSBcIlwiOyAvL1RPRE8gbnVtYmVyIGlzIHRoaXMgYSBwcm9ibGVtP1xyXG4gICAgICAgICAgICByZWNvcmQuY291bnRyeV9vcmlnaW5fbGlzdCA9IHt9O1xyXG4gICAgICAgICAgICByZWNvcmQuY291bnRyeV9vcmlnaW5fbGlzdC5jb3VudHJ5X29yaWdpbiA9IFtdO1xyXG4gICAgICAgICAgICByZXR1cm4gcmVjb3JkO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gY3JlYXRlRW1wdHlBbmltYWxTb3VyY2VNb2RlbCgpIHtcclxuICAgICAgICAgICAgdmFyIHJlY29yZCA9IHt9O1xyXG4gICAgICAgICAgICByZWNvcmQuYW5pbWFsU3JjTGlzdCA9IFtdO1xyXG4gICAgICAgICAgICByZWNvcmQuaXNDZWxsTGluZSA9IFwiXCI7XHJcbiAgICAgICAgICAgIHJlY29yZC5pc0Jpb3RlY2hEZXJpdmVkID0gXCJcIjtcclxuICAgICAgICAgICAgcmVjb3JkLmlzQ29udHJvbGxlZFBvcCA9IFwiXCI7XHJcbiAgICAgICAgICAgIHJlY29yZC5hZ2VBbmltYWxzID0gXCJcIjtcclxuICAgICAgICAgICAgcmVjb3JkLmNvdW50cnlMaXN0ID0gW107XHJcbiAgICAgICAgICAgIHJldHVybiByZWNvcmQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBfY3JlYXRlRW1wdHlOZXJ2b3VzU3lzdGVtTW9kZWwoKSB7XHJcbiAgICAgICAgICAgIHZhciByZWNvcmQgPSB7fTtcclxuICAgICAgICAgICAgcmVjb3JkLmJyYWluID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHJlY29yZC5icmFpblN0ZW0gPSBmYWxzZTtcclxuICAgICAgICAgICAgcmVjb3JkLmNlcmViZWxsdW0gPSBmYWxzZTtcclxuICAgICAgICAgICAgcmVjb3JkLmNlcm9GbHVpZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICByZWNvcmQuZG9yc2FsUm9vdCA9IGZhbHNlO1xyXG4gICAgICAgICAgICByZWNvcmQuZHVyYU1hdGVyID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHJlY29yZC5oeXBvdGhhbGFtdXMgPSBmYWxzZTtcclxuICAgICAgICAgICAgcmVjb3JkLnJldGluYSA9IGZhbHNlO1xyXG4gICAgICAgICAgICByZWNvcmQuc3BpbmFsQ29yZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICByZWNvcmQudHJpZ2VtaW5hbCA9IGZhbHNlO1xyXG4gICAgICAgICAgICByZWNvcmQub3RoZXJOZXJ2b3VzID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHJlY29yZC5vdGhlckRldGFpbHMgPSBcIlwiO1xyXG4gICAgICAgICAgICByZXR1cm4gcmVjb3JkO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQ3JlYXRlcyBhbiBpbnRlcm5hbCBtb2RlbCBmb3IgVGlzc3VlcyBhbmQgRmx1aWRzOkRpZ2VzdGl2ZSBTeXN0ZW1cclxuICAgICAgICAgKiBAcmV0dXJucyB7e319XHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBmdW5jdGlvbiBfY3JlYXRlRW1wdHlEaWdlc3RpdmVTeXN0ZW1Nb2RlbCgpIHtcclxuICAgICAgICAgICAgdmFyIHJlY29yZCA9IHt9O1xyXG4gICAgICAgICAgICByZWNvcmQuYXBwZW5kaXggPSBmYWxzZTtcclxuICAgICAgICAgICAgcmVjb3JkLmJpbGUgPSBmYWxzZTtcclxuICAgICAgICAgICAgcmVjb3JkLmRpc3RhbElsZXVtID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHJlY29yZC5sYXJnZUludGVzdGluZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICByZWNvcmQuc2FsaXZhU2FsaXZhcnkgPSBmYWxzZTtcclxuICAgICAgICAgICAgcmVjb3JkLnNtYWxsSW50ZXN0aW5lID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHJlY29yZC5zdG9tYWNoID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHJlY29yZC5vdGhlckRpZ2VzdGl2ZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICByZWNvcmQub3RoZXJEZXRhaWxzID0gXCJcIjtcclxuICAgICAgICAgICAgcmV0dXJuIHJlY29yZDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIF9jcmVhdGVFbXB0eUltbXVuZVN5c3RlbU1vZGVsKCkge1xyXG4gICAgICAgICAgICB2YXIgcmVjb3JkID0ge307XHJcbiAgICAgICAgICAgIHJlY29yZC5seW1waE5vZGVzID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHJlY29yZC5zcGxlZW4gPSBmYWxzZTtcclxuICAgICAgICAgICAgcmVjb3JkLnRoeW11cyA9IGZhbHNlO1xyXG4gICAgICAgICAgICByZWNvcmQudG9uc2lscyA9IGZhbHNlO1xyXG4gICAgICAgICAgICByZWNvcmQub3RoZXJJbW11bmUgPSBmYWxzZTtcclxuICAgICAgICAgICAgcmVjb3JkLm90aGVyRGV0YWlscyA9IFwiXCI7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gcmVjb3JkO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gX2NyZWF0ZUVtcHR5TXVzY2xlU3lzdGVtTW9kZWwoKSB7XHJcbiAgICAgICAgICAgIHZhciByZWNvcmQgPSB7fTtcclxuICAgICAgICAgICAgcmVjb3JkLmFiZG9tZW4gPSBmYWxzZTtcclxuICAgICAgICAgICAgcmVjb3JkLnNrdWxsID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHJlY29yZC5ib25lcyA9IGZhbHNlO1xyXG4gICAgICAgICAgICByZWNvcmQuY29sbGFnZW4gPSBmYWxzZTtcclxuICAgICAgICAgICAgcmVjb3JkLnRlbmRvbnNMaWdhbWVudHMgPSBmYWxzZTtcclxuICAgICAgICAgICAgcmVjb3JkLnZlcnRlYnJhbENvbHVtbiA9IGZhbHNlO1xyXG4gICAgICAgICAgICByZWNvcmQubXVzY2xlID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHJlY29yZC5vdGhlck11c2NsZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICByZWNvcmQub3RoZXJEZXRhaWxzID0gXCJcIjtcclxuICAgICAgICAgICAgcmV0dXJuIHJlY29yZDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIF9jcmVhdGVFbXB0eVJlcHJvZHVjdGl2ZVN5c3RlbU1vZGVsKCkge1xyXG4gICAgICAgICAgICB2YXIgcmVjb3JkID0ge307XHJcbiAgICAgICAgICAgIHJlY29yZC5taWxrUHJvZHVjdHMgPSBmYWxzZTtcclxuICAgICAgICAgICAgcmVjb3JkLmtpZG5leSA9IGZhbHNlO1xyXG4gICAgICAgICAgICByZWNvcmQuY29sb3N0cnVtID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHJlY29yZC5tYW1tYXJ5R2xhbmRzID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHJlY29yZC5vdmFyaWVzID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHJlY29yZC5wbGFjZW50YSA9IGZhbHNlO1xyXG4gICAgICAgICAgICByZWNvcmQucGxhY2VudGFsRmx1aWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgcmVjb3JkLnNlbWVuID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHJlY29yZC50ZXN0ZXMgPSBmYWxzZTtcclxuICAgICAgICAgICAgcmVjb3JkLnVyaW5lID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHJlY29yZC5vdGhlclJlcHJvZHVjdGl2ZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICByZWNvcmQub3RoZXJEZXRhaWxzID0gXCJcIjtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiByZWNvcmQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBfY3JlYXRlRW1wdHlTa2luU3lzdGVtTW9kZWwoKSB7XHJcbiAgICAgICAgICAgIHZhciByZWNvcmQgPSB7fTtcclxuICAgICAgICAgICAgcmVjb3JkLmFkcmVuYWxHbGFuZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICByZWNvcmQuaGFpckhvb3Zlc0ZlYXRoZXJzID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHJlY29yZC5saXZlciA9IGZhbHNlO1xyXG4gICAgICAgICAgICByZWNvcmQucGFuY3JlYXMgPSBmYWxzZTtcclxuICAgICAgICAgICAgcmVjb3JkLnBpdHVpdGFyeSA9IGZhbHNlO1xyXG4gICAgICAgICAgICByZWNvcmQuc2tpbkhpZGVzID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHJlY29yZC50aHlyb2lkUGFyYXRoeXJvaWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgcmVjb3JkLm90aGVyU2tpbiA9IGZhbHNlO1xyXG4gICAgICAgICAgICByZWNvcmQub3RoZXJEZXRhaWxzID0gXCJcIjtcclxuICAgICAgICAgICAgcmV0dXJuIHJlY29yZDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIF9jcmVhdGVFbXB0eU90aGVyU3lzdGVtTW9kZWwoKSB7XHJcbiAgICAgICAgICAgIHZhciByZWNvcmQgPSB7fTtcclxuICAgICAgICAgICAgcmVjb3JkLmFkaXBvc2UgPSBmYWxzZTtcclxuICAgICAgICAgICAgcmVjb3JkLmFzY2l0ZXMgPSBmYWxzZTtcclxuICAgICAgICAgICAgcmVjb3JkLmFudGxlclZlbHZldCA9IGZhbHNlO1xyXG4gICAgICAgICAgICByZWNvcmQuc2VydW0gPSBmYWxzZTtcclxuICAgICAgICAgICAgcmVjb3JkLndob2xlQmxvb2QgPSBmYWxzZTtcclxuICAgICAgICAgICAgcmVjb3JkLnBsYXNtYSA9IGZhbHNlO1xyXG4gICAgICAgICAgICByZWNvcmQuZW1icnlvbmljVGlzc3VlID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHJlY29yZC5mZXRhbFRpc3N1ZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICByZWNvcmQuYm9uZU1hcnJvdyA9IGZhbHNlO1xyXG4gICAgICAgICAgICByZWNvcmQuZXllc0Nvcm5lYSA9IGZhbHNlO1xyXG4gICAgICAgICAgICByZWNvcmQuZ2FsbEJsYWRkZXIgPSBmYWxzZTtcclxuICAgICAgICAgICAgcmVjb3JkLm90aGVyRmx1aWRzID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHJlY29yZC5vdGhlckRldGFpbHMgPSBcIlwiO1xyXG4gICAgICAgICAgICByZXR1cm4gcmVjb3JkO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gX2NyZWF0ZUVtcHR5Q2FyZGlvU3lzdGVtTW9kZWwoKSB7XHJcbiAgICAgICAgICAgIHZhciByZWNvcmQgPSB7fTtcclxuICAgICAgICAgICAgcmVjb3JkLmhlYXJ0UGVyaWNhcmRpdW0gPSBmYWxzZTtcclxuICAgICAgICAgICAgcmVjb3JkLmx1bmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgcmVjb3JkLm5hc2FsRmx1aWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgcmVjb3JkLnRyYWNoZWEgPSBmYWxzZTtcclxuICAgICAgICAgICAgcmVjb3JkLm90aGVyQ2FyZGlvID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHJlY29yZC5vdGhlckRldGFpbHMgPSBcIlwiO1xyXG4gICAgICAgICAgICByZXR1cm4gcmVjb3JkO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gX2NyZWF0ZUVtcHR5TmVydm91c1N5c3RlbWZvck91dHB1dCgpIHtcclxuICAgICAgICAgICAgdmFyIHJlY29yZCA9IHt9O1xyXG4gICAgICAgICAgICByZWNvcmQuYnJhaW4gPSBub1ZhbHVlO1xyXG4gICAgICAgICAgICByZWNvcmQuYnJhaW5fc3RlbSA9IG5vVmFsdWU7XHJcbiAgICAgICAgICAgIHJlY29yZC5jZXJlYmVsbHVtID0gbm9WYWx1ZTtcclxuICAgICAgICAgICAgcmVjb3JkLmNlcmVicm9zcGluYWxfZmx1aWQgPSBub1ZhbHVlO1xyXG4gICAgICAgICAgICByZWNvcmQuZG9yc2FsX3Jvb3RfZ2FuZ2xpYSA9IG5vVmFsdWU7XHJcbiAgICAgICAgICAgIHJlY29yZC5kdXJhX21hdGVyID0gbm9WYWx1ZTtcclxuICAgICAgICAgICAgcmVjb3JkLmh5cG90aGFsYW11cyA9IG5vVmFsdWU7XHJcbiAgICAgICAgICAgIHJlY29yZC5yZXRpbmFfb3B0aWMgPSBub1ZhbHVlO1xyXG4gICAgICAgICAgICByZWNvcmQuc3BpbmFsX2NvcmQgPSBub1ZhbHVlO1xyXG4gICAgICAgICAgICByZWNvcmQudHJpZ2VybWluYWxfZ2FuZ2xpYSA9IG5vVmFsdWU7XHJcbiAgICAgICAgICAgIHJlY29yZC5vdGhlcl9uZXJ2b3VzID0gbm9WYWx1ZTtcclxuICAgICAgICAgICAgcmVjb3JkLm90aGVyX25lcnZvdXNfZGV0YWlscyA9IFwiXCI7XHJcbiAgICAgICAgICAgIHJldHVybiByZWNvcmQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBfY3JlYXRlRW1wdHlEaWdlc3RpdmVTeXN0ZW1mb3JPdXRwdXQoKSB7XHJcbiAgICAgICAgICAgIHZhciByZWNvcmQgPSB7fTtcclxuICAgICAgICAgICAgcmVjb3JkLmFwcGVuZGl4ID0gbm9WYWx1ZTtcclxuICAgICAgICAgICAgcmVjb3JkLmJpbGUgPSBub1ZhbHVlO1xyXG4gICAgICAgICAgICByZWNvcmQuZGlzdGFsX2lsZXVtID0gbm9WYWx1ZTtcclxuICAgICAgICAgICAgcmVjb3JkLmxhcmdlX2ludGVzdGluZSA9IG5vVmFsdWU7XHJcbiAgICAgICAgICAgIHJlY29yZC5zYWxpdmFfc2FsaXZhcnkgPSBub1ZhbHVlO1xyXG4gICAgICAgICAgICByZWNvcmQuc21hbGxfaW50ZXN0aW5lID0gbm9WYWx1ZTtcclxuICAgICAgICAgICAgcmVjb3JkLnN0b21hY2ggPSBub1ZhbHVlO1xyXG4gICAgICAgICAgICByZWNvcmQub3RoZXJfZGlnZXN0aXZlID0gbm9WYWx1ZTtcclxuICAgICAgICAgICAgcmVjb3JkLm90aGVyX2RpZ2VzdGl2ZV9kZXRhaWxzID0gXCJcIjtcclxuICAgICAgICAgICAgcmV0dXJuIHJlY29yZDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIF9jcmVhdGVFbXB0eU11c2NsZVN5c3RlbWZvck91dHB1dCgpIHtcclxuICAgICAgICAgICAgdmFyIHJlY29yZCA9IHt9O1xyXG4gICAgICAgICAgICByZWNvcmQuYWJkb21lbiA9IG5vVmFsdWU7XHJcbiAgICAgICAgICAgIHJlY29yZC5za3VsbCA9IG5vVmFsdWU7XHJcbiAgICAgICAgICAgIHJlY29yZC5ib25lcyA9IG5vVmFsdWU7XHJcbiAgICAgICAgICAgIHJlY29yZC5jb2xsYWdlbiA9IG5vVmFsdWU7XHJcbiAgICAgICAgICAgIHJlY29yZC50ZW5kb25zX2xpZ2FtZW50cyA9IG5vVmFsdWU7XHJcbiAgICAgICAgICAgIHJlY29yZC52ZXJ0ZWJyYWxfY29sdW1uID0gbm9WYWx1ZTtcclxuICAgICAgICAgICAgcmVjb3JkLm11c2NsZSA9IG5vVmFsdWU7XHJcbiAgICAgICAgICAgIHJlY29yZC5vdGhlcl9tdXNjdWxvX3NrZWxldGFsID0gbm9WYWx1ZTtcclxuICAgICAgICAgICAgcmVjb3JkLm90aGVyX211c2N1bG9fc2tlbGV0YWxfZGV0YWlscyA9IFwiXCI7XHJcbiAgICAgICAgICAgIHJldHVybiByZWNvcmQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBfY3JlYXRlRW1wdHlSZXByb2R1Y3RpdmVTeXN0ZW1mb3JPdXRwdXQoKSB7XHJcbiAgICAgICAgICAgIHZhciByZWNvcmQgPSB7fTtcclxuICAgICAgICAgICAgcmVjb3JkLm1pbGtfcHJvZHVjdHMgPSBub1ZhbHVlO1xyXG4gICAgICAgICAgICByZWNvcmQua2lkbmV5ID0gbm9WYWx1ZTtcclxuICAgICAgICAgICAgcmVjb3JkLmNvbG9zdHJ1bSA9IG5vVmFsdWU7XHJcbiAgICAgICAgICAgIHJlY29yZC5tYW1tYXJ5X2dsYW5kcyA9IG5vVmFsdWU7XHJcbiAgICAgICAgICAgIHJlY29yZC5vdmFyaWVzID0gbm9WYWx1ZTtcclxuICAgICAgICAgICAgcmVjb3JkLnBsYWNlbnRhID0gbm9WYWx1ZTtcclxuICAgICAgICAgICAgcmVjb3JkLnBsYWNlbnRhbF9mbHVpZCA9IG5vVmFsdWU7XHJcbiAgICAgICAgICAgIHJlY29yZC5zZW1lbiA9IG5vVmFsdWU7XHJcbiAgICAgICAgICAgIHJlY29yZC50ZXN0ZXMgPSBub1ZhbHVlO1xyXG4gICAgICAgICAgICByZWNvcmQudXJpbmUgPSBub1ZhbHVlO1xyXG4gICAgICAgICAgICByZWNvcmQub3RoZXJfcmVwcm9kdWN0aXZlID0gbm9WYWx1ZTtcclxuICAgICAgICAgICAgcmVjb3JkLm90aGVyX3JlcHJvZHVjdGl2ZV9kZXRhaWxzID0gXCJcIjtcclxuICAgICAgICAgICAgcmV0dXJuIHJlY29yZDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIF9jcmVhdGVFbXB0eUNhcmRpb1N5c3RlbWZvck91dHB1dCgpIHtcclxuICAgICAgICAgICAgdmFyIHJlY29yZCA9IHt9O1xyXG4gICAgICAgICAgICByZWNvcmQuaGVhcnRfcGVyaWNhcmRpdW0gPSBub1ZhbHVlO1xyXG4gICAgICAgICAgICByZWNvcmQubHVuZyA9IG5vVmFsdWU7XHJcbiAgICAgICAgICAgIHJlY29yZC5uYXNhbF9mbHVpZCA9IG5vVmFsdWU7XHJcbiAgICAgICAgICAgIHJlY29yZC50cmFjaGVhID0gbm9WYWx1ZTtcclxuICAgICAgICAgICAgcmVjb3JkLm90aGVyX2NhcmRpb19yZXNwaXJhdG9yeSA9IG5vVmFsdWU7XHJcbiAgICAgICAgICAgIHJlY29yZC5vdGhlcl9jYXJkaW9fcmVzcGlyYXRvcnlfZGV0YWlscyA9IFwiXCI7XHJcbiAgICAgICAgICAgIHJldHVybiByZWNvcmQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBfY3JlYXRlRW1wdHlJbW11bmVTeXN0ZW1mb3JPdXRwdXQoKSB7XHJcbiAgICAgICAgICAgIHZhciByZWNvcmQgPSB7fTtcclxuICAgICAgICAgICAgcmVjb3JkLmx5bXBoX25vZGVzID0gbm9WYWx1ZTtcclxuICAgICAgICAgICAgcmVjb3JkLnNwbGVlbiA9IG5vVmFsdWU7XHJcbiAgICAgICAgICAgIHJlY29yZC50aHltdXMgPSBub1ZhbHVlO1xyXG4gICAgICAgICAgICByZWNvcmQudG9uc2lscyA9IG5vVmFsdWU7XHJcbiAgICAgICAgICAgIHJlY29yZC5vdGhlcl9pbW11bmUgPSBub1ZhbHVlO1xyXG4gICAgICAgICAgICByZWNvcmQub3RoZXJfaW1tdW5lX2RldGFpbHMgPSBcIlwiO1xyXG4gICAgICAgICAgICByZXR1cm4gcmVjb3JkO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gX2NyZWF0ZUVtcHR5U2tpblN5c3RlbWZvck91dHB1dCgpIHtcclxuICAgICAgICAgICAgdmFyIHJlY29yZCA9IHt9O1xyXG4gICAgICAgICAgICByZWNvcmQuYWRyZW5hbF9nbGFuZCA9IG5vVmFsdWU7XHJcbiAgICAgICAgICAgIHJlY29yZC5oYWlyX2hvb3Zlc19mZWF0aGVycyA9IG5vVmFsdWU7XHJcbiAgICAgICAgICAgIHJlY29yZC5saXZlciA9IG5vVmFsdWU7XHJcbiAgICAgICAgICAgIHJlY29yZC5wYW5jcmVhcyA9IG5vVmFsdWU7XHJcbiAgICAgICAgICAgIHJlY29yZC5waXR1aXRhcnkgPSBub1ZhbHVlO1xyXG4gICAgICAgICAgICByZWNvcmQuc2tpbl9oaWRlcyA9IG5vVmFsdWU7XHJcbiAgICAgICAgICAgIHJlY29yZC50aHlyb2lkX3BhcmF0aHlyb2lkID0gbm9WYWx1ZTtcclxuICAgICAgICAgICAgcmVjb3JkLm90aGVyX3NraW5fZ2xhbmR1bGFyID0gbm9WYWx1ZTtcclxuICAgICAgICAgICAgcmVjb3JkLm90aGVyX3NraW5fZ2xhbmR1bGFyX2RldGFpbHMgPSBcIlwiO1xyXG4gICAgICAgICAgICByZXR1cm4gcmVjb3JkO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyogZnVuY3Rpb24gX2NyZWF0ZUVtcHR5TXVzY2xlU3lzdGVtZm9yT3V0cHV0KCkge1xyXG4gICAgICAgICB2YXIgcmVjb3JkID0ge307XHJcblxyXG4gICAgICAgICByZWNvcmQuYWJkb21lbiA9IG5vVmFsdWU7XHJcbiAgICAgICAgIHJlY29yZC5za3VsbCA9IG5vVmFsdWU7XHJcbiAgICAgICAgIHJlY29yZC5ib25lcyA9IG5vVmFsdWU7XHJcbiAgICAgICAgIHJlY29yZC5jb2xsYWdlbiA9IG5vVmFsdWU7XHJcbiAgICAgICAgIHJlY29yZC50ZW5kb25zX2xpZ2FtZW50cyA9IG5vVmFsdWU7XHJcbiAgICAgICAgIHJlY29yZC52ZXJ0ZWJyYWxfY29sdW1uID0gbm9WYWx1ZTtcclxuICAgICAgICAgcmVjb3JkLm90aGVyX211c2N1bG9fc2tlbGV0YWwgPSBub1ZhbHVlO1xyXG4gICAgICAgICByZWNvcmQub3RoZXJfbXVzY3Vsb19za2VsZXRhbF9kZXRhaWxzID0gXCJcIjtcclxuICAgICAgICAgcmV0dXJuIHJlY29yZDtcclxuICAgICAgICAgfSovXHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIF9jcmVhdGVFbXB0eU90aGVyU3lzdGVtZm9yT3V0cHV0KCkge1xyXG4gICAgICAgICAgICB2YXIgcmVjb3JkID0ge307XHJcbiAgICAgICAgICAgIHJlY29yZC5hZGlwb3NlID0gbm9WYWx1ZTtcclxuICAgICAgICAgICAgcmVjb3JkLmFzY2l0ZXMgPSBub1ZhbHVlO1xyXG4gICAgICAgICAgICByZWNvcmQuYW50bGVyX3ZlbHZldCA9IG5vVmFsdWU7XHJcbiAgICAgICAgICAgIHJlY29yZC5zZXJ1bSA9IG5vVmFsdWU7XHJcbiAgICAgICAgICAgIHJlY29yZC53aG9sZV9ibG9vZCA9IG5vVmFsdWU7XHJcbiAgICAgICAgICAgIHJlY29yZC5wbGFzbWEgPSBub1ZhbHVlO1xyXG4gICAgICAgICAgICByZWNvcmQuZW1icnlvbmljX3Rpc3N1ZSA9IG5vVmFsdWU7XHJcbiAgICAgICAgICAgIHJlY29yZC5mZXRhbF90aXNzdWUgPSBub1ZhbHVlO1xyXG4gICAgICAgICAgICByZWNvcmQuYm9uZV9tYXJyb3cgPSBub1ZhbHVlO1xyXG4gICAgICAgICAgICByZWNvcmQuZXllc19jb3JuZWEgPSBub1ZhbHVlO1xyXG4gICAgICAgICAgICByZWNvcmQuZ2FsbF9ibGFkZGVyID0gbm9WYWx1ZTtcclxuICAgICAgICAgICAgcmVjb3JkLm90aGVyX2ZsdWlkc190aXNzdWVzID0gbm9WYWx1ZTtcclxuICAgICAgICAgICAgcmVjb3JkLm90aGVyX2ZsdWlkc190aXNzdWVzX2RldGFpbHMgPSBcIlwiO1xyXG4gICAgICAgICAgICByZXR1cm4gcmVjb3JkO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogTWFwcyB0aGUgaW50ZXJuYWwgZGF0YSBtb2RlbCB0byB0aGUgb3V0cHV0IG1vZGVsIEZvciBUaXNzdWVzIGFuZCBGbHVpZHM6TmVydm91cyBTeXN0ZW1cclxuICAgICAgICAgKiBAcGFyYW0ganNvbk9ialxyXG4gICAgICAgICAqIEByZXR1cm5zIHsqfVxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZnVuY3Rpb24gX25lcnZvdXNTeXN0ZW1Ub091dHB1dChqc29uT2JqKSB7XHJcblxyXG4gICAgICAgICAgICB2YXIgcmVjb3JkID0gX2NyZWF0ZUVtcHR5TmVydm91c1N5c3RlbWZvck91dHB1dCgpO1xyXG4gICAgICAgICAgICByZWNvcmQuYnJhaW4gPSBqc29uT2JqLmJyYWluID09PSB0cnVlID8geWVzVmFsdWUgOiBub1ZhbHVlO1xyXG4gICAgICAgICAgICByZWNvcmQuYnJhaW5fc3RlbSA9IGpzb25PYmouYnJhaW5TdGVtID09PSB0cnVlID8geWVzVmFsdWUgOiBub1ZhbHVlO1xyXG4gICAgICAgICAgICByZWNvcmQuY2VyZWJlbGx1bSA9IGpzb25PYmouY2VyZWJlbGx1bSA9PT0gdHJ1ZSA/IHllc1ZhbHVlIDogbm9WYWx1ZTtcclxuICAgICAgICAgICAgcmVjb3JkLmNlcmVicm9zcGluYWxfZmx1aWQgPSBqc29uT2JqLmNlcm9GbHVpZCA9PT0gdHJ1ZSA/IHllc1ZhbHVlIDogbm9WYWx1ZTtcclxuICAgICAgICAgICAgcmVjb3JkLmRvcnNhbF9yb290X2dhbmdsaWEgPSBqc29uT2JqLmRvcnNhbFJvb3QgPT09IHRydWUgPyB5ZXNWYWx1ZSA6IG5vVmFsdWU7XHJcbiAgICAgICAgICAgIHJlY29yZC5kdXJhX21hdGVyID0ganNvbk9iai5kdXJhTWF0ZXIgPT09IHRydWUgPyB5ZXNWYWx1ZSA6IG5vVmFsdWU7XHJcbiAgICAgICAgICAgIHJlY29yZC5oeXBvdGhhbGFtdXMgPSBqc29uT2JqLmh5cG90aGFsYW11cyA9PT0gdHJ1ZSA/IHllc1ZhbHVlIDogbm9WYWx1ZTtcclxuICAgICAgICAgICAgcmVjb3JkLnJldGluYV9vcHRpYyA9IGpzb25PYmoucmV0aW5hID09PSB0cnVlID8geWVzVmFsdWUgOiBub1ZhbHVlO1xyXG4gICAgICAgICAgICByZWNvcmQuc3BpbmFsX2NvcmQgPSBqc29uT2JqLnNwaW5hbENvcmQgPT09IHRydWUgPyB5ZXNWYWx1ZSA6IG5vVmFsdWU7XHJcbiAgICAgICAgICAgIHJlY29yZC50cmlnZXJtaW5hbF9nYW5nbGlhID0ganNvbk9iai50cmlnZW1pbmFsID09PSB0cnVlID8geWVzVmFsdWUgOiBub1ZhbHVlO1xyXG4gICAgICAgICAgICByZWNvcmQub3RoZXJfbmVydm91cyA9IGpzb25PYmoub3RoZXJOZXJ2b3VzID09PSB0cnVlID8geWVzVmFsdWUgOiBub1ZhbHVlO1xyXG4gICAgICAgICAgICByZWNvcmQub3RoZXJfbmVydm91c19kZXRhaWxzID0ganNvbk9iai5vdGhlckRldGFpbHM7XHJcbiAgICAgICAgICAgIHJldHVybiByZWNvcmQ7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogTWFwcyB0aGUgaW50ZXJuYWwgZGF0YSBtb2RlbCB0byB0aGUgb3V0cHV0IG1vZGVsIEZvciBUaXNzdWVzIGFuZCBGbHVpZHM6RGlnZXN0aXZlIFN5c3RlbVxyXG4gICAgICAgICAqIEBwYXJhbSBqc29uT2JqXHJcbiAgICAgICAgICogQHJldHVybnMgeyp9XHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBmdW5jdGlvbiBfZGlnZXN0aXZlU3lzdGVtVG9PdXRwdXQoanNvbk9iaikge1xyXG4gICAgICAgICAgICB2YXIgcmVjb3JkID0gX2NyZWF0ZUVtcHR5RGlnZXN0aXZlU3lzdGVtZm9yT3V0cHV0KCk7XHJcbiAgICAgICAgICAgIHJlY29yZC5hcHBlbmRpeCA9IGpzb25PYmouYXBwZW5kaXggPT09IHRydWUgPyB5ZXNWYWx1ZSA6IG5vVmFsdWU7XHJcbiAgICAgICAgICAgIHJlY29yZC5iaWxlID0ganNvbk9iai5iaWxlID09PSB0cnVlID8geWVzVmFsdWUgOiBub1ZhbHVlO1xyXG4gICAgICAgICAgICByZWNvcmQuZGlzdGFsX2lsZXVtID0ganNvbk9iai5kaXN0YWxJbGV1bSA9PT0gdHJ1ZSA/IHllc1ZhbHVlIDogbm9WYWx1ZTtcclxuICAgICAgICAgICAgcmVjb3JkLmxhcmdlX2ludGVzdGluZSA9IGpzb25PYmoubGFyZ2VJbnRlc3RpbmUgPT09IHRydWUgPyB5ZXNWYWx1ZSA6IG5vVmFsdWU7XHJcbiAgICAgICAgICAgIHJlY29yZC5zYWxpdmFfc2FsaXZhcnkgPSBqc29uT2JqLnNhbGl2YVNhbGl2YXJ5ID09PSB0cnVlID8geWVzVmFsdWUgOiBub1ZhbHVlO1xyXG4gICAgICAgICAgICByZWNvcmQuc21hbGxfaW50ZXN0aW5lID0ganNvbk9iai5zbWFsbEludGVzdGluZSA9PT0gdHJ1ZSA/IHllc1ZhbHVlIDogbm9WYWx1ZTtcclxuICAgICAgICAgICAgcmVjb3JkLnN0b21hY2ggPSBqc29uT2JqLnN0b21hY2ggPT09IHRydWUgPyB5ZXNWYWx1ZSA6IG5vVmFsdWU7XHJcbiAgICAgICAgICAgIHJlY29yZC5vdGhlcl9kaWdlc3RpdmUgPSBqc29uT2JqLm90aGVyRGlnZXN0aXZlID09PSB0cnVlID8geWVzVmFsdWUgOiBub1ZhbHVlO1xyXG4gICAgICAgICAgICByZWNvcmQub3RoZXJfZGlnZXN0aXZlX2RldGFpbHMgPSBqc29uT2JqLm90aGVyRGV0YWlscztcclxuICAgICAgICAgICAgcmV0dXJuIHJlY29yZDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIE1hcHMgdGhlIGludGVybmFsIGRhdGEgbW9kZWwgdG8gdGhlIG91dHB1dCBtb2RlbCBGb3IgVGlzc3VlcyBhbmQgRmx1aWRzOk11c2NsZSBTeXN0ZW1cclxuICAgICAgICAgKiBAcGFyYW0ganNvbk9ialxyXG4gICAgICAgICAqIEByZXR1cm5zIHsqfVxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZnVuY3Rpb24gX211c2NsZVN5c3RlbVRvT3V0cHV0KGpzb25PYmopIHtcclxuICAgICAgICAgICAgdmFyIHJlY29yZCA9IF9jcmVhdGVFbXB0eU11c2NsZVN5c3RlbWZvck91dHB1dCgpO1xyXG4gICAgICAgICAgICByZWNvcmQuYWJkb21lbiA9IGpzb25PYmouYWJkb21lbiA9PT0gdHJ1ZSA/IHllc1ZhbHVlIDogbm9WYWx1ZTtcclxuICAgICAgICAgICAgcmVjb3JkLnNrdWxsID0ganNvbk9iai5za3VsbCA9PT0gdHJ1ZSA/IHllc1ZhbHVlIDogbm9WYWx1ZTtcclxuICAgICAgICAgICAgcmVjb3JkLmJvbmVzID0ganNvbk9iai5ib25lcyA9PT0gdHJ1ZSA/IHllc1ZhbHVlIDogbm9WYWx1ZTtcclxuICAgICAgICAgICAgcmVjb3JkLmNvbGxhZ2VuID0ganNvbk9iai5jb2xsYWdlbiA9PT0gdHJ1ZSA/IHllc1ZhbHVlIDogbm9WYWx1ZTtcclxuICAgICAgICAgICAgcmVjb3JkLnRlbmRvbnNfbGlnYW1lbnRzID0ganNvbk9iai50ZW5kb25zTGlnYW1lbnRzID09PSB0cnVlID8geWVzVmFsdWUgOiBub1ZhbHVlO1xyXG4gICAgICAgICAgICByZWNvcmQudmVydGVicmFsX2NvbHVtbiA9IGpzb25PYmoudmVydGVicmFsQ29sdW1uID09PSB0cnVlID8geWVzVmFsdWUgOiBub1ZhbHVlO1xyXG4gICAgICAgICAgICByZWNvcmQubXVzY2xlID0ganNvbk9iai5tdXNjbGUgPT09IHRydWUgPyB5ZXNWYWx1ZSA6IG5vVmFsdWU7XHJcbiAgICAgICAgICAgIHJlY29yZC5vdGhlcl9tdXNjdWxvX3NrZWxldGFsID0ganNvbk9iai5vdGhlck11c2NsZSA9PT0gdHJ1ZSA/IHllc1ZhbHVlIDogbm9WYWx1ZTtcclxuICAgICAgICAgICAgcmVjb3JkLm90aGVyX211c2N1bG9fc2tlbGV0YWxfZGV0YWlscyA9IGpzb25PYmoub3RoZXJEZXRhaWxzO1xyXG4gICAgICAgICAgICByZXR1cm4gcmVjb3JkO1xyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIE1hcHMgdGhlIGludGVybmFsIGRhdGEgbW9kZWwgdG8gdGhlIG91dHB1dCBtb2RlbCBGb3IgVGlzc3VlcyBhbmQgRmx1aWRzOk11c2NsZSBTeXN0ZW1cclxuICAgICAgICAgKiBAcGFyYW0ganNvbk9ialxyXG4gICAgICAgICAqIEByZXR1cm5zIHsqfVxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZnVuY3Rpb24gX3JlcHJvZHVjdGl2ZVN5c3RlbVRvT3V0cHV0KGpzb25PYmopIHtcclxuICAgICAgICAgICAgdmFyIHJlY29yZCA9IF9jcmVhdGVFbXB0eVJlcHJvZHVjdGl2ZVN5c3RlbWZvck91dHB1dCgpO1xyXG4gICAgICAgICAgICByZWNvcmQubWlsa19wcm9kdWN0cyA9IGpzb25PYmoubWlsa1Byb2R1Y3RzID09PSB0cnVlID8geWVzVmFsdWUgOiBub1ZhbHVlO1xyXG4gICAgICAgICAgICByZWNvcmQua2lkbmV5ID0ganNvbk9iai5raWRuZXkgPT09IHRydWUgPyB5ZXNWYWx1ZSA6IG5vVmFsdWU7XHJcbiAgICAgICAgICAgIHJlY29yZC5jb2xvc3RydW0gPSBqc29uT2JqLmNvbG9zdHJ1bSA9PT0gdHJ1ZSA/IHllc1ZhbHVlIDogbm9WYWx1ZTtcclxuICAgICAgICAgICAgcmVjb3JkLm1hbW1hcnlfZ2xhbmRzID0ganNvbk9iai5tYW1tYXJ5R2xhbmRzID09PSB0cnVlID8geWVzVmFsdWUgOiBub1ZhbHVlO1xyXG4gICAgICAgICAgICByZWNvcmQub3ZhcmllcyA9IGpzb25PYmoub3ZhcmllcyA9PT0gdHJ1ZSA/IHllc1ZhbHVlIDogbm9WYWx1ZTtcclxuICAgICAgICAgICAgcmVjb3JkLnBsYWNlbnRhID0ganNvbk9iai5wbGFjZW50YSA9PT0gdHJ1ZSA/IHllc1ZhbHVlIDogbm9WYWx1ZTtcclxuICAgICAgICAgICAgcmVjb3JkLnBsYWNlbnRhbF9mbHVpZCA9IGpzb25PYmoucGxhY2VudGFsRmx1aWQgPT09IHRydWUgPyB5ZXNWYWx1ZSA6IG5vVmFsdWU7XHJcbiAgICAgICAgICAgIHJlY29yZC5zZW1lbiA9IGpzb25PYmouc2VtZW4gPT09IHRydWUgPyB5ZXNWYWx1ZSA6IG5vVmFsdWU7XHJcbiAgICAgICAgICAgIHJlY29yZC50ZXN0ZXMgPSBqc29uT2JqLnRlc3RlcyA9PT0gdHJ1ZSA/IHllc1ZhbHVlIDogbm9WYWx1ZTtcclxuICAgICAgICAgICAgcmVjb3JkLnVyaW5lID0ganNvbk9iai51cmluZSA9PT0gdHJ1ZSA/IHllc1ZhbHVlIDogbm9WYWx1ZTtcclxuICAgICAgICAgICAgcmVjb3JkLm90aGVyX3JlcHJvZHVjdGl2ZSA9IGpzb25PYmoub3RoZXJSZXByb2R1Y3RpdmUgPT09IHRydWUgPyB5ZXNWYWx1ZSA6IG5vVmFsdWU7XHJcbiAgICAgICAgICAgIHJlY29yZC5vdGhlcl9yZXByb2R1Y3RpdmVfZGV0YWlscyA9IGpzb25PYmoub3RoZXJEZXRhaWxzO1xyXG4gICAgICAgICAgICByZXR1cm4gcmVjb3JkO1xyXG5cclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBNYXBzIHRoZSBpbnRlcm5hbCBkYXRhIG1vZGVsIHRvIHRoZSBvdXRwdXQgbW9kZWwgRm9yIFRpc3N1ZXMgYW5kIEZsdWlkczpDYXJkaW8gU3lzdGVtXHJcbiAgICAgICAgICogQHBhcmFtIGpzb25PYmpcclxuICAgICAgICAgKiBAcmV0dXJucyB7Kn1cclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGZ1bmN0aW9uIF9jYXJkaW9TeXN0ZW1Ub091dHB1dChqc29uT2JqKSB7XHJcbiAgICAgICAgICAgIHZhciByZWNvcmQgPSBfY3JlYXRlRW1wdHlDYXJkaW9TeXN0ZW1mb3JPdXRwdXQoKTtcclxuICAgICAgICAgICAgcmVjb3JkLmhlYXJ0X3BlcmljYXJkaXVtID0ganNvbk9iai5oZWFydFBlcmljYXJkaXVtID09PSB0cnVlID8geWVzVmFsdWUgOiBub1ZhbHVlO1xyXG4gICAgICAgICAgICByZWNvcmQubHVuZyA9IGpzb25PYmoubHVuZyA9PT0gdHJ1ZSA/IHllc1ZhbHVlIDogbm9WYWx1ZTtcclxuICAgICAgICAgICAgcmVjb3JkLm5hc2FsX2ZsdWlkID0ganNvbk9iai5uYXNhbEZsdWlkID09PSB0cnVlID8geWVzVmFsdWUgOiBub1ZhbHVlO1xyXG4gICAgICAgICAgICByZWNvcmQudHJhY2hlYSA9IGpzb25PYmoudHJhY2hlYSA9PT0gdHJ1ZSA/IHllc1ZhbHVlIDogbm9WYWx1ZTtcclxuICAgICAgICAgICAgcmVjb3JkLm90aGVyX2NhcmRpb19yZXNwaXJhdG9yeSA9IGpzb25PYmoub3RoZXJDYXJkaW8gPT09IHRydWUgPyB5ZXNWYWx1ZSA6IG5vVmFsdWU7XHJcbiAgICAgICAgICAgIHJlY29yZC5vdGhlcl9jYXJkaW9fcmVzcGlyYXRvcnlfZGV0YWlscyA9IGpzb25PYmoub3RoZXJEZXRhaWxzO1xyXG4gICAgICAgICAgICByZXR1cm4gcmVjb3JkO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogTWFwcyB0aGUgaW50ZXJuYWwgZGF0YSBtb2RlbCB0byB0aGUgb3V0cHV0IG1vZGVsIEZvciBUaXNzdWVzIGFuZCBGbHVpZHM6aW1tdW5lIFN5c3RlbVxyXG4gICAgICAgICAqIEBwYXJhbSBqc29uT2JqXHJcbiAgICAgICAgICogQHJldHVybnMgeyp9XHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBmdW5jdGlvbiBfaW1tdW5lU3lzdGVtVG9PdXRwdXQoanNvbk9iaikge1xyXG4gICAgICAgICAgICB2YXIgcmVjb3JkID0gX2NyZWF0ZUVtcHR5SW1tdW5lU3lzdGVtZm9yT3V0cHV0KCk7XHJcbiAgICAgICAgICAgIHJlY29yZC5seW1waF9ub2RlcyA9IGpzb25PYmoubHltcGhOb2RlcyA9PT0gdHJ1ZSA/IHllc1ZhbHVlIDogbm9WYWx1ZTtcclxuICAgICAgICAgICAgcmVjb3JkLnNwbGVlbiA9IGpzb25PYmouc3BsZWVuID09PSB0cnVlID8geWVzVmFsdWUgOiBub1ZhbHVlO1xyXG4gICAgICAgICAgICByZWNvcmQudGh5bXVzID0ganNvbk9iai50aHltdXMgPT09IHRydWUgPyB5ZXNWYWx1ZSA6IG5vVmFsdWU7XHJcbiAgICAgICAgICAgIHJlY29yZC50b25zaWxzID0ganNvbk9iai50b25zaWxzID09PSB0cnVlID8geWVzVmFsdWUgOiBub1ZhbHVlO1xyXG4gICAgICAgICAgICByZWNvcmQub3RoZXJfaW1tdW5lID0ganNvbk9iai5vdGhlckltbXVuZSA9PT0gdHJ1ZSA/IHllc1ZhbHVlIDogbm9WYWx1ZTtcclxuICAgICAgICAgICAgcmVjb3JkLm90aGVyX2ltbXVuZV9kZXRhaWxzID0ganNvbk9iai5vdGhlckRldGFpbHM7XHJcbiAgICAgICAgICAgIHJldHVybiByZWNvcmQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBNYXBzIHRoZSBpbnRlcm5hbCBkYXRhIG1vZGVsIHRvIHRoZSBvdXRwdXQgbW9kZWwgRm9yIFRpc3N1ZXMgYW5kIEZsdWlkczpPdGhlciBTeXN0ZW1cclxuICAgICAgICAgKiBAcGFyYW0ganNvbk9ialxyXG4gICAgICAgICAqIEByZXR1cm5zIHsqfVxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZnVuY3Rpb24gX290aGVyU3lzdGVtVG9PdXRwdXQoanNvbk9iaikge1xyXG4gICAgICAgICAgICB2YXIgcmVjb3JkID0gX2NyZWF0ZUVtcHR5T3RoZXJTeXN0ZW1mb3JPdXRwdXQoKTtcclxuICAgICAgICAgICAgcmVjb3JkLmFkaXBvc2UgPSBqc29uT2JqLmFkaXBvc2UgPT09IHRydWUgPyB5ZXNWYWx1ZSA6IG5vVmFsdWU7XHJcbiAgICAgICAgICAgIHJlY29yZC5hc2NpdGVzID0ganNvbk9iai5hc2NpdGVzID09PSB0cnVlID8geWVzVmFsdWUgOiBub1ZhbHVlO1xyXG4gICAgICAgICAgICByZWNvcmQuYW50bGVyX3ZlbHZldCA9IGpzb25PYmouYW50bGVyVmVsdmV0ID09PSB0cnVlID8geWVzVmFsdWUgOiBub1ZhbHVlO1xyXG4gICAgICAgICAgICByZWNvcmQuc2VydW0gPSBqc29uT2JqLnNlcnVtID09PSB0cnVlID8geWVzVmFsdWUgOiBub1ZhbHVlO1xyXG4gICAgICAgICAgICByZWNvcmQud2hvbGVfYmxvb2QgPSBqc29uT2JqLndob2xlQmxvb2QgPT09IHRydWUgPyB5ZXNWYWx1ZSA6IG5vVmFsdWU7XHJcbiAgICAgICAgICAgIHJlY29yZC5wbGFzbWEgPSBqc29uT2JqLnBsYXNtYSA9PT0gdHJ1ZSA/IHllc1ZhbHVlIDogbm9WYWx1ZTtcclxuICAgICAgICAgICAgcmVjb3JkLmVtYnJ5b25pY190aXNzdWUgPSBqc29uT2JqLmVtYnJ5b25pY1Rpc3N1ZSA9PT0gdHJ1ZSA/IHllc1ZhbHVlIDogbm9WYWx1ZTtcclxuICAgICAgICAgICAgcmVjb3JkLmZldGFsX3Rpc3N1ZSA9IGpzb25PYmouZmV0YWxUaXNzdWUgPT09IHRydWUgPyB5ZXNWYWx1ZSA6IG5vVmFsdWU7XHJcbiAgICAgICAgICAgIHJlY29yZC5ib25lX21hcnJvdyA9IGpzb25PYmouYm9uZU1hcnJvdyA9PT0gdHJ1ZSA/IHllc1ZhbHVlIDogbm9WYWx1ZTtcclxuICAgICAgICAgICAgcmVjb3JkLmV5ZXNfY29ybmVhID0ganNvbk9iai5leWVzQ29ybmVhID09PSB0cnVlID8geWVzVmFsdWUgOiBub1ZhbHVlO1xyXG4gICAgICAgICAgICByZWNvcmQuZ2FsbF9ibGFkZGVyID0ganNvbk9iai5nYWxsQmxhZGRlciA9PT0gdHJ1ZSA/IHllc1ZhbHVlIDogbm9WYWx1ZTtcclxuICAgICAgICAgICAgcmVjb3JkLm90aGVyX2ZsdWlkc190aXNzdWVzID0ganNvbk9iai5vdGhlckZsdWlkcyA9PT0gdHJ1ZSA/IHllc1ZhbHVlIDogbm9WYWx1ZTtcclxuICAgICAgICAgICAgcmVjb3JkLm90aGVyX2ZsdWlkc190aXNzdWVzX2RldGFpbHMgPSBqc29uT2JqLm90aGVyRGV0YWlscztcclxuICAgICAgICAgICAgcmV0dXJuIHJlY29yZDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIE1hcHMgdGhlIGludGVybmFsIGRhdGEgbW9kZWwgdG8gdGhlIG91dHB1dCBtb2RlbCBGb3IgVGlzc3VlcyBhbmQgRmx1aWRzOlNraW4gYW5kIEdsYW5kdWxhciBTeXN0ZW1cclxuICAgICAgICAgKiBAcGFyYW0ganNvbk9ialxyXG4gICAgICAgICAqIEByZXR1cm5zIHsqfVxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZnVuY3Rpb24gX3NraW5TeXN0ZW1Ub091dHB1dChqc29uT2JqKSB7XHJcbiAgICAgICAgICAgIHZhciByZWNvcmQgPSBfY3JlYXRlRW1wdHlTa2luU3lzdGVtZm9yT3V0cHV0KCk7XHJcbiAgICAgICAgICAgIHJlY29yZC5hZHJlbmFsX2dsYW5kID0ganNvbk9iai5hZHJlbmFsR2xhbmQgPT09IHRydWUgPyB5ZXNWYWx1ZSA6IG5vVmFsdWU7XHJcbiAgICAgICAgICAgIHJlY29yZC5oYWlyX2hvb3Zlc19mZWF0aGVycyA9IGpzb25PYmouaGFpckhvb3Zlc0ZlYXRoZXJzID09PSB0cnVlID8geWVzVmFsdWUgOiBub1ZhbHVlO1xyXG4gICAgICAgICAgICByZWNvcmQubGl2ZXIgPSBqc29uT2JqLmxpdmVyID09PSB0cnVlID8geWVzVmFsdWUgOiBub1ZhbHVlO1xyXG4gICAgICAgICAgICByZWNvcmQucGFuY3JlYXMgPSBqc29uT2JqLnBhbmNyZWFzID09PSB0cnVlID8geWVzVmFsdWUgOiBub1ZhbHVlO1xyXG4gICAgICAgICAgICByZWNvcmQucGl0dWl0YXJ5ID0ganNvbk9iai5waXR1aXRhcnkgPT09IHRydWUgPyB5ZXNWYWx1ZSA6IG5vVmFsdWU7XHJcbiAgICAgICAgICAgIHJlY29yZC5za2luX2hpZGVzID0ganNvbk9iai5za2luSGlkZXMgPT09IHRydWUgPyB5ZXNWYWx1ZSA6IG5vVmFsdWU7XHJcbiAgICAgICAgICAgIHJlY29yZC50aHlyb2lkX3BhcmF0aHlyb2lkID0ganNvbk9iai50aHlyb2lkUGFyYXRoeXJvaWQgPT09IHRydWUgPyB5ZXNWYWx1ZSA6IG5vVmFsdWU7XHJcbiAgICAgICAgICAgIHJlY29yZC5vdGhlcl9za2luX2dsYW5kdWxhciA9IGpzb25PYmoub3RoZXJTa2luID09PSB0cnVlID8geWVzVmFsdWUgOiBub1ZhbHVlO1xyXG4gICAgICAgICAgICByZWNvcmQub3RoZXJfc2tpbl9nbGFuZHVsYXJfZGV0YWlscyA9IGpzb25PYmoub3RoZXJEZXRhaWxzO1xyXG4gICAgICAgICAgICByZXR1cm4gcmVjb3JkO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gX2NyZWF0ZUVtcHR5VGlzc3Vlc1N5c3RlbVJlY29yZCgpIHtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiAoe1wiaWRcIjogXCJcIiwgXCJzeXN0ZW1UeXBlXCI6IFwiXCIsIGRldGFpbHNDb25jYXQ6IFwiXCIsIHN5c3RlbToge30sIG90aGVyRGV0YWlsczogXCJcIn0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQ3JlYXRlcyB0aGUgaW50ZXJuYWwgbW9kZWwgZm9yIHRoZSBEb3NzaWVyIHRpc3N1ZXMgYW5kIGZsdWlkc1xyXG4gICAgICAgICAqIEBwYXJhbSBqc29uXHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBmdW5jdGlvbiBfZ2V0VGlzc3Vlc0ZsdWlkc01vZGVsKGpzb24pIHtcclxuICAgICAgICAgICAgLy92YXIgaXRlbSA9IF9jcmVhdGVFbXB0eVRpc3N1ZXNTeXN0ZW1SZWNvcmQoKTtcclxuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IFtdO1xyXG4gICAgICAgICAgICB2YXIgaW5kZXggPSAxO1xyXG4gICAgICAgICAgICBpZiAoYW5ndWxhci5pc1VuZGVmaW5lZChqc29uKSkgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICAgICAgLy9kb25lIGFscGhhXHJcbiAgICAgICAgICAgIGlmIChqc29uLmNhcmRpb19zeXN0ZW0pIHtcclxuICAgICAgICAgICAgICAgIHZhciByZWNvcmQgPSBfY3JlYXRlRW1wdHlUaXNzdWVzU3lzdGVtUmVjb3JkKCk7XHJcbiAgICAgICAgICAgICAgICByZWNvcmQuaWQgPSBpbmRleDtcclxuICAgICAgICAgICAgICAgIGluZGV4Kys7XHJcbiAgICAgICAgICAgICAgICByZWNvcmQuc3lzdGVtVHlwZSA9IERvc3NpZXJMaXN0cy5nZXRDYXJkaW9TeXN0ZW1WYWx1ZSgpO1xyXG4gICAgICAgICAgICAgICAgcmVjb3JkLnN5c3RlbSA9IF9nZXRDYXJkaW9Nb2RlbChqc29uLmNhcmRpb19zeXN0ZW0pO1xyXG4gICAgICAgICAgICAgICAgcmVjb3JkLm90aGVyRGV0YWlscyA9IHJlY29yZC5zeXN0ZW0ub3RoZXJEZXRhaWxzO1xyXG4gICAgICAgICAgICAgICAgcmVjb3JkLmRldGFpbHNDb25jYXQgPSBfZ2V0Q29uY2F0VGlzc3VlcyhyZWNvcmQuc3lzdGVtKTtcclxuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHJlY29yZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGpzb24uZGlnZXN0aXZlX3N5c3RlbSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHJlY29yZCA9IF9jcmVhdGVFbXB0eVRpc3N1ZXNTeXN0ZW1SZWNvcmQoKTtcclxuICAgICAgICAgICAgICAgIHJlY29yZC5pZCA9IGluZGV4O1xyXG4gICAgICAgICAgICAgICAgaW5kZXgrKztcclxuICAgICAgICAgICAgICAgIHJlY29yZC5zeXN0ZW1UeXBlID0gRG9zc2llckxpc3RzLmdldERpZ2VzdGl2ZVN5c3RlbVZhbHVlKCk7XHJcbiAgICAgICAgICAgICAgICByZWNvcmQuc3lzdGVtID0gX2dldERpZ2VzdGl2ZU1vZGVsKGpzb24uZGlnZXN0aXZlX3N5c3RlbSk7XHJcbiAgICAgICAgICAgICAgICByZWNvcmQub3RoZXJEZXRhaWxzID0gcmVjb3JkLnN5c3RlbS5vdGhlckRldGFpbHM7XHJcbiAgICAgICAgICAgICAgICByZWNvcmQuZGV0YWlsc0NvbmNhdCA9IF9nZXRDb25jYXRUaXNzdWVzKHJlY29yZC5zeXN0ZW0pO1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2gocmVjb3JkKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoanNvbi5pbW11bmVfc3lzdGVtKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcmVjb3JkID0gX2NyZWF0ZUVtcHR5VGlzc3Vlc1N5c3RlbVJlY29yZCgpO1xyXG4gICAgICAgICAgICAgICAgcmVjb3JkLmlkID0gaW5kZXg7XHJcbiAgICAgICAgICAgICAgICBpbmRleCsrO1xyXG4gICAgICAgICAgICAgICAgcmVjb3JkLnN5c3RlbVR5cGUgPSBEb3NzaWVyTGlzdHMuZ2V0SW1tdW5lU3lzdGVtVmFsdWUoKTtcclxuICAgICAgICAgICAgICAgIHJlY29yZC5zeXN0ZW0gPSBfZ2V0SW1tdW5lTW9kZWwoanNvbi5pbW11bmVfc3lzdGVtKTtcclxuICAgICAgICAgICAgICAgIHJlY29yZC5vdGhlckRldGFpbHMgPSByZWNvcmQuc3lzdGVtLm90aGVyRGV0YWlscztcclxuICAgICAgICAgICAgICAgIHJlY29yZC5kZXRhaWxzQ29uY2F0ID0gX2dldENvbmNhdFRpc3N1ZXMocmVjb3JkLnN5c3RlbSk7XHJcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaChyZWNvcmQpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoanNvbi5tdXNjdWxvX3N5c3RlbSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHJlY29yZCA9IF9jcmVhdGVFbXB0eVRpc3N1ZXNTeXN0ZW1SZWNvcmQoKTtcclxuICAgICAgICAgICAgICAgIHJlY29yZC5pZCA9IGluZGV4O1xyXG4gICAgICAgICAgICAgICAgaW5kZXgrKztcclxuICAgICAgICAgICAgICAgIHJlY29yZC5zeXN0ZW1UeXBlID0gRG9zc2llckxpc3RzLmdldE11c2NsZVN5c3RlbVZhbHVlKCk7XHJcbiAgICAgICAgICAgICAgICByZWNvcmQuc3lzdGVtID0gX2dldE11c2NsZVN5c3RlbU1vZGVsKGpzb24ubXVzY3Vsb19zeXN0ZW0pO1xyXG4gICAgICAgICAgICAgICAgcmVjb3JkLm90aGVyRGV0YWlscyA9IHJlY29yZC5zeXN0ZW0ub3RoZXJEZXRhaWxzO1xyXG4gICAgICAgICAgICAgICAgcmVjb3JkLmRldGFpbHNDb25jYXQgPSBfZ2V0Q29uY2F0VGlzc3VlcyhyZWNvcmQuc3lzdGVtKTtcclxuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHJlY29yZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGpzb24ubmVydm91c19zeXN0ZW0pIHtcclxuICAgICAgICAgICAgICAgIHZhciByZWNvcmQgPSBfY3JlYXRlRW1wdHlUaXNzdWVzU3lzdGVtUmVjb3JkKCk7XHJcbiAgICAgICAgICAgICAgICByZWNvcmQuaWQgPSBpbmRleDtcclxuICAgICAgICAgICAgICAgIGluZGV4Kys7XHJcbiAgICAgICAgICAgICAgICByZWNvcmQuc3lzdGVtVHlwZSA9IERvc3NpZXJMaXN0cy5nZXROZXJ2b3VzU3lzdGVtVmFsdWUoKTtcclxuICAgICAgICAgICAgICAgIHJlY29yZC5zeXN0ZW0gPSBfZ2V0TmVydm91c01vZGVsKGpzb24ubmVydm91c19zeXN0ZW0pO1xyXG4gICAgICAgICAgICAgICAgcmVjb3JkLm90aGVyRGV0YWlscyA9IHJlY29yZC5zeXN0ZW0ub3RoZXJEZXRhaWxzO1xyXG4gICAgICAgICAgICAgICAgcmVjb3JkLmRldGFpbHNDb25jYXQgPSBfZ2V0Q29uY2F0VGlzc3VlcyhyZWNvcmQuc3lzdGVtKTtcclxuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHJlY29yZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGpzb24ub3RoZXJfc3lzdGVtKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcmVjb3JkID0gX2NyZWF0ZUVtcHR5VGlzc3Vlc1N5c3RlbVJlY29yZCgpO1xyXG4gICAgICAgICAgICAgICAgcmVjb3JkLmlkID0gaW5kZXg7XHJcbiAgICAgICAgICAgICAgICBpbmRleCsrO1xyXG4gICAgICAgICAgICAgICAgcmVjb3JkLnN5c3RlbVR5cGUgPSBEb3NzaWVyTGlzdHMuZ2V0T3RoZXJUaXNzdWVzU3lzdGVtVmFsdWUoKTtcclxuICAgICAgICAgICAgICAgIHJlY29yZC5zeXN0ZW0gPSBfZ2V0T3RoZXJTeXN0ZW1Nb2RlbChqc29uLm90aGVyX3N5c3RlbSk7XHJcbiAgICAgICAgICAgICAgICByZWNvcmQub3RoZXJEZXRhaWxzID0gcmVjb3JkLnN5c3RlbS5vdGhlckRldGFpbHM7XHJcbiAgICAgICAgICAgICAgICByZWNvcmQuZGV0YWlsc0NvbmNhdCA9IF9nZXRDb25jYXRUaXNzdWVzKHJlY29yZC5zeXN0ZW0pO1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2gocmVjb3JkKTtcclxuXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGpzb24ucmVwcm9kdWN0aXZlX3N5c3RlbSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHJlY29yZCA9IF9jcmVhdGVFbXB0eVRpc3N1ZXNTeXN0ZW1SZWNvcmQoKTtcclxuICAgICAgICAgICAgICAgIHJlY29yZC5pZCA9IGluZGV4O1xyXG4gICAgICAgICAgICAgICAgaW5kZXgrKztcclxuICAgICAgICAgICAgICAgIHJlY29yZC5zeXN0ZW1UeXBlID0gRG9zc2llckxpc3RzLmdldFJlcHJvZHVjdGl2ZVN5c3RlbVZhbHVlKCk7XHJcbiAgICAgICAgICAgICAgICByZWNvcmQuc3lzdGVtID0gX2dldFJlcHJvZHVjdGl2ZU1vZGVsKGpzb24ucmVwcm9kdWN0aXZlX3N5c3RlbSk7XHJcbiAgICAgICAgICAgICAgICByZWNvcmQub3RoZXJEZXRhaWxzID0gcmVjb3JkLnN5c3RlbS5vdGhlckRldGFpbHM7XHJcbiAgICAgICAgICAgICAgICByZWNvcmQuZGV0YWlsc0NvbmNhdCA9IF9nZXRDb25jYXRUaXNzdWVzKHJlY29yZC5zeXN0ZW0pO1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2gocmVjb3JkKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoanNvbi5za2luX3N5c3RlbSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHJlY29yZCA9IF9jcmVhdGVFbXB0eVRpc3N1ZXNTeXN0ZW1SZWNvcmQoKTtcclxuICAgICAgICAgICAgICAgIHJlY29yZC5pZCA9IGluZGV4O1xyXG4gICAgICAgICAgICAgICAgaW5kZXgrKztcclxuICAgICAgICAgICAgICAgIHJlY29yZC5zeXN0ZW1UeXBlID0gRG9zc2llckxpc3RzLmdldFNraW5TeXN0ZW1WYWx1ZSgpO1xyXG4gICAgICAgICAgICAgICAgcmVjb3JkLnN5c3RlbSA9IF9nZXRTa2luTW9kZWwoanNvbi5za2luX3N5c3RlbSk7XHJcbiAgICAgICAgICAgICAgICByZWNvcmQub3RoZXJEZXRhaWxzID0gcmVjb3JkLnN5c3RlbS5vdGhlckRldGFpbHM7XHJcbiAgICAgICAgICAgICAgICByZWNvcmQuZGV0YWlsc0NvbmNhdCA9IF9nZXRDb25jYXRUaXNzdWVzKHJlY29yZC5zeXN0ZW0pO1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2gocmVjb3JkKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gX2dldENhcmRpb01vZGVsKGpzb24pIHtcclxuICAgICAgICAgICAgdmFyIG1vZGVsID0gX2NyZWF0ZUVtcHR5Q2FyZGlvU3lzdGVtTW9kZWwoKTtcclxuICAgICAgICAgICAgbW9kZWwuaGVhcnRQZXJpY2FyZGl1bSA9IGpzb24uaGVhcnRfcGVyaWNhcmRpdW0gPT09IHllc1ZhbHVlO1xyXG4gICAgICAgICAgICBtb2RlbC5sdW5nID0ganNvbi5sdW5nID09PSB5ZXNWYWx1ZTtcclxuICAgICAgICAgICAgbW9kZWwubmFzYWxGbHVpZCA9IGpzb24ubmFzYWxfZmx1aWQgPT09IHllc1ZhbHVlO1xyXG4gICAgICAgICAgICBtb2RlbC50cmFjaGVhID0ganNvbi50cmFjaGVhID09PSB5ZXNWYWx1ZTtcclxuICAgICAgICAgICAgbW9kZWwub3RoZXJDYXJkaW8gPSBqc29uLm90aGVyX2NhcmRpb19yZXNwaXJhdG9yeSA9PT0geWVzVmFsdWU7XHJcbiAgICAgICAgICAgIG1vZGVsLm90aGVyRGV0YWlscyA9IGpzb24ub3RoZXJfY2FyZGlvX3Jlc3BpcmF0b3J5X2RldGFpbHM7XHJcbiAgICAgICAgICAgIHJldHVybiBtb2RlbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIF9nZXROZXJ2b3VzTW9kZWwoanNvbikge1xyXG4gICAgICAgICAgICB2YXIgbW9kZWwgPSBfY3JlYXRlRW1wdHlOZXJ2b3VzU3lzdGVtTW9kZWwoKTtcclxuICAgICAgICAgICAgbW9kZWwuYnJhaW4gPSBqc29uLmJyYWluID09PSB5ZXNWYWx1ZTtcclxuICAgICAgICAgICAgbW9kZWwuYnJhaW5TdGVtID0ganNvbi5icmFpbl9zdGVtID09PSB5ZXNWYWx1ZTtcclxuICAgICAgICAgICAgbW9kZWwuY2VyZWJlbGx1bSA9IGpzb24uY2VyZWJlbGx1bSA9PT0geWVzVmFsdWU7XHJcbiAgICAgICAgICAgIG1vZGVsLmNlcm9GbHVpZCA9IGpzb24uY2VyZWJyb3NwaW5hbF9mbHVpZCA9PT0geWVzVmFsdWU7XHJcbiAgICAgICAgICAgIG1vZGVsLmRvcnNhbFJvb3QgPSBqc29uLmRvcnNhbF9yb290X2dhbmdsaWEgPT09IHllc1ZhbHVlO1xyXG4gICAgICAgICAgICBtb2RlbC5kdXJhTWF0ZXIgPSBqc29uLmR1cmFfbWF0ZXIgPT09IHllc1ZhbHVlO1xyXG4gICAgICAgICAgICBtb2RlbC5oeXBvdGhhbGFtdXMgPSBqc29uLmh5cG90aGFsYW11cyA9PT0geWVzVmFsdWU7XHJcbiAgICAgICAgICAgIG1vZGVsLnJldGluYSA9IGpzb24ucmV0aW5hX29wdGljID09PSB5ZXNWYWx1ZTtcclxuICAgICAgICAgICAgbW9kZWwuc3BpbmFsQ29yZCA9IGpzb24uc3BpbmFsX2NvcmQgPT09IHllc1ZhbHVlO1xyXG4gICAgICAgICAgICBtb2RlbC50cmlnZW1pbmFsID0ganNvbi50cmlnZXJtaW5hbF9nYW5nbGlhID09PSB5ZXNWYWx1ZTtcclxuICAgICAgICAgICAgbW9kZWwub3RoZXJOZXJ2b3VzID0ganNvbi5vdGhlcl9uZXJ2b3VzID09PSB5ZXNWYWx1ZTtcclxuICAgICAgICAgICAgbW9kZWwub3RoZXJEZXRhaWxzID0ganNvbi5vdGhlcl9uZXJ2b3VzX2RldGFpbHM7XHJcbiAgICAgICAgICAgIHJldHVybiBtb2RlbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIF9nZXRSZXByb2R1Y3RpdmVNb2RlbChqc29uKSB7XHJcbiAgICAgICAgICAgIHZhciBtb2RlbCA9IF9jcmVhdGVFbXB0eVJlcHJvZHVjdGl2ZVN5c3RlbU1vZGVsKCk7XHJcbiAgICAgICAgICAgIG1vZGVsLm1pbGtQcm9kdWN0cyA9IGpzb24ubWlsa19wcm9kdWN0cyA9PT0geWVzVmFsdWU7XHJcbiAgICAgICAgICAgIG1vZGVsLmtpZG5leSA9IGpzb24ua2lkbmV5ID09PSB5ZXNWYWx1ZTtcclxuICAgICAgICAgICAgbW9kZWwuY29sb3N0cnVtID0ganNvbi5jb2xvc3RydW0gPT09IHllc1ZhbHVlO1xyXG4gICAgICAgICAgICBtb2RlbC5tYW1tYXJ5R2xhbmRzID0ganNvbi5tYW1tYXJ5X2dsYW5kcyA9PT0geWVzVmFsdWU7XHJcbiAgICAgICAgICAgIG1vZGVsLm92YXJpZXMgPSBqc29uLm92YXJpZXMgPT09IHllc1ZhbHVlO1xyXG4gICAgICAgICAgICBtb2RlbC5wbGFjZW50YSA9IGpzb24ucGxhY2VudGEgPT09IHllc1ZhbHVlO1xyXG4gICAgICAgICAgICBtb2RlbC5wbGFjZW50YWxGbHVpZCA9IGpzb24ucGxhY2VudGFsX2ZsdWlkID09PSB5ZXNWYWx1ZTtcclxuICAgICAgICAgICAgbW9kZWwuc2VtZW4gPSBqc29uLnNlbWVuID09PSB5ZXNWYWx1ZTtcclxuICAgICAgICAgICAgbW9kZWwudGVzdGVzID0ganNvbi50ZXN0ZXMgPT09IHllc1ZhbHVlO1xyXG4gICAgICAgICAgICBtb2RlbC51cmluZSA9IGpzb24udXJpbmUgPT09IHllc1ZhbHVlO1xyXG4gICAgICAgICAgICBtb2RlbC5vdGhlclJlcHJvZHVjdGl2ZSA9IGpzb24ub3RoZXJfcmVwcm9kdWN0aXZlID09PSB5ZXNWYWx1ZTtcclxuICAgICAgICAgICAgbW9kZWwub3RoZXJEZXRhaWxzID0ganNvbi5vdGhlcl9yZXByb2R1Y3RpdmVfZGV0YWlscztcclxuICAgICAgICAgICAgcmV0dXJuIG1vZGVsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gX2dldFNraW5Nb2RlbChqc29uKSB7XHJcbiAgICAgICAgICAgIHZhciBtb2RlbCA9IF9jcmVhdGVFbXB0eVNraW5TeXN0ZW1Nb2RlbCgpO1xyXG4gICAgICAgICAgICBtb2RlbC5hZHJlbmFsR2xhbmQgPSBqc29uLmFkcmVuYWxfZ2xhbmQgPT09IHllc1ZhbHVlO1xyXG4gICAgICAgICAgICBtb2RlbC5oYWlySG9vdmVzRmVhdGhlcnMgPSBqc29uLmhhaXJfaG9vdmVzX2ZlYXRoZXJzID09PSB5ZXNWYWx1ZTtcclxuICAgICAgICAgICAgbW9kZWwubGl2ZXIgPSBqc29uLmxpdmVyID09PSB5ZXNWYWx1ZTtcclxuICAgICAgICAgICAgbW9kZWwucGFuY3JlYXMgPSBqc29uLnBhbmNyZWFzID09PSB5ZXNWYWx1ZTtcclxuICAgICAgICAgICAgbW9kZWwucGl0dWl0YXJ5ID0ganNvbi5waXR1aXRhcnkgPT09IHllc1ZhbHVlO1xyXG4gICAgICAgICAgICBtb2RlbC5za2luSGlkZXMgPSBqc29uLnNraW5faGlkZXMgPT09IHllc1ZhbHVlO1xyXG4gICAgICAgICAgICBtb2RlbC50aHlyb2lkUGFyYXRoeXJvaWQgPSBqc29uLnRoeXJvaWRfcGFyYXRoeXJvaWQgPT09IHllc1ZhbHVlO1xyXG4gICAgICAgICAgICBtb2RlbC5vdGhlclNraW4gPSBqc29uLm90aGVyX3NraW5fZ2xhbmR1bGFyID09PSB5ZXNWYWx1ZTtcclxuICAgICAgICAgICAgbW9kZWwub3RoZXJEZXRhaWxzID0ganNvbi5vdGhlcl9za2luX2dsYW5kdWxhcl9kZXRhaWxzO1xyXG4gICAgICAgICAgICByZXR1cm4gbW9kZWw7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gX2dldEltbXVuZU1vZGVsKGpzb24pIHtcclxuICAgICAgICAgICAgdmFyIG1vZGVsID0gX2NyZWF0ZUVtcHR5SW1tdW5lU3lzdGVtTW9kZWwoKTtcclxuICAgICAgICAgICAgbW9kZWwubHltcGhOb2RlcyA9IGpzb24ubHltcGhfbm9kZXMgPT09IHllc1ZhbHVlO1xyXG4gICAgICAgICAgICBtb2RlbC5zcGxlZW4gPSBqc29uLnNwbGVlbiA9PT0geWVzVmFsdWU7XHJcbiAgICAgICAgICAgIG1vZGVsLnRoeW11cyA9IGpzb24udGh5bXVzID09PSB5ZXNWYWx1ZTtcclxuICAgICAgICAgICAgbW9kZWwudG9uc2lscyA9IGpzb24udG9uc2lscyA9PT0geWVzVmFsdWU7XHJcbiAgICAgICAgICAgIG1vZGVsLm90aGVySW1tdW5lID0ganNvbi5vdGhlcl9pbW11bmUgPT09IHllc1ZhbHVlO1xyXG4gICAgICAgICAgICBtb2RlbC5vdGhlckRldGFpbHMgPSBqc29uLm90aGVyX2ltbXVuZV9kZXRhaWxzO1xyXG4gICAgICAgICAgICByZXR1cm4gbW9kZWw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBfZ2V0RGlnZXN0aXZlTW9kZWwoanNvbikge1xyXG4gICAgICAgICAgICB2YXIgbW9kZWwgPSBfY3JlYXRlRW1wdHlEaWdlc3RpdmVTeXN0ZW1Nb2RlbCgpO1xyXG4gICAgICAgICAgICBtb2RlbC5hcHBlbmRpeCA9IGpzb24uYXBwZW5kaXggPT09IHllc1ZhbHVlO1xyXG4gICAgICAgICAgICBtb2RlbC5iaWxlID0ganNvbi5iaWxlID09PSB5ZXNWYWx1ZTtcclxuICAgICAgICAgICAgbW9kZWwuZGlzdGFsSWxldW0gPSBqc29uLmRpc3RhbF9pbGV1bSA9PT0geWVzVmFsdWU7XHJcbiAgICAgICAgICAgIG1vZGVsLmxhcmdlSW50ZXN0aW5lID0ganNvbi5sYXJnZV9pbnRlc3RpbmUgPT09IHllc1ZhbHVlO1xyXG4gICAgICAgICAgICBtb2RlbC5zYWxpdmFTYWxpdmFyeSA9IGpzb24uc2FsaXZhX3NhbGl2YXJ5ID09PSB5ZXNWYWx1ZTtcclxuICAgICAgICAgICAgbW9kZWwuc21hbGxJbnRlc3RpbmUgPSBqc29uLnNtYWxsX2ludGVzdGluZSA9PT0geWVzVmFsdWU7XHJcbiAgICAgICAgICAgIG1vZGVsLnN0b21hY2ggPSBqc29uLnN0b21hY2ggPT09IHllc1ZhbHVlO1xyXG4gICAgICAgICAgICBtb2RlbC5vdGhlckRpZ2VzdGl2ZSA9IGpzb24ub3RoZXJfZGlnZXN0aXZlID09PSB5ZXNWYWx1ZTtcclxuICAgICAgICAgICAgbW9kZWwub3RoZXJEZXRhaWxzID0ganNvbi5vdGhlcl9kaWdlc3RpdmVfZGV0YWlscztcclxuICAgICAgICAgICAgcmV0dXJuIG1vZGVsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gX2dldE90aGVyU3lzdGVtTW9kZWwoanNvbikge1xyXG4gICAgICAgICAgICB2YXIgbW9kZWwgPSBfY3JlYXRlRW1wdHlPdGhlclN5c3RlbU1vZGVsKCk7XHJcbiAgICAgICAgICAgIG1vZGVsLmFkaXBvc2UgPSBqc29uLmFkaXBvc2UgPT09IHllc1ZhbHVlO1xyXG4gICAgICAgICAgICBtb2RlbC5hc2NpdGVzID0ganNvbi5hc2NpdGVzID09PSB5ZXNWYWx1ZTtcclxuICAgICAgICAgICAgbW9kZWwuYW50bGVyVmVsdmV0ID0ganNvbi5hbnRsZXJfdmVsdmV0ID09PSB5ZXNWYWx1ZTtcclxuICAgICAgICAgICAgbW9kZWwuc2VydW0gPSBqc29uLnNlcnVtID09PSB5ZXNWYWx1ZTtcclxuICAgICAgICAgICAgbW9kZWwud2hvbGVCbG9vZCA9IGpzb24ud2hvbGVfYmxvb2QgPT09IHllc1ZhbHVlO1xyXG4gICAgICAgICAgICBtb2RlbC5wbGFzbWEgPSBqc29uLnBsYXNtYSA9PT0geWVzVmFsdWU7XHJcbiAgICAgICAgICAgIG1vZGVsLmVtYnJ5b25pY1Rpc3N1ZSA9IGpzb24uZW1icnlvbmljX3Rpc3N1ZSA9PT0geWVzVmFsdWU7XHJcbiAgICAgICAgICAgIG1vZGVsLmZldGFsVGlzc3VlID0ganNvbi5mZXRhbF90aXNzdWUgPT09IHllc1ZhbHVlO1xyXG4gICAgICAgICAgICBtb2RlbC5ib25lTWFycm93ID0ganNvbi5ib25lX21hcnJvdyA9PT0geWVzVmFsdWU7XHJcbiAgICAgICAgICAgIG1vZGVsLmV5ZXNDb3JuZWEgPSBqc29uLmV5ZXNfY29ybmVhID09PSB5ZXNWYWx1ZTtcclxuICAgICAgICAgICAgbW9kZWwuZ2FsbEJsYWRkZXIgPSBqc29uLmdhbGxfYmxhZGRlciA9PT0geWVzVmFsdWU7XHJcbiAgICAgICAgICAgIG1vZGVsLm90aGVyRmx1aWRzID0ganNvbi5vdGhlcl9mbHVpZHNfdGlzc3VlcyA9PT0geWVzVmFsdWU7XHJcbiAgICAgICAgICAgIG1vZGVsLm90aGVyRGV0YWlscyA9IGpzb24ub3RoZXJfZmx1aWRzX3Rpc3N1ZXNfZGV0YWlscztcclxuICAgICAgICAgICAgcmV0dXJuIG1vZGVsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gX2dldE11c2NsZVN5c3RlbU1vZGVsKGpzb24pIHtcclxuICAgICAgICAgICAgdmFyIG1vZGVsID0gX2NyZWF0ZUVtcHR5TXVzY2xlU3lzdGVtTW9kZWwoKTtcclxuICAgICAgICAgICAgbW9kZWwuYWJkb21lbiA9IGpzb24uYWJkb21lbiA9PT0geWVzVmFsdWU7XHJcbiAgICAgICAgICAgIG1vZGVsLnNrdWxsID0ganNvbi5za3VsbCA9PT0geWVzVmFsdWU7XHJcbiAgICAgICAgICAgIG1vZGVsLmJvbmVzID0ganNvbi5ib25lcyA9PT0geWVzVmFsdWU7XHJcbiAgICAgICAgICAgIG1vZGVsLmNvbGxhZ2VuID0ganNvbi5jb2xsYWdlbiA9PT0geWVzVmFsdWU7XHJcbiAgICAgICAgICAgIG1vZGVsLnRlbmRvbnNMaWdhbWVudHMgPSBqc29uLnRlbmRvbnNfbGlnYW1lbnRzID09PSB5ZXNWYWx1ZTtcclxuICAgICAgICAgICAgbW9kZWwudmVydGVicmFsQ29sdW1uID0ganNvbi52ZXJ0ZWJyYWxfY29sdW1uID09PSB5ZXNWYWx1ZTtcclxuICAgICAgICAgICAgbW9kZWwubXVzY2xlID0ganNvbi5tdXNjbGUgPT09IHllc1ZhbHVlO1xyXG4gICAgICAgICAgICBtb2RlbC5vdGhlck11c2NsZSA9IGpzb24ub3RoZXJfbXVzY3Vsb19za2VsZXRhbCA9PT0geWVzVmFsdWU7XHJcbiAgICAgICAgICAgIG1vZGVsLm90aGVyRGV0YWlscyA9IGpzb24ub3RoZXJfbXVzY3Vsb19za2VsZXRhbF9kZXRhaWxzO1xyXG4gICAgICAgICAgICByZXR1cm4gbW9kZWw7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gX2dldENvbmNhdFRpc3N1ZXMoanNvbikge1xyXG4gICAgICAgICAgICB2YXIgbGFiZWxMb29rdXAgPSBEb3NzaWVyTGlzdHMuZ2V0VGlzc3Vlc0ZsdWlkc0xhYmVscygpO1xyXG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gXCJcIjtcclxuICAgICAgICAgICAgdmFyIG1hcmt1cEJyZWFrID0gXCI8YnI+XCI7XHJcbiAgICAgICAgICAgIGlmIChhbmd1bGFyLmlzVW5kZWZpbmVkKGpzb24pKSByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgICAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGpzb24pO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHZhciB2YWwgPSBqc29uW2tleXNbaV1dO1xyXG4gICAgICAgICAgICAgICAgaWYgKHZhbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBhbGlhcyA9IGxhYmVsTG9va3VwW2tleXNbaV1dO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChhbGlhcykgeyAvL3RoaXMgd2lsbCBmaWx0ZXIgb3V0IHRoZSBvdGhlclxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY3VycmVudExhbmcgPSAkdHJhbnNsYXRlLnByb3Bvc2VkTGFuZ3VhZ2UoKSB8fCAkdHJhbnNsYXRlLnVzZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdHJhbnNsYXRlVGV4dCA9ICR0cmFuc2xhdGUuaW5zdGFudChhbGlhcywgXCJcIiwgJycsIGN1cnJlbnRMYW5nKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gcmVzdWx0ICsgdHJhbnNsYXRlVGV4dCArIG1hcmt1cEJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoa2V5cy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICByZXN1bHQgPSByZXN1bHQuc3Vic3RyaW5nKDAsIChyZXN1bHQubGVuZ3RoIC0gbWFya3VwQnJlYWsubGVuZ3RoKSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICB9XHJcblxyXG5cclxufSlcclxuKCk7XHJcbiIsIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IGRraWx0eSBvbiA4LzI1LzIwMTYuXHJcbiAqL1xyXG5cclxuXHJcbihmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgnZG9zc2llckxvYWRNb2R1bGUnLCBbJ2RhdGFMaXN0cycsICdkb3NzaWVyRGF0YUxpc3RzJywgJ2hwZmJDb25zdGFudHMnXSlcclxufSkoKTtcclxuXHJcbihmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgnZG9zc2llckxvYWRNb2R1bGUnKVxyXG4gICAgICAgIC5mYWN0b3J5KCdjdXN0b21Mb2FkJywgWyckaHR0cCcsICckcScsICckZmlsdGVyJywgJ2dldENvdW50cnlBbmRQcm92aW5jZXMnLCAnRG9zc2llckxpc3RzJywgJ09USEVSJywgZnVuY3Rpb24gKCRodHRwLCAkcSwgJGZpbHRlciwgZ2V0Q291bnRyeUFuZFByb3ZpbmNlcywgRG9zc2llckxpc3RzLCBPVEhFUikge1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChvcHRpb25zKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZGVmZXJyZWQgPSAkcS5kZWZlcigpO1xyXG4gICAgICAgICAgICAgICAgdmFyIGRhdGFGb2xkZXIgPSBcImRhdGEvXCI7IC8vcmVsYXRpdmUgZm9ybGRlciB0byB0aGUgZGF0YVxyXG4gICAgICAgICAgICAgICAgdmFyIHJvYVVybCA9IGRhdGFGb2xkZXIgKyBcInJvYS5qc29uXCI7XHJcbiAgICAgICAgICAgICAgICB2YXIgY291bnRyeVVybCA9IGRhdGFGb2xkZXIgKyBcImNvdW50cmllcy5qc29uXCI7XHJcbiAgICAgICAgICAgICAgICB2YXIgbmFub1VybCA9IFwiZGF0YS9uYW5vbWF0ZXJpYWxzLmpzb25cIjtcclxuICAgICAgICAgICAgICAgIHZhciB1bml0c1VybCA9IGRhdGFGb2xkZXIgKyBcInVuaXRzLmpzb25cIjtcclxuICAgICAgICAgICAgICAgIHZhciBkb3NhZ2VGb3JtVXJsID0gZGF0YUZvbGRlciArIFwiZG9zYWdlRm9ybS5qc29uXCI7XHJcbiAgICAgICAgICAgICAgICB2YXIgcmVzdWx0VHJhbnNsYXRlTGlzdCA9IHt9O1xyXG4gICAgICAgICAgICAgICAgJGh0dHAuZ2V0KHVuaXRzVXJsKVxyXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL1BST0NFU1MgdW5pdHMgbGlzdC4gTm90IGNyZWF0aW5nIHRyYW5zbGF0ZSBsaXN0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuZXdMaXN0ID0gX2NyZWF0ZU5ld1NvcnRlZEFycmF5V2l0aE90aGVyKHJlc3BvbnNlLmRhdGEsIERvc3NpZXJMaXN0cy5nZXRVbml0c1ByZWZpeCgpLG9wdGlvbnMua2V5KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgRG9zc2llckxpc3RzLmNyZWF0ZVVuaXRzTGlzdChuZXdMaXN0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9ub3QgYWRkaW5nIHVuaXRzIHRvIHRyYW5zbGF0aW9uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkaHR0cC5nZXQoY291bnRyeVVybCk7IC8vY291bnRyeSBsaXN0IGxvYWRcclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL1BST0NFU1MgY291bnRyeSBsaXN0IGRhdGFcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG5ld0xpc3QgPSAgX2NyZWF0ZVNvcnRlZEFycmF5KHJlc3BvbnNlLmRhdGEsb3B0aW9ucy5rZXkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdHJhbnNsYXRlTGlzdCA9IF9jcmVhdGVUcmFuc2xhdGVMaXN0KG5ld0xpc3QsIG9wdGlvbnMua2V5KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZ2V0Q291bnRyeUFuZFByb3ZpbmNlcy5jcmVhdGVDb3VudHJ5TGlzdChuZXdMaXN0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmV4dGVuZChyZXN1bHRUcmFuc2xhdGVMaXN0LCB0cmFuc2xhdGVMaXN0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRodHRwLmdldChuYW5vVXJsKTsgLy9uYW5vbWF0ZXJpYWwgbG9hZFxyXG5cclxuICAgICAgICAgICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbmV3TGlzdCA9ICBfY3JlYXRlTmV3U29ydGVkQXJyYXlXaXRoT3RoZXIocmVzcG9uc2UuZGF0YSwgRG9zc2llckxpc3RzLmdldE5hbm9QcmVmaXgoKSxvcHRpb25zLmtleSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0cmFuc2xhdGVMaXN0ID0gX2NyZWF0ZVRyYW5zbGF0ZUxpc3QobmV3TGlzdCwgb3B0aW9ucy5rZXkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBEb3NzaWVyTGlzdHMuY3JlYXRlTmFub21hdGVyaWFsTGlzdChuZXdMaXN0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5leHRlbmQocmVzdWx0VHJhbnNsYXRlTGlzdCwgdHJhbnNsYXRlTGlzdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkaHR0cC5nZXQoZG9zYWdlRm9ybVVybCk7IC8vZG9zYWdlIGZvcm0gbGlzdCBMb2FkIGNvbnRhaW5zIGJvdGggbGFuZ3VhZ2VzXHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9QUk9DRVNTSU5HOiBET1NBR0UgRk9STSBsaXN0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuZXdMaXN0ID0gX2NyZWF0ZU5ld1NvcnRlZEFycmF5V2l0aE90aGVyKHJlc3BvbnNlLmRhdGEsIERvc3NpZXJMaXN0cy5nZXREb3NhZ2VGb3JtUHJlZml4KCksb3B0aW9ucy5rZXkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdHJhbnNsYXRlTGlzdCA9IF9jcmVhdGVUcmFuc2xhdGVMaXN0KG5ld0xpc3QsIG9wdGlvbnMua2V5KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgRG9zc2llckxpc3RzLmNyZWF0ZURvc2FnZUZvcm1MaXN0KG5ld0xpc3QpOyAvL2ZvciBkaXNwbGF5XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZXh0ZW5kKHJlc3VsdFRyYW5zbGF0ZUxpc3QsIHRyYW5zbGF0ZUxpc3QpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJGh0dHAuZ2V0KFwiZGF0YS9hY3RpdmVJbmdyZWQuanNvblwiKTsgLy9hY3RpdmUgaW5ncmVkaWVudCBsaXN0IGxvYWRcclxuICAgICAgICAgICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIERvc3NpZXJMaXN0cy5zZXRBY3RpdmVMaXN0KHJlc3BvbnNlLmRhdGEpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAkaHR0cC5nZXQocm9hVXJsKTsgLy9yb2EgbG9hZFxyXG4gICAgICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG5ld0xpc3QgPSBfY3JlYXRlTmV3U29ydGVkQXJyYXlXaXRoT3RoZXIocmVzcG9uc2UuZGF0YSwgRG9zc2llckxpc3RzLmdldFJvYVByZWZpeCgpLG9wdGlvbnMua2V5KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRyYW5zbGF0ZUxpc3QgPSBfY3JlYXRlVHJhbnNsYXRlTGlzdChuZXdMaXN0LCBvcHRpb25zLmtleSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIERvc3NpZXJMaXN0cy5jcmVhdGVSb2FMaXN0KG5ld0xpc3QpOyAvL2ZvciBkaXNwbGF5XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZXh0ZW5kKHJlc3VsdFRyYW5zbGF0ZUxpc3QsIHRyYW5zbGF0ZUxpc3QpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UuZGF0YTtcclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgIC5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdGhpcyBjYXRjaGVzIGVycm9ycyBmcm9tIHRoZSAkaHR0cCBjYWxscyBhcyB3ZWxsIGFzIGZyb20gdGhlIGV4cGxpY2l0IHRocm93XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihcIkFuIGVycm9yIG9jY3VycmVkIHdpdGggRG9zc2llciBMaXN0IExvYWQ6IFwiICsgZXJyb3IpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZWplY3QocmVzdWx0VHJhbnNsYXRlTGlzdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAuZmluYWxseShmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUocmVzdWx0VHJhbnNsYXRlTGlzdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiBDcmVhdGVzIHRoZSBsaXN0IG9mIGtleSB2YWx1ZSBwYWlycyBmb3IgdGhlIHRyYW5zbGF0ZSBzZXJ2aWNlLiBDb252ZXJ0cyB0aGUgY29tcGxleCBqc29uXHJcbiAgICAgICAgICAgICAqIE9mIHRoZSBmb3JtYXQge2lkOnh4eCxlbjp4eHgsZnI6eHh4eH0uIChDYW4gY29udGFpbiBvdGhlciBrZXlzKVxyXG4gICAgICAgICAgICAgKiBAcGFyYW0ganNvbkxpc3RcclxuICAgICAgICAgICAgICogQHBhcmFtIGxhbmdcclxuICAgICAgICAgICAgICogQHJldHVybnMge3t9fVxyXG4gICAgICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgZnVuY3Rpb24gX2NyZWF0ZVRyYW5zbGF0ZUxpc3QoanNvbkxpc3QsIGxhbmcpIHtcclxuICAgICAgICAgICAgICAgIC8vIHZhciBsYW5nSW5kZXg9MTtcclxuICAgICAgICAgICAgICAgIGlmICghbGFuZykgbGFuZyA9ICdlbic7XHJcbiAgICAgICAgICAgICAgICB2YXIgcmVzdWx0TGlzdCA9IHt9O1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBqc29uTGlzdC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdExpc3RbanNvbkxpc3RbaV0uaWRdID0ganNvbkxpc3RbaV1bbGFuZ107XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0TGlzdDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIFJlcGxhY2VzIHRoZSBvcmlnaW5hbCBrZXkgd2l0aCBvbmUgdGhhdCBpcyBwcmVmaXhlZCB3aXRoIHRoZSBwYXNzZWQgaW4gc3RyaW5nXHJcbiAgICAgICAgICAgICAqIEBwYXJhbSBvbGRMaXN0XHJcbiAgICAgICAgICAgICAqIEBwYXJhbSBwcmVmaXhcclxuICAgICAgICAgICAgICogQHJldHVybnMge3t9fVxyXG4gICAgICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgZnVuY3Rpb24gX2NyZWF0ZU5ld0tleUFycmF5KG9sZExpc3QsIHByZWZpeCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvbGRMaXN0KTtcclxuICAgICAgICAgICAgICAgIHZhciBuZXdMaXN0ID0ge307XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbmV3S2V5ID0gXCJcIjtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoRG9zc2llckxpc3RzLmdldE90aGVyVmFsdWUoKSA9PT0ga2V5c1tpXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdLZXkgPSBrZXlzW2ldO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld0tleSA9IHByZWZpeCArIGtleXNbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBuZXdPYmogPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICBuZXdMaXN0W25ld0tleV0gPSBvbGRMaXN0W2tleXNbaV1dO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ld0xpc3Q7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiBDcmVhdGVzIG5ldyBrZXlzIGJhc2VkIG9uIGEgc3BlY2lmaWMganNvbiBzeW50YXhcclxuICAgICAgICAgICAgICogQHBhcmFtIGpzb25MaXN0XHJcbiAgICAgICAgICAgICAqIEBwYXJhbSBwcmVmaXhcclxuICAgICAgICAgICAgICogQHBhcmFtIGxhbmdcclxuICAgICAgICAgICAgICogQHJldHVybnMge0FycmF5fVxyXG4gICAgICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgZnVuY3Rpb24gX2NyZWF0ZU5ld1NvcnRlZEFycmF5V2l0aE90aGVyKGpzb25MaXN0LCBwcmVmaXgsbGFuZykge1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciBuZXdMaXN0ID0gX2NyZWF0ZU5ld1ByZWZpeExpc3QoanNvbkxpc3QsIHByZWZpeCk7XHJcbiAgICAgICAgICAgICAgICAvL2dvdCB0aGUgbmV3IGxpc3QsIHNvcnQgaXQgYnkgdGhlIGN1cnJlbnQgbGFuZ3VhZ2VcclxuICAgICAgICAgICAgICAgIGlmKCFsYW5nKSBsYW5nPSdlbic7IC8vVE9ETyBtYWdpYyBudW1iZXJcclxuICAgICAgICAgICAgICAgIHZhciByZXN1bHQ9X2NyZWF0ZVNvcnRlZEFycmF5KG5ld0xpc3QsbGFuZyk7XHJcbiAgICAgICAgICAgICAgICAvL2FkZCBPdGhlciB0byB0aGUgYmVnaW5uaW5nIG9mIHRoZSBhcnJheVxyXG4gICAgICAgICAgICAgICAgcmVzdWx0LnVuc2hpZnQoe1wiaWRcIjogT1RIRVIsIFwiZW5cIjogXCJPdGhlclwiLCBcImZyXCI6IFwiQXV0cmVcIn0pO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIENyZWF0ZXMgc29ydGVkIGFycmF5LCB3aWxsIGV4Y2x1ZGUgYW55IG90aGVyIHZhbHVlc1xyXG4gICAgICAgICAgICAgKiBAcGFyYW0ganNvbkxpc3RcclxuICAgICAgICAgICAgICogQHBhcmFtIGxhbmdcclxuICAgICAgICAgICAgICogQHJldHVybnMge0FycmF5fVxyXG4gICAgICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgZnVuY3Rpb24gX2NyZWF0ZVNvcnRlZEFycmF5KGpzb25MaXN0LGxhbmcpe1xyXG4gICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IFtdO1xyXG4gICAgICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKCRmaWx0ZXIoJ29yZGVyQnlMb2NhbGUnKShqc29uTGlzdCxsYW5nKSwgZnVuY3Rpb24gKHNvcnRlZE9iamVjdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzb3J0ZWRPYmplY3Qua2V5ICE9PSBPVEhFUikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaChzb3J0ZWRPYmplY3QpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiBJbmplY3RzIGEgcHJlZml4IHRvIG1ha2UgdGhlIGtleXMgdW5pcXVlIGZvciB0aGUgZm9ybS4gV29ya3MgYXJvdW5kIG5vbnVuaXF1ZSB1c2VyIGxpc3RzXHJcbiAgICAgICAgICAgICAqIEBwYXJhbSBqc29uTGlzdFxyXG4gICAgICAgICAgICAgKiBAcGFyYW0gcHJlZml4XHJcbiAgICAgICAgICAgICAqIEByZXR1cm5zIHtBcnJheX1cclxuICAgICAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIF9jcmVhdGVOZXdQcmVmaXhMaXN0KGpzb25MaXN0LCBwcmVmaXgpIHtcclxuICAgICAgICAgICAgICAgIHZhciBuZXdMaXN0ID0gW107XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGpzb25MaXN0Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5ld1JlYyA9IGFuZ3VsYXIuY29weShqc29uTGlzdFtpXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgbmV3UmVjLmlkID0gcHJlZml4ICsgbmV3UmVjLmlkO1xyXG4gICAgICAgICAgICAgICAgICAgIG5ld0xpc3QucHVzaChuZXdSZWMpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ld0xpc3Q7XHJcbiAgICAgICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIH1dKTtcclxufSkoKTtcclxuXHJcblxyXG5cclxuIiwiLyoqXHJcbiAqIENyZWF0ZWQgYnkgZGtpbHR5IG9uIDkvMTgvMjAxNi5cclxuICovXHJcbi8qKlxyXG4gKiBDcmVhdGVkIGJ5IGRraWx0eSBvbiA2LzQvMjAxNi5cclxuICovXHJcblxyXG5cclxuKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgnZG9zc2llckRhdGFMaXN0cycsIFtdKTtcclxuXHJcbn0pKCk7XHJcblxyXG4vKipcclxuICogZ2V0Q291bnRyeUFuZFByb3ZpbmNlcyBzZXJ2aWNlc1xyXG4gKiBSZXR1cm5zIENhbmFkYSBvciBVUyBjb25kZXMsIGNhbmFkYSBwcm92aW5jZXMsIHVzIHN0YXRlc1xyXG4gKi9cclxuKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgnZG9zc2llckRhdGFMaXN0cycpXHJcbiAgICAgICAgLmZhY3RvcnkoJ0Rvc3NpZXJMaXN0cycsIGdldFNlcnZpY2UpO1xyXG5cclxuICAgIC8qIEBuZ0luamVjdCAqL1xyXG4gICAgZnVuY3Rpb24gZ2V0U2VydmljZSgpIHtcclxuICAgICAgICB2YXIgT1RIRVIgPSBcIk9USEVSXCI7XHJcbiAgICAgICAgdmFyIFlFUyA9ICdZJztcclxuICAgICAgICB2YXIgdm0gPSB0aGlzO1xyXG4gICAgICAgIHZtLnJvYUxpc3QgPSBbXTtcclxuICAgICAgICB2bS5uYW5vTGlzdCA9IFtdO1xyXG4gICAgICAgIHZtLmRvc2FnZUZvcm1MaXN0ID0gW107XHJcbiAgICAgICAgdm0uYWN0aXZlTGlzdCA9IFtdO1xyXG4gICAgICAgIHZtLnVuaXRzTGlzdCA9IFtdO1xyXG4gICAgICAgIC8vVE9ETyBjcmVhdGUgZ2V0dGVycy9zZXR0ZXJzPyBzYWZlciBhcyBpc1xyXG4gICAgICAgIHZhciBzZXJ2aWNlID0ge1xyXG4gICAgICAgICAgICBzZXRBY3RpdmVMaXN0OiBfc2V0QWN0aXZlQXJyYXksXHJcbiAgICAgICAgICAgIGdldEFjdGl2ZUxpc3Q6IF9nZXRBY3RpdmVBcnJheSxcclxuICAgICAgICAgICAgY3JlYXRlUm9hTGlzdDogX2NyZWF0ZVJvYUFycmF5LFxyXG4gICAgICAgICAgICBjcmVhdGVVbml0c0xpc3Q6IF9jcmVhdGVVbml0c0FycmF5LFxyXG4gICAgICAgICAgICBjcmVhdGVOYW5vbWF0ZXJpYWxMaXN0OiBfY3JlYXRlTmFub0FycmF5LFxyXG4gICAgICAgICAgICBjcmVhdGVEb3NhZ2VGb3JtTGlzdDogX2NyZWF0ZURvc2FnZUZvcm1BcnJheSxcclxuICAgICAgICAgICAgZ2V0RG9zYWdlRm9ybUxpc3Q6IGdldERvc2FnZUZvcm1zQXJyYXksXHJcbiAgICAgICAgICAgIGdldFVuaXRzTGlzdDpfZ2V0VW5pdHNBcnJheSxcclxuICAgICAgICAgICAgZ2V0RG9zYWdlT3RoZXI6IGdldERvc2VPdGhlclZhbHVlLFxyXG4gICAgICAgICAgICBnZXROYW5vTWF0ZXJpYWxzOiBnZXROYW5vTWF0ZXJpYWxBcnJheSxcclxuICAgICAgICAgICAgZ2V0Um9hOiBnZXRSb2FBcnJheSxcclxuICAgICAgICAgICAgZ2V0T3RoZXJWYWx1ZTogZ2V0T3RoZXJWYWx1ZSwgLy9UT0RPIG1ha2UgYSBjb25zdGFudCBpbnN0ZWFkXHJcbiAgICAgICAgICAgIGdldFVua25vd25WYWx1ZTogZ2V0VW5rbm93blZhbHVlLCAvL1RPRE8gbWFrZSBhIGNvbnN0YW50IGluc3RlYWRcclxuICAgICAgICAgICAgZ2V0WWVzTm9MaXN0OiB5ZXNOb0FycmF5LFxyXG4gICAgICAgICAgICBnZXRZZXNOb1Vua25vd25MaXN0OiB5ZXNOb1Vua25vd25BcnJheSxcclxuICAgICAgICAgICAgZ2V0QW5pbWFsU291cmNlczogYW5pbWFsU291cmNlc0FycmF5LFxyXG4gICAgICAgICAgICBnZXRUaXNzdWVzU3lzdGVtOiB0aXNzdWVzU3lzdGVtQXJyYXksXHJcbiAgICAgICAgICAgIGdldE5lcnZvdXNTeXN0ZW06IG5lcnZvdXNTeXN0ZW1BcnJheSxcclxuICAgICAgICAgICAgZ2V0RGlnZXN0aXZlU3lzdGVtOiBkaWdlc3RpdmVTeXN0ZW1BcnJheSxcclxuICAgICAgICAgICAgZ2V0SW1tdW5lU3lzdGVtOiBpbW11bmVTeXN0ZW1BcnJheSxcclxuICAgICAgICAgICAgZ2V0U2tpblN5c3RlbTogc2tpblN5c3RlbUFycmF5LFxyXG4gICAgICAgICAgICBnZXRSZXByb2RTeXN0ZW06IHJlcHJvZFN5c3RlbUFycmF5LFxyXG4gICAgICAgICAgICBnZXRPdGhlclN5c3RlbTogb3RoZXJTeXN0ZW1BcnJheSxcclxuICAgICAgICAgICAgZ2V0TXVzY2xlU3lzdGVtOiBtdXNjbGVTeXN0ZW1BcnJheSxcclxuICAgICAgICAgICAgZ2V0Q2FyZGlvU3lzdGVtOiBjYXJkaW9TeXN0ZW1BcnJheSxcclxuICAgICAgICAgICAgZ2V0RGlnZXN0aXZlU3lzdGVtVmFsdWU6IF9nZXREaWdlc3RpdmVTeXN0ZW1WYWx1ZSxcclxuICAgICAgICAgICAgZ2V0TmVydm91c1N5c3RlbVZhbHVlOiBfZ2V0TmVydm91c1N5c3RlbVZhbHVlLFxyXG4gICAgICAgICAgICBnZXRSZXByb2R1Y3RpdmVTeXN0ZW1WYWx1ZTogX2dldFJlcHJvZHVjdGl2ZVN5c3RlbVZhbHVlLFxyXG4gICAgICAgICAgICBnZXRDYXJkaW9TeXN0ZW1WYWx1ZTogX2dldENhcmRpb1N5c3RlbVZhbHVlLFxyXG4gICAgICAgICAgICBnZXRJbW11bmVTeXN0ZW1WYWx1ZTogX2dldEltbXVuZVN5c3RlbVZhbHVlLFxyXG4gICAgICAgICAgICBnZXRTa2luU3lzdGVtVmFsdWU6IF9nZXRTa2luU3lzdGVtVmFsdWUsXHJcbiAgICAgICAgICAgIGdldE11c2NsZVN5c3RlbVZhbHVlOiBfZ2V0TXVzY2xlU3lzdGVtVmFsdWUsXHJcbiAgICAgICAgICAgIGdldE90aGVyVGlzc3Vlc1N5c3RlbVZhbHVlOiBfZ2V0T3RoZXJUaXNzdWVzU3lzdGVtVmFsdWUsXHJcbiAgICAgICAgICAgIGdldFllc1ZhbHVlOiBnZXRZZXNWYWx1ZSxcclxuICAgICAgICAgICAgZ2V0VGlzc3Vlc0ZsdWlkc0xhYmVsczogX2dldFRpc3N1ZXNGbHVpZHNMYWJlbHMsXHJcbiAgICAgICAgICAgIGdldFJvYVByZWZpeDogX2dldFJvYUxpc3RQcmVmaXgsXHJcbiAgICAgICAgICAgIGdldERvc2FnZUZvcm1QcmVmaXg6IF9nZXREb3NhZ2VQcmVmaXgsXHJcbiAgICAgICAgICAgIGdldFVuaXRzUHJlZml4OiBfZ2V0VW5pdHNQcmVmaXgsXHJcbiAgICAgICAgICAgIGdldE5hbm9QcmVmaXg6IF9nZXROYW5vUHJlZml4XHJcblxyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIHNlcnZpY2U7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIF9zZXRBY3RpdmVBcnJheShkYXRhKSB7XHJcbiAgICAgICAgICAgIHZtLmFjdGl2ZUxpc3QgPSBkYXRhO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gX2dldEFjdGl2ZUFycmF5KCkge1xyXG4gICAgICAgICAgICByZXR1cm4gKHZtLmFjdGl2ZUxpc3QpO1xyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vLy8vLy8vLy8vLy8vLy9cclxuICAgICAgICBmdW5jdGlvbiBnZXREb3NlT3RoZXJWYWx1ZSgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIE9USEVSO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZ2V0WWVzVmFsdWUoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBZRVM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBnZXRVbmtub3duVmFsdWUoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBcIlVOTEtOT1dOXCI7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBnZXRPdGhlclZhbHVlKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZ2V0RG9zZU90aGVyVmFsdWUoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIF9jcmVhdGVOYW5vQXJyYXkodHJhbnNsYXRlSnNvbikge1xyXG5cclxuICAgICAgICAgICAgdm0ubmFub0xpc3QgPSB0cmFuc2xhdGVKc29uXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBfY3JlYXRlRG9zYWdlRm9ybUFycmF5KHRyYW5zbGF0ZUpzb24pIHtcclxuICAgICAgICAgICAgdm0uZG9zYWdlRm9ybUxpc3QgPSAodHJhbnNsYXRlSnNvbik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBfY3JlYXRlUm9hQXJyYXkodHJhbnNsYXRlSnNvbikge1xyXG4gICAgICAgICAgICB2bS5yb2FMaXN0ID0gKHRyYW5zbGF0ZUpzb24pO1xyXG5cclxuXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBfY3JlYXRlVW5pdHNBcnJheSh0cmFuc2xhdGVKc29uKSB7XHJcbiAgICAgICAgICAgIHZtLnVuaXRzTGlzdCA9ICh0cmFuc2xhdGVKc29uKTtcclxuXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZ1bmN0aW9uIF9nZXRVbml0c0FycmF5KCkge1xyXG4gICAgICAgICAgIHJldHVybiB2bS51bml0c0xpc3Q7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gX2dldFJvYUxpc3RQcmVmaXgoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBcIlJPQV9cIjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIF9nZXREb3NhZ2VQcmVmaXgoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBcIkRPU0ZPUk1fXCI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZ1bmN0aW9uIF9nZXRVbml0c1ByZWZpeCgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFwiVU5JVFNfXCI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZ1bmN0aW9uIF9nZXROYW5vUHJlZml4KCl7XHJcbiAgICAgICAgICAgIHJldHVybiBcIk5BTk9NQVRfXCJcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIGdldHMgdGhlIGtleXMgZm9yIGEgbGlzdCBJZiB0aGVyZSBpcyBhIHByZWZpeCxhZGQgaXRcclxuICAgICAgICAgKiBAcGFyYW0gdHJhbnNsYXRlSnNvblxyXG4gICAgICAgICAqIEBwYXJhbSBwcmVmaXhcclxuICAgICAgICAgKiBAcmV0dXJucyB7QXJyYXl9XHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBmdW5jdGlvbiBfZ2V0S2V5cyh0cmFuc2xhdGVKc29uLCBwcmVmaXgpIHtcclxuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IFtdO1xyXG4gICAgICAgICAgICBpZiAoIXByZWZpeCkge1xyXG4gICAgICAgICAgICAgICAgcHJlZml4ID0gXCJcIjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKHRyYW5zbGF0ZUpzb24pO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHZhciBhcHBlbmRlZCA9IHByZWZpeCArIGtleXNbaV07XHJcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaChhcHBlbmRlZClcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZ2V0RG9zYWdlRm9ybXNBcnJheSgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHZtLmRvc2FnZUZvcm1MaXN0O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZ2V0TmFub01hdGVyaWFsQXJyYXkoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAodm0ubmFub0xpc3QpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZ2V0Um9hQXJyYXkoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAodm0ucm9hTGlzdCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiB5ZXNOb0FycmF5KCkge1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIChbXHJcbiAgICAgICAgICAgICAgICBcIllcIixcclxuICAgICAgICAgICAgICAgIFwiTlwiXHJcbiAgICAgICAgICAgIF0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24geWVzTm9Vbmtub3duQXJyYXkoKSB7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gKFtcclxuICAgICAgICAgICAgICAgIFwiWVwiLFxyXG4gICAgICAgICAgICAgICAgXCJOXCIsXHJcbiAgICAgICAgICAgICAgICBcIlVOS05PV05cIlxyXG4gICAgICAgICAgICBdKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGFuaW1hbFNvdXJjZXNBcnJheSgpIHtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiAoW1xyXG4gICAgICAgICAgICAgICAgXCJOT05IVU1BTlBSSU1BVEVfVFlQRVwiLFxyXG4gICAgICAgICAgICAgICAgXCJBUVVBVElDX1RZUEVcIixcclxuICAgICAgICAgICAgICAgIFwiQVZJQU5fVFlQRVwiLFxyXG4gICAgICAgICAgICAgICAgXCJCT1ZJTkVfVFlQRVwiLFxyXG4gICAgICAgICAgICAgICAgXCJDQU5JTkVfVFlQRVwiLFxyXG4gICAgICAgICAgICAgICAgXCJDQVBSSU5FX1RZUEVcIixcclxuICAgICAgICAgICAgICAgIFwiQ0VSVklEQUVfVFlQRVwiLFxyXG4gICAgICAgICAgICAgICAgXCJFUVVJTkVfVFlQRVwiLFxyXG4gICAgICAgICAgICAgICAgXCJGRUxJTkVfVFlQRVwiLFxyXG4gICAgICAgICAgICAgICAgXCJPVklORV9UWVBFXCIsXHJcbiAgICAgICAgICAgICAgICBcIlBPUkNJTkVfVFlQRVwiLFxyXG4gICAgICAgICAgICAgICAgXCJST0RFTlRfVFlQRVwiLFxyXG4gICAgICAgICAgICAgICAgXCJPVEhFUkFOSU1BTF9UWVBFXCJcclxuICAgICAgICAgICAgXSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaXNzc3VlcyBhbmQgZmx1aWRzIHN5c3RlbSB0eXBlc1xyXG4gICAgICAgICAqIEByZXR1cm5zIHtzdHJpbmdbXX1cclxuICAgICAgICAgKi9cclxuICAgICAgICBmdW5jdGlvbiB0aXNzdWVzU3lzdGVtQXJyYXkoKSB7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gKFtcclxuICAgICAgICAgICAgICAgIF9nZXREaWdlc3RpdmVTeXN0ZW1WYWx1ZSgpLFxyXG4gICAgICAgICAgICAgICAgX2dldE5lcnZvdXNTeXN0ZW1WYWx1ZSgpLFxyXG4gICAgICAgICAgICAgICAgX2dldFJlcHJvZHVjdGl2ZVN5c3RlbVZhbHVlKCksXHJcbiAgICAgICAgICAgICAgICBfZ2V0Q2FyZGlvU3lzdGVtVmFsdWUoKSxcclxuICAgICAgICAgICAgICAgIF9nZXRJbW11bmVTeXN0ZW1WYWx1ZSgpLFxyXG4gICAgICAgICAgICAgICAgX2dldFNraW5TeXN0ZW1WYWx1ZSgpLFxyXG4gICAgICAgICAgICAgICAgX2dldE11c2NsZVN5c3RlbVZhbHVlKCksXHJcbiAgICAgICAgICAgICAgICBfZ2V0T3RoZXJUaXNzdWVzU3lzdGVtVmFsdWUoKVxyXG4gICAgICAgICAgICBdKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIF9nZXREaWdlc3RpdmVTeXN0ZW1WYWx1ZSgpIHtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBcIkRJR0VTVElWRV9TWVNURU1cIlxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gX2dldE5lcnZvdXNTeXN0ZW1WYWx1ZSgpIHtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBcIk5FUlZPVVNfU1lTVEVNXCJcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIF9nZXRSZXByb2R1Y3RpdmVTeXN0ZW1WYWx1ZSgpIHtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBcIlJFUFJPRFVDVF9TWVNURU1cIlxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gX2dldENhcmRpb1N5c3RlbVZhbHVlKCkge1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIFwiQ0FSRElPX1NZU1RFTVwiXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBfZ2V0SW1tdW5lU3lzdGVtVmFsdWUoKSB7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gXCJJTU1VTkVfU1lTVEVNXCJcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIF9nZXRTa2luU3lzdGVtVmFsdWUoKSB7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gXCJTS0lOR0xBTkRfU1lTVEVNXCJcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIF9nZXRNdXNjbGVTeXN0ZW1WYWx1ZSgpIHtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBcIk1VU0NVTE9fU1lTVEVNXCJcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIF9nZXRPdGhlclRpc3N1ZXNTeXN0ZW1WYWx1ZSgpIHtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBcIk9USEVSVElTU1VFX1NZU1RFTVwiXHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogTmVydm91cyBzeXN0ZW0gVGlzc3VlcyBvciBmbHVpZHMgTE9WXHJcbiAgICAgICAgICogQHJldHVybnMgeypbXX1cclxuICAgICAgICAgKi9cclxuICAgICAgICBmdW5jdGlvbiBuZXJ2b3VzU3lzdGVtQXJyYXkoKSB7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gKFtcclxuICAgICAgICAgICAgICAgIFwiQlJBSU5cIixcclxuICAgICAgICAgICAgICAgIFwiQlJBSU5TVEVNXCIsXHJcbiAgICAgICAgICAgICAgICBcIkNFUkVCRUxMVU1cIixcclxuICAgICAgICAgICAgICAgIFwiQ0VST0ZMVUlEXCIsXHJcbiAgICAgICAgICAgICAgICBcIkRPUlNBTFJPT1RcIixcclxuICAgICAgICAgICAgICAgIFwiRFVSQU1BVEVSXCIsXHJcbiAgICAgICAgICAgICAgICBcIkhZUE9USEFMQU1VU1wiLFxyXG4gICAgICAgICAgICAgICAgXCJSRVRJTkFcIixcclxuICAgICAgICAgICAgICAgIFwiU1BJTkFMQ09SRFwiLFxyXG4gICAgICAgICAgICAgICAgXCJUUklHRU1JTkFMXCIsXHJcbiAgICAgICAgICAgICAgICBcIk5FUlZPVVNfT1RIRVJcIlxyXG4gICAgICAgICAgICBdKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIERpZ2VzdGl2ZSBzeXN0ZW0gVGlzc3VlcyBvciBmbHVpZHMgTE9WXHJcbiAgICAgICAgICogQHJldHVybnMgeypbXX1cclxuICAgICAgICAgKi9cclxuICAgICAgICBmdW5jdGlvbiBkaWdlc3RpdmVTeXN0ZW1BcnJheSgpIHtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiAoW1xyXG4gICAgICAgICAgICAgICAgXCJBUFBFTkRJWFwiLFxyXG4gICAgICAgICAgICAgICAgXCJCSUxFXCIsXHJcbiAgICAgICAgICAgICAgICBcIkRJU1RBTElMRVVNXCIsXHJcbiAgICAgICAgICAgICAgICBcIkxBUkdFSU5URVNUXCIsXHJcbiAgICAgICAgICAgICAgICBcIlNBTElWQVwiLFxyXG4gICAgICAgICAgICAgICAgXCJTTUFMTElOVEVTVElORVwiLFxyXG4gICAgICAgICAgICAgICAgXCJTVE9NQUNIXCIsXHJcbiAgICAgICAgICAgICAgICBcIkRJR0VTVElWRV9PVEhFUlwiXHJcbiAgICAgICAgICAgIF0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogUmVwcm9kdWN0aXZlIHN5c3RlbSBUaXNzdWVzIG9yIGZsdWlkcyBMT1ZcclxuICAgICAgICAgKiBAcmV0dXJucyB7KltdfVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGZ1bmN0aW9uIHJlcHJvZFN5c3RlbUFycmF5KCkge1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIChbXHJcbiAgICAgICAgICAgICAgICBcIk1JTEtcIixcclxuICAgICAgICAgICAgICAgIFwiS0lETkVZXCIsXHJcbiAgICAgICAgICAgICAgICBcIkNPTE9TVFJVTVwiLFxyXG4gICAgICAgICAgICAgICAgXCJNQU1NQVJZXCIsXHJcbiAgICAgICAgICAgICAgICBcIk9WQVJJRVNcIixcclxuICAgICAgICAgICAgICAgIFwiUExBQ0VOVEFcIixcclxuICAgICAgICAgICAgICAgIFwiUExBQ0VOVEFGTFVJRFwiLFxyXG4gICAgICAgICAgICAgICAgXCJTRU1FTlwiLFxyXG4gICAgICAgICAgICAgICAgXCJURVNURVNcIixcclxuICAgICAgICAgICAgICAgIFwiVVJJTkVcIixcclxuICAgICAgICAgICAgICAgIFwiUkVQUk9EX09USEVSXCJcclxuICAgICAgICAgICAgXSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBDYXJkaW8gc3lzdGVtIFRpc3N1ZXMgb3IgZmx1aWRzIExPVlxyXG4gICAgICAgICAqIEByZXR1cm5zIHsqW119XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZnVuY3Rpb24gY2FyZGlvU3lzdGVtQXJyYXkoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAoW1xyXG4gICAgICAgICAgICAgICAgXCJIRUFSVFwiLFxyXG4gICAgICAgICAgICAgICAgXCJMVU5HXCIsXHJcbiAgICAgICAgICAgICAgICBcIk5BU0FMRkxVSURcIixcclxuICAgICAgICAgICAgICAgIFwiVFJBQ0hFQVwiLFxyXG4gICAgICAgICAgICAgICAgXCJQTEFDRU5UQUxGTFVJRFwiLFxyXG4gICAgICAgICAgICAgICAgXCJDQVJESU9fT1RIRVJcIlxyXG4gICAgICAgICAgICBdKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEltbXVuZSBzeXN0ZW0gVGlzc3VlcyBvciBmbHVpZHMgTE9WXHJcbiAgICAgICAgICogQHJldHVybnMgeypbXX1cclxuICAgICAgICAgKi9cclxuICAgICAgICBmdW5jdGlvbiBpbW11bmVTeXN0ZW1BcnJheSgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIChbXHJcbiAgICAgICAgICAgICAgICBcIkxZTVBIXCIsXHJcbiAgICAgICAgICAgICAgICBcIlNQTEVFTlwiLFxyXG4gICAgICAgICAgICAgICAgXCJUSFlNVVNcIixcclxuICAgICAgICAgICAgICAgIFwiVE9OU0lMU1wiLFxyXG4gICAgICAgICAgICAgICAgXCJJTU1VTkVfT1RIRVJcIlxyXG4gICAgICAgICAgICBdKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFNraW4gc3lzdGVtIFRpc3N1ZXMgb3IgZmx1aWRzIExPVlxyXG4gICAgICAgICAqIEByZXR1cm5zIHsqW119XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZnVuY3Rpb24gc2tpblN5c3RlbUFycmF5KCkge1xyXG4gICAgICAgICAgICByZXR1cm4gKFtcclxuICAgICAgICAgICAgICAgIFwiQURSRU5BTFwiLFxyXG4gICAgICAgICAgICAgICAgXCJIQUlSXCIsXHJcbiAgICAgICAgICAgICAgICBcIkxJVkVSXCIsXHJcbiAgICAgICAgICAgICAgICBcIlBBTkNSRUFTXCIsXHJcbiAgICAgICAgICAgICAgICBcIlBJVFVBUllHTEFORFwiLFxyXG4gICAgICAgICAgICAgICAgXCJTS0lOSElERVNcIixcclxuICAgICAgICAgICAgICAgIFwiVEhZUk9JRFwiLFxyXG4gICAgICAgICAgICAgICAgXCJTS0lOX09USEVSXCJcclxuICAgICAgICAgICAgXSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBNdXNjbGUgc3lzdGVtIFRpc3N1ZXMgb3IgZmx1aWRzIExPVlxyXG4gICAgICAgICAqIEByZXR1cm5zIHsqW119XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZnVuY3Rpb24gbXVzY2xlU3lzdGVtQXJyYXkoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAoW1xyXG4gICAgICAgICAgICAgICAgXCJBQkRPTUVOXCIsXHJcbiAgICAgICAgICAgICAgICBcIlNLVUxMXCIsXHJcbiAgICAgICAgICAgICAgICBcIkJPTkVTXCIsXHJcbiAgICAgICAgICAgICAgICBcIkNPTExBR0VOXCIsXHJcbiAgICAgICAgICAgICAgICBcIlRFTkRPTlNcIixcclxuICAgICAgICAgICAgICAgIFwiVkVSVEVCUkFMQ09MVU1OXCIsXHJcbiAgICAgICAgICAgICAgICBcIk1VU0NMRV9PVEhFUlwiXHJcbiAgICAgICAgICAgIF0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogT3RoZXIgc3lzdGVtIFRpc3N1ZXMgb3IgZmx1aWRzIExPVlxyXG4gICAgICAgICAqIEByZXR1cm5zIHsqW119XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZnVuY3Rpb24gb3RoZXJTeXN0ZW1BcnJheSgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIChbXHJcbiAgICAgICAgICAgICAgICBcIkFESVBPU0VcIixcclxuICAgICAgICAgICAgICAgIFwiQVNDSVRFU1wiLFxyXG4gICAgICAgICAgICAgICAgXCJBTlRMRVJWXCIsXHJcbiAgICAgICAgICAgICAgICBcIlNFUlVNXCIsXHJcbiAgICAgICAgICAgICAgICBcIldIT0xFQkxPT0RcIixcclxuICAgICAgICAgICAgICAgIFwiUExBU01BXCIsXHJcbiAgICAgICAgICAgICAgICBcIkVNQlJZT05JQ1RJU1NcIixcclxuICAgICAgICAgICAgICAgIFwiRkVUQUxUSVNTXCIsXHJcbiAgICAgICAgICAgICAgICBcIkJPTkVNQVJST1dcIixcclxuICAgICAgICAgICAgICAgIFwiRVlFU0NPUk5FQVwiLFxyXG4gICAgICAgICAgICAgICAgXCJHQUxMXCIsXHJcbiAgICAgICAgICAgICAgICBcIkZMVUlEU19PVEhFUlwiXHJcbiAgICAgICAgICAgIF0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gX2dldFRpc3N1ZXNGbHVpZHNMYWJlbHMoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAoe1xyXG4gICAgICAgICAgICAgICAgYnJhaW46IFwiQlJBSU5cIixcclxuICAgICAgICAgICAgICAgIGJyYWluU3RlbTogXCJCUkFJTlNURU1cIixcclxuICAgICAgICAgICAgICAgIGNlcmViZWxsdW06IFwiQ0VSRUJFTExVTVwiLFxyXG4gICAgICAgICAgICAgICAgY2Vyb0ZsdWlkOiBcIkNFUk9GTFVJRFwiLFxyXG4gICAgICAgICAgICAgICAgZG9yc2FsUm9vdDogXCJET1JTQUxST09UXCIsXHJcbiAgICAgICAgICAgICAgICBkdXJhTWF0ZXI6IFwiRFVSQU1BVEVSXCIsXHJcbiAgICAgICAgICAgICAgICBoeXBvdGhhbG11czogXCJIWVBPVEhBTEFNVVNcIixcclxuICAgICAgICAgICAgICAgIHJldGluYTogXCJSRVRJTkFcIixcclxuICAgICAgICAgICAgICAgIHNwaW5hbENvcmQ6IFwiU1BJTkFMQ09SRFwiLFxyXG4gICAgICAgICAgICAgICAgdHJpZ2VtaW5hbDogXCJUUklHRU1JTkFMXCIsXHJcbiAgICAgICAgICAgICAgICBhcHBlbmRpeDogXCJBUFBFTkRJWFwiLFxyXG4gICAgICAgICAgICAgICAgYmlsZTogXCJCSUxFXCIsXHJcbiAgICAgICAgICAgICAgICBkaXN0YWxJbGV1bTogXCJESVNUQUxJTEVVTVwiLFxyXG4gICAgICAgICAgICAgICAgbGFyZ2VJbnRlc3RpbmU6IFwiTEFSR0VJTlRFU1RcIixcclxuICAgICAgICAgICAgICAgIHNhbGl2YVNhbGl2YXJ5OiBcIlNBTElWQVwiLFxyXG4gICAgICAgICAgICAgICAgc21hbGxJbnRlc3RpbmU6IFwiU01BTExJTlRFU1RJTkVcIixcclxuICAgICAgICAgICAgICAgIHN0b21hY2g6IFwiU1RPTUFDSFwiLFxyXG4gICAgICAgICAgICAgICAgbWlsa1Byb2R1Y3RzOiBcIk1JTEtcIixcclxuICAgICAgICAgICAgICAgIGtpZG5leTogXCJLSURORVlcIixcclxuICAgICAgICAgICAgICAgIGNvbG9zdHJ1bTogXCJDT0xPU1RSVU1cIixcclxuICAgICAgICAgICAgICAgIG1hbW1hcnlHbGFuZHM6IFwiTUFNTUFSWVwiLFxyXG4gICAgICAgICAgICAgICAgb3ZhcmllczogXCJPVkFSSUVTXCIsXHJcbiAgICAgICAgICAgICAgICBwbGFjZW50YTogXCJQTEFDRU5UQVwiLFxyXG4gICAgICAgICAgICAgICAgcGxhY2VudGFsRmx1aWQ6IFwiUExBQ0VOVEFGTFVJRFwiLFxyXG4gICAgICAgICAgICAgICAgc2VtZW46IFwiU0VNRU5cIixcclxuICAgICAgICAgICAgICAgIHRlc3RlczogXCJURVNURVNcIixcclxuICAgICAgICAgICAgICAgIHVyaW5lOiBcIlVSSU5FXCIsXHJcbiAgICAgICAgICAgICAgICBoZWFydFBlcmljYXJkaXVtOiBcIkhFQVJUXCIsXHJcbiAgICAgICAgICAgICAgICBsdW5nOiBcIkxVTkdcIixcclxuICAgICAgICAgICAgICAgIG5hc2FsRmx1aWQ6IFwiTkFTQUxGTFVJRFwiLFxyXG4gICAgICAgICAgICAgICAgdHJhY2hlYTogXCJUUkFDSEVBXCIsXHJcbiAgICAgICAgICAgICAgICBseW1waE5vZGVzOiBcIkxZTVBIXCIsXHJcbiAgICAgICAgICAgICAgICBzcGxlZW46IFwiU1BMRUVOXCIsXHJcbiAgICAgICAgICAgICAgICB0aHltdXM6IFwiVEhZTVVTXCIsXHJcbiAgICAgICAgICAgICAgICB0b25zaWxzOiBcIlRPTlNJTFNcIixcclxuICAgICAgICAgICAgICAgIGFkcmVuYWxHbGFuZDogXCJBRFJFTkFMXCIsXHJcbiAgICAgICAgICAgICAgICBoYWlySG9vdmVzRmVhdGhlcnM6IFwiSEFJUlwiLFxyXG4gICAgICAgICAgICAgICAgbGl2ZXI6IFwiTElWRVJcIixcclxuICAgICAgICAgICAgICAgIHBhbmNyZWFzOiBcIlBBTkNSRUFTXCIsXHJcbiAgICAgICAgICAgICAgICBwaXR1aXRhcnk6IFwiUElUVUFSWUdMQU5EXCIsXHJcbiAgICAgICAgICAgICAgICBza2luSGlkZXM6IFwiU0tJTkhJREVTXCIsXHJcbiAgICAgICAgICAgICAgICB0aHlyb2lkUGFyYXRoeXJvaWQ6IFwiVEhZUk9JRFwiLFxyXG4gICAgICAgICAgICAgICAgYWJkb21lbjogXCJBQkRPTUVOXCIsXHJcbiAgICAgICAgICAgICAgICBza3VsbDogXCJTS1VMTFwiLFxyXG4gICAgICAgICAgICAgICAgYm9uZXM6IFwiQk9ORVNcIixcclxuICAgICAgICAgICAgICAgIGNvbGxhZ2VuOiBcIkNPTExBR0VOXCIsXHJcbiAgICAgICAgICAgICAgICB0ZW5kb25zTGlnYW1lbnRzOiBcIlRFTkRPTlNcIixcclxuICAgICAgICAgICAgICAgIHZlcnRlYnJhbENvbHVtbjogXCJWRVJURUJSQUxDT0xVTU5cIixcclxuICAgICAgICAgICAgICAgIG11c2NsZTogXCJNVVNDTEVcIixcclxuICAgICAgICAgICAgICAgIGFkaXBvc2U6IFwiQURJUE9TRVwiLFxyXG4gICAgICAgICAgICAgICAgYXNjaXRlczogXCJBU0NJVEVTXCIsXHJcbiAgICAgICAgICAgICAgICBhbnRsZXJWZWx2ZXQ6IFwiQU5UTEVSVlwiLFxyXG4gICAgICAgICAgICAgICAgc2VydW06IFwiU0VSVU1cIixcclxuICAgICAgICAgICAgICAgIHdob2xlQmxvb2Q6IFwiV0hPTEVCTE9PRFwiLFxyXG4gICAgICAgICAgICAgICAgcGxhc21hOiBcIlBMQVNNQVwiLFxyXG4gICAgICAgICAgICAgICAgZW1icnlvbmljVGlzc3VlOiBcIkVNQlJZT05JQ1RJU1NcIixcclxuICAgICAgICAgICAgICAgIGZldGFsVGlzc3VlOiBcIkZFVEFMVElTU1wiLFxyXG4gICAgICAgICAgICAgICAgYm9uZU1hcnJvdzogXCJCT05FTUFSUk9XXCIsXHJcbiAgICAgICAgICAgICAgICBleWVzQ29ybmVhOiBcIkVZRVNDT1JORUFcIixcclxuICAgICAgICAgICAgICAgIGdhbGxCbGFkZGVyOiBcIkdBTExcIlxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgIH1cclxuXHJcblxyXG59KSgpO1xyXG4iLCIvKipcclxuICogQ3JlYXRlZCBieSBka2lsdHkgb24gOC82LzIwMTYuXHJcbiAqL1xyXG4oZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKCdleHBhbmRpbmdUYWJsZScsIFtdKVxyXG59KSgpO1xyXG5cclxuKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgnZXhwYW5kaW5nVGFibGUnKVxyXG4gICAgICAgIC5jb21wb25lbnQoJ2NtcEV4cGFuZGluZ1RhYmxlJywge1xyXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2FwcC9zY3JpcHRzL2NvbXBvbmVudHMvZXhwYW5kaW5nVGFibGUvdHBsLWV4cGFuZGluZy10YWJsZV8yMDE3MDIwM18xNTAyLmh0bWwnLFxyXG4gICAgICAgICAgICBjb250cm9sbGVyOiBleHBhbmRpbmdUYWJsZUN0cmwsXHJcbiAgICAgICAgICAgIGNvbnRyb2xsZXJBczogJ2V4cGFuZFRibEN0cmwnLFxyXG4gICAgICAgICAgICB0cmFuc2NsdWRlOnRydWUsXHJcbiAgICAgICAgICAgIGJpbmRpbmdzOiB7XHJcbiAgICAgICAgICAgICAgICB0aXRsZTogJ0AnLCAvKmRlcHJlY2F0ZWQqL1xyXG4gICAgICAgICAgICAgICAgbGlzdEl0ZW1zOiAnPCcsXHJcbiAgICAgICAgICAgICAgICBjb2x1bW5EZWY6JzwnLFxyXG4gICAgICAgICAgICAgICAgZGlzYWJsZVNlbGVjdGlvbjonPCcsXHJcbiAgICAgICAgICAgICAgICBzZWxlY3RSZWNvcmQ6ICc8JyxcclxuICAgICAgICAgICAgICAgIHJlc2V0VG9Db2xsYXBzZWQ6ICc8JyxcclxuICAgICAgICAgICAgICAgIGRpc2FibGVFcnJDb2x1bW46J0AnXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIGV4cGFuZGluZ1RhYmxlQ3RybC4kaW5qZWN0ID0gWyckZmlsdGVyJ107XHJcbiAgICBmdW5jdGlvbiBleHBhbmRpbmdUYWJsZUN0cmwoJGZpbHRlcikge1xyXG4gICAgICAgIHZhciB2bSA9IHRoaXM7XHJcbiAgICAgICAgdm0uZm9jdXNlZCA9IGZhbHNlO1xyXG4gICAgICAgIHZtLmNvbHVtbkRlZmluaXRpb25zPXt9O1xyXG4gICAgICAgIHZtLmRpc2FibGVFeHBhbmQ9ZmFsc2U7XHJcbiAgICAgICAgdm0udGFibGVSb3dFeHBhbmRlZCA9IGZhbHNlO1xyXG4gICAgICAgIHZtLnRhYmxlUm93SW5kZXhDdXJyRXhwYW5kZWQgPSBcIlwiO1xyXG4gICAgICAgIHZtLnRhYmxlUm93SW5kZXhQcmV2RXhwYW5kZWQgPSBcIlwiO1xyXG4gICAgICAgIHZtLm51bWJlckNvbHM9dm0uY29sdW1uRGVmLmxlbmd0aCsyO1xyXG4gICAgICAgIHZtLmRpc2FibGVFcnJvckNvbD1mYWxzZTtcclxuICAgICAgICB2bS5kYXlEYXRhQ29sbGFwc2UgPSBfY3JlYXRlQXJyYXkoMCwgdHJ1ZSk7XHJcblxyXG4gICAgICAgIHZtLiRvbkluaXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmKHZtLmxpc3RJdGVtcykge1xyXG4gICAgICAgICAgICAgICAgdm0uZGF5RGF0YUNvbGxhcHNlID0gX2NyZWF0ZUFycmF5KHZtLmxpc3RJdGVtcy5sZW5ndGgsIHRydWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdm0uZ2V0RXhwYW5kZWRTdGF0ZSA9IGZ1bmN0aW9uIChyb3cpIHtcclxuICAgICAgICAgICAgaWYgKHJvdyA9PT0gdm0udGFibGVSb3dJbmRleEN1cnJFeHBhbmRlZCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdm0uJG9uQ2hhbmdlcyA9IGZ1bmN0aW9uIChjaGFuZ2VzKSB7XHJcblxyXG5cclxuXHJcbiAgICAgICAgICAgIGlmIChjaGFuZ2VzLmxpc3RJdGVtcykge1xyXG4gICAgICAgICAgICAgICAgaWYodm0ubGlzdEl0ZW1zKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdm0uZGF5RGF0YUNvbGxhcHNlID0gX2NyZWF0ZUFycmF5KHZtLmxpc3RJdGVtcy5sZW5ndGgsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9zaG91bGQgbmV2ZXIgaGFwcGVuXHJcbiAgICAgICAgICAgICAgICAgICAgdm0uZGF5RGF0YUNvbGxhcHNlID0gX2NyZWF0ZUFycmF5KDAsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdm0ucmVzZXRUYWJsZVJvdygpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgIFJlc2V0cyB0aGUgdGFibGUgdG8gY29sbGFwc2VkLiBOb3RlIHRoaXMgIGlzIG5vdCBhIHRydWUgcmVzZXRcclxuICAgICAgICAgICAgIElmIGEgdmFsaWQgaW5kZXggaXMgc2VsZWN0ZWQsIHRvZ2dsZXMgKEV4cGFuZHMpIHRoZSByb3cgYWZ0ZXIgYSByZXNldC5cclxuICAgICAgICAgICAgIFRoaXMgYWxsb3dzIGV4cGFuZGluZyB0aGUgc2FtZSByb3cgaW5kZXggYWZ0ZXIgYSByb3cgaGFzIGJlZW4gYWRkZWQgYXQgdGhlIGJlZ2lubmluZ1xyXG4gICAgICAgICAgICAgRm9yIGEgdHJ1ZSByZXNldCwgZmlyc3Qgc2V0IHNlbGVjdCByZWNvcmQgdG8gLTFcclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIGlmKGNoYW5nZXMucmVzZXRUb0NvbGxhcHNlZCl7XHJcbiAgICAgICAgICAgICAgICAvLyBpZihjaGFuZ2VzLnJlc2V0VG9Db2xsYXBzZWQuY3VycmVudFZhbHVlKXtcclxuICAgICAgICAgICAgICAgICAgICB2bS5yZXNldFRhYmxlUm93KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFjaGFuZ2VzLnNlbGVjdFJlY29yZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVUYWJsZVJvdyh2bS5zZWxlY3RSZWNvcmQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmKGNoYW5nZXMuc2VsZWN0UmVjb3JkKXtcclxuICAgICAgICAgICAgICAgIHZhciBzZWxlY3RJbmRleD1wYXJzZUludChjaGFuZ2VzLnNlbGVjdFJlY29yZC5jdXJyZW50VmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgaWYoc2VsZWN0SW5kZXg+PTApIHtcclxuICAgICAgICAgICAgICAgICAgICB2bS5zZWxlY3RUYWJsZVJvdyhzZWxlY3RJbmRleCk7XHJcbiAgICAgICAgICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgICAgICAgICB2bS5yZXNldFRhYmxlUm93KCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYoY2hhbmdlcy5kaXNhYmxlU2VsZWN0aW9uKXtcclxuICAgICAgICAgICAgICAgIHZtLmRpc2FibGVFeHBhbmQ9Y2hhbmdlcy5kaXNhYmxlU2VsZWN0aW9uLmN1cnJlbnRWYWx1ZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYoY2hhbmdlcy5jb2x1bW5EZWYpIHtcclxuICAgICAgICAgICAgICAgIHZtLm51bWJlckNvbHM9Y2hhbmdlcy5jb2x1bW5EZWYuY3VycmVudFZhbHVlLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgIHZtLmNvbHVtbkRlZmluaXRpb25zID0gX3JlY2FsY3VsYXRlQ29sdW1uRGVmcyhjaGFuZ2VzLmNvbHVtbkRlZi5jdXJyZW50VmFsdWUsICh2bS5udW1iZXJDb2xzKSk7XHJcbiAgICAgICAgICAgICAgICBfc2V0TnVtYmVyQ29sdW1ucygpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYoY2hhbmdlcy5kaXNhYmxlRXJyQ29sdW1uKXtcclxuICAgICAgICAgICAgICAgIHZtLmRpc2FibGVFcnJvckNvbD1jaGFuZ2VzLmRpc2FibGVFcnJDb2x1bW4uY3VycmVudFZhbHVlO1xyXG4gICAgICAgICAgICAgICAgdm0ubnVtYmVyQ29scz12bS5jb2x1bW5EZWYubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgX3NldE51bWJlckNvbHVtbnMoKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBfc2V0TnVtYmVyQ29sdW1ucygpe1xyXG4gICAgICAgICAgICBpZiggdm0uZGlzYWJsZUVycm9yQ29sKXtcclxuICAgICAgICAgICAgICAgIC8vY2FyZXQgb25seVxyXG4gICAgICAgICAgICAgICAgdm0ubnVtYmVyQ29scz0gdm0ubnVtYmVyQ29scysxO1xyXG4gICAgICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgICAgIC8vY2FyZXQgKyBlcnJvclxyXG4gICAgICAgICAgICAgICAgdm0ubnVtYmVyQ29scz0gdm0ubnVtYmVyQ29scysyO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBSZWNhbGN1bGF0ZXMgdGhlIGNvbHVtbiBkZWZzIGJhc2VkIG9uIHRoZSBjYXJldCBjb2x1bW4gYW5kIHRoZSBlcnJvciBjb2x1bW5lXHJcbiAgICAgICAgICogQXNzdW1lcyB0aGF0IHRoZSBjb2x1bW4gZGVmaW5pdGlvbnMgcHJvdmlkZWQgdG90YWwgMTAwJVxyXG4gICAgICAgICAqIEBwYXJhbSBjb2xEZWZzXHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBmdW5jdGlvbiBfcmVjYWxjdWxhdGVDb2x1bW5EZWZzKGNvbERlZnMsbnVtQ29scyl7XHJcbiAgICAgICAgICAgIHZhciBjYXJldFdpZHRoPTI7XHJcbiAgICAgICAgICAgIHZhciBlcnJvcldpZHRoPTU7XHJcbiAgICAgICAgICAgIHZhciB0b3RhbFdpZHRoPWNhcmV0V2lkdGgrZXJyb3JXaWR0aDtcclxuICAgICAgICAgICAgdmFyIHRvU3VidHJhY3Q9dG90YWxXaWR0aC9udW1Db2xzO1xyXG4gICAgICAgICAgICB2YXIgcmVzdWx0PVtdO1xyXG4gICAgICAgICAgICAvL2RvbnQnIGJvdGhlciByZWNhbGMgaWYgb25seSB0aGUgY2FyZXRcclxuICAgICAgICAgICAgaWYodm0uZGlzYWJsZUVycm9yQ29sKXtcclxuICAgICAgICAgICAgICAgIHJldHVybiAoY29sRGVmcyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZm9yKHZhciBpPTA7aTxudW1Db2xzO2krKyl7XHJcbiAgICAgICAgICAgICAgICB2YXIgb25lRGVmPWFuZ3VsYXIuY29weShjb2xEZWZzW2ldKTtcclxuICAgICAgICAgICAgICAgIGlmKG9uZURlZi53aWR0aD50b1N1YnRyYWN0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgb25lRGVmLndpZHRoID0gb25lRGVmLndpZHRoIC0gdG9TdWJ0cmFjdDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKG9uZURlZik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZnVuY3Rpb24gdXBkYXRlVGFibGVSb3codGV4dEluZGV4KSB7XHJcbiAgICAgICAgICAgIHZhciBzZWxlY3RJbmRleCA9IHBhcnNlSW50KHRleHRJbmRleCk7XHJcbiAgICAgICAgICAgIGlmIChzZWxlY3RJbmRleCA+PSAwKSB7XHJcbiAgICAgICAgICAgICAgICB2bS5zZWxlY3RUYWJsZVJvdyhzZWxlY3RJbmRleCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vVE9ETyBnZXQgdmFsdWUgZnJvbSBhIHNlcnZpY2UhIVxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRyYW5zbGF0ZXMgd2hlbiBhIGZvcm0gaXMgaW52YWxpZCB0byBsb2NhbGl6ZWQgdGV4dFxyXG4gICAgICAgICAqIEByZXR1cm5zIHsqfVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHZtLmZvcm1JbkVycm9yPWZ1bmN0aW9uKGFGb3JtKXtcclxuICAgICAgICAgICAgaWYoIWFGb3JtKSByZXR1cm4gKCdOJyk7IC8vc2hvdWxkIG5ldmVyIGhhcHBlblxyXG4gICAgICAgICAgICBpZihhRm9ybS4kaW52YWxpZCl7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gKCdZJylcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gKCdOJylcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBVdGlsaXR5IGZ1bmN0aW9uIGZvciBkZXRlcm1pbmluZyB0aGUgbnVtYmVyIG9mIGNvbHVtbnMgdG8gY3JlYXRlXHJcbiAgICAgICAgICogQHBhcmFtIG15b2JqXHJcbiAgICAgICAgICogQHJldHVybnMge251bWJlcn1cclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGZ1bmN0aW9uIF9nZXROdW1iZXJLZXlzKG15b2JqKXtcclxuICAgICAgICAgICAgdmFyIGNvdW50ID0gMDtcclxuICAgICAgICAgICAgZm9yICh2YXIgayBpbiBteW9iaikge1xyXG4gICAgICAgICAgICAgICAgaWYgKG15b2JqLmhhc093blByb3BlcnR5KGspKSBjb3VudCsrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBjb3VudDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIHNwZWNpZmllZCBzaXplIGFuZCBkZWZhdWx0IHZhbHVlc1xyXG4gICAgICAgICAqIEBwYXJhbSBhcnJheVNpemVcclxuICAgICAgICAgKiBAcGFyYW0gaW5pdGlhbFZhbFxyXG4gICAgICAgICAqIEByZXR1cm5zIHtBcnJheX1cclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgICBmdW5jdGlvbiBfY3JlYXRlQXJyYXkoYXJyYXlTaXplLGluaXRpYWxWYWwpe1xyXG4gICAgICAgICB2YXIgYW5BcnJheSA9IFtdO1xyXG4gICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFycmF5U2l6ZTsgaSsrKSBhbkFycmF5LnB1c2ggKGluaXRpYWxWYWwpO1xyXG4gICAgICAgICByZXR1cm4gYW5BcnJheVxyXG4gICAgICAgICB9XHJcblxyXG4gICAgICAgIHZtLmRlbGV0ZWRSb3c9ZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgdm0udGFibGVSb3dFeHBhbmRlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICB2bS50YWJsZVJvd0luZGV4Q3VyckV4cGFuZGVkID0gXCJcIjtcclxuICAgICAgICB9O1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBuZ2RvYyByZXNldHMgdGhlIHRhYmxlIHRvIGEgY29sbGFwc2VkIHN0YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdm0ucmVzZXRUYWJsZVJvdyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdm0udGFibGVSb3dJbmRleFByZXZFeHBhbmRlZCA9IFwiXCI7XHJcbiAgICAgICAgICAgIHZtLnRhYmxlUm93RXhwYW5kZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgdm0udGFibGVSb3dJbmRleEN1cnJFeHBhbmRlZCA9IFwiXCI7XHJcbiAgICAgICAgICAgIGlmKHZtLmxpc3RJdGVtcykge1xyXG4gICAgICAgICAgICAgICAgdm0uZGF5RGF0YUNvbGxhcHNlID0gX2NyZWF0ZUFycmF5KHZtLmxpc3RJdGVtcy5sZW5ndGgsIHRydWUpO1xyXG4gICAgICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgICAgIF9jcmVhdGVBcnJheSgwLCB0cnVlKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2bS5kYXlEYXRhQ29sbGFwc2VGbiA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IHZtLmxpc3RJdGVtcy5sZW5ndGggLSAxOyBpICs9IDEpIHtcclxuICAgICAgICAgICAgICAgIHZtLmRheURhdGFDb2xsYXBzZS5hcHBlbmQoJ3RydWUnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgdm0uc2VsZWN0VGFibGVSb3cgPSBmdW5jdGlvbiAoaW5kZXgpIHtcclxuICAgICAgICAgICAgLy9pZiBzZWxlY3Rpb25cclxuICAgICAgICAgaWYgKHZtLmRpc2FibGVFeHBhbmQpIHJldHVybjtcclxuICAgICAgICAgICAgaWYgKHZtLmRheURhdGFDb2xsYXBzZSA9PT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgICAgIHZtLmRheURhdGFDb2xsYXBzZSA9IHZtLmRheURhdGFDb2xsYXBzZUZuKCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHZtLnRhYmxlUm93RXhwYW5kZWQgPT09IGZhbHNlICYmIHZtLnRhYmxlUm93SW5kZXhDdXJyRXhwYW5kZWQgPT09IFwiXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICB2bS50YWJsZVJvd0luZGV4UHJldkV4cGFuZGVkID0gXCJcIjtcclxuICAgICAgICAgICAgICAgICAgICB2bS50YWJsZVJvd0V4cGFuZGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB2bS50YWJsZVJvd0luZGV4Q3VyckV4cGFuZGVkID0gaW5kZXg7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gdm0uc3RvcmVJZEV4cGFuZGVkID0gc3RvcmVJZDtcclxuICAgICAgICAgICAgICAgICAgICB2bS5kYXlEYXRhQ29sbGFwc2VbaW5kZXhdID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHZtLnRhYmxlUm93RXhwYW5kZWQgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodm0udGFibGVSb3dJbmRleEN1cnJFeHBhbmRlZCA9PT0gaW5kZXgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdm0udGFibGVSb3dFeHBhbmRlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2bS50YWJsZVJvd0luZGV4Q3VyckV4cGFuZGVkID0gXCJcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdm0uZGF5RGF0YUNvbGxhcHNlW2luZGV4XSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdm0udGFibGVSb3dJbmRleFByZXZFeHBhbmRlZCA9IHZtLnRhYmxlUm93SW5kZXhDdXJyRXhwYW5kZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZtLnRhYmxlUm93SW5kZXhDdXJyRXhwYW5kZWQgPSBpbmRleDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gIHZtLnN0b3JlSWRFeHBhbmRlZCA9IHN0b3JlSWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZtLmRheURhdGFDb2xsYXBzZVt2bS50YWJsZVJvd0luZGV4UHJldkV4cGFuZGVkXSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZtLmRheURhdGFDb2xsYXBzZVt2bS50YWJsZVJvd0luZGV4Q3VyckV4cGFuZGVkXSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgfVxyXG5cclxuXHJcblxyXG59KSgpO1xyXG4iLCIvKipcclxuICogQ3JlYXRlZCBieSBka2lsdHkgb24gOC8xNC8yMDE2LlxyXG4gKi9cclxuXHJcbihmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgnYXBwbGljYXRpb25JbmZvJywgWydudW1iZXJGb3JtYXQnLCdocGZiQ29uc3RhbnRzJ10pXHJcbn0pKCk7XHJcblxyXG4oZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ2FwcGxpY2F0aW9uSW5mbycpXHJcbiAgICAgICAgLmNvbXBvbmVudCgnY21wQXBwbGljYXRpb25JbmZvJywge1xyXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2FwcC9zY3JpcHRzL2NvbXBvbmVudHMvYXBwbGljYXRpb25JbmZvL3RwbC1hcHBsaWNhdGlvbi1pbmZvXzIwMTcwMjAzXzE1MDIuaHRtbCcsXHJcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6IEFwcGxJbmZvQ3RybCxcclxuICAgICAgICAgICAgY29udHJvbGxlckFzOiAnaW5mb0N0cmwnLFxyXG4gICAgICAgICAgICBiaW5kaW5nczoge1xyXG4gICAgICAgICAgICAgICAgcmVjb3JkOiAnPCcsXHJcbiAgICAgICAgICAgICAgICB1c2VyVHlwZTogJzwnLFxyXG4gICAgICAgICAgICAgICAgaXNJbmNvbXBsZXRlOiAnPCcsXHJcbiAgICAgICAgICAgICAgICBjb25maWd1cmVJZEZpZWxkOiAnPCcsXHJcbiAgICAgICAgICAgICAgICBzZXRUeXBlOiAnJidcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgIEFwcGxJbmZvQ3RybC4kaW5qZWN0PVsnTkVXX1RZUEUnLCdBTUVORF9UWVBFJywnQVBQUk9WRURfVFlQRScsJ0VYVEVSTkFMX1RZUEUnXTtcclxuXHJcbiAgICBmdW5jdGlvbiBBcHBsSW5mb0N0cmwoTkVXX1RZUEUsQU1FTkRfVFlQRSxBUFBST1ZFRF9UWVBFLEVYVEVSTkFMX1RZUEUpIHtcclxuICAgICAgICB2YXIgdm0gPSB0aGlzO1xyXG4gICAgICAgIHZtLmFwcGxUeXBlcyA9IFtORVdfVFlQRSwgQU1FTkRfVFlQRSwgQVBQUk9WRURfVFlQRV07XHJcbiAgICAgICAgdm0uZm9ybVR5cGUgPSBFWFRFUk5BTF9UWVBFO1xyXG4gICAgICAgIHZtLmluZm9Nb2RlbCA9IHtcclxuICAgICAgICAgICAgYXBwbGljYXRpb25UeXBlOiBcIk5FV1wiLFxyXG4gICAgICAgICAgICBlbnJvbG1lbnRWZXJzaW9uOiBcIjAuMFwiLFxyXG4gICAgICAgICAgICBkYXRlU2F2ZWQ6IFwiXCJcclxuICAgICAgICB9O1xyXG4gICAgICAgIHZtLmZpZWxkSWRMYWJlbCA9IFwiXCI7XHJcbiAgICAgICAgdm0ubWluRmllbGRMZW5ndGggPSBcIlwiO1xyXG4gICAgICAgIHZtLmlzTnVtYmVyPWZhbHNlO1xyXG4gICAgICAgIHZtLmZpZWxkTGVuZ3RoID0gXCJcIjtcclxuICAgICAgICB2bS50YWdOYW1lID0gXCJmaWVsZElkXCI7XHJcbiAgICAgICAgdm0uc2V0QXNJbmNvbXBsZXRlID0gdHJ1ZTtcclxuICAgICAgICB2bS5lcnJvck1zZyA9IFwiXCI7XHJcbiAgICAgICAgdm0ubWF4RXJyb3JNc2cgPSBcIlwiO1xyXG4gICAgICAgIHZtLmlzRG9zc2llciA9IGZhbHNlO1xyXG4gICAgICAgIHZtLmlzTnVtYmVyPWZhbHNlO1xyXG5cclxuICAgICAgICB2bS4kb25Jbml0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAvLy9kbyBpbml0XHJcbiAgICAgICAgfTtcclxuICAgICAgICB2bS4kb25DaGFuZ2VzID0gZnVuY3Rpb24gKGNoYW5nZXMpIHtcclxuICAgICAgICAgICAgaWYgKGNoYW5nZXMudXNlclR5cGUpIHtcclxuICAgICAgICAgICAgICAgIHZtLmZvcm1UeXBlID0gY2hhbmdlcy51c2VyVHlwZS5jdXJyZW50VmFsdWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGNoYW5nZXMucmVjb3JkKSB7XHJcbiAgICAgICAgICAgICAgICB2bS5pbmZvTW9kZWwgPSBjaGFuZ2VzLnJlY29yZC5jdXJyZW50VmFsdWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGNoYW5nZXMuaXNJbmNvbXBsZXRlKSB7XHJcbiAgICAgICAgICAgICAgICB2bS5zZXRBc0luY29tcGxldGUgPSBjaGFuZ2VzLmlzSW5jb21wbGV0ZS5jdXJyZW50VmFsdWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGNoYW5nZXMuY29uZmlndXJlSWRGaWVsZCkge1xyXG4gICAgICAgICAgICAgICAgX3NldENvbmZpZ0l0ZW1zKGNoYW5nZXMuY29uZmlndXJlSWRGaWVsZC5jdXJyZW50VmFsdWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICBmdW5jdGlvbiBfc2V0Q29uZmlnSXRlbXMoY29uZmlnSnNvbikge1xyXG4gICAgICAgICAgICB2bS5maWVsZElkTGFiZWwgPSBjb25maWdKc29uLmxhYmVsO1xyXG4gICAgICAgICAgICB2bS5maWVsZExlbmd0aCA9IGNvbmZpZ0pzb24uZmllbGRMZW5ndGg7IC8vdGhpcyBpcyB0aGUgbWF4XHJcbiAgICAgICAgICAgIHZtLnRhZ05hbWUgPSBjb25maWdKc29uLnRhZ05hbWU7XHJcbiAgICAgICAgICAgIGlmIChjb25maWdKc29uLm1pbkZpZWxkTGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICB2bS5taW5GaWVsZExlbmd0aCA9IGNvbmZpZ0pzb24ubWluRmllbGRMZW5ndGg7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB2bS5taW5GaWVsZExlbmd0aCA9IGNvbmZpZ0pzb24uZmllbGRMZW5ndGg7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdm0uZXJyb3JNc2cgPSBjb25maWdKc29uLmVycm9yTXNnO1xyXG5cclxuICAgICAgICAgICAgaWYgKGNvbmZpZ0pzb24ubWluRXJyb3JNc2cpIHtcclxuICAgICAgICAgICAgICAgIHZtLm1pbkVycm9yTXNnID0gY29uZmlnSnNvbi5taW5FcnJvck1zZztcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHZtLm1pbkVycm9yTXNnID0gY29uZmlnSnNvbi5lcnJvck1zZztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZihjb25maWdKc29uLmlzTnVtYmVyKXtcclxuICAgICAgICAgICAgICAgIHZtLmlzTnVtYmVyPWNvbmZpZ0pzb24uaXNOdW1iZXI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdm0uaXNEb3NzaWVyID0gY29uZmlnSnNvbi5pc0Rvc3NpZXI7XHJcbiAgICAgICAgICAgIGlmIChhbmd1bGFyLmlzVW5kZWZpbmVkKHZtLmlzRG9zc2llcikpIHtcclxuICAgICAgICAgICAgICAgIHZtLmlzRG9zc2llciA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZtLnNob3dBbWVuZE1zZz1mdW5jdGlvbigpe1xyXG5cclxuICAgICAgICAgICAgaWYoIXZtLnJlY29yZCl7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHZtLnJlY29yZC5hcHBsaWNhdGlvblR5cGU9PT1BTUVORF9UWVBFO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZtLmlzRXh0ZXJuID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdm0uZm9ybVR5cGUgPT0gRVhURVJOQUxfVFlQRTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHZtLnNldEFtZW5kU3RhdGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIC8vVE9ETyBoYXJkY29kZSBzaG91bGQgYmUgc2VydmljZVxyXG4gICAgICAgICAgICB2bS5zZXRUeXBlKHt0eXBlOiBBTUVORF9UWVBFfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgIH1cclxufSkoKTtcclxuIiwiLyoqXHJcbiAqIENyZWF0ZWQgYnkgQWJkZXNzYW1hZCBvbiA3LzUvMjAxNi5cclxuICovXHJcblxyXG4oZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKCdjb250YWN0TW9kdWxlJywgW1xyXG4gICAgICAgICAgICAnZGF0YUxpc3RzJyxcclxuICAgICAgICAgICAgJ2hwZmJDb25zdGFudHMnXHJcbiAgICAgICAgXSlcclxufSkoKTtcclxuXHJcbihmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ2NvbnRhY3RNb2R1bGUnKVxyXG4gICAgICAgIC5jb21wb25lbnQoJ2NtcENvbnRhY3REZXRhaWxzJyx7XHJcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnYXBwL3NjcmlwdHMvY29tcG9uZW50cy9jb250YWN0RGV0YWlscy90cGwtY29udGFjdC1kZXRhaWxzXzIwMTcwMjAzXzE1MDIuaHRtbCcsXHJcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6IGNvbnRhY3RDdHJsLFxyXG4gICAgICAgICAgICBjb250cm9sbGVyQXM6ICdjb250Q3RybCcsXHJcbiAgICAgICAgICAgIGJpbmRpbmdzOiB7XHJcbiAgICAgICAgICAgICAgICBjb250YWN0UmVjb3JkOiAnPCcsXHJcbiAgICAgICAgICAgICAgICBvblVwZGF0ZTogJyYnLCAvL3Nob3VsZCBiZSByZW1vdmVkIG5vdCB1c2VkLCBkZXByZWNhdGVkXHJcbiAgICAgICAgICAgICAgICBpc0FtZW5kOiAnPCcsXHJcbiAgICAgICAgICAgICAgICBzaG93RXJyb3JzOiAnJidcclxuICAgICAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgY29udGFjdEN0cmwuJGluamVjdCA9IFsnZ2V0Q29udGFjdExpc3RzJywnRU5HTElTSCcsJ0ZSRU5DSCddO1xyXG4gICAgZnVuY3Rpb24gY29udGFjdEN0cmwoIGdldENvbnRhY3RMaXN0cyxFTkdMSVNILEZSRU5DSCkge1xyXG4gICAgICAgIHZhciB2bSA9IHRoaXM7XHJcbiAgICAgICAgdm0uaXNFZGl0YWJsZSA9IHRydWU7XHJcbiAgICAgICAgdm0ubmdNb2RlbE9wdFNldHRpbmcgPSB7dXBkYXRlT246ICdibHVyJ307XHJcbiAgICAgICAgdm0uc2FsdXRhdGlvbkxpc3QgPSBnZXRDb250YWN0TGlzdHMuZ2V0U2FsdXRhdGlvbkxpc3QoKTtcclxuICAgICAgICB2bS5sYW5nQ29ycmVzcHBvbmQ9W0VOR0xJU0gsRlJFTkNIXTtcclxuICAgICAgICB2bS5waG9uZVJlZz0vXFwoPyhbMC05XXszfSlcXCk/KFsgLi1dPykoWzAtOV17M30pXFwyKFswLTldezR9KS87XHJcbiAgICAgICAgdm0uY29udGFjdE1vZGVsID0ge1xyXG4gICAgICAgICAgICBpc0RldGFpbFZhbGlkOiBmYWxzZSxcclxuICAgICAgICAgICAgY29udGFjdElkOiBcIlwiLFxyXG4gICAgICAgICAgICBhbWVuZFJlY29yZDogZmFsc2UsXHJcbiAgICAgICAgICAgIGFkZHJlc3NSb2xlOiB7XHJcbiAgICAgICAgICAgICAgICBtYW51ZmFjdHVyZXI6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgbWFpbGluZzogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBiaWxsaW5nOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIGltcG9ydGVyOiBmYWxzZVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBjb250YWN0Um9sZTogXCJcIixcclxuICAgICAgICAgICAgc2FsdXRhdGlvbjogXCJcIixcclxuICAgICAgICAgICAgZ2l2ZW5OYW1lOiBcIlwiLFxyXG4gICAgICAgICAgICBzdXJuYW1lOiBcIlwiLFxyXG4gICAgICAgICAgICBpbml0aWFsczogXCJcIixcclxuICAgICAgICAgICAgdGl0bGU6IFwiXCIsXHJcbiAgICAgICAgICAgIHBob25lOiBcIlwiLFxyXG4gICAgICAgICAgICBQaG9uZUV4dDogXCJcIixcclxuICAgICAgICAgICAgZmF4OiBcIlwiXHJcbiAgICAgICAgfTtcclxuICAgICAgICB2bS4kb25Jbml0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgIHZtLmxhbmdMaXN0PVtFTkdMSVNILEZSRU5DSF07XHJcbiAgICAgICAgICAgIC8qY29uc29sZS5sb2coXCJpbml0IGNvbnRhY3QgZGV0YWlsc1wiKTtcclxuICAgICAgICAgICBpZiAodm0uY29udGFjdFJlY29yZCkge1xyXG4gICAgICAgICAgICAgICAgLy9kb2Vzbid0IGNvcHkgYXMgdGhpcyBpcyBhIGR1bWIgY29tcG9uZW50XHJcbiAgICAgICAgICAgICAgICB2bS5jb250YWN0TW9kZWwgPSB2bS5jb250YWN0UmVjb3JkO1xyXG4gICAgICAgICAgICAgfSovXHJcbiAgICAgICAgfTtcclxuICAgICAgICAvL1RPRE8gcmVuYW1lXHJcbiAgICAgICAgdm0uJG9uQ2hhbmdlcz1mdW5jdGlvbihjaGFuZ2VzKXtcclxuICAgICAgICAgICAgaWYoY2hhbmdlcy5jb250YWN0UmVjb3JkKXtcclxuICAgICAgICAgICAgICAgIHZtLmNvbnRhY3RNb2RlbCA9IGNoYW5nZXMuY29udGFjdFJlY29yZC5jdXJyZW50VmFsdWU7XHJcblxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChjaGFuZ2VzLmlzQW1lbmQpIHtcclxuICAgICAgICAgICAgICAgIHZtLmlzRWRpdGFibGUgPSBjaGFuZ2VzLmlzQW1lbmQuY3VycmVudFZhbHVlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH07XHJcbiAgICAgICAgdm0uc2hvd0Vycm9yPWZ1bmN0aW9uKGN0cmwpe1xyXG4gICAgICAgICAgICBpZigoY3RybC4kaW52YWxpZCAmJiBjdHJsLiR0b3VjaGVkKSB8fCAodm0uc2hvd0Vycm9ycygpJiZjdHJsLiRpbnZhbGlkICkpe1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWVcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2VcclxuICAgICAgICB9XHJcblxyXG4gICAgfVxyXG5cclxufSkoKTtcclxuXHJcbiIsIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IGRraWx0eSBvbiA4LzUvMjAxNi5cclxuICovXHJcblxyXG4oZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKCdjb250YWN0TW9kdWxlMjUnLCBbJ2NvbnRhY3RNb2R1bGUnXSlcclxufSkoKTtcclxuXHJcbihmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ2NvbnRhY3RNb2R1bGUyNScpXHJcbiAgICAgICAgLmNvbXBvbmVudCgnY21wUmVwQ29udGFjdFJlY29yZCcsIHtcclxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdhcHAvc2NyaXB0cy9jb21wb25lbnRzL3JlcC1jb250YWN0LXJlY29yZC90cGwtcmVwLWNvbnRhY3QtcmVjb3JkXzIwMTcwMjAzXzE1MDIuaHRtbCcsXHJcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6IGNvbnRhY3RSZWNDdHJsLFxyXG4gICAgICAgICAgICBjb250cm9sbGVyQXM6ICdjb250YWN0UmVjJyxcclxuICAgICAgICAgICAgYmluZGluZ3M6IHtcclxuICAgICAgICAgICAgICAgIGNvbnRhY3RSZWNvcmQ6ICc8JyxcclxuICAgICAgICAgICAgICAgIG9uVXBkYXRlOiAnJicsXHJcbiAgICAgICAgICAgICAgICB1cGRhdGVWYWxpZDogJyYnLFxyXG4gICAgICAgICAgICAgICAgb25EZWxldGU6ICcmJyxcclxuICAgICAgICAgICAgICAgIGlzRGV0YWlsVmFsaWQ6ICcmJyxcclxuICAgICAgICAgICAgICAgIGlzQW1lbmQ6JzwnXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIGNvbnRhY3RSZWNDdHJsLiRpbmplY3Q9Wyckc2NvcGUnXTtcclxuICAgIGZ1bmN0aW9uIGNvbnRhY3RSZWNDdHJsKCRzY29wZSkge1xyXG4gICAgICAgIHZhciB2bSA9IHRoaXM7XHJcbiAgICAgICAgdm0uc2F2ZVByZXNzZWQgPSBmYWxzZTtcclxuICAgICAgICB2bS5mb3JtQW1lbmQ9ZmFsc2U7XHJcbiAgICAgICAgdm0uaXNDb250YWN0ID0gdHJ1ZTsgLy91c2VkIHRvIHNldCB0aGUgc3RhdGUgb2YgdGhlIHJvbGVcclxuICAgICAgICB2bS5pc05vdEVkaXRhYmxlID0gZmFsc2U7XHJcbiAgICAgICAgdm0uY29udGFjdE1vZGVsID0ge307XHJcbiAgICAgICAgdm0uZWRpdFN0YXRlID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgdm0uJG9uSW5pdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgLy9hZnRlciBpbml0IGRvIG5vdCBpbml0aWFsaXNlIHZhcmlhYmxlcyBoZXJlIG9uY2hhbmdlcyBpcyBjYWxsZWQgZmlyc3RcclxuXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogRHVlIHRvIGJpbmRpbmcgd2l0aCB0YWJsZSBleHBhbmRlciB0aGlzIG1ldGhvZCBkb2VzIG5vdCBnZXQgY2FsbGVkXHJcbiAgICAgICAgICogQHBhcmFtIGNoYW5nZXNcclxuICAgICAgICAgKi9cclxuICAgICAgICB2bS4kb25DaGFuZ2VzID0gZnVuY3Rpb24gKGNoYW5nZXMpIHtcclxuICAgICAgICAgICAgLy9ob3cgdGhpcyBpcyBjdXJyZW50bHkgd2lyZWQsIHRoaXMgd2lsbCBuZXZlciBmaXJlIVxyXG4gICAgICAgICAgICBpZiAoY2hhbmdlcy5jb250YWN0UmVjb3JkKSB7XHJcbiAgICAgICAgICAgICAgICB2bS5jb250YWN0TW9kZWwgPSBhbmd1bGFyLmNvcHkoY2hhbmdlcy5jb250YWN0UmVjb3JkLmN1cnJlbnRWYWx1ZSk7XHJcbiAgICAgICAgICAgICAgICB2bS5zZXRFZGl0YWJsZVN0YXRlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYoY2hhbmdlcy5pc0FtZW5kKXtcclxuICAgICAgICAgICAgICAgIHZtLmZvcm1BbWVuZD1jaGFuZ2VzLmlzQW1lbmQuY3VycmVudFZhbHVlO1xyXG4gICAgICAgICAgICAgICAgdm0uc2V0RWRpdGFibGVTdGF0ZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogIGNhbGxzIHRoZSBkZWxldGUgZnVuY3Rpb24gb24gdGhlIHBhcmVudFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHZtLmRlbGV0ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdm0ub25EZWxldGUoe2NvbnRhY3RJZDogdm0uY29udGFjdE1vZGVsLnJlcFJvbGV9KTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIC8qIEBuZ2RvYyBtZXRob2QgLWRpc2NhcmRzIHRoZSBjaGFuZ2VzIGFuZCByZXZlcnRzIHRvIHRoZSBtb2RlbFxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdm0uZGlzY2FyZENoYW5nZXMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmICh2bS5jb250YWN0UmVjRm9ybS4kcHJpc3RpbmUpIHJldHVybjtcclxuICAgICAgICAgICAgdmFyIGN1cnJSZWNvcmQgPSB2bS5jb250YWN0UmVjb3JkO1xyXG4gICAgICAgICAgICB2bS5jb250YWN0TW9kZWwgPSBhbmd1bGFyLmNvcHkoY3VyclJlY29yZCk7XHJcbiAgICAgICAgICAgIHZtLnNldE5vdEVkaXRhYmxlKCk7XHJcbiAgICAgICAgICAgIC8vc2luY2Ugd2UgYXJlIHJldmVydGluZyBiYWNrIHRvIHRoZSBsYXN0IHNhdmUgc2hvdWxkIGJlIHByaXN0aW5lXHJcbiAgICAgICAgICAgIHZtLmNvbnRhY3RSZWNGb3JtLiRzZXRQcmlzdGluZSgpO1xyXG4gICAgICAgICAgICB2bS5pc0RldGFpbFZhbGlkKHtzdGF0ZTogdm0uY29udGFjdFJlY0Zvcm0uJHZhbGlkfSk7XHJcbiAgICAgICAgICAgIHZtLnNhdmVQcmVzc2VkID0gZmFsc2U7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQG5nZG9jIG1ldGhvZCAtVXBkYXRlcyB0aGUgcGFyZW50IG9uIHdoZXRoZXIgdGhpcyByZWNvcmQgaXMgdmFsaWQgb3Igbm90XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdm0udXBkYXRlVmFsaWQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZtLmlzRGV0YWlsVmFsaWQoe3N0YXRlOiAodm0uY29udGFjdFJlY0Zvcm0uJHZhbGlkICYmICF2bS5jb250YWN0UmVjRm9ybS4kZGlydHkpfSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBJZiB0aGUgZm9ybSBpcyBkaXJ0eSBhbHdheXMgc2V0IHRoYXQgaXQgaXMgbm90IHZhbGlkXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgJHNjb3BlLiR3YXRjaCgnY29udGFjdFJlYy5jb250YWN0UmVjRm9ybS4kZGlydHknLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgLy9pZiBzdGF0ZW1lbnQgcmVkdW5kYW50P1xyXG4gICAgICAgICBpZih2bS5jb250YWN0UmVjRm9ybS4kZGlydHkpIHtcclxuICAgICAgICAgdm0uaXNEZXRhaWxWYWxpZCh7c3RhdGU6ZmFsc2V9KVxyXG4gICAgICAgICB9XHJcbiAgICAgICAgIH0sIHRydWUpO1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBVcGRhdGVzIHRoZSBjb250YWN0IG1vZGVsIHVzZWQgYnkgdGhlIHNhdmUgYnV0dG9uXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdm0udXBkYXRlQ29udGFjdE1vZGVsID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAodm0uY29udGFjdFJlY0Zvcm0uJHZhbGlkKSB7XHJcbiAgICAgICAgICAgICAgICAvL3ZtLmNvbnRhY3RNb2RlbC5pc0RldGFpbFZhbGlkID0gdHJ1ZTsgVE9ETyByZW1vdmVcclxuICAgICAgICAgICAgICAgIHZtLmlzRGV0YWlsVmFsaWQoe3N0YXRlOiB0cnVlfSk7XHJcbiAgICAgICAgICAgICAgICB2bS5jb250YWN0UmVjRm9ybS4kc2V0UHJpc3RpbmUoKTtcclxuICAgICAgICAgICAgICAgIHZtLm9uVXBkYXRlKHtjb250YWN0OiB2bS5jb250YWN0TW9kZWx9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2bS5zYXZlUHJlc3NlZCA9IHRydWU7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAbmdkb2MgbWV0aG9kIHRvZ2dsZXMgZXJyb3Igc3RhdGUgdG8gbWFrZSBlcnJvcnMgdmlzaWJsZVxyXG4gICAgICAgICAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHZtLnNob3dFcnJvcnMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAodm0uc2F2ZVByZXNzZWQpXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdm0uc2V0RWRpdGFibGVTdGF0ZSA9IGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgICAgIGlmICghdm0uZm9ybUFtZW5kKSB7XHJcbiAgICAgICAgICAgICAgICB2bS5lZGl0U3RhdGUgPSB0cnVlO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHZtLmZvcm1BbWVuZCAmJiB2bS5jb250YWN0TW9kZWwuYW1lbmQpIHtcclxuICAgICAgICAgICAgICAgIHZtLmVkaXRTdGF0ZSA9IHRydWU7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB2bS5lZGl0U3RhdGUgPSBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcblxyXG5cclxuICAgIH1cclxuXHJcblxyXG59KSgpOyIsIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IGRraWx0eSBvbiA4LzYvMjAxNi5cclxuICovXHJcblxyXG5cclxuKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgnY29udGFjdE1vZHVsZTI2JywgWydjb250YWN0TW9kdWxlMjUnLCAnZXhwYW5kaW5nVGFibGUnLCAncmVwQ29udGFjdFNlcnZpY2UnXSlcclxufSkoKTtcclxuXHJcbihmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ2NvbnRhY3RNb2R1bGUyNicpXHJcbiAgICAgICAgLmNvbXBvbmVudCgnY21wUmVwQ29udGFjdExpc3QnLCB7XHJcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnYXBwL3NjcmlwdHMvY29tcG9uZW50cy9yZXBDb250YWN0TGlzdC90cGwtcmVwLWNvbnRhY3QtbGlzdF8yMDE3MDIwM18xNTAyLmh0bWwnLFxyXG4gICAgICAgICAgICBjb250cm9sbGVyOiBjb250YWN0TGlzdEN0cmwsXHJcbiAgICAgICAgICAgIGNvbnRyb2xsZXJBczogJ2NvbnRhY3RMaXN0Q3RybCcsXHJcbiAgICAgICAgICAgIGJpbmRpbmdzOiB7XHJcbiAgICAgICAgICAgICAgICBjb250YWN0czogJzwnLFxyXG4gICAgICAgICAgICAgICAgLy8gIG9uVXBkYXRlOiAnJicsXHJcbiAgICAgICAgICAgICAgICAvLyBnZXROZXdDb250YWN0OiAnJicsXHJcbiAgICAgICAgICAgICAgICBzaG93TGlzdEVycm9yczogJyYnLFxyXG4gICAgICAgICAgICAgICAgcGFyZW50RGlydHk6ICc8JyxcclxuICAgICAgICAgICAgICAgIGlzQW1lbmQ6ICc8J1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICBjb250YWN0TGlzdEN0cmwuJGluamVjdCA9IFsnJGZpbHRlcicsICdSZXBDb250YWN0U2VydmljZSddO1xyXG4gICAgZnVuY3Rpb24gY29udGFjdExpc3RDdHJsKCRmaWx0ZXIsIFJlcENvbnRhY3RTZXJ2aWNlKSB7XHJcbiAgICAgICAgdmFyIHZtID0gdGhpcztcclxuICAgICAgICB2bS5zZWxlY3RSZWNvcmQgPSAtMTsgLy90aGUgcmVjb3JkIHRvIHNlbGVjdFxyXG4gICAgICAgIHZtLmlzRGV0YWlsVmFsaWQgPSB0cnVlOyAvL3VzZWQgdG8gdHJhY2sgaWYgZGV0YWlscyB2YWxpZC4gSWYgdGhleSBhcmUgIG5vdCBkbyBub3QgYWxsb3cgZXhwYW5kZXIgY29sbGFwc2VcclxuICAgICAgICB2bS5jb250YWN0TGlzdCA9IFtdO1xyXG4gICAgICAgIHZtLm9uZVJlY29yZCA9IFwiXCI7IC8vdXNpbmcgcmVxdWlyZWQgYXMgdGhlIHZhbGlkYWl0b25cclxuICAgICAgICB2bS5pc1BhcmVudERpcnR5ID0gZmFsc2U7IC8vdHJhY2tzIHdoZXRoZXIgdGhlIHBhcmVudCBmb3JtIGhhcyBiZWVuIGRpcnRpZWRcclxuICAgICAgICB2bS5mb3JtQW1lbmQgPSBmYWxzZTtcclxuICAgICAgICB2bS5yZXNldENvbGxhcHNlZCA9IGZhbHNlO1xyXG4gICAgICAgIHZhciByZXBDb250YWN0U2VydmljZSA9IG5ldyBSZXBDb250YWN0U2VydmljZSgpO1xyXG4gICAgICAgIHZtLmNvbHVtbkRlZiA9IFtcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbGFiZWw6IFwiRklSU1RfTkFNRVwiLFxyXG4gICAgICAgICAgICAgICAgYmluZGluZzogXCJnaXZlbk5hbWVcIixcclxuICAgICAgICAgICAgICAgIHdpZHRoOiBcIjQwXCJcclxuICAgICAgICAgICAgfSxcclxuXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGxhYmVsOiBcIkxBU1RfTkFNRVwiLFxyXG4gICAgICAgICAgICAgICAgYmluZGluZzogXCJzdXJuYW1lXCIsXHJcbiAgICAgICAgICAgICAgICB3aWR0aDogXCI0MFwiXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGxhYmVsOiBcIk9ORV9ST0xFXCIsXHJcbiAgICAgICAgICAgICAgICBiaW5kaW5nOiBcInJlcFJvbGVcIixcclxuICAgICAgICAgICAgICAgIHdpZHRoOiBcIjIwXCJcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIF07XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogdXNpbmcgdG8gZ2V0IGNvbnRhY3QgbGlzdFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHZtLiRvbkluaXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZtLmZvY3VzZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgLy8gdm0uY29udGFjdExpc3QgPSB2bS5jb250YWN0cztcclxuICAgICAgICB9O1xyXG4gICAgICAgIHZtLiRvbkNoYW5nZXMgPSBmdW5jdGlvbiAoY2hhbmdlcykge1xyXG4gICAgICAgICAgICBpZiAoY2hhbmdlcy5jb250YWN0cykge1xyXG4gICAgICAgICAgICAgICAgdm0uY29udGFjdExpc3QgPSBjaGFuZ2VzLmNvbnRhY3RzLmN1cnJlbnRWYWx1ZTtcclxuICAgICAgICAgICAgICAgIHZtLnVwZGF0ZUVycm9yU3RhdGUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoY2hhbmdlcy5wYXJlbnREaXJ0eSkge1xyXG4gICAgICAgICAgICAgICAgdm0uaXNQYXJlbnREaXJ0eSA9IGNoYW5nZXMucGFyZW50RGlydHkuY3VycmVudFZhbHVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChjaGFuZ2VzLmlzQW1lbmQpIHtcclxuICAgICAgICAgICAgICAgIHZtLmZvcm1BbWVuZCA9IGNoYW5nZXMuaXNBbWVuZC5jdXJyZW50VmFsdWU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfTtcclxuICAgICAgICB2bS5pc0FkZENvbnRhY3QgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmICh2bS5jb250YWN0TGlzdC5sZW5ndGggPiAxKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiAodm0uaXNEZXRhaWxWYWxpZCk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdm0uc2hvd05vUmVjb3JkRXJyb3IgPSBmdW5jdGlvbiAoaXNJbnZhbGlkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAoKHZtLmlzUGFyZW50RGlydHkgJiYgaXNJbnZhbGlkICApIHx8ICh2bS5zaG93TGlzdEVycm9ycygpICYmIGlzSW52YWxpZCkpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZtLnNldFZhbGlkID0gZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHZtLmlzRGV0YWlsVmFsaWQgPSB2YWx1ZTsgLy90aGlzIGlzIGEgc2hhcmVkIHZhbHVlXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdm0uc2hvd0Vycm9yID0gZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuICh2bS5jb250YWN0TGlzdEZvcm0uJGludmFsaWQgJiYgIXZtLmNvbnRhY3RMaXN0Rm9ybS4kcHJpc3RpbmUpIHx8ICh2bS5jb250YWN0TGlzdEZvcm0uJGludmFsaWQgJiYgdm0uc2hvd0xpc3RFcnJvcnMoKSk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdm0ub25VcGRhdGVDb250YWN0UmVjb3JkID0gZnVuY3Rpb24gKHJlY29yZCkge1xyXG4gICAgICAgICAgICB2YXIgaWR4ID0gdm0uY29udGFjdExpc3QuaW5kZXhPZihcclxuICAgICAgICAgICAgICAgICRmaWx0ZXIoJ2ZpbHRlcicpKHZtLmNvbnRhY3RMaXN0LCB7cmVwUm9sZTogcmVjb3JkLnJlcFJvbGV9LCB0cnVlKVswXVxyXG4gICAgICAgICAgICApOyAvL1RPRE8gZml4IGZpbHRlclxyXG4gICAgICAgICAgICB2bS5jb250YWN0TGlzdFtpZHhdID0gYW5ndWxhci5jb3B5KHJlY29yZCk7XHJcbiAgICAgICAgICAgIHZtLnVwZGF0ZUVycm9yU3RhdGUoKTtcclxuICAgICAgICAgICAgdm0uY29udGFjdExpc3RGb3JtLiRzZXRQcmlzdGluZSgpO1xyXG4gICAgICAgICAgICB2bS5yZXNldENvbGxhcHNlZCA9ICF2bS5yZXNldENvbGxhcHNlZDtcclxuICAgICAgICAgICAgdm0uZGlzYWJsZUFkZCgpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgLyoqKlxyXG4gICAgICAgICAqIFRyYWNrcyBpZiBubyByZWNvcmRzXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdm0udXBkYXRlRXJyb3JTdGF0ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKHZtLmNvbnRhY3RMaXN0ICYmIHZtLmNvbnRhY3RMaXN0Lmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgIHZtLm9uZVJlY29yZCA9IFwiaXMgdmFsdWVcIjtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHZtLm9uZVJlY29yZCA9IFwiXCI7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfTtcclxuICAgICAgICB2bS5kZWxldGVDb250YWN0ID0gZnVuY3Rpb24gKGNJRCkge1xyXG4gICAgICAgICAgICB2YXIgaWR4ID0gdm0uY29udGFjdExpc3QuaW5kZXhPZihcclxuICAgICAgICAgICAgICAgICRmaWx0ZXIoJ2ZpbHRlcicpKHZtLmNvbnRhY3RMaXN0LCB7cmVwUm9sZTogY0lEfSwgdHJ1ZSlbMF1cclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgdm0uY29udGFjdExpc3Quc3BsaWNlKGlkeCwgMSk7XHJcbiAgICAgICAgICAgIC8vY2hlY2sgaWYgb25seSBvbmUgcmVjb3JkXHJcbiAgICAgICAgICAgIC8vdG9kbyBnZXQgQWx0ZXJuYXRlXHJcbiAgICAgICAgICAgIGlmICh2bS5jb250YWN0TGlzdC5sZW5ndGggPT09IDEgJiYgdm0uY29udGFjdExpc3RbMF0ucmVwUm9sZSAhPT0gXCJQUklNQVJZXCIpIHtcclxuICAgICAgICAgICAgICAgIHZtLmNvbnRhY3RMaXN0WzBdLnJlcFJvbGUgPSBcIlBSSU1BUllcIjtcclxuICAgICAgICAgICAgICAgIHZhciB0ZW1wPWFuZ3VsYXIuY29weSh2bS5jb250YWN0TGlzdCk7XHJcbiAgICAgICAgICAgICAgICB2bS5jb250YWN0TGlzdD1bXTtcclxuICAgICAgICAgICAgICAgIHZtLmNvbnRhY3RMaXN0PXRlbXA7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vdm0ub25VcGRhdGUoe25ld0xpc3Q6IHZtLmNvbnRhY3RMaXN0fSk7XHJcbiAgICAgICAgICAgIHZtLnVwZGF0ZUVycm9yU3RhdGUoKTtcclxuICAgICAgICAgICAgdm0uZGlzYWJsZUFkZCgpO1xyXG4gICAgICAgICAgICB2bS5zZXRWYWxpZCh0cnVlKTtcclxuICAgICAgICAgICAgdm0uc2VsZWN0UmVjb3JkID0gLTE7XHJcbiAgICAgICAgICAgIHZtLnJlc2V0Q29sbGFwc2VkID0gIXZtLnJlc2V0Q29sbGFwc2VkO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQWRkcyBhIGNvbnRhY3QgdG8gdGhlIGNvbnRhY3QgbGlzdFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHZtLmFkZENvbnRhY3QgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBkZWZhdWx0Q29udGFjdCA9IHJlcENvbnRhY3RTZXJ2aWNlLmNyZWF0ZVJlcENvbnRhY3Qodm0uY29udGFjdExpc3QpO1xyXG4gICAgICAgICAgICB2bS5jb250YWN0TGlzdC5wdXNoKGRlZmF1bHRDb250YWN0KTtcclxuICAgICAgICAgICAgLy9zZWxlY3QgdGFibGUgcm93IGZpcnN0IHRoZW4gbWFrZSBpbnZhbGlkXHJcbiAgICAgICAgICAgIHZtLnNlbGVjdFJlY29yZCA9ICh2bS5jb250YWN0TGlzdC5sZW5ndGggLSAxKTtcclxuICAgICAgICAgICAgdm0uc2V0VmFsaWQoZmFsc2UpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZtLmRpc2FibGVBZGQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmICghdm0uY29udGFjdExpc3QpIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgdmFyIGlzSW52YWxpZCA9ICF2bS5pc0RldGFpbFZhbGlkIHx8IHZtLmNvbnRhY3RMaXN0Lmxlbmd0aCA9PSAyIHx8ICh2bS5jb250YWN0TGlzdC5sZW5ndGggPiAwICYmIHZtLmNvbnRhY3RMaXN0Rm9ybS4kaW52YWxpZCk7XHJcbiAgICAgICAgICAgICAgIC8vIHx8ICh2bS5jb250YWN0TGlzdEZvcm0uJHZhbGlkICYmIHZtLmNvbnRhY3RMaXN0Rm9ybS4kZGlydHkpO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIGlzSW52YWxpZDtcclxuXHJcbiAgICAgICAgfVxyXG5cclxuICAgIH1cclxuXHJcbn0pKCk7XHJcbiIsIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IGRraWx0eSBvbiAxMi8wNy8yMDE2LlxyXG4gKi9cclxuXHJcbihmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgnZmlsZUlPJywgW10pO1xyXG5cclxufSkoKTtcclxuXHJcbihmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcbiAgICAvKipcclxuICAgICAqIEBuZ2RvYyBkaXJlY3RpdmUgLWF0dHJpYnV0ZSBkaXJlY3RpdmUgZm9yIGZpbGUgbG9hZC4gUGxhY2Ugb24gZmlsZSBpbnB1dCBlbGVtZW50XHJcbiAgICAgKiBhdHRyaWJ1dGUgbXVzdCBiZSBib3VuZCB0byBhIGZ1bmN0aW9uIHdpdGggYSBwYXJhbWV0ZXIgbmFtZWQgZmlsZUNvbnRlbnQuIE9uIGxvYWRcclxuICAgICAqIHRoZSBmdW5jdGlvbiB3aWxsIGJlIGNhbGxlZCB0byB1cGRhdGUgdmFsdWVzXHJcbiAgICAgKi9cclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKCdmaWxlSU8nKVxyXG4gICAgICAgIC5kaXJlY3RpdmUoJ2hwZmJGaWxlU2VsZWN0JywgbmdGaWxlU2VsZWN0KTtcclxuXHJcbiAgICBuZ0ZpbGVTZWxlY3QuJGluamVjdCA9IFsnaHBmYkZpbGVQcm9jZXNzaW5nJ107XHJcbiAgICBmdW5jdGlvbiBuZ0ZpbGVTZWxlY3QoaHBmYkZpbGVSZWFkZXIpIHtcclxuICAgICAgICB2YXIgZGlyZWN0aXZlID0ge1xyXG5cclxuICAgICAgICAgICAgbGluazogbGluayxcclxuICAgICAgICAgICAgcmVzdHJpY3Q6ICdBJyxcclxuICAgICAgICAgICAgc2NvcGU6IHtcclxuICAgICAgICAgICAgICAgIGhwZmJGaWxlU2VsZWN0OiBcIiZcIixcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9O1xyXG4gICAgICAgIHJldHVybiBkaXJlY3RpdmU7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGxpbmsoc2NvcGUsIGVsZW1lbnQsIGF0dHJzKSB7XHJcbiAgICAgICAgICAgIHNjb3BlLnJvb3RUYWcgPSBhdHRycy5yb290VGFnO1xyXG4gICAgICAgICAgICBlbGVtZW50LmJpbmQoXCJjaGFuZ2VcIiwgZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgICAgIHNjb3BlLmZpbGUgPSAoZS5zcmNFbGVtZW50IHx8IGUudGFyZ2V0KS5maWxlc1swXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaHBmYkZpbGVSZWFkZXIucmVhZEFzRGF0YVRleHQoc2NvcGUuZmlsZSwgc2NvcGUpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjb3BlLmhwZmJGaWxlU2VsZWN0KHtmaWxlQ29udGVudDogcmVzdWx0fSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcblxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH1cclxuXHJcbiAgICB9XHJcbn0pKCk7XHJcblxyXG4oZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG4gICAgLyoqXHJcbiAgICAgKiBAbmdkb2MgY29tcG9uZW50LSBmaWxlU2VsZWN0IFVJIGZvciBsb2FkaW5nIGZpbGVzIGludG8gYSBkYXRhIG1vZGVsXHJcbiAgICAgKiBAcGFyYW0gdXBkYXRlTW9kZWxSb290LSB0aGUgZnVuY3Rpb24gdG8gY2FsbCBhbmQgcGFzcyB0aGUgSlNPTiBtb2RlbFxyXG4gICAgICogQHBhcmFtIHJvb3RFbGVtIC0gdGhlIG5hbWUgb2YgdGhlIHJvb3QgZWxlbWVudC4gVXNlZCBmb3IgY29tcGFyaW5nIHRvIHRoZSBsb2FkZWQgZmlsZVxyXG4gICAgICovXHJcbiAgICBhbmd1bGFyLm1vZHVsZSgnZmlsZUlPJykuY29tcG9uZW50KCdocGZiRmlsZVNlbGVjdCcsIHtcclxuICAgICAgICB0ZW1wbGF0ZVVybDogJ2FwcC9zY3JpcHRzL2NvbXBvbmVudHMvZmlsZUlPL2ZpbGVTZWxlY3RfMjAxNzAyMDNfMTUwMi5odG1sJyxcclxuICAgICAgICBjb250cm9sbGVyOiBGaWxlU2VsZWN0Q29udHJvbGxlcixcclxuICAgICAgICBiaW5kaW5nczoge1xyXG4gICAgICAgICAgICB1cGRhdGVNb2RlbFJvb3Q6ICcmJyxcclxuICAgICAgICAgICAgcm9vdEVsZW06ICdAJyxcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcblxyXG4gICAgRmlsZVNlbGVjdENvbnRyb2xsZXIuJGluamVjdCA9IFsnaHBmYkZpbGVQcm9jZXNzaW5nJ107XHJcbiAgICBmdW5jdGlvbiBGaWxlU2VsZWN0Q29udHJvbGxlcihocGZiRmlsZVByb2Nlc3NpbmcpIHtcclxuICAgICAgICB2YXIgdm0gPSB0aGlzO1xyXG4gICAgICAgIHZtLmZpbGVUeXBlcyA9IFwiLnhtbCwgLmhjc2NcIjtcclxuICAgICAgICB2bS5tb2RlbENhbGxiYWNrID0gZnVuY3Rpb24gKGZpbGVDb250ZW50KSB7XHJcbiAgICAgICAgICAgIHZtLnN0YXR1cyA9IFwiXCI7XHJcbiAgICAgICAgICAgIGlmIChmaWxlQ29udGVudCkge1xyXG4gICAgICAgICAgICAgICAgdm0uc3RhdHVzID0gZmlsZUNvbnRlbnQubWVzc2FnZXM7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdm0udXBkYXRlTW9kZWxSb290KHtmaWxlQ29udGVudDogZmlsZUNvbnRlbnR9KTtcclxuICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KGZpbGVMb2FkKS50cmlnZ2VyKCdmb2N1cycpO1xyXG5cclxuICAgICAgICB9O1xyXG4gICAgfVxyXG59KSgpO1xyXG5cclxuKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBuZ2RvYyBjb21wb25lbnQgLSB0aGUgVUkgY29tcG9uZW50IGZvciBzYXZpbmcgYSBkYXRhIG1vZGVsXHJcbiAgICAgKiBAcGFyYW0ganNvblRvU2F2ZS0gdGhlIEpTT04gZGF0YSBtb2RlbCB0byBzYXZlXHJcbiAgICAgKiBAcGFyYW0gIHJvb3RUYWcgLSB0aGUgc3RyaW5nIG5hbWUgb2YgdGhlIHJvb3QgdGFnLiBOZWVkZWQgZm9yIGxvb2t1cHNcclxuICAgICAqIEBwYXJhbSBzYXZlVHlwZS0gdmFsaWQgdmFsdWVzIGFyZSAnanNvbicgb3IgJ3htbCdcclxuICAgICAqIEBwYXJhbSBidXR0b25MYWJlbCAtdGhlIGxhYmVsIGZvciB0aGUgc2F2ZSBidXR0b25cclxuICAgICAqL1xyXG4gICAgYW5ndWxhci5tb2R1bGUoJ2ZpbGVJTycpLmNvbXBvbmVudCgnaHBmYkZpbGVTYXZlJywge1xyXG4gICAgICAgIHRlbXBsYXRlVXJsOiAnYXBwL3NjcmlwdHMvY29tcG9uZW50cy9maWxlSU8vZmlsZVNhdmVfMjAxNzAyMDNfMTUwMi5odG1sJyxcclxuICAgICAgICBjb250cm9sbGVyOiBGaWxlV3JpdGVDb250cm9sbGVyLFxyXG4gICAgICAgIGJpbmRpbmdzOiB7XHJcbiAgICAgICAgICAgIGpzb25Ub1NhdmU6ICc8JyxcclxuICAgICAgICAgICAgcm9vdFRhZzogJ0AnLFxyXG4gICAgICAgICAgICBzYXZlVHlwZTogJ0AnLFxyXG4gICAgICAgICAgICBidXR0b25MYWJlbDogJ0AnLFxyXG4gICAgICAgICAgICBidXR0b25EaXNhYmxlZDonQCdcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcblxyXG4gICAgRmlsZVdyaXRlQ29udHJvbGxlci4kaW5qZWN0ID0gWydocGZiRmlsZVByb2Nlc3NpbmcnXTtcclxuICAgIC8qKlxyXG4gICAgICogQG5nZG9jIGNvbnRyb2xsZXIgLSBjb250cm9sbGVyIGZvciBmaWxlIHdyaXRpbmdcclxuICAgICAqIEBwYXJhbSBocGZiRmlsZVByb2Nlc3NpbmcgLSB0aGUgc2VydmljZSB0aGF0IGRvZXMgYWxsIHRoZSBmaWxlIGNyZWF0aW9uIGFuZCB2YWxpZGF0aW9uXHJcbiAgICAgKiBAY29uc3RydWN0ZXIgX2luaXQtIGluaXRpYWxpemVzIHN0YXRlIGFzIG5lZWRlZC4gVXBkYXRlcyBidXR0b24gZGlzYWJsZWRcclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gRmlsZVdyaXRlQ29udHJvbGxlcihocGZiRmlsZVByb2Nlc3NpbmcpIHtcclxuXHJcbiAgICAgICAgdmFyIHZtID0gdGhpcztcclxuICAgICAgICB2bS4kb25Jbml0ID1faW5pdDtcclxuICAgICAgICB2bS5nZW5lcmF0ZSA9IF9nZW5lcmF0ZUZpbGU7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIF9nZW5lcmF0ZUZpbGUoKXtcclxuICAgICAgICAgICAgaWYgKHZtLnNhdmVUeXBlLnRvVXBwZXJDYXNlKCkgPT09IFwiSlNPTlwiKSB7XHJcbiAgICAgICAgICAgICAgICBocGZiRmlsZVByb2Nlc3Npbmcud3JpdGVBc0pzb24odm0uanNvblRvU2F2ZSwgdm0uZmlsZU5hbWUsIHZtLnJvb3RUYWcpO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHZtLnNhdmVUeXBlLnRvVXBwZXJDYXNlKCkgPT09IFwiWE1MXCIpIHtcclxuICAgICAgICAgICAgICAgIGhwZmJGaWxlUHJvY2Vzc2luZy53cml0ZUFzWG1sKHZtLmpzb25Ub1NhdmUsIHZtLmZpbGVOYW1lLCB2bS5yb290VGFnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBmdW5jdGlvbiBfaW5pdCgpe1xyXG4gICAgICAgICAgIC8vZGlzYWJsZWQgc3RhdGVcclxuICAgICAgICAgICAgaWYoIXZtLmJ1dHRvbkRpc2FibGVkKXtcclxuICAgICAgICAgICAgICAgdm0uYnV0dG9uRGlzYWJsZWQ9ZmFsc2U7XHJcbiAgICAgICAgICAgIH1lbHNlIGlmKHZtLmJ1dHRvbkRpc2FibGVkLnRvTG93ZXJDYXNlKCk9PT1cInRydWVcIil7XHJcbiAgICAgICAgICAgICAgICB2bS5idXR0b25EaXNhYmxlZD10cnVlXHJcbiAgICAgICAgICAgIH1lbHNlIGlmKHZtLmJ1dHRvbkRpc2FibGVkLnRvTG93ZXJDYXNlKCk9PT1cImZhbHNlXCIpe1xyXG4gICAgICAgICAgICAgICAgdm0uYnV0dG9uRGlzYWJsZWQ9ZmFsc2U7XHJcbiAgICAgICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICAgICAgdm0uYnV0dG9uRGlzYWJsZWQ9ZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0pKCk7XHJcblxyXG5cclxuKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuICAgIC8qKlxyXG4gICAgICogQG5nZG9jIHNlcnZpY2UtIHByb2Nlc3NlcyBhbGwgZmlsZXMgZm9yIGxvYWQgYW5kIHdyaXRpbmdcclxuICAgICAqL1xyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ2ZpbGVJTycpXHJcbiAgICAgICAgLmZhY3RvcnkoJ2hwZmJGaWxlUHJvY2Vzc2luZycsIGZpbGVSZWFkZXIpO1xyXG5cclxuICAgIGZpbGVSZWFkZXIuJGluamVjdCA9IFsnJHEnXTtcclxuICAgIC8qIEBuZ0luamVjdCAqL1xyXG4gICAgZnVuY3Rpb24gZmlsZVJlYWRlcigkcSkge1xyXG4gICAgICAgIC8vY29uc3RhbnRzIHVzZWQgZm9yIG1lc3NhZ2luZ1xyXG4gICAgICAgIHZhciBtc2dfc3VjY2VzcyA9IFwiTVNHX1NVQ0NFU1NfTE9BRFwiOyAvL2xvYWQgd2FzIGEgc3VjY2Vzc1xyXG4gICAgICAgIHZhciBtc2dfZXJyX2pzb25wYXJzZSA9IFwiTVNHX0VSUl9KU09OUEFSU0VcIjsgLy9qc29uIHBhcnNpbmcgZXJyb3JcclxuICAgICAgICB2YXIgbXNnX2Vycl94bWxwYXJzZSA9IFwiTVNHX0VSUl9YTUxQQVJTRVwiOyAvL3htbCBwYXJzaW5nIGVycm9yXHJcbiAgICAgICAgdmFyIG1zZ19lcnJfbG9hZCA9IFwiTVNHX0VSUl9GSUxFX0xPQURcIjsgLy9maWxlIGxvYWQgZXJyb3JcclxuICAgICAgICB2YXIgbXNnX2Vycl9maWxlVHlwZSA9IFwiTVNHX0VSUl9GSUxFX1RZUEVcIjsgLy9maWxlIHR5cGUgZXJyb3JcclxuICAgICAgICB2YXIgbXNnX2Vycl9mb3JtVHlwZSA9IFwiTVNHX0VSUl9GT1JNX1RZUEVcIjsgLy8gdmFsaWQganNvbiBidXQgaW5jb3JyZWN0IHJvb3QgdGFnXHJcbiAgICAgICAgdmFyIG1zZ19lcnJfY2hlY2tzdW1fY29tcGFyZUZhaWwgPSBcIk1TR19FUlJfQ0hFQ0tTVU1fRkFJTFwiO1xyXG4gICAgICAgIHZhciBkcmFmdF9maWxlX3R5cGUgPSBcImhjc2NcIjsgLy8gdHlwZSBvZiBmaWxlIHN1ZmZpeCBmb3IgSlNPTiBmaWxlcy4gQ2FuIGNoYW5nZSB0byBwcm9jZXNzIG90aGVyIHR5cGVzXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQG5nT2JqZWN0OiB1c2VkIHRvIHN0b3JlIHRoZSBqc29uUmVzdWx0IGFuZCBhbnkgbWVzc2FnZXNcclxuICAgICAgICAgKiBAdHlwZSB7e2pzb25SZXN1bHQ6IHN0cmluZywgbWVzc2FnZXM6IHN0cmluZ319XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdmFyIGNvbnZlcnRSZXN1bHQgPSB7XHJcbiAgICAgICAgICAgIGpzb25SZXN1bHQ6IFwiXCIsXHJcbiAgICAgICAgICAgIG1lc3NhZ2VzOiBcIlwiXHJcbiAgICAgICAgfTtcclxuICAgICAgICB2YXIgc2VydmljZSA9IHtcclxuICAgICAgICAgICAgcmVhZEFzRGF0YVRleHQ6IHJlYWRBc0RhdGFUZXh0LFxyXG4gICAgICAgICAgICB3cml0ZUFzSnNvbjoganNvblRvRmlsZSxcclxuICAgICAgICAgICAgd3JpdGVBc1htbDogeG1sVG9GaWxlXHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4gc2VydmljZTtcclxuXHJcbiAgICAgICAgLy8vLy8vLy8vLy8vLy8vL1xyXG4gICAgICAgIGZ1bmN0aW9uIG9uTG9hZChyZWFkZXIsIGRlZmVycmVkLCBzY29wZSwgZmlsZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgc2NvcGUuJGFwcGx5KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZmlsZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3BsaXRGaWxlID0gZmlsZS5uYW1lLnNwbGl0KCcuJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmaWxlVHlwZSA9IHNwbGl0RmlsZVtzcGxpdEZpbGUubGVuZ3RoIC0gMV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgoZmlsZVR5cGUudG9Mb3dlckNhc2UoKSkgPT0gZHJhZnRfZmlsZV90eXBlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb252ZXJ0VG9KU09OT2JqZWN0cyhyZWFkZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2tSb290VGFnTWF0Y2gocmVhZGVyLCBzY29wZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBBcyBwZXIgbWVldGluZyBvZiBvY3QgMjFcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZWFkZXIucGFyc2VSZXN1bHQuanNvblJlc3VsdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBhcmVIYXNoSW5Kc29uKHJlYWRlciwgc2NvcGUucm9vdFRhZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9Ki9cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICgoZmlsZVR5cGUudG9Mb3dlckNhc2UoKSA9PT0gXCJ4bWxcIikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnZlcnRYTUxUb0pTT05PYmplY3RzKHJlYWRlcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGVja1Jvb3RUYWdNYXRjaChyZWFkZXIsIHNjb3BlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIEFzIHBlciBtZWV0aW5nIG9mIG9jdCAyMVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlYWRlci5wYXJzZVJlc3VsdC5qc29uUmVzdWx0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tcGFyZUhhc2hJblhNTChyZWFkZXIsIHNjb3BlKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSovXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udmVydFJlc3VsdC5wYXJzZVJlc3VsdCA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb252ZXJ0UmVzdWx0Lm1lc3NhZ2VzID0gbXNnX2Vycl9maWxlVHlwZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlYWRlci5wYXJzZVJlc3VsdCA9IGNvbnZlcnRSZXN1bHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZShyZWFkZXIucGFyc2VSZXN1bHQpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIG9uRXJyb3IocmVhZGVyLCBkZWZlcnJlZCwgc2NvcGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHNjb3BlLiRhcHBseShmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9UT0RPIG5lZWQgdG8gcmV2aWV3IHJlamVjdCBjYXNlXHJcbiAgICAgICAgICAgICAgICAgICAgZGVmZXJyZWQucmVqZWN0KG1zZ19lcnJfbG9hZCk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBmdW5jdGlvbiBnZXRSZWFkZXIoZGVmZXJyZWQsIHNjb3BlLCBmaWxlKSB7XHJcbiAgICAgICAgICAgIHZhciByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpO1xyXG4gICAgICAgICAgICAvL2V4dGVuZCB0aGUgZmlsZVJlYWRlciBvYmplY3RcclxuICAgICAgICAgICAgcmVhZGVyLm9ubG9hZCA9IG9uTG9hZChyZWFkZXIsIGRlZmVycmVkLCBzY29wZSwgZmlsZSk7XHJcbiAgICAgICAgICAgIHJlYWRlci5vbkVycm9yID0gb25FcnJvcihyZWFkZXIsIGRlZmVycmVkLCBzY29wZSk7XHJcbiAgICAgICAgICAgIHJlYWRlci5wYXJzZVJlc3VsdCA9IG51bGw7XHJcbiAgICAgICAgICAgIHJldHVybiByZWFkZXI7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiByZWFkQXNEYXRhVGV4dChmaWxlLCBzY29wZSkge1xyXG4gICAgICAgICAgICB2YXIgZGVmZXJyZWQgPSAkcS5kZWZlcigpO1xyXG4gICAgICAgICAgICB2YXIgcmVhZGVyID0gZ2V0UmVhZGVyKGRlZmVycmVkLCBzY29wZSwgZmlsZSk7XHJcblxyXG4gICAgICAgICAgICBpZiAoZmlsZSkge1xyXG4gICAgICAgICAgICAgICAgcmVhZGVyLnJlYWRBc1RleHQoZmlsZSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZWFkZXIucGFyc2VSZXN1bHQgPSBjb252ZXJ0UmVzdWx0O1xyXG4gICAgICAgICAgICAgICAgcmVhZGVyLnBhcnNlUmVzdWx0Lm1lc3NhZ2VzID0gXCJcIjtcclxuICAgICAgICAgICAgICAgIHJlYWRlci5wYXJzZVJlc3VsdC5qc29uUmVzdWx0ID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIC8vY2FzZSBvZiBjbGVhcmluZyBvdXQgdGhlIG1lc3NhZ2VzIGFzIG5vIGZpbGUgd2FzIHNlbGVjdGVkXHJcbiAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKHJlYWRlci5wYXJzZVJlc3VsdCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBjb252ZXJ0VG9KU09OT2JqZWN0cyhyZWFkZXIpIHtcclxuXHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICBjb252ZXJ0UmVzdWx0Lmpzb25SZXN1bHQgPSBKU09OLnBhcnNlKHJlYWRlci5yZXN1bHQpO1xyXG4gICAgICAgICAgICAgICAgY29udmVydFJlc3VsdC5tZXNzYWdlcyA9IG1zZ19zdWNjZXNzO1xyXG4gICAgICAgICAgICAgICAgcmVhZGVyLnBhcnNlUmVzdWx0ID0gY29udmVydFJlc3VsdDtcclxuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICAgICAgY29udmVydFJlc3VsdC5qc29uUmVzdWx0ID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIGNvbnZlcnRSZXN1bHQubWVzc2FnZXMgPSBtc2dfZXJyX2pzb25wYXJzZTtcclxuICAgICAgICAgICAgICAgIHJlYWRlci5wYXJzZVJlc3VsdCA9IGNvbnZlcnRSZXN1bHQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBuZ2RvYyBtZXRob2QgY29udmVydHMgYSB2YWxpZCBYTUwgZmlsZSB0byBhIEpTT04gb2JqZWN0XHJcbiAgICAgICAgICogQHBhcmFtIHJlYWRlci0gdGhlIGV4dGVuZGVkIGZpbGUgcmVhZGVyIG9iamVjdFxyXG4gICAgICAgICAqIEByZXR1cm5zIG51bGxcclxuICAgICAgICAgKi9cclxuICAgICAgICBmdW5jdGlvbiBjb252ZXJ0WE1MVG9KU09OT2JqZWN0cyhyZWFkZXIpIHtcclxuICAgICAgICAgICAgdmFyIHhtbENvbmZpZyA9IHtcclxuICAgICAgICAgICAgICAgIGVzY2FwZU1vZGU6IHRydWUsXHJcbiAgICAgICAgICAgICAgICBlbXB0eU5vZGVGb3JtOiBcInRleHRcIixcclxuICAgICAgICAgICAgICAgIHVzZURvdWJsZVF1b3RlczogdHJ1ZVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB2YXIgeG1sQ29udmVydGVyID0gbmV3IFgySlMoeG1sQ29uZmlnKTtcclxuICAgICAgICAgICAgLy9jb252ZXJ0cyBYTUwgYXMgYSBzdHJpbmcgdG8gYSBqc29uXHJcbiAgICAgICAgICAgIGNvbnZlcnRSZXN1bHQuanNvblJlc3VsdCA9IHhtbENvbnZlcnRlci54bWxfc3RyMmpzb24ocmVhZGVyLnJlc3VsdCk7XHJcblxyXG4gICAgICAgICAgICBpZiAoY29udmVydFJlc3VsdC5qc29uUmVzdWx0ID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBjb252ZXJ0UmVzdWx0Lm1lc3NhZ2VzID0gbXNnX2Vycl94bWxwYXJzZTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNvbnZlcnRSZXN1bHQubWVzc2FnZXMgPSBtc2dfc3VjY2VzcztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZWFkZXIucGFyc2VSZXN1bHQgPSBjb252ZXJ0UmVzdWx0O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gY29udmVydEpTT05PYmplY3RzVG9YTUwoanNvbk9iaikge1xyXG4gICAgICAgICAgICB2YXIgeG1sQ29uZmlnID0ge1xyXG4gICAgICAgICAgICAgICAgZXNjYXBlTW9kZTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIGVtcHR5Tm9kZUZvcm06IFwidGV4dFwiLFxyXG4gICAgICAgICAgICAgICAgdXNlRG91YmxlUXVvdGVzOiB0cnVlXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHZhciBqc29uQ29udmVydGVyID0gbmV3IFgySlMoeG1sQ29uZmlnKTtcclxuICAgICAgICAgICAgdmFyIHhtbFJlc3VsdCA9IG51bGw7XHJcbiAgICAgICAgICAgIC8vY29udmVydHMgWE1MIGFzIGEgc3RyaW5nIHRvIGEganNvblxyXG4gICAgICAgICAgICB4bWxSZXN1bHQgPSBqc29uQ29udmVydGVyLmpzb24yeG1sX3N0cihqc29uT2JqKTtcclxuICAgICAgICAgICAgcmV0dXJuICh4bWxSZXN1bHQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQG5nRG9jIG1ldGhvZCAtIGNoZWNrcyBpZiB0aGUgcm9vdCB0YWcgbWF0Y2hlcyB0aGUgZXhwZWN0ZWQuIElmIGl0IGRvZXNuJ3QgbWF0Y2gsIGNsZWFycyB0aGUgZGF0YVxyXG4gICAgICAgICAqIGFuZCBzZXRzIHRoZSBlcnJvciBtZXNzYWdlXHJcbiAgICAgICAgICogQHBhcmFtIHJlYWRlciB0aGUgZmlsZSByZWFkZXIgb2JqZWN0IHRoYXQgaXMgdXNlZCB0byByZWFkIGluIGEgZmlsZVxyXG4gICAgICAgICAqIEBwYXJhbSBzY29wZSAtIHNjb3BlIG9mIHRoZSBzZXJ2aWNlXHJcbiAgICAgICAgICogIEByZXR1cm5zIG51bGxcclxuICAgICAgICAgKi9cclxuICAgICAgICBmdW5jdGlvbiBjaGVja1Jvb3RUYWdNYXRjaChyZWFkZXIsIHNjb3BlKSB7XHJcbiAgICAgICAgICAgIGlmICghc2NvcGUucm9vdFRhZyB8fCAhcmVhZGVyLnBhcnNlUmVzdWx0IHx8ICFyZWFkZXIucGFyc2VSZXN1bHQuanNvblJlc3VsdCkgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgaWYgKCFyZWFkZXIucGFyc2VSZXN1bHQuanNvblJlc3VsdFtzY29wZS5yb290VGFnXSkge1xyXG4gICAgICAgICAgICAgICAgcmVhZGVyLnBhcnNlUmVzdWx0Lmpzb25SZXN1bHQgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgcmVhZGVyLnBhcnNlUmVzdWx0Lm1lc3NhZ2VzID0gbXNnX2Vycl9mb3JtVHlwZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQG5nZG9jIG1ldGhvZCAtIGluc2VydHMgYSBoYXNoIHZhbHVlIGludG8gYSBqc29uIG9iamVjdC4gSGFzaCBpcyBjYWxjdWxhdGVkIG9uIHRoZSBlbnRpcmUganNvblxyXG4gICAgICAgICAqIEBwYXJhbSBqc29uT2JqLSB0aGUganNvbiBvYmplY3QgdG8gaGFzaFxyXG4gICAgICAgICAqIEBwYXJhbSByb290VGFnLSB0aGUgcm9vdCB0YWcgb2YgdGhlIGpzb25PYmplY3QuIFVzZWQgZm9yIGxvb2t1cHNcclxuICAgICAgICAgKi9cclxuICAgICAgICBmdW5jdGlvbiBpbnNlcnRIYXNoSW5Kc29uKGpzb25PYmosIHJvb3RUYWcpIHtcclxuICAgICAgICAgICAganNvbk9ialtyb290VGFnXS5kYXRhX2NoZWNrc3VtID0gXCJcIjtcclxuICAgICAgICAgICAgdmFyIGhhc2ggPSBDcnlwdG9KUy5TSEEyNTYoSlNPTi5zdHJpbmdpZnkoanNvbk9iaikpO1xyXG4gICAgICAgICAgICBqc29uT2JqW3Jvb3RUYWddLmRhdGFfY2hlY2tzdW0gPSBoYXNoLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBuZ2RvYyBtZXRob2QgLSBjb21wYXJlcyB0aGUgaGFzaCBpbiB0aGUgSlNPTiB0byB0aGUgY2FsY3VsYXRlZCBKU09OIGhhc2hcclxuICAgICAgICAgKiBAcGFyYW0gcmVhZGVyLSB0aGUgcmVhZGVyIGV4dGVuZGVkIG9iamVjdCB0aGF0IGNvbnRhaW5zIHRoZSBqc29uXHJcbiAgICAgICAgICogQHBhcmFtIHJvb3RUYWctIHRoZSByb290IHRhZyBvZiB0aGUganNvbk9iamVjdC4gVXNlZCBmb3IgbG9va3Vwc1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGZ1bmN0aW9uIGNvbXBhcmVIYXNoSW5Kc29uKHJlYWRlciwgcm9vdFRhZykge1xyXG4gICAgICAgICAgICB2YXIgY3VycmVudFRhZ1ZhbHVlID0gcmVhZGVyLnBhcnNlUmVzdWx0Lmpzb25SZXN1bHRbcm9vdFRhZ10uZGF0YV9jaGVja3N1bTtcclxuICAgICAgICAgICAgcmVhZGVyLnBhcnNlUmVzdWx0Lmpzb25SZXN1bHRbcm9vdFRhZ10uZGF0YV9jaGVja3N1bSA9IFwiXCI7XHJcbiAgICAgICAgICAgIHZhciBnZW5lcmF0ZWRIYXNoID0gQ3J5cHRvSlMuU0hBMjU2KEpTT04uc3RyaW5naWZ5KHJlYWRlci5wYXJzZVJlc3VsdC5qc29uUmVzdWx0KSk7XHJcbiAgICAgICAgICAgIGlmIChjdXJyZW50VGFnVmFsdWUgIT09IGdlbmVyYXRlZEhhc2gudG9TdHJpbmcoKSkge1xyXG4gICAgICAgICAgICAgICAgcmVhZGVyLnBhcnNlUmVzdWx0Lmpzb25SZXN1bHQgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgcmVhZGVyLnBhcnNlUmVzdWx0Lm1lc3NhZ2VzID0gbXNnX2Vycl9jaGVja3N1bV9jb21wYXJlRmFpbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAbmdkb2MgbWV0aG9kIC0gY29tcGFyZXMgdGhlIGhhc2ggaW4gdGhlIFhNTCB0byB0aGUgY2FsY3VsYXRlZCBYTUwgaGFzaFxyXG4gICAgICAgICAqIEBwYXJhbSByZWFkZXItIHRoZSByZWFkZXIgZXh0ZW5kZWQgb2JqZWN0IHRoYXQgY29udGFpbnMgdGhlIGpzb25cclxuICAgICAgICAgKiBAcGFyYW0gcm9vdFRhZy0gdGhlIHJvb3QgdGFnIG9mIHRoZSBqc29uT2JqZWN0LiBVc2VkIGZvciBsb29rdXBzXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZnVuY3Rpb24gY29tcGFyZUhhc2hJblhNTChyZWFkZXIsIHNjb3BlKSB7XHJcbiAgICAgICAgICAgIHZhciBjdXJyZW50VGFnVmFsdWUgPSByZWFkZXIucGFyc2VSZXN1bHQuanNvblJlc3VsdFtzY29wZS5yb290VGFnXS5kYXRhX2NoZWNrc3VtO1xyXG4gICAgICAgICAgICB2YXIgY29udmVydGVkVG9Kc29uPSByZWFkZXIucGFyc2VSZXN1bHQuanNvblJlc3VsdDtcclxuICAgICAgICAgICAvL3JlbW92ZSBjaGVja3N1bVxyXG4gICAgICAgICAgICBjb252ZXJ0ZWRUb0pzb25bc2NvcGUucm9vdFRhZ10uZGF0YV9jaGVja3N1bSA9IFwiXCI7XHJcbiAgICAgICAgICAgIC8vY29udmVydCB0byB4bWxcclxuICAgICAgICAgICAgdmFyIHhtbFJlc3VsdCA9IGNvbnZlcnRKU09OT2JqZWN0c1RvWE1MKGNvbnZlcnRlZFRvSnNvbik7XHJcbiAgICAgICAgICAgIHNjb3BlLmhhc2ggPSBDcnlwdG9KUy5TSEEyNTYoeG1sUmVzdWx0KTtcclxuICAgICAgICAgICAgaWYgKGN1cnJlbnRUYWdWYWx1ZSAhPT0gc2NvcGUuaGFzaC50b1N0cmluZygpKSB7XHJcbiAgICAgICAgICAgICAgICByZWFkZXIucGFyc2VSZXN1bHQuanNvblJlc3VsdCA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICByZWFkZXIucGFyc2VSZXN1bHQubWVzc2FnZXMgPSBtc2dfZXJyX2NoZWNrc3VtX2NvbXBhcmVGYWlsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBqc29uVG9GaWxlKGpzb25PYmosIGZpbGVOYW1lLCByb290VGFnKSB7XHJcbiAgICAgICAgICAgIGlmICghanNvbk9iaikgcmV0dXJuO1xyXG4gICAgICAgICAgICAvL2luc2VydEhhc2hJbkpzb24oanNvbk9iaiwgcm9vdFRhZykgYXMgcGVyIE9jdCAyMSBtZWV0aW5nIG5vIGNoZWNrc3VtXHJcbiAgICAgICAgICAgIHZhciBtYWtlU3RyU2F2ZSA9IEpTT04uc3RyaW5naWZ5KGpzb25PYmopO1xyXG4gICAgICAgICAgICB2YXIgYmxvYiA9IG5ldyBCbG9iKFttYWtlU3RyU2F2ZV0sIHt0eXBlOiBcInRleHQvcGxhaW47Y2hhcnNldD11dGYtOFwifSk7XHJcbiAgICAgICAgICAgIGlmICghZmlsZU5hbWUpIHtcclxuICAgICAgICAgICAgICAgIGZpbGVOYW1lID0gXCJocGZiRHJhZnQuXCIgKyBkcmFmdF9maWxlX3R5cGU7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBmaWxlTmFtZSArPSBcIi5cIiArIGRyYWZ0X2ZpbGVfdHlwZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBzYXZlQXMoYmxvYiwgZmlsZU5hbWUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24geG1sVG9GaWxlKGpzb25PYmosIGZpbGVOYW1lLCByb290VGFnKSB7XHJcbiAgICAgICAgICAgIGlmICghanNvbk9iaikgcmV0dXJuO1xyXG4gICAgICAgICAgICAvL0FzIHBlciBtZWV0aW5nIG9mIE9jdCAyMSwgaWdub3JlIGNoZWNrc3VtXHJcbiAgICAgICAgICAgIC8vY2xlYXIgb3V0IGFueSBwcmV2aW91cyB2YWx1ZSBpZiBpdCBleGlzdHNcclxuICAgICAgICAgICAgLy9qc29uT2JqW3Jvb3RUYWddLmRhdGFfY2hlY2tzdW0gPSBcIlwiO1xyXG4gICAgICAgICAgICB2YXIgeG1sUmVzdWx0ID0gY29udmVydEpTT05PYmplY3RzVG9YTUwoanNvbk9iaik7XHJcbiAgICAgICAgICAgIC8vVE9ETyB0aGlzIG5lZWRzIHRvIGJlIGNvbmZpZ3VyYWJsZVxyXG4gICAgICAgICAgIHhtbFJlc3VsdD0gJzw/eG1sIHZlcnNpb249XCIxLjBcIiBlbmNvZGluZz1cIlVURi04XCI/PicrICc8P3htbC1zdHlsZXNoZWV0IGhyZWY9XCJSRVBfQ29tYmluZWQueHNsXCIgdHlwZT1cInRleHQveHNsXCI/PicreG1sUmVzdWx0O1xyXG4gICAgICAgICAgIC8vIHZhciBoYXNoID0gQ3J5cHRvSlMuU0hBMjU2KHhtbFJlc3VsdCk7XHJcbiAgICAgICAgICAgIC8vanNvbk9ialtyb290VGFnXS5kYXRhX2NoZWNrc3VtID0gaGFzaC50b1N0cmluZygpO1xyXG4gICAgICAgICAgICAvL3JlZ2VuZXJhdGUgdGhlIHhtbFxyXG4gICAgICAgICAgICAvL3htbFJlc3VsdCA9IGNvbnZlcnRKU09OT2JqZWN0c1RvWE1MKGpzb25PYmopXHJcbiAgICAgICAgICAgIHZhciBibG9iID0gbmV3IEJsb2IoW3htbFJlc3VsdF0sIHt0eXBlOiBcInRleHQvcGxhaW47Y2hhcnNldD11dGYtOFwifSk7XHJcbiAgICAgICAgICAgIGlmICghZmlsZU5hbWUpIHtcclxuICAgICAgICAgICAgICAgIGZpbGVOYW1lID0gXCJocGZiWE1MLnhtbFwiXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBmaWxlTmFtZSArPSBcIi54bWxcIjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBzYXZlQXMoYmxvYiwgZmlsZU5hbWUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSkoKTtcclxuXHJcblxyXG5cclxuXHJcbiIsIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IEFiZGVzc2FtYWQgb24gOS8yNS8yMDE2LlxyXG4gKi9cclxuXHJcbihmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ25vbk1lZEluZ1JlY29yZE1vZHVsZScsIFsnZG9zc2llckRhdGFMaXN0cycsJ2hwZmJDb25zdGFudHMnLCd1aS5zZWxlY3QnXSlcclxufSkoKTtcclxuXHJcbihmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ25vbk1lZEluZ1JlY29yZE1vZHVsZScpXHJcbiAgICAgICAgLmNvbXBvbmVudCgnY21wTm9uTWVkSW5nUmVjb3JkJywge1xyXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2FwcC9zY3JpcHRzL2NvbXBvbmVudHMvZm9ybXVsYXRpb25zL3RwbC1ub24tbWVkLWluZy1yZWNvcmRfMjAxNzAyMDNfMTUwMi5odG1sJyxcclxuICAgICAgICAgICAgY29udHJvbGxlckFzOiAnbkluZ1JlY0N0cmwnLFxyXG4gICAgICAgICAgICBjb250cm9sbGVyOiBub25NZWRJbmdSZWNDdHJsLFxyXG4gICAgICAgICAgICBiaW5kaW5nczoge1xyXG4gICAgICAgICAgICAgICAgZGVsZXRlQnRuOiAnPCcsXHJcbiAgICAgICAgICAgICAgICByZWNvcmQ6ICc8JyxcclxuICAgICAgICAgICAgICAgIHNob3dFcnJvcnM6ICcmJyxcclxuICAgICAgICAgICAgICAgIG9uQWRkSW5nOiAnJicsXHJcbiAgICAgICAgICAgICAgICBvblVwZGF0ZTogJyYnLFxyXG4gICAgICAgICAgICAgICAgb25EZWxldGU6ICcmJyxcclxuICAgICAgICAgICAgICAgIG9uQ2FuY2VsOiAnJicsXHJcbiAgICAgICAgICAgICAgICBpc0RldGFpbFZhbGlkOiAnJicsXHJcbiAgICAgICAgICAgICAgICByZWNvcmRJbmRleDonPCdcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9KTtcclxuICAgIG5vbk1lZEluZ1JlY0N0cmwuJGluamVjdCA9IFsnRG9zc2llckxpc3RzJywgJyRzY29wZScsJyR0cmFuc2xhdGUnLCdPVEhFUicsJ1lFUyddO1xyXG4gICAgZnVuY3Rpb24gbm9uTWVkSW5nUmVjQ3RybChEb3NzaWVyTGlzdHMsICRzY29wZSwkdHJhbnNsYXRlLCBPVEhFUiwgWUVTKSB7XHJcblxyXG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcclxuICAgICAgICBzZWxmLm5hbm9NYXRlcmlhbExpc3QgPSBEb3NzaWVyTGlzdHMuZ2V0TmFub01hdGVyaWFscygpOyAvL25hbm9NYXRlcmlhbCBsaXN0XHJcbiAgICAgICAgc2VsZi55ZXNOb0xpc3QgPSBEb3NzaWVyTGlzdHMuZ2V0WWVzTm9MaXN0KCk7IC8veWVzLW5vIGxpc3RzXHJcbiAgICAgICAgc2VsZi51bml0c0xpc3Q9RG9zc2llckxpc3RzLmdldFVuaXRzTGlzdCgpO1xyXG4gICAgICAgIHNlbGYuc2F2ZVByZXNzZWQ9ZmFsc2U7XHJcbiAgICAgICAgc2VsZi5sYW5nID0gJHRyYW5zbGF0ZS5wcm9wb3NlZExhbmd1YWdlKCkgfHwgJHRyYW5zbGF0ZS51c2UoKTtcclxuICAgICAgICBzZWxmLmluZ01vZGVsID0ge1xyXG4gICAgICAgICAgICB2YXJJZDpcIlwiLFxyXG4gICAgICAgICAgICBpbmdOYW1lOiBcIlwiLFxyXG4gICAgICAgICAgICBjYXM6IFwiXCIsXHJcbiAgICAgICAgICAgIHN0YW5kYXJkOiBcIlwiLFxyXG4gICAgICAgICAgICBzdHJlbmd0aDogbnVsbCxcclxuICAgICAgICAgICAgdW5pdHM6IFwiXCIsXHJcbiAgICAgICAgICAgIG90aGVyVW5pdHM6XCJcIixcclxuICAgICAgICAgICAgcGVyOiBcIlwiLFxyXG4gICAgICAgICAgICBuYW5vTWF0ZXJpYWw6IFwiXCIsXHJcbiAgICAgICAgICAgIG5hbm9NYXRlcmlhbE90aGVyOiBcIlwiLFxyXG4gICAgICAgICAgICBjYWxjQXNCYXNlOiBcIlwiLFxyXG4gICAgICAgICAgICBodW1hbkFuaW1hbFNvdXJjZWQ6IFwiXCJcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBzZWxmLiRvbkluaXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHNlbGYuc2F2ZVByZXNzZWQ9ZmFsc2U7XHJcbiAgICAgICAgICAgIHNlbGYuYmFja3VwID0gYW5ndWxhci5jb3B5KHNlbGYuaW5nTW9kZWwpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHNlbGYuJG9uQ2hhbmdlcyA9IGZ1bmN0aW9uIChjaGFuZ2VzKSB7XHJcbiAgICAgICAgICAgIGlmIChjaGFuZ2VzLnJlY29yZCAmJiBjaGFuZ2VzLnJlY29yZC5jdXJyZW50VmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIHNlbGYuaW5nTW9kZWwgPSBhbmd1bGFyLmNvcHkoY2hhbmdlcy5yZWNvcmQuY3VycmVudFZhbHVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHNlbGYuc2F2ZUluZyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYoc2VsZi5ub25NZWRJbmdGb3JtLiR2YWxpZCkge1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChzZWxmLnJlY29yZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYub25VcGRhdGUoe2luZzogc2VsZi5pbmdNb2RlbH0pO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBzZWxmLm9uQWRkSW5nKHtpbmc6IHNlbGYuaW5nTW9kZWx9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHNlbGYubm9uTWVkSW5nRm9ybS4kc2V0UHJpc3RpbmUoKTtcclxuICAgICAgICAgICAgICAgIHNlbGYuc2F2ZVByZXNzZWQ9ZmFsc2U7XHJcbiAgICAgICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICAgICAgc2VsZi5zYXZlUHJlc3NlZD10cnVlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHNlbGYuZGlzY2FyZENoYW5nZXMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHNlbGYuaW5nTW9kZWwgPSBhbmd1bGFyLmNvcHkoc2VsZi5iYWNrdXApO1xyXG4gICAgICAgICAgICBzZWxmLm5vbk1lZEluZ0Zvcm0uJHNldFByaXN0aW5lKCk7XHJcbiAgICAgICAgICAgIHNlbGYub25DYW5jZWwoKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBzZWxmLmRlbGV0ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKHNlbGYucmVjb3JkKSB7XHJcbiAgICAgICAgICAgICAgICAvLyAgY29uc29sZS5sb2coJ3Byb2R1Y3QgZGV0YWlscyBkZWxldGUgcHJvZHVjdCcpO1xyXG4gICAgICAgICAgICAgICAgc2VsZi5vbkRlbGV0ZSgpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIENoZWNrcyBpZiB0aGUgbW9kZWwgaXMgYW5pbWFsIG9yIGh1bWFuIHNvdXJjZWRcclxuICAgICAgICAgKiBVc2VkIHRvIHNldCB0aGUgc3RhdGUgb2YgdGhlIGluZm8gYm94XHJcbiAgICAgICAgICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgc2VsZi5pc0FuaW1hbEh1bWFuU291cmNlZD1mdW5jdGlvbigpe1xyXG4gICAgICAgICAgICBpZighc2VsZi5pbmdNb2RlbCl7IC8vc2hvdWxkIG5ldmVyIGhhcHBlblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybihzZWxmLmluZ01vZGVsLmh1bWFuQW5pbWFsU291cmNlZD09PVlFUyk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgc2VsZi5jb3B5ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgaW5ncmVkaWVudENvcHkgPSBhbmd1bGFyLmNvcHkoIHNlbGYuaW5nTW9kZWwpO1xyXG4gICAgICAgICAgICBzZWxmLm9uQWRkSW5nKHtpbmc6IGluZ3JlZGllbnRDb3B5fSk7XHJcbiAgICAgICAgfTtcclxuXHJcblxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBDb250cm9scyBzaG93aW5nIGVycm9ycyBmb3IgYSBmaWVsZFxyXG4gICAgICAgICAqIEBwYXJhbSBpc0ludmFsaWRcclxuICAgICAgICAgKiBAcGFyYW0gaXNUb3VjaGVkXHJcbiAgICAgICAgICogQHJldHVybnMgeyp9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgc2VsZi5zaG93RXJyb3IgPSBmdW5jdGlvbiAoaXNJbnZhbGlkLCBpc1RvdWNoZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuICgoaXNJbnZhbGlkICYmIGlzVG91Y2hlZCkgfHwgKGlzSW52YWxpZCAmJiBzZWxmLnNob3dFcnJvcnMoKSl8fCAoaXNJbnZhbGlkICYmIHNlbGYuc2F2ZVByZXNzZWQpKVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFNldHMgdGhlIHN0YXRlIG9mIHRoZSBuYW5vbWF0ZXJpYWwgb3RoZXIgZmllbGRcclxuICAgICAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gdHJ1ZSBpZiBvdGhlciBpcyB0aGUgdmFsdWVcclxuICAgICAgICAgKi9cclxuICAgICAgICBzZWxmLmlzTmFub090aGVyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAoc2VsZi5pbmdNb2RlbC5uYW5vTWF0ZXJpYWwuaWQgPT09IERvc3NpZXJMaXN0cy5nZXRPdGhlclZhbHVlKCkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgc2VsZi5pbmdNb2RlbC5uYW5vTWF0ZXJpYWxPdGhlciA9IFwiXCI7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAbmdEb2MgZGV0ZXJtaW5lcyBpZiB1bml0cyBPdGhlciBzaG91bGQgYmUgc2hvd25cclxuICAgICAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuICAgICAgICAgKi9cclxuICAgICAgICBzZWxmLmlzVW5pdHNPdGhlciA9IGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgICAgIGlmKCFzZWxmLmluZ01vZGVsKSByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIGlmICgoc2VsZi5pbmdNb2RlbC51bml0cy5pZCA9PT0gT1RIRVIpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHNlbGYuaW5nTW9kZWwub3RoZXJVbml0cyA9IFwiXCI7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuXHJcbiAgICAgICAgJHNjb3BlLiR3YXRjaCgnbkluZ1JlY0N0cmwubm9uTWVkSW5nRm9ybS4kZGlydHknLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHNlbGYuaXNEZXRhaWxWYWxpZCh7c3RhdGU6ICFzZWxmLm5vbk1lZEluZ0Zvcm0uJGRpcnR5fSk7XHJcbiAgICAgICAgfSwgdHJ1ZSk7XHJcblxyXG5cclxuXHJcbiAgICB9XHJcblxyXG59KSgpO1xyXG4iLCIvKipcclxuICogQ3JlYXRlZCBieSBBYmRlc3NhbWFkIG9uIDkvMjMvMjAxNi5cclxuICovXHJcblxyXG5cclxuKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgnbm9uTWVkSW5nTGlzdE1vZHVsZScsIFsnZXhwYW5kaW5nVGFibGUnLCAnbm9uTWVkSW5nUmVjb3JkTW9kdWxlJ10pXHJcbn0pKCk7XHJcblxyXG4oZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKCdub25NZWRJbmdMaXN0TW9kdWxlJylcclxuICAgICAgICAuY29tcG9uZW50KCdjbXBOb25NZWRJbmdMaXN0Jywge1xyXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2FwcC9zY3JpcHRzL2NvbXBvbmVudHMvZm9ybXVsYXRpb25zL3RwbC1ub24tbWVkLWluZy1saXN0XzIwMTcwMjAzXzE1MDIuaHRtbCcsXHJcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6IG5vbk1lZEluZ0xpc3RDdHJsLFxyXG4gICAgICAgICAgICBjb250cm9sbGVyQXM6ICdubWlsQ3RybCcsXHJcbiAgICAgICAgICAgIGJpbmRpbmdzOiB7XHJcbiAgICAgICAgICAgICAgICBpbmdyZWRpZW50czogJzwnLFxyXG4gICAgICAgICAgICAgICAgb25VcGRhdGU6ICcmJ1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgZnVuY3Rpb24gbm9uTWVkSW5nTGlzdEN0cmwoKSB7XHJcblxyXG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcclxuICAgICAgICBzZWxmLmlzRGV0YWlsVmFsaWQgPSB0cnVlO1xyXG4gICAgICAgIHNlbGYuc2VsZWN0UmVjb3JkID0gLTE7XHJcbiAgICAgICAgc2VsZi5yZXNldFRvQ29sbGFwc2VkID0gZmFsc2U7XHJcbiAgICAgICAgc2VsZi5uZXdJbmdGb3JtU2hvd24gPSBmYWxzZTtcclxuICAgICAgICBzZWxmLiRvbkluaXQgPSBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgICAgICBzZWxmLm5ld0luZ0Zvcm1TaG93biA9IGZhbHNlO1xyXG4gICAgICAgICAgICBzZWxmLmlzRGV0YWlsVmFsaWQgPSB0cnVlO1xyXG4gICAgICAgICAgICBzZWxmLnNlbGVjdFJlY29yZCA9IC0xO1xyXG4gICAgICAgICAgICBzZWxmLmNvbE5hbWVzID0gW1xyXG4gICAgICAgICAgICAgICAge2xhYmVsOiBcIlZBUklBTlRfTkFNRVwiLCBiaW5kaW5nOiBcInZhcklkXCIsIHdpZHRoOiBcIjE1XCJ9LFxyXG4gICAgICAgICAgICAgICAge2xhYmVsOiBcIk5PTk1FRElDSU5BTF9JTkdSRURJRU5UXCIsIGJpbmRpbmc6IFwiaW5nTmFtZVwiLCB3aWR0aDogXCI2NVwifSxcclxuICAgICAgICAgICAgICAgIHtsYWJlbDogXCJDQVNfTlVNXCIsIGJpbmRpbmc6IFwiY2FzXCIsIHdpZHRoOiBcIjE1XCJ9LFxyXG4gICAgICAgICAgICAgICAge2xhYmVsOiBcIkhVTUFOX0FOSU1BTF9TT1VSQ0VcIiwgYmluZGluZzogXCJodW1hbkFuaW1hbFNvdXJjZWRcIiwgd2lkdGg6IFwiMTBcIn1cclxuICAgICAgICAgICAgXTtcclxuICAgICAgICAgICAgc2VsZi5pbmdMaXN0ID0gW107XHJcblxyXG4gICAgICAgICAgICBpZiAoc2VsZi5pbmdyZWRpZW50cykge1xyXG4gICAgICAgICAgICAgICAgc2VsZi5pbmdMaXN0ID0gc2VsZi5pbmdyZWRpZW50cztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHNlbGYuYWRkSW5nID0gZnVuY3Rpb24gKGluZykge1xyXG4gICAgICAgICAgICBzZWxmLnNldFZhbGlkKHRydWUpO1xyXG4gICAgICAgICAgICBzZWxmLmluZ0xpc3QucHVzaChpbmcpO1xyXG4gICAgICAgICAgICBzZWxmLm5ld0luZ0Zvcm1TaG93biA9IGZhbHNlO1xyXG4gICAgICAgICAgICBzZWxmLnJlc2V0VG9Db2xsYXBzZWQgPSAhc2VsZi5yZXNldFRvQ29sbGFwc2VkO1xyXG4gICAgICAgICAgICBzZWxmLm9uVXBkYXRlKHtsaXN0OnNlbGYuaW5nTGlzdH0pO1xyXG4gICAgICAgICAgICBzZXRSZWNvcmQoLTEpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHNlbGYudXBkYXRlSW5nID0gZnVuY3Rpb24gKGlkeCwgaW5nKSB7XHJcbiAgICAgICAgICAgIHNlbGYuaW5nTGlzdFtpZHhdID0gYW5ndWxhci5jb3B5KGluZyk7XHJcbiAgICAgICAgICAgIHNlbGYub25VcGRhdGUoe2xpc3Q6c2VsZi5pbmdMaXN0fSk7XHJcbiAgICAgICAgICAgIHNlbGYuc2V0VmFsaWQodHJ1ZSk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgc2VsZi5kZWxldGVJbmcgPSBmdW5jdGlvbiAoaWR4KSB7XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUuZGVidWcoJ2luZ0xpc3QgZGVsZXRlSW5nOiAnICsgaWR4KTtcclxuICAgICAgICAgICAgc2VsZi5pbmdMaXN0LnNwbGljZShpZHgsIDEpO1xyXG4gICAgICAgICAgICBzZWxmLm9uVXBkYXRlKHtsaXN0OnNlbGYuaW5nTGlzdH0pO1xyXG4gICAgICAgICAgICBzZWxmLnNldFZhbGlkKHRydWUpO1xyXG4gICAgICAgICAgICBzZXRSZWNvcmQoLTEpO1xyXG4gICAgICAgICAgICBzZWxmLnJlc2V0VG9Db2xsYXBzZWQgPSAhc2VsZi5yZXNldFRvQ29sbGFwc2VkO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgZnVuY3Rpb24gc2V0UmVjb3JkKHZhbHVlKXtcclxuICAgICAgICAgICAgc2VsZi5zZWxlY3RSZWNvcmQgPSB2YWx1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFNldHMgdGhlIFVJIHN0YXRlIGZvciB0aGUgYWRkIG5ldyB0ZW1wbGF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHNlbGYuYWRkTmV3SW5ncmVkaWVudFN0YXRlPWZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgIHNlbGYucmVzZXRUb0NvbGxhcHNlZCA9ICFzZWxmLnJlc2V0VG9Db2xsYXBzZWQ7XHJcbiAgICAgICAgICAgIHNlbGYubmV3SW5nRm9ybVNob3duID0gdHJ1ZTtcclxuICAgICAgICAgICAgc2VsZi5zZXRWYWxpZChmYWxzZSk7XHJcbiAgICAgICAgICAgIHJldHVybihzZWxmLm5ld0luZ0Zvcm1TaG93bik7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBzZWxmLmFkZE5ld0Rpc2FibGVkPWZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgIHJldHVybiAoIHNlbGYubmV3SW5nRm9ybVNob3duIHx8ICFzZWxmLmlzRGV0YWlsVmFsaWQpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgc2VsZi5zZXRWYWxpZD1mdW5jdGlvbih2YWx1ZSl7XHJcbiAgICAgICAgICAgIHNlbGYuaXNEZXRhaWxWYWxpZD12YWx1ZTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHNlbGYub25OZXdDYW5jZWw9ZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgc2VsZi5zZXRWYWxpZCh0cnVlKTtcclxuICAgICAgICAgICAgc2VsZi5uZXdJbmdGb3JtU2hvd24gPSBmYWxzZVxyXG4gICAgICAgIH1cclxuXHJcbiAgICB9XHJcbn0pKCk7XHJcblxyXG4iLCIvKipcclxuICogQ3JlYXRlZCBieSBBYmRlc3NhbWFkIG9uIDkvMjYvMjAxNi5cclxuICovXHJcblxyXG4oZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKCdtYXRlcmlhbEluZ1JlY29yZE1vZHVsZScsIFsnZG9zc2llckRhdGFMaXN0cyddKVxyXG59KSgpO1xyXG5cclxuKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgnbWF0ZXJpYWxJbmdSZWNvcmRNb2R1bGUnKVxyXG4gICAgICAgIC5jb21wb25lbnQoJ2NtcE1hdGVyaWFsSW5nUmVjb3JkJywge1xyXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2FwcC9zY3JpcHRzL2NvbXBvbmVudHMvZm9ybXVsYXRpb25zL3RwbC1tYXRlcmlhbC1pbmctcmVjb3JkXzIwMTcwMjAzXzE1MDIuaHRtbCcsXHJcbiAgICAgICAgICAgIGNvbnRyb2xsZXJBczogJ21pckN0cmwnLFxyXG4gICAgICAgICAgICBjb250cm9sbGVyOiBtYXRlcmlhbEluZ1JlY0N0cmwsXHJcbiAgICAgICAgICAgIGJpbmRpbmdzOiB7XHJcbiAgICAgICAgICAgICAgICBkZWxldGVCdG46ICc8JyxcclxuICAgICAgICAgICAgICAgIHJlY29yZDogJzwnLFxyXG4gICAgICAgICAgICAgICAgc2hvd0Vycm9yczogJyYnLFxyXG4gICAgICAgICAgICAgICAgb25BZGROZXc6ICcmJyxcclxuICAgICAgICAgICAgICAgIG9uVXBkYXRlOiAnJicsXHJcbiAgICAgICAgICAgICAgICBvbkRlbGV0ZTogJyYnLFxyXG4gICAgICAgICAgICAgICAgb25DYW5jZWw6ICcmJyxcclxuICAgICAgICAgICAgICAgIGlzRGV0YWlsVmFsaWQ6ICcmJyxcclxuICAgICAgICAgICAgICAgIHJlY29yZEluZGV4Oic8J1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH0pO1xyXG4gICAgbWF0ZXJpYWxJbmdSZWNDdHJsLiRpbmplY3QgPSBbJ0Rvc3NpZXJMaXN0cycsJyRzY29wZSddO1xyXG4gICAgZnVuY3Rpb24gbWF0ZXJpYWxJbmdSZWNDdHJsKERvc3NpZXJMaXN0cywgJHNjb3BlKSB7XHJcblxyXG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcclxuICAgICAgICBzZWxmLnllc05vTGlzdCA9IERvc3NpZXJMaXN0cy5nZXRZZXNOb0xpc3QoKTtcclxuICAgICAgICBzZWxmLnNhdmVQcmVzc2VkPWZhbHNlO1xyXG4gICAgICAgIHNlbGYuJG9uSW5pdCA9IGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgICAgIHNlbGYubWlyTW9kZWwgPSB7fTtcclxuXHJcbiAgICAgICAgICAgIGlmIChzZWxmLnJlY29yZCkge1xyXG4gICAgICAgICAgICAgICAgc2VsZi5taXJNb2RlbCA9IHNlbGYucmVjb3JkO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHNlbGYuYmFja3VwID0gYW5ndWxhci5jb3B5KHNlbGYubWlyTW9kZWwpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHNlbGYuc2hvd0Vycm9yID0gZnVuY3Rpb24gKGlzSW52YWxpZCwgaXNUb3VjaGVkKSB7XHJcbiAgICAgICAgICAgIC8vcmV0dXJuICgoaXNJbnZhbGlkICYmIGlzVG91Y2hlZCkgfHwgKGlzSW52YWxpZCAmJiBzZWxmLnNob3dFcnJvcnMoKSkpOyBnZW5lcmF0ZXMgZXJyb3JcclxuICAgICAgICAgICAgcmV0dXJuICgoaXNJbnZhbGlkICYmIGlzVG91Y2hlZCkgfHwoaXNJbnZhbGlkICYmIHNlbGYuc2hvd0Vycm9ycygpKXx8KHNlbGYuc2F2ZVByZXNzZWQgJiYgaXNJbnZhbGlkKSk7XHJcblxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHNlbGYuc2F2ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYoc2VsZi5tYXRlcmlhbEluZ1JlY29yZEZvcm0uJHZhbGlkKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoc2VsZi5yZWNvcmQpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZygncHJvZHVjdCBkZXRhaWxzIHVwZGF0ZSBwcm9kdWN0Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5vblVwZGF0ZSh7aW5nOiBzZWxmLm1pck1vZGVsfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5tYXRlcmlhbEluZ1JlY29yZEZvcm0uJHNldFByaXN0aW5lKCk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vICBjb25zb2xlLmxvZygncHJvZHVjdCBkZXRhaWxzIGFkZCBwcm9kdWN0Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5vbkFkZE5ldyh7aW5nOiBzZWxmLm1pck1vZGVsfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBzZWxmLm1hdGVyaWFsSW5nUmVjb3JkRm9ybS4kc2V0UHJpc3RpbmUoKTtcclxuICAgICAgICAgICAgICAgIHNlbGYuc2F2ZVByZXNzZWQ9ZmFsc2U7XHJcbiAgICAgICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICAgICAgc2VsZi5zYXZlUHJlc3NlZD10cnVlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHNlbGYuZGlzY2FyZENoYW5nZXMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHNlbGYubWlyTW9kZWwgPSBhbmd1bGFyLmNvcHkoc2VsZi5iYWNrdXApO1xyXG4gICAgICAgICAgICBzZWxmLm1hdGVyaWFsSW5nUmVjb3JkRm9ybS4kc2V0UHJpc3RpbmUoKTtcclxuICAgICAgICAgICAgc2VsZi5vbkNhbmNlbCgpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHNlbGYuZGVsZXRlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAoc2VsZi5yZWNvcmQpIHtcclxuICAgICAgICAgICAgICAgIC8vICBjb25zb2xlLmxvZygncHJvZHVjdCBkZXRhaWxzIGRlbGV0ZSBwcm9kdWN0Jyk7XHJcbiAgICAgICAgICAgICAgICBzZWxmLm9uRGVsZXRlKCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgJHNjb3BlLiR3YXRjaCgnbWlyQ3RybC5tYXRlcmlhbEluZ1JlY29yZEZvcm0uJGRpcnR5JywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBzZWxmLmlzRGV0YWlsVmFsaWQoe3N0YXRlOiAhc2VsZi5tYXRlcmlhbEluZ1JlY29yZEZvcm0uJGRpcnR5fSk7XHJcbiAgICAgICAgfSwgdHJ1ZSk7XHJcblxyXG4gICAgfVxyXG59KSgpO1xyXG4iLCIvKipcclxuICogQ3JlYXRlZCBieSBBYmRlc3NhbWFkIG9uIDkvMjYvMjAxNi5cclxuICovXHJcblxyXG4oZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKCdtYXRlcmlhbEluZ0xpc3RNb2R1bGUnLCBbJ2V4cGFuZGluZ1RhYmxlJywgJ21hdGVyaWFsSW5nUmVjb3JkTW9kdWxlJ10pXHJcbn0pKCk7XHJcblxyXG4oZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKCdtYXRlcmlhbEluZ0xpc3RNb2R1bGUnKVxyXG4gICAgICAgIC5jb21wb25lbnQoJ2NtcE1hdGVyaWFsSW5nTGlzdCcsIHtcclxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdhcHAvc2NyaXB0cy9jb21wb25lbnRzL2Zvcm11bGF0aW9ucy90cGwtbWF0ZXJpYWwtaW5nLWxpc3RfMjAxNzAyMDNfMTUwMi5odG1sJyxcclxuICAgICAgICAgICAgY29udHJvbGxlcjogbWF0ZXJpYWxJbmdMaXN0Q3RybCxcclxuICAgICAgICAgICAgY29udHJvbGxlckFzOiAnbWlsQ3RybCcsXHJcbiAgICAgICAgICAgIGJpbmRpbmdzOiB7XHJcbiAgICAgICAgICAgICAgICBpbmdyZWRpZW50czogJzwnLFxyXG4gICAgICAgICAgICAgICAgb25VcGRhdGU6ICcmJ1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgZnVuY3Rpb24gbWF0ZXJpYWxJbmdMaXN0Q3RybCgpIHtcclxuXHJcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG4gICAgICAgIHNlbGYuaXNEZXRhaWxWYWxpZCA9IHRydWU7XHJcbiAgICAgICAgc2VsZi5zZWxlY3RSZWNvcmQgPSAtMTtcclxuICAgICAgICBzZWxmLnJlc2V0VG9Db2xsYXBzZWQgPSBmYWxzZTtcclxuICAgICAgICBzZWxmLm5ld0luZ0Zvcm1TaG93biA9IGZhbHNlO1xyXG4gICAgICAgIHNlbGYuY29sTmFtZXMgPSBbXHJcbiAgICAgICAgICAgIHtsYWJlbDogXCJNQVRFUklBTF9OQU1FXCIsIGJpbmRpbmc6IFwiaW5ncmVkaWVudE5hbWVcIiwgd2lkdGg6IFwiNzBcIn0sXHJcbiAgICAgICAgICAgIHtsYWJlbDogXCJDQVNfTlVNXCIsIGJpbmRpbmc6IFwiY2FzXCIsIHdpZHRoOiBcIjE1XCJ9LFxyXG4gICAgICAgICAgICB7bGFiZWw6IFwiUFJFU0VOVF9JTl9GSU5BTFwiLCBiaW5kaW5nOiBcImluRmluYWxDb250YWluZXJcIiwgd2lkdGg6IFwiMTVcIn1cclxuICAgICAgICBdO1xyXG5cclxuICAgICAgICBzZWxmLiRvbkluaXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHNlbGYubmV3SW5nRm9ybVNob3duID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHNlbGYuaXNEZXRhaWxWYWxpZCA9IHRydWU7XHJcbiAgICAgICAgICAgIHNlbGYuc2VsZWN0UmVjb3JkID0gLTE7XHJcbiAgICAgICAgICAgIHNlbGYuaW5nTGlzdCA9IFtdO1xyXG5cclxuICAgICAgICAgICAgaWYgKHNlbGYuaW5ncmVkaWVudHMpIHtcclxuICAgICAgICAgICAgICAgIHNlbGYuaW5nTGlzdCA9IHNlbGYuaW5ncmVkaWVudHM7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgc2VsZi4kb25DaGFuZ2VzID0gZnVuY3Rpb24gKGNoYW5nZXMpIHtcclxuXHJcbiAgICAgICAgICAgIGlmIChjaGFuZ2VzLmluZ3JlZGllbnRzKSB7XHJcbiAgICAgICAgICAgICAgICBzZWxmLmluZ0xpc3QgPSBjaGFuZ2VzLmluZ3JlZGllbnRzLmN1cnJlbnRWYWx1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHNlbGYuYWRkTmV3ID0gZnVuY3Rpb24gKGluZykge1xyXG4gICAgICAgICAgICBzZWxmLnNldFZhbGlkKHRydWUpO1xyXG4gICAgICAgICAgICBzZWxmLmluZ0xpc3QucHVzaChpbmcpO1xyXG4gICAgICAgICAgICBzZWxmLm5ld0luZ0Zvcm1TaG93biA9IGZhbHNlO1xyXG4gICAgICAgICAgICBzZWxmLnJlc2V0VG9Db2xsYXBzZWQgPSAhc2VsZi5yZXNldFRvQ29sbGFwc2VkO1xyXG4gICAgICAgICAgICBzZWxmLm9uVXBkYXRlKHtsaXN0OnNlbGYuaW5nTGlzdH0pO1xyXG4gICAgICAgICAgICBzZXRSZWNvcmQoLTEpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHNlbGYudXBkYXRlSW5nID0gZnVuY3Rpb24gKGlkeCwgaW5nKSB7XHJcbiAgICAgICAgICAgIHNlbGYuaW5nTGlzdFtpZHhdID0gYW5ndWxhci5jb3B5KGluZyk7XHJcbiAgICAgICAgICAgIHNlbGYub25VcGRhdGUoe2xpc3Q6c2VsZi5pbmdMaXN0fSk7XHJcbiAgICAgICAgICAgIHNlbGYuc2V0VmFsaWQodHJ1ZSk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgc2VsZi5kZWxldGVJbmcgPSBmdW5jdGlvbiAoaWR4KSB7XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUuZGVidWcoJ2NvbnRhaW5lckxpc3QgZGVsZXRlSW5nOiAnICsgaWR4KTtcclxuICAgICAgICAgICAgc2VsZi5pbmdMaXN0LnNwbGljZShpZHgsIDEpO1xyXG4gICAgICAgICAgICBzZWxmLm9uVXBkYXRlKHtsaXN0OnNlbGYuaW5nTGlzdH0pO1xyXG4gICAgICAgICAgICBzZWxmLnNldFZhbGlkKHRydWUpO1xyXG4gICAgICAgICAgICBzZXRSZWNvcmQoLTEpO1xyXG4gICAgICAgICAgICBzZWxmLnJlc2V0VG9Db2xsYXBzZWQgPSAhc2VsZi5yZXNldFRvQ29sbGFwc2VkO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHNldFJlY29yZCh2YWx1ZSl7XHJcbiAgICAgICAgICAgIHNlbGYuc2VsZWN0UmVjb3JkID0gdmFsdWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBTZXRzIHRoZSBVSSBzdGF0ZSBmb3IgdGhlIGFkZCBuZXcgdGVtcGxhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBzZWxmLmFkZE5ld0luZ3JlZGllbnRTdGF0ZT1mdW5jdGlvbigpe1xyXG4gICAgICAgICAgICBzZWxmLnJlc2V0VG9Db2xsYXBzZWQgPSAhc2VsZi5yZXNldFRvQ29sbGFwc2VkO1xyXG4gICAgICAgICAgICBzZWxmLm5ld0luZ0Zvcm1TaG93biA9IHRydWU7XHJcbiAgICAgICAgICAgIHNlbGYuc2V0VmFsaWQoZmFsc2UpO1xyXG4gICAgICAgICAgICByZXR1cm4oc2VsZi5uZXdJbmdGb3JtU2hvd24pO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgc2VsZi5hZGROZXdEaXNhYmxlZD1mdW5jdGlvbigpe1xyXG4gICAgICAgICAgICByZXR1cm4gKCBzZWxmLm5ld0luZ0Zvcm1TaG93biB8fCAhc2VsZi5pc0RldGFpbFZhbGlkKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHNlbGYuc2V0VmFsaWQ9ZnVuY3Rpb24odmFsdWUpe1xyXG4gICAgICAgICAgICBzZWxmLmlzRGV0YWlsVmFsaWQ9dmFsdWU7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBzZWxmLm9uTmV3Q2FuY2VsPWZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgIHNlbGYuc2V0VmFsaWQodHJ1ZSk7XHJcbiAgICAgICAgICAgIHNlbGYubmV3SW5nRm9ybVNob3duID0gZmFsc2VcclxuICAgICAgICB9XHJcblxyXG5cclxuXHJcblxyXG4gICAgfVxyXG5cclxufSkoKTtcclxuIiwiLyoqXHJcbiAqIENyZWF0ZWQgYnkgQWJkZXNzYW1hZCBvbiA5LzIxLzIwMTYuXHJcbiAqL1xyXG5cclxuKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgnZm9ybXVsYXRpb25SZWNvcmRNb2R1bGUnLCBbJ2FjdGl2ZUluZ0xpc3RNb2R1bGUnLCAnbm9uTWVkSW5nTGlzdE1vZHVsZScsICdjb250YWluZXJUeXBlTGlzdE1vZHVsZScsICdtYXRlcmlhbEluZ0xpc3RNb2R1bGUnLCAncm9hTGlzdE1vZHVsZScsICdkb3NzaWVyRGF0YUxpc3RzJywndWkuc2VsZWN0J10pXHJcbn0pKCk7XHJcblxyXG4oZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKCdmb3JtdWxhdGlvblJlY29yZE1vZHVsZScpXHJcbiAgICAgICAgLmNvbmZpZyhmdW5jdGlvbiAodWlTZWxlY3RDb25maWcpIHtcclxuICAgICAgICAgICAgLy9jaG9pY2VzOiBzZWxlY3QyLCBib290c3RyYXAsIHNlbGVjdGl6ZVxyXG4gICAgICAgICAgICB1aVNlbGVjdENvbmZpZy50aGVtZSA9ICdzZWxlY3QyJztcclxuICAgICAgICB9KVxyXG5cclxuICAgICAgICAuY29tcG9uZW50KCdjbXBGb3JtdWxhdGlvblJlY29yZCcsIHtcclxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdhcHAvc2NyaXB0cy9jb21wb25lbnRzL2Zvcm11bGF0aW9ucy90cGwtZm9ybXVsYXRpb24tcmVjb3JkXzIwMTcwMjAzXzE1MDIuaHRtbCcsXHJcbiAgICAgICAgICAgIGNvbnRyb2xsZXJBczogJ2Zvcm11bFJlY0N0cmwnLFxyXG4gICAgICAgICAgICBjb250cm9sbGVyOiBmb3JtdWxhdGlvblJlY0N0cmwsXHJcbiAgICAgICAgICAgIGJpbmRpbmdzOiB7XHJcbiAgICAgICAgICAgICAgICBkZWxldGVCdG46ICc8JyxcclxuICAgICAgICAgICAgICAgIHJlY29yZDonPCcsXHJcbiAgICAgICAgICAgICAgICAvL29uQWRkTmV3OiAnJicsXHJcbiAgICAgICAgICAgICAgICBvblVwZGF0ZTogJyYnLFxyXG4gICAgICAgICAgICAgICAgb25EZWxldGU6ICcmJyxcclxuICAgICAgICAgICAgICAgIG9uQ2FuY2VsOiAnJicsXHJcbiAgICAgICAgICAgICAgICBzaG93RXJyb3JzOicmJyxcclxuICAgICAgICAgICAgICAgIHJlY29yZENoYW5nZWQ6JyYnLFxyXG4gICAgICAgICAgICAgICAgYWRkQ29weTonJidcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9KTtcclxuXHJcbiAgICBmb3JtdWxhdGlvblJlY0N0cmwuJGluamVjdCA9IFsnRG9zc2llckxpc3RzJywnJHRyYW5zbGF0ZSddO1xyXG4gICAgZnVuY3Rpb24gZm9ybXVsYXRpb25SZWNDdHJsKERvc3NpZXJMaXN0cywgJHRyYW5zbGF0ZSkge1xyXG5cclxuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XHJcbiAgICAgICAgc2VsZi5ub0NvdW50cmllcz1cIlwiO1xyXG4gICAgICAgIHNlbGYubm9ST0FWYWx1ZXM9XCJcIjtcclxuICAgICAgICBzZWxmLm5vQWN0aXZlVmFsdWVzPVwiXCI7XHJcbiAgICAgICAgc2VsZi5kb3NhZ2VGb3JtTGlzdCA9IERvc3NpZXJMaXN0cy5nZXREb3NhZ2VGb3JtTGlzdCgpO1xyXG4gICAgICAgIHNlbGYub3RoZXJWYWx1ZSA9IERvc3NpZXJMaXN0cy5nZXREb3NhZ2VPdGhlcigpO1xyXG4gICAgICAgIHNlbGYuc2F2ZVByZXNzZWQ9ZmFsc2U7XHJcbiAgICAgICAgc2VsZi5sYW5nID0gJHRyYW5zbGF0ZS5wcm9wb3NlZExhbmd1YWdlKCkgfHwgJHRyYW5zbGF0ZS51c2UoKTtcclxuICAgICAgICBzZWxmLiRvbkluaXQgPSBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgICAgICBzZWxmLmZybU1vZGVsID0ge307XHJcblxyXG5cclxuICAgICAgICAgICAgaWYoc2VsZi5yZWNvcmQpe1xyXG4gICAgICAgICAgICAgICAgc2VsZi5mcm1Nb2RlbCA9IHNlbGYucmVjb3JkO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgc2VsZi5kZWxldGUgPSBmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICBpZiAoc2VsZi5yZWNvcmQpIHtcclxuICAgICAgICAgICAgICAgIC8vICBjb25zb2xlLmxvZygncHJvZHVjdCBkZXRhaWxzIGRlbGV0ZSBwcm9kdWN0Jyk7XHJcbiAgICAgICAgICAgICAgICBzZWxmLm9uRGVsZXRlKCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfTtcclxuICAgICAgICBzZWxmLmNvcHk9ZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgaWYoc2VsZi5yZWNvcmQpe1xyXG4gICAgICAgICAgICAgICAgdmFyIGZvcm11bGF0aW9uQ29weT1hbmd1bGFyLmNvcHkoc2VsZi5yZWNvcmQpO1xyXG4gICAgICAgICAgICAgICAgc2VsZi5hZGRDb3B5KHtyZWNvcmQ6Zm9ybXVsYXRpb25Db3B5fSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgc2VsZi5zaG93RXJyb3I9ZnVuY3Rpb24oaXNJbnZhbGlkLGlzVG91Y2hlZCl7XHJcbiAgICAgICAgICAgcmV0dXJuKCgoaXNJbnZhbGlkICYmIGlzVG91Y2hlZCl8fCAoaXNJbnZhbGlkICYmIHNlbGYuc2hvd0Vycm9ycygpKSB8fChpc0ludmFsaWQgJiYgc2VsZi5zYXZlUHJlc3NlZCkpKVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgLyoqKlxyXG4gICAgICAgICAqIFNob3dzIHRoZSBubyBjb3VudHJ5IG9mIG1hbnVmYWN0dXJlIGVycnJvXHJcbiAgICAgICAgICogVE9ETzogTm90IHNob3cgdGhpcyB1bnRpbCBzb21lb25lIHNhdmVzP1xyXG4gICAgICAgICAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHNlbGYubm9Db3VudHJ5PWZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgIGlmKCFzZWxmLmZybU1vZGVsKXtcclxuICAgICAgICAgICAgICAgIHNlbGYubm9Db3VudHJpZXM9XCJcIjtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZighc2VsZi5mcm1Nb2RlbC5jb3VudHJ5TGlzdCB8fCBzZWxmLmZybU1vZGVsLmNvdW50cnlMaXN0Lmxlbmd0aD09PTApe1xyXG4gICAgICAgICAgICAgICAgc2VsZi5ub0NvdW50cmllcz1cIlwiO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgc2VsZi5ub0NvdW50cmllcz1zZWxmLmZybU1vZGVsLmNvdW50cnlMaXN0Lmxlbmd0aDtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVHJhY2tzIGZvciBlcnJvciBoYW5kbGluZyBpZiB0aGVyZSBhcmUgb25lIG9yIG1vcmUgUk9BXHJcbiAgICAgICAgICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgc2VsZi5ub1JPQT1mdW5jdGlvbigpe1xyXG5cclxuICAgICAgICAgICAgaWYoIXNlbGYuZnJtTW9kZWwpe1xyXG4gICAgICAgICAgICAgICAgc2VsZi5ub1JPQVZhbHVlcz1cIlwiO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmKCFzZWxmLmZybU1vZGVsLnJvdXRlQWRtaW5zIHx8IHNlbGYuZnJtTW9kZWwucm91dGVBZG1pbnMubGVuZ3RoPT09MCl7XHJcbiAgICAgICAgICAgICAgICBzZWxmLm5vUk9BVmFsdWVzPVwiXCI7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBzZWxmLm5vUk9BVmFsdWVzPVwidmFsdWVzXCI7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuXHJcbiAgICAgICAgfTtcclxuICAgICAgICBzZWxmLm5vQWN0aXZlcz1mdW5jdGlvbigpe1xyXG5cclxuICAgICAgICAgICAgaWYoIXNlbGYuZnJtTW9kZWwpe1xyXG4gICAgICAgICAgICAgICAgc2VsZi5ub0FjdGl2ZVZhbHVlcz1cIlwiO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmKCFzZWxmLmZybU1vZGVsLmFjdGl2ZUluZ0xpc3QgfHwgc2VsZi5mcm1Nb2RlbC5hY3RpdmVJbmdMaXN0Lmxlbmd0aD09PTApe1xyXG4gICAgICAgICAgICAgICAgc2VsZi5ub0FjdGl2ZVZhbHVlcz1cIlwiO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgc2VsZi5ub0FjdGl2ZVZhbHVlcz1cInZhbHVlc1wiO1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcblxyXG4gICAgICAgIH07XHJcblxyXG5cclxuICAgICAgICBzZWxmLnVwZGF0ZUFjdGl2ZUluZ0xpc3QgPSBmdW5jdGlvbihsaXN0KXtcclxuICAgICAgICAgICAgaWYoIWxpc3QpIHJldHVybjtcclxuXHJcbiAgICAgICAgICAgIHNlbGYuZnJtTW9kZWwuYWN0aXZlSW5nTGlzdCA9IGxpc3Q7XHJcbiAgICAgICAgICAgIHNlbGYucmVjb3JkQ2hhbmdlZCgpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHNlbGYudXBkYXRlTm9uTWVkSW5nTGlzdCA9IGZ1bmN0aW9uKGxpc3Qpe1xyXG4gICAgICAgICAgICBpZighbGlzdCkgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgc2VsZi5mcm1Nb2RlbC5uTWVkSW5nTGlzdCA9IGxpc3Q7XHJcbiAgICAgICAgICAgIHNlbGYucmVjb3JkQ2hhbmdlZCgpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHNlbGYudXBkYXRlQ29udGFpbmVyVHlwZUxpc3QgPSBmdW5jdGlvbihsaXN0KXtcclxuICAgICAgICAgICAgaWYoIWxpc3QpIHJldHVybjtcclxuXHJcbiAgICAgICAgICAgIHNlbGYuZnJtTW9kZWwuY29udGFpbmVyVHlwZXMgPSBsaXN0O1xyXG5cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBzZWxmLnVwZGF0ZU1hdGVyaWFsTGlzdCA9IGZ1bmN0aW9uKGxpc3Qpe1xyXG4gICAgICAgICAgICBpZighbGlzdCkgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgc2VsZi5mcm1Nb2RlbC5hbmltYWxIdW1hbk1hdGVyaWFscyA9IGxpc3Q7XHJcbiAgICAgICAgICAgIHNlbGYucmVjb3JkQ2hhbmdlZCgpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHNlbGYudXBkYXRlUm9hTGlzdCA9IGZ1bmN0aW9uKGxpc3Qpe1xyXG4gICAgICAgICAgICBpZighbGlzdCkgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgc2VsZi5mcm1Nb2RlbC5yb3V0ZUFkbWlucyA9IGxpc3Q7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgc2VsZi51cGRhdGVDb3VudHJ5TGlzdCA9IGZ1bmN0aW9uKGxpc3Qpe1xyXG4gICAgICAgICAgICBpZighbGlzdCkgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgc2VsZi5mcm1Nb2RlbC5jb3VudHJ5TGlzdCA9IGxpc3Q7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAbmdEb2MgZGV0ZXJtaW5lcyBpZiBkb3NhZ2UgT3RoZXIgc2hvdWxkIGJlIHNob3duXHJcbiAgICAgICAgICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgc2VsZi5pc0Rvc2FnZU90aGVyID0gZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICAgICAgaWYoIXNlbGYuZnJtTW9kZWwuZG9zYWdlRm9ybSkgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICBpZiAoKHNlbGYuZnJtTW9kZWwuZG9zYWdlRm9ybS5pZCA9PT0gc2VsZi5vdGhlclZhbHVlKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBzZWxmLmZybU1vZGVsLmRvc2FnZUZvcm1PdGhlciA9IFwiXCI7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0pKCk7XHJcbiIsIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IEFiZGVzc2FtYWQgb24gOS8yMS8yMDE2LlxyXG4gKi9cclxuXHJcbihmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ2Zvcm11bGF0aW9uc01vZHVsZScsIFsnZXhwYW5kaW5nVGFibGUnLCAnZm9ybXVsYXRpb25SZWNvcmRNb2R1bGUnXSlcclxufSkoKTtcclxuXHJcbihmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ2Zvcm11bGF0aW9uc01vZHVsZScpXHJcbiAgICAgICAgLmNvbXBvbmVudCgnY21wRm9ybXVsYXRpb25zJywge1xyXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2FwcC9zY3JpcHRzL2NvbXBvbmVudHMvZm9ybXVsYXRpb25zL3RwbC1mb3JtdWxhdGlvbi1saXN0XzIwMTcwMjAzXzE1MDIuaHRtbCcsXHJcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6IGZvcm11bGF0aW9uc0N0cmwsXHJcbiAgICAgICAgICAgIGNvbnRyb2xsZXJBczogJ2Zvcm11bEN0cmwnLFxyXG4gICAgICAgICAgICBiaW5kaW5nczoge1xyXG4gICAgICAgICAgICAgICAgZm9ybXVsYXRpb25zOiAnPCcsXHJcbiAgICAgICAgICAgICAgICByZWNvcmRDaGFuZ2VkOiAnJidcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgIGZ1bmN0aW9uIGZvcm11bGF0aW9uc0N0cmwoKSB7XHJcblxyXG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcclxuICAgICAgICBzZWxmLmlzRGV0YWlsVmFsaWQgPSB0cnVlOyAvL1RPRE8gdGhpcyBtdXN0IGJlIG1hbmFnZWRcclxuICAgICAgICBzZWxmLnNlbGVjdFJlY29yZCA9IC0xO1xyXG4gICAgICAgIHNlbGYucmVzZXRUb0NvbGxhcHNlZCA9IGZhbHNlO1xyXG4gICAgICAgIHNlbGYubm9Gb3JtdWxhdGlvbnMgPSBcIlwiO1xyXG4gICAgICAgIHNlbGYuJG9uSW5pdCA9IGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgICAgIHNlbGYubmV3Rm9ybVNob3duID0gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICBzZWxmLmNvbE5hbWVzID0gW1xyXG4gICAgICAgICAgICAgICAge2xhYmVsOiBcIkZPUk1fSURcIiwgYmluZGluZzogXCJmb3JtdWxhdGlvbklkXCIsIHdpZHRoOiBcIjE1XCJ9LFxyXG4gICAgICAgICAgICAgICAge2xhYmVsOiBcIkZPUk1VTEFUSU9OX05BTUVcIiwgYmluZGluZzogXCJmb3JtdWxhdGlvbk5hbWVcIiwgd2lkdGg6IFwiODVcIn1cclxuICAgICAgICAgICAgXTtcclxuICAgICAgICAgICAgc2VsZi5mb3JtdWxhdGlvbkxpc3QgPSBbXTtcclxuXHJcbiAgICAgICAgICAgIGlmIChzZWxmLmZvcm11bGF0aW9ucykge1xyXG4gICAgICAgICAgICAgICAgc2VsZi5mb3JtdWxhdGlvbkxpc3QgPSBzZWxmLmZvcm11bGF0aW9ucztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBzZWxmLnVwZGF0ZUZvcm11bGF0aW9uc0Vycm9yKCk7XHJcbiAgICAgICAgfTtcclxuXHJcblxyXG4gICAgICAgIHNlbGYuJG9uQ2hhbmdlcyA9IGZ1bmN0aW9uIChjaGFuZ2VzKSB7XHJcblxyXG4gICAgICAgICAgICBpZiAoY2hhbmdlcy5mb3JtdWxhdGlvbnMpIHtcclxuICAgICAgICAgICAgICAgIHNlbGYuZm9ybXVsYXRpb25MaXN0ID0gY2hhbmdlcy5mb3JtdWxhdGlvbnMuY3VycmVudFZhbHVlO1xyXG4gICAgICAgICAgICAgICAgc2VsZi51cGRhdGVGb3JtdWxhdGlvbnNFcnJvcigpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgc2VsZi5hZGROZXcgPSBmdW5jdGlvbiAoKSB7XHJcblxyXG5cclxuICAgICAgICAgICAgdmFyIG5ld1JlY29yZCA9IHtcclxuICAgICAgICAgICAgICAgIFwiZm9ybXVsYXRpb25JZFwiOiAoZ2V0TWF4Rm9ybXVsYXRpb25JZCgpICsgMSksXHJcbiAgICAgICAgICAgICAgICBcImZvcm11bGF0aW9uTmFtZVwiOiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgXCJkb3NhZ2VGb3JtXCI6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBcImRvc2FnZUZvcm1PdGhlclwiOiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgYWN0aXZlSW5nTGlzdDogW10sXHJcbiAgICAgICAgICAgICAgICBuTWVkSW5nTGlzdDogW10sXHJcbiAgICAgICAgICAgICAgICBjb250YWluZXJUeXBlczogW10sXHJcbiAgICAgICAgICAgICAgICBhbmltYWxIdW1hbk1hdGVyaWFsczogW10sXHJcbiAgICAgICAgICAgICAgICByb3V0ZUFkbWluczogW10sXHJcbiAgICAgICAgICAgICAgICBjb3VudHJ5TGlzdDogW11cclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHNlbGYuZm9ybXVsYXRpb25MaXN0LnB1c2gobmV3UmVjb3JkKTtcclxuICAgICAgICAgICAgLy9zZXQgdGhlIGV4cGFuZGluZyB0YWJsZVxyXG4gICAgICAgICAgICBzZXRSZWNvcmQoc2VsZi5mb3JtdWxhdGlvbkxpc3QubGVuZ3RoIC0gMSk7XHJcbiAgICAgICAgICAgIHNlbGYucmVzZXRUb0NvbGxhcHNlZCA9ICFzZWxmLnJlc2V0VG9Db2xsYXBzZWQ7XHJcbiAgICAgICAgICAgIHNlbGYudXBkYXRlRm9ybXVsYXRpb25zRXJyb3IoKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBzZWxmLmFkZENvcHk9ZnVuY3Rpb24oZm9ybXVsYXRpb24pe1xyXG4gICAgICAgICAgICBpZihmb3JtdWxhdGlvbikge1xyXG4gICAgICAgICAgICAgICAgZm9ybXVsYXRpb24uZm9ybXVsYXRpb25JZD0oZ2V0TWF4Rm9ybXVsYXRpb25JZCgpICsgMSk7XHJcbiAgICAgICAgICAgICAgICBzZWxmLmZvcm11bGF0aW9uTGlzdC5wdXNoKGZvcm11bGF0aW9uKTtcclxuICAgICAgICAgICAgICAgIHNldFJlY29yZCgtIDEpO1xyXG4gICAgICAgICAgICAgICAgc2VsZi5yZXNldFRvQ29sbGFwc2VkID0gIXNlbGYucmVzZXRUb0NvbGxhcHNlZDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHNlbGYudXBkYXRlID0gZnVuY3Rpb24gKGlkeCwgZnJtKSB7XHJcbiAgICAgICAgICAgIHNlbGYuZm9ybXVsYXRpb25MaXN0W2lkeF0gPSBhbmd1bGFyLmNvcHkoZnJtKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBzZWxmLmRlbGV0ZSA9IGZ1bmN0aW9uIChpZHgpIHtcclxuICAgICAgICAgICAgLy9jb25zb2xlLmRlYnVnKCdmcm1MaXN0IGRlbGV0ZTogJyArIGlkeCk7XHJcbiAgICAgICAgICAgIGlmIChzZWxmLmZvcm11bGF0aW9uTGlzdC5zcGxpY2UoaWR4LCAxKSlcclxuICAgICAgICAgICAgICAgIHNldFJlY29yZCgtMSk7XHJcbiAgICAgICAgICAgICAgICBzZWxmLnJlc2V0VG9Db2xsYXBzZWQgPSAhc2VsZi5yZXNldFRvQ29sbGFwc2VkO1xyXG5cclxuICAgICAgICAgICAgc2VsZi51cGRhdGVGb3JtdWxhdGlvbnNFcnJvcigpO1xyXG5cclxuICAgICAgICB9O1xyXG5cclxuXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFVzZWQgZm9yIGVycm9yIG1lc3NhZ2luZyB0aGF0IHRoZXJlIGFyZSBubyBhY3RpdmUgaW5ncmVkaWVudHNcclxuICAgICAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBzdHJpbmcgaXMgZW1wdHkgaWYgbm90IGVtcHR5XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgc2VsZi51cGRhdGVGb3JtdWxhdGlvbnNFcnJvciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKHNlbGYuZm9ybXVsYXRpb25MaXN0ICYmIHNlbGYuZm9ybXVsYXRpb25MaXN0Lmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgIHNlbGYubm9Gb3JtdWxhdGlvbnMgPSBzZWxmLmZvcm11bGF0aW9uTGlzdC5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgc2VsZi5ub0Zvcm11bGF0aW9ucyA9IFwiXCI7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG5cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBzZXRSZWNvcmQodmFsdWUpe1xyXG4gICAgICAgICAgICBzZWxmLnNlbGVjdFJlY29yZD12YWx1ZTtcclxuXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZ1bmN0aW9uIGdldE1heEZvcm11bGF0aW9uSWQoKSB7XHJcbiAgICAgICAgICAgIHZhciBvdXQgPSAwO1xyXG4gICAgICAgICAgICB2YXIgbGlzdCA9IHNlbGYuZm9ybXVsYXRpb25MaXN0O1xyXG4gICAgICAgICAgICBpZiAobGlzdCkge1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGxpc3RbaV0uZm9ybXVsYXRpb25JZCA+IG91dCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvdXQgPSBsaXN0W2ldLmZvcm11bGF0aW9uSWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBvdXQ7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICB9XHJcblxyXG59KSgpO1xyXG5cclxuIiwiLyoqXHJcbiAqIENyZWF0ZWQgYnkgQWJkZXNzYW1hZCBvbiA5LzI1LzIwMTYuXHJcbiAqL1xyXG5cclxuKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgnY29udGFpbmVyVHlwZVJlY29yZE1vZHVsZScsIFtdKVxyXG59KSgpO1xyXG5cclxuKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgnY29udGFpbmVyVHlwZVJlY29yZE1vZHVsZScpXHJcbiAgICAgICAgLmNvbXBvbmVudCgnY21wQ29udGFpbmVyVHlwZVJlY29yZCcsIHtcclxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdhcHAvc2NyaXB0cy9jb21wb25lbnRzL2Zvcm11bGF0aW9ucy90cGwtY29udGFpbmVyLXR5cGUtcmVjb3JkXzIwMTcwMjAzXzE1MDIuaHRtbCcsXHJcbiAgICAgICAgICAgIGNvbnRyb2xsZXJBczogJ2N0ckN0cmwnLFxyXG4gICAgICAgICAgICBjb250cm9sbGVyOiBjb250YWluZXJUeXBlUmVjQ3RybCxcclxuICAgICAgICAgICAgYmluZGluZ3M6IHtcclxuICAgICAgICAgICAgICAgIGRlbGV0ZUJ0bjogJzwnLFxyXG4gICAgICAgICAgICAgICAgcmVjb3JkOic8JyxcclxuICAgICAgICAgICAgICAgIG9uQWRkSW5nOiAnJicsXHJcbiAgICAgICAgICAgICAgICBvblVwZGF0ZTogJyYnLFxyXG4gICAgICAgICAgICAgICAgb25EZWxldGU6ICcmJyxcclxuICAgICAgICAgICAgICAgIG9uQ2FuY2VsOiAnJicsXHJcbiAgICAgICAgICAgICAgICBzaG93RXJyb3JzOicmJyxcclxuICAgICAgICAgICAgICAgIGlzRGV0YWlsVmFsaWQ6ICcmJyxcclxuICAgICAgICAgICAgICAgIHJlY29yZEluZGV4Oic8J1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH0pO1xyXG4gICAgY29udGFpbmVyVHlwZVJlY0N0cmwuJGluamVjdD1bJyRzY29wZSddO1xyXG4gICAgZnVuY3Rpb24gY29udGFpbmVyVHlwZVJlY0N0cmwoJHNjb3BlKSB7XHJcblxyXG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcclxuICAgICAgICBzZWxmLnNhdmVQcmVzc2VkPWZhbHNlO1xyXG4gICAgICAgIHNlbGYuY3RNb2RlbCA9IHsgLy9UT0RPIG1vdmUgdG8gc2VydmljZVxyXG4gICAgICAgICAgICBcImNvbnRhaW5lclR5cGVcIjogXCJcIixcclxuICAgICAgICAgICAgXCJwYWNrYWdlU2l6ZVwiOiBcIlwiLFxyXG4gICAgICAgICAgICBcInNoZWxmTGlmZVllYXJzXCI6IHVuZGVmaW5lZCxcclxuICAgICAgICAgICAgXCJzaGVsZkxpZmVNb250aHNcIjogdW5kZWZpbmVkLFxyXG4gICAgICAgICAgICBcInRlbXBNaW5cIjogdW5kZWZpbmVkLFxyXG4gICAgICAgICAgICBcInRlbXBNYXhcIjogdW5kZWZpbmVkXHJcbiAgICAgICAgfTtcclxuICAgICAgICBzZWxmLmJhY2t1cCA9IGFuZ3VsYXIuY29weShzZWxmLmN0TW9kZWwpO1xyXG4gICAgICAgIHNlbGYuJG9uSW5pdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgc2VsZi5zYXZlUHJlc3NlZD1mYWxzZTtcclxuXHJcbiAgICAgICAgICAgIC8qIGlmKHNlbGYucmVjb3JkKXtcclxuICAgICAgICAgICAgICAgIHNlbGYuY3RNb2RlbCA9IGFuZ3VsYXIuY29weShzZWxmLnJlY29yZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgIHNlbGYuYmFja3VwID0gYW5ndWxhci5jb3B5KHNlbGYuY3RNb2RlbCk7Ki9cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBzZWxmLiRvbkNoYW5nZXMgPSBmdW5jdGlvbiAoY2hhbmdlcykge1xyXG4gICAgICAgICAgICBpZiAoY2hhbmdlcy5yZWNvcmQgJiYgY2hhbmdlcy5yZWNvcmQuY3VycmVudFZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICBzZWxmLmN0TW9kZWwgPSBhbmd1bGFyLmNvcHkoY2hhbmdlcy5yZWNvcmQuY3VycmVudFZhbHVlKTtcclxuICAgICAgICAgICAgICAgIHNlbGYuY3RNb2RlbC5zaGVsZkxpZmVZZWFycyA9IE51bWJlcihjaGFuZ2VzLnJlY29yZC5jdXJyZW50VmFsdWUuc2hlbGZMaWZlWWVhcnMpO1xyXG4gICAgICAgICAgICAgICAgc2VsZi5jdE1vZGVsLnNoZWxmTGlmZU1vbnRocyA9IE51bWJlcihjaGFuZ2VzLnJlY29yZC5jdXJyZW50VmFsdWUuc2hlbGZMaWZlTW9udGhzKTtcclxuICAgICAgICAgICAgICAgIHNlbGYuY3RNb2RlbC50ZW1wTWluID0gTnVtYmVyKGNoYW5nZXMucmVjb3JkLmN1cnJlbnRWYWx1ZS50ZW1wTWluKTtcclxuICAgICAgICAgICAgICAgIHNlbGYuY3RNb2RlbC50ZW1wTWF4ID0gTnVtYmVyKGNoYW5nZXMucmVjb3JkLmN1cnJlbnRWYWx1ZS50ZW1wTWF4KTtcclxuICAgICAgICAgICAgICAgIHNlbGYuYmFja3VwID0gYW5ndWxhci5jb3B5KHNlbGYuY3RNb2RlbCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgc2VsZi5zYXZlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZihzZWxmLmNvbnRhaW5lclR5cGVGb3JtLiR2YWxpZCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHNlbGYucmVjb3JkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ3Byb2R1Y3QgZGV0YWlscyB1cGRhdGUgcHJvZHVjdCcpO1xyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYub25VcGRhdGUoe2NUeXBlOiBzZWxmLmN0TW9kZWx9KTtcclxuXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vICBjb25zb2xlLmxvZygncHJvZHVjdCBkZXRhaWxzIGFkZCBwcm9kdWN0Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5vbkFkZEluZyh7Y1R5cGU6IHNlbGYuY3RNb2RlbH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgc2VsZi5jb250YWluZXJUeXBlRm9ybS4kc2V0UHJpc3RpbmUoKTtcclxuICAgICAgICAgICAgICAgIHNlbGYuc2F2ZVByZXNzZWQ9ZmFsc2U7XHJcbiAgICAgICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICAgICAgc2VsZi5zYXZlUHJlc3NlZD10cnVlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHNlbGYuZGlzY2FyZENoYW5nZXMgPSBmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICBzZWxmLmN0TW9kZWwgPSBhbmd1bGFyLmNvcHkoc2VsZi5iYWNrdXApO1xyXG4gICAgICAgICAgICBzZWxmLmNvbnRhaW5lclR5cGVGb3JtLiRzZXRQcmlzdGluZSgpO1xyXG4gICAgICAgICAgICBzZWxmLm9uQ2FuY2VsKCk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgc2VsZi5kZWxldGUgPSBmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICBpZiAoc2VsZi5yZWNvcmQpIHtcclxuICAgICAgICAgICAgICAgIC8vICBjb25zb2xlLmxvZygncHJvZHVjdCBkZXRhaWxzIGRlbGV0ZSBwcm9kdWN0Jyk7XHJcbiAgICAgICAgICAgICAgICBzZWxmLm9uRGVsZXRlKCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBNYW5hZ2VzIHZpc2liaWxpdHkgb2YgZXJyb3IgbWVzc2FnZXMgZm9yIGFuIGluZHZpZHVhbCBjb250cm9sXHJcbiAgICAgICAgICogQHBhcmFtIGlzSW52YWxpZFxyXG4gICAgICAgICAqIEBwYXJhbSBpc1RvdWNoZWRcclxuICAgICAgICAgKiBAcmV0dXJucyB7Kn1cclxuICAgICAgICAgKi9cclxuICAgICAgICBzZWxmLnNob3dFcnJvcj1mdW5jdGlvbihpc0ludmFsaWQsIGlzVG91Y2hlZCl7XHJcbiAgICAgICAgICAgIHJldHVybiAoKGlzSW52YWxpZCAmJiBpc1RvdWNoZWQpIHx8IChpc0ludmFsaWQgJiYgc2VsZi5zYXZlUHJlc3NlZCkgLyogVE9ETyBhZGQgc2hvd0Vycm9yc3x8KGlzSW52YWxpZCAmJiBzZWxmLnNob3dFcnJvcnMoKSkqLylcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAkc2NvcGUuJHdhdGNoKCdjdHJDdHJsLmNvbnRhaW5lclR5cGVGb3JtLiRkaXJ0eScsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgc2VsZi5pc0RldGFpbFZhbGlkKHtzdGF0ZTogIXNlbGYuY29udGFpbmVyVHlwZUZvcm0uJGRpcnR5fSk7XHJcbiAgICAgICAgfSwgdHJ1ZSk7XHJcbiAgICB9XHJcblxyXG59KSgpO1xyXG4iLCIvKipcclxuICogQ3JlYXRlZCBieSBBYmRlc3NhbWFkIG9uIDkvMjUvMjAxNi5cclxuICovXHJcblxyXG5cclxuKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgnY29udGFpbmVyVHlwZUxpc3RNb2R1bGUnLCBbJ2V4cGFuZGluZ1RhYmxlJywgJ2NvbnRhaW5lclR5cGVSZWNvcmRNb2R1bGUnXSlcclxufSkoKTtcclxuXHJcblxyXG4oZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKCdjb250YWluZXJUeXBlTGlzdE1vZHVsZScpXHJcbiAgICAgICAgLmNvbXBvbmVudCgnY21wQ29udGFpbmVyVHlwZUxpc3QnLCB7XHJcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnYXBwL3NjcmlwdHMvY29tcG9uZW50cy9mb3JtdWxhdGlvbnMvdHBsLWNvbnRhaW5lci10eXBlLWxpc3RfMjAxNzAyMDNfMTUwMi5odG1sJyxcclxuICAgICAgICAgICAgY29udHJvbGxlcjogY29udGFpbmVyVHlwZUxpc3RDdHJsLFxyXG4gICAgICAgICAgICBjb250cm9sbGVyQXM6ICdjdGxDdHJsJyxcclxuICAgICAgICAgICAgYmluZGluZ3M6IHtcclxuICAgICAgICAgICAgICAgIGNvbnRhaW5lcnM6ICc8JyxcclxuICAgICAgICAgICAgICAgIG9uVXBkYXRlOiAnJidcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgIGZ1bmN0aW9uIGNvbnRhaW5lclR5cGVMaXN0Q3RybCgpIHtcclxuXHJcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG4gICAgICAgIHNlbGYuaXNEZXRhaWxWYWxpZCA9IHRydWU7XHJcbiAgICAgICAgc2VsZi5zZWxlY3RSZWNvcmQgPSAtMTtcclxuICAgICAgICBzZWxmLnJlc2V0VG9Db2xsYXBzZWQgPSBmYWxzZTtcclxuICAgICAgICBzZWxmLmlzRGV0YWlsVmFsaWQgPSB0cnVlO1xyXG4gICAgICAgIHNlbGYubmV3SW5nRm9ybVNob3duID0gZmFsc2U7XHJcblxyXG4gICAgICAgIHNlbGYuJG9uSW5pdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgc2VsZi5zZWxlY3RSZWNvcmQgPSAtMTtcclxuICAgICAgICAgICAgc2VsZi5yZXNldFRvQ29sbGFwc2VkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHNlbGYuaXNEZXRhaWxWYWxpZCA9IHRydWU7XHJcbiAgICAgICAgICAgIHNlbGYubmV3SW5nRm9ybVNob3duID0gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICBzZWxmLmNvbE5hbWVzID0gW1xyXG4gICAgICAgICAgICAgICAge2xhYmVsOiBcIkNPTlRBSU5FUl9UWVBFXCIsIGJpbmRpbmc6IFwiY29udGFpbmVyVHlwZVwiLCB3aWR0aDogXCI1MFwifSxcclxuICAgICAgICAgICAgICAgIHtsYWJlbDogXCJQQUNLQUdFX1NJWkVcIiwgYmluZGluZzogXCJwYWNrYWdlU2l6ZVwiLCB3aWR0aDogXCI1MFwifVxyXG4gICAgICAgICAgICBdO1xyXG5cclxuICAgICAgICAgICAgc2VsZi5jb250YWluZXJMaXN0ID0gW107XHJcblxyXG4gICAgICAgICAgICBpZiAoc2VsZi5jb250YWluZXJzKSB7XHJcbiAgICAgICAgICAgICAgICBzZWxmLmNvbnRhaW5lckxpc3QgPSBzZWxmLmNvbnRhaW5lcnM7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgc2VsZi4kb25DaGFuZ2VzID0gZnVuY3Rpb24gKGNoYW5nZXMpIHtcclxuXHJcbiAgICAgICAgICAgIGlmIChjaGFuZ2VzLmNvbnRhaW5lcnMpIHtcclxuICAgICAgICAgICAgICAgIHNlbGYuY29udGFpbmVyTGlzdCA9IGNoYW5nZXMuY29udGFpbmVycy5jdXJyZW50VmFsdWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBzZWxmLmFkZE5ldyA9IGZ1bmN0aW9uIChpbmcpIHtcclxuICAgICAgICAgICAgc2VsZi5zZXRWYWxpZCh0cnVlKTtcclxuICAgICAgICAgICAgc2VsZi5jb250YWluZXJMaXN0LnB1c2goaW5nKTtcclxuICAgICAgICAgICAgc2VsZi5uZXdJbmdGb3JtU2hvd24gPSBmYWxzZTtcclxuICAgICAgICAgICAgc2VsZi5yZXNldFRvQ29sbGFwc2VkID0gIXNlbGYucmVzZXRUb0NvbGxhcHNlZDtcclxuICAgICAgICAgICAgc2VsZi5vblVwZGF0ZSh7bGlzdDpzZWxmLmNvbnRhaW5lckxpc3R9KTtcclxuICAgICAgICAgICAgc2V0UmVjb3JkKC0xKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBzZWxmLnVwZGF0ZVJlYyA9IGZ1bmN0aW9uIChpZHgsIGluZykge1xyXG4gICAgICAgICAgICBzZWxmLmNvbnRhaW5lckxpc3RbaWR4XSA9IGFuZ3VsYXIuY29weShpbmcpO1xyXG4gICAgICAgICAgICBzZWxmLm9uVXBkYXRlKHtsaXN0OnNlbGYuY29udGFpbmVyTGlzdH0pO1xyXG4gICAgICAgICAgICBzZWxmLnNldFZhbGlkKHRydWUpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHNlbGYuZGVsZXRlUmVjID0gZnVuY3Rpb24gKGlkeCkge1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmRlYnVnKCdjb250YWluZXJMaXN0IGRlbGV0ZUluZzogJyArIGlkeCk7XHJcbiAgICAgICAgICAgIHNlbGYuY29udGFpbmVyTGlzdC5zcGxpY2UoaWR4LCAxKTtcclxuICAgICAgICAgICAgc2VsZi5vblVwZGF0ZSh7bGlzdDpzZWxmLmNvbnRhaW5lckxpc3R9KTtcclxuICAgICAgICAgICAgc2VsZi5zZXRWYWxpZCh0cnVlKTtcclxuICAgICAgICAgICAgc2V0UmVjb3JkKC0xKTtcclxuICAgICAgICAgICAgc2VsZi5yZXNldFRvQ29sbGFwc2VkID0gIXNlbGYucmVzZXRUb0NvbGxhcHNlZDtcclxuICAgICAgICB9O1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIHNldHMgdGhlIHJlY29yZCBpbiB0aGUgZXhwYW5kaW5nIHRhYmxlIHRvIHNlbGVjdCBsZXNzIHRoYW4gemVybyBtZWFucyBub25lXHJcbiAgICAgICAgICogQHBhcmFtIHZhbHVlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZnVuY3Rpb24gc2V0UmVjb3JkKHZhbHVlKXtcclxuICAgICAgICAgICAgc2VsZi5zZWxlY3RSZWNvcmQgPSB2YWx1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEZsYWcgc2V0IHRvIGluZGljYXRlIGlmIHRoZSByZWNvcmQgZGV0YWlscyBhcmUgaW4gYSB2YWxpZCBzdGF0ZVxyXG4gICAgICAgICAqIEBwYXJhbSB2YWx1ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHNlbGYuc2V0VmFsaWQ9ZnVuY3Rpb24odmFsdWUpe1xyXG4gICAgICAgICAgICBzZWxmLmlzRGV0YWlsVmFsaWQ9dmFsdWU7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBDb250cm9scyB0aGUgc3RhdGUgb2YgdGhlIGFkZCBuZXcgaW5ncmVkaWVudCBidXR0b25cclxuICAgICAgICAgKiBAcmV0dXJucyB7Knxib29sZWFufVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHNlbGYuYWRkTmV3RGlzYWJsZWQ9ZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgcmV0dXJuIChzZWxmLm5ld0luZ0Zvcm1TaG93biB8fCAhc2VsZi5pc0RldGFpbFZhbGlkKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFNldHMgdGhlIFVJIHN0YXRlIGZvciB0aGUgYWRkIG5ldyB0ZW1wbGF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHNlbGYuYWRkTmV3SW5ncmVkaWVudFN0YXRlPWZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgIHNlbGYucmVzZXRUb0NvbGxhcHNlZCA9ICFzZWxmLnJlc2V0VG9Db2xsYXBzZWQ7XHJcbiAgICAgICAgICAgIHNlbGYubmV3SW5nRm9ybVNob3duID0gdHJ1ZTtcclxuICAgICAgICAgICAgc2VsZi5zZXRWYWxpZChmYWxzZSk7XHJcbiAgICAgICAgICAgIHJldHVybihzZWxmLm5ld0luZ0Zvcm1TaG93bik7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogV2hlbiBhIG5ldyByZWNvcmQgaXMgY2FuY2VsbGVkLCByZXNldHMgc3RhdGU7XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgc2VsZi5vbk5ld0NhbmNlbD1mdW5jdGlvbigpe1xyXG4gICAgICAgICAgICBzZWxmLnNldFZhbGlkKHRydWUpO1xyXG4gICAgICAgICAgICBzZWxmLm5ld0luZ0Zvcm1TaG93biA9IGZhbHNlXHJcbiAgICAgICAgfVxyXG5cclxuICAgIH1cclxuXHJcbn0pKCk7XHJcbiIsIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IEFiZGVzc2FtYWQgb24gOS8yMS8yMDE2LlxyXG4gKi9cclxuXHJcbihmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ2FjdGl2ZUluZ1JlY29yZE1vZHVsZScsIFsnZG9zc2llckRhdGFMaXN0cycsJ2hwZmJDb25zdGFudHMnXSlcclxufSkoKTtcclxuXHJcbihmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ2FjdGl2ZUluZ1JlY29yZE1vZHVsZScpXHJcbiAgICAgICAgLmNvbXBvbmVudCgnY21wQWN0aXZlSW5nUmVjb3JkJywge1xyXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2FwcC9zY3JpcHRzL2NvbXBvbmVudHMvZm9ybXVsYXRpb25zL3RwbC1hY3RpdmUtaW5nLXJlY29yZF8yMDE3MDIwM18xNTAyLmh0bWwnLFxyXG4gICAgICAgICAgICBjb250cm9sbGVyQXM6ICdpbmdSZWNDdHJsJyxcclxuICAgICAgICAgICAgY29udHJvbGxlcjogYWN0aXZlSW5nUmVjQ3RybCxcclxuICAgICAgICAgICAgYmluZGluZ3M6IHtcclxuICAgICAgICAgICAgICAgIHNob3dFcnJvcnM6ICcmJyxcclxuICAgICAgICAgICAgICAgIGRlbGV0ZUJ0bjogJzwnLFxyXG4gICAgICAgICAgICAgICAgcmVjb3JkOiAnPCcsXHJcbiAgICAgICAgICAgICAgICBvbkFkZEluZzogJyYnLFxyXG4gICAgICAgICAgICAgICAgb25VcGRhdGU6ICcmJyxcclxuICAgICAgICAgICAgICAgIG9uRGVsZXRlOiAnJicsXHJcbiAgICAgICAgICAgICAgICBvbkNhbmNlbDogJyYnLFxyXG4gICAgICAgICAgICAgICAgaXNEZXRhaWxWYWxpZDogJyYnLFxyXG4gICAgICAgICAgICAgICAgcmVjb3JkSW5kZXg6ICc8J1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH0pO1xyXG4gICAgYWN0aXZlSW5nUmVjQ3RybC4kaW5qZWN0ID0gWydEb3NzaWVyTGlzdHMnLCAnJHNjb3BlJywnJHRyYW5zbGF0ZScsICdPVEhFUicsJ1lFUyddO1xyXG4gICAgZnVuY3Rpb24gYWN0aXZlSW5nUmVjQ3RybChEb3NzaWVyTGlzdHMsICRzY29wZSwgJHRyYW5zbGF0ZSxPVEhFUixZRVMpIHtcclxuXHJcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG4gICAgICAgIHNlbGYubmFub01hdGVyaWFsTGlzdCA9IERvc3NpZXJMaXN0cy5nZXROYW5vTWF0ZXJpYWxzKCk7XHJcbiAgICAgICAgc2VsZi55ZXNOb0xpc3QgPSBEb3NzaWVyTGlzdHMuZ2V0WWVzTm9MaXN0KCk7XHJcbiAgICAgICAgc2VsZi5hY3RpdmVMaXN0ID0gRG9zc2llckxpc3RzLmdldEFjdGl2ZUxpc3QoKTtcclxuICAgICAgICBzZWxmLlVuaXRzTGlzdD1Eb3NzaWVyTGlzdHMuZ2V0VW5pdHNMaXN0KCk7XHJcbiAgICAgICAgc2VsZi5zYXZlUHJlc3NlZCA9IGZhbHNlO1xyXG4gICAgICAgIHNlbGYubGFuZyA9ICR0cmFuc2xhdGUucHJvcG9zZWRMYW5ndWFnZSgpIHx8ICR0cmFuc2xhdGUudXNlKCk7XHJcbiAgICAgICAgLy9zZWxmLm5ld0luZ3JlZCA9IGZhbHNlO1xyXG4gICAgICAgIHNlbGYuaW5nTW9kZWwgPSB7XHJcbiAgICAgICAgICAgIGF1dG9JbmdyZWQ6ICdOJyxcclxuICAgICAgICAgICAgaW5nSWQ6IFwiXCIsXHJcbiAgICAgICAgICAgIGluZ0xhYmVsOiBcIlwiLFxyXG4gICAgICAgICAgICBjYXM6IFwiXCIsXHJcbiAgICAgICAgICAgIHN0YW5kYXJkOiBcIlwiLFxyXG4gICAgICAgICAgICBzdHJlbmd0aDogbnVsbCxcclxuICAgICAgICAgICAgdW5pdHM6IFwiXCIsXHJcbiAgICAgICAgICAgIG90aGVyVW5pdHM6XCJcIixcclxuICAgICAgICAgICAgcGVyOiBcIlwiLFxyXG4gICAgICAgICAgICBuYW5vTWF0ZXJpYWw6XCJcIixcclxuICAgICAgICAgICAgbmFub01hdGVyaWFsT3RoZXI6IFwiXCIsXHJcbiAgICAgICAgICAgIGNhbGNBc0Jhc2U6IFwiXCIsXHJcbiAgICAgICAgICAgIGh1bWFuQW5pbWFsU291cmNlZDogXCJcIlxyXG4gICAgICAgIH07XHJcbiAgICAgICAgc2VsZi4kb25Jbml0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBzZWxmLnNhdmVQcmVzc2VkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHNlbGYuYmFja3VwID0gYW5ndWxhci5jb3B5KHNlbGYuaW5nTW9kZWwpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHNlbGYuJG9uQ2hhbmdlcyA9IGZ1bmN0aW9uIChjaGFuZ2VzKSB7XHJcblxyXG4gICAgICAgICAgICAvL1RPRE86IG1vdmUgaW5pdCBjb2RlIHRvIGNoYW5nZXMgZXZlbnQgd2hlcmUgaXQgYmVsb25nc1xyXG4gICAgICAgICAgICBpZiAoY2hhbmdlcy5yZWNvcmQgJiYgY2hhbmdlcy5yZWNvcmQuY3VycmVudFZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAvL3NlbGYuaW5nTW9kZWwgPSBjaGFuZ2VzLnJlY29yZC5jdXJyZW50VmFsdWU7XHJcbiAgICAgICAgICAgICAgICBzZWxmLmluZ01vZGVsID0gYW5ndWxhci5jb3B5KGNoYW5nZXMucmVjb3JkLmN1cnJlbnRWYWx1ZSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXNlbGYuaW5nTW9kZWwuaW5nSWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBzZWxmLmluZ01vZGVsLmF1dG9JbmdyZWQgPSAnTic7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9zZWxmLm5ld0luZ3JlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuaW5nTW9kZWwuYXV0b0luZ3JlZCA9ICdZJztcclxuICAgICAgICAgICAgICAgICAgICAvL3NlbGYubmV3SW5ncmVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQ2hlY2tzIGlmIHRoZSBtb2RlbCBpcyBhbmltYWwgb3IgaHVtYW4gc291cmNlZFxyXG4gICAgICAgICAqIFVzZWQgdG8gc2V0IHRoZSBzdGF0ZSBvZiB0aGUgaW5mbyBib3hcclxuICAgICAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuICAgICAgICAgKi9cclxuICAgICAgICBzZWxmLmlzQW5pbWFsSHVtYW5Tb3VyY2VkPWZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgIGlmKCFzZWxmLmluZ01vZGVsKXsgLy9zaG91bGQgbmV2ZXIgaGFwcGVuZFxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybihzZWxmLmluZ01vZGVsLmh1bWFuQW5pbWFsU291cmNlZD09PVlFUyk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAvKiAkc2NvcGUuJHdhdGNoKCdpbmdSZWNDdHJsLm5ld0luZ3JlZCcsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKHNlbGYubmV3SW5ncmVkID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICBzZWxmLmluZ01vZGVsLmF1dG9JbmdyZWQgPSAnTic7XHJcbiAgICAgICAgICAgICAgICBzZWxmLmluZ01vZGVsLmluZ0lkID0gXCJcIjtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHNlbGYuaW5nTW9kZWwuYXV0b0luZ3JlZCA9ICdZJztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sIHRydWUpOyovXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEZpcmVzIG9uIHNlbGVjdGlvbiBPUiB3aGVuIHRoZSB2YWx1ZSBoYXMgY2hhbmdlZFxyXG4gICAgICAgICAqIEEgYml0IG9mIG92ZXJraWxsLCBidXQgYXZvaWRzIHVzaW5nIGEgd2F0Y2ggYW5kIHdvcmtzYXJvdW5kIHRoZSBjYXNlIHdoZXJlIGF1dG9jb21wbGV0ZSBpcyBjb25zaWRlcmVkXHJcbiAgICAgICAgICogSW4gdGhlIGxpc3QgYnV0IG5vdCBzZWxlY3RlZC5cclxuICAgICAgICAgKiBAcGFyYW0gaXRlbVxyXG4gICAgICAgICAqIEBwYXJhbSBtb2RlbFxyXG4gICAgICAgICAqIEBwYXJhbSBsYWJlbFxyXG4gICAgICAgICAqIEBwYXJhbSBldmVudFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHNlbGYuaW5ncmVkU2VsZWN0aW9uVXBkYXRlZCA9IGZ1bmN0aW9uIChpdGVtLCBtb2RlbCwgbGFiZWwsIGV2ZW50KSB7XHJcblxyXG4gICAgICAgICAgICAvL2lmIG5vIGl0ZW0gdGhpcyBtZWFucyBmaXJlZCBmcm9tIHRoZSBjaGFuZ2UgZXZlbnRcclxuXHJcbiAgICAgICAgICAgIGlmKCFpdGVtKXtcclxuICAgICAgICAgICAgICAgIHNlbGYuaW5nTW9kZWwuaW5nSWQ9XCJcIjtcclxuICAgICAgICAgICAgICAgIHNlbGYuaW5nTW9kZWwuYXV0b0luZ3JlZCA9ICdOJztcclxuICAgICAgICAgICAgfWVsc2Uge1xyXG4gICAgICAgICAgICAgICAgc2VsZi5pbmdNb2RlbC5pbmdJZCA9IGl0ZW0uaWQ7XHJcbiAgICAgICAgICAgICAgICBzZWxmLmluZ01vZGVsLmF1dG9JbmdyZWQgPSAnWSc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBzZWxmLnNhdmVJbmcgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHNlbGYuaW5nTW9kZWwpO1xyXG4gICAgICAgICAgICBpZiAoc2VsZi5hY3RpdmVJbmdGb3JtLiR2YWxpZCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHNlbGYucmVjb3JkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5vblVwZGF0ZSh7aW5nOiBzZWxmLmluZ01vZGVsfSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYub25BZGRJbmcoe2luZzogc2VsZi5pbmdNb2RlbH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgc2VsZi5hY3RpdmVJbmdGb3JtLiRzZXRQcmlzdGluZSgpO1xyXG4gICAgICAgICAgICAgICAgc2VsZi5zYXZlUHJlc3NlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgc2VsZi5zYXZlUHJlc3NlZCA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBzZWxmLmRpc2NhcmRDaGFuZ2VzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBzZWxmLmluZ01vZGVsID0gYW5ndWxhci5jb3B5KHNlbGYuYmFja3VwKTtcclxuICAgICAgICAgICAgc2VsZi5hY3RpdmVJbmdGb3JtLiRzZXRQcmlzdGluZSgpO1xyXG4gICAgICAgICAgICBzZWxmLm9uQ2FuY2VsKCk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgc2VsZi5kZWxldGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmIChzZWxmLnJlY29yZCkge1xyXG4gICAgICAgICAgICAgICAgc2VsZi5vbkRlbGV0ZSgpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHNlbGYuY29weSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIGluZ3JlZGllbnRDb3B5ID0gYW5ndWxhci5jb3B5KHNlbGYuaW5nTW9kZWwpO1xyXG4gICAgICAgICAgICBzZWxmLm9uQWRkSW5nKHtpbmc6IGluZ3JlZGllbnRDb3B5fSk7XHJcbiAgICAgICAgfTtcclxuXHJcblxyXG5cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQ29udHJvbHMgc2hvd2luZyBlcnJvcnMgZm9yIGEgZmllbGRcclxuICAgICAgICAgKiBAcGFyYW0gaXNJbnZhbGlkXHJcbiAgICAgICAgICogQHBhcmFtIGlzVG91Y2hlZFxyXG4gICAgICAgICAqIEByZXR1cm5zIHsqfVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHNlbGYuc2hvd0Vycm9yID0gZnVuY3Rpb24gKGlzSW52YWxpZCwgaXNUb3VjaGVkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAoKGlzSW52YWxpZCAmJiBpc1RvdWNoZWQpIHx8IChpc0ludmFsaWQgJiYgc2VsZi5zaG93RXJyb3JzKCkpIHx8IChpc0ludmFsaWQgJiYgc2VsZi5zYXZlUHJlc3NlZCkpXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogU2V0cyB0aGUgc3RhdGUgb2YgdGhlIG5hbm9tYXRlcmlhbCBvdGhlciBmaWVsZFxyXG4gICAgICAgICAqIEByZXR1cm5zIHtib29sZWFufSB0cnVlIGlmIG90aGVyIGlzIHRoZSB2YWx1ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHNlbGYuaXNOYW5vT3RoZXIgPSBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgICAgICBpZiAoc2VsZi5pbmdNb2RlbC5uYW5vTWF0ZXJpYWwuaWQgPT09IERvc3NpZXJMaXN0cy5nZXRPdGhlclZhbHVlKCkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgc2VsZi5pbmdNb2RlbC5uYW5vTWF0ZXJpYWxPdGhlciA9IFwiXCI7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAbmdEb2MgZGV0ZXJtaW5lcyBpZiB1bml0cyBPdGhlciBzaG91bGQgYmUgc2hvd25cclxuICAgICAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuICAgICAgICAgKi9cclxuICAgICAgICBzZWxmLmlzVW5pdHNPdGhlciA9IGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgICAgIGlmKCFzZWxmLmluZ01vZGVsKSByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIGlmICgoc2VsZi5pbmdNb2RlbC51bml0cy5pZCA9PT0gT1RIRVIpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHNlbGYuaW5nTW9kZWwub3RoZXJVbml0cyA9IFwiXCI7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuXHJcbiAgICAgICAgJHNjb3BlLiR3YXRjaCgnaW5nUmVjQ3RybC5hY3RpdmVJbmdGb3JtLiRkaXJ0eScsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgc2VsZi5pc0RldGFpbFZhbGlkKHtzdGF0ZTogIXNlbGYuYWN0aXZlSW5nRm9ybS4kZGlydHl9KTtcclxuICAgICAgICB9LCB0cnVlKTtcclxuXHJcblxyXG4gICAgfVxyXG5cclxufSkoKTtcclxuIiwiLyoqXHJcbiAqIENyZWF0ZWQgYnkgQWJkZXNzYW1hZCBvbiA5LzIxLzIwMTYuXHJcbiAqL1xyXG5cclxuKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgnYWN0aXZlSW5nTGlzdE1vZHVsZScsIFsnZXhwYW5kaW5nVGFibGUnLCAnYWN0aXZlSW5nUmVjb3JkTW9kdWxlJ10pXHJcbn0pKCk7XHJcblxyXG4oZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKCdhY3RpdmVJbmdMaXN0TW9kdWxlJylcclxuICAgICAgICAuY29tcG9uZW50KCdjbXBBY3RpdmVJbmdMaXN0Jywge1xyXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2FwcC9zY3JpcHRzL2NvbXBvbmVudHMvZm9ybXVsYXRpb25zL3RwbC1hY3RpdmUtaW5nLWxpc3RfMjAxNzAyMDNfMTUwMi5odG1sJyxcclxuICAgICAgICAgICAgY29udHJvbGxlcjogYWN0aXZlSW5nTGlzdEN0cmwsXHJcbiAgICAgICAgICAgIGNvbnRyb2xsZXJBczogJ2FpbEN0cmwnLFxyXG4gICAgICAgICAgICBiaW5kaW5nczoge1xyXG4gICAgICAgICAgICAgICAgaW5ncmVkaWVudHM6ICc8JyxcclxuICAgICAgICAgICAgICAgIG9uVXBkYXRlOiAnJidcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgIGZ1bmN0aW9uIGFjdGl2ZUluZ0xpc3RDdHJsKCkge1xyXG5cclxuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XHJcbiAgICAgICAgc2VsZi5zZWxlY3RSZWNvcmQgPSAtMTtcclxuICAgICAgICBzZWxmLnJlc2V0VG9Db2xsYXBzZWQgPSBmYWxzZTtcclxuICAgICAgICBzZWxmLmlzRGV0YWlsVmFsaWQgPSB0cnVlO1xyXG4gICAgICAgIHNlbGYuJG9uSW5pdCA9IGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgICAgIHNlbGYubmV3SW5nRm9ybVNob3duID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHNlbGYuaXNEZXRhaWxWYWxpZCA9IHRydWU7XHJcbiAgICAgICAgICAgIHNlbGYuc2VsZWN0UmVjb3JkID0gLTE7XHJcblxyXG4gICAgICAgICAgICBzZWxmLmNvbE5hbWVzID0gW1xyXG4gICAgICAgICAgICAgICAge2xhYmVsOiBcIk1FRElDSU5BTF9JTkdSRURJRU5UXCIsIGJpbmRpbmc6IFwiaW5nTGFiZWxcIiwgd2lkdGg6IFwiNjVcIn0sXHJcbiAgICAgICAgICAgICAgICB7bGFiZWw6IFwiSU5fTElTVFwiLCBiaW5kaW5nOiBcImF1dG9JbmdyZWRcIiwgd2lkdGg6IFwiN1wifSxcclxuICAgICAgICAgICAgICAgIHtsYWJlbDogXCJDQVNfTlVNXCIsIFwiYmluZGluZ1wiOiBcImNhc1wiLCB3aWR0aDogXCIxM1wifSxcclxuICAgICAgICAgICAgICAgIHtsYWJlbDogXCJIVU1BTl9BTklNQUxfU09VUkNFXCIsIGJpbmRpbmc6IFwiaHVtYW5BbmltYWxTb3VyY2VkXCIsIHdpZHRoOiBcIjE1XCJ9XHJcbiAgICAgICAgICAgIF07XHJcbiAgICAgICAgICAgIHNlbGYuaW5nTGlzdCA9IFtdO1xyXG5cclxuICAgICAgICAgICAgaWYgKHNlbGYuaW5ncmVkaWVudHMpIHtcclxuICAgICAgICAgICAgICAgIHNlbGYuaW5nTGlzdCA9IHNlbGYuaW5ncmVkaWVudHM7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuXHJcbiAgICAgICAgc2VsZi5hZGRJbmcgPSBmdW5jdGlvbiAoaW5nKSB7XHJcbiAgICAgICAgICAgIHNlbGYuc2V0VmFsaWQodHJ1ZSk7XHJcbiAgICAgICAgICAgIHNlbGYuaW5nTGlzdC5wdXNoKGluZyk7XHJcbiAgICAgICAgICAgIHNlbGYubmV3SW5nRm9ybVNob3duID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHNlbGYucmVzZXRUb0NvbGxhcHNlZCA9ICFzZWxmLnJlc2V0VG9Db2xsYXBzZWQ7XHJcbiAgICAgICAgICAgIHNlbGYub25VcGRhdGUoe2xpc3Q6c2VsZi5pbmdMaXN0fSk7XHJcbiAgICAgICAgICAgIHNldFJlY29yZCgtMSk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgc2VsZi51cGRhdGVJbmcgPSBmdW5jdGlvbiAoaWR4LCBpbmcpIHtcclxuICAgICAgICAgICAgc2VsZi5pbmdMaXN0W2lkeF0gPSBhbmd1bGFyLmNvcHkoaW5nKTtcclxuICAgICAgICAgICAgc2VsZi5vblVwZGF0ZSh7bGlzdDpzZWxmLmluZ0xpc3R9KTtcclxuICAgICAgICAgICAgc2VsZi5zZXRWYWxpZCh0cnVlKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBzZWxmLmRlbGV0ZUluZyA9IGZ1bmN0aW9uIChpZHgpIHtcclxuICAgICAgICAgICAgc2VsZi5pbmdMaXN0LnNwbGljZShpZHgsIDEpO1xyXG4gICAgICAgICAgICBzZWxmLm9uVXBkYXRlKHtsaXN0OnNlbGYuaW5nTGlzdH0pO1xyXG4gICAgICAgICAgICBzZWxmLnNldFZhbGlkKHRydWUpO1xyXG4gICAgICAgICAgICBzZXRSZWNvcmQoLTEpO1xyXG4gICAgICAgICAgICBzZWxmLnJlc2V0VG9Db2xsYXBzZWQgPSAhc2VsZi5yZXNldFRvQ29sbGFwc2VkO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIHNldHMgdGhlIHJlY29yZCBpbiB0aGUgZXhwYW5kaW5nIHRhYmxlIHRvIHNlbGVjdCBsZXNzIHRoYW4gemVybyBtZWFucyBub25lXHJcbiAgICAgICAgICogQHBhcmFtIHZhbHVlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZnVuY3Rpb24gc2V0UmVjb3JkKHZhbHVlKXtcclxuICAgICAgICAgICAgc2VsZi5zZWxlY3RSZWNvcmQgPSB2YWx1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEZsYWcgc2V0IHRvIGluZGljYXRlIGlmIHRoZSByZWNvcmQgZGV0YWlscyBhcmUgaW4gYSB2YWxpZCBzdGF0ZVxyXG4gICAgICAgICAqIEBwYXJhbSB2YWx1ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHNlbGYuc2V0VmFsaWQ9ZnVuY3Rpb24odmFsdWUpe1xyXG4gICAgICAgICAgICBzZWxmLmlzRGV0YWlsVmFsaWQ9dmFsdWU7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBDb250cm9scyB0aGUgc3RhdGUgb2YgdGhlIGFkZCBuZXcgaW5ncmVkaWVudCBidXR0b25cclxuICAgICAgICAgKiBAcmV0dXJucyB7Knxib29sZWFufVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHNlbGYuYWRkTmV3RGlzYWJsZWQ9ZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgcmV0dXJuIChzZWxmLm5ld0luZ0Zvcm1TaG93biB8fCAhc2VsZi5pc0RldGFpbFZhbGlkKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFNldHMgdGhlIFVJIHN0YXRlIGZvciB0aGUgYWRkIG5ldyB0ZW1wbGF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHNlbGYuYWRkTmV3SW5ncmVkaWVudFN0YXRlPWZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgIHNlbGYucmVzZXRUb0NvbGxhcHNlZCA9ICFzZWxmLnJlc2V0VG9Db2xsYXBzZWQ7XHJcbiAgICAgICAgICAgIHNlbGYubmV3SW5nRm9ybVNob3duID0gdHJ1ZTtcclxuICAgICAgICAgICAgc2VsZi5zZXRWYWxpZChmYWxzZSk7XHJcbiAgICAgICAgICAgIHJldHVybihzZWxmLm5ld0luZ0Zvcm1TaG93bik7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBXaGVuIG5ldyByZWNvcmQgaXMgY2FuY2VsbGVkLCByZXNldHMgdGhlIHN0YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgc2VsZi5vbk5ld0NhbmNlbD1mdW5jdGlvbigpe1xyXG4gICAgICAgICAgICBzZWxmLnNldFZhbGlkKHRydWUpO1xyXG4gICAgICAgICAgICBzZWxmLm5ld0luZ0Zvcm1TaG93biA9IGZhbHNlXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59KSgpO1xyXG4iLCIvKipcclxuICogQ3JlYXRlZCBieSBka2lsdHkgMTAvMjYvMjAxNlxyXG4gKi9cclxuXHJcbihmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ3RoZXJhQ2xhc3MnLFsndGhlcmFDbGFzc1JlY29yZCddKVxyXG59KSgpO1xyXG5cclxuKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgndGhlcmFDbGFzcycpXHJcbiAgICAgICAgLmNvbXBvbmVudCgnY21wVGhlcmFMaXN0Jywge1xyXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2FwcC9zY3JpcHRzL2NvbXBvbmVudHMvdGhlcmFwZXV0aWMtY2xhc3NpZmljYXRpb24vdHBsLXRoZXJhLWxpc3RfMjAxNzAyMDNfMTUwMi5odG1sJyxcclxuICAgICAgICAgICAgYmluZGluZ3M6IHtcclxuICAgICAgICAgICAgICAgIHJlY29yZHM6ICc8JyxcclxuICAgICAgICAgICAgICAgIHNob3dFcnJvcnM6ICcmJ1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBjb250cm9sbGVyOiB0aGVyYUxpc3RDdHJsLFxyXG4gICAgICAgICAgICBjb250cm9sbGVyQXM6ICd0aGVyYUN0cmwnXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgdGhlcmFMaXN0Q3RybC4kaW5qZWN0ID0gW1wiJGZpbHRlclwiXTtcclxuXHJcbiAgICBmdW5jdGlvbiB0aGVyYUxpc3RDdHJsKCRmaWx0ZXIpIHtcclxuXHJcbiAgICAgICAgdmFyIHZtID0gdGhpcztcclxuICAgICAgICB2bS5zZWxlY3RSZWNvcmQgPSAtMTsgLy90aGUgcmVjb3JkIHRvIHNlbGVjdCwgaW5pdGlhbGx5IHNlbGVjdCBub25cclxuICAgICAgICB2bS5pc0RldGFpbFZhbGlkID0gdHJ1ZTsgLy91c2VkIHRvIHRyYWNrIGlmIGRldGFpbHMgdmFsaWQuIElmIHRoZXkgYXJlICBub3QgZG8gbm90IGFsbG93IGV4cGFuZGVyIGNvbGxhcHNlXHJcbiAgICAgICAgdm0ucmVzZXRUb0NvbGxhcHNlZCA9IHRydWU7XHJcbiAgICAgICAgdm0ub25lUmVjb3JkPVwiXCI7XHJcbiAgICAgICAgdm0ubW9kZWw9e307XHJcbiAgICAgICAgdm0ubW9kZWwudGhlcmFMaXN0PVtdO1xyXG4gICAgICAgIHZtLmNvbHVtbkRlZiA9IFtcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbGFiZWw6IFwiVEhFUkFfQ0xBU1NfTkFNRVwiLFxyXG4gICAgICAgICAgICAgICAgYmluZGluZzogXCJuYW1lXCIsXHJcbiAgICAgICAgICAgICAgICB3aWR0aDogXCIxMDBcIlxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgXTtcclxuXHJcbiAgICAgICAgdm0uJG9uSW5pdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgLy9sb2NhbCB2YXIgZnJvbSBiaW5kaW5nXHJcbiAgICAgICAgICAgIC8vIHZtLmxpZmVjeWNsZUxpc3QgPSB2bS5yZWNvcmRzO1xyXG5cclxuICAgICAgICB9O1xyXG5cclxuXHJcbiAgICAgICAgdm0uJG9uQ2hhbmdlcyA9IGZ1bmN0aW9uIChjaGFuZ2VzKSB7XHJcblxyXG4gICAgICAgICAgICBpZiAoY2hhbmdlcy5yZWNvcmRzKSB7XHJcbiAgICAgICAgICAgICAgICB2bS5tb2RlbC50aGVyYUxpc3Q9Y2hhbmdlcy5yZWNvcmRzLmN1cnJlbnRWYWx1ZTtcclxuXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIEBuZ2RvYyBtZXRob2QgZGV0ZXJtaW5lcyB0aGUgc3RhdGUgb2YgdGhlIGxpc3QgZXJyb3JzXHJcbiAgICAgICAgICAgICAqXHJcbiAgICAgICAgICAgICAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgdm0uc2hvd0Vycm9yID0gZnVuY3Rpb24gKGlzVG91Y2hlZCwgaXNJbnZhbGlkKSB7XHJcblxyXG4gICAgICAgICAgICAgICAvLyBpZiAoKHZtLmlzUGFyZW50RGlydHkgJiYgaXNJbnZhbGlkKSB8fCAodm0uc2hvd0Vycm9ycygpICYmIGlzSW52YWxpZCkpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgLy8gfVxyXG4gICAgICAgICAgICAgICAvLyByZXR1cm4gZmFsc2VcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdm0uc2V0VmFsaWQ9ZnVuY3Rpb24odmFsdWUpe1xyXG4gICAgICAgICAgICB2bS5pc0RldGFpbFZhbGlkID0gdmFsdWU7XHJcbiAgICAgICAgfTtcclxuICAgICAgICB2bS5hZGROZXcgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgdmFyIG1heElEID0gZ2V0TWF4SUQoKTtcclxuICAgICAgICAgICAgdmFyIGl0ZW0gPSB7XCJpZFwiOiBtYXhJRCArIDEsIFwibmFtZVwiOiBcIlwifTtcclxuICAgICAgICAgICAgdm0ubW9kZWwudGhlcmFMaXN0LnB1c2goaXRlbSk7XHJcbiAgICAgICAgICAgIHZtLnJlc2V0VG9Db2xsYXBzZWQ9ICF2bS5yZXNldFRvQ29sbGFwc2VkO1xyXG4gICAgICAgICAgICB2bS5zZWxlY3RSZWNvcmQ9KDApO1xyXG4gICAgICAgICAgICB2bS5zZWxlY3RSZWNvcmQ9KHZtLm1vZGVsLnRoZXJhTGlzdC5sZW5ndGgtMSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICB2bS5kZWxldGVSZWNvcmQ9ZnVuY3Rpb24ocmVjSWQpe1xyXG5cclxuICAgICAgICAgICAgdmFyIGlkeCA9IHZtLm1vZGVsLnRoZXJhTGlzdC5pbmRleE9mKFxyXG4gICAgICAgICAgICAgICAgJGZpbHRlcignZmlsdGVyJykodm0ubW9kZWwudGhlcmFMaXN0LCB7aWQ6IHJlY0lkfSwgdHJ1ZSlbMF0pO1xyXG4gICAgICAgICAgICB2bS5tb2RlbC50aGVyYUxpc3Quc3BsaWNlKGlkeCwgMSk7XHJcbiAgICAgICAgfTtcclxuXHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGdldE1heElEKCl7XHJcbiAgICAgICAgICAgIHZhciBpZD0wO1xyXG4gICAgICAgICAgICBmb3IodmFyIGk9MDtpPHZtLm1vZGVsLnRoZXJhTGlzdC5sZW5ndGg7aSsrKXtcclxuICAgICAgICAgICAgICAgIGlmKHZtLm1vZGVsLnRoZXJhTGlzdFtpXS5pZD5pZCl7XHJcbiAgICAgICAgICAgICAgICAgICAgaWQ9dm0ubW9kZWwudGhlcmFMaXN0W2ldLmlkO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybihpZCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB9XHJcbn0pKCk7IiwiLyoqXHJcbiAqIENyZWF0ZWQgYnkgaGN1c2VyIG9uIDI3LzEwLzIwMTYuXHJcbiAqL1xyXG5cclxuKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgndGhlcmFDbGFzc1JlY29yZCcsIFtdKVxyXG59KSgpO1xyXG5cclxuKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgndGhlcmFDbGFzcycpXHJcbiAgICAgICAgLmNvbXBvbmVudCgnY21wVGhlcmFSZWNvcmQnLCB7XHJcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnYXBwL3NjcmlwdHMvY29tcG9uZW50cy90aGVyYXBldXRpYy1jbGFzc2lmaWNhdGlvbi90cGwtdGhlcmEtcmVjb3JkXzIwMTcwMjAzXzE1MDIuaHRtbCcsXHJcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6IHRoZXJhcGV1dGljQ2xhc3NDdHJsLFxyXG4gICAgICAgICAgICBjb250cm9sbGVyQXM6J3RoZXJhUmVjQ3RybCcsXHJcbiAgICAgICAgICAgIGJpbmRpbmdzOiB7XHJcbiAgICAgICAgICAgICAgICByZWNvcmQ6ICc8JyxcclxuICAgICAgICAgICAgICAgIG9uRGVsZXRlOiAnJicsXHJcbiAgICAgICAgICAgICAgICBzaG93RXJyb3JzOiAnJidcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuXHJcbiAgICBmdW5jdGlvbiB0aGVyYXBldXRpY0NsYXNzQ3RybCgpe1xyXG4gICAgICAgIHZhciB2bSA9IHRoaXM7XHJcblxyXG4gICAgICAgIHZtLm1vZGVsID0ge307XHJcblxyXG4gICAgICAgIHZtLiRvbkluaXQgPSBmdW5jdGlvbigpe1xyXG5cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2bS4kb25DaGFuZ2VzID0gZnVuY3Rpb24gKGNoYW5nZXMpIHtcclxuXHJcbiAgICAgICAgICAgIGlmIChjaGFuZ2VzLnJlY29yZCkge1xyXG4gICAgICAgICAgICAgICAgdm0ubW9kZWw9Y2hhbmdlcy5yZWNvcmQuY3VycmVudFZhbHVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcblxyXG4gICAgICAgIHZtLmRlbGV0ZVJlY29yZCA9IGZ1bmN0aW9uKCkgIHtcclxuICAgICAgICAgICAgdm0ub25EZWxldGUoe2lkOiB2bS5tb2RlbC5pZH0pXHJcbiAgICAgICAgfTtcclxuXHJcblxyXG4gICAgICAgIHZtLnNob3dFcnJvciA9IGZ1bmN0aW9uIChpc0ludmFsaWQsIGlzVG91Y2hlZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gKChpc0ludmFsaWQgJiYgaXNUb3VjaGVkKSB8fCAoaXNJbnZhbGlkICYmIHZtLnNob3dFcnJvcnMoKSkgKVxyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgfVxyXG59KSgpOyIsIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IEFiZGVzc2FtYWQgb24gNy8yNC8yMDE2LlxyXG4gKi9cclxuXHJcbihmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcbiAgICBhbmd1bGFyLm1vZHVsZSgndGFiTW9kdWxlJywgWyd0YWJzTW9kdWxlJ10pO1xyXG59KSgpO1xyXG4oZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ3RhYk1vZHVsZScpXHJcbiAgICAgICAgLmNvbXBvbmVudCgnY21wVGFiJywge1xyXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2FwcC9zY3JpcHRzL2NvbXBvbmVudHMvdGFicy90cGwtdGFiXzIwMTcwMjAzXzE1MDIuaHRtbCcsXHJcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6IHRhYkN0cmwsXHJcbiAgICAgICAgICAgIGNvbnRyb2xsZXJBczogJ3RhYkN0cmwnLFxyXG4gICAgICAgICAgICBiaW5kaW5nczoge1xyXG4gICAgICAgICAgICAgICAgdGl0bGU6ICdAJ1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICByZXF1aXJlOiB7XHJcbiAgICAgICAgICAgICAgICB0YWJzOiAnXl5jbXBUYWJzJ1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB0cmFuc2NsdWRlOiB0cnVlXHJcblxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgIGZ1bmN0aW9uIHRhYkN0cmwoKSB7XHJcblxyXG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcclxuXHJcbiAgICAgICAgc2VsZi4kb25Jbml0ID0gZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgc2VsZi50YWIgPSB7XHJcbiAgICAgICAgICAgICAgICB0aXRsZSA6IHNlbGYudGl0bGUsXHJcbiAgICAgICAgICAgICAgICBzZWxlY3RlZCA6IGZhbHNlXHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICBzZWxmLnRhYnMuYWRkVGFiKHNlbGYudGFiKTtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgIH1cclxuXHJcbn0pKCk7XHJcbiIsIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IEFiZGVzc2FtYWQgb24gNy8yNC8yMDE2LlxyXG4gKi9cclxuKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcblxyXG4gICAgLy9UT0RPOiBMYXp5IGxvYWQgbW9kdWxlc1xyXG4gICAgYW5ndWxhci5tb2R1bGUoJ3RhYnNNb2R1bGUnLCBbJ2Zvcm11bGF0aW9uc01vZHVsZScsICdhcHBlbmRpeEZvdXJNb2R1bGUnXSk7XHJcbn0pKCk7XHJcblxyXG4oZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG4gICAgYW5ndWxhci5tb2R1bGUoJ3RhYnNNb2R1bGUnKS5jb21wb25lbnQoJ2NtcFRhYnMnLCB7XHJcbiAgICAgICAgdGVtcGxhdGVVcmw6ICdhcHAvc2NyaXB0cy9jb21wb25lbnRzL3RhYnMvdHBsLXRhYnNfMjAxNzAyMDNfMTUwMi5odG1sJyxcclxuICAgICAgICBjb250cm9sbGVyOiB0YWJzQ3RybCxcclxuICAgICAgICBjb250cm9sbGVyQXM6ICd0YWJzQ3RybCcsXHJcbiAgICAgICAgYmluZGluZ3M6IHtcclxuICAgICAgICAgICAgZm9ybXVsYXRpb25MaXN0IDogJzwnLFxyXG4gICAgICAgICAgICBhcHBlbmRpeDRMaXN0IDogJzwnLFxyXG4gICAgICAgICAgICByZWNvcmRDaGFuZ2VkOiAnJicsXHJcbiAgICAgICAgICAgIHNlcnZpY2U6ICc8J1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIHRhYnNDdHJsLiRpbmplY3QgPSBbJyRzY29wZSddO1xyXG5cclxuXHJcbiAgICBmdW5jdGlvbiB0YWJzQ3RybCgkc2NvcGUpIHtcclxuXHJcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG4gICAgICAgIHNlbGYudGFicyA9IFtcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbGFiZWw6IFwiRk9STVVMQVRJT05TXCIsXHJcbiAgICAgICAgICAgICAgICBzZWxlY3RlZDogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIGRpc2FibGVkOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIGVycm9yczogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIGZvcm06IHt9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGxhYmVsOiBcIkFQUEVORElYNFwiLFxyXG4gICAgICAgICAgICAgICAgc2VsZWN0ZWQ6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgZGlzYWJsZWQ6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgZXJyb3JzOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIGZvcm06IHt9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICBdO1xyXG4gICAgICAgIHNlbGYuJG9uSW5pdCA9IGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgICAgIC8vY29uc29sZS5sb2coc2VsZi50YWJzWzBdLmZvcm0uJGludmFsaWQpXHJcbiAgICAgICAgfTtcclxuICAgICAgICBzZWxmLiRvbkNoYW5nZXMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIC8qICBpZihjaGFuZ2VzLnNlcnZpY2Upe1xyXG5cclxuICAgICAgICAgICAgIHNlbGYuZG9zU2VydmljZT1jaGFuZ2VzLnNlcnZpY2UuY3VycmVudFZhbHVlO1xyXG4gICAgICAgICAgICAgfSovXHJcblxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHNlbGYuc2VsZWN0VGFiID0gZnVuY3Rpb24gKGlkeCkge1xyXG5cclxuICAgICAgICAgICAgLyogIGFuZ3VsYXIuZm9yRWFjaChzZWxmLnRhYnMsIGZ1bmN0aW9uICh0YWIpIHtcclxuICAgICAgICAgICAgICAgICAgICB0YWIuc2VsZWN0ZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgIHRhYi5lcnJvcnM9dGFiLmZvcm0uJGludmFsaWQ7XHJcbiAgICAgICAgICAgICB9KTsqL1xyXG5cclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWxmLnRhYnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHNlbGYudGFic1tpXS5zZWxlY3RlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgaWYgKGlkeCAhPT0gaSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYudGFic1tpXS5lcnJvcnMgPSBzZWxmLnRhYnNbaV0uZm9ybS4kaW52YWxpZDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHNlbGYudGFic1tpZHhdLnNlbGVjdGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgLy9zZWxmLnRhYnNbaWR4XS5lcnJvcnM9IHNlbGYudGFic1tpZHhdLmZvcm0uJGludmFsaWRcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxufSkoKTtcclxuIiwiLyoqXHJcbiAqIENyZWF0ZWQgYnkgQWJkZXNzYW1hZCBvbiA4LzE3LzIwMTYuXHJcbiAqL1xyXG5cclxuKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgnc2NoZWR1bGVBTW9kdWxlJywgWydjaGVja0JveExpc3RNb2R1bGUnXSlcclxufSkoKTtcclxuXHJcblxyXG4oZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKCdzY2hlZHVsZUFNb2R1bGUnKVxyXG4gICAgICAgIC5jb21wb25lbnQoJ2NtcFNjaGVkdWxlQScsIHtcclxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdhcHAvc2NyaXB0cy9jb21wb25lbnRzL3NjaGVkdWxlLWEvdHBsLXNjaGVkdWxlLWFfMjAxNzAyMDNfMTUwMi5odG1sJyxcclxuICAgICAgICAgICAgY29udHJvbGxlcjogc2NoZWR1bGVBQ3RybCxcclxuICAgICAgICAgICAgYmluZGluZ3M6IHtcclxuICAgICAgICAgICAgICAgIHNjaGVkdWxlR3JvdXA6ICc8JyxcclxuICAgICAgICAgICAgICAgIG9uVXBkYXRlOiAnJicsXHJcbiAgICAgICAgICAgICAgICBvbkRlbGV0ZTogJyYnLFxyXG4gICAgICAgICAgICAgICAgc2hvd0Vycm9yczogJyYnXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfSk7XHJcbiAgICBzY2hlZHVsZUFDdHJsLiRpbmplY3Q9Wyckc2NvcGUnXTtcclxuXHJcbiAgICBmdW5jdGlvbiBzY2hlZHVsZUFDdHJsKCRzY29wZSkge1xyXG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcclxuICAgICAgICBzZWxmLmlzQ2xhaW09XCJcIjtcclxuICAgICAgICBzZWxmLmV4cGFuZGVyT3BlblN0YXRlPWZhbHNlO1xyXG4gICAgICAgIHNlbGYuZGlzYWJsZUV4cGFuZGVyPWZhbHNlO1xyXG4gICAgICAgIHNlbGYuJG9uSW5pdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIG5vVmFsdWU9ZmFsc2U7XHJcbiAgICAgICAgICAgIGlmICghc2VsZi5zY2hlZHVsZUFNb2RlbCkge1xyXG4gICAgICAgICAgICAgICAgc2VsZi5zY2hlZHVsZUFNb2RlbCA9IHtcclxuICAgICAgICAgICAgICAgICAgICBkcnVnSWROdW1iZXI6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgc2NoZWR1bGVBQ2xhaW1zSW5kRGV0YWlsczogXCJcIixcclxuICAgICAgICAgICAgICAgICAgICBkaXNlYXNlRGlzb3JkZXJMaXN0OiBbXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7bmFtZTogXCJhY3V0ZS1hbGNvaG9sXCIsIGxhYmVsOiBcIkFDVVRFQUxDT0hPTFwiLCB2YWx1ZTpub1ZhbHVlIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtuYW1lOiBcImFjdXRlLWFueGlldHlcIiwgbGFiZWw6IFwiQUNVVEVBTlhJRVRZXCIsIHZhbHVlOiBub1ZhbHVlIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtuYW1lOiBcImFjdXRlLWluZmVjdGlvdXNcIiwgbGFiZWw6IFwiQUNVVEVSRVNQXCIsIHZhbHVlOiBub1ZhbHVlfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAge25hbWU6IFwiYWN1dGUtaW5mbGFtbWF0b3J5XCIsIGxhYmVsOiBcIkFDVVRFSU5GTEFNXCIsIHZhbHVlOiBub1ZhbHVlIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtuYW1lOiBcImFjdXRlLXBzeWNob3RpY1wiLCBsYWJlbDogXCJBQ1VURVBTWUNIT1RJQ1wiLCB2YWx1ZTogbm9WYWx1ZSB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7bmFtZTogXCJhZGRpY3Rpb25cIiwgbGFiZWw6IFwiQURESUNUSU9OXCIsIHZhbHVlOiBub1ZhbHVlfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAge25hbWU6IFwiYXRlcmlvc2NsZXJvc2lzXCIsIGxhYmVsOiBcIkFURVJJT1NDTEVST1NJU1wiLCB2YWx1ZTogbm9WYWx1ZSB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7bmFtZTogXCJhcHBlbmRpY2l0aXNcIiwgbGFiZWw6IFwiQVBQRU5ESUNJVElTXCIsIHZhbHVlOiBub1ZhbHVlfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAge25hbWU6IFwiYXN0aG1hXCIsIGxhYmVsOiBcIkFTVEhNQVwiLCB2YWx1ZTogbm9WYWx1ZX0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtuYW1lOiBcImNhbmNlclwiLCBsYWJlbDogXCJDQU5DRVJcIiwgdmFsdWU6IG5vVmFsdWV9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7bmFtZTogXCJjb25nZXN0LWhlYXJ0LWZhaWxcIiwgbGFiZWw6IFwiSEVBUlRDT05HRVNUXCIsIHZhbHVlOm5vVmFsdWV9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7bmFtZTogXCJjb252dWxzaW9uc1wiLCBsYWJlbDogXCJDT05WVUxTSU9OU1wiLCB2YWx1ZTogbm9WYWx1ZSB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7bmFtZTogXCJkZW1lbnRpYVwiLCBsYWJlbDogXCJERU1FTlRJQVwiLCB2YWx1ZTogbm9WYWx1ZSB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7bmFtZTogXCJkZXByZXNzaW9uXCIsIGxhYmVsOiBcIkRFUFJFU1NJT05cIiwgdmFsdWU6IG5vVmFsdWV9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7bmFtZTogXCJkaWFiZXRlc1wiLCBsYWJlbDogXCJESUFCRVRFU1wiLCB2YWx1ZTogbm9WYWx1ZX0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtuYW1lOiBcImdhbmdyZW5lXCIsIGxhYmVsOiBcIkdBTkdSRU5FXCIsIHZhbHVlOiBub1ZhbHVlIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtuYW1lOiBcImdsYXVjb21hXCIsIGxhYmVsOiBcIkdMQVVDT01BXCIsIHZhbHVlOiBub1ZhbHVlfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAge25hbWU6IFwiaGFlbWF0b2xvZ2ljLWJsZWVkaW5nXCIsIGxhYmVsOiBcIkJMRUVESU5HRElTT1JERVJTXCIsIHZhbHVlOiBub1ZhbHVlfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAge25hbWU6IFwiaGVwYXRpdGlzXCIsIGxhYmVsOiBcIkhFUEFUSVRJU1wiLCB2YWx1ZTogbm9WYWx1ZSB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7bmFtZTogXCJoeXBlcnRlbnNpb25cIiwgbGFiZWw6IFwiSFlQRVJURU5TSU9OXCIsIHZhbHVlOiBub1ZhbHVlIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtuYW1lOiBcIm5hdXNlYS1wcmVnbmFuY3lcIiwgbGFiZWw6IFwiTkFVU0VBUFJFR1wiLCB2YWx1ZTogbm9WYWx1ZSB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7bmFtZTogXCJvYmVzaXR5XCIsIGxhYmVsOiBcIk9CRVNJVFlcIiwgdmFsdWU6IG5vVmFsdWUgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAge25hbWU6IFwicmhldW1hdGljLWZldmVyXCIsIGxhYmVsOiBcIlJIRVVNQVRJQ0ZFVkVSXCIsIHZhbHVlOiBub1ZhbHVlIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtuYW1lOiBcInNlcHRpY2VtaWFcIiwgbGFiZWw6IFwiU0VQVElDRU1JQVwiLCB2YWx1ZTogbm9WYWx1ZX0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtuYW1lOiBcInNleC10cmFuc21pdC1kaXNlYXNlXCIsIGxhYmVsOiBcIlNFWERJU0VBU0VcIiwgdmFsdWU6IG5vVmFsdWV9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7bmFtZTogXCJzdHJhbmd1bGF0ZWQtaGVybmlhXCIsIGxhYmVsOiBcIlNUUkFOR0hFUk5JQVwiLCB2YWx1ZTogbm9WYWx1ZX0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtuYW1lOiBcInRocm9tYm90aWMtZW1ib2xpYy1kaXNvcmRlclwiLCBsYWJlbDogXCJUSFJPTUJPVElDRElTT1JERVJcIiwgdmFsdWU6IG5vVmFsdWUgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAge25hbWU6IFwidGh5cm9pZC1kaXNlYXNlXCIsIGxhYmVsOiBcIlRIWVJPSURESVNFQVNFXCIsIHZhbHVlOiBub1ZhbHVlfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAge25hbWU6IFwidWxjZXItZ2FzdHJvXCIsIGxhYmVsOiBcIlVDTEVSR0FTVFJPXCIsIHZhbHVlOiBub1ZhbHVlfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBdXHJcblxyXG5cclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFVwZGF0ZXMgdGhlIGJpbmRpbmdzXHJcbiAgICAgICAgICogQHBhcmFtIGNoYW5nZXNcclxuICAgICAgICAgKi9cclxuICAgICAgICBzZWxmLiRvbkNoYW5nZXM9ZnVuY3Rpb24oY2hhbmdlcyl7XHJcbiAgICAgICAgICAgIGlmKGNoYW5nZXMuc2NoZWR1bGVHcm91cCl7XHJcbiAgICAgICAgICAgICAgICBzZWxmLnNjaGVkdWxlQU1vZGVsID0gY2hhbmdlcy5zY2hlZHVsZUdyb3VwLmN1cnJlbnRWYWx1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIENoZWNrcyB0byBzZWUgaWYgYXQgbGVhc3Qgb25lIGNsYWltIGhhcyBiZWVuIHNlbGVjdGVkXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgc2VsZi5jbGFpbVNlbGVjdGVkPWZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGk9MDtpPHNlbGYuc2NoZWR1bGVBTW9kZWwuZGlzZWFzZURpc29yZGVyTGlzdC5sZW5ndGg7aSsrKXtcclxuICAgICAgICAgICAgICAgIGlmKHNlbGYuc2NoZWR1bGVBTW9kZWwuZGlzZWFzZURpc29yZGVyTGlzdFtpXS52YWx1ZSl7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5pc0NsYWltPVwic2VsZWN0ZWRcIjsvL2dpdmUgbWFuZCBmaWVsZCBhIHZhbHVlXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgc2VsZi5pc0NsYWltPVwiXCI7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHNlbGYubm9DbGFpbVNlbGVjdGVkPWZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgIHJldHVybighc2VsZi5jbGFpbVNlbGVjdGVkKCkpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgc2VsZi5zaG93RXJyb3IgPSBmdW5jdGlvbiAoaXNJbnZhbGlkLCBpc1RvdWNoZWQpIHtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiAoKGlzSW52YWxpZCAmJiBpc1RvdWNoZWQpIHx8IChpc0ludmFsaWQgJiYgc2VsZi5zaG93RXJyb3JzKCkpKVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHNlbGYuaXNPcGVuU3RhdGU9ZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgaWYoc2VsZi5zY2hlZEFGb3JtLiRpbnZhbGlkKXtcclxuICAgICAgICAgICAgICAgIHNlbGYuZXhwYW5kZXJPcGVuU3RhdGU9dHJ1ZTtcclxuICAgICAgICAgICAgICAgIHNlbGYuZGlzYWJsZUV4cGFuZGVyPXRydWU7XHJcbiAgICAgICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICAgICAgc2VsZi5kaXNhYmxlRXhwYW5kZXI9ZmFsc2U7XHJcbiAgICAgICAgICAgICAgIC8vIHNlbGYuZXhwYW5kZXJPcGVuU3RhdGU9ICFzZWxmLmV4cGFuZGVyT3BlblN0YXRlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBzZWxmLmV4cGFuZGVyT3BlblN0YXRlO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgICRzY29wZS4kd2F0Y2goXCIkY3RybC5zY2hlZEFGb3JtLiRpbnZhbGlkXCIsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgc2VsZi5pc09wZW5TdGF0ZSgpO1xyXG4gICAgICAgIH0sIHRydWUpO1xyXG5cclxuICAgIH1cclxuXHJcbn0pKCk7IiwiLyoqXHJcbiAqIENyZWF0ZWQgYnkgZGtpbHR5IG9uIDEwLzMxLzIwMTYuXHJcbiAqL1xyXG5cclxuKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgncm9hUmVjb3JkJywgWyd1aS5zZWxlY3QnXSlcclxuXHJcbn0pKCk7XHJcblxyXG4oZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKCdyb2FSZWNvcmQnKVxyXG4gICAgICAgIC5jb25maWcoZnVuY3Rpb24gKHVpU2VsZWN0Q29uZmlnKSB7XHJcbiAgICAgICAgICAgIC8vY2hvaWNlczogc2VsZWN0MiwgYm9vdHN0cmFwLCBzZWxlY3RpemVcclxuICAgICAgICAgICAgdWlTZWxlY3RDb25maWcudGhlbWUgPSAnc2VsZWN0Mic7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAuY29tcG9uZW50KCdjbXBSb2FSZWNvcmQnLCB7XHJcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnYXBwL3NjcmlwdHMvY29tcG9uZW50cy9yb3V0ZS1hZG1pbi90cGwtcm9hLXJlY29yZF8yMDE3MDIwM18xNTAyLmh0bWwnLFxyXG4gICAgICAgICAgICBjb250cm9sbGVyOiByb2FSZWNvcmRDb250cm9sbGVyLFxyXG4gICAgICAgICAgICBjb250cm9sbGVyQXM6J3JvYVJlY0N0cmwnLFxyXG4gICAgICAgICAgICBiaW5kaW5nczoge1xyXG4gICAgICAgICAgICAgICAgcmVjb3JkOiAnPCcsXHJcbiAgICAgICAgICAgICAgICBvbkRlbGV0ZTogJyYnLFxyXG4gICAgICAgICAgICAgICAgc2hvd0Vycm9yczogJyYnXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICByb2FSZWNvcmRDb250cm9sbGVyLiRpbmplY3Q9WydEb3NzaWVyTGlzdHMnLCckdHJhbnNsYXRlJ107XHJcblxyXG4gICAgZnVuY3Rpb24gcm9hUmVjb3JkQ29udHJvbGxlcihEb3NzaWVyTGlzdHMsICR0cmFuc2xhdGUpe1xyXG4gICAgICAgIHZhciB2bSA9IHRoaXM7XHJcbiAgICAgICAgdm0ucm9hTGlzdCA9IERvc3NpZXJMaXN0cy5nZXRSb2EoKTtcclxuICAgICAgICB2bS5tb2RlbCA9IHt9O1xyXG4gICAgICAgIHZtLmxhbmcgPSAkdHJhbnNsYXRlLnByb3Bvc2VkTGFuZ3VhZ2UoKSB8fCAkdHJhbnNsYXRlLnVzZSgpO1xyXG5cclxuICAgICAgICB2bS4kb25Jbml0ID0gZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgaWYoIXZtLmxhbmcpe1xyXG4gICAgICAgICAgICB2bS5sYW5nPSdlbic7IC8vVE9ETyBtYWdpYyBudW1iZXJzXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2bS4kb25DaGFuZ2VzID0gZnVuY3Rpb24gKGNoYW5nZXMpIHtcclxuXHJcbiAgICAgICAgICAgIGlmIChjaGFuZ2VzLnJlY29yZCkge1xyXG4gICAgICAgICAgICAgICAgdm0ubW9kZWw9Y2hhbmdlcy5yZWNvcmQuY3VycmVudFZhbHVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhpcyBpcyBkb25lIHN0cmljdGx5IHRvIHVwZGF0ZSB0aGUgc3VtbWFyeSB0YWJsZS5cclxuICAgICAgICAgKiBAcGFyYW0gaXRlbVxyXG4gICAgICAgICAqIEBwYXJhbSBtb2RlbFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHZtLnJvYUNoYW5nZWQ9ZnVuY3Rpb24oaXRlbSwgbW9kZWwpe1xyXG4gICAgICAgICAgICB2bS5tb2RlbC5kaXNwbGF5PXZtLm1vZGVsLnJvYS5pZDtcclxuICAgICAgICB9O1xyXG5cclxuXHJcbiAgICAgICAgdm0uZGVsZXRlUmVjb3JkID0gZnVuY3Rpb24oKSAge1xyXG4gICAgICAgICAgICB2bS5vbkRlbGV0ZSh7aWQ6IHZtLm1vZGVsLmlkfSlcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2bS5zaG93RXJyb3IgPSBmdW5jdGlvbiAoaXNJbnZhbGlkLCBpc1RvdWNoZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuICgoaXNJbnZhbGlkICYmIGlzVG91Y2hlZCkgfHwgKGlzSW52YWxpZCAmJiB2bS5zaG93RXJyb3JzKCkpIClcclxuICAgICAgICB9O1xyXG4gICAgICAgIHZtLmlzUm9hT3RoZXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgaWYodm0ubW9kZWwucm9hLmlkPT1Eb3NzaWVyTGlzdHMuZ2V0T3RoZXJWYWx1ZSgpKXtcclxuICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgICAgIHZtLm1vZGVsLm90aGVyUm9hRGV0YWlscz1cIlwiO1xyXG4gICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgfVxyXG59KSgpOyIsIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IGRraWx0eSBvbiAxMC8zMS8yMDE2LlxyXG4gKi9cclxuXHJcbihmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ3JvYUxpc3RNb2R1bGUnLFsncm9hUmVjb3JkJ10pXHJcbn0pKCk7XHJcblxyXG4oZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKCdyb2FMaXN0TW9kdWxlJylcclxuICAgICAgICAuY29tcG9uZW50KCdjbXBSb2FMaXN0Jywge1xyXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2FwcC9zY3JpcHRzL2NvbXBvbmVudHMvcm91dGUtYWRtaW4vdHBsLXJvYS1saXN0XzIwMTcwMjAzXzE1MDIuaHRtbCcsXHJcbiAgICAgICAgICAgIGJpbmRpbmdzOiB7XHJcbiAgICAgICAgICAgICAgICByZWNvcmRzOiAnPCcsXHJcbiAgICAgICAgICAgICAgICBzaG93RXJyb3JzOiAnJidcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgY29udHJvbGxlcjogcm9hTGlzdEN0cmwsXHJcbiAgICAgICAgICAgIGNvbnRyb2xsZXJBczogJ3JvYUN0cmwnXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgcm9hTGlzdEN0cmwuJGluamVjdCA9IFtcIiRmaWx0ZXJcIl07XHJcblxyXG4gICAgZnVuY3Rpb24gcm9hTGlzdEN0cmwoJGZpbHRlcikge1xyXG5cclxuICAgICAgICB2YXIgdm0gPSB0aGlzO1xyXG4gICAgICAgIHZtLnNlbGVjdFJlY29yZCA9IC0xOyAvL3RoZSByZWNvcmQgdG8gc2VsZWN0LCBpbml0aWFsbHkgc2VsZWN0IG5vblxyXG4gICAgICAgIHZtLmlzRGV0YWlsVmFsaWQgPSB0cnVlOyAvL3VzZWQgdG8gdHJhY2sgaWYgZGV0YWlscyB2YWxpZC4gSWYgdGhleSBhcmUgIG5vdCBkbyBub3QgYWxsb3cgZXhwYW5kZXIgY29sbGFwc2VcclxuICAgICAgICB2bS5yZXNldFRvQ29sbGFwc2VkID0gdHJ1ZTtcclxuICAgICAgICB2bS5vbmVSZWNvcmQ9XCJcIjtcclxuICAgICAgICB2bS5tb2RlbD17fTtcclxuICAgICAgICB2bS5tb2RlbC5yb2FMaXN0PVtdO1xyXG4gICAgICAgIHZtLmNvbHVtbkRlZiA9IFtcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbGFiZWw6IFwiUk9BX0xCTFwiLFxyXG4gICAgICAgICAgICAgICAgYmluZGluZzogXCJkaXNwbGF5XCIsXHJcbiAgICAgICAgICAgICAgICB3aWR0aDogXCI0MFwiXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGxhYmVsOiBcIk9USEVSX1JPQV9ERVRBSUxTXCIsXHJcbiAgICAgICAgICAgICAgICBiaW5kaW5nOiBcIm90aGVyUm9hRGV0YWlsc1wiLFxyXG4gICAgICAgICAgICAgICAgd2lkdGg6IFwiNjBcIlxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgXTtcclxuXHJcbiAgICAgICAgdm0uJG9uSW5pdCA9IGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgfTtcclxuXHJcblxyXG4gICAgICAgIHZtLiRvbkNoYW5nZXMgPSBmdW5jdGlvbiAoY2hhbmdlcykge1xyXG5cclxuICAgICAgICAgICAgaWYgKGNoYW5nZXMucmVjb3Jkcykge1xyXG4gICAgICAgICAgICAgICAgdm0ubW9kZWwucm9hTGlzdD1jaGFuZ2VzLnJlY29yZHMuY3VycmVudFZhbHVlO1xyXG5cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG5cclxuICAgICAgICB2bS5zZXRWYWxpZD1mdW5jdGlvbih2YWx1ZSl7XHJcbiAgICAgICAgICAgIHZtLmlzRGV0YWlsVmFsaWQgPSB2YWx1ZTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHZtLmFkZE5ldyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICB2YXIgbWF4SUQgPSBnZXRNYXhJRCgpO1xyXG4gICAgICAgICAgICB2YXIgaXRlbSA9IHtcImlkXCI6IG1heElEICsgMSwgXCJyb2FcIjoge2lkOlwiXCIsbGFiZWxfZW46XCJcIixsYWJlbF9mcjpcIlwifSwgJ290aGVyUm9hRGV0YWlscyc6IFwiXCIsZGlzcGxheTpcIlwifTtcclxuICAgICAgICAgICAgdm0ubW9kZWwucm9hTGlzdC5wdXNoKGl0ZW0pO1xyXG4gICAgICAgICAgICB2bS5yZXNldFRvQ29sbGFwc2VkPSAhdm0ucmVzZXRUb0NvbGxhcHNlZDtcclxuICAgICAgICAgICAgdm0uc2VsZWN0UmVjb3JkPSgwKTtcclxuICAgICAgICAgICAgdm0uc2VsZWN0UmVjb3JkPSh2bS5tb2RlbC5yb2FMaXN0Lmxlbmd0aC0xKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2bS5kZWxldGVSZWNvcmQ9ZnVuY3Rpb24ocmVjSWQpe1xyXG5cclxuICAgICAgICAgICAgdmFyIGlkeCA9IHZtLm1vZGVsLnJvYUxpc3QuaW5kZXhPZihcclxuICAgICAgICAgICAgICAgICRmaWx0ZXIoJ2ZpbHRlcicpKHZtLm1vZGVsLnJvYUxpc3QsIHtpZDogcmVjSWR9LCB0cnVlKVswXSk7XHJcbiAgICAgICAgICAgIHZtLm1vZGVsLnJvYUxpc3Quc3BsaWNlKGlkeCwgMSk7XHJcbiAgICAgICAgfTtcclxuXHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGdldE1heElEKCl7XHJcbiAgICAgICAgICAgIHZhciBpZD0wO1xyXG4gICAgICAgICAgICBmb3IodmFyIGk9MDtpPHZtLm1vZGVsLnJvYUxpc3QubGVuZ3RoO2krKyl7XHJcbiAgICAgICAgICAgICAgICBpZih2bS5tb2RlbC5yb2FMaXN0W2ldLmlkPmlkKXtcclxuICAgICAgICAgICAgICAgICAgICBpZD12bS5tb2RlbC5yb2FMaXN0W2ldLmlkO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybihpZCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgIH1cclxufSkoKTsiLCIvKipcclxuICogQ3JlYXRlZCBieSBBYmRlc3NhbWFkIG9uIDgvMTMvMjAxNi5cclxuICovXHJcblxyXG5cclxuKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgnZHJ1Z1VzZU1vZHVsZScsIFsnY2hlY2tCb3hMaXN0TW9kdWxlJ10pXHJcbn0pKCk7XHJcblxyXG4oZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKCdkcnVnVXNlTW9kdWxlJylcclxuICAgICAgICAuY29tcG9uZW50KCdjbXBEcnVnVXNlJywge1xyXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2FwcC9zY3JpcHRzL2NvbXBvbmVudHMvZHJ1Zy11c2UvdHBsLWRydWctdXNlXzIwMTcwMjAzXzE1MDIuaHRtbCcsXHJcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6IGRydWdVc2VDdHJsLFxyXG4gICAgICAgICAgICBjb250cm9sbGVyQXM6ICdkdUN0cmwnLFxyXG4gICAgICAgICAgICBiaW5kaW5nczoge1xyXG4gICAgICAgICAgICAgICAgbGlzdEl0ZW1zOiAnPCcsIC8vYXJyYXkgb2Ygb2JqZWN0c1xyXG4gICAgICAgICAgICAgICAgc2hvd0xpc3RFcnJvcnM6ICcmJyxcclxuICAgICAgICAgICAgICAgIHBhcmVudERpcnR5OiAnPCdcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgIGZ1bmN0aW9uIGRydWdVc2VDdHJsKCl7XHJcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG5cclxuICAgICAgICBzZWxmLiRvbkluaXQgPSBmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICBzZWxmLmNvbW1vbk5hbWUgPSBcImRydWdVc2VcIjtcclxuICAgICAgICAgICAgc2VsZi5teUxpc3QgPSBbXTtcclxuXHJcbiAgICAgICAgICAgIGlmIChzZWxmLmxpc3RJdGVtcykge1xyXG4gICAgICAgICAgICAgICAgc2VsZi5teUxpc3QgPSBzZWxmLmxpc3RJdGVtcztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG5cclxuICAgICAgICBzZWxmLiRvbkNoYW5nZXMgPSBmdW5jdGlvbiAoY2hhbmdlcykge1xyXG5cclxuICAgICAgICAgICAgaWYgKGNoYW5nZXMubGlzdEl0ZW1zKSB7XHJcbiAgICAgICAgICAgICAgICBzZWxmLm15TGlzdCA9IGNoYW5nZXMubGlzdEl0ZW1zLmN1cnJlbnRWYWx1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHNlbGYuaXNEcnVnVXNlU2VsZWN0ZWQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmICghc2VsZi5teUxpc3QpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VsZi5teUxpc3QubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGlmIChzZWxmLm15TGlzdFtpXS52YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHNlbGYuc2hvd05vUmVjb3JkRXJyb3IgPSBmdW5jdGlvbiAoaXNJbnZhbGlkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAoKHNlbGYucGFyZW50RGlydHkgJiYgIXNlbGYuaXNEcnVnVXNlU2VsZWN0ZWQoKSApIHx8IChzZWxmLnNob3dMaXN0RXJyb3JzKCkgJiYgIXNlbGYuaXNEcnVnVXNlU2VsZWN0ZWQoKSkpO1xyXG4gICAgICAgIH1cclxuXHJcblxyXG5cclxuICAgIH1cclxufSkoKTtcclxuIiwiLyoqXHJcbiAqIENyZWF0ZWQgYnkgQWJkZXNzYW1hZCBvbiA2LzI5LzIwMTYuXHJcbiAqL1xyXG5cclxuXHJcbihmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgdmFyIGRlcGVuZGVuY2llcyA9IFtcclxuICAgICAgICAndGFic01vZHVsZScsXHJcbiAgICAgICAgJ3JlZlByb2R1Y3RMaXN0TW9kdWxlJyxcclxuICAgICAgICAgJ2RydWdVc2VNb2R1bGUnLFxyXG4gICAgICAgICAnc2NoZWR1bGVBTW9kdWxlJyxcclxuICAgICAgICAnZG9zc2llckRhdGFMaXN0cycsXHJcbiAgICAgICAgJ2RhdGFMaXN0cycsXHJcbiAgICAgICAgJ2ZpbHRlckxpc3RzJyxcclxuICAgICAgICAnZmlsZUlPJyxcclxuICAgICAgICAnY29udGFjdE1vZHVsZTI2JyxcclxuICAgICAgICAnYXBwbGljYXRpb25JbmZvU2VydmljZScsXHJcbiAgICAgICAgJ2FwcGxpY2F0aW9uSW5mbycsXHJcbiAgICAgICAgJ3VpLmJvb3RzdHJhcCcsXHJcbiAgICAgICAgJ251bWJlckZvcm1hdCcsXHJcbiAgICAgICAgJ25nTWVzc2FnZXMnLFxyXG4gICAgICAgICduZ0FyaWEnLFxyXG4gICAgICAgICd0aGVyYUNsYXNzJyxcclxuICAgICAgICAnZG9zc2llclNlcnZpY2UnLFxyXG4gICAgICAgICduZ1Nhbml0aXplJ1xyXG4gICAgXTtcclxuXHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgnZG9zc2llck1vZHVsZScsIGRlcGVuZGVuY2llcyk7XHJcbn0pKCk7XHJcblxyXG4oZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ2Rvc3NpZXJNb2R1bGUnKVxyXG4gICAgICAgIC5jb21wb25lbnQoJ2NtcERvc3NpZXInLCB7XHJcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnYXBwL3NjcmlwdHMvY29tcG9uZW50cy9kb3NzaWVyL3RwbC1kb3NzaWVyXzIwMTcwMjAzXzE1MDIuaHRtbCcsXHJcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6IGRvc3NpZXJDdHJsLFxyXG4gICAgICAgICAgICBjb250cm9sbGVyQXM6ICdkb3MnLFxyXG4gICAgICAgICAgICBiaW5kaW5nczoge1xyXG4gICAgICAgICAgICAgICAgZG9zc2llclJlY29yZElucHV0OiAnPCcsXHJcbiAgICAgICAgICAgICAgICBvblVwZGF0ZURvc3NpZXI6ICcmJyxcclxuICAgICAgICAgICAgICAgIG9uRGVsZXRlRG9zc2llcjogJyYnLFxyXG4gICAgICAgICAgICAgICAgZm9ybVR5cGU6ICdAJyxcclxuICAgICAgICAgICAgICAgIHNlcnZpY2U6ICc8J1xyXG4gICAgICAgICAgICAgICAgLy8gc2VsZWN0ZWRDb3VudHJ5Q2hhbmdlZDogJyYnXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICBkb3NzaWVyQ3RybC4kaW5qZWN0ID0gWyckc2NvcGUnLCAnaHBmYkZpbGVQcm9jZXNzaW5nJywgJ0FwcGxpY2F0aW9uSW5mb1NlcnZpY2UnLCAnRG9zc2llclNlcnZpY2UnLCAnRG9zc2llckxpc3RzJywgJ2dldFJvbGVMaXN0cycsICdZRVMnLCdJTlRFUk5BTF9UWVBFJywnRVhURVJOQUxfVFlQRSddO1xyXG5cclxuXHJcbiAgICBmdW5jdGlvbiBkb3NzaWVyQ3RybCgkc2NvcGUsIGhwZmJGaWxlUHJvY2Vzc2luZywgQXBwbGljYXRpb25JbmZvU2VydmljZSwgRG9zc2llclNlcnZpY2UsIERvc3NpZXJMaXN0cywgZ2V0Um9sZUxpc3RzLCBZRVMsSU5URVJOQUxfVFlQRSxFWFRFUk5BTF9UWVBFKSB7XHJcblxyXG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcclxuICAgICAgICBzZWxmLnNob3dDb250ZW50ID0gX2xvYWRGaWxlQ29udGVudDsgLy9iaW5kcyB0aGUgY29tcG9uZW50IHRvIHRoZSBmdW5jdGlvblxyXG4gICAgICAgIHNlbGYuYXBwbGljYXRpb25JbmZvU2VydmljZSA9IG5ldyBBcHBsaWNhdGlvbkluZm9TZXJ2aWNlKCk7XHJcbiAgICAgICAgc2VsZi51c2VyVHlwZSA9IEVYVEVSTkFMX1RZUEU7XHJcbiAgICAgICAgc2VsZi5zYXZlWE1MTGFiZWwgPSBcIlNBVkVfRFJBRlRcIjtcclxuICAgICAgICBzZWxmLnllc05vTGlzdCA9IERvc3NpZXJMaXN0cy5nZXRZZXNOb0xpc3QoKTtcclxuICAgICAgICBzZWxmLnllc1ZhbHVlID0gRG9zc2llckxpc3RzLmdldFllc1ZhbHVlKCk7XHJcbiAgICAgICAgc2VsZi5mb3JtVHlwZUxpc3QgPSBnZXRSb2xlTGlzdHMuZ2V0Rm9ybVR5cGVzKCk7XHJcbiAgICAgICAgLy9jb25maWcgZm9yIGFwcGxpY2F0aW9uSW5mb0NvbXBvZW5lbnRcclxuICAgICAgICBzZWxmLmNvbmZpZ0ZpZWxkID0ge1xyXG4gICAgICAgICAgICBcImxhYmVsXCI6IFwiRE9TU0lFUl9JRFwiLFxyXG4gICAgICAgICAgICBcImZpZWxkTGVuZ3RoXCI6IFwiN1wiLFxyXG4gICAgICAgICAgICBcInRhZ05hbWVcIjogXCJkb3NzaWVySURcIixcclxuICAgICAgICAgICAgXCJlcnJvck1zZ1wiOiBcIk1TR19MRU5HVEhfN1wiLFxyXG4gICAgICAgICAgICBcImlzRG9zc2llclwiOiB0cnVlXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgc2VsZi5pc0luY29tcGxldGUgPSB0cnVlO1xyXG4gICAgICAgIHNlbGYuZm9ybUFtZW5kID0gZmFsc2U7XHJcbiAgICAgICAgc2VsZi5zaG93QWxsRXJyb3JzID0gZmFsc2U7XHJcbiAgICAgICAgc2VsZi5lcnJvckFwcGVuZGl4ID0gW107XHJcbiAgICAgICAgc2VsZi5leHRyYUFwcGVuZGl4ID0gW107XHJcbiAgICAgICAgc2VsZi5ub1RoZXJhID0gXCJcIjtcclxuICAgICAgICBzZWxmLm9uZVJlZlNlbGVjdGVkID0gXCJcIjtcclxuICAgICAgICBzZWxmLmFsZXJ0MSA9IHtcclxuICAgICAgICAgICAgdHlwZTogJ2luZm8nLFxyXG4gICAgICAgICAgICBtc2c6ICdMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2VjdGV0dXIgYWRpcGlzY2luZyBlbGl0LiBNb3JiaSBmZXVnaWF0IG51bmMgZXQgdGVtcG9yIG1hbGVzdWFkYS4gTnVsbGFtIHRyaXN0aXF1ZSBsaWd1bGEgYmxhbmRpdCwgcG9zdWVyZSBlc3QgYWMsIHNhZ2l0dGlzIG1pLiBJbiBoYWMgaGFiaXRhc3NlIHBsYXRlYSBkaWN0dW1zdC4gSW50ZXJkdW0gZXQgbWFsZXN1YWRhIGZhbWVzIGFjIGFudGUgaXBzdW0gcHJpbWlzIGluIGZhdWNpYnVzLiBDcmFzIHVsbGFtY29ycGVyIHNhZ2l0dGlzIGVyYXQgYWMgbG9ib3J0aXMuIFN1c3BlbmRpc3NlIGJpYmVuZHVtIHNlZCBtYXVyaXMgZWdldCBjb25kaW1lbnR1bS4gU3VzcGVuZGlzc2UgZWdlc3RhcyBsaWd1bGEgYSBsaWJlcm8gdGluY2lkdW50LCB1dCB2ZWhpY3VsYSBzZW0gZmVybWVudHVtLiBRdWlzcXVlIHNlbXBlciBzY2VsZXJpc3F1ZSB1cm5hLCBpbiBkaWduaXNzaW0gb2RpbyBjb25kaW1lbnR1bSBhYy4gTnVsbGFtIHN1c2NpcGl0IG1hbGVzdWFkYSBtYWduYSwgZWdldCBsYWNpbmlhIG51bGxhIHRlbXBvciBpZC4gQ3VyYWJpdHVyIHRyaXN0aXF1ZSBpcHN1bSBsaWJlcm8sIHV0IHB1bHZpbmFyIGlwc3VtIHZlbmVuYXRpcyBub24uIFV0IHBvcnRhLCBzZW0gbm9uIGJsYW5kaXQgYWxpcXVldCwgYW50ZSBtYXVyaXMgcG9ydGEgZXgsIHF1aXMgaWFjdWxpcyBlbGl0IG9yY2kgZXUgbGVvLiBNb3JiaSBhdCBlbmltIG5lYyBvZGlvIHVsbGFtY29ycGVyIG1vbGVzdGllLiBOdWxsYSBzaXQgYW1ldCBtYWduYSBjb25zZXF1YXQsIGJsYW5kaXQgb3JjaSBhLCBwb3J0YSBlcm9zLiBTZWQgZW5pbSBuaXNsLCB0ZW1wdXMgYWMgaW1wZXJkaWV0IGEsIG9ybmFyZSBncmF2aWRhIHNhcGllbi4gQ3VyYWJpdHVyIHVsdHJpY2llcyBkb2xvciBhbGlxdWV0IGJpYmVuZHVtIGFjY3Vtc2FuLicsXHJcbiAgICAgICAgICAgIHNob3c6IGZhbHNlXHJcbiAgICAgICAgfTtcclxuICAgICAgICBzZWxmLmFsZXJ0MiA9IHtcclxuICAgICAgICAgICAgdHlwZTogJ2luZm8nLFxyXG4gICAgICAgICAgICBtc2c6ICdMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2VjdGV0dXIgYWRpcGlzY2luZyBlbGl0LiBNb3JiaSBmZXVnaWF0IG51bmMgZXQgdGVtcG9yIG1hbGVzdWFkYS4gTnVsbGFtIHRyaXN0aXF1ZSBsaWd1bGEgYmxhbmRpdCwgcG9zdWVyZSBlc3QgYWMsIHNhZ2l0dGlzIG1pLiBJbiBoYWMgaGFiaXRhc3NlIHBsYXRlYSBkaWN0dW1zdC4gSW50ZXJkdW0gZXQgbWFsZXN1YWRhIGZhbWVzIGFjIGFudGUgaXBzdW0gcHJpbWlzIGluIGZhdWNpYnVzLiBDcmFzIHVsbGFtY29ycGVyIHNhZ2l0dGlzIGVyYXQgYWMgbG9ib3J0aXMuIFN1c3BlbmRpc3NlIGJpYmVuZHVtIHNlZCBtYXVyaXMgZWdldCBjb25kaW1lbnR1bS4gU3VzcGVuZGlzc2UgZWdlc3RhcyBsaWd1bGEgYSBsaWJlcm8gdGluY2lkdW50LCB1dCB2ZWhpY3VsYSBzZW0gZmVybWVudHVtLiBRdWlzcXVlIHNlbXBlciBzY2VsZXJpc3F1ZSB1cm5hLCBpbiBkaWduaXNzaW0gb2RpbyBjb25kaW1lbnR1bSBhYy4gTnVsbGFtIHN1c2NpcGl0IG1hbGVzdWFkYSBtYWduYSwgZWdldCBsYWNpbmlhIG51bGxhIHRlbXBvciBpZC4gQ3VyYWJpdHVyIHRyaXN0aXF1ZSBpcHN1bSBsaWJlcm8sIHV0IHB1bHZpbmFyIGlwc3VtIHZlbmVuYXRpcyBub24uIFV0IHBvcnRhLCBzZW0gbm9uIGJsYW5kaXQgYWxpcXVldCwgYW50ZSBtYXVyaXMgcG9ydGEgZXgsIHF1aXMgaWFjdWxpcyBlbGl0IG9yY2kgZXUgbGVvLiBNb3JiaSBhdCBlbmltIG5lYyBvZGlvIHVsbGFtY29ycGVyIG1vbGVzdGllLiBOdWxsYSBzaXQgYW1ldCBtYWduYSBjb25zZXF1YXQsIGJsYW5kaXQgb3JjaSBhLCBwb3J0YSBlcm9zLiBTZWQgZW5pbSBuaXNsLCB0ZW1wdXMgYWMgaW1wZXJkaWV0IGEsIG9ybmFyZSBncmF2aWRhIHNhcGllbi4gQ3VyYWJpdHVyIHVsdHJpY2llcyBkb2xvciBhbGlxdWV0IGJpYmVuZHVtIGFjY3Vtc2FuLicsXHJcbiAgICAgICAgICAgIHNob3c6IGZhbHNlXHJcbiAgICAgICAgfTtcclxuICAgICAgICBzZWxmLmFsZXJ0MyA9IHtcclxuICAgICAgICAgICAgdHlwZTogJ2luZm8nLFxyXG4gICAgICAgICAgICBtc2c6ICdMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2VjdGV0dXIgYWRpcGlzY2luZyBlbGl0LiBNb3JiaSBmZXVnaWF0IG51bmMgZXQgdGVtcG9yIG1hbGVzdWFkYS4gTnVsbGFtIHRyaXN0aXF1ZSBsaWd1bGEgYmxhbmRpdCwgcG9zdWVyZSBlc3QgYWMsIHNhZ2l0dGlzIG1pLiBJbiBoYWMgaGFiaXRhc3NlIHBsYXRlYSBkaWN0dW1zdC4gSW50ZXJkdW0gZXQgbWFsZXN1YWRhIGZhbWVzIGFjIGFudGUgaXBzdW0gcHJpbWlzIGluIGZhdWNpYnVzLiBDcmFzIHVsbGFtY29ycGVyIHNhZ2l0dGlzIGVyYXQgYWMgbG9ib3J0aXMuIFN1c3BlbmRpc3NlIGJpYmVuZHVtIHNlZCBtYXVyaXMgZWdldCBjb25kaW1lbnR1bS4gU3VzcGVuZGlzc2UgZWdlc3RhcyBsaWd1bGEgYSBsaWJlcm8gdGluY2lkdW50LCB1dCB2ZWhpY3VsYSBzZW0gZmVybWVudHVtLiBRdWlzcXVlIHNlbXBlciBzY2VsZXJpc3F1ZSB1cm5hLCBpbiBkaWduaXNzaW0gb2RpbyBjb25kaW1lbnR1bSBhYy4gTnVsbGFtIHN1c2NpcGl0IG1hbGVzdWFkYSBtYWduYSwgZWdldCBsYWNpbmlhIG51bGxhIHRlbXBvciBpZC4gQ3VyYWJpdHVyIHRyaXN0aXF1ZSBpcHN1bSBsaWJlcm8sIHV0IHB1bHZpbmFyIGlwc3VtIHZlbmVuYXRpcyBub24uIFV0IHBvcnRhLCBzZW0gbm9uIGJsYW5kaXQgYWxpcXVldCwgYW50ZSBtYXVyaXMgcG9ydGEgZXgsIHF1aXMgaWFjdWxpcyBlbGl0IG9yY2kgZXUgbGVvLiBNb3JiaSBhdCBlbmltIG5lYyBvZGlvIHVsbGFtY29ycGVyIG1vbGVzdGllLiBOdWxsYSBzaXQgYW1ldCBtYWduYSBjb25zZXF1YXQsIGJsYW5kaXQgb3JjaSBhLCBwb3J0YSBlcm9zLiBTZWQgZW5pbSBuaXNsLCB0ZW1wdXMgYWMgaW1wZXJkaWV0IGEsIG9ybmFyZSBncmF2aWRhIHNhcGllbi4gQ3VyYWJpdHVyIHVsdHJpY2llcyBkb2xvciBhbGlxdWV0IGJpYmVuZHVtIGFjY3Vtc2FuLicsXHJcbiAgICAgICAgICAgIHNob3c6IGZhbHNlXHJcbiAgICAgICAgfTtcclxuICAgICAgICBzZWxmLmFsZXJ0NCA9IHtcclxuICAgICAgICAgICAgdHlwZTogJ2luZm8nLFxyXG4gICAgICAgICAgICBtc2c6ICdMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2VjdGV0dXIgYWRpcGlzY2luZyBlbGl0LiBNb3JiaSBmZXVnaWF0IG51bmMgZXQgdGVtcG9yIG1hbGVzdWFkYS4gTnVsbGFtIHRyaXN0aXF1ZSBsaWd1bGEgYmxhbmRpdCwgcG9zdWVyZSBlc3QgYWMsIHNhZ2l0dGlzIG1pLiBJbiBoYWMgaGFiaXRhc3NlIHBsYXRlYSBkaWN0dW1zdC4gSW50ZXJkdW0gZXQgbWFsZXN1YWRhIGZhbWVzIGFjIGFudGUgaXBzdW0gcHJpbWlzIGluIGZhdWNpYnVzLiBDcmFzIHVsbGFtY29ycGVyIHNhZ2l0dGlzIGVyYXQgYWMgbG9ib3J0aXMuIFN1c3BlbmRpc3NlIGJpYmVuZHVtIHNlZCBtYXVyaXMgZWdldCBjb25kaW1lbnR1bS4gU3VzcGVuZGlzc2UgZWdlc3RhcyBsaWd1bGEgYSBsaWJlcm8gdGluY2lkdW50LCB1dCB2ZWhpY3VsYSBzZW0gZmVybWVudHVtLiBRdWlzcXVlIHNlbXBlciBzY2VsZXJpc3F1ZSB1cm5hLCBpbiBkaWduaXNzaW0gb2RpbyBjb25kaW1lbnR1bSBhYy4gTnVsbGFtIHN1c2NpcGl0IG1hbGVzdWFkYSBtYWduYSwgZWdldCBsYWNpbmlhIG51bGxhIHRlbXBvciBpZC4gQ3VyYWJpdHVyIHRyaXN0aXF1ZSBpcHN1bSBsaWJlcm8sIHV0IHB1bHZpbmFyIGlwc3VtIHZlbmVuYXRpcyBub24uIFV0IHBvcnRhLCBzZW0gbm9uIGJsYW5kaXQgYWxpcXVldCwgYW50ZSBtYXVyaXMgcG9ydGEgZXgsIHF1aXMgaWFjdWxpcyBlbGl0IG9yY2kgZXUgbGVvLiBNb3JiaSBhdCBlbmltIG5lYyBvZGlvIHVsbGFtY29ycGVyIG1vbGVzdGllLiBOdWxsYSBzaXQgYW1ldCBtYWduYSBjb25zZXF1YXQsIGJsYW5kaXQgb3JjaSBhLCBwb3J0YSBlcm9zLiBTZWQgZW5pbSBuaXNsLCB0ZW1wdXMgYWMgaW1wZXJkaWV0IGEsIG9ybmFyZSBncmF2aWRhIHNhcGllbi4gQ3VyYWJpdHVyIHVsdHJpY2llcyBkb2xvciBhbGlxdWV0IGJpYmVuZHVtIGFjY3Vtc2FuLicsXHJcbiAgICAgICAgICAgIHNob3c6IGZhbHNlXHJcbiAgICAgICAgfTtcclxuXHJcblxyXG4gICAgICAgIHZhciB5ZXNWYWx1ZSA9IFlFUztcclxuXHJcbiAgICAgICAgc2VsZi4kb25Jbml0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBzZWxmLmRvc3NpZXJTZXJ2aWNlID0gbmV3IERvc3NpZXJTZXJ2aWNlKCk7XHJcblxyXG4gICAgICAgICAgICBzZWxmLmRvc3NpZXJNb2RlbCA9IHNlbGYuZG9zc2llclNlcnZpY2UuZ2V0RGVmYXVsdE9iamVjdCgpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQG5nZG9jIGNhcHR1cmVzIGFueSBjaGFuZ2UgZXZlbnRzIGZyb20gdmFyaWFibGUgYmluZGluZ3NcclxuICAgICAgICAgKiBAcGFyYW0gY2hhbmdlc1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHNlbGYuJG9uQ2hhbmdlcyA9IGZ1bmN0aW9uIChjaGFuZ2VzKSB7XHJcblxyXG4gICAgICAgICAgICBpZiAoY2hhbmdlcy5mb3JtVHlwZSkge1xyXG4gICAgICAgICAgICAgICAgc2VsZi51c2VyVHlwZSA9IGNoYW5nZXMuZm9ybVR5cGUuY3VycmVudFZhbHVlO1xyXG4gICAgICAgICAgICAgICAgaWYgKHNlbGYudXNlclR5cGUgPT0gSU5URVJOQUxfVFlQRSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuc2F2ZVhNTExhYmVsID0gXCJBUFBST1ZFX0ZJTkFMXCJcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5zYXZlWE1MTGFiZWwgPSBcIlNBVkVfRFJBRlRcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHNlbGYuYXBwZW5kaXhNaXNzaW5nRXJyb3IgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAoc2VsZi5lcnJvckFwcGVuZGl4ICYmIHNlbGYuZXJyb3JBcHBlbmRpeC5sZW5ndGggPiAwKTtcclxuXHJcbiAgICAgICAgfTtcclxuICAgICAgICBzZWxmLmFwcGVuZGl4RXh0cmFFcnJvciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIChzZWxmLmV4dHJhQXBwZW5kaXggJiYgc2VsZi5leHRyYUFwcGVuZGl4Lmxlbmd0aCA+IDApO1xyXG5cclxuICAgICAgICB9O1xyXG5cclxuXHJcbiAgICAgICAgc2VsZi50aGlyZFBhcnR5U2lnbmVkQ2hhbmdlZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIChzZWxmLmRvc3NpZXJNb2RlbC5kcnVnUHJvZHVjdC50aGlyZFBhcnR5U2lnbmVkID09PSB5ZXNWYWx1ZSk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gX2xvYWRGaWxlQ29udGVudChmaWxlQ29udGVudCkge1xyXG4gICAgICAgICAgICBpZiAoIWZpbGVDb250ZW50KXJldHVybjtcclxuICAgICAgICAgICAgdmFyIHJlc3VsdEpzb24gPSBmaWxlQ29udGVudC5qc29uUmVzdWx0O1xyXG4gICAgICAgICAgICBpZiAocmVzdWx0SnNvbikge1xyXG4gICAgICAgICAgICAgICAgc2VsZi5kb3NzaWVyTW9kZWwgPSBzZWxmLmRvc3NpZXJTZXJ2aWNlLmxvYWRGcm9tRmlsZShyZXN1bHRKc29uKTtcclxuICAgICAgICAgICAgICAgIC8vcHJvY2VzcyBmaWxlIGxvYWQgcmVzdWx0c1xyXG4gICAgICAgICAgICAgICAgLy9sb2FkIGludG8gZGF0YSBtb2RlbCBhcyByZXN1bHQganNvbiBpcyBub3QgbnVsbFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vaWYgY29udGVudCBpcyBhdHRlbXB0ZWQgdG8gYmUgbG9hZGVkIHNob3cgYWxsIHRoZSBlcnJvcnNcclxuICAgICAgICAgICAgc2VsZi5zaG93Tm9SZWZSZUVycm9yKCk7XHJcbiAgICAgICAgICAgIGdldEFwcGVuZGl4NEVycm9ycygpO1xyXG4gICAgICAgICAgICBfc2V0Q29tcGxldGUoKTtcclxuICAgICAgICAgICAgc2VsZi5zaG93QWxsRXJyb3JzID0gdHJ1ZTtcclxuICAgICAgICAgICAgZGlzYWJsZVhNTFNhdmUoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHNlbGYucmVjb3Jkc0NoYW5nZWQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGdldEFwcGVuZGl4NEVycm9ycygpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHNlbGYuaXNSZWZQcm9kdWN0cyA9IGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgICAgIGlmIChzZWxmLmRvc3NpZXJNb2RlbC5pc1JlZlByb2R1Y3RzID09PSBzZWxmLnllc1ZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBzZWxmLmRvc3NpZXJNb2RlbC5kcnVnUHJvZHVjdC5jYW5SZWZQcm9kdWN0cyA9IFtdO1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgc2VsZi5zZXRBcHBsaWNhdGlvblR5cGUgPSBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgc2VsZi5kb3NzaWVyTW9kZWwuYXBwbGljYXRpb25UeXBlID0gdmFsdWU7XHJcbiAgICAgICAgICAgIHNlbGYuZm9ybUFtZW5kID0gc2VsZi5kb3NzaWVyTW9kZWwuYXBwbGljYXRpb25UeXBlID09PSBzZWxmLmFwcGxpY2F0aW9uSW5mb1NlcnZpY2UuZ2V0QW1lbmRUeXBlKCk7XHJcbiAgICAgICAgICAgIGRpc2FibGVYTUxTYXZlKCk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgc2VsZi5jZG5SZWZVcGRhdGVkID0gZnVuY3Rpb24gKGxpc3QpIHtcclxuICAgICAgICAgICAgLy9kb24ndCBkbyBhbnl0aGluZyB3aXRoIHRoZSBsaXN0XHJcbiAgICAgICAgICAgIHNlbGYuc2hvd05vUmVmUmVFcnJvcigpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHNlbGYuc2hvd05vUmVmUmVFcnJvciA9IGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgICAgIGlmIChzZWxmLmRvc3NpZXJNb2RlbC5kcnVnUHJvZHVjdC5jYW5SZWZQcm9kdWN0cy5sZW5ndGggPiAwICYmIHNlbGYuZG9zc2llck1vZGVsLmlzUmVmUHJvZHVjdHMgPT09IHllc1ZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICBzZWxmLm9uZVJlZlNlbGVjdGVkID0gXCJzZWxcIjtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgc2VsZi5vbmVSZWZTZWxlY3RlZCA9IFwiXCI7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGdldEFwcGVuZGl4NEVycm9ycygpIHtcclxuICAgICAgICAgICAgdmFyIGFwcGVuZGl4Q2hlY2sgPSBzZWxmLmRvc3NpZXJTZXJ2aWNlLmdldE1pc3NpbmdBcHBlbmRpeDQoc2VsZi5kb3NzaWVyTW9kZWwpO1xyXG4gICAgICAgICAgICBzZWxmLmVycm9yQXBwZW5kaXggPSBhcHBlbmRpeENoZWNrLm1pc3Npbmc7XHJcbiAgICAgICAgICAgIHNlbGYuZXh0cmFBcHBlbmRpeCA9IGFwcGVuZGl4Q2hlY2suZXh0cmE7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAbmdkb2MgVXNlZCB0byBkZXRlcm1pbmUgaWYgdGhlIGZvcm0gaXMgaW5jb21wbGV0ZVxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKiBAcmV0dXJuIHRydWUgaWYgdGhlIGZvcm0gaXMgaW5jb21wbGV0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGZ1bmN0aW9uIF9zZXRDb21wbGV0ZSgpIHtcclxuICAgICAgICAgICAgc2VsZi5pc0luY29tcGxldGUgPSAhc2VsZi5hY3Rpdml0eVJvb3QuZG9zc2llcklEO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgJHNjb3BlLiR3YXRjaChcImRvcy5kb3NzaWVyRm9ybS4kaW52YWxpZFwiLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGRpc2FibGVYTUxTYXZlKClcclxuICAgICAgICB9LCB0cnVlKTtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQG5nZG9jIGRpc2FibGVzIHRoZSBYTUwgc2F2ZSBidXR0b25cclxuICAgICAgICAgKi9cclxuICAgICAgICBmdW5jdGlvbiBkaXNhYmxlWE1MU2F2ZSgpIHtcclxuICAgICAgICAgICAgdmFyIGZvcm1JbnZhbGlkID0gdHJ1ZTsgLy9UT0RPIGhhY2tcclxuICAgICAgICAgICAgaWYgKHNlbGYuZG9zc2llckZvcm0pIHtcclxuICAgICAgICAgICAgICAgIGZvcm1JbnZhbGlkID0gc2VsZi5kb3NzaWVyRm9ybS4kaW52YWxpZDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBzZWxmLmRpc2FibGVYTUwgPSAoZm9ybUludmFsaWQgfHwgKHNlbGYuZG9zc2llck1vZGVsLmFwcGxpY2F0aW9uVHlwZSA9PSBzZWxmLmFwcGxpY2F0aW9uSW5mb1NlcnZpY2UuZ2V0QXBwcm92ZWRUeXBlKCkgJiYgc2VsZi5pc0V4dGVybigpKSk7XHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gX3NldENvbXBsZXRlKCkge1xyXG4gICAgICAgICAgICBzZWxmLmlzSW5jb21wbGV0ZSA9ICFzZWxmLmRvc3NpZXJNb2RlbC5kb3NzaWVySUQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAbmdkb2MgLSBkZXRlcm1pbmVzIGlmIHRoZSBmb3JtIGlzIHRoZSBpbnRlcm5hbCBvciB0aGUgZXh0ZXJuYWwgdmVyc2lvblxyXG4gICAgICAgICAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHNlbGYuaXNFeHRlcm4gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBzZWxmLnVzZXJUeXBlID09IEVYVEVSTkFMX1RZUEU7XHJcblxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFVzZWQgdG8gc2hvdyBhbGwgdGhlIGZpZWxkcyBpbiBhbiBlcnJvciBzdGF0ZS4gQ2FuIGJlIGFjdGl2YXRlZCBieSBhIHBhcmVudCBjb21wb25lbnRcclxuICAgICAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuICAgICAgICAgKi9cclxuICAgICAgICBzZWxmLnNob3dFcnJvcnMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAoc2VsZi5zaG93QWxsRXJyb3JzKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEZvciBpbmRpdmlkdWFsIGNvbnRyb2xzLCB3aGV0aGVyIHRvIHNob3cgdGhlIGVycm9yIGZvciBhIGZpZWRsXHJcbiAgICAgICAgICogQHBhcmFtIGlzSW52YWxpZCAtIGNvbnRyb2wgJGludmFsaWQgZmxhZ1xyXG4gICAgICAgICAqIEBwYXJhbSBpc1RvdWNoZWQgLWNvbnRyb2wgJHRvdWNoZWQgZmxhZ1xyXG4gICAgICAgICAqIEByZXR1cm5zIHsqfGRvc3NpZXJDdHJsLnNob3dFcnJvcnN9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgc2VsZi5zaG93RXJyb3IgPSBmdW5jdGlvbiAoaXNJbnZhbGlkLCBpc1RvdWNoZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuICgoaXNJbnZhbGlkICYmIGlzVG91Y2hlZCkgfHwgKHNlbGYuc2hvd0Vycm9ycygpICYmIGlzSW52YWxpZCkpXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLyoqKlxyXG4gICAgICAgICAqIE1hbmFnZXMgdGhlIHNjaGVkdWxlIEEgZGV0YWlscyBzaW5jZSB0aGUgZmllbGRzIGFyZSBhbHdheXMgaW4gdGhlIG1vZGVsXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgc2VsZi5pc1NjaGVkQSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKCFzZWxmLmRvc3NpZXJNb2RlbCB8fCAhc2VsZi5kb3NzaWVyTW9kZWwuZHJ1Z1Byb2R1Y3QgfHwgIXNlbGYuZG9zc2llclNlcnZpY2UpIHJldHVybiBmYWxzZTsgLy9uZXZlciBoYXBwZW4gY2FzZTtcclxuICAgICAgICAgICAgaWYgKHNlbGYuZG9zc2llck1vZGVsLmRydWdQcm9kdWN0LmlzU2NoZWR1bGVBKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBzZWxmLmRvc3NpZXJNb2RlbC5kcnVnUHJvZHVjdC5zY2hlZHVsZUFHcm91cCA9IHNlbGYuZG9zc2llclNlcnZpY2UuZ2V0RGVmYXVsdFNjaGVkdWxlQSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBTYXZlIGFzIGEganNvbiBmaWxlLiBDb252ZXJ0IGludGVyYWwgbW9kZWwgdG8gZXh0ZXJuYWwgbW9kZWwgZm9yIG91dHB1dFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHNlbGYuc2F2ZUpzb24gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciB3cml0ZVJlc3VsdCA9IF90cmFuc2Zvcm1GaWxlKCk7XHJcbiAgICAgICAgICAgIGhwZmJGaWxlUHJvY2Vzc2luZy53cml0ZUFzSnNvbih3cml0ZVJlc3VsdCwgX2NyZWF0ZUZpbGVuYW1lKCksIHNlbGYuZG9zc2llclNlcnZpY2UuZ2V0Um9vdFRhZ05hbWUoKSk7XHJcbiAgICAgICAgICAgIHNlbGYuc2hvd0FsbEVycm9ycyA9IHRydWU7XHJcbiAgICAgICAgICAgIC8vX3NldENvbXBsZXRlKClcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBzZWxmLnNhdmVYTUwgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciB3cml0ZVJlc3VsdCA9IF90cmFuc2Zvcm1GaWxlKCk7XHJcbiAgICAgICAgICAgIGhwZmJGaWxlUHJvY2Vzc2luZy53cml0ZUFzWG1sKHdyaXRlUmVzdWx0LCBfY3JlYXRlRmlsZW5hbWUoKSwgc2VsZi5kb3NzaWVyU2VydmljZS5nZXRSb290VGFnTmFtZSgpKTtcclxuICAgICAgICAgICAgc2VsZi5zaG93QWxsRXJyb3JzID0gZmFsc2U7XHJcbiAgICAgICAgfTtcclxuXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRha2VzIHRoZSBpbnRlcm5hbCBtb2RlbCBhbmQgdHJhbnNmb3JtcyB0byBhIGpzb24gb2JqZWN0IGNvbXBhdGlibGUgd2l0aCB0aGUgb3V0cHV0XHJcbiAgICAgICAgICogQHJldHVybnMgeyp9XHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBmdW5jdGlvbiBfdHJhbnNmb3JtRmlsZSgpIHtcclxuICAgICAgICAgICAgdXBkYXRlRGF0ZSgpO1xyXG4gICAgICAgICAgICBpZiAoIXNlbGYuaXNFeHRlcm4oKSkge1xyXG4gICAgICAgICAgICAgICAgc2VsZi5kb3NzaWVyTW9kZWwuZW5yb2xtZW50VmVyc2lvbiA9IHNlbGYuYXBwbGljYXRpb25JbmZvU2VydmljZS5pbmNyZW1lbnRNYWpvclZlcnNpb24oc2VsZi5kb3NzaWVyTW9kZWwuZW5yb2xtZW50VmVyc2lvbik7XHJcbiAgICAgICAgICAgICAgICBzZWxmLmRvc3NpZXJNb2RlbC5hcHBsaWNhdGlvblR5cGUgPSBBcHBsaWNhdGlvbkluZm9TZXJ2aWNlLnByb3RvdHlwZS5nZXRBcHByb3ZlZFR5cGUoKTtcclxuICAgICAgICAgICAgICAgIC8vIHVwZGF0ZU1vZGVsT25BcHByb3ZhbCgpOyAvL3VwZGF0ZXMgYWxsIHRoZSBhbWVuZFxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICAgICAgICAgIHNlbGYuZG9zc2llck1vZGVsLmVucm9sbWVudFZlcnNpb24gPSBzZWxmLmFwcGxpY2F0aW9uSW5mb1NlcnZpY2UuaW5jcmVtZW50TWlub3JWZXJzaW9uKHNlbGYuZG9zc2llck1vZGVsLmVucm9sbWVudFZlcnNpb24pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBzZWxmLmRvc3NpZXJTZXJ2aWNlLmRvc3NpZXJUb091dHB1dChzZWxmLmRvc3NpZXJNb2RlbCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAbmdkb2MgLWNyZWF0ZXMgYSBmaWxlbmFtZSBmb3IgZG9zc2llciBmaWxlLiBJZiBpdCBleGlzdHMsYWRkcyBjb250cm9sIG51bWJlclxyXG4gICAgICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBmdW5jdGlvbiBfY3JlYXRlRmlsZW5hbWUoKSB7XHJcblxyXG4gICAgICAgICAgICB2YXIgZHJhZnRfcHJlZml4ID0gXCJEUkFGVFJFUERPXCI7XHJcbiAgICAgICAgICAgIHZhciBmaW5hbF9wcmVmaXggPSBcIkhDUkVQRE9cIjtcclxuICAgICAgICAgICAgdmFyIGZpbGVuYW1lID0gXCJcIjtcclxuICAgICAgICAgICAgaWYgKHNlbGYudXNlclR5cGUgPT09IElOVEVSTkFMX1RZUEUpIHtcclxuXHJcbiAgICAgICAgICAgICAgICBmaWxlbmFtZSA9IGZpbmFsX3ByZWZpeDtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGZpbGVuYW1lID0gZHJhZnRfcHJlZml4O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChzZWxmLmRvc3NpZXJNb2RlbCAmJiBzZWxmLmRvc3NpZXJNb2RlbC5kb3NzaWVySUQpIHtcclxuICAgICAgICAgICAgICAgIGZpbGVuYW1lID0gZmlsZW5hbWUgKyBcIl9cIiArIHNlbGYuZG9zc2llck1vZGVsLmRvc3NpZXJJRDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoc2VsZi5kb3NzaWVyTW9kZWwuZW5yb2xtZW50VmVyc2lvbikge1xyXG4gICAgICAgICAgICAgICAgZmlsZW5hbWUgPSBmaWxlbmFtZSArIFwiX1wiICsgc2VsZi5kb3NzaWVyTW9kZWwuZW5yb2xtZW50VmVyc2lvbjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gZmlsZW5hbWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAbmdkb2MgbWV0aG9kIC11cGRhdGVzIHRoZSBkYXRlIGZpZWxkIHRvIHRoZSBjdXJyZW50IGRhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBmdW5jdGlvbiB1cGRhdGVEYXRlKCkge1xyXG4gICAgICAgICAgICBpZiAoc2VsZi5kb3NzaWVyTW9kZWwpIHtcclxuICAgICAgICAgICAgICAgIHNlbGYuZG9zc2llck1vZGVsLmRhdGVTYXZlZCA9IHNlbGYuYXBwbGljYXRpb25JbmZvU2VydmljZS5nZXRUb2RheURhdGUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIE1hbmFnZXMgZXJyb3JzIGZvciBubyBUaGVyYVxyXG4gICAgICAgICAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHNlbGYubm9UaGVyYVJlY3MgPSBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgICAgICBpZiAoIXNlbGYuZG9zc2llck1vZGVsIHx8ICFzZWxmLmRvc3NpZXJNb2RlbC5kcnVnUHJvZHVjdCkge1xyXG4gICAgICAgICAgICAgICAgc2VsZi5ub1RoZXJhID0gXCJcIjtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoIXNlbGYuZG9zc2llck1vZGVsLmRydWdQcm9kdWN0LnRoZXJhcGV1dGljIHx8IHNlbGYuZG9zc2llck1vZGVsLmRydWdQcm9kdWN0LnRoZXJhcGV1dGljLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgc2VsZi5ub1RoZXJhID0gXCJcIjtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHNlbGYubm9UaGVyYSA9IHNlbGYuZG9zc2llck1vZGVsLmRydWdQcm9kdWN0LnRoZXJhcGV1dGljLmxlbmd0aDtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHNlbGYuY2xvc2VBbGVydCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICBzd2l0Y2ggKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlICcxJzpcclxuICAgICAgICAgICAgICAgICAgICBzZWxmLmFsZXJ0MS5zaG93ID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICcyJzpcclxuICAgICAgICAgICAgICAgICAgICBzZWxmLmFsZXJ0Mi5zaG93ID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICczJzpcclxuICAgICAgICAgICAgICAgICAgICBzZWxmLmFsZXJ0My5zaG93ID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICc0JzpcclxuICAgICAgICAgICAgICAgICAgICBzZWxmLmFsZXJ0NC5zaG93ID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBzZWxmLmFkZEluc3RydWN0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XHJcblxyXG4gICAgICAgICAgICBzd2l0Y2ggKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlICcxJzpcclxuICAgICAgICAgICAgICAgICAgICBzZWxmLmFsZXJ0MS5zaG93ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJzInOlxyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuYWxlcnQyLnNob3cgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnMyc6XHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5hbGVydDMuc2hvdyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICc0JzpcclxuICAgICAgICAgICAgICAgICAgICBzZWxmLmFsZXJ0NC5zaG93ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgfVxyXG5cclxufSkoKTtcclxuXHJcblxyXG4iLCIvKipcclxuICogQ3JlYXRlZCBieSBka2lsdHkgb24gMTAvMzAvMjAxNi5cclxuICovXHJcblxyXG4oZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKCdjb3VudHJ5UmVjb3JkTW9kdWxlJywgWyd1aS5zZWxlY3QnLCdocGZiQ29uc3RhbnRzJ10pXHJcbn0pKCk7XHJcblxyXG4oZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKCdjb3VudHJ5UmVjb3JkTW9kdWxlJylcclxuICAgICAgICAuY29uZmlnKGZ1bmN0aW9uICh1aVNlbGVjdENvbmZpZykge1xyXG4gICAgICAgICAgICAvL2Nob2ljZXM6IHNlbGVjdDIsIGJvb3RzdHJhcCwgc2VsZWN0aXplXHJcbiAgICAgICAgICAgIHVpU2VsZWN0Q29uZmlnLnRoZW1lID0gJ3NlbGVjdDInO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLmNvbXBvbmVudCgnY21wQ291bnRyeVJlY29yZCcsIHtcclxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdhcHAvc2NyaXB0cy9jb21wb25lbnRzL2NvdW50cnktbGlzdC90cGwtY291bnRyeS1yZWNvcmRfMjAxNzAyMDNfMTUwMi5odG1sJyxcclxuICAgICAgICAgICAgY29udHJvbGxlcjogY291bnRyeVJlY29yZENvbnRyb2xsZXIsXHJcbiAgICAgICAgICAgIGNvbnRyb2xsZXJBczonY291bnRyeVJlY0N0cmwnLFxyXG4gICAgICAgICAgICBiaW5kaW5nczoge1xyXG4gICAgICAgICAgICAgICAgcmVjb3JkOiAnPCcsXHJcbiAgICAgICAgICAgICAgICBvbkRlbGV0ZTogJyYnLFxyXG4gICAgICAgICAgICAgICAgc2hvd0Vycm9yczogJyYnLFxyXG4gICAgICAgICAgICAgICAgY291bnRyeUxpc3Q6JzwnLFxyXG4gICAgICAgICAgICAgICAgZmllbGRzZXRMYWJlbDonQCdcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgIGNvdW50cnlSZWNvcmRDb250cm9sbGVyLiRpbmplY3QgPSBbJyRmaWx0ZXInLCckdHJhbnNsYXRlJywnVU5LTk9XTiddO1xyXG4gICAgZnVuY3Rpb24gY291bnRyeVJlY29yZENvbnRyb2xsZXIoJGZpbHRlciwgJHRyYW5zbGF0ZSwgVU5LTk9XTikge1xyXG4gICAgICAgIHZhciB2bSA9IHRoaXM7XHJcblxyXG4gICAgICAgIHZtLm1vZGVsID0ge1wiaWRcIjogXCJcIiwgXCJjb3VudHJ5XCI6IFwiXCIsXCJ1bmtub3duQ291bnRyeURldGFpbHNcIjpcIlwiLFwiZGlzcGxheVwiOlwiXCJ9O1xyXG4gICAgICAgIHZtLmNvdW50cmllcz1bXTtcclxuICAgICAgICB2bS5sYW5nID0gJHRyYW5zbGF0ZS5wcm9wb3NlZExhbmd1YWdlKCkgfHwgJHRyYW5zbGF0ZS51c2UoKTtcclxuXHJcbiAgICAgICAgdm0uJG9uSW5pdCA9IGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgIC8vYWRkIGluaXQgY29kZSBoZXJlXHJcbiAgICAgICAgfTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBVcGRhdGVzIHRoZSBkaXNwbGF5IHZhbHVlIGZvciB0aGUgb2JqZWN0IGZvciBzdW1tYXJ5IGRpc3BsYXlcclxuICAgICAgICAgKi9cclxuICAgICAgICB2bS5jb3VudHJ5Q2hhbmdlZD1mdW5jdGlvbigkaXRlbSwkbW9kZWwpe1xyXG4gICAgICAgICAgICB2bS5tb2RlbC5kaXNwbGF5PSRtb2RlbC5pZDtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICB2bS4kb25DaGFuZ2VzID0gZnVuY3Rpb24gKGNoYW5nZXMpIHtcclxuICAgICAgICAgICAgaWYoY2hhbmdlcy5jb3VudHJ5TGlzdCl7XHJcbiAgICAgICAgICAgICAgICB2bS5jb3VudHJpZXM9Y2hhbmdlcy5jb3VudHJ5TGlzdC5jdXJyZW50VmFsdWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGNoYW5nZXMucmVjb3JkICYmIGNoYW5nZXMucmVjb3JkLmN1cnJlbnRWYWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgdm0ubW9kZWwgPSBjaGFuZ2VzLnJlY29yZC5jdXJyZW50VmFsdWU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdm0uZGVsZXRlUmVjb3JkID0gZnVuY3Rpb24oKSAge1xyXG4gICAgICAgICAgICB2bS5vbkRlbGV0ZSh7aWQ6IHZtLm1vZGVsLmlkfSlcclxuICAgICAgICB9O1xyXG5cclxuXHJcbiAgICAgICAgdm0uc2hvd0Vycm9yID0gZnVuY3Rpb24gKGlzSW52YWxpZCwgaXNUb3VjaGVkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAoKGlzSW52YWxpZCAmJiBpc1RvdWNoZWQpIHx8IChpc0ludmFsaWQgJiYgdm0uc2hvd0Vycm9ycygpKSApXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2bS5pc1Vua25vd249ZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgaWYoIXZtLm1vZGVsIHx8ICF2bS5tb2RlbC5jb3VudHJ5KXtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZih2bS5tb2RlbC5jb3VudHJ5LmlkPT09VU5LTk9XTil7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59KSgpOyIsIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IEFiZGVzc2FtYWQgb24gOC8xNi8yMDE2LlxyXG4gKi9cclxuKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgnY291bnRyeUxpc3RNb2R1bGUnLCBbJ2RhdGFMaXN0cycsICdjb3VudHJ5UmVjb3JkTW9kdWxlJywgJ3VpLnNlbGVjdCcsICdocGZiQ29uc3RhbnRzJ10pXHJcbn0pKCk7XHJcblxyXG4oZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKCdjb3VudHJ5TGlzdE1vZHVsZScpXHJcbiAgICAgICAgLmNvbXBvbmVudCgnY21wQ291bnRyeUxpc3QnLCB7XHJcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnYXBwL3NjcmlwdHMvY29tcG9uZW50cy9jb3VudHJ5LWxpc3QvdHBsLWNvdW50cnktbGlzdF8yMDE3MDIwM18xNTAyLmh0bWwnLFxyXG4gICAgICAgICAgICBjb250cm9sbGVyOiBjb3VudHJ5TGlzdENvbnRyb2xsZXIsXHJcbiAgICAgICAgICAgIGNvbnRyb2xsZXJBczogJ2NvdW50cnlMaXN0Q3RybCcsXHJcbiAgICAgICAgICAgIGJpbmRpbmdzOiB7XHJcbiAgICAgICAgICAgICAgICB3aXRoVW5rbm93bjogJzwnLFxyXG4gICAgICAgICAgICAgICAgbGlzdEl0ZW1zOiAnPCcsXHJcbiAgICAgICAgICAgICAgICBvblVwZGF0ZTogJyYnLFxyXG4gICAgICAgICAgICAgICAgb25EZWxldGU6ICcmJyxcclxuICAgICAgICAgICAgICAgIHNob3dFcnJvcnM6ICcmJyxcclxuICAgICAgICAgICAgICAgIGZpZWxkTGFiZWw6ICdAJ1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgY291bnRyeUxpc3RDb250cm9sbGVyLiRpbmplY3QgPSBbJyRmaWx0ZXInLCAnZ2V0Q291bnRyeUFuZFByb3ZpbmNlcycsJ1VOS05PV04nXTtcclxuXHJcblxyXG4gICAgZnVuY3Rpb24gY291bnRyeUxpc3RDb250cm9sbGVyKCRmaWx0ZXIsIGdldENvdW50cnlBbmRQcm92aW5jZXMsVU5LTk9XTikge1xyXG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcclxuICAgICAgICBzZWxmLmJhc2VDb3VudHJpZXMgPSBnZXRDb3VudHJ5QW5kUHJvdmluY2VzLmdldENvdW50cmllcygpO1xyXG4gICAgICAgIHNlbGYuY291bnRyeUxpc3QgPSBcIlwiO1xyXG4gICAgICAgIHNlbGYubW9kZWwgPSB7fTtcclxuICAgICAgICBzZWxmLmlzRGV0YWlsVmFsaWQgPSB0cnVlO1xyXG4gICAgICAgIHNlbGYucmVzZXRUb0NvbGxhcHNlZCA9IHRydWU7XHJcbiAgICAgICAgc2VsZi5zZWxlY3RSZWNvcmQgPSAwO1xyXG4gICAgICAgIHNlbGYuY29sdW1uRGVmID0gW1xyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBsYWJlbDogc2VsZi5maWVsZExhYmVsLFxyXG4gICAgICAgICAgICAgICAgYmluZGluZzogXCJkaXNwbGF5XCIsXHJcbiAgICAgICAgICAgICAgICB3aWR0aDogXCIxMDBcIlxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgXVxyXG5cclxuICAgICAgICBzZWxmLmhhc1Vua25vd24gPSBmYWxzZTtcclxuICAgICAgICBzZWxmLmVtcHR5TW9kZWwgPSB7XCJpZFwiOiBcIlwiLCBcImNvdW50cnlcIjogXCJcIixcInVua25vd25Db3VudHJ5RGV0YWlsc1wiOlwiXCIsXCJkaXNwbGF5XCI6XCJcIn07XHJcblxyXG5cclxuICAgICAgICBzZWxmLiRvbkluaXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmIChhbmd1bGFyLmlzVW5kZWZpbmVkKHNlbGYubW9kZWwubGlzdCkpIHsgLy9UT0RPIHNob3VsZCBiZSBjb21pbWcgZnJvbSBwYXJlbnRcclxuICAgICAgICAgICAgICAgIHNlbGYubW9kZWwubGlzdCA9IFtdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vc2hvdWxkIG5ldmVyIGhhcHBlbixmYWxsYmFjay4uLlxyXG4gICAgICAgICAgICBpZiAoYW5ndWxhci5pc1VuZGVmaW5lZChzZWxmLmNvdW50cnlMaXN0KSkge1xyXG4gICAgICAgICAgICAgICAgc2V0VW5rbm93bkNvdW50cnlTdGF0ZShzZWxmLndpdGhVbmtub3duKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzZWxmLiRvbkNoYW5nZXMgPSBmdW5jdGlvbiAoY2hhbmdlcykge1xyXG4gICAgICAgICAgICBpZiAoY2hhbmdlcy53aXRoVW5rbm93bikge1xyXG4gICAgICAgICAgICAgICAgc2V0VW5rbm93bkNvdW50cnlTdGF0ZShjaGFuZ2VzLndpdGhVbmtub3duLmN1cnJlbnRWYWx1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGNoYW5nZXMubGlzdEl0ZW1zKSB7XHJcbiAgICAgICAgICAgICAgICBzZWxmLm1vZGVsLmxpc3QgPSBjaGFuZ2VzLmxpc3RJdGVtcy5jdXJyZW50VmFsdWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIGZ1bmN0aW9uIHNldFVua25vd25Db3VudHJ5U3RhdGUoaXNVbmtub3duKSB7XHJcbiAgICAgICAgICAgIHZhciBjb3VudHJpZXMgPSBhbmd1bGFyLmNvcHkoc2VsZi5iYXNlQ291bnRyaWVzKTtcclxuICAgICAgICAgICAgaWYgKGlzVW5rbm93bikge1xyXG4gICAgICAgICAgICAgICAgdmFyIHVua25vd25SZWM9Z2V0Q291bnRyeUFuZFByb3ZpbmNlcy5nZXRVbmtub3duQ291bnRyeVJlY29yZCgpO1xyXG4gICAgICAgICAgICAgICAgY291bnRyaWVzLnVuc2hpZnQodW5rbm93blJlYyk7XHJcbiAgICAgICAgICAgICAgICBzZWxmLmNvdW50cnlMaXN0ID1jb3VudHJpZXM7XHJcbiAgICAgICAgICAgICAgICBzZWxmLmhhc1Vua25vd24gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgc2VsZi5jb2x1bW5EZWYgPSBbXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogc2VsZi5maWVsZExhYmVsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBiaW5kaW5nOiBcImRpc3BsYXlcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IFwiNTBcIlxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogXCJVTktOT1dOX0NPVU5UUllfREVUQUlMU1wiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBiaW5kaW5nOiBcInVua25vd25Db3VudHJ5RGV0YWlsc1wiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogXCI1MFwiXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIF1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHNlbGYuY291bnRyeUxpc3QgPSBjb3VudHJpZXM7XHJcbiAgICAgICAgICAgICAgICBzZWxmLmhhc1Vua25vd24gPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIHNlbGYuZW1wdHlNb2RlbCA9IHtcImlkXCI6IFwiXCIsIFwiY291bnRyeVwiOiBcIlwiLFwidW5rbm93bkNvdW50cnlEZXRhaWxzXCI6XCJcIixcImRpc3BsYXlcIjpcIlwifTtcclxuICAgICAgICAgICAgICAgIHNlbGYuY29sdW1uRGVmID0gW1xyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6IHNlbGYuZmllbGRMYWJlbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYmluZGluZzogXCJkaXNwbGF5XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiBcIjEwMFwiXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgXVxyXG5cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHNlbGYuYWRkTmV3ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgbWF4SUQgPSBnZXRMaXN0TWF4SUQoKTtcclxuICAgICAgICAgICAgdmFyIGl0ZW0gPSBhbmd1bGFyLmNvcHkoc2VsZi5lbXB0eU1vZGVsKTtcclxuICAgICAgICAgICAgaXRlbS5pZCA9IChnZXRMaXN0TWF4SUQoKSArIDEpO1xyXG4gICAgICAgICAgICAoc2VsZi5tb2RlbC5saXN0KS5wdXNoKGl0ZW0pO1xyXG4gICAgICAgICAgICBzZXRSZWNvcmQoLTEpO1xyXG4gICAgICAgICAgICBzZWxmLnJlc2V0VG9Db2xsYXBzZWQgPSAhc2VsZi5yZXNldFRvQ29sbGFwc2VkO1xyXG4gICAgICAgICAgICBzZXRSZWNvcmQoc2VsZi5tb2RlbC5saXN0Lmxlbmd0aCAtIDEpO1xyXG4gICAgICAgICAgICAvL3NlbGYuZWRpdFJlY29yZChpdGVtKTtcclxuICAgICAgICAgICAgLy9zZWxmLm9uVXBkYXRlKHtsaXN0OiBzZWxmLm1vZGVsLmxpc3R9KTtcclxuXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gc2V0UmVjb3JkKHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHNlbGYuc2VsZWN0UmVjb3JkID0gdmFsdWU7XHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc2VsZi5kZWxldGVSZWNvcmQgPSBmdW5jdGlvbiAoX2lkKSB7XHJcbiAgICAgICAgICAgIC8vY29uc29sZS5sb2coXCJEZWxldGluZyBpdGVtOiBcIitfaWQpO1xyXG5cclxuICAgICAgICAgICAgdmFyIGlkeCA9IHNlbGYubW9kZWwubGlzdC5pbmRleE9mKFxyXG4gICAgICAgICAgICAgICAgJGZpbHRlcignZmlsdGVyJykoc2VsZi5tb2RlbC5saXN0LCB7aWQ6IF9pZH0sIHRydWUpWzBdXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIGlmIChpZHggPCAwKSByZXR1cm47XHJcblxyXG4gICAgICAgICAgICBzZWxmLm1vZGVsLmxpc3Quc3BsaWNlKGlkeCwgMSk7XHJcbiAgICAgICAgICAgIC8vIHNlbGYub25VcGRhdGUoe2xpc3Q6c2VsZi5tb2RlbC5saXN0fSk7XHJcbiAgICAgICAgfTtcclxuXHJcblxyXG4gICAgICAgIC8qKipcclxuICAgICAgICAgKiBTaG93cyBhIGNvbnRyb2wgZXJyb3IgaWYgdG91Y2hlZCBhbmQgaW52YWxpZCBvciByZW1vdGUgdHJpZ2dlclxyXG4gICAgICAgICAqIEBwYXJhbSBpc0ludmFsaWRcclxuICAgICAgICAgKiBAcGFyYW0gaXNUb3VjaGVkXHJcbiAgICAgICAgICogQHJldHVybnMgeyp9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgc2VsZi5zaG93RXJyb3IgPSBmdW5jdGlvbiAoaXNJbnZhbGlkLCBpc1RvdWNoZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuICgoaXNJbnZhbGlkICYmIGlzVG91Y2hlZCkgfHwgKGlzSW52YWxpZCAmJiBzZWxmLnNob3dFcnJvcnMoKSkpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBnZXRMaXN0TWF4SUQoKSB7XHJcblxyXG4gICAgICAgICAgICB2YXIgb3V0ID0gMDtcclxuICAgICAgICAgICAgdmFyIGxpc3QgPSBzZWxmLm1vZGVsLmxpc3Q7XHJcbiAgICAgICAgICAgIGlmIChsaXN0KSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAobGlzdFtpXS5pZCA+IG91dCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvdXQgPSBsaXN0W2ldLmlkO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gb3V0O1xyXG5cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0pKCk7IiwiLyoqXHJcbiAqIENyZWF0ZWQgYnkgQWJkZXNzYW1hZCBvbiA4LzEwLzIwMTYuXHJcbiAqL1xyXG5cclxuXHJcbihmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ2NoZWNrQm94TGlzdE1vZHVsZScsIFtdKVxyXG59KSgpO1xyXG5cclxuKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgnY2hlY2tCb3hMaXN0TW9kdWxlJylcclxuICAgICAgICAuY29tcG9uZW50KCdjbXBDaGVja2JveExpc3QnLCB7XHJcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnYXBwL3NjcmlwdHMvY29tcG9uZW50cy9jaGVja2JveC1saXN0L3RwbC1jaGVja2JveC1saXN0XzIwMTcwMjAzXzE1MDIuaHRtbCcsXHJcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6IGNoZWNrQm94TGlzdEN0cmwsXHJcbiAgICAgICAgICAgIGNvbnRyb2xsZXJBczogJ2Noa2wnLFxyXG4gICAgICAgICAgICBiaW5kaW5nczoge1xyXG4gICAgICAgICAgICAgICAgdGl0bGU6ICdAJyxcclxuICAgICAgICAgICAgICAgIGNvbW1vbk5hbWU6J0AnLFxyXG4gICAgICAgICAgICAgICAgbGlzdEl0ZW1zOiAnPCcsIC8vYXJyYXkgb2Ygb2JqZWN0c1xyXG4gICAgICAgICAgICAgICAgbnVtYmVyQ29sczogJ0AnLFxyXG4gICAgICAgICAgICAgICAgb25VcGRhdGU6JyYnXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICBmdW5jdGlvbiBjaGVja0JveExpc3RDdHJsKCkge1xyXG5cclxuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XHJcblxyXG4gICAgICAgIHNlbGYubnVtYmVyQ29sdW1ucyA9IDQ7IC8vZGVmYXVsdCB0byA0XHJcbiAgICAgICAgc2VsZi5jb2xXaWR0aCA9IDM7XHJcblxyXG5cclxuICAgICAgICBzZWxmLiRvbkluaXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIC8vaW5pdCBpdGVtcyBhZnRlciBjaGFuZ2VcclxuICAgICAgICAgICAgLy90ZW1wIGFzIG5vdCBob29rZWQgdXBcclxuICAgICAgICAgICAgLy9zZWxmLmN1cnJlbnRNb2RlbCA9IHNlbGYubGlzdEl0ZW1zIGRvc2VuJ3QgbWFrZSBzZW5zZSBkb2luZyB0aGlzIG9uIGluaXQgd291bGQgaGFwcGVuIG9uIGNoYW5nZXNcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBzZWxmLiRvbkNoYW5nZXMgPSBmdW5jdGlvbiAoY2hhbmdlcykge1xyXG5cclxuICAgICAgICAgICAgaWYgKGNoYW5nZXMubGlzdEl0ZW1zKSB7XHJcbiAgICAgICAgICAgICAgICBzZWxmLmN1cnJlbnRNb2RlbCA9IGNoYW5nZXMubGlzdEl0ZW1zLmN1cnJlbnRWYWx1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoY2hhbmdlcy5udW1iZXJDb2xzICYmIGNoYW5nZXMubnVtYmVyQ29scy5jdXJyZW50VmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIHNlbGYubnVtYmVyQ29sdW1ucyA9IGNoYW5nZXMubnVtYmVyQ29scy5jdXJyZW50VmFsdWU7XHJcbiAgICAgICAgICAgICAgICBzZWxmLmNvbFdpZHRoID0gTWF0aC5jZWlsKDEyIC8gc2VsZi5udW1iZXJDb2x1bW5zKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgLy9UT0RPIHJlbW92ZT9cclxuICAgICAgICBzZWxmLnNvbWVTZWxlY3RlZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIG9iamVjdCA9IHNlbGYucm9sZU1vZGVsO1xyXG5cclxuICAgICAgICAgICAgaWYgKCFvYmplY3QpIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKG9iamVjdCkuc29tZShmdW5jdGlvbiAoa2V5KSB7XHJcbiAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKFwiY21wQWRkcmVzc1JvbGUgc29tZVNlbGVjdGVkOiBcIiArIG9iamVjdFtrZXldKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBvYmplY3Rba2V5XTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvL1RPRE8gcmVtb3ZlP1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBNYW5hZ2VzIHRoZSBzdGF0ZSBvZiB0aGUgb3RoZXIgZmllbGRcclxuICAgICAgICAgKiBAcGFyYW0gaXRlbVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHNlbGYudXBkYXRlU3RhdGUgPSBmdW5jdGlvbiAoaXRlbSkge1xyXG4gICAgICAgICAgICBpZiAoIWl0ZW0udmFsdWUpIHtcclxuXHJcbiAgICAgICAgICAgICAgICBpdGVtLnZhbHVlID0gZmFsc2U7IC8vZXhwbGljaXQgZmFsc2UgdmFsdWVcclxuXHJcbiAgICAgICAgICAgICAgICBpZihpdGVtLmhhc090aGVyRGV0YWlscyl7XHJcbiAgICAgICAgICAgICAgICAgICAgaXRlbS5vdGhlclRleHQgPSBcIlwiO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgLy8gIHNlbGYub25VcGRhdGUoe2xpc3Q6c2VsZi5jdXJyZW50TW9kZWx9KTsgLy9UT0RPIGZpeCBzaG91bGRuJ3QgaGF2ZSB0byB1cGRhdGUsIHNob3VsZCBiZSBkdW1iIGNvbXBvbmVudFxyXG4gICAgfVxyXG5cclxufSkoKTtcclxuXHJcblxyXG4iLCIvKipcclxuICogQ3JlYXRlZCBieSBBYmRlc3NhbWFkIG9uIDgvMTIvMjAxNi5cclxuICovXHJcbihmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ3JlZlByb2R1Y3RMaXN0TW9kdWxlJywgWydleHBhbmRpbmdUYWJsZScsICdyZWZQcm9kdWN0RGV0YWlsc01vZHVsZSddKVxyXG59KSgpO1xyXG5cclxuKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgncmVmUHJvZHVjdExpc3RNb2R1bGUnKVxyXG4gICAgICAgIC5jb21wb25lbnQoJ2NtcFJlZlByb2R1Y3RMaXN0Jywge1xyXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2FwcC9zY3JpcHRzL2NvbXBvbmVudHMvY2FuLXJlZi1wcm9kdWN0cy90cGwtcmVmLXByb2R1Y3QtbGlzdF8yMDE3MDIwM18xNTAyLmh0bWwnLFxyXG4gICAgICAgICAgICBjb250cm9sbGVyOiByZWZQcm9kdWN0TGlzdEN0cmwsXHJcbiAgICAgICAgICAgIGNvbnRyb2xsZXJBczogJ2NycGwnLFxyXG4gICAgICAgICAgICBiaW5kaW5nczoge1xyXG4gICAgICAgICAgICAgICAgcHJvZHVjdHM6ICc8JyxcclxuICAgICAgICAgICAgICAgIG9uVXBkYXRlOiAnJidcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgIGZ1bmN0aW9uIHJlZlByb2R1Y3RMaXN0Q3RybCgpIHtcclxuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XHJcbiAgICAgICAgc2VsZi5pc0RldGFpbFZhbGlkID0gdHJ1ZTtcclxuICAgICAgICBzZWxmLnNlbGVjdFJlY29yZCA9IC0xO1xyXG4gICAgICAgIHNlbGYucmVzZXRUb0NvbGxhcHNlZCA9IGZhbHNlO1xyXG4gICAgICAgIHNlbGYubmV3UHJvZHVjdEZvcm1TaG93biA9IGZhbHNlO1xyXG4gICAgICAgIHNlbGYuJG9uSW5pdCA9IGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgICAgIHNlbGYubmV3UHJvZHVjdEZvcm1TaG93biA9IGZhbHNlO1xyXG4gICAgICAgICAgICBzZWxmLmlzRGV0YWlsVmFsaWQgPSB0cnVlO1xyXG4gICAgICAgICAgICBzZWxmLnNlbGVjdFJlY29yZCA9IC0xO1xyXG5cclxuICAgICAgICAgICAgc2VsZi5jb2xOYW1lcyA9IFtcclxuICAgICAgICAgICAgICAgIHtsYWJlbDogXCJCUkFORF9OQU1FXCIsIGJpbmRpbmc6IFwiYnJhbmROYW1lXCIsIHdpZHRoOiBcIjUwXCJ9LFxyXG4gICAgICAgICAgICAgICAge2xhYmVsOiBcIkNPTVBBTllfTkFNRVwiLCBiaW5kaW5nOiBcImNvbXBhbnlOYW1lXCIsIHdpZHRoOiBcIjUwXCJ9XHJcbiAgICAgICAgICAgIF07XHJcbiAgICAgICAgICAgIHNlbGYucHJvZHVjdExpc3QgPSBbXTtcclxuICAgICAgICAgICAgc2VsZi5uZXdQcm9kdWN0Rm9ybVNob3duID0gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICBpZiAoc2VsZi5wcm9kdWN0cykge1xyXG4gICAgICAgICAgICAgICAgc2VsZi5wcm9kdWN0TGlzdCA9IHNlbGYucHJvZHVjdHM7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gfVxyXG5cclxuXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgc2VsZi4kb25DaGFuZ2VzID0gZnVuY3Rpb24gKGNoYW5nZXMpIHtcclxuXHJcbiAgICAgICAgICAgIGlmIChjaGFuZ2VzLnByb2R1Y3RzKSB7XHJcbiAgICAgICAgICAgICAgICBzZWxmLnByb2R1Y3RMaXN0ID0gY2hhbmdlcy5wcm9kdWN0cy5jdXJyZW50VmFsdWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBzZWxmLmFkZFByb2R1Y3QgPSBmdW5jdGlvbiAocHJvZHVjdCkge1xyXG4gICAgICAgICAgICBzZWxmLnNldFZhbGlkKHRydWUpO1xyXG4gICAgICAgICAgICBzZWxmLnJlc2V0VG9Db2xsYXBzZWQgPSAhc2VsZi5yZXNldFRvQ29sbGFwc2VkO1xyXG4gICAgICAgICAgICBzZWxmLnByb2R1Y3RMaXN0LnB1c2gocHJvZHVjdCk7XHJcbiAgICAgICAgICAgIHNlbGYubmV3UHJvZHVjdEZvcm1TaG93biA9IGZhbHNlO1xyXG4gICAgICAgICAgICBzZWxmLm9uVXBkYXRlKHtyZWNzOiBzZWxmLnByb2R1Y3RMaXN0fSk7XHJcbiAgICAgICAgICAgIHNldFJlY29yZCgtMSk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgc2VsZi51cGRhdGVQcm9kdWN0ID0gZnVuY3Rpb24gKGlkeCwgcHJvZHVjdCkge1xyXG4gICAgICAgICAgICBzZWxmLnByb2R1Y3RMaXN0W2lkeF0gPSBhbmd1bGFyLmNvcHkocHJvZHVjdCk7XHJcbiAgICAgICAgICAgIHNlbGYuc2V0VmFsaWQodHJ1ZSk7XHJcbiAgICAgICAgICAgIHNlbGYub25VcGRhdGUoe3JlY3M6IHNlbGYucHJvZHVjdExpc3R9KTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBzZWxmLmRlbGV0ZVByb2R1Y3QgPSBmdW5jdGlvbiAoaWR4KSB7XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUuZGVidWcoJ3Byb2R1Y3RMaXN0IGRlbGV0ZVByb2R1Y3Q6ICcgKyBpZHgpO1xyXG4gICAgICAgICAgICBzZWxmLnByb2R1Y3RMaXN0LnNwbGljZShpZHgsIDEpO1xyXG4gICAgICAgICAgICBzZWxmLnNldFZhbGlkKHRydWUpO1xyXG4gICAgICAgICAgICBzZXRSZWNvcmQoLTEpO1xyXG4gICAgICAgICAgICBzZWxmLm9uVXBkYXRlKHtyZWNzOiBzZWxmLnByb2R1Y3RMaXN0fSk7XHJcbiAgICAgICAgICAgIHNlbGYucmVzZXRUb0NvbGxhcHNlZCA9ICFzZWxmLnJlc2V0VG9Db2xsYXBzZWQ7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBmdW5jdGlvbiBzZXRSZWNvcmQodmFsdWUpe1xyXG4gICAgICAgICAgICBzZWxmLnNlbGVjdFJlY29yZCA9IHZhbHVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogU2V0cyB0aGUgVUkgc3RhdGUgZm9yIHRoZSBhZGQgbmV3IHRlbXBsYXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgc2VsZi5hZGROZXdQcm9kdWN0U3RhdGU9ZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgc2VsZi5yZXNldFRvQ29sbGFwc2VkID0gIXNlbGYucmVzZXRUb0NvbGxhcHNlZDtcclxuICAgICAgICAgICAgc2VsZi5uZXdQcm9kdWN0Rm9ybVNob3duID0gdHJ1ZTtcclxuICAgICAgICAgICAgc2VsZi5zZXRWYWxpZChmYWxzZSk7XHJcbiAgICAgICAgICAgIHJldHVybihzZWxmLm5ld1Byb2R1Y3RGb3JtU2hvd24pO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgc2VsZi5hZGROZXdEaXNhYmxlZD1mdW5jdGlvbigpe1xyXG4gICAgICAgICAgICByZXR1cm4gKCBzZWxmLm5ld1Byb2R1Y3RGb3JtU2hvd24gfHwgIXNlbGYuaXNEZXRhaWxWYWxpZCk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBzZWxmLnNldFZhbGlkPWZ1bmN0aW9uKHZhbHVlKXtcclxuICAgICAgICAgICAgc2VsZi5pc0RldGFpbFZhbGlkPXZhbHVlO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgc2VsZi5vbk5ld0NhbmNlbD1mdW5jdGlvbigpe1xyXG4gICAgICAgICAgICBzZWxmLnNldFZhbGlkKHRydWUpO1xyXG4gICAgICAgICAgICBzZWxmLm5ld1Byb2R1Y3RGb3JtU2hvd24gPSBmYWxzZVxyXG4gICAgICAgIH1cclxuXHJcblxyXG5cclxuICAgIH1cclxuXHJcblxyXG59KSgpOyIsIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IEFiZGVzc2FtYWQgb24gOC8xMi8yMDE2LlxyXG4gKi9cclxuXHJcbihmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ3JlZlByb2R1Y3REZXRhaWxzTW9kdWxlJywgWydleHBhbmRpbmdUYWJsZScsICdkb3NzaWVyRGF0YUxpc3RzJywgJ2ZpbHRlckxpc3RzJywndWkuc2VsZWN0JywnaHBmYkNvbnN0YW50cyddKVxyXG59KSgpO1xyXG5cclxuKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgncmVmUHJvZHVjdERldGFpbHNNb2R1bGUnKVxyXG4gICAgICAgIC5jb25maWcoZnVuY3Rpb24gKHVpU2VsZWN0Q29uZmlnKSB7XHJcbiAgICAgICAgICAgIC8vY2hvaWNlczogc2VsZWN0MiwgYm9vdHN0cmFwLCBzZWxlY3RpemVcclxuICAgICAgICAgICAgdWlTZWxlY3RDb25maWcudGhlbWUgPSAnc2VsZWN0Mic7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAuY29tcG9uZW50KCdjbXBSZWZQcm9kdWN0RGV0YWlscycsIHtcclxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdhcHAvc2NyaXB0cy9jb21wb25lbnRzL2Nhbi1yZWYtcHJvZHVjdHMvdHBsLXJlZi1wcm9kdWN0LWRldGFpbHNfMjAxNzAyMDNfMTUwMi5odG1sJyxcclxuICAgICAgICAgICAgY29udHJvbGxlcjogcmVmUHJvZHVjdERldGFpbHNDdHJsLFxyXG4gICAgICAgICAgICBiaW5kaW5nczoge1xyXG4gICAgICAgICAgICAgICAgcHJvZHVjdFJlY29yZDogJzwnLFxyXG4gICAgICAgICAgICAgICAgZGVsZXRlQnRuOiAnPCcsXHJcbiAgICAgICAgICAgICAgICBvbkFkZFByb2R1Y3Q6ICcmJyxcclxuICAgICAgICAgICAgICAgIG9uVXBkYXRlOiAnJicsXHJcbiAgICAgICAgICAgICAgICBvbkRlbGV0ZTogJyYnLFxyXG4gICAgICAgICAgICAgICAgb25DYW5jZWw6ICcmJyxcclxuICAgICAgICAgICAgICAgIHNob3dFcnJvcnM6JyYnLFxyXG4gICAgICAgICAgICAgICAgaXNEZXRhaWxWYWxpZDonJicsXHJcbiAgICAgICAgICAgICAgICByZWNvcmRJbmRleDogJzwnXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIHJlZlByb2R1Y3REZXRhaWxzQ3RybC4kaW5qZWN0ID0gWydEb3NzaWVyTGlzdHMnLCckc2NvcGUnLCckdHJhbnNsYXRlJywnT1RIRVInXTtcclxuICAgIGZ1bmN0aW9uIHJlZlByb2R1Y3REZXRhaWxzQ3RybChEb3NzaWVyTGlzdHMsICRzY29wZSwgJHRyYW5zbGF0ZSxPVEhFUikge1xyXG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcclxuICAgICAgICBzZWxmLmRvc2FnZUZvcm1MaXN0ID0gRG9zc2llckxpc3RzLmdldERvc2FnZUZvcm1MaXN0KCk7XHJcbiAgICAgICAgc2VsZi51bml0c0xpc3Q9RG9zc2llckxpc3RzLmdldFVuaXRzTGlzdCgpO1xyXG4gICAgICAgIHNlbGYuYWN0aXZlTGlzdCA9IERvc3NpZXJMaXN0cy5nZXRBY3RpdmVMaXN0KCk7XHJcbiAgICAgICAgc2VsZi5zYXZlUHJlc3NlZD1mYWxzZTtcclxuICAgICAgICBzZWxmLmxhbmcgPSAkdHJhbnNsYXRlLnByb3Bvc2VkTGFuZ3VhZ2UoKSB8fCAkdHJhbnNsYXRlLnVzZSgpO1xyXG4gICAgICAgIHNlbGYucHJvZHVjdE1vZGVsID0ge1xyXG4gICAgICAgICAgICBicmFuZE5hbWU6IFwiXCIsXHJcbiAgICAgICAgICAgLy8gbWVkSW5ncmVkaWVudDogXCJcIixcclxuICAgICAgICAgICAgXCJuZXdJbmdyZWRcIjogXCJZXCIsXHJcbiAgICAgICAgICAgIFwiaW5nSWRcIjogXCJcIixcclxuICAgICAgICAgICAgXCJpbmdMYWJlbFwiOiBcIlwiLFxyXG4gICAgICAgICAgICBzdHJlbmd0aHM6IFwiXCIsXHJcbiAgICAgICAgICAgIHVuaXRzOiBcIlwiLFxyXG4gICAgICAgICAgICBvdGhlclVuaXRzOlwiXCIsXHJcbiAgICAgICAgICAgIHBlcjogXCJcIixcclxuICAgICAgICAgICAgZG9zYWdlRm9ybTogXCJcIixcclxuICAgICAgICAgICAgZG9zYWdlRm9ybU90aGVyOiBcIlwiLFxyXG4gICAgICAgICAgICBjb21wYW55TmFtZTogXCJcIlxyXG4gICAgICAgIH07XHJcbiAgICAgICAgc2VsZi4kb25Jbml0ID0gZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICB9O1xyXG4gICAgICAgIHNlbGYuJG9uQ2hhbmdlcz1mdW5jdGlvbihjaGFuZ2VzKXtcclxuXHJcbiAgICAgICAgICAgIGlmKGNoYW5nZXMucHJvZHVjdFJlY29yZCAmJiBjaGFuZ2VzLnByb2R1Y3RSZWNvcmQuY3VycmVudFZhbHVlKXtcclxuICAgICAgICAgICAgICAgIHNlbGYucHJvZHVjdE1vZGVsID0gYW5ndWxhci5jb3B5KHNlbGYucHJvZHVjdFJlY29yZCk7XHJcbiAgICAgICAgICAgICAgICBzZWxmLmJhY2t1cCA9IGFuZ3VsYXIuY29weShzZWxmLnByb2R1Y3RNb2RlbCk7XHJcbiAgICAgICAgICAgICAgICBzZWxmLnNhdmVQcmVzc2VkPWZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAbmdEb2MgZGV0ZXJtaW5lcyBpZiBkb3NhZ2UgT3RoZXIgc2hvdWxkIGJlIHJlYWRvbmt5XHJcbiAgICAgICAgICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgc2VsZi5pc0Rvc2FnZU90aGVyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZighc2VsZi5wcm9kdWN0TW9kZWwuZG9zYWdlRm9ybSkgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICBpZiAoc2VsZi5wcm9kdWN0TW9kZWwuZG9zYWdlRm9ybS5pZCAgPT09IE9USEVSKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHNlbGYucHJvZHVjdE1vZGVsLmRvc2FnZUZvcm1PdGhlciA9IFwiXCI7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBuZ2RvYyBzaG93IGFuIGVycm9yIG9uIGFuIGluZGl2aWR1YWwgY29udHJvbFxyXG4gICAgICAgICAqIEBwYXJhbSBjdHJsIC1jb250cm9sXHJcbiAgICAgICAgICogQHJldHVybnMge3RydWUgaWYgY3RybCBpbiBlcnJvcn1cclxuICAgICAgICAgKi9cclxuICAgICAgICBzZWxmLnNob3dFcnJvciA9IGZ1bmN0aW9uIChjdHJsKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAoKGN0cmwuJHRvdWNoZWQgJiYgY3RybC4kaW52YWxpZCkgfHwgKGN0cmwuJGludmFsaWQgJiYgc2VsZi5zaG93RXJyb3JzKCkpfHwgKGN0cmwuJGludmFsaWQgJiYgc2VsZi5zYXZlUHJlc3NlZCkpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHNlbGYuc2F2ZVByb2R1Y3QgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmKHNlbGYucHJvZHVjdERldGFpbHNGb3JtLiR2YWxpZCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHNlbGYucHJvZHVjdFJlY29yZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdwcm9kdWN0IGRldGFpbHMgdXBkYXRlIHByb2R1Y3QnKTtcclxuICAgICAgICAgICAgICAgICAgICBzZWxmLm9uVXBkYXRlKHtwcm9kdWN0OiBzZWxmLnByb2R1Y3RNb2RlbH0pO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyAgY29uc29sZS5sb2coJ3Byb2R1Y3QgZGV0YWlscyBhZGQgcHJvZHVjdCcpO1xyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYub25BZGRQcm9kdWN0KHtwcm9kdWN0OiBzZWxmLnByb2R1Y3RNb2RlbH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgc2VsZi5wcm9kdWN0RGV0YWlsc0Zvcm0uJHNldFByaXN0aW5lKCk7XHJcbiAgICAgICAgICAgICAgICBzZWxmLnNhdmVQcmVzc2VkPWZhbHNlO1xyXG4gICAgICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgICAgIHNlbGYuc2F2ZVByZXNzZWQ9dHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9O1xyXG4gICAgICAgIHNlbGYuaW5ncmVkU2VsZWN0aW9uVXBkYXRlZCA9IGZ1bmN0aW9uIChpdGVtLCBtb2RlbCwgbGFiZWwsIGV2ZW50KSB7XHJcbiAgICAgICAgICAgIHNlbGYucHJvZHVjdE1vZGVsLmluZ0lkID0gaXRlbS5pZDtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHNlbGYuZGlzY2FyZENoYW5nZXMgPSBmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICBzZWxmLnByb2R1Y3RNb2RlbCA9IGFuZ3VsYXIuY29weShzZWxmLmJhY2t1cCk7XHJcbiAgICAgICAgICAgLy9zZWxmLnByb2R1Y3RNb2RlbCA9IGJhY2t1cDtcclxuICAgICAgICAgICAgc2VsZi5wcm9kdWN0RGV0YWlsc0Zvcm0uJHNldFByaXN0aW5lKCk7XHJcbiAgICAgICAgICAgIC8vc2VsZi5wcm9kdWN0RGV0YWlsc0Zvcm0uJHNldFByaXN0aW5lKCk7XHJcbiAgICAgICAgICAgIHNlbGYub25DYW5jZWwoKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBzZWxmLmRlbGV0ZSA9IGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgIGlmIChzZWxmLnByb2R1Y3RSZWNvcmQpIHtcclxuICAgICAgICAgICAgICAvLyAgY29uc29sZS5sb2coJ3Byb2R1Y3QgZGV0YWlscyBkZWxldGUgcHJvZHVjdCcpO1xyXG4gICAgICAgICAgICAgICAgc2VsZi5vbkRlbGV0ZSgpO1xyXG4gICAgICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgICAgIC8vVE9ET1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBuZ0RvYyBkZXRlcm1pbmVzIGlmIHVuaXRzIE90aGVyIHNob3VsZCBiZSBzaG93blxyXG4gICAgICAgICAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHNlbGYuaXNVbml0c090aGVyID0gZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICAgICAgaWYoIXNlbGYucHJvZHVjdE1vZGVsKSByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIGlmICgoc2VsZi5wcm9kdWN0TW9kZWwudW5pdHMuaWQgPT09IE9USEVSKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBzZWxmLnByb2R1Y3RNb2RlbC5vdGhlclVuaXRzID0gXCJcIjtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG5cclxuXHJcbiAgICAgICAgJHNjb3BlLiR3YXRjaCgnJGN0cmwucHJvZHVjdERldGFpbHNGb3JtLiRkaXJ0eScsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgc2VsZi5pc0RldGFpbFZhbGlkKHtzdGF0ZTogIXNlbGYucHJvZHVjdERldGFpbHNGb3JtLiRkaXJ0eX0pO1xyXG4gICAgICAgIH0sIHRydWUpO1xyXG5cclxuICAgIH1cclxuXHJcblxyXG59KSgpOyIsIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IGRraWx0eSBvbiAwNC8xMS8yMDE2LlxyXG4gKi9cclxuXHJcbihmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ3Rpc3N1ZXNGbHVpZHNMaXN0JyxbJ3Rpc3N1ZXNGbHVpZHNSZWNvcmQnLCdleHBhbmRpbmdUYWJsZSddKVxyXG59KSgpO1xyXG5cclxuKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgndGlzc3Vlc0ZsdWlkc0xpc3QnKVxyXG4gICAgICAgIC5jb21wb25lbnQoJ2NtcFRpc3N1ZXNGbHVpZHNMaXN0Jywge1xyXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2FwcC9zY3JpcHRzL2NvbXBvbmVudHMvYXBwZW5kaXgtZm91ci90cGwtdGlzc3Vlc0ZsdWlkcy1saXN0XzIwMTcwMjAzXzE1MDIuaHRtbCcsXHJcbiAgICAgICAgICAgIGJpbmRpbmdzOiB7XHJcbiAgICAgICAgICAgICAgICByZWNvcmRzOiAnPCcsXHJcbiAgICAgICAgICAgICAgICBzaG93RXJyb3JzOiAnJicsXHJcbiAgICAgICAgICAgICAgICBzZXJ2aWNlOiAnPCdcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgY29udHJvbGxlcjogdGlzc3Vlc0ZsdWlkc0xpc3RDb250cm9sbGVyLFxyXG4gICAgICAgICAgICBjb250cm9sbGVyQXM6ICd0aXNzdWVzTGlzdFNyY0N0cmwnXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgdGlzc3Vlc0ZsdWlkc0xpc3RDb250cm9sbGVyLiRpbmplY3QgPSBbXCIkZmlsdGVyXCJdO1xyXG5cclxuICAgIGZ1bmN0aW9uIHRpc3N1ZXNGbHVpZHNMaXN0Q29udHJvbGxlcigkZmlsdGVyKSB7XHJcblxyXG4gICAgICAgIHZhciB2bSA9IHRoaXM7XHJcbiAgICAgICAgdm0uc2VsZWN0UmVjb3JkID0gLTE7IC8vdGhlIHJlY29yZCB0byBzZWxlY3QsIGluaXRpYWxseSBzZWxlY3Qgbm9uXHJcbiAgICAgICAgdm0uaXNEZXRhaWxWYWxpZCA9IHRydWU7IC8vdXNlZCB0byB0cmFjayBpZiBkZXRhaWxzIHZhbGlkLiBJZiB0aGV5IGFyZSAgbm90IGRvIG5vdCBhbGxvdyBleHBhbmRlciBjb2xsYXBzZVxyXG4gICAgICAgIHZtLnJlc2V0VG9Db2xsYXBzZWQgPSB0cnVlO1xyXG4gICAgICAgIC8vdm0uZG9zU2VydmljZT1cIlwiO1xyXG4gICAgICAgIHZtLm9uZVJlY29yZD1cIlwiO1xyXG4gICAgICAgIC8vZGVmaW5lIGVtcHR5IG1vZGVsXHJcbiAgICAgICAgdm0ubW9kZWw9e307XHJcbiAgICAgICAgdm0ubW9kZWwudGlzc3Vlc0ZsdWlkc0xpc3Q9W107XHJcbiAgICAgICAgdm0uY29sdW1uRGVmID0gW1xyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBsYWJlbDogXCJTWVNURU1fVFlQRVwiLFxyXG4gICAgICAgICAgICAgICAgYmluZGluZzogXCJzeXN0ZW1UeXBlXCIsXHJcbiAgICAgICAgICAgICAgICB3aWR0aDogXCIyMFwiXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGxhYmVsOiBcIlNZU1RFTV9ERVRBSUxTXCIsXHJcbiAgICAgICAgICAgICAgICBiaW5kaW5nOiBcImRldGFpbHNDb25jYXRcIixcclxuICAgICAgICAgICAgICAgIHdpZHRoOiBcIjQwXCIsXHJcbiAgICAgICAgICAgICAgICBpc0h0bWw6IHRydWVcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbGFiZWw6IFwiU1lTVEVNX09USEVSXCIsXHJcbiAgICAgICAgICAgICAgICBiaW5kaW5nOiBcIm90aGVyRGV0YWlsc1wiLFxyXG4gICAgICAgICAgICAgICAgd2lkdGg6IFwiNDBcIlxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgXTtcclxuXHJcbiAgICAgICAgdm0uJG9uSW5pdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgLy9pbml0IGNvZGUgaGVyZVxyXG4gICAgICAgICAgICB2bS5pc0RldGFpbFZhbGlkID0gdHJ1ZTsgLy91c2VkIHRvIHRyYWNrIGlmIGRldGFpbHMgdmFsaWQuIElmIHRoZXkgYXJlICBub3QgZG8gbm90IGFsbG93IGV4cGFuZGVyIGNvbGxhcHNlXHJcbiAgICAgICAgICAgIHZtLnJlc2V0VG9Db2xsYXBzZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICB2bS5ub1Rpc3N1ZVJlY3MoKTtcclxuICAgICAgICB9O1xyXG5cclxuXHJcbiAgICAgICAgdm0uJG9uQ2hhbmdlcyA9IGZ1bmN0aW9uIChjaGFuZ2VzKSB7XHJcblxyXG4gICAgICAgICAgICBpZiAoY2hhbmdlcy5yZWNvcmRzKSB7XHJcbiAgICAgICAgICAgICAgICB2bS5tb2RlbC50aXNzdWVzRmx1aWRzTGlzdD1jaGFuZ2VzLnJlY29yZHMuY3VycmVudFZhbHVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8qIGlmKGNoYW5nZXMuc2VydmljZSl7XHJcbiAgICAgICAgICAgICB2bS5kb3NTZXJ2aWNlPWNoYW5nZXMuc2VydmljZS5jdXJyZW50VmFsdWU7XHJcbiAgICAgICAgICAgICB9Ki9cclxuICAgICAgICB9O1xyXG5cclxuXHJcbiAgICAgICAgdm0uc2V0VmFsaWQ9ZnVuY3Rpb24odmFsdWUpe1xyXG4gICAgICAgICAgICB2bS5pc0RldGFpbFZhbGlkID0gdmFsdWU7XHJcbiAgICAgICAgfTtcclxuICAgICAgICB2bS5hZGROZXcgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgdmFyIG1heElEID0gZ2V0TWF4SUQoKTtcclxuICAgICAgICAgICAgdmFyIGl0ZW0gPSB7XCJpZFwiOiBtYXhJRCArIDEsIFwic3lzdGVtVHlwZVwiOiBcIlwiLCBkZXRhaWxzQ29uY2F0OiBcIlwiLCBzeXN0ZW06IHt9LCBvdGhlckRldGFpbHM6IFwiXCJ9OyAvL1RPRE8gY2FsbCBhIHNlcnZpY2UgZm9yIHRoaXNcclxuXHJcbiAgICAgICAgICAgIHZtLm1vZGVsLnRpc3N1ZXNGbHVpZHNMaXN0LnB1c2goaXRlbSk7XHJcbiAgICAgICAgICAgIHZtLnJlc2V0VG9Db2xsYXBzZWQ9ICF2bS5yZXNldFRvQ29sbGFwc2VkO1xyXG4gICAgICAgICAgICB2bS5zZWxlY3RSZWNvcmQ9KDApO1xyXG4gICAgICAgICAgICB2bS5zZWxlY3RSZWNvcmQ9KHZtLm1vZGVsLnRpc3N1ZXNGbHVpZHNMaXN0Lmxlbmd0aC0xKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHZtLmRlbGV0ZVJlY29yZD1mdW5jdGlvbihyZWNJZCl7XHJcblxyXG4gICAgICAgICAgICB2YXIgaWR4ID0gdm0ubW9kZWwudGlzc3Vlc0ZsdWlkc0xpc3QuaW5kZXhPZihcclxuICAgICAgICAgICAgICAgICRmaWx0ZXIoJ2ZpbHRlcicpKHZtLm1vZGVsLnRpc3N1ZXNGbHVpZHNMaXN0LCB7aWQ6IHJlY0lkfSwgdHJ1ZSlbMF0pO1xyXG4gICAgICAgICAgICB2bS5tb2RlbC50aXNzdWVzRmx1aWRzTGlzdC5zcGxpY2UoaWR4LCAxKTtcclxuICAgICAgICB9O1xyXG5cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZ2V0TWF4SUQoKXtcclxuICAgICAgICAgICAgdmFyIGlkPTA7XHJcbiAgICAgICAgICAgIGZvcih2YXIgaT0wO2k8dm0ubW9kZWwudGlzc3Vlc0ZsdWlkc0xpc3QubGVuZ3RoO2krKyl7XHJcbiAgICAgICAgICAgICAgICBpZih2bS5tb2RlbC50aXNzdWVzRmx1aWRzTGlzdFtpXS5pZD5pZCl7XHJcbiAgICAgICAgICAgICAgICAgICAgaWQ9dm0ubW9kZWwudGlzc3Vlc0ZsdWlkc0xpc3RbaV0uaWQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuKGlkKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZtLm5vVGlzc3VlUmVjcyA9IGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgICAgIGlmICh2bS5tb2RlbC50aXNzdWVzRmx1aWRzTGlzdC5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICB2bS5vbmVSZWNvcmQgPSBcInNlbGVjdGVkXCI7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdm0ub25lUmVjb3JkID0gXCJcIjtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcblxyXG4gICAgICAgIH07XHJcbiAgICAgICAgdm0uZGlzYWJsZUFkZCA9IGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgICAgIGlmICh2bS5ub1Rpc3N1ZVJlY3MoKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiAodm0udGlzc3Vlc0xpc3RGb3JtLiRpbnZhbGlkKVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgdm0uc3lzdGVtQWxyZWFkeVVzZWQgPSBmdW5jdGlvbiAoc3lzdGVtVmFsKSB7XHJcbiAgICAgICAgICAgIHZhciBzeXN0ZW1FeGlzdHMgPSAwO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZtLm1vZGVsLnRpc3N1ZXNGbHVpZHNMaXN0Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodm0ubW9kZWwudGlzc3Vlc0ZsdWlkc0xpc3RbaV0uc3lzdGVtVHlwZSA9PT0gc3lzdGVtVmFsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3lzdGVtRXhpc3RzKys7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHN5c3RlbUV4aXN0cyA+IDEpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgIH1cclxufSkoKTsiLCIvKipcclxuICogQ3JlYXRlZCBieSBka2lsdHkgb24gMDQvMTEvMjAxNi5cclxuICovXHJcblxyXG4oZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKCd0aXNzdWVzRmx1aWRzUmVjb3JkJyxcclxuICAgICAgICAgICAgWydkb3NzaWVyRGF0YUxpc3RzJyxcclxuICAgICAgICAgICAgICAgICduZXJ2b3VzTW9kdWxlJyxcclxuICAgICAgICAgICAgICAgICdkaWdlc3RpdmVNb2R1bGUnLFxyXG4gICAgICAgICAgICAgICAgJ2NhcmRpb01vZHVsZScsXHJcbiAgICAgICAgICAgICAgICAnaW1tdW5lTW9kdWxlJyxcclxuICAgICAgICAgICAgICAgICdtdXNjbGVNb2R1bGUnLFxyXG4gICAgICAgICAgICAgICAgJ290aGVyVGlzc3Vlc01vZHVsZScsXHJcbiAgICAgICAgICAgICAgICAncmVwcm9kTW9kdWxlJyxcclxuICAgICAgICAgICAgICAgICdza2luTW9kdWxlJ1xyXG4gICAgICAgICAgICBdKVxyXG59KSgpO1xyXG5cclxuKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgndGlzc3Vlc0ZsdWlkc1JlY29yZCcpXHJcbiAgICAgICAgLmNvbXBvbmVudCgnY21wVGlzc3Vlc0ZsdWlkc1JlY29yZCcsIHtcclxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdhcHAvc2NyaXB0cy9jb21wb25lbnRzL2FwcGVuZGl4LWZvdXIvdHBsLXRpaXNzdWVGbHVpZHMtcmVjb3JkXzIwMTcwMjAzXzE1MDIuaHRtbCcsXHJcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6IHRpc3N1ZXNGbHVpZHNDb250cm9sbGVyLFxyXG4gICAgICAgICAgICBjb250cm9sbGVyQXM6ICd0aXNzdWVzU3JjQ3RybCcsXHJcbiAgICAgICAgICAgIGJpbmRpbmdzOiB7XHJcbiAgICAgICAgICAgICAgICByZWNvcmQ6ICc8JyxcclxuICAgICAgICAgICAgICAgIG9uRGVsZXRlOiAnJicsXHJcbiAgICAgICAgICAgICAgICBzaG93RXJyb3JzOiAnJicsXHJcbiAgICAgICAgICAgICAgICBzZXJ2aWNlOiAnPCcsXHJcbiAgICAgICAgICAgICAgICBzeXN0ZW1Vc2VkOiAnJidcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgIHRpc3N1ZXNGbHVpZHNDb250cm9sbGVyLiRpbmplY3QgPSBbJ0Rvc3NpZXJMaXN0cycsICckdHJhbnNsYXRlJywgJyRmaWx0ZXInXTtcclxuXHJcbiAgICBmdW5jdGlvbiB0aXNzdWVzRmx1aWRzQ29udHJvbGxlcihEb3NzaWVyTGlzdHMsICR0cmFuc2xhdGUsICRmaWx0ZXIpIHtcclxuICAgICAgICB2YXIgdm0gPSB0aGlzO1xyXG4gICAgICAgIHZtLnN5c3RlbUxpc3QgPSBEb3NzaWVyTGlzdHMuZ2V0VGlzc3Vlc1N5c3RlbSgpO1xyXG4gICAgICAgIHZtLmZsdWlkc0xpc3RzID0gRG9zc2llckxpc3RzO1xyXG4gICAgICAgIHZtLmRvc1NlcnZpY2UgPSBcIlwiO1xyXG4gICAgICAgIHZtLmlzVXNlZCA9IGZhbHNlO1xyXG4gICAgICAgIC8qdm0ubmVydm91c0xpc3QgPSBEb3NzaWVyTGlzdHMuZ2V0TmVydm91c1N5c3RlbSgpO1xyXG4gICAgICAgICB2bS5kaWdlc3RMaXN0ID0gRG9zc2llckxpc3RzLmdldERpZ2VzdGl2ZVN5c3RlbSgpO1xyXG4gICAgICAgICB2bS5jYXJkaW9MaXN0ID0gRG9zc2llckxpc3RzLmdldENhcmRpb1N5c3RlbSgpO1xyXG4gICAgICAgICB2bS5vdGhlckxpc3QgPSBEb3NzaWVyTGlzdHMuZ2V0T3RoZXJTeXN0ZW0oKTtcclxuICAgICAgICAgdm0uaW1tdW5lTGlzdCA9IERvc3NpZXJMaXN0cy5nZXRJbW11bmVTeXN0ZW0oKTtcclxuICAgICAgICAgdm0uc2tpbkxpc3QgPSBEb3NzaWVyTGlzdHMuZ2V0U2tpblN5c3RlbSgpO1xyXG4gICAgICAgICB2bS5yZXByb2RMaXN0ID0gRG9zc2llckxpc3RzLmdldFJlcHJvZFN5c3RlbSgpO1xyXG4gICAgICAgICB2bS5tdXNjbGVMaXN0ID0gRG9zc2llckxpc3RzLmdldE11c2NsZVN5c3RlbSgpOyovXHJcbiAgICAgICAgdm0uc2VsZWN0ZWRTeXN0ZW1MaXN0ID0gW107XHJcbiAgICAgICAgdm0ubW9kZWwgPSB7fTtcclxuXHJcbiAgICAgICAgdm0uJG9uSW5pdCA9IGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdm0uJG9uQ2hhbmdlcyA9IGZ1bmN0aW9uIChjaGFuZ2VzKSB7XHJcblxyXG4gICAgICAgICAgICBpZiAoY2hhbmdlcy5yZWNvcmQpIHtcclxuICAgICAgICAgICAgICAgIHZtLm1vZGVsID0gY2hhbmdlcy5yZWNvcmQuY3VycmVudFZhbHVlO1xyXG4gICAgICAgICAgICAgICAgLy9zZXRTZWxlY3RlZExpc3Qodm0ubW9kZWwuc3lzdGVtVHlwZSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoY2hhbmdlcy5zZXJ2aWNlKSB7XHJcbiAgICAgICAgICAgICAgICB2bS5kb3NTZXJ2aWNlID0gY2hhbmdlcy5zZXJ2aWNlLmN1cnJlbnRWYWx1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZtLmRlbGV0ZVJlY29yZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdm0ub25EZWxldGUoe2lkOiB2bS5tb2RlbC5pZH0pO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogU2hvd3MgdGhlIGVycm9ycyBmb3IgaW5kaXZpZHVhbCBjb250cm9sc1xyXG4gICAgICAgICAqIEBwYXJhbSBjdHJsXHJcbiAgICAgICAgICogQHJldHVybnMgeyp9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdm0uc2hvd0Vycm9yID0gZnVuY3Rpb24gKGN0cmwpIHtcclxuICAgICAgICAgICAgaWYgKCFjdHJsKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oXCJObyBjb250cm9sIGZvdW5kIGluIHRpc3N1ZXNGbHVpZHMtcmVjb3JkXCIpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiAoKGN0cmwuJGludmFsaWQgJiYgY3RybC4kdG91Y2hlZCkgfHwgKGN0cmwuJGludmFsaWQgJiYgdm0uc2hvd0Vycm9ycygpKSApXHJcbiAgICAgICAgfTtcclxuICAgICAgICB2bS5zeXN0ZW1DaGFuZ2VkID0gZnVuY3Rpb24gKGN0cmwpIHtcclxuICAgICAgICAgICAgdm0ubW9kZWwuc3lzdGVtID0ge307IC8vY2xlYXIgb3V0IG9sZFxyXG4gICAgICAgICAgICB2bS5tb2RlbC5kZXRhaWxzQ29uY2F0ID0gXCJcIjtcclxuXHJcbiAgICAgICAgICAgIHZtLmlzVXNlZCA9IHZtLnN5c3RlbVVzZWQoe3ZhbHVlOiB2bS5tb2RlbC5zeXN0ZW1UeXBlfSk7XHJcbiAgICAgICAgICAgIGN0cmwuJHNldFZhbGlkaXR5KFwiZHVwbGljYXRlUm9sZVwiLCAhdm0uaXNVc2VkKTtcclxuICAgICAgICAgICAgaWYgKHZtLmlzVXNlZCkge1xyXG4gICAgICAgICAgICAgICAgdm0ubW9kZWwuc3lzdGVtID0ge307XHJcbiAgICAgICAgICAgICAgICB2bS5vdGhlckRldGFpbHMgPSBcIlwiO1xyXG4gICAgICAgICAgICAgICAgdm0ubW9kZWwuZGV0YWlsc0NvbmNhdCA9IFwiXCI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgc3dpdGNoICh2bS5tb2RlbC5zeXN0ZW1UeXBlKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIERvc3NpZXJMaXN0cy5nZXROZXJ2b3VzU3lzdGVtVmFsdWUoKTpcclxuICAgICAgICAgICAgICAgICAgICAvL2dldCBtb2RlbFxyXG4gICAgICAgICAgICAgICAgICAgIHZtLm1vZGVsLnN5c3RlbSA9IHZtLmRvc1NlcnZpY2UuZ2V0RGVmYXVsdE5lcnZvdXNTeXN0ZW0oKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgRG9zc2llckxpc3RzLmdldERpZ2VzdGl2ZVN5c3RlbVZhbHVlKCk6XHJcbiAgICAgICAgICAgICAgICAgICAgLy9nZXQgbW9kZWxcclxuICAgICAgICAgICAgICAgICAgICB2bS5tb2RlbC5zeXN0ZW0gPSB2bS5kb3NTZXJ2aWNlLmdldERlZmF1bHREaWdlc3RpdmVTeXN0ZW0oKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgRG9zc2llckxpc3RzLmdldEltbXVuZVN5c3RlbVZhbHVlKCk6XHJcbiAgICAgICAgICAgICAgICAgICAgLy9nZXQgbW9kZWxcclxuICAgICAgICAgICAgICAgICAgICB2bS5tb2RlbC5zeXN0ZW0gPSB2bS5kb3NTZXJ2aWNlLmdldERlZmF1bHRJbW11bmVTeXN0ZW0oKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgRG9zc2llckxpc3RzLmdldE11c2NsZVN5c3RlbVZhbHVlKCk6XHJcbiAgICAgICAgICAgICAgICAgICAgLy9nZXQgbW9kZWxcclxuICAgICAgICAgICAgICAgICAgICB2bS5tb2RlbC5zeXN0ZW0gPSB2bS5kb3NTZXJ2aWNlLmdldERlZmF1bHRNdXNjbGVTeXN0ZW0oKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgRG9zc2llckxpc3RzLmdldE90aGVyVGlzc3Vlc1N5c3RlbVZhbHVlKCk6XHJcbiAgICAgICAgICAgICAgICAgICAgLy9nZXQgbW9kZWxcclxuICAgICAgICAgICAgICAgICAgICB2bS5tb2RlbC5zeXN0ZW0gPSB2bS5kb3NTZXJ2aWNlLmdldERlZmF1bHRPdGhlclN5c3RlbSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBEb3NzaWVyTGlzdHMuZ2V0UmVwcm9kdWN0aXZlU3lzdGVtVmFsdWUoKTpcclxuICAgICAgICAgICAgICAgICAgICAvL2dldCBtb2RlbFxyXG4gICAgICAgICAgICAgICAgICAgIHZtLm1vZGVsLnN5c3RlbSA9IHZtLmRvc1NlcnZpY2UuZ2V0RGVmYXVsdFJlcHJvZHVjdGl2ZVN5c3RlbSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBEb3NzaWVyTGlzdHMuZ2V0U2tpblN5c3RlbVZhbHVlKCk6XHJcbiAgICAgICAgICAgICAgICAgICAgLy9nZXQgbW9kZWxcclxuICAgICAgICAgICAgICAgICAgICB2bS5tb2RlbC5zeXN0ZW0gPSB2bS5kb3NTZXJ2aWNlLmdldERlZmF1bHRTa2luU3lzdGVtKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgICAgY2FzZSBEb3NzaWVyTGlzdHMuZ2V0Q2FyZGlvU3lzdGVtVmFsdWUoKTpcclxuICAgICAgICAgICAgICAgICAgICAvL2dldCBtb2RlbFxyXG4gICAgICAgICAgICAgICAgICAgIHZtLm1vZGVsLnN5c3RlbSA9IHZtLmRvc1NlcnZpY2UuZ2V0RGVmYXVsdENhcmRpb1N5c3RlbSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICB2bS5tb2RlbC5zeXN0ZW0gPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICB2bS5vdGhlckRldGFpbHMgPSBcIlwiO1xyXG4gICAgICAgICAgICAgICAgICAgIHZtLm1vZGVsLmRldGFpbHNDb25jYXQgPSBcIlwiO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB2bS5vdGhlckNoYW5nZWQoKTsgLy91cGRhdGUgb3RoZXJTdGF0ZSwgc2hvdWxkIGJlIGVtcHR5XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBVc2VkIGZvciB1aSBwdXJwb3NlcyBvbmx5XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdm0ub3RoZXJDaGFuZ2VkID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2bS5tb2RlbC5vdGhlckRldGFpbHMgPSB2bS5tb2RlbC5zeXN0ZW0ub3RoZXJEZXRhaWxzO1xyXG5cclxuICAgICAgICB9O1xyXG4gICAgICAgIHZtLnVwZGF0ZUNvbmNhdCA9IGZ1bmN0aW9uIChhbGlhcywgdG9BZGQpIHtcclxuICAgICAgICAgICAgdmFyIGN1cnJlbnRMYW5nID0gJHRyYW5zbGF0ZS5wcm9wb3NlZExhbmd1YWdlKCkgfHwgJHRyYW5zbGF0ZS51c2UoKTtcclxuICAgICAgICAgICAgdmFyIHRyYW5zbGF0ZVRleHQgPSAkdHJhbnNsYXRlLmluc3RhbnQoYWxpYXMsIFwiXCIsICcnLCBjdXJyZW50TGFuZyk7XHJcbiAgICAgICAgICAgIHZhciByZWNvcmRzID0gdm0ubW9kZWwuZGV0YWlsc0NvbmNhdC5zcGxpdChcIjxicj5cIik7XHJcbiAgICAgICAgICAgIHZhciBpbmRleCA9IC0xO1xyXG5cclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZWNvcmRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAocmVjb3Jkc1tpXSA9PSB0cmFuc2xhdGVUZXh0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaW5kZXggPSBpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChpbmRleCA9PT0gLTEgJiYgdG9BZGQpIHtcclxuICAgICAgICAgICAgICAgIGlmICghcmVjb3Jkc1swXSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlY29yZHNbMF0gPSB0cmFuc2xhdGVUZXh0XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlY29yZHMucHVzaCh0cmFuc2xhdGVUZXh0KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJlY29yZHMgPSAkZmlsdGVyKCdvcmRlckJ5JykocmVjb3Jkcyk7XHJcbiAgICAgICAgICAgICAgICB2bS5tb2RlbC5kZXRhaWxzQ29uY2F0ID0gXCJcIjtcclxuICAgICAgICAgICAgICAgIHZtLm1vZGVsLmRldGFpbHNDb25jYXQgPSByZWNvcmRzWzBdO1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgcyA9IDE7IHMgPCByZWNvcmRzLmxlbmd0aDsgcysrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdm0ubW9kZWwuZGV0YWlsc0NvbmNhdCA9IHZtLm1vZGVsLmRldGFpbHNDb25jYXQgKyBcIjxicj5cIiArIHJlY29yZHNbc107XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKCF0b0FkZCAmJiBpbmRleCAhPT0gLTEpIHtcclxuICAgICAgICAgICAgICAgIHZhciBuZXdDb25jYXQgPSBcIlwiO1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCByZWNvcmRzLmxlbmd0aDsgaisrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGogIT09IGluZGV4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld0NvbmNhdCA9IG5ld0NvbmNhdCArIHJlY29yZHNbal0gKyBcIjxicj5cIlxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHZtLm1vZGVsLmRldGFpbHNDb25jYXQgPSBuZXdDb25jYXQuc3Vic3RyaW5nKDAsIG5ld0NvbmNhdC5sZW5ndGggLSA0KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFNldHMgdGhlIHN0YXRlIG9mIHRoZSBvdGhlciBmaWVsZCB3aGVuIHN5c3RlbSBkZXRhaWxzIGlzIG90aGVyXHJcbiAgICAgICAgICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgLyogIHZtLmlzT3RoZXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgIHZhciB2YWwgPSBmYWxzZTtcclxuICAgICAgICAgc3dpdGNoICh2bS5tb2RlbC5zeXN0ZW1EZXRhaWxzKSB7XHJcbiAgICAgICAgIGNhc2UgXCJDQVJESU9fT1RIRVJcIjpcclxuICAgICAgICAgY2FzZSBcIlJFUFJPRF9PVEhFUlwiOlxyXG4gICAgICAgICBjYXNlIFwiRElHRVNUSVZFX09USEVSXCI6XHJcbiAgICAgICAgIGNhc2UgXCJORVJWT1VTX09USEVSXCI6XHJcbiAgICAgICAgIGNhc2UgXCJJTU1VTkVfT1RIRVJcIjpcclxuICAgICAgICAgY2FzZSBcIk1VU0NMRV9PVEhFUlwiOlxyXG4gICAgICAgICBjYXNlIFwiRkxVSURTX09USEVSXCI6XHJcbiAgICAgICAgIGNhc2UgXCJTS0lOX09USEVSXCI6XHJcbiAgICAgICAgIHZhbCA9IHRydWU7XHJcbiAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICB2bS5tb2RlbC5vdGhlckRldGFpbHMgPSBcIlwiO1xyXG4gICAgICAgICB2YWwgPSBmYWxzZTtcclxuICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgIH1cclxuICAgICAgICAgcmV0dXJuIHZhbDtcclxuICAgICAgICAgfTsqL1xyXG5cclxuICAgICAgICAvKiAgZnVuY3Rpb24gc2V0U2VsZWN0ZWRMaXN0KHZhbHVlKSB7XHJcbiAgICAgICAgIGlmICghdmFsdWUpIHtcclxuICAgICAgICAgdm0uc2VsZWN0ZWRTeXN0ZW1MaXN0ID0gW107XHJcbiAgICAgICAgIH1cclxuICAgICAgICAgc3dpdGNoICh2YWx1ZSkge1xyXG5cclxuICAgICAgICAgY2FzZSAnTkVSVk9VU19TWVNURU0nOlxyXG4gICAgICAgICB2bS5zZWxlY3RlZFN5c3RlbUxpc3QgPSB2bS5uZXJ2b3VzTGlzdDtcclxuICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgIGNhc2UgJ0RJR0VTVElWRV9TWVNURU0nOlxyXG4gICAgICAgICB2bS5zZWxlY3RlZFN5c3RlbUxpc3QgPSB2bS5kaWdlc3RMaXN0O1xyXG4gICAgICAgICBicmVhaztcclxuICAgICAgICAgY2FzZSAnUkVQUk9EVUNUX1NZU1RFTSc6XHJcbiAgICAgICAgIHZtLnNlbGVjdGVkU3lzdGVtTGlzdCA9IHZtLnJlcHJvZExpc3Q7XHJcbiAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICBjYXNlICdDQVJESU9fU1lTVEVNJzpcclxuICAgICAgICAgdm0uc2VsZWN0ZWRTeXN0ZW1MaXN0ID0gdm0uY2FyZGlvTGlzdDtcclxuICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgIGNhc2UgJ0lNTVVORV9TWVNURU0nOlxyXG4gICAgICAgICB2bS5zZWxlY3RlZFN5c3RlbUxpc3QgPSB2bS5pbW11bmVMaXN0O1xyXG4gICAgICAgICBicmVhaztcclxuICAgICAgICAgY2FzZSAnU0tJTkdMQU5EX1NZU1RFTSc6XHJcbiAgICAgICAgIHZtLnNlbGVjdGVkU3lzdGVtTGlzdCA9IHZtLnNraW5MaXN0O1xyXG4gICAgICAgICBicmVhaztcclxuICAgICAgICAgY2FzZSAnTVVTQ1VMT19TWVNURU0nOlxyXG4gICAgICAgICB2bS5zZWxlY3RlZFN5c3RlbUxpc3QgPSB2bS5tdXNjbGVMaXN0O1xyXG4gICAgICAgICBicmVhaztcclxuICAgICAgICAgY2FzZSAnT1RIRVJUSVNTVUVfU1lTVEVNJzpcclxuICAgICAgICAgdm0uc2VsZWN0ZWRTeXN0ZW1MaXN0ID0gdm0ub3RoZXJMaXN0O1xyXG4gICAgICAgICBicmVhaztcclxuICAgICAgICAgY2FzZSAnJzpcclxuICAgICAgICAgdm0uc2VsZWN0ZWRTeXN0ZW1MaXN0ID0gW107Ly9lbXB0eSBjYXNlXHJcbiAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICBjb25zb2xlLndhcm4oXCJJbnZhbGlkIFRpc3N1ZXMvRmx1aWRzIFN5c3RlbSBcIiArIHZhbHVlKTtcclxuICAgICAgICAgdm0uc2VsZWN0ZWRTeXN0ZW1MaXN0ID0gW107XHJcbiAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICB9XHJcbiAgICAgICAgIH1cclxuICAgICAgICAgKi9cclxuXHJcbiAgICB9XHJcbn0pKCk7IiwiLyoqXHJcbiAqIENyZWF0ZWQgYnkgZGtpbHR5IG9uIDE3LzExLzIwMTYuXHJcbiAqL1xyXG5cclxuKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgnc2tpbk1vZHVsZScsIFtdKVxyXG59KSgpO1xyXG5cclxuXHJcbihmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ3NraW5Nb2R1bGUnKVxyXG4gICAgICAgIC5jb21wb25lbnQoJ2NtcFNraW5TeXN0ZW0nLCB7XHJcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnYXBwL3NjcmlwdHMvY29tcG9uZW50cy9hcHBlbmRpeC1mb3VyL3RwbC1za2luXzIwMTcwMjAzXzE1MDIuaHRtbCcsXHJcbiAgICAgICAgICAgIGNvbnRyb2xsZXJBczogJ3N5c0N0cmwnLFxyXG4gICAgICAgICAgICBjb250cm9sbGVyOiBza2luU3lzdGVtQ29udHJvbGxlcixcclxuICAgICAgICAgICAgYmluZGluZ3M6IHtcclxuICAgICAgICAgICAgICAgIHJlY29yZDogJzwnLFxyXG4gICAgICAgICAgICAgICAgb3RoZXJVcGRhdGU6ICcmJyxcclxuICAgICAgICAgICAgICAgIGNvbmNhdFVwZGF0ZTogJyYnXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfSk7XHJcbiAgICBmdW5jdGlvbiBza2luU3lzdGVtQ29udHJvbGxlcigpIHtcclxuICAgICAgICB2YXIgdm0gPSB0aGlzO1xyXG4gICAgICAgIHZtLm1vZGVsID0ge307XHJcbiAgICAgICAgdm0uaXNTZWxlY3RlZCA9IFwiXCI7XHJcbiAgICAgICAgdm0uJG9uSW5pdCA9IGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgfTtcclxuICAgICAgICB2bS4kb25DaGFuZ2VzID0gZnVuY3Rpb24gKGNoYW5nZXMpIHtcclxuICAgICAgICAgICAgaWYgKGNoYW5nZXMucmVjb3JkKSB7XHJcbiAgICAgICAgICAgICAgICB2bS5tb2RlbCA9IChjaGFuZ2VzLnJlY29yZC5jdXJyZW50VmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgdm0udXBkYXRlRXJyb3JTdGF0ZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdm0udXBkYXRlRXJyb3JTdGF0ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyh2bS5tb2RlbCk7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgdmFyIHZhbCA9IHZtLm1vZGVsW2tleXNbaV1dO1xyXG4gICAgICAgICAgICAgICAgaWYgKHZhbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChrZXlzW2ldID09PSAnb3RoZXJTa2luJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXZtLm1vZGVsLm90aGVyRGV0YWlscykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdm0uaXNTZWxlY3RlZCA9IFwiXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm5cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2bS5pc1NlbGVjdGVkID0gXCJzZWxlY3RlZFwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdm0uaXNTZWxlY3RlZCA9IFwic2VsZWN0ZWRcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2bS5pc1NlbGVjdGVkID0gXCJcIlxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZtLmRldGFpbHNDaGFuZ2VkID0gZnVuY3Rpb24gKGFsaWFzLCB2YWx1ZSkge1xyXG5cclxuICAgICAgICAgICAgdm0uY29uY2F0VXBkYXRlKHsnYWxpYXMnOiBhbGlhcywgJ3ZhbHVlJzogdmFsdWV9KTtcclxuICAgICAgICAgICAgdm0udXBkYXRlRXJyb3JTdGF0ZSgpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZtLm90aGVyQ2hhbmdlZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIHN0YXRlID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGlmICh2bS5tb2RlbC5vdGhlclNraW4pIHtcclxuICAgICAgICAgICAgICAgIHN0YXRlID0gdHJ1ZTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHN0YXRlID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB2bS5tb2RlbC5vdGhlckRldGFpbHMgPSBcIlwiO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZtLm90aGVyVXBkYXRlKCk7XHJcbiAgICAgICAgICAgIHZtLnVwZGF0ZUVycm9yU3RhdGUoKTtcclxuICAgICAgICAgICAgcmV0dXJuIHN0YXRlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSkoKTtcclxuIiwiLyoqXHJcbiAqIENyZWF0ZWQgYnkgZGtpbHR5IG9uIDE3LzExLzIwMTYuXHJcbiAqL1xyXG5cclxuKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgncmVwcm9kTW9kdWxlJywgW10pXHJcbn0pKCk7XHJcblxyXG5cclxuKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgncmVwcm9kTW9kdWxlJylcclxuICAgICAgICAuY29tcG9uZW50KCdjbXBSZXByb2R1Y3RpdmVTeXN0ZW0nLCB7XHJcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnYXBwL3NjcmlwdHMvY29tcG9uZW50cy9hcHBlbmRpeC1mb3VyL3RwbC1yZXByb2R1Y3RpdmVfMjAxNzAyMDNfMTUwMi5odG1sJyxcclxuICAgICAgICAgICAgY29udHJvbGxlckFzOiAnc3lzQ3RybCcsXHJcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6IHJlcHJvZHVjdGl2ZVN5c3RlbUNvbnRyb2xsZXIsXHJcbiAgICAgICAgICAgIGJpbmRpbmdzOiB7XHJcbiAgICAgICAgICAgICAgICByZWNvcmQ6ICc8JyxcclxuICAgICAgICAgICAgICAgIG90aGVyVXBkYXRlOiAnJicsXHJcbiAgICAgICAgICAgICAgICBjb25jYXRVcGRhdGU6ICcmJ1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH0pO1xyXG4gICAgZnVuY3Rpb24gcmVwcm9kdWN0aXZlU3lzdGVtQ29udHJvbGxlcigpIHtcclxuICAgICAgICB2YXIgdm0gPSB0aGlzO1xyXG4gICAgICAgIHZtLm1vZGVsID0ge307XHJcbiAgICAgICAgdm0uaXNTZWxlY3RlZCA9IFwiXCI7XHJcbiAgICAgICAgdm0uJG9uSW5pdCA9IGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgfTtcclxuICAgICAgICB2bS4kb25DaGFuZ2VzID0gZnVuY3Rpb24gKGNoYW5nZXMpIHtcclxuICAgICAgICAgICAgaWYgKGNoYW5nZXMucmVjb3JkKSB7XHJcbiAgICAgICAgICAgICAgICB2bS5tb2RlbCA9IChjaGFuZ2VzLnJlY29yZC5jdXJyZW50VmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgdm0udXBkYXRlRXJyb3JTdGF0ZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdm0uZGV0YWlsc0NoYW5nZWQgPSBmdW5jdGlvbiAoYWxpYXMsIHZhbHVlKSB7XHJcblxyXG4gICAgICAgICAgICB2bS5jb25jYXRVcGRhdGUoeydhbGlhcyc6IGFsaWFzLCAndmFsdWUnOiB2YWx1ZX0pO1xyXG4gICAgICAgICAgICB2bS51cGRhdGVFcnJvclN0YXRlKCk7XHJcbiAgICAgICAgfTtcclxuXHJcblxyXG4gICAgICAgIHZtLnVwZGF0ZUVycm9yU3RhdGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXModm0ubW9kZWwpO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHZhciB2YWwgPSB2bS5tb2RlbFtrZXlzW2ldXTtcclxuICAgICAgICAgICAgICAgIGlmICh2YWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoa2V5c1tpXSA9PT0gJ290aGVyUmVwcm9kdWN0aXZlJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXZtLm1vZGVsLm90aGVyRGV0YWlscykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdm0uaXNTZWxlY3RlZCA9IFwiXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm5cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2bS5pc1NlbGVjdGVkID0gXCJzZWxlY3RlZFwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdm0uaXNTZWxlY3RlZCA9IFwic2VsZWN0ZWRcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2bS5pc1NlbGVjdGVkID0gXCJcIlxyXG4gICAgICAgIH07XHJcblxyXG5cclxuICAgICAgICB2bS5vdGhlckNoYW5nZWQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBzdGF0ZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICBpZiAodm0ubW9kZWwub3RoZXJSZXByb2R1Y3RpdmUpIHtcclxuICAgICAgICAgICAgICAgIHN0YXRlID0gdHJ1ZTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHN0YXRlID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB2bS5tb2RlbC5vdGhlckRldGFpbHMgPSBcIlwiO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZtLm90aGVyVXBkYXRlKCk7XHJcbiAgICAgICAgICAgIHZtLnVwZGF0ZUVycm9yU3RhdGUoKTtcclxuICAgICAgICAgICAgcmV0dXJuIHN0YXRlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSkoKTtcclxuIiwiLyoqXHJcbiAqIENyZWF0ZWQgYnkgZGtpbHR5IG9uIDE3LzExLzIwMTYuXHJcbiAqL1xyXG5cclxuKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgnb3RoZXJUaXNzdWVzTW9kdWxlJywgW10pXHJcbn0pKCk7XHJcblxyXG5cclxuKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgnb3RoZXJUaXNzdWVzTW9kdWxlJylcclxuICAgICAgICAuY29tcG9uZW50KCdjbXBPdGhlclRpc3N1ZXNTeXN0ZW0nLCB7XHJcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnYXBwL3NjcmlwdHMvY29tcG9uZW50cy9hcHBlbmRpeC1mb3VyL3RwbC1vdGhlci10aXNzdWVfMjAxNzAyMDNfMTUwMi5odG1sJyxcclxuICAgICAgICAgICAgY29udHJvbGxlckFzOiAnc3lzQ3RybCcsXHJcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6IG90aGVyVGlzc3VlU3lzdGVtQ29udHJvbGxlcixcclxuICAgICAgICAgICAgYmluZGluZ3M6IHtcclxuICAgICAgICAgICAgICAgIHJlY29yZDogJzwnLFxyXG4gICAgICAgICAgICAgICAgb3RoZXJVcGRhdGU6ICcmJyxcclxuICAgICAgICAgICAgICAgIGNvbmNhdFVwZGF0ZTogJyYnXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfSk7XHJcbiAgICBmdW5jdGlvbiBvdGhlclRpc3N1ZVN5c3RlbUNvbnRyb2xsZXIoKSB7XHJcbiAgICAgICAgdmFyIHZtID0gdGhpcztcclxuICAgICAgICB2bS5tb2RlbCA9IHt9O1xyXG4gICAgICAgIHZtLmlzU2VsZWN0ZWQgPSBcIlwiO1xyXG4gICAgICAgIHZtLiRvbkluaXQgPSBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgIH07XHJcbiAgICAgICAgdm0uJG9uQ2hhbmdlcyA9IGZ1bmN0aW9uIChjaGFuZ2VzKSB7XHJcbiAgICAgICAgICAgIGlmIChjaGFuZ2VzLnJlY29yZCkge1xyXG4gICAgICAgICAgICAgICAgdm0ubW9kZWwgPSAoY2hhbmdlcy5yZWNvcmQuY3VycmVudFZhbHVlKTtcclxuICAgICAgICAgICAgICAgIHZtLnVwZGF0ZUVycm9yU3RhdGUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZtLmRldGFpbHNDaGFuZ2VkID0gZnVuY3Rpb24gKGFsaWFzLCB2YWx1ZSkge1xyXG5cclxuICAgICAgICAgICAgdm0uY29uY2F0VXBkYXRlKHsnYWxpYXMnOiBhbGlhcywgJ3ZhbHVlJzogdmFsdWV9KTtcclxuICAgICAgICAgICAgdm0udXBkYXRlRXJyb3JTdGF0ZSgpO1xyXG4gICAgICAgIH07XHJcblxyXG5cclxuICAgICAgICB2bS51cGRhdGVFcnJvclN0YXRlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKHZtLm1vZGVsKTtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgdmFsID0gdm0ubW9kZWxba2V5c1tpXV07XHJcbiAgICAgICAgICAgICAgICBpZiAodmFsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGtleXNbaV0gPT09ICdvdGhlckZsdWlkcycpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF2bS5tb2RlbC5vdGhlckRldGFpbHMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZtLmlzU2VsZWN0ZWQgPSBcIlwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgdm0uaXNTZWxlY3RlZCA9IFwic2VsZWN0ZWRcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZtLmlzU2VsZWN0ZWQgPSBcInNlbGVjdGVkXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdm0uaXNTZWxlY3RlZCA9IFwiXCJcclxuICAgICAgICB9O1xyXG4gICAgICAgIHZtLm90aGVyQ2hhbmdlZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIHN0YXRlID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGlmICh2bS5tb2RlbC5vdGhlckZsdWlkcykge1xyXG4gICAgICAgICAgICAgICAgc3RhdGUgPSB0cnVlO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgc3RhdGUgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIHZtLm1vZGVsLm90aGVyRGV0YWlscyA9IFwiXCI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdm0ub3RoZXJVcGRhdGUoKTtcclxuICAgICAgICAgICAgdm0udXBkYXRlRXJyb3JTdGF0ZSgpO1xyXG4gICAgICAgICAgICByZXR1cm4gc3RhdGU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59KSgpO1xyXG4iLCIvKipcclxuICogQ3JlYXRlZCBieSBka2lsdHkgb24gMTcvMTEvMjAxNi5cclxuICovXHJcblxyXG4oZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKCduZXJ2b3VzTW9kdWxlJywgW10pXHJcbn0pKCk7XHJcblxyXG5cclxuKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgnbmVydm91c01vZHVsZScpXHJcbiAgICAgICAgLmNvbXBvbmVudCgnY21wTmVydm91c1N5c3RlbScsIHtcclxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdhcHAvc2NyaXB0cy9jb21wb25lbnRzL2FwcGVuZGl4LWZvdXIvdHBsLW5lcnZvdXNfMjAxNzAyMDNfMTUwMi5odG1sJyxcclxuICAgICAgICAgICAgY29udHJvbGxlckFzOiAnc3lzQ3RybCcsXHJcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6IG5lcnZvdXNTeXN0ZW1Db250cm9sbGVyLFxyXG4gICAgICAgICAgICBiaW5kaW5nczoge1xyXG4gICAgICAgICAgICAgICAgcmVjb3JkOiAnPCcsXHJcbiAgICAgICAgICAgICAgICBvdGhlclVwZGF0ZTogJyYnLFxyXG4gICAgICAgICAgICAgICAgY29uY2F0VXBkYXRlOiAnJidcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9KTtcclxuICAgIGZ1bmN0aW9uIG5lcnZvdXNTeXN0ZW1Db250cm9sbGVyKCkge1xyXG4gICAgICAgIHZhciB2bSA9IHRoaXM7XHJcbiAgICAgICAgdm0ubW9kZWwgPSB7fTtcclxuICAgICAgICB2bS4kb25Jbml0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2bS5pc1NlbGVjdGVkID0gXCJcIjtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHZtLiRvbkNoYW5nZXMgPSBmdW5jdGlvbiAoY2hhbmdlcykge1xyXG4gICAgICAgICAgICBpZiAoY2hhbmdlcy5yZWNvcmQpIHtcclxuICAgICAgICAgICAgICAgIHZtLm1vZGVsID0gKGNoYW5nZXMucmVjb3JkLmN1cnJlbnRWYWx1ZSk7XHJcbiAgICAgICAgICAgICAgICB2bS51cGRhdGVFcnJvclN0YXRlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2bS5kZXRhaWxzQ2hhbmdlZCA9IGZ1bmN0aW9uIChhbGlhcywgdmFsdWUpIHtcclxuXHJcbiAgICAgICAgICAgIHZtLmNvbmNhdFVwZGF0ZSh7J2FsaWFzJzogYWxpYXMsICd2YWx1ZSc6IHZhbHVlfSk7XHJcbiAgICAgICAgICAgIHZtLnVwZGF0ZUVycm9yU3RhdGUoKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2bS51cGRhdGVFcnJvclN0YXRlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKHZtLm1vZGVsKTtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgdmFsID0gdm0ubW9kZWxba2V5c1tpXV07XHJcbiAgICAgICAgICAgICAgICBpZiAodmFsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGtleXNbaV0gPT09ICdvdGhlck5lcnZvdXMnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdm0ubW9kZWwub3RoZXJEZXRhaWxzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2bS5pc1NlbGVjdGVkID0gXCJcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZtLmlzU2VsZWN0ZWQgPSBcInNlbGVjdGVkXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2bS5pc1NlbGVjdGVkID0gXCJzZWxlY3RlZFwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZtLmlzU2VsZWN0ZWQgPSBcIlwiXHJcbiAgICAgICAgfTtcclxuICAgICAgICB2bS5vdGhlckNoYW5nZWQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBzdGF0ZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICBpZiAodm0ubW9kZWwub3RoZXJOZXJ2b3VzKSB7XHJcbiAgICAgICAgICAgICAgICBzdGF0ZSA9IHRydWU7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBzdGF0ZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgdm0ubW9kZWwub3RoZXJEZXRhaWxzID0gXCJcIjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2bS5vdGhlclVwZGF0ZSgpO1xyXG4gICAgICAgICAgICB2bS51cGRhdGVFcnJvclN0YXRlKCk7XHJcbiAgICAgICAgICAgIHJldHVybiBzdGF0ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0pKCk7XHJcbiIsIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IGRraWx0eSBvbiAxNy8xMS8yMDE2LlxyXG4gKi9cclxuXHJcbihmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ211c2NsZU1vZHVsZScsIFtdKVxyXG59KSgpO1xyXG5cclxuXHJcbihmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ211c2NsZU1vZHVsZScpXHJcbiAgICAgICAgLmNvbXBvbmVudCgnY21wTXVzY2xlU3lzdGVtJywge1xyXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2FwcC9zY3JpcHRzL2NvbXBvbmVudHMvYXBwZW5kaXgtZm91ci90cGwtbXVzY2xlXzIwMTcwMjAzXzE1MDIuaHRtbCcsXHJcbiAgICAgICAgICAgIGNvbnRyb2xsZXJBczogJ3N5c0N0cmwnLFxyXG4gICAgICAgICAgICBjb250cm9sbGVyOiBtdXNjbGVTeXN0ZW1Db250cm9sbGVyLFxyXG4gICAgICAgICAgICBiaW5kaW5nczoge1xyXG4gICAgICAgICAgICAgICAgcmVjb3JkOiAnPCcsXHJcbiAgICAgICAgICAgICAgICBvdGhlclVwZGF0ZTogJyYnLFxyXG4gICAgICAgICAgICAgICAgY29uY2F0VXBkYXRlOiAnJidcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9KTtcclxuICAgIGZ1bmN0aW9uIG11c2NsZVN5c3RlbUNvbnRyb2xsZXIoKSB7XHJcbiAgICAgICAgdmFyIHZtID0gdGhpcztcclxuICAgICAgICB2bS5tb2RlbCA9IHt9O1xyXG4gICAgICAgIHZtLiRvbkluaXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZtLmlzU2VsZWN0ZWQgPSBcIlwiO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgdm0uJG9uQ2hhbmdlcyA9IGZ1bmN0aW9uIChjaGFuZ2VzKSB7XHJcbiAgICAgICAgICAgIGlmIChjaGFuZ2VzLnJlY29yZCkge1xyXG4gICAgICAgICAgICAgICAgdm0ubW9kZWwgPSAoY2hhbmdlcy5yZWNvcmQuY3VycmVudFZhbHVlKTtcclxuICAgICAgICAgICAgICAgIHZtLnVwZGF0ZUVycm9yU3RhdGUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZtLmRldGFpbHNDaGFuZ2VkID0gZnVuY3Rpb24gKGFsaWFzLCB2YWx1ZSkge1xyXG5cclxuICAgICAgICAgICAgdm0uY29uY2F0VXBkYXRlKHsnYWxpYXMnOiBhbGlhcywgJ3ZhbHVlJzogdmFsdWV9KTtcclxuICAgICAgICAgICAgdm0udXBkYXRlRXJyb3JTdGF0ZSgpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZtLnVwZGF0ZUVycm9yU3RhdGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXModm0ubW9kZWwpO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHZhciB2YWwgPSB2bS5tb2RlbFtrZXlzW2ldXTtcclxuICAgICAgICAgICAgICAgIGlmICh2YWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoa2V5c1tpXSA9PT0gJ290aGVyTXVzY2xlJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXZtLm1vZGVsLm90aGVyRGV0YWlscykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdm0uaXNTZWxlY3RlZCA9IFwiXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm5cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2bS5pc1NlbGVjdGVkID0gXCJzZWxlY3RlZFwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdm0uaXNTZWxlY3RlZCA9IFwic2VsZWN0ZWRcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2bS5pc1NlbGVjdGVkID0gXCJcIlxyXG4gICAgICAgIH07XHJcbiAgICAgICAgdm0ub3RoZXJDaGFuZ2VkID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgc3RhdGUgPSBmYWxzZTtcclxuICAgICAgICAgICAgaWYgKHZtLm1vZGVsLm90aGVyTXVzY2xlKSB7XHJcbiAgICAgICAgICAgICAgICBzdGF0ZSA9IHRydWU7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBzdGF0ZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgdm0ubW9kZWwub3RoZXJEZXRhaWxzID0gXCJcIjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2bS5vdGhlclVwZGF0ZSgpO1xyXG4gICAgICAgICAgICB2bS51cGRhdGVFcnJvclN0YXRlKCk7XHJcbiAgICAgICAgICAgIHJldHVybiBzdGF0ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0pKCk7XHJcbiIsIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IGRraWx0eSBvbiAxNy8xMS8yMDE2LlxyXG4gKi9cclxuXHJcbihmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ2ltbXVuZU1vZHVsZScsIFtdKVxyXG59KSgpO1xyXG5cclxuXHJcbihmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ2ltbXVuZU1vZHVsZScpXHJcbiAgICAgICAgLmNvbXBvbmVudCgnY21wSW1tdW5lU3lzdGVtJywge1xyXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2FwcC9zY3JpcHRzL2NvbXBvbmVudHMvYXBwZW5kaXgtZm91ci90cGwtaW1tdW5lXzIwMTcwMjAzXzE1MDIuaHRtbCcsXHJcbiAgICAgICAgICAgIGNvbnRyb2xsZXJBczogJ3N5c0N0cmwnLFxyXG4gICAgICAgICAgICBjb250cm9sbGVyOiBpbW11bmVTeXN0ZW1Db250cm9sbGVyLFxyXG4gICAgICAgICAgICBiaW5kaW5nczoge1xyXG4gICAgICAgICAgICAgICAgcmVjb3JkOiAnPCcsXHJcbiAgICAgICAgICAgICAgICBvdGhlclVwZGF0ZTogJyYnLFxyXG4gICAgICAgICAgICAgICAgY29uY2F0VXBkYXRlOiAnJidcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9KTtcclxuICAgIGZ1bmN0aW9uIGltbXVuZVN5c3RlbUNvbnRyb2xsZXIoKSB7XHJcbiAgICAgICAgdmFyIHZtID0gdGhpcztcclxuICAgICAgICB2bS5tb2RlbCA9IHt9O1xyXG4gICAgICAgIHZtLmlzU2VsZWN0ZWQgPSBcIlwiO1xyXG4gICAgICAgIHZtLiRvbkluaXQgPSBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgIH07XHJcbiAgICAgICAgdm0uJG9uQ2hhbmdlcyA9IGZ1bmN0aW9uIChjaGFuZ2VzKSB7XHJcbiAgICAgICAgICAgIGlmIChjaGFuZ2VzLnJlY29yZCkge1xyXG4gICAgICAgICAgICAgICAgdm0ubW9kZWwgPSAoY2hhbmdlcy5yZWNvcmQuY3VycmVudFZhbHVlKTtcclxuICAgICAgICAgICAgICAgIHZtLnVwZGF0ZUVycm9yU3RhdGUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZtLmRldGFpbHNDaGFuZ2VkID0gZnVuY3Rpb24gKGFsaWFzLCB2YWx1ZSkge1xyXG5cclxuICAgICAgICAgICAgdm0uY29uY2F0VXBkYXRlKHsnYWxpYXMnOiBhbGlhcywgJ3ZhbHVlJzogdmFsdWV9KTtcclxuICAgICAgICAgICAgdm0udXBkYXRlRXJyb3JTdGF0ZSgpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZtLnVwZGF0ZUVycm9yU3RhdGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXModm0ubW9kZWwpO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHZhciB2YWwgPSB2bS5tb2RlbFtrZXlzW2ldXTtcclxuICAgICAgICAgICAgICAgIGlmICh2YWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoa2V5c1tpXSA9PT0gJ290aGVySW1tdW5lJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXZtLm1vZGVsLm90aGVyRGV0YWlscykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdm0uaXNTZWxlY3RlZCA9IFwiXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm5cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2bS5pc1NlbGVjdGVkID0gXCJzZWxlY3RlZFwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdm0uaXNTZWxlY3RlZCA9IFwic2VsZWN0ZWRcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2bS5pc1NlbGVjdGVkID0gXCJcIlxyXG4gICAgICAgIH07XHJcblxyXG5cclxuICAgICAgICB2bS5vdGhlckNoYW5nZWQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBzdGF0ZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICBpZiAodm0ubW9kZWwub3RoZXJJbW11bmUpIHtcclxuICAgICAgICAgICAgICAgIHN0YXRlID0gdHJ1ZTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHN0YXRlID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB2bS5tb2RlbC5vdGhlckRldGFpbHMgPSBcIlwiO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZtLm90aGVyVXBkYXRlKCk7XHJcbiAgICAgICAgICAgIHZtLnVwZGF0ZUVycm9yU3RhdGUoKTtcclxuICAgICAgICAgICAgcmV0dXJuIHN0YXRlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICB9XHJcbn0pKCk7XHJcbiIsIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IGRraWx0eSBvbiAxNy8xMS8yMDE2LlxyXG4gKi9cclxuXHJcbihmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ2RpZ2VzdGl2ZU1vZHVsZScsIFtdKVxyXG59KSgpO1xyXG5cclxuXHJcbihmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ2RpZ2VzdGl2ZU1vZHVsZScpXHJcbiAgICAgICAgLmNvbXBvbmVudCgnY21wRGlnZXN0aXZlU3lzdGVtJywge1xyXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2FwcC9zY3JpcHRzL2NvbXBvbmVudHMvYXBwZW5kaXgtZm91ci90cGwtZGlnZXN0aXZlXzIwMTcwMjAzXzE1MDIuaHRtbCcsXHJcbiAgICAgICAgICAgIGNvbnRyb2xsZXJBczogJ3N5c0N0cmwnLFxyXG4gICAgICAgICAgICBjb250cm9sbGVyOiBkaWdlc3RpdmVTeXN0ZW1Db250cm9sbGVyLFxyXG4gICAgICAgICAgICBiaW5kaW5nczoge1xyXG4gICAgICAgICAgICAgICAgcmVjb3JkOiAnPCcsXHJcbiAgICAgICAgICAgICAgICBvdGhlclVwZGF0ZTogJyYnLFxyXG4gICAgICAgICAgICAgICAgY29uY2F0VXBkYXRlOiAnJidcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgZnVuY3Rpb24gZGlnZXN0aXZlU3lzdGVtQ29udHJvbGxlcigpIHtcclxuICAgICAgICB2YXIgdm0gPSB0aGlzO1xyXG4gICAgICAgIHZtLm1vZGVsID0ge307XHJcbiAgICAgICAgdm0uaXNTZWxlY3RlZCA9IFwiXCI7XHJcblxyXG4gICAgICAgIHZtLiRvbkluaXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIC8vZmRnXHJcbiAgICAgICAgfTtcclxuICAgICAgICB2bS4kb25DaGFuZ2VzID0gZnVuY3Rpb24gKGNoYW5nZXMpIHtcclxuICAgICAgICAgICAgaWYgKGNoYW5nZXMucmVjb3JkKSB7XHJcbiAgICAgICAgICAgICAgICB2bS5tb2RlbCA9IChjaGFuZ2VzLnJlY29yZC5jdXJyZW50VmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgdm0udXBkYXRlRXJyb3JTdGF0ZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdm0uZGV0YWlsc0NoYW5nZWQgPSBmdW5jdGlvbiAoYWxpYXMsIHZhbHVlKSB7XHJcblxyXG4gICAgICAgICAgICB2bS5jb25jYXRVcGRhdGUoeydhbGlhcyc6IGFsaWFzLCAndmFsdWUnOiB2YWx1ZX0pO1xyXG4gICAgICAgICAgICB2bS51cGRhdGVFcnJvclN0YXRlKCk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdm0udXBkYXRlRXJyb3JTdGF0ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyh2bS5tb2RlbCk7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgdmFyIHZhbCA9IHZtLm1vZGVsW2tleXNbaV1dO1xyXG4gICAgICAgICAgICAgICAgaWYgKHZhbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChrZXlzW2ldID09PSAnb3RoZXJEaWdlc3RpdmUnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdm0ubW9kZWwub3RoZXJEZXRhaWxzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2bS5pc1NlbGVjdGVkID0gXCJcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZtLmlzU2VsZWN0ZWQgPSBcInNlbGVjdGVkXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2bS5pc1NlbGVjdGVkID0gXCJzZWxlY3RlZFwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZtLmlzU2VsZWN0ZWQgPSBcIlwiXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdm0ub3RoZXJDaGFuZ2VkID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgc3RhdGUgPSBmYWxzZTtcclxuICAgICAgICAgICAgaWYgKHZtLm1vZGVsLm90aGVyRGlnZXN0aXZlKSB7XHJcbiAgICAgICAgICAgICAgICBzdGF0ZSA9IHRydWU7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBzdGF0ZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgdm0ubW9kZWwub3RoZXJEZXRhaWxzID0gXCJcIjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2bS5vdGhlclVwZGF0ZSgpO1xyXG4gICAgICAgICAgICB2bS51cGRhdGVFcnJvclN0YXRlKCk7XHJcbiAgICAgICAgICAgIHJldHVybiBzdGF0ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgfVxyXG59KSgpO1xyXG4iLCIvKipcclxuICogQ3JlYXRlZCBieSBka2lsdHkgb24gMTcvMTEvMjAxNi5cclxuICovXHJcblxyXG4oZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKCdjYXJkaW9Nb2R1bGUnLCBbXSlcclxufSkoKTtcclxuXHJcblxyXG4oZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKCdjYXJkaW9Nb2R1bGUnKVxyXG4gICAgICAgIC5jb21wb25lbnQoJ2NtcENhcmRpb1N5c3RlbScsIHtcclxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdhcHAvc2NyaXB0cy9jb21wb25lbnRzL2FwcGVuZGl4LWZvdXIvdHBsLWNhcmRpb18yMDE3MDIwM18xNTAyLmh0bWwnLFxyXG4gICAgICAgICAgICBjb250cm9sbGVyQXM6ICdzeXNDdHJsJyxcclxuICAgICAgICAgICAgY29udHJvbGxlcjogY2FyZGlvU3lzdGVtQ29udHJvbGxlcixcclxuICAgICAgICAgICAgYmluZGluZ3M6IHtcclxuICAgICAgICAgICAgICAgIHJlY29yZDogJzwnLFxyXG4gICAgICAgICAgICAgICAgb3RoZXJVcGRhdGU6ICcmJyxcclxuICAgICAgICAgICAgICAgIGNvbmNhdFVwZGF0ZTogJyYnXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgZnVuY3Rpb24gY2FyZGlvU3lzdGVtQ29udHJvbGxlcigpIHtcclxuICAgICAgICB2YXIgdm0gPSB0aGlzO1xyXG4gICAgICAgIHZtLm1vZGVsID0ge307XHJcbiAgICAgICAgdm0uaXNTZWxlY3RlZCA9IFwiXCI7XHJcbiAgICAgICAgdm0uJG9uSW5pdCA9IGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgfTtcclxuICAgICAgICB2bS4kb25DaGFuZ2VzID0gZnVuY3Rpb24gKGNoYW5nZXMpIHtcclxuICAgICAgICAgICAgaWYgKGNoYW5nZXMucmVjb3JkKSB7XHJcbiAgICAgICAgICAgICAgICB2bS5tb2RlbCA9IChjaGFuZ2VzLnJlY29yZC5jdXJyZW50VmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgdm0udXBkYXRlRXJyb3JTdGF0ZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdm0uZGV0YWlsc0NoYW5nZWQgPSBmdW5jdGlvbiAoYWxpYXMsIHZhbHVlKSB7XHJcblxyXG4gICAgICAgICAgICB2bS5jb25jYXRVcGRhdGUoeydhbGlhcyc6IGFsaWFzLCAndmFsdWUnOiB2YWx1ZX0pO1xyXG4gICAgICAgICAgICB2bS51cGRhdGVFcnJvclN0YXRlKCk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdm0udXBkYXRlRXJyb3JTdGF0ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyh2bS5tb2RlbCk7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgdmFyIHZhbCA9IHZtLm1vZGVsW2tleXNbaV1dO1xyXG4gICAgICAgICAgICAgICAgaWYgKHZhbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChrZXlzW2ldID09PSAnb3RoZXJDYXJkaW8nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdm0ubW9kZWwub3RoZXJEZXRhaWxzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2bS5pc1NlbGVjdGVkID0gXCJcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZtLmlzU2VsZWN0ZWQgPSBcInNlbGVjdGVkXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2bS5pc1NlbGVjdGVkID0gXCJzZWxlY3RlZFwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZtLmlzU2VsZWN0ZWQgPSBcIlwiXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdm0ub3RoZXJDaGFuZ2VkID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgc3RhdGUgPSBmYWxzZTtcclxuICAgICAgICAgICAgaWYgKHZtLm1vZGVsLm90aGVyQ2FyZGlvKSB7XHJcbiAgICAgICAgICAgICAgICBzdGF0ZSA9IHRydWU7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBzdGF0ZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgdm0ubW9kZWwub3RoZXJEZXRhaWxzID0gXCJcIjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2bS5vdGhlclVwZGF0ZSgpO1xyXG4gICAgICAgICAgICB2bS51cGRhdGVFcnJvclN0YXRlKCk7XHJcbiAgICAgICAgICAgIHJldHVybiBzdGF0ZTtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgIH1cclxufSkoKTtcclxuIiwiLyoqXHJcbiAqIENyZWF0ZWQgYnkgQWJkZXNzYW1hZCBvbiA4LzIyLzIwMTYuXHJcbiAqL1xyXG5cclxuKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgnYXBwZW5kaXhGb3VyTW9kdWxlJywgWydleHBhbmRpbmdUYWJsZScsJ2FwcGVuZGl4NFJlY29yZE1vZHVsZSddKVxyXG59KSgpO1xyXG5cclxuKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKCdhcHBlbmRpeEZvdXJNb2R1bGUnKVxyXG4gICAgICAgIC5jb21wb25lbnQoJ2NtcEFwcGVuZGl4Rm91cicse1xyXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2FwcC9zY3JpcHRzL2NvbXBvbmVudHMvYXBwZW5kaXgtZm91ci90cGwtYXBwZW5kaXgtZm91cl8yMDE3MDIwM18xNTAyLmh0bWwnLFxyXG4gICAgICAgICAgICBjb250cm9sbGVyOiBhcHBlbmRpeEZvdXJDdHJsLFxyXG4gICAgICAgICAgICBjb250cm9sbGVyQXM6ICdhcDRDdHJsJyxcclxuICAgICAgICAgICAgYmluZGluZ3M6IHtcclxuXHJcbiAgICAgICAgICAgICAgICBpbmdyZWRpZW50cyA6ICc8JyxcclxuICAgICAgICAgICAgICAgIHJlY29yZENoYW5nZWQ6ICcmJyxcclxuICAgICAgICAgICAgICAgIHNlcnZpY2U6ICc8J1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgZnVuY3Rpb24gYXBwZW5kaXhGb3VyQ3RybCgpe1xyXG5cclxuICAgICAgICB2YXIgc2VsZj10aGlzO1xyXG4gICAgICAgIHNlbGYuc2VsZWN0UmVjb3JkID0gLTE7IC8vdGhlIHJlY29yZCB0byBzZWxlY3QsIGluaXRpYWxseSBzZWxlY3Qgbm9uXHJcbiAgICAgICAgc2VsZi5yZXNldFRvQ29sbGFwc2VkID0gdHJ1ZTtcclxuICAgICAgICBzZWxmLmNvbE5hbWVzID0gW1xyXG4gICAgICAgICAgICB7bGFiZWw6IFwiSU5HUkVEX05BTUVcIiwgYmluZGluZzogXCJpbmdyZWRpZW50TmFtZVwiLCB3aWR0aDogXCI5OFwifVxyXG4gICAgICAgIF07XHJcbiAgICAgICAgc2VsZi5pbmdyZWRpZW50TGlzdD1bXTtcclxuXHJcbiAgICAgICAgc2VsZi4kb25Jbml0ID0gZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgc2VsZi5uZXdGb3JtU2hvd24gPSBmYWxzZTtcclxuICAgICAgICAgICAgc2VsZi5pc0RldGFpbFZhbGlkID0gdHJ1ZTsgLy9UT0RPIG5lZWRzIHRvIGJlIG1hbmFnZWQgaW4gQUREIGFuZCBkZWxldGVcclxuXHJcbiAgICAgICAgICAgIGlmKCFzZWxmLmluZ3JlZGllbnRMaXN0KXtcclxuICAgICAgICAgICAgICAgIHNlbGYuaW5ncmVkaWVudExpc3QgPSBbXTtcclxuICAgICAgICAgICAgICAgLy8gc2VsZi5pbmdyZWRpZW50TGlzdCA9IHNlbGYuaW5ncmVkaWVudHM7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBzZWxmLiRvbkNoYW5nZXMgPSBmdW5jdGlvbiAoY2hhbmdlcykge1xyXG5cclxuICAgICAgICAgICAgaWYgKGNoYW5nZXMuaW5ncmVkaWVudHMpIHtcclxuICAgICAgICAgICAgICAgIHNlbGYuaW5ncmVkaWVudExpc3QgPSBjaGFuZ2VzLmluZ3JlZGllbnRzLmN1cnJlbnRWYWx1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG5cclxuICAgICAgICBzZWxmLmFkZE5ldyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIG5ld1JlY29yZCA9IHtcclxuICAgICAgICAgICAgICAgIFwiaWRcIjooZ2V0TGlzdE1heElEKCkgKyAxKSxcclxuICAgICAgICAgICAgICAgIFwiaW5ncmVkaWVudE5hbWVcIjogXCJcIlxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBzZWxmLmluZ3JlZGllbnRMaXN0LnB1c2gobmV3UmVjb3JkKTtcclxuICAgICAgICAgICAgc2VsZi5yZXNldFRvQ29sbGFwc2VkPSAhc2VsZi5yZXNldFRvQ29sbGFwc2VkOztcclxuICAgICAgICAgICAgc2VsZi5zZWxlY3RSZWNvcmQ9KCBzZWxmLmluZ3JlZGllbnRMaXN0Lmxlbmd0aC0xKTtcclxuXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZ2V0TGlzdE1heElEKCkge1xyXG4gICAgICAgICAgICB2YXIgb3V0ID0gMDtcclxuICAgICAgICAgICAgdmFyIGxpc3QgPSBzZWxmLmluZ3JlZGllbnRMaXN0O1xyXG4gICAgICAgICAgICBpZiAobGlzdCkge1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGxpc3RbaV0uaWQgPiBvdXQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgb3V0ID0gbGlzdFtpXS5pZDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIG91dDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHNlbGYudXBkYXRlID0gZnVuY3Rpb24gKGlkeCwgaW5nKSB7XHJcbiAgICAgICAgICAgIC8vc2VsZi5pbmdyZWRpZW50TGlzdFtpZHhdID0gYW5ndWxhci5jb3B5KGluZyk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgc2VsZi5kZWxldGUgPSBmdW5jdGlvbiAoaWR4KSB7XHJcbiAgICAgICAgICAgIC8vY29uc29sZS5kZWJ1ZygnZnJtTGlzdCBkZWxldGU6ICcgKyBpZHgpO1xyXG4gICAgICAgICAgICBpZiAoc2VsZi5pbmdyZWRpZW50TGlzdC5zcGxpY2UoaWR4LCAxKSlcclxuICAgICAgICAgICAgICAgIHNlbGYucmVzZXRUb0NvbGxhcHNlZCA9IHRydWU7XHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICB9XHJcbn0pKCk7XHJcbiIsIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IEFiZGVzc2FtYWQgb24gOC8yMi8yMDE2LlxyXG4gKiAvL0lzIHVzZWRcclxuICovXHJcblxyXG4oZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKCdhcHBlbmRpeDRSZWNvcmRNb2R1bGUnLCBbJ3Rpc3N1ZXNGbHVpZHNMaXN0JywnYW5pbWFsU291cmNlZFNlY3Rpb24nXSlcclxufSkoKTtcclxuXHJcbihmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ2FwcGVuZGl4NFJlY29yZE1vZHVsZScpXHJcbiAgICAgICAgLmNvbXBvbmVudCgnY21wQXBwZW5kaXhGb3VyUmVjb3JkJywge1xyXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2FwcC9zY3JpcHRzL2NvbXBvbmVudHMvYXBwZW5kaXgtZm91ci90cGwtYXBwZW5kaXgtZm91ci1yZWNvcmRfMjAxNzAyMDNfMTUwMi5odG1sJyxcclxuICAgICAgICAgICAgY29udHJvbGxlckFzOiAnYXA0UmVjQ3RybCcsXHJcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6IGFwcDRSZWNDdHJsLFxyXG4gICAgICAgICAgICBiaW5kaW5nczoge1xyXG4gICAgICAgICAgICAgICAgcmVjb3JkOiAnPCcsXHJcbiAgICAgICAgICAgICAgICBzaG93TGlzdEVycm9yczogJyYnLFxyXG4gICAgICAgICAgICAgICAgb25BZGROZXc6ICcmJyxcclxuICAgICAgICAgICAgICAgIG9uVXBkYXRlOiAnJicsXHJcbiAgICAgICAgICAgICAgICBvbkRlbGV0ZTogJyYnLFxyXG4gICAgICAgICAgICAgICAgb25DYW5jZWw6ICcmJyxcclxuICAgICAgICAgICAgICAgIGRlbGV0ZUJ0bjonPCcsXHJcbiAgICAgICAgICAgICAgICByZWNvcmRDaGFuZ2VkOiAnJicsXHJcbiAgICAgICAgICAgICAgICBzZXJ2aWNlOiAnPCdcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9KTtcclxuXHJcbiAgICBmdW5jdGlvbiBhcHA0UmVjQ3RybCgpe1xyXG5cclxuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XHJcbiAgICAgICAgc2VsZi5pc1NvdXJjZWQgPSBcIlwiOyAvL2RldGVybWluZXMgaWYgYXQgbGVhc3Qgb25lIHNvdXJjZSBpcyBzZWxlY3RlZFxyXG4gICAgICAgIHZhciBlbXB0eUZsdWlkc1Rpc3N1ZXMgPSB7XHJcbiAgICAgICAgICAgIHRpc3N1ZXNMaXN0OiBbXVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgdmFyIGVtcHR5QW5pbWFsU291cmNlPXtcclxuICAgICAgICAgICAgYW5pbWFsU3JjTGlzdDogW10sXHJcbiAgICAgICAgICAgIGlzQ2VsbExpbmU6IFwiXCIsXHJcbiAgICAgICAgICAgIGlzQmlvdGVjaERlcml2ZWQ6IFwiXCIsXHJcbiAgICAgICAgICAgIGlzQ29udHJvbGxlZFBvcDogXCJcIixcclxuICAgICAgICAgICAgYWdlQW5pbWFsczogMCxcclxuICAgICAgICAgICAgY291bnRyeUxpc3Q6IFtdXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgc2VsZi5tb2RlbCA9IHt9O1xyXG4gICAgICAgIHNlbGYuJG9uSW5pdCA9IGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgIHNlbGYuaXNTb3VyY2VkU2VsZWN0ZWQoKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHNlbGYuJG9uQ2hhbmdlcyA9IGZ1bmN0aW9uIChjaGFuZ2VzKSB7XHJcbiAgICAgICAgICAgIGlmIChjaGFuZ2VzLnJlY29yZCkge1xyXG4gICAgICAgICAgICAgICAgc2VsZi5tb2RlbCA9IChjaGFuZ2VzLnJlY29yZC5jdXJyZW50VmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgc2VsZi5pc1NvdXJjZWRTZWxlY3RlZCgpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH07XHJcbiAgICAgICAgc2VsZi5pc1NvdXJjZWRTZWxlY3RlZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IChzZWxmLm1vZGVsLmh1bWFuU291cmNlZCB8fCBzZWxmLm1vZGVsLmFuaW1hbFNvdXJjZWQpO1xyXG4gICAgICAgICAgICBpZiAocmVzdWx0KSB7XHJcbiAgICAgICAgICAgICAgICBzZWxmLmlzU291cmNlZCA9IHJlc3VsdDtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHNlbGYuaXNTb3VyY2VkID0gXCJcIjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gKHJlc3VsdCk7XHJcblxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHNlbGYubm9TZWxlY3Rpb25FcnJvciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuICgoc2VsZi5hcHBlbmRpeDRSZWNGb3JtLiRkaXJ0eSAmJiAhc2VsZi5pc1NvdXJjZWRTZWxlY3RlZCgpICkgfHwgKHNlbGYuc2hvd0xpc3RFcnJvcnMoKSAmJiAhc2VsZi5pc1NvdXJjZWRTZWxlY3RlZCgpKSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBVc2VkIHRvIHNob3cgZmllbGQgbGV2ZWwgZXJyb3JzXHJcbiAgICAgICAgICogQHBhcmFtIGlzSW52YWxpZFxyXG4gICAgICAgICAqIEBwYXJhbSBpc1RvdWNoZWRcclxuICAgICAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gIHRydWUgaWYgeW91IHNob3VsZCBzaG93IGVycm9yXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgc2VsZi5zaG93RXJyb3IgPSBmdW5jdGlvbiAoaXNJbnZhbGlkLCBpc1RvdWNoZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuICgoaXNJbnZhbGlkICYmIGlzVG91Y2hlZCkgfHwgKGlzSW52YWxpZCAmJiBzZWxmLnNob3dMaXN0RXJyb3JzKCkpKVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgc2VsZi5zYXZlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAoc2VsZi5yZWNvcmQpIHtcclxuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdwcm9kdWN0IGRldGFpbHMgdXBkYXRlIHByb2R1Y3QnKTtcclxuICAgICAgICAgICAgICAgIHNlbGYub25VcGRhdGUoe3JlY29yZDogc2VsZi5tb2RlbH0pO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy8gIGNvbnNvbGUubG9nKCdwcm9kdWN0IGRldGFpbHMgYWRkIHByb2R1Y3QnKTtcclxuICAgICAgICAgICAgICAgIHNlbGYub25BZGROZXcoe3JlY29yZDogc2VsZi5tb2RlbH0pO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8qc2VsZi5kaXNjYXJkQ2hhbmdlcyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgc2VsZi5tb2RlbCA9IHt9O1xyXG4gICAgICAgICAgICAvL3NlbGYucHJvZHVjdERldGFpbHNGb3JtLiRzZXRQcmlzdGluZSgpO1xyXG4gICAgICAgICAgICBzZWxmLm9uQ2FuY2VsKCk7XHJcbiAgICAgICAgfSovXHJcblxyXG4gICAgICAgIHNlbGYuZGVsZXRlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAoc2VsZi5yZWNvcmQpIHtcclxuICAgICAgICAgICAgICAgIC8vICBjb25zb2xlLmxvZygncHJvZHVjdCBkZXRhaWxzIGRlbGV0ZSBwcm9kdWN0Jyk7XHJcbiAgICAgICAgICAgICAgICBzZWxmLm9uRGVsZXRlKCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgc2VsZi51cGRhdGVUaXNzdWVzRmx1aWRzID0gZnVuY3Rpb24oaW5wdXQpe1xyXG5cclxuICAgICAgICAgICAgLy9jb25zb2xlLmxvZygnYXBkeDQgcmVjb3JkIHVwZGF0ZVRpc3N1ZXNGbHVpZHMgOiAnICsgSlNPTi5zdHJpbmdpZnkoaW5wdXQpKTtcclxuXHJcbiAgICAgICAgICAgIHNlbGYubW9kZWwudGlzc3Vlc0ZsdWlkc09yaWdpbiA9IGlucHV0O1xyXG4gICAgICAgICAgICBzZWxmLm9uVXBkYXRlKHtyZWNvcmQ6IHNlbGYubW9kZWx9KTtcclxuXHJcblxyXG4gICAgICAgICAgICAvKiBpZiAoc2VsZi5yZWNvcmQpIHtcclxuICAgICAgICAgICAgICAgICBzZWxmLm9uVXBkYXRlKHtyZWNvcmQ6IHNlbGYubW9kZWx9KTtcclxuICAgICAgICAgICAgIH0qL1xyXG5cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBzZWxmLnVwZGF0ZUFuaW1hbFNvdXJjZWQgPSBmdW5jdGlvbihpbnB1dCl7XHJcblxyXG4gICAgICAgICAgICBzZWxmLm1vZGVsLnNvdXJjZUFuaW1hbERldGFpbHMgPSBpbnB1dDtcclxuICAgICAgICAgICAgc2VsZi5vblVwZGF0ZSh7cmVjb3JkOiBzZWxmLm1vZGVsfSk7XHJcblxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIERldGVybWluZXMgd2hldGhlciB0byBzaG93IG9yIGhpZGUgdGlzc3VlcyBvPXIgZmx1aWRzXHJcbiAgICAgICAgICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgc2VsZi5zaG93VGlzc3Vlc0ZsdWlkcz1mdW5jdGlvbigpe1xyXG4gICAgICAgICAgICBpZihzZWxmLm1vZGVsLmh1bWFuU291cmNlZCB8fCBzZWxmLm1vZGVsLmFuaW1hbFNvdXJjZWQpIHtcclxuICAgICAgICAgICAgICAgIGlmKCFzZWxmLm1vZGVsLnRpc3N1ZXNGbHVpZHNPcmlnaW4pIHtcclxuICAgICAgICAgICAgICAgICAgICBzZWxmLm1vZGVsLnRpc3N1ZXNGbHVpZHNPcmlnaW4gPSBhbmd1bGFyLmNvcHkoZW1wdHlGbHVpZHNUaXNzdWVzKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgICAgIHNlbGYubW9kZWwudGlzc3Vlc0ZsdWlkc09yaWdpbj1udWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuXHJcbiAgICAgICAgfTtcclxuICAgICAgICBzZWxmLnNob3dBbmltYWxTb3VyY2VzPWZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgIHNlbGYuc2hvd1Rpc3N1ZXNGbHVpZHMoKTtcclxuICAgICAgICAgICAgaWYoc2VsZi5tb2RlbC5hbmltYWxTb3VyY2VkKSB7XHJcbiAgICAgICAgICAgICAgICBpZighc2VsZi5tb2RlbC5zb3VyY2VBbmltYWxEZXRhaWxzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5tb2RlbC5zb3VyY2VBbmltYWxEZXRhaWxzID0gYW5ndWxhci5jb3B5KGVtcHR5QW5pbWFsU291cmNlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgICAgIHNlbGYubW9kZWwuc291cmNlQW5pbWFsRGV0YWlscyA9IG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICB9XHJcbn0pKCk7XHJcbiIsIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IGRraWx0eSBvbiAwMi8xMS8yMDE2LlxyXG4gKi9cclxuXHJcbihmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ2FuaW1hbFNvdXJjZWRTZWN0aW9uJyxbJ2FuaW1hbFNvdXJjZWRMaXN0JywnY291bnRyeUxpc3RNb2R1bGUnLCdudW1iZXJGb3JtYXQnXSlcclxufSkoKTtcclxuXHJcbihmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ2FuaW1hbFNvdXJjZWRTZWN0aW9uJylcclxuICAgICAgICAuY29tcG9uZW50KCdjbXBBbmltYWxTb3VyY2VkU2VjdGlvbicsIHtcclxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdhcHAvc2NyaXB0cy9jb21wb25lbnRzL2FwcGVuZGl4LWZvdXIvdHBsLWFuaW1hbFNvdXJjZWQtc2VjdGlvbl8yMDE3MDIwM18xNTAyLmh0bWwnLFxyXG4gICAgICAgICAgICBiaW5kaW5nczoge1xyXG4gICAgICAgICAgICAgICAgcmVjb3JkczogJzwnLFxyXG4gICAgICAgICAgICAgICAgc2hvd0Vycm9yczogJyYnXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6IGFuaW1hbFNvdXJjZWRTZWN0aW9uQ29udHJvbGxlcixcclxuICAgICAgICAgICAgY29udHJvbGxlckFzOiAnYW5pbWFsU2VjdEN0cmwnXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgYW5pbWFsU291cmNlZFNlY3Rpb25Db250cm9sbGVyLiRpbmplY3QgPSBbXCIkZmlsdGVyXCIsJ0Rvc3NpZXJMaXN0cyddO1xyXG5cclxuICAgIGZ1bmN0aW9uIGFuaW1hbFNvdXJjZWRTZWN0aW9uQ29udHJvbGxlcigkZmlsdGVyLERvc3NpZXJMaXN0cykge1xyXG5cclxuICAgICAgICB2YXIgdm0gPSB0aGlzO1xyXG4gICAgICAgIHZtLnllc05vVW5rbm93bkxpc3Q9RG9zc2llckxpc3RzLmdldFllc05vVW5rbm93bkxpc3QoKTtcclxuICAgICAgICB2bS5tb2RlbD17fTtcclxuICAgICAgICB2bS5tb2RlbC5hbmltYWxTcmNTZWN0aW9uPVtdO1xyXG4gICAgICAgIHZtLm9uZUFuaW1hbCA9IFwiXCI7XHJcbiAgICAgICAgdm0ub25lQ291bnRyeSA9IFwiXCI7XHJcblxyXG4gICAgICAgIHZtLiRvbkluaXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIC8vaW5pdCBjb2RlIGhlcmVcclxuICAgICAgICAgICAgdm0ubm9BbmltYWxTcmMoKVxyXG4gICAgICAgIH07XHJcblxyXG5cclxuICAgICAgICB2bS4kb25DaGFuZ2VzID0gZnVuY3Rpb24gKGNoYW5nZXMpIHtcclxuXHJcbiAgICAgICAgICAgIGlmIChjaGFuZ2VzLnJlY29yZHMpIHtcclxuICAgICAgICAgICAgICAgIHZtLm1vZGVsPWNoYW5nZXMucmVjb3Jkcy5jdXJyZW50VmFsdWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAbmdkb2MgbWV0aG9kIGRldGVybWluZXMgdGhlIHN0YXRlIG9mIHRoZSBsaXN0IGVycm9yc1xyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdm0uc2hvd0Vycm9yID0gZnVuY3Rpb24gKGN0cmwpIHtcclxuICAgICAgICAgICAgaWYoIWN0cmwpe1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKFwiTm8gY29udHJvbCBhbmltYWxTb3VyY2VkLXNlY3Rpb25cIik7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICByZXR1cm4oKGN0cmwuJGludmFsaWQgJiYgY3RybC4kdG91Y2hlZCl8fChjdHJsLiRpbnZhbGlkICYmIHZtLnNob3dFcnJvcnMoKSkpXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdm0udXBkYXRlQ291bnRyeUxpc3QgPSBmdW5jdGlvbiAobGlzdCkge1xyXG5cclxuICAgICAgICAgICAgdm0ubW9kZWwuY291bnRyeUxpc3QgPSBsaXN0O1xyXG4gICAgICAgICAgIC8vIHNlbGYub25VcGRhdGUoe21vZGVsOnNlbGYubW9kZWx9KTtcclxuXHJcbiAgICAgICAgfTtcclxuICAgICAgICB2bS5ub0FuaW1hbFNyYyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKHZtLm1vZGVsLmFuaW1hbFNyY0xpc3QubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgdm0ub25lQW5pbWFsID0gXCJzZWxlY3RlZFwiO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZtLm9uZUFuaW1hbCA9IFwiXCI7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgdm0ubm9Db3VudHJ5U3JjID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAodm0ubW9kZWwuY291bnRyeUxpc3QubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgdm0ub25lQ291bnRyeSA9IFwic2VsZWN0ZWRcIjtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2bS5vbmVDb3VudHJ5ID0gXCJcIjtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcblxyXG4gICAgfVxyXG59KSgpOyIsIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IGRraWx0eSBvbiAwMi8xMS8yMDE2LlxyXG4gKi9cclxuXHJcbihmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ2FuaW1hbFNvdXJjZWRSZWNvcmQnLCBbXSlcclxufSkoKTtcclxuXHJcbihmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ2FuaW1hbFNvdXJjZWRSZWNvcmQnKVxyXG4gICAgICAgIC5jb21wb25lbnQoJ2NtcEFuaW1hbFNvdXJjZWRSZWNvcmQnLCB7XHJcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnYXBwL3NjcmlwdHMvY29tcG9uZW50cy9hcHBlbmRpeC1mb3VyL3RwbC1hbmltYWxTb3VyY2VkLXJlY29yZF8yMDE3MDIwM18xNTAyLmh0bWwnLFxyXG4gICAgICAgICAgICBjb250cm9sbGVyOiBhbmltYWxTb3VyY2VkQ29udHJvbGxlcixcclxuICAgICAgICAgICAgY29udHJvbGxlckFzOidhbmltYWxTcmNDdHJsJyxcclxuICAgICAgICAgICAgYmluZGluZ3M6IHtcclxuICAgICAgICAgICAgICAgIHJlY29yZDogJzwnLFxyXG4gICAgICAgICAgICAgICAgb25EZWxldGU6ICcmJyxcclxuICAgICAgICAgICAgICAgIHNob3dFcnJvcnM6ICcmJyxcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgIGFuaW1hbFNvdXJjZWRDb250cm9sbGVyLiRpbmplY3Q9WydEb3NzaWVyTGlzdHMnXTtcclxuXHJcbiAgICBmdW5jdGlvbiBhbmltYWxTb3VyY2VkQ29udHJvbGxlcihEb3NzaWVyTGlzdHMpe1xyXG4gICAgICAgIHZhciB2bSA9IHRoaXM7XHJcbiAgICAgICAgdm0uYW5pbWFsc0xpc3QgPSBEb3NzaWVyTGlzdHMuZ2V0QW5pbWFsU291cmNlcygpO1xyXG4gICAgICAgIHZtLnllc05vVW5rbm93bkxpc3QgPSBEb3NzaWVyTGlzdHMuZ2V0WWVzTm9Vbmtub3duTGlzdCgpO1xyXG4gICAgICAgIHZtLm1vZGVsID0ge307XHJcblxyXG4gICAgICAgIHZtLiRvbkluaXQgPSBmdW5jdGlvbigpe1xyXG5cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2bS4kb25DaGFuZ2VzID0gZnVuY3Rpb24gKGNoYW5nZXMpIHtcclxuXHJcbiAgICAgICAgICAgIGlmIChjaGFuZ2VzLnJlY29yZCkge1xyXG4gICAgICAgICAgICAgICAgdm0ubW9kZWw9Y2hhbmdlcy5yZWNvcmQuY3VycmVudFZhbHVlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2bS5kZWxldGVSZWNvcmQgPSBmdW5jdGlvbigpICB7XHJcbiAgICAgICAgICAgIHZtLm9uRGVsZXRlKHtpZDogdm0ubW9kZWwuaWR9KVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZtLnNob3dFcnJvciA9IGZ1bmN0aW9uIChjdHJsKSB7XHJcbiAgICAgICAgICAgIGlmKCFjdHJsKXtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihcIk5vIGNvbnRyb2wgZm91bmQgaW4gYW5pbWFsU291cmNlZC1yZWNvcmRcIik7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuICgoY3RybC4kaW52YWxpZCAmJiBjdHJsLiR0b3VjaGVkKSB8fCAoY3RybC4kaW52YWxpZCAmJiB2bS5zaG93RXJyb3JzKCkpIClcclxuICAgICAgICB9XHJcblxyXG4gICAgfVxyXG59KSgpOyIsIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IGRraWx0eSBvbiAwMi8xMS8yMDE2LlxyXG4gKi9cclxuXHJcblxyXG4oZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKCdhbmltYWxTb3VyY2VkTGlzdCcsWydhbmltYWxTb3VyY2VkUmVjb3JkJywnZXhwYW5kaW5nVGFibGUnXSlcclxufSkoKTtcclxuXHJcbihmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ2FuaW1hbFNvdXJjZWRMaXN0JylcclxuICAgICAgICAuY29tcG9uZW50KCdjbXBBbmltYWxTb3VyY2VkTGlzdCcsIHtcclxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdhcHAvc2NyaXB0cy9jb21wb25lbnRzL2FwcGVuZGl4LWZvdXIvdHBsLWFuaW1hbFNvdXJjZWQtbGlzdF8yMDE3MDIwM18xNTAyLmh0bWwnLFxyXG4gICAgICAgICAgICBiaW5kaW5nczoge1xyXG4gICAgICAgICAgICAgICAgcmVjb3JkczogJzwnLFxyXG4gICAgICAgICAgICAgICAgc2hvd0Vycm9yczogJyYnXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6IGFuaW1hbFNvdXJjZWRMaXN0Q29udHJvbGxlcixcclxuICAgICAgICAgICAgY29udHJvbGxlckFzOiAnYW5pbWFsTGlzdEN0cmwnXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgYW5pbWFsU291cmNlZExpc3RDb250cm9sbGVyLiRpbmplY3QgPSBbXCIkZmlsdGVyXCJdO1xyXG5cclxuICAgIGZ1bmN0aW9uIGFuaW1hbFNvdXJjZWRMaXN0Q29udHJvbGxlcigkZmlsdGVyKSB7XHJcblxyXG4gICAgICAgIHZhciB2bSA9IHRoaXM7XHJcbiAgICAgICAgdm0uc2VsZWN0UmVjb3JkID0gLTE7IC8vdGhlIHJlY29yZCB0byBzZWxlY3QsIGluaXRpYWxseSBzZWxlY3Qgbm9uXHJcbiAgICAgICAgdm0uaXNEZXRhaWxWYWxpZCA9IHRydWU7IC8vdXNlZCB0byB0cmFjayBpZiBkZXRhaWxzIHZhbGlkLiBJZiB0aGV5IGFyZSAgbm90IGRvIG5vdCBhbGxvdyBleHBhbmRlciBjb2xsYXBzZVxyXG4gICAgICAgIHZtLnJlc2V0VG9Db2xsYXBzZWQgPSB0cnVlO1xyXG4gICAgICAgIHZtLm9uZVJlY29yZD1cIlwiO1xyXG4gICAgICAgIC8vZGVmaW5lIGVtcHR5IG1vZGVsXHJcbiAgICAgICAgdm0ubW9kZWw9e307XHJcbiAgICAgICAgdm0ubW9kZWwuYW5pbWFsU3JjTGlzdD1bXTtcclxuICAgICAgICB2bS5jb2x1bW5EZWYgPSBbXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGxhYmVsOiBcIkFOSU1BTF9UWVBFXCIsXHJcbiAgICAgICAgICAgICAgICBiaW5kaW5nOiBcImFuaW1hbFR5cGVcIixcclxuICAgICAgICAgICAgICAgIHdpZHRoOiBcIjQwXCJcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbGFiZWw6IFwiQU5JTUFMX1RZUEVfREVUQUlMU1wiLFxyXG4gICAgICAgICAgICAgICAgYmluZGluZzogXCJhbmltYWxEZXRhaWxcIixcclxuICAgICAgICAgICAgICAgIHdpZHRoOiBcIjYwXCJcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIF07XHJcblxyXG4gICAgICAgIHZtLiRvbkluaXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIC8vaW5pdCBjb2RlIGhlcmVcclxuICAgICAgICAgICAgdm0uaXNEZXRhaWxWYWxpZCA9IHRydWU7IC8vdXNlZCB0byB0cmFjayBpZiBkZXRhaWxzIHZhbGlkLiBJZiB0aGV5IGFyZSAgbm90IGRvIG5vdCBhbGxvdyBleHBhbmRlciBjb2xsYXBzZVxyXG4gICAgICAgICAgICB2bS5yZXNldFRvQ29sbGFwc2VkID0gdHJ1ZTtcclxuICAgICAgICAgICAgdm0ub25lUmVjb3JkPVwiXCI7XHJcbiAgICAgICAgfTtcclxuXHJcblxyXG4gICAgICAgIHZtLiRvbkNoYW5nZXMgPSBmdW5jdGlvbiAoY2hhbmdlcykge1xyXG5cclxuICAgICAgICAgICAgaWYgKGNoYW5nZXMucmVjb3Jkcykge1xyXG4gICAgICAgICAgICAgICAgdm0ubW9kZWwuYW5pbWFsU3JjTGlzdD1jaGFuZ2VzLnJlY29yZHMuY3VycmVudFZhbHVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQG5nZG9jIG1ldGhvZCBkZXRlcm1pbmVzIHRoZSBzdGF0ZSBvZiB0aGUgbGlzdCBlcnJvcnNcclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHZtLnNob3dFcnJvciA9IGZ1bmN0aW9uIChpc1RvdWNoZWQsIGlzSW52YWxpZCkge1xyXG5cclxuICAgICAgICAgICAgLy8gaWYgKCh2bS5pc1BhcmVudERpcnR5ICYmIGlzSW52YWxpZCkgfHwgKHZtLnNob3dFcnJvcnMoKSAmJiBpc0ludmFsaWQpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAvLyB9XHJcbiAgICAgICAgICAgIC8vIHJldHVybiBmYWxzZVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZtLnNldFZhbGlkPWZ1bmN0aW9uKHZhbHVlKXtcclxuICAgICAgICAgICAgdm0uaXNEZXRhaWxWYWxpZCA9IHZhbHVlO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgdm0uYWRkTmV3ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHZhciBtYXhJRCA9IGdldE1heElEKCk7XHJcbiAgICAgICAgICAgIHZhciBpdGVtID0ge1wiaWRcIjogbWF4SUQgKyAxLCBcImFuaW1hbFR5cGVcIjogXCJcIixhbmltYWxEZXRhaWw6XCJcIn07IC8vVE9ETyBjYWxsIGEgc2VydmljZSBmb3IgdGhpc1xyXG4gICAgICAgICAgICB2bS5tb2RlbC5hbmltYWxTcmNMaXN0LnB1c2goaXRlbSk7XHJcbiAgICAgICAgICAgIHZtLnJlc2V0VG9Db2xsYXBzZWQ9ICF2bS5yZXNldFRvQ29sbGFwc2VkO1xyXG4gICAgICAgICAgICB2bS5zZWxlY3RSZWNvcmQ9KDApO1xyXG4gICAgICAgICAgICB2bS5zZWxlY3RSZWNvcmQ9KHZtLm1vZGVsLmFuaW1hbFNyY0xpc3QubGVuZ3RoLTEpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgdm0uZGVsZXRlUmVjb3JkPWZ1bmN0aW9uKHJlY0lkKXtcclxuXHJcbiAgICAgICAgICAgIHZhciBpZHggPSB2bS5tb2RlbC5hbmltYWxTcmNMaXN0LmluZGV4T2YoXHJcbiAgICAgICAgICAgICAgICAkZmlsdGVyKCdmaWx0ZXInKSh2bS5tb2RlbC5hbmltYWxTcmNMaXN0LCB7aWQ6IHJlY0lkfSwgdHJ1ZSlbMF0pO1xyXG4gICAgICAgICAgICB2bS5tb2RlbC5hbmltYWxTcmNMaXN0LnNwbGljZShpZHgsIDEpO1xyXG4gICAgICAgIH07XHJcblxyXG5cclxuICAgICAgICBmdW5jdGlvbiBnZXRNYXhJRCgpe1xyXG4gICAgICAgICAgICB2YXIgaWQ9MDtcclxuICAgICAgICAgICAgZm9yKHZhciBpPTA7aTx2bS5tb2RlbC5hbmltYWxTcmNMaXN0Lmxlbmd0aDtpKyspe1xyXG4gICAgICAgICAgICAgICAgaWYodm0ubW9kZWwuYW5pbWFsU3JjTGlzdFtpXS5pZD5pZCl7XHJcbiAgICAgICAgICAgICAgICAgICAgaWQ9dm0ubW9kZWwuYW5pbWFsU3JjTGlzdFtpXS5pZDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4oaWQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICB9XHJcbn0pKCk7Il0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9

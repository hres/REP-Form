!function(){"use strict";angular.module("activityApp",["pascalprecht.translate","activityLists","activityMain","translations"])}(),function(){"use strict";function MainController(){var vm=this;vm.formType="INT"}angular.module("activityApp").controller("MainController",MainController)}(),function(){"use strict";angular.module("activityApp").config(["$translateProvider","$httpProvider","$locationProvider",function($translateProvider,$httpProvider,$locationProvider){$locationProvider.html5Mode({enabled:!0,requireBase:!1,rewriteLinks:!1}),$translateProvider.directivePriority(1),$translateProvider.preferredLanguage("en"),$translateProvider.useSanitizeValueStrategy(null),$httpProvider.defaults.headers.get||($httpProvider.defaults.headers.get={}),$httpProvider.defaults.headers.get["If-Modified-Since"]="Mon, 26 Jul 1997 05:00:00 GMT",$httpProvider.defaults.headers.get["Cache-Control"]="no-cache",$httpProvider.defaults.headers.get.Pragma="no-cache"}])}(),angular.module("translations",[]).config(["$translateProvider",function($translateProvider){$translateProvider.translations("en",{LOAD_ACTIVITY:"Load a Regulatory Activity Enrolment File",REG_ACTIVITY_INSTRUCT:"Regulatory Activity Instructions",ACTIVE_ENROL:"Regulatory Activity Enrolment",IS_SOLICITED:"Will the submission be signed / filed by a third party on behalf of the manufacturer / sponsor?",RATIONALE_SNDS:"Rationale for all SNDS, SANDS, (all human drug types); Veterinary Supplemental New Drug Submission (VSNDS), Veterinary Supplemental Abbreviated New Drug Submission( VSANDS) (All veterinary drug types); or for biological drug DIN submissions",NEW_ROA:"New route of administration, dosage form and / or strength",REPLACE_STERIL:"Replace sterility test with process parametric release",NEW_CLAIMS:"New claims / use, indications, recommended administration or dosage regime",CONFIRM_STUDY:"Confirmatory studies",CHANGE_FORM:"Change in formulation or method of manufacturing with clinical / bio data",CHANGE_SUBSTANCE:"Change in drug substance / product (site, method, equipment, process control)",OTHER_SPECIFY:"Other (please specify):",TYPE_VNC:"Type of Notifiable Change (NC) or Veterinary Notifiable Change (VNC) submission",CHANGE_LABEL:"Change in text of labelling",CHANGE_DRUGSUB:"Change in drug substance (source, synthesis)",CHANGE_SPEC:"Change in specifications (medicinal or non-medicinal ingredient, pharmaceutical form, analytical method)",CHANGE_EXPIRY:"Change in expiry period/storage conditions",CHANGE_MANMETHOD:"Change in manufacturing method",CHANGE_MANSITE:"Change in manufacturing site",CHANGE_CONTAIN:"Change in container size for parenteral drug",CHANGE_PACKAGE:"Change in packaging specifications for parenteral / inhalation drug",CHANGE_MATERIAL:"Change in packaging material composition",ACTIVITY_LEAD:"Activity Lead",FEE_CLASS:"Fee Class",NOT_LASA:"I confirm that this administrative submission is NOT a Look-alike Sound-alike (LASA) submission",REASON_FILE:"Reason for filing this Regulatory Activity",RELATED_ACTIVITIES:"Related Regulatory Activity (Referred to in this Administrative Submission)",ACTIVITY_TYPE:"Regulatory Activity Type",DATE_CLEARED:"Date Cleared",MANUFACT_NAME:"Manufacturer / Sponsor Name [Full Legal Name - No Abbreviations]",REASON_FILING:"Reason for Filing this Regulatory Activity",ASSOC_DINS:"Associated Drug Identification Numbers (DIN)",ADD_DIN:"Add DIN",SAVE_ACTIVITY:"Save Activity",OTHER_DETAILS:"Other (please specify)",DIN_ABRREV:"DIN",DELETE_ACTIVITY:"Delete Activity",ADD_ACTIVITY:"Add Activity",AUT_LETTER:"Please include Third Party Authorization letter in the REP folder when submitting via the CESG",DOSSIER_ID_PREV:"Dossier Id (Previously File Number)",RELATED_ACTIVITY:"Related Activity",AMEND_ACTIVITY:"Amend Related Activity",IS_ADMIN_SUB:"Is this regulatory activity an Administrative Submission?",LICENCE_AGREE:"Is this Administrative Submission a license agreement?",DIN_TRANSFER:"I confirm that this Administrative Submission is a DIN transfer of ownership",REGACTIVSEARCH:"Select or search for a Regulatory Activity Type",SAVE_INSTRUCT:"Activity File Save Instructions",RATIONALE_MISSING:"Please select at least one rationale.",NOTIF_MISSING:"A least one type of Notifiable Change is required","CONTACTREC.CONTACTRECFORM":"in the REP contact record",REG_TRANSACT:"Regulatory Activity Form"}),$translateProvider.translations("fr",{LOAD_ACTIVITY:"fr_Load a Regulatory Activity Enrolment File",REG_ACTIVITY_INSTRUCT:"Regulatory Activity Instructions",ACTIVE_ENROL:"fr_Regulatory Activity Enrolment",IS_SOLICITED:"fr_Will the submission be signed / filed by a third party on behalf of the manufacturer / sponsor?",RATIONALE_SNDS:"fr_Rationale for all SNDS, SANDS, (all human drug types); Veterinary Supplemental New Drug Submission (VSNDS), Veterinary Supplemental Abbreviated New Drug Submission( VSANDS) (All veterinary drug types); or for biological drug DIN submissions",NEW_ROA:"fr_New route of administration, dosage form and / or strength",REPLACE_STERIL:"fr_Replace sterility test with process parametric release",NEW_CLAIMS:"fr_New claims / use, indications, recommended administration or dosage regime",CONFIRM_STUDY:"fr_Confirmatory studies",CHANGE_SUBSTANCE:"fr_Change in drug substance/product (site, method, equipment, process control",OTHER_SPECIFY:"fr_Other (please specify):",TYPE_VNC:"fr_Type of Notifiable Chance (NC) or Veterinary Notifiable Change (VNC) submission",CHANGE_LABEL:"fr_Change in text of labelling",CHANGE_DRUGSUB:"fr_Change in drug substance (source, synthesis)",CHANGE_FORM:"Modification de la formulation",CHANGE_SPEC:"Modification dans les spécifications (ingrédients médicinaux ou non médicinaux, forme posologique, méthode d’analyse)",CHANGE_EXPIRY:"Modification de la durée de conservation/des conditions d’entreposage",CHANGE_MANMETHOD:"Modification du procédé de fabrication",CHANGE_MANSITE:"Modification du site de fabrication",CHANGE_CONTAIN:"Modification du format du récipient dans le cas d’un médicament administré par voie parentérale",CHANGE_PACKAGE:"Modification des spécifications du conditionnement dans le cas d’un médicament administré par voie parentérale/par inhalation",CHANGE_MATERIAL:"Modification de la composition du matériel de conditionnement",COMPANY_ID:"fr_Company Id",DOSSIER_ID:"fr_Dossier Id",ACTIVITY_LEAD:"fr_Activity Lead",FEE_CLASS:"fr_Fee Class",NOT_LASA:"fr_I confirm that this administrative submission type is NOT a Look-alike Sound-alike (LASA) submission",REASON_FILE:"fr_Reason for filing this Regulatory Activity",RELATED_ACTIVITIES:"fr_Related Regulatory Activity (Referred to in this Administrative Submission)",ACTIVITY_TYPE:"fr_Regulatory Activity Type",DATE_CLEARED:"fr_Date Cleared",MANUFACT_NAME:"fr_Manufacturer / Sponsor Name [Full Legal Name - No Abbreviations]",REASON_FILING:"fr_Reason for Filing this Regulatory Activity",ASSOC_DINS:"fr_Associated Drug Identification Numbers (DIN)",ADD_DIN:"fr_Add DIN",SAVE_ACTIVITY:"fr_Save Activity",OTHER_DETAILS:"fr_Other Details",DIN_ABRREV:"DIN",DELETE_ACTIVITY:"fr_Delete Activity",AUT_LETTER:"fr_Please include Third Party Authorization letter in the REP folder when submitting via the CESG",DOSSIER_ID_PREV:"fr_Dossier Id (Previously File Number)",RELATED_ACTIVITY:"fr_Related Activity",AMEND_ACTIVITY:"fr_Amend Related Activity",IS_ADMIN_SUB:"fr_Is this an Administrative Submission license agreement?",LICENCE_AGREE:"fr_Is this Administrative Submission a license agreement?",DIN_TRANSFER:"fr_I confirm that this Administrative Submission is a DIN transfer of ownership",REGACTIVSEARCH:"fr_Select or search for Regulatory Activity Type",SAVE_INSTRUCT:"fr_Activity File Save Instructions",RATIONALE_MISSING:"Veuillez sélectionner au moins une justification",NOTIF_MISSING:"fr_A least one type of Notifiable Change is required","CONTACTREC.CONTACTRECFORM":"fr_in the REP contact record",REG_TRANSACT:"fr_Regulatory Activity Form"}),$translateProvider.translations("en",{"B14-20160301-09":"Pharmaceutical","B14-20160301-02":"Biological","B14-20160301-10":"Post-Market Pharmacovigilance","B14-20160301-07":"Drug Master File",UNASSIGNED:"Unassigned"}),$translateProvider.translations("fr",{"B14-20160301-09":"fr_Pharmaceutical","B14-20160301-02":"fr_Biological","B14-20160301-10":"fr_Post-Market Pharmacovigilance","B14-20160301-07":"fr_Drug Master File",UNASSIGNED:"fr_Unassigned"}),$translateProvider.translations("en",{FIRSTNAME:"First Name",LASTNAME:"Last Name",INITIALS:"Initials",LANGCORRESPOND:"Language of Correspondance",JOBTITLE:"Job Title",SALUTATION:"Salutation",SALUT_MR:"Mr.",SALUT_MS:"Ms.",SALUT_DR:"Dr.",SALUT_MRS:"Mrs.",ROLE_PRIMARY:"Primary",ROLE_SECONDARY:"Alternate",CONTACTEMAIL:"Email",FAX_NUMBER:"Fax Number",PHONE_EXT:"Phone Extension",ROLES:"Roles",PHONENUMBER:"Phone Number",CONTACT_INFO:"Company Representative Information",AMEND:"Amend",REP_CONTACT:"REP Contact",ONE_ROLE:"Role",CONTACT_DETAILS:"Company Representative Details",ADD_CONTACT:"Add REP Contact",CONTACT_ROLE_LEGEND:"Select one or more roles for this company representative",ADD_REPRES:"Add Company Representative",DELETE_REPRES:"Delete Company Rep.",SAVE_REPRES:"Save Company Rep."}),$translateProvider.translations("fr",{FIRSTNAME:"Prénom",LASTNAME:"Nom",INITIALS:"Initiales",LANGCORRESPOND:"Langue de correspondance",JOBTITLE:"Titre de poste",SALUTATION:"Titre de civilité",SALUT_MR:"M.",SALUT_MS:"Mme",SALUT_DR:"Dr.",SALUT_MRS:"Mlle",ROLE_PRIMARY:"Primaire",ROLE_SECONDARY:"Alterner",CONTACTEMAIL:"Adresse électronique",FAX_NUMBER:"Numéro de télécopieur",PHONE_EXT:"Poste",ADDR_ROLES:"fr_Roles",PHONENUMBER:"Numéro de téléphone",CONTACT_INFO:"fr_Company Representative Information",AMEND:"fr_Amend",REP_CONTACT:"fr_REP Contact",ONE_ROLE:"fr_Role",CONTACT_DETAILS:"fr_Company Representative Details",ADD_CONTACT:"fr_Add REP Contact",CONTACT_ROLE_LEGEND:"fr_Select one or more roles for this company representative"}),$translateProvider.translations("en",{APPL_STATUS:"Application Status",ENROL_VERSION:"Enrolment Version",DATE_SAVED:"Date Last Saved",AMEND_ENROL:"Amend Enrolment",AMEND_MSG:"Edit records to be amended below."}),$translateProvider.translations("fr",{APPL_STATUS:"fr_Application Status",ENROL_VERSION:"Version d’inscription",DATE_SAVED:"Date du dernier enregistrement",AMEND_ENROL:"fr_Amend Enrolment",AMEND_MSG:"fr_Edit records to be amended below."}),$translateProvider.translations("en",{SELECT_LOAD:"Select a file to load",MSG_SUCCESS_LOAD:"The file was loaded successfully",MSG_ERR_JSONPARSE:"Error: there was an error parsing the working file.",MSG_ERR_XMLPARSE:"Error: there was an error parsing the draft XML file.",MSG_ERR_FILE_LOAD:"Error: there was a problem loading the file.",MSG_ERR_FILE_TYPE:"Error: An invalid file type was selected.",MSG_ERR_FORM_TYPE:"Error: the wrong form type was selected for this form.",MSG_ERR_CHECKSUM_FAIL:"Error: the checksum in the file does not match the calculated checksum"}),$translateProvider.translations("fr",{SELECT_LOAD:"Sélectionnez un fichier à charger",MSG_SUCCESS_LOAD:"Le fichier a été chargé avec succès",MSG_ERR_JSONPARSE:"Erreur: il y a eu une erreur en analysant le fichier de travail.",MSG_ERR_XMLPARSE:"Erreur: il y avait une erreur d'analyse du projet de fichier XML,",MSG_ERR_FILE_LOAD:"Erreur: il y a eu un problème lors du chargement du fichier.",MSG_ERR_FILE_TYPE:"Erreur: un type de fichier invalide a été sélectionné.",MSG_ERR_FORM_TYPE:"Erreur: le type de formulaire incorrect a été sélectionné pour ce formulaire.",MSG_ERR_CHECKSUM_FAIL:"Erreur: La somme de contrôle dans le fichier ne correspond pas à la somme de contrôle calculée."}),$translateProvider.translations("en",{Y:"Yes",N:"No",DELETEROW:"Delete Row",SELECTEDROW:"Selected Row",REQUIRED:"(required)",ROLES_SELECT:"Select one or more roles for this record",NEW:"New",AMEND:"Amend",APPROVED:"Approved",CLICK_TOGGLE:"Click to toggle the collapse or expand details for this address.",AMEND_RECORD:"Amend Record",en:"English",fr:"French",DISCARD_CHANGES:"Discard Changes",REPSECONDARY:"Alternate REP contact",REPPRIMARY:"Primary REP contact",MAILING:"Regulatory Mailing / Annual Contact",BILLING:"Billing Address",MANUFACTURER:"Manufacturer / Sponsor Mailing Address",IMPORTER:"Canadian Importer Mailing Address",APPROVE_FINAL:"Approve Final XML",SAVE_DRAFT:"Save Draft for Filing",PRIMARY:"Primary",SECONDARY:"Alternate",TOGGLE_EXPAND:"Click to toggle collapse or expand details of row",SAVE_WORK:"Save Working Copy",CONTROL_NUMBER:"Control Number",REP_CONTACT_INFO:"REP Contact Information",SAVE_CONTACT:"Save Contact",DELETE_CONTACT:"Delete Contact",COMPANY_ID:"Company Id",DOSSIER_ID:"Dossier Id",ERRORS:"Errors",UNKNOWN:"Unknown",BIOLOGIC:"Biologic",PHARMACEUTICAL:"Pharmaceutical",HELP_FILE_LOAD:"file load instructions",EXPAND:"Expand",HELP_ACTIVITY_MAIN:"Activity Instructions",HELP_ACTIVITY_REP:"REP Contact Instructions",CALENDAR:"Pick date from calendar",HIDE_CALENDAR:"Hide Calendar (escape key)",OTHER:"Other",HELP_REP_CONTACT:"REP Contact Instructions",OTHER_UNITS:"Units other details",COMPANYNAME:"Company Name (Full legal name - no abbreviations)",COPY:"Copy",DELETE:"Delete",SAVE_WORKING:"Save Working Copy",COMPANY_NOABBREV:"Company Name (Full legal Name - no abbreviations)",CLOSE_ALERT:"Collapse instructions",COLLAPSE:"Collapse",SAVE_RECORD:"Save Record",DELETE_RECORD:"Delete Record",CONTROL_NUM:"Control Number"}),$translateProvider.translations("fr",{Y:"Oui",N:"Non",DELETEROW:"fr_Delete Row",SELECTEDROW:"Selected Row",REQUIRED:"(requis)",ROLES_SELECT:"fr_Select one or more roles for this record",NEW:"fr_New",AMEND:"fr_Amend",APPROVED:"fr_Approved",CLICK_TOGGLE:"fr_Click to toggle the collapse or expand details for this address.",AMEND_RECORD:"fr_Amend Record",en:"Anglais",fr:"Français",DISCARD_CHANGES:"fr_Discard Changes",REPSECONDARY:"fr_Alternate REP contact",REPPRIMARY:"fr_Primary REP contact",MAILING:"Contact pour le courrier réglementaire",BILLING:"fr_Billing",MANUFACTURER:"fr_Manufacturer",IMPORTER:"Importateur canadien",APPROVE_FINAL:"Approuver XML final",PRIMARY:"fr_Primary",SECONDARY:"fr_Alternate",TOGGLE_EXPAND:"fr_Click to toggle collapse or expand details of row",SAVE_DRAFT:"Enregistrer le brouillon",CONTROL_NUMBER:"fr_Control Number",REP_CONTACT_INFO:"fr_Main Contact Information",SAVE_CONTACT:"fr_Save Contact",DELETE_CONTACT:"fr_Delete Contact",COMPANY_ID:"fr_Company Id",DOSSIER_ID:"fr_Dossier Id",ERRORS:"Erreurs",UNKNOWN:"Inconnu",BIOLOGIC:"fr_Biologic",PHARMACEUTICAL:"fr_Pharmaceutical",HELP_FILE_LOAD:"fr_File Load Instructions",EXPAND:"fr_Expand",HELP_ACTIVITY_MAIN:"fr_Activity Instructions",HELP_ACTIVITY_REP:"fr_REP Contact Instructions",CALENDAR:"fr_Pick date from calendar",HIDE_CALENDAR:"fr_Hide Calendar (escape key)",OTHER:"Autre",HELP_REP_CONTACT:"fr_REP Contact Instructions",OTHER_UNITS:"fr_Units other details",COMPANYNAME:"fr_Company Name (Full legal name - no abbreviations)",COPY:"fr_Copy",DELETE:"fr_Delete",SAVE_WORKING:"Enregistrer une copie de travail",COMPANY_NOABBREV:"fr_Company Name (Full legal Name - no abbreviations)",CLOSE:"Minimiser les instructions",COLLAPSE:"Minimiser les",SAVE_RECORD:"fr_Save Record",DELETE_RECORD:"fr_Delete Record",CONTROL_NUM:"fr_Control Number"}),$translateProvider.translations("en",{MSG_ERR_MAND:"This field is required",MSG_ERR_EMAIL_FORMAT:"Please enter a valid email address.",MSG_ERR_ROLE:"Please select at least one role",MSG_ERR_CONTACT_NUM:"All the roles have to be used for the contacts",MSG_ERR_PHONE_FORMAT:"Specify a valid phone number",MSG_ERR_FAX_FORMAT:"Specify a valid fax number",MSG_ERR_ALLROLE:"The roles of manufacturer, mailing, billing, and primary REP contact  have not all been selected among the list of contacts",MSG_ERR_ADDRESSSROLE:"The roles of manufacturer, mailing, and billing have not all been selected among the list of addresses",MSG_ERR_POSTAL:"Please specify a valid postal code.",MSG_ERR_ZIP:"Please specify a valid zip code.",MSG_ERR_DATE_FORMAT:"The date format is incorrect.",MAILING_SEL:"Mailing Role already Selected",MANUFACT_SEL:"Manufacturer Role already Selected",MAIL_SEL:"Mailing Role already Selected",BILLING_SEL:"Billing Role already Selected",IMPORTER_SEL:"Importer Role already Selected",REPPRIM_SEL:"REP Primary Role already Selected",REPALT_SEL:"REP Alternate Role already Selected",MSG_LENGTH_MIN5:"Please enter at least 5 characters",MSG_LENGTH_6:"Please enter 6 characters.",MSG_LENGTH_6NUM:"Please enter 6 digits.",MSG_LENGTH_8NUM:"Please enter 8 digits.",MSG_LENGTH_7:"Please enter 7 characters.",MSG_LENGTH_7NUM:"Please enter 7 digits.",ONE_REP:"At least one contact is required.",MSG_ERR_NOTIF_SEL:"Please select at least one notifiable change.",MSG_ERR_MIN_POS:"Must be a positive number",MSG_ERR_MAX:"Exceeds the maximum"}),$translateProvider.translations("fr",{MSG_ERR_MAND:"Ce champ est obligatoire.",MSG_ERR_EMAIL_FORMAT:"Veuillez fournir une adresse électronique valide.",MSG_ERR_CONTACT_NUM:"fr_All the roles have to be used for the company contacts",MSG_ERR_PHONE_FORMAT:"Veuillez fournir un numéro de téléphone valide.",MSG_ERR_FAX_FORMAT:"Veuillez fournir un numéro de télécopieur valide.",MSG_ERR_ALLROLE:"fr_Across the contact records, the roles of manufacturer, mailing, billing, and REP primary contact must be selected",MSG_ERR_ADDRESSSROLE:"fr_The roles of manufacturer, mailing, and billing have not all been selected among the list of addresses",MSG_ERR_POSTAL:"Veuillez fournir un code postal valide.",MSG_ERR_ZIP:"Veuillez fournir un code postal valide.",MSG_ERR_DATE_FORMAT:"Veuillez fournir une une date valide.",MANUFACT_SEL:"fr_Manufacturer Role already Selected",MAIL_SEL:"fr_Mailing Role already Selected",BILLING_SEL:"fr_Billing Role already Selected",IMPORTER_SEL:"fr_Importer Role already Selected",REPPRIM_SEL:"fr_REP Primary Role already Selected",REPALT_SEL:"fr_REP Alternate Role already Selected",MSG_LENGTH_MIN5:"Veuillez fournir au moins 5 chiffres.",MSG_LENGTH_6:"Veuillez fournir au moins 6 caractères.",MSG_LENGTH_6NUM:"Veuillez fournir 6 chiffres.",MSG_LENGTH_8NUM:"Veuillez fournir 8 chiffres.",MSG_LENGTH_7:"Veuillez fournir 7 caractères.",MSG_LENGTH_7NUM:"Veuillez fournir  7 chiffres.",ONE_REP:"Au moins un contact est requis",MSG_ERR_NOTIF_SEL:"Sélectionnez au moins un changement de déclaration",MSG_ERR_MIN_POS:"Doit être un nombre positif",MSG_ERR_MAX:"Dépasse le maximum."}),$translateProvider.translations("en",{FOR_THE:"For the ",THERE_ARE_ERRORS:"There are errors",ERRORS_FOUND:"errors were found.",ERROR_FOUND:"error was found.",TYPE_REQUIRED:"This field is required.",TYPE_EMAIL:"Please enter a valid email address.",TYPE_DUPLICATEROLE:"This role has already been selected.",TYPE_MINLENGTH:"Less than minimum length",POSTAL_FORMAT:"Please enter a valid format",TYPE_MIN:"Must be greater than the minimum",TYPE_DATE:"Please enter a valid date",TYPE_NUMBER:"Please enter a valid number",TYPE_PATTERN:"The format is not valid"}),$translateProvider.translations("fr",{FOR_THE:"Pour le ",THERE_ARE_ERRORS:"Il y a des erreurs",ERRORS_FOUND:"erreurs ont été trouvées.",ERROR_FOUND:"erreur a été trouvée.",TYPE_REQUIRED:"Ce champ est obligatoire.",TYPE_EMAIL:"Veuillez fournir une adresse électronique valide.",TYPE_DUPLICATEROLE:"Ce rôle a déjà été sélectionné.",TYPE_MINLENGTH:"Moins de longueur minimale.",POSTAL_FORMAT:"Entrez un format valide.",TYPE_MIN:"Doit être supérieur au minimum.",TYPE_DATE:"Veuillez fournir une une date valide.",TYPE_NUMBER:"Veuillez fournir un numéro valide.",TYPE_PATTERN:"fr_The format is not valid"})}]),function(){"use strict";angular.module("numberFormat",[])}(),function(){"use strict";function digitsCtrl(){function link(scope,element,attrs,modelCtrl){modelCtrl.$parsers.push(function(inputValue){if(void 0==inputValue)return"";var isNumber=!1,max=-1,ignore=!1,tempVal=""+inputValue;attrs.type&&"number"===attrs.type&&(isNumber=!0),attrs.onlyMax&&(max=parseInt(attrs.onlyMax));var regexIntNeg=/[^0-9-]/g,integerReg=/[^0-9]/g,regexValue=integerReg;if("intNeg"==attrs.onlyDigits?regexValue=regexIntNeg:"false"===attrs.onlyDigits?ignore=!0:regexValue=integerReg,ignore)return inputValue;var transformedInput=tempVal.replace(regexValue,"");return max>0&&(transformedInput=transformedInput.substring(0,max)),transformedInput!==tempVal&&(isNumber&&transformedInput&&(transformedInput=parseFloat(transformedInput)),modelCtrl.$setViewValue(transformedInput),modelCtrl.$render()),transformedInput})}var directive={link:link,restrict:"A",require:"?ngModel"};return directive}angular.module("numberFormat").directive("onlyDigits",digitsCtrl)}(),function(){"use strict";angular.module("commonStaticLists",["hpfbConstants"])}(),function(){"use strict";function getService(YES,NO){function _getYes(){return YES}function _getNo(){return NO}function _getYesNoArray(){return[YES,NO]}var service={getYesNoList:_getYesNoArray,getYesValue:_getYes,getNoValue:_getNo()};return service}angular.module("commonStaticLists").factory("CommonLists",getService),getService.$inject=["YES","NO"]}(),function(){"use strict";angular.module("dataLists",["hpfbConstants"])}(),function(){"use strict";function getService(UNKNOWN){function _createCountryArray(translateJson){vm.countryList=translateJson}function _getUnknownCountryRec(){return{id:UNKNOWN,en:"Unknown",fr:"Inconnu"}}function getCountryValuesArray(){return vm.countryList}function getProvinceValuesArray(){return["AB","BC","MB","NB","NL","NT","NS","NU","ON","PE","QC","SK","YT"]}function getUSStatesValueArray(){return["AL","AK","AZ","AR","CA","CO","CT","DE","DC","FL","GA","HI","ID","IL","IN","IA","KS","KY","LA","ME","MD","MA","MI","MN","MS","MO","MT","NE","NV","NH","NJ","NM","NY","NC","ND","OH","OK","OR","PA","RI","SC","SD","TN","TX","UT","VT","VA","WA","WV","WI","WY"]}var vm=this;vm.countryList=[];var service={getCountries:getCountryValuesArray,getProvinces:getProvinceValuesArray,getUSStates:getUSStatesValueArray,createCountryList:_createCountryArray,getUnknownCountryRecord:_getUnknownCountryRec};return service}angular.module("dataLists").factory("getCountryAndProvinces",getService),getService.inject=["UNKNOWN"]}(),function(){"use strict";function getSalService($filter,$q,$http,$translate,OTHER,FRENCH,RELATIVE_FOLDER_DATA){function getSalValuesArray(){return["SALUT_DR","SALUT_MR","SALUT_MRS","SALUT_MS"]}function getLanguagesValuesArray(){return["en","fr"]}function _createInternalContacts(){var deferred=$q.defer(),contactsUrl=RELATIVE_FOLDER_DATA+"internalContacts.json";return vm.internalContacts&&0!==vm.internalContacts.length?deferred.resolve(vm.internalContacts):$http.get(contactsUrl).success(function(data,status,headers,config){var newList=_createSortedArray(data,"en"),lang=$translate.proposedLanguage()||$translate.use(),otherRec={id:OTHER,en:"Other"};lang===FRENCH&&(otherRec.en="Autre"),newList.unshift(otherRec),vm.internalContacts=newList,deferred.resolve(newList)}).error(function(data,status,headers,config){deferred.reject(status)}),deferred.promise}function _getInternalContacts(){return _createInternalContacts()}function _createSortedArray(jsonList,lang){var result=[];return angular.forEach($filter("orderByLocale")(jsonList,lang),function(sortedObject){result.push(sortedObject)}),result}var vm=this;vm.internalContacts=[];var service={getSalutationList:getSalValuesArray,getLanguages:getLanguagesValuesArray,createInternalContacts:_createInternalContacts,getInternalContacts:_getInternalContacts};return service}angular.module("dataLists").factory("getContactLists",getSalService),getSalService.$inject=["$filter","$q","$http","$translate","OTHER","FRENCH","RELATIVE_FOLDER_DATA"]}(),function(){"use strict";function getRolesService(){function getRoleValuesArray(){return["","ROLE_PRIMARY","ROLE_SECONDARY"]}function _getFormTypes(){return[_biologic,_pharma]}function _getBiologic(){return _biologic}function _getPharmaceutical(){return _pharma}var _biologic="BIOLOGIC",_pharma="PHARMACEUTICAL",service={getContactRoles:getRoleValuesArray,getFormTypes:_getFormTypes,getBiologicType:_getBiologic,getPharmaType:_getPharmaceutical};return service}angular.module("dataLists").factory("getRoleLists",getRolesService)}(),function(){"use strict";angular.module("services",[])}(),function(){"use strict";function getTransactionSeq($http,$q){function yesNoArray(){return["Y","N"]}function _createRaArray(value){vm.raTypeArray=value}function getTransactionDescriptionsArray(){return vm.allActivities}function getActivityArray(){return vm.raTypeArray}function getPresubArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE]}function getANDSArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.COMMENTS_NOC,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.INITIAL,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.PRISTINE_PM,vm.allActivities.PRISTINE_PM_2LANG,vm.allActivities.BE_CLARIF_RESPONSE,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.NOC_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.NON_RESPONSE,vm.allActivities.NOTIFICATION_INTERRUPT_SALE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.CORR_PATENT_MED,vm.allActivities.ALLEGATION_NOTICE,vm.allActivities.FORM_IV,vm.allActivities.FORM_V,vm.allActivities.CONSENT_LTR,vm.allActivities.DATA_PROTECT_CORRESP]}function getDINAArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.INITIAL,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRISTINE_PM,vm.allActivities.PRISTINE_PM_2LANG,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA]}function getDINBArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.INITIAL,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRISTINE_PM,vm.allActivities.PRISTINE_PM_2LANG,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA]}function getEUNDSArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.BE_CLARIF_RESPONSE,vm.allActivities.CANCEL_LETTER,vm.allActivities.COMMENTS_NOC,vm.allActivities.COMMENTS_SUMMARY_BASIS,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.INITIAL,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.PRISTINE_PM,vm.allActivities.PRISTINE_PM_2LANG,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.NOC_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.NON_RESPONSE,vm.allActivities.NOTIFICATION_INTERRUPT_SALE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.CORR_PATENT_MED,vm.allActivities.ALLEGATION_NOTICE,vm.allActivities.FORM_IV,vm.allActivities.FORM_V,vm.allActivities.CONSENT_LTR,vm.allActivities.DATA_PROTECT_CORRESP,vm.allActivities.NONCLIN_CLARIF_RESPONSE]}function getEUSNDSArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.BE_CLARIF_RESPONSE,vm.allActivities.CANCEL_LETTER,vm.allActivities.COMMENTS_NOC,vm.allActivities.COMMENTS_SUMMARY_BASIS,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.POST_NOC_CHANGE,vm.allActivities.PRISTINE_PM,vm.allActivities.PRISTINE_PM_2LANG,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.NOC_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.NON_RESPONSE,vm.allActivities.NOTIFICATION_INTERRUPT_SALE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.CORR_PATENT_MED,vm.allActivities.ALLEGATION_NOTICE,vm.allActivities.FORM_IV,vm.allActivities.FORM_V,vm.allActivities.CONSENT_LTR,vm.allActivities.DATA_PROTECT_CORRESP,vm.allActivities.NONCLIN_CLARIF_RESPONSE]}function getLevel3Array(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.YEAR_LIST_OF_CHANGE,vm.allActivities.CLARIF_RESPONSE]}function getNCArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.COMMENTS_SUMMARY_BASIS,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.POST_NOC_CHANGE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.PRISTINE_PM,vm.allActivities.PRISTINE_PM_2LANG,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.NOL_RESPONSE,vm.allActivities.NOTIFICATION_INTERRUPT_SALE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA]}function getNDSArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.COMMENTS_NOC,vm.allActivities.COMMENTS_SUMMARY_BASIS,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.INITIAL,vm.allActivities.MEETING_MINUTES,vm.allActivities.NOTIFICATION_INTERRUPT_SALE,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.PRISTINE_PM,vm.allActivities.PRISTINE_PM_2LANG,vm.allActivities.BE_CLARIF_RESPONSE,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.NOC_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.NON_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.CORR_PATENT_MED,vm.allActivities.ALLEGATION_NOTICE,vm.allActivities.FORM_IV,vm.allActivities.FORM_V,vm.allActivities.CONSENT_LTR,vm.allActivities.DATA_PROTECT_CORRESP,vm.allActivities.NONCLIN_CLARIF_RESPONSE];
}function getPSURCArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.COMMENTS_SUMMARY_BASIS,vm.allActivities.FOR_PERIOD,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.MEETING_MINUTES,vm.allActivities.MHPD_RQ_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE]}function getPSURPVArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.FOR_PERIOD,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.MEETING_MINUTES,vm.allActivities.MHPD_RQ_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE]}function getRMPPVArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.MEETING_MINUTES,vm.allActivities.MHPD_RQ_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.RMP_VERSION_DATE]}function getSANDSArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.COMMENTS_NOC,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.POST_NOC_CHANGE,vm.allActivities.PRISTINE_PM,vm.allActivities.PRISTINE_PM_2LANG,vm.allActivities.BE_CLARIF_RESPONSE,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.NOC_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.NON_RESPONSE,vm.allActivities.NOTIFICATION_INTERRUPT_SALE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.CORR_PATENT_MED,vm.allActivities.ALLEGATION_NOTICE,vm.allActivities.FORM_IV,vm.allActivities.FORM_V,vm.allActivities.CONSENT_LTR,vm.allActivities.DATA_PROTECT_CORRESP]}function getSNDSArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.COMMENTS_NOC,vm.allActivities.COMMENTS_SUMMARY_BASIS,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.MEETING_MINUTES,vm.allActivities.PANDEMIC_APPL,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.POST_NOC_CHANGE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.PRISTINE_PM,vm.allActivities.PRISTINE_PM_2LANG,vm.allActivities.BE_CLARIF_RESPONSE,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.NOC_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.NON_RESPONSE,vm.allActivities.NOTIFICATION_INTERRUPT_SALE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.CORR_PATENT_MED,vm.allActivities.ALLEGATION_NOTICE,vm.allActivities.FORM_IV,vm.allActivities.FORM_V,vm.allActivities.CONSENT_LTR,vm.allActivities.DATA_PROTECT_CORRESP,vm.allActivities.NONCLIN_CLARIF_RESPONSE]}function getSNDSCArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.COMMENTS_NOC,vm.allActivities.COMMENTS_SUMMARY_BASIS,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_NOC_CHANGE,vm.allActivities.PRISTINE_PM,vm.allActivities.PRISTINE_PM_2LANG,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.NOC_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.NON_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.CORR_PATENT_MED,vm.allActivities.ALLEGATION_NOTICE,vm.allActivities.FORM_IV,vm.allActivities.FORM_V,vm.allActivities.CONSENT_LTR,vm.allActivities.DATA_PROTECT_CORRESP]}function getUDPVArray(){return[vm.allActivities.BENEFIT_RISK_ASSESS,vm.allActivities.CANCEL_LETTER,vm.allActivities.NOTIFICATION_CHANGE,vm.allActivities.POST_MARKET_SURV,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.MEETING_MINUTES,vm.allActivities.MHPD_RQ_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.RISK_COMMUN_DOC,vm.allActivities.SIGNAL_WORK_UP]}function getUDRAArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.CLARIF_RESPONSE,vm.allActivities.DIN_DISCONTINUED,vm.allActivities.ADVISEMENT_LETTER_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.MEETING_MINUTES,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE]}function getConsultArray(){return[vm.allActivities.PANDEMIC_APPL]}function _getMPNCArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ]}function _getMPNDSArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ]}function _getMPSNDSArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ]}function _getPANDArray(){return[vm.allActivities.BE_CLARIF_RESPONSE,vm.allActivities.CANCEL_LETTER,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.COMMENTS_NOC,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.INITIAL,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.MEETING_MINUTES,vm.allActivities.NOTIFICATION_INTERRUPT_SALE,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PANDEMIC_APPL,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.PRISTINE_PM_2LANG,vm.allActivities.PRISTINE_PM,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.NOC_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.NON_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.CORR_PATENT_MED,vm.allActivities.ALLEGATION_NOTICE,vm.allActivities.FORM_IV,vm.allActivities.FORM_V,vm.allActivities.CONSENT_LTR,vm.allActivities.DATA_PROTECT_CORRESP,vm.allActivities.NONCLIN_CLARIF_RESPONSE]}function _getPBRERCArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.COMMENTS_SUMMARY_BASIS,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.FOR_PERIOD,vm.allActivities.MEETING_MINUTES,vm.allActivities.MHPD_RQ_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE]}function _getPBRERPVArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.FOR_PERIOD,vm.allActivities.MEETING_MINUTES,vm.allActivities.MHPD_RQ_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE]}function _getPRNDSArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.MEETING_MINUTES,vm.allActivities.PRIORITY_REVIEW_RQ,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO]}function _getPRSNDSArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.MEETING_MINUTES,vm.allActivities.PRIORITY_REVIEW_RQ,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO]}function getYBPRArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.FOR_PERIOD,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.MEETING_MINUTES,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE]}function getDSurArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.FOR_PERIOD,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.MEETING_MINUTES,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE]}function getDINAArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.CHANGE_TO_DIN,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.INITIAL,vm.allActivities.MEETING_MINUTES,vm.allActivities.NOTIFICATION_INTERRUPT_SALE,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.PRISTINE_PM,vm.allActivities.PRISTINE_PM_2LANG,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.BE_CLARIF_RESPONSE,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.LABEL_PREAPPROVAL_2LANG]}function getDINBArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.CHANGE_TO_DIN,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.INITIAL,vm.allActivities.MEETING_MINUTES,vm.allActivities.NOTIFICATION_INTERRUPT_SALE,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.PRISTINE_PM,vm.allActivities.PRISTINE_PM_2LANG,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.YEAR_LIST_OF_CHANGE]}function getDINDArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.CHANGE_TO_DIN,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.INITIAL,vm.allActivities.MEETING_MINUTES,vm.allActivities.NOTIFICATION_INTERRUPT_SALE,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.LABEL_PREAPPROVAL_2LANG]}function getDINFArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.CHANGE_TO_DIN,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.INITIAL,vm.allActivities.MEETING_MINUTES,vm.allActivities.NOTIFICATION_INTERRUPT_SALE,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.LABEL_PREAPPROVAL_2LANG]}function getMPDINArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE]}function getPDCArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_AUTH_DIV1_CHANGE,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.PRISTINE_PM,vm.allActivities.PRISTINE_PM_2LANG,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.NOL_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE]}function getPDCBArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_AUTH_DIV1_CHANGE,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.PRISTINE_PM,vm.allActivities.PRISTINE_PM_2LANG,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.NOL_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE]}var vm=this;vm.raTypeArray=[],vm.allActivities={ADMINISTRATIVE:"ADMINISTRATIVE",BENEFIT_RISK_ASSESS:"BENEFIT_RISK_ASSESS",CANCEL_LETTER:"CANCEL_LETTER",CHANGE_TO_DIN:"CHANGE_TO_DIN",CLARIF_RESPONSE:"CLARIF_RESPONSE",COMMENTS_NOC:"COMMENTS_NOC",COMMENTS_SUMMARY_BASIS:"COMMENTS_SUMMARY_BASIS",DIN_DISCONTINUED:"DIN_DISCONTINUED",DRUG_NOTIF_FORM:"DRUG_NOTIF_FORM",FOR_PERIOD:"FOR_PERIOD",INITIAL:"INITIAL",MEETING_MINUTES:"MEETING_MINUTES",NOTIFICATION_CHANGE:"NOTIFICATION_CHANGE",NOTIFICATION_INTERRUPT_SALE:"NOTIFICATION_INTERRUPT_SALE",PANDEMIC_APPL:"PANDEMIC_APPL",POST_CLEARANCE_DATA:"POST_CLEARANCE_DATA",POST_MARKET_SURV:"POST_MARKET_SURV",POST_NOC_CHANGE:"POST_NOC_CHANGE",POST_AUTH_DIV1_CHANGE:"POST_AUTH_DIV1_CHANGE",PRESUB_MEETING_PKG:"PRESUB_MEETING_PKG",PRESUB_MEETING_RQ:"PRESUB_MEETING_RQ",PRIORITY_REVIEW_RQ:"PRIORITY_REVIEW_RQ",PRISTINE_PM:"PRISTINE_PM",PRISTINE_PM_2LANG:"PRISTINE_PM_2LANG",ADVISEMENT_LETTER_RESPONSE:"ADVISEMENT_LETTER_RESPONSE",CLIN_CLARIF_RESPONSE:"CLIN_CLARIF_RESPONSE",EMAIL_RQ_RESPONSE:"EMAIL_RQ_RESPONSE",LABEL_CLARIF_RESPONSE:"LABEL_CLARIF_RESPONSE",MHPD_RQ_RESPONSE:"MHPD_RQ_RESPONSE",NOC_RESPONSE:"NOC_RESPONSE",NOD_RESPONSE:"NOD_RESPONSE",NOL_RESPONSE:"NOL_RESPONSE",NON_RESPONSE:"NON_RESPONSE",PROCESSING_CLARIF_RESPONSE:"PROCESSING_CLARIF_RESPONSE",QUAL_CLIN_CLARIF_RESPONSE:"QUAL_CLIN_CLARIF_RESPONSE",QUAL_CLARIF_RESPONSE:"QUAL_CLARIF_RESPONSE",RECON_DECIS_LTR_INTENT:"RECON_DECIS_LTR_INTENT",RECON_DECIS_RQ_RECON:"RECON_DECIS_RQ_RECON",RECON_DECIS_OTHER_INFO:"RECON_DECIS_OTHER_INFO",SCREENING_ACCEPT_RESPONSE:"SCREENING_ACCEPT_RESPONSE",SCREENING_CLARIF_RESPONSE:"SCREENING_CLARIF_RESPONSE",SDN_RESPONSE:"SDN_RESPONSE",LABEL_PREAPPROVAL_2LANG:"LABEL_PREAPPROVAL_2LANG",PHONE_RQ_RESPONSE:"PHONE_RQ_RESPONSE",RISK_COMMUN_DOC:"RISK_COMMUN_DOC",RMP_VERSION_DATE:"RMP_VERSION_DATE",SIGNAL_WORK_UP:"SIGNAL_WORK_UP",UNSOLICITED_DATA:"UNSOLICITED_DATA",YEAR_LIST_OF_CHANGE:"YEAR_LIST_OF_CHANGE",BE_CLARIF_RESPONSE:"BE_CLARIF_RESPONSE",CORR_PATENT_MED:"CORR_PATENT_MED",ALLEGATION_NOTICE:"ALLEGATION_NOTICE",FORM_IV:"FORM_IV",FORM_V:"FORM_V",CONSENT_LTR:"CONSENT_LTR",DATA_PROTECT_CORRESP:"DATA_PROTECT_CORRESP",NONCLIN_CLARIF_RESPONSE:"NONCLIN_CLARIF_RESPONSE"};var service={getTransactionDescriptions:getTransactionDescriptionsArray,getActivityTypes:getActivityArray,createRaTypes:_createRaArray,getPresubTypes:getPresubArray,getAndsType:getANDSArray,getDinaType:getDINAArray,getDinbType:getDINBArray,getDindType:getDINDArray,getDinfType:getDINFArray,getDSurType:getDSurArray,getEundsType:getEUNDSArray,getEusndsType:getEUSNDSArray,getLevel3Type:getLevel3Array,getMPDINType:getMPDINArray,getNcType:getNCArray,getNdsType:getNDSArray,getPdcType:getPDCArray,getPdcBType:getPDCBArray,getPresubType:getPresubArray,getpSurCType:getPSURCArray,getpSurPvType:getPSURPVArray,getRmpPvType:getRMPPVArray,getSandsType:getSANDSArray,getSndsType:getSNDSArray,getSndsCArray:getSNDSCArray,getUdpvType:getUDPVArray,getUdraType:getUDRAArray,getYbprType:getYBPRArray,getConsultType:getConsultArray,getMPNCType:_getMPNCArray,getMPNDSType:_getMPNDSArray,getMPSNDSType:_getMPSNDSArray,getPANDType:_getPANDArray,getPBRERCType:_getPBRERCArray,getPBRERPVType:_getPBRERPVArray,getPRNDSType:_getPRNDSArray,getPRSNDSType:_getPRSNDSArray,getYesNoList:yesNoArray};return service}angular.module("services").factory("TransactionLists",getTransactionSeq),getTransactionSeq.inject=["$http","$q"]}(),function(){"use strict";angular.module("filterLists",["hpfbConstants"])}(),function(){"use strict";function orderByTranslatedCountry($translate,$filter,CANADA,USA){return function(array,objKey){var result=[],translated=[];return angular.forEach(array,function(value){translated.push({key:value,label:$translate.instant(value)})}),result.push(CANADA),result.push(USA),angular.forEach($filter("orderBy")(translated,"label"),function(sortedObject){sortedObject.key!==CANADA&&sortedObject.key!==USA&&result.push(sortedObject.key)}),result}}function orderByTranslatedCountryAndLabel($translate,$filter,CANADA,USA){return function(array){var result=[],translated=[];return angular.forEach(array,function(value){translated.push({key:value,label:$translate.instant(value)})}),result.push({key:CANADA,label:$translate.instant(CANADA)}),result.push({key:USA,label:$translate.instant(USA)}),angular.forEach($filter("orderBy")(translated,"label"),function(sortedObject){sortedObject.key!==CANADA&&sortedObject.key!==USA&&result.push(sortedObject)}),result}}function findCountryObj(){return function(array,targetKey){for(var i=0;i<array.length;i++)if(array[i].key===targetKey)return array[i];return null}}function orderByTranslated($translate,$filter){return function(array){var result=[],translated=[];return angular.forEach(array,function(value){translated.push({key:value,label:$translate.instant(value)})}),angular.forEach($filter("orderBy")(translated,"label"),function(sortedObject){result.push(sortedObject.key)}),result}}function sequenceOrderBy($filter){return function(array){var result=[];return angular.forEach($filter("orderBy")(array,"sequence",!0),function(sortedObject){result.push(sortedObject)}),result}}function orderByTranslatedOtherFirst($translate,$filter,OTHER){return function(array){var result=[],translated=[];return angular.forEach(array,function(value){translated.push({key:value,label:$translate.instant(value)})}),result.push(OTHER),angular.forEach($filter("orderBy")(translated,"label"),function(sortedObject){sortedObject.key!==OTHER&&result.push(sortedObject.key)}),result}}function _orderByLocale(){return function(items,lang){return items.sort(function(a,b){return a[lang].localeCompare(b[lang],lang)}),items}}function _findById($filter){return function(array,searchJson){var initialResult=$filter("filter")(array,searchJson);if(!initialResult)return null;if(1===initialResult.length)return initialResult[0];for(var i=0;i<initialResult.length;i++)if(initialResult[i].id===searchJson.id)return initialResult[i];return null}}angular.module("filterLists").filter("orderByTranslatedCountry",orderByTranslatedCountry).filter("orderByTranslated",orderByTranslated).filter("orderByTranslatedOtherFirst",orderByTranslatedOtherFirst).filter("orderByCountryAndLabel",orderByTranslatedCountryAndLabel).filter("orderByLocale",_orderByLocale).filter("findCountryObject",findCountryObj).filter("findListItemById",_findById).filter("sequenceOrderDescending",sequenceOrderBy),orderByTranslatedCountry.$inject=["$translate","$filter","CANADA","USA"],orderByTranslated.$inject=["$translate","$filter"],orderByTranslatedOtherFirst.$inject=["$translate","$filter","OTHER"],_findById.$inject=["$filter"]}(),function(){"use strict";angular.module("repContactService",[])}(),function(){"use strict";function RepContactService(){function RepContactService(){}return RepContactService.prototype={_default:{}},RepContactService.prototype.getPrimaryRole=function(){return"PRIMARY"},RepContactService.prototype.getSecondaryRole=function(){return"SECONDARY"},RepContactService.prototype.createRepContact=function(repContactList){if(repContactList){var PRIMARY=this.getPrimaryRole(),SECONDARY=this.getSecondaryRole(),contact=_createDefaultRepContact(),currentContacts=repContactList;if(0==currentContacts.length)contact.repRole=PRIMARY;else{contact.repRole=PRIMARY;for(var i=0;i<currentContacts.length;i++)if(currentContacts[i].repRole==PRIMARY){contact.repRole=SECONDARY;break}}return contact}},RepContactService}function _createDefaultRepContact(){var repcontact=_createContactModel();return repcontact.repRole="",repcontact.amend=!1,repcontact}function _createContactModel(){var contact={};return contact.salutation="",contact.givenName="",contact.initials="",contact.surname="",contact.title="",contact.language="",contact.phone="",contact.phoneExt="",contact.fax="",contact.email="",contact}angular.module("repContactService").factory("RepContactService",RepContactService)}(),function(){"use strict";angular.module("hpfbConstants",[]),angular.module("hpfbConstants").constant("CANADA","CAN").constant("OTHER","OTHER").constant("YES","Y").constant("NO","N").constant("USA","USA").constant("UNKNOWN","UNKNOWN").constant("ENGLISH","en").constant("FRENCH","fr").constant("NEW_TYPE","NEW").constant("APPROVED_TYPE","APPROVED").constant("AMEND_TYPE","AMEND").constant("INTERNAL_TYPE","INT").constant("EXTERNAL_TYPE","EXT").constant("PHARMA_TYPE","PHARMA").constant("RELATIVE_FOLDER_DATA","../data/")}(),function(){"use strict";angular.module("applicationInfoService",[])}(),function(){"use strict";function ApplicationInfoService(){function ApplicationInfoService(){}return ApplicationInfoService.prototype.getTodayDate=function(){function pad(n){return n<10?"0"+n:n}var d=new Date,isoDate=d.getFullYear()+"-"+pad(d.getMonth()+1)+"-"+pad(d.getDate());return isoDate},ApplicationInfoService.prototype.incrementMinorVersion=function(enrolmentVersion){var result;if(enrolmentVersion){var parts=enrolmentVersion.split("."),dec=parseInt(parts[1]);result=parts[0]+"."+(dec+1)}else result="0.1";return result},ApplicationInfoService.prototype.incrementMajorVersion=function(enrolmentVersion){var result;if(enrolmentVersion){var parts=enrolmentVersion.split("."),whole=parseInt(parts[0]);result=whole+1+".0"}else result="1.0";return result},ApplicationInfoService.prototype.getApplicationStatusList=function(){return["NEW","AMEND","APPROVED"]},ApplicationInfoService.prototype.getApprovedType=function(){return"APPROVED"},ApplicationInfoService.prototype.getAmendType=function(){return"AMEND"},ApplicationInfoService}angular.module("applicationInfoService").factory("ApplicationInfoService",ApplicationInfoService)}(),function(){"use strict";angular.module("activityLists",[])}(),function(){"use strict";function getService($http,$q,$filter,$translate){function _getfeeClassArray(){return vm.feeClassArray&&0!==vm.feeClassArray.length?vm.feeClassArray:_loadFeeType()}function _loadFeeType(){var deferred=$q.defer(),feeClassUrl="../data/feeClass.json";return $http.get(feeClassUrl).success(function(data,status,headers,config){var lang=$translate.proposedLanguage()||$translate.use(),newList=_createSortedArray(data,lang);vm.feeClassArray=newList,deferred.resolve(newList)}).error(function(data,status,headers,config){deferred.reject(status)}),deferred.promise}function _getRaTypeArray(){return vm.raTypeArray&&0!==vm.raTypeArray.length?vm.raTypeArray:_loadRaType()}function _loadRaType(){var deferred=$q.defer(),raTypeUrl="../data/raType.json";return $http.get(raTypeUrl).success(function(data,status,headers,config){var lang=$translate.proposedLanguage()||$translate.use(),newList=_createRaTypeSortedArray(data,lang);vm.raTypeArray=newList,deferred.resolve(newList)}).error(function(data,status,headers,config){deferred.reject(status)}),deferred.promise}function _getActivityLeadArray(){return["B14-20160301-09",vm.BIOLOGICAL,"B14-20160301-10","B14-20160301-07"]}function _getBiologicalLead(){return vm.BIOLOGICAL}function _getNC_raType(){return vm.NC_raType}function _getSANDS_raType(){return vm.SANDS_raType}function _getSNDS_raType(){return vm.SNDS_raType}function _getDIN_raType(){return vm.DIN_raType}function _createSortedArray(jsonList,lang){var result=[];return angular.forEach($filter("orderByLocale")(jsonList,lang),function(sortedObject){result.push(sortedObject)}),result}function _createRaTypeSortedArray(jsonList,lang){var result=[];return angular.forEach($filter("orderByLocale")(jsonList,lang),function(sortedObject){"B02-20160301-038"!==sortedObject.id&&result.push(sortedObject)}),result}var vm=this;vm.feeClassArray=[],vm.raTypeArray=[],vm.BIOLOGICAL="B14-20160301-02",vm.NC_raType="B02-20160301-050",vm.SANDS_raType="B02-20160301-082",vm.SNDS_raType="B02-20160301-084",vm.DIN_raType="no used- deprecated?";var service={getFeeClassList:_getfeeClassArray,getRaTypeList:_getRaTypeArray,getActivityLeadList:_getActivityLeadArray,getBiologicalLeadValue:_getBiologicalLead,getSANDSRaTypeValue:_getSANDS_raType,getSNDSTypeValue:_getSNDS_raType,getNCTypeValue:_getNC_raType,getDINTypeValue:_getDIN_raType};return service}angular.module("activityLists").factory("ActivityListFactory",getService),getService.inject=["$http","$q","$filter","$translate"]}(),function(){"use strict";angular.module("activityService",["hpfbConstants","activityLists"])}(),function(){"use strict";function ActivityService(YES,NO,ActivityListFactory,$filter,$translate){function ActivityService(){var defaultActivityData={companyId:"",dstsControlNumber:"",enrolmentVersion:"",dateSaved:"",applicationType:"NEW",softwareVersion:"1.1.0",dataChecksum:"",dossierIdPrefix:"HC6-024-",dossierId:"",regActivityLead:"",regActivityType:"",feeClass:"",reasonFiling:"",isThirdParty:"",isAdminSub:"",relatedActivity:{},contactRecord:[]};defaultActivityData.rationaleTypes=_createRationalTypes(),defaultActivityData.notifiableChangeTypes=_createNotifiableChangeTypes(),defaultActivityData.relatedActivity=_getEmptyActivity(),angular.extend(this._default,defaultActivityData),this.rootTag="ACTIVITY_ENROL",this.activityId=0}return ActivityService.prototype={_default:{},SANDS:ActivityListFactory.getSANDSRaTypeValue(),SNDS:ActivityListFactory.getSNDSTypeValue(),NC:ActivityListFactory.getNCTypeValue(),VNC:"VNC",BIOLOGIC:ActivityListFactory.getBiologicalLeadValue(),DIN:ActivityListFactory.getDINTypeValue()},ActivityService.prototype.getRootTag=function(){return this.rootTag},ActivityService.prototype.transformToFileObj=function(jsonObj){var activity={ACTIVITY_ENROL:{template_type:"PHARMA",company_id:jsonObj.companyId,dsts_control_number:jsonObj.dstsControlNumber,enrolment_version:jsonObj.enrolmentVersion,date_saved:jsonObj.dateSaved,application_type:jsonObj.applicationType,software_version:jsonObj.softwareVersion,data_checksum:jsonObj.dataChecksum,dossier_id_prefix:jsonObj.dossierIdPrefix,dossier_id:jsonObj.dossierId,dossier_id_concat:"",reg_activity_lead:jsonObj.regActivityLead,reg_activity_type:"",fee_class:"",reason_filing:jsonObj.reasonFiling,is_third_party:jsonObj.isThirdParty,is_admin_submission:jsonObj.isAdminSub,notifiable_change_types:{},rationale_types:{}}};return jsonObj.feeClass&&(activity[this.rootTag].fee_class={_label_en:jsonObj.feeClass.en,_label_fr:jsonObj.feeClass.fr,__text:jsonObj.feeClass.id}),jsonObj.regActivityType&&(activity[this.rootTag].reg_activity_type={_label_en:jsonObj.regActivityType.en,_label_fr:jsonObj.regActivityType.fr,__text:jsonObj.regActivityType.id}),activity[this.rootTag].notifiable_change_types=_mapNotifiableChangeTypesToOutput(jsonObj.notifiableChangeTypes),activity[this.rootTag].rationale_types=_mapRationaleTypeToOutput(jsonObj.rationaleTypes),jsonObj.isAdminSub===YES&&(activity[this.rootTag].related_activity=this.tranformRelatedActivityToFileObj(jsonObj.relatedActivity)),activity[this.rootTag].contact_record=this.transformContactListToFileObj(jsonObj.contactRecord),jsonObj.dossierId?activity[this.rootTag].dossier_id_concat=jsonObj.dossierIdPrefix+jsonObj.dossierId:activity[this.rootTag].dossier_id_concat="",activity},ActivityService.prototype.mapContactList=function(jsonObj){return _mapRegulatoryContactList(jsonObj)},ActivityService.prototype.transformContactListToFileObj=function(jsonObj){return _transformRegulatoryContactListToFileObj(jsonObj)},ActivityService.prototype.tranformRelatedActivityToFileObj=function(jsonObj){var activity={};activity.sponsor_name=jsonObj.sponsorName,activity.date_cleared="";var dateCleared=jsonObj.dateCleared,month="",day="";return dateCleared&&(month=dateCleared.getMonth()+1,day=dateCleared.getDate(),month<10&&(month="0"+month),day<10&&(day="0"+day),activity.date_cleared=dateCleared.getFullYear()+"-"+month+"-"+day),activity.reg_activity_type="",activity.reg_activity_type={_label_en:jsonObj.regActivityType.en,_label_fr:jsonObj.regActivityType.fr,__text:jsonObj.regActivityType.id},activity.control_number=jsonObj.controlNumber,activity.license_agreement=jsonObj.licenseAgree,activity.din_transfer=jsonObj.dinTransfer===!0?YES:NO,activity.not_lasa=jsonObj.notLasa===!0?YES:NO,activity},ActivityService.prototype.getModelInfo=function(){return this._default},ActivityService.prototype.getActivityInfo=function(jsonObj){if(!jsonObj)return this._default;var model={};model.companyId=jsonObj.company_id,model.dstsControlNumber=jsonObj.dsts_control_number,model.enrolmentVersion=jsonObj.enrolment_version,model.dateSaved=jsonObj.date_saved,model.applicationType=jsonObj.application_type,model.softwareVersion=jsonObj.software_version,model.dataChecksum=jsonObj.software_version,model.dossierIdPrefix=jsonObj.dossier_id_prefix,model.dossierId=jsonObj.dossier_id,model.regActivityLead=jsonObj.reg_activity_lead,model.regActivityType=$filter("filter")(ActivityListFactory.getRaTypeList(),{id:jsonObj.reg_activity_type.__text})[0];var feeClassList=$filter("filter")(ActivityListFactory.getFeeClassList(),{id:jsonObj.fee_class.__text});model.feeClass=_getFilterJsonMatch(feeClassList,jsonObj.fee_class.__text,"id"),model.reasonFiling=jsonObj.reason_filing,model.isThirdParty=jsonObj.is_third_party,model.isAdminSub=jsonObj.is_admin_submission,model.notifiableChangeTypes=_transformNotifiableChangeTypeFromFileObj(jsonObj.notifiable_change_types),model.rationaleTypes=_transformRationaleTypeFromFileObj(jsonObj.rationale_types),model.relatedActivity={};var repContacts={contactRecord:[]};return jsonObj.related_activity&&(model.relatedActivity=this.transformRelatedRegActivityFromFileObj(jsonObj.related_activity)),
jsonObj.contact_record&&(repContacts.contactRecord=this.mapContactList(jsonObj.contact_record)),angular.merge(model,repContacts)},ActivityService.prototype.resetRationale=function(){this._default.rationaleTypes=_createRationalTypes()},ActivityService.prototype.resetNotifiableChanges=function(){this._default.notifiableChangeTypes=_createNotifiableChangeTypes()},ActivityService.prototype.transformFromFileObj=function(jsonObj){var activityInfo=this.getActivityInfo(jsonObj[this.rootTag]);this._default=activityInfo},ActivityService.prototype.getNewActivity=function(){var activity={activityId:this.getNextActivityId(),regActivityType:"",dateCleared:"",dstsControlNumber:"",dossierId:"",manufacturerName:"",reasonFiling:"",assocDins:[]};return activity},ActivityService.prototype.isNotifiableChange=function(value){return!!value&&(value===this.VNC||value===this.NC)},ActivityService.prototype.isRationale=function(activity,lead){return!!activity&&(activity===this.SANDS||activity===this.SNDS||activity===this.DIN&&lead===this.BIOLOGIC)},ActivityService.prototype.updateActivityId=function(value){isNaN(value)||value>this.activityId&&(this.activityId=value)},ActivityService.prototype.getNextActivityId=function(){return this.activityId=this.activityId+1,this.activityId},ActivityService.prototype.resetActivityId=function(value){value?this.activityId=value:this.activityId=0},ActivityService.prototype.getEmptyRelatedActivity=function(){return _getEmptyActivity()},ActivityService.prototype.transformRelatedRegActivityFromFileObj=function(jsonObj){var relatedActivity=this.getEmptyRelatedActivity();return relatedActivity.sponsorName=jsonObj.sponsor_name,relatedActivity.dateCleared="",jsonObj.date_cleared&&(relatedActivity.dateCleared=_parseDate(jsonObj.date_cleared)),relatedActivity.regActivityType=$filter("filter")(ActivityListFactory.getRaTypeList(),{id:jsonObj.reg_activity_type.__text})[0],relatedActivity.controlNumber=jsonObj.control_number,relatedActivity.licenseAgree=jsonObj.license_agreement,relatedActivity.dinTransfer=jsonObj.din_transfer===YES,relatedActivity.notLasa=jsonObj.not_lasa===YES,relatedActivity},ActivityService}function _mapRegulatoryContactList(jsonObj){var result=[];if(!jsonObj)return result;jsonObj instanceof Array||(jsonObj=[jsonObj]);for(var i=0;i<jsonObj.length;i++)result.push(_transformRepContactFromFileObj(jsonObj[i]));return result}function _transformRegulatoryContactListToFileObj(jsonObj){var result=[];if(!jsonObj)return result;jsonObj instanceof Array||(jsonObj=[jsonObj]);for(var i=0;i<jsonObj.length;i++)result.push(_mapRepContactToOutput(jsonObj[i]));return result}function _transformRepContactFromFileObj(repObj){var repContact=_transformContactFromFileObj(repObj.rep_contact_details);return repContact.repRole=repObj.rep_contact_role,repContact.amend="Y"===repObj.amend_record,repContact}function _mapRepContactToOutput(repObj){var repContact={};return repContact.rep_contact_role=repObj.repRole,repContact.amend_record=repObj.amend===!0?"Y":"N",repContact.rep_contact_details=_mapContactToOutput(repObj),repContact}function _transformContactFromFileObj(contactObj){var contact={};return contactObj?(contact.salutation=contactObj.salutation,contact.givenName=contactObj.given_name,contact.initials=contactObj.initials,contact.surname=contactObj.surname,contact.title=contactObj.job_title,contact.language=contactObj.language_correspondance,contact.phone=contactObj.phone_num,contact.phoneExt=contactObj.phone_ext,contact.fax=contactObj.fax_num,contact.email=contactObj.email,contact):(console.error("There is no contact object"),contact)}function _mapContactToOutput(contactObj){var contact={};return contact.salutation=contactObj.salutation,contact.given_name=contactObj.givenName,contact.initials=contactObj.initials,contact.surname=contactObj.surname,contact.job_title=contactObj.title,contact.language_correspondance=contactObj.language,contact.phone_num=contactObj.phone,contact.phone_ext=contactObj.phoneExt,contact.fax_num=contactObj.fax,contact.email=contactObj.email,contact}function _createRationalTypes(){return{newRoa:!1,newClaims:!1,changeFormulation:!1,changeDrugSubstance:!1,replaceSterility:!1,confirmitoryStudies:!1,otherRationale:!1,otherRationaleDetails:""}}function _createNotifiableChangeTypes(){return{textLabelChange:!1,drugSubstanceChange:!1,formulationChange:!1,specificationChange:!1,expiryStorageChange:!1,manufactMethodChange:!1,manufactSiteChange:!1,containerSizeChange:!1,packagingSpecChange:!1,packagingMaterialsChange:!1,otherChangeDetails:""}}function _mapNotifiableChangeTypesToOutput(jsonObj){return jsonObj?{text_label_change:jsonObj.textLabelChange===!0?"Y":"N",drug_substance_change:jsonObj.drugSubstanceChange===!0?"Y":"N",formulation_change:jsonObj.formulationChange===!0?"Y":"N",specification_change:jsonObj.specificationChange===!0?"Y":"N",expiry_storage_change:jsonObj.expiryStorageChange===!0?"Y":"N",manufact_method_change:jsonObj.manufactMethodChange===!0?"Y":"N",manufact_site_change:jsonObj.manufactSiteChange===!0?"Y":"N",container_size_change:jsonObj.containerSizeChange===!0?"Y":"N",packaging_spec_change:jsonObj.packagingSpecChange===!0?"Y":"N",packaging_materials_change:jsonObj.packagingMaterialsChange===!0?"Y":"N",other_change_details:jsonObj.otherChangeDetails}:null}function _transformNotifiableChangeTypeFromFileObj(jsonObj){return jsonObj?{textLabelChange:"Y"===jsonObj.text_label_change,drugSubstanceChange:"Y"===jsonObj.drug_substance_change,formulationChange:"Y"===jsonObj.formulation_change,specificationChange:"Y"===jsonObj.specification_change,expiryStorageChange:"Y"===jsonObj.expiry_storage_change,manufactMethodChange:"Y"===jsonObj.manufact_method_change,manufactSiteChange:"Y"===jsonObj.manufact_site_change,containerSizeChange:"Y"===jsonObj.container_size_change,packagingSpecChange:"Y"===jsonObj.packaging_spec_change,packagingMaterialsChange:"Y"===jsonObj.packaging_materials_change,otherChangeDetails:jsonObj.other_change_details}:null}function _transformRationaleTypeFromFileObj(jsonObj){return jsonObj?{newRoa:"Y"===jsonObj.new_roa,newClaims:"Y"===jsonObj.new_claims,changeFormulation:"Y"===jsonObj.change_formulation,changeDrugSubstance:"Y"===jsonObj.change_drug_substance,replaceSterility:"Y"===jsonObj.replace_sterility,confirmitoryStudies:"Y"===jsonObj.confirmitory_studies,otherRationale:"Y"===jsonObj.other_rationale,otherRationaleDetails:jsonObj.other_rationale_details}:null}function _mapRationaleTypeToOutput(jsonObj){return jsonObj?{new_roa:jsonObj.newRoa===!0?"Y":"N",new_claims:jsonObj.newClaims===!0?"Y":"N",change_formulation:jsonObj.changeFormulation===!0?"Y":"N",change_drug_substance:jsonObj.changeDrugSubstance===!0?"Y":"N",replace_sterility:jsonObj.replaceSterility===!0?"Y":"N",confirmitory_studies:jsonObj.confirmitoryStudies===!0?"Y":"N",other_rationale:jsonObj.otherRationale===!0?"Y":"N",other_rationale_details:jsonObj.otherRationaleDetails}:null}function _parseDate(value){var dateArray=value.split("-");3!=dateArray.length&&console.error("_parseDate error not 3 parts");var aDate=new Date(dateArray[0],dateArray[1]-1,dateArray[2]);return aDate}function _getEmptyActivity(){return{sponsorName:"",dateCleared:"",regActivityType:"",controlNumber:"",licenseAgree:"",dinTransfer:"",notLasa:!1}}function _getFilterJsonMatch(valueList,targetValue,targetProperty){for(var i=0;i<valueList.length;i++){var rec=valueList[i];if(rec[targetProperty]===targetValue)return rec}return""}angular.module("activityService").factory("ActivityService",ActivityService),ActivityService.$inject=["YES","NO","ActivityListFactory","$filter","$translate"]}(),function(){"use strict";angular.module("errorSummaryModule",["focus-if"])}(),function(){"use strict";function errorSummaryController($scope,$location,$anchorScroll){function _isErrorSummaryVisible(){return vm.isVisible&&vm.errorArray&&vm.errorArray.length>0}function _getErr(errorObj,resultsList,parent){for(var keys=Object.keys(errorObj),i=0;i<keys.length;i++){var record=errorObj[keys[i]];record instanceof Array||(record=[record]);for(var j=0;j<record.length;j++){var numIndex=record[j].$name.lastIndexOf("_"),transcludeName="";if(numIndex>0&&(transcludeName=record[j].$name.substring(0,numIndex)),record[j].$invalid===!0&&record[j].$name.indexOf(".")>0)if(vm.exclusions&&vm.exclusions.hasOwnProperty(record[j].$name)){var tabIndex=vm.exclusions[record[j].$name].indexOf("tab_"),tabId=-1;tabIndex>-1&&(tabId=vm.exclusions[record[j].$name].substr(tabIndex+4),tabId=parseInt(tabId)),angular.merge(resultsList,_createSummaryRecord(record[j].$name,keys[i],parent,tabId))}else _getErr(record[j].$error,resultsList,record[j].$name);else if(vm.transcludeNames.hasOwnProperty(transcludeName)){var exIndex=record[j].$name.indexOf(transcludeName),expandIndex=record[j].$name.substring(exIndex+transcludeName.length+1);angular.merge(resultsList,_createExpanderRecord(record[j].$name,transcludeName,keys[i],parent,expandIndex))}else if(record[j].$invalid===!0&&!resultsList.hasOwnProperty(record[j].$name)){var result=_processRecord(record[j].$name,keys[i],parent);angular.merge(resultsList,result)}}}}function _scrubFieldName(rawName){var separator="_",index=rawName.lastIndexOf(separator),cleanedName="";return cleanedName=index>-1?rawName.substring(0,index):rawName}function _getElementScope(rawName){var separator="_",nameSplit=rawName.split(separator),scopeId=parseInt(nameSplit[nameSplit.length-1]);return angular.isNumber(scopeId)||(scopeId=""),scopeId}function _processRecord(error_Name,errorType,parent){var result={},scrubName=_scrubFieldName(error_Name),scopeId=_getElementScope(error_Name),errorKey="TYPE_"+errorType.toUpperCase(),destId=error_Name;if(vm.alias&&vm.alias.hasOwnProperty(scrubName)){var aliasRec=vm.alias[scrubName];switch(aliasRec.type.toLowerCase()){case"fieldset":var searchId=aliasRec.parent+"_"+scopeId,destObj=$("#"+searchId).find("input:visible:first");destObj.length>0&&(destId=destObj[0].id);break;case"element":destId=aliasRec.target+"_"+scopeId;break;case"elementnoid":destId=aliasRec.target;break;case"pattern":"pattern"===errorType&&(errorKey=aliasRec.errorType);break;case"select2":var searchId=aliasRec.name+"_match"+scopeId,destObj=$("#"+searchId);destObj.length>0&&(destId=searchId);break;case"min":"min"===errorType&&(errorKey=aliasRec.errorType);break;case"max":"max"===errorType&&(errorKey=aliasRec.errorType);break;case"minlength":"minlength"===errorType&&(errorKey=aliasRec.errorType);break;case"maxlength":"maxlength"===errorType&&(errorKey=aliasRec.errorType);break;case"buttonsearch":errorKey="TYPE_REQUIRED",$.each($("button","#"+vm.startFormId),function(k){var temp_attr=$(this).attr("id");temp_attr&&temp_attr.indexOf(aliasRec.buttonName)>-1&&(destId=temp_attr)});break;default:console.warn("No type found "+aliasRec.type)}}return result[error_Name]={name:destId,translateKey:scrubName.toUpperCase(),type:errorKey,parent:parent,concat:parent+"."+error_Name,isSummary:!1},result}function _sortErrorsByDomOrder(){var domFieldList={};$.each($("input, select ,textarea","#"+vm.startFormId),function(k){var temp_attr=$(this).attr("id");temp_attr&&(domFieldList[temp_attr]=k)});for(var keyList=Object.keys(domFieldList),p=0;p<keyList.length;p++){if(keyList[p].indexOf("focusser-")>-1){var parentName=angular.element(document.querySelector("#"+keyList[p])).parent().attr("name");parentName&&(keyList[p]=parentName)}vm.uniqueErrorList[keyList[p]]||(keyList.splice(p,1),p--)}for(var sortedDomJsonList={},v=0;v<keyList.length;v++)sortedDomJsonList[keyList[v]]=v;var newErrors=Object.keys(vm.uniqueErrorList).map(function(k){return vm.uniqueErrorList[k]}),notDefined={};if(newErrors.length>0)for(var i=0;i<newErrors.length;){var currRec=newErrors[i],targetName=currRec.name,destIndex=sortedDomJsonList[targetName];if(angular.isDefined(destIndex)&&destIndex!==i){var tempRec=angular.copy(newErrors[destIndex]);newErrors[destIndex]=angular.copy(currRec),newErrors[i]=angular.copy(tempRec)}else angular.isDefined(destIndex)||(notDefined[currRec.name]={rec:currRec,pos:i}),i++}return _sortUnknowns(notDefined,newErrors),newErrors}function _sortUnknowns(unknownJson,sortList){for(var unknownArray=Object.keys(unknownJson).map(function(k){return unknownJson[k]}),i=0;i<unknownArray.length;i++){var unknownRec=unknownArray[i],unknownName=unknownRec.rec.name,scopeIndex=_getElementScope(unknownName);if(angular.isNumber(scopeIndex))for(var g=sortList.length-1;g>=0;g--){var sortRec=sortList[g],sortScope=_getElementScope(sortRec.name);if(angular.isNumber(sortScope)&&sortScope===scopeIndex&&unknownName!==sortRec.name){sortList.move(unknownRec.pos,g+1);break}}}}function _createSummaryRecord(name,type,parent,tabId){var result={};return angular.isDefined(tabId)||(tabId=-1),result[name]={name:name,type:type,translateKey:name.toUpperCase(),parent:parent,concat:parent+"."+name,tabId:tabId,isSummary:!0},result}function _createExpanderRecord(name,transcludeName,type,parent,expanderIndex){var result={};return result[name]={name:name,type:type,translateKey:transcludeName.toUpperCase(),parent:parent,concat:parent+"."+name,isSummary:!0,toExpand:!0,exIndex:parseInt(expanderIndex)},result}var vm=this;vm.parentRef=null,vm.errorArray=[],vm.uniqueErrorList={},vm.isVisible=!1,vm.nameAddendum="",vm.rootError="",vm.isFocusInput=0,vm.exclusions={},vm.alias={},vm.transcludeNames={},vm.headingPreamble="",vm.headerLevel="",vm.startFormId="",vm.$onInit=function(){},vm.$onChanges=function(changes){changes.setHeadingLevel&&angular.isDefined(changes.setHeadingLevel.currentValue)&&(vm.headerLevel=changes.setHeadingLevel.currentValue.toLowerCase()),changes.nameSuffix&&(vm.nameAddendum="-"+changes.nameSuffix.currentValue),changes.formPreamble&&(vm.headingPreamble=changes.formPreamble.currentValue),changes.exclusionList&&(vm.exclusions=changes.exclusionList.currentValue),changes.aliasList&&(vm.alias=changes.aliasList.currentValue),changes.formRef&&vm.getErrorsSumm(changes.formRef.currentValue.$error,changes.formRef.currentValue.$name),changes.showErrors&&(vm.isVisible=changes.showErrors.currentValue),changes.updateErrors&&vm.formRef&&vm.isVisible&&vm.getErrorsSumm(vm.formRef.$error,vm.formRef.$name),changes.makeFocused&&changes.makeFocused.currentValue&&(vm.isFocusInput=vm.isFocusInput+1),changes.formId&&(vm.startFormId=changes.formId.currentValue),changes.transcludeList&&changes.transcludeList.currentValue&&(vm.transcludeNames=changes.transcludeList.currentValue)},vm.calcIsVisible=function(){var summaryIsVisible=_isErrorSummaryVisible();return summaryIsVisible||$scope.$emit("childErrorSummaryHide",+vm.nameAddendum),summaryIsVisible},vm.scrollTo=function(errorRecord){var hashId="";errorRecord&&(hashId=errorRecord.isSummary?"errors-summary-"+errorRecord.name:errorRecord.name,vm.expandRecord({index:errorRecord.exIndex}),$location.hash(hashId),$anchorScroll())},vm.selectVisibleTab=function(errorRecord){"errors-summary-"+errorRecord.name;vm.selectTab({index:errorRecord.tabId})},vm.isSummaryLink=function(errorRecord){return errorRecord.isSummary&&!angular.isDefined(errorRecord.toExpand)&&angular.isDefined(errorRecord.tabId&&parseInt(errorRecord.tabId)>-1)},vm.isTabLink=function(errorRecord){return errorRecord.isSummary&&angular.isDefined(errorRecord.tabId)&&parseInt(errorRecord.tabId)>-1},vm.isExpanderLink=function(errorRecord){return angular.isDefined(errorRecord.toExpand)},$scope.$on("childErrorSummaryHide",function(event,data){if(_isErrorSummaryVisible())for(var errorSummaryBroadcastName=data.message,i=0;i<vm.errorArray.length;i++){var errorRecord=errorArray[i];errorRecord.isSummary&&errorRecord.name===errorSummaryBroadcastName&&vm.errorArray.splice(i,1)}}),vm.getErrorsSumm=function(myformErrors,name){vm.errorArray=[],vm.uniqueErrorList={},_getErr(myformErrors,vm.uniqueErrorList,name);var newErrors=_sortErrorsByDomOrder();angular.equals(vm.errorArray,newErrors)||(vm.errorArray=newErrors)},Array.prototype.move=function(from,to){to<0&&(to=0),to>=this.length&&(to=this.length-1),this.splice(to,0,this.splice(from,1)[0])}}angular.module("errorSummaryModule").component("cmpErrorSummary",{templateUrl:"app/scripts/components/error-summary/tpl-error-summary_20171102_1612.html",controller:errorSummaryController,controllerAs:"errSummaryCtrl",bindings:{formRef:"<",showErrors:"<",updateErrors:"<",nameSuffix:"@",formPreamble:"@",makeFocused:"<",setHeadingLevel:"@",exclusionList:"<",transcludeList:"<",formId:"<",aliasList:"<",expandRecord:"&",selectTab:"&"}}),errorSummaryController.$inject=["$scope","$location","$anchorScroll"]}(),function(){"use strict";angular.module("errorMessageModule",[])}(),function(){"use strict";function errorMessageController(){var vm=this;vm.field_name="",vm.form_ref=null,vm.fieldRecords=[],vm.$onChanges=function(changes){changes.fieldName&&(vm.field_name=changes.fieldName.currentValue),changes.formRef&&(vm.form_ref=changes.formRef.currentValue),changes.errorTypes&&(vm.fieldRecords=changes.errorTypes.currentValue)},vm.showErrorMessage=function(){return!!vm.form_ref&&(angular.isUndefined(vm.fieldName)?(console.warn("No field name for: "+vm.form_ref.$name),!1):angular.isUndefined(vm.form_ref[vm.fieldName])?(console.warn("lookup undefined "+vm.form_ref.$name+"."+vm.fieldName),!1):vm.showError()&&vm.form_ref[vm.fieldName].$invalid||vm.form_ref[vm.fieldName].$touched&&vm.form_ref[vm.fieldName].$invalid)}}angular.module("errorMessageModule").component("cmpErrorMessage",{templateUrl:"app/scripts/components/error-message/tpl-error-message_20171102_1612.html",controller:errorMessageController,controllerAs:"errMessageCtrl",bindings:{fieldName:"<",formRef:"<",showError:"&",errorTypes:"<"}})}(),function(){"use strict";angular.module("alertModule",[])}(),function(){"use strict";function alertController(){var vm=this;vm.alertVisible=!1,vm.closeMsgAlias="CLOSE_ALERT",vm.$onInit=function(){vm.alertVisible=!1},vm.$onChanges=function(changes){changes.msg&&(vm.closeMsgAlias=changes.msg.currentValue),changes.uiState&&(vm.alertVisible=changes.uiState.currentValue)},vm.open=function(){vm.updateState()},vm.close=function(){vm.updateState()},vm.isAlertVisible=function(){return vm.alertVisible}}angular.module("alertModule").component("cmpAlert",{templateUrl:"app/scripts/components/alertComponent/tpl-alert_20171102_1612.html",transclude:!0,bindings:{uiState:"<",msg:"@",updateState:"&",type:"@"},controller:alertController,controllerAs:"alertCtrl"}),alertController.$inject=[]}(),function(){"use strict";angular.module("adminSubmission",["numberFormat","hpfbConstants","ui.bootstrap","ui.select"])}(),function(){"use strict";function AdminSubCtrl(NO,$translate){var vm=this;vm.dateFormat="yyyy-MM-dd",vm.dinTransferShow=!1,vm.model={sponsorName:"",dateCleared:"",regActivityType:"",controlNumber:"",licenseAgree:"",dinTransfer:"",notLasa:!1},vm.lang=$translate.proposedLanguage()||$translate.use(),vm.dateOptions={showWeeks:!1},vm.openRefDate=function(){vm.refDateOpen=!0},vm.yesNoList=vm.yesNoTypes(),vm.activityTypeList=vm.activityTypes({isPilot:!0}),vm.$onInit=function(){vm.isLicenseAgreement()},vm.$onChanges=function(changes){changes.record&&(vm.model=changes.record.currentValue,vm.isLicenseAgreement())},vm.showError=function(isTouched,isInvalid){if(isTouched&&isInvalid||isInvalid&&vm.showErrors)return!0},vm.showErrorCheckBox=function(isTouched,value){return!value&&isTouched||vm.showErrors&&!value},vm.isLicenseAgreement=function(){vm.model&&NO===vm.model.licenseAgree?vm.dinTransferShow=!0:(vm.dinTransferShow=!1,vm.model.dinTransfer=!1)}}angular.module("adminSubmission").component("cmpAdminSub",{templateUrl:"app/scripts/components/adminSubmission/tpl-admin-sub_20171102_1612.html",controller:AdminSubCtrl,controllerAs:"adminCtrl",bindings:{record:"<",showErrors:"<",activityTypes:"&",yesNoTypes:"&"}}),AdminSubCtrl.$inject=["NO","$translate"]}(),function(){"use strict";angular.module("contactModule25",["contactModule","errorSummaryModule","errorMessageModule"])}(),function(){"use strict";function contactRecCtrl($scope){function _setIdNames(){var scopeId="_"+$scope.$id;vm.repContactFormId="rep_contact_form"+scopeId}var vm=this;vm.savePressed=!1,vm.formAmend=!1,vm.isContact=!0,vm.isNotEditable=!1,vm.contactModel={},vm.editState=!0,vm.updateSummary=0,vm.setSummaryFocus=0,vm.requiredOnly=[{type:"required",displayAlias:"MSG_ERR_MAND"}],vm.showSummary=!1,vm.$onInit=function(){_setIdNames(),vm.updateErrorSummaryState()},vm.updateErrorSummaryState=function(){vm.updateSummary=vm.updateSummary+1},vm.focusOnSummary=function(){vm.setSummaryFocus=vm.setSummaryFocus+1},vm.showRecordSummary=function(){return vm.savePressed||vm.showSummary},vm.$onChanges=function(changes){changes.contactRecord&&(vm.contactModel=angular.copy(changes.contactRecord.currentValue),vm.setEditableState()),changes.isAmend&&(vm.formAmend=changes.isAmend.currentValue,vm.setEditableState()),changes.showErrorSummary&&(vm.showSummary=changes.showErrorSummary.currentValue,vm.updateErrorSummaryState())},vm["delete"]=function(){vm.onDelete({contactId:vm.contactModel.repRole})},vm.discardChanges=function(){if(!vm.contactRecForm.$pristine){var currRecord=vm.contactRecord;vm.contactModel=angular.copy(currRecord),vm.setEditableState(),vm.contactRecForm.$setPristine(),vm.isDetailValid({state:vm.contactRecForm.$valid}),vm.savePressed=!1}},vm.updateValid=function(){vm.isDetailValid({state:vm.contactRecForm.$valid&&!vm.contactRecForm.$dirty})},$scope.$watch("contactRec.contactRecForm.$dirty",function(){vm.contactRecForm.$dirty&&vm.isDetailValid({state:!1})},!0),vm.updateContactModel=function(){vm.contactRecForm.$valid?(vm.isDetailValid({state:!0}),vm.contactRecForm.$setPristine(),vm.onUpdate({contact:vm.contactModel}),vm.savePressed=!1,vm.errorSummaryUpdate()):(vm.savePressed=!0,vm.errorSummaryUpdate(),vm.updateErrorSummaryState(),vm.focusOnSummary())},vm.showErrors=function(){return vm.savePressed||vm.showSummary},vm.setEditableState=function(){vm.formAmend?vm.formAmend&&vm.contactModel.amend?vm.editState=!0:vm.editState=!1:vm.editState=!0},$scope.$watch("contactRec.contactRecForm.$error",function(){vm.updateErrorSummaryState()},!0)}angular.module("contactModule25").component("cmpRepContactRecord",{templateUrl:"app/scripts/components/rep-contact-record/tpl-rep-contact-record_20171102_1612.html",controller:contactRecCtrl,controllerAs:"contactRec",bindings:{contactRecord:"<",onUpdate:"&",onDelete:"&",isDetailValid:"&",isAmend:"<",errorSummaryUpdate:"&",showErrorSummary:"<"}}),contactRecCtrl.$inject=["$scope"]}(),function(){"use strict";angular.module("contactModule26",["contactModule25","expandingTable","repContactService"])}(),function(){"use strict";function contactListCtrl($filter,RepContactService){var vm=this;vm.selectRecord=-1,vm.isDetailValid=!0,vm.contactList=[],vm.oneRecord="",vm.isParentDirty=!1,vm.formAmend=!1,vm.resetCollapsed=!1;var repContactService=new RepContactService;vm.columnDef=[{label:"FIRSTNAME",binding:"givenName",width:"40"},{label:"LASTNAME",binding:"surname",width:"40"},{label:"ONE_ROLE",binding:"repRole",width:"20"}],vm.$onInit=function(){vm.focused=!1},vm.$onChanges=function(changes){changes.contacts&&(vm.contactList=changes.contacts.currentValue,vm.isDetailValid=!0,vm.updateErrorState()),changes.parentDirty&&(vm.isParentDirty=changes.parentDirty.currentValue),changes.isAmend&&(vm.formAmend=changes.isAmend.currentValue),changes.showErrorSummary&&(vm.showSummmary=changes.showErrorSummary.currentValue)},vm.isAddContact=function(){return!(vm.contactList.length>1)&&vm.isDetailValid},vm.showNoRecordError=function(isInvalid){return vm.isParentDirty&&isInvalid||vm.showListErrors()&&isInvalid},vm.setValid=function(value){vm.isDetailValid=value},vm.showError=function(){return vm.contactListForm.$invalid&&!vm.contactListForm.$pristine||vm.contactListForm.$invalid&&vm.showListErrors()},vm.onUpdateContactRecord=function(record){var idx=vm.contactList.indexOf($filter("filter")(vm.contactList,{repRole:record.repRole},!0)[0]);vm.contactList[idx]=angular.copy(record),vm.updateErrorState(),vm.contactListForm.$setPristine(),vm.resetCollapsed=!vm.resetCollapsed,vm.disableAdd()},vm.updateErrorState=function(){vm.contactList&&vm.contactList.length>0?vm.oneRecord="is value":vm.oneRecord=""},vm.deleteContact=function(cID){var idx=vm.contactList.indexOf($filter("filter")(vm.contactList,{repRole:cID},!0)[0]);if(vm.contactList.splice(idx,1),1===vm.contactList.length&&"PRIMARY"!==vm.contactList[0].repRole){vm.contactList[0].repRole="PRIMARY";var temp=angular.copy(vm.contactList);vm.contactList=[],vm.contactList=temp}vm.updateErrorState(),vm.disableAdd(),vm.setValid(!0),vm.selectRecord=-1,vm.resetCollapsed=!vm.resetCollapsed},vm.addContact=function(){var defaultContact=repContactService.createRepContact(vm.contactList);vm.contactList.push(defaultContact),vm.selectRecord=vm.contactList.length-1,vm.setValid(!1)},vm.disableAdd=function(){if(!vm.contactList)return!1;var isInvalid=!vm.isDetailValid||2==vm.contactList.length||vm.contactList.length>0&&vm.contactListForm.$invalid;return isInvalid}}angular.module("contactModule26").component("cmpRepContactList",{templateUrl:"app/scripts/components/repContactList/tpl-rep-contact-list_20171102_1612.html",controller:contactListCtrl,controllerAs:"contactListCtrl",bindings:{contacts:"<",showListErrors:"&",parentDirty:"<",isAmend:"<",showErrorSummary:"<"}}),contactListCtrl.$inject=["$filter","RepContactService"]}(),function(){"use strict";angular.module("fileIO",[])}(),function(){"use strict";function ngFileSelect(hpfbFileReader){function link(scope,element,attrs){scope.rootTag=attrs.rootTag,element.bind("change",function(e){scope.file=(e.srcElement||e.target).files[0],hpfbFileReader.readAsDataText(scope.file,scope).then(function(result){scope.hpfbFileSelect({fileContent:result})})})}var directive={link:link,restrict:"A",scope:{hpfbFileSelect:"&"}};return directive}angular.module("fileIO").directive("hpfbFileSelect",ngFileSelect),ngFileSelect.$inject=["hpfbFileProcessing"]}(),function(){"use strict";function FileSelectController(hpfbFileProcessing){var vm=this;vm.fileTypes=".xml, .hcsc",vm.modelCallback=function(fileContent){vm.status="",fileContent&&(vm.status=fileContent.messages),vm.updateModelRoot({fileContent:fileContent}),angular.element(fileLoad).trigger("focus")}}angular.module("fileIO").component("hpfbFileSelect",{templateUrl:"app/scripts/components/fileIO/fileSelect_20171102_1612.html",controller:FileSelectController,bindings:{updateModelRoot:"&",rootElem:"@"}}),FileSelectController.$inject=["hpfbFileProcessing"]}(),function(){"use strict";function FileWriteController(hpfbFileProcessing){function _generateFile(){"JSON"===vm.saveType.toUpperCase()?hpfbFileProcessing.writeAsJson(vm.jsonToSave,vm.fileName,vm.rootTag):"XML"===vm.saveType.toUpperCase()&&hpfbFileProcessing.writeAsXml(vm.jsonToSave,vm.fileName,vm.rootTag)}function _init(){vm.buttonDisabled?"true"===vm.buttonDisabled.toLowerCase()?vm.buttonDisabled=!0:"false"===vm.buttonDisabled.toLowerCase()?vm.buttonDisabled=!1:vm.buttonDisabled=!1:vm.buttonDisabled=!1}var vm=this;vm.$onInit=_init,vm.generate=_generateFile}angular.module("fileIO").component("hpfbFileSave",{templateUrl:"app/scripts/components/fileIO/fileSave_20171102_1612.html",controller:FileWriteController,bindings:{jsonToSave:"<",rootTag:"@",saveType:"@",buttonLabel:"@",buttonDisabled:"@"}}),FileWriteController.$inject=["hpfbFileProcessing"]}(),function(){"use strict";function fileReader($q){function onLoad(reader,deferred,scope,file){return function(){scope.$apply(function(){if(file){var splitFile=file.name.split("."),fileType=splitFile[splitFile.length-1];fileType.toLowerCase()==draft_file_type?(convertToJSONObjects(reader),checkRootTagMatch(reader,scope)):"xml"===fileType.toLowerCase()?(convertXMLToJSONObjects(reader),checkRootTagMatch(reader,scope)):(convertResult.parseResult=null,convertResult.messages=msg_err_fileType,reader.parseResult=convertResult)}deferred.resolve(reader.parseResult)})}}function onError(reader,deferred,scope){return function(){scope.$apply(function(){deferred.reject(msg_err_load)})}}function getReader(deferred,scope,file){var reader=new FileReader;return reader.onload=onLoad(reader,deferred,scope,file),reader.onError=onError(reader,deferred,scope),reader.parseResult=null,reader}function readAsDataText(file,scope){var deferred=$q.defer(),reader=getReader(deferred,scope,file);return file?reader.readAsText(file):(reader.parseResult=convertResult,reader.parseResult.messages="",reader.parseResult.jsonResult=null,deferred.resolve(reader.parseResult)),deferred.promise}function convertToJSONObjects(reader){try{convertResult.jsonResult=JSON.parse(reader.result),convertResult.messages=msg_success,reader.parseResult=convertResult}catch(e){convertResult.jsonResult=null,convertResult.messages=msg_err_jsonparse,reader.parseResult=convertResult}}function convertXMLToJSONObjects(reader){var xmlConfig={escapeMode:!0,emptyNodeForm:"text",useDoubleQuotes:!0},xmlConverter=new X2JS(xmlConfig);convertResult.jsonResult=xmlConverter.xml_str2json(reader.result),null===convertResult.jsonResult?convertResult.messages=msg_err_xmlparse:convertResult.messages=msg_success,reader.parseResult=convertResult}function convertJSONObjectsToXML(jsonObj){var xmlConfig={escapeMode:!0,emptyNodeForm:"text",useDoubleQuotes:!0},jsonConverter=new X2JS(xmlConfig),xmlResult=null;return xmlResult=jsonConverter.json2xml_str(jsonObj)}function checkRootTagMatch(reader,scope){scope.rootTag&&reader.parseResult&&reader.parseResult.jsonResult&&(reader.parseResult.jsonResult[scope.rootTag]||(reader.parseResult.jsonResult=null,reader.parseResult.messages=msg_err_formType))}function jsonToFile(jsonObj,fileName,rootTag){if(jsonObj){var makeStrSave=JSON.stringify(jsonObj),blob=new Blob([makeStrSave],{type:"text/plain;charset=utf-8"});fileName?fileName+="."+draft_file_type:fileName="hpfbDraft."+draft_file_type,saveAs(blob,fileName)}}function xmlToFile(jsonObj,fileName,rootTag){if(jsonObj){var xmlResult=convertJSONObjectsToXML(jsonObj);xmlResult='<?xml version="1.0" encoding="UTF-8"?><?xml-stylesheet  type="text/xsl" href="REP_Combined.xsl"?>'+xmlResult;var blob=new Blob([xmlResult],{type:"text/plain;charset=utf-8"});fileName?fileName+=".xml":fileName="hpfbXML.xml",saveAs(blob,fileName)}}var msg_success="MSG_SUCCESS_LOAD",msg_err_jsonparse="MSG_ERR_JSONPARSE",msg_err_xmlparse="MSG_ERR_XMLPARSE",msg_err_load="MSG_ERR_FILE_LOAD",msg_err_fileType="MSG_ERR_FILE_TYPE",msg_err_formType="MSG_ERR_FORM_TYPE",draft_file_type="hcsc",convertResult={jsonResult:"",messages:""},service={readAsDataText:readAsDataText,writeAsJson:jsonToFile,writeAsXml:xmlToFile};return service}angular.module("fileIO").factory("hpfbFileProcessing",fileReader),fileReader.$inject=["$q"]}(),function(){"use strict";angular.module("expandingTable",[])}(),function(){"use strict";function expandingTableCtrl($filter,$scope){function _setNumberColumns(){vm.disableErrorCol&&(vm.numberCols=vm.numberCols+1)}function _recalculateColumnDefs(colDefs,numCols){var caretWidth=2,errorWidth=5,totalWidth=caretWidth+errorWidth,toSubtract=totalWidth/numCols,result=[];if(vm.disableErrorCol)return colDefs;for(var i=0;i<numCols;i++){var oneDef=angular.copy(colDefs[i]);oneDef.width>toSubtract&&(oneDef.width=oneDef.width-toSubtract),result.push(oneDef)}return result}function updateTableRow(textIndex){var selectIndex=parseInt(textIndex);selectIndex>=0&&vm.selectTableRow(selectIndex)}function _createArray(arraySize,initialVal){for(var anArray=[],i=0;i<arraySize;i++)anArray.push(initialVal);return anArray}var vm=this;vm.focused=!1,vm.columnDefinitions={},vm.disableExpand=!1,vm.tableRowExpanded=!1,vm.tableRowIndexCurrExpanded="",vm.tableRowIndexPrevExpanded="",vm.numberCols=1,vm.disableErrorCol=!1,vm.dayDataCollapse=_createArray(0,!0),vm.formName="expandTblCtrl.transcludeForm",vm.$onInit=function(){vm.listItems&&(vm.dayDataCollapse=_createArray(vm.listItems.length,!0))},vm.getExpandedState=function(row){return row===vm.tableRowIndexCurrExpanded},vm.$onChanges=function(changes){if(changes.listItems&&(vm.listItems?vm.dayDataCollapse=_createArray(vm.listItems.length,!0):vm.dayDataCollapse=_createArray(0,!0),
vm.resetTableRow()),changes.tname&&changes.tname.currentValue&&(vm.formName=changes.tname.currentValue),changes.resetToCollapsed&&(vm.resetTableRow(),changes.selectRecord||updateTableRow(vm.selectRecord)),changes.selectRecord){var selectIndex=parseInt(changes.selectRecord.currentValue);selectIndex>=0?vm.selectTableRow(selectIndex):vm.resetTableRow()}changes.disableSelection&&(vm.disableExpand=changes.disableSelection.currentValue),changes.columnDef&&(vm.numberCols=changes.columnDef.currentValue.length,vm.columnDefinitions=_recalculateColumnDefs(changes.columnDef.currentValue,vm.numberCols),_setNumberColumns()),changes.disableErrColumn&&(vm.disableErrorCol=changes.disableErrColumn.currentValue,vm.numberCols=vm.columnDef.length,vm.disableErrorCol=!0,_setNumberColumns())},vm.formInError=function(aForm){return aForm&&aForm.$invalid?"Y":"N"},vm.deletedRow=function(){vm.tableRowExpanded=!1,vm.tableRowIndexCurrExpanded=""},vm.resetTableRow=function(){vm.tableRowIndexPrevExpanded="",vm.tableRowExpanded=!1,vm.tableRowIndexCurrExpanded="",vm.listItems?vm.dayDataCollapse=_createArray(vm.listItems.length,!0):_createArray(0,!0)},vm.dayDataCollapseFn=function(){for(var i=0;vm.listItems.length-1;i+=1)vm.dayDataCollapse.append("true")},vm.selectTableRow=function(index){vm.disableExpand||("undefined"===vm.dayDataCollapse?vm.dayDataCollapse=vm.dayDataCollapseFn():vm.tableRowExpanded===!1&&""===vm.tableRowIndexCurrExpanded?(vm.tableRowIndexPrevExpanded="",vm.tableRowExpanded=!0,vm.tableRowIndexCurrExpanded=index,vm.dayDataCollapse[index]=!1):vm.tableRowExpanded===!0&&(vm.tableRowIndexCurrExpanded===index?(vm.tableRowExpanded=!1,vm.tableRowIndexCurrExpanded="",vm.dayDataCollapse[index]=!0):(vm.tableRowIndexPrevExpanded=vm.tableRowIndexCurrExpanded,vm.tableRowIndexCurrExpanded=index,vm.dayDataCollapse[vm.tableRowIndexPrevExpanded]=!0,vm.dayDataCollapse[vm.tableRowIndexCurrExpanded]=!1)))}}angular.module("expandingTable").component("cmpExpandingTable",{templateUrl:"app/scripts/components/expandingTable/tpl-expanding-table_20171102_1612.html",controller:expandingTableCtrl,controllerAs:"expandTblCtrl",transclude:!0,bindings:{title:"@",listItems:"<",columnDef:"<",disableSelection:"<",selectRecord:"<",resetToCollapsed:"<",disableErrColumn:"@",tname:"@"}}),expandingTableCtrl.$inject=["$filter","$scope"]}(),function(){"use strict";angular.module("contactModule",["dataLists","hpfbConstants","errorMessageModule"])}(),function(){"use strict";function contactCtrl(getContactLists,ENGLISH,FRENCH,$scope){function _setIdNames(){var scopeId=vm.fldId+"_"+$scope.$id;vm.salutationId="salutation"+scopeId,vm.firstNameId="firstName"+scopeId,vm.lastNameId="lastName"+scopeId,vm.langCorrespondId="langCorrespond"+scopeId,vm.jobTitleId="jobTitle"+scopeId,vm.faxId="faxNumber"+scopeId,vm.phoneNumberId="phoneNumber"+scopeId,vm.phoneExtId="phoneExt"+scopeId,vm.contactEmailId="contactEmail"+scopeId}var vm=this;vm.isEditable=!0,vm.ngModelOptSetting={updateOn:"blur"},vm.salutationList=getContactLists.getSalutationList(),vm.langCorresppond=[ENGLISH,FRENCH],vm.faxRequired=!1,vm.phoneReg=/\(?([0-9]{3})\)?([ .-]?)([0-9]{3})\2([0-9]{4})/,vm.contactModel={salutation:"",givenName:"",surname:"",initials:"",title:"",phone:"",phoneExt:"",fax:""},vm.inputModelOptions={updateOn:"blur"},vm.fldId="",vm.requiredOnly=[{type:"required",displayAlias:"MSG_ERR_MAND"}],vm.emailError=[{type:"required",displayAlias:"MSG_ERR_MAND"},{type:"email",displayAlias:"MSG_ERR_EMAIL_FORMAT"}],vm.phoneError=[{type:"required",displayAlias:"MSG_ERR_MAND"},{type:"pattern",displayAlias:"MSG_ERR_PHONE_FORMAT"}],vm.faxError=[{type:"required",displayAlias:"MSG_ERR_MAND"},{type:"pattern",displayAlias:"MSG_ERR_FAX_FORMAT"}],vm.$onInit=function(){vm.langList=[ENGLISH,FRENCH],_setIdNames()},vm.$onChanges=function(changes){changes.contactRecord&&(vm.contactModel=changes.contactRecord.currentValue),changes.isAmend&&(vm.isEditable=changes.isAmend.currentValue),changes.faxMandatory&&(vm.faxRequired=changes.faxMandatory.currentValue),changes.fieldSuffix&&(vm.fldId=changes.fieldSuffix.currentValue,vm.fldId||(vm.fldId=""))},vm.showError=function(ctrl){return!!ctrl&&!!(ctrl.$invalid&&ctrl.$touched||vm.showErrors()&&ctrl.$invalid)},$scope.$watch("contCtrl.contactForm.$error",function(){vm.updateErrorSummary()},!0)}angular.module("contactModule").component("cmpContactDetails",{templateUrl:"app/scripts/components/contactDetails/tpl-contact-details_20171102_1612.html",controller:contactCtrl,controllerAs:"contCtrl",bindings:{contactRecord:"<",onUpdate:"&",isAmend:"<",showErrors:"&",faxMandatory:"@",updateErrorSummary:"&",fieldSuffix:"<"}}),contactCtrl.$inject=["getContactLists","ENGLISH","FRENCH","$scope"]}(),function(){"use strict";angular.module("applicationInfo",["numberFormat","hpfbConstants"])}(),function(){"use strict";function ApplInfoCtrl(NEW_TYPE,AMEND_TYPE,APPROVED_TYPE,EXTERNAL_TYPE){function _setConfigItems(configJson){vm.fieldIdLabel=configJson.label,vm.fieldLength=configJson.fieldLength,vm.tagName=configJson.tagName,configJson.minFieldLength?vm.minFieldLength=configJson.minFieldLength:vm.minFieldLength=configJson.fieldLength,vm.errorMsg=configJson.errorMsg,configJson.minErrorMsg?vm.minErrorMsg=configJson.minErrorMsg:vm.minErrorMsg=configJson.errorMsg,configJson.isNumber&&(vm.isNumber=configJson.isNumber),vm.isDossier=configJson.isDossier,angular.isUndefined(vm.isDossier)&&(vm.isDossier=!1)}var vm=this;vm.applTypes=[NEW_TYPE,AMEND_TYPE,APPROVED_TYPE],vm.formType=EXTERNAL_TYPE,vm.infoModel={applicationType:"NEW",enrolmentVersion:"0.0",dateSaved:""},vm.fieldIdLabel="",vm.minFieldLength="",vm.isNumber=!1,vm.fieldLength="",vm.tagName="fieldId",vm.setAsIncomplete=!0,vm.errorMsg="",vm.maxErrorMsg="",vm.isDossier=!1,vm.isNumber=!1,vm.$onInit=function(){},vm.$onChanges=function(changes){changes.userType&&(vm.formType=changes.userType.currentValue),changes.record&&(vm.infoModel=changes.record.currentValue),changes.isIncomplete&&(vm.setAsIncomplete=changes.isIncomplete.currentValue),changes.configureIdField&&_setConfigItems(changes.configureIdField.currentValue)},vm.showAmendMsg=function(){return!!vm.record&&vm.record.applicationType===AMEND_TYPE},vm.isExtern=function(){return vm.formType==EXTERNAL_TYPE},vm.setAmendState=function(){vm.setType({type:AMEND_TYPE})}}angular.module("applicationInfo").component("cmpApplicationInfo",{templateUrl:"app/scripts/components/applicationInfo/tpl-application-info_20171102_1612.html",controller:ApplInfoCtrl,controllerAs:"infoCtrl",bindings:{record:"<",userType:"<",isIncomplete:"<",configureIdField:"<",setType:"&"}}),ApplInfoCtrl.$inject=["NEW_TYPE","AMEND_TYPE","APPROVED_TYPE","EXTERNAL_TYPE"]}(),function(){"use strict";angular.module("activityForm",[])}(),function(){"use strict";function activityRationaleCtrl(){var vm=this;vm.record={},vm.requiredState=!1,vm.rationaleSelected="",vm.$onChanges=function(changes){changes.activityRecord&&(vm.record=changes.activityRecord.currentValue,vm.updateErrorState()),changes.isRequired&&(vm.requiredState=changes.isRequired.currentValue,vm.updateErrorState())},vm.showError=function(isTouched,isInvalid){return!!(isInvalid&&isTouched||vm.showErrors()&&isInvalid)},vm.updateErrorState=function(){vm.record.newRoa||vm.record.newClaims||vm.record.changeFormulation||vm.record.changeDrugSubstance||vm.record.replaceSterility||vm.record.confirmitoryStudies||vm.record.otherRationaleDetails?vm.rationaleSelected="value":vm.rationaleSelected=""},vm.showErrorMissing=function(){return!!vm.requiredState&&(!vm.rationaleSelected&&(!!(!vm.activityTypeForm.$pristine&&vm.activityTypeForm.$invalid||vm.showErrors()&&vm.activityTypeForm.$invalid||vm.activityTypeForm.$touched&&vm.activityTypeForm.$invalid)||void 0))}}angular.module("activityForm").component("cmpActivityRationale",{templateUrl:"app/scripts/components/activityRationale/tpl-activity-rationale_20171102_1612.html",controller:activityRationaleCtrl,controllerAs:"actRatCtrl",bindings:{activityRecord:"<",isRequired:"<",showErrors:"&"}})}(),function(){"use strict";angular.module("activityMain",["pascalprecht.translate","ngMessages","ngAria","fileIO","ngSanitize","activityService","applicationInfoService","applicationInfo","filterLists","commonStaticLists","activityChange","activityForm","numberFormat","contactModule26","contactModule","contactModule25","adminSubmission","activityLists","ui.select","hpfbConstants","alertModule","errorMessageModule"])}(),function(){"use strict";function activityMainCtrl(ActivityService,ApplicationInfoService,hpfbFileProcessing,$scope,$translate,CommonLists,ActivityListFactory,NEW_TYPE,AMEND_TYPE,APPROVED_TYPE,INTERNAL_TYPE,EXTERNAL_TYPE,ENGLISH){function loadActivityData(){ActivityListFactory.getRaTypeList().then(function(data){return vm.activityTypeList=data,!0})}function loadFeeData(){ActivityListFactory.getFeeClassList().then(function(data){return vm.feeClassList=data,!0})}function _createFilename(){var draft_prefix="DRAFTREPRA",final_prefix="HCREPRA",filename="",separator="-";return filename=vm.userType===INTERNAL_TYPE?final_prefix:draft_prefix,vm.activityRoot&&vm.activityRoot.dstsControlNumber&&(filename=filename+separator+vm.activityRoot.dstsControlNumber),vm.activityRoot.enrolmentVersion&&(filename=filename+separator+vm.activityRoot.enrolmentVersion),filename=filename.replace(".",separator),filename.toLowerCase()}function _transformFile(){return updateDate(),vm.isExtern()?vm.activityRoot.enrolmentVersion=vm.applicationInfoService.incrementMinorVersion(vm.activityRoot.enrolmentVersion):vm.activityEnrolForm.$pristine||(vm.activityRoot.enrolmentVersion=vm.applicationInfoService.incrementMajorVersion(vm.activityRoot.enrolmentVersion),vm.activityRoot.applicationType=APPROVED_TYPE,updateModelOnApproval()),_updateInfoValues(),vm.activityService.transformToFileObj(vm.activityRoot)}function _updateInfoValues(){vm.updateValues++}function _setComplete(){vm.isIncomplete=!vm.activityRoot.dstsControlNumber}function _loadFileContent(fileContent){if(fileContent){vm.activityService=new ActivityService;var resultJson=fileContent.jsonResult;resultJson&&(vm.activityService.transformFromFileObj(resultJson),vm.activityRoot={},vm.activityRoot=vm.activityService.getModelInfo(),_setComplete(),vm.activityEnrolForm.$setDirty()),vm.setThirdParty(),vm.updateActivityType(),vm.setAdminSubmission()}}function _setApplTypeToAmend(){vm.activityRoot.applicationType=AMEND_TYPE}function updateDate(){vm.activityRoot&&(vm.activityRoot.dateSaved=vm.applicationInfoService.getTodayDate())}function updateModelOnApproval(){if(vm.activityRoot&&vm.activityRoot.contactRecord)for(var j=0;j<vm.activityRoot.contactRecord.length;j++)vm.activityRoot.contactRecord[j].amend=!1}function _setIdNames(){var scopeId="_"+$scope.$id;vm.formId="activity_form"+scopeId,vm.companyId="company_id"+scopeId,vm.dossierId="dossier_id"+scopeId,vm.activityLeadId="activity_lead"+scopeId,vm.activityTypeId="activity_type"+scopeId,vm.feeClassId="fee_class"+scopeId,vm.reasonId="reason_file"+scopeId,vm.thirdPartyId="is_solicited"+scopeId,vm.isAdminSubId="is_admin_sub"+scopeId}var vm=this;vm.isIncomplete=!0,vm.userType=EXTERNAL_TYPE,vm.saveXMLLabel="SAVE_DRAFT",vm.updateValues=0,vm.setAmendState=_setApplTypeToAmend,vm.showContent=_loadFileContent,vm.disableXML=!0,vm.formAmend=!1,vm.isNotifiable=!1,vm.isRationale=!1,vm.showActivity=!1,vm.lang=$translate.proposedLanguage()||$translate.use(),vm.activityService=new ActivityService,vm.applicationInfoService=new ApplicationInfoService,vm.rootTag=vm.activityService.getRootTag(),vm.activityRoot=vm.activityService.getModelInfo(),vm.leadList=ActivityListFactory.getActivityLeadList(),vm.alerts=[],vm.configField={label:"CONTROL_NUMBER",fieldLength:"6",tagName:"dstsControlNumber",errorMsg:"MSG_LENGTH_6",isNumber:!0},vm.CommonLists=CommonLists,vm.yesNoList=vm.CommonLists.getYesNoList(),vm.alerts=[!1,!1,!1,!1],vm.exclusions={"contactRec.contactRecForm":"true"},vm.alias={notif_missing:{type:"fieldset",parent:"fs_notif_change"},rationale_missing:{type:"fieldset",parent:"fs_rationale_missing"},one_rep:{type:"element",target:"addRepContactBtn"}},vm.focusSummary=!1,vm.updateSummary=0,vm.requiredOnly=[{type:"required",displayAlias:"MSG_ERR_MAND"}],vm.length5Error=[{type:"required",displayAlias:"MSG_ERR_MAND"},{type:"minlength",displayAlias:"MSG_LENGTH_MIN5"}],vm.length7Error=[{type:"required",displayAlias:"MSG_ERR_MAND"},{type:"minlength",displayAlias:"MSG_LENGTH_7"}],vm.initUser=function(id){},vm.$onInit=function(){_setIdNames(),vm.setThirdParty(),vm.updateActivityType(),vm.setAdminSubmission(),loadActivityData(),loadFeeData()},vm.$onChanges=function(changes){changes.formType&&(vm.userType=changes.formType.currentValue,vm.userType==INTERNAL_TYPE?vm.saveXMLLabel="APPROVE_FINAL":vm.saveXMLLabel="SAVE_DRAFT")},vm.isFrench=function(){return vm.lang!==ENGLISH},vm.isAmend=function(){return vm.formAmend},vm.saveJson=function(){var writeResult=_transformFile();hpfbFileProcessing.writeAsJson(writeResult,_createFilename(),vm.rootTag),_setComplete()},vm.updateErrorSummaryState=function(){vm.updateSummary=vm.updateSummary+1},vm.saveXML=function(){if(vm.activityEnrolForm.$invalid)vm.focusSummary++,vm.updateErrorSummaryState(),vm.savePressed=!0;else{var writeResult=_transformFile();hpfbFileProcessing.writeAsXml(writeResult,_createFilename(),vm.rootTag),_setComplete(),vm.activityEnrolForm.$setPristine(),vm.savePressed=!1}},vm.showError=function(ctrl){if(ctrl)return ctrl.$invalid&&ctrl.$touched||vm.showErrors()&&ctrl.$invalid},vm.showErrorCheck=function(isTouched,value){return!value&&isTouched||vm.showErrors()&&!value},vm.showErrors=function(){return vm.savePressed},vm.setThirdParty=function(){vm.thirdPartyState="Y"===vm.activityRoot.isThirdParty},vm.setApplicationType=function(value){vm.activityRoot.applicationType=value,vm.formAmend=vm.activityRoot.applicationType===AMEND_TYPE},vm.setAdminSubmission=function(){vm.activityRoot.isAdminSub===vm.CommonLists.getYesValue()?vm.showActivity=!0:(vm.activityRoot.relatedActivity=vm.activityService.getEmptyRelatedActivity(),vm.showActivity=!1)},vm.updateActivityType=function(){vm.activityService.isNotifiableChange(vm.activityRoot.regActivityType.id)?(vm.activityService.resetRationale(),vm.isNotifiable=!0,vm.isRationale=!1):vm.activityService.isRationale(vm.activityRoot.regActivityType.id,vm.activityRoot.regActivityLead)?(vm.isRationale=!0,vm.activityService.resetNotifiableChanges(),vm.isNotifiable=!1):(vm.activityService.resetNotifiableChanges(),vm.activityService.resetRationale(),vm.isNotifiable=!1,vm.isRationale=!1)},vm.disableJSONSave=function(){return vm.activityRoot.applicationType==APPROVED_TYPE&&vm.isExtern()},vm.isExtern=function(){return vm.userType==EXTERNAL_TYPE},vm.addInstruct=function(value){angular.isUndefined(value)||value<vm.alerts.length&&(vm.alerts[value]=!0)},vm.closeAlert=function(value){angular.isUndefined(value)||value<vm.alerts.length&&(vm.alerts[value]=!1)}}angular.module("activityMain").config(function(uiSelectConfig){uiSelectConfig.theme="select2"}).component("cmpActivityMain",{templateUrl:"app/scripts/components/activityMain/tpl-activity-main_20171102_1612.html",controller:activityMainCtrl,controllerAs:"main",bindings:{formType:"@"}}),activityMainCtrl.$inject=["ActivityService","ApplicationInfoService","hpfbFileProcessing","$scope","$translate","CommonLists","ActivityListFactory","NEW_TYPE","AMEND_TYPE","APPROVED_TYPE","INTERNAL_TYPE","EXTERNAL_TYPE","ENGLISH"]}(),function(){"use strict";angular.module("activityChange",[])}(),function(){"use strict";function activityChangeCtrl(){var vm=this;vm.record={},vm.rationaleSelected="",vm.$onChanges=function(changes){changes.activityRecord&&(vm.record=changes.activityRecord.currentValue,vm.updateErrorState()),changes.isRequired&&(vm.requiredState=changes.isRequired.currentValue,vm.updateErrorState())},vm.showError=function(isTouched,isInvalid){return!!(isInvalid&&isTouched||vm.showErrors()&&isInvalid)},vm.updateErrorState=function(){vm.record.textLabelChange||vm.record.drugSubstanceChange||vm.record.formulationChange||vm.record.specificationChange||vm.record.expiryStorageChange||vm.record.manufactMethodChange||vm.record.containerSizeChange||vm.record.packagingSpecChange||vm.record.packagingMaterialsChange||vm.record.otherChangeDetails?vm.rationaleSelected="value":vm.rationaleSelected=""},vm.showErrorMissing=function(){return!!vm.requiredState&&(!vm.rationaleSelected&&(!!(!vm.notifChangeForm.$pristine&&vm.notifChangeForm.$invalid||vm.showErrors()&&vm.notifChangeForm.$invalid||vm.notifChangeForm.$touched&&vm.notifChangeForm.$invalid)||void 0))}}angular.module("activityChange").component("cmpActivityChange",{templateUrl:"app/scripts/components/activityChangeType/tpl-activity-change_20171102_1612.html",controller:activityChangeCtrl,controllerAs:"actChangeCtrl",bindings:{activityRecord:"<",isRequired:"<",showErrors:"&"}})}();
//# sourceMappingURL=data:application/json;base64,

!function(){"use strict";angular.module("transactionApp",["transactionMainModule","pascalprecht.translate","ngMessages","ngAria","ui.bootstrap","translations","ngSanitize"])}(),function(){"use strict";function MainController(){var vm=this;vm.userType}angular.module("transactionApp").controller("MainController",MainController)}(),function(){"use strict";angular.module("transactionApp").config(["$translateProvider","$httpProvider","$locationProvider",function($translateProvider,$httpProvider,$locationProvider){$locationProvider.html5Mode({enabled:!0,requireBase:!1,rewriteLinks:!1}),$translateProvider.directivePriority(1),$translateProvider.preferredLanguage("fr"),$translateProvider.useLoader("customLoad"),$translateProvider.useSanitizeValueStrategy(null),$translateProvider.forceAsyncReload(!0),$httpProvider.defaults.headers.get||($httpProvider.defaults.headers.get={}),$httpProvider.defaults.headers.get["If-Modified-Since"]="Mon, 26 Jul 1997 05:00:00 GMT",$httpProvider.defaults.headers.get["Cache-Control"]="no-cache",$httpProvider.defaults.headers.get.Pragma="no-cache"}])}(),angular.module("translations",[]).config(["$translateProvider",function($translateProvider){$translateProvider.translations("en",{CITY:"City",COUNTRY:"Country",PROVINCE:"Province",POSTAL:"Postal Code",PROVSTATE:"Province or State",STATE:"State",STREET:"Street Address",ZIP:"Zip Code",COMPANY:"Company",ADD_ADDRESS:"Add Address",CITY_TOWN:"City or Town",SAVE_ADDR:"Save Address",DELETE_ADDR:"Delete Address",ADDR_INFO:"Address Information",ADDR_DETAILS:"Address Details",ADDR_ROLE_LEGEND:"Select one or more roles for this company",PRODUCTS_IMPORTED:"Imported Products",PRODUCT_TYPES:"Products imported by this Company",ALL_PRODUCTS:"All Products",SELECTED_PRODUCTS:"Some Products",IDENTIFY_PRODUCTS:"Provide the Dossier Identifiers for the products that are imported by this Company",ADD_DOSSIER_ID:"Add Dossier ID",IMPORTER_NONCDN:"Please ensure you indicate a Canadian Importer on your Product Information REP XML",COUNTRY_CHOOSE:"Choose a country",COUNTRY_SEARCH:"Select or Search for country",PROVINCELIST:"Province"}),$translateProvider.translations("fr",{CITY:"Ville",COUNTRY:"Pays",PROVINCE:"Province",POSTAL:"Code postal",PROVSTATE:"Province ou état",STATE:"Etat",STREET:"Adresse",ZIP:"Zip Code",COMPANY:"Compagnie",ADD_ADDRESS:"Ajouter Addresse",CITY_TOWN:"Ville",SAVE_ADDR:"fr_Save Address",DELETE_ADDR:"Supprimer Addresse",ADDR_INFO:"Informations d'adresses",ADDR_DETAILS:"Détails de l'adresse",ADDR_ROLE_LEGEND:"fr_Select one or more roles for this company",IMPORTER_NONCDN:"fr_There should be a Canadian Importer when the Manufacturer / Sponsor is not a Canadian Address",COUNTRY_CHOOSE:"Choisir un pays",COUNTRY_SEARCH:"fr_Select or Search for country",PROVINCELIST:"Province"}),$translateProvider.translations("en",{AB:"Alberta",BC:"British Columbia",MB:"Manitoba",NB:"New Brunswick",NL:"Newfoundland and Labrador",NT:"Northwest Territories",NS:"Nova Scotia",NU:"Nunavut",ON:"Ontario",PE:"Prince Edward Island",QC:"Quebec",SK:"Saskatchewan",YT:"Yukon",AL:"Alabama",AK:"Alaska",AZ:"Arizona",AR:"Arkansas",CA:"California",CO:"Colorado",CT:"Connecticut",DE:"Delaware",DC:"District of Columbia",FL:"Florida",GA:"Georgia",HI:"Hawaii",ID:"Idaho",IL:"Illinois",IN:"Indiana",IA:"Iowa",KS:"Kansas",KY:"Kentucky",LA:"Louisiana",ME:"Maine",MD:"Maryland",MA:"Massachusetts",MI:"Michigan",MN:"Minnesota",MS:"Mississippi",MO:"Missouri",MT:"Montana",NE:"Nebraska",NV:"Nevada",NH:"New Hampshire",NJ:"New Jersey",NM:"New Mexico",NY:"New York",NC:"North Carolina",ND:"North Dakota",OH:"Ohio",OK:"Oklahoma",OR:"Oregon",PA:"Pennsylvania",RI:"Rhode Island",SC:"South Carolina",SD:"South Dakota",TN:"Tennessee",TX:"Texas",UT:"Utah",VT:"Vermont",VA:"Virginia",WA:"Washington",WV:"West Virginia",WI:"Wisconsin",WY:"Wyoming"}),$translateProvider.translations("fr",{AB:"Alberta",BC:"Colombie-Britannique",PE:"Île-du-Prince-Édouard",MB:"Manitoba",NB:"Nouveau-Brunswick",NS:"Nouvelle-Écosse",NU:"Nunavut",ON:"Ontario",QC:"Québec",SK:"Saskatchewan",NL:"Terre-Neuve et Labrador",NT:"Territoires du Nord-Ouest",YT:"Yukon",AL:"Alabama",AK:"Alaska",AZ:"Arizona",AR:"Arkansas",CA:"Californie",NC:"Caroline du nord",SC:"Caroline du sud",CO:"Colorado",CT:"Connecticut",ND:"Dakota du nord",SD:"Dakota du sud",DE:"Delaware",DC:"District de Columbia",FL:"Floride",GA:"Géorgie",HI:"Hawaii",ID:"Idaho",IL:"Illinois",IN:"Indiana",IA:"Iowa",KS:"Kansas",KY:"Kentucky",NY:"L'état de New York",WA:"L'état de washington",LA:"Louisiane",ME:"Maine",MD:"Maryland",MA:"Massachusetts",MI:"Michigan",MN:"Minnesota",MS:"Mississippi",MO:"Missouri",MT:"Montana",NE:"Nebraska",NV:"Nevada",NH:"New Hampshire",NJ:"New Jersey",NM:"Nouveau-mexique",OH:"Ohio",OK:"Oklahoma",OR:"Oregon",PA:"Pennsylvanie",RI:"Rhode Island",TN:"Tennessee",TX:"Texas",UT:"Utah",VT:"Vermont",VA:"Virginie",WV:"Virginie-occidentale",WI:"Wisconsin",WY:"Wyoming"}),$translateProvider.translations("en",{FIRSTNAME:"First Name",LASTNAME:"Last Name",INITIALS:"Initials",LANGCORRESPOND:"Language of Correspondance",JOBTITLE:"Job Title",SALUTATION:"Salutation",SALUT_MR:"Mr.",SALUT_MS:"Ms.",SALUT_DR:"Dr.",SALUT_MRS:"Mrs.",ROLE_PRIMARY:"Primary",ROLE_SECONDARY:"Alternate",CONTACTEMAIL:"Email",FAX_NUMBER:"Fax Number",PHONE_EXT:"Phone Extension",ROLES:"Roles",PHONENUMBER:"Phone Number",CONTACT_INFO:"Company Representative Information",AMEND:"Amend",REP_CONTACT:"REP Contact",ONE_ROLE:"Role",CONTACT_DETAILS:"Company Representative Details",ADD_CONTACT:"Add REP Contact",CONTACT_ROLE_LEGEND:"Select one or more roles for this company representative",CONTACT_ROLE_INSTRUCT:"Company Representative Role Instructions",ADD_REPRES:"Add Company Representative",DELETE_REPRES:"Delete Company Rep.",SAVE_REPRES:"Save Company Rep."}),$translateProvider.translations("fr",{FIRSTNAME:"Prénom",LASTNAME:"Nom",INITIALS:"Initiales",LANGCORRESPOND:"Langue de correspondance",JOBTITLE:"Titre de poste",SALUTATION:"Titre de civilité",SALUT_MR:"M.",SALUT_MS:"Mme",SALUT_DR:"Dr.",SALUT_MRS:"Mlle",ROLE_PRIMARY:"Primaire",ROLE_SECONDARY:"Alterner",CONTACTEMAIL:"Adresse électronique",FAX_NUMBER:"Numéro de télécopieur",PHONE_EXT:"Poste",ADDR_ROLES:"fr_Roles",PHONENUMBER:"Numéro de téléphone",CONTACT_INFO:"fr_Company Representative Information",AMEND:"fr_Amend",REP_CONTACT:"fr_REP Contact",ONE_ROLE:"fr_Role",CONTACT_DETAILS:"fr_Company Representative Details",ADD_CONTACT:"fr_Add REP Contact",CONTACT_ROLE_LEGEND:"fr_Select one or more roles for this company representative",CONTACT_ROLE_INSTRUCT:"fr_Company Representative Role Instructions",ADD_REPRES:"fr_Add Company Representative",DELETE_REPRES:"fr_Delete Company Rep.",SAVE_REPRES:"fr_Save Company Rep."}),$translateProvider.translations("en",{APPL_STATUS:"Enrolment Status",ENROL_VERSION:"Enrolment Version",DATE_SAVED:"Date Last Saved",AMEND_ENROL:"Amend Enrolment",AMEND_MSG:"Edit records to be amended below.",REASON_AMEND:"Reason for amendment"}),$translateProvider.translations("fr",{APPL_STATUS:"fr_Enrolment Status",ENROL_VERSION:"Version d’inscription",DATE_SAVED:"Date du dernier enregistrement",AMEND_ENROL:"fr_Amend Enrolment",AMEND_MSG:"fr_Edit records to be amended below.",REASON_AMEND:"fr_Reason for amendment"}),$translateProvider.translations("en",{SELECT_LOAD:"Select a file to load",MSG_SUCCESS_LOAD:"The file was loaded successfully",MSG_ERR_JSONPARSE:"Error: there was an error parsing the working file.",MSG_ERR_XMLPARSE:"Error: there was an error parsing the draft XML file.",MSG_ERR_FILE_LOAD:"Error: there was a problem loading the file.",MSG_ERR_FILE_TYPE:"Error: An invalid file type was selected.",MSG_ERR_FORM_TYPE:"Error: the wrong form type was selected for this form.",MSG_ERR_CHECKSUM_FAIL:"Error: the checksum in the file does not match the calculated checksum"}),$translateProvider.translations("fr",{SELECT_LOAD:"Sélectionnez un fichier à charger",MSG_SUCCESS_LOAD:"Le fichier a été chargé avec succès",MSG_ERR_JSONPARSE:"Erreur: il y a eu une erreur en analysant le fichier de travail.",MSG_ERR_XMLPARSE:"Erreur: il y avait une erreur d'analyse du projet de fichier XML,",MSG_ERR_FILE_LOAD:"Erreur: il y a eu un problème lors du chargement du fichier.",MSG_ERR_FILE_TYPE:"Erreur: un type de fichier invalide a été sélectionné.",MSG_ERR_FORM_TYPE:"Erreur: le type de formulaire incorrect a été sélectionné pour ce formulaire.",MSG_ERR_CHECKSUM_FAIL:"Erreur: La somme de contrôle dans le fichier ne correspond pas à la somme de contrôle calculée."}),$translateProvider.translations("en",{Y:"Yes",N:"No",ADD:"Add",DELETEROW:"Delete Row",SELECTEDROW:"Selected Row",REQUIRED:"(required)",ROLES_SELECT:"Select one or more roles for this record",NEW:"New",AMEND:"Amend",APPROVED:"Approved",FINAL:"Final",CLICK_TOGGLE:"Click to toggle the collapse or expand details for this address.",AMEND_RECORD:"Amend Record",en:"English",fr:"French",DISCARD_CHANGES:"Discard Changes",REPSECONDARY:"Alternate REP contact",REPPRIMARY:"Primary REP contact",MAILING:"Regulatory Mailing / Annual Contact Address",BILLING:"Billing Address",MANUFACTURER:"Manufacturer / Sponsor Mailing Address",IMPORTER_ADDRESS:"Canadian Importer Mailing Address",CONTACT_MAILING:"Regulatory Mailing / Annual Contact",CONTACT_BILLING:"Billing Contact",CONTACT_MANUFACTURER:"Manufacturer / Sponsor Contact",CONTACT_IMPORTER:"Importer Contact",APPROVE_FINAL:"Generate Final XML",SAVE_DRAFT:"Save Draft XML",PRIMARY:"Primary",SECONDARY:"Alternate",TOGGLE_EXPAND:"Click to toggle collapse or expand details of row",CONTROL_NUMBER:"Control Number",REP_CONTACT_INFO:"REP Contact Information",SAVE_CONTACT:"Save Contact",DELETE_CONTACT:"Delete Contact",COMPANY_ID:"Company ID",DOSSIER_ID:"Dossier ID",IMPORTER:"Importer",IMPORTERID:"Importer Company ID",IMPORTER_COMPANY_NAME:"Importer Company Name",IMPORTER_COMPANY_ID_IF:"Importer Company ID (if applicable)",IMPORTER_COMPANY_NAME_IF:"Importer Company Name (if applicable)",ERRORS:"Errors",UNKNOWN:"Unknown",BIOLOGIC:"Biologic",PHARMACEUTICAL:"Pharmaceutical",CLINICAL_TRIAL:"Clinical Trial",VETERINARY:"Veterinary",HELP_FILE_LOAD:"file load instructions",EXPAND:"Expand",HELP_ACTIVITY_MAIN:"Activity Instructions",HELP_ACTIVITY_REP:"REP Contact Instructions",CALENDAR:"Pick date from calendar",HIDE_CALENDAR:"Hide Calendar (escape key)",OTHER:"Other",HELP_REP_CONTACT:"REP Contact Instructions",OTHER_UNITS:"Units other details",COMPANYNAME:"Company Name (Full legal name - no abbreviations)",COPY:"Copy",DELETE:"Delete",SAVE_WORKING:"Save Working Copy",COMPANY_NOABBREV:"Company Name (Full legal Name - no abbreviations)",CLOSE_ALERT:"Collapse instructions",COLLAPSE:"Collapse",SAVE_RECORD:"Save Record",DELETE_RECORD:"Delete Record",CONTROL_NUM:"Control Number",OTHER_DETAILS:"Other - specify",PROD_NAME:"Product Name",PROD_NAME_HELP:"Product Name Instructions",PROP_NAME_HELP:"Proper, Common or Non-proprietary Name Instructions",RELATED_INFO_HELP:"Related Information Instructions",DOSSIER_TYPE:"Dossier Type"}),$translateProvider.translations("fr",{Y:"Oui",N:"Non",ADD:"fr_Add",DELETEROW:"fr_Delete Row",SELECTEDROW:"Selected Row",REQUIRED:"(requis)",ROLES_SELECT:"fr_Select one or more roles for this record",NEW:"fr_New",AMEND:"fr_Amend",APPROVED:"fr_Approved",CLICK_TOGGLE:"fr_Click to toggle the collapse or expand details for this address.",AMEND_RECORD:"fr_Amend Record",en:"Anglais",fr:"Français",DISCARD_CHANGES:"fr_Discard Changes",REPSECONDARY:"fr_Alternate REP contact",REPPRIMARY:"fr_Primary REP contact",MAILING:"Contact pour le courrier réglementaire",BILLING:"fr_Billing",MANUFACTURER:"fr_Manufacturer",IMPORTER_ADDRESS:"fr_Canadian Importer Mailing Address",CONTACT_MAILING:"fr_Regulatory Mailing / Annual Contact",CONTACT_BILLING:"fr_Billing Contact",CONTACT_MANUFACTURER:"fr_Manufacturer / Sponsor Contact",CONTACT_IMPORTER:"fr_Importer Contact",APPROVE_FINAL:"fr_Generate XML final",PRIMARY:"fr_Primary",SECONDARY:"fr_Alternate",TOGGLE_EXPAND:"fr_Click to toggle collapse or expand details of row",SAVE_DRAFT:"fr_Save Draft XML",CONTROL_NUMBER:"fr_Control Number",REP_CONTACT_INFO:"fr_Main Contact Information",SAVE_CONTACT:"fr_Save Contact",DELETE_CONTACT:"fr_Delete Contact",COMPANY_ID:"fr_Company Id",DOSSIER_ID:"fr_Dossier Id",IMPORTER:"fr_Importer",IMPORTERID:"fr_Importer Company ID",IMPORTER_COMPANY_NAME:"fr_Importer Company Name",IMPORTER_COMPANY_ID_IF:"fr_Importer Company ID (if applicable)",IMPORTER_COMPANY_NAME_IF:"fr_Importer Company Name (if applicable)",ERRORS:"Erreurs",UNKNOWN:"Inconnu",BIOLOGIC:"fr_Biologic",PHARMACEUTICAL:"fr_Pharmaceutical",HELP_FILE_LOAD:"fr_File Load Instructions",EXPAND:"fr_Expand",HELP_ACTIVITY_MAIN:"fr_Activity Instructions",HELP_ACTIVITY_REP:"fr_REP Contact Instructions",CALENDAR:"fr_Pick date from calendar",HIDE_CALENDAR:"fr_Hide Calendar (escape key)",OTHER:"Autre",HELP_REP_CONTACT:"fr_REP Contact Instructions",OTHER_UNITS:"fr_Units other details",COMPANYNAME:"fr_Company Name (Full legal name - no abbreviations)",COPY:"fr_Copy",DELETE:"fr_Delete",SAVE_WORKING:"Enregistrer une copie de travail",COMPANY_NOABBREV:"fr_Company Name (Full legal Name - no abbreviations)",CLOSE_ALERT:"Minimiser les instructions",COLLAPSE:"Minimiser les",SAVE_RECORD:"fr_Save Record",DELETE_RECORD:"fr_Delete Record",CONTROL_NUM:"fr_Control Number",OTHER_DETAILS:"fr_Other Details - Specify",PROD_NAME:"fr_Product Name",PROD_NAME_HELP:"fr_Product Name Instructions",PROP_NAME_HELP:"fr_Proper, Common or Non-proprietary Name Instructions",RELATED_INFO_HELP:"fr_Related Information Instructions",DOSSIER_TYPE:"fr_Dossier Type"}),$translateProvider.translations("en",{MSG_ERR_MAND:"This field is required",MSG_ERR_EMAIL_FORMAT:"Please enter a valid email address.",MSG_ERR_ROLE:"Please select at least one role",MSG_ERR_DISITYPE:"Please select at least one disinfectant type",MSG_ERR_ADDRESS:"Please select at least one address",MSG_ERR_CONTACT_NUM:"All the roles have to be used for the contacts",MSG_ERR_PHONE_FORMAT:"Specify a valid phone number",MSG_ERR_FAX_FORMAT:"Specify a valid fax number",MSG_ERR_ALLROLE:"The roles of manufacturer, mailing, billing, and primary REP contact  have not all been selected among the list of contacts",MSG_ERR_ADDRESSSROLE:"The roles of manufacturer, mailing, and billing have not all been selected among the list of addresses",MSG_ERR_POSTAL:"Please specify a valid postal code.",MSG_ERR_ZIP:"Please specify a valid zip code.",MSG_ERR_DATE_FORMAT:"The date format is incorrect.",MAILING_SEL:"Mailing Role already Selected",MANUFACT_SEL:"Manufacturer Role already Selected",MAIL_SEL:"Mailing Role already Selected",BILLING_SEL:"Billing Role already Selected",IMPORTER_SEL:"Importer Role already Selected",REPPRIM_SEL:"REP Primary Role already Selected",REPALT_SEL:"REP Alternate Role already Selected",MSG_LENGTH_MIN5:"Please enter at least 5 characters",MSG_LENGTH_6:"Please enter 6 characters.",MSG_LENGTH_6NUM:"Please enter 6 digits.",MSG_LENGTH_8NUM:"Please enter 8 digits.",MSG_LENGTH_7:"Please enter 7 characters.",MSG_LENGTH_7NUM:"Please enter 7 digits.",ONE_REP:"At least one contact is required.",MSG_ERR_NOTIF_SEL:"Please select at least one notifiable change.",MSG_ERR_MIN_POS:"Must be a positive number",MSG_ERR_MAX:"Exceeds the maximum"}),$translateProvider.translations("fr",{MSG_ERR_MAND:"Ce champ est obligatoire.",MSG_ERR_ROLE:"fr_Please select at least one role",MSG_ERR_DISITYPE:"fr_Please select at least one disinfectant type",MSG_ERR_ADDRESS:"fr_Please select at least one address",MSG_ERR_EMAIL_FORMAT:"Veuillez fournir une adresse électronique valide.",MSG_ERR_CONTACT_NUM:"fr_All the roles have to be used for the company contacts",MSG_ERR_PHONE_FORMAT:"Veuillez fournir un numéro de téléphone valide.",MSG_ERR_FAX_FORMAT:"Veuillez fournir un numéro de télécopieur valide.",MSG_ERR_ALLROLE:"fr_Across the contact records, the roles of manufacturer, mailing, billing, and REP primary contact must be selected",MSG_ERR_ADDRESSSROLE:"fr_The roles of manufacturer, mailing, and billing have not all been selected among the list of addresses",MSG_ERR_POSTAL:"Veuillez fournir un code postal valide.",MSG_ERR_ZIP:"Veuillez fournir un code postal valide.",MSG_ERR_DATE_FORMAT:"Veuillez fournir une une date valide.",MANUFACT_SEL:"fr_Manufacturer Role already Selected",MAIL_SEL:"fr_Mailing Role already Selected",BILLING_SEL:"fr_Billing Role already Selected",IMPORTER_SEL:"fr_Importer Role already Selected",REPPRIM_SEL:"fr_REP Primary Role already Selected",REPALT_SEL:"fr_REP Alternate Role already Selected",MSG_LENGTH_MIN5:"Veuillez fournir au moins 5 chiffres.",MSG_LENGTH_6:"Veuillez fournir au moins 6 caractères.",MSG_LENGTH_6NUM:"Veuillez fournir 6 chiffres.",MSG_LENGTH_8NUM:"Veuillez fournir 8 chiffres.",MSG_LENGTH_7:"Veuillez fournir 7 caractères.",MSG_LENGTH_7NUM:"Veuillez fournir  7 chiffres.",ONE_REP:"Au moins un contact est requis",MSG_ERR_NOTIF_SEL:"Sélectionnez au moins un changement de déclaration",MSG_ERR_MIN_POS:"Doit être un nombre positif",MSG_ERR_MAX:"Dépasse le maximum."}),$translateProvider.translations("en",{ADD_TRANSACTION:"New Record",SEQUENCE_NUM:"Sequence Number",DATE_SUBMITTED:"Date Submitted (YYYY-MM-DD)",SEQUENCE_DESCRIPT:"Regulatory Transaction Description",IS_ACTCHANGES:"Same as Regulatory Activity Contact for this Submission?",COMPANY_ID:"Company ID",DOSSIER_ID:"Dossier ID",DOSSIER_NAME:"Dossier Name",IS_ECTD:"Is this an eCTD transaction?",IS_SOLICITED:"Is this solicited information?",SOLICITED_RQ:"Requester of Solicited Information",SOLICITED_RQ_OTHER:"Other Requester Details",REP_CONTACT_INFO:"Main Contact Information",PROJ_MANAGER_NAME:"Name of Regulatory Project Manager, if known",DATED:"Dated (YYYY-MM-DD)",START_DATE:"Start Date (YYYY-MM-DD)",END_DATE:"End Date (YYYY-MM-DD)",REG_ACTIVITY:"Regulatory Activity",REG_ACTIVITY_TYPE:"Regulatory Activity Type",SEQUENCE_TYPE:"Regulatory Transaction Description",VERSION_NO:"Version No.",BRIEF_DESC:"Brief Description",ADMINISTRATIVE:"Administrative",BENEFIT_RISK_ASSESS:"Benefit Risk Assessment",CANCEL_LETTER:"Cancellation Letter",CHANGE_TO_DIN:"Change to DIN",COMMENTS_NOC:"Comments on Notice of Decision",COMMENTS_SUMMARY_BASIS:"Comments on Summary Basis of Decision (SBD)",COMMENTS_REGULARTORY_DECISION:"Comments on Regulatory Decision Summary",DIN_DISCONTINUED:"Notification of Discontinued Sale (DIN Cancellation)",DRUG_NOTIF_FORM:"Drug Notification Form",FOR_PERIOD:"For Period",INITIAL:"INITIAL",MEETING_MINUTES:"Minutes of Meeting",NOTIFICATION_CHANGE:"Notification of Change in Benefit-Risk Profile",NOTIFICATION_INTERRUPT_SALE:"Notification Interruption of Sale",PANDEMIC_APPL:"Pandemic Application",POST_CLEARANCE_DATA:"Post Clearance Data",POST_MARKET_SURV:"Post Marketing Surveillance",POST_NOC_CHANGE:"Post NOC Change",POST_AUTH_DIV1_CHANGE:"Post-Authorization Division 1 Change",PRESUB_MEETING_PKG:"Submission Meeting Package",PRESUB_MEETING_RQ:"Submission Meeting Request",PRIORITY_REVIEW_RQ:"Priority Review Request",PRISTINE_PM:"Pristine PM",PRISTINE_PM_2LANG:"Pristine PM - Second Language",ADVISEMENT_LETTER_RESPONSE:"Response to Advisement Letter",CLIN_CLARIF_RESPONSE:"Response to Clinical Clarification Request",EMAIL_RQ_RESPONSE:"Response to e-mail Request ",LABEL_CLARIF_RESPONSE:"Response to Labeling Clarification Request",MHPD_RQ_RESPONSE:"Response to MHPD Request",NOC_RESPONSE:"Response to NOC/c-QN",NOD_RESPONSE:"Response to NOD",NON_RESPONSE:"Response to NON",NOL_RESPONSE:"Response to NOL",PROCESSING_CLARIF_RESPONSE:"Response to Processing Clarification Request",QUAL_CLIN_CLARIF_RESPONSE:"Response to Quality and Clinical Clarification Request",QUAL_CLARIF_RESPONSE:"Response to Quality Clarification Request",SCREENING_ACCEPT_RESPONSE:"Response to Screening Acceptance Letter",SCREENING_CLARIF_RESPONSE:"Response to Screening Clarification Request",SDN_RESPONSE:"Response to SDN",PHONE_RQ_RESPONSE:"Response to Telephone Request",RISK_COMMUN_DOC:"Risk Communication Document",RMP_VERSION_DATE:"RMP version #",SIGNAL_WORK_UP:"Signal Work Up",UNSOLICITED_DATA:"Unsolicited Data",YEAR_LIST_OF_CHANGE:"Year, list of change number (for example: 2012, 15, 19a,….)",NONCLIN_CLARIF_RESPONSE:"Response to Non-clinical Clarification Request ",BE_CLARIF_RESPONSE:"Response to BE Clarification Request",RECON_DECIS_LTR_INTENT:"Reconsideration of Decision - Letter of Intent",RECON_DECIS_RQ_RECON:"Reconsideration of Decision - Request for Reconsideration",RECON_DECIS_OTHER_INFO:"Reconsideration of Decision - Other Information",LABEL_PREAPPROVAL_2LANG:"Second Language Label - Pre-Approval",LIFECYCLE_TITLE:"Transaction Details",REG_CONTACT_THIS:"Regulatory Activity Contact for THIS transaction",REG_ACT_CONTACT:"Regulatory Activity Contact",TRANSACTION_HDING:"Regulatory Information",LOAD_TRANSACTION:"Load a Regulatory Transaction File",COMPANY_INFO:"A. Company Information",ADDRESS_INFO:"B. Address Information",COMPANY_REP_THIS:"C. Company Representative",GENERATE_FINAL:"Generate Final XML",CONFIRM_CONTACT_VALID:"I confirm that the above regulatory activity contact information is valid.",YEAR_CHANGE:"Year of the change",REG_ACTIVITY_INSTRUCT:"Regulatory Activity Contact Instructions",SAVE_INSTRUCT:"Transaction File Save Instructions",CLARIF_RESPONSE:"Response to Clarification Request",CORR_PATENT_MED:"Correspondence - Patented Medicines",ALLEGATION_NOTICE:"Notice of allegation",FORM_IV:"Form IV",FORM_V:"Form V",CONSENT_LTR:"Consent Letter",DATA_PROTECT_CORRESP:"Correspondence - Data Protection",CHOOSE_REQUEST:"Choose a requester",TRANSACT_INSTRUCT:"Regulatory Transaction Instructions",LIST_DESCRIPT:"List Description",SEQUENCE_CLEANUP:"eCTD Dossier Clean-up",DEFER_FEES:" A deferral of payment is requested with this transaction.",DEFER_STATEMENT:"The statement supporting the deferral request is included.",FEE_REMISSION:"Fee Remission is requested with this transaction",STATEMENT_REVENUE:"A statement signed by the individual responsible for the applicant's financial affairs is included to certify that the fee payable is greater than 10% of the anticipated gross revenue",SUB_CLASS:"Submission Class",FEE_AMOUNT:"Fees",FEE_DESCRIPTION:"Submission Description",DEFER_FEES:"A deferral of payment is requested with this transaction",FEE_REMISSION:"Fee Remission is requested with this transaction",REMISSION_ELIGIBLE:"You are eligible to apply for fee remission. The submission fee is greater than 10% of anticipated gross revenues.",REMISSION_INELIGIBLE:"You are not eligible to apply for fee remission. The submission fee is less than 10% of anticipated gross revenues.",IS_FEE_TRANSACTION:"Are new or revised fees associated with this transaction?",REGULATORY_FEES:"Fees",GROSS_REVENUE:"Anticipated gross revenue for this drug product during the fee verification period",TEN_PERCENT_REVENUE:"10% of anticipated gross revenue",REQUIRED_DOC:"Required Documentation",SUPPORTING_DOC:"Please include the required signed statement AND at least one of the support documentation to establish that the applicable fee payable is greater than 10% of the anticipated gross revenue from sales of the drug product in Canada during the fee verification period.",EST_MARKET_SHARE:"Estimated market share (that is [i.e.], product's market potential compared to the total market for similar products in Canada)",SIMILAR_PRODUCT:"Comparison to similar products on the Canadian market or other similar markets (e.g., United States, European Union)",SALES_HISTORY:"Sales history prior to product upgrades or sales history of similar products",MARKETING_PLAN:"Marketing plan/product plan for the drug product",AVG_SALES:"Average sale price and demand",FEES_LESS10K:"Fees of $10,000 or less must be paid at the time of filing of the submission, supplement or application. Please complete the",ADVANCE_PAYMENT:"Advance Payment Details for Drug Submissions and Master Files.",SPONSOR_INVOICE:"Review fees must not be included with the submission, supplement or application. Sponsors will be invoiced for fees of more than $10,000.",PAYMENT_METHODS:"Please select all the payment methods you intend to use",ONE_PAYMENT_METHOD:"At least one method of payment must be selected",DEFER_INSTRUCT:"Deferral of Payment Instructions",REMISSION_INSTRUCT:"Fee Remission Instructions",CLASS_INSTRUCT:"Submission Class Instructions",PRODUCT_INSTRUCT:"Product Name Instructions",LIFECYCLE_INSTRUCT:"Lifecycle Management Table Instructions",SEQUENCE_INSTRUCT:"Sequence Number Instructions",CONTROL_INSTRUCT:"Control Number Instructions",COMPANY_INSTRUCT:"Company Name Instructions",COMPANY_ID_INSTRUCT:"Company ID Instructions",DOSSIER_ID_INSTRUCT:"Dossier ID Instructions",ADMIN_COMP_INSTRUCT:"Administrative Submission or Component Instructions",PLEASE_REMIT:"Please pay the remission processing fee of $590 using the Advance Payment Details for Drug Submissions and Master Files.",APPLY_DEFER:"You are applying for a deferral. Please send no payment with this form.",BANK_DRAFT:"International Bank Draft",MONEY_ORDER:"Money Order",CHEQUE:"Cheque",CREDIT:"Mastercard / Visa / Amex / Visa Debit / JCB International",BANK_WIRE:"Wire (include bank confirmation)",EXISTING_CREDIT:"Existing credit",PREFEERED_OPTION:"Bill Payment Service Option (preferred method)",REG_TRANSACT:"Regulatory Transaction",LIFE_REC:"Transaction Details Record",ONELIFEREC:"At least one transaction details record is required.",SAVELIFEREC:"At least one transaction details record is required to save.","LIFECYCLECTRL.LIFECYCLEDETAILSFORM":"with a Transaction Details Record",IS_NEW_ACTIVITY:"Is this transaction for a new or existing regulatory activity?",IS_SIGNED_3RD_PARTY:"Will the submission be signed / filed by a third party on behalf of the manufacturer / sponsor?",AUT_LETTER_NOTE:"A letter of authorization signed by the manufacturer/sponsor company must be provided in section 1.2.6 of the regulatory transaction.",IS_PRIORITY:"Was this regulatory activity approved for priority review?",IS_NOC:"Was this regulatory activity approved for NOC/C review?",IS_ADMIN_SUBMISSION:"Is this regulatory activity an Administrative Submission or does this regulatory activity contain an administrative component?",ADMIN_DESCRIPT:"Administrative Submission or administrative component description",ADMIN_SUB_TYPE:"Reason for Administrative Submission or administrative component",ACTIVITY_LEAD:"Regulatory Activity Lead",OTHER_DOC_DETAILS:"Other Documentation Details","B14-20160301-09":"Pharmaceutical","B14-20160301-02":"Biological","B14-20160301-10":"Post-Market Vigilance","B14-20160301-06":"Consumer Health Product",RESET:"RESET",RESET_INFO:"To enable the 'generate final XML' button, select the 'RESET' button to clear transaction specific fields."}),$translateProvider.translations("fr",{ADD_TRANSACTION:"fr_Add Record",SEQUENCE_NUM:"fr_Sequence Number",DATE_SUBMITTED:"fr_Date Submitted",SEQUENCE_DESCRIPT:"fr_Regulatory Transaction Description",IS_ACTCHANGES:"fr_Same as Regulatory Activity Contact for this Submission?",PROJ_MANAGER_NAME:"fr_Name of Regulatory Project Manager, if known",COMPANY_ID:"fr_Company Id",DOSSIER_ID:"fr_Dossier Id",DOSSIER_NAME:"fr_Dossier Name",IS_ECTD:"fr_Is this an eCTD transaction?",IS_SOLICITED:"fr_Is this solicited information",SOLICITED_RQ:"fr_Requester of Solicited Information",SOLICITED_RQ_OTHER:"fr_Other Requester Details",REP_CONTACT_INFO:"Main Contact Information",DATED:"fr_Dated",START_DATE:"fr_Start Date",END_DATE:"fr_End Date",REG_ACTIVITY:"fr_Regulatory Activity",REG_ACTIVITY_TYPE:"fr_Regulatory Activity Type",SEQUENCE_TYPE:"fr_Regulatory Transaction Description ",VERSION_NO:"fr_Version No.",BRIEF_DESC:"fr_Brief Description",ADMINISTRATIVE:"fr_Administrative",BENEFIT_RISK_ASSESS:"fr_Benefit Risk Assessment",CANCEL_LETTER:"fr_Cancellation Letter",CHANGE_TO_DIN:"fr_Change to DIN",COMMENTS_NOC:"fr_Comments on Notice of Decision",COMMENTS_SUMMARY_BASIS:"fr_Comments on Summary Basis of Decision",DIN_DISCONTINUED:"fr_Notification of Discontinued Sale (DIN Cancellation)",DRUG_NOTIF_FORM:"fr_Drug Notification Form",FOR_PERIOD:"fr_For Period",INITIAL:"fr_INITIAL",MEETING_MINUTES:"fr_Minutes of Meeting",NOTIFICATION_CHANGE:"fr_Notification of Change in benefit-risk profile",NOTIFICATION_INTERRUPT_SALE:"fr_Notification Interruption of Sale",PANDEMIC_APPL:"fr_Pandemic Application",POST_CLEARANCE_DATA:"fr_Post Clearance Data",POST_MARKET_SURV:"fr_Post Marketing Surveillance",POST_NOC_CHANGE:"fr_Post NOC Change",POST_AUTH_DIV1_CHANGE:"fr_Post-Authorization Division 1 Change",PRESUB_MEETING_PKG:"fr_Submission Meeting Package",PRESUB_MEETING_RQ:"fr_Submission Meeting Request",PRIORITY_REVIEW_RQ:"fr_Priority Review Request",PRISTINE_PM:"fr_Pristine PM",PRISTINE_PM_2LANG:"fr_Pristine PM - Second Language",ADVISEMENT_LETTER_RESPONSE:"fr_Response to Advisement Letter ",CLIN_CLARIF_RESPONSE:"fr_Response to Clinical Clarification Request ",EMAIL_RQ_RESPONSE:"fr_Response to e-mail Request ",LABEL_CLARIF_RESPONSE:"fr_Response to Labeling Clarification Request",MHPD_RQ_RESPONSE:"fr_Response to MHPD Requests",NOC_RESPONSE:"fr_Response to NOC/c-QN",NOD_RESPONSE:"fr_Response to NOD",NON_RESPONSE:"fr_Response to NON",PROCESSING_CLARIF_RESPONSE:"fr_Response to Processing Clarification Request",QUAL_CLIN_CLARIF_RESPONSE:"fr_Response to Quality and Clinical Clarification Request",QUAL_CLARIF_RESPONSE:"fr_Response to Quality Clarification Request",SCREENING_ACCEPT_RESPONSE:"fr_Response to Screening Acceptance Letter",SCREENING_CLARIF_RESPONSE:"fr_Response to Screening Clarification Request",SDN_RESPONSE:"fr_Response to SDN",RECON_DECIS_LTR_INTENT:"fr_Reconsideration of Decision - Letter of Intent",RECON_DECIS_RQ_RECON:"fr_Reconsideration of Decision - Request for Reconsideration",RECON_DECIS_OTHER_INFO:"fr_Reconsideration of Decision - Other Information",LABEL_PREAPPROVAL_2LANG:"fr_Second Language Label - Pre-Approval",PHONE_RQ_RESPONSE:"fr_Response to Telephone Request",RISK_COMMUN_DOC:"fr_Risk communication document",RMP_VERSION_DATE:"fr_RMP version number",SIGNAL_WORK_UP:"fr_Signal Work Up",UNSOLICITED_DATA:"fr_Unsolicited Data",YEAR_LIST_OF_CHANGE:"fr_Year, list of change number (for example: 2012, 15, 19a,….)",BE_CLARIF_RESPONSE:"fr_Response to BE Clarification Request",LIFECYCLE_TITLE:"fr_Transaction Details",REG_CONTACT_THIS:"fr_Regulatory Activity Contact for THIS transaction",REG_ACT_CONTACT:"fr_Regulatory Activity Contact",TRANSACTION_HDING:"fr_Regulatory Information",LOAD_TRANSACTION:"fr_Load a Regulatory Transaction File",GENERATE_FINAL:"fr_Generate Final XML",CONFIRM_CONTACT_VALID:"fr_I confirm that the above regulatory activity contact information is valid.",YEAR_CHANGE:"fr_Year of the change, List Description",COMPANY_INFO:"A. Company Information",ADDRESS_INFO:"B. Address Information",COMPANY_REP_THIS:"C. Company Representative",REG_ACTIVITY_INSTRUCT:"fr_Regulatory Activity Contact Instructions",SAVE_INSTRUCT:"fr_Transaction File Save Instructions",CLARIF_RESPONSE:"fr_Response to Clarification Request",NONCLIN_CLARIF_RESPONSE:"fr_Response to Non-clinical Clarification Request ",CORR_PATENT_MED:"fr_Correspondence - Patented Medicines",ALLEGATION_NOTICE:"fr_Notice of allegation",FORM_IV:"fr_Form IV",FORM_V:"fr_Form V",CONSENT_LTR:"fr_Consent Letter",DATA_PROTECT_CORRESP:"fr_Correspondence - Data Protection",CHOOSE_REQUEST:"fr_Choose a requester",TRANSACT_INSTRUCT:"fr_Regulatory Transaction Instructions",LIST_DESCRIPT:"fr_List Description",SEQUENCE_CLEANUP:"fr_eCTD Dossier Clean-up",FEE_REMISSION:"fr_Fee Remission is requested with this transaction",STATEMENT_REVENUE:"fr_A statement signed by the individual responsible for the applicant's financial affairs is included to certify that the fee payable is greater than 10% of the anticipated gross revenue",DEFER_INSTRUCT:"fr_Deferral of payment Instructions",REMISSION_INSTRUCT:"fr_Fee remission Instructions",CLASS_INSTRUCT:"fr_Submission Class Instructions",PRODUCT_INSTRUCT:"fr_Product Name Instructions",LIFECYCLE_INSTRUCT:"fr_Lifecycle Management Table Instructions",SEQUENCE_INSTRUCT:"fr_Sequence Number Instructions",CONTROL_INSTRUCT:"fr_Control Number Instructions",COMPANY_INSTRUCT:"fr_Company Name Instructions",COMPANY_ID_INSTRUCT:"fr_Company ID Instructions",
DOSSIER_ID_INSTRUCT:"fr_Dossier ID Instructions",ADMIN_COMP_INSTRUCT:"fr_Administrative Submission or Component Instructions",PLEASE_REMIT:"fr_Please pay the remission processing fee of $590 using the Advance Payment Details for Drug Submissions and Master Files.",APPLY_DEFER:"fr_You are applying for a deferral. Please send no payment with this form.",BANK_DRAFT:"fr_International Bank Draft",MONEY_ORDER:"fr_Money Order",CHEQUE:"fr_Cheque",CREDIT:"fr_Mastercard / Visa / Amex / Visa Debit / JCB International",BANK_WIRE:"fr_Wire (include bank confirmation)",EXISTING_CREDIT:"fr_Existing credit",PREFEERED_OPTION:"fr_Bill Payment Service Option (preferred method)",SUPPORTING_DOC:"fr_Please include the required signed statement AND at least one of the support documentation to establish that the applicable fee payable is greater than 10% of the anticipated gross revenue from sales of the drug product in Canada during the fee verification period.",REG_TRANSACT:"fr_Regulatory Transaction",LIFE_REC:"fr_Transaction details record",ONELIFEREC:"fr_At least one transaction details record is required.",SAVELIFEREC:"fr_At least one transaction details record is required to save.","LIFECYCLECTRL.LIFECYCLEDETAILSFORM":"fr_with a Transaction Details Record",IS_FEE_TRANSACTION:"fr_Are new or revised fees associated with this transaction?",IS_NEW_ACTIVITY:"fr_Is this transaction for a new or existing regulatory activity?",IS_SIGNED_3RD_PARTY:"fr_Will the submission be signed / filed by a third party on behalf of the manufacturer / sponsor?",AUT_LETTER_NOTE:"fr_A letter of authorization signed by the manufacturer/sponsor company must be provided in section 1.2.6 of the regulatory transaction.",IS_PRIORITY:"fr_Was this regulatory activity approved for priority review?",IS_NOC:"fr_Was this regulatory activity approved for NOC/C review?",IS_ADMIN_SUBMISSION:"fr_Is this regulatory activity an Administrative Submission or does this regulatory activity contain an administrative component?",ADMIN_DESCRIPT:"fr_Administrative Submission or administrative component description",ADMIN_SUB_TYPE:"fr_Reason for Administrative Submission or administrative component",ACTIVITY_LEAD:"fr_Regulatory Activity Lead",OTHER_DOC_DETAILS:"fr_Other Documentation Details",SPONSOR_INVOICE:"fr_Review fees must not be included with the submission, supplement or application. Sponsors will be invoiced for fees of more than $10,000.","B14-20160301-09":"fr_Pharmaceutical","B14-20160301-02":"fr_Biological","B14-20160301-10":"fr_Post-Market Vigilance","B14-20160301-06":"fr_Consumer Health Product",COMMENTS_REGULARTORY_DECISION:"fr_Comments on Regulatory Decision Summary",RESET:"fr_RESET",RESET_INFO:"fr_To enable the 'generate final XML' button, select the 'RESET' button to clear transaction specific fields."}),$translateProvider.translations("en",{FOR_THE:"For the ",THERE_ARE_ERRORS:"There are errors",ERRORS_FOUND:"errors were found.",ERROR_FOUND:"error was found.",TYPE_REQUIRED:"This field is required.",TYPE_EMAIL:"Please enter a valid email address.",TYPE_DUPLICATEROLE:"This role has already been selected.",TYPE_MINLENGTH:"Less than minimum length",POSTAL_FORMAT:"Please enter a valid format",TYPE_MIN:"Must be greater than the minimum",TYPE_DATE:"Please enter a valid date",TYPE_NUMBER:"Please enter a valid number",TYPE_PATTERN:"The format is not valid"}),$translateProvider.translations("fr",{FOR_THE:"Pour le ",THERE_ARE_ERRORS:"Il y a des erreurs",ERRORS_FOUND:"erreurs ont été trouvées.",ERROR_FOUND:"erreur a été trouvée.",TYPE_REQUIRED:"Ce champ est obligatoire.",TYPE_EMAIL:"Veuillez fournir une adresse électronique valide.",TYPE_DUPLICATEROLE:"Ce rôle a déjà été sélectionné.",TYPE_MINLENGTH:"Moins de longueur minimale.",POSTAL_FORMAT:"Entrez un format valide.",TYPE_MIN:"Doit être supérieur au minimum.",TYPE_DATE:"Veuillez fournir une une date valide.",TYPE_NUMBER:"Veuillez fournir un numéro valide.",TYPE_PATTERN:"fr_The format is not valid"})}]),function(){"use strict";angular.module("numberFormat",[])}(),function(){"use strict";function digitsCtrl(){function link(scope,element,attrs,modelCtrl){modelCtrl.$parsers.push(function(inputValue){if(void 0==inputValue)return"";var isNumber=!1,max=-1,ignore=!1,tempVal=""+inputValue;attrs.type&&"number"===attrs.type&&(isNumber=!0),attrs.onlyMax&&(max=parseInt(attrs.onlyMax));var regexIntNeg=/[^0-9-]/g,integerReg=/[^0-9]/g,regexValue=integerReg;if("intNeg"==attrs.onlyDigits?regexValue=regexIntNeg:"false"===attrs.onlyDigits?ignore=!0:regexValue=integerReg,ignore)return inputValue;var transformedInput=tempVal.replace(regexValue,"");return max>0&&(transformedInput=transformedInput.substring(0,max)),transformedInput!==tempVal&&(isNumber&&transformedInput&&(transformedInput=parseFloat(transformedInput)),modelCtrl.$setViewValue(transformedInput),modelCtrl.$render()),transformedInput})}var directive={link:link,restrict:"A",require:"?ngModel"};return directive}angular.module("numberFormat").directive("onlyDigits",digitsCtrl)}(),function(){angular.module("activityFormFilterModule",["hpfbConstants"])}(),function(){function getService(){function _getPharmaRAList(raList){for(var newList=[],i=0;i<raList.length;i++)switch(raList[i].id){case"B02-20160301-001":newList.push(raList[i]);break;case"B02-20160301-031":newList.push(raList[i]);break;case"B02-20160301-032":newList.push(raList[i]);break;case"B02-20160301-038":newList.push(raList[i]);break;case"B02-20160301-046":newList.push(raList[i]);break;case"B02-20160301-047":newList.push(raList[i]);break;case"B02-20160301-049":newList.push(raList[i]);break;case"B02-20160301-050":newList.push(raList[i]);break;case"B02-20160301-051":newList.push(raList[i]);break;case"B02-20160301-067":newList.push(raList[i]);break;case"B02-20160301-068":newList.push(raList[i]);break;case"B02-20160301-075":newList.push(raList[i]);break;case"B02-20160301-077":newList.push(raList[i]);break;case"B02-20160301-078":newList.push(raList[i]);break;case"B02-20160301-082":newList.push(raList[i]);break;case"B02-20160301-084":newList.push(raList[i]);break;case"B02-20160301-085":newList.push(raList[i]);break;case"B02-20160301-088":newList.push(raList[i]);break;case"B02-20160301-028":newList.push(raList[i]);break;case"B02-20160301-018":newList.push(raList[i]);break;case"B02-20160301-020":newList.push(raList[i]);break;case"B02-20160301-021":newList.push(raList[i]);break;case"B02-20160301-043":newList.push(raList[i]);break;case"B02-20160301-070":newList.push(raList[i])}return newList}function _getBiolRAList(raList){for(var newList=[],i=0;i<raList.length;i++)switch(raList[i].id){case"B02-20160301-031":newList.push(raList[i]);break;case"B02-20160301-032":newList.push(raList[i]);break;case"B02-20160301-038":newList.push(raList[i]);break;case"B02-20160301-046":newList.push(raList[i]);break;case"B02-20160301-047":newList.push(raList[i]);break;case"B02-20160301-049":newList.push(raList[i]);break;case"B02-20160301-050":newList.push(raList[i]);break;case"B02-20160301-051":newList.push(raList[i]);break;case"B02-20160301-067":newList.push(raList[i]);break;case"B02-20160301-068":newList.push(raList[i]);break;case"B02-20160301-075":newList.push(raList[i]);break;case"B02-20160301-077":newList.push(raList[i]);break;case"B02-20160301-078":newList.push(raList[i]);break;case"B02-20160301-084":newList.push(raList[i]);break;case"B02-20160301-085":newList.push(raList[i]);break;case"B02-20160301-088":newList.push(raList[i]);break;case"B02-20160301-089":newList.push(raList[i]);break;case"B02-20160301-028":newList.push(raList[i]);break;case"B02-20160301-019":newList.push(raList[i]);break;case"B02-20160301-043":newList.push(raList[i]);break;case"B02-20160301-071":newList.push(raList[i])}return newList}function _getPostMarketRAList(raList){for(var newList=[],i=0;i<raList.length;i++)switch(raList[i].id){case"B02-20160301-069":newList.push(raList[i]);break;case"B02-20160301-079":newList.push(raList[i]);break;case"B02-20160301-080":newList.push(raList[i]);break;case"B02-20160301-087":newList.push(raList[i])}return newList}function _getConsumHealthList(raList){for(var newList=[],i=0;i<raList.length;i++)switch(raList[i].id){case"B02-20160301-001":newList.push(raList[i]);break;case"B02-20160301-031":newList.push(raList[i]);break;case"B02-20160301-032":newList.push(raList[i]);break;case"B02-20160301-038":newList.push(raList[i]);break;case"B02-20160301-046":newList.push(raList[i]);break;case"B02-20160301-047":newList.push(raList[i]);break;case"B02-20160301-049":newList.push(raList[i]);break;case"B02-20160301-050":newList.push(raList[i]);break;case"B02-20160301-051":newList.push(raList[i]);break;case"B02-20160301-067":newList.push(raList[i]);break;case"B02-20160301-068":newList.push(raList[i]);break;case"B02-20160301-075":newList.push(raList[i]);break;case"B02-20160301-077":newList.push(raList[i]);break;case"B02-20160301-078":newList.push(raList[i]);break;case"B02-20160301-082":newList.push(raList[i]);break;case"B02-20160301-084":newList.push(raList[i]);break;case"B02-20160301-085":newList.push(raList[i]);break;case"B02-20160301-088":newList.push(raList[i]);break;case"B02-20160301-028":newList.push(raList[i]);break;case"B02-20160301-018":newList.push(raList[i]);break;case"B02-20160301-020":newList.push(raList[i]);break;case"B02-20160301-021":newList.push(raList[i]);break;case"B02-20160301-043":newList.push(raList[i]);break;case"B02-20160301-070":newList.push(raList[i])}return newList}var service={getPharmaRAList:_getPharmaRAList,getBiolRAList:_getBiolRAList,getConsumHealthList:_getConsumHealthList,getPostMarketRAList:_getPostMarketRAList};return service}angular.module("activityFormFilterModule").factory("ActivityFormFilterService",getService),getService.inject=[]}(),function(){"use strict";angular.module("hpfbConstants",[]),angular.module("hpfbConstants").constant("SOFTWARE_VERSION","1.3.0").constant("CANADA","CAN").constant("OTHER","OTHER").constant("YES","Y").constant("NO","N").constant("USA","USA").constant("UNKNOWN","UNKNOWN").constant("NEW","New").constant("EXISTING","Existing").constant("ENGLISH","en").constant("FRENCH","fr").constant("NEW_TYPE","NEW").constant("APPROVED_TYPE","FINAL").constant("DEPRECATED_APPROVED_TYPE","APPROVED").constant("AMEND_TYPE","AMEND").constant("INTERNAL_TYPE","INT").constant("EXTERNAL_TYPE","EXT").constant("PHARMA_TYPE","PHARMA").constant("RELATIVE_FOLDER_DATA","../data/").constant("CSP_XSL","CSP_Enrolment.xsl").constant("HCSC","hcsc").constant("XML","xml").constant("ADVANCE_FEE_PAYMENT_EN","https://www.canada.ca/content/dam/hc-sc/migration/hc-sc/dhp-mps/alt_formats/pdf/prodpharma/applic-demande/form/adv-pa-av2-eng.pdf").constant("ADVANCE_FEE_PAYMENT_FR","https://www.canada.ca/content/dam/hc-sc/migration/hc-sc/dhp-mps/alt_formats/pdf/prodpharma/applic-demande/form/adv-pa-av2-fra.pdf")}(),function(){"use strict";angular.module("filterLists",["hpfbConstants"])}(),function(){"use strict";function orderByTranslatedCountry($translate,$filter,CANADA,USA){return function(array,objKey){var result=[],translated=[];return angular.forEach(array,function(value){translated.push({key:value,label:$translate.instant(value)})}),result.push(CANADA),result.push(USA),angular.forEach($filter("orderBy")(translated,"label"),function(sortedObject){sortedObject.key!==CANADA&&sortedObject.key!==USA&&result.push(sortedObject.key)}),result}}function orderByTranslatedCountryAndLabel($translate,$filter,CANADA,USA){return function(array){var result=[],translated=[];return angular.forEach(array,function(value){translated.push({key:value,label:$translate.instant(value)})}),result.push({key:CANADA,label:$translate.instant(CANADA)}),result.push({key:USA,label:$translate.instant(USA)}),angular.forEach($filter("orderBy")(translated,"label"),function(sortedObject){sortedObject.key!==CANADA&&sortedObject.key!==USA&&result.push(sortedObject)}),result}}function findCountryObj(){return function(array,targetKey){for(var i=0;i<array.length;i++)if(array[i].key===targetKey)return array[i];return null}}function orderByTranslated($translate,$filter){return function(array){var result=[],translated=[];return angular.forEach(array,function(value){translated.push({key:value,label:$translate.instant(value)})}),angular.forEach($filter("orderBy")(translated,"label"),function(sortedObject){result.push(sortedObject.key)}),result}}function sequenceOrderBy($filter){return function(array){var result=[];return angular.forEach($filter("orderBy")(array,"sequence",!0),function(sortedObject){result.push(sortedObject)}),result}}function orderByTranslatedOtherFirst($translate,$filter,OTHER){return function(array){var result=[],translated=[];return angular.forEach(array,function(value){translated.push({key:value,label:$translate.instant(value)})}),result.push(OTHER),angular.forEach($filter("orderBy")(translated,"label"),function(sortedObject){sortedObject.key!==OTHER&&result.push(sortedObject.key)}),result}}function _orderByLocale(){return function(items,lang){return items.sort(function(a,b){return a[lang].localeCompare(b[lang],lang)}),items}}function _findById($filter){return function(array,searchJson){var initialResult=$filter("filter")(array,searchJson);if(!initialResult)return null;if(1===initialResult.length)return initialResult[0];for(var i=0;i<initialResult.length;i++)if(initialResult[i].id===searchJson.id)return initialResult[i];return null}}angular.module("filterLists").filter("orderByTranslatedCountry",orderByTranslatedCountry).filter("orderByTranslated",orderByTranslated).filter("orderByTranslatedOtherFirst",orderByTranslatedOtherFirst).filter("orderByCountryAndLabel",orderByTranslatedCountryAndLabel).filter("orderByLocale",_orderByLocale).filter("findCountryObject",findCountryObj).filter("findListItemById",_findById).filter("sequenceOrderDescending",sequenceOrderBy),orderByTranslatedCountry.$inject=["$translate","$filter","CANADA","USA"],orderByTranslated.$inject=["$translate","$filter"],orderByTranslatedOtherFirst.$inject=["$translate","$filter","OTHER"],_findById.$inject=["$filter"]}(),function(){"use strict";angular.module("dataLists",["hpfbConstants"])}(),function(){"use strict";function getService(UNKNOWN){function _createCountryArray(translateJson){vm.countryList=translateJson}function _getUnknownCountryRec(){return{id:UNKNOWN,en:"Unknown",fr:"Inconnu"}}function getCountryValuesArray(){return vm.countryList}function getProvinceValuesArray(){return["AB","BC","MB","NB","NL","NT","NS","NU","ON","PE","QC","SK","YT"]}function getUSStatesValueArray(){return["AL","AK","AZ","AR","CA","CO","CT","DE","DC","FL","GA","HI","ID","IL","IN","IA","KS","KY","LA","ME","MD","MA","MI","MN","MS","MO","MT","NE","NV","NH","NJ","NM","NY","NC","ND","OH","OK","OR","PA","RI","SC","SD","TN","TX","UT","VT","VA","WA","WV","WI","WY"]}var vm=this;vm.countryList=[];var service={getCountries:getCountryValuesArray,getProvinces:getProvinceValuesArray,getUSStates:getUSStatesValueArray,createCountryList:_createCountryArray,getUnknownCountryRecord:_getUnknownCountryRec};return service}angular.module("dataLists").factory("getCountryAndProvinces",getService),getService.inject=["UNKNOWN"]}(),function(){"use strict";function getSalService($filter,$q,$http,$translate,OTHER,FRENCH,RELATIVE_FOLDER_DATA){function getSalValuesArray(){return["SALUT_DR","SALUT_MR","SALUT_MRS","SALUT_MS"]}function getLanguagesValuesArray(){return["en","fr"]}function _createInternalContacts(){var deferred=$q.defer(),contactsUrl=RELATIVE_FOLDER_DATA+"internalContacts.json";return vm.internalContacts&&0!==vm.internalContacts.length?deferred.resolve(vm.internalContacts):$http.get(contactsUrl).success(function(data,status,headers,config){var newList=_createSortedArray(data,"en"),lang=$translate.proposedLanguage()||$translate.use(),otherRec={id:OTHER,en:"Other"};lang===FRENCH&&(otherRec.en="Autre"),newList.unshift(otherRec),vm.internalContacts=newList,deferred.resolve(newList)}).error(function(data,status,headers,config){deferred.reject(status)}),deferred.promise}function _getInternalContacts(){return _createInternalContacts()}function _getInternalContactsWithoutOther(){var deferred=$q.defer(),contactsUrl=RELATIVE_FOLDER_DATA+"internalContacts.json";return vm.internalContacts&&0!==vm.internalContacts.length?deferred.resolve(vm.internalContacts):$http.get(contactsUrl).success(function(data,status,headers,config){var newList=_createSortedArray(data,"en");vm.internalContacts=newList,deferred.resolve(newList)}).error(function(data,status,headers,config){deferred.reject(status)}),deferred.promise}function _createSortedArray(jsonList,lang){var result=[];return angular.forEach($filter("orderByLocale")(jsonList,lang),function(sortedObject){result.push(sortedObject)}),result}function _getAdminSubType(){return vm.adminSubTypeArray&&0!==vm.adminSubTypeArray.length?vm.adminSubTypeArray:_loadAdminType()}function _loadAdminType(){var deferred=$q.defer(),url=RELATIVE_FOLDER_DATA+"adminSubType.json";return $http.get(url).success(function(data,status,headers,config){var lang=$translate.proposedLanguage()||$translate.use(),newList=_createSortedArray(data,lang);vm.adminSubTypeArray=newList,deferred.resolve(newList)}).error(function(data,status,headers,config){deferred.reject(status)}),deferred.promise}var vm=this;vm.internalContacts=[],vm.adminSubTypeArray=[];var service={getSalutationList:getSalValuesArray,getLanguages:getLanguagesValuesArray,createInternalContacts:_createInternalContacts,getInternalContacts:_getInternalContacts,getInternalContactsWithoutOther:_getInternalContactsWithoutOther,getAdminSubType:_getAdminSubType};return service}angular.module("dataLists").factory("getContactLists",getSalService),getSalService.$inject=["$filter","$q","$http","$translate","OTHER","FRENCH","RELATIVE_FOLDER_DATA"]}(),function(){"use strict";function getRolesService(){function getRoleValuesArray(){return["","ROLE_PRIMARY","ROLE_SECONDARY"]}function _getFormTypes(){return[_biologic,_pharma]}function _getBiologic(){return _biologic}function _getPharmaceutical(){return _pharma}var _biologic="BIOLOGIC",_pharma="PHARMACEUTICAL",service={getContactRoles:getRoleValuesArray,getFormTypes:_getFormTypes,getBiologicType:_getBiologic,getPharmaType:_getPharmaceutical};return service}angular.module("dataLists").factory("getRoleLists",getRolesService)}(),function(){"use strict";angular.module("services",[])}(),function(){"use strict";function getTransactionSeq($http,$q){function yesNoArray(){return["Y","N"]}function _createRaArray(value){vm.raTypeArray=value}function _createFeeArray(value){vm.feeTypeArray=value}function getTransactionDescriptionsArray(){return vm.allActivities}function getActivityArray(){return vm.raTypeArray}function _getfeeTypeArray(){return vm.feeTypeArray}function getPresubArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE]}function getANDSArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.COMMENTS_NOC,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.INITIAL,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.PRISTINE_PM,vm.allActivities.PRISTINE_PM_2LANG,vm.allActivities.BE_CLARIF_RESPONSE,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.NOC_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.NON_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.CORR_PATENT_MED,vm.allActivities.ALLEGATION_NOTICE,vm.allActivities.FORM_IV,vm.allActivities.FORM_V,vm.allActivities.CONSENT_LTR,vm.allActivities.DATA_PROTECT_CORRESP]}function getDINAArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.INITIAL,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRISTINE_PM,vm.allActivities.PRISTINE_PM_2LANG,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.NON_RESPONSE,vm.allActivities.NOD_RESPONSE]}function getDINBArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.INITIAL,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRISTINE_PM,vm.allActivities.PRISTINE_PM_2LANG,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.NON_RESPONSE,vm.allActivities.NOD_RESPONSE]}function getEUNDSArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.BE_CLARIF_RESPONSE,vm.allActivities.CANCEL_LETTER,vm.allActivities.COMMENTS_NOC,vm.allActivities.COMMENTS_SUMMARY_BASIS,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.INITIAL,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.PRISTINE_PM,vm.allActivities.PRISTINE_PM_2LANG,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.NOC_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.NON_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.CORR_PATENT_MED,vm.allActivities.ALLEGATION_NOTICE,vm.allActivities.FORM_IV,vm.allActivities.FORM_V,vm.allActivities.CONSENT_LTR,vm.allActivities.DATA_PROTECT_CORRESP,vm.allActivities.NONCLIN_CLARIF_RESPONSE]}function getEUSNDSArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.BE_CLARIF_RESPONSE,vm.allActivities.CANCEL_LETTER,vm.allActivities.COMMENTS_NOC,vm.allActivities.COMMENTS_SUMMARY_BASIS,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.POST_NOC_CHANGE,vm.allActivities.PRISTINE_PM,vm.allActivities.PRISTINE_PM_2LANG,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.NOC_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.NON_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.CORR_PATENT_MED,vm.allActivities.ALLEGATION_NOTICE,vm.allActivities.FORM_IV,vm.allActivities.FORM_V,vm.allActivities.CONSENT_LTR,vm.allActivities.DATA_PROTECT_CORRESP,vm.allActivities.NONCLIN_CLARIF_RESPONSE]}function getLevel3Array(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.YEAR_LIST_OF_CHANGE,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE]}function getNCArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.COMMENTS_SUMMARY_BASIS,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.POST_NOC_CHANGE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.PRISTINE_PM,vm.allActivities.PRISTINE_PM_2LANG,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.NOL_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA]}function getNDSArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.COMMENTS_NOC,vm.allActivities.COMMENTS_SUMMARY_BASIS,vm.allActivities.COMMENTS_REGULARTORY_DECISION,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.INITIAL,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.PRISTINE_PM,vm.allActivities.PRISTINE_PM_2LANG,vm.allActivities.BE_CLARIF_RESPONSE,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.NOC_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.NON_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.CORR_PATENT_MED,vm.allActivities.ALLEGATION_NOTICE,vm.allActivities.FORM_IV,vm.allActivities.FORM_V,vm.allActivities.CONSENT_LTR,vm.allActivities.DATA_PROTECT_CORRESP,vm.allActivities.NONCLIN_CLARIF_RESPONSE]}function getPSURCArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.COMMENTS_SUMMARY_BASIS,vm.allActivities.FOR_PERIOD,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.MEETING_MINUTES,vm.allActivities.MHPD_RQ_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.PHONE_RQ_RESPONSE]}function getPSURPVArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.FOR_PERIOD,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.MEETING_MINUTES,vm.allActivities.MHPD_RQ_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.CLIN_CLARIF_RESPONSE]}function getRMPPVArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.MEETING_MINUTES,vm.allActivities.MHPD_RQ_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.RMP_VERSION_DATE,vm.allActivities.CLIN_CLARIF_RESPONSE]}function getSANDSArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.COMMENTS_NOC,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.POST_NOC_CHANGE,vm.allActivities.PRISTINE_PM,vm.allActivities.PRISTINE_PM_2LANG,vm.allActivities.BE_CLARIF_RESPONSE,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.NOC_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.NON_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.CORR_PATENT_MED,vm.allActivities.ALLEGATION_NOTICE,vm.allActivities.FORM_IV,vm.allActivities.FORM_V,vm.allActivities.CONSENT_LTR,vm.allActivities.DATA_PROTECT_CORRESP]}function getSNDSArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.COMMENTS_NOC,vm.allActivities.COMMENTS_SUMMARY_BASIS,vm.allActivities.COMMENTS_REGULARTORY_DECISION,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.MEETING_MINUTES,vm.allActivities.PANDEMIC_APPL,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.POST_NOC_CHANGE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.PRISTINE_PM,vm.allActivities.PRISTINE_PM_2LANG,vm.allActivities.BE_CLARIF_RESPONSE,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.NOC_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.NON_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.CORR_PATENT_MED,vm.allActivities.ALLEGATION_NOTICE,vm.allActivities.FORM_IV,vm.allActivities.FORM_V,vm.allActivities.CONSENT_LTR,vm.allActivities.DATA_PROTECT_CORRESP,vm.allActivities.NONCLIN_CLARIF_RESPONSE]}function getSNDSCArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.COMMENTS_NOC,vm.allActivities.COMMENTS_SUMMARY_BASIS,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_NOC_CHANGE,vm.allActivities.PRISTINE_PM,vm.allActivities.PRISTINE_PM_2LANG,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.NOC_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.NON_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.CORR_PATENT_MED,vm.allActivities.ALLEGATION_NOTICE,vm.allActivities.FORM_IV,vm.allActivities.FORM_V,vm.allActivities.CONSENT_LTR,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.DATA_PROTECT_CORRESP]}function getUDPVArray(){return[vm.allActivities.BENEFIT_RISK_ASSESS,vm.allActivities.CANCEL_LETTER,vm.allActivities.NOTIFICATION_CHANGE,vm.allActivities.POST_MARKET_SURV,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.MEETING_MINUTES,vm.allActivities.MHPD_RQ_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.RISK_COMMUN_DOC,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.SIGNAL_WORK_UP];
}function getUDRAArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.DIN_DISCONTINUED,vm.allActivities.ADVISEMENT_LETTER_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.MEETING_MINUTES,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.NOTIFICATION_INTERRUPT_SALE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.SEQUENCE_CLEANUP]}function getConsultArray(){return[vm.allActivities.PANDEMIC_APPL]}function _getMPNCArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ]}function _getMPNDSArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ]}function _getMPSNDSArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ]}function _getPANDArray(){return[vm.allActivities.BE_CLARIF_RESPONSE,vm.allActivities.CANCEL_LETTER,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.COMMENTS_NOC,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.INITIAL,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PANDEMIC_APPL,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.PRISTINE_PM_2LANG,vm.allActivities.PRISTINE_PM,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.NOC_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.NON_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.CORR_PATENT_MED,vm.allActivities.ALLEGATION_NOTICE,vm.allActivities.FORM_IV,vm.allActivities.FORM_V,vm.allActivities.CONSENT_LTR,vm.allActivities.DATA_PROTECT_CORRESP,vm.allActivities.NONCLIN_CLARIF_RESPONSE]}function _getPBRERCArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.COMMENTS_SUMMARY_BASIS,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.FOR_PERIOD,vm.allActivities.MEETING_MINUTES,vm.allActivities.MHPD_RQ_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.PHONE_RQ_RESPONSE]}function _getPBRERPVArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.FOR_PERIOD,vm.allActivities.MEETING_MINUTES,vm.allActivities.MHPD_RQ_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.CLIN_CLARIF_RESPONSE]}function _getPRNDSArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.MEETING_MINUTES,vm.allActivities.PRIORITY_REVIEW_RQ,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.RECON_DECIS_OTHER_INFO]}function _getPRSNDSArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.MEETING_MINUTES,vm.allActivities.PRIORITY_REVIEW_RQ,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.RECON_DECIS_OTHER_INFO]}function getYBPRArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.FOR_PERIOD,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.MEETING_MINUTES,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE]}function getDSurArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.FOR_PERIOD,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.MEETING_MINUTES,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.PHONE_RQ_RESPONSE]}function getDINAArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.CHANGE_TO_DIN,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.INITIAL,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.PRISTINE_PM,vm.allActivities.PRISTINE_PM_2LANG,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.BE_CLARIF_RESPONSE,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.NON_RESPONSE,vm.allActivities.NOD_RESPONSE]}function getDINBArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.CHANGE_TO_DIN,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.INITIAL,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.PRISTINE_PM,vm.allActivities.PRISTINE_PM_2LANG,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.YEAR_LIST_OF_CHANGE,vm.allActivities.NON_RESPONSE,vm.allActivities.NOD_RESPONSE]}function getDINDArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.CHANGE_TO_DIN,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.INITIAL,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.NON_RESPONSE,vm.allActivities.NOD_RESPONSE]}function getDINFArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.CHANGE_TO_DIN,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.INITIAL,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.LABEL_PREAPPROVAL_2LANG]}function getMPDINArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE]}function getPDCArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_AUTH_DIV1_CHANGE,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.PRISTINE_PM,vm.allActivities.PRISTINE_PM_2LANG,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.NOL_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO]}function getPDCBArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_AUTH_DIV1_CHANGE,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.PRISTINE_PM,vm.allActivities.PRISTINE_PM_2LANG,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.NOL_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO]}function _getActivityLeadArray(){return[vm.PHARMA,vm.BIOLOGICAL,vm.POSTMARKET,vm.CONSUMERHEALTH]}function _getBiologicalLead(){return vm.BIOLOGICAL}function _getPharmaLead(){return vm.PHARMA}function _getPostMarketLead(){return vm.POSTMARKET}function _getConsumHealthLead(){return vm.CONSUMERHEALTH}var vm=this;vm.raTypeArray=[],vm.feeTypeArray=[],vm.BIOLOGICAL="B14-20160301-02",vm.CONSUMERHEALTH="B14-20160301-06",vm.PHARMA="B14-20160301-09",vm.POSTMARKET="B14-20160301-10",vm.allActivities={ADMINISTRATIVE:"ADMINISTRATIVE",BENEFIT_RISK_ASSESS:"BENEFIT_RISK_ASSESS",CANCEL_LETTER:"CANCEL_LETTER",CHANGE_TO_DIN:"CHANGE_TO_DIN",COMMENTS_NOC:"COMMENTS_NOC",COMMENTS_SUMMARY_BASIS:"COMMENTS_SUMMARY_BASIS",COMMENTS_REGULARTORY_DECISION:"COMMENTS_REGULARTORY_DECISION",DIN_DISCONTINUED:"DIN_DISCONTINUED",DRUG_NOTIF_FORM:"DRUG_NOTIF_FORM",FOR_PERIOD:"FOR_PERIOD",INITIAL:"INITIAL",MEETING_MINUTES:"MEETING_MINUTES",NOTIFICATION_CHANGE:"NOTIFICATION_CHANGE",NOTIFICATION_INTERRUPT_SALE:"NOTIFICATION_INTERRUPT_SALE",PANDEMIC_APPL:"PANDEMIC_APPL",POST_CLEARANCE_DATA:"POST_CLEARANCE_DATA",POST_MARKET_SURV:"POST_MARKET_SURV",POST_NOC_CHANGE:"POST_NOC_CHANGE",POST_AUTH_DIV1_CHANGE:"POST_AUTH_DIV1_CHANGE",PRESUB_MEETING_PKG:"PRESUB_MEETING_PKG",PRESUB_MEETING_RQ:"PRESUB_MEETING_RQ",PRIORITY_REVIEW_RQ:"PRIORITY_REVIEW_RQ",PRISTINE_PM:"PRISTINE_PM",PRISTINE_PM_2LANG:"PRISTINE_PM_2LANG",ADVISEMENT_LETTER_RESPONSE:"ADVISEMENT_LETTER_RESPONSE",CLIN_CLARIF_RESPONSE:"CLIN_CLARIF_RESPONSE",EMAIL_RQ_RESPONSE:"EMAIL_RQ_RESPONSE",LABEL_CLARIF_RESPONSE:"LABEL_CLARIF_RESPONSE",MHPD_RQ_RESPONSE:"MHPD_RQ_RESPONSE",NOC_RESPONSE:"NOC_RESPONSE",NOD_RESPONSE:"NOD_RESPONSE",NOL_RESPONSE:"NOL_RESPONSE",NON_RESPONSE:"NON_RESPONSE",PROCESSING_CLARIF_RESPONSE:"PROCESSING_CLARIF_RESPONSE",QUAL_CLIN_CLARIF_RESPONSE:"QUAL_CLIN_CLARIF_RESPONSE",QUAL_CLARIF_RESPONSE:"QUAL_CLARIF_RESPONSE",RECON_DECIS_LTR_INTENT:"RECON_DECIS_LTR_INTENT",RECON_DECIS_RQ_RECON:"RECON_DECIS_RQ_RECON",RECON_DECIS_OTHER_INFO:"RECON_DECIS_OTHER_INFO",SCREENING_ACCEPT_RESPONSE:"SCREENING_ACCEPT_RESPONSE",SCREENING_CLARIF_RESPONSE:"SCREENING_CLARIF_RESPONSE",SDN_RESPONSE:"SDN_RESPONSE",LABEL_PREAPPROVAL_2LANG:"LABEL_PREAPPROVAL_2LANG",PHONE_RQ_RESPONSE:"PHONE_RQ_RESPONSE",RISK_COMMUN_DOC:"RISK_COMMUN_DOC",RMP_VERSION_DATE:"RMP_VERSION_DATE",SIGNAL_WORK_UP:"SIGNAL_WORK_UP",UNSOLICITED_DATA:"UNSOLICITED_DATA",YEAR_LIST_OF_CHANGE:"YEAR_LIST_OF_CHANGE",BE_CLARIF_RESPONSE:"BE_CLARIF_RESPONSE",CORR_PATENT_MED:"CORR_PATENT_MED",ALLEGATION_NOTICE:"ALLEGATION_NOTICE",FORM_IV:"FORM_IV",FORM_V:"FORM_V",CONSENT_LTR:"CONSENT_LTR",DATA_PROTECT_CORRESP:"DATA_PROTECT_CORRESP",NONCLIN_CLARIF_RESPONSE:"NONCLIN_CLARIF_RESPONSE",SEQUENCE_CLEANUP:"SEQUENCE_CLEANUP"};var service={getTransactionDescriptions:getTransactionDescriptionsArray,getActivityTypes:getActivityArray,createRaTypes:_createRaArray,getBiologicalLeadValue:_getBiologicalLead,getPharmaLeadValue:_getPharmaLead,getPostMarketLeadValue:_getPostMarketLead,getConsumHealthLeadValue:_getConsumHealthLead,getPresubTypes:getPresubArray,getAndsType:getANDSArray,getDinaType:getDINAArray,getDinbType:getDINBArray,getDindType:getDINDArray,getDinfType:getDINFArray,getDSurType:getDSurArray,getEundsType:getEUNDSArray,getEusndsType:getEUSNDSArray,getLevel3Type:getLevel3Array,getMPDINType:getMPDINArray,getNcType:getNCArray,getNdsType:getNDSArray,getPdcType:getPDCArray,getPdcBType:getPDCBArray,getPresubType:getPresubArray,getpSurCType:getPSURCArray,getpSurPvType:getPSURPVArray,getRmpPvType:getRMPPVArray,getSandsType:getSANDSArray,getSndsType:getSNDSArray,getSndsCArray:getSNDSCArray,getUdpvType:getUDPVArray,getUdraType:getUDRAArray,getYbprType:getYBPRArray,getConsultType:getConsultArray,getMPNCType:_getMPNCArray,getMPNDSType:_getMPNDSArray,getMPSNDSType:_getMPSNDSArray,getPANDType:_getPANDArray,getPBRERCType:_getPBRERCArray,getPBRERPVType:_getPBRERPVArray,getPRNDSType:_getPRNDSArray,getPRSNDSType:_getPRSNDSArray,getYesNoList:yesNoArray,getFeeList:_getfeeTypeArray,createFeeTypes:_createFeeArray,getActivityLeadList:_getActivityLeadArray};return service}angular.module("services").factory("TransactionLists",getTransactionSeq),getTransactionSeq.inject=["$http","$q"]}(),function(){"use strict";angular.module("transactionLoadService",["dataLists","hpfbConstants","services"])}(),function(){"use strict";angular.module("transactionLoadService").factory("customLoad",["$http","$q","$filter","getCountryAndProvinces","CANADA","USA","OTHER","RELATIVE_FOLDER_DATA","getContactLists","TransactionLists",function($http,$q,$filter,getCountryAndProvinces,CANADA,USA,OTHER,RELATIVE_FOLDER_DATA,getContactLists,TransactionLists){function _createTranslateList(jsonList,lang){lang||(lang="en");for(var resultList={},i=0;i<jsonList.length;i++)resultList[jsonList[i].id]=jsonList[i][lang];return resultList}function _createSortedArrayNAFirst(jsonList,lang){var result=[],canadaRecord=null,usaRecord=null;return angular.forEach($filter("orderByLocale")(jsonList,lang),function(sortedObject){sortedObject.id===USA?usaRecord=sortedObject:sortedObject.id===CANADA?canadaRecord=sortedObject:result.push(sortedObject)}),usaRecord&&result.unshift(usaRecord),canadaRecord&&result.unshift(canadaRecord),result}function _createSortedArray(jsonList,lang){var result=[];return angular.forEach($filter("orderByLocale")(jsonList,lang),function(sortedObject){result.push(sortedObject)}),result}return function(options){var deferred=$q.defer(),countryUrl=RELATIVE_FOLDER_DATA+"countries.json",raTypeUrl=RELATIVE_FOLDER_DATA+"raType.json",feeUrl=RELATIVE_FOLDER_DATA+"feeClass.json",resultTranslateList={};return $http.get(countryUrl).then(function(response){var newList=_createSortedArrayNAFirst(response.data,options.key),translateList=_createTranslateList(newList,options.key);return getCountryAndProvinces.createCountryList(newList),angular.extend(resultTranslateList,translateList),$http.get(raTypeUrl)}).then(function(response){var newList=_createSortedArray(response.data,options.key),translateList=_createTranslateList(newList,options.key);return TransactionLists.createRaTypes(newList),angular.extend(resultTranslateList,translateList),$http.get(feeUrl)}).then(function(response){var newList=_createSortedArray(response.data,options.key);return TransactionLists.createFeeTypes(newList),response.data})["catch"](function(error){console.warn("An error occurred with transaction List Load: "+error.status),deferred.reject(resultTranslateList)})["finally"](function(){deferred.resolve(resultTranslateList)}),deferred.promise}}])}(),function(){"use strict";angular.module("transactionService",["dataLists","services","hpfbConstants"])}(),function(){"use strict";function TransactionService($filter,getCountryAndProvinces,getContactLists,TransactionLists,YES,NO,HCSC){function TransactionService(){var defaultTransactionData=_getEmptyTransactionModel();angular.extend(this._default,defaultTransactionData),this.rootTag="TRANSACTION_ENROL",this.currSequence=0,this.xslFileName="REP_RT_2_0_1.xsl"}function loadContactData(){getContactLists.getInternalContacts().then(function(data){return this.baseRequesters=data,!0})}function loadUserListData(){getContactLists.getInternalContactsWithoutOther().then(function(data){return this.userList=data,!0})}return this.baseRequesters=[],this.userList=[],this.isFinal=!1,this.$onInit=function(){loadContactData(),loadUserListData()},TransactionService.prototype={_default:{},isFinal:!1,getRootTag:function(){return"TRANSACTION_ENROL"},getXSLFileName:function(){return this.xslFileName},transformFromFileObj:function(jsonObj){var transactionInfo=this.getTransactionInfo(jsonObj[this.rootTag]);this._default={},this._default=transactionInfo},transformToFileObj:function(jsonObj){var today=_getToday(),resultJson={TRANSACTION_ENROL:{template_type:"PHARMA",date_saved:today,software_version:"2.0.0",data_checksum:jsonObj.dataChecksum,transaction_type:jsonObj.transactionType,is_third_party:jsonObj.isThirdParty,is_priority:jsonObj.isPriority,is_noc:jsonObj.isNoc,is_admin_sub:jsonObj.isAdminSub,sub_type:jsonObj.subType}},ectd=this._transformEctdToFile(jsonObj.ectd);return resultJson.TRANSACTION_ENROL.ectd=ectd,resultJson.TRANSACTION_ENROL.is_solicited=jsonObj.isSolicited,resultJson.TRANSACTION_ENROL.solicited_requester_record=this._transformReqToFile(jsonObj.solicitedRequesterReord),resultJson.TRANSACTION_ENROL.regulatory_project_manager1=jsonObj.projectManager1,resultJson.TRANSACTION_ENROL.regulatory_project_manager2=jsonObj.projectManager2,resultJson.TRANSACTION_ENROL.is_fees=jsonObj.isFees,jsonObj.isFees===YES&&(resultJson.TRANSACTION_ENROL.fee_details=this._mapFeeDetailsToOutput(jsonObj.feeDetails,YES,NO,$filter)),resultJson.TRANSACTION_ENROL.is_activity_changes=jsonObj.isActivityChanges,resultJson.TRANSACTION_ENROL.company_name=jsonObj.companyName,resultJson.TRANSACTION_ENROL.regulatory_activity_address=_mapAddressToOutput(jsonObj.activityAddress),resultJson.TRANSACTION_ENROL.regulatory_activity_contact=_mapContactToOutput(jsonObj.activityContact),resultJson.TRANSACTION_ENROL.confirm_regulatory_contact=jsonObj.confirmContactValid===!0?"Y":"N",resultJson},_transformReqToFile:function(jsonObj){var requesters=[];if(!jsonObj)return requesters;jsonObj instanceof Array||(jsonObj=[jsonObj]);for(var i=0;i<jsonObj.length;i++){var record=_mapRequesterRecToOutput(jsonObj[i]);if(1==jsonObj.length)return record;requesters.push(record)}return requesters},_transformReqFromFile:function(model,jsonObj){if(model.solicitedRequesterReord=[],model.isSolicited){if(!jsonObj)return model.solicitedRequesterReord;jsonObj instanceof Array||(jsonObj=[jsonObj]);for(var i=0;i<jsonObj.length;i++){var record={};record.sequenceNumber=Number(jsonObj[i].solicited_requester_sequence),record.solicitedRequester=jsonObj[i].solicited_requester,model.solicitedRequesterReord.push(record)}}},_transformEctdToFile:function(jsonObj){var ectd={};return ectd.company_id=jsonObj.companyId,ectd.dossier_id=jsonObj.dossierId,ectd.dossier_type=jsonObj.dossierType,ectd.product_name=jsonObj.productName,ectd.lifecycle_record=this._mapLifecycleListToOutput(jsonObj.lifecycleRecord),ectd},_transformEctdFromFile:function(model,jsonObj){model.ectd=_getEmptyEctdSection(),model.ectd.companyId=jsonObj.company_id,model.ectd.dossierId=jsonObj.dossier_id,model.ectd.dossierType=jsonObj.dossier_type,model.ectd.productName=jsonObj.product_name,model.ectd.lifecycleRecord=this._mapLifecycleList(jsonObj.lifecycle_record)},getModelInfo:function(){return this._default},getTransactionInfo:function(jsonObj){if(!jsonObj)return this._default;var model=_getEmptyTransactionModel();return model.dateSaved=jsonObj.date_saved,model.dataChecksum=jsonObj.data_checksum,model.transactionType=jsonObj.transaction_type,model.isThirdParty=jsonObj.is_third_party,model.isPriority=jsonObj.is_priority,model.isNoc=jsonObj.is_noc,model.isAdminSub=jsonObj.is_admin_sub,model.subType=jsonObj.sub_type,model.isSolicited=jsonObj.is_solicited,this._transformReqFromFile(model,jsonObj.solicited_requester_record),model.projectManager1=jsonObj.regulatory_project_manager1,model.projectManager2=jsonObj.regulatory_project_manager2,model.isFees=jsonObj.is_fees,model.feeDetails=null,model.isFees&&(model.feeDetails=this._mapFeeDetailsFromOutput(jsonObj.fee_details)),jsonObj.importFileType===HCSC?(this.isFinal=!1,model.confirmContactValid=!1):(this.isFinal=!0,model.confirmContactValid=!0),model.isActivityChanges=jsonObj.is_activity_changes,model.companyName=jsonObj.company_name,model.activityContact=_transformContactFromFileObj(jsonObj.regulatory_activity_contact),model.activityAddress=_transformAddressFromFileObj($filter,getCountryAndProvinces,jsonObj.regulatory_activity_address),this._transformEctdFromFile(model,jsonObj.ectd),model},getNewTransaction:function(isEctd){var model=_createLifeCycleModel(),sequenceNum=this.getNextSequenceNumber();return isEctd?model.sequence=sequenceNum:model.sequence="",model},getCurrentSequence:function(){return this.currSequence},setSequenceNumber:function(startVal){if(null===startVal)return!1;var converted=parseInt(startVal);if(isNaN(converted))return this.currSequence=0,!1;this.currSequence=converted;var model=this.getModelInfo();if(model.ectd.lifecycleRecord&&model.ectd.lifecycleRecord.length>0)for(var i=model.ectd.lifecycleRecord.length-1;i>=0;i--){var rec=model.ectd.lifecycleRecord[i];rec.sequence=this.getNextSequenceNumber()}return!0},getNextSequenceNumber:function(){for(var seqText=""+this.currSequence,pad=4-seqText.length,padText="",i=0;i<pad;i++)padText+="0";return seqText=padText+seqText,this.currSequence++,seqText},deprecateSequenceNumber:function(){this.currSequence--},_mapLifecycleList:function(jsonObj){var result=[];if(this.currSequence=0,!jsonObj)return result;jsonObj instanceof Array||(jsonObj=[jsonObj]);for(var i=0;i<jsonObj.length;i++){var record=_transformLifecycleRecFromFileObj(jsonObj[i],$filter,TransactionLists);this._setNextSequenceOnLoad(parseInt(record.sequence)),result.push(record)}return result},_setNextSequenceOnLoad:function(sequence){this.currSequence<0&&(this.currSequence=0),isNaN(sequence)||sequence>=this.currSequence&&(this.currSequence=sequence+1)},_mapLifecycleListToOutput:function(jsonObj){var result=[];if(!jsonObj)return result;jsonObj instanceof Array||(jsonObj=[jsonObj]);for(var i=0;i<jsonObj.length;i++){var record=_mapLifecycleRecToOutput(jsonObj[i]);if(1===jsonObj.length)return record;result.push(record)}return result},resetEctdSection:function(){this._default.hasOwnProperty("ectd")&&(this._default.ectd.companyId="",this._default.ectd.dossierId="",this._default.ectd.dossierType="",this._default.ectd.productName="",this._default.ectd.lifecycleRecord&&this._default.ectd.lifecycleRecord>0&&(this._default.ectd.lifecycleRecord=[this._default.ectd.lifecycleRecord[0]]))},createFeeDetails:function(){return _createFeeDetails(NO)}},TransactionService.prototype._mapFeeDetailsToOutput=function(feeObj){var result=_createEmptyFeeDetailsForOutput(NO);return angular.isUndefined(feeObj)?null:(result.submission_class="",feeObj.submissionClass&&feeObj.submissionClass.id&&(result.submission_class=angular.fromJson(angular.toJson(feeObj.submissionClass))),result.deferral_request=feeObj.deferralRequest,result.fee_remission=feeObj.feeRemission,result.gross_revenue=feeObj.grossRevenue,result.percent_gross=feeObj.percentGross,result.required_docs.deferral_statement=feeObj.requiredDocs.deferralStat===!0?YES:NO,result.required_docs.remission_certified=feeObj.requiredDocs.revStat===!0?YES:NO,result.required_docs.sales_history=feeObj.requiredDocs.salesHistory===!0?YES:NO,result.required_docs.avg_sale_price=feeObj.requiredDocs.avgSalePrice===!0?YES:NO,result.required_docs.est_market_share=feeObj.requiredDocs.estMarketShare===!0?YES:NO,result.required_docs.comparison_products=feeObj.requiredDocs.comparison===!0?YES:NO,result.required_docs.market_plan=feeObj.requiredDocs.marketPlan===!0?YES:NO,result.required_docs.other=feeObj.requiredDocs.other===!0?YES:NO,result.required_docs.other_details=feeObj.requiredDocs.otherDetails,result.payment_method.credit_card=feeObj.paymentMethod.creditCard===!0?YES:NO,result.payment_method.cheque=feeObj.paymentMethod.cheque===!0?YES:NO,result.payment_method.money_order=feeObj.paymentMethod.moneyOrder===!0?YES:NO,result.payment_method.bank_draft=feeObj.paymentMethod.bankDraft===!0?YES:NO,result.payment_method.existing_credit=feeObj.paymentMethod.existingCredit===!0?YES:NO,result.payment_method.bank_wire=feeObj.paymentMethod.bankWire===!0?YES:NO,result.payment_method.bill_payment=feeObj.paymentMethod.billPayment===!0?YES:NO,result)},TransactionService.prototype._mapFeeDetailsFromOutput=function(feeObj){var result=_createFeeDetails(NO);return angular.isUndefined(feeObj)?null:(feeObj.submission_class&&feeObj.submission_class.id&&(result.submissionClass=$filter("findListItemById")(TransactionLists.getFeeList(),{id:feeObj.submission_class.id})),result.deferralRequest=feeObj.deferral_request,result.feeRemission=feeObj.fee_remission,result.grossRevenue=Number(feeObj.gross_revenue),result.percentGross=feeObj.percent_gross,result.requiredDocs.deferralStat=feeObj.required_docs.deferral_statement===YES,result.requiredDocs.revStat=feeObj.required_docs.remission_certified===YES,result.requiredDocs.salesHistory=feeObj.required_docs.sales_history===YES,result.requiredDocs.avgSalePrice=feeObj.required_docs.avg_sale_price===YES,result.requiredDocs.estMarketShare=feeObj.required_docs.est_market_share===YES,result.requiredDocs.comparison=feeObj.required_docs.comparison_products===YES,result.requiredDocs.marketPlan=feeObj.required_docs.market_plan===YES,result.requiredDocs.other=feeObj.required_docs.other===YES,result.requiredDocs.otherDetails=feeObj.required_docs.other_details,result.paymentMethod.creditCard=feeObj.payment_method.credit_card===YES,result.paymentMethod.cheque=feeObj.payment_method.cheque===YES,result.paymentMethod.moneyOrder=feeObj.payment_method.money_order===YES,result.paymentMethod.bankDraft=feeObj.payment_method.bank_draft===YES,result.paymentMethod.existingCredit=feeObj.payment_method.existing_credit===YES,result.paymentMethod.bankWire=feeObj.payment_method.bank_wire===YES,result.paymentMethod.billPayment=feeObj.payment_method.bill_payment===YES,result)},TransactionService}function _transformLifecycleRecFromFileObj(lifecycleObj,$filter,TransactionLists){var lifecycleRec=_createLifeCycleModel();return lifecycleRec.controlNumber=lifecycleObj.control_number,lifecycleRec.activityLead=lifecycleObj.sequence_activity_lead,lifecycleRec.activityType="",lifecycleObj.sequence_activity_type&&(lifecycleRec.activityType=$filter("filter")(TransactionLists.getActivityTypes(),{id:lifecycleObj.sequence_activity_type.__text})[0],lifecycleRec.activityTypeDisplay=lifecycleRec.activityType.id),lifecycleRec.descriptionValue=lifecycleObj.sequence_description_value,lifecycleRec.startDate=lifecycleObj.sequence_from_date,lifecycleRec.endDate=lifecycleObj.sequence_to_date,lifecycleRec.details=lifecycleObj.sequence_details,lifecycleRec.sequenceVersion=lifecycleObj.sequence_version,lifecycleRec.year=lifecycleObj.sequence_year,lifecycleRec.sequenceConcat=lifecycleObj.sequence_concat,lifecycleRec.isSaved=!0,lifecycleRec}function _mapLifecycleRecToOutput(lifecycleObj){var lifecycleRec={};return lifecycleRec.control_number=lifecycleObj.controlNumber,lifecycleRec.sequence_activity_lead=lifecycleObj.activityLead,lifecycleRec.sequence_activity_type="",lifecycleObj.activityType&&(lifecycleRec.sequence_activity_type={},_setActivityTypeValuesForOutput(lifecycleObj.activityType,lifecycleRec.sequence_activity_type)),lifecycleRec.sequence_description_value=lifecycleObj.descriptionValue,lifecycleRec.sequence_from_date=lifecycleObj.startDate,lifecycleRec.sequence_to_date=lifecycleObj.endDate,lifecycleRec.sequence_details=lifecycleObj.details,lifecycleRec.sequence_version=lifecycleObj.sequenceVersion,lifecycleRec.sequence_year=lifecycleObj.year,lifecycleRec.sequence_concat=lifecycleObj.sequenceConcat,lifecycleRec}function _mapRequesterRecToOutput(requesterObj){var requesterRec={};return requesterObj&&(requesterRec={solicited_requester_sequence:requesterObj.sequenceNumber,solicited_requester:requesterObj.solicitedRequester}),requesterRec}function _setActivityTypeValuesForOutput(srcActivityTypeRec,destActivityTypeRec){var stringIndex=srcActivityTypeRec.en.indexOf(" (");destActivityTypeRec.__text=srcActivityTypeRec.id,stringIndex>-1?destActivityTypeRec._label_en=srcActivityTypeRec.en.substring(0,stringIndex):destActivityTypeRec._label_en=srcActivityTypeRec.en,stringIndex=srcActivityTypeRec.fr.indexOf("("),stringIndex>-1?destActivityTypeRec._label_fr=srcActivityTypeRec.fr.substring(0,stringIndex-1):destActivityTypeRec._label_fr=srcActivityTypeRec.fr}function _getEmptyEctdSection(){var ectd={};return ectd.companyId="",ectd.dossierId="",ectd.dossierType="",ectd.productName="",ectd.lifecycleRecord=[],ectd}function _transformContactFromFileObj(contactObj){var contact={};return contactObj?(contact.salutation=contactObj.salutation,contact.givenName=contactObj.given_name,contact.initials=contactObj.initials,contact.surname=contactObj.surname,contact.title=contactObj.job_title,contact.language=contactObj.language_correspondance,contact.phone=contactObj.phone_num,contact.phoneExt=contactObj.phone_ext,contact.fax=contactObj.fax_num,contact.email=contactObj.email,contact):(console.error("There is no contact object"),contact)}function _mapContactToOutput(contactObj){var contact={};return contact.salutation=contactObj.salutation,contact.given_name=contactObj.givenName,contact.initials=contactObj.initials,contact.surname=contactObj.surname,contact.job_title=contactObj.title,contact.language_correspondance=contactObj.language,contact.phone_num=contactObj.phone,contact.phone_ext=contactObj.phoneExt,contact.fax_num=contactObj.fax,contact.email=contactObj.email,contact}function _mapAddressToOutput(addressObj){var address={};return address.street_address=addressObj.street,address.city=addressObj.city,address.province_lov=addressObj.stateList,address.province_text=addressObj.stateText,address.country="",addressObj.country&&(address.country={_label_en:addressObj.country.en,_label_fr:addressObj.country.fr,__text:addressObj.country.id}),address.postal_code=addressObj.postalCode,address}function _transformAddressFromFileObj($filter,getCountryAndProvinces,addressObj){var address={};return address.street=addressObj.street_address,address.city=addressObj.city,address.stateList=addressObj.province_lov,address.stateText=addressObj.province_text,address.country="",addressObj.country.__text&&(address.country=$filter("filter")(getCountryAndProvinces.getCountries(),{id:addressObj.country.__text})[0],address.countryDisplay=addressObj.country.id),address.postalCode=addressObj.postal_code,
address}function _createLifeCycleModel(){var defaultRecord={controlNumber:"",activityLead:"",activityType:"",activityTypeDisplay:"",descriptionValue:"",startDate:"",endDate:"",details:"",sequenceVersion:"",sequenceConcat:"",isSaved:!1};return defaultRecord}function _createAddressModel(){return{street:"",city:"",stateList:"",stateText:"",country:"",countryDisplay:"",postalCode:""}}function _createContactModel(){var contact={};return contact.salutation="",contact.givenName="",contact.initials="",contact.surname="",contact.jobTitle="",contact.languageCorrespondance="",contact.phoneNum="",contact.phoneExt="",contact.fax="",contact.email="",contact}function _getToday(){function pad(n){return n<10?"0"+n:n}var d=new Date,isoDate=d.getFullYear()+"-"+pad(d.getMonth()+1)+"-"+pad(d.getDate());return isoDate}function _getEmptyTransactionModel(){var defaultTransactionData={dataChecksum:"",dateSaved:"",softwareVersion:"2.0.0",transactionType:"",isThirdParty:"",isPriority:"",isNoc:"",isAdminSub:"",subType:"",ectd:{companyId:"",dossierId:"",dossierType:"",productName:"",lifecycleRecord:[]},isSolicited:"",solicitedRequesterReord:[],projectManager1:"",projectManager2:"",isFees:"",resetBtnClicked:!1,feeDetails:null,isActivityChanges:"Y",companyName:"",activityAddress:_createAddressModel(),confirmContactValid:!1,activityContact:_createContactModel()};return defaultTransactionData}function _createFeeDetails(NO){var feeObj={submissionClass:null,deferralRequest:"",feeRemission:"",grossRevenue:0,percentGross:"",requiredDocs:{deferralStat:!1,revStat:!1,salesHistory:!1,avgSalePrice:!1,estMarketShare:!1,comparison:!1,marketPlan:!1,other:!1,otherDetails:""},paymentMethod:{creditCard:!1,cheque:!1,moneyOrder:!1,bankDraft:!1,existingCredit:!1,bankWire:!1,billPayment:!1}};return feeObj}function _createEmptyFeeDetailsForOutput(NO){var feeObj={submission_class:null,deferral_request:NO,fee_remission:"",gross_revenue:0,percent_gross:"",required_docs:{deferral_statement:NO,remission_certified:NO,sales_history:NO,avg_sale_price:NO,est_market_share:NO,comparison_products:NO,market_plan:NO,other:NO,other_details:""},payment_method:{credit_card:NO,cheque:NO,money_order:NO,bank_draft:NO,existing_credit:NO,bank_wire:NO,bill_payment:NO}};return feeObj}angular.module("transactionService").factory("TransactionService",TransactionService),TransactionService.$inject=["$filter","getCountryAndProvinces","getContactLists","TransactionLists","YES","NO","HCSC"]}(),function(){"use strict";angular.module("transactionFeesModule",["services","hpfbConstants","errorMessageModule"])}(),function(){"use strict";function transactionFeesController($scope,$window,TransactionLists,YES,NO,ENGLISH,FRENCH,ADVANCE_FEE_PAYMENT_EN,ADVANCE_FEE_PAYMENT_FR){function clearRemitRequiredDocs(){vm.model&&(vm.model.requiredDocs.revStat=!1,vm.model.requiredDocs.estMarketShare=!1,vm.model.requiredDocs.comparison=!1,vm.model.requiredDocs.salesHistory=!1,vm.model.requiredDocs.marketPlan=!1,vm.model.requiredDocs.avgSalePrice=!1,vm.model.requiredDocs.other=!1,vm.model.requiredDocs.otherDetails="")}function _setIdNames(){var scopeId="_"+$scope.$id;vm.submClassId="sub_class"+scopeId,vm.descriptId="fee_description"+scopeId,vm.feeId="fee_amount"+scopeId,vm.remitId="fee_remission"+scopeId,vm.paymentSelectedId="one_payment_method"+scopeId,vm.revenueId="grossRevenue"+scopeId,vm.percentId="calcPercent"+scopeId,vm.deferralStateId="deferralState"+scopeId,vm.statement10Id="required_doc"+scopeId,vm.otherId="other"+scopeId,vm.otherDetailsId="other_doc_details"+scopeId,vm.paymentFsId="fs_payment_methods"+scopeId,vm.deferId="defer_fees"+scopeId}var vm=this;vm.model={},vm.submissionType={},vm.onePaymentSelected="",vm.yesNoList=[YES,NO],vm.requiredOnlyError=[{type:"required",displayAlias:"MSG_ERR_MAND"}],vm.onePaymentError=[{type:"required",displayAlias:"ONE_PAYMENT_METHOD"}],vm.alerts=[!1,!1,!1],vm.lang=ENGLISH,vm.$onInit=function(){_setIdNames(),vm.submissionType=TransactionLists.getFeeList(),vm.alerts=[!1,!1,!1]},vm.errorsTemp=function(){return!0},vm.$onChanges=function(changes){changes.language&&(vm.lang=changes.language.currentValue),changes.feeRecord&&(vm.model=changes.feeRecord.currentValue),changes.showErrorSummary&&(vm.showSummary=changes.showErrorSummary.currentValue)},vm.showError=function(ctrl){return!!ctrl&&(!!(ctrl.$invalid&&ctrl.$touched||vm.showSummary&&ctrl.$invalid)||void 0)},vm.isPaymentSelected=function(){for(var methodSelected=!1,keys=Object.keys(vm.model.paymentMethod),i=0;i<keys.length;i++)if(vm.model.paymentMethod[keys[i]]===!0){methodSelected=!0;break}return vm.onePaymentSelected="",methodSelected?(vm.onePaymentSelected=!0,!0):(vm.onePaymentSelected=!1,!1)},vm.isFeeRemit=function(){return vm.model.feeRemission===YES||(vm.model.grossRevenue=0,vm.model.percentGross=0,!1)},vm.calcValue=function(){var result=.1*parseFloat(vm.model.grossRevenue);isNaN(result)&&(result=0),vm.model.percentGross=result.toFixed(2)},vm.isDeferral=function(){return!!vm.model&&(vm.model.deferralRequest===YES||(vm.model.requiredDocs.deferralStat=!1,!1))},vm.showDocumentationSection=function(){return!(!vm.isEligible()&&!vm.isDeferral())},vm.showPaymentMethods=function(){if(!vm.model)return!1;var showPM=!vm.isDeferral()&&!vm.isEligible()&&vm.isLess10K()||vm.isEligible();return showPM||(vm.model.paymentMethod={creditCard:!1,cheque:!1,moneyOrder:!1,bankDraft:!1,existingCredit:!1,bankWire:!1,billPayment:!1}),showPM},vm.isSendNoFees=function(){return!!(vm.model&&vm.model.submissionClass&&vm.model.submissionClass.fee)&&!(vm.isLess10K()||vm.isEligible()||vm.isDeferral()||vm.isFeeRemit())},vm.showPaymentSection=function(){return!vm.isDeferral()&&vm.isFeeRemit()||vm.isEligible()&&vm.isLess10K()||vm.isEligible()&&!vm.isLess10K()||vm.isDeferral()&&!vm.isEligible()},vm.showPaymentPanel=function(){return!!(vm.model&&vm.model.submissionClass&&vm.model.submissionClass.fee)&&!(vm.isSendNoFees()||vm.isDeferral()||vm.isFeeRemit())},vm.isEligible=function(){return vm.model&&vm.model.submissionClass&&vm.model.submissionClass.fee?!!(vm.isFeeRemit()&&vm.model.percentGross<vm.model.submissionClass.fee)||(clearRemitRequiredDocs(),!1):(clearRemitRequiredDocs(),!1)},vm.isLess10K=function(){return!(!vm.model||!vm.model.submissionClass)&&vm.model.submissionClass.fee<1e4},vm.openPaymentForm=function(){var feelink=ADVANCE_FEE_PAYMENT_EN;console.log(vm.lang),vm.lang===FRENCH&&(feelink=ADVANCE_FEE_PAYMENT_FR),$window.open(feelink,"_blank")},vm.setDocOther=function(){return!!vm.model&&(!!vm.model.requiredDocs.other||(vm.model.requiredDocs.otherDetails="",!1))},vm.closeAlert=function(value){angular.isUndefined(value)||value<vm.alerts.length&&(vm.alerts[value]=!1)},vm.addInstruct=function(value){angular.isUndefined(value)||value<vm.alerts.length&&(vm.alerts[value]=!0)}}angular.module("transactionFeesModule").component("cmpTransactionFees",{templateUrl:"app/scripts/components/transactionFees/tpl-transaction-fees_20190322_1544.html",controller:transactionFeesController,controllerAs:"transFeeCtrl",bindings:{feeRecord:"<",language:"<",showErrorSummary:"<",updateErrorSummary:"&"}}),transactionFeesController.$inject=["$scope","$window","TransactionLists","YES","NO","ENGLISH","FRENCH","ADVANCE_FEE_PAYMENT_EN","ADVANCE_FEE_PAYMENT_FR"]}(),function(){"use strict";angular.module("errorSummaryModule",["focus-if"])}(),function(){"use strict";function errorSummaryController($scope,$location,$anchorScroll){function _isErrorSummaryVisible(){return vm.isVisible&&vm.errorArray&&vm.errorArray.length>0}function _getErr(errorObj,resultsList,parent){for(var keys=Object.keys(errorObj),i=0;i<keys.length;i++){var record=errorObj[keys[i]];record instanceof Array||(record=[record]);for(var j=0;j<record.length;j++){var numIndex=record[j].$name.lastIndexOf("_"),transcludeName="";if(numIndex>0&&(transcludeName=record[j].$name.substring(0,numIndex)),record[j].$invalid===!0&&record[j].$name.indexOf(".")>0)if(vm.exclusions&&vm.exclusions.hasOwnProperty(record[j].$name)){var tabIndex=vm.exclusions[record[j].$name].indexOf("tab_"),tabId=-1;tabIndex>-1&&(tabId=vm.exclusions[record[j].$name].substr(tabIndex+4),tabId=parseInt(tabId)),angular.merge(resultsList,_createSummaryRecord(record[j].$name,keys[i],parent,tabId))}else _getErr(record[j].$error,resultsList,record[j].$name);else if(vm.transcludeNames.hasOwnProperty(transcludeName)){var exIndex=record[j].$name.indexOf(transcludeName),expandIndex=record[j].$name.substring(exIndex+transcludeName.length+1);angular.merge(resultsList,_createExpanderRecord(record[j].$name,transcludeName,keys[i],parent,expandIndex))}else if(record[j].$invalid===!0&&!resultsList.hasOwnProperty(record[j].$name)){var result=_processRecord(record[j].$name,keys[i],parent);angular.merge(resultsList,result)}}}}function _scrubFieldName(rawName){var separator="_",index=rawName.lastIndexOf(separator),cleanedName="";return cleanedName=index>-1?rawName.substring(0,index):rawName}function _getElementScope(rawName){var separator="_",nameSplit=rawName.split(separator),scopeId=parseInt(nameSplit[nameSplit.length-1]);return angular.isNumber(scopeId)||(scopeId=""),scopeId}function _processRecord(error_Name,errorType,parent){var result={},scrubName=_scrubFieldName(error_Name),scopeId=_getElementScope(error_Name),errorKey="TYPE_"+errorType.toUpperCase(),destId=error_Name;if(vm.alias&&vm.alias.hasOwnProperty(scrubName)){var aliasRec=vm.alias[scrubName];switch(aliasRec.type.toLowerCase()){case"fieldset":var searchId=aliasRec.parent+"_"+scopeId,destObj=$("#"+searchId).find("input:visible:first");destObj.length>0&&(destId=destObj[0].id);break;case"element":destId=aliasRec.target+"_"+scopeId;break;case"elementnoid":destId=aliasRec.target;break;case"pattern":"pattern"===errorType&&(errorKey=aliasRec.errorType);break;case"select2":var searchId=aliasRec.name+"_match"+scopeId,destObj=$("#"+searchId);destObj.length>0&&(destId=searchId);break;case"min":"min"===errorType&&(errorKey=aliasRec.errorType);break;case"max":"max"===errorType&&(errorKey=aliasRec.errorType);break;case"minlength":"minlength"===errorType&&(errorKey=aliasRec.errorType);break;case"maxlength":"maxlength"===errorType&&(errorKey=aliasRec.errorType);break;case"buttonsearch":errorKey="TYPE_REQUIRED",$.each($("button","#"+vm.startFormId),function(k){var temp_attr=$(this).attr("id");temp_attr&&temp_attr.indexOf(aliasRec.buttonName)>-1&&(destId=temp_attr)});break;default:console.warn("No type found "+aliasRec.type)}}return result[error_Name]={name:destId,translateKey:scrubName.toUpperCase(),type:errorKey,parent:parent,concat:parent+"."+error_Name,isSummary:!1},result}function _sortErrorsByDomOrder(){var domFieldList={};$.each($("input, select ,textarea","#"+vm.startFormId),function(k){var temp_attr=$(this).attr("id");temp_attr&&(domFieldList[temp_attr]=k)});for(var keyList=Object.keys(domFieldList),p=0;p<keyList.length;p++){if(keyList[p].indexOf("focusser-")>-1){var parentName=angular.element(document.querySelector("#"+keyList[p])).parent().attr("name");parentName&&(keyList[p]=parentName)}vm.uniqueErrorList[keyList[p]]||(keyList.splice(p,1),p--)}for(var sortedDomJsonList={},v=0;v<keyList.length;v++)sortedDomJsonList[keyList[v]]=v;var newErrors=Object.keys(vm.uniqueErrorList).map(function(k){return vm.uniqueErrorList[k]}),notDefined={};if(newErrors.length>0)for(var i=0;i<newErrors.length;){var currRec=newErrors[i],targetName=currRec.name,destIndex=sortedDomJsonList[targetName];if(angular.isDefined(destIndex)&&destIndex!==i){var tempRec=angular.copy(newErrors[destIndex]);newErrors[destIndex]=angular.copy(currRec),newErrors[i]=angular.copy(tempRec)}else angular.isDefined(destIndex)||(notDefined[currRec.name]={rec:currRec,pos:i}),i++}return _sortUnknowns(notDefined,newErrors),newErrors}function _sortUnknowns(unknownJson,sortList){for(var unknownArray=Object.keys(unknownJson).map(function(k){return unknownJson[k]}),i=0;i<unknownArray.length;i++){var unknownRec=unknownArray[i],unknownName=unknownRec.rec.name,scopeIndex=_getElementScope(unknownName);if(angular.isNumber(scopeIndex))for(var g=sortList.length-1;g>=0;g--){var sortRec=sortList[g],sortScope=_getElementScope(sortRec.name);if(angular.isNumber(sortScope)&&sortScope===scopeIndex&&unknownName!==sortRec.name){sortList.move(unknownRec.pos,g+1);break}}}}function _createSummaryRecord(name,type,parent,tabId){var result={};return angular.isDefined(tabId)||(tabId=-1),result[name]={name:name,type:type,translateKey:name.toUpperCase(),parent:parent,concat:parent+"."+name,tabId:tabId,isSummary:!0},result}function _createExpanderRecord(name,transcludeName,type,parent,expanderIndex){var result={};return result[name]={name:name,type:type,translateKey:transcludeName.toUpperCase(),parent:parent,concat:parent+"."+name,isSummary:!0,toExpand:!0,exIndex:parseInt(expanderIndex)},result}var vm=this;vm.parentRef=null,vm.errorArray=[],vm.uniqueErrorList={},vm.isVisible=!1,vm.nameAddendum="",vm.rootError="",vm.isFocusInput=0,vm.exclusions={},vm.alias={},vm.transcludeNames={},vm.headingPreamble="",vm.headerLevel="",vm.startFormId="",vm.$onInit=function(){},vm.$onChanges=function(changes){changes.setHeadingLevel&&angular.isDefined(changes.setHeadingLevel.currentValue)&&(vm.headerLevel=changes.setHeadingLevel.currentValue.toLowerCase()),changes.nameSuffix&&(vm.nameAddendum="-"+changes.nameSuffix.currentValue),changes.formPreamble&&(vm.headingPreamble=changes.formPreamble.currentValue),changes.exclusionList&&(vm.exclusions=changes.exclusionList.currentValue),changes.aliasList&&(vm.alias=changes.aliasList.currentValue),changes.formRef&&vm.getErrorsSumm(changes.formRef.currentValue.$error,changes.formRef.currentValue.$name),changes.showErrors&&(vm.isVisible=changes.showErrors.currentValue),changes.updateErrors&&vm.formRef&&vm.isVisible&&vm.getErrorsSumm(vm.formRef.$error,vm.formRef.$name),changes.makeFocused&&changes.makeFocused.currentValue&&(vm.isFocusInput=vm.isFocusInput+1),changes.formId&&(vm.startFormId=changes.formId.currentValue),changes.transcludeList&&changes.transcludeList.currentValue&&(vm.transcludeNames=changes.transcludeList.currentValue)},vm.calcIsVisible=function(){var summaryIsVisible=_isErrorSummaryVisible();return summaryIsVisible||$scope.$emit("childErrorSummaryHide",+vm.nameAddendum),summaryIsVisible},vm.scrollTo=function(errorRecord){var hashId="";errorRecord&&(hashId=errorRecord.isSummary?"errors-summary-"+errorRecord.name:errorRecord.name,vm.expandRecord({index:errorRecord.exIndex}),$location.hash(hashId),$anchorScroll())},vm.selectVisibleTab=function(errorRecord){"errors-summary-"+errorRecord.name;vm.selectTab({index:errorRecord.tabId})},vm.isSummaryLink=function(errorRecord){return errorRecord.isSummary&&!angular.isDefined(errorRecord.toExpand)&&angular.isDefined(errorRecord.tabId)&&parseInt(errorRecord.tabId)<0},vm.isTabLink=function(errorRecord){return errorRecord.isSummary&&angular.isDefined(errorRecord.tabId)&&parseInt(errorRecord.tabId)>-1},vm.isExpanderLink=function(errorRecord){return angular.isDefined(errorRecord.toExpand)},$scope.$on("childErrorSummaryHide",function(event,data){if(_isErrorSummaryVisible())for(var errorSummaryBroadcastName=data.message,i=0;i<vm.errorArray.length;i++){var errorRecord=errorArray[i];errorRecord.isSummary&&errorRecord.name===errorSummaryBroadcastName&&vm.errorArray.splice(i,1)}}),vm.getErrorsSumm=function(myformErrors,name){vm.errorArray=[],vm.uniqueErrorList={},_getErr(myformErrors,vm.uniqueErrorList,name);var newErrors=_sortErrorsByDomOrder();angular.equals(vm.errorArray,newErrors)||(vm.errorArray=newErrors)},Array.prototype.move=function(from,to){to<0&&(to=0),to>=this.length&&(to=this.length-1),this.splice(to,0,this.splice(from,1)[0])}}angular.module("errorSummaryModule").component("cmpErrorSummary",{templateUrl:"app/scripts/components/error-summary/tpl-error-summary_20190322_1544.html",controller:errorSummaryController,controllerAs:"errSummaryCtrl",bindings:{formRef:"<",showErrors:"<",updateErrors:"<",nameSuffix:"@",formPreamble:"@",makeFocused:"<",setHeadingLevel:"@",exclusionList:"<",transcludeList:"<",formId:"<",aliasList:"<",expandRecord:"&",selectTab:"&"}}),errorSummaryController.$inject=["$scope","$location","$anchorScroll"]}(),function(){"use strict";angular.module("errorMessageModule",[])}(),function(){"use strict";function errorMessageController(){var vm=this;vm.field_name="",vm.form_ref=null,vm.fieldRecords=[],vm.$onChanges=function(changes){changes.fieldName&&(vm.field_name=changes.fieldName.currentValue),changes.formRef&&(vm.form_ref=changes.formRef.currentValue),changes.errorTypes&&(vm.fieldRecords=changes.errorTypes.currentValue)},vm.showErrorMessage=function(){return!!vm.form_ref&&(angular.isUndefined(vm.fieldName)?(console.warn("No field name for: "+vm.form_ref.$name),!1):angular.isUndefined(vm.form_ref[vm.fieldName])?(console.warn("lookup undefined "+vm.form_ref.$name+"."+vm.fieldName),!1):vm.showError()&&vm.form_ref[vm.fieldName].$invalid||vm.form_ref[vm.fieldName].$touched&&vm.form_ref[vm.fieldName].$invalid)}}angular.module("errorMessageModule").component("cmpErrorMessage",{templateUrl:"app/scripts/components/error-message/tpl-error-message_20190322_1544.html",controller:errorMessageController,controllerAs:"errMessageCtrl",bindings:{fieldName:"<",formRef:"<",showError:"&",errorTypes:"<"}})}(),function(){"use strict";angular.module("alertModule",[])}(),function(){"use strict";function alertController(){var vm=this;vm.alertVisible=!1,vm.closeMsgAlias="CLOSE_ALERT",vm.$onInit=function(){vm.alertVisible=!1},vm.$onChanges=function(changes){changes.msg&&(vm.closeMsgAlias=changes.msg.currentValue),changes.uiState&&(vm.alertVisible=changes.uiState.currentValue)},vm.open=function(){vm.updateState()},vm.close=function(){vm.updateState()},vm.isAlertVisible=function(){return vm.alertVisible}}angular.module("alertModule").component("cmpAlert",{templateUrl:"app/scripts/components/alertComponent/tpl-alert_20190322_1544.html",transclude:!0,bindings:{uiState:"<",msg:"@",updateState:"&",type:"@"},controller:alertController,controllerAs:"alertCtrl"}),alertController.$inject=[]}(),function(){"use strict";angular.module("addressModule",["hpfbConstants","dataLists","filterLists","ui.select","errorMessageModule"])}(),function(){"use strict";function addressCtrl(getCountryAndProvinces,$translate,CANADA,USA,$scope){function _setIdNames(){var scopeId=vm.fldId+"_"+$scope.$id;vm.streetId="street"+scopeId,vm.cityId="city"+scopeId,vm.countryId="country"+scopeId,vm.stateTextId="proveState"+scopeId,vm.stateListId="provinceList"+scopeId,vm.postalId="postal"+scopeId}var vm=this;vm.isEditable=!0,vm.ngModelOptSetting={updateOn:"blur"},vm.lang=$translate.proposedLanguage()||$translate.use(),vm.addressModel={addressID:"",isDetailValid:!1,street:"",city:"",country:"",countryDisplay:"",stateLov:"",stateText:"",postalCode:""},vm.countryIsEditable=!0,vm.canadianPostalCodePattern="^(?!.*[DFIOQU])[A-VXYa-vxy][0-9][A-Za-z] ?[0-9][A-Za-z][0-9]$",vm.usaZipCode="^[0-9]{5}(?:-[0-9]{4})?$",vm.hideProvinceText=!1,vm.countryList=getCountryAndProvinces.getCountries(),vm.fdId="",vm.requiredOnly=[{type:"required",displayAlias:"MSG_ERR_MAND"}],vm.postalErrorList=[{type:"required",displayAlias:"MSG_ERR_MAND"},{type:"pattern",displayAlias:"MSG_ERR_POSTAL"}],vm.$onInit=function(){vm.addressRecord&&(vm.addressModel=vm.addressRecord,vm.provListLabel=getProvinceListLabel(),vm.postalLabel=getPostalLabel(),vm.isPostalRequired=isPostalRequiredFn(),vm.provinces=getProvinceStateList(),vm.hideProvinceText=getProvinceTextState(),vm.postalPattern=getPostalPattern(),vm.hideProvinceDdl=!vm.hideProvinceText),_setIdNames()},vm.$onChanges=function(changes){changes.addressRecord&&(vm.addressModel=changes.addressRecord.currentValue,vm.countryChanged()),changes.isAmend&&(vm.isEditable=changes.isAmend.currentValue),changes.fieldSuffix&&(vm.fldId=changes.fieldSuffix.currentValue,vm.fldId||(vm.fldId="")),changes.updateCountry&&vm.countryChanged(),changes.countryEditable&&(vm.countryIsEditable=changes.countryEditable.currentValue,angular.isUndefined(vm.countryIsEditable)&&(vm.countryIsEditable=!0))},vm.countryChanged=function(){vm.addressModel.countryDisplay=vm.addressModel.country.id,vm.provListLabel=getProvinceListLabel(),vm.postalLabel=getPostalLabel(),vm.isPostalRequired=isPostalRequiredFn(),vm.provinces=getProvinceStateList(),vm.hideProvinceText=getProvinceTextState(),vm.postalPattern=getPostalPattern(),vm.hideProvinceDdl=!vm.hideProvinceText,vm.isCountryCanada(),vm.updateErrorSummary()},vm.isCountryCanada=function(){return vm.addressModel&&vm.addressModel.country?vm.addressModel.country.id===CANADA?(vm.postalErrorList=[{type:"required",displayAlias:"MSG_ERR_MAND"},{type:"pattern",displayAlias:"MSG_ERR_POSTAL"}],!0):(vm.postalErrorList=[{type:"required",displayAlias:"MSG_ERR_MAND"},{type:"pattern",displayAlias:"MSG_ERR_ZIP"}],!1):(vm.postalErrorList=[{type:"required",displayAlias:"MSG_ERR_MAND"},{type:"pattern",displayAlias:"MSG_ERR_POSTAL"}],!1)},vm.showError=function(ctrl){return!!ctrl&&!!(ctrl.$invalid&&ctrl.$touched||vm.showErrors()&&ctrl.$invalid)},vm.onDeleteButtonClick=function(){vm.onDelete({addressId:vm.addressModel.addressID})},vm.onDiscardButtonClick=function(){vm.addressModel=angular.extend({},vm.addressRecord),vm.addressForm.$setPristine()},vm.isCountryEditable=function(){return vm.isEditable&&vm.countryIsEditable},vm.postalCodeChanged=function(){var postal=vm.addressModel.postalCode;postal&&(postal=postal.toUpperCase(),6==postal.length&&vm.addressModel.country.id===CANADA&&(postal=postal.substring(0,3)+" "+postal.substring(3,postal.length)),vm.addressModel.postalCode=postal,vm.updateErrorSummary())};var getProvinceTextState=function(){var isCanOrUsa=isPostalRequiredFn();return isCanOrUsa?vm.addressModel.stateText="":vm.addressModel.stateList="",isCanOrUsa},isPostalRequiredFn=function(){return vm.addressModel.country.id===CANADA||vm.addressModel.country.id===USA},getProvinceStateList=function(){return vm.addressModel.country.id===CANADA?getCountryAndProvinces.getProvinces():vm.addressModel.country.id===USA?getCountryAndProvinces.getUSStates():void 0},getProvinceListLabel=function(){var label=vm.addressModel.country.id===USA?"STATE":"PROVINCE";return label},getPostalLabel=function(){var label=vm.addressModel.country.id===USA?"ZIP":"POSTAL";return label},getPostalPattern=function(){var postalPtrn=null;return vm.addressModel.country.id===USA?postalPtrn=/^[0-9]{5}(?:-[0-9]{4})?$/:vm.addressModel.country.id===CANADA&&(postalPtrn=/^(?!.*[DFIOQU])[A-VXYa-vxy][0-9][A-Za-z] ?[0-9][A-Za-z][0-9]$/),postalPtrn};$scope.$watch("adr.addressForm.$error",function(){vm.updateErrorSummary()},!0)}angular.module("addressModule").config(function(uiSelectConfig){uiSelectConfig.theme="select2"}).component("cmpAddressDetails",{templateUrl:"app/scripts/components/addressDetails/tpl-address-details_20190322_1544.html",controller:addressCtrl,controllerAs:"adr",bindings:{addressRecord:"<",onUpdate:"&",showErrors:"&",isAmend:"<",updateErrorSummary:"&",fieldSuffix:"<",countryEditable:"<",updateCountry:"<"}}),addressCtrl.$inject=["getCountryAndProvinces","$translate","CANADA","USA","$scope"]}(),function(){"use strict";angular.module("lcDetailsModule",["ui.bootstrap","activityFormFilterModule","errorSummaryModule","errorMessageModule"])}(),function(){"use strict";function lifecycleRecCtrl(ActivityFormFilterService,TransactionLists,$filter,$translate,$scope){function _updateLocalModel(record){vm.lifecycleModel=angular.copy(record),convertToDate(),vm.setSequenceList(),vm.setDetailsState(),vm.selectActivityList()}function setAsDescriptionYear(){vm.endDateVisible=!1,vm.startDateVisible=!1,vm.descriptionVisible=!0,vm.versionVisible=!1,vm.yearVisible=!0,vm.lifecycleModel.startDate="",vm.lifecycleModel.endDate="",vm.lifecycleModel.sequenceVersion="",vm.descriptionLabel="LIST_DESCRIPT"}function setDetailsAsNone(){vm.endDateVisible=!1,vm.startDateVisible=!1,vm.descriptionVisible=!1,vm.versionVisible=!1,vm.yearVisible=!1,vm.lifecycleModel.year="",vm.lifecycleModel.startDate="",vm.lifecycleModel.endDate="",vm.lifecycleModel.details="",vm.lifecycleModel.sequenceVersion=""}function setAsDescription(){vm.endDateVisible=!1,vm.startDateVisible=!1,vm.descriptionVisible=!0,vm.versionVisible=!1,vm.yearVisible=!1,vm.descriptionLabel="BRIEF_DESC",vm.lifecycleModel.year="",vm.lifecycleModel.startDate="",vm.lifecycleModel.endDate="",vm.lifecycleModel.sequenceVersion=""}function setAsStartDate(){vm.endDateVisible=!1,vm.startDateVisible=!0,vm.startDateLabel="DATED",vm.descriptionVisible=!1,vm.versionVisible=!1,vm.yearVisible=!1,vm.lifecycleModel.year="",vm.lifecycleModel.endDate="",vm.lifecycleModel.details="",vm.lifecycleModel.sequenceVersion=""}function setVersionAndDate(){vm.endDateVisible=!1,vm.startDateVisible=!0,vm.startDateLabel="DATED",vm.descriptionVisible=!1,vm.versionVisible=!0,vm.yearVisible=!1,vm.lifecycleModel.year="",vm.lifecycleModel.endDate="",vm.lifecycleModel.details=""}function setAsDatePeriod(){vm.endDateVisible=!0,vm.startDateVisible=!0,vm.startDateLabel="START_DATE",vm.descriptionVisible=!1,vm.versionVisible=!1,vm.yearVisible=!1,vm.lifecycleModel.year="",vm.lifecycleModel.details="",vm.lifecycleModel.sequenceVersion=""}function translateToEnglish(key){var translateText="";return translateText=$translate.instant(key,"","","en")}function convertDate(value){if(!value)return"";var date=new Date(value),m_names=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],result="";return result=m_names[date.getMonth()]+". "+date.getDate()+", "+date.getFullYear()}function convertToDate(){vm.lifecycleModel.dateFiled&&(vm.lifecycleModel.dateFiled=_parseDate(vm.lifecycleModel.dateFiled)),vm.lifecycleModel.startDate&&(vm.lifecycleModel.startDate=_parseDate(vm.lifecycleModel.startDate)),vm.lifecycleModel.endDate&&(vm.lifecycleModel.endDate=_parseDate(vm.lifecycleModel.endDate))}function _parseDate(value){var dateArray=value.split("-");3!=dateArray.length&&console.error("_parseDate error not 3 parts");var aDate=new Date(dateArray[0],dateArray[1]-1,dateArray[2]);return aDate}function _createYearList(){for(var start=1980,end=(new Date).getFullYear(),result=[],i=start;i<=end;i++)result.push(""+i);return result}function _setIdNames(){var scopeId="_"+$scope.$id;vm.lifecycleDetailsFormId="life_detail_form"+scopeId,vm.dateSubId="date_submitted"+scopeId,vm.controlNumId="control_num"+scopeId,vm.regActivityId="reg_activity_type"+scopeId,vm.seqDescriptId="sequence_type"+scopeId,vm.startDateId="start_date"+scopeId,vm.endDateId="end_date"+scopeId,vm.yearId="year_change"+scopeId,vm.descriptId="brief_desc"+scopeId,vm.versionId="version_no"+scopeId,vm.activityLeadId="activity_lead"+scopeId}var vm=this;vm.activityList=[],vm.activityTypeList=[],vm.pharmaList=[],vm.biolList=[],vm.postMarketList=[],vm.consumHealthList=[],vm.sequenceList=[],vm.descriptionList=[],vm.lifecycleModel={},vm.endDateVisible=!1,vm.yearVisible=!1,vm.startDateVisible=!1,vm.descriptionVisible=!1,vm.versionVisible=!1,vm.ectd=!1,vm.popOpened=!1,vm.alerts=[!1,!1],vm.dateOptions={showWeeks:!1},vm.lang=$translate.proposedLanguage()||$translate.use(),vm.yearList=_createYearList(),vm.descriptionObj=TransactionLists.getTransactionDescriptions(),vm.leadList=TransactionLists.getActivityLeadList(),vm.updateSummary=0,vm.showSummary=!1,vm.focusSummary=0,vm.dateFormatError=[{type:"required",displayAlias:"MSG_ERR_MAND"},{type:"date",displayAlias:"MSG_ERR_DATE_FORMAT"}],vm.minLength6Error=[{type:"required",displayAlias:"MSG_ERR_MAND"},{type:"minlength",displayAlias:"MSG_LENGTH_6NUM"}],vm.requiredOnly=[{type:"required",displayAlias:"MSG_ERR_MAND"}],vm.$onInit=function(){_setIdNames(),vm.yearList&&0!==vm.yearList.length||(vm.yearList=_createYearList()),vm.selectActivityList()},vm.$onChanges=function(changes){changes.activityTypes&&(vm.activityList=changes.activityTypes.currentValue,vm.activityList&&(vm.pharmaList=ActivityFormFilterService.getPharmaRAList(vm.activityList),vm.biolList=ActivityFormFilterService.getBiolRAList(vm.activityList),vm.postMarketList=ActivityFormFilterService.getPostMarketRAList(vm.activityList),vm.consumHealthList=ActivityFormFilterService.getConsumHealthList(vm.activityList))),changes.lifecycleRecord&&_updateLocalModel(changes.lifecycleRecord.currentValue),changes.isEctd&&(vm.ectd=changes.isEctd.currentValue),changes.sequenceUpdated&&!changes.lifecycleRecord&&vm.lifecycleRecord&&(vm.lifecycleModel.sequence=vm.lifecycleRecord.sequence),changes.showErrorSummary&&(vm.showSummary=changes.showErrorSummary.currentValue,vm.updateErrorSummaryState()),changes.errorSummaryUpdate&&vm.updateErrorSummaryState()},$scope.$watch("lifecycleCtrl.lifecycleDetailsForm.$dirty",function(){vm.lifecycleDetailsForm.$dirty&&vm.isDetailValid({state:!1})},!0),$scope.$watch("lifecycleCtrl.lifecycleDetailsForm.$error",function(){vm.updateErrorSummaryState(),vm.updateErrorSummary()},!0),vm.updateErrorSummaryState=function(){vm.updateSummary=vm.updateSummary+1},vm.openStartDate=function(){vm.startDateOpen=!0},vm.openEndDate=function(){vm.endDateOpen=!0},vm.openFiledDate=function(){vm.filedDateOpen=!0},vm.disableDeleteState=function(){if(!vm.ectd)return!0;var value=parseInt(vm.lifecycleModel.sequence);return value!=vm.enableDeleteIndex()},vm.selectActivityList=function(){if(!vm.lifecycleModel.activityLead)return void(vm.activityTypeList=[]);switch(vm.lifecycleModel.activityLead){case TransactionLists.getBiologicalLeadValue():vm.activityTypeList=vm.biolList;break;case TransactionLists.getPharmaLeadValue():vm.activityTypeList=vm.pharmaList;break;case TransactionLists.getPostMarketLeadValue():vm.activityTypeList=vm.postMarketList;break;case TransactionLists.getConsumHealthLeadValue():vm.activityTypeList=vm.consumHealthList;break;default:vm.lifecycleModel.activityLead&&console.warn("Not a valid lead choice"),vm.activityTypeList=[]}if(vm.lifecycleModel.activityType){var temp=$filter("filter")(vm.activityTypeList,{id:vm.lifecycleModel.activityType.id})[0];vm.lifecycleModel.activityType=temp}vm.updateErrorSummaryState()},vm.setSequenceList=function(){var value=vm.lifecycleModel.activityType.id,temp=vm.lifecycleModel.descriptionValue;switch(vm.lifecycleModel.activityTypeDisplay=vm.lifecycleModel.activityType.id,vm.lifecycleModel.descriptionValue="",value){case"B02-20160301-001":vm.descriptionList=TransactionLists.getAndsType();break;case"B02-20160301-018":vm.descriptionList=TransactionLists.getDinaType();break;case"B02-20160301-019":vm.descriptionList=TransactionLists.getDinbType();break;case"B02-20160301-031":vm.descriptionList=TransactionLists.getEundsType();break;case"B02-20160301-032":vm.descriptionList=TransactionLists.getEusndsType();break;case"B02-20160301-038":vm.descriptionList=TransactionLists.getLevel3Type();break;case"B02-20160301-046":vm.descriptionList=TransactionLists.getMPNCType();break;case"B02-20160301-047":vm.descriptionList=TransactionLists.getMPNDSType();break;case"B02-20160301-049":vm.descriptionList=TransactionLists.getMPSNDSType();break;case"B02-20160301-050":vm.descriptionList=TransactionLists.getNcType();break;case"B02-20160301-051":vm.descriptionList=TransactionLists.getNdsType();break;case"B02-20160301-070":vm.descriptionList=TransactionLists.getPdcType();break;case"B02-20160301-071":vm.descriptionList=TransactionLists.getPdcBType();break;case"B02-20160301-067":vm.descriptionList=TransactionLists.getPANDType();break;case"B02-20160301-068":vm.descriptionList=TransactionLists.getPBRERCType();break;case"B02-20160301-069":vm.descriptionList=TransactionLists.getPBRERPVType();break;case"B02-20160301-075":vm.descriptionList=TransactionLists.getPRNDSType();break;case"B02-20160301-077":vm.descriptionList=TransactionLists.getPRSNDSType();break;case"B02-20160301-078":vm.descriptionList=TransactionLists.getpSurCType();break;case"B02-20160301-079":vm.descriptionList=TransactionLists.getpSurPvType();break;case"B02-20160301-080":vm.descriptionList=TransactionLists.getRmpPvType();break;case"B02-20160301-082":vm.descriptionList=TransactionLists.getSandsType();break;case"B02-20160301-084":vm.descriptionList=TransactionLists.getSndsType();break;case"B02-20160301-085":
vm.descriptionList=TransactionLists.getSndsCArray();break;case"B02-20160301-087":vm.descriptionList=TransactionLists.getUdpvType();break;case"B02-20160301-088":vm.descriptionList=TransactionLists.getUdraType();break;case"B02-20160301-089":vm.descriptionList=TransactionLists.getYbprType();break;case"B02-20160301-028":vm.descriptionList=TransactionLists.getDSurType();break;case"B02-20160301-043":vm.descriptionList=TransactionLists.getMPDINType();break;case"B02-20160301-070":vm.descriptionList=TransactionLists.getPdcType();break;case"B02-20160301-071":vm.descriptionList=TransactionLists.getPdcBType();break;case"B02-20160301-020":vm.descriptionList=TransactionLists.getDindType();break;case"B02-20160301-021":vm.descriptionList=TransactionLists.getDinfType();break;default:vm.descriptionList=""}temp&&vm.descriptionList.indexOf(temp)!==-1?vm.lifecycleModel.descriptionValue=temp:setDetailsAsNone()},vm.setDetailsState=function(){var value=vm.lifecycleModel.descriptionValue;if(!value)return void(vm.descriptionList=[]);switch(value){case vm.descriptionObj.ADMINISTRATIVE:case vm.descriptionObj.BENEFIT_RISK_ASSESS:case vm.descriptionObj.CANCEL_LETTER:case vm.descriptionObj.CHANGE_TO_DIN:case vm.descriptionObj.DIN_DISCONTINUED:case vm.descriptionObj.DRUG_NOTIF_FORM:case vm.descriptionObj.INITIAL:case vm.descriptionObj.NOTIFICATION_CHANGE:case vm.descriptionObj.NOTIFICATION_INTERRUPT_SALE:case vm.descriptionObj.PANDEMIC_APPL:case vm.descriptionObj.POST_CLEARANCE_DATA:case vm.descriptionObj.POST_MARKET_SURV:case vm.descriptionObj.POST_NOC_CHANGE:case vm.descriptionObj.POST_AUTH_DIV1_CHANGE:case vm.descriptionObj.PRESUB_MEETING_PKG:case vm.descriptionObj.PRIORITY_REVIEW_RQ:case vm.descriptionObj.PRISTINE_PM:case vm.descriptionObj.PRISTINE_PM_2LANG:case vm.descriptionObj.RECON_DECIS_LTR_INTENT:case vm.descriptionObj.RECON_DECIS_RQ_RECON:case vm.descriptionObj.RECON_DECIS_OTHER_INFO:case vm.descriptionObj.LABEL_PREAPPROVAL_2LANG:case vm.descriptionObj.RISK_COMMUN_DOC:case vm.descriptionObj.SIGNAL_WORK_UP:case vm.descriptionObj.PRESUB_MEETING_RQ:case vm.descriptionObj.CORR_PATENT_MED:case vm.descriptionObj.ALLEGATION_NOTICE:case vm.descriptionObj.FORM_IV:case vm.descriptionObj.FORM_V:case vm.descriptionObj.CONSENT_LTR:case vm.descriptionObj.DATA_PROTECT_CORRESP:case vm.descriptionObj.SEQUENCE_CLEANUP:setDetailsAsNone(),vm.setConcatDetails();break;case vm.descriptionObj.COMMENTS_NOC:case vm.descriptionObj.COMMENTS_SUMMARY_BASIS:case vm.descriptionObj.COMMENTS_REGULARTORY_DECISION:case vm.descriptionObj.MEETING_MINUTES:case vm.descriptionObj.ADVISEMENT_LETTER_RESPONSE:case vm.descriptionObj.CLIN_CLARIF_RESPONSE:case vm.descriptionObj.EMAIL_RQ_RESPONSE:case vm.descriptionObj.LABEL_CLARIF_RESPONSE:case vm.descriptionObj.MHPD_RQ_RESPONSE:case vm.descriptionObj.NOC_RESPONSE:case vm.descriptionObj.NOD_RESPONSE:case vm.descriptionObj.NON_RESPONSE:case vm.descriptionObj.PROCESSING_CLARIF_RESPONSE:case vm.descriptionObj.QUAL_CLIN_CLARIF_RESPONSE:case vm.descriptionObj.QUAL_CLARIF_RESPONSE:case vm.descriptionObj.SDN_RESPONSE:case vm.descriptionObj.PHONE_RQ_RESPONSE:case vm.descriptionObj.BE_CLARIF_RESPONSE:case vm.descriptionObj.SCREENING_ACCEPT_RESPONSE:case vm.descriptionObj.SCREENING_CLARIF_RESPONSE:case vm.descriptionObj.NOL_RESPONSE:case vm.descriptionObj.CLARIF_RESPONSE:case vm.descriptionObj.NONCLIN_CLARIF_RESPONSE:setAsStartDate(),vm.setConcatDetails();break;case vm.descriptionObj.RMP_VERSION_DATE:setVersionAndDate(),vm.setConcatDetails();break;case vm.descriptionObj.FOR_PERIOD:setAsDatePeriod(),vm.setConcatDetails();break;case vm.descriptionObj.UNSOLICITED_DATA:setAsDescription(),vm.setConcatDetails();break;case vm.descriptionObj.YEAR_LIST_OF_CHANGE:setAsDescriptionYear(),vm.setConcatDetails();break;default:console.warn("Lifecycle Details activity not found: "+value)}},vm.setConcatDetails=function(){var startDate="",endDate="",concatText="",enDescription=translateToEnglish(vm.lifecycleModel.descriptionValue);vm.startDateVisible&&(startDate=convertDate(vm.lifecycleModel.startDate),concatText=vm.versionVisible?" dated "+startDate:enDescription+" dated "+startDate),vm.endDateVisible&&(endDate=convertDate(vm.lifecycleModel.endDate),concatText=enDescription+" of "+startDate+" to "+endDate),vm.descriptionVisible&&!vm.yearVisible&&(concatText=enDescription+"\n"+vm.lifecycleModel.details),vm.versionVisible&&(concatText=enDescription+" "+vm.lifecycleModel.sequenceVersion+concatText),vm.yearVisible&&(concatText=vm.lifecycleModel.year+", "+vm.lifecycleModel.details),concatText||(concatText=enDescription),vm.lifecycleModel.sequenceConcat=concatText},vm["delete"]=function(){vm.onDelete({id:vm.lifecycleModel.sequence})},vm.discardChanges=function(){vm.lifecycleDetailsForm.$pristine||(_updateLocalModel(vm.lifecycleRecord),vm.lifecycleDetailsForm.$setPristine(),vm.isDetailValid({state:vm.lifecycleDetailsForm.$valid}))},vm.updateValid=function(){vm.isDetailValid({state:vm.lifecycleDetailsForm.$valid&&!vm.lifecycleDetailsForm.$dirty})},vm.updateLivecycleModel=function(){vm.lifecycleDetailsForm.$valid?(vm.isDetailValid({state:!0}),vm.lifecycleDetailsForm.$setPristine(),vm.onUpdate({record:vm.lifecycleModel})):(vm.showSummary=!0,vm.makeFocused(),vm.updateErrorSummaryState())},vm.makeFocused=function(){vm.focusSummary=vm.focusSummary+1},vm.showError=function(ctrl){return!!ctrl&&!!(ctrl.$invalid&&ctrl.$touched||vm.showSummary&&ctrl.$invalid)},vm.addInstruct=function(value){angular.isUndefined(value)||value<vm.alerts.length&&(vm.alerts[value]=!0)},vm.closeAlert=function(value){angular.isUndefined(value)||value<vm.alerts.length&&(vm.alerts[value]=!1)}}angular.module("lcDetailsModule").component("cmpLifecycleDetails",{templateUrl:"app/scripts/components/lifecycleDetails/tpl-lifecycle-details_20190322_1544.html",controller:lifecycleRecCtrl,controllerAs:"lifecycleCtrl",bindings:{lifecycleRecord:"<",onUpdate:"&",isDetailValid:"&",onDelete:"&",enableDeleteIndex:"&",isEctd:"<",activityTypes:"<",sequenceUpdated:"<",errorSummaryUpdate:"<",showErrorSummary:"<",updateErrorSummary:"&"}}),lifecycleRecCtrl.$inject=["ActivityFormFilterService","TransactionLists","$filter","$translate","$scope"]}(),function(){"use strict";angular.module("lifecycleList",["filterLists","lcDetailsModule","expandingTable"])}(),function(){"use strict";function lifecycleListCtrl($filter,TransactionLists){function _checkFirstRecord(){if(vm.lifecycleList&&0!==vm.lifecycleList.length&&!(vm.lifecycleList.length>1)){var record=angular.copy(vm.lifecycleList[0]);if(vm.ectdValue){for(var seqText=""+vm.startingSequence,pad=4-seqText.length,padText="",i=0;i<pad;i++)padText+="0";seqText=padText+seqText,record.sequence=seqText}else record.sequence="";vm.lifecycleList[0]=record}}function convertDate(value){if(!value)return value;var aDate=new Date(value),month=+(aDate.getMonth()+1);month<10&&(month="0"+month);var day=aDate.getDate();day<10&&(day="0"+day);var result=aDate.getFullYear()+"-"+month+"-"+day;return result}var vm=this;vm.selectRecord=-1,vm.isDetailsValid=!0,vm.lifecycleList=[],vm.setCollapsed=0,vm.deletableIndex=0,vm.oneRecord="",vm.ectdValue=!1,vm.isParentDirty=!1,vm.addFocused=!1,vm.resetCollapsed=!1,vm.activityTypes=[],vm.startingSequence=0,vm.seqUpdated=!1,vm.showSummary=!1,vm.finalState=!1,vm.finalRecNum=0,vm.columnDef=[{label:"CONTROL_NUMBER",binding:"controlNumber",width:"8"},{label:"ACTIVITY_LEAD",binding:"activityLead",width:"12"},{label:"REG_ACTIVITY_TYPE",binding:"activityTypeDisplay",width:"30"},{label:"SEQUENCE_TYPE",binding:"sequenceConcat",width:"48"}],vm.$onInit=function(){vm.activityTypes=TransactionLists.getActivityTypes(),vm.selectRecord=-1,vm.addFocused=!1,vm.startingSequence=0},vm.$onChanges=function(changes){changes.records&&(vm.lifecycleList=changes.records.currentValue,vm.isDetailsValid=!0,vm.updateErrorState(),vm.startingSequence=0),changes.parentDirty&&(vm.isParentDirty=changes.parentDirty.currentValue),changes.isEctd&&(vm.ectdValue=changes.isEctd.currentValue,_checkFirstRecord()),changes.sequenceUpdated&&(vm.seqUpdated=changes.sequenceUpdated.currentValue),changes.showErrorSummary&&(vm.showSummary=changes.showErrorSummary.currentValue),changes.isFinal&&(vm.finalState=changes.isFinal.currentValue,vm.finalRecNum=0)},vm.deleteRecord=function(aID){var idx=vm.lifecycleList.indexOf($filter("filter")(vm.lifecycleList,{sequence:aID},!0)[0]);vm.lifecycleList.splice(idx,1),vm.onUpdate({newList:vm.lifecycleList}),vm.selectRecord=-1,vm.isDetailsValid=!0,vm.deprecateSequence(),vm.updateErrorState(),vm.resetCollapsed=!vm.resetCollapsed,vm.addFocused=!1},vm.lastRecordSequence=function(){return vm.getCurrentSequence()-1},vm.updateErrorState=function(){if(vm.lifecycleList&&0!==vm.lifecycleList.length){for(var i=0;i<vm.lifecycleList.length;i++)if(vm.lifecycleList[i].isSaved)return void(vm.oneRecord="is value");vm.oneRecord=""}else vm.oneRecord=""},vm.addTransaction=function(){var defaultTransaction=vm.getNewTransaction();vm.lifecycleList.unshift(defaultTransaction),vm.resetCollapsed=!vm.resetCollapsed,vm.selectRecord=0,vm.finalState&&vm.finalRecNum++,vm.addFocused=!1,vm.setValid(!1),vm.updateErrorState()},vm.setStartingSequence=function(){(isNaN(vm.startingSequence)||null===vm.startingSequence)&&(vm.startingSequence=0),vm.setSequenceValue({start:vm.startingSequence})},vm.isSelectedRecord=function(){return 0===vm.selectRecord},vm.isAddDisabled=function(){return vm.lifecycleList.length>0},vm.setValid=function(detailValid){vm.isDetailsValid=detailValid},vm.onUpdateLifecycleRecord=function(record){var idx=vm.lifecycleList.indexOf($filter("filter")(vm.lifecycleList,{sequence:record.sequence},!0)[0]);record.dateFiled=convertDate(record.dateFiled),record.startDate=convertDate(record.startDate),record.endDate=convertDate(record.endDate),record.isSaved=!0,vm.lifecycleList[idx]=angular.copy(record),vm.setValid(!0),vm.selectRecord=-1,vm.resetCollapsed=!vm.resetCollapsed,vm.addFocused=!0,vm.updateErrorState()}}angular.module("lifecycleList").component("cmpLifecycleList",{templateUrl:"app/scripts/components/lifecycleList/tpl-lifecycle-list_20190322_1544.html",bindings:{records:"<",onUpdate:"&",isAmend:"&",isFinal:"<",getNewTransaction:"&",setSequenceValue:"&",deprecateSequence:"&",showErrorSummary:"<",isEctd:"<",parentDirty:"<",sequenceUpdated:"<",getCurrentSequence:"&"},controller:lifecycleListCtrl,controllerAs:"lifeListCtrl"}),lifecycleListCtrl.$inject=["$filter","TransactionLists"]}(),function(){"use strict";angular.module("requesterRecordModule",["ui.select","hpfbConstants","errorMessageModule"])}(),function(){"use strict";function requesterRecordController($scope,$translate){function _setIdNames(){var scopeId="_"+$scope.$id;vm.solictedRqId="solicited_rq"+scopeId}var vm=this;vm.model={sequenceNumber:"",solicitedRequester:"",otherRequesterDetails:"",display:""},vm.lang=$translate.proposedLanguage()||$translate.use(),vm.showDetailErrors=!1,vm.requiredOnly=[{type:"required",displayAlias:"MSG_ERR_MAND"}],vm.$onInit=function(){vm.showDetailErrors=!1,_setIdNames()},vm.$onChanges=function(changes){changes.record&&changes.record.currentValue&&(vm.model=changes.record.currentValue),changes.showErrors&&(vm.showDetailErrors=changes.showErrors.currentValue)},vm.deleteRecord=function(){vm.onDelete({id:vm.model.sequenceNumber})},vm.showError=function(ctrl){return!!ctrl&&(ctrl.$invalid&&ctrl.$touched||ctrl.$invalid&&vm.showDetailErrors)}}angular.module("requesterRecordModule").config(function(uiSelectConfig){uiSelectConfig.theme="select2"}).component("cmpRequesterRecord",{templateUrl:"app/scripts/components/requesterRecord/tpl-requester-record_20190322_1544.html",controller:requesterRecordController,controllerAs:"requesterRecCtrl",bindings:{record:"<",onDelete:"&",showErrors:"<",requesterList:"<"}}),requesterRecordController.$inject=["$scope","$translate"]}(),function(){"use strict";angular.module("requesterListModule",["dataLists","requesterRecordModule","ui.select","hpfbConstants"])}(),function(){"use strict";function requesterListController($filter,getContactLists,$scope){function setRecord(value){vm.selectRecord=value}function loadContactData(){getContactLists.getInternalContactsWithoutOther().then(function(data){return vm.baseRequesters=data,!0})}function getListMaxID(){var out=0,list=vm.model.list;if(list)for(var i=0;i<list.length;i++)list[i].sequenceNumber>out&&(out=list[i].sequenceNumber);return out}function _setIdNames(){"_"+$scope.$id}var vm=this;vm.baseRequesters=[],vm.model={},vm.isDetailValid=!0,vm.resetToCollapsed=!0,vm.showDetailErrors=!1,vm.selectRecord=-1,vm.columnDef=[{label:"Requester Name",binding:"solicitedRequester",width:"100"}],vm.emptyModel={sequenceNumber:"",solicitedRequester:"",otherRequesterDetails:"",display:""},vm.$onInit=function(){_setIdNames(),vm.showDetailErrors=!1,angular.isUndefined(vm.model.list)&&(vm.model.list=[]),loadContactData()},vm.$onChanges=function(changes){changes.listItems&&(vm.model.list=changes.listItems.currentValue),changes.showErrors&&(vm.showDetailErrors=changes.showErrors.currentValue)},vm.addNew=function(){var item=(getListMaxID(),angular.copy(vm.emptyModel));item.sequenceNumber=getListMaxID()+1,vm.model.list.push(item),setRecord(-1),vm.resetToCollapsed=!vm.resetToCollapsed,setRecord(vm.model.list.length-1),vm.onUpdate({list:vm.model.list})},vm.deleteRecord=function(_id){var idx=vm.model.list.indexOf($filter("filter")(vm.model.list,{sequenceNumber:_id},!0)[0]);idx<0||(vm.model.list.splice(idx,1),vm.onUpdate({list:vm.model.list}))},vm.disableAddButton=function(){return 0!==vm.model.list.length&&vm.requesterListForm.$invalid}}angular.module("requesterListModule").component("cmpRequesterList",{templateUrl:"app/scripts/components/requesterList/tpl-requester-list_20190322_1544.html",controller:requesterListController,controllerAs:"requesterListCtrl",bindings:{listItems:"<",onUpdate:"&",onDelete:"&",showErrors:"<",updateErrorSummary:"&"}}),requesterListController.$inject=["$filter","getContactLists","$scope"]}(),function(){"use strict";angular.module("fileIO",[])}(),function(){"use strict";function ngFileSelect(hpfbFileReader){function link(scope,element,attrs){scope.rootTag=attrs.rootTag,element.bind("change",function(e){scope.file=(e.srcElement||e.target).files[0],hpfbFileReader.readAsDataText(scope.file,scope).then(function(result){scope.hpfbFileSelect({fileContent:result})})})}var directive={link:link,restrict:"A",scope:{hpfbFileSelect:"&"}};return directive}angular.module("fileIO").directive("hpfbFileSelect",ngFileSelect),ngFileSelect.$inject=["hpfbFileProcessing"]}(),function(){"use strict";function FileSelectController(hpfbFileProcessing){var vm=this;vm.fileTypes=".xml, .hcsc",vm.modelCallback=function(fileContent){vm.status="",fileContent&&(vm.status=fileContent.messages),vm.updateModelRoot({fileContent:fileContent}),angular.element(fileLoad).trigger("focus")}}angular.module("fileIO").component("hpfbFileSelect",{templateUrl:"app/scripts/components/fileIO/fileSelect_20190322_1544.html",controller:FileSelectController,bindings:{updateModelRoot:"&",rootElem:"@"}}),FileSelectController.$inject=["hpfbFileProcessing"]}(),function(){"use strict";function FileWriteController(hpfbFileProcessing){function _generateFile(){"JSON"===vm.saveType.toUpperCase()?hpfbFileProcessing.writeAsJson(vm.jsonToSave,vm.fileName,vm.rootTag):"XML"===vm.saveType.toUpperCase()&&hpfbFileProcessing.writeAsXml(vm.jsonToSave,vm.fileName,vm.rootTag)}function _init(){vm.buttonDisabled?"true"===vm.buttonDisabled.toLowerCase()?vm.buttonDisabled=!0:"false"===vm.buttonDisabled.toLowerCase()?vm.buttonDisabled=!1:vm.buttonDisabled=!1:vm.buttonDisabled=!1}var vm=this;vm.$onInit=_init,vm.generate=_generateFile}angular.module("fileIO").component("hpfbFileSave",{templateUrl:"app/scripts/components/fileIO/fileSave_20190322_1544.html",controller:FileWriteController,bindings:{jsonToSave:"<",rootTag:"@",saveType:"@",buttonLabel:"@",buttonDisabled:"@"}}),FileWriteController.$inject=["hpfbFileProcessing"]}(),function(){"use strict";function fileReader($q){function onLoad(reader,deferred,scope,file){return function(){scope.$apply(function(){if(file){var splitFile=file.name.split("."),fileType=splitFile[splitFile.length-1];fileType.toLowerCase()==draft_file_type?(convertToJSONObjects(reader,scope),checkRootTagMatch(reader,scope)):"xml"===fileType.toLowerCase()?(convertXMLToJSONObjects(reader,scope),checkRootTagMatch(reader,scope)):(convertResult.parseResult=null,convertResult.messages=msg_err_fileType,reader.parseResult=convertResult)}deferred.resolve(reader.parseResult)})}}function onError(reader,deferred,scope){return function(){scope.$apply(function(){deferred.reject(msg_err_load)})}}function getReader(deferred,scope,file){var reader=new FileReader;return reader.onload=onLoad(reader,deferred,scope,file),reader.onError=onError(reader,deferred,scope),reader.parseResult=null,reader}function readAsDataText(file,scope){var deferred=$q.defer(),reader=getReader(deferred,scope,file);return file?reader.readAsText(file):(reader.parseResult=convertResult,reader.parseResult.messages="",reader.parseResult.jsonResult=null,deferred.resolve(reader.parseResult)),deferred.promise}function convertToJSONObjects(reader,scope){try{convertResult.jsonResult=JSON.parse(reader.result),convertResult.jsonResult[scope.rootTag].importFileType=draft_file_type,convertResult.messages=msg_success,reader.parseResult=convertResult}catch(e){convertResult.jsonResult=null,convertResult.messages=msg_err_jsonparse,reader.parseResult=convertResult}}function convertXMLToJSONObjects(reader,scope){var xmlConfig={escapeMode:!0,emptyNodeForm:"text",useDoubleQuotes:!0},xmlConverter=new X2JS(xmlConfig);convertResult.jsonResult=xmlConverter.xml_str2json(reader.result),convertResult.jsonResult&&convertResult.jsonResult[scope.rootTag]?(convertResult.messages=msg_success,convertResult.jsonResult[scope.rootTag].importFileType="xml"):convertResult.messages=msg_err_xmlparse,reader.parseResult=convertResult}function convertJSONObjectsToXML(jsonObj){var xmlConfig={escapeMode:!0,emptyNodeForm:"text",useDoubleQuotes:!0},jsonConverter=new X2JS(xmlConfig),xmlResult=null;return xmlResult=jsonConverter.json2xml_str(jsonObj)}function checkRootTagMatch(reader,scope){scope.rootTag&&reader.parseResult&&reader.parseResult.jsonResult&&(reader.parseResult.jsonResult[scope.rootTag]||(reader.parseResult.jsonResult=null,reader.parseResult.messages=msg_err_formType))}function jsonToFile(jsonObj,fileName,rootTag){if(jsonObj){var makeStrSave=JSON.stringify(jsonObj),blob=new Blob([makeStrSave],{type:"text/plain;charset=utf-8"});fileName?fileName+="."+draft_file_type:fileName="hpfbDraft."+draft_file_type,saveAs(blob,fileName)}}function xmlToFile(jsonObj,fileName,rootTag,xslName){if(jsonObj){var xmlResult=convertJSONObjectsToXML(jsonObj);xmlResult=xslName?'<?xml version="1.0" encoding="UTF-8"?><?xml-stylesheet  type="text/xsl" href="'+xslName+'"?>'+xmlResult:'<?xml version="1.0" encoding="UTF-8"?><?xml-stylesheet  type="text/xsl" href="REP_Combined.xsl"?>'+xmlResult;var blob=new Blob([xmlResult],{type:"text/plain;charset=utf-8"});fileName?fileName+=".xml":fileName="hpfbXML.xml",saveAs(blob,fileName)}}var msg_success="MSG_SUCCESS_LOAD",msg_err_jsonparse="MSG_ERR_JSONPARSE",msg_err_xmlparse="MSG_ERR_XMLPARSE",msg_err_load="MSG_ERR_FILE_LOAD",msg_err_fileType="MSG_ERR_FILE_TYPE",msg_err_formType="MSG_ERR_FORM_TYPE",draft_file_type="hcsc",convertResult={jsonResult:"",messages:""},service={readAsDataText:readAsDataText,writeAsJson:jsonToFile,writeAsXml:xmlToFile};return service}angular.module("fileIO").factory("hpfbFileProcessing",fileReader),fileReader.$inject=["$q"]}(),function(){"use strict";angular.module("expandingTable",[])}(),function(){"use strict";function expandingTableCtrl($filter,$scope){function _setNumberColumns(){vm.disableErrorCol&&(vm.numberCols=vm.numberCols+1)}function _recalculateColumnDefs(colDefs,numCols){var caretWidth=2,errorWidth=5,totalWidth=caretWidth+errorWidth,toSubtract=totalWidth/numCols,result=[];if(vm.disableErrorCol)return colDefs;for(var i=0;i<numCols;i++){var oneDef=angular.copy(colDefs[i]);oneDef.width>toSubtract&&(oneDef.width=oneDef.width-toSubtract),result.push(oneDef)}return result}function updateTableRow(textIndex){var selectIndex=parseInt(textIndex);selectIndex>=0&&vm.selectTableRow(selectIndex)}function _createArray(arraySize,initialVal){for(var anArray=[],i=0;i<arraySize;i++)anArray.push(initialVal);return anArray}var vm=this;vm.focused=!1,vm.columnDefinitions={},vm.disableExpand=!1,vm.tableRowExpanded=!1,vm.tableRowIndexCurrExpanded="",vm.tableRowIndexPrevExpanded="",vm.numberCols=1,vm.disableErrorCol=!1,vm.dayDataCollapse=_createArray(0,!0),vm.formName="expandTblCtrl.transcludeForm",vm.$onInit=function(){vm.listItems&&(vm.dayDataCollapse=_createArray(vm.listItems.length,!0))},vm.getExpandedState=function(row){return row===vm.tableRowIndexCurrExpanded},vm.$onChanges=function(changes){if(changes.listItems&&(vm.listItems?vm.dayDataCollapse=_createArray(vm.listItems.length,!0):vm.dayDataCollapse=_createArray(0,!0),vm.resetTableRow()),changes.tname&&changes.tname.currentValue&&(vm.formName=changes.tname.currentValue),changes.resetToCollapsed&&(vm.resetTableRow(),changes.selectRecord||updateTableRow(vm.selectRecord)),changes.selectRecord){var selectIndex=parseInt(changes.selectRecord.currentValue);selectIndex>=0?vm.selectTableRow(selectIndex):vm.resetTableRow()}changes.disableSelection&&(vm.disableExpand=changes.disableSelection.currentValue),changes.columnDef&&(vm.numberCols=changes.columnDef.currentValue.length,vm.columnDefinitions=_recalculateColumnDefs(changes.columnDef.currentValue,vm.numberCols),_setNumberColumns()),changes.disableErrColumn&&(vm.disableErrorCol=changes.disableErrColumn.currentValue,vm.numberCols=vm.columnDef.length,vm.disableErrorCol=!0,_setNumberColumns())},vm.formInError=function(aForm){return aForm&&aForm.$invalid?"Y":"N"},vm.deletedRow=function(){vm.tableRowExpanded=!1,vm.tableRowIndexCurrExpanded=""},vm.resetTableRow=function(){vm.tableRowIndexPrevExpanded="",vm.tableRowExpanded=!1,vm.tableRowIndexCurrExpanded="",vm.listItems?vm.dayDataCollapse=_createArray(vm.listItems.length,!0):_createArray(0,!0)},vm.dayDataCollapseFn=function(){for(var i=0;vm.listItems.length-1;i+=1)vm.dayDataCollapse.append("true")},vm.selectTableRow=function(index){vm.disableExpand||("undefined"===vm.dayDataCollapse?vm.dayDataCollapse=vm.dayDataCollapseFn():vm.tableRowExpanded===!1&&""===vm.tableRowIndexCurrExpanded?(vm.tableRowIndexPrevExpanded="",vm.tableRowExpanded=!0,vm.tableRowIndexCurrExpanded=index,vm.dayDataCollapse[index]=!1):vm.tableRowExpanded===!0&&(vm.tableRowIndexCurrExpanded===index?(vm.tableRowExpanded=!1,vm.tableRowIndexCurrExpanded="",vm.dayDataCollapse[index]=!0):(vm.tableRowIndexPrevExpanded=vm.tableRowIndexCurrExpanded,vm.tableRowIndexCurrExpanded=index,vm.dayDataCollapse[vm.tableRowIndexPrevExpanded]=!0,vm.dayDataCollapse[vm.tableRowIndexCurrExpanded]=!1)))}}angular.module("expandingTable").component("cmpExpandingTable",{templateUrl:"app/scripts/components/expandingTable/tpl-expanding-table_20190322_1544.html",controller:expandingTableCtrl,controllerAs:"expandTblCtrl",transclude:!0,bindings:{title:"@",listItems:"<",columnDef:"<",disableSelection:"<",selectRecord:"<",resetToCollapsed:"<",disableErrColumn:"@",tname:"@"}}),expandingTableCtrl.$inject=["$filter","$scope"]}(),function(){"use strict";angular.module("contactModule",["dataLists","hpfbConstants","errorMessageModule"])}(),function(){"use strict";function contactCtrl(getContactLists,ENGLISH,FRENCH,$scope){function _setIdNames(){var scopeId=vm.fldId+"_"+$scope.$id;vm.salutationId="salutation"+scopeId,vm.firstNameId="firstName"+scopeId,vm.lastNameId="lastName"+scopeId,vm.langCorrespondId="langCorrespond"+scopeId,vm.jobTitleId="jobTitle"+scopeId,vm.faxId="fax_number"+scopeId,vm.phoneNumberId="phoneNumber"+scopeId,vm.phoneExtId="phoneExt"+scopeId,vm.contactEmailId="contactEmail"+scopeId}var vm=this;vm.isEditable=!0,vm.ngModelOptSetting={updateOn:"blur"},vm.salutationList=getContactLists.getSalutationList(),vm.langCorresppond=[ENGLISH,FRENCH],vm.faxRequired=!1,vm.phoneReg=/\(?([0-9]{3})\)?([ .-]?)([0-9]{3})\2([0-9]{4})/,vm.contactModel={salutation:"",givenName:"",surname:"",initials:"",title:"",phone:"",phoneExt:"",fax:""},vm.inputModelOptions={updateOn:"blur"},vm.fldId="",vm.requiredOnly=[{type:"required",displayAlias:"MSG_ERR_MAND"}],vm.emailError=[{type:"required",displayAlias:"MSG_ERR_MAND"},{type:"email",displayAlias:"MSG_ERR_EMAIL_FORMAT"}],vm.phoneError=[{type:"required",displayAlias:"MSG_ERR_MAND"},{type:"pattern",displayAlias:"MSG_ERR_PHONE_FORMAT"}],vm.faxError=[{type:"required",displayAlias:"MSG_ERR_MAND"},{type:"pattern",displayAlias:"MSG_ERR_FAX_FORMAT"}],vm.$onInit=function(){vm.langList=[ENGLISH,FRENCH],_setIdNames()},vm.$onChanges=function(changes){changes.contactRecord&&(vm.contactModel=changes.contactRecord.currentValue),changes.isAmend&&(vm.isEditable=changes.isAmend.currentValue),changes.faxMandatory&&(vm.faxRequired=changes.faxMandatory.currentValue),changes.fieldSuffix&&(vm.fldId=changes.fieldSuffix.currentValue,vm.fldId||(vm.fldId=""))},vm.showError=function(ctrl){return!!ctrl&&!!(ctrl.$invalid&&ctrl.$touched||vm.showErrors()&&ctrl.$invalid)},$scope.$watch("contCtrl.contactForm.$error",function(){vm.updateErrorSummary()},!0)}angular.module("contactModule").component("cmpContactDetails",{templateUrl:"app/scripts/components/contactDetails/tpl-contact-details_20190322_1544.html",controller:contactCtrl,controllerAs:"contCtrl",bindings:{contactRecord:"<",onUpdate:"&",isAmend:"<",showErrors:"&",faxMandatory:"@",updateErrorSummary:"&",fieldSuffix:"<"}}),contactCtrl.$inject=["getContactLists","ENGLISH","FRENCH","$scope"]}(),function(){"use strict";angular.module("transactionInfo",["lifecycleList","requesterListModule","filterLists","hpfbConstants","ui.bootstrap","dataLists","ui.select","addressModule","contactModule","transactionFeesModule","alertModule","errorMessageModule"])}(),function(){"use strict";function transactionInfoCtrl($scope,OTHER,YES,NO,NEW,EXISTING,getContactLists,getRoleLists,ENGLISH,FRENCH){function isEctdValue(){return vm.transactionModel.isEctd===YES}function isSolicitedValue(){return vm.transactionModel.isSolicited===YES}function isActivityChangesValue(){return vm.transactionModel.isActivityChanges===YES}function isNewActivity(){return vm.transactionModel.transactionType===NEW}function loadAdminSubData(){getContactLists.getAdminSubType().then(function(data){return vm.adminSubTypeList=data,!0})}function loadUserListData(){getContactLists.getInternalContactsWithoutOther().then(function(data){return vm.userList=data,!0})}function _setIdNames(){var scopeId="_"+$scope.$id;vm.companyId="company_id"+scopeId,vm.dossierId="dossier_id"+scopeId,vm.productNameId="prod_name"+scopeId,vm.isEctdId="is_ectd"+scopeId,vm.isSolicitedId="is_solicited"+scopeId,vm.solictedRqId="solicited_rq"+scopeId,vm.solicitedOtherId="solicited_rq_other"+scopeId,vm.companyNameId="company_noabbrev"+scopeId,vm.contactSameId="confirm_contact_valid"+scopeId,vm.isFeesId="is_fee_transaction"+scopeId,vm.typeId="dossier_type"+scopeId,vm.isNewActivityId="is_new_activity"+scopeId,vm.thirdPartyId="is_signed_3rd_party"+scopeId,vm.isAdminSubId="is_admin_submission"+scopeId,vm.adminSubTypeId="admin_sub_type"+scopeId,vm.isPriorityId="is_priority"+scopeId,vm.isNocId="is_noc"+scopeId}var vm=this;vm.ngModelOptSetting={updateOn:"blur"},vm.transactionModel={},vm.yesNoList=[YES,NO],vm.newExistingList=[NEW,EXISTING],vm.showNewActivityFields=!1,vm.showThirdPartyNote=!1,vm.showAdminSub=!1,vm.showEctdSection=!0,vm.showSolicitedDetail=!1,vm.showOtherSolicitedDetail=!1,vm.activityEditable=!0,vm.isEctd=!1,vm.alerts=[!1,!1,!1,!1,!1,!1,!1,!1],vm.requesterList=[],vm.userList=[],vm.formTypeList=getRoleLists.getFormTypes(),vm.lang=ENGLISH,vm.sequenceChange=!1,vm.requiredOnly=[{type:"required",displayAlias:"MSG_ERR_MAND"}],vm.min5Error=[{type:"required",displayAlias:"MSG_ERR_MAND"},{type:"minlength",displayAlias:"MSG_LENGTH_MIN5"}],vm.min7Error=[{type:"required",displayAlias:"MSG_ERR_MAND"},{type:"minlength",displayAlias:"MSG_LENGTH_7"}],vm.showSummary=!1,vm.$onInit=function(){_setIdNames(),vm.updateActivityType(),vm.setThirdParty(),vm.setAdminSubmission(),vm.updateEctdState(),vm.setSolicitedState(),loadAdminSubData(),loadUserListData(),vm.finalState=!1,vm.displayResetBtn=!1},vm.$onChanges=function(changes){changes.transactionRoot&&(vm.transactionModel=changes.transactionRoot.currentValue,vm.updateActivityType(),vm.setThirdParty(),vm.setAdminSubmission(),vm.updateEctdState(),vm.setSolicitedState()),changes.language&&(vm.lang=changes.language.currentValue),changes.sequenceUpdated&&(vm.sequenceChange=changes.sequenceUpdated.currentValue),changes.showErrorSummary&&(vm.showSummary=changes.showErrorSummary.currentValue),changes.isFinal&&(vm.finalState=changes.isFinal.currentValue)},vm.isFeesIndicated=function(){return vm.transactionModel.isFees===YES},vm.getNewTransaction=function(){return vm.getTransaction()},vm.setSequence=function(start){(isNaN(start)||null===start)&&(start=0),vm.setStartingSequence({startVal:start})},vm.getNewRepContact=function(){return vm.getRepContact()},vm.subtractSequence=function(){vm.deprecateSequence()},vm.showFormErrors=function(){},vm.showErrors=function(){return vm.showSummary},vm.showError=function(ctrl){if(ctrl)return!!(ctrl.$invalid&&ctrl.$touched||vm.showSummary&&ctrl.$invalid)},vm.updateActivityType=function(){vm.showNewActivityFields=isNewActivity(),vm.showNewActivityFields||(vm.transactionModel.isThirdParty="",vm.transactionModel.isPriority="",vm.transactionModel.isNoc="",vm.transactionModel.isAdminSub="",vm.transactionModel.subType="",vm.showThirdPartyNote=!1,vm.showAdminSub=!1)},vm.setThirdParty=function(){vm.showThirdPartyNote=vm.transactionModel.isThirdParty===YES},vm.updateEctdState=function(){isEctdValue()?vm.isEctd=!0:vm.isEctd=!1},vm.updateFeeState=function(){vm.transactionModel.isFees===YES?vm.transactionModel.feeDetails=vm.getFee():vm.transactionModel.feeDetails=null},vm.setSolicitedState=function(){isSolicitedValue()?vm.showSolicitedDetail=!0:(vm.showSolicitedDetail=!1,vm.transactionModel.solicitedRequesterReord=[])},vm.updateActivityChanges=function(){vm.activityEditable=isActivityChangesValue()},vm.updateRequesterList=function(list){list&&(vm.transactionModel.solicitedRequesterReord=list)},vm.setAdminSubmission=function(){vm.transactionModel.isAdminSub===YES?vm.showAdminSub=!0:(vm.showAdminSub=!1,vm.transactionModel.subType="")},vm.addInstruct=function(value){angular.isUndefined(value)||value<vm.alerts.length&&(vm.alerts[value]=!0)},vm.closeAlert=function(value){angular.isUndefined(value)||value<vm.alerts.length&&(vm.alerts[value]=!1)},vm.isFrench=function(){return vm.lang===FRENCH},vm.resetSpecificValues=function(){vm.finalState&&(vm.transactionModel.transactionType="",vm.updateActivityType(),vm.setThirdParty(),vm.setAdminSubmission(),vm.transactionModel.isSolicited="",vm.setSolicitedState(),vm.transactionModel.ectd.lifecycleRecord=[],vm.transactionModel.projectManager1="",vm.transactionModel.projectManager2="",vm.transactionModel.isFees="",vm.transactionModel.feeDetails=null,vm.transactionModel.confirmContactValid=!1,vm.transactionModel.resetBtnClicked=!0)},vm.disableProductName=function(){return vm.finalState},$scope.$watch("transInfoCtrl.transInfoForm.$error",function(){vm.updateErrorSummary()},!0)}angular.module("transactionInfo").config(function(uiSelectConfig){uiSelectConfig.theme="select2"}).component("cmpTransactionInfo",{templateUrl:"app/scripts/components/transactionInfo/tpl-transaction-info_20190322_1544.html",controller:transactionInfoCtrl,controllerAs:"transInfoCtrl",bindings:{transactionRoot:"<",isAmend:"<",isFinal:"<",getTransaction:"&",setStartingSequence:"&",getRepContact:"&",getFee:"&",resetEctd:"&",deprecateSequence:"&",language:"<",sequenceUpdated:"<",getCurrentSequence:"&",showErrorSummary:"<",updateErrorSummary:"&"}}),transactionInfoCtrl.$inject=["$scope","OTHER","YES","NO","NEW","EXISTING","getContactLists","getRoleLists","ENGLISH","FRENCH"];
}(),function(){"use strict";angular.module("transactionMainModule",["transactionInfo","transactionService","transactionLoadService","fileIO","services","dataLists","filterLists","numberFormat","errorSummaryModule","errorMessageModule"])}(),function(){"use strict";function TransactionMainCtrl(TransactionService,hpfbFileProcessing,$filter,$translate,$scope,ENGLISH,EXTERNAL_TYPE){function _getFileName(){var date=new Date,filename="HCREPRT",month=date.getMonth()+1,day=date.getDate(),hours=date.getHours(),minutes=date.getMinutes(),separator="-";return month<10&&(month="0"+month),day<10&&(day="0"+day),hours<10&&(hours="0"+hours),minutes<10&&(minutes="0"+minutes),filename=filename+separator+date.getFullYear()+separator+month+separator+day+separator+hours+minutes,filename.toLowerCase()}function _transformFile(){return vm.transactionService.transformToFileObj(vm.transaction)}function _loadFileContent(fileContent){if(fileContent){var resultJson=fileContent.jsonResult;resultJson&&(vm.transactionService.transformFromFileObj(resultJson),vm.transaction={},vm.transaction=vm.transactionService.getModelInfo(),vm.isFinal=vm.transactionService.isFinal)}}function _setIdNames(){var scopeId="_"+$scope.$id;vm.formId="transaction_form"+scopeId}var vm=this;vm.savePressed=!1,vm.userType=EXTERNAL_TYPE,vm.transactionService=new TransactionService,vm.rootTag=vm.transactionService.getRootTag(),vm.transaction=vm.transactionService.getModelInfo(),vm.showContent=_loadFileContent,vm.alerts=[!1,!1],vm.lang=$translate.proposedLanguage()||$translate.use(),vm.sequenceUpdated=!1,vm.isFinal=!1,vm.updateSummary=0,vm.focusSummary=0,vm.exclusions={"lifecycleCtrl.lifecycleDetailsForm":"true"},vm.transcludeList={},vm.alias={saveLifeRec:{type:"buttonSearch",buttonName:"saveLifecycleRec"},oneLifeRec:{type:"buttonSearch",buttonName:"addTransactionRec"},one_payment_method:{type:"fieldset",parent:"fs_payment_methods"}},vm.requiredOnly=[{type:"required",displayAlias:"MSG_ERR_MAND"}],vm.$onInit=function(){vm.updateSummary=vm.updateSummary+1,vm.updateSummary=vm.updateSummary+1,_setIdNames()},vm.saveJson=function(){var writeResult=_transformFile();vm.rootTag=vm.transactionService.getRootTag(),hpfbFileProcessing.writeAsJson(writeResult,_getFileName(),vm.rootTag),vm.savePressed=!0},vm.saveXML=function(){if(vm.transactionEnrolForm.$invalid)vm.focusSummary++,vm.updateErrorSummaryState(),vm.savePressed=!0;else{var writeResult=_transformFile();hpfbFileProcessing.writeAsXml(writeResult,_getFileName(),vm.rootTag,vm.transactionService.getXSLFileName()),vm.savePressed=!1}},vm.updateErrorSummaryState=function(){vm.updateSummary=vm.updateSummary+1},vm.disableFinalXmlBtn=function(){return!!vm.isFinal&&!vm.transaction.resetBtnClicked},vm.getNewRepContact=function(){return vm.transactionService.createRepContact()},vm.setSequenceNumber=function(startVal){vm.transactionService.setSequenceNumber(startVal);vm.sequenceUpdated=!vm.sequenceUpdated},vm.updateAddressRecord=function(address){if(address){var idx=vm.company.addressList.indexOf($filter("filter")(vm.company.addressList,{addressID:address.addressID},!0)[0]);vm.company.addressList[idx]=address;var temp=vm.company.addressList;vm.company.addressList=[],vm.company.addressList=temp}},vm.isExtern=function(){return vm.userType==EXTERNAL_TYPE},vm.showErrors=function(){return vm.savePressed},vm.addInstruct=function(value){angular.isUndefined(value)||value<vm.alerts.length&&(vm.alerts[value]=!0)},vm.closeAlert=function(value){angular.isUndefined(value)||value<vm.alerts.length&&(vm.alerts[value]=!1)},vm.isFrench=function(){return vm.lang!==ENGLISH}}angular.module("transactionMainModule").component("cmpTransactionMain",{templateUrl:"app/scripts/components/transactionMain/tpl-transaction-main_20190322_1544.html",controller:TransactionMainCtrl,controllerAs:"main"}),TransactionMainCtrl.$inject=["TransactionService","hpfbFileProcessing","$filter","$translate","$scope","ENGLISH","EXTERNAL_TYPE"]}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRyYW5zYWN0aW9uQXBwRVhULWZyLmpzIiwidHJhbnNhY3Rpb25UcmFuc2xhdGlvbnMuanMiLCJvbmx5LWRpZ2l0c18yMDE5MDMyMl8xNTQ0LmpzIiwiYWN0aXZpdHktZm9ybS1maWx0ZXItc2VydmljZV8yMDE5MDMyMl8xNTQ0LmpzIiwiaHBmYi1jb25zdGFudHNfMjAxOTAzMjJfMTU0NC5qcyIsImZpbHRlci1saXN0c18yMDE5MDMyMl8xNTQ0LmpzIiwiZGF0YS1saXN0c18yMDE5MDMyMl8xNTQ0LmpzIiwiZGF0YS1saXN0cy5hY3Rpdml0eV8yMDE5MDMyMl8xNTQ0LmpzIiwidHJhbnNhY3Rpb24tbG9hZC1zZXJ2aWNlXzIwMTkwMzIyXzE1NDQuanMiLCJ0cmFuc2FjdGlvblNlcnZpY2VfMjAxOTAzMjJfMTU0NC5qcyIsImNtcC10cmFuc2FjdGlvbi1mZWVzXzIwMTkwMzIyXzE1NDQuanMiLCJjbXAtZXJyb3Itc3VtbWFyeV8yMDE5MDMyMl8xNTQ0LmpzIiwiY21wLWVycm9yLW1lc3NhZ2VfMjAxOTAzMjJfMTU0NC5qcyIsImNtcC1hbGVydF8yMDE5MDMyMl8xNTQ0LmpzIiwiY21wLWFkZHJlc3MtZGV0YWlsc18yMDE5MDMyMl8xNTQ0LmpzIiwiY21wLWxpZmVjeWNsZS1kZXRhaWxzXzIwMTkwMzIyXzE1NDQuanMiLCJjbXAtbGlmZWN5Y2xlLWxpc3RfMjAxOTAzMjJfMTU0NC5qcyIsImNtcC1yZXF1ZXN0ZXItcmVjb3JkXzIwMTkwMzIyXzE1NDQuanMiLCJjbXAtcmVxdWVzdGVyLWxpc3RfMjAxOTAzMjJfMTU0NC5qcyIsIkZpbGVJTy5ocGZiRmlsZVJlYWRlcl8yMDE5MDMyMl8xNTQ0LmpzIiwiY21wLWV4cGFuZGluZy10YWJsZV8yMDE5MDMyMl8xNTQ0LmpzIiwiY21wLWNvbnRhY3QtZGV0YWlsc18yMDE5MDMyMl8xNTQ0LmpzIiwiY21wLXRyYW5zYWN0aW9uLWluZm9fMjAxOTAzMjJfMTU0NC5qcyIsImNtcC10cmFuc2FjdGlvbi1tYWluXzIwMTkwMzIyXzE1NDQuanMiXSwibmFtZXMiOlsiYW5ndWxhciIsIm1vZHVsZSIsIk1haW5Db250cm9sbGVyIiwidm0iLCJ0aGlzIiwidXNlclR5cGUiLCJjb250cm9sbGVyIiwiY29uZmlnIiwiJHRyYW5zbGF0ZVByb3ZpZGVyIiwiJGh0dHBQcm92aWRlciIsIiRsb2NhdGlvblByb3ZpZGVyIiwiaHRtbDVNb2RlIiwiZW5hYmxlZCIsInJlcXVpcmVCYXNlIiwicmV3cml0ZUxpbmtzIiwiZGlyZWN0aXZlUHJpb3JpdHkiLCJwcmVmZXJyZWRMYW5ndWFnZSIsInVzZUxvYWRlciIsInVzZVNhbml0aXplVmFsdWVTdHJhdGVneSIsImZvcmNlQXN5bmNSZWxvYWQiLCJkZWZhdWx0cyIsImhlYWRlcnMiLCJnZXQiLCJ0cmFuc2xhdGlvbnMiLCJDSVRZIiwiQ09VTlRSWSIsIlBST1ZJTkNFIiwiUE9TVEFMIiwiUFJPVlNUQVRFIiwiU1RBVEUiLCJTVFJFRVQiLCJaSVAiLCJDT01QQU5ZIiwiQUREX0FERFJFU1MiLCJDSVRZX1RPV04iLCJTQVZFX0FERFIiLCJERUxFVEVfQUREUiIsIkFERFJfSU5GTyIsIkFERFJfREVUQUlMUyIsIkFERFJfUk9MRV9MRUdFTkQiLCJQUk9EVUNUU19JTVBPUlRFRCIsIlBST0RVQ1RfVFlQRVMiLCJBTExfUFJPRFVDVFMiLCJTRUxFQ1RFRF9QUk9EVUNUUyIsIklERU5USUZZX1BST0RVQ1RTIiwiQUREX0RPU1NJRVJfSUQiLCJJTVBPUlRFUl9OT05DRE4iLCJDT1VOVFJZX0NIT09TRSIsIkNPVU5UUllfU0VBUkNIIiwiUFJPVklOQ0VMSVNUIiwiQUIiLCJCQyIsIk1CIiwiTkIiLCJOTCIsIk5UIiwiTlMiLCJOVSIsIk9OIiwiUEUiLCJRQyIsIlNLIiwiWVQiLCJBTCIsIkFLIiwiQVoiLCJBUiIsIkNBIiwiQ08iLCJDVCIsIkRFIiwiREMiLCJGTCIsIkdBIiwiSEkiLCJJRCIsIklMIiwiSU4iLCJJQSIsIktTIiwiS1kiLCJMQSIsIk1FIiwiTUQiLCJNQSIsIk1JIiwiTU4iLCJNUyIsIk1PIiwiTVQiLCJORSIsIk5WIiwiTkgiLCJOSiIsIk5NIiwiTlkiLCJOQyIsIk5EIiwiT0giLCJPSyIsIk9SIiwiUEEiLCJSSSIsIlNDIiwiU0QiLCJUTiIsIlRYIiwiVVQiLCJWVCIsIlZBIiwiV0EiLCJXViIsIldJIiwiV1kiLCJGSVJTVE5BTUUiLCJMQVNUTkFNRSIsIklOSVRJQUxTIiwiTEFOR0NPUlJFU1BPTkQiLCJKT0JUSVRMRSIsIlNBTFVUQVRJT04iLCJTQUxVVF9NUiIsIlNBTFVUX01TIiwiU0FMVVRfRFIiLCJTQUxVVF9NUlMiLCJST0xFX1BSSU1BUlkiLCJST0xFX1NFQ09OREFSWSIsIkNPTlRBQ1RFTUFJTCIsIkZBWF9OVU1CRVIiLCJQSE9ORV9FWFQiLCJST0xFUyIsIlBIT05FTlVNQkVSIiwiQ09OVEFDVF9JTkZPIiwiQU1FTkQiLCJSRVBfQ09OVEFDVCIsIk9ORV9ST0xFIiwiQ09OVEFDVF9ERVRBSUxTIiwiQUREX0NPTlRBQ1QiLCJDT05UQUNUX1JPTEVfTEVHRU5EIiwiQ09OVEFDVF9ST0xFX0lOU1RSVUNUIiwiQUREX1JFUFJFUyIsIkRFTEVURV9SRVBSRVMiLCJTQVZFX1JFUFJFUyIsIkFERFJfUk9MRVMiLCJBUFBMX1NUQVRVUyIsIkVOUk9MX1ZFUlNJT04iLCJEQVRFX1NBVkVEIiwiQU1FTkRfRU5ST0wiLCJBTUVORF9NU0ciLCJSRUFTT05fQU1FTkQiLCJTRUxFQ1RfTE9BRCIsIk1TR19TVUNDRVNTX0xPQUQiLCJNU0dfRVJSX0pTT05QQVJTRSIsIk1TR19FUlJfWE1MUEFSU0UiLCJNU0dfRVJSX0ZJTEVfTE9BRCIsIk1TR19FUlJfRklMRV9UWVBFIiwiTVNHX0VSUl9GT1JNX1RZUEUiLCJNU0dfRVJSX0NIRUNLU1VNX0ZBSUwiLCJZIiwiTiIsIkFERCIsIkRFTEVURVJPVyIsIlNFTEVDVEVEUk9XIiwiUkVRVUlSRUQiLCJST0xFU19TRUxFQ1QiLCJORVciLCJBUFBST1ZFRCIsIkZJTkFMIiwiQ0xJQ0tfVE9HR0xFIiwiQU1FTkRfUkVDT1JEIiwiZW4iLCJmciIsIkRJU0NBUkRfQ0hBTkdFUyIsIlJFUFNFQ09OREFSWSIsIlJFUFBSSU1BUlkiLCJNQUlMSU5HIiwiQklMTElORyIsIk1BTlVGQUNUVVJFUiIsIklNUE9SVEVSX0FERFJFU1MiLCJDT05UQUNUX01BSUxJTkciLCJDT05UQUNUX0JJTExJTkciLCJDT05UQUNUX01BTlVGQUNUVVJFUiIsIkNPTlRBQ1RfSU1QT1JURVIiLCJBUFBST1ZFX0ZJTkFMIiwiU0FWRV9EUkFGVCIsIlBSSU1BUlkiLCJTRUNPTkRBUlkiLCJUT0dHTEVfRVhQQU5EIiwiQ09OVFJPTF9OVU1CRVIiLCJSRVBfQ09OVEFDVF9JTkZPIiwiU0FWRV9DT05UQUNUIiwiREVMRVRFX0NPTlRBQ1QiLCJDT01QQU5ZX0lEIiwiRE9TU0lFUl9JRCIsIklNUE9SVEVSIiwiSU1QT1JURVJJRCIsIklNUE9SVEVSX0NPTVBBTllfTkFNRSIsIklNUE9SVEVSX0NPTVBBTllfSURfSUYiLCJJTVBPUlRFUl9DT01QQU5ZX05BTUVfSUYiLCJFUlJPUlMiLCJVTktOT1dOIiwiQklPTE9HSUMiLCJQSEFSTUFDRVVUSUNBTCIsIkNMSU5JQ0FMX1RSSUFMIiwiVkVURVJJTkFSWSIsIkhFTFBfRklMRV9MT0FEIiwiRVhQQU5EIiwiSEVMUF9BQ1RJVklUWV9NQUlOIiwiSEVMUF9BQ1RJVklUWV9SRVAiLCJDQUxFTkRBUiIsIkhJREVfQ0FMRU5EQVIiLCJPVEhFUiIsIkhFTFBfUkVQX0NPTlRBQ1QiLCJPVEhFUl9VTklUUyIsIkNPTVBBTllOQU1FIiwiQ09QWSIsIkRFTEVURSIsIlNBVkVfV09SS0lORyIsIkNPTVBBTllfTk9BQkJSRVYiLCJDTE9TRV9BTEVSVCIsIkNPTExBUFNFIiwiU0FWRV9SRUNPUkQiLCJERUxFVEVfUkVDT1JEIiwiQ09OVFJPTF9OVU0iLCJPVEhFUl9ERVRBSUxTIiwiUFJPRF9OQU1FIiwiUFJPRF9OQU1FX0hFTFAiLCJQUk9QX05BTUVfSEVMUCIsIlJFTEFURURfSU5GT19IRUxQIiwiRE9TU0lFUl9UWVBFIiwiTVNHX0VSUl9NQU5EIiwiTVNHX0VSUl9FTUFJTF9GT1JNQVQiLCJNU0dfRVJSX1JPTEUiLCJNU0dfRVJSX0RJU0lUWVBFIiwiTVNHX0VSUl9BRERSRVNTIiwiTVNHX0VSUl9DT05UQUNUX05VTSIsIk1TR19FUlJfUEhPTkVfRk9STUFUIiwiTVNHX0VSUl9GQVhfRk9STUFUIiwiTVNHX0VSUl9BTExST0xFIiwiTVNHX0VSUl9BRERSRVNTU1JPTEUiLCJNU0dfRVJSX1BPU1RBTCIsIk1TR19FUlJfWklQIiwiTVNHX0VSUl9EQVRFX0ZPUk1BVCIsIk1BSUxJTkdfU0VMIiwiTUFOVUZBQ1RfU0VMIiwiTUFJTF9TRUwiLCJCSUxMSU5HX1NFTCIsIklNUE9SVEVSX1NFTCIsIlJFUFBSSU1fU0VMIiwiUkVQQUxUX1NFTCIsIk1TR19MRU5HVEhfTUlONSIsIk1TR19MRU5HVEhfNiIsIk1TR19MRU5HVEhfNk5VTSIsIk1TR19MRU5HVEhfOE5VTSIsIk1TR19MRU5HVEhfNyIsIk1TR19MRU5HVEhfN05VTSIsIk9ORV9SRVAiLCJNU0dfRVJSX05PVElGX1NFTCIsIk1TR19FUlJfTUlOX1BPUyIsIk1TR19FUlJfTUFYIiwiQUREX1RSQU5TQUNUSU9OIiwiU0VRVUVOQ0VfTlVNIiwiREFURV9TVUJNSVRURUQiLCJTRVFVRU5DRV9ERVNDUklQVCIsIklTX0FDVENIQU5HRVMiLCJET1NTSUVSX05BTUUiLCJJU19FQ1REIiwiSVNfU09MSUNJVEVEIiwiU09MSUNJVEVEX1JRIiwiU09MSUNJVEVEX1JRX09USEVSIiwiUFJPSl9NQU5BR0VSX05BTUUiLCJEQVRFRCIsIlNUQVJUX0RBVEUiLCJFTkRfREFURSIsIlJFR19BQ1RJVklUWSIsIlJFR19BQ1RJVklUWV9UWVBFIiwiU0VRVUVOQ0VfVFlQRSIsIlZFUlNJT05fTk8iLCJCUklFRl9ERVNDIiwiQURNSU5JU1RSQVRJVkUiLCJCRU5FRklUX1JJU0tfQVNTRVNTIiwiQ0FOQ0VMX0xFVFRFUiIsIkNIQU5HRV9UT19ESU4iLCJDT01NRU5UU19OT0MiLCJDT01NRU5UU19TVU1NQVJZX0JBU0lTIiwiQ09NTUVOVFNfUkVHVUxBUlRPUllfREVDSVNJT04iLCJESU5fRElTQ09OVElOVUVEIiwiRFJVR19OT1RJRl9GT1JNIiwiRk9SX1BFUklPRCIsIklOSVRJQUwiLCJNRUVUSU5HX01JTlVURVMiLCJOT1RJRklDQVRJT05fQ0hBTkdFIiwiTk9USUZJQ0FUSU9OX0lOVEVSUlVQVF9TQUxFIiwiUEFOREVNSUNfQVBQTCIsIlBPU1RfQ0xFQVJBTkNFX0RBVEEiLCJQT1NUX01BUktFVF9TVVJWIiwiUE9TVF9OT0NfQ0hBTkdFIiwiUE9TVF9BVVRIX0RJVjFfQ0hBTkdFIiwiUFJFU1VCX01FRVRJTkdfUEtHIiwiUFJFU1VCX01FRVRJTkdfUlEiLCJQUklPUklUWV9SRVZJRVdfUlEiLCJQUklTVElORV9QTSIsIlBSSVNUSU5FX1BNXzJMQU5HIiwiQURWSVNFTUVOVF9MRVRURVJfUkVTUE9OU0UiLCJDTElOX0NMQVJJRl9SRVNQT05TRSIsIkVNQUlMX1JRX1JFU1BPTlNFIiwiTEFCRUxfQ0xBUklGX1JFU1BPTlNFIiwiTUhQRF9SUV9SRVNQT05TRSIsIk5PQ19SRVNQT05TRSIsIk5PRF9SRVNQT05TRSIsIk5PTl9SRVNQT05TRSIsIk5PTF9SRVNQT05TRSIsIlBST0NFU1NJTkdfQ0xBUklGX1JFU1BPTlNFIiwiUVVBTF9DTElOX0NMQVJJRl9SRVNQT05TRSIsIlFVQUxfQ0xBUklGX1JFU1BPTlNFIiwiU0NSRUVOSU5HX0FDQ0VQVF9SRVNQT05TRSIsIlNDUkVFTklOR19DTEFSSUZfUkVTUE9OU0UiLCJTRE5fUkVTUE9OU0UiLCJQSE9ORV9SUV9SRVNQT05TRSIsIlJJU0tfQ09NTVVOX0RPQyIsIlJNUF9WRVJTSU9OX0RBVEUiLCJTSUdOQUxfV09SS19VUCIsIlVOU09MSUNJVEVEX0RBVEEiLCJZRUFSX0xJU1RfT0ZfQ0hBTkdFIiwiTk9OQ0xJTl9DTEFSSUZfUkVTUE9OU0UiLCJCRV9DTEFSSUZfUkVTUE9OU0UiLCJSRUNPTl9ERUNJU19MVFJfSU5URU5UIiwiUkVDT05fREVDSVNfUlFfUkVDT04iLCJSRUNPTl9ERUNJU19PVEhFUl9JTkZPIiwiTEFCRUxfUFJFQVBQUk9WQUxfMkxBTkciLCJMSUZFQ1lDTEVfVElUTEUiLCJSRUdfQ09OVEFDVF9USElTIiwiUkVHX0FDVF9DT05UQUNUIiwiVFJBTlNBQ1RJT05fSERJTkciLCJMT0FEX1RSQU5TQUNUSU9OIiwiQ09NUEFOWV9JTkZPIiwiQUREUkVTU19JTkZPIiwiQ09NUEFOWV9SRVBfVEhJUyIsIkdFTkVSQVRFX0ZJTkFMIiwiQ09ORklSTV9DT05UQUNUX1ZBTElEIiwiWUVBUl9DSEFOR0UiLCJSRUdfQUNUSVZJVFlfSU5TVFJVQ1QiLCJTQVZFX0lOU1RSVUNUIiwiQ0xBUklGX1JFU1BPTlNFIiwiQ09SUl9QQVRFTlRfTUVEIiwiQUxMRUdBVElPTl9OT1RJQ0UiLCJGT1JNX0lWIiwiRk9STV9WIiwiQ09OU0VOVF9MVFIiLCJEQVRBX1BST1RFQ1RfQ09SUkVTUCIsIkNIT09TRV9SRVFVRVNUIiwiVFJBTlNBQ1RfSU5TVFJVQ1QiLCJMSVNUX0RFU0NSSVBUIiwiU0VRVUVOQ0VfQ0xFQU5VUCIsIkRFRkVSX0ZFRVMiLCJERUZFUl9TVEFURU1FTlQiLCJGRUVfUkVNSVNTSU9OIiwiU1RBVEVNRU5UX1JFVkVOVUUiLCJTVUJfQ0xBU1MiLCJGRUVfQU1PVU5UIiwiRkVFX0RFU0NSSVBUSU9OIiwiUkVNSVNTSU9OX0VMSUdJQkxFIiwiUkVNSVNTSU9OX0lORUxJR0lCTEUiLCJJU19GRUVfVFJBTlNBQ1RJT04iLCJSRUdVTEFUT1JZX0ZFRVMiLCJHUk9TU19SRVZFTlVFIiwiVEVOX1BFUkNFTlRfUkVWRU5VRSIsIlJFUVVJUkVEX0RPQyIsIlNVUFBPUlRJTkdfRE9DIiwiRVNUX01BUktFVF9TSEFSRSIsIlNJTUlMQVJfUFJPRFVDVCIsIlNBTEVTX0hJU1RPUlkiLCJNQVJLRVRJTkdfUExBTiIsIkFWR19TQUxFUyIsIkZFRVNfTEVTUzEwSyIsIkFEVkFOQ0VfUEFZTUVOVCIsIlNQT05TT1JfSU5WT0lDRSIsIlBBWU1FTlRfTUVUSE9EUyIsIk9ORV9QQVlNRU5UX01FVEhPRCIsIkRFRkVSX0lOU1RSVUNUIiwiUkVNSVNTSU9OX0lOU1RSVUNUIiwiQ0xBU1NfSU5TVFJVQ1QiLCJQUk9EVUNUX0lOU1RSVUNUIiwiTElGRUNZQ0xFX0lOU1RSVUNUIiwiU0VRVUVOQ0VfSU5TVFJVQ1QiLCJDT05UUk9MX0lOU1RSVUNUIiwiQ09NUEFOWV9JTlNUUlVDVCIsIkNPTVBBTllfSURfSU5TVFJVQ1QiLCJET1NTSUVSX0lEX0lOU1RSVUNUIiwiQURNSU5fQ09NUF9JTlNUUlVDVCIsIlBMRUFTRV9SRU1JVCIsIkFQUExZX0RFRkVSIiwiQkFOS19EUkFGVCIsIk1PTkVZX09SREVSIiwiQ0hFUVVFIiwiQ1JFRElUIiwiQkFOS19XSVJFIiwiRVhJU1RJTkdfQ1JFRElUIiwiUFJFRkVFUkVEX09QVElPTiIsIlJFR19UUkFOU0FDVCIsIkxJRkVfUkVDIiwiT05FTElGRVJFQyIsIlNBVkVMSUZFUkVDIiwiTElGRUNZQ0xFQ1RSTC5MSUZFQ1lDTEVERVRBSUxTRk9STSIsIklTX05FV19BQ1RJVklUWSIsIklTX1NJR05FRF8zUkRfUEFSVFkiLCJBVVRfTEVUVEVSX05PVEUiLCJJU19QUklPUklUWSIsIklTX05PQyIsIklTX0FETUlOX1NVQk1JU1NJT04iLCJBRE1JTl9ERVNDUklQVCIsIkFETUlOX1NVQl9UWVBFIiwiQUNUSVZJVFlfTEVBRCIsIk9USEVSX0RPQ19ERVRBSUxTIiwiQjE0LTIwMTYwMzAxLTA5IiwiQjE0LTIwMTYwMzAxLTAyIiwiQjE0LTIwMTYwMzAxLTEwIiwiQjE0LTIwMTYwMzAxLTA2IiwiUkVTRVQiLCJSRVNFVF9JTkZPIiwiRk9SX1RIRSIsIlRIRVJFX0FSRV9FUlJPUlMiLCJFUlJPUlNfRk9VTkQiLCJFUlJPUl9GT1VORCIsIlRZUEVfUkVRVUlSRUQiLCJUWVBFX0VNQUlMIiwiVFlQRV9EVVBMSUNBVEVST0xFIiwiVFlQRV9NSU5MRU5HVEgiLCJQT1NUQUxfRk9STUFUIiwiVFlQRV9NSU4iLCJUWVBFX0RBVEUiLCJUWVBFX05VTUJFUiIsIlRZUEVfUEFUVEVSTiIsImRpZ2l0c0N0cmwiLCJsaW5rIiwic2NvcGUiLCJlbGVtZW50IiwiYXR0cnMiLCJtb2RlbEN0cmwiLCIkcGFyc2VycyIsInB1c2giLCJpbnB1dFZhbHVlIiwidW5kZWZpbmVkIiwiaXNOdW1iZXIiLCJtYXgiLCJpZ25vcmUiLCJ0ZW1wVmFsIiwicGFyc2VJbnQiLCJyZWdleEludE5lZyIsImludGVnZXJSZWciLCJyZWdleFZhbHVlIiwidHJhbnNmb3JtZWRJbnB1dCIsInJlcGxhY2UiLCJzdWJzdHJpbmciLCJwYXJzZUZsb2F0IiwiJHNldFZpZXdWYWx1ZSIsIiRyZW5kZXIiLCJkaXJlY3RpdmUiLCJyZXN0cmljdCIsInJlcXVpcmUiLCJnZXRTZXJ2aWNlIiwiX2dldFBoYXJtYVJBTGlzdCIsInJhTGlzdCIsIm5ld0xpc3QiLCJpIiwibGVuZ3RoIiwiaWQiLCJfZ2V0QmlvbFJBTGlzdCIsIl9nZXRQb3N0TWFya2V0UkFMaXN0IiwiX2dldENvbnN1bUhlYWx0aExpc3QiLCJzZXJ2aWNlIiwiZ2V0UGhhcm1hUkFMaXN0IiwiZ2V0QmlvbFJBTGlzdCIsImdldENvbnN1bUhlYWx0aExpc3QiLCJnZXRQb3N0TWFya2V0UkFMaXN0IiwiZmFjdG9yeSIsImluamVjdCIsImNvbnN0YW50Iiwib3JkZXJCeVRyYW5zbGF0ZWRDb3VudHJ5IiwiJHRyYW5zbGF0ZSIsIiRmaWx0ZXIiLCJDQU5BREEiLCJVU0EiLCJhcnJheSIsIm9iaktleSIsInJlc3VsdCIsInRyYW5zbGF0ZWQiLCJmb3JFYWNoIiwidmFsdWUiLCJrZXkiLCJsYWJlbCIsImluc3RhbnQiLCJzb3J0ZWRPYmplY3QiLCJvcmRlckJ5VHJhbnNsYXRlZENvdW50cnlBbmRMYWJlbCIsImZpbmRDb3VudHJ5T2JqIiwidGFyZ2V0S2V5Iiwib3JkZXJCeVRyYW5zbGF0ZWQiLCJzZXF1ZW5jZU9yZGVyQnkiLCJvcmRlckJ5VHJhbnNsYXRlZE90aGVyRmlyc3QiLCJfb3JkZXJCeUxvY2FsZSIsIml0ZW1zIiwibGFuZyIsInNvcnQiLCJhIiwiYiIsImxvY2FsZUNvbXBhcmUiLCJfZmluZEJ5SWQiLCJzZWFyY2hKc29uIiwiaW5pdGlhbFJlc3VsdCIsImZpbHRlciIsIiRpbmplY3QiLCJfY3JlYXRlQ291bnRyeUFycmF5IiwidHJhbnNsYXRlSnNvbiIsImNvdW50cnlMaXN0IiwiX2dldFVua25vd25Db3VudHJ5UmVjIiwiZ2V0Q291bnRyeVZhbHVlc0FycmF5IiwiZ2V0UHJvdmluY2VWYWx1ZXNBcnJheSIsImdldFVTU3RhdGVzVmFsdWVBcnJheSIsImdldENvdW50cmllcyIsImdldFByb3ZpbmNlcyIsImdldFVTU3RhdGVzIiwiY3JlYXRlQ291bnRyeUxpc3QiLCJnZXRVbmtub3duQ291bnRyeVJlY29yZCIsImdldFNhbFNlcnZpY2UiLCIkcSIsIiRodHRwIiwiRlJFTkNIIiwiUkVMQVRJVkVfRk9MREVSX0RBVEEiLCJnZXRTYWxWYWx1ZXNBcnJheSIsImdldExhbmd1YWdlc1ZhbHVlc0FycmF5IiwiX2NyZWF0ZUludGVybmFsQ29udGFjdHMiLCJkZWZlcnJlZCIsImRlZmVyIiwiY29udGFjdHNVcmwiLCJpbnRlcm5hbENvbnRhY3RzIiwicmVzb2x2ZSIsInN1Y2Nlc3MiLCJkYXRhIiwic3RhdHVzIiwiX2NyZWF0ZVNvcnRlZEFycmF5IiwicHJvcG9zZWRMYW5ndWFnZSIsInVzZSIsIm90aGVyUmVjIiwidW5zaGlmdCIsImVycm9yIiwicmVqZWN0IiwicHJvbWlzZSIsIl9nZXRJbnRlcm5hbENvbnRhY3RzIiwiX2dldEludGVybmFsQ29udGFjdHNXaXRob3V0T3RoZXIiLCJqc29uTGlzdCIsIl9nZXRBZG1pblN1YlR5cGUiLCJhZG1pblN1YlR5cGVBcnJheSIsIl9sb2FkQWRtaW5UeXBlIiwidXJsIiwiZ2V0U2FsdXRhdGlvbkxpc3QiLCJnZXRMYW5ndWFnZXMiLCJjcmVhdGVJbnRlcm5hbENvbnRhY3RzIiwiZ2V0SW50ZXJuYWxDb250YWN0cyIsImdldEludGVybmFsQ29udGFjdHNXaXRob3V0T3RoZXIiLCJnZXRBZG1pblN1YlR5cGUiLCJnZXRSb2xlc1NlcnZpY2UiLCJnZXRSb2xlVmFsdWVzQXJyYXkiLCJfZ2V0Rm9ybVR5cGVzIiwiX2Jpb2xvZ2ljIiwiX3BoYXJtYSIsIl9nZXRCaW9sb2dpYyIsIl9nZXRQaGFybWFjZXV0aWNhbCIsImdldENvbnRhY3RSb2xlcyIsImdldEZvcm1UeXBlcyIsImdldEJpb2xvZ2ljVHlwZSIsImdldFBoYXJtYVR5cGUiLCJnZXRUcmFuc2FjdGlvblNlcSIsInllc05vQXJyYXkiLCJfY3JlYXRlUmFBcnJheSIsInJhVHlwZUFycmF5IiwiX2NyZWF0ZUZlZUFycmF5IiwiZmVlVHlwZUFycmF5IiwiZ2V0VHJhbnNhY3Rpb25EZXNjcmlwdGlvbnNBcnJheSIsImdldEFjdGl2aXR5QXJyYXkiLCJfZ2V0ZmVlVHlwZUFycmF5IiwiZ2V0UHJlc3ViQXJyYXkiLCJhbGxBY3Rpdml0aWVzIiwiZ2V0QU5EU0FycmF5IiwiZ2V0RElOQUFycmF5IiwiZ2V0RElOQkFycmF5IiwiZ2V0RVVORFNBcnJheSIsImdldEVVU05EU0FycmF5IiwiZ2V0TGV2ZWwzQXJyYXkiLCJnZXROQ0FycmF5IiwiZ2V0TkRTQXJyYXkiLCJnZXRQU1VSQ0FycmF5IiwiZ2V0UFNVUlBWQXJyYXkiLCJnZXRSTVBQVkFycmF5IiwiZ2V0U0FORFNBcnJheSIsImdldFNORFNBcnJheSIsImdldFNORFNDQXJyYXkiLCJnZXRVRFBWQXJyYXkiLCJnZXRVRFJBQXJyYXkiLCJnZXRDb25zdWx0QXJyYXkiLCJfZ2V0TVBOQ0FycmF5IiwiX2dldE1QTkRTQXJyYXkiLCJfZ2V0TVBTTkRTQXJyYXkiLCJfZ2V0UEFOREFycmF5IiwiX2dldFBCUkVSQ0FycmF5IiwiX2dldFBCUkVSUFZBcnJheSIsIl9nZXRQUk5EU0FycmF5IiwiX2dldFBSU05EU0FycmF5IiwiZ2V0WUJQUkFycmF5IiwiZ2V0RFN1ckFycmF5IiwiZ2V0RElOREFycmF5IiwiZ2V0RElORkFycmF5IiwiZ2V0TVBESU5BcnJheSIsImdldFBEQ0FycmF5IiwiZ2V0UERDQkFycmF5IiwiX2dldEFjdGl2aXR5TGVhZEFycmF5IiwiUEhBUk1BIiwiQklPTE9HSUNBTCIsIlBPU1RNQVJLRVQiLCJDT05TVU1FUkhFQUxUSCIsIl9nZXRCaW9sb2dpY2FsTGVhZCIsIl9nZXRQaGFybWFMZWFkIiwiX2dldFBvc3RNYXJrZXRMZWFkIiwiX2dldENvbnN1bUhlYWx0aExlYWQiLCJnZXRUcmFuc2FjdGlvbkRlc2NyaXB0aW9ucyIsImdldEFjdGl2aXR5VHlwZXMiLCJjcmVhdGVSYVR5cGVzIiwiZ2V0QmlvbG9naWNhbExlYWRWYWx1ZSIsImdldFBoYXJtYUxlYWRWYWx1ZSIsImdldFBvc3RNYXJrZXRMZWFkVmFsdWUiLCJnZXRDb25zdW1IZWFsdGhMZWFkVmFsdWUiLCJnZXRQcmVzdWJUeXBlcyIsImdldEFuZHNUeXBlIiwiZ2V0RGluYVR5cGUiLCJnZXREaW5iVHlwZSIsImdldERpbmRUeXBlIiwiZ2V0RGluZlR5cGUiLCJnZXREU3VyVHlwZSIsImdldEV1bmRzVHlwZSIsImdldEV1c25kc1R5cGUiLCJnZXRMZXZlbDNUeXBlIiwiZ2V0TVBESU5UeXBlIiwiZ2V0TmNUeXBlIiwiZ2V0TmRzVHlwZSIsImdldFBkY1R5cGUiLCJnZXRQZGNCVHlwZSIsImdldFByZXN1YlR5cGUiLCJnZXRwU3VyQ1R5cGUiLCJnZXRwU3VyUHZUeXBlIiwiZ2V0Um1wUHZUeXBlIiwiZ2V0U2FuZHNUeXBlIiwiZ2V0U25kc1R5cGUiLCJnZXRTbmRzQ0FycmF5IiwiZ2V0VWRwdlR5cGUiLCJnZXRVZHJhVHlwZSIsImdldFlicHJUeXBlIiwiZ2V0Q29uc3VsdFR5cGUiLCJnZXRNUE5DVHlwZSIsImdldE1QTkRTVHlwZSIsImdldE1QU05EU1R5cGUiLCJnZXRQQU5EVHlwZSIsImdldFBCUkVSQ1R5cGUiLCJnZXRQQlJFUlBWVHlwZSIsImdldFBSTkRTVHlwZSIsImdldFBSU05EU1R5cGUiLCJnZXRZZXNOb0xpc3QiLCJnZXRGZWVMaXN0IiwiY3JlYXRlRmVlVHlwZXMiLCJnZXRBY3Rpdml0eUxlYWRMaXN0IiwiZ2V0Q291bnRyeUFuZFByb3ZpbmNlcyIsImdldENvbnRhY3RMaXN0cyIsIlRyYW5zYWN0aW9uTGlzdHMiLCJfY3JlYXRlVHJhbnNsYXRlTGlzdCIsInJlc3VsdExpc3QiLCJfY3JlYXRlU29ydGVkQXJyYXlOQUZpcnN0IiwiY2FuYWRhUmVjb3JkIiwidXNhUmVjb3JkIiwib3B0aW9ucyIsImNvdW50cnlVcmwiLCJyYVR5cGVVcmwiLCJmZWVVcmwiLCJyZXN1bHRUcmFuc2xhdGVMaXN0IiwidGhlbiIsInJlc3BvbnNlIiwidHJhbnNsYXRlTGlzdCIsImV4dGVuZCIsImNvbnNvbGUiLCJ3YXJuIiwiVHJhbnNhY3Rpb25TZXJ2aWNlIiwiWUVTIiwiTk8iLCJIQ1NDIiwiZGVmYXVsdFRyYW5zYWN0aW9uRGF0YSIsIl9nZXRFbXB0eVRyYW5zYWN0aW9uTW9kZWwiLCJfZGVmYXVsdCIsInJvb3RUYWciLCJjdXJyU2VxdWVuY2UiLCJ4c2xGaWxlTmFtZSIsImxvYWRDb250YWN0RGF0YSIsImJhc2VSZXF1ZXN0ZXJzIiwibG9hZFVzZXJMaXN0RGF0YSIsInVzZXJMaXN0IiwiaXNGaW5hbCIsIiRvbkluaXQiLCJwcm90b3R5cGUiLCJnZXRSb290VGFnIiwiZ2V0WFNMRmlsZU5hbWUiLCJ0cmFuc2Zvcm1Gcm9tRmlsZU9iaiIsImpzb25PYmoiLCJ0cmFuc2FjdGlvbkluZm8iLCJnZXRUcmFuc2FjdGlvbkluZm8iLCJ0cmFuc2Zvcm1Ub0ZpbGVPYmoiLCJ0b2RheSIsIl9nZXRUb2RheSIsInJlc3VsdEpzb24iLCJUUkFOU0FDVElPTl9FTlJPTCIsInRlbXBsYXRlX3R5cGUiLCJkYXRlX3NhdmVkIiwic29mdHdhcmVfdmVyc2lvbiIsImRhdGFfY2hlY2tzdW0iLCJkYXRhQ2hlY2tzdW0iLCJ0cmFuc2FjdGlvbl90eXBlIiwidHJhbnNhY3Rpb25UeXBlIiwiaXNfdGhpcmRfcGFydHkiLCJpc1RoaXJkUGFydHkiLCJpc19wcmlvcml0eSIsImlzUHJpb3JpdHkiLCJpc19ub2MiLCJpc05vYyIsImlzX2FkbWluX3N1YiIsImlzQWRtaW5TdWIiLCJzdWJfdHlwZSIsInN1YlR5cGUiLCJlY3RkIiwiX3RyYW5zZm9ybUVjdGRUb0ZpbGUiLCJpc19zb2xpY2l0ZWQiLCJpc1NvbGljaXRlZCIsInNvbGljaXRlZF9yZXF1ZXN0ZXJfcmVjb3JkIiwiX3RyYW5zZm9ybVJlcVRvRmlsZSIsInNvbGljaXRlZFJlcXVlc3RlclJlb3JkIiwicmVndWxhdG9yeV9wcm9qZWN0X21hbmFnZXIxIiwicHJvamVjdE1hbmFnZXIxIiwicmVndWxhdG9yeV9wcm9qZWN0X21hbmFnZXIyIiwicHJvamVjdE1hbmFnZXIyIiwiaXNfZmVlcyIsImlzRmVlcyIsImZlZV9kZXRhaWxzIiwiX21hcEZlZURldGFpbHNUb091dHB1dCIsImZlZURldGFpbHMiLCJpc19hY3Rpdml0eV9jaGFuZ2VzIiwiaXNBY3Rpdml0eUNoYW5nZXMiLCJjb21wYW55X25hbWUiLCJjb21wYW55TmFtZSIsInJlZ3VsYXRvcnlfYWN0aXZpdHlfYWRkcmVzcyIsIl9tYXBBZGRyZXNzVG9PdXRwdXQiLCJhY3Rpdml0eUFkZHJlc3MiLCJyZWd1bGF0b3J5X2FjdGl2aXR5X2NvbnRhY3QiLCJfbWFwQ29udGFjdFRvT3V0cHV0IiwiYWN0aXZpdHlDb250YWN0IiwiY29uZmlybV9yZWd1bGF0b3J5X2NvbnRhY3QiLCJjb25maXJtQ29udGFjdFZhbGlkIiwicmVxdWVzdGVycyIsIkFycmF5IiwicmVjb3JkIiwiX21hcFJlcXVlc3RlclJlY1RvT3V0cHV0IiwiX3RyYW5zZm9ybVJlcUZyb21GaWxlIiwibW9kZWwiLCJzZXF1ZW5jZU51bWJlciIsIk51bWJlciIsInNvbGljaXRlZF9yZXF1ZXN0ZXJfc2VxdWVuY2UiLCJzb2xpY2l0ZWRSZXF1ZXN0ZXIiLCJzb2xpY2l0ZWRfcmVxdWVzdGVyIiwiY29tcGFueV9pZCIsImNvbXBhbnlJZCIsImRvc3NpZXJfaWQiLCJkb3NzaWVySWQiLCJkb3NzaWVyX3R5cGUiLCJkb3NzaWVyVHlwZSIsInByb2R1Y3RfbmFtZSIsInByb2R1Y3ROYW1lIiwibGlmZWN5Y2xlX3JlY29yZCIsIl9tYXBMaWZlY3ljbGVMaXN0VG9PdXRwdXQiLCJsaWZlY3ljbGVSZWNvcmQiLCJfdHJhbnNmb3JtRWN0ZEZyb21GaWxlIiwiX2dldEVtcHR5RWN0ZFNlY3Rpb24iLCJfbWFwTGlmZWN5Y2xlTGlzdCIsImdldE1vZGVsSW5mbyIsImRhdGVTYXZlZCIsIl9tYXBGZWVEZXRhaWxzRnJvbU91dHB1dCIsImltcG9ydEZpbGVUeXBlIiwiX3RyYW5zZm9ybUNvbnRhY3RGcm9tRmlsZU9iaiIsIl90cmFuc2Zvcm1BZGRyZXNzRnJvbUZpbGVPYmoiLCJnZXROZXdUcmFuc2FjdGlvbiIsImlzRWN0ZCIsIl9jcmVhdGVMaWZlQ3ljbGVNb2RlbCIsInNlcXVlbmNlTnVtIiwiZ2V0TmV4dFNlcXVlbmNlTnVtYmVyIiwic2VxdWVuY2UiLCJnZXRDdXJyZW50U2VxdWVuY2UiLCJzZXRTZXF1ZW5jZU51bWJlciIsInN0YXJ0VmFsIiwiY29udmVydGVkIiwiaXNOYU4iLCJyZWMiLCJzZXFUZXh0IiwicGFkIiwicGFkVGV4dCIsImRlcHJlY2F0ZVNlcXVlbmNlTnVtYmVyIiwiX3RyYW5zZm9ybUxpZmVjeWNsZVJlY0Zyb21GaWxlT2JqIiwiX3NldE5leHRTZXF1ZW5jZU9uTG9hZCIsIl9tYXBMaWZlY3ljbGVSZWNUb091dHB1dCIsInJlc2V0RWN0ZFNlY3Rpb24iLCJoYXNPd25Qcm9wZXJ0eSIsImNyZWF0ZUZlZURldGFpbHMiLCJfY3JlYXRlRmVlRGV0YWlscyIsImZlZU9iaiIsIl9jcmVhdGVFbXB0eUZlZURldGFpbHNGb3JPdXRwdXQiLCJpc1VuZGVmaW5lZCIsInN1Ym1pc3Npb25fY2xhc3MiLCJzdWJtaXNzaW9uQ2xhc3MiLCJmcm9tSnNvbiIsInRvSnNvbiIsImRlZmVycmFsX3JlcXVlc3QiLCJkZWZlcnJhbFJlcXVlc3QiLCJmZWVfcmVtaXNzaW9uIiwiZmVlUmVtaXNzaW9uIiwiZ3Jvc3NfcmV2ZW51ZSIsImdyb3NzUmV2ZW51ZSIsInBlcmNlbnRfZ3Jvc3MiLCJwZXJjZW50R3Jvc3MiLCJyZXF1aXJlZF9kb2NzIiwiZGVmZXJyYWxfc3RhdGVtZW50IiwicmVxdWlyZWREb2NzIiwiZGVmZXJyYWxTdGF0IiwicmVtaXNzaW9uX2NlcnRpZmllZCIsInJldlN0YXQiLCJzYWxlc19oaXN0b3J5Iiwic2FsZXNIaXN0b3J5IiwiYXZnX3NhbGVfcHJpY2UiLCJhdmdTYWxlUHJpY2UiLCJlc3RfbWFya2V0X3NoYXJlIiwiZXN0TWFya2V0U2hhcmUiLCJjb21wYXJpc29uX3Byb2R1Y3RzIiwiY29tcGFyaXNvbiIsIm1hcmtldF9wbGFuIiwibWFya2V0UGxhbiIsIm90aGVyIiwib3RoZXJfZGV0YWlscyIsIm90aGVyRGV0YWlscyIsInBheW1lbnRfbWV0aG9kIiwiY3JlZGl0X2NhcmQiLCJwYXltZW50TWV0aG9kIiwiY3JlZGl0Q2FyZCIsImNoZXF1ZSIsIm1vbmV5X29yZGVyIiwibW9uZXlPcmRlciIsImJhbmtfZHJhZnQiLCJiYW5rRHJhZnQiLCJleGlzdGluZ19jcmVkaXQiLCJleGlzdGluZ0NyZWRpdCIsImJhbmtfd2lyZSIsImJhbmtXaXJlIiwiYmlsbF9wYXltZW50IiwiYmlsbFBheW1lbnQiLCJsaWZlY3ljbGVPYmoiLCJsaWZlY3ljbGVSZWMiLCJjb250cm9sTnVtYmVyIiwiY29udHJvbF9udW1iZXIiLCJhY3Rpdml0eUxlYWQiLCJzZXF1ZW5jZV9hY3Rpdml0eV9sZWFkIiwiYWN0aXZpdHlUeXBlIiwic2VxdWVuY2VfYWN0aXZpdHlfdHlwZSIsIl9fdGV4dCIsImFjdGl2aXR5VHlwZURpc3BsYXkiLCJkZXNjcmlwdGlvblZhbHVlIiwic2VxdWVuY2VfZGVzY3JpcHRpb25fdmFsdWUiLCJzdGFydERhdGUiLCJzZXF1ZW5jZV9mcm9tX2RhdGUiLCJlbmREYXRlIiwic2VxdWVuY2VfdG9fZGF0ZSIsImRldGFpbHMiLCJzZXF1ZW5jZV9kZXRhaWxzIiwic2VxdWVuY2VWZXJzaW9uIiwic2VxdWVuY2VfdmVyc2lvbiIsInllYXIiLCJzZXF1ZW5jZV95ZWFyIiwic2VxdWVuY2VDb25jYXQiLCJzZXF1ZW5jZV9jb25jYXQiLCJpc1NhdmVkIiwiX3NldEFjdGl2aXR5VHlwZVZhbHVlc0Zvck91dHB1dCIsInJlcXVlc3Rlck9iaiIsInJlcXVlc3RlclJlYyIsInNyY0FjdGl2aXR5VHlwZVJlYyIsImRlc3RBY3Rpdml0eVR5cGVSZWMiLCJzdHJpbmdJbmRleCIsImluZGV4T2YiLCJfbGFiZWxfZW4iLCJfbGFiZWxfZnIiLCJjb250YWN0T2JqIiwiY29udGFjdCIsInNhbHV0YXRpb24iLCJnaXZlbk5hbWUiLCJnaXZlbl9uYW1lIiwiaW5pdGlhbHMiLCJzdXJuYW1lIiwidGl0bGUiLCJqb2JfdGl0bGUiLCJsYW5ndWFnZSIsImxhbmd1YWdlX2NvcnJlc3BvbmRhbmNlIiwicGhvbmUiLCJwaG9uZV9udW0iLCJwaG9uZUV4dCIsInBob25lX2V4dCIsImZheCIsImZheF9udW0iLCJlbWFpbCIsImFkZHJlc3NPYmoiLCJhZGRyZXNzIiwic3RyZWV0X2FkZHJlc3MiLCJzdHJlZXQiLCJjaXR5IiwicHJvdmluY2VfbG92Iiwic3RhdGVMaXN0IiwicHJvdmluY2VfdGV4dCIsInN0YXRlVGV4dCIsImNvdW50cnkiLCJwb3N0YWxfY29kZSIsInBvc3RhbENvZGUiLCJjb3VudHJ5RGlzcGxheSIsImRlZmF1bHRSZWNvcmQiLCJfY3JlYXRlQWRkcmVzc01vZGVsIiwiX2NyZWF0ZUNvbnRhY3RNb2RlbCIsImpvYlRpdGxlIiwibGFuZ3VhZ2VDb3JyZXNwb25kYW5jZSIsInBob25lTnVtIiwibiIsImQiLCJEYXRlIiwiaXNvRGF0ZSIsImdldEZ1bGxZZWFyIiwiZ2V0TW9udGgiLCJnZXREYXRlIiwic29mdHdhcmVWZXJzaW9uIiwicmVzZXRCdG5DbGlja2VkIiwidHJhbnNhY3Rpb25GZWVzQ29udHJvbGxlciIsIiRzY29wZSIsIiR3aW5kb3ciLCJFTkdMSVNIIiwiQURWQU5DRV9GRUVfUEFZTUVOVF9FTiIsIkFEVkFOQ0VfRkVFX1BBWU1FTlRfRlIiLCJjbGVhclJlbWl0UmVxdWlyZWREb2NzIiwiX3NldElkTmFtZXMiLCJzY29wZUlkIiwiJGlkIiwic3VibUNsYXNzSWQiLCJkZXNjcmlwdElkIiwiZmVlSWQiLCJyZW1pdElkIiwicGF5bWVudFNlbGVjdGVkSWQiLCJyZXZlbnVlSWQiLCJwZXJjZW50SWQiLCJkZWZlcnJhbFN0YXRlSWQiLCJzdGF0ZW1lbnQxMElkIiwib3RoZXJJZCIsIm90aGVyRGV0YWlsc0lkIiwicGF5bWVudEZzSWQiLCJkZWZlcklkIiwic3VibWlzc2lvblR5cGUiLCJvbmVQYXltZW50U2VsZWN0ZWQiLCJ5ZXNOb0xpc3QiLCJyZXF1aXJlZE9ubHlFcnJvciIsInR5cGUiLCJkaXNwbGF5QWxpYXMiLCJvbmVQYXltZW50RXJyb3IiLCJhbGVydHMiLCJlcnJvcnNUZW1wIiwiJG9uQ2hhbmdlcyIsImNoYW5nZXMiLCJjdXJyZW50VmFsdWUiLCJmZWVSZWNvcmQiLCJzaG93RXJyb3JTdW1tYXJ5Iiwic2hvd1N1bW1hcnkiLCJzaG93RXJyb3IiLCJjdHJsIiwiJGludmFsaWQiLCIkdG91Y2hlZCIsImlzUGF5bWVudFNlbGVjdGVkIiwibWV0aG9kU2VsZWN0ZWQiLCJrZXlzIiwiT2JqZWN0IiwiaXNGZWVSZW1pdCIsImNhbGNWYWx1ZSIsInRvRml4ZWQiLCJpc0RlZmVycmFsIiwic2hvd0RvY3VtZW50YXRpb25TZWN0aW9uIiwiaXNFbGlnaWJsZSIsInNob3dQYXltZW50TWV0aG9kcyIsInNob3dQTSIsImlzTGVzczEwSyIsImlzU2VuZE5vRmVlcyIsImZlZSIsInNob3dQYXltZW50U2VjdGlvbiIsInNob3dQYXltZW50UGFuZWwiLCJvcGVuUGF5bWVudEZvcm0iLCJmZWVsaW5rIiwibG9nIiwib3BlbiIsInNldERvY090aGVyIiwiY2xvc2VBbGVydCIsImFkZEluc3RydWN0IiwiY29tcG9uZW50IiwidGVtcGxhdGVVcmwiLCJjb250cm9sbGVyQXMiLCJiaW5kaW5ncyIsInVwZGF0ZUVycm9yU3VtbWFyeSIsImVycm9yU3VtbWFyeUNvbnRyb2xsZXIiLCIkbG9jYXRpb24iLCIkYW5jaG9yU2Nyb2xsIiwiX2lzRXJyb3JTdW1tYXJ5VmlzaWJsZSIsImlzVmlzaWJsZSIsImVycm9yQXJyYXkiLCJfZ2V0RXJyIiwiZXJyb3JPYmoiLCJyZXN1bHRzTGlzdCIsInBhcmVudCIsImoiLCJudW1JbmRleCIsIiRuYW1lIiwibGFzdEluZGV4T2YiLCJ0cmFuc2NsdWRlTmFtZSIsImV4Y2x1c2lvbnMiLCJ0YWJJbmRleCIsInRhYklkIiwic3Vic3RyIiwibWVyZ2UiLCJfY3JlYXRlU3VtbWFyeVJlY29yZCIsIiRlcnJvciIsInRyYW5zY2x1ZGVOYW1lcyIsImV4SW5kZXgiLCJleHBhbmRJbmRleCIsIl9jcmVhdGVFeHBhbmRlclJlY29yZCIsIl9wcm9jZXNzUmVjb3JkIiwiX3NjcnViRmllbGROYW1lIiwicmF3TmFtZSIsInNlcGFyYXRvciIsImluZGV4IiwiY2xlYW5lZE5hbWUiLCJfZ2V0RWxlbWVudFNjb3BlIiwibmFtZVNwbGl0Iiwic3BsaXQiLCJlcnJvcl9OYW1lIiwiZXJyb3JUeXBlIiwic2NydWJOYW1lIiwiZXJyb3JLZXkiLCJ0b1VwcGVyQ2FzZSIsImRlc3RJZCIsImFsaWFzIiwiYWxpYXNSZWMiLCJ0b0xvd2VyQ2FzZSIsInNlYXJjaElkIiwiZGVzdE9iaiIsIiQiLCJmaW5kIiwidGFyZ2V0IiwibmFtZSIsImVhY2giLCJzdGFydEZvcm1JZCIsImsiLCJ0ZW1wX2F0dHIiLCJhdHRyIiwiYnV0dG9uTmFtZSIsInRyYW5zbGF0ZUtleSIsImNvbmNhdCIsImlzU3VtbWFyeSIsIl9zb3J0RXJyb3JzQnlEb21PcmRlciIsImRvbUZpZWxkTGlzdCIsImtleUxpc3QiLCJwIiwicGFyZW50TmFtZSIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsInVuaXF1ZUVycm9yTGlzdCIsInNwbGljZSIsInNvcnRlZERvbUpzb25MaXN0IiwidiIsIm5ld0Vycm9ycyIsIm1hcCIsIm5vdERlZmluZWQiLCJjdXJyUmVjIiwidGFyZ2V0TmFtZSIsImRlc3RJbmRleCIsImlzRGVmaW5lZCIsInRlbXBSZWMiLCJjb3B5IiwicG9zIiwiX3NvcnRVbmtub3ducyIsInVua25vd25Kc29uIiwic29ydExpc3QiLCJ1bmtub3duQXJyYXkiLCJ1bmtub3duUmVjIiwidW5rbm93bk5hbWUiLCJzY29wZUluZGV4IiwiZyIsInNvcnRSZWMiLCJzb3J0U2NvcGUiLCJtb3ZlIiwiZXhwYW5kZXJJbmRleCIsInRvRXhwYW5kIiwicGFyZW50UmVmIiwibmFtZUFkZGVuZHVtIiwicm9vdEVycm9yIiwiaXNGb2N1c0lucHV0IiwiaGVhZGluZ1ByZWFtYmxlIiwiaGVhZGVyTGV2ZWwiLCJzZXRIZWFkaW5nTGV2ZWwiLCJuYW1lU3VmZml4IiwiZm9ybVByZWFtYmxlIiwiZXhjbHVzaW9uTGlzdCIsImFsaWFzTGlzdCIsImZvcm1SZWYiLCJnZXRFcnJvcnNTdW1tIiwic2hvd0Vycm9ycyIsInVwZGF0ZUVycm9ycyIsIm1ha2VGb2N1c2VkIiwiZm9ybUlkIiwidHJhbnNjbHVkZUxpc3QiLCJjYWxjSXNWaXNpYmxlIiwic3VtbWFyeUlzVmlzaWJsZSIsIiRlbWl0Iiwic2Nyb2xsVG8iLCJlcnJvclJlY29yZCIsImhhc2hJZCIsImV4cGFuZFJlY29yZCIsImhhc2giLCJzZWxlY3RWaXNpYmxlVGFiIiwic2VsZWN0VGFiIiwiaXNTdW1tYXJ5TGluayIsImlzVGFiTGluayIsImlzRXhwYW5kZXJMaW5rIiwiJG9uIiwiZXZlbnQiLCJlcnJvclN1bW1hcnlCcm9hZGNhc3ROYW1lIiwibWVzc2FnZSIsIm15Zm9ybUVycm9ycyIsImVxdWFscyIsImZyb20iLCJ0byIsImVycm9yTWVzc2FnZUNvbnRyb2xsZXIiLCJmaWVsZF9uYW1lIiwiZm9ybV9yZWYiLCJmaWVsZFJlY29yZHMiLCJmaWVsZE5hbWUiLCJlcnJvclR5cGVzIiwic2hvd0Vycm9yTWVzc2FnZSIsImFsZXJ0Q29udHJvbGxlciIsImFsZXJ0VmlzaWJsZSIsImNsb3NlTXNnQWxpYXMiLCJtc2ciLCJ1aVN0YXRlIiwidXBkYXRlU3RhdGUiLCJjbG9zZSIsImlzQWxlcnRWaXNpYmxlIiwidHJhbnNjbHVkZSIsImFkZHJlc3NDdHJsIiwiZmxkSWQiLCJzdHJlZXRJZCIsImNpdHlJZCIsImNvdW50cnlJZCIsInN0YXRlVGV4dElkIiwic3RhdGVMaXN0SWQiLCJwb3N0YWxJZCIsImlzRWRpdGFibGUiLCJuZ01vZGVsT3B0U2V0dGluZyIsInVwZGF0ZU9uIiwiYWRkcmVzc01vZGVsIiwiYWRkcmVzc0lEIiwiaXNEZXRhaWxWYWxpZCIsInN0YXRlTG92IiwiY291bnRyeUlzRWRpdGFibGUiLCJjYW5hZGlhblBvc3RhbENvZGVQYXR0ZXJuIiwidXNhWmlwQ29kZSIsImhpZGVQcm92aW5jZVRleHQiLCJmZElkIiwicmVxdWlyZWRPbmx5IiwicG9zdGFsRXJyb3JMaXN0IiwiYWRkcmVzc1JlY29yZCIsInByb3ZMaXN0TGFiZWwiLCJnZXRQcm92aW5jZUxpc3RMYWJlbCIsInBvc3RhbExhYmVsIiwiZ2V0UG9zdGFsTGFiZWwiLCJpc1Bvc3RhbFJlcXVpcmVkIiwiaXNQb3N0YWxSZXF1aXJlZEZuIiwicHJvdmluY2VzIiwiZ2V0UHJvdmluY2VTdGF0ZUxpc3QiLCJnZXRQcm92aW5jZVRleHRTdGF0ZSIsInBvc3RhbFBhdHRlcm4iLCJnZXRQb3N0YWxQYXR0ZXJuIiwiaGlkZVByb3ZpbmNlRGRsIiwiY291bnRyeUNoYW5nZWQiLCJpc0FtZW5kIiwiZmllbGRTdWZmaXgiLCJ1cGRhdGVDb3VudHJ5IiwiY291bnRyeUVkaXRhYmxlIiwiaXNDb3VudHJ5Q2FuYWRhIiwib25EZWxldGVCdXR0b25DbGljayIsIm9uRGVsZXRlIiwiYWRkcmVzc0lkIiwib25EaXNjYXJkQnV0dG9uQ2xpY2siLCJhZGRyZXNzRm9ybSIsIiRzZXRQcmlzdGluZSIsImlzQ291bnRyeUVkaXRhYmxlIiwicG9zdGFsQ29kZUNoYW5nZWQiLCJwb3N0YWwiLCJpc0Nhbk9yVXNhIiwicG9zdGFsUHRybiIsIiR3YXRjaCIsInVpU2VsZWN0Q29uZmlnIiwidGhlbWUiLCJvblVwZGF0ZSIsImxpZmVjeWNsZVJlY0N0cmwiLCJBY3Rpdml0eUZvcm1GaWx0ZXJTZXJ2aWNlIiwiX3VwZGF0ZUxvY2FsTW9kZWwiLCJsaWZlY3ljbGVNb2RlbCIsImNvbnZlcnRUb0RhdGUiLCJzZXRTZXF1ZW5jZUxpc3QiLCJzZXREZXRhaWxzU3RhdGUiLCJzZWxlY3RBY3Rpdml0eUxpc3QiLCJzZXRBc0Rlc2NyaXB0aW9uWWVhciIsImVuZERhdGVWaXNpYmxlIiwic3RhcnREYXRlVmlzaWJsZSIsImRlc2NyaXB0aW9uVmlzaWJsZSIsInZlcnNpb25WaXNpYmxlIiwieWVhclZpc2libGUiLCJkZXNjcmlwdGlvbkxhYmVsIiwic2V0RGV0YWlsc0FzTm9uZSIsInNldEFzRGVzY3JpcHRpb24iLCJzZXRBc1N0YXJ0RGF0ZSIsInN0YXJ0RGF0ZUxhYmVsIiwic2V0VmVyc2lvbkFuZERhdGUiLCJzZXRBc0RhdGVQZXJpb2QiLCJ0cmFuc2xhdGVUb0VuZ2xpc2giLCJ0cmFuc2xhdGVUZXh0IiwiY29udmVydERhdGUiLCJkYXRlIiwibV9uYW1lcyIsImRhdGVGaWxlZCIsIl9wYXJzZURhdGUiLCJkYXRlQXJyYXkiLCJhRGF0ZSIsIl9jcmVhdGVZZWFyTGlzdCIsInN0YXJ0IiwiZW5kIiwibGlmZWN5Y2xlRGV0YWlsc0Zvcm1JZCIsImRhdGVTdWJJZCIsImNvbnRyb2xOdW1JZCIsInJlZ0FjdGl2aXR5SWQiLCJzZXFEZXNjcmlwdElkIiwic3RhcnREYXRlSWQiLCJlbmREYXRlSWQiLCJ5ZWFySWQiLCJ2ZXJzaW9uSWQiLCJhY3Rpdml0eUxlYWRJZCIsImFjdGl2aXR5TGlzdCIsImFjdGl2aXR5VHlwZUxpc3QiLCJwaGFybWFMaXN0IiwiYmlvbExpc3QiLCJwb3N0TWFya2V0TGlzdCIsImNvbnN1bUhlYWx0aExpc3QiLCJzZXF1ZW5jZUxpc3QiLCJkZXNjcmlwdGlvbkxpc3QiLCJwb3BPcGVuZWQiLCJkYXRlT3B0aW9ucyIsInNob3dXZWVrcyIsInllYXJMaXN0IiwiZGVzY3JpcHRpb25PYmoiLCJsZWFkTGlzdCIsInVwZGF0ZVN1bW1hcnkiLCJmb2N1c1N1bW1hcnkiLCJkYXRlRm9ybWF0RXJyb3IiLCJtaW5MZW5ndGg2RXJyb3IiLCJhY3Rpdml0eVR5cGVzIiwic2VxdWVuY2VVcGRhdGVkIiwidXBkYXRlRXJyb3JTdW1tYXJ5U3RhdGUiLCJlcnJvclN1bW1hcnlVcGRhdGUiLCJsaWZlY3ljbGVEZXRhaWxzRm9ybSIsIiRkaXJ0eSIsInN0YXRlIiwib3BlblN0YXJ0RGF0ZSIsInN0YXJ0RGF0ZU9wZW4iLCJvcGVuRW5kRGF0ZSIsImVuZERhdGVPcGVuIiwib3BlbkZpbGVkRGF0ZSIsImZpbGVkRGF0ZU9wZW4iLCJkaXNhYmxlRGVsZXRlU3RhdGUiLCJlbmFibGVEZWxldGVJbmRleCIsInRlbXAiLCJzZXRDb25jYXREZXRhaWxzIiwiY29uY2F0VGV4dCIsImVuRGVzY3JpcHRpb24iLCJkaXNjYXJkQ2hhbmdlcyIsIiRwcmlzdGluZSIsIiR2YWxpZCIsInVwZGF0ZVZhbGlkIiwidXBkYXRlTGl2ZWN5Y2xlTW9kZWwiLCJsaWZlY3ljbGVMaXN0Q3RybCIsIl9jaGVja0ZpcnN0UmVjb3JkIiwibGlmZWN5Y2xlTGlzdCIsImVjdGRWYWx1ZSIsInN0YXJ0aW5nU2VxdWVuY2UiLCJtb250aCIsImRheSIsInNlbGVjdFJlY29yZCIsImlzRGV0YWlsc1ZhbGlkIiwic2V0Q29sbGFwc2VkIiwiZGVsZXRhYmxlSW5kZXgiLCJvbmVSZWNvcmQiLCJpc1BhcmVudERpcnR5IiwiYWRkRm9jdXNlZCIsInJlc2V0Q29sbGFwc2VkIiwic2VxVXBkYXRlZCIsImZpbmFsU3RhdGUiLCJmaW5hbFJlY051bSIsImNvbHVtbkRlZiIsImJpbmRpbmciLCJ3aWR0aCIsInJlY29yZHMiLCJ1cGRhdGVFcnJvclN0YXRlIiwicGFyZW50RGlydHkiLCJkZWxldGVSZWNvcmQiLCJhSUQiLCJpZHgiLCJkZXByZWNhdGVTZXF1ZW5jZSIsImxhc3RSZWNvcmRTZXF1ZW5jZSIsImFkZFRyYW5zYWN0aW9uIiwiZGVmYXVsdFRyYW5zYWN0aW9uIiwic2V0VmFsaWQiLCJzZXRTdGFydGluZ1NlcXVlbmNlIiwic2V0U2VxdWVuY2VWYWx1ZSIsImlzU2VsZWN0ZWRSZWNvcmQiLCJpc0FkZERpc2FibGVkIiwiZGV0YWlsVmFsaWQiLCJvblVwZGF0ZUxpZmVjeWNsZVJlY29yZCIsInJlcXVlc3RlclJlY29yZENvbnRyb2xsZXIiLCJzb2xpY3RlZFJxSWQiLCJvdGhlclJlcXVlc3RlckRldGFpbHMiLCJkaXNwbGF5Iiwic2hvd0RldGFpbEVycm9ycyIsInJlcXVlc3Rlckxpc3QiLCJyZXF1ZXN0ZXJMaXN0Q29udHJvbGxlciIsInNldFJlY29yZCIsImdldExpc3RNYXhJRCIsIm91dCIsImxpc3QiLCJyZXNldFRvQ29sbGFwc2VkIiwiZW1wdHlNb2RlbCIsImxpc3RJdGVtcyIsImFkZE5ldyIsIml0ZW0iLCJfaWQiLCJkaXNhYmxlQWRkQnV0dG9uIiwicmVxdWVzdGVyTGlzdEZvcm0iLCJuZ0ZpbGVTZWxlY3QiLCJocGZiRmlsZVJlYWRlciIsImJpbmQiLCJlIiwiZmlsZSIsInNyY0VsZW1lbnQiLCJmaWxlcyIsInJlYWRBc0RhdGFUZXh0IiwiaHBmYkZpbGVTZWxlY3QiLCJmaWxlQ29udGVudCIsIkZpbGVTZWxlY3RDb250cm9sbGVyIiwiaHBmYkZpbGVQcm9jZXNzaW5nIiwiZmlsZVR5cGVzIiwibW9kZWxDYWxsYmFjayIsIm1lc3NhZ2VzIiwidXBkYXRlTW9kZWxSb290IiwiZmlsZUxvYWQiLCJ0cmlnZ2VyIiwicm9vdEVsZW0iLCJGaWxlV3JpdGVDb250cm9sbGVyIiwiX2dlbmVyYXRlRmlsZSIsInNhdmVUeXBlIiwid3JpdGVBc0pzb24iLCJqc29uVG9TYXZlIiwiZmlsZU5hbWUiLCJ3cml0ZUFzWG1sIiwiX2luaXQiLCJidXR0b25EaXNhYmxlZCIsImdlbmVyYXRlIiwiYnV0dG9uTGFiZWwiLCJmaWxlUmVhZGVyIiwib25Mb2FkIiwicmVhZGVyIiwiJGFwcGx5Iiwic3BsaXRGaWxlIiwiZmlsZVR5cGUiLCJkcmFmdF9maWxlX3R5cGUiLCJjb252ZXJ0VG9KU09OT2JqZWN0cyIsImNoZWNrUm9vdFRhZ01hdGNoIiwiY29udmVydFhNTFRvSlNPTk9iamVjdHMiLCJjb252ZXJ0UmVzdWx0IiwicGFyc2VSZXN1bHQiLCJtc2dfZXJyX2ZpbGVUeXBlIiwib25FcnJvciIsIm1zZ19lcnJfbG9hZCIsImdldFJlYWRlciIsIkZpbGVSZWFkZXIiLCJvbmxvYWQiLCJyZWFkQXNUZXh0IiwianNvblJlc3VsdCIsIkpTT04iLCJwYXJzZSIsIm1zZ19zdWNjZXNzIiwibXNnX2Vycl9qc29ucGFyc2UiLCJ4bWxDb25maWciLCJlc2NhcGVNb2RlIiwiZW1wdHlOb2RlRm9ybSIsInVzZURvdWJsZVF1b3RlcyIsInhtbENvbnZlcnRlciIsIlgySlMiLCJ4bWxfc3RyMmpzb24iLCJtc2dfZXJyX3htbHBhcnNlIiwiY29udmVydEpTT05PYmplY3RzVG9YTUwiLCJqc29uQ29udmVydGVyIiwieG1sUmVzdWx0IiwianNvbjJ4bWxfc3RyIiwibXNnX2Vycl9mb3JtVHlwZSIsImpzb25Ub0ZpbGUiLCJtYWtlU3RyU2F2ZSIsInN0cmluZ2lmeSIsImJsb2IiLCJCbG9iIiwic2F2ZUFzIiwieG1sVG9GaWxlIiwieHNsTmFtZSIsImV4cGFuZGluZ1RhYmxlQ3RybCIsIl9zZXROdW1iZXJDb2x1bW5zIiwiZGlzYWJsZUVycm9yQ29sIiwibnVtYmVyQ29scyIsIl9yZWNhbGN1bGF0ZUNvbHVtbkRlZnMiLCJjb2xEZWZzIiwibnVtQ29scyIsImNhcmV0V2lkdGgiLCJlcnJvcldpZHRoIiwidG90YWxXaWR0aCIsInRvU3VidHJhY3QiLCJvbmVEZWYiLCJ1cGRhdGVUYWJsZVJvdyIsInRleHRJbmRleCIsInNlbGVjdEluZGV4Iiwic2VsZWN0VGFibGVSb3ciLCJfY3JlYXRlQXJyYXkiLCJhcnJheVNpemUiLCJpbml0aWFsVmFsIiwiYW5BcnJheSIsImZvY3VzZWQiLCJjb2x1bW5EZWZpbml0aW9ucyIsImRpc2FibGVFeHBhbmQiLCJ0YWJsZVJvd0V4cGFuZGVkIiwidGFibGVSb3dJbmRleEN1cnJFeHBhbmRlZCIsInRhYmxlUm93SW5kZXhQcmV2RXhwYW5kZWQiLCJkYXlEYXRhQ29sbGFwc2UiLCJmb3JtTmFtZSIsImdldEV4cGFuZGVkU3RhdGUiLCJyb3ciLCJyZXNldFRhYmxlUm93IiwidG5hbWUiLCJkaXNhYmxlU2VsZWN0aW9uIiwiZGlzYWJsZUVyckNvbHVtbiIsImZvcm1JbkVycm9yIiwiYUZvcm0iLCJkZWxldGVkUm93IiwiZGF5RGF0YUNvbGxhcHNlRm4iLCJhcHBlbmQiLCJjb250YWN0Q3RybCIsInNhbHV0YXRpb25JZCIsImZpcnN0TmFtZUlkIiwibGFzdE5hbWVJZCIsImxhbmdDb3JyZXNwb25kSWQiLCJqb2JUaXRsZUlkIiwiZmF4SWQiLCJwaG9uZU51bWJlcklkIiwicGhvbmVFeHRJZCIsImNvbnRhY3RFbWFpbElkIiwic2FsdXRhdGlvbkxpc3QiLCJsYW5nQ29ycmVzcHBvbmQiLCJmYXhSZXF1aXJlZCIsInBob25lUmVnIiwiY29udGFjdE1vZGVsIiwiaW5wdXRNb2RlbE9wdGlvbnMiLCJlbWFpbEVycm9yIiwicGhvbmVFcnJvciIsImZheEVycm9yIiwibGFuZ0xpc3QiLCJjb250YWN0UmVjb3JkIiwiZmF4TWFuZGF0b3J5IiwidHJhbnNhY3Rpb25JbmZvQ3RybCIsIkVYSVNUSU5HIiwiZ2V0Um9sZUxpc3RzIiwiaXNFY3RkVmFsdWUiLCJ0cmFuc2FjdGlvbk1vZGVsIiwiaXNTb2xpY2l0ZWRWYWx1ZSIsImlzQWN0aXZpdHlDaGFuZ2VzVmFsdWUiLCJpc05ld0FjdGl2aXR5IiwibG9hZEFkbWluU3ViRGF0YSIsImFkbWluU3ViVHlwZUxpc3QiLCJwcm9kdWN0TmFtZUlkIiwiaXNFY3RkSWQiLCJpc1NvbGljaXRlZElkIiwic29saWNpdGVkT3RoZXJJZCIsImNvbXBhbnlOYW1lSWQiLCJjb250YWN0U2FtZUlkIiwiaXNGZWVzSWQiLCJ0eXBlSWQiLCJpc05ld0FjdGl2aXR5SWQiLCJ0aGlyZFBhcnR5SWQiLCJpc0FkbWluU3ViSWQiLCJhZG1pblN1YlR5cGVJZCIsImlzUHJpb3JpdHlJZCIsImlzTm9jSWQiLCJuZXdFeGlzdGluZ0xpc3QiLCJzaG93TmV3QWN0aXZpdHlGaWVsZHMiLCJzaG93VGhpcmRQYXJ0eU5vdGUiLCJzaG93QWRtaW5TdWIiLCJzaG93RWN0ZFNlY3Rpb24iLCJzaG93U29saWNpdGVkRGV0YWlsIiwic2hvd090aGVyU29saWNpdGVkRGV0YWlsIiwiYWN0aXZpdHlFZGl0YWJsZSIsImZvcm1UeXBlTGlzdCIsInNlcXVlbmNlQ2hhbmdlIiwibWluNUVycm9yIiwibWluN0Vycm9yIiwidXBkYXRlQWN0aXZpdHlUeXBlIiwic2V0VGhpcmRQYXJ0eSIsInNldEFkbWluU3VibWlzc2lvbiIsInVwZGF0ZUVjdGRTdGF0ZSIsInNldFNvbGljaXRlZFN0YXRlIiwiZGlzcGxheVJlc2V0QnRuIiwidHJhbnNhY3Rpb25Sb290IiwiaXNGZWVzSW5kaWNhdGVkIiwiZ2V0VHJhbnNhY3Rpb24iLCJzZXRTZXF1ZW5jZSIsImdldE5ld1JlcENvbnRhY3QiLCJnZXRSZXBDb250YWN0Iiwic3VidHJhY3RTZXF1ZW5jZSIsInNob3dGb3JtRXJyb3JzIiwidXBkYXRlRmVlU3RhdGUiLCJnZXRGZWUiLCJ1cGRhdGVBY3Rpdml0eUNoYW5nZXMiLCJ1cGRhdGVSZXF1ZXN0ZXJMaXN0IiwiaXNGcmVuY2giLCJyZXNldFNwZWNpZmljVmFsdWVzIiwiZGlzYWJsZVByb2R1Y3ROYW1lIiwicmVzZXRFY3RkIiwiVHJhbnNhY3Rpb25NYWluQ3RybCIsIkVYVEVSTkFMX1RZUEUiLCJfZ2V0RmlsZU5hbWUiLCJmaWxlbmFtZSIsImhvdXJzIiwiZ2V0SG91cnMiLCJtaW51dGVzIiwiZ2V0TWludXRlcyIsIl90cmFuc2Zvcm1GaWxlIiwidHJhbnNhY3Rpb25TZXJ2aWNlIiwidHJhbnNhY3Rpb24iLCJfbG9hZEZpbGVDb250ZW50Iiwic2F2ZVByZXNzZWQiLCJzaG93Q29udGVudCIsImxpZmVjeWNsZUN0cmwubGlmZWN5Y2xlRGV0YWlsc0Zvcm0iLCJzYXZlTGlmZVJlYyIsIm9uZUxpZmVSZWMiLCJvbmVfcGF5bWVudF9tZXRob2QiLCJzYXZlSnNvbiIsIndyaXRlUmVzdWx0Iiwic2F2ZVhNTCIsInRyYW5zYWN0aW9uRW5yb2xGb3JtIiwiZGlzYWJsZUZpbmFsWG1sQnRuIiwiY3JlYXRlUmVwQ29udGFjdCIsInVwZGF0ZUFkZHJlc3NSZWNvcmQiLCJjb21wYW55IiwiYWRkcmVzc0xpc3QiLCJpc0V4dGVybiJdLCJtYXBwaW5ncyI6IkNBQUEsV0FDQSxZQUNBQSxTQUNBQyxPQUFBLGtCQUNBLHdCQUNBLHlCQUNBLGFBQ0EsU0FDQSxlQUNBLGVBQ0Esa0JBS0EsV0FDQSxZQU9BLFNBQUFDLGtCQUVBLEdBQUFDLElBQUFDLElBQ0FELElBQUFFLFNBVEFMLFFBQ0FDLE9BQUEsa0JBQ0FLLFdBQUEsaUJBQUFKLG1CQVdBLFdBQ0EsWUFDQUYsU0FDQUMsT0FBQSxrQkFDQU0sUUFBQSxxQkFBQSxnQkFBQSxvQkFBQSxTQUFBQyxtQkFBQUMsY0FBQUMsbUJBQ0FBLGtCQUFBQyxXQUNBQyxTQUFBLEVBQ0FDLGFBQUEsRUFDQUMsY0FBQSxJQUVBTixtQkFBQU8sa0JBQUEsR0FDQVAsbUJBQUFRLGtCQUFBLE1BQ0FSLG1CQUFBUyxVQUFBLGNBRUFULG1CQUFBVSx5QkFBQSxNQUNBVixtQkFBQVcsa0JBQUEsR0FHQVYsY0FBQVcsU0FBQUMsUUFBQUMsTUFDQWIsY0FBQVcsU0FBQUMsUUFBQUMsUUFHQWIsY0FBQVcsU0FBQUMsUUFBQUMsSUFBQSxxQkFBQSxnQ0FFQWIsY0FBQVcsU0FBQUMsUUFBQUMsSUFBQSxpQkFBQSxXQUNBYixjQUFBVyxTQUFBQyxRQUFBQyxJQUFBLE9BQUEsaUJDdkRBdEIsUUFBQUMsT0FBQSxtQkFBQU0sUUFBQSxxQkFBQSxTQUFBQyxvQkFDQUEsbUJBQUFlLGFBQUEsTUFDQUMsS0FBQSxPQUNBQyxRQUFBLFVBQ0FDLFNBQUEsV0FDQUMsT0FBQSxjQUNBQyxVQUFBLG9CQUNBQyxNQUFBLFFBQ0FDLE9BQUEsaUJBQ0FDLElBQUEsV0FDQUMsUUFBQSxVQUNBQyxZQUFBLGNBQ0FDLFVBQUEsZUFDQUMsVUFBQSxlQUNBQyxZQUFBLGlCQUNBQyxVQUFBLHNCQUNBQyxhQUFBLGtCQUNBQyxpQkFBQSw0Q0FDQUMsa0JBQUEsb0JBQ0FDLGNBQUEsb0NBQ0FDLGFBQUEsZUFDQUMsa0JBQUEs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QXZCLEtBQUFzQixPQUFBRSxHQUNBLE1BQ0EsS0FBQSxtQkFDQUQsUUFBQXZCLEtBQUFzQixPQUFBRSxHQUNBLE1BQ0EsS0FBQSxtQkFDQUQsUUFBQXZCLEtBQUFzQixPQUFBRSxHQUNBLE1BQ0EsS0FBQSxtQkFDQUQsUUFBQXZCLEtBQUFzQixPQUFBRSxHQUNBLE1BQ0EsS0FBQSxtQkFDQUQsUUFBQXZCLEtBQUFzQixPQUFBRSxHQUNBLE1BQ0EsS0FBQSxtQkFDQUQsUUFBQXZCLEtBQUFzQixPQUFBRSxHQUNBLE1BQ0EsS0FBQSxtQkFDQUQsUUFBQXZCLEtBQUFzQixPQUFBRSxHQUNBLE1BQ0EsS0FBQSxtQkFDQUQsUUFBQXZCLEtBQUFzQixPQUFBRSxHQUNBLE1BQ0EsS0FBQSxtQkFDQUQsUUFBQXZCLEtBQUFzQixPQUFBRSxHQUNBLE1BQ0EsS0FBQSxtQkFDQUQsUUFBQXZCLEtBQUFzQixPQUFBRSxHQUNBLE1BQ0EsS0FBQSxtQkFDQUQsUUFBQXZCLEtBQUFzQixPQUFBRSxHQUNBLE1BSUEsS0FBQSxtQkFDQUQsUUFBQXZCLEtBQUFzQixPQUFBRSxHQUNBLE1BQ0EsS0FBQSxtQkFDQUQsUUFBQXZCLEtBQUFzQixPQUFBRSxHQUNBLE1BQ0EsS0FBQSxtQkFDQUQsUUFBQXZCLEtBQUFzQixPQUFBRSxHQUNBLE1BQ0EsS0FBQSxtQkFDQUQsUUFBQXZCLEtBQUFzQixPQUFBRSxHQUNBLE1BQ0EsS0FBQSxtQkFDQUQsUUFBQXZCLEtBQUFzQixPQUFBRSxHQUNBLE1BQ0EsS0FBQSxtQkFDQUQsUUFBQXZCLEtBQUFzQixPQUFBRSxJQUlBLE1BQUFELFNBU0EsUUFBQUksZ0JBQUFMLFFBRUEsSUFBQSxHQURBQyxZQUNBQyxFQUFBLEVBQUFBLEVBQUFGLE9BQUFHLE9BQUFELElBQ0EsT0FBQUYsT0FBQUUsR0FBQUUsSUFJQSxJQUFBLG1CQUNBSCxRQUFBdkIsS0FBQXNCLE9BQUFFLEdBQ0EsTUFDQSxLQUFBLG1CQUNBRCxRQUFBdkIsS0FBQXNCLE9BQUFFLEdBQ0EsTUFDQSxLQUFBLG1CQUNBRCxRQUFBdkIsS0FBQXNCLE9BQUFFLEdBQ0EsTUFDQSxLQUFBLG1CQUNBRCxRQUFBdkIsS0FBQXNCLE9BQUFFLEdBQ0EsTUFDQSxLQUFBLG1CQUNBRCxRQUFBdkIsS0FBQXNCLE9BQUFFLEdBQ0EsTUFDQSxLQUFBLG1CQUNBRCxRQUFBdkIsS0FBQXNCLE9BQUFFLEdBQ0EsTUFDQSxLQUFBLG1CQUNBRCxRQUFBdkIsS0FBQXNCLE9BQUFFLEdBQ0EsTUFDQSxLQUFBLG1CQUNBRCxRQUFBdkIsS0FBQXNCLE9BQUFFLEdBQ0EsTUFDQSxLQUFBLG1CQUNBRCxRQUFBdkIsS0FBQXNCLE9BQUFFLEdBQ0EsTUFDQSxLQUFBLG1CQUNBRCxRQUFBdkIsS0FBQXNCLE9BQUFFLEdBQ0EsTUFDQSxLQUFBLG1CQUNBRCxRQUFBdkIsS0FBQXNCLE9BQUFFLEdBQ0EsTUFDQSxLQUFBLG1CQUNBRCxRQUFBdkIsS0FBQXNCLE9BQUFFLEdBQ0EsTUFDQSxLQUFBLG1CQUNBRCxRQUFBdkIsS0FBQXNCLE9BQUFFLEdBQ0EsTUFJQSxLQUFBLG1CQUNBRCxRQUFBdkIsS0FBQXNCLE9BQUFFLEdBQ0EsTUFDQSxLQUFBLG1CQUNBRCxRQUFBdkIsS0FBQXNCLE9BQUFFLEdBQ0EsTUFDQSxLQUFBLG1CQUNBRCxRQUFBdkIsS0FBQXNCLE9BQUFFLEdBQ0EsTUFDQSxLQUFBLG1CQUNBRCxRQUFBdkIsS0FBQXNCLE9BQUFFLEdBQ0EsTUFDQSxLQUFBLG1CQUNBRCxRQUFBdkIsS0FBQXNCLE9BQUFFLEdBQ0EsTUFDQSxLQUFBLG1CQUNBRCxRQUFBdkIsS0FBQXNCLE9BQUFFLEdBQ0EsTUFDQSxLQUFBLG1CQUNBRCxRQUFBdkIsS0FBQXNCLE9BQUFFLEdBQ0EsTUFDQSxLQUFBLG1CQUNBRCxRQUFBdkIsS0FBQXNCLE9BQUFFLElBSUEsTUFBQUQsU0FTQSxRQUFBSyxzQkFBQU4sUUFFQSxJQUFBLEdBREFDLFlBQ0FDLEVBQUEsRUFBQUEsRUFBQUYsT0FBQUcsT0FBQUQsSUFDQSxPQUFBRixPQUFBRSxHQUFBRSxJQUVBLElBQUEsbUJBQ0FILFFBQUF2QixLQUFBc0IsT0FBQUUsR0FDQSxNQUNBLEtBQUEsbUJBQ0FELFFBQUF2QixLQUFBc0IsT0FBQUUsR0FDQSxNQUNBLEtBQUEsbUJBQ0FELFFBQUF2QixLQUFBc0IsT0FBQUUsR0FDQSxNQUNBLEtBQUEsbUJBQ0FELFFBQUF2QixLQUFBc0IsT0FBQUUsSUFJQSxNQUFBRCxTQVFBLFFBQUFNLHNCQUFBUCxRQUVBLElBQUEsR0FEQUMsWUFDQUMsRUFBQSxFQUFBQSxFQUFBRixPQUFBRyxPQUFBRCxJQUNBLE9BQUFGLE9BQUFFLEdBQUFFLElBQ0EsSUFBQSxtQkFDQUgsUUFBQXZCLEtBQUFzQixPQUFBRSxHQUNBLE1BQ0EsS0FBQSxtQkFDQUQsUUFBQXZCLEtBQUFzQixPQUFBRSxHQUNBLE1BQ0EsS0FBQSxtQkFDQUQsUUFBQXZCLEtBQUFzQixPQUFBRSxHQUNBLE1BQ0EsS0FBQSxtQkFDQUQsUUFBQXZCLEtBQUFzQixPQUFBRSxHQUNBLE1BQ0EsS0FBQSxtQkFDQUQsUUFBQXZCLEtBQUFzQixPQUFBRSxHQUNBLE1BQ0EsS0FBQSxtQkFDQUQsUUFBQXZCLEtBQUFzQixPQUFBRSxHQUNBLE1BQ0EsS0FBQSxtQkFDQUQsUUFBQXZCLEtBQUFzQixPQUFBRSxHQUNBLE1BQ0EsS0FBQSxtQkFDQUQsUUFBQXZCLEtBQUFzQixPQUFBRSxHQUNBLE1BQ0EsS0FBQSxtQkFDQUQsUUFBQXZCLEtBQUFzQixPQUFBRSxHQUNBLE1BQ0EsS0FBQSxtQkFDQUQsUUFBQXZCLEtBQUFzQixPQUFBRSxHQUNBLE1BQ0EsS0FBQSxtQkFDQUQsUUFBQXZCLEtBQUFzQixPQUFBRSxHQUNBLE1BQ0EsS0FBQSxtQkFDQUQsUUFBQXZCLEtBQUFzQixPQUFBRSxHQUNBLE1BQ0EsS0FBQSxtQkFDQUQsUUFBQXZCLEtBQUFzQixPQUFBRSxHQUNBLE1BQ0EsS0FBQSxtQkFDQUQsUUFBQXZCLEtBQUFzQixPQUFBRSxHQUNBLE1BQ0EsS0FBQSxtQkFDQUQsUUFBQXZCLEtBQUFzQixPQUFBRSxHQUNBLE1BQ0EsS0FBQSxtQkFDQUQsUUFBQXZCLEtBQUFzQixP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QyxHQUFBeWlELFNBQUEsV0FDQSxNQUFBemlELElBQUFFLFVBQUE2Z0QsZUFHQS9nRCxHQUFBNGxDLFdBQUEsV0FHQSxNQUFBNWxDLElBQUEsYUFHQUEsR0FBQTQrQixZQUFBLFNBQUF4Z0IsT0FFQXZlLFFBQUEreUIsWUFBQXhVLFFBQ0FBLE1BQUFwZSxHQUFBeThCLE9BQUE1ZixTQUNBN2MsR0FBQXk4QixPQUFBcmUsUUFBQSxJQVNBcGUsR0FBQTIrQixXQUFBLFNBQUF2Z0IsT0FDQXZlLFFBQUEreUIsWUFBQXhVLFFBQ0FBLE1BQUFwZSxHQUFBeThCLE9BQUE1ZixTQUNBN2MsR0FBQXk4QixPQUFBcmUsUUFBQSxJQVFBcGUsR0FBQTBnRCxTQUFBLFdBQ0EsTUFBQTFnRCxJQUFBaWYsT0FBQTZiLFNBbk9BajdCLFFBQ0FDLE9BQUEseUJBQ0ErK0IsVUFBQSxzQkFDQUMsWUFBQSxpRkFDQTMrQixXQUFBMmdELG9CQUNBL2hCLGFBQUEsU0FHQStoQixvQkFBQXBoQyxTQUNBLHFCQUNBLHFCQUNBLFVBQ0EsYUFDQSxTQUNBLFVBQ0EiLCJmaWxlIjoidHJhbnNhY3Rpb25BcHBFWFQtZnJfMjAxOTAzMjJfMTU0NC5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ3RyYW5zYWN0aW9uQXBwJywgW1xyXG4gICAgICAgICAgICAndHJhbnNhY3Rpb25NYWluTW9kdWxlJyxcclxuICAgICAgICAgICAgJ3Bhc2NhbHByZWNodC50cmFuc2xhdGUnLFxyXG4gICAgICAgICAgICAnbmdNZXNzYWdlcycsXHJcbiAgICAgICAgICAgICduZ0FyaWEnLFxyXG4gICAgICAgICAgICAndWkuYm9vdHN0cmFwJyxcclxuICAgICAgICAgICAgJ3RyYW5zbGF0aW9ucycsXHJcbiAgICAgICAgICAgICduZ1Nhbml0aXplJ1xyXG4gICAgICAgIF0pXHJcblxyXG59KSgpO1xyXG5cclxuKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKCd0cmFuc2FjdGlvbkFwcCcpXHJcbiAgICAgICAgLmNvbnRyb2xsZXIoJ01haW5Db250cm9sbGVyJywgTWFpbkNvbnRyb2xsZXIpO1xyXG5cclxuICAgIC8vICBNYWluQ29udHJvbGxlci4kaW5qZWN0ID0gWydUcmFuc2FjdGlvblNlcnZpY2UnLCdocGZiRmlsZVByb2Nlc3NpbmcnLCckZmlsdGVyJ11cclxuXHJcbiAgICBmdW5jdGlvbiBNYWluQ29udHJvbGxlcigpIHtcclxuXHJcbiAgICAgICAgdmFyIHZtID0gdGhpcztcclxuICAgICAgICB2bS51c2VyVHlwZTtcclxuICAgIH1cclxufSkoKTtcclxuXHJcbihmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgndHJhbnNhY3Rpb25BcHAnKVxyXG4gICAgICAgIC5jb25maWcoWyckdHJhbnNsYXRlUHJvdmlkZXInLCckaHR0cFByb3ZpZGVyJywnJGxvY2F0aW9uUHJvdmlkZXInLCBmdW5jdGlvbiAoJHRyYW5zbGF0ZVByb3ZpZGVyLCRodHRwUHJvdmlkZXIsJGxvY2F0aW9uUHJvdmlkZXIpIHtcclxuICAgICAgICAgICAgJGxvY2F0aW9uUHJvdmlkZXIuaHRtbDVNb2RlKFxyXG4gICAgICAgICAgICAgICAge2VuYWJsZWQgOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgIHJlcXVpcmVCYXNlOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICByZXdyaXRlTGlua3MgOiBmYWxzZX0pO1xyXG5cclxuICAgICAgICAgICAgJHRyYW5zbGF0ZVByb3ZpZGVyLmRpcmVjdGl2ZVByaW9yaXR5KDEpO1xyXG4gICAgICAgICAgICAkdHJhbnNsYXRlUHJvdmlkZXIucHJlZmVycmVkTGFuZ3VhZ2UoJ2ZyJyk7XHJcbiAgICAgICAgICAgICR0cmFuc2xhdGVQcm92aWRlci51c2VMb2FkZXIoJ2N1c3RvbUxvYWQnKTtcclxuICAgICAgICAgICAgLy90aGlzIHByZXZlbnRzIGNvbmZsaWN0cyB3aXRoIG5nTWVzc2FnZVxyXG4gICAgICAgICAgICAkdHJhbnNsYXRlUHJvdmlkZXIudXNlU2FuaXRpemVWYWx1ZVN0cmF0ZWd5KG51bGwpO1xyXG4gICAgICAgICAgICAkdHJhbnNsYXRlUHJvdmlkZXIuZm9yY2VBc3luY1JlbG9hZCh0cnVlKTsgLy9uZWVkZWQgZm9yIHRoZSBjdXN0b20gbG9hZGVyXHJcblxyXG4gICAgICAgICAgICAvL3RoaXMgZGlzYWJsZXMgY2FjaGluZyBmb3IgYWxsIGZpbGVzIGluY2x1ZGluZyBqc29uLiBGaWxlIHRpbWVzdGFtcHMgbm8gbG9uZ2VyIG5lZWRlZCFcclxuICAgICAgICAgICAgaWYgKCEkaHR0cFByb3ZpZGVyLmRlZmF1bHRzLmhlYWRlcnMuZ2V0KSB7XHJcbiAgICAgICAgICAgICAgICAkaHR0cFByb3ZpZGVyLmRlZmF1bHRzLmhlYWRlcnMuZ2V0ID0ge307XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy9kaXNhYmxlIElFIGFqYXggcmVxdWVzdCBjYWNoaW5nXHJcbiAgICAgICAgICAgICRodHRwUHJvdmlkZXIuZGVmYXVsdHMuaGVhZGVycy5nZXRbJ0lmLU1vZGlmaWVkLVNpbmNlJ10gPSAnTW9uLCAyNiBKdWwgMTk5NyAwNTowMDowMCBHTVQnO1xyXG4gICAgICAgICAgICAvLyBleHRyYVxyXG4gICAgICAgICAgICAkaHR0cFByb3ZpZGVyLmRlZmF1bHRzLmhlYWRlcnMuZ2V0WydDYWNoZS1Db250cm9sJ10gPSAnbm8tY2FjaGUnO1xyXG4gICAgICAgICAgICAkaHR0cFByb3ZpZGVyLmRlZmF1bHRzLmhlYWRlcnMuZ2V0WydQcmFnbWEnXSA9ICduby1jYWNoZSc7XHJcblxyXG4gICAgICAgIH1dKTtcclxufSkoKTtcclxuIiwiYW5ndWxhci5tb2R1bGUoXCJ0cmFuc2xhdGlvbnNcIiwgW10pLmNvbmZpZyhbXCIkdHJhbnNsYXRlUHJvdmlkZXJcIiwgZnVuY3Rpb24oJHRyYW5zbGF0ZVByb3ZpZGVyKSB7XG4kdHJhbnNsYXRlUHJvdmlkZXIudHJhbnNsYXRpb25zKFwiZW5cIiwge1xyXG4gIFwiQ0lUWVwiOiBcIkNpdHlcIixcclxuICBcIkNPVU5UUllcIjogXCJDb3VudHJ5XCIsXHJcbiAgXCJQUk9WSU5DRVwiOiBcIlByb3ZpbmNlXCIsXHJcbiAgXCJQT1NUQUxcIjogXCJQb3N0YWwgQ29kZVwiLFxyXG4gIFwiUFJPVlNUQVRFXCI6IFwiUHJvdmluY2Ugb3IgU3RhdGVcIixcclxuICBcIlNUQVRFXCI6IFwiU3RhdGVcIixcclxuICBcIlNUUkVFVFwiOiBcIlN0cmVldCBBZGRyZXNzXCIsXHJcbiAgXCJaSVBcIjogXCJaaXAgQ29kZVwiLFxyXG4gIFwiQ09NUEFOWVwiOiBcIkNvbXBhbnlcIixcclxuICBcIkFERF9BRERSRVNTXCI6IFwiQWRkIEFkZHJlc3NcIixcclxuICBcIkNJVFlfVE9XTlwiOiBcIkNpdHkgb3IgVG93blwiLFxyXG4gIFwiU0FWRV9BRERSXCI6IFwiU2F2ZSBBZGRyZXNzXCIsXHJcbiAgXCJERUxFVEVfQUREUlwiOiBcIkRlbGV0ZSBBZGRyZXNzXCIsXHJcbiAgXCJBRERSX0lORk9cIjogXCJBZGRyZXNzIEluZm9ybWF0aW9uXCIsXHJcbiAgXCJBRERSX0RFVEFJTFNcIjogXCJBZGRyZXNzIERldGFpbHNcIixcclxuICBcIkFERFJfUk9MRV9MRUdFTkRcIjogXCJTZWxlY3Qgb25lIG9yIG1vcmUgcm9sZXMgZm9yIHRoaXMgY29tcGFueVwiLFxyXG4gIFwiUFJPRFVDVFNfSU1QT1JURURcIjogXCJJbXBvcnRlZCBQcm9kdWN0c1wiLFxyXG4gIFwiUFJPRFVDVF9UWVBFU1wiOlwiUHJvZHVjdHMgaW1wb3J0ZWQgYnkgdGhpcyBDb21wYW55XCIsXHJcbiAgXCJBTExfUFJPRFVDVFNcIjogXCJBbGwgUHJvZHVjdHNcIixcclxuICBcIlNFTEVDVEVEX1BST0RVQ1RTXCI6XCJTb21lIFByb2R1Y3RzXCIsXHJcbiAgXCJJREVOVElGWV9QUk9EVUNUU1wiOiBcIlByb3ZpZGUgdGhlIERvc3NpZXIgSWRlbnRpZmllcnMgZm9yIHRoZSBwcm9kdWN0cyB0aGF0IGFyZSBpbXBvcnRlZCBieSB0aGlzIENvbXBhbnlcIixcclxuICBcIkFERF9ET1NTSUVSX0lEXCI6XCJBZGQgRG9zc2llciBJRFwiLFxyXG4gIFwiSU1QT1JURVJfTk9OQ0ROXCI6XCJQbGVhc2UgZW5zdXJlIHlvdSBpbmRpY2F0ZSBhIENhbmFkaWFuIEltcG9ydGVyIG9uIHlvdXIgUHJvZHVjdCBJbmZvcm1hdGlvbiBSRVAgWE1MXCIsXHJcbiAgXCJDT1VOVFJZX0NIT09TRVwiOlwiQ2hvb3NlIGEgY291bnRyeVwiLFxyXG4gIFwiQ09VTlRSWV9TRUFSQ0hcIjpcIlNlbGVjdCBvciBTZWFyY2ggZm9yIGNvdW50cnlcIixcclxuICBcIlBST1ZJTkNFTElTVFwiOlwiUHJvdmluY2VcIlxyXG59KTtcblxuJHRyYW5zbGF0ZVByb3ZpZGVyLnRyYW5zbGF0aW9ucyhcImZyXCIsIHtcclxuICBcIkNJVFlcIjogXCJWaWxsZVwiLFxyXG4gIFwiQ09VTlRSWVwiOiBcIlBheXNcIixcclxuICBcIlBST1ZJTkNFXCI6IFwiUHJvdmluY2VcIixcclxuICBcIlBPU1RBTFwiOiBcIkNvZGUgcG9zdGFsXCIsXHJcbiAgXCJQUk9WU1RBVEVcIjogXCJQcm92aW5jZSBvdSDDqXRhdFwiLFxyXG4gIFwiU1RBVEVcIjogXCJFdGF0XCIsXHJcbiAgXCJTVFJFRVRcIjogXCJBZHJlc3NlXCIsXHJcbiAgXCJaSVBcIjogXCJaaXAgQ29kZVwiLFxyXG4gIFwiQ09NUEFOWVwiOiBcIkNvbXBhZ25pZVwiLFxyXG4gIFwiQUREX0FERFJFU1NcIjogXCJBam91dGVyIEFkZHJlc3NlXCIsXHJcbiAgXCJDSVRZX1RPV05cIjogXCJWaWxsZVwiLFxyXG4gIFwiU0FWRV9BRERSXCI6IFwiZnJfU2F2ZSBBZGRyZXNzXCIsXHJcbiAgXCJERUxFVEVfQUREUlwiOiBcIlN1cHByaW1lciBBZGRyZXNzZVwiLFxyXG4gIFwiQUREUl9JTkZPXCI6IFwiSW5mb3JtYXRpb25zIGQnYWRyZXNzZXNcIixcclxuICBcIkFERFJfREVUQUlMU1wiOiBcIkTDqXRhaWxzIGRlIGwnYWRyZXNzZVwiLFxyXG4gIFwiQUREUl9ST0xFX0xFR0VORFwiOiBcImZyX1NlbGVjdCBvbmUgb3IgbW9yZSByb2xlcyBmb3IgdGhpcyBjb21wYW55XCIsXHJcbiAgXCJJTVBPUlRFUl9OT05DRE5cIjpcImZyX1RoZXJlIHNob3VsZCBiZSBhIENhbmFkaWFuIEltcG9ydGVyIHdoZW4gdGhlIE1hbnVmYWN0dXJlciAvIFNwb25zb3IgaXMgbm90IGEgQ2FuYWRpYW4gQWRkcmVzc1wiLFxyXG4gIFwiQ09VTlRSWV9DSE9PU0VcIjpcIkNob2lzaXIgdW4gcGF5c1wiLFxyXG4gIFwiQ09VTlRSWV9TRUFSQ0hcIjpcImZyX1NlbGVjdCBvciBTZWFyY2ggZm9yIGNvdW50cnlcIixcclxuICBcIlBST1ZJTkNFTElTVFwiOlwiUHJvdmluY2VcIlxyXG5cclxufSk7XG5cbiR0cmFuc2xhdGVQcm92aWRlci50cmFuc2xhdGlvbnMoXCJlblwiLCB7XHJcblwiQUJcIjpcIkFsYmVydGFcIixcclxuXCJCQ1wiOlwiQnJpdGlzaCBDb2x1bWJpYVwiLFxyXG5cIk1CXCI6XCJNYW5pdG9iYVwiLFxyXG5cIk5CXCI6XCJOZXcgQnJ1bnN3aWNrXCIsXHJcblwiTkxcIjpcIk5ld2ZvdW5kbGFuZCBhbmQgTGFicmFkb3JcIixcclxuXCJOVFwiOlwiTm9ydGh3ZXN0IFRlcnJpdG9yaWVzXCIsXHJcblwiTlNcIjpcIk5vdmEgU2NvdGlhXCIsXHJcblwiTlVcIjpcIk51bmF2dXRcIixcclxuXCJPTlwiOlwiT250YXJpb1wiLFxyXG5cIlBFXCI6XCJQcmluY2UgRWR3YXJkIElzbGFuZFwiLFxyXG5cIlFDXCI6XCJRdWViZWNcIixcclxuXCJTS1wiOlwiU2Fza2F0Y2hld2FuXCIsXHJcblwiWVRcIjpcIll1a29uXCIsXHJcblwiQUxcIjpcIkFsYWJhbWFcIixcclxuXCJBS1wiOlwiQWxhc2thXCIsXHJcblwiQVpcIjpcIkFyaXpvbmFcIixcclxuXCJBUlwiOlwiQXJrYW5zYXNcIixcclxuXCJDQVwiOlwiQ2FsaWZvcm5pYVwiLFxyXG5cIkNPXCI6XCJDb2xvcmFkb1wiLFxyXG5cIkNUXCI6XCJDb25uZWN0aWN1dFwiLFxyXG5cIkRFXCI6XCJEZWxhd2FyZVwiLFxyXG5cIkRDXCI6XCJEaXN0cmljdCBvZiBDb2x1bWJpYVwiLFxyXG5cIkZMXCI6XCJGbG9yaWRhXCIsXHJcblwiR0FcIjpcIkdlb3JnaWFcIixcclxuXCJISVwiOlwiSGF3YWlpXCIsXHJcblwiSURcIjpcIklkYWhvXCIsXHJcblwiSUxcIjpcIklsbGlub2lzXCIsXHJcblwiSU5cIjpcIkluZGlhbmFcIixcclxuXCJJQVwiOlwiSW93YVwiLFxyXG5cIktTXCI6XCJLYW5zYXNcIixcclxuXCJLWVwiOlwiS2VudHVja3lcIixcclxuXCJMQVwiOlwiTG91aXNpYW5hXCIsXHJcblwiTUVcIjpcIk1haW5lXCIsXHJcblwiTURcIjpcIk1hcnlsYW5kXCIsXHJcblwiTUFcIjpcIk1hc3NhY2h1c2V0dHNcIixcclxuXCJNSVwiOlwiTWljaGlnYW5cIixcclxuXCJNTlwiOlwiTWlubmVzb3RhXCIsXHJcblwiTVNcIjpcIk1pc3Npc3NpcHBpXCIsXHJcblwiTU9cIjpcIk1pc3NvdXJpXCIsXHJcblwiTVRcIjpcIk1vbnRhbmFcIixcclxuXCJORVwiOlwiTmVicmFza2FcIixcclxuXCJOVlwiOlwiTmV2YWRhXCIsXHJcblwiTkhcIjpcIk5ldyBIYW1wc2hpcmVcIixcclxuXCJOSlwiOlwiTmV3IEplcnNleVwiLFxyXG5cIk5NXCI6XCJOZXcgTWV4aWNvXCIsXHJcblwiTllcIjpcIk5ldyBZb3JrXCIsXHJcblwiTkNcIjpcIk5vcnRoIENhcm9saW5hXCIsXHJcblwiTkRcIjpcIk5vcnRoIERha290YVwiLFxyXG5cIk9IXCI6XCJPaGlvXCIsXHJcblwiT0tcIjpcIk9rbGFob21hXCIsXHJcblwiT1JcIjpcIk9yZWdvblwiLFxyXG5cIlBBXCI6XCJQZW5uc3lsdmFuaWFcIixcclxuXCJSSVwiOlwiUmhvZGUgSXNsYW5kXCIsXHJcblwiU0NcIjpcIlNvdXRoIENhcm9saW5hXCIsXHJcblwiU0RcIjpcIlNvdXRoIERha290YVwiLFxyXG5cIlROXCI6XCJUZW5uZXNzZWVcIixcclxuXCJUWFwiOlwiVGV4YXNcIixcclxuXCJVVFwiOlwiVXRhaFwiLFxyXG5cIlZUXCI6XCJWZXJtb250XCIsXHJcblwiVkFcIjpcIlZpcmdpbmlhXCIsXHJcblwiV0FcIjpcIldhc2hpbmd0b25cIixcclxuXCJXVlwiOlwiV2VzdCBWaXJnaW5pYVwiLFxyXG5cIldJXCI6XCJXaXNjb25zaW5cIixcclxuXCJXWVwiOlwiV3lvbWluZ1wiXHJcbn1cclxuXHJcbik7XG5cbiR0cmFuc2xhdGVQcm92aWRlci50cmFuc2xhdGlvbnMoXCJmclwiLCB7XHJcblwiQUJcIjpcIkFsYmVydGFcIixcclxuXCJCQ1wiOlwiQ29sb21iaWUtQnJpdGFubmlxdWVcIixcclxuXCJQRVwiOlwiw45sZS1kdS1QcmluY2Utw4lkb3VhcmRcIixcclxuXCJNQlwiOlwiTWFuaXRvYmFcIixcclxuXCJOQlwiOlwiTm91dmVhdS1CcnVuc3dpY2tcIixcclxuXCJOU1wiOlwiTm91dmVsbGUtw4ljb3NzZVwiLFxyXG5cIk5VXCI6XCJOdW5hdnV0XCIsXHJcblwiT05cIjpcIk9udGFyaW9cIixcclxuXCJRQ1wiOlwiUXXDqWJlY1wiLFxyXG5cIlNLXCI6XCJTYXNrYXRjaGV3YW5cIixcclxuXCJOTFwiOlwiVGVycmUtTmV1dmUgZXQgTGFicmFkb3JcIixcclxuXCJOVFwiOlwiVGVycml0b2lyZXMgZHUgTm9yZC1PdWVzdFwiLFxyXG5cIllUXCI6XCJZdWtvblwiLFxyXG5cIkFMXCI6XCJBbGFiYW1hXCIsXHJcblwiQUtcIjpcIkFsYXNrYVwiLFxyXG5cIkFaXCI6XCJBcml6b25hXCIsXHJcblwiQVJcIjpcIkFya2Fuc2FzXCIsXHJcblwiQ0FcIjpcIkNhbGlmb3JuaWVcIixcclxuXCJOQ1wiOlwiQ2Fyb2xpbmUgZHUgbm9yZFwiLFxyXG5cIlNDXCI6XCJDYXJvbGluZSBkdSBzdWRcIixcclxuXCJDT1wiOlwiQ29sb3JhZG9cIixcclxuXCJDVFwiOlwiQ29ubmVjdGljdXRcIixcclxuXCJORFwiOlwiRGFrb3RhIGR1IG5vcmRcIixcclxuXCJTRFwiOlwiRGFrb3RhIGR1IHN1ZFwiLFxyXG5cIkRFXCI6XCJEZWxhd2FyZVwiLFxyXG5cIkRDXCI6XCJEaXN0cmljdCBkZSBDb2x1bWJpYVwiLFxyXG5cIkZMXCI6XCJGbG9yaWRlXCIsXHJcblwiR0FcIjpcIkfDqW9yZ2llXCIsXHJcblwiSElcIjpcIkhhd2FpaVwiLFxyXG5cIklEXCI6XCJJZGFob1wiLFxyXG5cIklMXCI6XCJJbGxpbm9pc1wiLFxyXG5cIklOXCI6XCJJbmRpYW5hXCIsXHJcblwiSUFcIjpcIklvd2FcIixcclxuXCJLU1wiOlwiS2Fuc2FzXCIsXHJcblwiS1lcIjpcIktlbnR1Y2t5XCIsXHJcblwiTllcIjpcIkwnw6l0YXQgZGUgTmV3IFlvcmtcIixcclxuXCJXQVwiOlwiTCfDqXRhdCBkZSB3YXNoaW5ndG9uXCIsXHJcblwiTEFcIjpcIkxvdWlzaWFuZVwiLFxyXG5cIk1FXCI6XCJNYWluZVwiLFxyXG5cIk1EXCI6XCJNYXJ5bGFuZFwiLFxyXG5cIk1BXCI6XCJNYXNzYWNodXNldHRzXCIsXHJcblwiTUlcIjpcIk1pY2hpZ2FuXCIsXHJcblwiTU5cIjpcIk1pbm5lc290YVwiLFxyXG5cIk1TXCI6XCJNaXNzaXNzaXBwaVwiLFxyXG5cIk1PXCI6XCJNaXNzb3VyaVwiLFxyXG5cIk1UXCI6XCJNb250YW5hXCIsXHJcblwiTkVcIjpcIk5lYnJhc2thXCIsXHJcblwiTlZcIjpcIk5ldmFkYVwiLFxyXG5cIk5IXCI6XCJOZXcgSGFtcHNoaXJlXCIsXHJcblwiTkpcIjpcIk5ldyBKZXJzZXlcIixcclxuXCJOTVwiOlwiTm91dmVhdS1tZXhpcXVlXCIsXHJcblwiT0hcIjpcIk9oaW9cIixcclxuXCJPS1wiOlwiT2tsYWhvbWFcIixcclxuXCJPUlwiOlwiT3JlZ29uXCIsXHJcblwiUEFcIjpcIlBlbm5zeWx2YW5pZVwiLFxyXG5cIlJJXCI6XCJSaG9kZSBJc2xhbmRcIixcclxuXCJUTlwiOlwiVGVubmVzc2VlXCIsXHJcblwiVFhcIjpcIlRleGFzXCIsXHJcblwiVVRcIjpcIlV0YWhcIixcclxuXCJWVFwiOlwiVmVybW9udFwiLFxyXG5cIlZBXCI6XCJWaXJnaW5pZVwiLFxyXG5cIldWXCI6XCJWaXJnaW5pZS1vY2NpZGVudGFsZVwiLFxyXG5cIldJXCI6XCJXaXNjb25zaW5cIixcclxuXCJXWVwiOlwiV3lvbWluZ1wiXHJcbn0pO1xuXG4kdHJhbnNsYXRlUHJvdmlkZXIudHJhbnNsYXRpb25zKFwiZW5cIiwge1xyXG4gIFwiRklSU1ROQU1FXCI6IFwiRmlyc3QgTmFtZVwiLFxyXG4gIFwiTEFTVE5BTUVcIjogXCJMYXN0IE5hbWVcIixcclxuICBcIklOSVRJQUxTXCI6IFwiSW5pdGlhbHNcIixcclxuICBcIkxBTkdDT1JSRVNQT05EXCI6IFwiTGFuZ3VhZ2Ugb2YgQ29ycmVzcG9uZGFuY2VcIixcclxuICBcIkpPQlRJVExFXCI6IFwiSm9iIFRpdGxlXCIsXHJcbiAgXCJTQUxVVEFUSU9OXCI6IFwiU2FsdXRhdGlvblwiLFxyXG4gIFwiU0FMVVRfTVJcIjogXCJNci5cIixcclxuICBcIlNBTFVUX01TXCI6IFwiTXMuXCIsXHJcbiAgXCJTQUxVVF9EUlwiOiBcIkRyLlwiLFxyXG4gIFwiU0FMVVRfTVJTXCI6IFwiTXJzLlwiLFxyXG4gIFwiUk9MRV9QUklNQVJZXCI6IFwiUHJpbWFyeVwiLFxyXG4gIFwiUk9MRV9TRUNPTkRBUllcIjogXCJBbHRlcm5hdGVcIixcclxuICBcIkNPTlRBQ1RFTUFJTFwiOiAgXCJFbWFpbFwiLFxyXG4gIFwiRkFYX05VTUJFUlwiOiBcIkZheCBOdW1iZXJcIixcclxuICBcIlBIT05FX0VYVFwiOiBcIlBob25lIEV4dGVuc2lvblwiLFxyXG4gIFwiUk9MRVNcIjogXCJSb2xlc1wiLFxyXG4gIFwiUEhPTkVOVU1CRVJcIjogXCJQaG9uZSBOdW1iZXJcIixcclxuICBcIkNPTlRBQ1RfSU5GT1wiOiBcIkNvbXBhbnkgUmVwcmVzZW50YXRpdmUgSW5mb3JtYXRpb25cIixcclxuICBcIkFNRU5EXCI6IFwiQW1lbmRcIixcclxuICBcIlJFUF9DT05UQUNUXCI6ICBcIlJFUCBDb250YWN0XCIsXHJcbiAgXCJPTkVfUk9MRVwiOiBcIlJvbGVcIixcclxuICBcIkNPTlRBQ1RfREVUQUlMU1wiOiBcIkNvbXBhbnkgUmVwcmVzZW50YXRpdmUgRGV0YWlsc1wiLFxyXG4gIFwiQUREX0NPTlRBQ1RcIjogXCJBZGQgUkVQIENvbnRhY3RcIixcclxuICBcIkNPTlRBQ1RfUk9MRV9MRUdFTkRcIjogXCJTZWxlY3Qgb25lIG9yIG1vcmUgcm9sZXMgZm9yIHRoaXMgY29tcGFueSByZXByZXNlbnRhdGl2ZVwiLFxyXG4gIFwiQ09OVEFDVF9ST0xFX0lOU1RSVUNUXCI6XCJDb21wYW55IFJlcHJlc2VudGF0aXZlIFJvbGUgSW5zdHJ1Y3Rpb25zXCIsXHJcbiAgXCJBRERfUkVQUkVTXCI6IFwiQWRkIENvbXBhbnkgUmVwcmVzZW50YXRpdmVcIixcclxuICBcIkRFTEVURV9SRVBSRVNcIjogXCJEZWxldGUgQ29tcGFueSBSZXAuXCIsXHJcbiAgXCJTQVZFX1JFUFJFU1wiOiBcIlNhdmUgQ29tcGFueSBSZXAuXCJcclxufSk7XG5cbiR0cmFuc2xhdGVQcm92aWRlci50cmFuc2xhdGlvbnMoXCJmclwiLCB7XHJcbiAgXCJGSVJTVE5BTUVcIjogXCJQcsOpbm9tXCIsXHJcbiAgXCJMQVNUTkFNRVwiOiBcIk5vbVwiLFxyXG4gIFwiSU5JVElBTFNcIjogXCJJbml0aWFsZXNcIixcclxuICBcIkxBTkdDT1JSRVNQT05EXCI6IFwiTGFuZ3VlIGRlIGNvcnJlc3BvbmRhbmNlXCIsXHJcbiAgXCJKT0JUSVRMRVwiOiBcIlRpdHJlIGRlIHBvc3RlXCIsXHJcbiAgXCJTQUxVVEFUSU9OXCI6IFwiVGl0cmUgZGUgY2l2aWxpdMOpXCIsXHJcbiAgXCJTQUxVVF9NUlwiOiBcIk0uXCIsXHJcbiAgXCJTQUxVVF9NU1wiOiBcIk1tZVwiLFxyXG4gIFwiU0FMVVRfRFJcIjogXCJEci5cIixcclxuICBcIlNBTFVUX01SU1wiOiBcIk1sbGVcIixcclxuICBcIlJPTEVfUFJJTUFSWVwiOiBcIlByaW1haXJlXCIsXHJcbiAgXCJST0xFX1NFQ09OREFSWVwiOiBcIkFsdGVybmVyXCIsXHJcbiAgXCJDT05UQUNURU1BSUxcIjogXCJBZHJlc3NlIMOpbGVjdHJvbmlxdWVcIixcclxuICBcIkZBWF9OVU1CRVJcIjogXCJOdW3DqXJvIGRlIHTDqWzDqWNvcGlldXJcIixcclxuICBcIlBIT05FX0VYVFwiOiBcIlBvc3RlXCIsXHJcbiAgXCJBRERSX1JPTEVTXCI6XCJmcl9Sb2xlc1wiLFxyXG4gIFwiUEhPTkVOVU1CRVJcIjogXCJOdW3DqXJvIGRlIHTDqWzDqXBob25lXCIsXHJcbiAgXCJDT05UQUNUX0lORk9cIjogXCJmcl9Db21wYW55IFJlcHJlc2VudGF0aXZlIEluZm9ybWF0aW9uXCIsXHJcbiAgXCJBTUVORFwiOiBcImZyX0FtZW5kXCIsXHJcbiAgXCJSRVBfQ09OVEFDVFwiOiAgXCJmcl9SRVAgQ29udGFjdFwiLFxyXG4gIFwiT05FX1JPTEVcIjogXCJmcl9Sb2xlXCIsXHJcbiAgXCJDT05UQUNUX0RFVEFJTFNcIjogXCJmcl9Db21wYW55IFJlcHJlc2VudGF0aXZlIERldGFpbHNcIixcclxuICBcIkFERF9DT05UQUNUXCI6IFwiZnJfQWRkIFJFUCBDb250YWN0XCIsXHJcbiAgXCJDT05UQUNUX1JPTEVfTEVHRU5EXCI6IFwiZnJfU2VsZWN0IG9uZSBvciBtb3JlIHJvbGVzIGZvciB0aGlzIGNvbXBhbnkgcmVwcmVzZW50YXRpdmVcIixcclxuICBcIkNPTlRBQ1RfUk9MRV9JTlNUUlVDVFwiOlwiZnJfQ29tcGFueSBSZXByZXNlbnRhdGl2ZSBSb2xlIEluc3RydWN0aW9uc1wiLFxyXG4gIFwiQUREX1JFUFJFU1wiOiBcImZyX0FkZCBDb21wYW55IFJlcHJlc2VudGF0aXZlXCIsXHJcbiAgXCJERUxFVEVfUkVQUkVTXCI6IFwiZnJfRGVsZXRlIENvbXBhbnkgUmVwLlwiLFxyXG4gIFwiU0FWRV9SRVBSRVNcIjogXCJmcl9TYXZlIENvbXBhbnkgUmVwLlwiXHJcbn0pO1xuXG4kdHJhbnNsYXRlUHJvdmlkZXIudHJhbnNsYXRpb25zKFwiZW5cIiwge1xyXG4gIFwiQVBQTF9TVEFUVVNcIjogXCJFbnJvbG1lbnQgU3RhdHVzXCIsXHJcbiAgXCJFTlJPTF9WRVJTSU9OXCI6IFwiRW5yb2xtZW50IFZlcnNpb25cIixcclxuICBcIkRBVEVfU0FWRURcIjogXCJEYXRlIExhc3QgU2F2ZWRcIixcclxuICBcIkFNRU5EX0VOUk9MXCI6ICBcIkFtZW5kIEVucm9sbWVudFwiLFxyXG4gIFwiQU1FTkRfTVNHXCI6XCJFZGl0IHJlY29yZHMgdG8gYmUgYW1lbmRlZCBiZWxvdy5cIixcclxuICBcIlJFQVNPTl9BTUVORFwiOlwiUmVhc29uIGZvciBhbWVuZG1lbnRcIlxyXG59KTtcblxuJHRyYW5zbGF0ZVByb3ZpZGVyLnRyYW5zbGF0aW9ucyhcImZyXCIsIHtcclxuICBcIkFQUExfU1RBVFVTXCI6IFwiZnJfRW5yb2xtZW50IFN0YXR1c1wiLFxyXG4gIFwiRU5ST0xfVkVSU0lPTlwiOiBcIlZlcnNpb24gZOKAmWluc2NyaXB0aW9uXCIsXHJcbiAgXCJEQVRFX1NBVkVEXCI6IFwiRGF0ZSBkdSBkZXJuaWVyIGVucmVnaXN0cmVtZW50XCIsXHJcbiAgXCJBTUVORF9FTlJPTFwiOiBcImZyX0FtZW5kIEVucm9sbWVudFwiLFxyXG4gIFwiQU1FTkRfTVNHXCI6XCJmcl9FZGl0IHJlY29yZHMgdG8gYmUgYW1lbmRlZCBiZWxvdy5cIixcclxuICBcIlJFQVNPTl9BTUVORFwiOlwiZnJfUmVhc29uIGZvciBhbWVuZG1lbnRcIlxyXG59KTtcblxuJHRyYW5zbGF0ZVByb3ZpZGVyLnRyYW5zbGF0aW9ucyhcImVuXCIsIHtcclxuICBcIlNFTEVDVF9MT0FEXCI6IFwiU2VsZWN0IGEgZmlsZSB0byBsb2FkXCIsXHJcbiAgXCJNU0dfU1VDQ0VTU19MT0FEXCI6IFwiVGhlIGZpbGUgd2FzIGxvYWRlZCBzdWNjZXNzZnVsbHlcIixcclxuICBcIk1TR19FUlJfSlNPTlBBUlNFXCI6IFwiRXJyb3I6IHRoZXJlIHdhcyBhbiBlcnJvciBwYXJzaW5nIHRoZSB3b3JraW5nIGZpbGUuXCIsXHJcbiAgXCJNU0dfRVJSX1hNTFBBUlNFXCI6IFwiRXJyb3I6IHRoZXJlIHdhcyBhbiBlcnJvciBwYXJzaW5nIHRoZSBkcmFmdCBYTUwgZmlsZS5cIixcclxuICBcIk1TR19FUlJfRklMRV9MT0FEXCI6IFwiRXJyb3I6IHRoZXJlIHdhcyBhIHByb2JsZW0gbG9hZGluZyB0aGUgZmlsZS5cIixcclxuICBcIk1TR19FUlJfRklMRV9UWVBFXCI6IFwiRXJyb3I6IEFuIGludmFsaWQgZmlsZSB0eXBlIHdhcyBzZWxlY3RlZC5cIixcclxuICBcIk1TR19FUlJfRk9STV9UWVBFXCI6IFwiRXJyb3I6IHRoZSB3cm9uZyBmb3JtIHR5cGUgd2FzIHNlbGVjdGVkIGZvciB0aGlzIGZvcm0uXCIsXHJcbiAgXCJNU0dfRVJSX0NIRUNLU1VNX0ZBSUxcIjogXCJFcnJvcjogdGhlIGNoZWNrc3VtIGluIHRoZSBmaWxlIGRvZXMgbm90IG1hdGNoIHRoZSBjYWxjdWxhdGVkIGNoZWNrc3VtXCJcclxufSk7XG5cbiR0cmFuc2xhdGVQcm92aWRlci50cmFuc2xhdGlvbnMoXCJmclwiLCB7XHJcbiAgXCJTRUxFQ1RfTE9BRFwiOiBcIlPDqWxlY3Rpb25uZXogdW4gZmljaGllciDDoCBjaGFyZ2VyXCIsXHJcbiAgXCJNU0dfU1VDQ0VTU19MT0FEXCI6IFwiTGUgZmljaGllciBhIMOpdMOpIGNoYXJnw6kgYXZlYyBzdWNjw6hzXCIsXHJcbiAgXCJNU0dfRVJSX0pTT05QQVJTRVwiOiBcIkVycmV1cjogaWwgeSBhIGV1IHVuZSBlcnJldXIgZW4gYW5hbHlzYW50IGxlIGZpY2hpZXIgZGUgdHJhdmFpbC5cIixcclxuICBcIk1TR19FUlJfWE1MUEFSU0VcIjogXCJFcnJldXI6IGlsIHkgYXZhaXQgdW5lIGVycmV1ciBkJ2FuYWx5c2UgZHUgcHJvamV0IGRlIGZpY2hpZXIgWE1MLFwiLFxyXG4gIFwiTVNHX0VSUl9GSUxFX0xPQURcIjogXCJFcnJldXI6IGlsIHkgYSBldSB1biBwcm9ibMOobWUgbG9ycyBkdSBjaGFyZ2VtZW50IGR1IGZpY2hpZXIuXCIsXHJcbiAgXCJNU0dfRVJSX0ZJTEVfVFlQRVwiOiBcIkVycmV1cjogdW4gdHlwZSBkZSBmaWNoaWVyIGludmFsaWRlIGEgw6l0w6kgc8OpbGVjdGlvbm7DqS5cIixcclxuICBcIk1TR19FUlJfRk9STV9UWVBFXCI6IFwiRXJyZXVyOiBsZSB0eXBlIGRlIGZvcm11bGFpcmUgaW5jb3JyZWN0IGEgw6l0w6kgc8OpbGVjdGlvbm7DqSBwb3VyIGNlIGZvcm11bGFpcmUuXCIsXHJcbiAgXCJNU0dfRVJSX0NIRUNLU1VNX0ZBSUxcIjogXCJFcnJldXI6IExhIHNvbW1lIGRlIGNvbnRyw7RsZSBkYW5zIGxlIGZpY2hpZXIgbmUgY29ycmVzcG9uZCBwYXMgw6AgbGEgc29tbWUgZGUgY29udHLDtGxlIGNhbGN1bMOpZS5cIlxyXG59KTtcblxuJHRyYW5zbGF0ZVByb3ZpZGVyLnRyYW5zbGF0aW9ucyhcImVuXCIsIHtcclxuICBcIllcIjogXCJZZXNcIixcclxuICBcIk5cIjogXCJOb1wiLFxyXG4gIFwiQUREXCI6IFwiQWRkXCIsXHJcbiAgXCJERUxFVEVST1dcIjogXCJEZWxldGUgUm93XCIsXHJcbiAgXCJTRUxFQ1RFRFJPV1wiOiBcIlNlbGVjdGVkIFJvd1wiLFxyXG4gIFwiUkVRVUlSRURcIjogXCIocmVxdWlyZWQpXCIsXHJcbiAgXCJST0xFU19TRUxFQ1RcIjogXCJTZWxlY3Qgb25lIG9yIG1vcmUgcm9sZXMgZm9yIHRoaXMgcmVjb3JkXCIsXHJcbiAgXCJORVdcIjogXCJOZXdcIixcclxuICBcIkFNRU5EXCI6IFwiQW1lbmRcIixcclxuICBcIkFQUFJPVkVEXCI6IFwiQXBwcm92ZWRcIixcclxuICBcIkZJTkFMXCI6IFwiRmluYWxcIixcclxuICBcIkNMSUNLX1RPR0dMRVwiOiBcIkNsaWNrIHRvIHRvZ2dsZSB0aGUgY29sbGFwc2Ugb3IgZXhwYW5kIGRldGFpbHMgZm9yIHRoaXMgYWRkcmVzcy5cIixcclxuICBcIkFNRU5EX1JFQ09SRFwiOiBcIkFtZW5kIFJlY29yZFwiLFxyXG4gIFwiZW5cIjogXCJFbmdsaXNoXCIsXHJcbiAgXCJmclwiOiBcIkZyZW5jaFwiLFxyXG4gIFwiRElTQ0FSRF9DSEFOR0VTXCI6IFwiRGlzY2FyZCBDaGFuZ2VzXCIsXHJcbiAgXCJSRVBTRUNPTkRBUllcIjogXCJBbHRlcm5hdGUgUkVQIGNvbnRhY3RcIixcclxuICBcIlJFUFBSSU1BUllcIjogXCJQcmltYXJ5IFJFUCBjb250YWN0XCIsXHJcbiAgXCJNQUlMSU5HXCI6IFwiUmVndWxhdG9yeSBNYWlsaW5nIC8gQW5udWFsIENvbnRhY3QgQWRkcmVzc1wiLFxyXG4gIFwiQklMTElOR1wiOiBcIkJpbGxpbmcgQWRkcmVzc1wiLFxyXG4gIFwiTUFOVUZBQ1RVUkVSXCI6IFwiTWFudWZhY3R1cmVyIC8gU3BvbnNvciBNYWlsaW5nIEFkZHJlc3NcIixcclxuICBcIklNUE9SVEVSX0FERFJFU1NcIjogXCJDYW5hZGlhbiBJbXBvcnRlciBNYWlsaW5nIEFkZHJlc3NcIixcclxuICBcIkNPTlRBQ1RfTUFJTElOR1wiOiBcIlJlZ3VsYXRvcnkgTWFpbGluZyAvIEFubnVhbCBDb250YWN0XCIsXHJcbiAgXCJDT05UQUNUX0JJTExJTkdcIjogXCJCaWxsaW5nIENvbnRhY3RcIixcclxuICBcIkNPTlRBQ1RfTUFOVUZBQ1RVUkVSXCI6IFwiTWFudWZhY3R1cmVyIC8gU3BvbnNvciBDb250YWN0XCIsXHJcbiAgXCJDT05UQUNUX0lNUE9SVEVSXCI6IFwiSW1wb3J0ZXIgQ29udGFjdFwiLFxyXG4gIFwiQVBQUk9WRV9GSU5BTFwiOiBcIkdlbmVyYXRlIEZpbmFsIFhNTFwiLFxyXG4gIFwiU0FWRV9EUkFGVFwiOiBcIlNhdmUgRHJhZnQgWE1MXCIsXHJcbiAgXCJQUklNQVJZXCI6IFwiUHJpbWFyeVwiLFxyXG4gIFwiU0VDT05EQVJZXCI6IFwiQWx0ZXJuYXRlXCIsXHJcbiAgXCJUT0dHTEVfRVhQQU5EXCI6IFwiQ2xpY2sgdG8gdG9nZ2xlIGNvbGxhcHNlIG9yIGV4cGFuZCBkZXRhaWxzIG9mIHJvd1wiLFxyXG4gIFwiQ09OVFJPTF9OVU1CRVJcIjogXCJDb250cm9sIE51bWJlclwiLFxyXG4gIFwiUkVQX0NPTlRBQ1RfSU5GT1wiOiBcIlJFUCBDb250YWN0IEluZm9ybWF0aW9uXCIsXHJcbiAgXCJTQVZFX0NPTlRBQ1RcIjpcIlNhdmUgQ29udGFjdFwiLFxyXG4gIFwiREVMRVRFX0NPTlRBQ1RcIjpcIkRlbGV0ZSBDb250YWN0XCIsXHJcbiAgXCJDT01QQU5ZX0lEXCI6IFwiQ29tcGFueSBJRFwiLFxyXG4gIFwiRE9TU0lFUl9JRFwiOiBcIkRvc3NpZXIgSURcIixcclxuICBcIklNUE9SVEVSXCI6IFwiSW1wb3J0ZXJcIixcclxuICBcIklNUE9SVEVSSURcIjpcIkltcG9ydGVyIENvbXBhbnkgSURcIixcclxuICBcIklNUE9SVEVSX0NPTVBBTllfTkFNRVwiOiBcIkltcG9ydGVyIENvbXBhbnkgTmFtZVwiLFxyXG4gIFwiSU1QT1JURVJfQ09NUEFOWV9JRF9JRlwiOiBcIkltcG9ydGVyIENvbXBhbnkgSUQgKGlmIGFwcGxpY2FibGUpXCIsXHJcbiAgXCJJTVBPUlRFUl9DT01QQU5ZX05BTUVfSUZcIjogXCJJbXBvcnRlciBDb21wYW55IE5hbWUgKGlmIGFwcGxpY2FibGUpXCIsXHJcbiAgXCJFUlJPUlNcIjpcIkVycm9yc1wiLFxyXG4gIFwiVU5LTk9XTlwiOiBcIlVua25vd25cIixcclxuICBcIkJJT0xPR0lDXCI6IFwiQmlvbG9naWNcIixcclxuICBcIlBIQVJNQUNFVVRJQ0FMXCI6IFwiUGhhcm1hY2V1dGljYWxcIixcclxuICBcIkNMSU5JQ0FMX1RSSUFMXCI6IFwiQ2xpbmljYWwgVHJpYWxcIixcclxuICBcIlZFVEVSSU5BUllcIjpcIlZldGVyaW5hcnlcIixcclxuICBcIkhFTFBfRklMRV9MT0FEXCI6IFwiZmlsZSBsb2FkIGluc3RydWN0aW9uc1wiLFxyXG4gIFwiRVhQQU5EXCI6IFwiRXhwYW5kXCIsXHJcbiAgXCJIRUxQX0FDVElWSVRZX01BSU5cIjogXCJBY3Rpdml0eSBJbnN0cnVjdGlvbnNcIixcclxuICBcIkhFTFBfQUNUSVZJVFlfUkVQXCI6IFwiUkVQIENvbnRhY3QgSW5zdHJ1Y3Rpb25zXCIsXHJcbiAgXCJDQUxFTkRBUlwiOiBcIlBpY2sgZGF0ZSBmcm9tIGNhbGVuZGFyXCIsXHJcbiAgXCJISURFX0NBTEVOREFSXCI6IFwiSGlkZSBDYWxlbmRhciAoZXNjYXBlIGtleSlcIixcclxuICBcIk9USEVSXCI6IFwiT3RoZXJcIixcclxuICBcIkhFTFBfUkVQX0NPTlRBQ1RcIjogXCJSRVAgQ29udGFjdCBJbnN0cnVjdGlvbnNcIixcclxuICBcIk9USEVSX1VOSVRTXCI6IFwiVW5pdHMgb3RoZXIgZGV0YWlsc1wiLFxyXG4gIFwiQ09NUEFOWU5BTUVcIjpcIkNvbXBhbnkgTmFtZSAoRnVsbCBsZWdhbCBuYW1lIC0gbm8gYWJicmV2aWF0aW9ucylcIixcclxuICBcIkNPUFlcIjpcIkNvcHlcIixcclxuICBcIkRFTEVURVwiOlwiRGVsZXRlXCIsXHJcbiAgXCJTQVZFX1dPUktJTkdcIjpcIlNhdmUgV29ya2luZyBDb3B5XCIsXHJcbiAgXCJDT01QQU5ZX05PQUJCUkVWXCI6IFwiQ29tcGFueSBOYW1lIChGdWxsIGxlZ2FsIE5hbWUgLSBubyBhYmJyZXZpYXRpb25zKVwiLFxyXG4gIFwiQ0xPU0VfQUxFUlRcIjpcIkNvbGxhcHNlIGluc3RydWN0aW9uc1wiLFxyXG4gIFwiQ09MTEFQU0VcIjpcIkNvbGxhcHNlXCIsXHJcbiAgXCJTQVZFX1JFQ09SRFwiOlwiU2F2ZSBSZWNvcmRcIixcclxuICBcIkRFTEVURV9SRUNPUkRcIjpcIkRlbGV0ZSBSZWNvcmRcIixcclxuICBcIkNPTlRST0xfTlVNXCI6IFwiQ29udHJvbCBOdW1iZXJcIixcclxuICBcIk9USEVSX0RFVEFJTFNcIjogXCJPdGhlciAtIHNwZWNpZnlcIixcclxuICBcIlBST0RfTkFNRVwiOlwiUHJvZHVjdCBOYW1lXCIsXHJcbiAgXCJQUk9EX05BTUVfSEVMUFwiOlwiUHJvZHVjdCBOYW1lIEluc3RydWN0aW9uc1wiLFxyXG4gIFwiUFJPUF9OQU1FX0hFTFBcIjpcIlByb3BlciwgQ29tbW9uIG9yIE5vbi1wcm9wcmlldGFyeSBOYW1lIEluc3RydWN0aW9uc1wiLFxyXG4gIFwiUkVMQVRFRF9JTkZPX0hFTFBcIjpcIlJlbGF0ZWQgSW5mb3JtYXRpb24gSW5zdHJ1Y3Rpb25zXCIsXHJcbiAgXCJET1NTSUVSX1RZUEVcIjogXCJEb3NzaWVyIFR5cGVcIlxyXG59KTtcblxuJHRyYW5zbGF0ZVByb3ZpZGVyLnRyYW5zbGF0aW9ucyhcImZyXCIsIHtcclxuICBcIllcIjogXCJPdWlcIixcclxuICBcIk5cIjogXCJOb25cIixcclxuICBcIkFERFwiOiBcImZyX0FkZFwiLFxyXG4gIFwiREVMRVRFUk9XXCI6IFwiZnJfRGVsZXRlIFJvd1wiLFxyXG4gIFwiU0VMRUNURURST1dcIjogXCJTZWxlY3RlZCBSb3dcIixcclxuICBcIlJFUVVJUkVEXCI6IFwiKHJlcXVpcylcIixcclxuICBcIlJPTEVTX1NFTEVDVFwiOiBcImZyX1NlbGVjdCBvbmUgb3IgbW9yZSByb2xlcyBmb3IgdGhpcyByZWNvcmRcIixcclxuICBcIk5FV1wiOiBcImZyX05ld1wiLFxyXG4gIFwiQU1FTkRcIjogXCJmcl9BbWVuZFwiLFxyXG4gIFwiQVBQUk9WRURcIjogXCJmcl9BcHByb3ZlZFwiLFxyXG4gIFwiQ0xJQ0tfVE9HR0xFXCI6IFwiZnJfQ2xpY2sgdG8gdG9nZ2xlIHRoZSBjb2xsYXBzZSBvciBleHBhbmQgZGV0YWlscyBmb3IgdGhpcyBhZGRyZXNzLlwiLFxyXG4gIFwiQU1FTkRfUkVDT1JEXCI6IFwiZnJfQW1lbmQgUmVjb3JkXCIsXHJcbiAgXCJlblwiOiBcIkFuZ2xhaXNcIixcclxuICBcImZyXCI6IFwiRnJhbsOnYWlzXCIsXHJcbiAgXCJESVNDQVJEX0NIQU5HRVNcIjogXCJmcl9EaXNjYXJkIENoYW5nZXNcIixcclxuICBcIlJFUFNFQ09OREFSWVwiOiBcImZyX0FsdGVybmF0ZSBSRVAgY29udGFjdFwiLFxyXG4gIFwiUkVQUFJJTUFSWVwiOiBcImZyX1ByaW1hcnkgUkVQIGNvbnRhY3RcIixcclxuICBcIk1BSUxJTkdcIjogXCJDb250YWN0IHBvdXIgbGUgY291cnJpZXIgcsOpZ2xlbWVudGFpcmVcIixcclxuICBcIkJJTExJTkdcIjogXCJmcl9CaWxsaW5nXCIsXHJcbiAgXCJNQU5VRkFDVFVSRVJcIjogXCJmcl9NYW51ZmFjdHVyZXJcIixcclxuICBcIklNUE9SVEVSX0FERFJFU1NcIjogXCJmcl9DYW5hZGlhbiBJbXBvcnRlciBNYWlsaW5nIEFkZHJlc3NcIixcclxuICBcIkNPTlRBQ1RfTUFJTElOR1wiOiBcImZyX1JlZ3VsYXRvcnkgTWFpbGluZyAvIEFubnVhbCBDb250YWN0XCIsXHJcbiAgXCJDT05UQUNUX0JJTExJTkdcIjogXCJmcl9CaWxsaW5nIENvbnRhY3RcIixcclxuICBcIkNPTlRBQ1RfTUFOVUZBQ1RVUkVSXCI6IFwiZnJfTWFudWZhY3R1cmVyIC8gU3BvbnNvciBDb250YWN0XCIsXHJcbiAgXCJDT05UQUNUX0lNUE9SVEVSXCI6IFwiZnJfSW1wb3J0ZXIgQ29udGFjdFwiLFxyXG4gIFwiQVBQUk9WRV9GSU5BTFwiOiBcImZyX0dlbmVyYXRlIFhNTCBmaW5hbFwiLFxyXG4gIFwiUFJJTUFSWVwiOiBcImZyX1ByaW1hcnlcIixcclxuICBcIlNFQ09OREFSWVwiOiBcImZyX0FsdGVybmF0ZVwiLFxyXG4gIFwiVE9HR0xFX0VYUEFORFwiOiBcImZyX0NsaWNrIHRvIHRvZ2dsZSBjb2xsYXBzZSBvciBleHBhbmQgZGV0YWlscyBvZiByb3dcIixcclxuICBcIlNBVkVfRFJBRlRcIjogXCJmcl9TYXZlIERyYWZ0IFhNTFwiLFxyXG4gIFwiQ09OVFJPTF9OVU1CRVJcIjogXCJmcl9Db250cm9sIE51bWJlclwiLFxyXG4gIFwiUkVQX0NPTlRBQ1RfSU5GT1wiOiBcImZyX01haW4gQ29udGFjdCBJbmZvcm1hdGlvblwiLFxyXG4gIFwiU0FWRV9DT05UQUNUXCI6IFwiZnJfU2F2ZSBDb250YWN0XCIsXHJcbiAgXCJERUxFVEVfQ09OVEFDVFwiOiBcImZyX0RlbGV0ZSBDb250YWN0XCIsXHJcbiAgXCJDT01QQU5ZX0lEXCI6IFwiZnJfQ29tcGFueSBJZFwiLFxyXG4gIFwiRE9TU0lFUl9JRFwiOiBcImZyX0Rvc3NpZXIgSWRcIixcclxuICBcIklNUE9SVEVSXCI6IFwiZnJfSW1wb3J0ZXJcIixcclxuICBcIklNUE9SVEVSSURcIjpcImZyX0ltcG9ydGVyIENvbXBhbnkgSURcIixcclxuICBcIklNUE9SVEVSX0NPTVBBTllfTkFNRVwiOiBcImZyX0ltcG9ydGVyIENvbXBhbnkgTmFtZVwiLFxyXG4gIFwiSU1QT1JURVJfQ09NUEFOWV9JRF9JRlwiOiBcImZyX0ltcG9ydGVyIENvbXBhbnkgSUQgKGlmIGFwcGxpY2FibGUpXCIsXHJcbiAgXCJJTVBPUlRFUl9DT01QQU5ZX05BTUVfSUZcIjogXCJmcl9JbXBvcnRlciBDb21wYW55IE5hbWUgKGlmIGFwcGxpY2FibGUpXCIsXHJcbiAgXCJFUlJPUlNcIjogXCJFcnJldXJzXCIsXHJcbiAgXCJVTktOT1dOXCI6IFwiSW5jb25udVwiLFxyXG4gIFwiQklPTE9HSUNcIjogXCJmcl9CaW9sb2dpY1wiLFxyXG4gIFwiUEhBUk1BQ0VVVElDQUxcIjogXCJmcl9QaGFybWFjZXV0aWNhbFwiLFxyXG4gIFwiSEVMUF9GSUxFX0xPQURcIjogXCJmcl9GaWxlIExvYWQgSW5zdHJ1Y3Rpb25zXCIsXHJcbiAgXCJFWFBBTkRcIjogXCJmcl9FeHBhbmRcIixcclxuICBcIkhFTFBfQUNUSVZJVFlfTUFJTlwiOiBcImZyX0FjdGl2aXR5IEluc3RydWN0aW9uc1wiLFxyXG4gIFwiSEVMUF9BQ1RJVklUWV9SRVBcIjogXCJmcl9SRVAgQ29udGFjdCBJbnN0cnVjdGlvbnNcIixcclxuICBcIkNBTEVOREFSXCI6IFwiZnJfUGljayBkYXRlIGZyb20gY2FsZW5kYXJcIixcclxuICBcIkhJREVfQ0FMRU5EQVJcIjogXCJmcl9IaWRlIENhbGVuZGFyIChlc2NhcGUga2V5KVwiLFxyXG4gIFwiT1RIRVJcIjogXCJBdXRyZVwiLFxyXG4gIFwiSEVMUF9SRVBfQ09OVEFDVFwiOiBcImZyX1JFUCBDb250YWN0IEluc3RydWN0aW9uc1wiLFxyXG4gIFwiT1RIRVJfVU5JVFNcIjogXCJmcl9Vbml0cyBvdGhlciBkZXRhaWxzXCIsXHJcbiAgXCJDT01QQU5ZTkFNRVwiOlwiZnJfQ29tcGFueSBOYW1lIChGdWxsIGxlZ2FsIG5hbWUgLSBubyBhYmJyZXZpYXRpb25zKVwiLFxyXG4gIFwiQ09QWVwiOlwiZnJfQ29weVwiLFxyXG4gIFwiREVMRVRFXCI6XCJmcl9EZWxldGVcIixcclxuICBcIlNBVkVfV09SS0lOR1wiOlwiRW5yZWdpc3RyZXIgdW5lIGNvcGllIGRlIHRyYXZhaWxcIixcclxuICBcIkNPTVBBTllfTk9BQkJSRVZcIjogXCJmcl9Db21wYW55IE5hbWUgKEZ1bGwgbGVnYWwgTmFtZSAtIG5vIGFiYnJldmlhdGlvbnMpXCIsXHJcbiAgXCJDTE9TRV9BTEVSVFwiOlwiTWluaW1pc2VyIGxlcyBpbnN0cnVjdGlvbnNcIixcclxuICBcIkNPTExBUFNFXCI6XCJNaW5pbWlzZXIgbGVzXCIsXHJcbiAgXCJTQVZFX1JFQ09SRFwiOlwiZnJfU2F2ZSBSZWNvcmRcIixcclxuICBcIkRFTEVURV9SRUNPUkRcIjpcImZyX0RlbGV0ZSBSZWNvcmRcIixcclxuICBcIkNPTlRST0xfTlVNXCI6IFwiZnJfQ29udHJvbCBOdW1iZXJcIixcclxuICBcIk9USEVSX0RFVEFJTFNcIjogXCJmcl9PdGhlciBEZXRhaWxzIC0gU3BlY2lmeVwiLFxyXG4gIFwiUFJPRF9OQU1FXCI6XCJmcl9Qcm9kdWN0IE5hbWVcIixcclxuICBcIlBST0RfTkFNRV9IRUxQXCI6XCJmcl9Qcm9kdWN0IE5hbWUgSW5zdHJ1Y3Rpb25zXCIsXHJcbiAgXCJQUk9QX05BTUVfSEVMUFwiOlwiZnJfUHJvcGVyLCBDb21tb24gb3IgTm9uLXByb3ByaWV0YXJ5IE5hbWUgSW5zdHJ1Y3Rpb25zXCIsXHJcbiAgXCJSRUxBVEVEX0lORk9fSEVMUFwiOlwiZnJfUmVsYXRlZCBJbmZvcm1hdGlvbiBJbnN0cnVjdGlvbnNcIixcclxuICBcIkRPU1NJRVJfVFlQRVwiOiBcImZyX0Rvc3NpZXIgVHlwZVwiXHJcbn0pO1xuXG4kdHJhbnNsYXRlUHJvdmlkZXIudHJhbnNsYXRpb25zKFwiZW5cIiwge1xyXG4gIFwiTVNHX0VSUl9NQU5EXCI6IFwiVGhpcyBmaWVsZCBpcyByZXF1aXJlZFwiLFxyXG4gIFwiTVNHX0VSUl9FTUFJTF9GT1JNQVRcIjogXCJQbGVhc2UgZW50ZXIgYSB2YWxpZCBlbWFpbCBhZGRyZXNzLlwiLFxyXG4gIFwiTVNHX0VSUl9ST0xFXCI6IFwiUGxlYXNlIHNlbGVjdCBhdCBsZWFzdCBvbmUgcm9sZVwiLFxyXG4gIFwiTVNHX0VSUl9ESVNJVFlQRVwiOiBcIlBsZWFzZSBzZWxlY3QgYXQgbGVhc3Qgb25lIGRpc2luZmVjdGFudCB0eXBlXCIsXHJcbiAgXCJNU0dfRVJSX0FERFJFU1NcIjogXCJQbGVhc2Ugc2VsZWN0IGF0IGxlYXN0IG9uZSBhZGRyZXNzXCIsXHJcbiAgXCJNU0dfRVJSX0NPTlRBQ1RfTlVNXCI6IFwiQWxsIHRoZSByb2xlcyBoYXZlIHRvIGJlIHVzZWQgZm9yIHRoZSBjb250YWN0c1wiLFxyXG4gIFwiTVNHX0VSUl9QSE9ORV9GT1JNQVRcIjogXCJTcGVjaWZ5IGEgdmFsaWQgcGhvbmUgbnVtYmVyXCIsXHJcbiAgXCJNU0dfRVJSX0ZBWF9GT1JNQVRcIjpcIlNwZWNpZnkgYSB2YWxpZCBmYXggbnVtYmVyXCIsXHJcbiAgXCJNU0dfRVJSX0FMTFJPTEVcIjogXCJUaGUgcm9sZXMgb2YgbWFudWZhY3R1cmVyLCBtYWlsaW5nLCBiaWxsaW5nLCBhbmQgcHJpbWFyeSBSRVAgY29udGFjdCAgaGF2ZSBub3QgYWxsIGJlZW4gc2VsZWN0ZWQgYW1vbmcgdGhlIGxpc3Qgb2YgY29udGFjdHNcIixcclxuICBcIk1TR19FUlJfQUREUkVTU1NST0xFXCI6IFwiVGhlIHJvbGVzIG9mIG1hbnVmYWN0dXJlciwgbWFpbGluZywgYW5kIGJpbGxpbmcgaGF2ZSBub3QgYWxsIGJlZW4gc2VsZWN0ZWQgYW1vbmcgdGhlIGxpc3Qgb2YgYWRkcmVzc2VzXCIsXHJcbiAgXCJNU0dfRVJSX1BPU1RBTFwiOiBcIlBsZWFzZSBzcGVjaWZ5IGEgdmFsaWQgcG9zdGFsIGNvZGUuXCIsXHJcbiAgXCJNU0dfRVJSX1pJUFwiOiBcIlBsZWFzZSBzcGVjaWZ5IGEgdmFsaWQgemlwIGNvZGUuXCIsXHJcbiAgXCJNU0dfRVJSX0RBVEVfRk9STUFUXCI6IFwiVGhlIGRhdGUgZm9ybWF0IGlzIGluY29ycmVjdC5cIixcclxuICBcIk1BSUxJTkdfU0VMXCI6IFwiTWFpbGluZyBSb2xlIGFscmVhZHkgU2VsZWN0ZWRcIixcclxuICBcIk1BTlVGQUNUX1NFTFwiOiBcIk1hbnVmYWN0dXJlciBSb2xlIGFscmVhZHkgU2VsZWN0ZWRcIixcclxuICBcIk1BSUxfU0VMXCI6IFwiTWFpbGluZyBSb2xlIGFscmVhZHkgU2VsZWN0ZWRcIixcclxuICBcIkJJTExJTkdfU0VMXCI6IFwiQmlsbGluZyBSb2xlIGFscmVhZHkgU2VsZWN0ZWRcIixcclxuICBcIklNUE9SVEVSX1NFTFwiOiBcIkltcG9ydGVyIFJvbGUgYWxyZWFkeSBTZWxlY3RlZFwiLFxyXG4gIFwiUkVQUFJJTV9TRUxcIjogXCJSRVAgUHJpbWFyeSBSb2xlIGFscmVhZHkgU2VsZWN0ZWRcIixcclxuICBcIlJFUEFMVF9TRUxcIjogXCJSRVAgQWx0ZXJuYXRlIFJvbGUgYWxyZWFkeSBTZWxlY3RlZFwiLFxyXG4gIFwiTVNHX0xFTkdUSF9NSU41XCI6IFwiUGxlYXNlIGVudGVyIGF0IGxlYXN0IDUgY2hhcmFjdGVyc1wiLFxyXG4gIFwiTVNHX0xFTkdUSF82XCI6IFwiUGxlYXNlIGVudGVyIDYgY2hhcmFjdGVycy5cIixcclxuICBcIk1TR19MRU5HVEhfNk5VTVwiOiBcIlBsZWFzZSBlbnRlciA2IGRpZ2l0cy5cIixcclxuICBcIk1TR19MRU5HVEhfOE5VTVwiOiBcIlBsZWFzZSBlbnRlciA4IGRpZ2l0cy5cIixcclxuICBcIk1TR19MRU5HVEhfN1wiOiBcIlBsZWFzZSBlbnRlciA3IGNoYXJhY3RlcnMuXCIsXHJcbiAgXCJNU0dfTEVOR1RIXzdOVU1cIjogXCJQbGVhc2UgZW50ZXIgNyBkaWdpdHMuXCIsXHJcbiAgXCJPTkVfUkVQXCI6IFwiQXQgbGVhc3Qgb25lIGNvbnRhY3QgaXMgcmVxdWlyZWQuXCIsXHJcbiAgXCJNU0dfRVJSX05PVElGX1NFTFwiOiBcIlBsZWFzZSBzZWxlY3QgYXQgbGVhc3Qgb25lIG5vdGlmaWFibGUgY2hhbmdlLlwiLFxyXG4gIFwiTVNHX0VSUl9NSU5fUE9TXCI6IFwiTXVzdCBiZSBhIHBvc2l0aXZlIG51bWJlclwiLFxyXG4gIFwiTVNHX0VSUl9NQVhcIjogXCJFeGNlZWRzIHRoZSBtYXhpbXVtXCJcclxufSk7XG5cbiR0cmFuc2xhdGVQcm92aWRlci50cmFuc2xhdGlvbnMoXCJmclwiLCB7XHJcbiAgXCJNU0dfRVJSX01BTkRcIjogXCJDZSBjaGFtcCBlc3Qgb2JsaWdhdG9pcmUuXCIsXHJcbiAgXCJNU0dfRVJSX1JPTEVcIjogXCJmcl9QbGVhc2Ugc2VsZWN0IGF0IGxlYXN0IG9uZSByb2xlXCIsXHJcbiAgXCJNU0dfRVJSX0RJU0lUWVBFXCI6IFwiZnJfUGxlYXNlIHNlbGVjdCBhdCBsZWFzdCBvbmUgZGlzaW5mZWN0YW50IHR5cGVcIixcclxuICBcIk1TR19FUlJfQUREUkVTU1wiOiBcImZyX1BsZWFzZSBzZWxlY3QgYXQgbGVhc3Qgb25lIGFkZHJlc3NcIixcclxuICBcIk1TR19FUlJfRU1BSUxfRk9STUFUXCI6IFwiVmV1aWxsZXogZm91cm5pciB1bmUgYWRyZXNzZSDDqWxlY3Ryb25pcXVlIHZhbGlkZS5cIixcclxuICBcIk1TR19FUlJfQ09OVEFDVF9OVU1cIjogXCJmcl9BbGwgdGhlIHJvbGVzIGhhdmUgdG8gYmUgdXNlZCBmb3IgdGhlIGNvbXBhbnkgY29udGFjdHNcIixcclxuICBcIk1TR19FUlJfUEhPTkVfRk9STUFUXCI6IFwiVmV1aWxsZXogZm91cm5pciB1biBudW3DqXJvIGRlIHTDqWzDqXBob25lIHZhbGlkZS5cIixcclxuICBcIk1TR19FUlJfRkFYX0ZPUk1BVFwiOlwiVmV1aWxsZXogZm91cm5pciB1biBudW3DqXJvIGRlIHTDqWzDqWNvcGlldXIgdmFsaWRlLlwiLFxyXG4gIFwiTVNHX0VSUl9BTExST0xFXCI6IFwiZnJfQWNyb3NzIHRoZSBjb250YWN0IHJlY29yZHMsIHRoZSByb2xlcyBvZiBtYW51ZmFjdHVyZXIsIG1haWxpbmcsIGJpbGxpbmcsIGFuZCBSRVAgcHJpbWFyeSBjb250YWN0IG11c3QgYmUgc2VsZWN0ZWRcIixcclxuICBcIk1TR19FUlJfQUREUkVTU1NST0xFXCI6IFwiZnJfVGhlIHJvbGVzIG9mIG1hbnVmYWN0dXJlciwgbWFpbGluZywgYW5kIGJpbGxpbmcgaGF2ZSBub3QgYWxsIGJlZW4gc2VsZWN0ZWQgYW1vbmcgdGhlIGxpc3Qgb2YgYWRkcmVzc2VzXCIsXHJcbiAgXCJNU0dfRVJSX1BPU1RBTFwiOiBcIlZldWlsbGV6IGZvdXJuaXIgdW4gY29kZSBwb3N0YWwgdmFsaWRlLlwiLFxyXG4gIFwiTVNHX0VSUl9aSVBcIjogXCJWZXVpbGxleiBmb3VybmlyIHVuIGNvZGUgcG9zdGFsIHZhbGlkZS5cIixcclxuICBcIk1TR19FUlJfREFURV9GT1JNQVRcIjogXCJWZXVpbGxleiBmb3VybmlyIHVuZSB1bmUgZGF0ZSB2YWxpZGUuXCIsXHJcbiAgXCJNQU5VRkFDVF9TRUxcIjogXCJmcl9NYW51ZmFjdHVyZXIgUm9sZSBhbHJlYWR5IFNlbGVjdGVkXCIsXHJcbiAgXCJNQUlMX1NFTFwiOiBcImZyX01haWxpbmcgUm9sZSBhbHJlYWR5IFNlbGVjdGVkXCIsXHJcbiAgXCJCSUxMSU5HX1NFTFwiOiBcImZyX0JpbGxpbmcgUm9sZSBhbHJlYWR5IFNlbGVjdGVkXCIsXHJcbiAgXCJJTVBPUlRFUl9TRUxcIjogXCJmcl9JbXBvcnRlciBSb2xlIGFscmVhZHkgU2VsZWN0ZWRcIixcclxuICBcIlJFUFBSSU1fU0VMXCI6IFwiZnJfUkVQIFByaW1hcnkgUm9sZSBhbHJlYWR5IFNlbGVjdGVkXCIsXHJcbiAgXCJSRVBBTFRfU0VMXCI6IFwiZnJfUkVQIEFsdGVybmF0ZSBSb2xlIGFscmVhZHkgU2VsZWN0ZWRcIixcclxuICBcIk1TR19MRU5HVEhfTUlONVwiOiBcIlZldWlsbGV6IGZvdXJuaXIgYXUgbW9pbnMgNSBjaGlmZnJlcy5cIixcclxuICBcIk1TR19MRU5HVEhfNlwiOiBcIlZldWlsbGV6IGZvdXJuaXIgYXUgbW9pbnMgNiBjYXJhY3TDqHJlcy5cIixcclxuICBcIk1TR19MRU5HVEhfNk5VTVwiOiBcIlZldWlsbGV6IGZvdXJuaXIgNiBjaGlmZnJlcy5cIixcclxuICBcIk1TR19MRU5HVEhfOE5VTVwiOiBcIlZldWlsbGV6IGZvdXJuaXIgOCBjaGlmZnJlcy5cIixcclxuICBcIk1TR19MRU5HVEhfN1wiOiBcIlZldWlsbGV6IGZvdXJuaXIgNyBjYXJhY3TDqHJlcy5cIixcclxuICBcIk1TR19MRU5HVEhfN05VTVwiOiBcIlZldWlsbGV6IGZvdXJuaXIgIDcgY2hpZmZyZXMuXCIsXHJcbiAgXCJPTkVfUkVQXCI6IFwiQXUgbW9pbnMgdW4gY29udGFjdCBlc3QgcmVxdWlzXCIsXHJcbiAgXCJNU0dfRVJSX05PVElGX1NFTFwiOiBcIlPDqWxlY3Rpb25uZXogYXUgbW9pbnMgdW4gY2hhbmdlbWVudCBkZSBkw6ljbGFyYXRpb25cIixcclxuICBcIk1TR19FUlJfTUlOX1BPU1wiOiBcIkRvaXQgw6p0cmUgdW4gbm9tYnJlIHBvc2l0aWZcIixcclxuICBcIk1TR19FUlJfTUFYXCI6IFwiRMOpcGFzc2UgbGUgbWF4aW11bS5cIlxyXG5cclxufSk7XG5cbiR0cmFuc2xhdGVQcm92aWRlci50cmFuc2xhdGlvbnMoXCJlblwiLCB7XHJcbiAgXCJBRERfVFJBTlNBQ1RJT05cIjogXCJOZXcgUmVjb3JkXCIsXHJcbiAgXCJTRVFVRU5DRV9OVU1cIjogXCJTZXF1ZW5jZSBOdW1iZXJcIixcclxuICBcIkRBVEVfU1VCTUlUVEVEXCI6IFwiRGF0ZSBTdWJtaXR0ZWQgKFlZWVktTU0tREQpXCIsXHJcbiAgXCJTRVFVRU5DRV9ERVNDUklQVFwiOiBcIlJlZ3VsYXRvcnkgVHJhbnNhY3Rpb24gRGVzY3JpcHRpb25cIixcclxuICBcIklTX0FDVENIQU5HRVNcIjogXCJTYW1lIGFzIFJlZ3VsYXRvcnkgQWN0aXZpdHkgQ29udGFjdCBmb3IgdGhpcyBTdWJtaXNzaW9uP1wiLFxyXG4gIFwiQ09NUEFOWV9JRFwiOiBcIkNvbXBhbnkgSURcIixcclxuICBcIkRPU1NJRVJfSURcIjogXCJEb3NzaWVyIElEXCIsXHJcbiAgXCJET1NTSUVSX05BTUVcIjogXCJEb3NzaWVyIE5hbWVcIixcclxuICBcIklTX0VDVERcIjogXCJJcyB0aGlzIGFuIGVDVEQgdHJhbnNhY3Rpb24/XCIsXHJcbiAgXCJJU19TT0xJQ0lURURcIjogXCJJcyB0aGlzIHNvbGljaXRlZCBpbmZvcm1hdGlvbj9cIixcclxuICBcIlNPTElDSVRFRF9SUVwiOiBcIlJlcXVlc3RlciBvZiBTb2xpY2l0ZWQgSW5mb3JtYXRpb25cIixcclxuICBcIlNPTElDSVRFRF9SUV9PVEhFUlwiOiBcIk90aGVyIFJlcXVlc3RlciBEZXRhaWxzXCIsXHJcbiAgXCJSRVBfQ09OVEFDVF9JTkZPXCI6IFwiTWFpbiBDb250YWN0IEluZm9ybWF0aW9uXCIsXHJcbiAgXCJQUk9KX01BTkFHRVJfTkFNRVwiOiBcIk5hbWUgb2YgUmVndWxhdG9yeSBQcm9qZWN0IE1hbmFnZXIsIGlmIGtub3duXCIsXHJcbiAgXCJEQVRFRFwiOiBcIkRhdGVkIChZWVlZLU1NLUREKVwiLFxyXG4gIFwiU1RBUlRfREFURVwiOiBcIlN0YXJ0IERhdGUgKFlZWVktTU0tREQpXCIsXHJcbiAgXCJFTkRfREFURVwiOiBcIkVuZCBEYXRlIChZWVlZLU1NLUREKVwiLFxyXG4gIFwiUkVHX0FDVElWSVRZXCI6IFwiUmVndWxhdG9yeSBBY3Rpdml0eVwiLFxyXG4gIFwiUkVHX0FDVElWSVRZX1RZUEVcIjogXCJSZWd1bGF0b3J5IEFjdGl2aXR5IFR5cGVcIixcclxuICBcIlNFUVVFTkNFX1RZUEVcIjogXCJSZWd1bGF0b3J5IFRyYW5zYWN0aW9uIERlc2NyaXB0aW9uXCIsXHJcbiAgXCJWRVJTSU9OX05PXCI6IFwiVmVyc2lvbiBOby5cIixcclxuICBcIkJSSUVGX0RFU0NcIjogXCJCcmllZiBEZXNjcmlwdGlvblwiLFxyXG4gIFwiQURNSU5JU1RSQVRJVkVcIjogXCJBZG1pbmlzdHJhdGl2ZVwiLFxyXG4gIFwiQkVORUZJVF9SSVNLX0FTU0VTU1wiOiBcIkJlbmVmaXQgUmlzayBBc3Nlc3NtZW50XCIsXHJcbiAgXCJDQU5DRUxfTEVUVEVSXCI6IFwiQ2FuY2VsbGF0aW9uIExldHRlclwiLFxyXG4gIFwiQ0hBTkdFX1RPX0RJTlwiOiBcIkNoYW5nZSB0byBESU5cIixcclxuICBcIkNPTU1FTlRTX05PQ1wiOiBcIkNvbW1lbnRzIG9uIE5vdGljZSBvZiBEZWNpc2lvblwiLFxyXG4gIFwiQ09NTUVOVFNfU1VNTUFSWV9CQVNJU1wiOiBcIkNvbW1lbnRzIG9uIFN1bW1hcnkgQmFzaXMgb2YgRGVjaXNpb24gKFNCRClcIixcclxuICBcIkNPTU1FTlRTX1JFR1VMQVJUT1JZX0RFQ0lTSU9OXCI6IFwiQ29tbWVudHMgb24gUmVndWxhdG9yeSBEZWNpc2lvbiBTdW1tYXJ5XCIsXHJcbiAgXCJESU5fRElTQ09OVElOVUVEXCI6IFwiTm90aWZpY2F0aW9uIG9mIERpc2NvbnRpbnVlZCBTYWxlIChESU4gQ2FuY2VsbGF0aW9uKVwiLFxyXG4gIFwiRFJVR19OT1RJRl9GT1JNXCI6IFwiRHJ1ZyBOb3RpZmljYXRpb24gRm9ybVwiLFxyXG4gIFwiRk9SX1BFUklPRFwiOiBcIkZvciBQZXJpb2RcIixcclxuICBcIklOSVRJQUxcIjogXCJJTklUSUFMXCIsXHJcbiAgXCJNRUVUSU5HX01JTlVURVNcIjogXCJNaW51dGVzIG9mIE1lZXRpbmdcIixcclxuICBcIk5PVElGSUNBVElPTl9DSEFOR0VcIjogXCJOb3RpZmljYXRpb24gb2YgQ2hhbmdlIGluIEJlbmVmaXQtUmlzayBQcm9maWxlXCIsXHJcbiAgXCJOT1RJRklDQVRJT05fSU5URVJSVVBUX1NBTEVcIjpcIk5vdGlmaWNhdGlvbiBJbnRlcnJ1cHRpb24gb2YgU2FsZVwiLFxyXG4gIFwiUEFOREVNSUNfQVBQTFwiOiBcIlBhbmRlbWljIEFwcGxpY2F0aW9uXCIsXHJcbiAgXCJQT1NUX0NMRUFSQU5DRV9EQVRBXCI6IFwiUG9zdCBDbGVhcmFuY2UgRGF0YVwiLFxyXG4gIFwiUE9TVF9NQVJLRVRfU1VSVlwiOiBcIlBvc3QgTWFya2V0aW5nIFN1cnZlaWxsYW5jZVwiLFxyXG4gIFwiUE9TVF9OT0NfQ0hBTkdFXCI6IFwiUG9zdCBOT0MgQ2hhbmdlXCIsXHJcbiAgXCJQT1NUX0FVVEhfRElWMV9DSEFOR0VcIjogXCJQb3N0LUF1dGhvcml6YXRpb24gRGl2aXNpb24gMSBDaGFuZ2VcIixcclxuICBcIlBSRVNVQl9NRUVUSU5HX1BLR1wiOiBcIlN1Ym1pc3Npb24gTWVldGluZyBQYWNrYWdlXCIsXHJcbiAgXCJQUkVTVUJfTUVFVElOR19SUVwiOiBcIlN1Ym1pc3Npb24gTWVldGluZyBSZXF1ZXN0XCIsXHJcbiAgXCJQUklPUklUWV9SRVZJRVdfUlFcIjogXCJQcmlvcml0eSBSZXZpZXcgUmVxdWVzdFwiLFxyXG4gIFwiUFJJU1RJTkVfUE1cIjogXCJQcmlzdGluZSBQTVwiLFxyXG4gIFwiUFJJU1RJTkVfUE1fMkxBTkdcIjogXCJQcmlzdGluZSBQTSAtIFNlY29uZCBMYW5ndWFnZVwiLFxyXG4gIFwiQURWSVNFTUVOVF9MRVRURVJfUkVTUE9OU0VcIjogXCJSZXNwb25zZSB0byBBZHZpc2VtZW50IExldHRlclwiLFxyXG4gIFwiQ0xJTl9DTEFSSUZfUkVTUE9OU0VcIjogXCJSZXNwb25zZSB0byBDbGluaWNhbCBDbGFyaWZpY2F0aW9uIFJlcXVlc3RcIixcclxuICBcIkVNQUlMX1JRX1JFU1BPTlNFXCI6IFwiUmVzcG9uc2UgdG8gZS1tYWlsIFJlcXVlc3TCoFwiLFxyXG4gIFwiTEFCRUxfQ0xBUklGX1JFU1BPTlNFXCI6IFwiUmVzcG9uc2UgdG8gTGFiZWxpbmcgQ2xhcmlmaWNhdGlvbiBSZXF1ZXN0XCIsXHJcbiAgXCJNSFBEX1JRX1JFU1BPTlNFXCI6IFwiUmVzcG9uc2UgdG8gTUhQRCBSZXF1ZXN0XCIsXHJcbiAgXCJOT0NfUkVTUE9OU0VcIjogXCJSZXNwb25zZSB0byBOT0MvYy1RTlwiLFxyXG4gIFwiTk9EX1JFU1BPTlNFXCI6IFwiUmVzcG9uc2UgdG8gTk9EXCIsXHJcbiAgXCJOT05fUkVTUE9OU0VcIjogXCJSZXNwb25zZSB0byBOT05cIixcclxuICBcIk5PTF9SRVNQT05TRVwiOiBcIlJlc3BvbnNlIHRvIE5PTFwiLFxyXG4gIFwiUFJPQ0VTU0lOR19DTEFSSUZfUkVTUE9OU0VcIjogXCJSZXNwb25zZSB0byBQcm9jZXNzaW5nIENsYXJpZmljYXRpb24gUmVxdWVzdFwiLFxyXG4gIFwiUVVBTF9DTElOX0NMQVJJRl9SRVNQT05TRVwiOiBcIlJlc3BvbnNlIHRvIFF1YWxpdHkgYW5kIENsaW5pY2FsIENsYXJpZmljYXRpb24gUmVxdWVzdFwiLFxyXG4gIFwiUVVBTF9DTEFSSUZfUkVTUE9OU0VcIjogXCJSZXNwb25zZSB0byBRdWFsaXR5IENsYXJpZmljYXRpb24gUmVxdWVzdFwiLFxyXG4gIFwiU0NSRUVOSU5HX0FDQ0VQVF9SRVNQT05TRVwiOiBcIlJlc3BvbnNlIHRvIFNjcmVlbmluZyBBY2NlcHRhbmNlIExldHRlclwiLFxyXG4gIFwiU0NSRUVOSU5HX0NMQVJJRl9SRVNQT05TRVwiOiBcIlJlc3BvbnNlIHRvIFNjcmVlbmluZyBDbGFyaWZpY2F0aW9uIFJlcXVlc3RcIixcclxuICBcIlNETl9SRVNQT05TRVwiOiBcIlJlc3BvbnNlIHRvIFNETlwiLFxyXG4gIFwiUEhPTkVfUlFfUkVTUE9OU0VcIjogXCJSZXNwb25zZSB0byBUZWxlcGhvbmUgUmVxdWVzdFwiLFxyXG4gIFwiUklTS19DT01NVU5fRE9DXCI6IFwiUmlzayBDb21tdW5pY2F0aW9uIERvY3VtZW50XCIsXHJcbiAgXCJSTVBfVkVSU0lPTl9EQVRFXCI6IFwiUk1QIHZlcnNpb24gI1wiLFxyXG4gIFwiU0lHTkFMX1dPUktfVVBcIjogXCJTaWduYWwgV29yayBVcFwiLFxyXG4gIFwiVU5TT0xJQ0lURURfREFUQVwiOiBcIlVuc29saWNpdGVkIERhdGFcIixcclxuICBcIllFQVJfTElTVF9PRl9DSEFOR0VcIjogXCJZZWFyLCBsaXN0IG9mIGNoYW5nZSBudW1iZXIgKGZvciBleGFtcGxlOiAyMDEyLCAxNSwgMTlhLOKApi4pXCIsXHJcbiAgXCJOT05DTElOX0NMQVJJRl9SRVNQT05TRVwiOiBcIlJlc3BvbnNlIHRvIE5vbi1jbGluaWNhbCBDbGFyaWZpY2F0aW9uIFJlcXVlc3QgXCIsXHJcbiAgXCJCRV9DTEFSSUZfUkVTUE9OU0VcIjogXCJSZXNwb25zZSB0byBCRSBDbGFyaWZpY2F0aW9uIFJlcXVlc3RcIixcclxuICBcIlJFQ09OX0RFQ0lTX0xUUl9JTlRFTlRcIjogXCJSZWNvbnNpZGVyYXRpb24gb2YgRGVjaXNpb24gLSBMZXR0ZXIgb2YgSW50ZW50XCIsXHJcbiAgXCJSRUNPTl9ERUNJU19SUV9SRUNPTlwiOiAgXCJSZWNvbnNpZGVyYXRpb24gb2YgRGVjaXNpb24gLSBSZXF1ZXN0IGZvciBSZWNvbnNpZGVyYXRpb25cIixcclxuICBcIlJFQ09OX0RFQ0lTX09USEVSX0lORk9cIjogXCJSZWNvbnNpZGVyYXRpb24gb2YgRGVjaXNpb24gLSBPdGhlciBJbmZvcm1hdGlvblwiLFxyXG4gIFwiTEFCRUxfUFJFQVBQUk9WQUxfMkxBTkdcIjpcIlNlY29uZCBMYW5ndWFnZSBMYWJlbCAtIFByZS1BcHByb3ZhbFwiLFxyXG4gIFwiTElGRUNZQ0xFX1RJVExFXCI6IFwiVHJhbnNhY3Rpb24gRGV0YWlsc1wiLFxyXG4gIFwiUkVHX0NPTlRBQ1RfVEhJU1wiOiBcIlJlZ3VsYXRvcnkgQWN0aXZpdHkgQ29udGFjdCBmb3IgVEhJUyB0cmFuc2FjdGlvblwiLFxyXG4gIFwiUkVHX0FDVF9DT05UQUNUXCI6IFwiUmVndWxhdG9yeSBBY3Rpdml0eSBDb250YWN0XCIsXHJcbiAgXCJUUkFOU0FDVElPTl9IRElOR1wiOiBcIlJlZ3VsYXRvcnkgSW5mb3JtYXRpb25cIixcclxuICBcIkxPQURfVFJBTlNBQ1RJT05cIjogXCJMb2FkIGEgUmVndWxhdG9yeSBUcmFuc2FjdGlvbiBGaWxlXCIsXHJcbiAgXCJDT01QQU5ZX0lORk9cIjogXCJBLiBDb21wYW55IEluZm9ybWF0aW9uXCIsXHJcbiAgXCJBRERSRVNTX0lORk9cIjogXCJCLiBBZGRyZXNzIEluZm9ybWF0aW9uXCIsXHJcbiAgXCJDT01QQU5ZX1JFUF9USElTXCI6IFwiQy4gQ29tcGFueSBSZXByZXNlbnRhdGl2ZVwiLFxyXG4gIFwiR0VORVJBVEVfRklOQUxcIjogXCJHZW5lcmF0ZSBGaW5hbCBYTUxcIixcclxuICBcIkNPTkZJUk1fQ09OVEFDVF9WQUxJRFwiOiBcIkkgY29uZmlybSB0aGF0IHRoZSBhYm92ZSByZWd1bGF0b3J5IGFjdGl2aXR5IGNvbnRhY3QgaW5mb3JtYXRpb24gaXMgdmFsaWQuXCIsXHJcbiAgXCJZRUFSX0NIQU5HRVwiOiBcIlllYXIgb2YgdGhlIGNoYW5nZVwiLFxyXG4gIFwiUkVHX0FDVElWSVRZX0lOU1RSVUNUXCI6XCJSZWd1bGF0b3J5IEFjdGl2aXR5IENvbnRhY3QgSW5zdHJ1Y3Rpb25zXCIsXHJcbiAgXCJTQVZFX0lOU1RSVUNUXCI6IFwiVHJhbnNhY3Rpb24gRmlsZSBTYXZlIEluc3RydWN0aW9uc1wiLFxyXG4gIFwiQ0xBUklGX1JFU1BPTlNFXCI6XCJSZXNwb25zZSB0byBDbGFyaWZpY2F0aW9uIFJlcXVlc3RcIixcclxuICBcIkNPUlJfUEFURU5UX01FRFwiOlwiQ29ycmVzcG9uZGVuY2UgLSBQYXRlbnRlZCBNZWRpY2luZXNcIixcclxuICBcIkFMTEVHQVRJT05fTk9USUNFXCI6XCJOb3RpY2Ugb2YgYWxsZWdhdGlvblwiLFxyXG4gIFwiRk9STV9JVlwiOlwiRm9ybSBJVlwiLFxyXG4gIFwiRk9STV9WXCI6XCJGb3JtIFZcIixcclxuICBcIkNPTlNFTlRfTFRSXCI6XCJDb25zZW50IExldHRlclwiLFxyXG4gIFwiREFUQV9QUk9URUNUX0NPUlJFU1BcIjpcIkNvcnJlc3BvbmRlbmNlIC0gRGF0YSBQcm90ZWN0aW9uXCIsXHJcbiAgXCJDSE9PU0VfUkVRVUVTVFwiOlwiQ2hvb3NlIGEgcmVxdWVzdGVyXCIsXHJcbiAgXCJUUkFOU0FDVF9JTlNUUlVDVFwiOlwiUmVndWxhdG9yeSBUcmFuc2FjdGlvbiBJbnN0cnVjdGlvbnNcIixcclxuICBcIkxJU1RfREVTQ1JJUFRcIjpcIkxpc3QgRGVzY3JpcHRpb25cIixcclxuICBcIlNFUVVFTkNFX0NMRUFOVVBcIjpcImVDVEQgRG9zc2llciBDbGVhbi11cFwiLFxyXG5cclxuICBcIkRFRkVSX0ZFRVNcIjpcIiBBIGRlZmVycmFsIG9mIHBheW1lbnQgaXMgcmVxdWVzdGVkIHdpdGggdGhpcyB0cmFuc2FjdGlvbi5cIixcclxuICBcIkRFRkVSX1NUQVRFTUVOVFwiOlwiVGhlIHN0YXRlbWVudCBzdXBwb3J0aW5nIHRoZSBkZWZlcnJhbCByZXF1ZXN0IGlzIGluY2x1ZGVkLlwiLFxyXG4gIFwiRkVFX1JFTUlTU0lPTlwiOlwiRmVlIFJlbWlzc2lvbiBpcyByZXF1ZXN0ZWQgd2l0aCB0aGlzIHRyYW5zYWN0aW9uXCIsXHJcbiAgXCJTVEFURU1FTlRfUkVWRU5VRVwiOlwiQSBzdGF0ZW1lbnQgc2lnbmVkIGJ5IHRoZSBpbmRpdmlkdWFsIHJlc3BvbnNpYmxlIGZvciB0aGUgYXBwbGljYW50J3MgZmluYW5jaWFsIGFmZmFpcnMgaXMgaW5jbHVkZWQgdG8gY2VydGlmeSB0aGF0IHRoZSBmZWUgcGF5YWJsZSBpcyBncmVhdGVyIHRoYW4gMTAlIG9mIHRoZSBhbnRpY2lwYXRlZCBncm9zcyByZXZlbnVlXCIsXHJcbiAgXCJTVUJfQ0xBU1NcIjpcIlN1Ym1pc3Npb24gQ2xhc3NcIixcclxuICBcIkZFRV9BTU9VTlRcIjpcIkZlZXNcIixcclxuICBcIkZFRV9ERVNDUklQVElPTlwiOlwiU3VibWlzc2lvbiBEZXNjcmlwdGlvblwiLFxyXG4gIFwiREVGRVJfRkVFU1wiOlwiQSBkZWZlcnJhbCBvZiBwYXltZW50IGlzIHJlcXVlc3RlZCB3aXRoIHRoaXMgdHJhbnNhY3Rpb25cIixcclxuICBcIkZFRV9SRU1JU1NJT05cIjpcIkZlZSBSZW1pc3Npb24gaXMgcmVxdWVzdGVkIHdpdGggdGhpcyB0cmFuc2FjdGlvblwiLFxyXG4gIFwiUkVNSVNTSU9OX0VMSUdJQkxFXCI6XCJZb3UgYXJlIGVsaWdpYmxlIHRvIGFwcGx5IGZvciBmZWUgcmVtaXNzaW9uLiBUaGUgc3VibWlzc2lvbiBmZWUgaXMgZ3JlYXRlciB0aGFuIDEwJSBvZiBhbnRpY2lwYXRlZCBncm9zcyByZXZlbnVlcy5cIixcclxuICBcIlJFTUlTU0lPTl9JTkVMSUdJQkxFXCI6XCJZb3UgYXJlIG5vdCBlbGlnaWJsZSB0byBhcHBseSBmb3IgZmVlIHJlbWlzc2lvbi4gVGhlIHN1Ym1pc3Npb24gZmVlIGlzIGxlc3MgdGhhbiAxMCUgb2YgYW50aWNpcGF0ZWQgZ3Jvc3MgcmV2ZW51ZXMuXCIsXHJcbiAgXCJJU19GRUVfVFJBTlNBQ1RJT05cIjpcIkFyZSBuZXcgb3IgcmV2aXNlZCBmZWVzIGFzc29jaWF0ZWQgd2l0aCB0aGlzIHRyYW5zYWN0aW9uP1wiLFxyXG4gIFwiUkVHVUxBVE9SWV9GRUVTXCI6XCJGZWVzXCIsXHJcbiAgXCJHUk9TU19SRVZFTlVFXCI6XCJBbnRpY2lwYXRlZCBncm9zcyByZXZlbnVlIGZvciB0aGlzIGRydWcgcHJvZHVjdCBkdXJpbmcgdGhlIGZlZSB2ZXJpZmljYXRpb24gcGVyaW9kXCIsXHJcbiAgXCJURU5fUEVSQ0VOVF9SRVZFTlVFXCI6IFwiMTAlIG9mIGFudGljaXBhdGVkIGdyb3NzIHJldmVudWVcIixcclxuICBcIlJFUVVJUkVEX0RPQ1wiOlwiUmVxdWlyZWQgRG9jdW1lbnRhdGlvblwiLFxyXG4gIFwiU1VQUE9SVElOR19ET0NcIjpcIlBsZWFzZSBpbmNsdWRlIHRoZSByZXF1aXJlZCBzaWduZWQgc3RhdGVtZW50IEFORCBhdCBsZWFzdCBvbmUgb2YgdGhlIHN1cHBvcnQgZG9jdW1lbnRhdGlvbiB0byBlc3RhYmxpc2ggdGhhdCB0aGUgYXBwbGljYWJsZSBmZWUgcGF5YWJsZSBpcyBncmVhdGVyIHRoYW4gMTAlIG9mIHRoZSBhbnRpY2lwYXRlZCBncm9zcyByZXZlbnVlIGZyb20gc2FsZXMgb2YgdGhlIGRydWcgcHJvZHVjdCBpbiBDYW5hZGEgZHVyaW5nIHRoZSBmZWUgdmVyaWZpY2F0aW9uIHBlcmlvZC5cIixcclxuICBcIkVTVF9NQVJLRVRfU0hBUkVcIjpcIkVzdGltYXRlZCBtYXJrZXQgc2hhcmUgKHRoYXQgaXMgW2kuZS5dLCBwcm9kdWN0J3MgbWFya2V0IHBvdGVudGlhbCBjb21wYXJlZCB0byB0aGUgdG90YWwgbWFya2V0IGZvciBzaW1pbGFyIHByb2R1Y3RzIGluIENhbmFkYSlcIixcclxuICBcIlNJTUlMQVJfUFJPRFVDVFwiOlwiQ29tcGFyaXNvbiB0byBzaW1pbGFyIHByb2R1Y3RzIG9uIHRoZSBDYW5hZGlhbiBtYXJrZXQgb3Igb3RoZXIgc2ltaWxhciBtYXJrZXRzIChlLmcuLCBVbml0ZWQgU3RhdGVzLCBFdXJvcGVhbiBVbmlvbilcIixcclxuICBcIlNBTEVTX0hJU1RPUllcIjpcIlNhbGVzIGhpc3RvcnkgcHJpb3IgdG8gcHJvZHVjdCB1cGdyYWRlcyBvciBzYWxlcyBoaXN0b3J5IG9mIHNpbWlsYXIgcHJvZHVjdHNcIixcclxuICBcIk1BUktFVElOR19QTEFOXCI6XCJNYXJrZXRpbmcgcGxhbi9wcm9kdWN0IHBsYW4gZm9yIHRoZSBkcnVnIHByb2R1Y3RcIixcclxuICBcIkFWR19TQUxFU1wiOlwiQXZlcmFnZSBzYWxlIHByaWNlIGFuZCBkZW1hbmRcIixcclxuICBcIkZFRVNfTEVTUzEwS1wiOlwiRmVlcyBvZiAkMTAsMDAwIG9yIGxlc3MgbXVzdCBiZSBwYWlkIGF0IHRoZSB0aW1lIG9mIGZpbGluZyBvZiB0aGUgc3VibWlzc2lvbiwgc3VwcGxlbWVudCBvciBhcHBsaWNhdGlvbi4gUGxlYXNlIGNvbXBsZXRlIHRoZVwiLFxyXG4gIFwiQURWQU5DRV9QQVlNRU5UXCI6XCJBZHZhbmNlIFBheW1lbnQgRGV0YWlscyBmb3IgRHJ1ZyBTdWJtaXNzaW9ucyBhbmQgTWFzdGVyIEZpbGVzLlwiLFxyXG4gIFwiU1BPTlNPUl9JTlZPSUNFXCI6XCJSZXZpZXcgZmVlcyBtdXN0IG5vdCBiZSBpbmNsdWRlZCB3aXRoIHRoZSBzdWJtaXNzaW9uLCBzdXBwbGVtZW50IG9yIGFwcGxpY2F0aW9uLiBTcG9uc29ycyB3aWxsIGJlIGludm9pY2VkIGZvciBmZWVzIG9mIG1vcmUgdGhhbiAkMTAsMDAwLlwiLFxyXG4gIFwiUEFZTUVOVF9NRVRIT0RTXCI6XCJQbGVhc2Ugc2VsZWN0IGFsbCB0aGUgcGF5bWVudCBtZXRob2RzIHlvdSBpbnRlbmQgdG8gdXNlXCIsXHJcbiAgXCJPTkVfUEFZTUVOVF9NRVRIT0RcIjpcIkF0IGxlYXN0IG9uZSBtZXRob2Qgb2YgcGF5bWVudCBtdXN0IGJlIHNlbGVjdGVkXCIsXHJcbiAgXCJERUZFUl9JTlNUUlVDVFwiOlwiRGVmZXJyYWwgb2YgUGF5bWVudCBJbnN0cnVjdGlvbnNcIixcclxuICBcIlJFTUlTU0lPTl9JTlNUUlVDVFwiOlwiRmVlIFJlbWlzc2lvbiBJbnN0cnVjdGlvbnNcIixcclxuICBcIkNMQVNTX0lOU1RSVUNUXCI6XCJTdWJtaXNzaW9uIENsYXNzIEluc3RydWN0aW9uc1wiLFxyXG4gIFwiUFJPRFVDVF9JTlNUUlVDVFwiOlwiUHJvZHVjdCBOYW1lIEluc3RydWN0aW9uc1wiLFxyXG4gIFwiTElGRUNZQ0xFX0lOU1RSVUNUXCI6XCJMaWZlY3ljbGUgTWFuYWdlbWVudCBUYWJsZSBJbnN0cnVjdGlvbnNcIixcclxuICBcIlNFUVVFTkNFX0lOU1RSVUNUXCI6XCJTZXF1ZW5jZSBOdW1iZXIgSW5zdHJ1Y3Rpb25zXCIsXHJcbiAgXCJDT05UUk9MX0lOU1RSVUNUXCI6XCJDb250cm9sIE51bWJlciBJbnN0cnVjdGlvbnNcIixcclxuICBcIkNPTVBBTllfSU5TVFJVQ1RcIjpcIkNvbXBhbnkgTmFtZSBJbnN0cnVjdGlvbnNcIixcclxuICBcIkNPTVBBTllfSURfSU5TVFJVQ1RcIjpcIkNvbXBhbnkgSUQgSW5zdHJ1Y3Rpb25zXCIsXHJcbiAgXCJET1NTSUVSX0lEX0lOU1RSVUNUXCI6XCJEb3NzaWVyIElEIEluc3RydWN0aW9uc1wiLFxyXG4gIFwiQURNSU5fQ09NUF9JTlNUUlVDVFwiOiBcIkFkbWluaXN0cmF0aXZlIFN1Ym1pc3Npb24gb3IgQ29tcG9uZW50IEluc3RydWN0aW9uc1wiLFxyXG4gIFwiUExFQVNFX1JFTUlUXCI6XCJQbGVhc2UgcGF5IHRoZSByZW1pc3Npb24gcHJvY2Vzc2luZyBmZWUgb2YgJDU5MCB1c2luZyB0aGUgQWR2YW5jZSBQYXltZW50IERldGFpbHMgZm9yIERydWcgU3VibWlzc2lvbnMgYW5kIE1hc3RlciBGaWxlcy5cIixcclxuICBcIkFQUExZX0RFRkVSXCI6XCJZb3UgYXJlIGFwcGx5aW5nIGZvciBhIGRlZmVycmFsLiBQbGVhc2Ugc2VuZCBubyBwYXltZW50IHdpdGggdGhpcyBmb3JtLlwiLFxyXG4gIFwiQkFOS19EUkFGVFwiOlwiSW50ZXJuYXRpb25hbCBCYW5rIERyYWZ0XCIsXHJcbiAgXCJNT05FWV9PUkRFUlwiOlwiTW9uZXkgT3JkZXJcIixcclxuICBcIkNIRVFVRVwiOlwiQ2hlcXVlXCIsXHJcbiAgXCJDUkVESVRcIjpcIk1hc3RlcmNhcmQgLyBWaXNhIC8gQW1leCAvIFZpc2EgRGViaXQgLyBKQ0IgSW50ZXJuYXRpb25hbFwiLFxyXG4gIFwiQkFOS19XSVJFXCI6XCJXaXJlIChpbmNsdWRlIGJhbmsgY29uZmlybWF0aW9uKVwiLFxyXG4gIFwiRVhJU1RJTkdfQ1JFRElUXCI6XCJFeGlzdGluZyBjcmVkaXRcIixcclxuICBcIlBSRUZFRVJFRF9PUFRJT05cIjpcIkJpbGwgUGF5bWVudCBTZXJ2aWNlIE9wdGlvbiAocHJlZmVycmVkIG1ldGhvZClcIixcclxuICBcIlJFR19UUkFOU0FDVFwiOlwiUmVndWxhdG9yeSBUcmFuc2FjdGlvblwiLFxyXG4gIFwiTElGRV9SRUNcIjpcIlRyYW5zYWN0aW9uIERldGFpbHMgUmVjb3JkXCIsXHJcbiAgXCJPTkVMSUZFUkVDXCI6IFwiQXQgbGVhc3Qgb25lIHRyYW5zYWN0aW9uIGRldGFpbHMgcmVjb3JkIGlzIHJlcXVpcmVkLlwiLFxyXG4gIFwiU0FWRUxJRkVSRUNcIjogXCJBdCBsZWFzdCBvbmUgdHJhbnNhY3Rpb24gZGV0YWlscyByZWNvcmQgaXMgcmVxdWlyZWQgdG8gc2F2ZS5cIixcclxuICBcIkxJRkVDWUNMRUNUUkwuTElGRUNZQ0xFREVUQUlMU0ZPUk1cIjpcIndpdGggYSBUcmFuc2FjdGlvbiBEZXRhaWxzIFJlY29yZFwiLFxyXG4gIFwiSVNfTkVXX0FDVElWSVRZXCI6XCJJcyB0aGlzIHRyYW5zYWN0aW9uIGZvciBhIG5ldyBvciBleGlzdGluZyByZWd1bGF0b3J5IGFjdGl2aXR5P1wiLFxyXG4gIFwiSVNfU0lHTkVEXzNSRF9QQVJUWVwiOiBcIldpbGwgdGhlIHN1Ym1pc3Npb24gYmUgc2lnbmVkIC8gZmlsZWQgYnkgYSB0aGlyZCBwYXJ0eSBvbiBiZWhhbGYgb2YgdGhlIG1hbnVmYWN0dXJlciAvIHNwb25zb3I/XCIsXHJcbiAgXCJBVVRfTEVUVEVSX05PVEVcIjogXCJBIGxldHRlciBvZiBhdXRob3JpemF0aW9uIHNpZ25lZCBieSB0aGUgbWFudWZhY3R1cmVyL3Nwb25zb3IgY29tcGFueSBtdXN0IGJlIHByb3ZpZGVkIGluIHNlY3Rpb24gMS4yLjYgb2YgdGhlIHJlZ3VsYXRvcnkgdHJhbnNhY3Rpb24uXCIsXHJcbiAgXCJJU19QUklPUklUWVwiOlwiV2FzIHRoaXMgcmVndWxhdG9yeSBhY3Rpdml0eSBhcHByb3ZlZCBmb3IgcHJpb3JpdHkgcmV2aWV3P1wiLFxyXG4gIFwiSVNfTk9DXCI6XCJXYXMgdGhpcyByZWd1bGF0b3J5IGFjdGl2aXR5IGFwcHJvdmVkIGZvciBOT0MvQyByZXZpZXc/XCIsXHJcbiAgXCJJU19BRE1JTl9TVUJNSVNTSU9OXCI6IFwiSXMgdGhpcyByZWd1bGF0b3J5IGFjdGl2aXR5IGFuIEFkbWluaXN0cmF0aXZlIFN1Ym1pc3Npb24gb3IgZG9lcyB0aGlzIHJlZ3VsYXRvcnkgYWN0aXZpdHkgY29udGFpbiBhbiBhZG1pbmlzdHJhdGl2ZSBjb21wb25lbnQ/XCIsXHJcbiAgXCJBRE1JTl9ERVNDUklQVFwiOlwiQWRtaW5pc3RyYXRpdmUgU3VibWlzc2lvbiBvciBhZG1pbmlzdHJhdGl2ZSBjb21wb25lbnQgZGVzY3JpcHRpb25cIixcclxuICBcIkFETUlOX1NVQl9UWVBFXCI6XCJSZWFzb24gZm9yIEFkbWluaXN0cmF0aXZlIFN1Ym1pc3Npb24gb3IgYWRtaW5pc3RyYXRpdmUgY29tcG9uZW50XCIsXHJcbiAgXCJBQ1RJVklUWV9MRUFEXCI6IFwiUmVndWxhdG9yeSBBY3Rpdml0eSBMZWFkXCIsXHJcbiAgXCJPVEhFUl9ET0NfREVUQUlMU1wiOiBcIk90aGVyIERvY3VtZW50YXRpb24gRGV0YWlsc1wiLFxyXG4gIFwiQjE0LTIwMTYwMzAxLTA5XCI6XHRcIlBoYXJtYWNldXRpY2FsXCIsXHJcbiAgXCJCMTQtMjAxNjAzMDEtMDJcIjpcdFwiQmlvbG9naWNhbFwiLFxyXG4gIFwiQjE0LTIwMTYwMzAxLTEwXCI6XHRcIlBvc3QtTWFya2V0IFZpZ2lsYW5jZVwiLFxyXG4gIFwiQjE0LTIwMTYwMzAxLTA2XCI6XHRcIkNvbnN1bWVyIEhlYWx0aCBQcm9kdWN0XCIsXHJcbiAgXCJSRVNFVFwiOiBcIlJFU0VUXCIsXHJcbiAgXCJSRVNFVF9JTkZPXCIgOiBcIlRvIGVuYWJsZSB0aGUgJ2dlbmVyYXRlIGZpbmFsIFhNTCcgYnV0dG9uLCBzZWxlY3QgdGhlICdSRVNFVCcgYnV0dG9uIHRvIGNsZWFyIHRyYW5zYWN0aW9uIHNwZWNpZmljIGZpZWxkcy5cIlxyXG59KTtcblxuJHRyYW5zbGF0ZVByb3ZpZGVyLnRyYW5zbGF0aW9ucyhcImZyXCIsIHtcclxuICBcIkFERF9UUkFOU0FDVElPTlwiOiBcImZyX0FkZCBSZWNvcmRcIixcclxuICBcIlNFUVVFTkNFX05VTVwiOiBcImZyX1NlcXVlbmNlIE51bWJlclwiLFxyXG4gIFwiREFURV9TVUJNSVRURURcIjogXCJmcl9EYXRlIFN1Ym1pdHRlZFwiLFxyXG4gIFwiU0VRVUVOQ0VfREVTQ1JJUFRcIjogXCJmcl9SZWd1bGF0b3J5IFRyYW5zYWN0aW9uIERlc2NyaXB0aW9uXCIsXHJcbiAgXCJJU19BQ1RDSEFOR0VTXCI6IFwiZnJfU2FtZSBhcyBSZWd1bGF0b3J5IEFjdGl2aXR5IENvbnRhY3QgZm9yIHRoaXMgU3VibWlzc2lvbj9cIixcclxuICBcIlBST0pfTUFOQUdFUl9OQU1FXCI6IFwiZnJfTmFtZSBvZiBSZWd1bGF0b3J5IFByb2plY3QgTWFuYWdlciwgaWYga25vd25cIixcclxuICBcIkNPTVBBTllfSURcIjogXCJmcl9Db21wYW55IElkXCIsXHJcbiAgXCJET1NTSUVSX0lEXCI6IFwiZnJfRG9zc2llciBJZFwiLFxyXG4gIFwiRE9TU0lFUl9OQU1FXCI6IFwiZnJfRG9zc2llciBOYW1lXCIsXHJcbiAgXCJJU19FQ1REXCI6IFwiZnJfSXMgdGhpcyBhbiBlQ1REIHRyYW5zYWN0aW9uP1wiLFxyXG4gIFwiSVNfU09MSUNJVEVEXCI6IFwiZnJfSXMgdGhpcyBzb2xpY2l0ZWQgaW5mb3JtYXRpb25cIixcclxuICBcIlNPTElDSVRFRF9SUVwiOiBcImZyX1JlcXVlc3RlciBvZiBTb2xpY2l0ZWQgSW5mb3JtYXRpb25cIixcclxuICBcIlNPTElDSVRFRF9SUV9PVEhFUlwiOiBcImZyX090aGVyIFJlcXVlc3RlciBEZXRhaWxzXCIsXHJcbiAgXCJSRVBfQ09OVEFDVF9JTkZPXCI6IFwiTWFpbiBDb250YWN0IEluZm9ybWF0aW9uXCIsXHJcbiAgXCJEQVRFRFwiOiBcImZyX0RhdGVkXCIsXHJcbiAgXCJTVEFSVF9EQVRFXCI6IFwiZnJfU3RhcnQgRGF0ZVwiLFxyXG4gIFwiRU5EX0RBVEVcIjogXCJmcl9FbmQgRGF0ZVwiLFxyXG4gIFwiUkVHX0FDVElWSVRZXCI6IFwiZnJfUmVndWxhdG9yeSBBY3Rpdml0eVwiLFxyXG4gIFwiUkVHX0FDVElWSVRZX1RZUEVcIjogXCJmcl9SZWd1bGF0b3J5IEFjdGl2aXR5IFR5cGVcIixcclxuICBcIlNFUVVFTkNFX1RZUEVcIjogXCJmcl9SZWd1bGF0b3J5IFRyYW5zYWN0aW9uIERlc2NyaXB0aW9uIFwiLFxyXG4gIFwiVkVSU0lPTl9OT1wiOiBcImZyX1ZlcnNpb24gTm8uXCIsXHJcbiAgXCJCUklFRl9ERVNDXCI6IFwiZnJfQnJpZWYgRGVzY3JpcHRpb25cIixcclxuICBcIkFETUlOSVNUUkFUSVZFXCI6IFwiZnJfQWRtaW5pc3RyYXRpdmVcIixcclxuICBcIkJFTkVGSVRfUklTS19BU1NFU1NcIjogXCJmcl9CZW5lZml0IFJpc2sgQXNzZXNzbWVudFwiLFxyXG4gIFwiQ0FOQ0VMX0xFVFRFUlwiOiBcImZyX0NhbmNlbGxhdGlvbiBMZXR0ZXJcIixcclxuICBcIkNIQU5HRV9UT19ESU5cIjogXCJmcl9DaGFuZ2UgdG8gRElOXCIsXHJcbiAgXCJDT01NRU5UU19OT0NcIjogXCJmcl9Db21tZW50cyBvbiBOb3RpY2Ugb2YgRGVjaXNpb25cIixcclxuICBcIkNPTU1FTlRTX1NVTU1BUllfQkFTSVNcIjogXCJmcl9Db21tZW50cyBvbiBTdW1tYXJ5IEJhc2lzIG9mIERlY2lzaW9uXCIsXHJcbiAgXCJESU5fRElTQ09OVElOVUVEXCI6IFwiZnJfTm90aWZpY2F0aW9uIG9mIERpc2NvbnRpbnVlZCBTYWxlIChESU4gQ2FuY2VsbGF0aW9uKVwiLFxyXG4gIFwiRFJVR19OT1RJRl9GT1JNXCI6IFwiZnJfRHJ1ZyBOb3RpZmljYXRpb24gRm9ybVwiLFxyXG4gIFwiRk9SX1BFUklPRFwiOiBcImZyX0ZvciBQZXJpb2RcIixcclxuICBcIklOSVRJQUxcIjogXCJmcl9JTklUSUFMXCIsXHJcbiAgXCJNRUVUSU5HX01JTlVURVNcIjogXCJmcl9NaW51dGVzIG9mIE1lZXRpbmdcIixcclxuICBcIk5PVElGSUNBVElPTl9DSEFOR0VcIjogXCJmcl9Ob3RpZmljYXRpb24gb2YgQ2hhbmdlIGluIGJlbmVmaXQtcmlzayBwcm9maWxlXCIsXHJcbiAgXCJOT1RJRklDQVRJT05fSU5URVJSVVBUX1NBTEVcIjpcImZyX05vdGlmaWNhdGlvbiBJbnRlcnJ1cHRpb24gb2YgU2FsZVwiLFxyXG4gIFwiUEFOREVNSUNfQVBQTFwiOiBcImZyX1BhbmRlbWljIEFwcGxpY2F0aW9uXCIsXHJcbiAgXCJQT1NUX0NMRUFSQU5DRV9EQVRBXCI6IFwiZnJfUG9zdCBDbGVhcmFuY2UgRGF0YVwiLFxyXG4gIFwiUE9TVF9NQVJLRVRfU1VSVlwiOiBcImZyX1Bvc3QgTWFya2V0aW5nIFN1cnZlaWxsYW5jZVwiLFxyXG4gIFwiUE9TVF9OT0NfQ0hBTkdFXCI6IFwiZnJfUG9zdCBOT0MgQ2hhbmdlXCIsXHJcbiAgXCJQT1NUX0FVVEhfRElWMV9DSEFOR0VcIjogXCJmcl9Qb3N0LUF1dGhvcml6YXRpb24gRGl2aXNpb24gMSBDaGFuZ2VcIixcclxuICBcIlBSRVNVQl9NRUVUSU5HX1BLR1wiOiBcImZyX1N1Ym1pc3Npb24gTWVldGluZyBQYWNrYWdlXCIsXHJcbiAgXCJQUkVTVUJfTUVFVElOR19SUVwiOiBcImZyX1N1Ym1pc3Npb24gTWVldGluZyBSZXF1ZXN0XCIsXHJcbiAgXCJQUklPUklUWV9SRVZJRVdfUlFcIjogXCJmcl9Qcmlvcml0eSBSZXZpZXcgUmVxdWVzdFwiLFxyXG4gIFwiUFJJU1RJTkVfUE1cIjogXCJmcl9QcmlzdGluZSBQTVwiLFxyXG4gIFwiUFJJU1RJTkVfUE1fMkxBTkdcIjogXCJmcl9QcmlzdGluZSBQTSAtIFNlY29uZCBMYW5ndWFnZVwiLFxyXG4gIFwiQURWSVNFTUVOVF9MRVRURVJfUkVTUE9OU0VcIjogXCJmcl9SZXNwb25zZSB0byBBZHZpc2VtZW50IExldHRlciBcIixcclxuICBcIkNMSU5fQ0xBUklGX1JFU1BPTlNFXCI6IFwiZnJfUmVzcG9uc2UgdG8gQ2xpbmljYWwgQ2xhcmlmaWNhdGlvbiBSZXF1ZXN0IFwiLFxyXG4gIFwiRU1BSUxfUlFfUkVTUE9OU0VcIjogXCJmcl9SZXNwb25zZSB0byBlLW1haWwgUmVxdWVzdMKgXCIsXHJcbiAgXCJMQUJFTF9DTEFSSUZfUkVTUE9OU0VcIjogXCJmcl9SZXNwb25zZSB0byBMYWJlbGluZyBDbGFyaWZpY2F0aW9uIFJlcXVlc3RcIixcclxuICBcIk1IUERfUlFfUkVTUE9OU0VcIjogXCJmcl9SZXNwb25zZSB0byBNSFBEIFJlcXVlc3RzXCIsXHJcbiAgXCJOT0NfUkVTUE9OU0VcIjogXCJmcl9SZXNwb25zZSB0byBOT0MvYy1RTlwiLFxyXG4gIFwiTk9EX1JFU1BPTlNFXCI6IFwiZnJfUmVzcG9uc2UgdG8gTk9EXCIsXHJcbiAgXCJOT05fUkVTUE9OU0VcIjogXCJmcl9SZXNwb25zZSB0byBOT05cIixcclxuICBcIlBST0NFU1NJTkdfQ0xBUklGX1JFU1BPTlNFXCI6IFwiZnJfUmVzcG9uc2UgdG8gUHJvY2Vzc2luZyBDbGFyaWZpY2F0aW9uIFJlcXVlc3RcIixcclxuICBcIlFVQUxfQ0xJTl9DTEFSSUZfUkVTUE9OU0VcIjogXCJmcl9SZXNwb25zZSB0byBRdWFsaXR5IGFuZCBDbGluaWNhbCBDbGFyaWZpY2F0aW9uIFJlcXVlc3RcIixcclxuICBcIlFVQUxfQ0xBUklGX1JFU1BPTlNFXCI6IFwiZnJfUmVzcG9uc2UgdG8gUXVhbGl0eSBDbGFyaWZpY2F0aW9uIFJlcXVlc3RcIixcclxuICBcIlNDUkVFTklOR19BQ0NFUFRfUkVTUE9OU0VcIjogXCJmcl9SZXNwb25zZSB0byBTY3JlZW5pbmcgQWNjZXB0YW5jZSBMZXR0ZXJcIixcclxuICBcIlNDUkVFTklOR19DTEFSSUZfUkVTUE9OU0VcIjogXCJmcl9SZXNwb25zZSB0byBTY3JlZW5pbmcgQ2xhcmlmaWNhdGlvbiBSZXF1ZXN0XCIsXHJcbiAgXCJTRE5fUkVTUE9OU0VcIjogXCJmcl9SZXNwb25zZSB0byBTRE5cIixcclxuICBcIlJFQ09OX0RFQ0lTX0xUUl9JTlRFTlRcIjogXCJmcl9SZWNvbnNpZGVyYXRpb24gb2YgRGVjaXNpb24gLSBMZXR0ZXIgb2YgSW50ZW50XCIsXHJcbiAgXCJSRUNPTl9ERUNJU19SUV9SRUNPTlwiOiAgXCJmcl9SZWNvbnNpZGVyYXRpb24gb2YgRGVjaXNpb24gLSBSZXF1ZXN0IGZvciBSZWNvbnNpZGVyYXRpb25cIixcclxuICBcIlJFQ09OX0RFQ0lTX09USEVSX0lORk9cIjogXCJmcl9SZWNvbnNpZGVyYXRpb24gb2YgRGVjaXNpb24gLSBPdGhlciBJbmZvcm1hdGlvblwiLFxyXG4gIFwiTEFCRUxfUFJFQVBQUk9WQUxfMkxBTkdcIjpcImZyX1NlY29uZCBMYW5ndWFnZSBMYWJlbCAtIFByZS1BcHByb3ZhbFwiLFxyXG4gIFwiUEhPTkVfUlFfUkVTUE9OU0VcIjogXCJmcl9SZXNwb25zZSB0byBUZWxlcGhvbmUgUmVxdWVzdFwiLFxyXG4gIFwiUklTS19DT01NVU5fRE9DXCI6IFwiZnJfUmlzayBjb21tdW5pY2F0aW9uIGRvY3VtZW50XCIsXHJcbiAgXCJSTVBfVkVSU0lPTl9EQVRFXCI6IFwiZnJfUk1QIHZlcnNpb24gbnVtYmVyXCIsXHJcbiAgXCJTSUdOQUxfV09SS19VUFwiOiBcImZyX1NpZ25hbCBXb3JrIFVwXCIsXHJcbiAgXCJVTlNPTElDSVRFRF9EQVRBXCI6IFwiZnJfVW5zb2xpY2l0ZWQgRGF0YVwiLFxyXG4gIFwiWUVBUl9MSVNUX09GX0NIQU5HRVwiOiBcImZyX1llYXIsIGxpc3Qgb2YgY2hhbmdlIG51bWJlciAoZm9yIGV4YW1wbGU6IDIwMTIsIDE1LCAxOWEs4oCmLilcIixcclxuICBcIkJFX0NMQVJJRl9SRVNQT05TRVwiOiBcImZyX1Jlc3BvbnNlIHRvIEJFIENsYXJpZmljYXRpb24gUmVxdWVzdFwiLFxyXG4gIFwiTElGRUNZQ0xFX1RJVExFXCI6IFwiZnJfVHJhbnNhY3Rpb24gRGV0YWlsc1wiLFxyXG4gIFwiUkVHX0NPTlRBQ1RfVEhJU1wiOiBcImZyX1JlZ3VsYXRvcnkgQWN0aXZpdHkgQ29udGFjdCBmb3IgVEhJUyB0cmFuc2FjdGlvblwiLFxyXG4gIFwiUkVHX0FDVF9DT05UQUNUXCI6IFwiZnJfUmVndWxhdG9yeSBBY3Rpdml0eSBDb250YWN0XCIsXHJcbiAgXCJUUkFOU0FDVElPTl9IRElOR1wiOiBcImZyX1JlZ3VsYXRvcnkgSW5mb3JtYXRpb25cIixcclxuICBcIkxPQURfVFJBTlNBQ1RJT05cIjogXCJmcl9Mb2FkIGEgUmVndWxhdG9yeSBUcmFuc2FjdGlvbiBGaWxlXCIsXHJcbiAgXCJHRU5FUkFURV9GSU5BTFwiOiBcImZyX0dlbmVyYXRlIEZpbmFsIFhNTFwiLFxyXG4gIFwiQ09ORklSTV9DT05UQUNUX1ZBTElEXCI6IFwiZnJfSSBjb25maXJtIHRoYXQgdGhlIGFib3ZlIHJlZ3VsYXRvcnkgYWN0aXZpdHkgY29udGFjdCBpbmZvcm1hdGlvbiBpcyB2YWxpZC5cIixcclxuICBcIllFQVJfQ0hBTkdFXCI6IFwiZnJfWWVhciBvZiB0aGUgY2hhbmdlLCBMaXN0IERlc2NyaXB0aW9uXCIsXHJcbiAgXCJDT01QQU5ZX0lORk9cIjogXCJBLiBDb21wYW55IEluZm9ybWF0aW9uXCIsXHJcbiAgXCJBRERSRVNTX0lORk9cIjogXCJCLiBBZGRyZXNzIEluZm9ybWF0aW9uXCIsXHJcbiAgXCJDT01QQU5ZX1JFUF9USElTXCI6IFwiQy4gQ29tcGFueSBSZXByZXNlbnRhdGl2ZVwiLFxyXG4gIFwiUkVHX0FDVElWSVRZX0lOU1RSVUNUXCI6XCJmcl9SZWd1bGF0b3J5IEFjdGl2aXR5IENvbnRhY3QgSW5zdHJ1Y3Rpb25zXCIsXHJcbiAgXCJTQVZFX0lOU1RSVUNUXCI6IFwiZnJfVHJhbnNhY3Rpb24gRmlsZSBTYXZlIEluc3RydWN0aW9uc1wiLFxyXG4gIFwiQ0xBUklGX1JFU1BPTlNFXCI6XCJmcl9SZXNwb25zZSB0byBDbGFyaWZpY2F0aW9uIFJlcXVlc3RcIixcclxuICBcIk5PTkNMSU5fQ0xBUklGX1JFU1BPTlNFXCI6IFwiZnJfUmVzcG9uc2UgdG8gTm9uLWNsaW5pY2FsIENsYXJpZmljYXRpb24gUmVxdWVzdCBcIixcclxuICBcIkNPUlJfUEFURU5UX01FRFwiOlwiZnJfQ29ycmVzcG9uZGVuY2UgLSBQYXRlbnRlZCBNZWRpY2luZXNcIixcclxuICBcIkFMTEVHQVRJT05fTk9USUNFXCI6XCJmcl9Ob3RpY2Ugb2YgYWxsZWdhdGlvblwiLFxyXG4gIFwiRk9STV9JVlwiOlwiZnJfRm9ybSBJVlwiLFxyXG4gIFwiRk9STV9WXCI6XCJmcl9Gb3JtIFZcIixcclxuICBcIkNPTlNFTlRfTFRSXCI6XCJmcl9Db25zZW50IExldHRlclwiLFxyXG4gIFwiREFUQV9QUk9URUNUX0NPUlJFU1BcIjpcImZyX0NvcnJlc3BvbmRlbmNlIC0gRGF0YSBQcm90ZWN0aW9uXCIsXHJcbiAgXCJDSE9PU0VfUkVRVUVTVFwiOlwiZnJfQ2hvb3NlIGEgcmVxdWVzdGVyXCIsXHJcbiAgXCJUUkFOU0FDVF9JTlNUUlVDVFwiOlwiZnJfUmVndWxhdG9yeSBUcmFuc2FjdGlvbiBJbnN0cnVjdGlvbnNcIixcclxuICBcIkxJU1RfREVTQ1JJUFRcIjpcImZyX0xpc3QgRGVzY3JpcHRpb25cIixcclxuICBcIlNFUVVFTkNFX0NMRUFOVVBcIjpcImZyX2VDVEQgRG9zc2llciBDbGVhbi11cFwiLFxyXG4gIFwiRkVFX1JFTUlTU0lPTlwiOlwiZnJfRmVlIFJlbWlzc2lvbiBpcyByZXF1ZXN0ZWQgd2l0aCB0aGlzIHRyYW5zYWN0aW9uXCIsXHJcbiAgXCJTVEFURU1FTlRfUkVWRU5VRVwiOlwiZnJfQSBzdGF0ZW1lbnQgc2lnbmVkIGJ5IHRoZSBpbmRpdmlkdWFsIHJlc3BvbnNpYmxlIGZvciB0aGUgYXBwbGljYW50J3MgZmluYW5jaWFsIGFmZmFpcnMgaXMgaW5jbHVkZWQgdG8gY2VydGlmeSB0aGF0IHRoZSBmZWUgcGF5YWJsZSBpcyBncmVhdGVyIHRoYW4gMTAlIG9mIHRoZSBhbnRpY2lwYXRlZCBncm9zcyByZXZlbnVlXCIsXHJcbiAgXCJERUZFUl9JTlNUUlVDVFwiOlwiZnJfRGVmZXJyYWwgb2YgcGF5bWVudCBJbnN0cnVjdGlvbnNcIixcclxuICBcIlJFTUlTU0lPTl9JTlNUUlVDVFwiOlwiZnJfRmVlIHJlbWlzc2lvbiBJbnN0cnVjdGlvbnNcIixcclxuICBcIkNMQVNTX0lOU1RSVUNUXCI6XCJmcl9TdWJtaXNzaW9uIENsYXNzIEluc3RydWN0aW9uc1wiLFxyXG4gIFwiUFJPRFVDVF9JTlNUUlVDVFwiOlwiZnJfUHJvZHVjdCBOYW1lIEluc3RydWN0aW9uc1wiLFxyXG4gIFwiTElGRUNZQ0xFX0lOU1RSVUNUXCI6XCJmcl9MaWZlY3ljbGUgTWFuYWdlbWVudCBUYWJsZSBJbnN0cnVjdGlvbnNcIixcclxuICBcIlNFUVVFTkNFX0lOU1RSVUNUXCI6XCJmcl9TZXF1ZW5jZSBOdW1iZXIgSW5zdHJ1Y3Rpb25zXCIsXHJcbiAgXCJDT05UUk9MX0lOU1RSVUNUXCI6XCJmcl9Db250cm9sIE51bWJlciBJbnN0cnVjdGlvbnNcIixcclxuICBcIkNPTVBBTllfSU5TVFJVQ1RcIjpcImZyX0NvbXBhbnkgTmFtZSBJbnN0cnVjdGlvbnNcIixcclxuICBcIkNPTVBBTllfSURfSU5TVFJVQ1RcIjpcImZyX0NvbXBhbnkgSUQgSW5zdHJ1Y3Rpb25zXCIsXHJcbiAgXCJET1NTSUVSX0lEX0lOU1RSVUNUXCI6XCJmcl9Eb3NzaWVyIElEIEluc3RydWN0aW9uc1wiLFxyXG4gIFwiQURNSU5fQ09NUF9JTlNUUlVDVFwiOiBcImZyX0FkbWluaXN0cmF0aXZlIFN1Ym1pc3Npb24gb3IgQ29tcG9uZW50IEluc3RydWN0aW9uc1wiLFxyXG4gIFwiUExFQVNFX1JFTUlUXCI6XCJmcl9QbGVhc2UgcGF5IHRoZSByZW1pc3Npb24gcHJvY2Vzc2luZyBmZWUgb2YgJDU5MCB1c2luZyB0aGUgQWR2YW5jZSBQYXltZW50IERldGFpbHMgZm9yIERydWcgU3VibWlzc2lvbnMgYW5kIE1hc3RlciBGaWxlcy5cIixcclxuICBcIkFQUExZX0RFRkVSXCI6XCJmcl9Zb3UgYXJlIGFwcGx5aW5nIGZvciBhIGRlZmVycmFsLiBQbGVhc2Ugc2VuZCBubyBwYXltZW50IHdpdGggdGhpcyBmb3JtLlwiLFxyXG4gIFwiQkFOS19EUkFGVFwiOlwiZnJfSW50ZXJuYXRpb25hbCBCYW5rIERyYWZ0XCIsXHJcbiAgXCJNT05FWV9PUkRFUlwiOlwiZnJfTW9uZXkgT3JkZXJcIixcclxuICBcIkNIRVFVRVwiOlwiZnJfQ2hlcXVlXCIsXHJcbiAgXCJDUkVESVRcIjpcImZyX01hc3RlcmNhcmQgLyBWaXNhIC8gQW1leCAvIFZpc2EgRGViaXQgLyBKQ0IgSW50ZXJuYXRpb25hbFwiLFxyXG4gIFwiQkFOS19XSVJFXCI6XCJmcl9XaXJlIChpbmNsdWRlIGJhbmsgY29uZmlybWF0aW9uKVwiLFxyXG4gIFwiRVhJU1RJTkdfQ1JFRElUXCI6XCJmcl9FeGlzdGluZyBjcmVkaXRcIixcclxuICBcIlBSRUZFRVJFRF9PUFRJT05cIjpcImZyX0JpbGwgUGF5bWVudCBTZXJ2aWNlIE9wdGlvbiAocHJlZmVycmVkIG1ldGhvZClcIixcclxuICBcIlNVUFBPUlRJTkdfRE9DXCI6XCJmcl9QbGVhc2UgaW5jbHVkZSB0aGUgcmVxdWlyZWQgc2lnbmVkIHN0YXRlbWVudCBBTkQgYXQgbGVhc3Qgb25lIG9mIHRoZSBzdXBwb3J0IGRvY3VtZW50YXRpb24gdG8gZXN0YWJsaXNoIHRoYXQgdGhlIGFwcGxpY2FibGUgZmVlIHBheWFibGUgaXMgZ3JlYXRlciB0aGFuIDEwJSBvZiB0aGUgYW50aWNpcGF0ZWQgZ3Jvc3MgcmV2ZW51ZSBmcm9tIHNhbGVzIG9mIHRoZSBkcnVnIHByb2R1Y3QgaW4gQ2FuYWRhIGR1cmluZyB0aGUgZmVlIHZlcmlmaWNhdGlvbiBwZXJpb2QuXCIsXHJcbiAgXCJSRUdfVFJBTlNBQ1RcIjpcImZyX1JlZ3VsYXRvcnkgVHJhbnNhY3Rpb25cIixcclxuICBcIkxJRkVfUkVDXCI6XCJmcl9UcmFuc2FjdGlvbiBkZXRhaWxzIHJlY29yZFwiLFxyXG4gIFwiT05FTElGRVJFQ1wiOiBcImZyX0F0IGxlYXN0IG9uZSB0cmFuc2FjdGlvbiBkZXRhaWxzIHJlY29yZCBpcyByZXF1aXJlZC5cIixcclxuICBcIlNBVkVMSUZFUkVDXCI6IFwiZnJfQXQgbGVhc3Qgb25lIHRyYW5zYWN0aW9uIGRldGFpbHMgcmVjb3JkIGlzIHJlcXVpcmVkIHRvIHNhdmUuXCIsXHJcbiAgXCJMSUZFQ1lDTEVDVFJMLkxJRkVDWUNMRURFVEFJTFNGT1JNXCI6XCJmcl93aXRoIGEgVHJhbnNhY3Rpb24gRGV0YWlscyBSZWNvcmRcIixcclxuICBcIklTX0ZFRV9UUkFOU0FDVElPTlwiOlwiZnJfQXJlIG5ldyBvciByZXZpc2VkIGZlZXMgYXNzb2NpYXRlZCB3aXRoIHRoaXMgdHJhbnNhY3Rpb24/XCIsXHJcbiAgXCJJU19ORVdfQUNUSVZJVFlcIjpcImZyX0lzIHRoaXMgdHJhbnNhY3Rpb24gZm9yIGEgbmV3IG9yIGV4aXN0aW5nIHJlZ3VsYXRvcnkgYWN0aXZpdHk/XCIsXHJcbiAgXCJJU19TSUdORURfM1JEX1BBUlRZXCI6IFwiZnJfV2lsbCB0aGUgc3VibWlzc2lvbiBiZSBzaWduZWQgLyBmaWxlZCBieSBhIHRoaXJkIHBhcnR5IG9uIGJlaGFsZiBvZiB0aGUgbWFudWZhY3R1cmVyIC8gc3BvbnNvcj9cIixcclxuICBcIkFVVF9MRVRURVJfTk9URVwiOiBcImZyX0EgbGV0dGVyIG9mIGF1dGhvcml6YXRpb24gc2lnbmVkIGJ5IHRoZSBtYW51ZmFjdHVyZXIvc3BvbnNvciBjb21wYW55IG11c3QgYmUgcHJvdmlkZWQgaW4gc2VjdGlvbiAxLjIuNiBvZiB0aGUgcmVndWxhdG9yeSB0cmFuc2FjdGlvbi5cIixcclxuICBcIklTX1BSSU9SSVRZXCI6XCJmcl9XYXMgdGhpcyByZWd1bGF0b3J5IGFjdGl2aXR5IGFwcHJvdmVkIGZvciBwcmlvcml0eSByZXZpZXc/XCIsXHJcbiAgXCJJU19OT0NcIjpcImZyX1dhcyB0aGlzIHJlZ3VsYXRvcnkgYWN0aXZpdHkgYXBwcm92ZWQgZm9yIE5PQy9DIHJldmlldz9cIixcclxuICBcIklTX0FETUlOX1NVQk1JU1NJT05cIjogXCJmcl9JcyB0aGlzIHJlZ3VsYXRvcnkgYWN0aXZpdHkgYW4gQWRtaW5pc3RyYXRpdmUgU3VibWlzc2lvbiBvciBkb2VzIHRoaXMgcmVndWxhdG9yeSBhY3Rpdml0eSBjb250YWluIGFuIGFkbWluaXN0cmF0aXZlIGNvbXBvbmVudD9cIixcclxuICBcIkFETUlOX0RFU0NSSVBUXCI6XCJmcl9BZG1pbmlzdHJhdGl2ZSBTdWJtaXNzaW9uIG9yIGFkbWluaXN0cmF0aXZlIGNvbXBvbmVudCBkZXNjcmlwdGlvblwiLFxyXG4gIFwiQURNSU5fU1VCX1RZUEVcIjpcImZyX1JlYXNvbiBmb3IgQWRtaW5pc3RyYXRpdmUgU3VibWlzc2lvbiBvciBhZG1pbmlzdHJhdGl2ZSBjb21wb25lbnRcIixcclxuICBcIkFDVElWSVRZX0xFQURcIjogXCJmcl9SZWd1bGF0b3J5IEFjdGl2aXR5IExlYWRcIixcclxuICBcIk9USEVSX0RPQ19ERVRBSUxTXCI6IFwiZnJfT3RoZXIgRG9jdW1lbnRhdGlvbiBEZXRhaWxzXCIsXHJcbiAgXCJTUE9OU09SX0lOVk9JQ0VcIjpcImZyX1JldmlldyBmZWVzIG11c3Qgbm90IGJlIGluY2x1ZGVkIHdpdGggdGhlIHN1Ym1pc3Npb24sIHN1cHBsZW1lbnQgb3IgYXBwbGljYXRpb24uIFNwb25zb3JzIHdpbGwgYmUgaW52b2ljZWQgZm9yIGZlZXMgb2YgbW9yZSB0aGFuICQxMCwwMDAuXCIsXHJcbiAgXCJCMTQtMjAxNjAzMDEtMDlcIjpcdFwiZnJfUGhhcm1hY2V1dGljYWxcIixcclxuICBcIkIxNC0yMDE2MDMwMS0wMlwiOlx0XCJmcl9CaW9sb2dpY2FsXCIsXHJcbiAgXCJCMTQtMjAxNjAzMDEtMTBcIjpcdFwiZnJfUG9zdC1NYXJrZXQgVmlnaWxhbmNlXCIsXHJcbiAgXCJCMTQtMjAxNjAzMDEtMDZcIjpcdFwiZnJfQ29uc3VtZXIgSGVhbHRoIFByb2R1Y3RcIixcclxuICBcIkNPTU1FTlRTX1JFR1VMQVJUT1JZX0RFQ0lTSU9OXCI6IFwiZnJfQ29tbWVudHMgb24gUmVndWxhdG9yeSBEZWNpc2lvbiBTdW1tYXJ5XCIsXHJcbiAgXCJSRVNFVFwiOiBcImZyX1JFU0VUXCIsXHJcbiAgXCJSRVNFVF9JTkZPXCIgOiBcImZyX1RvIGVuYWJsZSB0aGUgJ2dlbmVyYXRlIGZpbmFsIFhNTCcgYnV0dG9uLCBzZWxlY3QgdGhlICdSRVNFVCcgYnV0dG9uIHRvIGNsZWFyIHRyYW5zYWN0aW9uIHNwZWNpZmljIGZpZWxkcy5cIlxyXG59KTtcblxuJHRyYW5zbGF0ZVByb3ZpZGVyLnRyYW5zbGF0aW9ucyhcImVuXCIsIHtcclxuICBcIkZPUl9USEVcIjpcIkZvciB0aGUgXCIsXHJcbiAgXCJUSEVSRV9BUkVfRVJST1JTXCI6XCJUaGVyZSBhcmUgZXJyb3JzXCIsXHJcbiAgXCJFUlJPUlNfRk9VTkRcIjpcImVycm9ycyB3ZXJlIGZvdW5kLlwiLFxyXG4gIFwiRVJST1JfRk9VTkRcIjpcImVycm9yIHdhcyBmb3VuZC5cIixcclxuICBcIlRZUEVfUkVRVUlSRURcIjpcIlRoaXMgZmllbGQgaXMgcmVxdWlyZWQuXCIsXHJcbiAgXCJUWVBFX0VNQUlMXCI6XCJQbGVhc2UgZW50ZXIgYSB2YWxpZCBlbWFpbCBhZGRyZXNzLlwiLFxyXG4gIFwiVFlQRV9EVVBMSUNBVEVST0xFXCI6IFwiVGhpcyByb2xlIGhhcyBhbHJlYWR5IGJlZW4gc2VsZWN0ZWQuXCIsXHJcbiAgXCJUWVBFX01JTkxFTkdUSFwiOiBcIkxlc3MgdGhhbiBtaW5pbXVtIGxlbmd0aFwiLFxyXG4gIFwiUE9TVEFMX0ZPUk1BVFwiOiBcIlBsZWFzZSBlbnRlciBhIHZhbGlkIGZvcm1hdFwiLFxyXG4gIFwiVFlQRV9NSU5cIjogXCJNdXN0IGJlIGdyZWF0ZXIgdGhhbiB0aGUgbWluaW11bVwiLFxyXG4gIFwiVFlQRV9EQVRFXCI6XCJQbGVhc2UgZW50ZXIgYSB2YWxpZCBkYXRlXCIsXHJcbiAgXCJUWVBFX05VTUJFUlwiOlwiUGxlYXNlIGVudGVyIGEgdmFsaWQgbnVtYmVyXCIsXHJcbiAgXCJUWVBFX1BBVFRFUk5cIjogXCJUaGUgZm9ybWF0IGlzIG5vdCB2YWxpZFwiXHJcbn0pO1xuXG4kdHJhbnNsYXRlUHJvdmlkZXIudHJhbnNsYXRpb25zKFwiZnJcIiwgXHJcblxyXG57XHJcblwiRk9SX1RIRVwiOlwiUG91ciBsZSBcIixcclxuXCJUSEVSRV9BUkVfRVJST1JTXCI6XCJJbCB5IGEgZGVzIGVycmV1cnNcIixcclxuXCJFUlJPUlNfRk9VTkRcIjpcImVycmV1cnMgb250IMOpdMOpIHRyb3V2w6llcy5cIixcclxuXCJFUlJPUl9GT1VORFwiOlwiZXJyZXVyIGEgw6l0w6kgdHJvdXbDqWUuXCIsXHJcblwiVFlQRV9SRVFVSVJFRFwiOlwiQ2UgY2hhbXAgZXN0IG9ibGlnYXRvaXJlLlwiLFxyXG5cIlRZUEVfRU1BSUxcIjpcIlZldWlsbGV6IGZvdXJuaXIgdW5lIGFkcmVzc2Ugw6lsZWN0cm9uaXF1ZSB2YWxpZGUuXCIsXHJcblwiVFlQRV9EVVBMSUNBVEVST0xFXCI6IFwiQ2UgcsO0bGUgYSBkw6lqw6Agw6l0w6kgc8OpbGVjdGlvbm7DqS5cIixcclxuXCJUWVBFX01JTkxFTkdUSFwiOiBcIk1vaW5zIGRlIGxvbmd1ZXVyIG1pbmltYWxlLlwiLFxyXG5cIlBPU1RBTF9GT1JNQVRcIjogXCJFbnRyZXogdW4gZm9ybWF0IHZhbGlkZS5cIixcclxuXCJUWVBFX01JTlwiOiBcIkRvaXQgw6p0cmUgc3Vww6lyaWV1ciBhdSBtaW5pbXVtLlwiLFxyXG5cIlRZUEVfREFURVwiOlwiVmV1aWxsZXogZm91cm5pciB1bmUgdW5lIGRhdGUgdmFsaWRlLlwiLFxyXG4gIFwiVFlQRV9OVU1CRVJcIjpcIlZldWlsbGV6IGZvdXJuaXIgdW4gbnVtw6lybyB2YWxpZGUuXCIsXHJcbiAgXCJUWVBFX1BBVFRFUk5cIjogXCJmcl9UaGUgZm9ybWF0IGlzIG5vdCB2YWxpZFwiXHJcbn0pO1xufV0pO1xuIiwiLyoqXHJcbiAqIENyZWF0ZWQgYnkgZGtpbHR5IG9uIDkvMS8yMDE2LlxyXG4gKi9cclxuXHJcblxyXG4oZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKCdudW1iZXJGb3JtYXQnLCBbXSk7XHJcblxyXG59KSgpO1xyXG4vKioqXHJcbiAqIERpcmVjdGl2ZSBmb3IgcmVzdHJpY3RpbmcgdXNlciBpbnB1dCB0byBudW1iZXJzXHJcbiAqIE9wdGlvbnM6IHVzZSBvbmx5LW1heCB0byBpbmRpY2F0ZSB0aGUgbnVtYmVyIG9mIGRpZ2l0cyAoaW50ZWdlcilcclxuICogIHVzZSBmbGFnIGludE5lZyAoaWUgIG9ubHktZGlnaXRzPVwiaW50TmVnXCIpIHRvIGluZGljYXRlIHRvIGFsbG93IG5lZ2F0aXZlIG51bWJlcnNcclxuICogIEN1cnJlbnRseSB0aGlzIGRpcmVjdGl2ZSBvbmx5IHN1cHBvcnRzIGludGVnZXJzXHJcbiAqL1xyXG4oZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKCdudW1iZXJGb3JtYXQnKVxyXG4gICAgICAgIC5kaXJlY3RpdmUoJ29ubHlEaWdpdHMnLCBkaWdpdHNDdHJsKTtcclxuXHJcbiAgICBmdW5jdGlvbiBkaWdpdHNDdHJsKCkge1xyXG4gICAgICAgIHZhciBkaXJlY3RpdmUgPSB7XHJcblxyXG4gICAgICAgICAgICBsaW5rOiBsaW5rLFxyXG4gICAgICAgICAgICByZXN0cmljdDogJ0EnLFxyXG4gICAgICAgICAgICByZXF1aXJlOiAnP25nTW9kZWwnXHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4gZGlyZWN0aXZlO1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBsaW5rKHNjb3BlLCBlbGVtZW50LCBhdHRycywgbW9kZWxDdHJsKSB7XHJcbiAgICAgICAgICAgIG1vZGVsQ3RybC4kcGFyc2Vycy5wdXNoKGZ1bmN0aW9uIChpbnB1dFZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaW5wdXRWYWx1ZSA9PSB1bmRlZmluZWQpIHJldHVybiAnJztcclxuICAgICAgICAgICAgICAgIHZhciBpc051bWJlciA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgdmFyIG1heCA9IC0xO1xyXG4gICAgICAgICAgICAgICAgdmFyIGlnbm9yZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgdmFyIHRlbXBWYWwgPSBcIlwiICsgaW5wdXRWYWx1ZTtcclxuICAgICAgICAgICAgICAgIGlmIChhdHRyc1sndHlwZSddICYmIGF0dHJzWyd0eXBlJ10gPT09ICdudW1iZXInKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaXNOdW1iZXIgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmIChhdHRyc1snb25seU1heCddKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbWF4ID0gcGFyc2VJbnQoYXR0cnNbJ29ubHlNYXgnXSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB2YXIgcmVnZXhJbnROZWcgPSAvW14wLTktXS9nO1xyXG4gICAgICAgICAgICAgICAgdmFyIGludGVnZXJSZWcgPSAvW14wLTldL2c7IC8vZGVmYXVsdFxyXG4gICAgICAgICAgICAgICAgdmFyIHJlZ2V4VmFsdWUgPSBpbnRlZ2VyUmVnO1xyXG4gICAgICAgICAgICAgICAgaWYgKGF0dHJzWydvbmx5RGlnaXRzJ10gPT0gJ2ludE5lZycpIHtcclxuICAgICAgICAgICAgICAgICAgICByZWdleFZhbHVlID0gcmVnZXhJbnROZWc7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGF0dHJzWydvbmx5RGlnaXRzJ109PT0nZmFsc2UnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWdub3JlPXRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICByZWdleFZhbHVlID0gaW50ZWdlclJlZztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChpZ25vcmUpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaW5wdXRWYWx1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHZhciB0cmFuc2Zvcm1lZElucHV0ID0gdGVtcFZhbC5yZXBsYWNlKHJlZ2V4VmFsdWUsICcnKTtcclxuICAgICAgICAgICAgICAgIGlmIChtYXggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNmb3JtZWRJbnB1dCA9IHRyYW5zZm9ybWVkSW5wdXQuc3Vic3RyaW5nKDAsIG1heCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAodHJhbnNmb3JtZWRJbnB1dCAhPT0gdGVtcFZhbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpc051bWJlciAmJiB0cmFuc2Zvcm1lZElucHV0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybWVkSW5wdXQgPSBwYXJzZUZsb2F0KHRyYW5zZm9ybWVkSW5wdXQpXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIG1vZGVsQ3RybC4kc2V0Vmlld1ZhbHVlKHRyYW5zZm9ybWVkSW5wdXQpO1xyXG4gICAgICAgICAgICAgICAgICAgIG1vZGVsQ3RybC4kcmVuZGVyKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJhbnNmb3JtZWRJbnB1dDtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxufSkoKTtcclxuXHJcblxyXG5cclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbi8qKlxyXG4gKiBDcmVhdGVkIGJ5IGRraWx0eSBvbiAxMC8wMy8yMDE4LlxyXG4gKi9cclxuLyoqXHJcbiAqIEBuZ2RvYyBNb2RlbCBmb3IgY3JlYXRpbmcgdGhlIHRocmVlIGxpc3RzIGJhc2VkIHRoZSBsZWFkIHR5cGVcclxuICovXHJcbihmdW5jdGlvbiAoKSB7XHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgnYWN0aXZpdHlGb3JtRmlsdGVyTW9kdWxlJywgWydocGZiQ29uc3RhbnRzJ10pO1xyXG5cclxufSkoKTtcclxuXHJcbihmdW5jdGlvbiAoKSB7XHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgnYWN0aXZpdHlGb3JtRmlsdGVyTW9kdWxlJylcclxuICAgICAgICAuZmFjdG9yeSgnQWN0aXZpdHlGb3JtRmlsdGVyU2VydmljZScsIGdldFNlcnZpY2UpO1xyXG5cclxuICAgIC8qIEBuZ0luamVjdCAqL1xyXG4gICAgZ2V0U2VydmljZS5pbmplY3QgPSBbXTtcclxuXHJcbiAgICBmdW5jdGlvbiBnZXRTZXJ2aWNlKCkge1xyXG4gICAgICAgIHZhciB2bSA9IHRoaXM7XHJcblxyXG4gICAgICAgIHZhciBzZXJ2aWNlID0ge1xyXG4gICAgICAgICAgICBnZXRQaGFybWFSQUxpc3Q6IF9nZXRQaGFybWFSQUxpc3QsXHJcbiAgICAgICAgICAgIGdldEJpb2xSQUxpc3Q6IF9nZXRCaW9sUkFMaXN0LFxyXG4gICAgICAgICAgICBnZXRDb25zdW1IZWFsdGhMaXN0OiBfZ2V0Q29uc3VtSGVhbHRoTGlzdCxcclxuICAgICAgICAgICAgZ2V0UG9zdE1hcmtldFJBTGlzdDogX2dldFBvc3RNYXJrZXRSQUxpc3RcclxuXHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4gc2VydmljZTtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQ3JlYXRlcyB0aGUgcGhhcm1hbGlzdCBiYXNlZCBvbiB0aGUgaW5jb21pbmluZyBnbG9iYWwgbGlzdFxyXG4gICAgICAgICAqIEBwYXJhbSByYUxpc3QgLSB0aGUgZnVsbCBsaXN0IG9mIHJlZ3VsYXRvcnkgYWN0aXZpdHkgdmFsdWVzXHJcbiAgICAgICAgICogQHJldHVybnMge0FycmF5fVxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZnVuY3Rpb24gX2dldFBoYXJtYVJBTGlzdChyYUxpc3Qpe1xyXG4gICAgICAgICAgICB2YXIgbmV3TGlzdD1bXTtcclxuICAgICAgICAgICAgZm9yKHZhciBpPTA7IGk8cmFMaXN0Lmxlbmd0aDtpKyspIHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaChyYUxpc3RbaV0uaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlICdCMDItMjAxNjAzMDEtMDAxJzogLy9BTkRTXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld0xpc3QucHVzaChyYUxpc3RbaV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlICdCMDItMjAxNjAzMDEtMDMxJzogLy9FVSBORFNcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3TGlzdC5wdXNoKHJhTGlzdFtpXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ0IwMi0yMDE2MDMwMS0wMzInOiAvL0VVIFNORFNcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3TGlzdC5wdXNoKHJhTGlzdFtpXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgY2FzZSAnQjAyLTIwMTYwMzAxLTAzOCc6IC8vTGV2ZWwgSUlJXHJcbiAgICAgICAgICAgICAgICAgICAgICAgbmV3TGlzdC5wdXNoKHJhTGlzdFtpXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ0IwMi0yMDE2MDMwMS0wNDYnOiAvL01QTkNcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3TGlzdC5wdXNoKHJhTGlzdFtpXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ0IwMi0yMDE2MDMwMS0wNDcnOiAvL01QTkRTXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld0xpc3QucHVzaChyYUxpc3RbaV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlICdCMDItMjAxNjAzMDEtMDQ5JzogLy9NUFNORFNcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3TGlzdC5wdXNoKHJhTGlzdFtpXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ0IwMi0yMDE2MDMwMS0wNTAnOiAvL05DXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld0xpc3QucHVzaChyYUxpc3RbaV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlICdCMDItMjAxNjAzMDEtMDUxJzogLy9ORFNcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3TGlzdC5wdXNoKHJhTGlzdFtpXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ0IwMi0yMDE2MDMwMS0wNjcnOiAvL1BBTkRcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3TGlzdC5wdXNoKHJhTGlzdFtpXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ0IwMi0yMDE2MDMwMS0wNjgnOiAvL1BCUkVSLUNTXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld0xpc3QucHVzaChyYUxpc3RbaV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlICdCMDItMjAxNjAzMDEtMDc1JzogLy9QUk5EU1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdMaXN0LnB1c2gocmFMaXN0W2ldKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnQjAyLTIwMTYwMzAxLTA3Nyc6IC8vUFJTTkRTXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld0xpc3QucHVzaChyYUxpc3RbaV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlICdCMDItMjAxNjAzMDEtMDc4JzogLy9QU1VSLUNcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3TGlzdC5wdXNoKHJhTGlzdFtpXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ0IwMi0yMDE2MDMwMS0wODInOiAvL1NBTkRTXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld0xpc3QucHVzaChyYUxpc3RbaV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlICdCMDItMjAxNjAzMDEtMDg0JzogLy9TTkRTXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld0xpc3QucHVzaChyYUxpc3RbaV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlICdCMDItMjAxNjAzMDEtMDg1JzogLy9TTkRTLUNcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3TGlzdC5wdXNoKHJhTGlzdFtpXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ0IwMi0yMDE2MDMwMS0wODgnOiAvL1VEUkFcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3TGlzdC5wdXNoKHJhTGlzdFtpXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgLyogY2FzZSAnQjAyLTIwMTYwMzAxLTA4OSc6IC8vWUJQUlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdMaXN0LnB1c2gocmFMaXN0W2ldKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7ICovXHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnQjAyLTIwMTYwMzAxLTAyOCc6IC8vRFNVUlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdMaXN0LnB1c2gocmFMaXN0W2ldKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnQjAyLTIwMTYwMzAxLTAxOCc6IC8vRElOQVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdMaXN0LnB1c2gocmFMaXN0W2ldKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnQjAyLTIwMTYwMzAxLTAyMCc6IC8vRElORFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdMaXN0LnB1c2gocmFMaXN0W2ldKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnQjAyLTIwMTYwMzAxLTAyMSc6IC8vRElORlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdMaXN0LnB1c2gocmFMaXN0W2ldKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnQjAyLTIwMTYwMzAxLTA0Myc6IC8vTVBESU5cclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3TGlzdC5wdXNoKHJhTGlzdFtpXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ0IwMi0yMDE2MDMwMS0wNzAnOiAvL1BEQ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdMaXN0LnB1c2gocmFMaXN0W2ldKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0vL2ZvclxyXG4gICAgICAgICAgICByZXR1cm4gbmV3TGlzdDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKipcclxuICAgICAgICAgKiBDcmVhdGVzIHRoZSBsaXN0IGlmIGh0ZSBSQSBsZWFkIGlzIGJpb2xvZ2ljYWxcclxuICAgICAgICAgKiBAcGFyYW0gcmFMaXN0IC10aGUgZnVsbCBsaXN0IG9mIHZhbHVlc1xyXG4gICAgICAgICAqIEByZXR1cm5zIHtBcnJheX1cclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGZ1bmN0aW9uIF9nZXRCaW9sUkFMaXN0KHJhTGlzdCl7XHJcbiAgICAgICAgICAgIHZhciBuZXdMaXN0PVtdO1xyXG4gICAgICAgICAgICBmb3IodmFyIGk9MDsgaTxyYUxpc3QubGVuZ3RoO2krKykge1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoKHJhTGlzdFtpXS5pZCkge1xyXG4gICAgICAgICAgICAgICAgICAvKiAgY2FzZSAnQjAyLTIwMTYwMzAxLTAwMSc6IC8vQU5EU1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdMaXN0LnB1c2gocmFMaXN0W2ldKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7ICovXHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnQjAyLTIwMTYwMzAxLTAzMSc6IC8vRVUgTkRTXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld0xpc3QucHVzaChyYUxpc3RbaV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlICdCMDItMjAxNjAzMDEtMDMyJzogLy9FVSBTTkRTXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld0xpc3QucHVzaChyYUxpc3RbaV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlICdCMDItMjAxNjAzMDEtMDM4JzogLy9MZXZlbCBJSUlcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3TGlzdC5wdXNoKHJhTGlzdFtpXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ0IwMi0yMDE2MDMwMS0wNDYnOiAvL01QTkNcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3TGlzdC5wdXNoKHJhTGlzdFtpXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ0IwMi0yMDE2MDMwMS0wNDcnOiAvL01QTkRTXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld0xpc3QucHVzaChyYUxpc3RbaV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlICdCMDItMjAxNjAzMDEtMDQ5JzogLy9NUFNORFNcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3TGlzdC5wdXNoKHJhTGlzdFtpXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ0IwMi0yMDE2MDMwMS0wNTAnOiAvL05DXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld0xpc3QucHVzaChyYUxpc3RbaV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ0IwMi0yMDE2MDMwMS0wNTEnOiAvL05EU1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdMaXN0LnB1c2gocmFMaXN0W2ldKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnQjAyLTIwMTYwMzAxLTA2Nyc6IC8vUEFORFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdMaXN0LnB1c2gocmFMaXN0W2ldKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnQjAyLTIwMTYwMzAxLTA2OCc6IC8vUEJSRVItQ1NcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3TGlzdC5wdXNoKHJhTGlzdFtpXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ0IwMi0yMDE2MDMwMS0wNzUnOiAvL1BSTkRTXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld0xpc3QucHVzaChyYUxpc3RbaV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlICdCMDItMjAxNjAzMDEtMDc3JzogLy9QUlNORFNcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3TGlzdC5wdXNoKHJhTGlzdFtpXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ0IwMi0yMDE2MDMwMS0wNzgnOiAvL1BTVVItQ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdMaXN0LnB1c2gocmFMaXN0W2ldKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgLyogICBjYXNlICdCMDItMjAxNjAzMDEtMDgyJzogLy9TQU5EU1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdMaXN0LnB1c2gocmFMaXN0W2ldKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7ICovXHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnQjAyLTIwMTYwMzAxLTA4NCc6IC8vU05EU1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdMaXN0LnB1c2gocmFMaXN0W2ldKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnQjAyLTIwMTYwMzAxLTA4NSc6IC8vU05EUy1DXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld0xpc3QucHVzaChyYUxpc3RbaV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlICdCMDItMjAxNjAzMDEtMDg4JzogLy9VRFJBXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld0xpc3QucHVzaChyYUxpc3RbaV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlICdCMDItMjAxNjAzMDEtMDg5JzogLy9ZQlBSXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld0xpc3QucHVzaChyYUxpc3RbaV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlICdCMDItMjAxNjAzMDEtMDI4JzogLy9EU1VSXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld0xpc3QucHVzaChyYUxpc3RbaV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlICdCMDItMjAxNjAzMDEtMDE5JzogLy9ESU5CXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld0xpc3QucHVzaChyYUxpc3RbaV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlICdCMDItMjAxNjAzMDEtMDQzJzogLy9NUERJTlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdMaXN0LnB1c2gocmFMaXN0W2ldKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnQjAyLTIwMTYwMzAxLTA3MSc6IC8vUERDLUJcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3TGlzdC5wdXNoKHJhTGlzdFtpXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9Ly9mb3JcclxuICAgICAgICAgICAgcmV0dXJuIG5ld0xpc3Q7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBBY3Rpdml0eSBMZWFkID0gcG9zdG1hcmtldCAgYWN0aXZpdHkgbGlzdFxyXG4gICAgICAgICAqIEBwYXJhbSByYUxpc3RcclxuICAgICAgICAgKiBAcmV0dXJucyB7QXJyYXl9XHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBmdW5jdGlvbiBfZ2V0UG9zdE1hcmtldFJBTGlzdChyYUxpc3Qpe1xyXG4gICAgICAgICAgICB2YXIgbmV3TGlzdD1bXTtcclxuICAgICAgICAgICAgZm9yKHZhciBpPTA7IGk8cmFMaXN0Lmxlbmd0aDtpKyspIHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaChyYUxpc3RbaV0uaWQpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnQjAyLTIwMTYwMzAxLTA2OSc6IC8vUEJSRVItUFZcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3TGlzdC5wdXNoKHJhTGlzdFtpXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ0IwMi0yMDE2MDMwMS0wNzknOiAvL1BTVVItUFZcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3TGlzdC5wdXNoKHJhTGlzdFtpXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ0IwMi0yMDE2MDMwMS0wODAnOiAvL1JNUC1QVlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdMaXN0LnB1c2gocmFMaXN0W2ldKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnQjAyLTIwMTYwMzAxLTA4Nyc6IC8vVUQtUFZcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3TGlzdC5wdXNoKHJhTGlzdFtpXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9Ly9mb3JcclxuICAgICAgICAgICAgcmV0dXJuIG5ld0xpc3Q7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIENyZWF0ZXMgdGhlIENvbnN1bUhlYWx0aExpc3QgYmFzZWQgb24gdGhlIGluY29taW5pbmcgZ2xvYmFsIGxpc3RcclxuICAgICAgICAgKiBAcGFyYW0gcmFMaXN0IC0gdGhlIGZ1bGwgbGlzdCBvZiByZWd1bGF0b3J5IGFjdGl2aXR5IHZhbHVlc1xyXG4gICAgICAgICAqIEByZXR1cm5zIHtBcnJheX1cclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGZ1bmN0aW9uIF9nZXRDb25zdW1IZWFsdGhMaXN0KHJhTGlzdCl7XHJcbiAgICAgICAgICAgIHZhciBuZXdMaXN0PVtdO1xyXG4gICAgICAgICAgICBmb3IodmFyIGk9MDsgaTxyYUxpc3QubGVuZ3RoO2krKykge1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoKHJhTGlzdFtpXS5pZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ0IwMi0yMDE2MDMwMS0wMDEnOiAvL0FORFNcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3TGlzdC5wdXNoKHJhTGlzdFtpXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ0IwMi0yMDE2MDMwMS0wMzEnOiAvL0VVIE5EU1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdMaXN0LnB1c2gocmFMaXN0W2ldKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnQjAyLTIwMTYwMzAxLTAzMic6IC8vRVUgU05EU1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdMaXN0LnB1c2gocmFMaXN0W2ldKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnQjAyLTIwMTYwMzAxLTAzOCc6IC8vTGV2ZWwgSUlJXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld0xpc3QucHVzaChyYUxpc3RbaV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlICdCMDItMjAxNjAzMDEtMDQ2JzogLy9NUE5DXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld0xpc3QucHVzaChyYUxpc3RbaV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlICdCMDItMjAxNjAzMDEtMDQ3JzogLy9NUE5EU1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdMaXN0LnB1c2gocmFMaXN0W2ldKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnQjAyLTIwMTYwMzAxLTA0OSc6IC8vTVBTTkRTXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld0xpc3QucHVzaChyYUxpc3RbaV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlICdCMDItMjAxNjAzMDEtMDUwJzogLy9OQ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdMaXN0LnB1c2gocmFMaXN0W2ldKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnQjAyLTIwMTYwMzAxLTA1MSc6IC8vTkRTXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld0xpc3QucHVzaChyYUxpc3RbaV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlICdCMDItMjAxNjAzMDEtMDY3JzogLy9QQU5EXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld0xpc3QucHVzaChyYUxpc3RbaV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlICdCMDItMjAxNjAzMDEtMDY4JzogLy9QQlJFUi1DU1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdMaXN0LnB1c2gocmFMaXN0W2ldKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnQjAyLTIwMTYwMzAxLTA3NSc6IC8vUFJORFNcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3TGlzdC5wdXNoKHJhTGlzdFtpXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ0IwMi0yMDE2MDMwMS0wNzcnOiAvL1BSU05EU1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdMaXN0LnB1c2gocmFMaXN0W2ldKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnQjAyLTIwMTYwMzAxLTA3OCc6IC8vUFNVUi1DXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld0xpc3QucHVzaChyYUxpc3RbaV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlICdCMDItMjAxNjAzMDEtMDgyJzogLy9TQU5EU1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdMaXN0LnB1c2gocmFMaXN0W2ldKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnQjAyLTIwMTYwMzAxLTA4NCc6IC8vU05EU1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdMaXN0LnB1c2gocmFMaXN0W2ldKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnQjAyLTIwMTYwMzAxLTA4NSc6IC8vU05EUy1DXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld0xpc3QucHVzaChyYUxpc3RbaV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlICdCMDItMjAxNjAzMDEtMDg4JzogLy9VRFJBXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld0xpc3QucHVzaChyYUxpc3RbaV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAvKiBjYXNlICdCMDItMjAxNjAzMDEtMDg5JzogLy9ZQlBSXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICBuZXdMaXN0LnB1c2gocmFMaXN0W2ldKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOyAqL1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ0IwMi0yMDE2MDMwMS0wMjgnOiAvL0RTVVJcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3TGlzdC5wdXNoKHJhTGlzdFtpXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ0IwMi0yMDE2MDMwMS0wMTgnOiAvL0RJTkFcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3TGlzdC5wdXNoKHJhTGlzdFtpXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ0IwMi0yMDE2MDMwMS0wMjAnOiAvL0RJTkRcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3TGlzdC5wdXNoKHJhTGlzdFtpXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ0IwMi0yMDE2MDMwMS0wMjEnOiAvL0RJTkZcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3TGlzdC5wdXNoKHJhTGlzdFtpXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ0IwMi0yMDE2MDMwMS0wNDMnOiAvL01QRElOXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld0xpc3QucHVzaChyYUxpc3RbaV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlICdCMDItMjAxNjAzMDEtMDcwJzogLy9QRENcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3TGlzdC5wdXNoKHJhTGlzdFtpXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9Ly9mb3JcclxuICAgICAgICAgICAgcmV0dXJuIG5ld0xpc3Q7XHJcbiAgICAgICAgfVxyXG5cclxuICAgIH0vL2VuZCBzZXJ2aWNlIGZ1bmN0aW9uXHJcbn0pKCk7IiwiLyoqXHJcbiAqIENyZWF0ZWQgYnkgaGN1c2VyIG9uIDA3LzA2LzIwMTYuXHJcbiAqL1xyXG4oZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKCdocGZiQ29uc3RhbnRzJywgW10pO1xyXG5cclxuICAgIGFuZ3VsYXIubW9kdWxlKCdocGZiQ29uc3RhbnRzJylcclxuICAgICAgICAuY29uc3RhbnQoJ1NPRlRXQVJFX1ZFUlNJT04nLCcxLjMuMCcpXHJcbiAgICAgICAgLmNvbnN0YW50KCdDQU5BREEnLCdDQU4nKVxyXG4gICAgICAgIC5jb25zdGFudCgnT1RIRVInLCAnT1RIRVInKVxyXG4gICAgICAgIC5jb25zdGFudCgnWUVTJywgJ1knKVxyXG4gICAgICAgIC5jb25zdGFudCgnTk8nLCAnTicpXHJcbiAgICAgICAgLmNvbnN0YW50KCdVU0EnLCdVU0EnKVxyXG4gICAgICAgIC5jb25zdGFudChcIlVOS05PV05cIixcIlVOS05PV05cIilcclxuICAgICAgICAuY29uc3RhbnQoXCJORVdcIixcIk5ld1wiKVxyXG4gICAgICAgIC5jb25zdGFudChcIkVYSVNUSU5HXCIsXCJFeGlzdGluZ1wiKVxyXG4gICAgICAgIC5jb25zdGFudChcIkVOR0xJU0hcIixcImVuXCIpXHJcbiAgICAgICAgLmNvbnN0YW50KFwiRlJFTkNIXCIsXCJmclwiKVxyXG4gICAgICAgIC5jb25zdGFudChcIk5FV19UWVBFXCIsXCJORVdcIilcclxuICAgICAgICAuY29uc3RhbnQoXCJBUFBST1ZFRF9UWVBFXCIsXCJGSU5BTFwiKVxyXG4gICAgICAgIC5jb25zdGFudChcIkRFUFJFQ0FURURfQVBQUk9WRURfVFlQRVwiLFwiQVBQUk9WRURcIikgLy9jaGFuZ2UgZnJvbSB0aGUgcGlsb3QgTWFyY2ggMjAsMjAxOC4gTmVlZGVkIGZvciBiYWNrd2FyZHMgY29tcGF0LlxyXG4gICAgICAgIC5jb25zdGFudChcIkFNRU5EX1RZUEVcIixcIkFNRU5EXCIpXHJcbiAgICAgICAgLmNvbnN0YW50KFwiSU5URVJOQUxfVFlQRVwiLFwiSU5UXCIpXHJcbiAgICAgICAgLmNvbnN0YW50KFwiRVhURVJOQUxfVFlQRVwiLFwiRVhUXCIpXHJcbiAgICAgICAgLmNvbnN0YW50KFwiUEhBUk1BX1RZUEVcIiwgXCJQSEFSTUFcIilcclxuICAgICAgICAuY29uc3RhbnQoXCJSRUxBVElWRV9GT0xERVJfREFUQVwiLFwiLi4vZGF0YS9cIilcclxuICAgICAgICAuY29uc3RhbnQoXCJDU1BfWFNMXCIsXCJDU1BfRW5yb2xtZW50LnhzbFwiKVxyXG4gICAgICAgIC5jb25zdGFudChcIkhDU0NcIixcImhjc2NcIilcclxuICAgICAgICAuY29uc3RhbnQoXCJYTUxcIixcInhtbFwiKVxyXG4gICAgICAgIC5jb25zdGFudChcIkFEVkFOQ0VfRkVFX1BBWU1FTlRfRU5cIixcImh0dHBzOi8vd3d3LmNhbmFkYS5jYS9jb250ZW50L2RhbS9oYy1zYy9taWdyYXRpb24vaGMtc2MvZGhwLW1wcy9hbHRfZm9ybWF0cy9wZGYvcHJvZHBoYXJtYS9hcHBsaWMtZGVtYW5kZS9mb3JtL2Fkdi1wYS1hdjItZW5nLnBkZlwiKVxyXG4gICAgICAgIC5jb25zdGFudChcIkFEVkFOQ0VfRkVFX1BBWU1FTlRfRlJcIixcImh0dHBzOi8vd3d3LmNhbmFkYS5jYS9jb250ZW50L2RhbS9oYy1zYy9taWdyYXRpb24vaGMtc2MvZGhwLW1wcy9hbHRfZm9ybWF0cy9wZGYvcHJvZHBoYXJtYS9hcHBsaWMtZGVtYW5kZS9mb3JtL2Fkdi1wYS1hdjItZnJhLnBkZlwiKTtcclxufSkoKTsiLCIvKipcclxuICogQ3JlYXRlZCBieSBka2lsdHkgb24gMDcvMDYvMjAxNi5cclxuICpcclxuICovXHJcblxyXG4oZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ2ZpbHRlckxpc3RzJywgWydocGZiQ29uc3RhbnRzJ10pO1xyXG59KSgpO1xyXG5cclxuKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgnZmlsdGVyTGlzdHMnKVxyXG4gICAgICAgIC5maWx0ZXIoJ29yZGVyQnlUcmFuc2xhdGVkQ291bnRyeScsIG9yZGVyQnlUcmFuc2xhdGVkQ291bnRyeSlcclxuICAgICAgICAuZmlsdGVyKCdvcmRlckJ5VHJhbnNsYXRlZCcsIG9yZGVyQnlUcmFuc2xhdGVkKVxyXG4gICAgICAgIC5maWx0ZXIoJ29yZGVyQnlUcmFuc2xhdGVkT3RoZXJGaXJzdCcsIG9yZGVyQnlUcmFuc2xhdGVkT3RoZXJGaXJzdClcclxuICAgICAgICAuZmlsdGVyKCdvcmRlckJ5Q291bnRyeUFuZExhYmVsJywgb3JkZXJCeVRyYW5zbGF0ZWRDb3VudHJ5QW5kTGFiZWwpXHJcbiAgICAgICAgLmZpbHRlcignb3JkZXJCeUxvY2FsZScsX29yZGVyQnlMb2NhbGUpXHJcbiAgICAgICAgLmZpbHRlcignZmluZENvdW50cnlPYmplY3QnLCBmaW5kQ291bnRyeU9iailcclxuICAgICAgICAuZmlsdGVyKCdmaW5kTGlzdEl0ZW1CeUlkJywgX2ZpbmRCeUlkKVxyXG4gICAgICAgIC5maWx0ZXIoJ3NlcXVlbmNlT3JkZXJEZXNjZW5kaW5nJywgc2VxdWVuY2VPcmRlckJ5KTtcclxuXHJcbiAgICBvcmRlckJ5VHJhbnNsYXRlZENvdW50cnkuJGluamVjdCA9IFsnJHRyYW5zbGF0ZScsICckZmlsdGVyJywgJ0NBTkFEQScsICdVU0EnXTtcclxuICAgIG9yZGVyQnlUcmFuc2xhdGVkLiRpbmplY3QgPSBbJyR0cmFuc2xhdGUnLCAnJGZpbHRlciddO1xyXG4gICAgb3JkZXJCeVRyYW5zbGF0ZWRPdGhlckZpcnN0LiRpbmplY3QgPSBbJyR0cmFuc2xhdGUnLCAnJGZpbHRlcicsICdPVEhFUiddO1xyXG4gICAgX2ZpbmRCeUlkLiRpbmplY3QgPSBbJyRmaWx0ZXInXTtcclxuXHJcbiAgICBmdW5jdGlvbiBvcmRlckJ5VHJhbnNsYXRlZENvdW50cnkoJHRyYW5zbGF0ZSwgJGZpbHRlciwgQ0FOQURBLCBVU0EpIHtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGFycmF5LCBvYmpLZXkpIHtcclxuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IFtdO1xyXG4gICAgICAgICAgICB2YXIgdHJhbnNsYXRlZCA9IFtdO1xyXG4gICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goYXJyYXksIGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgdHJhbnNsYXRlZC5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICBrZXk6IHZhbHVlLFxyXG4gICAgICAgICAgICAgICAgICAgIGxhYmVsOiAkdHJhbnNsYXRlLmluc3RhbnQodmFsdWUpXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKENBTkFEQSk7XHJcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKFVTQSk7XHJcbiAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaCgkZmlsdGVyKCdvcmRlckJ5JykodHJhbnNsYXRlZCwgJ2xhYmVsJyksIGZ1bmN0aW9uIChzb3J0ZWRPYmplY3QpIHtcclxuICAgICAgICAgICAgICAgIGlmIChzb3J0ZWRPYmplY3Qua2V5ICE9PSBDQU5BREEgJiYgc29ydGVkT2JqZWN0LmtleSAhPT0gVVNBKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goc29ydGVkT2JqZWN0LmtleSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBPcmRlcnMgY291bnRyeSBsaXN0IGJ5IHRyYW5zbGF0ZWQgdmFsdWUgYW5kIGNyZWF0ZXMgYSBsaXN0IG9mIHNhdmVkIGFuZCBkaXNwbGF5ZWQgdmFsdWVcclxuICAgICAqIEBwYXJhbSAkdHJhbnNsYXRlXHJcbiAgICAgKiBAcGFyYW0gJGZpbHRlclxyXG4gICAgICogQHBhcmFtIENBTkFEQVxyXG4gICAgICogQHBhcmFtIFVTQVxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBvcmRlckJ5VHJhbnNsYXRlZENvdW50cnlBbmRMYWJlbCgkdHJhbnNsYXRlLCAkZmlsdGVyLCBDQU5BREEsIFVTQSkge1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoYXJyYXkpIHtcclxuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IFtdO1xyXG4gICAgICAgICAgICB2YXIgdHJhbnNsYXRlZCA9IFtdO1xyXG4gICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goYXJyYXksIGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgdHJhbnNsYXRlZC5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICBrZXk6IHZhbHVlLFxyXG4gICAgICAgICAgICAgICAgICAgIGxhYmVsOiAkdHJhbnNsYXRlLmluc3RhbnQodmFsdWUpXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAvL3RvcCBvZiB0aGUgbGlzdFxyXG4gICAgICAgICAgICByZXN1bHQucHVzaCh7a2V5OiBDQU5BREEsIGxhYmVsOiAkdHJhbnNsYXRlLmluc3RhbnQoQ0FOQURBKX0pO1xyXG4gICAgICAgICAgICByZXN1bHQucHVzaCh7a2V5OiBVU0EsIGxhYmVsOiAkdHJhbnNsYXRlLmluc3RhbnQoVVNBKX0pO1xyXG4gICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goJGZpbHRlcignb3JkZXJCeScpKHRyYW5zbGF0ZWQsICdsYWJlbCcpLCBmdW5jdGlvbiAoc29ydGVkT2JqZWN0KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoc29ydGVkT2JqZWN0LmtleSAhPT0gQ0FOQURBICYmIHNvcnRlZE9iamVjdC5rZXkgIT09IFVTQSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHNvcnRlZE9iamVjdCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gZmluZENvdW50cnlPYmooKSB7XHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhcnJheSwgdGFyZ2V0S2V5KSB7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyYXkubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGlmIChhcnJheVtpXS5rZXkgPT09IHRhcmdldEtleSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoYXJyYXlbaV0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsOyAvL25vdCBmb3VuZFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG5cclxuICAgIGZ1bmN0aW9uIG9yZGVyQnlUcmFuc2xhdGVkKCR0cmFuc2xhdGUsICRmaWx0ZXIpIHtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGFycmF5KSB7XHJcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSBbXTtcclxuICAgICAgICAgICAgdmFyIHRyYW5zbGF0ZWQgPSBbXTtcclxuICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKGFycmF5LCBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIHRyYW5zbGF0ZWQucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAga2V5OiB2YWx1ZSxcclxuICAgICAgICAgICAgICAgICAgICBsYWJlbDogJHRyYW5zbGF0ZS5pbnN0YW50KHZhbHVlKVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goJGZpbHRlcignb3JkZXJCeScpKHRyYW5zbGF0ZWQsICdsYWJlbCcpLCBmdW5jdGlvbiAoc29ydGVkT2JqZWN0KSB7XHJcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaChzb3J0ZWRPYmplY3Qua2V5KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBzZXF1ZW5jZU9yZGVyQnkoJGZpbHRlcikge1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoYXJyYXkpIHtcclxuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IFtdO1xyXG4gICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goJGZpbHRlcignb3JkZXJCeScpKGFycmF5LCAnc2VxdWVuY2UnLCB0cnVlKSwgZnVuY3Rpb24gKHNvcnRlZE9iamVjdCkge1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goc29ydGVkT2JqZWN0KTtcclxuXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgLypcclxuICAgICBPcmRlcnMgdmFsdWVzXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIG9yZGVyQnlUcmFuc2xhdGVkT3RoZXJGaXJzdCgkdHJhbnNsYXRlLCAkZmlsdGVyLCBPVEhFUikge1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoYXJyYXkpIHtcclxuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IFtdO1xyXG4gICAgICAgICAgICB2YXIgdHJhbnNsYXRlZCA9IFtdO1xyXG4gICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goYXJyYXksIGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgdHJhbnNsYXRlZC5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICBrZXk6IHZhbHVlLFxyXG4gICAgICAgICAgICAgICAgICAgIGxhYmVsOiAkdHJhbnNsYXRlLmluc3RhbnQodmFsdWUpXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKE9USEVSKTtcclxuICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKCRmaWx0ZXIoJ29yZGVyQnknKSh0cmFuc2xhdGVkLCAnbGFiZWwnKSwgZnVuY3Rpb24gKHNvcnRlZE9iamVjdCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHNvcnRlZE9iamVjdC5rZXkgIT09IE9USEVSKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goc29ydGVkT2JqZWN0LmtleSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTb3J0cyBieSBsb2NhbGUgc3BlY2lmaWVkIGJ5IGFuZ3VsYXIgdHJhbnNsYXRlXHJcbiAgICAgKiBAcGFyYW0gJHRyYW5zbGF0ZVxyXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufVxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gX29yZGVyQnlMb2NhbGUoKSB7XHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChpdGVtcyxsYW5nKSB7XHJcblxyXG4gICAgICAgICAgICBpdGVtcy5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYVtsYW5nXS5sb2NhbGVDb21wYXJlKGJbbGFuZ10sbGFuZyk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICByZXR1cm4gaXRlbXM7XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEZpbmRzIGFuIGV4YWN0IG1hdGNoIGJ5IGlkLiBVc2luZyBmaWx0ZXIgZm9yIHRoZSBpbml0aWFsIHNlYXJjaCBhcyBzZWFyY2hKc29uIGNhblxyXG4gICAgICogY29udGFpbiBtdWx0aXBsZSBzZWFyY2ggY3JpdGVyaWEhLCB0aGVuIGZvciBtdWx0aXBsZSBtYXRjaGVzLCBsb29raW5nIGZvciBleGFjdCBpZFxyXG4gICAgICogQHBhcmFtICRmaWx0ZXJcclxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn1cclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIF9maW5kQnlJZCgkZmlsdGVyKSB7XHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhcnJheSwgc2VhcmNoSnNvbikge1xyXG4gICAgICAgICAgICB2YXIgaW5pdGlhbFJlc3VsdCA9ICRmaWx0ZXIoJ2ZpbHRlcicpKGFycmF5LCBzZWFyY2hKc29uKTtcclxuICAgICAgICAgICAgaWYgKCFpbml0aWFsUmVzdWx0KSByZXR1cm4gbnVsbDsgLy9zaG91bGQgbmV2ZXIgaGFwcGVuXHJcbiAgICAgICAgICAgIGlmIChpbml0aWFsUmVzdWx0Lmxlbmd0aCA9PT0gMSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGluaXRpYWxSZXN1bHRbMF07XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGluaXRpYWxSZXN1bHQubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaW5pdGlhbFJlc3VsdFtpXS5pZCA9PT0gc2VhcmNoSnNvbi5pZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaW5pdGlhbFJlc3VsdFtpXTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICB9KSgpOyIsIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IGRraWx0eSBvbiA2LzQvMjAxNi5cclxuICovXHJcblxyXG4vKipcclxuICogQG5nZG9jIG1vZHVsZSBkZWNsYXJhdGlvbiBmb3IgZGF0YWxpc3RzXHJcbiAqL1xyXG4oZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKCdkYXRhTGlzdHMnLCBbJ2hwZmJDb25zdGFudHMnXSk7XHJcblxyXG59KSgpO1xyXG5cclxuLyoqXHJcbiAqIGdldENvdW50cnlBbmRQcm92aW5jZXMgc2VydmljZXNcclxuICogUmV0dXJucyBDYW5hZGEgb3IgVVMgY29uZGVzLCBjYW5hZGEgcHJvdmluY2VzLCB1cyBzdGF0ZXNcclxuICovXHJcbihmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ2RhdGFMaXN0cycpXHJcbiAgICAgICAgLmZhY3RvcnkoJ2dldENvdW50cnlBbmRQcm92aW5jZXMnLCBnZXRTZXJ2aWNlKTtcclxuXHJcbiAgICAvKiBAbmdJbmplY3QgKi9cclxuICAgIGdldFNlcnZpY2UuaW5qZWN0ID0gWydVTktOT1dOJ107XHJcbiAgICBmdW5jdGlvbiBnZXRTZXJ2aWNlKFVOS05PV04pIHtcclxuICAgICAgICB2YXIgdm0gPSB0aGlzO1xyXG4gICAgICAgIHZtLmNvdW50cnlMaXN0ID0gW107XHJcbiAgICAgICAgdmFyIHNlcnZpY2UgPSB7XHJcbiAgICAgICAgICAgIGdldENvdW50cmllczogZ2V0Q291bnRyeVZhbHVlc0FycmF5LFxyXG4gICAgICAgICAgICBnZXRQcm92aW5jZXM6IGdldFByb3ZpbmNlVmFsdWVzQXJyYXksXHJcbiAgICAgICAgICAgIGdldFVTU3RhdGVzOiBnZXRVU1N0YXRlc1ZhbHVlQXJyYXksXHJcbiAgICAgICAgICAgIGNyZWF0ZUNvdW50cnlMaXN0OiBfY3JlYXRlQ291bnRyeUFycmF5LFxyXG4gICAgICAgICAgICBnZXRVbmtub3duQ291bnRyeVJlY29yZDogX2dldFVua25vd25Db3VudHJ5UmVjXHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4gc2VydmljZTtcclxuXHJcbiAgICAgICAgLy8vLy8vLy8vLy8vLy8vL1xyXG5cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gX2NyZWF0ZUNvdW50cnlBcnJheSh0cmFuc2xhdGVKc29uKSB7XHJcbiAgICAgICAgICAgIHZtLmNvdW50cnlMaXN0ID0gdHJhbnNsYXRlSnNvbjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIF9nZXRVbmtub3duQ291bnRyeVJlYygpIHtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIFwiaWRcIjogVU5LTk9XTixcclxuICAgICAgICAgICAgICAgIFwiZW5cIjogXCJVbmtub3duXCIsXHJcbiAgICAgICAgICAgICAgICBcImZyXCI6IFwiSW5jb25udVwiXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy90b2RvIHdoeSBpcyB0aGlzIGxpc3RlZCB0d2ljZT9cclxuICAgICAgICBmdW5jdGlvbiBnZXRDb3VudHJ5VmFsdWVzQXJyYXkoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB2bS5jb3VudHJ5TGlzdDtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICBmdW5jdGlvbiBnZXRQcm92aW5jZVZhbHVlc0FycmF5KCkge1xyXG4gICAgICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICAgICAgW1xyXG4gICAgICAgICAgICAgICAgICAgICdBQicsXHJcbiAgICAgICAgICAgICAgICAgICAgJ0JDJyxcclxuICAgICAgICAgICAgICAgICAgICAnTUInLFxyXG4gICAgICAgICAgICAgICAgICAgICdOQicsXHJcbiAgICAgICAgICAgICAgICAgICAgJ05MJyxcclxuICAgICAgICAgICAgICAgICAgICAnTlQnLFxyXG4gICAgICAgICAgICAgICAgICAgICdOUycsXHJcbiAgICAgICAgICAgICAgICAgICAgJ05VJyxcclxuICAgICAgICAgICAgICAgICAgICAnT04nLFxyXG4gICAgICAgICAgICAgICAgICAgICdQRScsXHJcbiAgICAgICAgICAgICAgICAgICAgJ1FDJyxcclxuICAgICAgICAgICAgICAgICAgICAnU0snLFxyXG4gICAgICAgICAgICAgICAgICAgICdZVCdcclxuICAgICAgICAgICAgICAgIF1cclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGdldFVTU3RhdGVzVmFsdWVBcnJheSgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgICAgIFtcclxuICAgICAgICAgICAgICAgICAgICAnQUwnLFxyXG4gICAgICAgICAgICAgICAgICAgICdBSycsXHJcbiAgICAgICAgICAgICAgICAgICAgJ0FaJyxcclxuICAgICAgICAgICAgICAgICAgICAnQVInLFxyXG4gICAgICAgICAgICAgICAgICAgICdDQScsXHJcbiAgICAgICAgICAgICAgICAgICAgJ0NPJyxcclxuICAgICAgICAgICAgICAgICAgICAnQ1QnLFxyXG4gICAgICAgICAgICAgICAgICAgICdERScsXHJcbiAgICAgICAgICAgICAgICAgICAgJ0RDJyxcclxuICAgICAgICAgICAgICAgICAgICAnRkwnLFxyXG4gICAgICAgICAgICAgICAgICAgICdHQScsXHJcbiAgICAgICAgICAgICAgICAgICAgJ0hJJyxcclxuICAgICAgICAgICAgICAgICAgICAnSUQnLFxyXG4gICAgICAgICAgICAgICAgICAgICdJTCcsXHJcbiAgICAgICAgICAgICAgICAgICAgJ0lOJyxcclxuICAgICAgICAgICAgICAgICAgICAnSUEnLFxyXG4gICAgICAgICAgICAgICAgICAgICdLUycsXHJcbiAgICAgICAgICAgICAgICAgICAgJ0tZJyxcclxuICAgICAgICAgICAgICAgICAgICAnTEEnLFxyXG4gICAgICAgICAgICAgICAgICAgICdNRScsXHJcbiAgICAgICAgICAgICAgICAgICAgJ01EJyxcclxuICAgICAgICAgICAgICAgICAgICAnTUEnLFxyXG4gICAgICAgICAgICAgICAgICAgICdNSScsXHJcbiAgICAgICAgICAgICAgICAgICAgJ01OJyxcclxuICAgICAgICAgICAgICAgICAgICAnTVMnLFxyXG4gICAgICAgICAgICAgICAgICAgICdNTycsXHJcbiAgICAgICAgICAgICAgICAgICAgJ01UJyxcclxuICAgICAgICAgICAgICAgICAgICAnTkUnLFxyXG4gICAgICAgICAgICAgICAgICAgICdOVicsXHJcbiAgICAgICAgICAgICAgICAgICAgJ05IJyxcclxuICAgICAgICAgICAgICAgICAgICAnTkonLFxyXG4gICAgICAgICAgICAgICAgICAgICdOTScsXHJcbiAgICAgICAgICAgICAgICAgICAgJ05ZJyxcclxuICAgICAgICAgICAgICAgICAgICAnTkMnLFxyXG4gICAgICAgICAgICAgICAgICAgICdORCcsXHJcbiAgICAgICAgICAgICAgICAgICAgJ09IJyxcclxuICAgICAgICAgICAgICAgICAgICAnT0snLFxyXG4gICAgICAgICAgICAgICAgICAgICdPUicsXHJcbiAgICAgICAgICAgICAgICAgICAgJ1BBJyxcclxuICAgICAgICAgICAgICAgICAgICAnUkknLFxyXG4gICAgICAgICAgICAgICAgICAgICdTQycsXHJcbiAgICAgICAgICAgICAgICAgICAgJ1NEJyxcclxuICAgICAgICAgICAgICAgICAgICAnVE4nLFxyXG4gICAgICAgICAgICAgICAgICAgICdUWCcsXHJcbiAgICAgICAgICAgICAgICAgICAgJ1VUJyxcclxuICAgICAgICAgICAgICAgICAgICAnVlQnLFxyXG4gICAgICAgICAgICAgICAgICAgICdWQScsXHJcbiAgICAgICAgICAgICAgICAgICAgJ1dBJyxcclxuICAgICAgICAgICAgICAgICAgICAnV1YnLFxyXG4gICAgICAgICAgICAgICAgICAgICdXSScsXHJcbiAgICAgICAgICAgICAgICAgICAgJ1dZJ1xyXG4gICAgICAgICAgICAgICAgXSk7XHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICB9XHJcblxyXG59KSgpO1xyXG5cclxuKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgnZGF0YUxpc3RzJylcclxuICAgICAgICAuZmFjdG9yeSgnZ2V0Q29udGFjdExpc3RzJywgZ2V0U2FsU2VydmljZSk7IC8vdG9kbyByZW5hbWUgc2VydmljZVxyXG5cclxuICAgIC8qIEBuZ0luamVjdCAqL1xyXG4gICAgZ2V0U2FsU2VydmljZS4kaW5qZWN0ID0gWyckZmlsdGVyJywgJyRxJywgJyRodHRwJywgJyR0cmFuc2xhdGUnLCAnT1RIRVInLCAnRlJFTkNIJywnUkVMQVRJVkVfRk9MREVSX0RBVEEnXTtcclxuICAgIGZ1bmN0aW9uIGdldFNhbFNlcnZpY2UoJGZpbHRlciwgJHEsICRodHRwLCR0cmFuc2xhdGUsIE9USEVSLCBGUkVOQ0gsUkVMQVRJVkVfRk9MREVSX0RBVEEpIHtcclxuICAgICAgICB2YXIgdm0gPSB0aGlzO1xyXG4gICAgICAgIHZtLmludGVybmFsQ29udGFjdHMgPSBbXTtcclxuICAgICAgICB2bS5hZG1pblN1YlR5cGVBcnJheSA9IFtdO1xyXG4gICAgICAgIHZhciBzZXJ2aWNlID0ge1xyXG4gICAgICAgICAgICBnZXRTYWx1dGF0aW9uTGlzdDogZ2V0U2FsVmFsdWVzQXJyYXksXHJcbiAgICAgICAgICAgIGdldExhbmd1YWdlczogZ2V0TGFuZ3VhZ2VzVmFsdWVzQXJyYXksIC8vVE9ETyBtYWtlIGNvbnN0YW50c1xyXG4gICAgICAgICAgICBjcmVhdGVJbnRlcm5hbENvbnRhY3RzOiBfY3JlYXRlSW50ZXJuYWxDb250YWN0cyxcclxuICAgICAgICAgICAgZ2V0SW50ZXJuYWxDb250YWN0czogX2dldEludGVybmFsQ29udGFjdHMsXHJcbiAgICAgICAgICAgIGdldEludGVybmFsQ29udGFjdHNXaXRob3V0T3RoZXI6IF9nZXRJbnRlcm5hbENvbnRhY3RzV2l0aG91dE90aGVyLFxyXG4gICAgICAgICAgICBnZXRBZG1pblN1YlR5cGU6IF9nZXRBZG1pblN1YlR5cGVcclxuICAgICAgICB9O1xyXG4gICAgICAgIHJldHVybiBzZXJ2aWNlO1xyXG5cclxuICAgICAgICAvLy8vLy8vLy8vLy8vLy8vXHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGdldFNhbFZhbHVlc0FycmF5KCkge1xyXG4gICAgICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICAgICAgW1xyXG4gICAgICAgICAgICAgICAgICAgICdTQUxVVF9EUicsXHJcbiAgICAgICAgICAgICAgICAgICAgJ1NBTFVUX01SJyxcclxuICAgICAgICAgICAgICAgICAgICAnU0FMVVRfTVJTJyxcclxuICAgICAgICAgICAgICAgICAgICAnU0FMVVRfTVMnXHJcbiAgICAgICAgICAgICAgICBdKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGdldExhbmd1YWdlc1ZhbHVlc0FycmF5KCkge1xyXG4gICAgICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICAgICAgW1xyXG4gICAgICAgICAgICAgICAgICAgIFwiZW5cIixcclxuICAgICAgICAgICAgICAgICAgICBcImZyXCJcclxuICAgICAgICAgICAgICAgIF0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKiBMb2FkcyBJbnRlcm5hbCBjb250YWN0cyBmcm9tIGEgZGF0YWZpbGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBmdW5jdGlvbiBfY3JlYXRlSW50ZXJuYWxDb250YWN0cygpIHtcclxuICAgICAgICAgICAgdmFyIGRlZmVycmVkID0gJHEuZGVmZXIoKTtcclxuICAgICAgICAgICAgdmFyIGNvbnRhY3RzVXJsID0gUkVMQVRJVkVfRk9MREVSX0RBVEErXCJpbnRlcm5hbENvbnRhY3RzLmpzb25cIjtcclxuICAgICAgICAgICAgaWYgKCF2bS5pbnRlcm5hbENvbnRhY3RzIHx8IHZtLmludGVybmFsQ29udGFjdHMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAkaHR0cC5nZXQoY29udGFjdHNVcmwpXHJcbiAgICAgICAgICAgICAgICAgICAgLnN1Y2Nlc3MoZnVuY3Rpb24gKGRhdGEsIHN0YXR1cywgaGVhZGVycywgY29uZmlnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuZXdMaXN0ID0gX2NyZWF0ZVNvcnRlZEFycmF5KGRhdGEsICdlbicpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbGFuZyA9ICR0cmFuc2xhdGUucHJvcG9zZWRMYW5ndWFnZSgpIHx8ICR0cmFuc2xhdGUudXNlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vdGhpcyBpcyBhIGJpdCBvZiBhIGhhY2ssIGJ1dCBzYXZlcyB1bmVjZXNzYXJ5IHNwYWNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvdGhlclJlYyA9IHtcImlkXCI6IE9USEVSLCBcImVuXCI6IFwiT3RoZXJcIn07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsYW5nID09PSBGUkVOQ0gpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG90aGVyUmVjLmVuID0gXCJBdXRyZVwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld0xpc3QudW5zaGlmdChvdGhlclJlYyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZtLmludGVybmFsQ29udGFjdHMgPSBuZXdMaXN0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKG5ld0xpc3QpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgLmVycm9yKGZ1bmN0aW9uIChkYXRhLCBzdGF0dXMsIGhlYWRlcnMsIGNvbmZpZykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZWplY3Qoc3RhdHVzKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKHZtLmludGVybmFsQ29udGFjdHMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gX2dldEludGVybmFsQ29udGFjdHMoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gX2NyZWF0ZUludGVybmFsQ29udGFjdHMoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIF9nZXRJbnRlcm5hbENvbnRhY3RzV2l0aG91dE90aGVyKCkge1xyXG4gICAgICAgICAgICB2YXIgZGVmZXJyZWQgPSAkcS5kZWZlcigpO1xyXG4gICAgICAgICAgICB2YXIgY29udGFjdHNVcmwgPSBSRUxBVElWRV9GT0xERVJfREFUQStcImludGVybmFsQ29udGFjdHMuanNvblwiO1xyXG4gICAgICAgICAgICBpZiAoIXZtLmludGVybmFsQ29udGFjdHMgfHwgdm0uaW50ZXJuYWxDb250YWN0cy5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgICAgICRodHRwLmdldChjb250YWN0c1VybClcclxuICAgICAgICAgICAgICAgICAgICAuc3VjY2VzcyhmdW5jdGlvbiAoZGF0YSwgc3RhdHVzLCBoZWFkZXJzLCBjb25maWcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG5ld0xpc3QgPSBfY3JlYXRlU29ydGVkQXJyYXkoZGF0YSwgJ2VuJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZtLmludGVybmFsQ29udGFjdHMgPSBuZXdMaXN0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKG5ld0xpc3QpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgLmVycm9yKGZ1bmN0aW9uIChkYXRhLCBzdGF0dXMsIGhlYWRlcnMsIGNvbmZpZykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZWplY3Qoc3RhdHVzKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKHZtLmludGVybmFsQ29udGFjdHMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gX2NyZWF0ZVNvcnRlZEFycmF5KGpzb25MaXN0LCBsYW5nKSB7XHJcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSBbXTtcclxuICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKCRmaWx0ZXIoJ29yZGVyQnlMb2NhbGUnKShqc29uTGlzdCwgbGFuZyksIGZ1bmN0aW9uIChzb3J0ZWRPYmplY3QpIHtcclxuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHNvcnRlZE9iamVjdCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gX2dldEFkbWluU3ViVHlwZSgpIHtcclxuXHJcbiAgICAgICAgICAgIGlmICghdm0uYWRtaW5TdWJUeXBlQXJyYXkgfHwgdm0uYWRtaW5TdWJUeXBlQXJyYXkubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gX2xvYWRBZG1pblR5cGUoKVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuICh2bS5hZG1pblN1YlR5cGVBcnJheSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIF9sb2FkQWRtaW5UeXBlKCkge1xyXG4gICAgICAgICAgICB2YXIgZGVmZXJyZWQgPSAkcS5kZWZlcigpO1xyXG4gICAgICAgICAgICB2YXIgdXJsID0gUkVMQVRJVkVfRk9MREVSX0RBVEErXCJhZG1pblN1YlR5cGUuanNvblwiO1xyXG4gICAgICAgICAgICAkaHR0cC5nZXQodXJsKS5zdWNjZXNzKGZ1bmN0aW9uIChkYXRhLCBzdGF0dXMsIGhlYWRlcnMsIGNvbmZpZykge1xyXG4gICAgICAgICAgICAgICAgdmFyIGxhbmcgPSAkdHJhbnNsYXRlLnByb3Bvc2VkTGFuZ3VhZ2UoKSB8fCAkdHJhbnNsYXRlLnVzZSgpO1xyXG4gICAgICAgICAgICAgICAgdmFyIG5ld0xpc3QgPSBfY3JlYXRlU29ydGVkQXJyYXkoZGF0YSwgbGFuZyk7XHJcbiAgICAgICAgICAgICAgICB2bS5hZG1pblN1YlR5cGVBcnJheSA9IG5ld0xpc3Q7XHJcbiAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKG5ld0xpc3QpO1xyXG4gICAgICAgICAgICB9KS5lcnJvcihmdW5jdGlvbiAoZGF0YSwgc3RhdHVzLCBoZWFkZXJzLCBjb25maWcpIHtcclxuICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlamVjdChzdGF0dXMpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgIH1cclxuXHJcblxyXG59KSgpO1xyXG5cclxuXHJcbi8qKlxyXG4gKiBDb250YWN0IHJvbGUgbGlzdCBzZXJ2aWNlXHJcbiAqL1xyXG4oZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKCdkYXRhTGlzdHMnKVxyXG4gICAgICAgIC5mYWN0b3J5KCdnZXRSb2xlTGlzdHMnLCBnZXRSb2xlc1NlcnZpY2UpO1xyXG5cclxuICAgIC8qIEBuZ0luamVjdCAqL1xyXG4gICAgZnVuY3Rpb24gZ2V0Um9sZXNTZXJ2aWNlKCkge1xyXG4gICAgICAgIHZhciBfYmlvbG9naWMgPSAnQklPTE9HSUMnO1xyXG4gICAgICAgIHZhciBfcGhhcm1hID0gJ1BIQVJNQUNFVVRJQ0FMJztcclxuICAgICAgLy8gIHZhciBfdmV0ZXJpbmFyeSA9ICdWRVRFUklOQVJZJztcclxuICAgICAvLyAgIHZhciBfY2xpbmljYWwgPSAnQ0xJTklDQUxfVFJJQUwnO1xyXG4gICAgICAgIC8qJ0RSVUdfTUFTVEVSX0ZJTEUnLFxyXG4gICAgICAgICAnTUVESUNBTF9ERVZJQ0UnKi9cclxuICAgICAgICB2YXIgc2VydmljZSA9IHtcclxuICAgICAgICAgICAgZ2V0Q29udGFjdFJvbGVzOiBnZXRSb2xlVmFsdWVzQXJyYXksXHJcbiAgICAgICAgICAgIGdldEZvcm1UeXBlczogX2dldEZvcm1UeXBlcyxcclxuICAgICAgICAgICAgZ2V0QmlvbG9naWNUeXBlOiBfZ2V0QmlvbG9naWMsXHJcbiAgICAgICAgICAgIGdldFBoYXJtYVR5cGU6IF9nZXRQaGFybWFjZXV0aWNhbFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIHNlcnZpY2U7XHJcblxyXG4gICAgICAgIC8vLy8vLy8vLy8vLy8vLy9cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZ2V0Um9sZVZhbHVlc0FycmF5KCkge1xyXG4gICAgICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICAgICAgW1xyXG4gICAgICAgICAgICAgICAgICAgICcnLFxyXG4gICAgICAgICAgICAgICAgICAgICdST0xFX1BSSU1BUlknLFxyXG4gICAgICAgICAgICAgICAgICAgICdST0xFX1NFQ09OREFSWSdcclxuICAgICAgICAgICAgICAgIF0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gX2dldEZvcm1UeXBlcygpIHtcclxuICAgICAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgICAgIFtcclxuICAgICAgICAgICAgICAgICAgICBfYmlvbG9naWMsXHJcbiAgICAgICAgICAgICAgICAgICAgX3BoYXJtYVxyXG4gICAgICAgICAgICAgICAgICAgLy8gX3ZldGVyaW5hcnksXHJcbiAgICAgICAgICAgICAgICAgICAvLyBfY2xpbmljYWxcclxuICAgICAgICAgICAgICAgIF0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gX2dldEJpb2xvZ2ljKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gX2Jpb2xvZ2ljO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gX2dldFBoYXJtYWNldXRpY2FsKCkge1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIF9waGFybWE7XHJcbiAgICAgICAgfVxyXG4vKipcclxuICAgICAgICBmdW5jdGlvbiBfZ2V0VmV0ZXJpbmFyeSgpIHtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBfdmV0ZXJpbmFyeTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIF9nZXRDbGluaWNhbFRyaWFsKCkge1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIF9jbGluaWNhbDtcclxuICAgICAgICB9XHJcbiAqKi9cclxuXHJcbiAgICB9XHJcblxyXG59KSgpO1xyXG4iLCIvKipcclxuICogQ3JlYXRlZCBieSBka2lsdHkgb24gMTIvMDgvMjAxNi5cclxuICogQG5nZG9jIG1vZHVsZSAtZ2V0cyB0aGUgbGlzdCBvZiB0cmFuc2FjdGlvbiBhY3Rpdml0eSB0cHllc1xyXG4gKi9cclxuKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgnc2VydmljZXMnLCBbXSk7XHJcblxyXG59KSgpO1xyXG5cclxuXHJcbihmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ3NlcnZpY2VzJylcclxuICAgICAgICAuZmFjdG9yeSgnVHJhbnNhY3Rpb25MaXN0cycsIGdldFRyYW5zYWN0aW9uU2VxKTtcclxuXHJcbiAgICAvKiBAbmdJbmplY3QgKi9cclxuICAgIGdldFRyYW5zYWN0aW9uU2VxLmluamVjdCA9IFsnJGh0dHAnLCAnJHEnXTtcclxuXHJcbiAgICBmdW5jdGlvbiBnZXRUcmFuc2FjdGlvblNlcSgkaHR0cCwgJHEpIHtcclxuICAgICAgICB2YXIgdm0gPSB0aGlzO1xyXG4gICAgICAgIHZtLnJhVHlwZUFycmF5ID0gW107XHJcbiAgICAgICAgdm0uZmVlVHlwZUFycmF5ID0gW107XHJcblxyXG4gICAgICAgIC8qKiBMZWFkIHZhbHVlcy4gSGFyZCBjb2RlZCBhcyBkaWZmZXJlbnQgbGlzdHMgbmVlZCB0byBiZSAgICoqL1xyXG4gICAgICAgIHZtLkJJT0xPR0lDQUwgPSBcIkIxNC0yMDE2MDMwMS0wMlwiOyAvL2Jpb2xvZ2ljYWxcclxuICAgICAgICB2bS5DT05TVU1FUkhFQUxUSCA9IFwiQjE0LTIwMTYwMzAxLTA2XCI7IC8vQ29uc3VtZXIgSGVhbHRoIFByb2R1Y3RzXHJcbiAgICAgICAgdm0uUEhBUk1BID0gXCJCMTQtMjAxNjAzMDEtMDlcIjsgLy9waGFybWFjZXV0aWNhbFxyXG4gICAgICAgIHZtLlBPU1RNQVJLRVQgPSBcIkIxNC0yMDE2MDMwMS0xMFwiOyAvL3Bvc3RtYXJrZXQgY292aWdpbGFuY2VcclxuXHJcbiAgICAgICAgdm0uYWxsQWN0aXZpdGllcyA9IHtcclxuICAgICAgICAgICAgQURNSU5JU1RSQVRJVkU6IFwiQURNSU5JU1RSQVRJVkVcIiwgLy9hZG1pbmlzdHJhdGl2ZVxyXG4gICAgICAgICAgICBCRU5FRklUX1JJU0tfQVNTRVNTOiBcIkJFTkVGSVRfUklTS19BU1NFU1NcIiwgLy9iZW5lZml0IHJpc2sgYXNzZXNzbWVudFxyXG4gICAgICAgICAgICBDQU5DRUxfTEVUVEVSOiBcIkNBTkNFTF9MRVRURVJcIiwgLy9jYW5jZWxsYXRpb24gbGV0dGVyXHJcbiAgICAgICAgICAgIENIQU5HRV9UT19ESU46IFwiQ0hBTkdFX1RPX0RJTlwiLCAvL2NoYW5nZXMgdG8gZGluXHJcbiAgICAgICAgICAgIC8vQ0xBUklGX1JFU1BPTlNFOiBcIkNMQVJJRl9SRVNQT05TRVwiLCAvL1Jlc3BvbnNlIHRvIGNsYXJpZmljYXRpb24gcmVxdWVzdFxyXG4gICAgICAgICAgICBDT01NRU5UU19OT0M6IFwiQ09NTUVOVFNfTk9DXCIsIC8vIGNvbW1lbnRzIG9uIG5vdGljZSBvZiBkZWNpc2lvblxyXG4gICAgICAgICAgICBDT01NRU5UU19TVU1NQVJZX0JBU0lTOiBcIkNPTU1FTlRTX1NVTU1BUllfQkFTSVNcIiwgLy9jb21tbWVudHMgb24gc3VtbWFyeSBiYXNpcyBvZiBkZWNpc2lvbiAoU0JEKSxcclxuICAgICAgICAgICAgQ09NTUVOVFNfUkVHVUxBUlRPUllfREVDSVNJT046IFwiQ09NTUVOVFNfUkVHVUxBUlRPUllfREVDSVNJT05cIiwgLy9Db21tZW50cyBvbiBSZWd1bGF0b3J5IERlY2lzaW9uIFN1bW1hcnksXHJcbiAgICAgICAgICAgIERJTl9ESVNDT05USU5VRUQ6IFwiRElOX0RJU0NPTlRJTlVFRFwiLCAvLyBOb3RpZmljYXRpb24gb2YgRGlzY29udGludWVkIFNhbGUgKERJTiBDYW5jZWxsYXRpb24pXHJcbiAgICAgICAgICAgIERSVUdfTk9USUZfRk9STTogXCJEUlVHX05PVElGX0ZPUk1cIiwgLy8gZHJ1ZyBub3RpZmljYXRpb24gZm9ybVxyXG4gICAgICAgICAgICBGT1JfUEVSSU9EOiBcIkZPUl9QRVJJT0RcIiwgLy9mb3IgcGVyaW9kIG9mIC4uLi5cclxuICAgICAgICAgICAgSU5JVElBTDogXCJJTklUSUFMXCIsIC8vSW5pdGlhbFxyXG4gICAgICAgICAgICBNRUVUSU5HX01JTlVURVM6IFwiTUVFVElOR19NSU5VVEVTXCIsIC8vbWludXRlcyBvZiBtZWV0aW5nIGRhdGVkXHJcbiAgICAgICAgICAgIE5PVElGSUNBVElPTl9DSEFOR0U6IFwiTk9USUZJQ0FUSU9OX0NIQU5HRVwiLCAvL25vdGlmaWNhaXRvbiBvZiBjaGFuZ2UgaW4gYmVuZWZpdCBwcm9maWxlXHJcbiAgICAgICAgICAgIE5PVElGSUNBVElPTl9JTlRFUlJVUFRfU0FMRTogXCJOT1RJRklDQVRJT05fSU5URVJSVVBUX1NBTEVcIiwvL05vdGlmaWNhdGlvbiBJbnRlcnJ1cHRpb24gb2YgU2FsZVxyXG4gICAgICAgICAgICBQQU5ERU1JQ19BUFBMOiBcIlBBTkRFTUlDX0FQUExcIiwgLy9wYW5kZW1pYyBhcHBsaWNhaXRvblxyXG4gICAgICAgICAgICBQT1NUX0NMRUFSQU5DRV9EQVRBOiBcIlBPU1RfQ0xFQVJBTkNFX0RBVEFcIiwgLy9wb3N0IGNsZWFyYW5jZSBkYXRhXHJcbiAgICAgICAgICAgIFBPU1RfTUFSS0VUX1NVUlY6IFwiUE9TVF9NQVJLRVRfU1VSVlwiLCAvLyBwb3N0IG1hcmtldGluZyBzdXJ2ZWlsbGFuY2VcclxuICAgICAgICAgICAgUE9TVF9OT0NfQ0hBTkdFOiBcIlBPU1RfTk9DX0NIQU5HRVwiLCAvL1Bvc3QgTk9DIGNoYW5nZVxyXG4gICAgICAgICAgICBQT1NUX0FVVEhfRElWMV9DSEFOR0U6IFwiUE9TVF9BVVRIX0RJVjFfQ0hBTkdFXCIsIC8vIFBvc3QgYXV0b3JpemF0aW9uIERpdmlzaW9uIDEgY2hhbmdlXHJcbiAgICAgICAgICAgIFBSRVNVQl9NRUVUSU5HX1BLRzogXCJQUkVTVUJfTUVFVElOR19QS0dcIiwgLy8gc3VibWlzc2lvbiBtZWV0aW5nIHBhY2thZ2UgLXVzZWQgdG8gYmUgcHJlc3ViXHJcbiAgICAgICAgICAgIFBSRVNVQl9NRUVUSU5HX1JROiBcIlBSRVNVQl9NRUVUSU5HX1JRXCIsICAgLy9zdWJtaXNzaW9uIE1lZXRpbmcgUmVxdWVzdCAtdXNlZCB0byBiZSBwcmVzdWJcclxuICAgICAgICAgICAgUFJJT1JJVFlfUkVWSUVXX1JROiBcIlBSSU9SSVRZX1JFVklFV19SUVwiLCAvLyBQcmlvcml0eSByZXdpZXcgcmVxdWVzdFxyXG4gICAgICAgICAgICBQUklTVElORV9QTTogXCJQUklTVElORV9QTVwiLCAvLyBQcmlzdGluZSBQTVxyXG4gICAgICAgICAgICBQUklTVElORV9QTV8yTEFORzogXCJQUklTVElORV9QTV8yTEFOR1wiLCAvLyBwcmlzdGluZSBQTSBzZWNvbmQgbGFuZ3VhZ2VcclxuICAgICAgICAgICAgQURWSVNFTUVOVF9MRVRURVJfUkVTUE9OU0U6IFwiQURWSVNFTUVOVF9MRVRURVJfUkVTUE9OU0VcIiwgLy9SRXNwb3NlIHRvIEFkdmlzZW1lbnQgTGV0dGVyIGRhdGVkXHJcbiAgICAgICAgICAgIENMSU5fQ0xBUklGX1JFU1BPTlNFOiBcIkNMSU5fQ0xBUklGX1JFU1BPTlNFXCIsIC8vUmVzcG9uc2UgdG8gY2xpbmljYWwgY2xhcmlmaWFjdGlvbiByZXF1ZXN0XHJcbiAgICAgICAgICAgIEVNQUlMX1JRX1JFU1BPTlNFOiBcIkVNQUlMX1JRX1JFU1BPTlNFXCIsLy8gcmVzcG9uc2UgdG8gZW1haWwgcmVxdWVzdFxyXG4gICAgICAgICAgICBMQUJFTF9DTEFSSUZfUkVTUE9OU0U6IFwiTEFCRUxfQ0xBUklGX1JFU1BPTlNFXCIsIC8vUmVzcG9uc2UgdG8gbGFiZWxsaW5nIGNsYXJpZmljYXRpb24gcmVxdWVzdFxyXG4gICAgICAgICAgICBNSFBEX1JRX1JFU1BPTlNFOiBcIk1IUERfUlFfUkVTUE9OU0VcIiwgLy9SZXNwb25zZSB0byBNSFBEIHJlcXVlc3RcclxuICAgICAgICAgICAgTk9DX1JFU1BPTlNFOiBcIk5PQ19SRVNQT05TRVwiLCAvL3Jlc3BvbnNlIHRvIE5PQy8gYy1RblxyXG4gICAgICAgICAgICBOT0RfUkVTUE9OU0U6IFwiTk9EX1JFU1BPTlNFXCIsIC8vUmVzcG9uc2UgdG8gTk9EXHJcbiAgICAgICAgICAgIE5PTF9SRVNQT05TRTogXCJOT0xfUkVTUE9OU0VcIiwgLy9SZXNwb25zZSB0byBOT0wgZGF0ZWRcclxuICAgICAgICAgICAgTk9OX1JFU1BPTlNFOiBcIk5PTl9SRVNQT05TRVwiLCAvL1Jlc3BvbnNlIHRvIE5PTlxyXG4gICAgICAgICAgICBQUk9DRVNTSU5HX0NMQVJJRl9SRVNQT05TRTogXCJQUk9DRVNTSU5HX0NMQVJJRl9SRVNQT05TRVwiLCAvL1Jlc3BvbnNlIHRvIHByb2Nlc3NpbmcgQ2xhcmlmaWNhdGlvbiBSZXF1ZXN0XHJcbiAgICAgICAgICAgIFFVQUxfQ0xJTl9DTEFSSUZfUkVTUE9OU0U6IFwiUVVBTF9DTElOX0NMQVJJRl9SRVNQT05TRVwiLCAvL1Jlc3BvbnNlIHRvIHF1YWxpdHkgYW5kIENsaW5pY2FsIGNsYXJpZmljYXRpb24gUkVxdWVzdFxyXG4gICAgICAgICAgICBRVUFMX0NMQVJJRl9SRVNQT05TRTogXCJRVUFMX0NMQVJJRl9SRVNQT05TRVwiLCAvL1Jlc3BvbnNlIHRvIFF1YWxpdHkgQ2xhcmlmaWNhdGlvbiByZXF1ZXN0XHJcbiAgICAgICAgICAgIFJFQ09OX0RFQ0lTX0xUUl9JTlRFTlQ6IFwiUkVDT05fREVDSVNfTFRSX0lOVEVOVFwiLC8vIFJlY29uc2lkZXJhdGlvbiBvZiBEZWNpc2lvbiAtIExldHRlciBvZiBJbnRlbnRcclxuICAgICAgICAgICAgUkVDT05fREVDSVNfUlFfUkVDT046IFwiUkVDT05fREVDSVNfUlFfUkVDT05cIiwgLy9SZWNvbnNpZGVyYXRpb24gb2YgRGVjaXNpb24gLSBSZXF1ZXN0IGZvciBSZWNvbnNpZGVyYXRpb25cclxuICAgICAgICAgICAgUkVDT05fREVDSVNfT1RIRVJfSU5GTzogXCJSRUNPTl9ERUNJU19PVEhFUl9JTkZPXCIsLy8gUmVjb25zaWRlcmF0aW9uIG9mIERlY2lzaW9uIC0gT3RoZXIgSW5mb3JtYXRpb25cclxuICAgICAgICAgICAgU0NSRUVOSU5HX0FDQ0VQVF9SRVNQT05TRTogXCJTQ1JFRU5JTkdfQUNDRVBUX1JFU1BPTlNFXCIsIC8vcmVzcG9uc2UgdG8gc2NyZWVuaW5nIGFjY2VwdGFuY2UgbGV0dGVyXHJcbiAgICAgICAgICAgIFNDUkVFTklOR19DTEFSSUZfUkVTUE9OU0U6IFwiU0NSRUVOSU5HX0NMQVJJRl9SRVNQT05TRVwiLCAvLyByZXNwb25zZSB0byBzY3JlZW5pbmcgY2xhcmlmaWNhdGlvbiByZXF1ZXN0XHJcbiAgICAgICAgICAgIFNETl9SRVNQT05TRTogXCJTRE5fUkVTUE9OU0VcIiwgLy9yZXNwb25zZSB0byBTRE5cclxuICAgICAgICAgICAgTEFCRUxfUFJFQVBQUk9WQUxfMkxBTkc6IFwiTEFCRUxfUFJFQVBQUk9WQUxfMkxBTkdcIiwgLy9TZWNvbmQgTGFuZ3VhZ2UgTGFiZWwgLSBQcmUtQXBwcm92YWxcclxuICAgICAgICAgICAgUEhPTkVfUlFfUkVTUE9OU0U6IFwiUEhPTkVfUlFfUkVTUE9OU0VcIiwgLy9SZXNwb25zZSB0byB0ZWxlcGhvbmUgUmVxdWVzdFxyXG4gICAgICAgICAgICBSSVNLX0NPTU1VTl9ET0M6IFwiUklTS19DT01NVU5fRE9DXCIsIC8vUmlzayBjb21tdW5pY2F0aW9uIGRvY3VtZW50XHJcbiAgICAgICAgICAgIFJNUF9WRVJTSU9OX0RBVEU6IFwiUk1QX1ZFUlNJT05fREFURVwiLCAvL1JNUCB2ZXJpc29uXHJcbiAgICAgICAgICAgIFNJR05BTF9XT1JLX1VQOiBcIlNJR05BTF9XT1JLX1VQXCIsIC8vU2lnbmFsIFdvcmsgdXBcclxuICAgICAgICAgICAgVU5TT0xJQ0lURURfREFUQTogXCJVTlNPTElDSVRFRF9EQVRBXCIsIC8vVW5zb2xpY2l0ZWQgRGF0YVxyXG4gICAgICAgICAgICBZRUFSX0xJU1RfT0ZfQ0hBTkdFOiBcIllFQVJfTElTVF9PRl9DSEFOR0VcIiwgLy9ZZWFyLCBsaXN0IG9mIGNoYW5nZSBudW1iZXIsXHJcbiAgICAgICAgICAgIEJFX0NMQVJJRl9SRVNQT05TRTogXCJCRV9DTEFSSUZfUkVTUE9OU0VcIiwgLy9SZXNwb25zZSB0byBCRSBjbGFyaWZpY2F0aW9uIHJlcXVlc3QgZGF0ZWQuLlxyXG4gICAgICAgICAgICBDT1JSX1BBVEVOVF9NRUQ6IFwiQ09SUl9QQVRFTlRfTUVEXCIsIC8vQ29ycmVzcG9uZGVuY2UgLSBQYXRlbnRlZCBNZWRpY2luZXNcclxuICAgICAgICAgICAgQUxMRUdBVElPTl9OT1RJQ0U6IFwiQUxMRUdBVElPTl9OT1RJQ0VcIiwgLy9Ob3RpY2Ugb2YgYWxsZWdhdGlvblxyXG4gICAgICAgICAgICBGT1JNX0lWOiBcIkZPUk1fSVZcIiwgLy9Gb3JtIElWXHJcbiAgICAgICAgICAgIEZPUk1fVjogXCJGT1JNX1ZcIiwgLy9Gb3JtIFZcclxuICAgICAgICAgICAgQ09OU0VOVF9MVFI6IFwiQ09OU0VOVF9MVFJcIiwgLy9Db25zZW50IExldHRlclxyXG4gICAgICAgICAgICBEQVRBX1BST1RFQ1RfQ09SUkVTUDogXCJEQVRBX1BST1RFQ1RfQ09SUkVTUFwiLCAvL0NvcnJlc3BvbmRlbmNlIC0gRGF0YSBQcm90ZWN0aW9uXHJcbiAgICAgICAgICAgIE5PTkNMSU5fQ0xBUklGX1JFU1BPTlNFOiBcIk5PTkNMSU5fQ0xBUklGX1JFU1BPTlNFXCIsIC8vcmVzcG9uc2UgdG8gTm9uY2xpbmljYWwgY2xhcmlmaWNhdGlvbiByZXF1ZXN0XHJcbiAgICAgICAgICAgIFNFUVVFTkNFX0NMRUFOVVA6XCJTRVFVRU5DRV9DTEVBTlVQXCJcclxuICAgICAgICB9O1xyXG5cclxuXHJcbiAgICAgICAgdmFyIHNlcnZpY2UgPSB7XHJcbiAgICAgICAgICAgIGdldFRyYW5zYWN0aW9uRGVzY3JpcHRpb25zOiBnZXRUcmFuc2FjdGlvbkRlc2NyaXB0aW9uc0FycmF5LFxyXG4gICAgICAgICAgICBnZXRBY3Rpdml0eVR5cGVzOiBnZXRBY3Rpdml0eUFycmF5LFxyXG4gICAgICAgICAgICBjcmVhdGVSYVR5cGVzOiBfY3JlYXRlUmFBcnJheSxcclxuICAgICAgICAgICAgZ2V0QmlvbG9naWNhbExlYWRWYWx1ZTogX2dldEJpb2xvZ2ljYWxMZWFkLFxyXG4gICAgICAgICAgICBnZXRQaGFybWFMZWFkVmFsdWU6IF9nZXRQaGFybWFMZWFkLFxyXG4gICAgICAgICAgICBnZXRQb3N0TWFya2V0TGVhZFZhbHVlOiBfZ2V0UG9zdE1hcmtldExlYWQsXHJcbiAgICAgICAgICAgIGdldENvbnN1bUhlYWx0aExlYWRWYWx1ZTogX2dldENvbnN1bUhlYWx0aExlYWQsXHJcbiAgICAgICAgICAgIGdldFByZXN1YlR5cGVzOiBnZXRQcmVzdWJBcnJheSxcclxuICAgICAgICAgICAgZ2V0QW5kc1R5cGU6IGdldEFORFNBcnJheSxcclxuICAgICAgICAgICAgZ2V0RGluYVR5cGU6IGdldERJTkFBcnJheSxcclxuICAgICAgICAgICAgZ2V0RGluYlR5cGU6IGdldERJTkJBcnJheSxcclxuICAgICAgICAgICAgZ2V0RGluZFR5cGU6IGdldERJTkRBcnJheSxcclxuICAgICAgICAgICAgZ2V0RGluZlR5cGU6IGdldERJTkZBcnJheSxcclxuICAgICAgICAgICAgZ2V0RFN1clR5cGU6IGdldERTdXJBcnJheSxcclxuICAgICAgICAgICAgZ2V0RXVuZHNUeXBlOiBnZXRFVU5EU0FycmF5LFxyXG4gICAgICAgICAgICBnZXRFdXNuZHNUeXBlOiBnZXRFVVNORFNBcnJheSxcclxuICAgICAgICAgICAgZ2V0TGV2ZWwzVHlwZTogZ2V0TGV2ZWwzQXJyYXksXHJcbiAgICAgICAgICAgIGdldE1QRElOVHlwZTogZ2V0TVBESU5BcnJheSxcclxuICAgICAgICAgICAgZ2V0TmNUeXBlOiBnZXROQ0FycmF5LFxyXG4gICAgICAgICAgICBnZXROZHNUeXBlOiBnZXRORFNBcnJheSxcclxuICAgICAgICAgICAgZ2V0UGRjVHlwZTogZ2V0UERDQXJyYXksXHJcbiAgICAgICAgICAgIGdldFBkY0JUeXBlOiBnZXRQRENCQXJyYXksXHJcbiAgICAgICAgICAgIGdldFByZXN1YlR5cGU6IGdldFByZXN1YkFycmF5LFxyXG4gICAgICAgICAgICBnZXRwU3VyQ1R5cGU6IGdldFBTVVJDQXJyYXksXHJcbiAgICAgICAgICAgIGdldHBTdXJQdlR5cGU6IGdldFBTVVJQVkFycmF5LFxyXG4gICAgICAgICAgICBnZXRSbXBQdlR5cGU6IGdldFJNUFBWQXJyYXksXHJcbiAgICAgICAgICAgIGdldFNhbmRzVHlwZTogZ2V0U0FORFNBcnJheSxcclxuICAgICAgICAgICAgZ2V0U25kc1R5cGU6IGdldFNORFNBcnJheSxcclxuICAgICAgICAgICAgZ2V0U25kc0NBcnJheTogZ2V0U05EU0NBcnJheSxcclxuICAgICAgICAgICAgZ2V0VWRwdlR5cGU6IGdldFVEUFZBcnJheSxcclxuICAgICAgICAgICAgZ2V0VWRyYVR5cGU6IGdldFVEUkFBcnJheSxcclxuICAgICAgICAgICAgZ2V0WWJwclR5cGU6IGdldFlCUFJBcnJheSxcclxuICAgICAgICAgICAgZ2V0Q29uc3VsdFR5cGU6IGdldENvbnN1bHRBcnJheSxcclxuICAgICAgICAgICAgZ2V0TVBOQ1R5cGU6IF9nZXRNUE5DQXJyYXksXHJcbiAgICAgICAgICAgIGdldE1QTkRTVHlwZTogX2dldE1QTkRTQXJyYXksXHJcbiAgICAgICAgICAgIGdldE1QU05EU1R5cGU6IF9nZXRNUFNORFNBcnJheSxcclxuICAgICAgICAgICAgZ2V0UEFORFR5cGU6IF9nZXRQQU5EQXJyYXksXHJcbiAgICAgICAgICAgIGdldFBCUkVSQ1R5cGU6IF9nZXRQQlJFUkNBcnJheSxcclxuICAgICAgICAgICAgZ2V0UEJSRVJQVlR5cGU6IF9nZXRQQlJFUlBWQXJyYXksXHJcbiAgICAgICAgICAgIGdldFBSTkRTVHlwZTogX2dldFBSTkRTQXJyYXksXHJcbiAgICAgICAgICAgIGdldFBSU05EU1R5cGU6IF9nZXRQUlNORFNBcnJheSxcclxuICAgICAgICAgICAgZ2V0WWVzTm9MaXN0OiB5ZXNOb0FycmF5LFxyXG4gICAgICAgICAgICBnZXRGZWVMaXN0OiBfZ2V0ZmVlVHlwZUFycmF5LFxyXG4gICAgICAgICAgICBjcmVhdGVGZWVUeXBlczogX2NyZWF0ZUZlZUFycmF5LFxyXG4gICAgICAgICAgICBnZXRBY3Rpdml0eUxlYWRMaXN0OiBfZ2V0QWN0aXZpdHlMZWFkQXJyYXlcclxuICAgICAgICB9O1xyXG4gICAgICAgIHJldHVybiBzZXJ2aWNlO1xyXG5cclxuICAgICAgICAvLy8vLy8vLy8vLy8vLy8vXHJcblxyXG4gICAgICAgIC8vVE9ETyBtYWtlIGxpc3RzIGJlIGFjdGl2aXR5Li4geWlrZXMhXHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHllc05vQXJyYXkoKSB7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gKFtcclxuICAgICAgICAgICAgICAgIFwiWVwiLFxyXG4gICAgICAgICAgICAgICAgXCJOXCJcclxuICAgICAgICAgICAgXSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBfY3JlYXRlUmFBcnJheSh2YWx1ZSkge1xyXG4gICAgICAgICAgICB2bS5yYVR5cGVBcnJheSA9IHZhbHVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gX2NyZWF0ZUZlZUFycmF5KHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHZtLmZlZVR5cGVBcnJheSA9IHZhbHVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy9yZXR1cm5zIGEgbGlzdCBvZiBhbGwgdGhlIHVuaXF1ZSBkZXNjcmlwdGlvbiB2YWx1ZXNcclxuICAgICAgICBmdW5jdGlvbiBnZXRUcmFuc2FjdGlvbkRlc2NyaXB0aW9uc0FycmF5KCkge1xyXG4gICAgICAgICAgICByZXR1cm4gKHZtLmFsbEFjdGl2aXRpZXMpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZ2V0QWN0aXZpdHlBcnJheSgpIHtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiAodm0ucmFUeXBlQXJyYXkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gX2dldGZlZVR5cGVBcnJheSgpIHtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiAodm0uZmVlVHlwZUFycmF5KTtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICBmdW5jdGlvbiBnZXRQcmVzdWJBcnJheSgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIChbXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkNBTkNFTF9MRVRURVIsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLk1FRVRJTkdfTUlOVVRFUyxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuRU1BSUxfUlFfUkVTUE9OU0UsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBST0NFU1NJTkdfQ0xBUklGX1JFU1BPTlNFLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5QSE9ORV9SUV9SRVNQT05TRVxyXG4gICAgICAgICAgICBdKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGdldEFORFNBcnJheSgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIChbXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkFETUlOSVNUUkFUSVZFLCAvL2FkbWluaXN0cmF0aXZlXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkNBTkNFTF9MRVRURVIsIC8vY2FuY2VsbGF0aW9uIGxldHRlclxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5DT01NRU5UU19OT0MsIC8vIGNvbW1lbnRzIG9uIG5vdGljZSBvZiBkZWNpc2lvblxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5EUlVHX05PVElGX0ZPUk0sIC8vIGRydWcgbm90aWZpY2F0aW9uIGZvcm1cclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuSU5JVElBTCwgLy9Jbml0aWFsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLk1FRVRJTkdfTUlOVVRFUywgLy9taW51dGVzIG9mIG1lZXRpbmcgZGF0ZWRcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUE9TVF9DTEVBUkFOQ0VfREFUQSwgLy9wb3N0IGNsZWFyYW5jZSBkYXRhXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBSSVNUSU5FX1BNLCAvLyBQcmlzdGluZSBQTVxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5QUklTVElORV9QTV8yTEFORywgLy8gcHJpc3RpbmUgUE0gc2Vjb25kIGxhbmd1YWdlXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkJFX0NMQVJJRl9SRVNQT05TRSxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuQ0xJTl9DTEFSSUZfUkVTUE9OU0UsIC8vUmVzcG9uc2UgdG8gY2xpbmljYWwgY2xhcmlmaWFjdGlvbiByZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkVNQUlMX1JRX1JFU1BPTlNFLC8vIHJlc3BvbnNlIHRvIGVtYWlsIHJlcXVlc3RcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuTEFCRUxfQ0xBUklGX1JFU1BPTlNFLCAvL1Jlc3BvbnNlIHRvIGxhYmVsbGluZyBjbGFyaWZpY2F0aW9uIHJlcXVlc3RcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuTEFCRUxfUFJFQVBQUk9WQUxfMkxBTkcsIC8vU2Vjb25kIExhbmd1YWdlIExhYmVsIC0gUHJlLUFwcHJvdmFsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLk5PQ19SRVNQT05TRSwgLy9yZXNwb25zZSB0byBOT0MvIGMtUW5cclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuTk9EX1JFU1BPTlNFLCAvL1Jlc3BvbnNlIHRvIE5PRFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5OT05fUkVTUE9OU0UsIC8vUmVzcG9uc2UgdG8gTk9OXHJcbiAgICAgICAgICAgICAgICAvL3ZtLmFsbEFjdGl2aXRpZXMuTk9USUZJQ0FUSU9OX0lOVEVSUlVQVF9TQUxFLC8vTm90aWZpY2F0aW9uIEludGVycnVwdGlvbiBvZiBTYWxlXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBSRVNVQl9NRUVUSU5HX1BLRywgLy9zdWJtaXNzaW9uL3ByZXN1Ym1pc3Npb24gbWVldGluZyBwYWNrYWdlXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBSRVNVQl9NRUVUSU5HX1JRLCAgIC8vc3VibWlzc2lvbiBNZWV0aW5nIFJlcXVlc3QgLXVzZWQgdG8gYmUgcHJlc3ViXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBST0NFU1NJTkdfQ0xBUklGX1JFU1BPTlNFLCAvL1Jlc3BvbnNlIHRvIHByb2Nlc3NpbmcgIENsYXJpZmljYXRpb24gUmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5RVUFMX0NMSU5fQ0xBUklGX1JFU1BPTlNFLCAvL1Jlc3BvbnNlIHRvIHF1YWxpdHkgYW5kIENsaW5pY2FsIGNsYXJpZmljYXRpb24gUkVxdWVzdFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5RVUFMX0NMQVJJRl9SRVNQT05TRSwgLy9SZXNwb25zZSB0byBRdWFsaXR5IENsYXJpZmljYXRpb24gcmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5SRUNPTl9ERUNJU19MVFJfSU5URU5ULC8vIFJlY29uc2lkZXJhdGlvbiBvZiBEZWNpc2lvbiAtIExldHRlciBvZiBJbnRlbnRcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUkVDT05fREVDSVNfUlFfUkVDT04sIC8vUmVjb25zaWRlcmF0aW9uIG9mIERlY2lzaW9uIC0gUmVxdWVzdCBmb3IgUmVjb25zaWRlcmF0aW9uXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlJFQ09OX0RFQ0lTX09USEVSX0lORk8sLy8gUmVjb25zaWRlcmF0aW9uIG9mIERlY2lzaW9uIC0gT3RoZXIgSW5mb3JtYXRpb25cclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuU0NSRUVOSU5HX0FDQ0VQVF9SRVNQT05TRSwgLy9yZXNwb25zZSB0byBzY3JlZW5pbmcgYWNjZXB0YW5jZSBsZXR0ZXJcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuU0NSRUVOSU5HX0NMQVJJRl9SRVNQT05TRSwgLy8gcmVzcG9uc2UgdG8gc2NyZWVuaW5nIGNsYXJpZmljYXRpb24gcmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5TRE5fUkVTUE9OU0UsIC8vcmVzcG9uc2UgdG8gU0ROXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBIT05FX1JRX1JFU1BPTlNFLCAvL1Jlc3BvbnNlIHRvIHRlbGVwaG9uZSBSZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlVOU09MSUNJVEVEX0RBVEEsIC8vVW5zb2xpY2l0ZWQgRGF0YVxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5DT1JSX1BBVEVOVF9NRUQsIC8vQ29ycmVzcG9uZGVuY2UgLSBQYXRlbnRlZCBNZWRpY2luZXNcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuQUxMRUdBVElPTl9OT1RJQ0UsIC8vTm90aWNlIG9mIGFsbGVnYXRpb25cclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuRk9STV9JViwgLy9Gb3JtIElWXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkZPUk1fViwgLy9Gb3JtIFZcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuQ09OU0VOVF9MVFIsIC8vQ29uc2VudCBMZXR0ZXJcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuREFUQV9QUk9URUNUX0NPUlJFU1AgLy9Db3JyZXNwb25kZW5jZSAtIERhdGEgUHJvdGVjdGlvblxyXG4gICAgICAgICAgICAgICAgLy92bS5hbGxBY3Rpdml0aWVzLlNFUVVFTkNFX0NMRUFOVVAgLy8gU2VxdWVuY2UgY2xlYW51cCBhcyBwZXIgZW1haWwgRkViIDE2LCAyMDE4XHJcbiAgICAgICAgICAgIF0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZ2V0RElOQUFycmF5KCkge1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIChbXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkFETUlOSVNUUkFUSVZFLCAvL2FkbWluaXN0cmF0aXZlXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkNBTkNFTF9MRVRURVIsIC8vY2FuY2VsbGF0aW9uIGxldHRlclxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5EUlVHX05PVElGX0ZPUk0sIC8vIGRydWcgbm90aWZpY2F0aW9uIGZvcm1cclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuSU5JVElBTCwgLy9Jbml0aWFsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBPU1RfQ0xFQVJBTkNFX0RBVEEsIC8vcG9zdCBjbGVhcmFuY2UgZGF0YVxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5QUkVTVUJfTUVFVElOR19QS0csIC8vIHByZXN1Ym1pc3Npb24gbWVldGluZyBwYWNrYWdlXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBSSVNUSU5FX1BNLCAvLyBQcmlzIHZtLmFsbEFjdGl2aXRpZXMuaW5lIFBNXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBSSVNUSU5FX1BNXzJMQU5HLCAvLyBwcmlzdGluZSBQTSBzZWNvbmQgbGFuZ3VhZ2VcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuQ0xJTl9DTEFSSUZfUkVTUE9OU0UsIC8vUmVzcG9uc2UgdG8gY2xpbmljYWwgY2xhcmlmaWFjdGlvbiByZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkVNQUlMX1JRX1JFU1BPTlNFLC8vIHJlc3BvbnNlIHRvIGVtYWlsIHJlcXVlc3RcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuTEFCRUxfQ0xBUklGX1JFU1BPTlNFLCAvL1Jlc3BvbnNlIHRvIGxhYmVsbGluZyBjbGFyaWZpY2F0aW9uIHJlcXVlc3RcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUFJPQ0VTU0lOR19DTEFSSUZfUkVTUE9OU0UsIC8vUmVzcG9uc2UgdG8gcHJvY2Vzc2luZyBDbGFyaWZpY2F0aW9uIFJlcXVlc3RcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUVVBTF9DTElOX0NMQVJJRl9SRVNQT05TRSwgLy9SZXNwb25zZSB0byBxdWFsaXR5IGFuZCBDbGluaWNhbCBjbGFyaWZpY2F0aW9uIFJFcXVlc3RcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUVVBTF9DTEFSSUZfUkVTUE9OU0UsIC8vUmVzcG9uc2UgdG8gUXVhbGl0eSBDbGFyaWZpY2F0aW9uIHJlcXVlc3RcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuU0NSRUVOSU5HX0FDQ0VQVF9SRVNQT05TRSwgLy9yZXNwb25zZSB0byBzY3JlZW5pbmcgYWNjZXB0YW5jZSBsZXR0ZXJcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuU0NSRUVOSU5HX0NMQVJJRl9SRVNQT05TRSwgLy8gcmVzcG9uc2UgdG8gc2NyZWVuaW5nIGNsYXJpZmljYXRpb24gcmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5QSE9ORV9SUV9SRVNQT05TRSwgLy9SZXNwb25zZSB0byB0ZWxlcGhvbmUgUmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5VTlNPTElDSVRFRF9EQVRBLCAvL1Vuc29saWNpdGVkIERhdGFcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuTk9OX1JFU1BPTlNFLCAvL1Jlc3BvbnNlIHRvIE5PTlxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5OT0RfUkVTUE9OU0UgLy9SZXNwb25zZSB0byBOT0RcclxuICAgICAgICAgICAgICAgIC8vdm0uYWxsQWN0aXZpdGllcy5TRVFVRU5DRV9DTEVBTlVQIC8vIFNlcXVlbmNlIGNsZWFudXAgYXMgcGVyIGVtYWlsIEZFYiAxNiwgMjAxOFxyXG4gICAgICAgICAgICBdKTtcclxuXHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy9ub3RlIERJTkIgaXMgdGhlIHNhbWUgYXMgRElOQVxyXG4gICAgICAgIGZ1bmN0aW9uIGdldERJTkJBcnJheSgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIChbXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkFETUlOSVNUUkFUSVZFLCAvL2FkbWluaXN0cmF0aXZlXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkNBTkNFTF9MRVRURVIsIC8vY2FuY2VsbGF0aW9uIGxldHRlclxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5EUlVHX05PVElGX0ZPUk0sIC8vIGRydWcgbm90aWZpY2F0aW9uIGZvcm1cclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuSU5JVElBTCwgLy9Jbml0aWFsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBPU1RfQ0xFQVJBTkNFX0RBVEEsIC8vcG9zdCBjbGVhcmFuY2UgZGF0YVxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5QUkVTVUJfTUVFVElOR19QS0csIC8vIHByZXN1Ym1pc3Npb24gbWVldGluZyBwYWNrYWdlXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBSSVNUSU5FX1BNLCAvLyBQcmlzdGluZSBQTVxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5QUklTVElORV9QTV8yTEFORywgLy8gcHJpc3RpbmUgUE0gc2Vjb25kIGxhbmd1YWdlXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkNMSU5fQ0xBUklGX1JFU1BPTlNFLCAvL1Jlc3BvbnNlIHRvIGNsaW5pY2FsIGNsYXJpZmlhY3Rpb24gcmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5FTUFJTF9SUV9SRVNQT05TRSwvLyByZXNwb25zZSB0byBlbWFpbCByZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkxBQkVMX0NMQVJJRl9SRVNQT05TRSwgLy9SZXNwb25zZSB0byBsYWJlbGxpbmcgY2xhcmlmaWNhdGlvbiByZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBST0NFU1NJTkdfQ0xBUklGX1JFU1BPTlNFLCAvL1Jlc3BvbnNlIHRvIHByb2Nlc3NpbmcgQ2xhcmlmaWNhdGlvbiBSZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlFVQUxfQ0xJTl9DTEFSSUZfUkVTUE9OU0UsIC8vUmVzcG9uc2UgdG8gcXVhbGl0eSBhbmQgQ2xpbmljYWwgY2xhcmlmaWNhdGlvbiBSRXF1ZXN0XHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlFVQUxfQ0xBUklGX1JFU1BPTlNFLCAvL1Jlc3BvbnNlIHRvIFF1YWxpdHkgQ2xhcmlmaWNhdGlvbiByZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlNDUkVFTklOR19BQ0NFUFRfUkVTUE9OU0UsIC8vcmVzcG9uc2UgdG8gc2NyZWVuaW5nIGFjY2VwdGFuY2UgbGV0dGVyXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlNDUkVFTklOR19DTEFSSUZfUkVTUE9OU0UsIC8vIHJlc3BvbnNlIHRvIHNjcmVlbmluZyBjbGFyaWZpY2F0aW9uIHJlcXVlc3RcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUEhPTkVfUlFfUkVTUE9OU0UsIC8vUmVzcG9uc2UgdG8gdGVsZXBob25lIFJlcXVlc3RcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuVU5TT0xJQ0lURURfREFUQSwgLy9VbnNvbGljaXRlZCBEYXRhXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLk5PTl9SRVNQT05TRSwgLy9SZXNwb25zZSB0byBOT05cclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuTk9EX1JFU1BPTlNFIC8vUmVzcG9uc2UgdG8gTk9EXHJcbiAgICAgICAgICAgICAgICAvL3ZtLmFsbEFjdGl2aXRpZXMuU0VRVUVOQ0VfQ0xFQU5VUCAvLyBTZXF1ZW5jZSBjbGVhbnVwIGFzIHBlciBlbWFpbCBGRWIgMTYsIDIwMThcclxuICAgICAgICAgICAgXSk7XHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZ2V0RVVORFNBcnJheSgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIChbXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkFETUlOSVNUUkFUSVZFLCAvL2FkbWluaXN0cmF0aXZlXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkJFX0NMQVJJRl9SRVNQT05TRSwgLy9SZXNwb25zZSB0byBCRSBjbGFyaWZpY2F0aW9uIHJlcXVlc3QgZGF0ZWQuLlxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5DQU5DRUxfTEVUVEVSLCAvL2NhbmNlbGxhdGlvbiBsZXR0ZXJcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuQ09NTUVOVFNfTk9DLCAvLyBjb21tZW50cyBvbiBub3RpY2Ugb2YgZGVjaXNpb25cclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuQ09NTUVOVFNfU1VNTUFSWV9CQVNJUywgLy9jb21tbWVudHMgb24gc3VtbWFyeSBiYXNpcyxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuRFJVR19OT1RJRl9GT1JNLCAvLyBkcnVnIG5vdGlmaWNhdGlvbiBmb3JtXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLklOSVRJQUwsIC8vSW5pdGlhbFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5NRUVUSU5HX01JTlVURVMsIC8vbWludXRlcyBvZiBtZWV0aW5nIGRhdGVkXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBPU1RfQ0xFQVJBTkNFX0RBVEEsIC8vcG9zdCBjbGVhcmFuY2UgZGF0YVxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5QUklTVElORV9QTSwgLy8gUHJpc3RpbmUgUE1cclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUFJJU1RJTkVfUE1fMkxBTkcsIC8vIHByaXN0aW5lIFBNIHNlY29uZCBsYW5ndWFnZVxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5DTElOX0NMQVJJRl9SRVNQT05TRSwgLy9SZXNwb25zZSB0byBjbGluaWNhbCBjbGFyaWZpYWN0aW9uIHJlcXVlc3RcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuRU1BSUxfUlFfUkVTUE9OU0UsLy8gcmVzcG9uc2UgdG8gZW1haWwgcmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5MQUJFTF9DTEFSSUZfUkVTUE9OU0UsIC8vUmVzcG9uc2UgdG8gbGFiZWxsaW5nIGNsYXJpZmljYXRpb24gcmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5MQUJFTF9QUkVBUFBST1ZBTF8yTEFORywgLy9TZWNvbmQgTGFuZ3VhZ2UgTGFiZWwgLSBQcmUtQXBwcm92YWxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuTk9DX1JFU1BPTlNFLCAvL3Jlc3BvbnNlIHRvIE5PQy8gYy1RblxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5OT0RfUkVTUE9OU0UsIC8vUmVzcG9uc2UgdG8gTk9EXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLk5PTl9SRVNQT05TRSwgLy9SZXNwb25zZSB0byBOT05cclxuICAgICAgICAgICAgICAgIC8vdm0uYWxsQWN0aXZpdGllcy5OT1RJRklDQVRJT05fSU5URVJSVVBUX1NBTEUsLy9Ob3RpZmljYXRpb24gSW50ZXJydXB0aW9uIG9mIFNhbGVcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUFJFU1VCX01FRVRJTkdfUEtHLCAvL3N1Ym1pc3Npb24vcHJlc3VibWlzc2lvbiBtZWV0aW5nIHBhY2thZ2VcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUFJFU1VCX01FRVRJTkdfUlEsICAgLy9zdWJtaXNzaW9uIE1lZXRpbmcgUmVxdWVzdCAtdXNlZCB0byBiZSBwcmVzdWJcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUFJPQ0VTU0lOR19DTEFSSUZfUkVTUE9OU0UsIC8vUmVzcG9uc2UgdG8gcHJvY2Vzc2luZyBDbGFyaWZpY2F0aW9uIFJlcXVlc3RcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUVVBTF9DTElOX0NMQVJJRl9SRVNQT05TRSwgLy9SZXNwb25zZSB0byBxdWFsaXR5IGFuZCBDbGluaWNhbCBjbGFyaWZpY2F0aW9uIFJFcXVlc3RcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUVVBTF9DTEFSSUZfUkVTUE9OU0UsIC8vUmVzcG9uc2UgdG8gUXVhbGl0eSBDbGFyaWZpY2F0aW9uIHJlcXVlc3RcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUkVDT05fREVDSVNfTFRSX0lOVEVOVCwvLyBSZWNvbnNpZGVyYXRpb24gb2YgRGVjaXNpb24gLSBMZXR0ZXIgb2YgSW50ZW50XHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlJFQ09OX0RFQ0lTX1JRX1JFQ09OLCAvL1JlY29uc2lkZXJhdGlvbiBvZiBEZWNpc2lvbiAtIFJlcXVlc3QgZm9yIFJlY29uc2lkZXJhdGlvblxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5SRUNPTl9ERUNJU19PVEhFUl9JTkZPLC8vIFJlY29uc2lkZXJhdGlvbiBvZiBEZWNpc2lvbiAtIE90aGVyIEluZm9ybWF0aW9uXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlNDUkVFTklOR19BQ0NFUFRfUkVTUE9OU0UsIC8vcmVzcG9uc2UgdG8gc2NyZWVuaW5nIGFjY2VwdGFuY2UgbGV0dGVyXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlNDUkVFTklOR19DTEFSSUZfUkVTUE9OU0UsIC8vIHJlc3BvbnNlIHRvIHNjcmVlbmluZyBjbGFyaWZpY2F0aW9uIHJlcXVlc3RcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuU0ROX1JFU1BPTlNFLCAvL3Jlc3BvbnNlIHRvIFNETlxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5QSE9ORV9SUV9SRVNQT05TRSwgLy9SZXNwb25zZSB0byB0ZWxlcGhvbmUgUmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5VTlNPTElDSVRFRF9EQVRBLCAvL1Vuc29saWNpdGVkIERhdGFcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuQ09SUl9QQVRFTlRfTUVELCAvL0NvcnJlc3BvbmRlbmNlIC0gUGF0ZW50ZWQgTWVkaWNpbmVzXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkFMTEVHQVRJT05fTk9USUNFLCAvL05vdGljZSBvZiBhbGxlZ2F0aW9uXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkZPUk1fSVYsIC8vRm9ybSBJVlxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5GT1JNX1YsIC8vRm9ybSBWXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkNPTlNFTlRfTFRSLCAvL0NvbnNlbnQgTGV0dGVyXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkRBVEFfUFJPVEVDVF9DT1JSRVNQLCAvL0NvcnJlc3BvbmRlbmNlIC0gRGF0YSBQcm90ZWN0aW9uXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLk5PTkNMSU5fQ0xBUklGX1JFU1BPTlNFIC8vcmVzcG9uc2UgdG8gTm9uY2xpbmljYWwgY2xhcmlmaWNhdGlvbiByZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICAvL3ZtLmFsbEFjdGl2aXRpZXMuU0VRVUVOQ0VfQ0xFQU5VUCAvLyBTZXF1ZW5jZSBjbGVhbnVwIGFzIHBlciBlbWFpbCBGRWIgMTYsIDIwMThcclxuICAgICAgICAgICAgXSk7XHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZ2V0RVVTTkRTQXJyYXkoKSB7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gKFtcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuQURNSU5JU1RSQVRJVkUsIC8vYWRtaW5pc3RyYXRpdmVcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuQkVfQ0xBUklGX1JFU1BPTlNFLCAvL1Jlc3BvbnNlIHRvIEJFIGNsYXJpZmljYXRpb24gcmVxdWVzdCBkYXRlZC4uXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkNBTkNFTF9MRVRURVIsIC8vY2FuY2VsbGF0aW9uIGxldHRlclxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5DT01NRU5UU19OT0MsIC8vIGNvbW1lbnRzIG9uIG5vdGljZSBvZiBkZWNpc2lvblxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5DT01NRU5UU19TVU1NQVJZX0JBU0lTLCAvL2NvbW1tZW50cyBvbiBzdW1tYXJ5IGJhc2lzXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkRSVUdfTk9USUZfRk9STSwgLy8gZHJ1ZyBub3RpZmljYXRpb24gZm9ybVxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5NRUVUSU5HX01JTlVURVMsIC8vbWludXRlcyBvZiBtZWV0aW5nIGRhdGVkXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBPU1RfQ0xFQVJBTkNFX0RBVEEsIC8vcG9zdCBjbGVhcmFuY2UgZGF0YVxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5QT1NUX05PQ19DSEFOR0UsIC8vUG9zdCBOT0MgY2hhbmdlXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBSSVNUSU5FX1BNLCAvLyBQcmlzdGluZSBQTVxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5QUklTVElORV9QTV8yTEFORywgLy8gcHJpc3RpbmUgUE0gc2Vjb25kIGxhbmd1YWdlXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkNMSU5fQ0xBUklGX1JFU1BPTlNFLCAvL1Jlc3BvbnNlIHRvIGNsaW5pY2FsIGNsYXJpZmlhY3Rpb24gcmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5FTUFJTF9SUV9SRVNQT05TRSwvLyByZXNwb25zZSB0byBlbWFpbCByZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkxBQkVMX0NMQVJJRl9SRVNQT05TRSwgLy9SZXNwb25zZSB0byBsYWJlbGxpbmcgY2xhcmlmaWNhdGlvbiByZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLk5PQ19SRVNQT05TRSwgLy9yZXNwb25zZSB0byBOT0MvIGMtUW5cclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuTk9EX1JFU1BPTlNFLCAvL1Jlc3BvbnNlIHRvIE5PRFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5OT05fUkVTUE9OU0UsIC8vUmVzcG9uc2UgdG8gTk9OXHJcbiAgICAgICAgICAgICAgICAvL3ZtLmFsbEFjdGl2aXRpZXMuTk9USUZJQ0FUSU9OX0lOVEVSUlVQVF9TQUxFLC8vTm90aWZpY2F0aW9uIEludGVycnVwdGlvbiBvZiBTYWxlXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBSRVNVQl9NRUVUSU5HX1BLRywgLy9zdWJtaXNzaW9uL3ByZXN1Ym1pc3Npb24gbWVldGluZyBwYWNrYWdlXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBSRVNVQl9NRUVUSU5HX1JRLCAgIC8vc3VibWlzc2lvbiBNZWV0aW5nIFJlcXVlc3QgLXVzZWQgdG8gYmUgcHJlc3ViXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBST0NFU1NJTkdfQ0xBUklGX1JFU1BPTlNFLCAvL1Jlc3BvbnNlIHRvIHByb2Nlc3NpbmcgQ2xhcmlmaWNhdGlvbiBSZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlFVQUxfQ0xJTl9DTEFSSUZfUkVTUE9OU0UsIC8vUmVzcG9uc2UgdG8gcXVhbGl0eSBhbmQgQ2xpbmljYWwgY2xhcmlmaWNhdGlvbiBSRXF1ZXN0XHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlFVQUxfQ0xBUklGX1JFU1BPTlNFLCAvL1Jlc3BvbnNlIHRvIFF1YWxpdHkgQ2xhcmlmaWNhdGlvbiByZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlJFQ09OX0RFQ0lTX0xUUl9JTlRFTlQsLy8gUmVjb25zaWRlcmF0aW9uIG9mIERlY2lzaW9uIC0gTGV0dGVyIG9mIEludGVudFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5SRUNPTl9ERUNJU19SUV9SRUNPTiwgLy9SZWNvbnNpZGVyYXRpb24gb2YgRGVjaXNpb24gLSBSZXF1ZXN0IGZvciBSZWNvbnNpZGVyYXRpb25cclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUkVDT05fREVDSVNfT1RIRVJfSU5GTywvLyBSZWNvbnNpZGVyYXRpb24gb2YgRGVjaXNpb24gLSBPdGhlciBJbmZvcm1hdGlvblxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5TQ1JFRU5JTkdfQUNDRVBUX1JFU1BPTlNFLCAvL3Jlc3BvbnNlIHRvIHNjcmVlbmluZyBhY2NlcHRhbmNlIGxldHRlclxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5TQ1JFRU5JTkdfQ0xBUklGX1JFU1BPTlNFLCAvLyByZXNwb25zZSB0byBzY3JlZW5pbmcgY2xhcmlmaWNhdGlvbiByZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlNETl9SRVNQT05TRSwgLy9yZXNwb25zZSB0byBTRE5cclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuTEFCRUxfUFJFQVBQUk9WQUxfMkxBTkcsIC8vc2Vjb25kIGxhbmdhZ2UgcHJlYXBwcm92YWxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUEhPTkVfUlFfUkVTUE9OU0UsIC8vUmVzcG9uc2UgdG8gdGVsZXBob25lIFJlcXVlc3RcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuVU5TT0xJQ0lURURfREFUQSwgLy9VbnNvbGljaXRlZCBEYXRhXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkNPUlJfUEFURU5UX01FRCwgLy9Db3JyZXNwb25kZW5jZSAtIFBhdGVudGVkIE1lZGljaW5lc1xyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5BTExFR0FUSU9OX05PVElDRSwgLy9Ob3RpY2Ugb2YgYWxsZWdhdGlvblxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5GT1JNX0lWLCAvL0Zvcm0gSVZcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuRk9STV9WLCAvL0Zvcm0gVlxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5DT05TRU5UX0xUUiwgLy9Db25zZW50IExldHRlclxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5EQVRBX1BST1RFQ1RfQ09SUkVTUCwgLy9Db3JyZXNwb25kZW5jZSAtIERhdGEgUHJvdGVjdGlvblxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5OT05DTElOX0NMQVJJRl9SRVNQT05TRSAvL3Jlc3BvbnNlIHRvIE5vbmNsaW5pY2FsIGNsYXJpZmljYXRpb24gcmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgLy92bS5hbGxBY3Rpdml0aWVzLlNFUVVFTkNFX0NMRUFOVVAgLy8gU2VxdWVuY2UgY2xlYW51cCBhcyBwZXIgZW1haWwgRkViIDE2LCAyMDE4XHJcbiAgICAgICAgICAgIF0pO1xyXG5cclxuICAgICAgICB9XHJcbiAgICAgICAgLy9MZXZlbCAzLSAgTm90aWNlIG9mIENoYW5nZVxyXG4gICAgICAgIGZ1bmN0aW9uIGdldExldmVsM0FycmF5KCkge1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIChbXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkNBTkNFTF9MRVRURVIsIC8vY2FuY2VsbGF0aW9uIGxldHRlclxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5FTUFJTF9SUV9SRVNQT05TRSwvLyByZXNwb25zZSB0byBlbWFpbCByZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBIT05FX1JRX1JFU1BPTlNFLCAvL1Jlc3BvbnNlIHRvIHRlbGVwaG9uZSBSZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLllFQVJfTElTVF9PRl9DSEFOR0UsIC8vWWVhciwgbGlzdCBvZiBjaGFuZ2UgbnVtYmVyLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5DTElOX0NMQVJJRl9SRVNQT05TRSwgLy9SZXNwb25zZSB0byBjbGluaWNhbCBjbGFyaWZpY2F0aW9uIHJlcXVlc3RcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUVVBTF9DTEFSSUZfUkVTUE9OU0UgLy9SZXNwb25zZSB0byBRdWFsaXR5IENsYXJpZmljYXRpb24gcmVxdWVzdFxyXG4gICAgICAgICAgICAgICAvLyB2bS5hbGxBY3Rpdml0aWVzLkNMQVJJRl9SRVNQT05TRSAvL1Jlc3BvbnNlIHRvIGNsYXJpZmljYXRpb24gcmVxdWVzdFxyXG4gICAgICAgICAgICBdKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGdldE5DQXJyYXkoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAoW1xyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5BRE1JTklTVFJBVElWRSwgLy9hZG1pbmlzdHJhdGl2ZVxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5DQU5DRUxfTEVUVEVSLCAvL2NhbmNlbGxhdGlvbiBsZXR0ZXJcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuQ09NTUVOVFNfU1VNTUFSWV9CQVNJUywgLy9jb21tbWVudHMgb24gc3VtbWFyeSBiYXNpc1xyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5EUlVHX05PVElGX0ZPUk0sIC8vIGRydWcgbm90aWZpY2F0aW9uIGZvcm1cclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuTUVFVElOR19NSU5VVEVTLCAvL21pbnV0ZXMgb2YgbWVldGluZyBkYXRlZFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5QT1NUX0NMRUFSQU5DRV9EQVRBLCAvL3Bvc3QgY2xlYXJhbmNlIGRhdGFcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUE9TVF9OT0NfQ0hBTkdFLCAvL1Bvc3QgTk9DIGNoYW5nZVxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5QUkVTVUJfTUVFVElOR19QS0csIC8vIHByZXN1Ym1pc3Npb24gbWVldGluZyBwYWNrYWdlXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBSRVNVQl9NRUVUSU5HX1JRLCAgIC8vc3VibWlzc2lvbiBNZWV0aW5nIFJlcXVlc3QgLXVzZWQgdG8gYmUgcHJlc3ViXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBSSVNUSU5FX1BNLCAvLyBQcmlzdGluZSBQTVxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5QUklTVElORV9QTV8yTEFORywgLy8gcHJpc3RpbmUgUE0gc2Vjb25kIGxhbmd1YWdlXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkNMSU5fQ0xBUklGX1JFU1BPTlNFLCAvL1Jlc3BvbnNlIHRvIGNsaW5pY2FsIGNsYXJpZmlhY3Rpb24gcmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5FTUFJTF9SUV9SRVNQT05TRSwvLyByZXNwb25zZSB0byBlbWFpbCByZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkxBQkVMX0NMQVJJRl9SRVNQT05TRSwgLy9SZXNwb25zZSB0byBsYWJlbGxpbmcgY2xhcmlmaWNhdGlvbiByZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkxBQkVMX1BSRUFQUFJPVkFMXzJMQU5HLCAvL1NlY29uZCBMYW5ndWFnZSBMYWJlbCAtIFByZS1BcHByb3ZhbFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5OT0xfUkVTUE9OU0UsIC8vUmVzcG9uc2UgdG8gTk9MIGRhdGVkXHJcbiAgICAgICAgICAgICAgICAvL3ZtLmFsbEFjdGl2aXRpZXMuTk9USUZJQ0FUSU9OX0lOVEVSUlVQVF9TQUxFLC8vTm90aWZpY2F0aW9uIEludGVycnVwdGlvbiBvZiBTYWxlXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBST0NFU1NJTkdfQ0xBUklGX1JFU1BPTlNFLCAvL1Jlc3BvbnNlIHRvIHByb2Nlc3NpbmcgQ2xhcmlmaWNhdGlvbiBSZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlFVQUxfQ0xJTl9DTEFSSUZfUkVTUE9OU0UsIC8vUmVzcG9uc2UgdG8gcXVhbGl0eSBhbmQgQ2xpbmljYWwgY2xhcmlmaWNhdGlvbiBSRXF1ZXN0XHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlFVQUxfQ0xBUklGX1JFU1BPTlNFLCAvL1Jlc3BvbnNlIHRvIFF1YWxpdHkgQ2xhcmlmaWNhdGlvbiByZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlJFQ09OX0RFQ0lTX0xUUl9JTlRFTlQsLy8gUmVjb25zaWRlcmF0aW9uIG9mIERlY2lzaW9uIC0gTGV0dGVyIG9mIEludGVudFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5SRUNPTl9ERUNJU19SUV9SRUNPTiwgLy9SZWNvbnNpZGVyYXRpb24gb2YgRGVjaXNpb24gLSBSZXF1ZXN0IGZvciBSZWNvbnNpZGVyYXRpb25cclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUkVDT05fREVDSVNfT1RIRVJfSU5GTywvLyBSZWNvbnNpZGVyYXRpb24gb2YgRGVjaXNpb24gLSBPdGhlciBJbmZvcm1hdGlvblxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5TQ1JFRU5JTkdfQUNDRVBUX1JFU1BPTlNFLCAvL3Jlc3BvbnNlIHRvIHNjcmVlbmluZyBhY2NlcHRhbmNlIGxldHRlclxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5TQ1JFRU5JTkdfQ0xBUklGX1JFU1BPTlNFLCAvLyByZXNwb25zZSB0byBzY3JlZW5pbmcgY2xhcmlmaWNhdGlvbiByZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlNETl9SRVNQT05TRSwgLy9yZXNwb25zZSB0byBTRE5cclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUEhPTkVfUlFfUkVTUE9OU0UsIC8vUmVzcG9uc2UgdG8gdGVsZXBob25lIFJlcXVlc3RcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuVU5TT0xJQ0lURURfREFUQSAvL1Vuc29saWNpdGVkIERhdGFcclxuICAgICAgICAgICAgICAgIC8vdm0uYWxsQWN0aXZpdGllcy5TRVFVRU5DRV9DTEVBTlVQIC8vIFNlcXVlbmNlIGNsZWFudXAgYXMgcGVyIGVtYWlsIEZFYiAxNiwgMjAxOFxyXG4gICAgICAgICAgICBdKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGdldE5EU0FycmF5KCkge1xyXG4gICAgICAgICAgICByZXR1cm4gKFtcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuQURNSU5JU1RSQVRJVkUsIC8vYWRtaW5pc3RyYXRpdmVcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuQ0FOQ0VMX0xFVFRFUiwgLy9jYW5jZWxsYXRpb24gbGV0dGVyXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkNPTU1FTlRTX05PQywgLy8gY29tbWVudHMgb24gbm90aWNlIG9mIGRlY2lzaW9uXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkNPTU1FTlRTX1NVTU1BUllfQkFTSVMsIC8vY29tbW1lbnRzIG9uIHN1bW1hcnkgYmFzaXMsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkNPTU1FTlRTX1JFR1VMQVJUT1JZX0RFQ0lTSU9OLCAvL2NvbW1tZW50cyBvbiBDT01NRU5UU19SRUdVTEFSVE9SWV9ERUNJU0lPTiBiYXNpc1xyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5EUlVHX05PVElGX0ZPUk0sIC8vIGRydWcgbm90aWZpY2F0aW9uIGZvcm1cclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuSU5JVElBTCwgLy9Jbml0aWFsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLk1FRVRJTkdfTUlOVVRFUywgLy9taW51dGVzIG9mIG1lZXRpbmcgZGF0ZWRcclxuICAgICAgICAgICAgICAgLy8gdm0uYWxsQWN0aXZpdGllcy5OT1RJRklDQVRJT05fSU5URVJSVVBUX1NBTEUsLy9Ob3RpZmljYXRpb24gSW50ZXJydXB0aW9uIG9mIFNhbGVcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUE9TVF9DTEVBUkFOQ0VfREFUQSwgLy9wb3N0IGNsZWFyYW5jZSBkYXRhXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBSRVNVQl9NRUVUSU5HX1BLRywgLy8gcHJlc3VibWlzc2lvbiBtZWV0aW5nIHBhY2thZ2VcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUFJFU1VCX01FRVRJTkdfUlEsICAgLy9zdWJtaXNzaW9uIE1lZXRpbmcgUmVxdWVzdCAtdXNlZCB0byBiZSBwcmVzdWJcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUFJJU1RJTkVfUE0sIC8vIFByaXN0aW5lIFBNXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBSSVNUSU5FX1BNXzJMQU5HLCAvLyBwcmlzdGluZSBQTSBzZWNvbmQgbGFuZ3VhZ2VcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuQkVfQ0xBUklGX1JFU1BPTlNFLCAvL1Jlc3BvbnNlIHRvIEJFIGNsYXJpZmljYXRpb24gcmVxdWVzdCBkYXRlZC4uXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkNMSU5fQ0xBUklGX1JFU1BPTlNFLCAvL1Jlc3BvbnNlIHRvIGNsaW5pY2FsIGNsYXJpZmlhY3Rpb24gcmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5FTUFJTF9SUV9SRVNQT05TRSwvLyByZXNwb25zZSB0byBlbWFpbCByZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkxBQkVMX0NMQVJJRl9SRVNQT05TRSwgLy9SZXNwb25zZSB0byBsYWJlbGxpbmcgY2xhcmlmaWNhdGlvbiByZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkxBQkVMX1BSRUFQUFJPVkFMXzJMQU5HLCAvL1NlY29uZCBMYW5ndWFnZSBMYWJlbCAtIFByZS1BcHByb3ZhbFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5OT0NfUkVTUE9OU0UsIC8vcmVzcG9uc2UgdG8gTk9DLyBjLVFuXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLk5PRF9SRVNQT05TRSwgLy9SZXNwb25zZSB0byBOT0RcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuTk9OX1JFU1BPTlNFLCAvL1Jlc3BvbnNlIHRvIE5PTlxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5QUk9DRVNTSU5HX0NMQVJJRl9SRVNQT05TRSwgLy9SZXNwb25zZSB0byBwcm9jZXNzaW5nIENsYXJpZmljYXRpb24gUmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5RVUFMX0NMSU5fQ0xBUklGX1JFU1BPTlNFLCAvL1Jlc3BvbnNlIHRvIHF1YWxpdHkgYW5kIENsaW5pY2FsIGNsYXJpZmljYXRpb24gUkVxdWVzdFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5RVUFMX0NMQVJJRl9SRVNQT05TRSwgLy9SZXNwb25zZSB0byBRdWFsaXR5IENsYXJpZmljYXRpb24gcmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5SRUNPTl9ERUNJU19MVFJfSU5URU5ULC8vIFJlY29uc2lkZXJhdGlvbiBvZiBEZWNpc2lvbiAtIExldHRlciBvZiBJbnRlbnRcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUkVDT05fREVDSVNfUlFfUkVDT04sIC8vUmVjb25zaWRlcmF0aW9uIG9mIERlY2lzaW9uIC0gUmVxdWVzdCBmb3IgUmVjb25zaWRlcmF0aW9uXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlJFQ09OX0RFQ0lTX09USEVSX0lORk8sLy8gUmVjb25zaWRlcmF0aW9uIG9mIERlY2lzaW9uIC0gT3RoZXIgSW5mb3JtYXRpb25cclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuU0NSRUVOSU5HX0FDQ0VQVF9SRVNQT05TRSwgLy9yZXNwb25zZSB0byBzY3JlZW5pbmcgYWNjZXB0YW5jZSBsZXR0ZXJcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuU0NSRUVOSU5HX0NMQVJJRl9SRVNQT05TRSwgLy8gcmVzcG9uc2UgdG8gc2NyZWVuaW5nIGNsYXJpZmljYXRpb24gcmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5TRE5fUkVTUE9OU0UsIC8vcmVzcG9uc2UgdG8gU0ROXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBIT05FX1JRX1JFU1BPTlNFLCAvL1Jlc3BvbnNlIHRvIHRlbGVwaG9uZSBSZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlVOU09MSUNJVEVEX0RBVEEsIC8vVW5zb2xpY2l0ZWQgRGF0YVxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5DT1JSX1BBVEVOVF9NRUQsIC8vQ29ycmVzcG9uZGVuY2UgLSBQYXRlbnRlZCBNZWRpY2luZXNcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuQUxMRUdBVElPTl9OT1RJQ0UsIC8vTm90aWNlIG9mIGFsbGVnYXRpb25cclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuRk9STV9JViwgLy9Gb3JtIElWXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkZPUk1fViwgLy9Gb3JtIFZcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuQ09OU0VOVF9MVFIsIC8vQ29uc2VudCBMZXR0ZXJcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuREFUQV9QUk9URUNUX0NPUlJFU1AsIC8vQ29ycmVzcG9uZGVuY2UgLSBEYXRhIFByb3RlY3Rpb25cclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuTk9OQ0xJTl9DTEFSSUZfUkVTUE9OU0UgLy9yZXNwb25zZSB0byBOb25jbGluaWNhbCBjbGFyaWZpY2F0aW9uIHJlcXVlc3RcclxuICAgICAgICAgICAgICAgIC8vdm0uYWxsQWN0aXZpdGllcy5TRVFVRU5DRV9DTEVBTlVQIC8vIFNlcXVlbmNlIGNsZWFudXAgYXMgcGVyIGVtYWlsIEZFYiAxNiwgMjAxOFxyXG4gICAgICAgICAgICBdKVxyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGdldFBTVVJDQXJyYXkoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAoW1xyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5DQU5DRUxfTEVUVEVSLCAvL2NhbmNlbGxhdGlvbiBsZXR0ZXJcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuQ09NTUVOVFNfU1VNTUFSWV9CQVNJUywgLy9jb21tbWVudHMgb24gc3VtbWFyeSBiYXNpcyBvZiBkZWNpc2lvbiAoU0JEKVxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5GT1JfUEVSSU9ELCAvL2ZvciBwZXJpb2Qgb2YgLi4uLlxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5DTElOX0NMQVJJRl9SRVNQT05TRSwgLy9SZXNwb25zZSB0byBjbGluaWNhbCBjbGFyaWZpYWN0aW9uIHJlcXVlc3RcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuRU1BSUxfUlFfUkVTUE9OU0UsLy8gcmVzcG9uc2UgdG8gZW1haWwgcmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5NRUVUSU5HX01JTlVURVMsIC8vbWludXRlcyBvZiBtZWV0aW5nIGRhdGVkXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLk1IUERfUlFfUkVTUE9OU0UsIC8vUmVzcG9uc2UgdG8gTUhQRCByZXF1ZXN0c1xyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5QUk9DRVNTSU5HX0NMQVJJRl9SRVNQT05TRSwgLy9SZXNwb25zZSB0byBwcm9jZXNzaW5nIENsYXJpZmljYXRpb24gUmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5VTlNPTElDSVRFRF9EQVRBLCAvL1Vuc29saWNpdGVkIERhdGFcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUEhPTkVfUlFfUkVTUE9OU0UvL1Jlc3BvbnNlIHRvIHRlbGVwaG9uZSBSZXF1ZXN0XHJcbiAgICAgICAgICAgIF0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZ2V0UFNVUlBWQXJyYXkoKSB7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gKFtcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuQ0FOQ0VMX0xFVFRFUiwgLy9jYW5jZWxsYXRpb24gbGV0dGVyXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkZPUl9QRVJJT0QsIC8vZm9yIHBlcmlvZCBvZiAuLi4uXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkVNQUlMX1JRX1JFU1BPTlNFLC8vIHJlc3BvbnNlIHRvIGVtYWlsIHJlcXVlc3RcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuTUVFVElOR19NSU5VVEVTLCAvL21pbnV0ZXMgb2YgbWVldGluZyBkYXRlZFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5NSFBEX1JRX1JFU1BPTlNFLCAvL1Jlc3BvbnNlIHRvIE1IUEQgcmVxdWVzdHNcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUFJPQ0VTU0lOR19DTEFSSUZfUkVTUE9OU0UsIC8vUmVzcG9uc2UgdG8gcHJvY2Vzc2luZyBDbGFyaWZpY2F0aW9uIFJlcXVlc3RcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuVU5TT0xJQ0lURURfREFUQSwgLy9VbnNvbGljaXRlZCBEYXRhXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBIT05FX1JRX1JFU1BPTlNFLCAvL1Jlc3BvbnNlIHRvIHRlbGVwaG9uZSBSZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkNMSU5fQ0xBUklGX1JFU1BPTlNFIC8vUmVzcG9uc2UgdG8gY2xpbmljYWwgY2xhcmlmaWNhdGlvbiByZXF1ZXN0XHJcbiAgICAgICAgICAgIF0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZ2V0Uk1QUFZBcnJheSgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIChbXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkNBTkNFTF9MRVRURVIsIC8vY2FuY2VsbGF0aW9uIGxldHRlclxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5FTUFJTF9SUV9SRVNQT05TRSwvLyByZXNwb25zZSB0byBlbWFpbCByZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLk1FRVRJTkdfTUlOVVRFUywgLy9taW51dGVzIG9mIG1lZXRpbmcgZGF0ZWRcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuTUhQRF9SUV9SRVNQT05TRSwgLy9SZXNwb25zZSB0byBNSFBEIHJlcXVlc3RzXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBST0NFU1NJTkdfQ0xBUklGX1JFU1BPTlNFLCAvL1Jlc3BvbnNlIHRvIHByb2Nlc3NpbmcgQ2xhcmlmaWNhdGlvbiBSZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBIT05FX1JRX1JFU1BPTlNFLCAvL1Jlc3BvbnNlIHRvIHRlbGVwaG9uZSBSZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlVOU09MSUNJVEVEX0RBVEEsIC8vVW5zb2xpY2l0ZWQgRGF0YVxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5STVBfVkVSU0lPTl9EQVRFLCAvL1JNUCB2ZXJpc29uXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkNMSU5fQ0xBUklGX1JFU1BPTlNFIC8vUmVzcG9uc2UgdG8gY2xpbmljYWwgY2xhcmlmaWNhdGlvbiByZXF1ZXN0XHJcbiAgICAgICAgICAgIF0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZ2V0U0FORFNBcnJheSgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIChbXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkFETUlOSVNUUkFUSVZFLCAvL2FkbWluaXN0cmF0aXZlXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkNBTkNFTF9MRVRURVIsIC8vY2FuY2VsbGF0aW9uIGxldHRlclxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5DT01NRU5UU19OT0MsIC8vIGNvbW1lbnRzIG9uIG5vdGljZSBvZiBkZWNpc2lvblxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5EUlVHX05PVElGX0ZPUk0sIC8vIGRydWcgbm90aWZpY2F0aW9uIGZvcm1cclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuTUVFVElOR19NSU5VVEVTLCAvL21pbnV0ZXMgb2YgbWVldGluZyBkYXRlZFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5QT1NUX0NMRUFSQU5DRV9EQVRBLCAvL3Bvc3QgY2xlYXJhbmNlIGRhdGFcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUE9TVF9OT0NfQ0hBTkdFLCAvL1Bvc3QgTk9DIGNoYW5nZVxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5QUklTVElORV9QTSwgLy8gUHJpc3RpbmUgUE1cclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUFJJU1RJTkVfUE1fMkxBTkcsIC8vIHByaXN0aW5lIFBNIHNlY29uZCBsYW5ndWFnZVxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5CRV9DTEFSSUZfUkVTUE9OU0UsIC8vUmVzcG9uc2UgdG8gQkUgY2xhcmlmaWNhdGlvbiByZXF1ZXN0IGRhdGVkLi5cclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuQ0xJTl9DTEFSSUZfUkVTUE9OU0UsIC8vUmVzcG9uc2UgdG8gY2xpbmljYWwgY2xhcmlmaWFjdGlvbiByZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkVNQUlMX1JRX1JFU1BPTlNFLC8vIHJlc3BvbnNlIHRvIGVtYWlsIHJlcXVlc3RcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuTEFCRUxfQ0xBUklGX1JFU1BPTlNFLCAvL1Jlc3BvbnNlIHRvIGxhYmVsbGluZyBjbGFyaWZpY2F0aW9uIHJlcXVlc3RcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuTEFCRUxfUFJFQVBQUk9WQUxfMkxBTkcsIC8vU2Vjb25kIExhbmd1YWdlIExhYmVsIC0gUHJlLUFwcHJvdmFsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLk5PQ19SRVNQT05TRSwgLy9yZXNwb25zZSB0byBOT0MvIGMtUW5cclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuTk9EX1JFU1BPTlNFLCAvL1Jlc3BvbnNlIHRvIE5PRFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5OT05fUkVTUE9OU0UsIC8vUmVzcG9uc2UgdG8gTk9OXHJcbiAgICAgICAgICAgICAgICAvL3ZtLmFsbEFjdGl2aXRpZXMuTk9USUZJQ0FUSU9OX0lOVEVSUlVQVF9TQUxFLC8vTm90aWZpY2F0aW9uIEludGVycnVwdGlvbiBvZiBTYWxlXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBSRVNVQl9NRUVUSU5HX1BLRywgLy9zdWJtaXNzaW9uL3ByZXN1Ym1pc3Npb24gbWVldGluZyBwYWNrYWdlXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBSRVNVQl9NRUVUSU5HX1JRLCAgIC8vc3VibWlzc2lvbiBNZWV0aW5nIFJlcXVlc3QgLXVzZWQgdG8gYmUgcHJlc3ViXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBST0NFU1NJTkdfQ0xBUklGX1JFU1BPTlNFLCAvL1Jlc3BvbnNlIHRvIHByb2Nlc3NpbmcgQ2xhcmlmaWNhdGlvbiBSZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlFVQUxfQ0xJTl9DTEFSSUZfUkVTUE9OU0UsIC8vUmVzcG9uc2UgdG8gcXVhbGl0eSBhbmQgQ2xpbmljYWwgY2xhcmlmaWNhdGlvbiBSRXF1ZXN0XHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlFVQUxfQ0xBUklGX1JFU1BPTlNFLCAvL1Jlc3BvbnNlIHRvIFF1YWxpdHkgQ2xhcmlmaWNhdGlvbiByZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlJFQ09OX0RFQ0lTX0xUUl9JTlRFTlQsLy8gUmVjb25zaWRlcmF0aW9uIG9mIERlY2lzaW9uIC0gTGV0dGVyIG9mIEludGVudFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5SRUNPTl9ERUNJU19SUV9SRUNPTiwgLy9SZWNvbnNpZGVyYXRpb24gb2YgRGVjaXNpb24gLSBSZXF1ZXN0IGZvciBSZWNvbnNpZGVyYXRpb25cclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUkVDT05fREVDSVNfT1RIRVJfSU5GTywvLyBSZWNvbnNpZGVyYXRpb24gb2YgRGVjaXNpb24gLSBPdGhlciBJbmZvcm1hdGlvblxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5TQ1JFRU5JTkdfQUNDRVBUX1JFU1BPTlNFLCAvL3Jlc3BvbnNlIHRvIHNjcmVlbmluZyBhY2NlcHRhbmNlIGxldHRlclxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5TQ1JFRU5JTkdfQ0xBUklGX1JFU1BPTlNFLCAvLyByZXNwb25zZSB0byBzY3JlZW5pbmcgY2xhcmlmaWNhdGlvbiByZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlNETl9SRVNQT05TRSwgLy9yZXNwb25zZSB0byBTRE5cclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUEhPTkVfUlFfUkVTUE9OU0UsIC8vUmVzcG9uc2UgdG8gdGVsZXBob25lIFJlcXVlc3RcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuVU5TT0xJQ0lURURfREFUQSwgLy9VbnNvbGljaXRlZCBEYXRhXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkNPUlJfUEFURU5UX01FRCwgLy9Db3JyZXNwb25kZW5jZSAtIFBhdGVudGVkIE1lZGljaW5lc1xyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5BTExFR0FUSU9OX05PVElDRSwgLy9Ob3RpY2Ugb2YgYWxsZWdhdGlvblxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5GT1JNX0lWLCAvL0Zvcm0gSVZcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuRk9STV9WLCAvL0Zvcm0gVlxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5DT05TRU5UX0xUUiwgLy9Db25zZW50IExldHRlclxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5EQVRBX1BST1RFQ1RfQ09SUkVTUCAvL0NvcnJlc3BvbmRlbmNlIC0gRGF0YSBQcm90ZWN0aW9uXHJcbiAgICAgICAgICAgICAgICAvL3ZtLmFsbEFjdGl2aXRpZXMuU0VRVUVOQ0VfQ0xFQU5VUCAvLyBTZXF1ZW5jZSBjbGVhbnVwIGFzIHBlciBlbWFpbCBGRWIgMTYsIDIwMThcclxuICAgICAgICAgICAgXSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBnZXRTTkRTQXJyYXkoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAoW1xyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5BRE1JTklTVFJBVElWRSwgLy9hZG1pbmlzdHJhdGl2ZVxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5DQU5DRUxfTEVUVEVSLCAvL2NhbmNlbGxhdGlvbiBsZXR0ZXJcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuQ09NTUVOVFNfTk9DLCAvLyBjb21tZW50cyBvbiBub3RpY2Ugb2YgZGVjaXNpb25cclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuQ09NTUVOVFNfU1VNTUFSWV9CQVNJUywgLy9jb21tbWVudHMgb24gc3VtbWFyeSBiYXNpcyxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuQ09NTUVOVFNfUkVHVUxBUlRPUllfREVDSVNJT04sIC8vY29tbW1lbnRzIG9uIENPTU1FTlRTX1JFR1VMQVJUT1JZX0RFQ0lTSU9OXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkRSVUdfTk9USUZfRk9STSwgLy8gZHJ1ZyBub3RpZmljYXRpb24gZm9ybVxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5NRUVUSU5HX01JTlVURVMsIC8vbWludXRlcyBvZiBtZWV0aW5nIGRhdGVkXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBBTkRFTUlDX0FQUEwsIC8vUGFuZGVtaWMgYXBwbGljYXRpb25cclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUE9TVF9DTEVBUkFOQ0VfREFUQSwgLy9wb3N0IGNsZWFyYW5jZSBkYXRhXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBPU1RfTk9DX0NIQU5HRSwgLy9Qb3N0IE5PQyBjaGFuZ2VcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUFJFU1VCX01FRVRJTkdfUEtHLCAvLyBzdWJtaXNzaW9uIG1lZXRpbmcgcGFja2FnZVxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5QUkVTVUJfTUVFVElOR19SUSwgICAvL3N1Ym1pc3Npb24gTWVldGluZyBSZXF1ZXN0IC11c2VkIHRvIGJlIHByZXN1YlxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5QUklTVElORV9QTSwgLy8gUHJpc3RpbmUgUE1cclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUFJJU1RJTkVfUE1fMkxBTkcsIC8vIHByaXN0aW5lIFBNIHNlY29uZCBsYW5ndWFnZVxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5CRV9DTEFSSUZfUkVTUE9OU0UsIC8vUmVzcG9uc2UgdG8gQkUgY2xhcmlmaWNhdGlvbiByZXF1ZXN0IGRhdGVkLi5cclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuQ0xJTl9DTEFSSUZfUkVTUE9OU0UsIC8vUmVzcG9uc2UgdG8gY2xpbmljYWwgY2xhcmlmaWFjdGlvbiByZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkVNQUlMX1JRX1JFU1BPTlNFLC8vIHJlc3BvbnNlIHRvIGVtYWlsIHJlcXVlc3RcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuTEFCRUxfQ0xBUklGX1JFU1BPTlNFLCAvL1Jlc3BvbnNlIHRvIGxhYmVsbGluZyBjbGFyaWZpY2F0aW9uIHJlcXVlc3RcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuTEFCRUxfUFJFQVBQUk9WQUxfMkxBTkcsIC8vU2Vjb25kIExhbmd1YWdlIExhYmVsIC0gUHJlLUFwcHJvdmFsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLk5PQ19SRVNQT05TRSwgLy9yZXNwb25zZSB0byBOT0MvIGMtUW5cclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuTk9EX1JFU1BPTlNFLCAvL1Jlc3BvbnNlIHRvIE5PRFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5OT05fUkVTUE9OU0UsIC8vUmVzcG9uc2UgdG8gTk9OXHJcbiAgICAgICAgICAgICAgIC8vIHZtLmFsbEFjdGl2aXRpZXMuTk9USUZJQ0FUSU9OX0lOVEVSUlVQVF9TQUxFLC8vTm90aWZpY2F0aW9uIEludGVycnVwdGlvbiBvZiBTYWxlXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBST0NFU1NJTkdfQ0xBUklGX1JFU1BPTlNFLCAvL1Jlc3BvbnNlIHRvIHByb2Nlc3NpbmcgQ2xhcmlmaWNhdGlvbiBSZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlFVQUxfQ0xJTl9DTEFSSUZfUkVTUE9OU0UsIC8vUmVzcG9uc2UgdG8gcXVhbGl0eSBhbmQgQ2xpbmljYWwgY2xhcmlmaWNhdGlvbiBSRXF1ZXN0XHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlFVQUxfQ0xBUklGX1JFU1BPTlNFLCAvL1Jlc3BvbnNlIHRvIFF1YWxpdHkgQ2xhcmlmaWNhdGlvbiByZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlJFQ09OX0RFQ0lTX0xUUl9JTlRFTlQsLy8gUmVjb25zaWRlcmF0aW9uIG9mIERlY2lzaW9uIC0gTGV0dGVyIG9mIEludGVudFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5SRUNPTl9ERUNJU19SUV9SRUNPTiwgLy9SZWNvbnNpZGVyYXRpb24gb2YgRGVjaXNpb24gLSBSZXF1ZXN0IGZvciBSZWNvbnNpZGVyYXRpb25cclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUkVDT05fREVDSVNfT1RIRVJfSU5GTywvLyBSZWNvbnNpZGVyYXRpb24gb2YgRGVjaXNpb24gLSBPdGhlciBJbmZvcm1hdGlvblxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5TQ1JFRU5JTkdfQUNDRVBUX1JFU1BPTlNFLCAvL3Jlc3BvbnNlIHRvIHNjcmVlbmluZyBhY2NlcHRhbmNlIGxldHRlclxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5TQ1JFRU5JTkdfQ0xBUklGX1JFU1BPTlNFLCAvLyByZXNwb25zZSB0byBzY3JlZW5pbmcgY2xhcmlmaWNhdGlvbiByZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlNETl9SRVNQT05TRSwgLy9yZXNwb25zZSB0byBTRE5cclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUEhPTkVfUlFfUkVTUE9OU0UsIC8vUmVzcG9uc2UgdG8gdGVsZXBob25lIFJlcXVlc3RcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuVU5TT0xJQ0lURURfREFUQSwgLy9VbnNvbGljaXRlZCBEYXRhXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkNPUlJfUEFURU5UX01FRCwgLy9Db3JyZXNwb25kZW5jZSAtIFBhdGVudGVkIE1lZGljaW5lc1xyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5BTExFR0FUSU9OX05PVElDRSwgLy9Ob3RpY2Ugb2YgYWxsZWdhdGlvblxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5GT1JNX0lWLCAvL0Zvcm0gSVZcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuRk9STV9WLCAvL0Zvcm0gVlxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5DT05TRU5UX0xUUiwgLy9Db25zZW50IExldHRlclxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5EQVRBX1BST1RFQ1RfQ09SUkVTUCwgLy9Db3JyZXNwb25kZW5jZSAtIERhdGEgUHJvdGVjdGlvblxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5OT05DTElOX0NMQVJJRl9SRVNQT05TRSAvL3Jlc3BvbnNlIHRvIE5vbmNsaW5pY2FsIGNsYXJpZmljYXRpb24gcmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgLy92bS5hbGxBY3Rpdml0aWVzLlNFUVVFTkNFX0NMRUFOVVAgLy8gU2VxdWVuY2UgY2xlYW51cCBhcyBwZXIgZW1haWwgRkViIDE2LCAyMDE4XHJcbiAgICAgICAgICAgIF0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZ2V0U05EU0NBcnJheSgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIChbXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkNBTkNFTF9MRVRURVIsIC8vY2FuY2VsbGF0aW9uIGxldHRlclxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5DT01NRU5UU19OT0MsIC8vIGNvbW1lbnRzIG9uIG5vdGljZSBvZiBkZWNpc2lvblxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5DT01NRU5UU19TVU1NQVJZX0JBU0lTLCAvL2NvbW1tZW50cyBvbiBzdW1tYXJ5IGJhc2lzIG9mIGRlY2lzaW9uIChTQkQpXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkxBQkVMX1BSRUFQUFJPVkFMXzJMQU5HLCAvL1NlY29uZCBMYW5ndWFnZSBMYWJlbCAtIFByZS1BcHByb3ZhbFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5NRUVUSU5HX01JTlVURVMsIC8vbWludXRlcyBvZiBtZWV0aW5nIGRhdGVkXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBPU1RfTk9DX0NIQU5HRSwgLy9Qb3N0IE5PQyBjaGFuZ2VcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUFJJU1RJTkVfUE0sIC8vIFByaXN0aW5lIFBNXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBSSVNUSU5FX1BNXzJMQU5HLCAvLyBwcmlzdGluZSBQTSBzZWNvbmQgbGFuZ3VhZ2VcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuQ0xJTl9DTEFSSUZfUkVTUE9OU0UsIC8vUmVzcG9uc2UgdG8gY2xpbmljYWwgY2xhcmlmaWFjdGlvbiByZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkVNQUlMX1JRX1JFU1BPTlNFLC8vIHJlc3BvbnNlIHRvIGVtYWlsIHJlcXVlc3RcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuTEFCRUxfQ0xBUklGX1JFU1BPTlNFLCAvL1Jlc3BvbnNlIHRvIGxhYmVsbGluZyBjbGFyaWZpY2F0aW9uIHJlcXVlc3RcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuTk9DX1JFU1BPTlNFLCAvL3Jlc3BvbnNlIHRvIE5PQy8gYy1RblxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5OT0RfUkVTUE9OU0UsIC8vUmVzcG9uc2UgdG8gTk9EXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLk5PTl9SRVNQT05TRSwgLy9SZXNwb25zZSB0byBOT05cclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUFJPQ0VTU0lOR19DTEFSSUZfUkVTUE9OU0UsIC8vUmVzcG9uc2UgdG8gcHJvY2Vzc2luZyBDbGFyaWZpY2F0aW9uIFJlcXVlc3RcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUEhPTkVfUlFfUkVTUE9OU0UsIC8vUmVzcG9uc2UgdG8gdGVsZXBob25lIFJlcXVlc3RcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUE9TVF9DTEVBUkFOQ0VfREFUQSwgLy9wb3N0IGNsZWFyYW5jZSBkYXRhXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlJFQ09OX0RFQ0lTX0xUUl9JTlRFTlQsLy8gUmVjb25zaWRlcmF0aW9uIG9mIERlY2lzaW9uIC0gTGV0dGVyIG9mIEludGVudFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5SRUNPTl9ERUNJU19SUV9SRUNPTiwgLy9SZWNvbnNpZGVyYXRpb24gb2YgRGVjaXNpb24gLSBSZXF1ZXN0IGZvciBSZWNvbnNpZGVyYXRpb25cclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUkVDT05fREVDSVNfT1RIRVJfSU5GTywvLyBSZWNvbnNpZGVyYXRpb24gb2YgRGVjaXNpb24gLSBPdGhlciBJbmZvcm1hdGlvblxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5TQ1JFRU5JTkdfQUNDRVBUX1JFU1BPTlNFLCAvL3Jlc3BvbnNlIHRvIHNjcmVlbmluZyBhY2NlcHRhbmNlIGxldHRlclxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5TQ1JFRU5JTkdfQ0xBUklGX1JFU1BPTlNFLCAvLyByZXNwb25zZSB0byBzY3JlZW5pbmcgY2xhcmlmaWNhdGlvbiByZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlNETl9SRVNQT05TRSwgLy9yZXNwb25zZSB0byBTRE5cclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuQ09SUl9QQVRFTlRfTUVELCAvL0NvcnJlc3BvbmRlbmNlIC0gUGF0ZW50ZWQgTWVkaWNpbmVzXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkFMTEVHQVRJT05fTk9USUNFLCAvL05vdGljZSBvZiBhbGxlZ2F0aW9uXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkZPUk1fSVYsIC8vRm9ybSBJVlxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5GT1JNX1YsIC8vRm9ybSBWXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkNPTlNFTlRfTFRSLCAvL0NvbnNlbnQgTGV0dGVyXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlVOU09MSUNJVEVEX0RBVEEsIC8vVW5zb2xpY2l0ZWQgRGF0YVxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5EQVRBX1BST1RFQ1RfQ09SUkVTUCAvL0NvcnJlc3BvbmRlbmNlIC0gRGF0YSBQcm90ZWN0aW9uXHJcbiAgICAgICAgICAgICAgICAvL3ZtLmFsbEFjdGl2aXRpZXMuU0VRVUVOQ0VfQ0xFQU5VUCAvLyBTZXF1ZW5jZSBjbGVhbnVwIGFzIHBlciBlbWFpbCBGRWIgMTYsIDIwMThcclxuICAgICAgICAgICAgXSk7XHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZ2V0VURQVkFycmF5KCkge1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIChbXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkJFTkVGSVRfUklTS19BU1NFU1MsIC8vYmVuZWZpdCByaXNrIGFzc2Vzc21lbnRcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuQ0FOQ0VMX0xFVFRFUiwgLy9jYW5jZWxsYXRpb24gbGV0dGVyXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLk5PVElGSUNBVElPTl9DSEFOR0UsIC8vbm90aWZpY2FpdG9uIG9mIGNoYW5nZSBpbiBiZW5lZml0IHByb2ZpbGVcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUE9TVF9NQVJLRVRfU1VSViwgLy8gcG9zdCBtYXJrZXRpbmcgc3VydmVpbGxhbmNlXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkVNQUlMX1JRX1JFU1BPTlNFLC8vIHJlc3BvbnNlIHRvIGVtYWlsIHJlcXVlc3RcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuTUVFVElOR19NSU5VVEVTLCAvL21pbnV0ZXMgb2YgbWVldGluZyBkYXRlZFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5NSFBEX1JRX1JFU1BPTlNFLCAvL1Jlc3BvbnNlIHRvIE1IUEQgcmVxdWVzdHNcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUFJFU1VCX01FRVRJTkdfUEtHLCAvL3N1Ym1pc3Npb24vcHJlc3VibWlzc2lvbiBtZWV0aW5nIHBhY2thZ2VcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUFJFU1VCX01FRVRJTkdfUlEsICAgLy9zdWJtaXNzaW9uIE1lZXRpbmcgUmVxdWVzdCAtdXNlZCB0byBiZSBwcmVzdWJcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUFJPQ0VTU0lOR19DTEFSSUZfUkVTUE9OU0UsIC8vUmVzcG9uc2UgdG8gcHJvY2Vzc2luZyBDbGFyaWZpY2F0aW9uIFJlcXVlc3RcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUEhPTkVfUlFfUkVTUE9OU0UsIC8vUmVzcG9uc2UgdG8gdGVsZXBob25lIFJlcXVlc3RcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUklTS19DT01NVU5fRE9DLCAvL1Jpc2sgY29tbXVuaWNhdGlvbiBkb2N1bWVudFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5VTlNPTElDSVRFRF9EQVRBLCAvL1Vuc29saWNpdGVkIERhdGFcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuU0lHTkFMX1dPUktfVVAgLy9TaWduYWwgV29yayB1cFxyXG4gICAgICAgICAgICBdKVxyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGdldFVEUkFBcnJheSgpIHtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiAoW1xyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5DQU5DRUxfTEVUVEVSLCAvL2NhbmNlbGxhdGlvbiBsZXR0ZXJcclxuICAgICAgICAgICAgICAgIC8vdm0uYWxsQWN0aXZpdGllcy5DTEFSSUZfUkVTUE9OU0UsIC8vUmVzcG9uc2UgdG8gY2xhcmlmaWNhdGlvbiByZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkRJTl9ESVNDT05USU5VRUQsIC8vIGRpbiBkaXNjb250aW51ZWRcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuQURWSVNFTUVOVF9MRVRURVJfUkVTUE9OU0UsIC8vUkVzcG9zZSB0byBBZHZpc2VtZW50IExldHRlciBkYXRlZFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5FTUFJTF9SUV9SRVNQT05TRSwvLyByZXNwb25zZSB0byBlbWFpbCByZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLk1FRVRJTkdfTUlOVVRFUywgLy9taW51dGVzIG9mIG1lZXRpbmcgZGF0ZWRcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUFJFU1VCX01FRVRJTkdfUEtHLCAvL3N1Ym1pc3Npb24vcHJlc3VibWlzc2lvbiBtZWV0aW5nIHBhY2thZ2VcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUFJFU1VCX01FRVRJTkdfUlEsICAgLy9zdWJtaXNzaW9uIE1lZXRpbmcgUmVxdWVzdCAtdXNlZCB0byBiZSBwcmVzdWJcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUFJPQ0VTU0lOR19DTEFSSUZfUkVTUE9OU0UsIC8vUmVzcG9uc2UgdG8gcHJvY2Vzc2luZyBDbGFyaWZpY2F0aW9uIFJlcXVlc3RcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUEhPTkVfUlFfUkVTUE9OU0UsIC8vUmVzcG9uc2UgdG8gdGVsZXBob25lIFJlcXVlc3RcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuTk9USUZJQ0FUSU9OX0lOVEVSUlVQVF9TQUxFLCAvL05vdGlmaWNhdGlvbiBvZiBpbnRlcnJ1cHV0aW9ucyBvZiBzYWxlLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5VTlNPTElDSVRFRF9EQVRBLCAvL1Vuc29saWNpdGVkIERhdGFcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuU0VRVUVOQ0VfQ0xFQU5VUCAvLyBTZXF1ZW5jZSBjbGVhbnVwIGFzIHBlciBlbWFpbCBGRWIgMTYsIDIwMThcclxuICAgICAgICAgICAgXSlcclxuXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBnZXRDb25zdWx0QXJyYXkoKSB7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gKFtcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUEFOREVNSUNfQVBQTCAvL3BhbmRlbWljIGFwcGxpY2FpdG9uLFxyXG4gICAgICAgICAgICBdKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gX2dldE1QTkNBcnJheSgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIChbXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkNBTkNFTF9MRVRURVIsIC8vY2FuY2VsbGF0aW9uIGxldHRlclxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5NRUVUSU5HX01JTlVURVMsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkVNQUlMX1JRX1JFU1BPTlNFLC8vIHJlc3BvbnNlIHRvIGVtYWlsIHJlcXVlc3RcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUFJPQ0VTU0lOR19DTEFSSUZfUkVTUE9OU0UsIC8vUmVzcG9uc2UgdG8gcHJvY2Vzc2luZyBDbGFyaWZpY2F0aW9uIFJlcXVlc3RcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUEhPTkVfUlFfUkVTUE9OU0UsIC8vUmVzcG9uc2UgdG8gdGVsZXBob25lIFJlcXVlc3QsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBSRVNVQl9NRUVUSU5HX1BLRywgLy9zdWJtaXNzaW9uIE1lZXRpbmcgUGFja2FnZVxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5QUkVTVUJfTUVFVElOR19SUSAgIC8vUHJlLXN1Ym1pc3Npb24gTWVldGluZyBSZXF1ZXN0XHJcbiAgICAgICAgICAgIF0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gX2dldE1QTkRTQXJyYXkoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAoW1xyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5DQU5DRUxfTEVUVEVSLCAvL2NhbmNlbGxhdGlvbiBsZXR0ZXJcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuTUVFVElOR19NSU5VVEVTLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5FTUFJTF9SUV9SRVNQT05TRSwvLyByZXNwb25zZSB0byBlbWFpbCByZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBST0NFU1NJTkdfQ0xBUklGX1JFU1BPTlNFLCAvL1Jlc3BvbnNlIHRvIHByb2Nlc3NpbmcgQ2xhcmlmaWNhdGlvbiBSZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBIT05FX1JRX1JFU1BPTlNFLCAvL1Jlc3BvbnNlIHRvIHRlbGVwaG9uZSBSZXF1ZXN0LFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5QUkVTVUJfTUVFVElOR19QS0csIC8vdWJtaXNzaW9uIE1lZXRpbmcgUGFja2FnZVxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5QUkVTVUJfTUVFVElOR19SUSAgIC8vUHJlLXN1Ym1pc3Npb24gTWVldGluZyBSZXF1ZXN0XHJcbiAgICAgICAgICAgIF0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gX2dldE1QU05EU0FycmF5KCkge1xyXG4gICAgICAgICAgICByZXR1cm4gKFtcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuQ0FOQ0VMX0xFVFRFUiwgLy9jYW5jZWxsYXRpb24gbGV0dGVyXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLk1FRVRJTkdfTUlOVVRFUyxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuRU1BSUxfUlFfUkVTUE9OU0UsLy8gcmVzcG9uc2UgdG8gZW1haWwgcmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5QUk9DRVNTSU5HX0NMQVJJRl9SRVNQT05TRSwgLy9SZXNwb25zZSB0byBwcm9jZXNzaW5nIENsYXJpZmljYXRpb24gUmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5QSE9ORV9SUV9SRVNQT05TRSwgLy9SZXNwb25zZSB0byB0ZWxlcGhvbmUgUmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5QUkVTVUJfTUVFVElOR19QS0csIC8vc3VibWlzc2lvbiBNZWV0aW5nIFBhY2thZ2VcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUFJFU1VCX01FRVRJTkdfUlEgICAvL3N1Ym1pc3Npb24gTWVldGluZyBSZXF1ZXN0XHJcbiAgICAgICAgICAgIF0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gX2dldFBBTkRBcnJheSgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIChbXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkJFX0NMQVJJRl9SRVNQT05TRSwgLy9SZXNwb25zZSB0byBCRSBjbGFyaWZpY2F0aW9uIHJlcXVlc3QgZGF0ZWQuLlxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5DQU5DRUxfTEVUVEVSLCAvL2NhbmNlbGxhdGlvbiBsZXR0ZXJcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuQ0xJTl9DTEFSSUZfUkVTUE9OU0UsIC8vUmVzcG9uc2UgdG8gY2xpbmljYWwgIENsYXJpZmljYXRpb24gcmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5DT01NRU5UU19OT0MsIC8vIGNvbW1lbnRzIG9uIG5vdGljZSBvZiBkZWNpc2lvblxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5EUlVHX05PVElGX0ZPUk0sIC8vIGRydWcgbm90aWZpY2F0aW9uIGZvcm1cclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuRU1BSUxfUlFfUkVTUE9OU0UsLy8gcmVzcG9uc2UgdG8gZW1haWwgcmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5JTklUSUFMLCAvL0luaXRpYWxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuTEFCRUxfUFJFQVBQUk9WQUxfMkxBTkcsIC8vU2Vjb25kIExhbmd1YWdlIExhYmVsIC0gUHJlLUFwcHJvdmFsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkxBQkVMX0NMQVJJRl9SRVNQT05TRSwgLy9SZXNwb25zZSB0byBsYWJlbGxpbmcgY2xhcmlmaWNhdGlvbiByZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLk1FRVRJTkdfTUlOVVRFUywgLy9taW51dGVzIG9mIG1lZXRpbmcgZGF0ZWRcclxuICAgICAgICAgICAgICAgIC8vdm0uYWxsQWN0aXZpdGllcy5OT1RJRklDQVRJT05fSU5URVJSVVBUX1NBTEUsLy9Ob3RpZmljYXRpb24gSW50ZXJydXB0aW9uIG9mIFNhbGVcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUE9TVF9DTEVBUkFOQ0VfREFUQSwgLy9wb3N0IGNsZWFyYW5jZSBkYXRhXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBST0NFU1NJTkdfQ0xBUklGX1JFU1BPTlNFLCAvL1Jlc3BvbnNlIHRvIHByb2Nlc3NpbmcgQ2xhcmlmaWNhdGlvbiBSZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBBTkRFTUlDX0FQUEwsIC8vUGFuZGVtaWMgYXBwbGljYXRpb25cclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUEhPTkVfUlFfUkVTUE9OU0UsIC8vUmVzcG9uc2UgdG8gdGVsZXBob25lIFJlcXVlc3RcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUFJJU1RJTkVfUE1fMkxBTkcsIC8vIHByaXN0aW5lIFBNIHNlY29uZCBsYW5ndWFnZVxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5QUklTVElORV9QTSwgLy8gUHJpc3RpbmUgUE1cclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUkVDT05fREVDSVNfTFRSX0lOVEVOVCwvLyBSZWNvbnNpZGVyYXRpb24gb2YgRGVjaXNpb24gLSBMZXR0ZXIgb2YgSW50ZW50XHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlJFQ09OX0RFQ0lTX1JRX1JFQ09OLCAvL1JlY29uc2lkZXJhdGlvbiBvZiBEZWNpc2lvbiAtIFJlcXVlc3QgZm9yIFJlY29uc2lkZXJhdGlvblxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5SRUNPTl9ERUNJU19PVEhFUl9JTkZPLC8vIFJlY29uc2lkZXJhdGlvbiBvZiBEZWNpc2lvbiAtIE90aGVyIEluZm9ybWF0aW9uXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlFVQUxfQ0xBUklGX1JFU1BPTlNFLCAvL1Jlc3BvbnNlIHRvIFF1YWxpdHkgQ2xhcmlmaWNhdGlvbiByZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlFVQUxfQ0xJTl9DTEFSSUZfUkVTUE9OU0UsIC8vUmVzcG9uc2UgdG8gcXVhbGl0eSBhbmQgQ2xpbmljYWwgY2xhcmlmaWNhdGlvbiBSRXF1ZXN0XHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlNDUkVFTklOR19BQ0NFUFRfUkVTUE9OU0UsIC8vcmVzcG9uc2UgdG8gc2NyZWVuaW5nIGFjY2VwdGFuY2UgbGV0dGVyXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlNDUkVFTklOR19DTEFSSUZfUkVTUE9OU0UsIC8vIHJlc3BvbnNlIHRvIHNjcmVlbmluZyBjbGFyaWZpY2F0aW9uIHJlcXVlc3RcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuU0ROX1JFU1BPTlNFLCAvL3Jlc3BvbnNlIHRvIFNETlxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5OT0NfUkVTUE9OU0UsIC8vcmVzcG9uc2UgdG8gTk9DLyBjLVFuXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLk5PRF9SRVNQT05TRSwgLy9SZXNwb25zZSB0byBOT0RcIlxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5OT05fUkVTUE9OU0UsIC8vUmVzcG9uc2UgdG8gTk9OXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlVOU09MSUNJVEVEX0RBVEEsIC8vVW5zb2xpY2l0ZWQgRGF0YVxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5DT1JSX1BBVEVOVF9NRUQsIC8vQ29ycmVzcG9uZGVuY2UgLSBQYXRlbnRlZCBNZWRpY2luZXNcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuQUxMRUdBVElPTl9OT1RJQ0UsIC8vTm90aWNlIG9mIGFsbGVnYXRpb25cclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuRk9STV9JViwgLy9Gb3JtIElWXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkZPUk1fViwgLy9Gb3JtIFZcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuQ09OU0VOVF9MVFIsIC8vQ29uc2VudCBMZXR0ZXJcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuREFUQV9QUk9URUNUX0NPUlJFU1AsIC8vQ29ycmVzcG9uZGVuY2UgLSBEYXRhIFByb3RlY3Rpb25cclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuTk9OQ0xJTl9DTEFSSUZfUkVTUE9OU0UgLy9yZXNwb25zZSB0byBOb25jbGluaWNhbCBjbGFyaWZpY2F0aW9uIHJlcXVlc3RcclxuICAgICAgICAgICAgICAgIC8vdm0uYWxsQWN0aXZpdGllcy5TRVFVRU5DRV9DTEVBTlVQIC8vIFNlcXVlbmNlIGNsZWFudXAgYXMgcGVyIGVtYWlsIEZFYiAxNiwgMjAxOFxyXG4gICAgICAgICAgICBdKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIF9nZXRQQlJFUkNBcnJheSgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIChbXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkNBTkNFTF9MRVRURVIsIC8vY2FuY2VsbGF0aW9uIGxldHRlclxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5DTElOX0NMQVJJRl9SRVNQT05TRSwgLy9SZXNwb25zZSB0byBjbGluaWNhbCBjbGFyaWZhY3Rpb24gcmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5DT01NRU5UU19TVU1NQVJZX0JBU0lTLCAvL2NvbW1tZW50cyBvbiBzdW1tYXJ5IGJhc2lzIG9mIGRlY2lzaW9uIChTQkQpXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkVNQUlMX1JRX1JFU1BPTlNFLC8vIHJlc3BvbnNlIHRvIGVtYWlsIHJlcXVlc3RcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuRk9SX1BFUklPRCwgLy9mb3IgcGVyaW9kIG9mIC4uLi5cclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuTUVFVElOR19NSU5VVEVTLCAvL21pbnV0ZXMgb2YgbWVldGluZyBkYXRlZFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5NSFBEX1JRX1JFU1BPTlNFLCAvL1Jlc3BvbnNlIHRvIE1IUEQgcmVxdWVzdHNcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUFJPQ0VTU0lOR19DTEFSSUZfUkVTUE9OU0UsIC8vUmVzcG9uc2UgdG8gcHJvY2Vzc2luZyBDbGFyaWZpY2F0aW9uIFJlcXVlc3RcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuVU5TT0xJQ0lURURfREFUQSwgLy9VbnNvbGljaXRlZCBEYXRhXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBIT05FX1JRX1JFU1BPTlNFIC8vUmVzcG9uc2UgdG8gdGVsZXBob25lIFJlcXVlc3RcclxuICAgICAgICAgICAgXSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBfZ2V0UEJSRVJQVkFycmF5KCkge1xyXG4gICAgICAgICAgICByZXR1cm4gKFtcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuQ0FOQ0VMX0xFVFRFUiwgLy9jYW5jZWxsYXRpb24gbGV0dGVyXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkVNQUlMX1JRX1JFU1BPTlNFLC8vIHJlc3BvbnNlIHRvIGVtYWlsIHJlcXVlc3RcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuRk9SX1BFUklPRCwgLy9mb3IgcGVyaW9kIG9mIC4uLi5cclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuTUVFVElOR19NSU5VVEVTLCAvL21pbnV0ZXMgb2YgbWVldGluZyBkYXRlZFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5NSFBEX1JRX1JFU1BPTlNFLCAvL1Jlc3BvbnNlIHRvIE1IUEQgcmVxdWVzdHNcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUFJPQ0VTU0lOR19DTEFSSUZfUkVTUE9OU0UsIC8vUmVzcG9uc2UgdG8gcHJvY2Vzc2luZyBDbGFyaWZpY2F0aW9uIFJlcXVlc3RcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuVU5TT0xJQ0lURURfREFUQSwgLy9VbnNvbGljaXRlZCBEYXRhXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBIT05FX1JRX1JFU1BPTlNFLCAvL1Jlc3BvbnNlIHRvIHRlbGVwaG9uZSBSZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkNMSU5fQ0xBUklGX1JFU1BPTlNFIC8vUmVzcG9uc2UgdG8gY2xpbmljYWwgY2xhcmlmaWNhdGlvbiByZXF1ZXN0XHJcbiAgICAgICAgICAgIF0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gX2dldFBSTkRTQXJyYXkoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAoW1xyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5DQU5DRUxfTEVUVEVSLCAvL2NhbmNlbGxhdGlvbiBsZXR0ZXJcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuQ0xJTl9DTEFSSUZfUkVTUE9OU0UsIC8vUmVzcG9uc2UgdG8gY2xpbmljYWwgY2xhcmlmYWN0aW9uIHJlcXVlc3RcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuRU1BSUxfUlFfUkVTUE9OU0UsLy8gcmVzcG9uc2UgdG8gZW1haWwgcmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5NRUVUSU5HX01JTlVURVMsIC8vbWludXRlcyBvZiBtZWV0aW5nIGRhdGVkXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBSSU9SSVRZX1JFVklFV19SUSwgLy8gUHJpb3JpdHkgcmV3aWV3IHJlcXVlc3RcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUFJPQ0VTU0lOR19DTEFSSUZfUkVTUE9OU0UsIC8vUmVzcG9uc2UgdG8gcHJvY2Vzc2luZyBDbGFyaWZpY2F0aW9uIFJlcXVlc3RcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUEhPTkVfUlFfUkVTUE9OU0UsIC8vUmVzcG9uc2UgdG8gdGVsZXBob25lIFJlcXVlc3RcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUkVDT05fREVDSVNfTFRSX0lOVEVOVCwvLyBSZWNvbnNpZGVyYXRpb24gb2YgRGVjaXNpb24gLSBMZXR0ZXIgb2YgSW50ZW50XHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlJFQ09OX0RFQ0lTX1JRX1JFQ09OLCAvL1JlY29uc2lkZXJhdGlvbiBvZiBEZWNpc2lvbiAtIFJlcXVlc3QgZm9yIFJlY29uc2lkZXJhdGlvblxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5VTlNPTElDSVRFRF9EQVRBLCAvL1Vuc29saWNpdGVkIERhdGFcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUkVDT05fREVDSVNfT1RIRVJfSU5GTy8vIFJlY29uc2lkZXJhdGlvbiBvZiBEZWNpc2lvbiAtIE90aGVyIEluZm9ybWF0aW9uXHJcbiAgICAgICAgICAgIF0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gX2dldFBSU05EU0FycmF5KCkge1xyXG4gICAgICAgICAgICByZXR1cm4gKFtcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuQ0FOQ0VMX0xFVFRFUiwgLy9jYW5jZWxsYXRpb24gbGV0dGVyXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkNMSU5fQ0xBUklGX1JFU1BPTlNFLCAvL1Jlc3BvbnNlIHRvIGNsaW5pY2FsIGNsYXJpZmFjdGlvbiByZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkVNQUlMX1JRX1JFU1BPTlNFLC8vIHJlc3BvbnNlIHRvIGVtYWlsIHJlcXVlc3RcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuTUVFVElOR19NSU5VVEVTLCAvL21pbnV0ZXMgb2YgbWVldGluZyBkYXRlZFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5QUklPUklUWV9SRVZJRVdfUlEsIC8vIFByaW9yaXR5IHJld2lldyByZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBST0NFU1NJTkdfQ0xBUklGX1JFU1BPTlNFLCAvL1Jlc3BvbnNlIHRvIHByb2Nlc3NpbmcgQ2xhcmlmaWNhdGlvbiBSZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBIT05FX1JRX1JFU1BPTlNFLCAvL1Jlc3BvbnNlIHRvIHRlbGVwaG9uZSBSZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlJFQ09OX0RFQ0lTX0xUUl9JTlRFTlQsLy8gUmVjb25zaWRlcmF0aW9uIG9mIERlY2lzaW9uIC0gTGV0dGVyIG9mIEludGVudFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5SRUNPTl9ERUNJU19SUV9SRUNPTiwgLy9SZWNvbnNpZGVyYXRpb24gb2YgRGVjaXNpb24gLSBSZXF1ZXN0IGZvciBSZWNvbnNpZGVyYXRpb25cclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuVU5TT0xJQ0lURURfREFUQSwgLy9VbnNvbGljaXRlZCBEYXRhXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlJFQ09OX0RFQ0lTX09USEVSX0lORk8vLyBSZWNvbnNpZGVyYXRpb24gb2YgRGVjaXNpb24gLSBPdGhlciBJbmZvcm1hdGlvblxyXG4gICAgICAgICAgICBdKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGdldFlCUFJBcnJheSgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIChbXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkNBTkNFTF9MRVRURVIsIC8vY2FuY2VsbGF0aW9uIGxldHRlclxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5GT1JfUEVSSU9ELCAvL2ZvciBwZXJpb2Qgb2YgLi4uLlxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5FTUFJTF9SUV9SRVNQT05TRSwvLyByZXNwb25zZSB0byBlbWFpbCByZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLk1FRVRJTkdfTUlOVVRFUywgLy9taW51dGVzIG9mIG1lZXRpbmcgZGF0ZWRcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUFJPQ0VTU0lOR19DTEFSSUZfUkVTUE9OU0UsIC8vUmVzcG9uc2UgdG8gcHJvY2Vzc2luZyBDbGFyaWZpY2F0aW9uIFJlcXVlc3RcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuVU5TT0xJQ0lURURfREFUQSwgLy9VbnNvbGljaXRlZCBEYXRhXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlFVQUxfQ0xBUklGX1JFU1BPTlNFLCAvL1Jlc3BvbnNlIHRvIFF1YWxpdHkgQ2xhcmlmaWNhdGlvbiByZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBIT05FX1JRX1JFU1BPTlNFIC8vUmVzcG9uc2UgdG8gdGVsZXBob25lIFJlcXVlc3RcclxuICAgICAgICAgICAgXSk7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZ2V0RFN1ckFycmF5KCkge1xyXG4gICAgICAgICAgICByZXR1cm4gKFtcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuQ0FOQ0VMX0xFVFRFUiwgLy9jYW5jZWxsYXRpb24gbGV0dGVyXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkNMSU5fQ0xBUklGX1JFU1BPTlNFLCAvL1Jlc3BvbnNlIHRvIGNsaW5pY2FsICBDbGFyaWZpY2F0aW9uIHJlcXVlc3RcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuRk9SX1BFUklPRCwgLy9mb3IgcGVyaW9kIG9mIC4uLi5cclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuRU1BSUxfUlFfUkVTUE9OU0UsLy8gcmVzcG9uc2UgdG8gZW1haWwgcmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5NRUVUSU5HX01JTlVURVMsIC8vbWludXRlcyBvZiBtZWV0aW5nIGRhdGVkXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBST0NFU1NJTkdfQ0xBUklGX1JFU1BPTlNFLCAvL1Jlc3BvbnNlIHRvIHByb2Nlc3NpbmcgQ2xhcmlmaWNhdGlvbiBSZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlVOU09MSUNJVEVEX0RBVEEsIC8vVW5zb2xpY2l0ZWQgRGF0YVxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5QSE9ORV9SUV9SRVNQT05TRSAvL1Jlc3BvbnNlIHRvIHRlbGVwaG9uZSBSZXF1ZXN0XHJcbiAgICAgICAgICAgIF0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZ2V0RElOQUFycmF5KCkge1xyXG4gICAgICAgICAgICByZXR1cm4gKFtcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuQURNSU5JU1RSQVRJVkUsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkNBTkNFTF9MRVRURVIsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkNIQU5HRV9UT19ESU4sXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkRSVUdfTk9USUZfRk9STSxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuSU5JVElBTCxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuTUVFVElOR19NSU5VVEVTLFxyXG4gICAgICAgICAgICAgICAgLy92bS5hbGxBY3Rpdml0aWVzLk5PVElGSUNBVElPTl9JTlRFUlJVUFRfU0FMRSxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUE9TVF9DTEVBUkFOQ0VfREFUQSxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUFJFU1VCX01FRVRJTkdfUEtHLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5QUkVTVUJfTUVFVElOR19SUSxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUFJJU1RJTkVfUE0sXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBSSVNUSU5FX1BNXzJMQU5HLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5SRUNPTl9ERUNJU19MVFJfSU5URU5ULFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5SRUNPTl9ERUNJU19SUV9SRUNPTixcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUkVDT05fREVDSVNfT1RIRVJfSU5GTyxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuQkVfQ0xBUklGX1JFU1BPTlNFLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5DTElOX0NMQVJJRl9SRVNQT05TRSxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuRU1BSUxfUlFfUkVTUE9OU0UsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkxBQkVMX0NMQVJJRl9SRVNQT05TRSxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUFJPQ0VTU0lOR19DTEFSSUZfUkVTUE9OU0UsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlFVQUxfQ0xJTl9DTEFSSUZfUkVTUE9OU0UsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlFVQUxfQ0xBUklGX1JFU1BPTlNFLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5TQ1JFRU5JTkdfQUNDRVBUX1JFU1BPTlNFLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5TQ1JFRU5JTkdfQ0xBUklGX1JFU1BPTlNFLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5TRE5fUkVTUE9OU0UsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBIT05FX1JRX1JFU1BPTlNFLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5VTlNPTElDSVRFRF9EQVRBLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5MQUJFTF9QUkVBUFBST1ZBTF8yTEFORyxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuTk9OX1JFU1BPTlNFLCAvL1Jlc3BvbnNlIHRvIE5PTlxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5OT0RfUkVTUE9OU0UgLy9SZXNwb25zZSB0byBOT0RcclxuICAgICAgICAgICAgICAgIC8vdm0uYWxsQWN0aXZpdGllcy5TRVFVRU5DRV9DTEVBTlVQIC8vIFNlcXVlbmNlIGNsZWFudXAgYXMgcGVyIGVtYWlsIEZFYiAxNiwgMjAxOFxyXG4gICAgICAgICAgICBdKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGdldERJTkJBcnJheSgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIChbXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkFETUlOSVNUUkFUSVZFLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5DQU5DRUxfTEVUVEVSLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5DSEFOR0VfVE9fRElOLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5EUlVHX05PVElGX0ZPUk0sXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLklOSVRJQUwsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLk1FRVRJTkdfTUlOVVRFUyxcclxuICAgICAgICAgICAgICAgIC8vdm0uYWxsQWN0aXZpdGllcy5OT1RJRklDQVRJT05fSU5URVJSVVBUX1NBTEUsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBPU1RfQ0xFQVJBTkNFX0RBVEEsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBSRVNVQl9NRUVUSU5HX1BLRyxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUFJFU1VCX01FRVRJTkdfUlEsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBSSVNUSU5FX1BNLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5QUklTVElORV9QTV8yTEFORyxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUkVDT05fREVDSVNfTFRSX0lOVEVOVCxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUkVDT05fREVDSVNfUlFfUkVDT04sXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlJFQ09OX0RFQ0lTX09USEVSX0lORk8sXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkNMSU5fQ0xBUklGX1JFU1BPTlNFLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5FTUFJTF9SUV9SRVNQT05TRSxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuTEFCRUxfQ0xBUklGX1JFU1BPTlNFLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5QUk9DRVNTSU5HX0NMQVJJRl9SRVNQT05TRSxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUVVBTF9DTElOX0NMQVJJRl9SRVNQT05TRSxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUVVBTF9DTEFSSUZfUkVTUE9OU0UsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlNDUkVFTklOR19BQ0NFUFRfUkVTUE9OU0UsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlNDUkVFTklOR19DTEFSSUZfUkVTUE9OU0UsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlNETl9SRVNQT05TRSxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUEhPTkVfUlFfUkVTUE9OU0UsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlVOU09MSUNJVEVEX0RBVEEsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkxBQkVMX1BSRUFQUFJPVkFMXzJMQU5HLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5ZRUFSX0xJU1RfT0ZfQ0hBTkdFLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5OT05fUkVTUE9OU0UsIC8vUmVzcG9uc2UgdG8gTk9OXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLk5PRF9SRVNQT05TRSAvL1Jlc3BvbnNlIHRvIE5PRFxyXG4gICAgICAgICAgICAgICAgLy92bS5hbGxBY3Rpdml0aWVzLlNFUVVFTkNFX0NMRUFOVVAgLy8gU2VxdWVuY2UgY2xlYW51cCBhcyBwZXIgZW1haWwgRkViIDE2LCAyMDE4XHJcbiAgICAgICAgICAgIF0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZ2V0RElOREFycmF5KCkge1xyXG4gICAgICAgICAgICByZXR1cm4gKFtcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuQURNSU5JU1RSQVRJVkUsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkNBTkNFTF9MRVRURVIsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkNIQU5HRV9UT19ESU4sXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkRSVUdfTk9USUZfRk9STSxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuSU5JVElBTCxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuTUVFVElOR19NSU5VVEVTLFxyXG4gICAgICAgICAgICAgICAgLy92bS5hbGxBY3Rpdml0aWVzLk5PVElGSUNBVElPTl9JTlRFUlJVUFRfU0FMRSxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUE9TVF9DTEVBUkFOQ0VfREFUQSxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUkVDT05fREVDSVNfTFRSX0lOVEVOVCxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUkVDT05fREVDSVNfUlFfUkVDT04sXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlJFQ09OX0RFQ0lTX09USEVSX0lORk8sXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkVNQUlMX1JRX1JFU1BPTlNFLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5MQUJFTF9DTEFSSUZfUkVTUE9OU0UsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBST0NFU1NJTkdfQ0xBUklGX1JFU1BPTlNFLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5TQ1JFRU5JTkdfQ0xBUklGX1JFU1BPTlNFLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5TRE5fUkVTUE9OU0UsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBIT05FX1JRX1JFU1BPTlNFLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5VTlNPTElDSVRFRF9EQVRBLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5MQUJFTF9QUkVBUFBST1ZBTF8yTEFORyxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuTk9OX1JFU1BPTlNFLCAvL1Jlc3BvbnNlIHRvIE5PTlxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5OT0RfUkVTUE9OU0UgLy9SZXNwb25zZSB0byBOT0RcclxuICAgICAgICAgICAgICAgIC8vdm0uYWxsQWN0aXZpdGllcy5TRVFVRU5DRV9DTEVBTlVQIC8vIFNlcXVlbmNlIGNsZWFudXAgYXMgcGVyIGVtYWlsIEZFYiAxNiwgMjAxOFxyXG4gICAgICAgICAgICBdKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGdldERJTkZBcnJheSgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIChbXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkFETUlOSVNUUkFUSVZFLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5DQU5DRUxfTEVUVEVSLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5DSEFOR0VfVE9fRElOLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5EUlVHX05PVElGX0ZPUk0sXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLklOSVRJQUwsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLk1FRVRJTkdfTUlOVVRFUyxcclxuICAgICAgICAgICAgICAgIC8vdm0uYWxsQWN0aXZpdGllcy5OT1RJRklDQVRJT05fSU5URVJSVVBUX1NBTEUsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBPU1RfQ0xFQVJBTkNFX0RBVEEsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlJFQ09OX0RFQ0lTX0xUUl9JTlRFTlQsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlJFQ09OX0RFQ0lTX1JRX1JFQ09OLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5SRUNPTl9ERUNJU19PVEhFUl9JTkZPLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5FTUFJTF9SUV9SRVNQT05TRSxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuTEFCRUxfQ0xBUklGX1JFU1BPTlNFLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5QUk9DRVNTSU5HX0NMQVJJRl9SRVNQT05TRSxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuU0NSRUVOSU5HX0NMQVJJRl9SRVNQT05TRSxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuU0ROX1JFU1BPTlNFLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5QSE9ORV9SUV9SRVNQT05TRSxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuVU5TT0xJQ0lURURfREFUQSxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuTEFCRUxfUFJFQVBQUk9WQUxfMkxBTkdcclxuICAgICAgICAgICAgICAgIC8vdm0uYWxsQWN0aXZpdGllcy5TRVFVRU5DRV9DTEVBTlVQIC8vIFNlcXVlbmNlIGNsZWFudXAgYXMgcGVyIGVtYWlsIEZFYiAxNiwgMjAxOFxyXG4gICAgICAgICAgICBdKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGdldE1QRElOQXJyYXkoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAoW1xyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5DQU5DRUxfTEVUVEVSLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5NRUVUSU5HX01JTlVURVMsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBSRVNVQl9NRUVUSU5HX1BLRywgLy9zdWJtaXNzaW9uIG1lZXRpbmcgcGFja2FnZVxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5QUkVTVUJfTUVFVElOR19SUSxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuRU1BSUxfUlFfUkVTUE9OU0UsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBST0NFU1NJTkdfQ0xBUklGX1JFU1BPTlNFLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5QSE9ORV9SUV9SRVNQT05TRVxyXG4gICAgICAgICAgICBdKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGdldFBEQ0FycmF5KCkge1xyXG4gICAgICAgICAgICByZXR1cm4gKFtcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuQURNSU5JU1RSQVRJVkUsIC8vYWRtaW5pc3RyYXRpdmVcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuQ0FOQ0VMX0xFVFRFUixcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuTUVFVElOR19NSU5VVEVTLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5QT1NUX0FVVEhfRElWMV9DSEFOR0UsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBPU1RfQ0xFQVJBTkNFX0RBVEEsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBSSVNUSU5FX1BNLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5QUklTVElORV9QTV8yTEFORyxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuRU1BSUxfUlFfUkVTUE9OU0UsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkxBQkVMX0NMQVJJRl9SRVNQT05TRSxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuTk9MX1JFU1BPTlNFLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5QUk9DRVNTSU5HX0NMQVJJRl9SRVNQT05TRSxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUVVBTF9DTElOX0NMQVJJRl9SRVNQT05TRSxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUVVBTF9DTEFSSUZfUkVTUE9OU0UsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlNDUkVFTklOR19DTEFSSUZfUkVTUE9OU0UsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBIT05FX1JRX1JFU1BPTlNFLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5MQUJFTF9QUkVBUFBST1ZBTF8yTEFORywgLy9TZWNvbmQgTGFuZ3VhZ2UgTGFiZWwgLSBQcmUtQXBwcm92YWxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuVU5TT0xJQ0lURURfREFUQSwgLy9VbnNvbGljaXRlZCBEYXRhXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlJFQ09OX0RFQ0lTX0xUUl9JTlRFTlQsLy8gUmVjb25zaWRlcmF0aW9uIG9mIERlY2lzaW9uIC0gTGV0dGVyIG9mIEludGVudFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5SRUNPTl9ERUNJU19SUV9SRUNPTiwgLy9SZWNvbnNpZGVyYXRpb24gb2YgRGVjaXNpb24gLSBSZXF1ZXN0IGZvciBSZWNvbnNpZGVyYXRpb25cclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUkVDT05fREVDSVNfT1RIRVJfSU5GTyAvLyBSZWNvbnNpZGVyYXRpb24gb2YgRGVjaXNpb24gLSBPdGhlciBJbmZvcm1hdGlvblxyXG4gICAgICAgICAgICAgICAgLy92bS5hbGxBY3Rpdml0aWVzLlNFUVVFTkNFX0NMRUFOVVAgLy8gU2VxdWVuY2UgY2xlYW51cCBhcyBwZXIgZW1haWwgRkViIDE2LCAyMDE4XHJcbiAgICAgICAgICAgIF0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZ2V0UERDQkFycmF5KCkge1xyXG4gICAgICAgICAgICByZXR1cm4gKFtcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuQURNSU5JU1RSQVRJVkUsIC8vYWRtaW5pc3RyYXRpdmVcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuQ0FOQ0VMX0xFVFRFUixcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuTUVFVElOR19NSU5VVEVTLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5QT1NUX0FVVEhfRElWMV9DSEFOR0UsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBPU1RfQ0xFQVJBTkNFX0RBVEEsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBSSVNUSU5FX1BNLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5QUklTVElORV9QTV8yTEFORyxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuRU1BSUxfUlFfUkVTUE9OU0UsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLkxBQkVMX0NMQVJJRl9SRVNQT05TRSxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuTk9MX1JFU1BPTlNFLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5QUk9DRVNTSU5HX0NMQVJJRl9SRVNQT05TRSxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUVVBTF9DTElOX0NMQVJJRl9SRVNQT05TRSxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUVVBTF9DTEFSSUZfUkVTUE9OU0UsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlNDUkVFTklOR19BQ0NFUFRfUkVTUE9OU0UsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlNDUkVFTklOR19DTEFSSUZfUkVTUE9OU0UsXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlBIT05FX1JRX1JFU1BPTlNFLFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5MQUJFTF9QUkVBUFBST1ZBTF8yTEFORywgLy9TZWNvbmQgTGFuZ3VhZ2UgTGFiZWwgLSBQcmUtQXBwcm92YWxcclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuVU5TT0xJQ0lURURfREFUQSwgLy9VbnNvbGljaXRlZCBEYXRhXHJcbiAgICAgICAgICAgICAgICB2bS5hbGxBY3Rpdml0aWVzLlJFQ09OX0RFQ0lTX0xUUl9JTlRFTlQsLy8gUmVjb25zaWRlcmF0aW9uIG9mIERlY2lzaW9uIC0gTGV0dGVyIG9mIEludGVudFxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcy5SRUNPTl9ERUNJU19SUV9SRUNPTiwgLy9SZWNvbnNpZGVyYXRpb24gb2YgRGVjaXNpb24gLSBSZXF1ZXN0IGZvciBSZWNvbnNpZGVyYXRpb25cclxuICAgICAgICAgICAgICAgIHZtLmFsbEFjdGl2aXRpZXMuUkVDT05fREVDSVNfT1RIRVJfSU5GTyAvLyBSZWNvbnNpZGVyYXRpb24gb2YgRGVjaXNpb24gLSBPdGhlciBJbmZvcm1hdGlvblxyXG4gICAgICAgICAgICAgICAgLy92bS5hbGxBY3Rpdml0aWVzLlNFUVVFTkNFX0NMRUFOVVAgLy8gU2VxdWVuY2UgY2xlYW51cCBhcyBwZXIgZW1haWwgRkViIDE2LCAyMDE4XHJcbiAgICAgICAgICAgIF0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogR2V0cyB0aGUgYWN0aXZpdHkgbGVhZCBhcnJheS4gSGFyZCBjb2RlZCBhcyB0aGUgYmlvbG9naWNhbCBlbnRyeSBoYXMgYnVzaW5lc3MgbG9naWNcclxuICAgICAgICAgKiBAcmV0dXJucyB7c3RyaW5nW119XHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBmdW5jdGlvbiBfZ2V0QWN0aXZpdHlMZWFkQXJyYXkoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgICAgICBbXHJcbiAgICAgICAgICAgICAgICAgICAgdm0uUEhBUk1BLCAvL1BoYXJtYWNldXRpY2FsXHJcbiAgICAgICAgICAgICAgICAgICAgdm0uQklPTE9HSUNBTCwgLy9CaW9sb2dpY2FsXHJcbiAgICAgICAgICAgICAgICAgICAgdm0uUE9TVE1BUktFVCwgLy9Qb3N0LU1hcmtldCBWaWdpbGFuY2VcclxuICAgICAgICAgICAgICAgICAgICB2bS5DT05TVU1FUkhFQUxUSCAvL0NvbnN1bWVyIEhlYWx0aCBQcm9kdWN0c1xyXG4gICAgICAgICAgICAgICAgXVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogUmV0dXJucyB0aGUgYmlvbG9naWNhbCBBY3Rpdml0eSBMZWFkIHZhbHVlXHJcbiAgICAgICAgICogQHJldHVybnMge3N0cmluZ31cclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGZ1bmN0aW9uIF9nZXRCaW9sb2dpY2FsTGVhZCgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHZtLkJJT0xPR0lDQUw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZ1bmN0aW9uIF9nZXRQaGFybWFMZWFkKCl7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdm0uUEhBUk1BO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmdW5jdGlvbiBfZ2V0UG9zdE1hcmtldExlYWQoKXtcclxuICAgICAgICAgICAgcmV0dXJuIHZtLlBPU1RNQVJLRVQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZ1bmN0aW9uIF9nZXRDb25zdW1IZWFsdGhMZWFkKCl7XHJcbiAgICAgICAgICAgIHJldHVybiB2bS5DT05TVU1FUkhFQUxUSDtcclxuICAgICAgICB9XHJcblxyXG4gICAgfVxyXG59KSgpO1xyXG4iLCIvKipcclxuICogQ3JlYXRlZCBieSBka2lsdHkgb24gMTYvMDEvMjAxNy5cclxuICovXHJcblxyXG4oZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ3RyYW5zYWN0aW9uTG9hZFNlcnZpY2UnLCBbJ2RhdGFMaXN0cycsICdocGZiQ29uc3RhbnRzJywnc2VydmljZXMnXSlcclxufSkoKTtcclxuXHJcbihmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgndHJhbnNhY3Rpb25Mb2FkU2VydmljZScpXHJcbiAgICAgICAgLmZhY3RvcnkoJ2N1c3RvbUxvYWQnLCBbJyRodHRwJywgJyRxJywgJyRmaWx0ZXInLCAnZ2V0Q291bnRyeUFuZFByb3ZpbmNlcycsICdDQU5BREEnLCAnVVNBJywnT1RIRVInLCdSRUxBVElWRV9GT0xERVJfREFUQScsICdnZXRDb250YWN0TGlzdHMnLCdUcmFuc2FjdGlvbkxpc3RzJywgZnVuY3Rpb24gKCRodHRwLCAkcSwgJGZpbHRlciwgZ2V0Q291bnRyeUFuZFByb3ZpbmNlcywgQ0FOQURBLCBVU0EsIE9USEVSLFJFTEFUSVZFX0ZPTERFUl9EQVRBLCBnZXRDb250YWN0TGlzdHMsVHJhbnNhY3Rpb25MaXN0cykge1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChvcHRpb25zKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZGVmZXJyZWQgPSAkcS5kZWZlcigpO1xyXG4gICAgICAgICAgICAgICAgdmFyIGNvdW50cnlVcmwgPSBSRUxBVElWRV9GT0xERVJfREFUQSArIFwiY291bnRyaWVzLmpzb25cIjtcclxuICAgICAgICAgICAgICAgIHZhciByYVR5cGVVcmw9UkVMQVRJVkVfRk9MREVSX0RBVEEgKyBcInJhVHlwZS5qc29uXCI7XHJcbiAgICAgICAgICAgICAgICB2YXIgZmVlVXJsPVJFTEFUSVZFX0ZPTERFUl9EQVRBICsgXCJmZWVDbGFzcy5qc29uXCI7XHJcbiAgICAgICAgICAgICAgICB2YXIgcmVzdWx0VHJhbnNsYXRlTGlzdCA9IHt9O1xyXG4gICAgICAgICAgICAgICAgJGh0dHAuZ2V0KGNvdW50cnlVcmwpXHJcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vUFJPQ0VTUyBjb3VudHJ5IGxpc3QgZGF0YVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbmV3TGlzdCA9IF9jcmVhdGVTb3J0ZWRBcnJheU5BRmlyc3QocmVzcG9uc2UuZGF0YSwgb3B0aW9ucy5rZXkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdHJhbnNsYXRlTGlzdCA9IF9jcmVhdGVUcmFuc2xhdGVMaXN0KG5ld0xpc3QsIG9wdGlvbnMua2V5KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZ2V0Q291bnRyeUFuZFByb3ZpbmNlcy5jcmVhdGVDb3VudHJ5TGlzdChuZXdMaXN0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5leHRlbmQocmVzdWx0VHJhbnNsYXRlTGlzdCwgdHJhbnNsYXRlTGlzdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkaHR0cC5nZXQocmFUeXBlVXJsKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9yZXR1cm4gJGh0dHAuZ2V0KGNvbnRhY3RzVXJsKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vUFJPQ0VTUyByYVR5cGUgbGlzdCBkYXRhXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuZXdMaXN0ID0gX2NyZWF0ZVNvcnRlZEFycmF5KHJlc3BvbnNlLmRhdGEsIG9wdGlvbnMua2V5KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRyYW5zbGF0ZUxpc3QgPSBfY3JlYXRlVHJhbnNsYXRlTGlzdChuZXdMaXN0LCBvcHRpb25zLmtleSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFRyYW5zYWN0aW9uTGlzdHMuY3JlYXRlUmFUeXBlcyhuZXdMaXN0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5leHRlbmQocmVzdWx0VHJhbnNsYXRlTGlzdCwgdHJhbnNsYXRlTGlzdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJGh0dHAuZ2V0KGZlZVVybCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9QUk9DRVNTIGZlZSB1cmwgbGlzdCBkYXRhXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuZXdMaXN0ID0gX2NyZWF0ZVNvcnRlZEFycmF5KHJlc3BvbnNlLmRhdGEsIG9wdGlvbnMua2V5KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgVHJhbnNhY3Rpb25MaXN0cy5jcmVhdGVGZWVUeXBlcyhuZXdMaXN0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAvLyBhbmd1bGFyLmV4dGVuZChyZXN1bHRUcmFuc2xhdGVMaXN0LCB0cmFuc2xhdGVMaXN0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmRhdGE7XHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdGhpcyBjYXRjaGVzIGVycm9ycyBmcm9tIHRoZSAkaHR0cCBjYWxscyBhcyB3ZWxsIGFzIGZyb20gdGhlIGV4cGxpY2l0IHRocm93XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihcIkFuIGVycm9yIG9jY3VycmVkIHdpdGggdHJhbnNhY3Rpb24gTGlzdCBMb2FkOiBcIiArIGVycm9yLnN0YXR1cyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlamVjdChyZXN1bHRUcmFuc2xhdGVMaXN0KTtcclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgIC5maW5hbGx5KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZShyZXN1bHRUcmFuc2xhdGVMaXN0KTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuXHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiBDcmVhdGVzIHRoZSBsaXN0IG9mIGtleSB2YWx1ZSBwYWlycyBmb3IgdGhlIHRyYW5zbGF0ZSBzZXJ2aWNlLiBDb252ZXJ0cyB0aGUgY29tcGxleCBqc29uXHJcbiAgICAgICAgICAgICAqIE9mIHRoZSBmb3JtYXQge2lkOnh4eCxlbjp4eHgsZnI6eHh4eH0uIChDYW4gY29udGFpbiBvdGhlciBrZXlzKVxyXG4gICAgICAgICAgICAgKiBAcGFyYW0ganNvbkxpc3RcclxuICAgICAgICAgICAgICogQHBhcmFtIGxhbmdcclxuICAgICAgICAgICAgICogQHJldHVybnMge3t9fVxyXG4gICAgICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgZnVuY3Rpb24gX2NyZWF0ZVRyYW5zbGF0ZUxpc3QoanNvbkxpc3QsIGxhbmcpIHtcclxuICAgICAgICAgICAgICAgIC8vIHZhciBsYW5nSW5kZXg9MTtcclxuICAgICAgICAgICAgICAgIGlmICghbGFuZykgbGFuZyA9ICdlbic7XHJcbiAgICAgICAgICAgICAgICB2YXIgcmVzdWx0TGlzdCA9IHt9O1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBqc29uTGlzdC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdExpc3RbanNvbkxpc3RbaV0uaWRdID0ganNvbkxpc3RbaV1bbGFuZ107XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0TGlzdDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIFJlcGxhY2VzIHRoZSBvcmlnaW5hbCBrZXkgd2l0aCBvbmUgdGhhdCBpcyBwcmVmaXhlZCB3aXRoIHRoZSBwYXNzZWQgaW4gc3RyaW5nXHJcbiAgICAgICAgICAgICAqIEBwYXJhbSBvbGRMaXN0XHJcbiAgICAgICAgICAgICAqIEBwYXJhbSBwcmVmaXhcclxuICAgICAgICAgICAgICogQHJldHVybnMge3t9fVxyXG4gICAgICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgZnVuY3Rpb24gX2NyZWF0ZU5ld0tleUFycmF5KG9sZExpc3QsIHByZWZpeCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvbGRMaXN0KTtcclxuICAgICAgICAgICAgICAgIHZhciBuZXdMaXN0ID0ge307XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbmV3S2V5ID0gXCJcIjtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoRG9zc2llckxpc3RzLmdldE90aGVyVmFsdWUoKSA9PT0ga2V5c1tpXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdLZXkgPSBrZXlzW2ldO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld0tleSA9IHByZWZpeCArIGtleXNbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBuZXdPYmogPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICBuZXdMaXN0W25ld0tleV0gPSBvbGRMaXN0W2tleXNbaV1dO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ld0xpc3Q7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIF9jcmVhdGVTb3J0ZWRBcnJheU5BRmlyc3QoanNvbkxpc3QsIGxhbmcpIHtcclxuICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSBbXTtcclxuICAgICAgICAgICAgICAgIHZhciBjYW5hZGFSZWNvcmQgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgdmFyIHVzYVJlY29yZCA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goJGZpbHRlcignb3JkZXJCeUxvY2FsZScpKGpzb25MaXN0LCBsYW5nKSwgZnVuY3Rpb24gKHNvcnRlZE9iamVjdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzb3J0ZWRPYmplY3QuaWQgPT09IFVTQSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB1c2FSZWNvcmQgPSBzb3J0ZWRPYmplY3Q7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChzb3J0ZWRPYmplY3QuaWQgPT09IENBTkFEQSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYW5hZGFSZWNvcmQgPSBzb3J0ZWRPYmplY3Q7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaChzb3J0ZWRPYmplY3QpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIGlmICh1c2FSZWNvcmQpIHJlc3VsdC51bnNoaWZ0KHVzYVJlY29yZCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoY2FuYWRhUmVjb3JkKSByZXN1bHQudW5zaGlmdChjYW5hZGFSZWNvcmQpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZnVuY3Rpb24gX2NyZWF0ZVNvcnRlZEFycmF5KGpzb25MaXN0LCBsYW5nKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gW107XHJcbiAgICAgICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goJGZpbHRlcignb3JkZXJCeUxvY2FsZScpKGpzb25MaXN0LCBsYW5nKSwgZnVuY3Rpb24gKHNvcnRlZE9iamVjdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHNvcnRlZE9iamVjdCk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfV0pO1xyXG59KSgpO1xyXG5cclxuIiwiLyoqXHJcbiAqIENyZWF0ZWQgYnkgZGtpbHR5IG9uIDEyLzA4LzIwMTYuXHJcbiAqL1xyXG5cclxuKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgndHJhbnNhY3Rpb25TZXJ2aWNlJywgWydkYXRhTGlzdHMnLCAnc2VydmljZXMnLCAnaHBmYkNvbnN0YW50cyddKVxyXG59KSgpO1xyXG5cclxuXHJcbihmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgndHJhbnNhY3Rpb25TZXJ2aWNlJylcclxuICAgICAgICAuZmFjdG9yeSgnVHJhbnNhY3Rpb25TZXJ2aWNlJywgVHJhbnNhY3Rpb25TZXJ2aWNlKTtcclxuXHJcbiAgICBUcmFuc2FjdGlvblNlcnZpY2UuJGluamVjdCA9IFsnJGZpbHRlcicsICdnZXRDb3VudHJ5QW5kUHJvdmluY2VzJywgJ2dldENvbnRhY3RMaXN0cycsICdUcmFuc2FjdGlvbkxpc3RzJywgJ1lFUycsICdOTycsICdIQ1NDJ107XHJcblxyXG4gICAgLy92ZXJzaW9uIDEuMSBidWcgZml4P1xyXG4gICAgLy92ZXJzaW9uIDEuMiBhZGRlZCBTdWJtaXNzaW9uIHBhY2thZ2UvcnEgdG8gTVBOQywgTVBETlNcclxuICAgIC8vdmVyc2lvbiAxLjMgQ2huYWdlIExpZmVjeWNsZSBSZWMgYXNzb2NpYXRpb25zIG9mIFNlcXVlbmNlIENsZWFuLXVwIGFuZCBOb3RpZmljYXRpb24gb2YgaW50ZXJydXB0aW9uIG9mIHNhbGVcclxuXHJcbiAgICBmdW5jdGlvbiBUcmFuc2FjdGlvblNlcnZpY2UoJGZpbHRlciwgZ2V0Q291bnRyeUFuZFByb3ZpbmNlcywgZ2V0Q29udGFjdExpc3RzLCBUcmFuc2FjdGlvbkxpc3RzLCBZRVMsIE5PLCBIQ1NDKSB7XHJcbiAgICAgICAgLy92YXIgdm0gPSB0aGlzO1xyXG4gICAgICAgIHRoaXMuYmFzZVJlcXVlc3RlcnMgPSBbXTtcclxuICAgICAgICB0aGlzLnVzZXJMaXN0ID1bXTtcclxuICAgICAgICB0aGlzLmlzRmluYWwgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLiRvbkluaXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGxvYWRDb250YWN0RGF0YSgpO1xyXG4gICAgICAgICAgICBsb2FkVXNlckxpc3REYXRhKCk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gVHJhbnNhY3Rpb25TZXJ2aWNlKCkge1xyXG4gICAgICAgICAgICAvL2NvbnN0cnVjdGlvbiBsb2dpY1xyXG4gICAgICAgICAgICB2YXIgZGVmYXVsdFRyYW5zYWN0aW9uRGF0YSA9IF9nZXRFbXB0eVRyYW5zYWN0aW9uTW9kZWwoKTtcclxuICAgICAgICAgICAgLyp7XHJcbiAgICAgICAgICAgICAgICBkYXRhQ2hlY2tzdW06IFwiXCIsXHJcbiAgICAgICAgICAgICAgICAvLyBlbnJvbG1lbnRWZXJzaW9uOiBcIjAuMFwiLFxyXG4gICAgICAgICAgICAgICAgZGF0ZVNhdmVkOiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgLy9hcHBsaWNhdGlvblR5cGU6IFwiTkVXXCIsXHJcbiAgICAgICAgICAgICAgICBzb2Z0d2FyZVZlcnNpb246IFwiMS4zLjBcIixcclxuICAgICAgICAgICAgICAgIGlzRWN0ZDogXCJOXCIsXHJcbiAgICAgICAgICAgICAgICBlY3RkOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29tcGFueUlkOiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGRvc3NpZXJJZDogXCJcIixcclxuICAgICAgICAgICAgICAgICAgICBwcm9kdWN0TmFtZTogXCJcIixcclxuICAgICAgICAgICAgICAgICAgICBsaWZlY3ljbGVSZWNvcmQ6IFtdXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgaXNTb2xpY2l0ZWQ6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBzb2xpY2l0ZWRSZXF1ZXN0ZXI6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBwcm9qZWN0TWFuYWdlcjE6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBwcm9qZWN0TWFuYWdlcjI6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBpc0ZlZXM6XCJcIixcclxuICAgICAgICAgICAgICAgIGlzQWN0aXZpdHlDaGFuZ2VzOiBcIllcIixcclxuICAgICAgICAgICAgICAgIC8vIHNhbWVDb21wYW55OiBcIk5cIixcclxuICAgICAgICAgICAgICAgIGNvbXBhbnlOYW1lOiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgLy8gc2FtZUFkZHJlc3M6IFwiTlwiLCAvL3RoaXMgbWF5IG5vIGxvbmdlciBiZSBuZWVkZWRcclxuICAgICAgICAgICAgICAgIGFjdGl2aXR5QWRkcmVzczogX2NyZWF0ZUFkZHJlc3NNb2RlbCgpLFxyXG4gICAgICAgICAgICAgICAgY29uZmlybUNvbnRhY3RWYWxpZDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBhY3Rpdml0eUNvbnRhY3Q6IF9jcmVhdGVDb250YWN0TW9kZWwoKVxyXG4gICAgICAgICAgICAgICAgLy8gcmVndWxhdG9yeVN1Ym1pc3Npb25Db250YWN0OiBbXSxcclxuICAgICAgICAgICAgfTsqL1xyXG4gICAgICAgICAgICBhbmd1bGFyLmV4dGVuZCh0aGlzLl9kZWZhdWx0LCBkZWZhdWx0VHJhbnNhY3Rpb25EYXRhKTtcclxuICAgICAgICAgICAgdGhpcy5yb290VGFnID0gXCJUUkFOU0FDVElPTl9FTlJPTFwiO1xyXG4gICAgICAgICAgICB0aGlzLmN1cnJTZXF1ZW5jZSA9IDA7XHJcbiAgICAgICAgICAgIHRoaXMueHNsRmlsZU5hbWUgPSBcIlJFUF9SVF8yXzBfMS54c2xcIjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGxvYWRDb250YWN0RGF0YSgpIHtcclxuICAgICAgICAgICAgZ2V0Q29udGFjdExpc3RzLmdldEludGVybmFsQ29udGFjdHMoKVxyXG4gICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmJhc2VSZXF1ZXN0ZXJzID0gZGF0YTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gbG9hZFVzZXJMaXN0RGF0YSgpIHtcclxuICAgICAgICAgICAgZ2V0Q29udGFjdExpc3RzLmdldEludGVybmFsQ29udGFjdHNXaXRob3V0T3RoZXIoKVxyXG4gICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnVzZXJMaXN0ID0gZGF0YTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgVHJhbnNhY3Rpb25TZXJ2aWNlLnByb3RvdHlwZSA9IHtcclxuICAgICAgICAgICAgX2RlZmF1bHQ6IHt9LFxyXG4gICAgICAgICAgICBpc0ZpbmFsOiBmYWxzZSxcclxuICAgICAgICAgICAgLy9UT0RPIHVwZGF0ZVxyXG4gICAgICAgICAgICBnZXRSb290VGFnOiBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIChcIlRSQU5TQUNUSU9OX0VOUk9MXCIpXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGdldFhTTEZpbGVOYW1lOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy54c2xGaWxlTmFtZTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIG5nRG9jIG1ldGhvZC0gbWFwcGluZyBmcm9tIHRoZSB0cmFuc2FjdGlvbiBmaWxlIGpzb24gb2JqZWN0IHRvIHRoZSBpbnRlcm5hbCByZXByZXNlbnRhdGlvblxyXG4gICAgICAgICAgICAgKiBAcGFyYW0ganNvbk9iaiB0aGUganNvbiBvYmplY3QgZ2VuZXJhdGVkIGZyb20gdGhlIGZpbGVcclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIHRyYW5zZm9ybUZyb21GaWxlT2JqOiBmdW5jdGlvbiAoanNvbk9iaikge1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciB0cmFuc2FjdGlvbkluZm8gPSB0aGlzLmdldFRyYW5zYWN0aW9uSW5mbyhqc29uT2JqW3RoaXMucm9vdFRhZ10pO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZGVmYXVsdCA9IHt9O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZGVmYXVsdCA9IHRyYW5zYWN0aW9uSW5mbztcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgLy9UT0RPIHRyYW5zYWN0aW9uIHJlbGV2YW50XHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiBAbmdkb2MgdHJhbnNmb3JtcyB0aGUgb2JqZWN0IG1vZGVsIHRvIHRoZSBjb21wYXRpYmxlIGZpbGUgSlNPTiBvYmplY2N0XHJcbiAgICAgICAgICAgICAqIEBwYXJhbSBqc29uT2JqXHJcbiAgICAgICAgICAgICAqIEByZXR1cm5zIGpzb24gb2JqZWN0IGNvbXBhdGlibGUgd2l0aCB0aGUgeG1sIHNjaGVtYVxyXG4gICAgICAgICAgICAgKiAqL1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm1Ub0ZpbGVPYmo6IGZ1bmN0aW9uIChqc29uT2JqKSB7XHJcbiAgICAgICAgICAgICAgICAvL3RyYW5zZm9ybSBiYWNrIHRvIG5lZWRlZFxyXG4gICAgICAgICAgICAgICAgdmFyIHRvZGF5ID0gX2dldFRvZGF5KCk7XHJcbiAgICAgICAgICAgICAgICB2YXIgcmVzdWx0SnNvbiA9IHtcclxuICAgICAgICAgICAgICAgICAgICBUUkFOU0FDVElPTl9FTlJPTDoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZV90eXBlOiBcIlBIQVJNQVwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRlX3NhdmVkOiB0b2RheSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc29mdHdhcmVfdmVyc2lvbjogXCIyLjAuMFwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhX2NoZWNrc3VtOiBqc29uT2JqLmRhdGFDaGVja3N1bSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNhY3Rpb25fdHlwZToganNvbk9iai50cmFuc2FjdGlvblR5cGUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzX3RoaXJkX3BhcnR5OiBqc29uT2JqLmlzVGhpcmRQYXJ0eSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgaXNfcHJpb3JpdHk6IGpzb25PYmouaXNQcmlvcml0eSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgaXNfbm9jOiBqc29uT2JqLmlzTm9jLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpc19hZG1pbl9zdWI6IGpzb25PYmouaXNBZG1pblN1YixcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3ViX3R5cGU6IGpzb25PYmouc3ViVHlwZVxyXG4gICAgICAgICAgICAgICAgICAgICAgIC8vIGlzX2VjdGQ6IGpzb25PYmouaXNFY3RkXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIHZhciBlY3RkID0gdGhpcy5fdHJhbnNmb3JtRWN0ZFRvRmlsZShqc29uT2JqLmVjdGQpO1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0SnNvbi5UUkFOU0FDVElPTl9FTlJPTC5lY3RkID0gZWN0ZDtcclxuICAgICAgICAgICAgICAgIHJlc3VsdEpzb24uVFJBTlNBQ1RJT05fRU5ST0wuaXNfc29saWNpdGVkID0ganNvbk9iai5pc1NvbGljaXRlZDtcclxuICAgICAgICAgICAgICAgIHJlc3VsdEpzb24uVFJBTlNBQ1RJT05fRU5ST0wuc29saWNpdGVkX3JlcXVlc3Rlcl9yZWNvcmQgPVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3RyYW5zZm9ybVJlcVRvRmlsZShqc29uT2JqLnNvbGljaXRlZFJlcXVlc3RlclJlb3JkKTtcclxuICAgICAgICAgICAgICAgIHJlc3VsdEpzb24uVFJBTlNBQ1RJT05fRU5ST0wucmVndWxhdG9yeV9wcm9qZWN0X21hbmFnZXIxID0ganNvbk9iai5wcm9qZWN0TWFuYWdlcjE7XHJcbiAgICAgICAgICAgICAgICByZXN1bHRKc29uLlRSQU5TQUNUSU9OX0VOUk9MLnJlZ3VsYXRvcnlfcHJvamVjdF9tYW5hZ2VyMiA9IGpzb25PYmoucHJvamVjdE1hbmFnZXIyO1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0SnNvbi5UUkFOU0FDVElPTl9FTlJPTC5pc19mZWVzID0ganNvbk9iai5pc0ZlZXM7XHJcbiAgICAgICAgICAgICAgICBpZiAoanNvbk9iai5pc0ZlZXM9PT1ZRVMpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXN1bHRKc29uLlRSQU5TQUNUSU9OX0VOUk9MLmZlZV9kZXRhaWxzID0gdGhpcy5fbWFwRmVlRGV0YWlsc1RvT3V0cHV0KGpzb25PYmouZmVlRGV0YWlscywgWUVTLCBOTywgJGZpbHRlcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXN1bHRKc29uLlRSQU5TQUNUSU9OX0VOUk9MLmlzX2FjdGl2aXR5X2NoYW5nZXMgPSBqc29uT2JqLmlzQWN0aXZpdHlDaGFuZ2VzO1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0SnNvbi5UUkFOU0FDVElPTl9FTlJPTC5jb21wYW55X25hbWUgPSBqc29uT2JqLmNvbXBhbnlOYW1lO1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0SnNvbi5UUkFOU0FDVElPTl9FTlJPTC5yZWd1bGF0b3J5X2FjdGl2aXR5X2FkZHJlc3MgPSBfbWFwQWRkcmVzc1RvT3V0cHV0KGpzb25PYmouYWN0aXZpdHlBZGRyZXNzKTtcclxuICAgICAgICAgICAgICAgIHJlc3VsdEpzb24uVFJBTlNBQ1RJT05fRU5ST0wucmVndWxhdG9yeV9hY3Rpdml0eV9jb250YWN0ID0gX21hcENvbnRhY3RUb091dHB1dChqc29uT2JqLmFjdGl2aXR5Q29udGFjdCk7XHJcbiAgICAgICAgICAgICAgICByZXN1bHRKc29uLlRSQU5TQUNUSU9OX0VOUk9MLmNvbmZpcm1fcmVndWxhdG9yeV9jb250YWN0ID0ganNvbk9iai5jb25maXJtQ29udGFjdFZhbGlkID09PSB0cnVlID8gJ1knIDogJ04nOyAvL3RoaXMgbWF5IG5vIGxvbmdlciBiZSBuZWVkZWRcclxuICAgICAgICAgICAgICAgIHJldHVybiAocmVzdWx0SnNvbik7XHJcbiAgICAgICAgICAgIH0sXHJcblxyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICpcclxuICAgICAgICAgICAgICogQHBhcmFtIGpzb25PYmogdGhlIGpzb24gb2JqZWN0IHRvIGNvbnZlcnRcclxuICAgICAgICAgICAgICogQHJldHVybnMge3t9fVxyXG4gICAgICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgX3RyYW5zZm9ybVJlcVRvRmlsZTogZnVuY3Rpb24gKGpzb25PYmopIHtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgcmVxdWVzdGVycyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFqc29uT2JqKSByZXR1cm4gcmVxdWVzdGVycztcclxuICAgICAgICAgICAgICAgIGlmICghKGpzb25PYmogaW5zdGFuY2VvZiBBcnJheSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAvL21ha2UgaXQgYW4gYXJyYXksIGNhc2UgdGhlcmUgaXMgb25seSBvbmUgcmVjb3JkXHJcbiAgICAgICAgICAgICAgICAgICAganNvbk9iaiA9IFtqc29uT2JqXVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwganNvbk9iai5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciByZWNvcmQgPSBfbWFwUmVxdWVzdGVyUmVjVG9PdXRwdXQoanNvbk9ialtpXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGpzb25PYmoubGVuZ3RoID09IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChyZWNvcmQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByZXF1ZXN0ZXJzLnB1c2gocmVjb3JkKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiAocmVxdWVzdGVycyk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIF90cmFuc2Zvcm1SZXFGcm9tRmlsZTogZnVuY3Rpb24gKG1vZGVsLCBqc29uT2JqKSB7XHJcbiAgICAgICAgICAgICAgICBtb2RlbC5zb2xpY2l0ZWRSZXF1ZXN0ZXJSZW9yZCA9IFtdO1xyXG4gICAgICAgICAgICAgICAgaWYgKG1vZGVsLmlzU29saWNpdGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFqc29uT2JqKSByZXR1cm4gbW9kZWwuc29saWNpdGVkUmVxdWVzdGVyUmVvcmQ7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEoanNvbk9iaiBpbnN0YW5jZW9mIEFycmF5KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL21ha2UgaXQgYW4gYXJyYXksIGNhc2UgdGhlcmUgaXMgb25seSBvbmUgcmVjb3JkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGpzb25PYmogPSBbanNvbk9ial07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwganNvbk9iai5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVjb3JkID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlY29yZC5zZXF1ZW5jZU51bWJlciA9IE51bWJlcihqc29uT2JqW2ldLnNvbGljaXRlZF9yZXF1ZXN0ZXJfc2VxdWVuY2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZWNvcmQuc29saWNpdGVkUmVxdWVzdGVyID0ganNvbk9ialtpXS5zb2xpY2l0ZWRfcmVxdWVzdGVyO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zb2xpY2l0ZWRSZXF1ZXN0ZXJSZW9yZC5wdXNoKHJlY29yZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG5cclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqXHJcbiAgICAgICAgICAgICAqIEBwYXJhbSBqc29uT2JqIHRoZSBqc29uIG9iamVjdCB0byBjb252ZXJ0XHJcbiAgICAgICAgICAgICAqIEByZXR1cm5zIHt7fX1cclxuICAgICAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIF90cmFuc2Zvcm1FY3RkVG9GaWxlOiBmdW5jdGlvbiAoanNvbk9iaikge1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciBlY3RkID0ge307XHJcbiAgICAgICAgICAgICAgICBlY3RkLmNvbXBhbnlfaWQgPSBqc29uT2JqLmNvbXBhbnlJZDtcclxuICAgICAgICAgICAgICAgIGVjdGQuZG9zc2llcl9pZCA9IGpzb25PYmouZG9zc2llcklkO1xyXG4gICAgICAgICAgICAgICAgZWN0ZC5kb3NzaWVyX3R5cGUgPSBqc29uT2JqLmRvc3NpZXJUeXBlO1xyXG4gICAgICAgICAgICAgICAgZWN0ZC5wcm9kdWN0X25hbWUgPSBqc29uT2JqLnByb2R1Y3ROYW1lO1xyXG4gICAgICAgICAgICAgICAgZWN0ZC5saWZlY3ljbGVfcmVjb3JkID0gdGhpcy5fbWFwTGlmZWN5Y2xlTGlzdFRvT3V0cHV0KGpzb25PYmoubGlmZWN5Y2xlUmVjb3JkKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiAoZWN0ZCk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIF90cmFuc2Zvcm1FY3RkRnJvbUZpbGU6IGZ1bmN0aW9uIChtb2RlbCwganNvbk9iaikge1xyXG4gICAgICAgICAgICAgICAgbW9kZWwuZWN0ZCA9IF9nZXRFbXB0eUVjdGRTZWN0aW9uKCk7XHJcbiAgICAgICAgICAgICAgIC8vIGlmIChtb2RlbC5pc0VjdGQpIHtcclxuICAgICAgICAgICAgICAgICAgICBtb2RlbC5lY3RkLmNvbXBhbnlJZCA9IGpzb25PYmouY29tcGFueV9pZDtcclxuICAgICAgICAgICAgICAgICAgICBtb2RlbC5lY3RkLmRvc3NpZXJJZCA9IGpzb25PYmouZG9zc2llcl9pZDtcclxuICAgICAgICAgICAgICAgICAgICBtb2RlbC5lY3RkLmRvc3NpZXJUeXBlID0ganNvbk9iai5kb3NzaWVyX3R5cGU7XHJcbiAgICAgICAgICAgICAgICAgICAgbW9kZWwuZWN0ZC5wcm9kdWN0TmFtZSA9IGpzb25PYmoucHJvZHVjdF9uYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgIG1vZGVsLmVjdGQubGlmZWN5Y2xlUmVjb3JkID0gdGhpcy5fbWFwTGlmZWN5Y2xlTGlzdChqc29uT2JqLmxpZmVjeWNsZV9yZWNvcmQpO1xyXG4gICAgICAgICAgICAgICAgICAvLyAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBnZXRNb2RlbEluZm86IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9kZWZhdWx0O1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogQG5nZG9jIG1ldGhvZC0gdHJhbnNmb3JtcyB0aGUgZmlsZSBqc29uIHRvIGEgbW9kZWwgb2JqZWN0XHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBnZXRUcmFuc2FjdGlvbkluZm86IGZ1bmN0aW9uIChqc29uT2JqKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWpzb25PYmopIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fZGVmYXVsdDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHZhciBtb2RlbCA9IF9nZXRFbXB0eVRyYW5zYWN0aW9uTW9kZWwoKTtcclxuICAgICAgICAgICAgICAgIG1vZGVsLmRhdGVTYXZlZCA9IGpzb25PYmouZGF0ZV9zYXZlZDtcclxuXHJcbiAgICAgICAgICAgICAgICBtb2RlbC5kYXRhQ2hlY2tzdW0gPSBqc29uT2JqLmRhdGFfY2hlY2tzdW07XHJcbiAgICAgICAgICAgICAgLy8gIG1vZGVsLmlzRWN0ZCA9IGpzb25PYmouaXNfZWN0ZDtcclxuXHJcbiAgICAgICAgICAgICAgICBtb2RlbC50cmFuc2FjdGlvblR5cGUgPSBqc29uT2JqLnRyYW5zYWN0aW9uX3R5cGU7XHJcbiAgICAgICAgICAgICAgICBtb2RlbC5pc1RoaXJkUGFydHkgPSBqc29uT2JqLmlzX3RoaXJkX3BhcnR5O1xyXG4gICAgICAgICAgICAgICAgbW9kZWwuaXNQcmlvcml0eSA9IGpzb25PYmouaXNfcHJpb3JpdHk7XHJcbiAgICAgICAgICAgICAgICBtb2RlbC5pc05vYyA9IGpzb25PYmouaXNfbm9jO1xyXG4gICAgICAgICAgICAgICAgbW9kZWwuaXNBZG1pblN1YiA9IGpzb25PYmouaXNfYWRtaW5fc3ViO1xyXG4gICAgICAgICAgICAgICAgbW9kZWwuc3ViVHlwZSA9IGpzb25PYmouc3ViX3R5cGU7XHJcbiAgICAgICAgICAgICAgICBtb2RlbC5pc1NvbGljaXRlZCA9IGpzb25PYmouaXNfc29saWNpdGVkO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fdHJhbnNmb3JtUmVxRnJvbUZpbGUobW9kZWwsIGpzb25PYmouc29saWNpdGVkX3JlcXVlc3Rlcl9yZWNvcmQpO1xyXG4gICAgICAgICAgICAgICAgbW9kZWwucHJvamVjdE1hbmFnZXIxID0ganNvbk9iai5yZWd1bGF0b3J5X3Byb2plY3RfbWFuYWdlcjE7XHJcbiAgICAgICAgICAgICAgICBtb2RlbC5wcm9qZWN0TWFuYWdlcjIgPSBqc29uT2JqLnJlZ3VsYXRvcnlfcHJvamVjdF9tYW5hZ2VyMjtcclxuICAgICAgICAgICAgICAgIG1vZGVsLmlzRmVlcyA9IGpzb25PYmouaXNfZmVlcztcclxuICAgICAgICAgICAgICAgIG1vZGVsLmZlZURldGFpbHMgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgaWYgKG1vZGVsLmlzRmVlcykge1xyXG4gICAgICAgICAgICAgICAgICAgIG1vZGVsLmZlZURldGFpbHMgPSB0aGlzLl9tYXBGZWVEZXRhaWxzRnJvbU91dHB1dChqc29uT2JqLmZlZV9kZXRhaWxzKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZihqc29uT2JqLmltcG9ydEZpbGVUeXBlID09PSBIQ1NDICkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaXNGaW5hbCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIG1vZGVsLmNvbmZpcm1Db250YWN0VmFsaWQgPSBmYWxzZTsgLy9cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pc0ZpbmFsID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICBtb2RlbC5jb25maXJtQ29udGFjdFZhbGlkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgIC8qKiBtb2RlbC50cmFuc2FjdGlvblR5cGUgPSBcIlwiO1xyXG4gICAgICAgICAgICAgICAgICAgIG1vZGVsLmlzVGhpcmRQYXJ0eSA9IFwiXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgbW9kZWwuaXNQcmlvcml0eSA9IFwiXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgbW9kZWwuaXNOb2MgPSBcIlwiO1xyXG4gICAgICAgICAgICAgICAgICAgIG1vZGVsLmlzQWRtaW5TdWIgPSBcIlwiO1xyXG4gICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YlR5cGUgPSBcIlwiO1xyXG4gICAgICAgICAgICAgICAgICAgIG1vZGVsLmlzU29saWNpdGVkID0gXCJcIjtcclxuICAgICAgICAgICAgICAgICAgICBtb2RlbC5zb2xpY2l0ZWRSZXF1ZXN0ZXJSZW9yZCA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgIG1vZGVsLnByb2plY3RNYW5hZ2VyMSA9IFwiXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgbW9kZWwucHJvamVjdE1hbmFnZXIyID0gXCJcIjtcclxuICAgICAgICAgICAgICAgICAgICBtb2RlbC5pc0ZlZXMgPSBcIlwiO1xyXG4gICAgICAgICAgICAgICAgICAgIG1vZGVsLmZlZURldGFpbHMgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBtb2RlbC5pc0FjdGl2aXR5Q2hhbmdlcyA9IGpzb25PYmouaXNfYWN0aXZpdHlfY2hhbmdlcztcclxuICAgICAgICAgICAgICAgIC8vbW9kZWwuc2FtZUNvbXBhbnkgPSBqc29uT2JqLnNhbWVfcmVndWxhdG9yeV9jb21wYW55ID09PSAnWSc7XHJcbiAgICAgICAgICAgICAgICBtb2RlbC5jb21wYW55TmFtZSA9IGpzb25PYmouY29tcGFueV9uYW1lO1xyXG4gICAgICAgICAgICAgICAgLy9tb2RlbC5zYW1lQWRkcmVzcyA9IGpzb25PYmouc2FtZV9yZWd1bGF0b3J5X2FkZHJlc3MgPT09ICdZJztcclxuICAgICAgICAgICAgICAgIC8vcmVnIGFkZHJlc3NcclxuICAgICAgICAgICAgICAgIG1vZGVsLmFjdGl2aXR5Q29udGFjdCA9IF90cmFuc2Zvcm1Db250YWN0RnJvbUZpbGVPYmooanNvbk9iai5yZWd1bGF0b3J5X2FjdGl2aXR5X2NvbnRhY3QpO1xyXG4gICAgICAgICAgICAgICAgLy9tb2RlbC5jb25maXJtQ29udGFjdFZhbGlkID0ganNvbk9iai5jb25maXJtX3JlZ3VsYXRvcnlfY29udGFjdCA9PT0gJ1knO1xyXG5cclxuICAgICAgICAgICAgICAgIG1vZGVsLmFjdGl2aXR5QWRkcmVzcyA9IF90cmFuc2Zvcm1BZGRyZXNzRnJvbUZpbGVPYmooJGZpbHRlciwgZ2V0Q291bnRyeUFuZFByb3ZpbmNlcywganNvbk9iai5yZWd1bGF0b3J5X2FjdGl2aXR5X2FkZHJlc3MpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fdHJhbnNmb3JtRWN0ZEZyb21GaWxlKG1vZGVsLCBqc29uT2JqLmVjdGQpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG1vZGVsO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBnZXROZXdUcmFuc2FjdGlvbjogZnVuY3Rpb24gKGlzRWN0ZCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIG1vZGVsID0gX2NyZWF0ZUxpZmVDeWNsZU1vZGVsKCk7XHJcbiAgICAgICAgICAgICAgICB2YXIgc2VxdWVuY2VOdW0gPSB0aGlzLmdldE5leHRTZXF1ZW5jZU51bWJlcigpOyAvL2Fsd2F5cyBnZXQgaXRcclxuICAgICAgICAgICAgICAgIGlmIChpc0VjdGQpIHtcclxuICAgICAgICAgICAgICAgICAgICBtb2RlbC5zZXF1ZW5jZSA9IHNlcXVlbmNlTnVtO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBtb2RlbC5zZXF1ZW5jZSA9IFwiXCI7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbW9kZWw7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGdldEN1cnJlbnRTZXF1ZW5jZTpmdW5jdGlvbigpe1xyXG5cclxuICAgICAgICAgICAgICByZXR1cm4odGhpcy5jdXJyU2VxdWVuY2UpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBzZXRTZXF1ZW5jZU51bWJlcjogZnVuY3Rpb24gKHN0YXJ0VmFsKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoc3RhcnRWYWwgPT09IG51bGwpIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgIHZhciBjb252ZXJ0ZWQgPSBwYXJzZUludChzdGFydFZhbCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoaXNOYU4oY29udmVydGVkKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY3VyclNlcXVlbmNlID0gMDtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLmN1cnJTZXF1ZW5jZSA9IGNvbnZlcnRlZDtcclxuICAgICAgICAgICAgICAgIHZhciBtb2RlbCA9IHRoaXMuZ2V0TW9kZWxJbmZvKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKG1vZGVsLmVjdGQubGlmZWN5Y2xlUmVjb3JkICYmIG1vZGVsLmVjdGQubGlmZWN5Y2xlUmVjb3JkLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAvL251bWJlciBpbiByZXZlcnNlIG9yZGVyXHJcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IChtb2RlbC5lY3RkLmxpZmVjeWNsZVJlY29yZC5sZW5ndGggLSAxKTsgaSA+PSAwOyBpLS0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlYyA9IG1vZGVsLmVjdGQubGlmZWN5Y2xlUmVjb3JkW2ldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZWMuc2VxdWVuY2UgPSB0aGlzLmdldE5leHRTZXF1ZW5jZU51bWJlcigpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG5cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZ2V0TmV4dFNlcXVlbmNlTnVtYmVyOiBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIHNlcVRleHQgPSBcIlwiICsgdGhpcy5jdXJyU2VxdWVuY2U7XHJcbiAgICAgICAgICAgICAgICB2YXIgcGFkID0gNCAtIHNlcVRleHQubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgdmFyIHBhZFRleHQgPSBcIlwiO1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYWQ7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIHBhZFRleHQgPSBwYWRUZXh0ICsgXCIwXCI7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBzZXFUZXh0ID0gcGFkVGV4dCArIHNlcVRleHQ7XHJcbiAgICAgICAgICAgICAgICAvL3N0YXJ0cyBhdCBzZXF1ZW5jZSB6ZXJvIHNvIHVwZGF0ZSBhZnRlciBzZWxlY3Rpb25cclxuICAgICAgICAgICAgICAgIHRoaXMuY3VyclNlcXVlbmNlKys7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gKHNlcVRleHQpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBkZXByZWNhdGVTZXF1ZW5jZU51bWJlcjogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jdXJyU2VxdWVuY2UtLTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgX21hcExpZmVjeWNsZUxpc3Q6IGZ1bmN0aW9uIChqc29uT2JqKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gW107XHJcbiAgICAgICAgICAgICAgICB0aGlzLmN1cnJTZXF1ZW5jZT0wOyAvL3Jlc2V0IHRoZSBzdGFydGluZ1xyXG4gICAgICAgICAgICAgICAgaWYgKCFqc29uT2JqKSByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgICAgICAgICAgaWYgKCEoanNvbk9iaiBpbnN0YW5jZW9mIEFycmF5KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vbWFrZSBpdCBhbiBhcnJheSwgY2FzZSB0aGVyZSBpcyBvbmx5IG9uZSByZWNvcmRcclxuICAgICAgICAgICAgICAgICAgICBqc29uT2JqID0gW2pzb25PYmpdXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGpzb25PYmoubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcmVjb3JkID0gX3RyYW5zZm9ybUxpZmVjeWNsZVJlY0Zyb21GaWxlT2JqKGpzb25PYmpbaV0sICRmaWx0ZXIsIFRyYW5zYWN0aW9uTGlzdHMpO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vdXBkYXRlIHRoZSBzdGFydCB2YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zZXROZXh0U2VxdWVuY2VPbkxvYWQocGFyc2VJbnQocmVjb3JkLnNlcXVlbmNlKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2gocmVjb3JkKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vdGhpcy5zZXRTZXF1ZW5jZU51bWJlcihqc29uT2JqLmxlbmd0aCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIF9zZXROZXh0U2VxdWVuY2VPbkxvYWQ6IGZ1bmN0aW9uIChzZXF1ZW5jZSkge1xyXG5cclxuICAgICAgICAgICAgICAgIGlmKHRoaXMuY3VyclNlcXVlbmNlPDApIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmN1cnJTZXF1ZW5jZT0wO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYoaXNOYU4oc2VxdWVuY2UpKSByZXR1cm47XHJcbiAgICAgICAgICAgICAgICBpZihzZXF1ZW5jZT49dGhpcy5jdXJyU2VxdWVuY2Upe1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY3VyclNlcXVlbmNlPXNlcXVlbmNlKzE7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcblxyXG5cclxuICAgICAgICAgICAgX21hcExpZmVjeWNsZUxpc3RUb091dHB1dDogZnVuY3Rpb24gKGpzb25PYmopIHtcclxuICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSBbXTtcclxuICAgICAgICAgICAgICAgIGlmICghanNvbk9iaikgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICAgICAgICAgIGlmICghKGpzb25PYmogaW5zdGFuY2VvZiBBcnJheSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAvL21ha2UgaXQgYW4gYXJyYXksIGNhc2UgdGhlcmUgaXMgb25seSBvbmUgcmVjb3JkXHJcbiAgICAgICAgICAgICAgICAgICAganNvbk9iaiA9IFtqc29uT2JqXVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGpzb25PYmoubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcmVjb3JkID0gX21hcExpZmVjeWNsZVJlY1RvT3V0cHV0KGpzb25PYmpbaV0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChqc29uT2JqLmxlbmd0aCA9PT0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKHJlY29yZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHJlY29yZCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0XHJcbiAgICAgICAgICAgIH0sXHJcblxyXG4gICAgICAgICAgICByZXNldEVjdGRTZWN0aW9uOiBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2RlZmF1bHQuaGFzT3duUHJvcGVydHkoJ2VjdGQnKSkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9kZWZhdWx0LmVjdGQuY29tcGFueUlkID0gXCJcIjtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9kZWZhdWx0LmVjdGQuZG9zc2llcklkID0gXCJcIjtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9kZWZhdWx0LmVjdGQuZG9zc2llclR5cGUgPSBcIlwiO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2RlZmF1bHQuZWN0ZC5wcm9kdWN0TmFtZSA9IFwiXCI7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9kZWZhdWx0LmVjdGQubGlmZWN5Y2xlUmVjb3JkICYmIHRoaXMuX2RlZmF1bHQuZWN0ZC5saWZlY3ljbGVSZWNvcmQgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2RlZmF1bHQuZWN0ZC5saWZlY3ljbGVSZWNvcmQgPSBbdGhpcy5fZGVmYXVsdC5lY3RkLmxpZmVjeWNsZVJlY29yZFswXV07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIC8vdGhpcy5fZGVmYXVsdC5lY3RkID0gX2dldEVtcHR5RWN0ZFNlY3Rpb24oKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgY3JlYXRlRmVlRGV0YWlsczogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIF9jcmVhdGVGZWVEZXRhaWxzKE5PKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9O1xyXG4gICAgICAgIFRyYW5zYWN0aW9uU2VydmljZS5wcm90b3R5cGUuX21hcEZlZURldGFpbHNUb091dHB1dCA9IGZ1bmN0aW9uIChmZWVPYmopIHtcclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIE1hcHMgdGhlIGludGVybmFsIGRhdGEgbW9kZWwgdG8gdGhlIGV4dGVybmFsIGRhdGEgbW9kZWxcclxuICAgICAgICAgICAgICogQHBhcmFtIGZlZU9ialxyXG4gICAgICAgICAgICAgKiBAcGFyYW0gWUVTXHJcbiAgICAgICAgICAgICAqIEBwYXJhbSBOT1xyXG4gICAgICAgICAgICAgKiBAcmV0dXJucyB7anNvbiBvYmplY3R9XHJcbiAgICAgICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICAgICAgLy8vZnVuY3Rpb24gX21hcEZlZURldGFpbHNUb091dHB1dChmZWVPYmosIFlFUywgTk8sJGZpbHRlcikge1xyXG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gX2NyZWF0ZUVtcHR5RmVlRGV0YWlsc0Zvck91dHB1dChOTyk7XHJcbiAgICAgICAgICAgIGlmIChhbmd1bGFyLmlzVW5kZWZpbmVkKGZlZU9iaikpIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICAvLyByZXN1bHQuc3VibWlzc2lvbl9jbGFzcyA9IGZlZU9iai5zdWJtaXNzaW9uQ2xhc3M7XHJcbiAgICAgICAgICAgIHJlc3VsdC5zdWJtaXNzaW9uX2NsYXNzID0gXCJcIjtcclxuXHJcbiAgICAgICAgICAgIGlmIChmZWVPYmouc3VibWlzc2lvbkNsYXNzICYmIGZlZU9iai5zdWJtaXNzaW9uQ2xhc3MuaWQpIHtcclxuICAgICAgICAgICAgICAgIC8vZ2V0cyByaWQgb2YgYW55IGhhc2hrZXkgc2VyaWFsaXplIHRoZW4gZGVzZXJpYWlsaXplLFxyXG4gICAgICAgICAgICAgICAgcmVzdWx0LnN1Ym1pc3Npb25fY2xhc3MgPSAoYW5ndWxhci5mcm9tSnNvbihhbmd1bGFyLnRvSnNvbihmZWVPYmouc3VibWlzc2lvbkNsYXNzKSkpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmVzdWx0LmRlZmVycmFsX3JlcXVlc3QgPSBmZWVPYmouZGVmZXJyYWxSZXF1ZXN0O1xyXG4gICAgICAgICAgICByZXN1bHQuZmVlX3JlbWlzc2lvbiA9IGZlZU9iai5mZWVSZW1pc3Npb247XHJcbiAgICAgICAgICAgIHJlc3VsdC5ncm9zc19yZXZlbnVlID0gZmVlT2JqLmdyb3NzUmV2ZW51ZTtcclxuICAgICAgICAgICAgcmVzdWx0LnBlcmNlbnRfZ3Jvc3MgPSBmZWVPYmoucGVyY2VudEdyb3NzO1xyXG4gICAgICAgICAgICByZXN1bHQucmVxdWlyZWRfZG9jcy5kZWZlcnJhbF9zdGF0ZW1lbnQgPSBmZWVPYmoucmVxdWlyZWREb2NzLmRlZmVycmFsU3RhdCA9PT0gdHJ1ZSA/IFlFUyA6IE5PO1xyXG4gICAgICAgICAgICByZXN1bHQucmVxdWlyZWRfZG9jcy5yZW1pc3Npb25fY2VydGlmaWVkID0gZmVlT2JqLnJlcXVpcmVkRG9jcy5yZXZTdGF0ID09PSB0cnVlID8gWUVTIDogTk87XHJcbiAgICAgICAgICAgIHJlc3VsdC5yZXF1aXJlZF9kb2NzLnNhbGVzX2hpc3RvcnkgPSBmZWVPYmoucmVxdWlyZWREb2NzLnNhbGVzSGlzdG9yeSA9PT0gdHJ1ZSA/IFlFUyA6IE5PO1xyXG4gICAgICAgICAgICByZXN1bHQucmVxdWlyZWRfZG9jcy5hdmdfc2FsZV9wcmljZSA9IGZlZU9iai5yZXF1aXJlZERvY3MuYXZnU2FsZVByaWNlID09PSB0cnVlID8gWUVTIDogTk87XHJcbiAgICAgICAgICAgIHJlc3VsdC5yZXF1aXJlZF9kb2NzLmVzdF9tYXJrZXRfc2hhcmUgPSBmZWVPYmoucmVxdWlyZWREb2NzLmVzdE1hcmtldFNoYXJlID09PSB0cnVlID8gWUVTIDogTk87XHJcbiAgICAgICAgICAgIHJlc3VsdC5yZXF1aXJlZF9kb2NzLmNvbXBhcmlzb25fcHJvZHVjdHMgPSBmZWVPYmoucmVxdWlyZWREb2NzLmNvbXBhcmlzb24gPT09IHRydWUgPyBZRVMgOiBOTztcclxuICAgICAgICAgICAgcmVzdWx0LnJlcXVpcmVkX2RvY3MubWFya2V0X3BsYW4gPSBmZWVPYmoucmVxdWlyZWREb2NzLm1hcmtldFBsYW4gPT09IHRydWUgPyBZRVMgOiBOTztcclxuICAgICAgICAgICAgcmVzdWx0LnJlcXVpcmVkX2RvY3Mub3RoZXIgPSBmZWVPYmoucmVxdWlyZWREb2NzLm90aGVyID09PSB0cnVlID8gWUVTIDogTk87XHJcbiAgICAgICAgICAgIHJlc3VsdC5yZXF1aXJlZF9kb2NzLm90aGVyX2RldGFpbHMgPSBmZWVPYmoucmVxdWlyZWREb2NzLm90aGVyRGV0YWlscztcclxuICAgICAgICAgICAgcmVzdWx0LnBheW1lbnRfbWV0aG9kLmNyZWRpdF9jYXJkID0gZmVlT2JqLnBheW1lbnRNZXRob2QuY3JlZGl0Q2FyZCA9PT0gdHJ1ZSA/IFlFUyA6IE5PO1xyXG4gICAgICAgICAgICByZXN1bHQucGF5bWVudF9tZXRob2QuY2hlcXVlID0gZmVlT2JqLnBheW1lbnRNZXRob2QuY2hlcXVlID09PSB0cnVlID8gWUVTIDogTk87XHJcbiAgICAgICAgICAgIHJlc3VsdC5wYXltZW50X21ldGhvZC5tb25leV9vcmRlciA9IGZlZU9iai5wYXltZW50TWV0aG9kLm1vbmV5T3JkZXIgPT09IHRydWUgPyBZRVMgOiBOTztcclxuICAgICAgICAgICAgcmVzdWx0LnBheW1lbnRfbWV0aG9kLmJhbmtfZHJhZnQgPSBmZWVPYmoucGF5bWVudE1ldGhvZC5iYW5rRHJhZnQgPT09IHRydWUgPyBZRVMgOiBOTztcclxuICAgICAgICAgICAgcmVzdWx0LnBheW1lbnRfbWV0aG9kLmV4aXN0aW5nX2NyZWRpdCA9IGZlZU9iai5wYXltZW50TWV0aG9kLmV4aXN0aW5nQ3JlZGl0ID09PSB0cnVlID8gWUVTIDogTk87XHJcbiAgICAgICAgICAgIHJlc3VsdC5wYXltZW50X21ldGhvZC5iYW5rX3dpcmUgPSBmZWVPYmoucGF5bWVudE1ldGhvZC5iYW5rV2lyZSA9PT0gdHJ1ZSA/IFlFUyA6IE5PO1xyXG4gICAgICAgICAgICByZXN1bHQucGF5bWVudF9tZXRob2QuYmlsbF9wYXltZW50ID0gZmVlT2JqLnBheW1lbnRNZXRob2QuYmlsbFBheW1lbnQgPT09IHRydWUgPyBZRVMgOiBOTztcclxuXHJcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgICAgIC8vfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgVHJhbnNhY3Rpb25TZXJ2aWNlLnByb3RvdHlwZS5fbWFwRmVlRGV0YWlsc0Zyb21PdXRwdXQgPSBmdW5jdGlvbiAoZmVlT2JqKSB7XHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiBNYXBzIHRoZSBpbnRlcm5hbCBkYXRhIG1vZGVsIHRvIHRoZSBleHRlcm5hbCBkYXRhIG1vZGVsXHJcbiAgICAgICAgICAgICAqIEBwYXJhbSBmZWVPYmpcclxuICAgICAgICAgICAgICogQHBhcmFtIFlFU1xyXG4gICAgICAgICAgICAgKiBAcGFyYW0gTk9cclxuICAgICAgICAgICAgICogQHJldHVybnMge2pzb24gb2JqZWN0fVxyXG4gICAgICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IF9jcmVhdGVGZWVEZXRhaWxzKE5PKTtcclxuICAgICAgICAgICAgaWYgKGFuZ3VsYXIuaXNVbmRlZmluZWQoZmVlT2JqKSkgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgIC8vIHJlc3VsdC5zdWJtaXNzaW9uX2NsYXNzID0gZmVlT2JqLnN1Ym1pc3Npb25DbGFzcztcclxuXHJcbiAgICAgICAgICAgIGlmIChmZWVPYmouc3VibWlzc2lvbl9jbGFzcyAmJiBmZWVPYmouc3VibWlzc2lvbl9jbGFzcy5pZCkge1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0LnN1Ym1pc3Npb25DbGFzcyA9ICRmaWx0ZXIoJ2ZpbmRMaXN0SXRlbUJ5SWQnKShUcmFuc2FjdGlvbkxpc3RzLmdldEZlZUxpc3QoKSwge2lkOiBmZWVPYmouc3VibWlzc2lvbl9jbGFzcy5pZH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJlc3VsdC5kZWZlcnJhbFJlcXVlc3QgPSBmZWVPYmouZGVmZXJyYWxfcmVxdWVzdDtcclxuICAgICAgICAgICAgcmVzdWx0LmZlZVJlbWlzc2lvbiA9IGZlZU9iai5mZWVfcmVtaXNzaW9uO1xyXG4gICAgICAgICAgICByZXN1bHQuZ3Jvc3NSZXZlbnVlID0gTnVtYmVyKGZlZU9iai5ncm9zc19yZXZlbnVlKTtcclxuICAgICAgICAgICAgcmVzdWx0LnBlcmNlbnRHcm9zcyA9IGZlZU9iai5wZXJjZW50X2dyb3NzO1xyXG4gICAgICAgICAgICByZXN1bHQucmVxdWlyZWREb2NzLmRlZmVycmFsU3RhdCA9IGZlZU9iai5yZXF1aXJlZF9kb2NzLmRlZmVycmFsX3N0YXRlbWVudCA9PT0gWUVTO1xyXG4gICAgICAgICAgICByZXN1bHQucmVxdWlyZWREb2NzLnJldlN0YXQgPSBmZWVPYmoucmVxdWlyZWRfZG9jcy5yZW1pc3Npb25fY2VydGlmaWVkID09PSBZRVM7XHJcbiAgICAgICAgICAgIHJlc3VsdC5yZXF1aXJlZERvY3Muc2FsZXNIaXN0b3J5ID0gZmVlT2JqLnJlcXVpcmVkX2RvY3Muc2FsZXNfaGlzdG9yeSA9PT0gWUVTO1xyXG4gICAgICAgICAgICByZXN1bHQucmVxdWlyZWREb2NzLmF2Z1NhbGVQcmljZSA9IGZlZU9iai5yZXF1aXJlZF9kb2NzLmF2Z19zYWxlX3ByaWNlID09PSBZRVM7XHJcbiAgICAgICAgICAgIHJlc3VsdC5yZXF1aXJlZERvY3MuZXN0TWFya2V0U2hhcmUgPSBmZWVPYmoucmVxdWlyZWRfZG9jcy5lc3RfbWFya2V0X3NoYXJlID09PSBZRVM7XHJcbiAgICAgICAgICAgIHJlc3VsdC5yZXF1aXJlZERvY3MuY29tcGFyaXNvbiA9IGZlZU9iai5yZXF1aXJlZF9kb2NzLmNvbXBhcmlzb25fcHJvZHVjdHMgPT09IFlFUztcclxuICAgICAgICAgICAgcmVzdWx0LnJlcXVpcmVkRG9jcy5tYXJrZXRQbGFuID0gZmVlT2JqLnJlcXVpcmVkX2RvY3MubWFya2V0X3BsYW4gPT09IFlFUztcclxuICAgICAgICAgICAgcmVzdWx0LnJlcXVpcmVkRG9jcy5vdGhlciA9IGZlZU9iai5yZXF1aXJlZF9kb2NzLm90aGVyID09PSBZRVM7XHJcbiAgICAgICAgICAgIHJlc3VsdC5yZXF1aXJlZERvY3Mub3RoZXJEZXRhaWxzID0gZmVlT2JqLnJlcXVpcmVkX2RvY3Mub3RoZXJfZGV0YWlscztcclxuICAgICAgICAgICAgcmVzdWx0LnBheW1lbnRNZXRob2QuY3JlZGl0Q2FyZCA9IGZlZU9iai5wYXltZW50X21ldGhvZC5jcmVkaXRfY2FyZCA9PT0gWUVTO1xyXG4gICAgICAgICAgICByZXN1bHQucGF5bWVudE1ldGhvZC5jaGVxdWUgPSBmZWVPYmoucGF5bWVudF9tZXRob2QuY2hlcXVlID09PSBZRVM7XHJcbiAgICAgICAgICAgIHJlc3VsdC5wYXltZW50TWV0aG9kLm1vbmV5T3JkZXIgPSBmZWVPYmoucGF5bWVudF9tZXRob2QubW9uZXlfb3JkZXIgPT09IFlFUztcclxuICAgICAgICAgICAgcmVzdWx0LnBheW1lbnRNZXRob2QuYmFua0RyYWZ0ID0gZmVlT2JqLnBheW1lbnRfbWV0aG9kLmJhbmtfZHJhZnQgPT09IFlFUztcclxuICAgICAgICAgICAgcmVzdWx0LnBheW1lbnRNZXRob2QuZXhpc3RpbmdDcmVkaXQgPSBmZWVPYmoucGF5bWVudF9tZXRob2QuZXhpc3RpbmdfY3JlZGl0ID09PSBZRVM7XHJcbiAgICAgICAgICAgIHJlc3VsdC5wYXltZW50TWV0aG9kLmJhbmtXaXJlID0gZmVlT2JqLnBheW1lbnRfbWV0aG9kLmJhbmtfd2lyZSA9PT0gWUVTO1xyXG4gICAgICAgICAgICByZXN1bHQucGF5bWVudE1ldGhvZC5iaWxsUGF5bWVudCA9IGZlZU9iai5wYXltZW50X21ldGhvZC5iaWxsX3BheW1lbnQgPT09IFlFUztcclxuXHJcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgICAgIC8vfVxyXG4gICAgICAgIH07XHJcblxyXG5cclxuICAgICAgICAvLyBSZXR1cm4gYSByZWZlcmVuY2UgdG8gdGhlIG9iamVjdFxyXG4gICAgICAgIHJldHVybiBUcmFuc2FjdGlvblNlcnZpY2U7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUT0RPIGRwcmVjYXRlZCBNYXBzIHRoZSBmaWxlIGpzb24gb2JqZWN0IHRvIHRoZSBpbnRlcm5hbCBkYXRhIG1vZGVsIG9mIHRoZSBSRVAgY29udGFjdHNcclxuICAgICAqIEBwYXJhbSBqc29uT2JqXHJcbiAgICAgKiBAcmV0dXJucyBhbiBhcnJheSBvZiBjb250YWN0cy4gRW1wdHkgaWYgdGhlcmUgYXJlIG5vbmVcclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIF9tYXBSZWd1bGF0b3J5Q29udGFjdExpc3QoanNvbk9iaikge1xyXG4gICAgICAgIHZhciByZXN1bHQgPSBbXTtcclxuICAgICAgICBpZiAoIWpzb25PYmopIHJldHVybiBsaXN0O1xyXG4gICAgICAgIGlmICghKGpzb25PYmogaW5zdGFuY2VvZiBBcnJheSkpIHtcclxuICAgICAgICAgICAgLy9tYWtlIGl0IGFuIGFycmF5LCBjYXNlIHRoZXJlIGlzIG9ubHkgb25lXHJcbiAgICAgICAgICAgIGpzb25PYmogPSBbanNvbk9ial1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwganNvbk9iai5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICByZXN1bHQucHVzaChfdHJhbnNmb3JtUmVwQ29udGFjdEZyb21GaWxlT2JqKGpzb25PYmpbaV0pKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIChyZXN1bHQpXHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQG5nZG9jIG1ldGhvZCBNYXBzIGEgbGlmZWN5Y2xlIHJlY29yZCBmaWxlIG9iamVjdCB0byB0aGUgaW50ZXJuYWwgZGF0YSBtb2RlbFxyXG4gICAgICogQHBhcmFtIGxpZmVjeWNsZU9iai0gdGhlIGpzb24gZmlsZSBvYmplY3QgdG8gbWFwXHJcbiAgICAgKiBAcmV0dXJucyB7anNvbk9ian1cclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIF90cmFuc2Zvcm1MaWZlY3ljbGVSZWNGcm9tRmlsZU9iaihsaWZlY3ljbGVPYmosICRmaWx0ZXIsIFRyYW5zYWN0aW9uTGlzdHMpIHtcclxuICAgICAgICB2YXIgbGlmZWN5Y2xlUmVjID0gX2NyZWF0ZUxpZmVDeWNsZU1vZGVsKCk7XHJcbiAgICAgICAgLy8gbGlmZWN5Y2xlUmVjLnNlcXVlbmNlID0gbGlmZWN5Y2xlT2JqLnNlcXVlbmNlX251bWJlcjtcclxuICAgICAgICAvLyBsaWZlY3ljbGVSZWMuZGF0ZUZpbGVkID0gbGlmZWN5Y2xlT2JqLmRhdGVfZmlsZWQ7XHJcbiAgICAgICAgbGlmZWN5Y2xlUmVjLmNvbnRyb2xOdW1iZXIgPSBsaWZlY3ljbGVPYmouY29udHJvbF9udW1iZXI7XHJcbiAgICAgICAgbGlmZWN5Y2xlUmVjLmFjdGl2aXR5TGVhZCA9IGxpZmVjeWNsZU9iai5zZXF1ZW5jZV9hY3Rpdml0eV9sZWFkO1xyXG5cclxuICAgICAgICBsaWZlY3ljbGVSZWMuYWN0aXZpdHlUeXBlID0gXCJcIjtcclxuICAgICAgICBpZiAobGlmZWN5Y2xlT2JqLnNlcXVlbmNlX2FjdGl2aXR5X3R5cGUpIHtcclxuICAgICAgICAgICAgbGlmZWN5Y2xlUmVjLmFjdGl2aXR5VHlwZSA9ICRmaWx0ZXIoJ2ZpbHRlcicpKFRyYW5zYWN0aW9uTGlzdHMuZ2V0QWN0aXZpdHlUeXBlcygpLCB7aWQ6IGxpZmVjeWNsZU9iai5zZXF1ZW5jZV9hY3Rpdml0eV90eXBlLl9fdGV4dH0pWzBdO1xyXG4gICAgICAgICAgICBsaWZlY3ljbGVSZWMuYWN0aXZpdHlUeXBlRGlzcGxheSA9IGxpZmVjeWNsZVJlYy5hY3Rpdml0eVR5cGUuaWQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxpZmVjeWNsZVJlYy5kZXNjcmlwdGlvblZhbHVlID0gbGlmZWN5Y2xlT2JqLnNlcXVlbmNlX2Rlc2NyaXB0aW9uX3ZhbHVlO1xyXG4gICAgICAgIGxpZmVjeWNsZVJlYy5zdGFydERhdGUgPSBsaWZlY3ljbGVPYmouc2VxdWVuY2VfZnJvbV9kYXRlO1xyXG4gICAgICAgIGxpZmVjeWNsZVJlYy5lbmREYXRlID0gbGlmZWN5Y2xlT2JqLnNlcXVlbmNlX3RvX2RhdGU7XHJcbiAgICAgICAgbGlmZWN5Y2xlUmVjLmRldGFpbHMgPSBsaWZlY3ljbGVPYmouc2VxdWVuY2VfZGV0YWlscztcclxuICAgICAgICBsaWZlY3ljbGVSZWMuc2VxdWVuY2VWZXJzaW9uID0gbGlmZWN5Y2xlT2JqLnNlcXVlbmNlX3ZlcnNpb247XHJcbiAgICAgICAgbGlmZWN5Y2xlUmVjLnllYXIgPSBsaWZlY3ljbGVPYmouc2VxdWVuY2VfeWVhcjtcclxuICAgICAgICBsaWZlY3ljbGVSZWMuc2VxdWVuY2VDb25jYXQgPSBsaWZlY3ljbGVPYmouc2VxdWVuY2VfY29uY2F0O1xyXG4gICAgICAgIGxpZmVjeWNsZVJlYy5pc1NhdmVkID0gdHJ1ZTtcclxuICAgICAgICByZXR1cm4gKGxpZmVjeWNsZVJlYyk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIGZ1bmN0aW9uIF9tYXBMaWZlY3ljbGVSZWNUb091dHB1dChsaWZlY3ljbGVPYmopIHtcclxuICAgICAgICB2YXIgbGlmZWN5Y2xlUmVjID0ge307XHJcbiAgICAgICAvKipcclxuICAgICAgICBsaWZlY3ljbGVSZWMuc2VxdWVuY2VfbnVtYmVyID0gbGlmZWN5Y2xlT2JqLnNlcXVlbmNlO1xyXG4gICAgICAgIGxpZmVjeWNsZVJlYy5kYXRlX2ZpbGVkID0gbGlmZWN5Y2xlT2JqLmRhdGVGaWxlZDsgKiovXHJcbiAgICAgICAgbGlmZWN5Y2xlUmVjLmNvbnRyb2xfbnVtYmVyID0gbGlmZWN5Y2xlT2JqLmNvbnRyb2xOdW1iZXI7XHJcbiAgICAgICAgbGlmZWN5Y2xlUmVjLnNlcXVlbmNlX2FjdGl2aXR5X2xlYWQgPSBsaWZlY3ljbGVPYmouYWN0aXZpdHlMZWFkO1xyXG4gICAgICAgIGxpZmVjeWNsZVJlYy5zZXF1ZW5jZV9hY3Rpdml0eV90eXBlID0gXCJcIjtcclxuICAgICAgICBpZiAobGlmZWN5Y2xlT2JqLmFjdGl2aXR5VHlwZSkge1xyXG4gICAgICAgICAgICBsaWZlY3ljbGVSZWMuc2VxdWVuY2VfYWN0aXZpdHlfdHlwZSA9IHt9O1xyXG4gICAgICAgICAgICBfc2V0QWN0aXZpdHlUeXBlVmFsdWVzRm9yT3V0cHV0KGxpZmVjeWNsZU9iai5hY3Rpdml0eVR5cGUsIGxpZmVjeWNsZVJlYy5zZXF1ZW5jZV9hY3Rpdml0eV90eXBlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGlmZWN5Y2xlUmVjLnNlcXVlbmNlX2Rlc2NyaXB0aW9uX3ZhbHVlID0gbGlmZWN5Y2xlT2JqLmRlc2NyaXB0aW9uVmFsdWU7XHJcbiAgICAgICAgbGlmZWN5Y2xlUmVjLnNlcXVlbmNlX2Zyb21fZGF0ZSA9IGxpZmVjeWNsZU9iai5zdGFydERhdGU7XHJcbiAgICAgICAgbGlmZWN5Y2xlUmVjLnNlcXVlbmNlX3RvX2RhdGUgPSBsaWZlY3ljbGVPYmouZW5kRGF0ZTtcclxuICAgICAgICBsaWZlY3ljbGVSZWMuc2VxdWVuY2VfZGV0YWlscyA9IGxpZmVjeWNsZU9iai5kZXRhaWxzO1xyXG4gICAgICAgIGxpZmVjeWNsZVJlYy5zZXF1ZW5jZV92ZXJzaW9uID0gbGlmZWN5Y2xlT2JqLnNlcXVlbmNlVmVyc2lvbjtcclxuICAgICAgICBsaWZlY3ljbGVSZWMuc2VxdWVuY2VfeWVhciA9IGxpZmVjeWNsZU9iai55ZWFyO1xyXG4gICAgICAgIGxpZmVjeWNsZVJlYy5zZXF1ZW5jZV9jb25jYXQgPSBsaWZlY3ljbGVPYmouc2VxdWVuY2VDb25jYXQ7XHJcbiAgICAgICAgcmV0dXJuIChsaWZlY3ljbGVSZWMpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIF9tYXBSZXF1ZXN0ZXJSZWNUb091dHB1dChyZXF1ZXN0ZXJPYmopIHtcclxuICAgICAgICB2YXIgcmVxdWVzdGVyUmVjID0ge307XHJcbiAgICAgICAgaWYgKHJlcXVlc3Rlck9iaikge1xyXG4gICAgICAgICAgICByZXF1ZXN0ZXJSZWMgPSB7XHJcbiAgICAgICAgICAgICAgICBzb2xpY2l0ZWRfcmVxdWVzdGVyX3NlcXVlbmNlOiByZXF1ZXN0ZXJPYmouc2VxdWVuY2VOdW1iZXIsXHJcbiAgICAgICAgICAgICAgICBzb2xpY2l0ZWRfcmVxdWVzdGVyOiByZXF1ZXN0ZXJPYmouc29saWNpdGVkUmVxdWVzdGVyXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIChyZXF1ZXN0ZXJSZWMpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogVHJ1bmNhdGVzIHRoZSBsYWJlbCBmb3IgYWN0aXZpdHkgdHlwZSBiYXNlZCBvbiBmZWVkYmFjayBvZiBKdWwgMTgsIDIwMTdcclxuICAgICAqIFJlbW92ZXMgdGhlIGZ1bGwgbmFtZVxyXG4gICAgICogQHBhcmFtIHNyY0FjdGl2aXR5VHlwZVJlY1xyXG4gICAgICogQHBhcmFtIGRlc3RBY3Rpdml0eVR5cGVSZWNcclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIF9zZXRBY3Rpdml0eVR5cGVWYWx1ZXNGb3JPdXRwdXQoc3JjQWN0aXZpdHlUeXBlUmVjLCBkZXN0QWN0aXZpdHlUeXBlUmVjKSB7XHJcbiAgICAgICAgdmFyIHN0cmluZ0luZGV4ID0gc3JjQWN0aXZpdHlUeXBlUmVjLmVuLmluZGV4T2YoXCIgKFwiKTsgLy9maW5jIHNwYWNlIGFuZCBvcGVuIGJyYWNrZXRcclxuICAgICAgICBkZXN0QWN0aXZpdHlUeXBlUmVjLl9fdGV4dCA9IHNyY0FjdGl2aXR5VHlwZVJlYy5pZDtcclxuXHJcbiAgICAgICAgaWYgKHN0cmluZ0luZGV4ID4gLTEpIHtcclxuICAgICAgICAgICAgZGVzdEFjdGl2aXR5VHlwZVJlYy5fbGFiZWxfZW4gPSBzcmNBY3Rpdml0eVR5cGVSZWMuZW4uc3Vic3RyaW5nKDAsIHN0cmluZ0luZGV4KVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGRlc3RBY3Rpdml0eVR5cGVSZWMuX2xhYmVsX2VuID0gc3JjQWN0aXZpdHlUeXBlUmVjLmVuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBzdHJpbmdJbmRleCA9IHNyY0FjdGl2aXR5VHlwZVJlYy5mci5pbmRleE9mKCcoJyk7XHJcbiAgICAgICAgaWYgKHN0cmluZ0luZGV4ID4gLTEpIHtcclxuICAgICAgICAgICAgZGVzdEFjdGl2aXR5VHlwZVJlYy5fbGFiZWxfZnIgPSBzcmNBY3Rpdml0eVR5cGVSZWMuZnIuc3Vic3RyaW5nKDAsIHN0cmluZ0luZGV4IC0gMSlcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBkZXN0QWN0aXZpdHlUeXBlUmVjLl9sYWJlbF9mciA9IHNyY0FjdGl2aXR5VHlwZVJlYy5mcjtcclxuICAgICAgICB9XHJcblxyXG4gICAgfVxyXG5cclxuXHJcbiAgICBmdW5jdGlvbiBfZ2V0RW1wdHlFY3RkU2VjdGlvbigpIHtcclxuICAgICAgICB2YXIgZWN0ZCA9IHt9O1xyXG4gICAgICAgIGVjdGQuY29tcGFueUlkID0gXCJcIjtcclxuICAgICAgICBlY3RkLmRvc3NpZXJJZCA9IFwiXCI7XHJcbiAgICAgICAgZWN0ZC5kb3NzaWVyVHlwZSA9IFwiXCI7XHJcbiAgICAgICAgZWN0ZC5wcm9kdWN0TmFtZSA9IFwiXCI7XHJcbiAgICAgICAgZWN0ZC5saWZlY3ljbGVSZWNvcmQgPSBbXTtcclxuICAgICAgICByZXR1cm4gZWN0ZDtcclxuICAgIH1cclxuXHJcblxyXG4gICAgZnVuY3Rpb24gX3RyYW5zZm9ybVJlcENvbnRhY3RGcm9tRmlsZU9iaihyZXBPYmopIHtcclxuXHJcbiAgICAgICAgdmFyIHJlcENvbnRhY3QgPSBfdHJhbnNmb3JtQ29udGFjdEZyb21GaWxlT2JqKHJlcE9iai5yZXBfc3VibWlzc2lvbl9jb250YWN0KTtcclxuICAgICAgICByZXBDb250YWN0LnJlcFJvbGUgPSByZXBPYmoucmVwX3N1Ym1pc3Npb25fY29udGFjdF9yb2xlO1xyXG4gICAgfVxyXG5cclxuICAgIC8vVE9ETyBkZXByZWNhdGVkXHJcbiAgICBmdW5jdGlvbiBfbWFwUmVwQ29udGFjdFRvT3V0cHV0KHJlcE9iaikge1xyXG4gICAgICAgIHZhciByZXBDb250YWN0ID0ge307XHJcbiAgICAgICAgcmVwQ29udGFjdC5yZXBfc3VibWlzc2lvbl9jb250YWN0X3JvbGUgPSByZXBPYmoucmVwUm9sZTtcclxuICAgICAgICAvL2RlZmxhdHRlbiB0aGUgb2JqZWN0XHJcbiAgICAgICAgcmVwQ29udGFjdC5yZXBfc3VibWlzc2lvbl9jb250YWN0ID0gX21hcENvbnRhY3RUb091dHB1dChyZXBPYmopO1xyXG4gICAgICAgIHJldHVybiByZXBDb250YWN0O1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIF90cmFuc2Zvcm1Db250YWN0RnJvbUZpbGVPYmooY29udGFjdE9iaikge1xyXG4gICAgICAgIHZhciBjb250YWN0ID0ge307XHJcbiAgICAgICAgaWYgKCFjb250YWN0T2JqKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJUaGVyZSBpcyBubyBjb250YWN0IG9iamVjdFwiKTtcclxuICAgICAgICAgICAgcmV0dXJuIGNvbnRhY3Q7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnRhY3Quc2FsdXRhdGlvbiA9IGNvbnRhY3RPYmouc2FsdXRhdGlvbjtcclxuICAgICAgICBjb250YWN0LmdpdmVuTmFtZSA9IGNvbnRhY3RPYmouZ2l2ZW5fbmFtZTtcclxuICAgICAgICBjb250YWN0LmluaXRpYWxzID0gY29udGFjdE9iai5pbml0aWFscztcclxuICAgICAgICBjb250YWN0LnN1cm5hbWUgPSBjb250YWN0T2JqLnN1cm5hbWU7XHJcbiAgICAgICAgY29udGFjdC50aXRsZSA9IGNvbnRhY3RPYmouam9iX3RpdGxlO1xyXG4gICAgICAgIGNvbnRhY3QubGFuZ3VhZ2UgPSBjb250YWN0T2JqLmxhbmd1YWdlX2NvcnJlc3BvbmRhbmNlO1xyXG4gICAgICAgIGNvbnRhY3QucGhvbmUgPSBjb250YWN0T2JqLnBob25lX251bTtcclxuICAgICAgICBjb250YWN0LnBob25lRXh0ID0gY29udGFjdE9iai5waG9uZV9leHQ7XHJcbiAgICAgICAgY29udGFjdC5mYXggPSBjb250YWN0T2JqLmZheF9udW07XHJcbiAgICAgICAgY29udGFjdC5lbWFpbCA9IGNvbnRhY3RPYmouZW1haWw7XHJcbiAgICAgICAgcmV0dXJuIGNvbnRhY3Q7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIGZ1bmN0aW9uIF9tYXBDb250YWN0VG9PdXRwdXQoY29udGFjdE9iaikge1xyXG5cclxuICAgICAgICB2YXIgY29udGFjdCA9IHt9O1xyXG4gICAgICAgIGNvbnRhY3Quc2FsdXRhdGlvbiA9IGNvbnRhY3RPYmouc2FsdXRhdGlvbjtcclxuICAgICAgICBjb250YWN0LmdpdmVuX25hbWUgPSBjb250YWN0T2JqLmdpdmVuTmFtZTtcclxuICAgICAgICBjb250YWN0LmluaXRpYWxzID0gY29udGFjdE9iai5pbml0aWFscztcclxuICAgICAgICBjb250YWN0LnN1cm5hbWUgPSBjb250YWN0T2JqLnN1cm5hbWU7XHJcbiAgICAgICAgY29udGFjdC5qb2JfdGl0bGUgPSBjb250YWN0T2JqLnRpdGxlO1xyXG4gICAgICAgIGNvbnRhY3QubGFuZ3VhZ2VfY29ycmVzcG9uZGFuY2UgPSBjb250YWN0T2JqLmxhbmd1YWdlO1xyXG4gICAgICAgIGNvbnRhY3QucGhvbmVfbnVtID0gY29udGFjdE9iai5waG9uZTtcclxuICAgICAgICBjb250YWN0LnBob25lX2V4dCA9IGNvbnRhY3RPYmoucGhvbmVFeHQ7XHJcbiAgICAgICAgY29udGFjdC5mYXhfbnVtID0gY29udGFjdE9iai5mYXg7XHJcbiAgICAgICAgY29udGFjdC5lbWFpbCA9IGNvbnRhY3RPYmouZW1haWw7XHJcbiAgICAgICAgcmV0dXJuIGNvbnRhY3Q7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gX21hcEFkZHJlc3NUb091dHB1dChhZGRyZXNzT2JqKSB7XHJcblxyXG4gICAgICAgIHZhciBhZGRyZXNzID0ge307XHJcbiAgICAgICAgYWRkcmVzcy5zdHJlZXRfYWRkcmVzcyA9IGFkZHJlc3NPYmouc3RyZWV0O1xyXG4gICAgICAgIGFkZHJlc3MuY2l0eSA9IGFkZHJlc3NPYmouY2l0eTtcclxuICAgICAgICBhZGRyZXNzLnByb3ZpbmNlX2xvdiA9IGFkZHJlc3NPYmouc3RhdGVMaXN0O1xyXG4gICAgICAgIGFkZHJlc3MucHJvdmluY2VfdGV4dCA9IGFkZHJlc3NPYmouc3RhdGVUZXh0O1xyXG4gICAgICAgIGFkZHJlc3MuY291bnRyeSA9IFwiXCI7XHJcbiAgICAgICAgaWYgKGFkZHJlc3NPYmouY291bnRyeSkge1xyXG4gICAgICAgICAgICBhZGRyZXNzLmNvdW50cnkgPVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIF9sYWJlbF9lbjogYWRkcmVzc09iai5jb3VudHJ5LmVuLFxyXG4gICAgICAgICAgICAgICAgICAgIF9sYWJlbF9mcjogYWRkcmVzc09iai5jb3VudHJ5LmZyLFxyXG4gICAgICAgICAgICAgICAgICAgIF9fdGV4dDogYWRkcmVzc09iai5jb3VudHJ5LmlkXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGFkZHJlc3MucG9zdGFsX2NvZGUgPSBhZGRyZXNzT2JqLnBvc3RhbENvZGU7XHJcbiAgICAgICAgcmV0dXJuIChhZGRyZXNzKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBfdHJhbnNmb3JtQWRkcmVzc0Zyb21GaWxlT2JqKCRmaWx0ZXIsIGdldENvdW50cnlBbmRQcm92aW5jZXMsIGFkZHJlc3NPYmopIHtcclxuICAgICAgICB2YXIgYWRkcmVzcyA9IHt9O1xyXG4gICAgICAgIGFkZHJlc3Muc3RyZWV0ID0gYWRkcmVzc09iai5zdHJlZXRfYWRkcmVzcztcclxuICAgICAgICBhZGRyZXNzLmNpdHkgPSBhZGRyZXNzT2JqLmNpdHk7XHJcbiAgICAgICAgYWRkcmVzcy5zdGF0ZUxpc3QgPSBhZGRyZXNzT2JqLnByb3ZpbmNlX2xvdjtcclxuICAgICAgICBhZGRyZXNzLnN0YXRlVGV4dCA9IGFkZHJlc3NPYmoucHJvdmluY2VfdGV4dDtcclxuICAgICAgICBhZGRyZXNzLmNvdW50cnkgPSBcIlwiO1xyXG4gICAgICAgIGlmIChhZGRyZXNzT2JqLmNvdW50cnkuX190ZXh0KSB7XHJcbiAgICAgICAgICAgIGFkZHJlc3MuY291bnRyeSA9ICRmaWx0ZXIoJ2ZpbHRlcicpKGdldENvdW50cnlBbmRQcm92aW5jZXMuZ2V0Q291bnRyaWVzKCksIHtpZDogYWRkcmVzc09iai5jb3VudHJ5Ll9fdGV4dH0pWzBdO1xyXG4gICAgICAgICAgICBhZGRyZXNzLmNvdW50cnlEaXNwbGF5ID0gYWRkcmVzc09iai5jb3VudHJ5LmlkO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgYWRkcmVzcy5wb3N0YWxDb2RlID0gYWRkcmVzc09iai5wb3N0YWxfY29kZTtcclxuICAgICAgICByZXR1cm4gKGFkZHJlc3MpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIF9jcmVhdGVMaWZlQ3ljbGVNb2RlbCgpIHtcclxuICAgICAgICB2YXIgZGVmYXVsdFJlY29yZCA9IHtcclxuICAgICAgICAgICAgLy8gXCJzZXF1ZW5jZVwiOiBcIjAwMDBcIixcclxuICAgICAgICAgICAgLy8gXCJkYXRlRmlsZWRcIjogXCJcIixcclxuICAgICAgICAgICAgXCJjb250cm9sTnVtYmVyXCI6IFwiXCIsXHJcbiAgICAgICAgICAgIFwiYWN0aXZpdHlMZWFkXCI6IFwiXCIsXHJcbiAgICAgICAgICAgIFwiYWN0aXZpdHlUeXBlXCI6IFwiXCIsXHJcbiAgICAgICAgICAgIFwiYWN0aXZpdHlUeXBlRGlzcGxheVwiOiBcIlwiLFxyXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uVmFsdWVcIjogXCJcIixcclxuICAgICAgICAgICAgXCJzdGFydERhdGVcIjogXCJcIixcclxuICAgICAgICAgICAgXCJlbmREYXRlXCI6IFwiXCIsXHJcbiAgICAgICAgICAgIFwiZGV0YWlsc1wiOiBcIlwiLFxyXG4gICAgICAgICAgICBcInNlcXVlbmNlVmVyc2lvblwiOiBcIlwiLFxyXG4gICAgICAgICAgICBcInNlcXVlbmNlQ29uY2F0XCI6IFwiXCIsXHJcbiAgICAgICAgICAgIFwiaXNTYXZlZFwiOiBmYWxzZVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgLy9UT0RPIGdldCBuZXh0IHNlcXVlbmNlIG51bWJlclxyXG4gICAgICAgIHJldHVybiBkZWZhdWx0UmVjb3JkO1xyXG4gICAgfVxyXG5cclxuICAgIC8vVE9ETyBtYWtlIGEgc3RhbmRhcmQgc2VydmljZVxyXG4gICAgZnVuY3Rpb24gX2NyZWF0ZUFkZHJlc3NNb2RlbCgpIHtcclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzdHJlZXQ6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBjaXR5OiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgc3RhdGVMaXN0OiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgc3RhdGVUZXh0OiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgY291bnRyeTogXCJcIixcclxuICAgICAgICAgICAgICAgIGNvdW50cnlEaXNwbGF5OiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgcG9zdGFsQ29kZTogXCJcIlxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgKVxyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIF9jcmVhdGVDb250YWN0TW9kZWwoKSB7XHJcbiAgICAgICAgdmFyIGNvbnRhY3QgPSB7fTtcclxuXHJcbiAgICAgICAgY29udGFjdC5zYWx1dGF0aW9uID0gXCJcIjtcclxuICAgICAgICBjb250YWN0LmdpdmVuTmFtZSA9IFwiXCI7XHJcbiAgICAgICAgY29udGFjdC5pbml0aWFscyA9IFwiXCI7XHJcbiAgICAgICAgY29udGFjdC5zdXJuYW1lID0gXCJcIjtcclxuICAgICAgICBjb250YWN0LmpvYlRpdGxlID0gXCJcIjtcclxuICAgICAgICBjb250YWN0Lmxhbmd1YWdlQ29ycmVzcG9uZGFuY2UgPSBcIlwiO1xyXG4gICAgICAgIGNvbnRhY3QucGhvbmVOdW0gPSBcIlwiO1xyXG4gICAgICAgIGNvbnRhY3QucGhvbmVFeHQgPSBcIlwiO1xyXG4gICAgICAgIGNvbnRhY3QuZmF4ID0gXCJcIjtcclxuICAgICAgICBjb250YWN0LmVtYWlsID0gXCJcIjtcclxuICAgICAgICByZXR1cm4gY29udGFjdDtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBfZ2V0VG9kYXkoKSB7XHJcbiAgICAgICAgdmFyIGQgPSBuZXcgRGF0ZSgpO1xyXG4gICAgICAgIHZhciBpc29EYXRlID0gZC5nZXRGdWxsWWVhcigpICsgJy0nXHJcbiAgICAgICAgICAgICsgcGFkKGQuZ2V0TW9udGgoKSArIDEpICsgJy0nXHJcbiAgICAgICAgICAgICsgcGFkKGQuZ2V0RGF0ZSgpKTtcclxuICAgICAgICByZXR1cm4gKGlzb0RhdGUpO1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBwYWQobikge1xyXG4gICAgICAgICAgICByZXR1cm4gbiA8IDEwID8gJzAnICsgbiA6IG5cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy90b2RvIGRlcHJlY2F0ZWRcclxuICAgIGZ1bmN0aW9uIF9jcmVhdGVSZXBDb250YWN0KCkge1xyXG5cclxuICAgICAgICB2YXIgY29udGFjdCA9IF9jcmVhdGVDb250YWN0TW9kZWwoKTtcclxuICAgICAgICBjb250YWN0LnJlcFJvbGUgPSBcIlwiO1xyXG4gICAgICAgIHJldHVybiBjb250YWN0XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gX2dldEVtcHR5VHJhbnNhY3Rpb25Nb2RlbCgpIHtcclxuICAgICAgICB2YXIgZGVmYXVsdFRyYW5zYWN0aW9uRGF0YSA9IHtcclxuICAgICAgICAgICAgZGF0YUNoZWNrc3VtOiBcIlwiLFxyXG4gICAgICAgICAgICBkYXRlU2F2ZWQ6IFwiXCIsXHJcbiAgICAgICAgICAgIHNvZnR3YXJlVmVyc2lvbjogXCIyLjAuMFwiLFxyXG4gICAgICAgICAgICB0cmFuc2FjdGlvblR5cGU6IFwiXCIsXHJcbiAgICAgICAgICAgIGlzVGhpcmRQYXJ0eTogXCJcIixcclxuICAgICAgICAgICAgaXNQcmlvcml0eTogXCJcIixcclxuICAgICAgICAgICAgaXNOb2M6IFwiXCIsXHJcbiAgICAgICAgICAgIGlzQWRtaW5TdWI6IFwiXCIsXHJcbiAgICAgICAgICAgIHN1YlR5cGU6IFwiXCIsXHJcbiAgICAgICAgICAvLyAgaXNFY3RkOiBcIk5cIixcclxuICAgICAgICAgICAgZWN0ZDoge1xyXG4gICAgICAgICAgICAgICAgY29tcGFueUlkOiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgZG9zc2llcklkOiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgZG9zc2llclR5cGU6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBwcm9kdWN0TmFtZTogXCJcIixcclxuICAgICAgICAgICAgICAgIGxpZmVjeWNsZVJlY29yZDogW11cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgaXNTb2xpY2l0ZWQ6IFwiXCIsXHJcbiAgICAgICAgICAgIHNvbGljaXRlZFJlcXVlc3RlclJlb3JkOiBbXSxcclxuICAgICAgICAgICAgcHJvamVjdE1hbmFnZXIxOiBcIlwiLFxyXG4gICAgICAgICAgICBwcm9qZWN0TWFuYWdlcjI6IFwiXCIsXHJcbiAgICAgICAgICAgIGlzRmVlczogXCJcIixcclxuICAgICAgICAgICAgcmVzZXRCdG5DbGlja2VkIDogZmFsc2UsXHJcbiAgICAgICAgICAgIGZlZURldGFpbHM6IG51bGwsXHJcbiAgICAgICAgICAgIGlzQWN0aXZpdHlDaGFuZ2VzOiBcIllcIiwgLy9kZXByZWNhdGVkXHJcbiAgICAgICAgICAgIGNvbXBhbnlOYW1lOiBcIlwiLFxyXG4gICAgICAgICAgICBhY3Rpdml0eUFkZHJlc3M6IF9jcmVhdGVBZGRyZXNzTW9kZWwoKSxcclxuICAgICAgICAgICAgY29uZmlybUNvbnRhY3RWYWxpZDogZmFsc2UsXHJcbiAgICAgICAgICAgIGFjdGl2aXR5Q29udGFjdDogX2NyZWF0ZUNvbnRhY3RNb2RlbCgpLFxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHJldHVybiBkZWZhdWx0VHJhbnNhY3Rpb25EYXRhO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlcyBhbmQgZW1wdHkgRmVlIERldGFpbHMgb2JqZWN0XHJcbiAgICAgKiBAcmV0dXJucyB7e2ZlZVR5cGU6IHN0cmluZywgZGVmZXJyYWxTdGF0ZW1uZXQ6IHN0cmluZ319XHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBfY3JlYXRlRmVlRGV0YWlscyhOTykge1xyXG4gICAgICAgIHZhciBmZWVPYmogPSB7XHJcblxyXG4gICAgICAgICAgICBzdWJtaXNzaW9uQ2xhc3M6IG51bGwsXHJcbiAgICAgICAgICAgIGRlZmVycmFsUmVxdWVzdDogJycsIC8vZGVmZXIgcGF5bWVudCBmb3IgdHdvIHllYXJzXHJcbiAgICAgICAgICAgIGZlZVJlbWlzc2lvbjogXCJcIiwgLy9hcHBseWluZyBmb3IgZmVlIHJlbWlzc2lvblxyXG4gICAgICAgICAgICBncm9zc1JldmVudWU6IDAsXHJcbiAgICAgICAgICAgIHBlcmNlbnRHcm9zczogXCJcIixcclxuICAgICAgICAgICAgcmVxdWlyZWREb2NzOiB7XHJcbiAgICAgICAgICAgICAgICBkZWZlcnJhbFN0YXQ6IGZhbHNlLCAvL3N0YXRlbWVudCBzdXBwb3J0aW5nIHRoZSBkZWZlcnJhbCByZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICByZXZTdGF0OiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIHNhbGVzSGlzdG9yeTogZmFsc2UsIC8vc2FsZXMgaGlzdG9yeVxyXG4gICAgICAgICAgICAgICAgYXZnU2FsZVByaWNlOiBmYWxzZSwgLy9hdmVyYWdlIHNhbGVzIHByaWNlIGFuZCBkZW1hbmRcclxuICAgICAgICAgICAgICAgIGVzdE1hcmtldFNoYXJlOiBmYWxzZSwgLy9lc3RpbWF0ZWQgbWFya2V0IHNoYXJlXHJcbiAgICAgICAgICAgICAgICBjb21wYXJpc29uOiBmYWxzZSwgLy8vY29tcGFyaW9zbiB0byBzaW1pbGFyIHByb2R1Y3RzXHJcbiAgICAgICAgICAgICAgICBtYXJrZXRQbGFuOiBmYWxzZSwgLy9tYXJrZXRpbmcgcGFsbmUgZm9yIHRoZSBkcnVnIHByb2R1Y3RcclxuICAgICAgICAgICAgICAgIG90aGVyOiBmYWxzZSwgICAvL290aGVyXHJcbiAgICAgICAgICAgICAgICBvdGhlckRldGFpbHM6IFwiXCJcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgcGF5bWVudE1ldGhvZDoge1xyXG4gICAgICAgICAgICAgICAgY3JlZGl0Q2FyZDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBjaGVxdWU6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgbW9uZXlPcmRlcjogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBiYW5rRHJhZnQ6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgZXhpc3RpbmdDcmVkaXQ6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgYmFua1dpcmU6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgYmlsbFBheW1lbnQ6IGZhbHNlXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4gZmVlT2JqO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIF9jcmVhdGVFbXB0eUZlZURldGFpbHNGb3JPdXRwdXQoTk8pIHtcclxuICAgICAgICB2YXIgZmVlT2JqID0ge1xyXG5cclxuICAgICAgICAgICAgc3VibWlzc2lvbl9jbGFzczogbnVsbCxcclxuICAgICAgICAgICAgZGVmZXJyYWxfcmVxdWVzdDogTk8sIC8vZGVmZXIgcGF5bWVudCBmb3IgdHdvIHllYXJzXHJcbiAgICAgICAgICAgIGZlZV9yZW1pc3Npb246IFwiXCIsIC8vYXBwbHlpbmcgZm9yIGZlZSByZW1pc3Npb25cclxuICAgICAgICAgICAgZ3Jvc3NfcmV2ZW51ZTogMCxcclxuICAgICAgICAgICAgcGVyY2VudF9ncm9zczogXCJcIixcclxuICAgICAgICAgICAgcmVxdWlyZWRfZG9jczoge1xyXG4gICAgICAgICAgICAgICAgZGVmZXJyYWxfc3RhdGVtZW50OiBOTywgLy9zdGF0ZW1lbnQgc3VwcG9ydGluZyB0aGUgZGVmZXJyYWwgcmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgcmVtaXNzaW9uX2NlcnRpZmllZDogTk8sXHJcbiAgICAgICAgICAgICAgICBzYWxlc19oaXN0b3J5OiBOTywgLy9zYWxlcyBoaXN0b3J5XHJcbiAgICAgICAgICAgICAgICBhdmdfc2FsZV9wcmljZTogTk8sIC8vYXZlcmFnZSBzYWxlcyBwcmljZSBhbmQgZGVtYW5kXHJcbiAgICAgICAgICAgICAgICBlc3RfbWFya2V0X3NoYXJlOiBOTywgLy9lc3RpbWF0ZWQgbWFya2V0IHNoYXJlXHJcbiAgICAgICAgICAgICAgICBjb21wYXJpc29uX3Byb2R1Y3RzOiBOTywgLy8vY29tcGFyaW9zbiB0byBzaW1pbGFyIHByb2R1Y3RzXHJcbiAgICAgICAgICAgICAgICBtYXJrZXRfcGxhbjogTk8sIC8vbWFya2V0aW5nIHBhbG5lIGZvciB0aGUgZHJ1ZyBwcm9kdWN0XHJcbiAgICAgICAgICAgICAgICBvdGhlcjogTk8sICAgLy9vdGhlclxyXG4gICAgICAgICAgICAgICAgb3RoZXJfZGV0YWlsczogXCJcIlxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBwYXltZW50X21ldGhvZDoge1xyXG4gICAgICAgICAgICAgICAgY3JlZGl0X2NhcmQ6IE5PLFxyXG4gICAgICAgICAgICAgICAgY2hlcXVlOiBOTyxcclxuICAgICAgICAgICAgICAgIG1vbmV5X29yZGVyOiBOTyxcclxuICAgICAgICAgICAgICAgIGJhbmtfZHJhZnQ6IE5PLFxyXG4gICAgICAgICAgICAgICAgZXhpc3RpbmdfY3JlZGl0OiBOTyxcclxuICAgICAgICAgICAgICAgIGJhbmtfd2lyZTogTk8sXHJcbiAgICAgICAgICAgICAgICBiaWxsX3BheW1lbnQ6IE5PXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGZlZU9iajtcclxuICAgIH1cclxuXHJcbn0pKCk7XHJcbiIsIihmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgndHJhbnNhY3Rpb25GZWVzTW9kdWxlJywgW1xyXG4gICAgICAgICAgICAnc2VydmljZXMnLFxyXG4gICAgICAgICAgICAnaHBmYkNvbnN0YW50cycsXHJcbiAgICAgICAgICAgICdlcnJvck1lc3NhZ2VNb2R1bGUnXHJcbiAgICAgICAgXSk7XHJcblxyXG59KSgpO1xyXG5cclxuKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgndHJhbnNhY3Rpb25GZWVzTW9kdWxlJylcclxuICAgICAgICAuY29tcG9uZW50KCdjbXBUcmFuc2FjdGlvbkZlZXMnLCB7XHJcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnYXBwL3NjcmlwdHMvY29tcG9uZW50cy90cmFuc2FjdGlvbkZlZXMvdHBsLXRyYW5zYWN0aW9uLWZlZXNfMjAxOTAzMjJfMTU0NC5odG1sJyxcclxuICAgICAgICAgICAgY29udHJvbGxlcjogdHJhbnNhY3Rpb25GZWVzQ29udHJvbGxlcixcclxuICAgICAgICAgICAgY29udHJvbGxlckFzOiAndHJhbnNGZWVDdHJsJyxcclxuICAgICAgICAgICAgYmluZGluZ3M6IHtcclxuICAgICAgICAgICAgICAgIGZlZVJlY29yZDogJzwnLFxyXG4gICAgICAgICAgICAgICAgbGFuZ3VhZ2U6JzwnLFxyXG4gICAgICAgICAgICAgICAgc2hvd0Vycm9yU3VtbWFyeTogJzwnLFxyXG4gICAgICAgICAgICAgICAgdXBkYXRlRXJyb3JTdW1tYXJ5OicmJ1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgdHJhbnNhY3Rpb25GZWVzQ29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCAnJHdpbmRvdycsICdUcmFuc2FjdGlvbkxpc3RzJywgJ1lFUycsICdOTycsJ0VOR0xJU0gnLCdGUkVOQ0gnLCdBRFZBTkNFX0ZFRV9QQVlNRU5UX0VOJywnQURWQU5DRV9GRUVfUEFZTUVOVF9GUiddO1xyXG5cclxuICAgIGZ1bmN0aW9uIHRyYW5zYWN0aW9uRmVlc0NvbnRyb2xsZXIoJHNjb3BlLCAkd2luZG93LCBUcmFuc2FjdGlvbkxpc3RzLCBZRVMsIE5PLEVOR0xJU0gsRlJFTkNILCBBRFZBTkNFX0ZFRV9QQVlNRU5UX0VOLEFEVkFOQ0VfRkVFX1BBWU1FTlRfRlIpIHtcclxuXHJcbiAgICAgICAgdmFyIHZtID0gdGhpcztcclxuICAgICAgICB2bS5tb2RlbCA9IHt9O1xyXG4gICAgICAgIHZtLnN1Ym1pc3Npb25UeXBlID0ge307XHJcbiAgICAgICAgdm0ub25lUGF5bWVudFNlbGVjdGVkID0gXCJcIjtcclxuICAgICAgICB2bS55ZXNOb0xpc3QgPSBbWUVTLCBOT107XHJcbiAgICAgICAgdm0ucmVxdWlyZWRPbmx5RXJyb3IgPSBbe3R5cGU6IFwicmVxdWlyZWRcIiwgZGlzcGxheUFsaWFzOiBcIk1TR19FUlJfTUFORFwifV07XHJcbiAgICAgICAgdm0ub25lUGF5bWVudEVycm9yID0gW3t0eXBlOiBcInJlcXVpcmVkXCIsIGRpc3BsYXlBbGlhczogXCJPTkVfUEFZTUVOVF9NRVRIT0RcIn1dO1xyXG4gICAgICAgIHZtLmFsZXJ0cyA9IFtmYWxzZSwgZmFsc2UsIGZhbHNlXTtcclxuICAgICAgICB2bS5sYW5nPUVOR0xJU0g7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQ2FsbGVkIGFmdGVyIG9uQ2hhbmdlcyBldm5ldCwgaW5pdGlhbGl6ZXNcclxuICAgICAgICAgKi9cclxuICAgICAgICB2bS4kb25Jbml0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBfc2V0SWROYW1lcygpO1xyXG4gICAgICAgICAgICB2bS5zdWJtaXNzaW9uVHlwZSA9IFRyYW5zYWN0aW9uTGlzdHMuZ2V0RmVlTGlzdCgpO1xyXG4gICAgICAgICAgICB2bS5hbGVydHMgPSBbZmFsc2UsIGZhbHNlLCBmYWxzZV07XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdm0uZXJyb3JzVGVtcCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBDYWxsZWQgb24gYmluZGluZyBjaGFuZ2VzXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdm0uJG9uQ2hhbmdlcyA9IGZ1bmN0aW9uIChjaGFuZ2VzKSB7XHJcblxyXG4gICAgICAgICAgICBpZihjaGFuZ2VzLmxhbmd1YWdlKXtcclxuICAgICAgICAgICAgICAgIHZtLmxhbmc9Y2hhbmdlcy5sYW5ndWFnZS5jdXJyZW50VmFsdWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGNoYW5nZXMuZmVlUmVjb3JkKSB7XHJcbiAgICAgICAgICAgICAgICB2bS5tb2RlbCA9IGNoYW5nZXMuZmVlUmVjb3JkLmN1cnJlbnRWYWx1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZihjaGFuZ2VzLnNob3dFcnJvclN1bW1hcnkpe1xyXG4gICAgICAgICAgICAgICAgdm0uc2hvd1N1bW1hcnk9Y2hhbmdlcy5zaG93RXJyb3JTdW1tYXJ5LmN1cnJlbnRWYWx1ZTtcclxuXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdm0uc2hvd0Vycm9yID0gZnVuY3Rpb24gKGN0cmwpIHtcclxuXHJcbiAgICAgICAgICAgIGlmICghY3RybCkgcmV0dXJuIGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgaWYgKChjdHJsLiRpbnZhbGlkICYmIGN0cmwuJHRvdWNoZWQpIHx8ICh2bS5zaG93U3VtbWFyeSAmJiBjdHJsLiRpbnZhbGlkICkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIHZtLmlzUGF5bWVudFNlbGVjdGVkID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgbWV0aG9kU2VsZWN0ZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyh2bS5tb2RlbC5wYXltZW50TWV0aG9kKTtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodm0ubW9kZWwucGF5bWVudE1ldGhvZFtrZXlzW2ldXSA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIG1ldGhvZFNlbGVjdGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2bS5vbmVQYXltZW50U2VsZWN0ZWQgPSBcIlwiO1xyXG5cclxuICAgICAgICAgICAgaWYgKG1ldGhvZFNlbGVjdGVkKSB7XHJcbiAgICAgICAgICAgICAgICB2bS5vbmVQYXltZW50U2VsZWN0ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWVcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHZtLm9uZVBheW1lbnRTZWxlY3RlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdm0uaXNGZWVSZW1pdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKHZtLm1vZGVsLmZlZVJlbWlzc2lvbiA9PT0gWUVTKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2bS5tb2RlbC5ncm9zc1JldmVudWUgPSAwO1xyXG4gICAgICAgICAgICB2bS5tb2RlbC5wZXJjZW50R3Jvc3MgPSAwO1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcblxyXG4gICAgICAgIH07XHJcbiAgICAgICAgdm0uY2FsY1ZhbHVlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gcGFyc2VGbG9hdCh2bS5tb2RlbC5ncm9zc1JldmVudWUpICogMC4xO1xyXG4gICAgICAgICAgICBpZiAoaXNOYU4ocmVzdWx0KSkgcmVzdWx0ID0gMDtcclxuICAgICAgICAgICAgdm0ubW9kZWwucGVyY2VudEdyb3NzID0gcmVzdWx0LnRvRml4ZWQoMik7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogU2V0cyB0aGUgZGVmZXJyYWwgc3RhdGUgaW5mb3JtYXRpb25cclxuICAgICAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuICAgICAgICAgKi9cclxuICAgICAgICB2bS5pc0RlZmVycmFsID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAoIXZtLm1vZGVsKSByZXR1cm4gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICBpZiAodm0ubW9kZWwuZGVmZXJyYWxSZXF1ZXN0ID09PSBZRVMpIHtcclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdm0ubW9kZWwucmVxdWlyZWREb2NzLmRlZmVycmFsU3RhdCA9IGZhbHNlO1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogRGV0ZXJtaW5lcyBpZiB0aGUgZW50aXJlIGRvY3VtZW50YXRpb24gc2VjdGlvbiBzaG91bGQgYmUgIHNob3duXHJcbiAgICAgICAgICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdm0uc2hvd0RvY3VtZW50YXRpb25TZWN0aW9uID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAodm0uaXNFbGlnaWJsZSgpIHx8IHZtLmlzRGVmZXJyYWwoKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG5cclxuICAgICAgICB9O1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIERldGVybWluZXMgaWYgcGF5bWVudCBtZXRob2RzIHNob3VsZCBiZSBzaG93blxyXG4gICAgICAgICAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHZtLnNob3dQYXltZW50TWV0aG9kcyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKCF2bS5tb2RlbCkgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB2YXIgc2hvd1BNID0gIXZtLmlzRGVmZXJyYWwoKSAmJiAoIXZtLmlzRWxpZ2libGUoKSAmJiB2bS5pc0xlc3MxMEsoKSkgfHwgKHZtLmlzRWxpZ2libGUoKSApO1xyXG4gICAgICAgICAgICBpZiAoIXNob3dQTSkge1xyXG4gICAgICAgICAgICAgICAgdm0ubW9kZWwucGF5bWVudE1ldGhvZCA9IHtcclxuICAgICAgICAgICAgICAgICAgICBjcmVkaXRDYXJkOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICBjaGVxdWU6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgIG1vbmV5T3JkZXI6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgIGJhbmtEcmFmdDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgZXhpc3RpbmdDcmVkaXQ6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgIGJhbmtXaXJlOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICBiaWxsUGF5bWVudDogZmFsc2VcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHNob3dQTTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBEZXRlcm1pbmVzIGlmIG5vIGZlZXMgc2hvdWxkIGJlIHNlbnRcclxuICAgICAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuICAgICAgICAgKi9cclxuICAgICAgICB2bS5pc1NlbmROb0ZlZXMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmICghdm0ubW9kZWwgfHwgIXZtLm1vZGVsLnN1Ym1pc3Npb25DbGFzcyB8fCAhdm0ubW9kZWwuc3VibWlzc2lvbkNsYXNzLmZlZSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiAoIXZtLmlzTGVzczEwSygpICYmICF2bS5pc0VsaWdpYmxlKCkgJiYgIXZtLmlzRGVmZXJyYWwoKSAmJiAhdm0uaXNGZWVSZW1pdCgpKTtcclxuXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogRGV0ZXJtaW5lcyBpZiBzaG93IFBheW1lbnQgdGl0bGVcclxuICAgICAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuICAgICAgICAgKi9cclxuICAgICAgICB2bS5zaG93UGF5bWVudFNlY3Rpb24gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAoKCF2bS5pc0RlZmVycmFsKCkgJiYgdm0uaXNGZWVSZW1pdCgpKSB8fFxyXG4gICAgICAgICAgICAgICAgKHZtLmlzRWxpZ2libGUoKSAmJiB2bS5pc0xlc3MxMEsoKSkgfHxcclxuICAgICAgICAgICAgICAgICh2bS5pc0VsaWdpYmxlKCkgJiYgIXZtLmlzTGVzczEwSygpKSB8fFxyXG4gICAgICAgICAgICAgICAgKHZtLmlzRGVmZXJyYWwoKSAmJiAhdm0uaXNFbGlnaWJsZSgpKVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZtLnNob3dQYXltZW50UGFuZWwgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmICghdm0ubW9kZWwgfHwgIXZtLm1vZGVsLnN1Ym1pc3Npb25DbGFzcyB8fCAhdm0ubW9kZWwuc3VibWlzc2lvbkNsYXNzLmZlZSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIGlzU2VuZE5vRmVlcyAtbW9yZSB0aGFuIDEwSywgaXNEZWZlcnJhbCAtIHllcywgaXNGZWVSZW1pdCAtIHllc1xyXG4gICAgICAgICAgICBpZih2bS5pc1NlbmROb0ZlZXMoKSB8fCB2bS5pc0RlZmVycmFsKCkgfHwgdm0uaXNGZWVSZW1pdCgpKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICB9O1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBSZXR1cm5zIGlmIHRoZSBmZWVzIGFyZSBlbGdpYmxlIGZvciByZW1pc3Npb25zXHJcbiAgICAgICAgICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdm0uaXNFbGlnaWJsZSA9IGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgICAgIC8vY2hlY2sgaWYgdGhlcmUgaXMgbm8gbW9kZWwgb3Igc3VibWlzc2lvbiBjbGFzcyBjaG9zZW5cclxuICAgICAgICAgICAgaWYgKCF2bS5tb2RlbCB8fCAhdm0ubW9kZWwuc3VibWlzc2lvbkNsYXNzIHx8ICF2bS5tb2RlbC5zdWJtaXNzaW9uQ2xhc3MuZmVlKSB7XHJcbiAgICAgICAgICAgICAgICBjbGVhclJlbWl0UmVxdWlyZWREb2NzKCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh2bS5pc0ZlZVJlbWl0KCkgJiYgKHZtLm1vZGVsLnBlcmNlbnRHcm9zcyA8IHZtLm1vZGVsLnN1Ym1pc3Npb25DbGFzcy5mZWUpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjbGVhclJlbWl0UmVxdWlyZWREb2NzKCk7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgdm0uaXNMZXNzMTBLID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAoIXZtLm1vZGVsIHx8ICF2bS5tb2RlbC5zdWJtaXNzaW9uQ2xhc3MpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gdm0ubW9kZWwuc3VibWlzc2lvbkNsYXNzLmZlZSA8IDEwMDAwXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdm0ub3BlblBheW1lbnRGb3JtID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgZmVlbGluaz1BRFZBTkNFX0ZFRV9QQVlNRU5UX0VOO1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyh2bS5sYW5nKTtcclxuICAgICAgICAgICAgaWYodm0ubGFuZyA9PT0gRlJFTkNIKXtcclxuXHJcbiAgICAgICAgICAgICAgICBmZWVsaW5rPUFEVkFOQ0VfRkVFX1BBWU1FTlRfRlI7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICR3aW5kb3cub3BlbihmZWVsaW5rLCAnX2JsYW5rJyk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdm0uc2V0RG9jT3RoZXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmICghdm0ubW9kZWwpIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgaWYgKHZtLm1vZGVsLnJlcXVpcmVkRG9jcy5vdGhlcikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdm0ubW9kZWwucmVxdWlyZWREb2NzLm90aGVyRGV0YWlscyA9IFwiXCI7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIENsZWFycyB0aGUgcmVxdWlyZWQgZGF0YSByZWxhdGVkIHRvIHJlbWl0XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZnVuY3Rpb24gY2xlYXJSZW1pdFJlcXVpcmVkRG9jcygpIHtcclxuICAgICAgICAgICAgaWYgKCF2bS5tb2RlbCkgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgdm0ubW9kZWwucmVxdWlyZWREb2NzLnJldlN0YXQgPSBmYWxzZTtcclxuICAgICAgICAgICAgdm0ubW9kZWwucmVxdWlyZWREb2NzLmVzdE1hcmtldFNoYXJlID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHZtLm1vZGVsLnJlcXVpcmVkRG9jcy5jb21wYXJpc29uID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHZtLm1vZGVsLnJlcXVpcmVkRG9jcy5zYWxlc0hpc3RvcnkgPSBmYWxzZTtcclxuICAgICAgICAgICAgdm0ubW9kZWwucmVxdWlyZWREb2NzLm1hcmtldFBsYW4gPSBmYWxzZTtcclxuICAgICAgICAgICAgdm0ubW9kZWwucmVxdWlyZWREb2NzLmF2Z1NhbGVQcmljZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICB2bS5tb2RlbC5yZXF1aXJlZERvY3Mub3RoZXIgPSBmYWxzZTtcclxuICAgICAgICAgICAgdm0ubW9kZWwucmVxdWlyZWREb2NzLm90aGVyRGV0YWlscyA9IFwiXCI7XHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gX3NldElkTmFtZXMoKSB7XHJcbiAgICAgICAgICAgIHZhciBzY29wZUlkID0gXCJfXCIgKyAkc2NvcGUuJGlkO1xyXG4gICAgICAgICAgICB2bS5zdWJtQ2xhc3NJZCA9IFwic3ViX2NsYXNzXCIgKyBzY29wZUlkO1xyXG4gICAgICAgICAgICB2bS5kZXNjcmlwdElkID0gXCJmZWVfZGVzY3JpcHRpb25cIiArIHNjb3BlSWQ7XHJcbiAgICAgICAgICAgIHZtLmZlZUlkID0gXCJmZWVfYW1vdW50XCIgKyBzY29wZUlkO1xyXG4gICAgICAgICAgICB2bS5yZW1pdElkID0gXCJmZWVfcmVtaXNzaW9uXCIgKyBzY29wZUlkO1xyXG4gICAgICAgICAgICB2bS5wYXltZW50U2VsZWN0ZWRJZCA9IFwib25lX3BheW1lbnRfbWV0aG9kXCIgKyBzY29wZUlkO1xyXG4gICAgICAgICAgICB2bS5yZXZlbnVlSWQgPSBcImdyb3NzUmV2ZW51ZVwiICsgc2NvcGVJZDtcclxuICAgICAgICAgICAgdm0ucGVyY2VudElkID0gXCJjYWxjUGVyY2VudFwiICsgc2NvcGVJZDtcclxuICAgICAgICAgICAgdm0uZGVmZXJyYWxTdGF0ZUlkID0gXCJkZWZlcnJhbFN0YXRlXCIgKyBzY29wZUlkOyAvL3N0YXRlbWVudCBzdXBwb3J0aW5nIGRlZmVycmFsXHJcbiAgICAgICAgICAgIHZtLnN0YXRlbWVudDEwSWQgPSBcInJlcXVpcmVkX2RvY1wiICsgc2NvcGVJZDtcclxuICAgICAgICAgICAgdm0ub3RoZXJJZCA9IFwib3RoZXJcIiArIHNjb3BlSWQ7XHJcbiAgICAgICAgICAgIHZtLm90aGVyRGV0YWlsc0lkID0gXCJvdGhlcl9kb2NfZGV0YWlsc1wiICsgc2NvcGVJZDtcclxuICAgICAgICAgICAgdm0ucGF5bWVudEZzSWQ9XCJmc19wYXltZW50X21ldGhvZHNcIiArIHNjb3BlSWQ7XHJcbiAgICAgICAgICAgIHZtLmRlZmVySWQgPSBcImRlZmVyX2ZlZXNcIiArIHNjb3BlSWQ7XHJcblxyXG4gICAgICAgIH1cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBDbG9zZXMgdGhlIGluc3RydWN0aW9uIGFsZXJ0c1xyXG4gICAgICAgICAqIEBwYXJhbSB2YWx1ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHZtLmNsb3NlQWxlcnQgPSBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgaWYgKGFuZ3VsYXIuaXNVbmRlZmluZWQodmFsdWUpKSByZXR1cm47XHJcbiAgICAgICAgICAgIGlmICh2YWx1ZSA8IHZtLmFsZXJ0cy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIHZtLmFsZXJ0c1t2YWx1ZV0gPSBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZtLmFkZEluc3RydWN0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XHJcblxyXG4gICAgICAgICAgICBpZiAoYW5ndWxhci5pc1VuZGVmaW5lZCh2YWx1ZSkpIHJldHVybjtcclxuICAgICAgICAgICAgaWYgKHZhbHVlIDwgdm0uYWxlcnRzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgdm0uYWxlcnRzW3ZhbHVlXSA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG5cclxuICAgIH1cclxufSkoKTsiLCIvKipcclxuICogQ3JlYXRlZCBieSBka2lsdHkgb24gMy8xOC8yMDE3LlxyXG4gKi9cclxuXHJcblxyXG4oZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKCdlcnJvclN1bW1hcnlNb2R1bGUnLCBbXHJcbiAgICAgICAgICAgICdmb2N1cy1pZidcclxuICAgICAgICBdKVxyXG59KSgpO1xyXG5cclxuKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgnZXJyb3JTdW1tYXJ5TW9kdWxlJylcclxuICAgICAgICAuY29tcG9uZW50KCdjbXBFcnJvclN1bW1hcnknLCB7XHJcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnYXBwL3NjcmlwdHMvY29tcG9uZW50cy9lcnJvci1zdW1tYXJ5L3RwbC1lcnJvci1zdW1tYXJ5XzIwMTkwMzIyXzE1NDQuaHRtbCcsXHJcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6IGVycm9yU3VtbWFyeUNvbnRyb2xsZXIsXHJcbiAgICAgICAgICAgIGNvbnRyb2xsZXJBczogJ2VyclN1bW1hcnlDdHJsJyxcclxuXHJcbiAgICAgICAgICAgIGJpbmRpbmdzOiB7XHJcbiAgICAgICAgICAgICAgICBmb3JtUmVmOiAnPCcsXHJcbiAgICAgICAgICAgICAgICBzaG93RXJyb3JzOiAnPCcsXHJcbiAgICAgICAgICAgICAgICB1cGRhdGVFcnJvcnM6ICc8JyxcclxuICAgICAgICAgICAgICAgIG5hbWVTdWZmaXg6ICdAJywgLyoqIFdoYXQgdG8gYWRkIHRvIHRoZSBpZCBvZiB0aGUgZXJyb3Igc3VtbWFyeSB0byBiZSBhYmxlIHRvIGZpbmQgaXQgKiovXHJcbiAgICAgICAgICAgICAgICBmb3JtUHJlYW1ibGU6ICdAJywgLyoqIFdoYXQgdG8gbmFtZSB0aGUgaGVhZGluZyBzaG91bGQgc2F5IGFib3V0IHRoZSBzZWN0aW9uICoqL1xyXG4gICAgICAgICAgICAgICAgbWFrZUZvY3VzZWQ6ICc8JyxcclxuICAgICAgICAgICAgICAgIHNldEhlYWRpbmdMZXZlbDogJ0AnLFxyXG4gICAgICAgICAgICAgICAgZXhjbHVzaW9uTGlzdDogJzwnLFxyXG4gICAgICAgICAgICAgICAgdHJhbnNjbHVkZUxpc3Q6JzwnLCAvL3VzZWQgZm9yIGV4cGFuZGVyIGxpc3RzLCB0aGUgbmFtZSBvZiBhbiBlcnJvciBzdW1tYXJ5IGluIGFuIGV4cGFuZGluZyB0YWJsZSBlbnRyeVxyXG4gICAgICAgICAgICAgICAgZm9ybUlkOiAnPCcsXHJcbiAgICAgICAgICAgICAgICBhbGlhc0xpc3Q6ICc8JyxcclxuICAgICAgICAgICAgICAgIGV4cGFuZFJlY29yZDonJicsXHJcbiAgICAgICAgICAgICAgICBzZWxlY3RUYWI6JyYnXHJcblxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICBlcnJvclN1bW1hcnlDb250cm9sbGVyLiRpbmplY3QgPSBbJyRzY29wZScsJyRsb2NhdGlvbicsJyRhbmNob3JTY3JvbGwnXTtcclxuXHJcbiAgICBmdW5jdGlvbiBlcnJvclN1bW1hcnlDb250cm9sbGVyKCRzY29wZSwkbG9jYXRpb24sJGFuY2hvclNjcm9sbCkge1xyXG4gICAgICAgIHZhciB2bSA9IHRoaXM7XHJcbiAgICAgICAgdm0ucGFyZW50UmVmID0gbnVsbDtcclxuICAgICAgICB2bS5lcnJvckFycmF5ID0gW107XHJcbiAgICAgICAgdm0udW5pcXVlRXJyb3JMaXN0ID0ge307XHJcbiAgICAgICAgLy92bS5wcmV2VmFsdWUgPSB7fTtcclxuICAgICAgICB2bS5pc1Zpc2libGUgPSBmYWxzZTtcclxuICAgICAgICB2bS5uYW1lQWRkZW5kdW0gPSBcIlwiO1xyXG4gICAgICAgIHZtLnJvb3RFcnJvciA9IFwiXCI7XHJcbiAgICAgICAgdm0uaXNGb2N1c0lucHV0ID0gMDtcclxuXHJcbiAgICAgICAgdm0uZXhjbHVzaW9ucz17fTtcclxuICAgICAgICB2bS5hbGlhcz17fTtcclxuICAgICAgICB2bS50cmFuc2NsdWRlTmFtZXM9e307XHJcblxyXG4gICAgICAgIHZtLmhlYWRpbmdQcmVhbWJsZSA9IFwiXCI7XHJcbiAgICAgICAgdm0uaGVhZGVyTGV2ZWwgPSBcIlwiO1xyXG4gICAgICAgIHZtLnN0YXJ0Rm9ybUlkID0gXCJcIjtcclxuXHJcbiAgICAgICAgdm0uJG9uSW5pdCA9IGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAcGFyYW0gY2hhbmdlc1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHZtLiRvbkNoYW5nZXMgPSBmdW5jdGlvbiAoY2hhbmdlcykge1xyXG5cclxuICAgICAgICAgICAgaWYgKGNoYW5nZXMuc2V0SGVhZGluZ0xldmVsKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGFuZ3VsYXIuaXNEZWZpbmVkKGNoYW5nZXMuc2V0SGVhZGluZ0xldmVsLmN1cnJlbnRWYWx1ZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICB2bS5oZWFkZXJMZXZlbCA9IChjaGFuZ2VzLnNldEhlYWRpbmdMZXZlbC5jdXJyZW50VmFsdWUpLnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChjaGFuZ2VzLm5hbWVTdWZmaXgpIHtcclxuICAgICAgICAgICAgICAgIHZtLm5hbWVBZGRlbmR1bSA9IFwiLVwiICsgY2hhbmdlcy5uYW1lU3VmZml4LmN1cnJlbnRWYWx1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoY2hhbmdlcy5mb3JtUHJlYW1ibGUpIHtcclxuICAgICAgICAgICAgICAgIHZtLmhlYWRpbmdQcmVhbWJsZSA9IGNoYW5nZXMuZm9ybVByZWFtYmxlLmN1cnJlbnRWYWx1ZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGNoYW5nZXMuZXhjbHVzaW9uTGlzdCkge1xyXG5cclxuICAgICAgICAgICAgICAgIHZtLmV4Y2x1c2lvbnMgPSBjaGFuZ2VzLmV4Y2x1c2lvbkxpc3QuY3VycmVudFZhbHVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChjaGFuZ2VzLmFsaWFzTGlzdCkge1xyXG5cclxuICAgICAgICAgICAgICAgIHZtLmFsaWFzID0gY2hhbmdlcy5hbGlhc0xpc3QuY3VycmVudFZhbHVlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvL3RoZSBiYXNlIGZvcm0gdGhhdCB0aGlzIGVycm9yIHN1bW1hcnkgaXMgY2hlY2tpbmcgZm9yXHJcbiAgICAgICAgICAgIGlmIChjaGFuZ2VzLmZvcm1SZWYpIHtcclxuICAgICAgICAgICAgICAgIHZtLmdldEVycm9yc1N1bW0oY2hhbmdlcy5mb3JtUmVmLmN1cnJlbnRWYWx1ZS4kZXJyb3IsIGNoYW5nZXMuZm9ybVJlZi5jdXJyZW50VmFsdWUuJG5hbWUpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoY2hhbmdlcy5zaG93RXJyb3JzKSB7XHJcbiAgICAgICAgICAgICAgICB2bS5pc1Zpc2libGUgPSBjaGFuZ2VzLnNob3dFcnJvcnMuY3VycmVudFZhbHVlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoY2hhbmdlcy51cGRhdGVFcnJvcnMpIHtcclxuICAgICAgICAgICAgICAgIGlmICh2bS5mb3JtUmVmKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9wYXNzIGluIHRoZSBmb3JtIG5hbWUgYW5kIHRoZSBlcnJvciBvYmplY3RcclxuICAgICAgICAgICAgICAgICAgICAvL3Nob3VsZCBJIHJ1biBpdCBpZiBoaWRkZW4/XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZtLmlzVmlzaWJsZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2bS5nZXRFcnJvcnNTdW1tKHZtLmZvcm1SZWYuJGVycm9yLCB2bS5mb3JtUmVmLiRuYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGNoYW5nZXMubWFrZUZvY3VzZWQpIHtcclxuICAgICAgICAgICAgICAgIGlmICgoY2hhbmdlcy5tYWtlRm9jdXNlZC5jdXJyZW50VmFsdWUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdm0uaXNGb2N1c0lucHV0ID0gdm0uaXNGb2N1c0lucHV0ICsgMTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoY2hhbmdlcy5mb3JtSWQpIHtcclxuICAgICAgICAgICAgICAgIC8qIHVzZWQgZm9yIHRoZSBqcXVlcnkgb3JkZXJpbmcuIFRoaXMgZ2l2ZXMgdGhlIHN0YXJ0aW5nIGlkICoqL1xyXG4gICAgICAgICAgICAgICAgdm0uc3RhcnRGb3JtSWQgPSBjaGFuZ2VzLmZvcm1JZC5jdXJyZW50VmFsdWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYoY2hhbmdlcy50cmFuc2NsdWRlTGlzdCl7XHJcbiAgICAgICAgICAgICAgICBpZihjaGFuZ2VzLnRyYW5zY2x1ZGVMaXN0LmN1cnJlbnRWYWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZtLnRyYW5zY2x1ZGVOYW1lcyA9IGNoYW5nZXMudHJhbnNjbHVkZUxpc3QuY3VycmVudFZhbHVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgLyoqKlxyXG4gICAgICAgICAqIERldGVybWluZXMgaWYgdGhlIHN1bW1hcnkgaXMgdmlzaWJsZVxyXG4gICAgICAgICAqIEByZXR1cm5zIHtib29sZWFufCp8QXJyYXl9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdm0uY2FsY0lzVmlzaWJsZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIHN1bW1hcnlJc1Zpc2libGUgPSBfaXNFcnJvclN1bW1hcnlWaXNpYmxlKCk7XHJcbiAgICAgICAgICAgIGlmICghc3VtbWFyeUlzVmlzaWJsZSkge1xyXG4gICAgICAgICAgICAgICAgLy9pZiBpdCBpcyBub3QgdmlzaWJsZSBicm9kY2FzdCBpdCBzbyBvdGhlcnMgYXJlIGhpZGRlblxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLiRlbWl0KCdjaGlsZEVycm9yU3VtbWFyeUhpZGUnLCArdm0ubmFtZUFkZGVuZHVtKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gKHN1bW1hcnlJc1Zpc2libGUpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFVzZWQgZm9yIHRoZSBlcnJvciBzdW1tYXJ5IHRvIGV4cGFuZCBhIHJlY29yZFxyXG4gICAgICAgICAqIEBwYXJhbSBlcnJvclJlY29yZFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHZtLnNjcm9sbFRvPWZ1bmN0aW9uKGVycm9yUmVjb3JkKXtcclxuICAgICAgICAgICAgdmFyIGhhc2hJZD1cIlwiO1xyXG4gICAgICAgICAgICBpZighZXJyb3JSZWNvcmQpIHJldHVybjtcclxuICAgICAgICAgICAgaWYoZXJyb3JSZWNvcmQuaXNTdW1tYXJ5KXtcclxuICAgICAgICAgICAgICAgIGhhc2hJZD0nZXJyb3JzLXN1bW1hcnktJytlcnJvclJlY29yZC5uYW1lO1xyXG4gICAgICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgICAgIGhhc2hJZD1lcnJvclJlY29yZC5uYW1lO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZtLmV4cGFuZFJlY29yZCh7aW5kZXg6IGVycm9yUmVjb3JkLmV4SW5kZXh9KTtcclxuICAgICAgICAgICAgJGxvY2F0aW9uLmhhc2goaGFzaElkKTtcclxuICAgICAgICAgICAgJGFuY2hvclNjcm9sbCgpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZtLnNlbGVjdFZpc2libGVUYWI9ZnVuY3Rpb24oZXJyb3JSZWNvcmQpe1xyXG4gICAgICAgICAgICB2YXIgaGFzaElkPSdlcnJvcnMtc3VtbWFyeS0nK2Vycm9yUmVjb3JkLm5hbWU7XHJcblxyXG4gICAgICAgICAgICB2bS5zZWxlY3RUYWIoe2luZGV4OmVycm9yUmVjb3JkLnRhYklkfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBDaGVja3MgaWYgYW4gZXJyb3IgaXMgYSBsaW5rIHRvIGEgc3VtbWFyeSByZWNvcmRcclxuICAgICAgICAgKiBJdCBpcyBhIHN1bW1hcnQgaXMgaXNTdW1tbWFyeSBpcyB0cnVlIGFuZCBpdCBpcyBub3QgaW4gYSB0YWIuIFRhYiBpcyBoYW5kbGVkIHNlcGFyYXRlbHlcclxuICAgICAgICAgKiBAcGFyYW0gZXJyb3JSZWNvcmRcclxuICAgICAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbnwqfVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHZtLmlzU3VtbWFyeUxpbms9ZnVuY3Rpb24oZXJyb3JSZWNvcmQpe1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuKGVycm9yUmVjb3JkLmlzU3VtbWFyeSAmJiAoIWFuZ3VsYXIuaXNEZWZpbmVkKGVycm9yUmVjb3JkLnRvRXhwYW5kKSkgJiYoYW5ndWxhci5pc0RlZmluZWQoZXJyb3JSZWNvcmQudGFiSWQpICYmIHBhcnNlSW50KGVycm9yUmVjb3JkLnRhYklkKTwwKSk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQ2hlY2tzIGlmIGFuIGVycm9yIHJlb29yZCBpcyBhIHN1bW1hcnkgaW4gYSB0YWIuIElmIHRydWUsIG5lZWQgdG8gY2xpY2sgdGhlIHRhYiBmaXJzdCBiZWZvcmUgZm9jdXNzaW5nIG9uIHRoZSBzdW1tYXJ5XHJcbiAgICAgICAgICogQHBhcmFtIGVycm9yUmVjb3JkXHJcbiAgICAgICAgICogQHJldHVybnMge2Jvb2xlYW58Kn1cclxuICAgICAgICAgKi9cclxuICAgICAgICB2bS5pc1RhYkxpbms9ZnVuY3Rpb24oZXJyb3JSZWNvcmQpe1xyXG4gICAgICAgICAgICByZXR1cm4oZXJyb3JSZWNvcmQuaXNTdW1tYXJ5ICYmKGFuZ3VsYXIuaXNEZWZpbmVkKGVycm9yUmVjb3JkLnRhYklkKSAmJiBwYXJzZUludChlcnJvclJlY29yZC50YWJJZCk+LTEpKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHZtLmlzRXhwYW5kZXJMaW5rPWZ1bmN0aW9uKGVycm9yUmVjb3JkKXtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBhbmd1bGFyLmlzRGVmaW5lZChlcnJvclJlY29yZC50b0V4cGFuZCk7XHJcbiAgICAgICAgfTtcclxuXHJcblxyXG5cclxuICAgICAgICBmdW5jdGlvbiBfaXNFcnJvclN1bW1hcnlWaXNpYmxlKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gKHZtLmlzVmlzaWJsZSAmJiAodm0uZXJyb3JBcnJheSAmJiB2bS5lcnJvckFycmF5Lmxlbmd0aCA+IDApKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgICRzY29wZS4kb24oJ2NoaWxkRXJyb3JTdW1tYXJ5SGlkZScsIGZ1bmN0aW9uIChldmVudCwgZGF0YSkge1xyXG4gICAgICAgICAgICAvLyAkc2NvcGUubWFpbkRhdGEubG9ncyA9ICRzY29wZS5tYWluRGF0YS5sb2dzICsgJ1xcbk1haW5Db250cm9sbGVyIC0gcmVjZWl2ZSBFVkVOVCBcIicgKyBldmVudC5uYW1lICsgJ1wiIHdpdGggbWVzc2FnZSA9IFwiJyArIGRhdGEubWVzc2FnZSArICdcIic7XHJcbiAgICAgICAgICAgIGlmIChfaXNFcnJvclN1bW1hcnlWaXNpYmxlKCkpIHtcclxuICAgICAgICAgICAgICAgIHZhciBlcnJvclN1bW1hcnlCcm9hZGNhc3ROYW1lID0gZGF0YS5tZXNzYWdlO1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2bS5lcnJvckFycmF5Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGVycm9yUmVjb3JkID0gZXJyb3JBcnJheVtpXTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZXJyb3JSZWNvcmQuaXNTdW1tYXJ5ICYmIGVycm9yUmVjb3JkLm5hbWUgPT09IGVycm9yU3VtbWFyeUJyb2FkY2FzdE5hbWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdm0uZXJyb3JBcnJheS5zcGxpY2UoaSwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIE1haW4gZnVuY3Rpb25hbGl0eSBmb3IgZ2V0dGluZyBodGUgZXJyb3JzXHJcbiAgICAgICAgICogQHBhcmFtIG15Zm9ybUVycm9yc1xyXG4gICAgICAgICAqIEBwYXJhbSBuYW1lXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdm0uZ2V0RXJyb3JzU3VtbSA9IGZ1bmN0aW9uIChteWZvcm1FcnJvcnMsIG5hbWUpIHtcclxuICAgICAgICAgICAgdm0uZXJyb3JBcnJheSA9IFtdO1xyXG4gICAgICAgICAgICB2bS51bmlxdWVFcnJvckxpc3QgPSB7fTtcclxuICAgICAgICAgICAgX2dldEVycihteWZvcm1FcnJvcnMsIHZtLnVuaXF1ZUVycm9yTGlzdCwgbmFtZSk7XHJcbiAgICAgICAgICAgIC8vY29uc29sZS5sb2coIHZtLnVuaXF1ZUVycm9yTGlzdClcclxuICAgICAgICAgICAgdmFyIG5ld0Vycm9ycyA9IF9zb3J0RXJyb3JzQnlEb21PcmRlcigpO1xyXG4gICAgICAgICAgIC8vY29uc29sZS5sb2cobmV3RXJyb3JzKTtcclxuICAgICAgICAgICAgaWYgKCFhbmd1bGFyLmVxdWFscyh2bS5lcnJvckFycmF5LCBuZXdFcnJvcnMpKSB7XHJcbiAgICAgICAgICAgICAgICB2bS5lcnJvckFycmF5ID0gbmV3RXJyb3JzO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcblxyXG4gICAgICAgIC8vZ2V0cyBhbGwgdGhlIGVycm9ycyBmcm9tIGVycm9yIG9iamVjdHNcclxuICAgICAgICBmdW5jdGlvbiBfZ2V0RXJyKGVycm9yT2JqLCByZXN1bHRzTGlzdCwgcGFyZW50KSB7XHJcbiAgICAgICAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMoZXJyb3JPYmopO1xyXG4gICAgICAgICAgICB2YXIgbmV3TGlzdCA9IHt9O1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHZhciByZWNvcmQgPSBlcnJvck9ialtrZXlzW2ldXTtcclxuICAgICAgICAgICAgICAgIC8vZXhwZWN0aW5nIGFuIGFycmF5XHJcbiAgICAgICAgICAgICAgICBpZiAoIShyZWNvcmQgaW5zdGFuY2VvZiBBcnJheSkpIHtcclxuICAgICAgICAgICAgICAgICAgICByZWNvcmQgPSBbcmVjb3JkXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgcmVjb3JkLmxlbmd0aDsgaisrKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vY29uZmlndXJlIGZvciB0aGUgdGVzdHNcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbnVtSW5kZXg9cmVjb3JkW2pdLiRuYW1lLmxhc3RJbmRleE9mKFwiX1wiKTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdHJhbnNjbHVkZU5hbWU9XCJcIjtcclxuICAgICAgICAgICAgICAgICAgICAvL3BhcnNlIGZvciBhIHRyYW5zY2x1ZGUgbmFtZS4gVXNlZCBmb3IgY29tcGFyaXNvbiBiZWxvd1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKG51bUluZGV4PjApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNjbHVkZU5hbWUgPSByZWNvcmRbal0uJG5hbWUuc3Vic3RyaW5nKDAsIG51bUluZGV4KTtcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgIC8vY2FzZSB0aGlzIGlzIGEgZm9ybS0gYXNzdW1lcyBmb3JtYXQgPGNvbnRyb2xsbGVyPi48Zm9ybU5hbWU+XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlY29yZFtqXS4kaW52YWxpZCA9PT0gdHJ1ZSAmJiByZWNvcmRbal0uJG5hbWUuaW5kZXhPZignLicpID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2l0IGlzIGFzc3VtZWQgdGhhdCBpZiBpdCBpcyBpbiB0aGUgZXhjbHVzaW9uIGxpc3QgaXQgaXMgYSBzdW1tYXJ5XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2bS5leGNsdXNpb25zICYmIHZtLmV4Y2x1c2lvbnMuaGFzT3duUHJvcGVydHkocmVjb3JkW2pdLiRuYW1lKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9vbmx5IHByb2Nlc3MgdGhpcyBhcyBhIHN1bW1hcnkgaWYgaXQgaXMgaW4gdGhlIGV4Y2x1c2lvbnMgbGlzdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRhYkluZGV4PXZtLmV4Y2x1c2lvbnNbcmVjb3JkW2pdLiRuYW1lXS5pbmRleE9mKCd0YWJfJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGFiSWQ9LTE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZih0YWJJbmRleD4tMSl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YWJJZD12bS5leGNsdXNpb25zW3JlY29yZFtqXS4kbmFtZV0uc3Vic3RyKHRhYkluZGV4KzQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFiSWQ9cGFyc2VJbnQodGFiSWQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLm1lcmdlKHJlc3VsdHNMaXN0LCBfY3JlYXRlU3VtbWFyeVJlY29yZChyZWNvcmRbal0uJG5hbWUsIGtleXNbaV0sIHBhcmVudCx0YWJJZCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2dldEVycihyZWNvcmRbal0uJGVycm9yLCByZXN1bHRzTGlzdCwgcmVjb3JkW2pdLiRuYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAvLyBjYXNlIHRoaXMgaXMgYSB0cmFuc2NsdWRlIGkuZS4gdGhlIGV4cGFuZGluZyB0YWJsZVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHZtLnRyYW5zY2x1ZGVOYW1lcy5oYXNPd25Qcm9wZXJ0eSh0cmFuc2NsdWRlTmFtZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGV4SW5kZXggPSByZWNvcmRbal0uJG5hbWUuaW5kZXhPZih0cmFuc2NsdWRlTmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vZXh0cmFjdCB0aGUgaW5kZXggaXQgaXMgdGhlIHN0cmluZyBsZW5ndGggKzEuIEJ5IGNvbnZlbnRpb24gdGhlcmUgaXMgYW4gdW5kZXJzY29yZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZXhwYW5kSW5kZXggPSByZWNvcmRbal0uJG5hbWUuc3Vic3RyaW5nKGV4SW5kZXgrdHJhbnNjbHVkZU5hbWUubGVuZ3RoKzEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL21ha2UgYW4gb2JqZWN0IHRoYXQgd2lsbCBjYXVzZSBleHBhbmQgYW5kIGZvY3VzIG9uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIubWVyZ2UocmVzdWx0c0xpc3QsX2NyZWF0ZUV4cGFuZGVyUmVjb3JkKHJlY29yZFtqXS4kbmFtZSx0cmFuc2NsdWRlTmFtZSxrZXlzW2ldLHBhcmVudCxleHBhbmRJbmRleCkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChyZWNvcmRbal0uJGludmFsaWQgPT09IHRydWUgJiYgIXJlc3VsdHNMaXN0Lmhhc093blByb3BlcnR5KHJlY29yZFtqXS4kbmFtZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IF9wcm9jZXNzUmVjb3JkKHJlY29yZFtqXS4kbmFtZSwga2V5c1tpXSwgcGFyZW50KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLm1lcmdlKHJlc3VsdHNMaXN0LCByZXN1bHQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy9nZXRzIHRoZSBuYW1lIHBhcnRzXHJcbiAgICAgICAgZnVuY3Rpb24gX3NjcnViRmllbGROYW1lKHJhd05hbWUpIHtcclxuICAgICAgICAgICAgdmFyIHNlcGFyYXRvciA9ICdfJztcclxuICAgICAgICAgICAgdmFyIGluZGV4ID0gcmF3TmFtZS5sYXN0SW5kZXhPZihzZXBhcmF0b3IpO1xyXG4gICAgICAgICAgICB2YXIgY2xlYW5lZE5hbWUgPSBcIlwiO1xyXG4gICAgICAgICAgICBpZiAoaW5kZXggPiAtMSkge1xyXG4gICAgICAgICAgICAgICAgY2xlYW5lZE5hbWUgPSByYXdOYW1lLnN1YnN0cmluZygwLCBpbmRleCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjbGVhbmVkTmFtZSA9IHJhd05hbWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGNsZWFuZWROYW1lO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogR2V0cyB0aGUgZWxlbWVudCBzY29wZS4gQnkgY29udmVudGlvbiBpdCBpcyB0aGUgdmFsdWUgYWZ0ZXIgdGhlIGxhc3QgdW5kZXJzY29yZVxyXG4gICAgICAgICAqIEBwYXJhbSByYXdOYW1lXHJcbiAgICAgICAgICogQHJldHVybnMge051bWJlcn1cclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGZ1bmN0aW9uIF9nZXRFbGVtZW50U2NvcGUocmF3TmFtZSkge1xyXG4gICAgICAgICAgICB2YXIgc2VwYXJhdG9yID0gJ18nO1xyXG4gICAgICAgICAgICB2YXIgbmFtZVNwbGl0ID0gcmF3TmFtZS5zcGxpdChzZXBhcmF0b3IpO1xyXG4gICAgICAgICAgICB2YXIgc2NvcGVJZCA9IHBhcnNlSW50KG5hbWVTcGxpdFtuYW1lU3BsaXQubGVuZ3RoIC0gMV0pO1xyXG4gICAgICAgICAgICBpZiAoIWFuZ3VsYXIuaXNOdW1iZXIoc2NvcGVJZCkpIHtcclxuICAgICAgICAgICAgICAgIHNjb3BlSWQgPSBcIlwiO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBzY29wZUlkO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFByb2Nlc3NlcyBhIG5vbiBzdW1tYXJ5IHJlY29yZC4gQ2hlY2tzIGZvciBhbGlhc2VzIGFuZCBwcm9jZXNzZXMgYWNjb3JkaW5nbHlcclxuICAgICAgICAgKiBAcGFyYW0gZXJyb3JfTmFtZSAtIHRoZSBuYW1lIG9mIHRoZSBlcnJvciBmcm9tIGFuZ3VsYXIgZXJyb3Igb2JqZWN0XHJcbiAgICAgICAgICogQHBhcmFtIGVycm9yVHlwZSAtIHRoZSB0eXBlIG9mIGVycm9yIHJlcXVpcmVkLCBwYXR0ZXJuIGV0Y1xyXG4gICAgICAgICAqIEBwYXJhbSBwYXJlbnQgLSB0aGUgbmFtZSBvZiB0aGUgZm9ybSB0aGF0IHRoZSBmaWVsZCBvcmlnaW5hdGVzXHJcbiAgICAgICAgICogQHJldHVybnMge3t9fSBqc29ub2JqIHdpdGggZGVzY3JpcHRpb24gaW5mb3JtYXRpb25cclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGZ1bmN0aW9uIF9wcm9jZXNzUmVjb3JkKGVycm9yX05hbWUsIGVycm9yVHlwZSwgcGFyZW50KSB7XHJcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSB7fTtcclxuICAgICAgICAgICAgdmFyIHNjcnViTmFtZSA9IF9zY3J1YkZpZWxkTmFtZShlcnJvcl9OYW1lKTtcclxuICAgICAgICAgICAgdmFyIHNjb3BlSWQgPSBfZ2V0RWxlbWVudFNjb3BlKGVycm9yX05hbWUpO1xyXG4gICAgICAgICAgICB2YXIgZXJyb3JLZXkgPSBcIlRZUEVfXCIgKyBlcnJvclR5cGUudG9VcHBlckNhc2UoKTtcclxuICAgICAgICAgICAgdmFyIGRlc3RJZCA9IGVycm9yX05hbWU7XHJcbiAgICAgICAgICAgIGlmICh2bS5hbGlhcyAmJiB2bS5hbGlhcy5oYXNPd25Qcm9wZXJ0eShzY3J1Yk5hbWUpKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgYWxpYXNSZWMgPSB2bS5hbGlhc1tzY3J1Yk5hbWVdO1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChhbGlhc1JlYy50eXBlLnRvTG93ZXJDYXNlKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiZmllbGRzZXRcIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNlYXJjaElkID0gYWxpYXNSZWMucGFyZW50ICsgXCJfXCIgKyBzY29wZUlkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGVzdE9iaiA9ICQoXCIjXCIgKyBzZWFyY2hJZCkuZmluZCgnaW5wdXQ6dmlzaWJsZTpmaXJzdCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGVzdE9iai5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXN0SWQgPSBkZXN0T2JqWzBdLmlkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJlbGVtZW50XCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlc3RJZCA9IGFsaWFzUmVjLnRhcmdldCArIFwiX1wiICsgc2NvcGVJZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcImVsZW1lbnRub2lkXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlc3RJZCA9IGFsaWFzUmVjLnRhcmdldDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcInBhdHRlcm5cIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVycm9yVHlwZSA9PT0gXCJwYXR0ZXJuXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yS2V5ID0gYWxpYXNSZWMuZXJyb3JUeXBlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJzZWxlY3QyXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzZWFyY2hJZCA9IGFsaWFzUmVjLm5hbWUgKyBcIl9tYXRjaFwiICsgc2NvcGVJZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9UT0RPIG1ha2UgYW5ndWxhciBmcmllbmRseVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGVzdE9iaiA9ICQoXCIjXCIgKyBzZWFyY2hJZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkZXN0T2JqLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc3RJZCA9IHNlYXJjaElkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJtaW5cIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVycm9yVHlwZSA9PT0gXCJtaW5cIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JLZXkgPSBhbGlhc1JlYy5lcnJvclR5cGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcIm1heFwiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXJyb3JUeXBlID09PSBcIm1heFwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvcktleSA9IGFsaWFzUmVjLmVycm9yVHlwZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwibWlubGVuZ3RoXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlcnJvclR5cGUgPT09IFwibWlubGVuZ3RoXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yS2V5ID0gYWxpYXNSZWMuZXJyb3JUeXBlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJtYXhsZW5ndGhcIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVycm9yVHlwZSA9PT0gXCJtYXhsZW5ndGhcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JLZXkgPSBhbGlhc1JlYy5lcnJvclR5cGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJidXR0b25zZWFyY2hcIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JLZXkgPSAgXCJUWVBFX1JFUVVJUkVEXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkLmVhY2goJCgnYnV0dG9uJywgJyMnICsgdm0uc3RhcnRGb3JtSWQpLCBmdW5jdGlvbiAoaykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRlbXBfYXR0ciA9ICQodGhpcykuYXR0cignaWQnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0ZW1wX2F0dHIgJiYgdGVtcF9hdHRyLmluZGV4T2YoYWxpYXNSZWMuYnV0dG9uTmFtZSk+LTEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzdElkPXRlbXBfYXR0cjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihcIk5vIHR5cGUgZm91bmQgXCIgKyBhbGlhc1JlYy50eXBlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmVzdWx0W2Vycm9yX05hbWVdID0ge1xyXG4gICAgICAgICAgICAgICAgbmFtZTogZGVzdElkLFxyXG4gICAgICAgICAgICAgICAgdHJhbnNsYXRlS2V5OiBzY3J1Yk5hbWUudG9VcHBlckNhc2UoKSxcclxuICAgICAgICAgICAgICAgIHR5cGU6IGVycm9yS2V5LFxyXG4gICAgICAgICAgICAgICAgcGFyZW50OiBwYXJlbnQsXHJcbiAgICAgICAgICAgICAgICBjb25jYXQ6IHBhcmVudCArICcuJyArIGVycm9yX05hbWUsXHJcbiAgICAgICAgICAgICAgICBpc1N1bW1hcnk6IGZhbHNlXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvL1RPRE8gY2xlYW51cCAgdGhpcyBmdW5jdGlvbiwgaW5lZmZpY2llbnRcclxuICAgICAgICBmdW5jdGlvbiBfc29ydEVycm9yc0J5RG9tT3JkZXIoKSB7XHJcbiAgICAgICAgICAgIHZhciBkb21GaWVsZExpc3QgPSB7fTtcclxuICAgICAgICAgICAgLy9UT0RPIG1ha2UgYW5ndWxhciBmcmllbmRseVxyXG4gICAgICAgICAgICAvL2dldCBhbGwgdGhlIGlucHV0cyBhbmQgYXNzaWduIG9yZGVyIGluZGV4XHJcbiAgICAgICAgICAgICQuZWFjaCgkKCdpbnB1dCwgc2VsZWN0ICx0ZXh0YXJlYScsICcjJyArIHZtLnN0YXJ0Rm9ybUlkKSwgZnVuY3Rpb24gKGspIHtcclxuICAgICAgICAgICAgICAgIHZhciB0ZW1wX2F0dHIgPSAkKHRoaXMpLmF0dHIoJ2lkJyk7XHJcbiAgICAgICAgICAgICAgICBpZiAodGVtcF9hdHRyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZG9tRmllbGRMaXN0W3RlbXBfYXR0cl0gPSBrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgLy9kZWxldGUgYW55dGhpbmcgaW4gdGhlIG5vdCBpbiB0aGUgbGlzdFxyXG4gICAgICAgICAgICAvL1RPRE8gcmVmYWN0b3I/IHNlZW1zIGluZWZmaWNpZW50XHJcbiAgICAgICAgICAgIHZhciBrZXlMaXN0ID0gT2JqZWN0LmtleXMoZG9tRmllbGRMaXN0KTtcclxuICAgICAgICAgICAgZm9yICh2YXIgcCA9IDA7IHAgPCBrZXlMaXN0Lmxlbmd0aDsgcCsrKSB7XHJcbiAgICAgICAgICAgICAgICAvL3NwZWNpZmljYWxseSBoYW5kbGVkIHRoZSBhbmd1bGFyIGJvb3RzdHJhcCB1aS1zZWxlY3RcclxuICAgICAgICAgICAgICAgIGlmKGtleUxpc3RbcF0uaW5kZXhPZihcImZvY3Vzc2VyLVwiKT4tMSl7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9maW5kIHRoZSBwYXJlbnRcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcGFyZW50TmFtZT1hbmd1bGFyLmVsZW1lbnQoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignIycra2V5TGlzdFtwXSkpLnBhcmVudCgpLmF0dHIoJ25hbWUnKTtcclxuICAgICAgICAgICAgICAgICAgICBpZihwYXJlbnROYW1lKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAga2V5TGlzdFtwXT1wYXJlbnROYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICghdm0udW5pcXVlRXJyb3JMaXN0W2tleUxpc3RbcF1dKSB7XHJcbiAgICAgICAgICAgICAgICAgICAga2V5TGlzdC5zcGxpY2UocCwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHAtLTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgc29ydGVkRG9tSnNvbkxpc3QgPSB7fTtcclxuICAgICAgICAgICAgLy9jcmVhdGUgYSBqc29uIHdoZXJlIHRoZSBrZXkgaXMgdGhlIG5hbWUsIGFuZCB0aGUgdmFsdWUgaXMgdGhlIGluZGV4IChpZSB0aGUgcG9zaXRpb24gaXQgc2hvdWxkIGJlXHJcbiAgICAgICAgICAgIC8vdGhpcyBhbGxvd3MgbG9va3VwIGJ5IG5hbWUgYW5kIGdldHMgdGhlIGluZGV4XHJcbiAgICAgICAgICAgIGZvciAodmFyIHYgPSAwOyB2IDwga2V5TGlzdC5sZW5ndGg7IHYrKykge1xyXG4gICAgICAgICAgICAgICAgc29ydGVkRG9tSnNvbkxpc3Rba2V5TGlzdFt2XV0gPSB2O1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvL2NyZWF0ZSBhbiBhcnJheVxyXG4gICAgICAgICAgICB2YXIgbmV3RXJyb3JzID0gT2JqZWN0LmtleXModm0udW5pcXVlRXJyb3JMaXN0KS5tYXAoZnVuY3Rpb24gKGspIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB2bS51bmlxdWVFcnJvckxpc3Rba11cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIC8vc29ydCBlcnJvcnNcclxuICAgICAgICAgICAgdmFyIG5vdERlZmluZWQgPSB7fTtcclxuICAgICAgICAgICAgaWYgKG5ld0Vycm9ycy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgaSA9IDA7XHJcbiAgICAgICAgICAgICAgICB3aGlsZSAoaSA8IG5ld0Vycm9ycy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgY3VyclJlYyA9IG5ld0Vycm9yc1tpXTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0TmFtZSA9IGN1cnJSZWMubmFtZTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZGVzdEluZGV4ID0gc29ydGVkRG9tSnNvbkxpc3RbdGFyZ2V0TmFtZV07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFuZ3VsYXIuaXNEZWZpbmVkKGRlc3RJbmRleCkgJiYgZGVzdEluZGV4ICE9PSBpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0ZW1wUmVjID0gYW5ndWxhci5jb3B5KG5ld0Vycm9yc1tkZXN0SW5kZXhdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3RXJyb3JzW2Rlc3RJbmRleF0gPSBhbmd1bGFyLmNvcHkoY3VyclJlYyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld0Vycm9yc1tpXSA9IGFuZ3VsYXIuY29weSh0ZW1wUmVjKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFhbmd1bGFyLmlzRGVmaW5lZChkZXN0SW5kZXgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBub3REZWZpbmVkW2N1cnJSZWMubmFtZV0gPSB7cmVjOiBjdXJyUmVjLCBwb3M6IGl9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGkrKztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgX3NvcnRVbmtub3ducyhub3REZWZpbmVkLCBuZXdFcnJvcnMpO1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3RXJyb3JzO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogRm9yIGVycm9ycyBub3QgZm91bmQgaW4gZG9tIHVzaW5nIGpxdWVyeSwgdHJ5IHRvIGZpbmQgd2hlcmUgdGhleSBiZWxvbmcgYmFzZWQgb24gc2NvcGUgaWRcclxuICAgICAgICAgKiBJZiBmb3VuZCBwbGFjZSBhZnRlciB0aGUgbGFzdCBzYW1lIHNjb3BlIHZhbGVcclxuICAgICAgICAgKiBAcGFyYW0gdW5rbm93bkpzb25cclxuICAgICAgICAgKiBAcGFyYW0gc29ydExpc3RcclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGZ1bmN0aW9uIF9zb3J0VW5rbm93bnModW5rbm93bkpzb24sIHNvcnRMaXN0KSB7XHJcbiAgICAgICAgICAgIC8vdHJ5IGFuZCBmaW5kIHNjb3BlXHJcbiAgICAgICAgICAgIC8vY3JlYXRlIGFycmF5XHJcbiAgICAgICAgICAgIHZhciB1bmtub3duQXJyYXkgPSBPYmplY3Qua2V5cyh1bmtub3duSnNvbikubWFwKGZ1bmN0aW9uIChrKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHVua25vd25Kc29uW2tdXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHVua25vd25BcnJheS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgdmFyIHVua25vd25SZWMgPSB1bmtub3duQXJyYXlbaV07XHJcbiAgICAgICAgICAgICAgICB2YXIgdW5rbm93bk5hbWUgPSB1bmtub3duUmVjLnJlYy5uYW1lO1xyXG4gICAgICAgICAgICAgICAgdmFyIHNjb3BlSW5kZXggPSBfZ2V0RWxlbWVudFNjb3BlKHVua25vd25OYW1lKTtcclxuICAgICAgICAgICAgICAgIGlmIChhbmd1bGFyLmlzTnVtYmVyKHNjb3BlSW5kZXgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgZyA9IHNvcnRMaXN0Lmxlbmd0aCAtIDE7IGcgPj0gMDsgZy0tKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzb3J0UmVjID0gc29ydExpc3RbZ107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzb3J0U2NvcGUgPSBfZ2V0RWxlbWVudFNjb3BlKHNvcnRSZWMubmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhbmd1bGFyLmlzTnVtYmVyKHNvcnRTY29wZSkgJiYgc29ydFNjb3BlID09PSBzY29wZUluZGV4ICYmIHVua25vd25OYW1lICE9PSBzb3J0UmVjLm5hbWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvcnRMaXN0Lm1vdmUodW5rbm93blJlYy5wb3MsIGcgKyAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBBcnJheS5wcm90b3R5cGUubW92ZSA9IGZ1bmN0aW9uIChmcm9tLCB0bykge1xyXG4gICAgICAgICAgICBpZiAodG8gPCAwKSB0byA9IDA7XHJcbiAgICAgICAgICAgIGlmICh0byA+PSB0aGlzLmxlbmd0aCkgdG8gPSB0aGlzLmxlbmd0aCAtIDE7XHJcbiAgICAgICAgICAgIHRoaXMuc3BsaWNlKHRvLCAwLCB0aGlzLnNwbGljZShmcm9tLCAxKVswXSk7XHJcbiAgICAgICAgfTtcclxuXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqICBVc2VkIHRvIGNyZWF0ZSBhIHN1bW1hcnkgcmVjb3JkLiBHZW5lcmFsbHkgdXNlZCB3aGVuIG5ldyBmb3JtcyBhcmUgZGVmaW5lZFxyXG4gICAgICAgICAqICBpLmUuIGdldCBhIGRvdCBzeW50YXggb2YgbXlDb250cm9sbGVyLm15Rm9ybU5hbWVcclxuICAgICAgICAgKiBAcGFyYW0gbmFtZS0gdGhlIG5hbWUgdG8gZ2l2ZSB0byB0aGUgcmVjb3JkLCBhbmQgdGhlIHRyYW5zbGF0ZSBrZXlcclxuICAgICAgICAgKiBAcGFyYW0gdHlwZSAtIHR5cGUgb2YgZXJyb3IgdGhhdCBvY2N1cmVkIGkuZS4gcmVxdWlyZWQgZXRjXHJcbiAgICAgICAgICogQHBhcmFtIHBhcmVudC0gcGFyZW50IG90IHRoaXMgZG9tIG9iamVjdFxyXG4gICAgICAgICAqIEBwYXJhbSB0YWJJRC0gb3B0aW9uYWwgdGFiSWQgZm9yIHNlbGVjdGluZyBhIHRhYlxyXG4gICAgICAgICAqIEByZXR1cm5zIHt7fX1cclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGZ1bmN0aW9uIF9jcmVhdGVTdW1tYXJ5UmVjb3JkKG5hbWUsdHlwZSxwYXJlbnQsdGFiSWQpe1xyXG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0ge307XHJcbiAgICAgICAgICAgIGlmKCFhbmd1bGFyLmlzRGVmaW5lZCh0YWJJZCkpIHRhYklkPS0xO1xyXG4gICAgICAgICAgICByZXN1bHRbbmFtZV0gPSB7XHJcbiAgICAgICAgICAgICAgICBuYW1lOiBuYW1lLFxyXG4gICAgICAgICAgICAgICAgdHlwZTogdHlwZSxcclxuICAgICAgICAgICAgICAgIHRyYW5zbGF0ZUtleTogbmFtZS50b1VwcGVyQ2FzZSgpLFxyXG4gICAgICAgICAgICAgICAgcGFyZW50OiBwYXJlbnQsXHJcbiAgICAgICAgICAgICAgICBjb25jYXQ6IHBhcmVudCArICcuJyArIG5hbWUsXHJcbiAgICAgICAgICAgICAgICB0YWJJZDp0YWJJZCxcclxuICAgICAgICAgICAgICAgIGlzU3VtbWFyeTogdHJ1ZVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIF9jcmVhdGVFeHBhbmRlclJlY29yZChuYW1lLHRyYW5zY2x1ZGVOYW1lLHR5cGUscGFyZW50LCBleHBhbmRlckluZGV4KXtcclxuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHt9O1xyXG4gICAgICAgICAgICByZXN1bHRbbmFtZV0gPSB7XHJcbiAgICAgICAgICAgICAgICBuYW1lOiBuYW1lLFxyXG4gICAgICAgICAgICAgICAgdHlwZTogdHlwZSxcclxuICAgICAgICAgICAgICAgIHRyYW5zbGF0ZUtleTogdHJhbnNjbHVkZU5hbWUudG9VcHBlckNhc2UoKSxcclxuICAgICAgICAgICAgICAgIHBhcmVudDogcGFyZW50LFxyXG4gICAgICAgICAgICAgICAgY29uY2F0OiBwYXJlbnQgKyAnLicgKyBuYW1lLFxyXG4gICAgICAgICAgICAgICAgaXNTdW1tYXJ5OiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgdG9FeHBhbmQ6dHJ1ZSxcclxuICAgICAgICAgICAgICAgIGV4SW5kZXg6cGFyc2VJbnQoZXhwYW5kZXJJbmRleClcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICB9O1xyXG5cclxuICAgIH0vL2VuZCBjb250cm9sbGVyXHJcblxyXG59KSgpO1xyXG4iLCIvKipcclxuICogQ3JlYXRlZCBieSBka2lsdHkgb24gMjAvMDQvMjAxNy5cclxuICovXHJcblxyXG5cclxuKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgnZXJyb3JNZXNzYWdlTW9kdWxlJywgW10pXHJcbn0pKCk7XHJcblxyXG4oZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKCdlcnJvck1lc3NhZ2VNb2R1bGUnKVxyXG4gICAgICAgIC5jb21wb25lbnQoJ2NtcEVycm9yTWVzc2FnZScsIHtcclxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdhcHAvc2NyaXB0cy9jb21wb25lbnRzL2Vycm9yLW1lc3NhZ2UvdHBsLWVycm9yLW1lc3NhZ2VfMjAxOTAzMjJfMTU0NC5odG1sJyxcclxuICAgICAgICAgICAgY29udHJvbGxlcjogZXJyb3JNZXNzYWdlQ29udHJvbGxlcixcclxuICAgICAgICAgICAgY29udHJvbGxlckFzOiAnZXJyTWVzc2FnZUN0cmwnLFxyXG5cclxuICAgICAgICAgICAgYmluZGluZ3M6IHtcclxuICAgICAgICAgICAgICAgIGZpZWxkTmFtZTogJzwnLCAvL3RoZU5hbWUgb2YgdGhlIGZpZWxkXHJcbiAgICAgICAgICAgICAgICBmb3JtUmVmOiAnPCcsXHJcbiAgICAgICAgICAgICAgICBzaG93RXJyb3I6ICcmJyxcclxuICAgICAgICAgICAgICAgIGVycm9yVHlwZXM6ICc8J1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAvLyBlcnJvck1lc3NhZ2VDb250cm9sbGVyLiRpbmplY3QgPSBbXTtcclxuXHJcbiAgICBmdW5jdGlvbiBlcnJvck1lc3NhZ2VDb250cm9sbGVyKCkge1xyXG4gICAgICAgIHZhciB2bSA9IHRoaXM7XHJcbiAgICAgICAgdm0uZmllbGRfbmFtZSA9IFwiXCI7XHJcbiAgICAgICAgdm0uZm9ybV9yZWYgPSBudWxsO1xyXG5cclxuICAgICAgICB2bS5maWVsZFJlY29yZHMgPSBbXTtcclxuXHJcbiAgICAgICAgdm0uJG9uQ2hhbmdlcyA9IGZ1bmN0aW9uIChjaGFuZ2VzKSB7XHJcblxyXG4gICAgICAgICAgICBpZiAoY2hhbmdlcy5maWVsZE5hbWUpIHtcclxuICAgICAgICAgICAgICAgIHZtLmZpZWxkX25hbWUgPSBjaGFuZ2VzLmZpZWxkTmFtZS5jdXJyZW50VmFsdWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGNoYW5nZXMuZm9ybVJlZikge1xyXG5cclxuICAgICAgICAgICAgICAgIHZtLmZvcm1fcmVmID0gY2hhbmdlcy5mb3JtUmVmLmN1cnJlbnRWYWx1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoY2hhbmdlcy5lcnJvclR5cGVzKSB7XHJcbiAgICAgICAgICAgICAgICB2bS5maWVsZFJlY29yZHMgPSBjaGFuZ2VzLmVycm9yVHlwZXMuY3VycmVudFZhbHVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQ29udHJvbHMgdGhlIHZpc2libGl0eSBvZiB0aGUgZXJyb3IgbWVzc2FnZSBzZWN0aW9uXHJcbiAgICAgICAgICogQHJldHVybnMgeyp9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdm0uc2hvd0Vycm9yTWVzc2FnZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKCF2bS5mb3JtX3JlZikgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAvL2RldiBlcnJvciBtZXNzc2FnaW5nXHJcbiAgICAgICAgICAgIGlmIChhbmd1bGFyLmlzVW5kZWZpbmVkKHZtLmZpZWxkTmFtZSkpe1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKFwiTm8gZmllbGQgbmFtZSBmb3I6IFwiICsgdm0uZm9ybV9yZWYuJG5hbWUpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChhbmd1bGFyLmlzVW5kZWZpbmVkKHZtLmZvcm1fcmVmW3ZtLmZpZWxkTmFtZV0pKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oXCJsb29rdXAgdW5kZWZpbmVkIFwiICsgdm0uZm9ybV9yZWYuJG5hbWUgKyBcIi5cIiArIHZtLmZpZWxkTmFtZSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH0gXHJcbiAgICAgICAgICAgIHJldHVybiAoKHZtLnNob3dFcnJvcigpICYmIHZtLmZvcm1fcmVmW3ZtLmZpZWxkTmFtZV0uJGludmFsaWQpIHx8ICh2bS5mb3JtX3JlZlt2bS5maWVsZE5hbWVdLiR0b3VjaGVkICYmIHZtLmZvcm1fcmVmW3ZtLmZpZWxkTmFtZV0uJGludmFsaWQpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy9lcnJNZXNzYWdlQ3RybC5maWVsZF9yZWZbZXJyTWVzc2FnZUN0cmwuZmllbGROYW1lXVxyXG4gICAgfVxyXG59KSgpOyIsIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IGhjdXNlciBvbiAyMDE3LTA2LTAyLlxyXG4gKi9cclxuXHJcblxyXG4oZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKCdhbGVydE1vZHVsZScsW10pXHJcbn0pKCk7XHJcblxyXG4oZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKCdhbGVydE1vZHVsZScpXHJcbiAgICAgICAgLmNvbXBvbmVudCgnY21wQWxlcnQnLCB7XHJcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnYXBwL3NjcmlwdHMvY29tcG9uZW50cy9hbGVydENvbXBvbmVudC90cGwtYWxlcnRfMjAxOTAzMjJfMTU0NC5odG1sJyxcclxuICAgICAgICAgICAgdHJhbnNjbHVkZTp0cnVlLFxyXG4gICAgICAgICAgICBiaW5kaW5nczoge1xyXG4gICAgICAgICAgICAgICAgdWlTdGF0ZTogJzwnLFxyXG4gICAgICAgICAgICAgICAgbXNnOiAnQCcsXHJcbiAgICAgICAgICAgICAgICB1cGRhdGVTdGF0ZTonJicsXHJcbiAgICAgICAgICAgICAgICB0eXBlOidAJ1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBjb250cm9sbGVyOiBhbGVydENvbnRyb2xsZXIsXHJcbiAgICAgICAgICAgIGNvbnRyb2xsZXJBczogJ2FsZXJ0Q3RybCdcclxuICAgICAgICB9KTtcclxuXHJcbiAgICBhbGVydENvbnRyb2xsZXIuJGluamVjdCA9IFtdO1xyXG5cclxuICAgIGZ1bmN0aW9uIGFsZXJ0Q29udHJvbGxlcigpIHtcclxuXHJcbiAgICAgICAgdmFyIHZtID0gdGhpcztcclxuICAgICAgICB2bS5hbGVydFZpc2libGU9ZmFsc2U7XHJcbiAgICAgICAgdm0uY2xvc2VNc2dBbGlhcz1cIkNMT1NFX0FMRVJUXCI7XHJcblxyXG4gICAgICAgIHZtLiRvbkluaXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZtLmFsZXJ0VmlzaWJsZT1mYWxzZTtcclxuICAgICAgICB9O1xyXG5cclxuXHJcbiAgICAgICAgdm0uJG9uQ2hhbmdlcyA9IGZ1bmN0aW9uIChjaGFuZ2VzKSB7XHJcblxyXG4gICAgICAgICAgICBpZihjaGFuZ2VzLm1zZyl7XHJcbiAgICAgICAgICAgICAgICB2bS5jbG9zZU1zZ0FsaWFzPWNoYW5nZXMubXNnLmN1cnJlbnRWYWx1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZihjaGFuZ2VzLnVpU3RhdGUpe1xyXG4gICAgICAgICAgICAgICAgdm0uYWxlcnRWaXNpYmxlPWNoYW5nZXMudWlTdGF0ZS5jdXJyZW50VmFsdWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2bS5vcGVuPWZ1bmN0aW9uKCl7XHJcblxyXG4gICAgICAgICAgICB2bS51cGRhdGVTdGF0ZSgpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZtLmNsb3NlPWZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgIHZtLnVwZGF0ZVN0YXRlKCk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdm0uaXNBbGVydFZpc2libGU9ZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgcmV0dXJuICAgdm0uYWxlcnRWaXNpYmxlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICB9XHJcbn0pKCk7IiwiLyoqXHJcbiAqIENyZWF0ZWQgYnkgQWJkZXNzYW1hZCBvbiA2LzI5LzIwMTYuXHJcbiAqL1xyXG5cclxuXHJcbihmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ2FkZHJlc3NNb2R1bGUnLCBbXHJcbiAgICAgICAgICAgICdocGZiQ29uc3RhbnRzJyxcclxuICAgICAgICAgICAgJ2RhdGFMaXN0cycsXHJcbiAgICAgICAgICAgICdmaWx0ZXJMaXN0cycsXHJcbiAgICAgICAgICAgICd1aS5zZWxlY3QnLFxyXG4gICAgICAgICAgICAnZXJyb3JNZXNzYWdlTW9kdWxlJ1xyXG5cclxuICAgICAgICBdKVxyXG59KSgpO1xyXG5cclxuKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKCdhZGRyZXNzTW9kdWxlJylcclxuICAgICAgICAuY29uZmlnKGZ1bmN0aW9uICh1aVNlbGVjdENvbmZpZykge1xyXG4gICAgICAgICAgICAvL2Nob2ljZXM6IHNlbGVjdDIsIGJvb3RzdHJhcCwgc2VsZWN0aXplXHJcbiAgICAgICAgICAgIHVpU2VsZWN0Q29uZmlnLnRoZW1lID0gJ3NlbGVjdDInO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLmNvbXBvbmVudCgnY21wQWRkcmVzc0RldGFpbHMnLCB7XHJcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnYXBwL3NjcmlwdHMvY29tcG9uZW50cy9hZGRyZXNzRGV0YWlscy90cGwtYWRkcmVzcy1kZXRhaWxzXzIwMTkwMzIyXzE1NDQuaHRtbCcsXHJcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6IGFkZHJlc3NDdHJsLFxyXG4gICAgICAgICAgICBjb250cm9sbGVyQXM6ICdhZHInLFxyXG4gICAgICAgICAgICBiaW5kaW5nczoge1xyXG4gICAgICAgICAgICAgICAgYWRkcmVzc1JlY29yZDogJzwnLFxyXG4gICAgICAgICAgICAgICAgb25VcGRhdGU6ICcmJywgLy9ubyBsb25nZXIgdXNlZCBUQkQgc2hvdWxkIGJlIHJlbW92ZWRcclxuICAgICAgICAgICAgICAgIHNob3dFcnJvcnM6ICcmJyxcclxuICAgICAgICAgICAgICAgIGlzQW1lbmQ6ICc8JyxcclxuICAgICAgICAgICAgICAgIHVwZGF0ZUVycm9yU3VtbWFyeTonJicsXHJcbiAgICAgICAgICAgICAgICBmaWVsZFN1ZmZpeDonPCcsXHJcbiAgICAgICAgICAgICAgICBjb3VudHJ5RWRpdGFibGU6JzwnLFxyXG4gICAgICAgICAgICAgICAgdXBkYXRlQ291bnRyeTonPCdcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgYWRkcmVzc0N0cmwuJGluamVjdCA9IFsnZ2V0Q291bnRyeUFuZFByb3ZpbmNlcycsJyR0cmFuc2xhdGUnLCdDQU5BREEnLCdVU0EnLCckc2NvcGUnXTtcclxuXHJcbiAgICBmdW5jdGlvbiBhZGRyZXNzQ3RybCggZ2V0Q291bnRyeUFuZFByb3ZpbmNlcywkdHJhbnNsYXRlLCBDQU5BREEsVVNBLCAkc2NvcGUpIHtcclxuXHJcbiAgICAgICAgdmFyIHZtID0gdGhpcztcclxuICAgICAgICB2bS5pc0VkaXRhYmxlID0gdHJ1ZTtcclxuICAgICAgICAvL3B1dCBtb2RlbCB1cGRhdGVzIGluIG5nLWNoYW5nZSBidXQgZGVmZXIgb24gYmx1ci4gTm93IG1vZGVsIHVwZGF0ZXMgb24gYmx1ciBvbmx5IGlmIGl0IGNoYW5nZWRcclxuICAgICAgICB2bS5uZ01vZGVsT3B0U2V0dGluZyA9IHt1cGRhdGVPbjogJ2JsdXInfTtcclxuICAgICAgICB2bS5sYW5nID0gJHRyYW5zbGF0ZS5wcm9wb3NlZExhbmd1YWdlKCkgfHwgJHRyYW5zbGF0ZS51c2UoKTtcclxuICAgICAgICB2bS5hZGRyZXNzTW9kZWwgPSB7XHJcbiAgICAgICAgICAgIGFkZHJlc3NJRDogXCJcIixcclxuICAgICAgICAgICAgaXNEZXRhaWxWYWxpZDogZmFsc2UsXHJcbiAgICAgICAgICAgIHN0cmVldDogXCJcIixcclxuICAgICAgICAgICAgY2l0eTogXCJcIixcclxuICAgICAgICAgICAgY291bnRyeTogXCJcIixcclxuICAgICAgICAgICAgY291bnRyeURpc3BsYXk6XCJcIixcclxuICAgICAgICAgICAgc3RhdGVMb3Y6IFwiXCIsXHJcbiAgICAgICAgICAgIHN0YXRlVGV4dDogXCJcIixcclxuICAgICAgICAgICAgcG9zdGFsQ29kZTogXCJcIlxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZtLmNvdW50cnlJc0VkaXRhYmxlPXRydWU7IC8vZGVmYXVsdCB0byB0cnVlIGluIGNhc2UgYmluZGluZyBub3Qgc2V0XHJcbiAgICAgICAgdm0uY2FuYWRpYW5Qb3N0YWxDb2RlUGF0dGVybiA9ICdeKD8hLipbREZJT1FVXSlbQS1WWFlhLXZ4eV1bMC05XVtBLVphLXpdID9bMC05XVtBLVphLXpdWzAtOV0kJztcclxuXHJcbiAgICAgICAgdm0udXNhWmlwQ29kZSA9ICdeWzAtOV17NX0oPzotWzAtOV17NH0pPyQnO1xyXG4gICAgICAgIHZtLmhpZGVQcm92aW5jZVRleHQgPSBmYWxzZTtcclxuICAgICAgICB2bS5jb3VudHJ5TGlzdD0gZ2V0Q291bnRyeUFuZFByb3ZpbmNlcy5nZXRDb3VudHJpZXMoKTtcclxuICAgICAgICB2bS5mZElkPVwiXCI7XHJcbiAgICAgICAvLyB2bS5wb3N0YWxFcnJvcj1cIk1TR19FUlJfUE9TVEFMXCI7XHJcbiAgICAgICAgdm0ucmVxdWlyZWRPbmx5ID0gW3t0eXBlOiBcInJlcXVpcmVkXCIsIGRpc3BsYXlBbGlhczogXCJNU0dfRVJSX01BTkRcIn1dO1xyXG4gICAgICAgIHZtLnBvc3RhbEVycm9yTGlzdCA9IFt7dHlwZTogXCJyZXF1aXJlZFwiLCBkaXNwbGF5QWxpYXM6IFwiTVNHX0VSUl9NQU5EXCJ9LHt0eXBlOiBcInBhdHRlcm5cIiwgZGlzcGxheUFsaWFzOiBcIk1TR19FUlJfUE9TVEFMXCJ9XTtcclxuXHJcbiAgICAgICAgdm0uJG9uSW5pdCA9IGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgICAgIGlmICh2bS5hZGRyZXNzUmVjb3JkKSB7XHJcbiAgICAgICAgICAgICAgICAvL3ZtLmFkZHJlc3NNb2RlbCA9IGFuZ3VsYXIuZXh0ZW5kKHt9LHZtLmFkZHJlc3NSZWNvcmQpOyBUSElTIGNhdXNlcyBmb2N1cyBncmllZlxyXG4gICAgICAgICAgICAgICAgdm0uYWRkcmVzc01vZGVsID0gdm0uYWRkcmVzc1JlY29yZDtcclxuICAgICAgICAgICAgICAgIHZtLnByb3ZMaXN0TGFiZWwgPSBnZXRQcm92aW5jZUxpc3RMYWJlbCgpO1xyXG4gICAgICAgICAgICAgICAgdm0ucG9zdGFsTGFiZWwgPSBnZXRQb3N0YWxMYWJlbCgpO1xyXG4gICAgICAgICAgICAgICAgdm0uaXNQb3N0YWxSZXF1aXJlZCA9IGlzUG9zdGFsUmVxdWlyZWRGbigpO1xyXG4gICAgICAgICAgICAgICAgdm0ucHJvdmluY2VzID0gZ2V0UHJvdmluY2VTdGF0ZUxpc3QoKTtcclxuICAgICAgICAgICAgICAgIHZtLmhpZGVQcm92aW5jZVRleHQgPSBnZXRQcm92aW5jZVRleHRTdGF0ZSgpO1xyXG4gICAgICAgICAgICAgICAgdm0ucG9zdGFsUGF0dGVybiA9IGdldFBvc3RhbFBhdHRlcm4oKTtcclxuICAgICAgICAgICAgICAgIHZtLmhpZGVQcm92aW5jZURkbCA9ICF2bS5oaWRlUHJvdmluY2VUZXh0O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF9zZXRJZE5hbWVzKCk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAbmdkb2MgbWV0aG9kIHVwZGF0ZXMgaWYgdGhlIG1vZGVsIGNoYW5nZXNcclxuICAgICAgICAgKiBAcGFyYW0gY2hhbmdlc1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHZtLiRvbkNoYW5nZXMgPSBmdW5jdGlvbiAoY2hhbmdlcykge1xyXG4gICAgICAgICAgICBpZiAoY2hhbmdlcy5hZGRyZXNzUmVjb3JkKSB7XHJcbiAgICAgICAgICAgICAgICB2bS5hZGRyZXNzTW9kZWwgPSBjaGFuZ2VzLmFkZHJlc3NSZWNvcmQuY3VycmVudFZhbHVlO1xyXG4gICAgICAgICAgICAgICAgdm0uY291bnRyeUNoYW5nZWQoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoY2hhbmdlcy5pc0FtZW5kKSB7XHJcbiAgICAgICAgICAgICAgICB2bS5pc0VkaXRhYmxlID0gY2hhbmdlcy5pc0FtZW5kLmN1cnJlbnRWYWx1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZihjaGFuZ2VzLmZpZWxkU3VmZml4KSB7XHJcbiAgICAgICAgICAgICAgICB2bS5mbGRJZCA9IGNoYW5nZXMuZmllbGRTdWZmaXguY3VycmVudFZhbHVlO1xyXG4gICAgICAgICAgICAgICAgaWYgKCF2bS5mbGRJZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZtLmZsZElkID0gXCJcIjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgaWYoY2hhbmdlcy51cGRhdGVDb3VudHJ5KXtcclxuICAgICAgICAgICAgICAgICB2bS5jb3VudHJ5Q2hhbmdlZCgpO1xyXG4gICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYoY2hhbmdlcy5jb3VudHJ5RWRpdGFibGUpe1xyXG4gICAgICAgICAgICAgICAgdm0uY291bnRyeUlzRWRpdGFibGU9Y2hhbmdlcy5jb3VudHJ5RWRpdGFibGUuY3VycmVudFZhbHVlO1xyXG4gICAgICAgICAgICAgICAgaWYoYW5ndWxhci5pc1VuZGVmaW5lZCh2bS5jb3VudHJ5SXNFZGl0YWJsZSkpe1xyXG4gICAgICAgICAgICAgICAgICAgIHZtLmNvdW50cnlJc0VkaXRhYmxlPXRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFVwZGF0ZXMgdGhlIGRpc3BsYXkgdmFsdWUgZm9yIHRoZSBvYmplY3QgZm9yIHN1bW1hcnkgZGlzcGxheVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHZtLmNvdW50cnlDaGFuZ2VkPWZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgIHZtLmFkZHJlc3NNb2RlbC5jb3VudHJ5RGlzcGxheT12bS5hZGRyZXNzTW9kZWwuY291bnRyeS5pZDtcclxuICAgICAgICAgICAgdm0ucHJvdkxpc3RMYWJlbCA9IGdldFByb3ZpbmNlTGlzdExhYmVsKCk7XHJcbiAgICAgICAgICAgIHZtLnBvc3RhbExhYmVsID0gZ2V0UG9zdGFsTGFiZWwoKTtcclxuICAgICAgICAgICAgdm0uaXNQb3N0YWxSZXF1aXJlZCA9IGlzUG9zdGFsUmVxdWlyZWRGbigpO1xyXG4gICAgICAgICAgICB2bS5wcm92aW5jZXMgPSBnZXRQcm92aW5jZVN0YXRlTGlzdCgpO1xyXG4gICAgICAgICAgICB2bS5oaWRlUHJvdmluY2VUZXh0ID0gZ2V0UHJvdmluY2VUZXh0U3RhdGUoKTtcclxuICAgICAgICAgICAgdm0ucG9zdGFsUGF0dGVybiA9IGdldFBvc3RhbFBhdHRlcm4oKTtcclxuICAgICAgICAgICAgdm0uaGlkZVByb3ZpbmNlRGRsID0gIXZtLmhpZGVQcm92aW5jZVRleHQ7XHJcbiAgICAgICAgICAgIHZtLmlzQ291bnRyeUNhbmFkYSgpO1xyXG4gICAgICAgICAgICB2bS51cGRhdGVFcnJvclN1bW1hcnkoKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2bS5pc0NvdW50cnlDYW5hZGE9ZnVuY3Rpb24oKXtcclxuICAgICAgICAgIGlmKCF2bS5hZGRyZXNzTW9kZWwgfHwgIXZtLmFkZHJlc3NNb2RlbC5jb3VudHJ5KXtcclxuICAgICAgICAgICAgICB2bS5wb3N0YWxFcnJvckxpc3QgPSBbe3R5cGU6IFwicmVxdWlyZWRcIiwgZGlzcGxheUFsaWFzOiBcIk1TR19FUlJfTUFORFwifSx7dHlwZTogXCJwYXR0ZXJuXCIsIGRpc3BsYXlBbGlhczogXCJNU0dfRVJSX1BPU1RBTFwifV07XHJcbiAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgIGVsc2UgaWYodm0uYWRkcmVzc01vZGVsLmNvdW50cnkuaWQ9PT1DQU5BREEpe1xyXG4gICAgICAgICAgICAgIHZtLnBvc3RhbEVycm9yTGlzdCA9IFt7dHlwZTogXCJyZXF1aXJlZFwiLCBkaXNwbGF5QWxpYXM6IFwiTVNHX0VSUl9NQU5EXCJ9LHt0eXBlOiBcInBhdHRlcm5cIiwgZGlzcGxheUFsaWFzOiBcIk1TR19FUlJfUE9TVEFMXCJ9XTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgICB2bS5wb3N0YWxFcnJvckxpc3QgPSBbe3R5cGU6IFwicmVxdWlyZWRcIiwgZGlzcGxheUFsaWFzOiBcIk1TR19FUlJfTUFORFwifSx7dHlwZTogXCJwYXR0ZXJuXCIsIGRpc3BsYXlBbGlhczogXCJNU0dfRVJSX1pJUFwifV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdm0uc2hvd0Vycm9yID0gZnVuY3Rpb24gKGN0cmwpIHtcclxuXHJcbiAgICAgICAgICAgIGlmICghY3RybCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKChjdHJsLiRpbnZhbGlkICYmIGN0cmwuJHRvdWNoZWQpIHx8ICh2bS5zaG93RXJyb3JzKCkgJiYgY3RybC4kaW52YWxpZCApKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZVxyXG4gICAgICAgIH07XHJcblxyXG5cclxuICAgICAgICB2bS5vbkRlbGV0ZUJ1dHRvbkNsaWNrID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2bS5vbkRlbGV0ZSh7YWRkcmVzc0lkOiB2bS5hZGRyZXNzTW9kZWwuYWRkcmVzc0lEfSk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdm0ub25EaXNjYXJkQnV0dG9uQ2xpY2sgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZtLmFkZHJlc3NNb2RlbCA9IGFuZ3VsYXIuZXh0ZW5kKHt9LCB2bS5hZGRyZXNzUmVjb3JkKTtcclxuICAgICAgICAgICAgdm0uYWRkcmVzc0Zvcm0uJHNldFByaXN0aW5lKCk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICB2bS5pc0NvdW50cnlFZGl0YWJsZT1mdW5jdGlvbigpe1xyXG4gICAgICAgICAgcmV0dXJuKHZtLmlzRWRpdGFibGUgJiZ2bS5jb3VudHJ5SXNFZGl0YWJsZSlcclxuICAgICAgICB9O1xyXG5cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQG5nZG9jIG1ldGhvZCBmb3JtYXRzIGNhbmFkaWFuIHBvc3RhbCBjb2RlIHRvIHVwcGVyIGFuZCBzcGFjZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHZtLnBvc3RhbENvZGVDaGFuZ2VkPWZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgIHZhciBwb3N0YWw9dm0uYWRkcmVzc01vZGVsLnBvc3RhbENvZGU7XHJcbiAgICAgICAgICAgIGlmKCFwb3N0YWwpIHJldHVybjtcclxuICAgICAgICAgICAgcG9zdGFsPSBwb3N0YWwudG9VcHBlckNhc2UoKTtcclxuICAgICAgICAgICAgaWYocG9zdGFsLmxlbmd0aD09NiAmJiB2bS5hZGRyZXNzTW9kZWwuY291bnRyeS5pZCA9PT0gQ0FOQURBKXtcclxuICAgICAgICAgICAgICAgIHBvc3RhbD1wb3N0YWwuc3Vic3RyaW5nKDAsMykrXCIgXCIrcG9zdGFsLnN1YnN0cmluZygzLHBvc3RhbC5sZW5ndGgpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdm0uYWRkcmVzc01vZGVsLnBvc3RhbENvZGU9cG9zdGFsO1xyXG4gICAgICAgICAgICB2bS51cGRhdGVFcnJvclN1bW1hcnkoKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHZhciBnZXRQcm92aW5jZVRleHRTdGF0ZSA9IGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgICAgIHZhciBpc0Nhbk9yVXNhID0gaXNQb3N0YWxSZXF1aXJlZEZuKCk7XHJcblxyXG4gICAgICAgICAgICBpZiAoaXNDYW5PclVzYSkge1xyXG4gICAgICAgICAgICAgICAgdm0uYWRkcmVzc01vZGVsLnN0YXRlVGV4dCA9IFwiXCI7XHJcblxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdm0uYWRkcmVzc01vZGVsLnN0YXRlTGlzdCA9IFwiXCI7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiBpc0Nhbk9yVXNhO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZhciBpc1Bvc3RhbFJlcXVpcmVkRm4gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAodm0uYWRkcmVzc01vZGVsLmNvdW50cnkuaWQgPT09IENBTkFEQSB8fCB2bS5hZGRyZXNzTW9kZWwuY291bnRyeS5pZCA9PT0gVVNBKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2YXIgZ2V0UHJvdmluY2VTdGF0ZUxpc3QgPSBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgICAgICBpZiAodm0uYWRkcmVzc01vZGVsLmNvdW50cnkuaWQgPT09IENBTkFEQSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGdldENvdW50cnlBbmRQcm92aW5jZXMuZ2V0UHJvdmluY2VzKCk7XHJcblxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHZtLmFkZHJlc3NNb2RlbC5jb3VudHJ5LmlkID09PSBVU0EpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBnZXRDb3VudHJ5QW5kUHJvdmluY2VzLmdldFVTU3RhdGVzKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2YXIgZ2V0UHJvdmluY2VMaXN0TGFiZWwgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgLy8gaWYoIXZtLmFkZHJlc3NNb2RlbCB8fCAhdm0uYWRkcmVzc01vZGVsLmNvdW50cnkpIHJldHVybiBcIlBST1ZJTkNFXCI7XHJcbiAgICAgICAgICAgIHZhciBsYWJlbCA9ICh2bS5hZGRyZXNzTW9kZWwuY291bnRyeS5pZCA9PT0gVVNBKSA/IFwiU1RBVEVcIiA6IFwiUFJPVklOQ0VcIjtcclxuICAgICAgICAgICAgcmV0dXJuIGxhYmVsO1xyXG4gICAgICAgIH07XHJcblxyXG5cclxuICAgICAgICB2YXIgZ2V0UG9zdGFsTGFiZWwgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBsYWJlbCA9ICh2bS5hZGRyZXNzTW9kZWwuY291bnRyeS5pZCA9PT0gVVNBKSA/IFwiWklQXCIgOiBcIlBPU1RBTFwiO1xyXG4gICAgICAgICAgICByZXR1cm4gbGFiZWw7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIGdldFBvc3RhbFBhdHRlcm4gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBwb3N0YWxQdHJuID0gbnVsbDtcclxuICAgICAgICAgICAgaWYgKHZtLmFkZHJlc3NNb2RlbC5jb3VudHJ5LmlkID09PSBVU0EpIHtcclxuICAgICAgICAgICAgICAgIHBvc3RhbFB0cm4gPSAvXlswLTldezV9KD86LVswLTldezR9KT8kLztcclxuICAgICAgICAgICAgfSBlbHNlIGlmICh2bS5hZGRyZXNzTW9kZWwuY291bnRyeS5pZCA9PT0gQ0FOQURBKSB7XHJcbiAgICAgICAgICAgICAgICBwb3N0YWxQdHJuID0gL14oPyEuKltERklPUVVdKVtBLVZYWWEtdnh5XVswLTldW0EtWmEtel0gP1swLTldW0EtWmEtel1bMC05XSQvO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gcG9zdGFsUHRybjtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICBmdW5jdGlvbiBfc2V0SWROYW1lcygpIHtcclxuICAgICAgICAgICAgdmFyIHNjb3BlSWQgPSB2bS5mbGRJZCsgXCJfXCIgKyAkc2NvcGUuJGlkO1xyXG4gICAgICAgICAgICB2bS5zdHJlZXRJZCA9IFwic3RyZWV0XCIgKyBzY29wZUlkO1xyXG4gICAgICAgICAgICB2bS5jaXR5SWQgPSBcImNpdHlcIiArIHNjb3BlSWQ7XHJcbiAgICAgICAgICAgIHZtLmNvdW50cnlJZCA9IFwiY291bnRyeVwiICsgc2NvcGVJZDtcclxuICAgICAgICAgICAgdm0uc3RhdGVUZXh0SWQgPSBcInByb3ZlU3RhdGVcIiArIHNjb3BlSWQ7XHJcbiAgICAgICAgICAgIHZtLnN0YXRlTGlzdElkID0gXCJwcm92aW5jZUxpc3RcIiArIHNjb3BlSWQ7XHJcbiAgICAgICAgICAgIHZtLnBvc3RhbElkID0gXCJwb3N0YWxcIiArIHNjb3BlSWQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBjb21wb25lbnQgb25seSBoYXMgb25lIGZpZWxkLCBqdXN0IHdhdGNoIHRoaXMgZmllbGQgZm9yIGNoYW5nZXMgdG8gdXBkYXRlIGVycm9yIHN1bW1hcnlcclxuICAgICAgICAkc2NvcGUuJHdhdGNoKCdhZHIuYWRkcmVzc0Zvcm0uJGVycm9yJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2bS51cGRhdGVFcnJvclN1bW1hcnkoKTtcclxuICAgICAgICB9LCB0cnVlKTtcclxuXHJcbiAgICB9XHJcblxyXG59KSgpO1xyXG5cclxuXHJcbiIsIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IGRraWx0eSBvbiA4LzEzLzIwMTYuXHJcbiAqL1xyXG5cclxuXHJcbihmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ2xjRGV0YWlsc01vZHVsZScsIFtcclxuICAgICAgICAgICAgJ3VpLmJvb3RzdHJhcCcsXHJcbiAgICAgICAgICAgICdhY3Rpdml0eUZvcm1GaWx0ZXJNb2R1bGUnLFxyXG4gICAgICAgICAgICAnZXJyb3JTdW1tYXJ5TW9kdWxlJyxcclxuICAgICAgICAgICAgJ2Vycm9yTWVzc2FnZU1vZHVsZSdcclxuICAgICAgICBdKVxyXG59KSgpO1xyXG5cclxuKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgnbGNEZXRhaWxzTW9kdWxlJylcclxuICAgICAgICAuY29tcG9uZW50KCdjbXBMaWZlY3ljbGVEZXRhaWxzJywge1xyXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2FwcC9zY3JpcHRzL2NvbXBvbmVudHMvbGlmZWN5Y2xlRGV0YWlscy90cGwtbGlmZWN5Y2xlLWRldGFpbHNfMjAxOTAzMjJfMTU0NC5odG1sJyxcclxuICAgICAgICAgICAgY29udHJvbGxlcjogbGlmZWN5Y2xlUmVjQ3RybCxcclxuICAgICAgICAgICAgY29udHJvbGxlckFzOiAnbGlmZWN5Y2xlQ3RybCcsXHJcblxyXG4gICAgICAgICAgICBiaW5kaW5nczoge1xyXG4gICAgICAgICAgICAgICAgbGlmZWN5Y2xlUmVjb3JkOiAnPCcsXHJcbiAgICAgICAgICAgICAgICBvblVwZGF0ZTogJyYnLFxyXG4gICAgICAgICAgICAgICAgaXNEZXRhaWxWYWxpZDogJyYnLFxyXG4gICAgICAgICAgICAgICAgb25EZWxldGU6ICcmJyxcclxuICAgICAgICAgICAgICAgIGVuYWJsZURlbGV0ZUluZGV4OiAnJicsXHJcbiAgICAgICAgICAgICAgICBpc0VjdGQ6ICc8JyxcclxuICAgICAgICAgICAgICAgIGFjdGl2aXR5VHlwZXM6JzwnLCAvL2xpc3Qgb2YgYWN0aXZpdHkgdHlwZXNcclxuICAgICAgICAgICAgICAgIHNlcXVlbmNlVXBkYXRlZDonPCcsXHJcbiAgICAgICAgICAgICAgICBlcnJvclN1bW1hcnlVcGRhdGU6JzwnLCAvL3VwZGF0ZSB0aGUgY29tcG9uZW50IGVycm9yIHN1bW1hcnlcclxuICAgICAgICAgICAgICAgc2hvd0Vycm9yU3VtbWFyeTonPCcsIC8vc2hvdyB0aGUgY29tcG9uZW50IGVycm9yIHN1bW1hcnlcclxuICAgICAgICAgICAgICAgIHVwZGF0ZUVycm9yU3VtbWFyeTonJicgLy91cGRhdGUgdGhlIHBhcmVudCBlcnJvciBzdW1tYXJ5XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIGxpZmVjeWNsZVJlY0N0cmwuJGluamVjdCA9IFsnQWN0aXZpdHlGb3JtRmlsdGVyU2VydmljZScsICdUcmFuc2FjdGlvbkxpc3RzJywgJyRmaWx0ZXInLCAnJHRyYW5zbGF0ZScsJyRzY29wZSddO1xyXG5cclxuICAgIGZ1bmN0aW9uIGxpZmVjeWNsZVJlY0N0cmwoQWN0aXZpdHlGb3JtRmlsdGVyU2VydmljZSwgVHJhbnNhY3Rpb25MaXN0cywgJGZpbHRlciwgJHRyYW5zbGF0ZSwgJHNjb3BlKSB7XHJcbiAgICAgICAgdmFyIHZtID0gdGhpcztcclxuICAgICAgIC8vcyB2bS5zYXZlUHJlc3NlZCA9IGZhbHNlO1xyXG5cclxuICAgICAgICB2bS5hY3Rpdml0eUxpc3Q9W107XHJcbiAgICAgICAgdm0uYWN0aXZpdHlUeXBlTGlzdD1bXTtcclxuICAgICAgICB2bS5waGFybWFMaXN0ID1bXTtcclxuICAgICAgICB2bS5iaW9sTGlzdCA9IFtdO1xyXG4gICAgICAgIHZtLnBvc3RNYXJrZXRMaXN0ID0gW107XHJcbiAgICAgICAgdm0uY29uc3VtSGVhbHRoTGlzdCA9IFtdO1xyXG4gICAgICAgIHZtLnNlcXVlbmNlTGlzdCA9IFtdO1xyXG4gICAgICAgIHZtLmRlc2NyaXB0aW9uTGlzdCA9IFtdO1xyXG5cclxuICAgICAgICB2bS5saWZlY3ljbGVNb2RlbCA9IHt9O1xyXG4gICAgICAgIHZtLmVuZERhdGVWaXNpYmxlID0gZmFsc2U7XHJcbiAgICAgICAgdm0ueWVhclZpc2libGUgPSBmYWxzZTtcclxuICAgICAgICB2bS5zdGFydERhdGVWaXNpYmxlID0gZmFsc2U7XHJcbiAgICAgICAgdm0uZGVzY3JpcHRpb25WaXNpYmxlID0gZmFsc2U7XHJcbiAgICAgICAgdm0udmVyc2lvblZpc2libGUgPSBmYWxzZTtcclxuICAgICAgICB2bS5lY3RkID0gZmFsc2U7XHJcbiAgICAgICAgdm0ucG9wT3BlbmVkID0gZmFsc2U7XHJcbiAgICAgICAgdm0uYWxlcnRzID0gW2ZhbHNlLCBmYWxzZV07XHJcbiAgICAgICAgdm0uZGF0ZU9wdGlvbnMgPSB7XHJcbiAgICAgICAgICAgIHNob3dXZWVrczogZmFsc2VcclxuICAgICAgICB9O1xyXG4gICAgICAgIHZtLmxhbmcgPSAkdHJhbnNsYXRlLnByb3Bvc2VkTGFuZ3VhZ2UoKSB8fCAkdHJhbnNsYXRlLnVzZSgpO1xyXG4gICAgICAgIHZtLnllYXJMaXN0ID0gX2NyZWF0ZVllYXJMaXN0KCk7XHJcbiAgICAgICAgdm0uZGVzY3JpcHRpb25PYmo9VHJhbnNhY3Rpb25MaXN0cy5nZXRUcmFuc2FjdGlvbkRlc2NyaXB0aW9ucygpO1xyXG4gICAgICAgIHZtLmxlYWRMaXN0ID0gVHJhbnNhY3Rpb25MaXN0cy5nZXRBY3Rpdml0eUxlYWRMaXN0KCk7XHJcblxyXG4gICAgICAgIHZtLnVwZGF0ZVN1bW1hcnk9MDsgLy9tZXNzYWdlIHRvIHVwZGF0ZSB0aGUgc3VtbWFyeSBjb21wb25lbnRcclxuICAgICAgICB2bS5zaG93U3VtbWFyeT1mYWxzZTsgLy9zaG93IHRoZSBlcnJyb3Igc3VtbWFyeSBvYmplY3RcclxuICAgICAgICB2bS5mb2N1c1N1bW1hcnk9MDsgLy9tZXNzYWdpbmcgdG8gZm9jdXMgb24gdGhlIGFjdGl2ZSBpbmdyZWRpZW50IHN1bW1hcnlcclxuXHJcbiAgICAgICAgdm0uZGF0ZUZvcm1hdEVycm9yPVtcclxuICAgICAgICAgICAge3R5cGU6IFwicmVxdWlyZWRcIiwgZGlzcGxheUFsaWFzOiBcIk1TR19FUlJfTUFORFwifSxcclxuICAgICAgICAgICAge3R5cGU6IFwiZGF0ZVwiLCBkaXNwbGF5QWxpYXM6IFwiTVNHX0VSUl9EQVRFX0ZPUk1BVFwifVxyXG4gICAgICAgIF07XHJcbiAgICAgICAgdm0ubWluTGVuZ3RoNkVycm9yPVtcclxuICAgICAgICAgICAge3R5cGU6IFwicmVxdWlyZWRcIiwgZGlzcGxheUFsaWFzOiBcIk1TR19FUlJfTUFORFwifSxcclxuICAgICAgICAgICAge3R5cGU6IFwibWlubGVuZ3RoXCIsIGRpc3BsYXlBbGlhczogXCJNU0dfTEVOR1RIXzZOVU1cIn1cclxuICAgICAgICBdO1xyXG4gICAgICAgIHZtLnJlcXVpcmVkT25seT1bXHJcbiAgICAgICAgICAgIHt0eXBlOiBcInJlcXVpcmVkXCIsIGRpc3BsYXlBbGlhczogXCJNU0dfRVJSX01BTkRcIn1cclxuICAgICAgICBdO1xyXG5cclxuICAgICAgICAvL1xyXG4gICAgICAgIHZtLiRvbkluaXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIF9zZXRJZE5hbWVzKCk7XHJcbiAgICAgICAgICAgIC8vbGF6eSBsb2FkIG9mIHllYXIgbHVzdFxyXG4gICAgICAgICAgICBpZiAoIXZtLnllYXJMaXN0IHx8IHZtLnllYXJMaXN0Lmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgdm0ueWVhckxpc3QgPSBfY3JlYXRlWWVhckxpc3QoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2bS5zZWxlY3RBY3Rpdml0eUxpc3QoKTtcclxuICAgICAgICAgICAgLy92bS5kZXNjcmlwdGlvbk9iaj1UcmFuc2FjdGlvbkxpc3RzLmdldFRyYW5zYWN0aW9uRGVzY3JpcHRpb25zKCk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAcGFyYW0gY2hhbmdlc1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHZtLiRvbkNoYW5nZXMgPSBmdW5jdGlvbiAoY2hhbmdlcykge1xyXG4gICAgICAgICAgICBpZihjaGFuZ2VzLmFjdGl2aXR5VHlwZXMpe1xyXG4gICAgICAgICAgICAgICAgdm0uYWN0aXZpdHlMaXN0PWNoYW5nZXMuYWN0aXZpdHlUeXBlcy5jdXJyZW50VmFsdWU7XHJcbiAgICAgICAgICAgICAgICBpZih2bS5hY3Rpdml0eUxpc3QpIHtcclxuICAgICAgICAgICAgICAgICAgICB2bS5waGFybWFMaXN0ID0gQWN0aXZpdHlGb3JtRmlsdGVyU2VydmljZS5nZXRQaGFybWFSQUxpc3Qodm0uYWN0aXZpdHlMaXN0KTtcclxuICAgICAgICAgICAgICAgICAgICB2bS5iaW9sTGlzdCA9IEFjdGl2aXR5Rm9ybUZpbHRlclNlcnZpY2UuZ2V0QmlvbFJBTGlzdCh2bS5hY3Rpdml0eUxpc3QpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZtLnBvc3RNYXJrZXRMaXN0ID0gQWN0aXZpdHlGb3JtRmlsdGVyU2VydmljZS5nZXRQb3N0TWFya2V0UkFMaXN0KHZtLmFjdGl2aXR5TGlzdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdm0uY29uc3VtSGVhbHRoTGlzdCA9IEFjdGl2aXR5Rm9ybUZpbHRlclNlcnZpY2UuZ2V0Q29uc3VtSGVhbHRoTGlzdCh2bS5hY3Rpdml0eUxpc3QpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChjaGFuZ2VzLmxpZmVjeWNsZVJlY29yZCkge1xyXG4gICAgICAgICAgICAgICAgX3VwZGF0ZUxvY2FsTW9kZWwoY2hhbmdlcy5saWZlY3ljbGVSZWNvcmQuY3VycmVudFZhbHVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoY2hhbmdlcy5pc0VjdGQpIHtcclxuICAgICAgICAgICAgICAgIHZtLmVjdGQgPSBjaGFuZ2VzLmlzRWN0ZC5jdXJyZW50VmFsdWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYoY2hhbmdlcy5zZXF1ZW5jZVVwZGF0ZWQpe1xyXG4gICAgICAgICAgICAgICAgaWYoIWNoYW5nZXMubGlmZWN5Y2xlUmVjb3JkICYmIHZtLmxpZmVjeWNsZVJlY29yZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZtLmxpZmVjeWNsZU1vZGVsLnNlcXVlbmNlPXZtLmxpZmVjeWNsZVJlY29yZC5zZXF1ZW5jZTtcclxuICAgICAgICAgICAgICAgICAgICAvL191cGRhdGVMb2NhbE1vZGVsKHZtLmxpZmVjeWNsZVJlY29yZCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYoY2hhbmdlcy5zaG93RXJyb3JTdW1tYXJ5KXtcclxuXHJcbiAgICAgICAgICAgICAgICB2bS5zaG93U3VtbWFyeT1jaGFuZ2VzLnNob3dFcnJvclN1bW1hcnkuY3VycmVudFZhbHVlO1xyXG4gICAgICAgICAgICAgICAgdm0udXBkYXRlRXJyb3JTdW1tYXJ5U3RhdGUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZihjaGFuZ2VzLmVycm9yU3VtbWFyeVVwZGF0ZSl7XHJcbiAgICAgICAgICAgICAgICB2bS51cGRhdGVFcnJvclN1bW1hcnlTdGF0ZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogSWYgdGhlIGZvcm0gaXMgZGlydHkgYWx3YXlzIHNldCB0aGF0IGl0IGlzIG5vdCB2YWxpZFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgICRzY29wZS4kd2F0Y2goJ2xpZmVjeWNsZUN0cmwubGlmZWN5Y2xlRGV0YWlsc0Zvcm0uJGRpcnR5JywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIGlmKHZtLmxpZmVjeWNsZURldGFpbHNGb3JtLiRkaXJ0eSkge1xyXG4gICAgICAgICAgICAgICAgdm0uaXNEZXRhaWxWYWxpZCh7c3RhdGU6ZmFsc2V9KVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSwgdHJ1ZSk7XHJcblxyXG4gICAgICAgICRzY29wZS4kd2F0Y2goJ2xpZmVjeWNsZUN0cmwubGlmZWN5Y2xlRGV0YWlsc0Zvcm0uJGVycm9yJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2bS51cGRhdGVFcnJvclN1bW1hcnlTdGF0ZSgpO1xyXG4gICAgICAgICAgICB2bS51cGRhdGVFcnJvclN1bW1hcnkoKTtcclxuICAgICAgICB9LCB0cnVlKTtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVXNlZCBhcyBtZXNzYWdpbmcgdG8gZ2V0IHRoZSBlcnJvciBzdW1tYXJ5IHRvIHVwZGF0ZSBpdHNlbGZcclxuICAgICAgICAgKi9cclxuICAgICAgICB2bS51cGRhdGVFcnJvclN1bW1hcnlTdGF0ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdm0udXBkYXRlU3VtbWFyeSA9IHZtLnVwZGF0ZVN1bW1hcnkgKyAxO1xyXG5cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvL3NldHMgdGhlIHN0YXJ0IGRhdGUgY2FsZW5kYXIgc3RhdGVcclxuICAgICAgICB2bS5vcGVuU3RhcnREYXRlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2bS5zdGFydERhdGVPcGVuID0gdHJ1ZTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHZtLm9wZW5FbmREYXRlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2bS5lbmREYXRlT3BlbiA9IHRydWU7XHJcbiAgICAgICAgfTtcclxuICAgICAgICB2bS5vcGVuRmlsZWREYXRlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2bS5maWxlZERhdGVPcGVuID0gdHJ1ZTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBfdXBkYXRlTG9jYWxNb2RlbChyZWNvcmQpIHtcclxuICAgICAgICAgICAgdm0ubGlmZWN5Y2xlTW9kZWwgPSBhbmd1bGFyLmNvcHkocmVjb3JkKTtcclxuICAgICAgICAgICAgY29udmVydFRvRGF0ZSgpO1xyXG4gICAgICAgICAgICB2bS5zZXRTZXF1ZW5jZUxpc3QoKTtcclxuICAgICAgICAgICAgdm0uc2V0RGV0YWlsc1N0YXRlKCk7XHJcbiAgICAgICAgICAgIHZtLnNlbGVjdEFjdGl2aXR5TGlzdCgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdm0uZGlzYWJsZURlbGV0ZVN0YXRlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAvL3RoaXMgaXMgbm9FY3RkIGNhc2VcclxuICAgICAgICAgICAgaWYgKCF2bS5lY3RkKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgdmFsdWUgPSBwYXJzZUludCh2bS5saWZlY3ljbGVNb2RlbC5zZXF1ZW5jZSk7XHJcbiAgICAgICAgICAgIGlmICh2YWx1ZSA9PSB2bS5lbmFibGVEZWxldGVJbmRleCgpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLy9UT0RPIG1vdmUgdGhpcyBsb2dpYyB0byBhIHNlcnZpY2UuXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFNlbGVjdHMgdGhlIGFwcHJvcHJpYXRlIGFjdGl2aXR5IGxpc3QgYmFzZWQgb24gdGhlIGFjdGl2aXR5IGxlYWQgc2VsZWN0aW9uXHJcbiAgICAgICAgICogVGhlIGFjdGl2aXR5IGxlYWQgIHF1ZXN0aW9uIGNhbGxzIHRoaXMgZnVuY3Rpb25cclxuICAgICAgICAgKi9cclxuICAgICAgICB2bS5zZWxlY3RBY3Rpdml0eUxpc3QgPSBmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICBpZighdm0ubGlmZWN5Y2xlTW9kZWwuYWN0aXZpdHlMZWFkKXtcclxuICAgICAgICAgICAgICAgIHZtLmFjdGl2aXR5VHlwZUxpc3Q9W107XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgc3dpdGNoKHZtLmxpZmVjeWNsZU1vZGVsLmFjdGl2aXR5TGVhZCl7XHJcbiAgICAgICAgICAgICAgICBjYXNlICBUcmFuc2FjdGlvbkxpc3RzLmdldEJpb2xvZ2ljYWxMZWFkVmFsdWUoKTpcclxuICAgICAgICAgICAgICAgICAgICB2bS5hY3Rpdml0eVR5cGVMaXN0PSB2bS5iaW9sTGlzdDtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgIFRyYW5zYWN0aW9uTGlzdHMuZ2V0UGhhcm1hTGVhZFZhbHVlKCk6XHJcbiAgICAgICAgICAgICAgICAgICAgdm0uYWN0aXZpdHlUeXBlTGlzdD0gdm0ucGhhcm1hTGlzdDtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgIFRyYW5zYWN0aW9uTGlzdHMuZ2V0UG9zdE1hcmtldExlYWRWYWx1ZSgpOlxyXG4gICAgICAgICAgICAgICAgICAgIHZtLmFjdGl2aXR5VHlwZUxpc3Q9IHZtLnBvc3RNYXJrZXRMaXN0O1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAgVHJhbnNhY3Rpb25MaXN0cy5nZXRDb25zdW1IZWFsdGhMZWFkVmFsdWUoKTpcclxuICAgICAgICAgICAgICAgICAgICB2bS5hY3Rpdml0eVR5cGVMaXN0PSB2bS5jb25zdW1IZWFsdGhMaXN0O1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICBpZih2bS5saWZlY3ljbGVNb2RlbC5hY3Rpdml0eUxlYWQpIGNvbnNvbGUud2FybihcIk5vdCBhIHZhbGlkIGxlYWQgY2hvaWNlXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZtLmFjdGl2aXR5VHlwZUxpc3Q9W107XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vaWYgdGhlIHZhbHVlIGV4aXN0cyBpbiB0aGUgbGlzdCBzZXQgaXQgdG8gdGhlIHZhbHVlXHJcbiAgICAgICAgICAgIGlmKHZtLmxpZmVjeWNsZU1vZGVsLmFjdGl2aXR5VHlwZSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHRlbXAgPSAkZmlsdGVyKCdmaWx0ZXInKSh2bS5hY3Rpdml0eVR5cGVMaXN0LCB7aWQ6IHZtLmxpZmVjeWNsZU1vZGVsLmFjdGl2aXR5VHlwZS5pZH0pWzBdO1xyXG4gICAgICAgICAgICAgICAgdm0ubGlmZWN5Y2xlTW9kZWwuYWN0aXZpdHlUeXBlID0gdGVtcDtcclxuICAgICAgICAgICAgICAgIC8vdm0udXBkYXRlQWN0aXZpdHlUeXBlKCk7IG5vIG5lZWQ/Pz9cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2bS51cGRhdGVFcnJvclN1bW1hcnlTdGF0ZSgpOyAvLyBpZiBlcnJvciBzdW1tYXJ5IGlzIHZpc2libGUgdXBkYXRlIGl0XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQG5nZG9jIE1ldGhvZCAtc2V0cyB0aGUgbGlmZWN5Y2xlIFNlcXVlbmNlIERlc2NyaXB0aW9uVmFsaWVcclxuICAgICAgICAgKiBAcGFyYW0gdmFsdWVcclxuICAgICAgICAgKi9cclxuICAgICAgICB2bS5zZXRTZXF1ZW5jZUxpc3QgPSBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgICAgICB2YXIgdmFsdWUgPSB2bS5saWZlY3ljbGVNb2RlbC5hY3Rpdml0eVR5cGUuaWQ7XHJcbiAgICAgICAgICAgIHZhciB0ZW1wID0gdm0ubGlmZWN5Y2xlTW9kZWwuZGVzY3JpcHRpb25WYWx1ZTtcclxuICAgICAgICAgICAgdm0ubGlmZWN5Y2xlTW9kZWwuYWN0aXZpdHlUeXBlRGlzcGxheT12bS5saWZlY3ljbGVNb2RlbC5hY3Rpdml0eVR5cGUuaWQ7XHJcbiAgICAgICAgICAgIHZtLmxpZmVjeWNsZU1vZGVsLmRlc2NyaXB0aW9uVmFsdWUgPSBcIlwiO1xyXG4gICAgICAgICAgICBzd2l0Y2ggKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAvL2NvbW1lbnRlZCBvdXQgdmFsdWVzIG5vdCBpbiBsaXN0IGFzIG9mIEphbiAyMywyMDE3XHJcbiAgICAgICAgICAgICAgIC8qIGNhc2UgKFwiUFJFU1VCX01FRVRJTkdcIik6XHJcbiAgICAgICAgICAgICAgICAgICAgdm0uZGVzY3JpcHRpb25MaXN0ID0gVHJhbnNhY3Rpb25MaXN0cy5nZXRQcmVzdWJUeXBlcygpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrOyovXHJcbiAgICAgICAgICAgICAgICBjYXNlIChcIkIwMi0yMDE2MDMwMS0wMDFcIik6IC8vQU5EU1xyXG4gICAgICAgICAgICAgICAgICAgIHZtLmRlc2NyaXB0aW9uTGlzdCA9IFRyYW5zYWN0aW9uTGlzdHMuZ2V0QW5kc1R5cGUoKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgKFwiQjAyLTIwMTYwMzAxLTAxOFwiKTpcclxuICAgICAgICAgICAgICAgICAgICB2bS5kZXNjcmlwdGlvbkxpc3QgPSBUcmFuc2FjdGlvbkxpc3RzLmdldERpbmFUeXBlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgY2FzZSAoXCJCMDItMjAxNjAzMDEtMDE5XCIpOlxyXG4gICAgICAgICAgICAgICAgICAgIHZtLmRlc2NyaXB0aW9uTGlzdCA9IFRyYW5zYWN0aW9uTGlzdHMuZ2V0RGluYlR5cGUoKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgKFwiQjAyLTIwMTYwMzAxLTAzMVwiKTogLy9FVSBORFMgKEV4dHJhb3JkaW5hcnkgVXNlIE5ldyBEcnVnIFN1Ym1pc3Npb24pXHJcbiAgICAgICAgICAgICAgICAgICAgdm0uZGVzY3JpcHRpb25MaXN0ID0gVHJhbnNhY3Rpb25MaXN0cy5nZXRFdW5kc1R5cGUoKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICBjYXNlIChcIkIwMi0yMDE2MDMwMS0wMzJcIik6IC8vRVVTTkRTIChFeHRyYW9yZGluYXJ5IFVzZSBTdXBwbGVtZW50IHRvIGEgTmV3IERydWcgU3VibWlzc2lvbilcclxuICAgICAgICAgICAgICAgICAgICB2bS5kZXNjcmlwdGlvbkxpc3QgPSBUcmFuc2FjdGlvbkxpc3RzLmdldEV1c25kc1R5cGUoKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgKFwiQjAyLTIwMTYwMzAxLTAzOFwiKTogLy9MZXZlbCAzIC0gTm90aWNlIG9mIENoYW5nZSAoUG9zdC1Ob3RpY2Ugb2YgQ29tcGxpYW5jZSBDaGFuZ2VzIC0gTGV2ZWwgSUlJKVxyXG4gICAgICAgICAgICAgICAgICAgIHZtLmRlc2NyaXB0aW9uTGlzdCA9IFRyYW5zYWN0aW9uTGlzdHMuZ2V0TGV2ZWwzVHlwZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICAgIGNhc2UgKFwiQjAyLTIwMTYwMzAxLTA0NlwiKTogLy9cdE1QTkMgKFByZS1OQyBNZWV0aW5nKVxyXG4gICAgICAgICAgICAgICAgICAgIHZtLmRlc2NyaXB0aW9uTGlzdCA9IFRyYW5zYWN0aW9uTGlzdHMuZ2V0TVBOQ1R5cGUoKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICBjYXNlIChcIkIwMi0yMDE2MDMwMS0wNDdcIik6IC8vXHRNUE5EUyAoUHJlLU5EUyBNZWV0aW5nKVxyXG4gICAgICAgICAgICAgICAgICAgIHZtLmRlc2NyaXB0aW9uTGlzdCA9IFRyYW5zYWN0aW9uTGlzdHMuZ2V0TVBORFNUeXBlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIChcIkIwMi0yMDE2MDMwMS0wNDlcIik6IC8vXHRNUFNORFMgKFByZS1TTkRTIE1lZXRpbmcpXHJcbiAgICAgICAgICAgICAgICAgICAgdm0uZGVzY3JpcHRpb25MaXN0ID0gVHJhbnNhY3Rpb25MaXN0cy5nZXRNUFNORFNUeXBlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgICAgY2FzZSAoXCJCMDItMjAxNjAzMDEtMDUwXCIpOiAvL05DIChOb3RpZmlhYmxlIENoYW5nZSlcclxuICAgICAgICAgICAgICAgICAgICB2bS5kZXNjcmlwdGlvbkxpc3QgPSBUcmFuc2FjdGlvbkxpc3RzLmdldE5jVHlwZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAoXCJCMDItMjAxNjAzMDEtMDUxXCIpOiAvL05EUyAoTmV3IERydWcgU3VibWlzc2lvbilcclxuICAgICAgICAgICAgICAgICAgICB2bS5kZXNjcmlwdGlvbkxpc3QgPSBUcmFuc2FjdGlvbkxpc3RzLmdldE5kc1R5cGUoKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgY2FzZSAoXCJCMDItMjAxNjAzMDEtMDcwXCIpOlxyXG4gICAgICAgICAgICAgICAgICAgIHZtLmRlc2NyaXB0aW9uTGlzdCA9IFRyYW5zYWN0aW9uTGlzdHMuZ2V0UGRjVHlwZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgY2FzZSAoXCJCMDItMjAxNjAzMDEtMDcxXCIpOlxyXG4gICAgICAgICAgICAgICAgICAgIHZtLmRlc2NyaXB0aW9uTGlzdCA9IFRyYW5zYWN0aW9uTGlzdHMuZ2V0UGRjQlR5cGUoKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgKFwiQjAyLTIwMTYwMzAxLTA2N1wiKTogLy9QQU5EIChQYW5kZW1pYyBBcHBsaWNhdGlvbilcclxuICAgICAgICAgICAgICAgICAgICB2bS5kZXNjcmlwdGlvbkxpc3QgPSBUcmFuc2FjdGlvbkxpc3RzLmdldFBBTkRUeXBlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIChcIkIwMi0yMDE2MDMwMS0wNjhcIik6IC8vUEJSRVItQ1xyXG4gICAgICAgICAgICAgICAgICAgIHZtLmRlc2NyaXB0aW9uTGlzdCA9IFRyYW5zYWN0aW9uTGlzdHMuZ2V0UEJSRVJDVHlwZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAoXCJCMDItMjAxNjAzMDEtMDY5XCIpOiAvL1BCUkVSLVBWXHJcbiAgICAgICAgICAgICAgICAgICAgdm0uZGVzY3JpcHRpb25MaXN0ID0gVHJhbnNhY3Rpb25MaXN0cy5nZXRQQlJFUlBWVHlwZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICAgIGNhc2UgKFwiQjAyLTIwMTYwMzAxLTA3NVwiKTogLy9QUk5EUyAoUHJpb3JpdHkgUmVxdWVzdCBORFMpXHJcbiAgICAgICAgICAgICAgICAgICAgdm0uZGVzY3JpcHRpb25MaXN0ID0gVHJhbnNhY3Rpb25MaXN0cy5nZXRQUk5EU1R5cGUoKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICBjYXNlIChcIkIwMi0yMDE2MDMwMS0wNzdcIik6IC8vUFJTTkRTIChQcmlvcml0eSBSZXF1ZXN0IFNORFMpXHJcbiAgICAgICAgICAgICAgICAgICAgdm0uZGVzY3JpcHRpb25MaXN0ID0gVHJhbnNhY3Rpb25MaXN0cy5nZXRQUlNORFNUeXBlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgICAgY2FzZSAoXCJCMDItMjAxNjAzMDEtMDc4XCIpOiAvL1BTVVItQyAoUGVyaW9kaWMgU2FmZXR5IFVwZGF0ZSBSZXBvcnQgLSBDb25kaXRpb25hbClcclxuICAgICAgICAgICAgICAgICAgICB2bS5kZXNjcmlwdGlvbkxpc3QgPSBUcmFuc2FjdGlvbkxpc3RzLmdldHBTdXJDVHlwZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAoXCJCMDItMjAxNjAzMDEtMDc5XCIpOiAvL1BTVVItUFYgKFBlcmlvZGljIFNhZmV0eSBVcGRhdGUgUmVwb3J0IC0gUGhhcm1hY292aWdpbGFuY2UpXHJcbiAgICAgICAgICAgICAgICAgICAgdm0uZGVzY3JpcHRpb25MaXN0ID0gVHJhbnNhY3Rpb25MaXN0cy5nZXRwU3VyUHZUeXBlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIChcIkIwMi0yMDE2MDMwMS0wODBcIik6IC8vUk1QLVBWIChSaXNrIE1hbmFnZW1lbnQgUGxhbiAtIFBoYXJtYWNvdmlnaWxhbmNlKVxyXG4gICAgICAgICAgICAgICAgICAgIHZtLmRlc2NyaXB0aW9uTGlzdCA9IFRyYW5zYWN0aW9uTGlzdHMuZ2V0Um1wUHZUeXBlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIChcIkIwMi0yMDE2MDMwMS0wODJcIik6IC8vU0FORFMgKFN1cHBsZW1lbnQgdG8gYW4gQWJicmV2aWF0ZWQgTmV3IERydWcgU3VibWlzc2lvbilcclxuICAgICAgICAgICAgICAgICAgICB2bS5kZXNjcmlwdGlvbkxpc3QgPSBUcmFuc2FjdGlvbkxpc3RzLmdldFNhbmRzVHlwZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAoXCJCMDItMjAxNjAzMDEtMDg0XCIpOiAvL1NORFMgKFN1cHBsZW1lbnQgdG8gYSBOZXcgRHJ1ZyBTdWJtaXNzaW9uKVxyXG4gICAgICAgICAgICAgICAgICAgIHZtLmRlc2NyaXB0aW9uTGlzdCA9IFRyYW5zYWN0aW9uTGlzdHMuZ2V0U25kc1R5cGUoKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgKFwiQjAyLTIwMTYwMzAxLTA4NVwiKTogLy9TTkRTLUMgKFN1cHBsZW1lbnQgdG8gYSBOZXcgRHJ1ZyBTdWJtaXNzaW9uIC0gQ29uZGl0aW9uYWwpXHJcbiAgICAgICAgICAgICAgICAgICAgdm0uZGVzY3JpcHRpb25MaXN0ID0gVHJhbnNhY3Rpb25MaXN0cy5nZXRTbmRzQ0FycmF5KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIChcIkIwMi0yMDE2MDMwMS0wODdcIik6IC8vVUQtUFYgKFVuZGVmaW5lZCBEYXRhIFBoYXJtYWNvdmlnaWxhbmNlKVxyXG4gICAgICAgICAgICAgICAgICAgIHZtLmRlc2NyaXB0aW9uTGlzdCA9IFRyYW5zYWN0aW9uTGlzdHMuZ2V0VWRwdlR5cGUoKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgKFwiQjAyLTIwMTYwMzAxLTA4OFwiKTogLy9VRFJBIChVbmRlZmluZWQgUmVndWxhdG9yeSBBY3Rpdml0eSlcclxuICAgICAgICAgICAgICAgICAgICB2bS5kZXNjcmlwdGlvbkxpc3QgPSBUcmFuc2FjdGlvbkxpc3RzLmdldFVkcmFUeXBlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgIC8qIGNhc2UgKFwiQ09OU1VMVEFUSU9OXCIpOlxyXG4gICAgICAgICAgICAgICAgICAgIHZtLmRlc2NyaXB0aW9uTGlzdCA9IFRyYW5zYWN0aW9uTGlzdHMuZ2V0Q29uc3VsdFR5cGUoKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhazsqL1xyXG4gICAgICAgICAgICAgICAgY2FzZSAoXCJCMDItMjAxNjAzMDEtMDg5XCIpOiAvL1lCUFIgKFllYXJseSBCaW9sb2dpYyBQcm9kdWN0IFJlcG9ydClcclxuICAgICAgICAgICAgICAgICAgICB2bS5kZXNjcmlwdGlvbkxpc3QgPSBUcmFuc2FjdGlvbkxpc3RzLmdldFlicHJUeXBlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIChcIkIwMi0yMDE2MDMwMS0wMjhcIik6IC8vRFNVUiAoRGV2ZWxvcG1lbnQgU2FmZXR5IFVwZGF0ZSBSZXBvcnQpXHJcbiAgICAgICAgICAgICAgICAgICAgdm0uZGVzY3JpcHRpb25MaXN0ID0gVHJhbnNhY3Rpb25MaXN0cy5nZXREU3VyVHlwZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAoXCJCMDItMjAxNjAzMDEtMDQzXCIpOlxyXG4gICAgICAgICAgICAgICAgICAgIHZtLmRlc2NyaXB0aW9uTGlzdCA9IFRyYW5zYWN0aW9uTGlzdHMuZ2V0TVBESU5UeXBlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIChcIkIwMi0yMDE2MDMwMS0wNzBcIik6XHJcbiAgICAgICAgICAgICAgICAgICAgdm0uZGVzY3JpcHRpb25MaXN0ID0gVHJhbnNhY3Rpb25MaXN0cy5nZXRQZGNUeXBlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIChcIkIwMi0yMDE2MDMwMS0wNzFcIik6XHJcbiAgICAgICAgICAgICAgICAgICAgdm0uZGVzY3JpcHRpb25MaXN0ID0gVHJhbnNhY3Rpb25MaXN0cy5nZXRQZGNCVHlwZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAoXCJCMDItMjAxNjAzMDEtMDIwXCIpOlxyXG4gICAgICAgICAgICAgICAgICAgIHZtLmRlc2NyaXB0aW9uTGlzdCA9IFRyYW5zYWN0aW9uTGlzdHMuZ2V0RGluZFR5cGUoKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgKFwiQjAyLTIwMTYwMzAxLTAyMVwiKTpcclxuICAgICAgICAgICAgICAgICAgICB2bS5kZXNjcmlwdGlvbkxpc3QgPSBUcmFuc2FjdGlvbkxpc3RzLmdldERpbmZUeXBlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG5cclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgdm0uZGVzY3JpcHRpb25MaXN0ID0gXCJcIjtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8vZmluZCBpZiB0aGUgdmFsdWUgaXMgaW4gdGhlIGxpc3RcclxuICAgICAgICAgICAgaWYgKHRlbXAgJiYgdm0uZGVzY3JpcHRpb25MaXN0LmluZGV4T2YodGVtcCkgIT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICB2bS5saWZlY3ljbGVNb2RlbC5kZXNjcmlwdGlvblZhbHVlID0gdGVtcDtcclxuICAgICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgICAgICBzZXREZXRhaWxzQXNOb25lKCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAbmdkb2MgbWV0aG9kIHNldHMgdGhlIHN0YXRlIG9mIHRoZSBkZXRhaWxzIGZpZWxkIGJhc2VkIG9uXHJcbiAgICAgICAgICogQG5nZG9jIG1ldGhvZCBzZXRzIHRoZSBzdGF0ZSBvZiB0aGUgZGV0YWlscyBmaWVsZCBiYXNlZCBvblxyXG4gICAgICAgICAqIHdoYXQgd2FzIHNlbGVjdGVkIGZvciB0aGUgZGV0YWlscyBkZXNjcmlwdGlvblxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHZtLnNldERldGFpbHNTdGF0ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIHZhbHVlID0gdm0ubGlmZWN5Y2xlTW9kZWwuZGVzY3JpcHRpb25WYWx1ZTtcclxuICAgICAgICAgICAgaWYgKCF2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgdm0uZGVzY3JpcHRpb25MaXN0ID0gW107XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgc3dpdGNoICh2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSh2bS5kZXNjcmlwdGlvbk9iai5BRE1JTklTVFJBVElWRSk6ICAgICAgICAgLypGQUxMVEhST1VHSCovXHJcbiAgICAgICAgICAgICAgICBjYXNlKHZtLmRlc2NyaXB0aW9uT2JqLkJFTkVGSVRfUklTS19BU1NFU1MpOiAgICAvKkZBTExUSFJPVUdIKi9cclxuICAgICAgICAgICAgICAgIGNhc2Uodm0uZGVzY3JpcHRpb25PYmouQ0FOQ0VMX0xFVFRFUik6ICAgICAgICAgIC8qRkFMTFRIUk9VR0gqL1xyXG4gICAgICAgICAgICAgICAgY2FzZSh2bS5kZXNjcmlwdGlvbk9iai5DSEFOR0VfVE9fRElOKTogICAgICAgICAgLypGQUxMVEhST1VHSCovXHJcbiAgICAgICAgICAgICAgICBjYXNlKHZtLmRlc2NyaXB0aW9uT2JqLkRJTl9ESVNDT05USU5VRUQpOiAgICAgICAvKkZBTExUSFJPVUdIKi9cclxuICAgICAgICAgICAgICAgIGNhc2Uodm0uZGVzY3JpcHRpb25PYmouRFJVR19OT1RJRl9GT1JNKTogICAgICAgIC8qRkFMTFRIUk9VR0gqL1xyXG4gICAgICAgICAgICAgICAgY2FzZSh2bS5kZXNjcmlwdGlvbk9iai5JTklUSUFMKTogICAgICAgICAgICAgICAgLypGQUxMVEhST1VHSCovXHJcbiAgICAgICAgICAgICAgICBjYXNlKHZtLmRlc2NyaXB0aW9uT2JqLk5PVElGSUNBVElPTl9DSEFOR0UpOiAgICAvKkZBTExUSFJPVUdIKi9cclxuICAgICAgICAgICAgICAgIGNhc2Uodm0uZGVzY3JpcHRpb25PYmouTk9USUZJQ0FUSU9OX0lOVEVSUlVQVF9TQUxFKTogLypGQUxMVEhST1VHSCBKdWx5IDE3LDIwMTcgYWRkZWQqL1xyXG4gICAgICAgICAgICAgICAgY2FzZSh2bS5kZXNjcmlwdGlvbk9iai5QQU5ERU1JQ19BUFBMKTogICAgICAgICAgLypGQUxMVEhST1VHSCovXHJcbiAgICAgICAgICAgICAgICBjYXNlKHZtLmRlc2NyaXB0aW9uT2JqLlBPU1RfQ0xFQVJBTkNFX0RBVEEpOiAgICAvKkZBTExUSFJPVUdIKi9cclxuICAgICAgICAgICAgICAgIGNhc2Uodm0uZGVzY3JpcHRpb25PYmouUE9TVF9NQVJLRVRfU1VSVik6ICAgICAgIC8qRkFMTFRIUk9VR0gqL1xyXG4gICAgICAgICAgICAgICAgY2FzZSh2bS5kZXNjcmlwdGlvbk9iai5QT1NUX05PQ19DSEFOR0UpOiAgICAgICAgLypGQUxMVEhST1VHSCovXHJcbiAgICAgICAgICAgICAgICBjYXNlKHZtLmRlc2NyaXB0aW9uT2JqLlBPU1RfQVVUSF9ESVYxX0NIQU5HRSk6ICAvKkZBTExUSFJPVUdIKi9cclxuICAgICAgICAgICAgICAgIGNhc2Uodm0uZGVzY3JpcHRpb25PYmouUFJFU1VCX01FRVRJTkdfUEtHKTogICAgIC8qRkFMTFRIUk9VR0gqL1xyXG4gICAgICAgICAgICAgICAgY2FzZSh2bS5kZXNjcmlwdGlvbk9iai5QUklPUklUWV9SRVZJRVdfUlEpOiAgICAgLypGQUxMVEhST1VHSCovXHJcbiAgICAgICAgICAgICAgICBjYXNlKHZtLmRlc2NyaXB0aW9uT2JqLlBSSVNUSU5FX1BNKTogICAgICAgICAgICAvKkZBTExUSFJPVUdIKi9cclxuICAgICAgICAgICAgICAgIGNhc2Uodm0uZGVzY3JpcHRpb25PYmouUFJJU1RJTkVfUE1fMkxBTkcpOiAgICAgIC8qRkFMTFRIUk9VR0gqL1xyXG4gICAgICAgICAgICAgICAgY2FzZSh2bS5kZXNjcmlwdGlvbk9iai5SRUNPTl9ERUNJU19MVFJfSU5URU5UKTogIC8qRkFMTFRIUk9VR0ggSnVsIDE3LDIwMTcgYWRkZWQqL1xyXG4gICAgICAgICAgICAgICAgY2FzZSh2bS5kZXNjcmlwdGlvbk9iai5SRUNPTl9ERUNJU19SUV9SRUNPTik6ICAvKkZBTExUSFJPVUdIIEp1bCAxNywyMDE3IGFkZGVkKi9cclxuICAgICAgICAgICAgICAgIGNhc2Uodm0uZGVzY3JpcHRpb25PYmouUkVDT05fREVDSVNfT1RIRVJfSU5GTyk6ICAvKkZBTExUSFJPVUdIIEp1bCAxNywyMDE3IGFkZGVkKi9cclxuICAgICAgICAgICAgICAgIGNhc2Uodm0uZGVzY3JpcHRpb25PYmouTEFCRUxfUFJFQVBQUk9WQUxfMkxBTkcpOiAgLypGQUxMVEhST1VHSCBKdWwgMTcsMjAxNyBhZGRlZCovXHJcbiAgICAgICAgICAgICAgICBjYXNlKHZtLmRlc2NyaXB0aW9uT2JqLlJJU0tfQ09NTVVOX0RPQyk6ICAgICAgICAvKkZBTExUSFJPVUdIKi9cclxuICAgICAgICAgICAgICAgIGNhc2Uodm0uZGVzY3JpcHRpb25PYmouU0lHTkFMX1dPUktfVVApOiAgICAgICAgIC8qRkFMTFRIUk9VR0gqL1xyXG4gICAgICAgICAgICAgICAgY2FzZSh2bS5kZXNjcmlwdGlvbk9iai5QUkVTVUJfTUVFVElOR19SUSk6ICAgICAgLypGQUxMVEhST1VHSCovXHJcbiAgICAgICAgICAgICAgICBjYXNlKHZtLmRlc2NyaXB0aW9uT2JqLkNPUlJfUEFURU5UX01FRCk6ICAvKkZBTExUSFJPVUdIIEp1bCAxNywyMDE3IGFkZGVkKi9cclxuICAgICAgICAgICAgICAgIGNhc2Uodm0uZGVzY3JpcHRpb25PYmouQUxMRUdBVElPTl9OT1RJQ0UpOiAgLypGQUxMVEhST1VHSCBKdWwgMTcsMjAxNyBhZGRlZCovXHJcbiAgICAgICAgICAgICAgICBjYXNlKHZtLmRlc2NyaXB0aW9uT2JqLkZPUk1fSVYpOiAgLypGQUxMVEhST1VHSCBKdWwgMTcsMjAxNyBhZGRlZCovXHJcbiAgICAgICAgICAgICAgICBjYXNlKHZtLmRlc2NyaXB0aW9uT2JqLkZPUk1fVik6ICAvKkZBTExUSFJPVUdIIEp1bCAxNywyMDE3IGFkZGVkKi9cclxuICAgICAgICAgICAgICAgIGNhc2Uodm0uZGVzY3JpcHRpb25PYmouQ09OU0VOVF9MVFIpOiAgLypGQUxMVEhST1VHSCBKdWwgMTcsMjAxNyBhZGRlZCovXHJcbiAgICAgICAgICAgICAgICBjYXNlKHZtLmRlc2NyaXB0aW9uT2JqLkRBVEFfUFJPVEVDVF9DT1JSRVNQKTogIC8qRkFMTFRIUk9VR0ggSnVsIDE3LDIwMTcgYWRkZWQqL1xyXG4gICAgICAgICAgICAgICAgY2FzZSh2bS5kZXNjcmlwdGlvbk9iai5TRVFVRU5DRV9DTEVBTlVQKTogICAgIC8vRkFMTFRIUk9VR0hUIEZFQiAxNiwyMDE4XHJcbiAgICAgICAgICAgICAgICAgICAgLy9ub3RoaW5nIHZpc2libGVcclxuICAgICAgICAgICAgICAgICAgICBzZXREZXRhaWxzQXNOb25lKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdm0uc2V0Q29uY2F0RGV0YWlscygpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICAgIGNhc2Uodm0uZGVzY3JpcHRpb25PYmouQ09NTUVOVFNfTk9DKTogICAgICAgICAgICAgLypGQUxMVEhST1VHSCovXHJcbiAgICAgICAgICAgICAgICBjYXNlKHZtLmRlc2NyaXB0aW9uT2JqLkNPTU1FTlRTX1NVTU1BUllfQkFTSVMpOiAgIC8qRkFMTFRIUk9VR0gqL1xyXG4gICAgICAgICAgICAgICAgY2FzZSh2bS5kZXNjcmlwdGlvbk9iai5DT01NRU5UU19SRUdVTEFSVE9SWV9ERUNJU0lPTik6ICAgLypGQUxMVEhST1VHSCovXHJcbiAgICAgICAgICAgICAgICBjYXNlKHZtLmRlc2NyaXB0aW9uT2JqLk1FRVRJTkdfTUlOVVRFUyk6ICAgICAgICAgICAgLypGQUxMVEhST1VHSCovXHJcbiAgICAgICAgICAgICAgICBjYXNlKHZtLmRlc2NyaXB0aW9uT2JqLkFEVklTRU1FTlRfTEVUVEVSX1JFU1BPTlNFKTogICAvKkZBTExUSFJPVUdIKi9cclxuICAgICAgICAgICAgICAgIGNhc2Uodm0uZGVzY3JpcHRpb25PYmouQ0xJTl9DTEFSSUZfUkVTUE9OU0UpOiAgICAgICAgIC8qRkFMTFRIUk9VR0gqL1xyXG4gICAgICAgICAgICAgICAgY2FzZSh2bS5kZXNjcmlwdGlvbk9iai5FTUFJTF9SUV9SRVNQT05TRSk6ICAgICAgICAgICAgLypGQUxMVEhST1VHSCovXHJcbiAgICAgICAgICAgICAgICBjYXNlKHZtLmRlc2NyaXB0aW9uT2JqLkxBQkVMX0NMQVJJRl9SRVNQT05TRSk6ICAgICAgICAvKkZBTExUSFJPVUdIKi9cclxuICAgICAgICAgICAgICAgIGNhc2Uodm0uZGVzY3JpcHRpb25PYmouTUhQRF9SUV9SRVNQT05TRSk6ICAgICAgICAgICAgIC8qRkFMTFRIUk9VR0gqL1xyXG4gICAgICAgICAgICAgICAgY2FzZSh2bS5kZXNjcmlwdGlvbk9iai5OT0NfUkVTUE9OU0UpOiAgICAgICAgICAgICAgICAgIC8qRkFMTFRIUk9VR0gqL1xyXG4gICAgICAgICAgICAgICAgY2FzZSh2bS5kZXNjcmlwdGlvbk9iai5OT0RfUkVTUE9OU0UpOiAgICAgICAgICAgICAgICAgIC8qRkFMTFRIUk9VR0gqL1xyXG4gICAgICAgICAgICAgICAgY2FzZSh2bS5kZXNjcmlwdGlvbk9iai5OT05fUkVTUE9OU0UpOiAgICAgICAgICAgICAgICAgLypGQUxMVEhST1VHSCovXHJcbiAgICAgICAgICAgICAgICBjYXNlKHZtLmRlc2NyaXB0aW9uT2JqLlBST0NFU1NJTkdfQ0xBUklGX1JFU1BPTlNFKTogICAvKkZBTExUSFJPVUdIKi9cclxuICAgICAgICAgICAgICAgIGNhc2Uodm0uZGVzY3JpcHRpb25PYmouUVVBTF9DTElOX0NMQVJJRl9SRVNQT05TRSk6ICAgLypGQUxMVEhST1VHSCovXHJcbiAgICAgICAgICAgICAgICBjYXNlKHZtLmRlc2NyaXB0aW9uT2JqLlFVQUxfQ0xBUklGX1JFU1BPTlNFKTogICAgICAgICAvKkZBTExUSFJPVUdIKi9cclxuICAgICAgICAgICAgICAgIGNhc2Uodm0uZGVzY3JpcHRpb25PYmouU0ROX1JFU1BPTlNFKTogICAgICAgICAgICAgICAgIC8qRkFMTFRIUk9VR0gqL1xyXG4gICAgICAgICAgICAgICAgY2FzZSh2bS5kZXNjcmlwdGlvbk9iai5QSE9ORV9SUV9SRVNQT05TRSk6ICAgICAgICAgLypGQUxMVEhST1VHSCovXHJcbiAgICAgICAgICAgICAgICBjYXNlKHZtLmRlc2NyaXB0aW9uT2JqLkJFX0NMQVJJRl9SRVNQT05TRSk6ICAgICAgICAvKkZBTExUSFJPVUdIKi9cclxuICAgICAgICAgICAgICAgIGNhc2Uodm0uZGVzY3JpcHRpb25PYmouU0NSRUVOSU5HX0FDQ0VQVF9SRVNQT05TRSk6ICAgICAgICAvKkZBTExUSFJPVUdIKi9cclxuICAgICAgICAgICAgICAgIGNhc2Uodm0uZGVzY3JpcHRpb25PYmouU0NSRUVOSU5HX0NMQVJJRl9SRVNQT05TRSk6ICAgICAgICAvKkZBTExUSFJPVUdIKi9cclxuICAgICAgICAgICAgICAgIGNhc2Uodm0uZGVzY3JpcHRpb25PYmouTk9MX1JFU1BPTlNFKTogICAgICAgIC8qRkFMTFRIUk9VR0gqL1xyXG4gICAgICAgICAgICAgICAgY2FzZSh2bS5kZXNjcmlwdGlvbk9iai5DTEFSSUZfUkVTUE9OU0UpOiAgICAgICAgLypGQUxMVEhST1VHSCBKdWx5IDE3LDIwMTcqL1xyXG4gICAgICAgICAgICAgICAgY2FzZSh2bS5kZXNjcmlwdGlvbk9iai5OT05DTElOX0NMQVJJRl9SRVNQT05TRSk6ICAgICAgICAvKkZBTExUSFJPVUdIIEp1bHkgMTcsMjAxNyovXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHNldEFzU3RhcnREYXRlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdm0uc2V0Q29uY2F0RGV0YWlscygpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSh2bS5kZXNjcmlwdGlvbk9iai5STVBfVkVSU0lPTl9EQVRFKTpcclxuICAgICAgICAgICAgICAgICAgICBzZXRWZXJzaW9uQW5kRGF0ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZtLnNldENvbmNhdERldGFpbHMoKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICBjYXNlKHZtLmRlc2NyaXB0aW9uT2JqLkZPUl9QRVJJT0QpOlxyXG4gICAgICAgICAgICAgICAgICAgIHNldEFzRGF0ZVBlcmlvZCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZtLnNldENvbmNhdERldGFpbHMoKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICBjYXNlKHZtLmRlc2NyaXB0aW9uT2JqLlVOU09MSUNJVEVEX0RBVEEpOlxyXG5cclxuICAgICAgICAgICAgICAgICAgICBzZXRBc0Rlc2NyaXB0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdm0uc2V0Q29uY2F0RGV0YWlscygpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICAgIGNhc2Uodm0uZGVzY3JpcHRpb25PYmouWUVBUl9MSVNUX09GX0NIQU5HRSk6XHJcbiAgICAgICAgICAgICAgICAgICAgc2V0QXNEZXNjcmlwdGlvblllYXIoKTtcclxuICAgICAgICAgICAgICAgICAgICB2bS5zZXRDb25jYXREZXRhaWxzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oXCJMaWZlY3ljbGUgRGV0YWlscyBhY3Rpdml0eSBub3QgZm91bmQ6IFwiICsgdmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH07XHJcblxyXG5cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQG5nZG9jIG1ldGhvZCAtc2V0cyB0aGUgZGV0YWlscyBmaWVsZHMgdG8gYWxsIGhpZGRlblxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGZ1bmN0aW9uIHNldEFzRGVzY3JpcHRpb25ZZWFyKCkge1xyXG4gICAgICAgICAgICB2bS5lbmREYXRlVmlzaWJsZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICB2bS5zdGFydERhdGVWaXNpYmxlID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHZtLmRlc2NyaXB0aW9uVmlzaWJsZSA9IHRydWU7XHJcbiAgICAgICAgICAgIHZtLnZlcnNpb25WaXNpYmxlID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHZtLnllYXJWaXNpYmxlID0gdHJ1ZTtcclxuICAgICAgICAgICAgdm0ubGlmZWN5Y2xlTW9kZWwuc3RhcnREYXRlID0gXCJcIjtcclxuICAgICAgICAgICAgdm0ubGlmZWN5Y2xlTW9kZWwuZW5kRGF0ZSA9IFwiXCI7XHJcbiAgICAgICAgICAgIHZtLmxpZmVjeWNsZU1vZGVsLnNlcXVlbmNlVmVyc2lvbiA9IFwiXCI7XHJcbiAgICAgICAgICAgIHZtLmRlc2NyaXB0aW9uTGFiZWwgPSBcIkxJU1RfREVTQ1JJUFRcIjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHNldERldGFpbHNBc05vbmUoKSB7XHJcblxyXG4gICAgICAgICAgICB2bS5lbmREYXRlVmlzaWJsZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICB2bS5zdGFydERhdGVWaXNpYmxlID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHZtLmRlc2NyaXB0aW9uVmlzaWJsZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICB2bS52ZXJzaW9uVmlzaWJsZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICB2bS55ZWFyVmlzaWJsZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICB2bS5saWZlY3ljbGVNb2RlbC55ZWFyID0gXCJcIjtcclxuICAgICAgICAgICAgdm0ubGlmZWN5Y2xlTW9kZWwuc3RhcnREYXRlID0gXCJcIjtcclxuICAgICAgICAgICAgdm0ubGlmZWN5Y2xlTW9kZWwuZW5kRGF0ZSA9IFwiXCI7XHJcbiAgICAgICAgICAgIHZtLmxpZmVjeWNsZU1vZGVsLmRldGFpbHMgPSBcIlwiO1xyXG4gICAgICAgICAgICB2bS5saWZlY3ljbGVNb2RlbC5zZXF1ZW5jZVZlcnNpb24gPSBcIlwiO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gc2V0QXNEZXNjcmlwdGlvbigpIHtcclxuICAgICAgICAgICAgdm0uZW5kRGF0ZVZpc2libGUgPSBmYWxzZTtcclxuICAgICAgICAgICAgdm0uc3RhcnREYXRlVmlzaWJsZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICB2bS5kZXNjcmlwdGlvblZpc2libGUgPSB0cnVlO1xyXG4gICAgICAgICAgICB2bS52ZXJzaW9uVmlzaWJsZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICB2bS55ZWFyVmlzaWJsZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICB2bS5kZXNjcmlwdGlvbkxhYmVsID0gXCJCUklFRl9ERVNDXCI7XHJcbiAgICAgICAgICAgIHZtLmxpZmVjeWNsZU1vZGVsLnllYXIgPSBcIlwiO1xyXG4gICAgICAgICAgICB2bS5saWZlY3ljbGVNb2RlbC5zdGFydERhdGUgPSBcIlwiO1xyXG4gICAgICAgICAgICB2bS5saWZlY3ljbGVNb2RlbC5lbmREYXRlID0gXCJcIjtcclxuICAgICAgICAgICAgdm0ubGlmZWN5Y2xlTW9kZWwuc2VxdWVuY2VWZXJzaW9uID0gXCJcIjtcclxuXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBzZXRBc1N0YXJ0RGF0ZSgpIHtcclxuICAgICAgICAgICAgdm0uZW5kRGF0ZVZpc2libGUgPSBmYWxzZTtcclxuICAgICAgICAgICAgdm0uc3RhcnREYXRlVmlzaWJsZSA9IHRydWU7XHJcbiAgICAgICAgICAgIHZtLnN0YXJ0RGF0ZUxhYmVsID0gXCJEQVRFRFwiO1xyXG4gICAgICAgICAgICB2bS5kZXNjcmlwdGlvblZpc2libGUgPSBmYWxzZTtcclxuICAgICAgICAgICAgdm0udmVyc2lvblZpc2libGUgPSBmYWxzZTtcclxuICAgICAgICAgICAgdm0ueWVhclZpc2libGUgPSBmYWxzZTtcclxuICAgICAgICAgICAgdm0ubGlmZWN5Y2xlTW9kZWwueWVhciA9IFwiXCI7XHJcbiAgICAgICAgICAgIHZtLmxpZmVjeWNsZU1vZGVsLmVuZERhdGUgPSBcIlwiO1xyXG4gICAgICAgICAgICB2bS5saWZlY3ljbGVNb2RlbC5kZXRhaWxzID0gXCJcIjtcclxuICAgICAgICAgICAgdm0ubGlmZWN5Y2xlTW9kZWwuc2VxdWVuY2VWZXJzaW9uID0gXCJcIjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHNldFZlcnNpb25BbmREYXRlKCkge1xyXG4gICAgICAgICAgICB2bS5lbmREYXRlVmlzaWJsZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICB2bS5zdGFydERhdGVWaXNpYmxlID0gdHJ1ZTtcclxuICAgICAgICAgICAgdm0uc3RhcnREYXRlTGFiZWwgPSBcIkRBVEVEXCI7XHJcbiAgICAgICAgICAgIHZtLmRlc2NyaXB0aW9uVmlzaWJsZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICB2bS52ZXJzaW9uVmlzaWJsZSA9IHRydWU7XHJcbiAgICAgICAgICAgIHZtLnllYXJWaXNpYmxlID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHZtLmxpZmVjeWNsZU1vZGVsLnllYXIgPSBcIlwiO1xyXG4gICAgICAgICAgICB2bS5saWZlY3ljbGVNb2RlbC5lbmREYXRlID0gXCJcIjtcclxuICAgICAgICAgICAgdm0ubGlmZWN5Y2xlTW9kZWwuZGV0YWlscyA9IFwiXCI7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBzZXRBc0RhdGVQZXJpb2QoKSB7XHJcblxyXG4gICAgICAgICAgICB2bS5lbmREYXRlVmlzaWJsZSA9IHRydWU7XHJcbiAgICAgICAgICAgIHZtLnN0YXJ0RGF0ZVZpc2libGUgPSB0cnVlO1xyXG4gICAgICAgICAgICB2bS5zdGFydERhdGVMYWJlbCA9IFwiU1RBUlRfREFURVwiO1xyXG4gICAgICAgICAgICB2bS5kZXNjcmlwdGlvblZpc2libGUgPSBmYWxzZTtcclxuICAgICAgICAgICAgdm0udmVyc2lvblZpc2libGUgPSBmYWxzZTtcclxuICAgICAgICAgICAgdm0ueWVhclZpc2libGUgPSBmYWxzZTtcclxuICAgICAgICAgICAgdm0ubGlmZWN5Y2xlTW9kZWwueWVhciA9IFwiXCI7XHJcbiAgICAgICAgICAgIHZtLmxpZmVjeWNsZU1vZGVsLmRldGFpbHMgPSBcIlwiO1xyXG4gICAgICAgICAgICB2bS5saWZlY3ljbGVNb2RlbC5zZXF1ZW5jZVZlcnNpb24gPSBcIlwiO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gc2V0QXNWZXJzaW9uRGVzY3JpcHRpb24oKSB7XHJcbiAgICAgICAgICAgIHZtLmVuZERhdGVWaXNpYmxlID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHZtLnN0YXJ0RGF0ZVZpc2libGUgPSBmYWxzZTtcclxuICAgICAgICAgICAgdm0uZGVzY3JpcHRpb25WaXNpYmxlID0gdHJ1ZTtcclxuICAgICAgICAgICAgdm0udmVyc2lvblZpc2libGUgPSB0cnVlO1xyXG4gICAgICAgICAgICB2bS55ZWFyVmlzaWJsZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICB2bS5saWZlY3ljbGVNb2RlbC55ZWFyID0gXCJcIjtcclxuICAgICAgICAgICAgdm0ubGlmZWN5Y2xlTW9kZWwuc3RhcnREYXRlID0gXCJcIjtcclxuICAgICAgICAgICAgdm0ubGlmZWN5Y2xlTW9kZWwuZW5kRGF0ZSA9IFwiXCI7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2bS5zZXRDb25jYXREZXRhaWxzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgc3RhcnREYXRlID0gXCJcIjtcclxuICAgICAgICAgICAgdmFyIGVuZERhdGUgPSBcIlwiO1xyXG4gICAgICAgICAgICB2YXIgY29uY2F0VGV4dCA9IFwiXCI7XHJcbiAgICAgICAgICAgIC8vdHJhbnNsYXRlIHZhbHVlIHRvIGVuZ2xpc2hcclxuICAgICAgICAgICB2YXIgZW5EZXNjcmlwdGlvbiA9IHRyYW5zbGF0ZVRvRW5nbGlzaCh2bS5saWZlY3ljbGVNb2RlbC5kZXNjcmlwdGlvblZhbHVlKTtcclxuICAgICAgICAgICAgaWYgKHZtLnN0YXJ0RGF0ZVZpc2libGUpIHtcclxuICAgICAgICAgICAgICAgIHN0YXJ0RGF0ZSA9IGNvbnZlcnREYXRlKHZtLmxpZmVjeWNsZU1vZGVsLnN0YXJ0RGF0ZSk7XHJcbiAgICAgICAgICAgICAgICBpZiAodm0udmVyc2lvblZpc2libGUpe1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbmNhdFRleHQgPSBcIiBkYXRlZCBcIiArIHN0YXJ0RGF0ZTtcclxuICAgICAgICAgICAgICAgIH1lbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25jYXRUZXh0ID0gZW5EZXNjcmlwdGlvbiArIFwiIGRhdGVkIFwiICsgc3RhcnREYXRlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh2bS5lbmREYXRlVmlzaWJsZSkge1xyXG5cclxuICAgICAgICAgICAgICAgIGVuZERhdGUgPSBjb252ZXJ0RGF0ZSh2bS5saWZlY3ljbGVNb2RlbC5lbmREYXRlKTtcclxuICAgICAgICAgICAgICAgIGNvbmNhdFRleHQgPSBlbkRlc2NyaXB0aW9uICsgXCIgb2YgXCIgKyBzdGFydERhdGUgKyBcIiB0byBcIiArIGVuZERhdGU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHZtLmRlc2NyaXB0aW9uVmlzaWJsZSAmJiAhdm0ueWVhclZpc2libGUpIHtcclxuXHJcbiAgICAgICAgICAgICAgICBjb25jYXRUZXh0ID0gZW5EZXNjcmlwdGlvbiArIFwiXFxuXCIgKyB2bS5saWZlY3ljbGVNb2RlbC5kZXRhaWxzO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh2bS52ZXJzaW9uVmlzaWJsZSkge1xyXG4gICAgICAgICAgICAgICAgY29uY2F0VGV4dCA9IGVuRGVzY3JpcHRpb24gK1wiIFwiKyB2bS5saWZlY3ljbGVNb2RlbC5zZXF1ZW5jZVZlcnNpb24gKyBjb25jYXRUZXh0O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh2bS55ZWFyVmlzaWJsZSkge1xyXG4gICAgICAgICAgICAgICAgY29uY2F0VGV4dCA9IHZtLmxpZmVjeWNsZU1vZGVsLnllYXIgKyBcIiwgXCIgKyB2bS5saWZlY3ljbGVNb2RlbC5kZXRhaWxzO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICghY29uY2F0VGV4dCkgY29uY2F0VGV4dCA9IGVuRGVzY3JpcHRpb247XHJcbiAgICAgICAgICAgIHZtLmxpZmVjeWNsZU1vZGVsLnNlcXVlbmNlQ29uY2F0ID0gY29uY2F0VGV4dDtcclxuICAgICAgICB9O1xyXG4gICAgICAgIGZ1bmN0aW9uIHRyYW5zbGF0ZVRvRW5nbGlzaChrZXkpIHtcclxuICAgICAgICAgICAgdmFyIHRyYW5zbGF0ZVRleHQgPSBcIlwiO1xyXG4gICAgICAgICAgICAvL25vdGUgdGhpcyBpcyBkb25lIHdoZXRoZXIgbG9hZGVkIG9yIG5vdCBzaG91bGQgYmUgT0tcclxuICAgICAgICAgICAgdHJhbnNsYXRlVGV4dCA9ICR0cmFuc2xhdGUuaW5zdGFudChrZXksIFwiXCIsICcnLCAnZW4nKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRyYW5zbGF0ZVRleHQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBjb252ZXJ0RGF0ZSh2YWx1ZSkge1xyXG5cclxuICAgICAgICAgICAgaWYgKCF2YWx1ZSkgcmV0dXJuIFwiXCI7XHJcbiAgICAgICAgICAgIHZhciBkYXRlID0gbmV3IERhdGUodmFsdWUpO1xyXG4gICAgICAgICAgICB2YXIgbV9uYW1lcyA9IFtcIkphblwiLCBcIkZlYlwiLCBcIk1hclwiLFxyXG4gICAgICAgICAgICAgICAgXCJBcHJcIiwgXCJNYXlcIiwgXCJKdW5cIiwgXCJKdWxcIiwgXCJBdWdcIiwgXCJTZXBcIixcclxuICAgICAgICAgICAgICAgIFwiT2N0XCIsIFwiTm92XCIsIFwiRGVjXCJdO1xyXG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gXCJcIjtcclxuICAgICAgICAgICAgcmVzdWx0ID0gbV9uYW1lc1tkYXRlLmdldE1vbnRoKCldICsgXCIuIFwiICsgZGF0ZS5nZXREYXRlKCkgKyBcIiwgXCIgKyBkYXRlLmdldEZ1bGxZZWFyKCk7XHJcbiAgICAgICAgICAgIHJldHVybiByZXN1bHRcclxuICAgICAgICB9XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogIGNhbGxzIHRoZSBkZWxldGUgZnVuY3Rpb24gb24gdGhlIHBhcmVudFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHZtLmRlbGV0ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdm0ub25EZWxldGUoe2lkOiB2bS5saWZlY3ljbGVNb2RlbC5zZXF1ZW5jZX0pO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgLyogQG5nZG9jIG1ldGhvZCAtZGlzY2FyZHMgdGhlIGNoYW5nZXMgYW5kIHJldmVydHMgdG8gdGhlIG1vZGVsXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKi9cclxuICAgICAgICB2bS5kaXNjYXJkQ2hhbmdlcyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKHZtLmxpZmVjeWNsZURldGFpbHNGb3JtLiRwcmlzdGluZSkgcmV0dXJuO1xyXG4gICAgICAgICAgICBfdXBkYXRlTG9jYWxNb2RlbCh2bS5saWZlY3ljbGVSZWNvcmQpO1xyXG4gICAgICAgICAgICB2bS5saWZlY3ljbGVEZXRhaWxzRm9ybS4kc2V0UHJpc3RpbmUoKTtcclxuICAgICAgICAgICAgdm0uaXNEZXRhaWxWYWxpZCh7c3RhdGU6IHZtLmxpZmVjeWNsZURldGFpbHNGb3JtLiR2YWxpZH0pO1xyXG4gICAgICAgICAgIC8vIHZtLnNhdmVQcmVzc2VkID0gZmFsc2U7XHJcblxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBuZ2RvYyBtZXRob2QgLVVwZGF0ZXMgdGhlIHBhcmVudCBvbiB3aGV0aGVyIHRoaXMgcmVjb3JkIGlzIHZhbGlkIG9yIG5vdCBkZXByZWNhdGVkXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdm0udXBkYXRlVmFsaWQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZtLmlzRGV0YWlsVmFsaWQoe3N0YXRlOiAodm0ubGlmZWN5Y2xlRGV0YWlsc0Zvcm0uJHZhbGlkICYmICF2bS5saWZlY3ljbGVEZXRhaWxzRm9ybS4kZGlydHkpfSk7XHJcbiAgICAgICAgfTtcclxuXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFVwZGF0ZXMgdGhlIGNvbnRhY3QgbW9kZWwgdXNlZCBieSB0aGUgc2F2ZSBidXR0b25cclxuICAgICAgICAgKi9cclxuICAgICAgICB2bS51cGRhdGVMaXZlY3ljbGVNb2RlbCA9IGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgICAgIGlmICh2bS5saWZlY3ljbGVEZXRhaWxzRm9ybS4kdmFsaWQpIHtcclxuICAgICAgICAgICAgICAgIHZtLmlzRGV0YWlsVmFsaWQoe3N0YXRlOiB0cnVlfSk7XHJcbiAgICAgICAgICAgICAgICB2bS5saWZlY3ljbGVEZXRhaWxzRm9ybS4kc2V0UHJpc3RpbmUoKTtcclxuICAgICAgICAgICAgICAgIHZtLm9uVXBkYXRlKHtyZWNvcmQ6IHZtLmxpZmVjeWNsZU1vZGVsfSk7XHJcbiAgICAgICAgICAgIH1lbHNlIHtcclxuICAgICAgICAgICAgICAgIHZtLnNob3dTdW1tYXJ5PXRydWU7XHJcbiAgICAgICAgICAgICAgICB2bS5tYWtlRm9jdXNlZCgpO1xyXG4gICAgICAgICAgICAgICAgdm0udXBkYXRlRXJyb3JTdW1tYXJ5U3RhdGUoKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy92bS5zYXZlUHJlc3NlZCA9IHRydWU7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdm0ubWFrZUZvY3VzZWQ9ZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgdm0uZm9jdXNTdW1tYXJ5PXZtLmZvY3VzU3VtbWFyeSsxO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgZnVuY3Rpb24gY29udmVydFRvRGF0ZSgpIHtcclxuICAgICAgICAgICAgLy9UT0RPIHBhcnNlIHN0cmluZyBhbmQgY29udmVydFxyXG4gICAgICAgICAgICBpZiAodm0ubGlmZWN5Y2xlTW9kZWwuZGF0ZUZpbGVkKSB7XHJcbiAgICAgICAgICAgICAgICB2bS5saWZlY3ljbGVNb2RlbC5kYXRlRmlsZWQgPSBfcGFyc2VEYXRlKHZtLmxpZmVjeWNsZU1vZGVsLmRhdGVGaWxlZClcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodm0ubGlmZWN5Y2xlTW9kZWwuc3RhcnREYXRlKSB7XHJcbiAgICAgICAgICAgICAgICB2bS5saWZlY3ljbGVNb2RlbC5zdGFydERhdGUgPSBfcGFyc2VEYXRlKHZtLmxpZmVjeWNsZU1vZGVsLnN0YXJ0RGF0ZSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodm0ubGlmZWN5Y2xlTW9kZWwuZW5kRGF0ZSkge1xyXG4gICAgICAgICAgICAgICAgdm0ubGlmZWN5Y2xlTW9kZWwuZW5kRGF0ZSA9IF9wYXJzZURhdGUodm0ubGlmZWN5Y2xlTW9kZWwuZW5kRGF0ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIF9wYXJzZURhdGUodmFsdWUpIHtcclxuICAgICAgICAgICAgdmFyIGRhdGVBcnJheSA9IHZhbHVlLnNwbGl0KCctJyk7XHJcbiAgICAgICAgICAgIGlmIChkYXRlQXJyYXkubGVuZ3RoICE9IDMpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoKFwiX3BhcnNlRGF0ZSBlcnJvciBub3QgMyBwYXJ0c1wiKSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgYURhdGUgPSBuZXcgRGF0ZShkYXRlQXJyYXlbMF0sIGRhdGVBcnJheVsxXSAtIDEsIGRhdGVBcnJheVsyXSk7XHJcbiAgICAgICAgICAgIHJldHVybiBhRGF0ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBuZ2RvYyBtZXRob2QgdG9nZ2xlcyBlcnJvciBzdGF0ZSB0byBtYWtlIGVycm9ycyB2aXNpYmxlXHJcbiAgICAgICAgICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdm0uc2hvd0Vycm9yID0gZnVuY3Rpb24gKGN0cmwpIHtcclxuICAgICAgICAgICAgaWYoIWN0cmwpIHJldHVybiBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgIGlmICgoY3RybC4kaW52YWxpZCAmJmN0cmwuJHRvdWNoZWQpIHx8ICh2bS5zaG93U3VtbWFyeSAmJiBjdHJsLiRpbnZhbGlkICkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIChmYWxzZSk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gX2NyZWF0ZVllYXJMaXN0KCkge1xyXG4gICAgICAgICAgICB2YXIgc3RhcnQgPSAxOTgwO1xyXG4gICAgICAgICAgICB2YXIgZW5kID0gKG5ldyBEYXRlKCkpLmdldEZ1bGxZZWFyKCk7XHJcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSBbXTtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDw9IGVuZDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaChcIlwiICsgaSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gKHJlc3VsdCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBPcGVuIHRoZSBpbnN0cnVjdGlvbiBhbGVydHNcclxuICAgICAgICAgKiBAcGFyYW0gdmFsdWVcclxuICAgICAgICAgKi9cclxuICAgICAgICB2bS5hZGRJbnN0cnVjdCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG5cclxuICAgICAgICAgICAgaWYgKGFuZ3VsYXIuaXNVbmRlZmluZWQodmFsdWUpKSByZXR1cm47XHJcbiAgICAgICAgICAgIGlmICh2YWx1ZSA8IHZtLmFsZXJ0cy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIHZtLmFsZXJ0c1t2YWx1ZV0gPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQ2xvc2UgdGhlIGluc3RydWN0aW9uIGFsZXJ0c1xyXG4gICAgICAgICAqIEBwYXJhbSB2YWx1ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHZtLmNsb3NlQWxlcnQgPSBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgaWYgKGFuZ3VsYXIuaXNVbmRlZmluZWQodmFsdWUpKSByZXR1cm47XHJcbiAgICAgICAgICAgIGlmICh2YWx1ZSA8IHZtLmFsZXJ0cy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIHZtLmFsZXJ0c1t2YWx1ZV0gPSBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIF9zZXRJZE5hbWVzKCl7XHJcbiAgICAgICAgICAgIHZhciBzY29wZUlkID0gXCJfXCIgKyAkc2NvcGUuJGlkO1xyXG4gICAgICAgICAgICB2bS5saWZlY3ljbGVEZXRhaWxzRm9ybUlkPVwibGlmZV9kZXRhaWxfZm9ybVwiICsgc2NvcGVJZDtcclxuICAgICAgICAgICAgdm0uZGF0ZVN1YklkPVwiZGF0ZV9zdWJtaXR0ZWRcIitzY29wZUlkO1xyXG4gICAgICAgICAgICB2bS5jb250cm9sTnVtSWQ9XCJjb250cm9sX251bVwiK3Njb3BlSWQ7XHJcbiAgICAgICAgICAgIHZtLnJlZ0FjdGl2aXR5SWQ9XCJyZWdfYWN0aXZpdHlfdHlwZVwiK3Njb3BlSWQ7XHJcbiAgICAgICAgICAgIHZtLnNlcURlc2NyaXB0SWQ9XCJzZXF1ZW5jZV90eXBlXCIrc2NvcGVJZDtcclxuICAgICAgICAgICAgdm0uc3RhcnREYXRlSWQ9XCJzdGFydF9kYXRlXCIrc2NvcGVJZDtcclxuICAgICAgICAgICAgdm0uZW5kRGF0ZUlkPVwiZW5kX2RhdGVcIitzY29wZUlkO1xyXG4gICAgICAgICAgICB2bS55ZWFySWQ9XCJ5ZWFyX2NoYW5nZVwiK3Njb3BlSWQ7XHJcbiAgICAgICAgICAgIHZtLmRlc2NyaXB0SWQ9XCJicmllZl9kZXNjXCIrc2NvcGVJZDtcclxuICAgICAgICAgICAgdm0udmVyc2lvbklkPVwidmVyc2lvbl9ub1wiK3Njb3BlSWQ7XHJcbiAgICAgICAgICAgIHZtLmFjdGl2aXR5TGVhZElkID0gXCJhY3Rpdml0eV9sZWFkXCIgKyBzY29wZUlkO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICB9XHJcbn0pKCk7IiwiLyoqXHJcbiAqIENyZWF0ZWQgYnkgQWJkZXNzYW1hZCBvbiA3LzUvMjAxNi5cclxuICovXHJcblxyXG4oZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKCdsaWZlY3ljbGVMaXN0JywgWydmaWx0ZXJMaXN0cycsICdsY0RldGFpbHNNb2R1bGUnLCAnZXhwYW5kaW5nVGFibGUnXSlcclxufSkoKTtcclxuXHJcbihmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ2xpZmVjeWNsZUxpc3QnKVxyXG4gICAgICAgIC5jb21wb25lbnQoJ2NtcExpZmVjeWNsZUxpc3QnLCB7XHJcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnYXBwL3NjcmlwdHMvY29tcG9uZW50cy9saWZlY3ljbGVMaXN0L3RwbC1saWZlY3ljbGUtbGlzdF8yMDE5MDMyMl8xNTQ0Lmh0bWwnLFxyXG4gICAgICAgICAgICBiaW5kaW5nczoge1xyXG4gICAgICAgICAgICAgICAgcmVjb3JkczogJzwnLFxyXG4gICAgICAgICAgICAgICAgb25VcGRhdGU6ICcmJyxcclxuICAgICAgICAgICAgICAgIGlzQW1lbmQ6ICcmJyxcclxuICAgICAgICAgICAgICAgIGlzRmluYWw6ICc8JyxcclxuICAgICAgICAgICAgICAgIGdldE5ld1RyYW5zYWN0aW9uOiAnJicsXHJcbiAgICAgICAgICAgICAgICBzZXRTZXF1ZW5jZVZhbHVlOicmJyxcclxuICAgICAgICAgICAgICAgIGRlcHJlY2F0ZVNlcXVlbmNlOiAnJicsIC8vYml0IG9mIGEgaGFja1xyXG4gICAgICAgICAgICAgICAgc2hvd0Vycm9yU3VtbWFyeTogJzwnLFxyXG4gICAgICAgICAgICAgICAgaXNFY3RkOiAnPCcsXHJcbiAgICAgICAgICAgICAgICBwYXJlbnREaXJ0eTogJzwnLFxyXG4gICAgICAgICAgICAgICAgc2VxdWVuY2VVcGRhdGVkOic8JyxcclxuICAgICAgICAgICAgICAgIGdldEN1cnJlbnRTZXF1ZW5jZTonJidcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgY29udHJvbGxlcjogbGlmZWN5Y2xlTGlzdEN0cmwsXHJcbiAgICAgICAgICAgIGNvbnRyb2xsZXJBczogJ2xpZmVMaXN0Q3RybCdcclxuICAgICAgICB9KTtcclxuXHJcbiAgICBsaWZlY3ljbGVMaXN0Q3RybC4kaW5qZWN0ID0gWyckZmlsdGVyJywgJ1RyYW5zYWN0aW9uTGlzdHMnXTtcclxuXHJcbiAgICBmdW5jdGlvbiBsaWZlY3ljbGVMaXN0Q3RybCgkZmlsdGVyLCBUcmFuc2FjdGlvbkxpc3RzKSB7XHJcblxyXG4gICAgICAgIHZhciB2bSA9IHRoaXM7XHJcbiAgICAgICAgdm0uc2VsZWN0UmVjb3JkID0gLTE7IC8vdGhlIHJlY29yZCB0byBzZWxlY3QsIGluaXRpYWxseSBzZWxlY3Qgbm9uXHJcbiAgICAgICAgdm0uaXNEZXRhaWxzVmFsaWQgPSB0cnVlOyAvL3VzZWQgdG8gdHJhY2sgaWYgZGV0YWlscyB2YWxpZC4gSWYgdGhleSBhcmUgIG5vdCBkbyBub3QgYWxsb3cgZXhwYW5kZXIgY29sbGFwc2VcclxuICAgICAgICB2bS5saWZlY3ljbGVMaXN0ID0gW107XHJcbiAgICAgICAgdm0uc2V0Q29sbGFwc2VkID0gMDtcclxuICAgICAgICB2bS5kZWxldGFibGVJbmRleCA9IDA7XHJcbiAgICAgICAgdm0ub25lUmVjb3JkID0gXCJcIjtcclxuICAgICAgICB2bS5lY3RkVmFsdWUgPSBmYWxzZTtcclxuICAgICAgICB2bS5pc1BhcmVudERpcnR5ID0gZmFsc2U7XHJcbiAgICAgICAgdm0uYWRkRm9jdXNlZCA9IGZhbHNlO1xyXG4gICAgICAgIHZtLnJlc2V0Q29sbGFwc2VkID0gZmFsc2U7XHJcbiAgICAgICAgdm0uYWN0aXZpdHlUeXBlcyA9IFtdO1xyXG4gICAgICAgIHZtLnN0YXJ0aW5nU2VxdWVuY2UgPSAwO1xyXG4gICAgICAgIHZtLnNlcVVwZGF0ZWQgPSBmYWxzZTtcclxuICAgICAgICB2bS5zaG93U3VtbWFyeSA9IGZhbHNlO1xyXG4gICAgICAgIHZtLmZpbmFsU3RhdGUgPSBmYWxzZTtcclxuICAgICAgICB2bS5maW5hbFJlY051bSA9IDA7XHJcbiAgICAgICAgdm0uY29sdW1uRGVmID0gW1xyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBsYWJlbDogXCJDT05UUk9MX05VTUJFUlwiLFxyXG4gICAgICAgICAgICAgICAgYmluZGluZzogXCJjb250cm9sTnVtYmVyXCIsXHJcbiAgICAgICAgICAgICAgICB3aWR0aDogXCI4XCJcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbGFiZWw6IFwiQUNUSVZJVFlfTEVBRFwiLFxyXG4gICAgICAgICAgICAgICAgYmluZGluZzogXCJhY3Rpdml0eUxlYWRcIixcclxuICAgICAgICAgICAgICAgIHdpZHRoOiBcIjEyXCJcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbGFiZWw6IFwiUkVHX0FDVElWSVRZX1RZUEVcIixcclxuICAgICAgICAgICAgICAgIGJpbmRpbmc6IFwiYWN0aXZpdHlUeXBlRGlzcGxheVwiLFxyXG4gICAgICAgICAgICAgICAgd2lkdGg6IFwiMzBcIlxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBsYWJlbDogXCJTRVFVRU5DRV9UWVBFXCIsXHJcbiAgICAgICAgICAgICAgICBiaW5kaW5nOiBcInNlcXVlbmNlQ29uY2F0XCIsXHJcbiAgICAgICAgICAgICAgICB3aWR0aDogXCI0OFwiXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICBdO1xyXG5cclxuICAgICAgICB2bS4kb25Jbml0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAvL2xvY2FsIHZhciBmcm9tIGJpbmRpbmdcclxuICAgICAgICAgICAgdm0uYWN0aXZpdHlUeXBlcz0gVHJhbnNhY3Rpb25MaXN0cy5nZXRBY3Rpdml0eVR5cGVzKCk7XHJcbiAgICAgICAgICAgIHZtLnNlbGVjdFJlY29yZCA9IC0xO1xyXG4gICAgICAgICAgICB2bS5hZGRGb2N1c2VkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHZtLnN0YXJ0aW5nU2VxdWVuY2U9MDtcclxuXHJcbiAgICAgICAgfTtcclxuXHJcblxyXG4gICAgICAgIHZtLiRvbkNoYW5nZXMgPSBmdW5jdGlvbiAoY2hhbmdlcykge1xyXG5cclxuICAgICAgICAgICAgaWYgKGNoYW5nZXMucmVjb3Jkcykge1xyXG4gICAgICAgICAgICAgICAgdm0ubGlmZWN5Y2xlTGlzdCA9IGNoYW5nZXMucmVjb3Jkcy5jdXJyZW50VmFsdWU7XHJcbiAgICAgICAgICAgICAgICB2bS5pc0RldGFpbHNWYWxpZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB2bS51cGRhdGVFcnJvclN0YXRlKCk7XHJcbiAgICAgICAgICAgICAgICB2bS5zdGFydGluZ1NlcXVlbmNlPTA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGNoYW5nZXMucGFyZW50RGlydHkpIHtcclxuICAgICAgICAgICAgICAgIHZtLmlzUGFyZW50RGlydHkgPSBjaGFuZ2VzLnBhcmVudERpcnR5LmN1cnJlbnRWYWx1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoY2hhbmdlcy5pc0VjdGQpIHtcclxuICAgICAgICAgICAgICAgIHZtLmVjdGRWYWx1ZSA9IGNoYW5nZXMuaXNFY3RkLmN1cnJlbnRWYWx1ZTtcclxuICAgICAgICAgICAgICAgIC8vdXBkYXRlIHRoZSBmaXJzdCByZWNvcmRcclxuICAgICAgICAgICAgICAgIF9jaGVja0ZpcnN0UmVjb3JkKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYoY2hhbmdlcy5zZXF1ZW5jZVVwZGF0ZWQpe1xyXG4gICAgICAgICAgICAgICAgdm0uc2VxVXBkYXRlZD1jaGFuZ2VzLnNlcXVlbmNlVXBkYXRlZC5jdXJyZW50VmFsdWU7XHJcbiAgICAgICAgICAgICAgICAvL3ZtLnN0YXJ0aW5nU2VxdWVuY2U9dm0uZ2V0Q3VycmVudFNlcXVlbmNlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYoY2hhbmdlcy5zaG93RXJyb3JTdW1tYXJ5KXtcclxuICAgICAgICAgICAgICAgIHZtLnNob3dTdW1tYXJ5PWNoYW5nZXMuc2hvd0Vycm9yU3VtbWFyeS5jdXJyZW50VmFsdWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYoY2hhbmdlcy5pc0ZpbmFsKXtcclxuICAgICAgICAgICAgICAgIHZtLmZpbmFsU3RhdGUgPSBjaGFuZ2VzLmlzRmluYWwuY3VycmVudFZhbHVlO1xyXG4gICAgICAgICAgICAgICAgdm0uZmluYWxSZWNOdW0gPSAwO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcblxyXG4gICAgICAgIHZtLmRlbGV0ZVJlY29yZCA9IGZ1bmN0aW9uIChhSUQpIHtcclxuICAgICAgICAgICAgdmFyIGlkeCA9IHZtLmxpZmVjeWNsZUxpc3QuaW5kZXhPZihcclxuICAgICAgICAgICAgICAgICRmaWx0ZXIoJ2ZpbHRlcicpKHZtLmxpZmVjeWNsZUxpc3QsIHtzZXF1ZW5jZTogYUlEfSwgdHJ1ZSlbMF0pO1xyXG4gICAgICAgICAgICB2bS5saWZlY3ljbGVMaXN0LnNwbGljZShpZHgsIDEpO1xyXG4gICAgICAgICAgICB2bS5vblVwZGF0ZSh7bmV3TGlzdDogdm0ubGlmZWN5Y2xlTGlzdH0pO1xyXG4gICAgICAgICAgICB2bS5zZWxlY3RSZWNvcmQgPSAtMTtcclxuICAgICAgICAgICAgdm0uaXNEZXRhaWxzVmFsaWQgPSB0cnVlOyAvL2Nhc2UgdGhhdCBpbmNvbXBsZXRlIHJlY29yZCBpcyBkZWxldGVkXHJcbiAgICAgICAgICAgIHZtLmRlcHJlY2F0ZVNlcXVlbmNlKCk7XHJcbiAgICAgICAgICAgIHZtLnVwZGF0ZUVycm9yU3RhdGUoKTtcclxuICAgICAgICAgICAgdm0ucmVzZXRDb2xsYXBzZWQgPSAhdm0ucmVzZXRDb2xsYXBzZWQ7XHJcbiAgICAgICAgICAgIHZtLmFkZEZvY3VzZWQgPSBmYWxzZTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAbmdkb2MgQ2hlY2tzIHRvIHNlZSBpZiBmaXJzdCByZWNvcmQgY29tcGxpZXMgdG8gZUNURCBvciBub3RcclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGZ1bmN0aW9uIF9jaGVja0ZpcnN0UmVjb3JkKCkge1xyXG4gICAgICAgICAgICBpZiAoIXZtLmxpZmVjeWNsZUxpc3QgfHwgdm0ubGlmZWN5Y2xlTGlzdC5sZW5ndGggPT09IDBcclxuICAgICAgICAgICAgICAgIHx8IHZtLmxpZmVjeWNsZUxpc3QubGVuZ3RoID4gMSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciByZWNvcmQgPSBhbmd1bGFyLmNvcHkodm0ubGlmZWN5Y2xlTGlzdFswXSk7XHJcbiAgICAgICAgICAgIGlmICghdm0uZWN0ZFZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICByZWNvcmQuc2VxdWVuY2UgPSBcIlwiO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAvL1RPRE8gY2FsbCBzZXJ2aWNlP1xyXG4gICAgICAgICAgICAgICAgdmFyIHNlcVRleHQgPSBcIlwiICsgdm0uc3RhcnRpbmdTZXF1ZW5jZTtcclxuICAgICAgICAgICAgICAgIHZhciBwYWQgPSA0IC0gc2VxVGV4dC5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICB2YXIgcGFkVGV4dCA9IFwiXCI7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBhZDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcGFkVGV4dCA9IHBhZFRleHQgKyBcIjBcIjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHNlcVRleHQgPSBwYWRUZXh0ICsgc2VxVGV4dDtcclxuICAgICAgICAgICAgICAgIHJlY29yZC5zZXF1ZW5jZSA9ICBzZXFUZXh0O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZtLmxpZmVjeWNsZUxpc3RbMF0gPSByZWNvcmQ7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVXNlY2QgdG8gZGV0ZXJtaW5lIGlmIGEgcmVjb3JkIGNhbiBiZSBkZWxldGVkLiBPbmx5IGFsbG93aW5nIHRoZSBsYXN0IHJlY29yZCB0byBiZSBkZWxldGVkXHJcbiAgICAgICAgICogQHJldHVybnMge251bWJlcn1cclxuICAgICAgICAgKi9cclxuICAgICAgICB2bS5sYXN0UmVjb3JkU2VxdWVuY2UgPSBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdm0uZ2V0Q3VycmVudFNlcXVlbmNlKCktMTtcclxuXHJcbiAgICAgICAgfTtcclxuICAgICAgICB2bS51cGRhdGVFcnJvclN0YXRlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAoIXZtLmxpZmVjeWNsZUxpc3QgfHwgdm0ubGlmZWN5Y2xlTGlzdC5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgICAgIHZtLm9uZVJlY29yZCA9IFwiXCI7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZtLmxpZmVjeWNsZUxpc3QubGVuZ3RoOyBpKysgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZtLmxpZmVjeWNsZUxpc3RbaV0uaXNTYXZlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2bS5vbmVSZWNvcmQgPSBcImlzIHZhbHVlXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB2bS5vbmVSZWNvcmQgPSBcIlwiO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdm0uYWRkVHJhbnNhY3Rpb24gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBkZWZhdWx0VHJhbnNhY3Rpb24gPSB2bS5nZXROZXdUcmFuc2FjdGlvbigpO1xyXG4gICAgICAgICAgICB2bS5saWZlY3ljbGVMaXN0LnVuc2hpZnQoZGVmYXVsdFRyYW5zYWN0aW9uKTsgLy9hZGQgdG8gdG9wXHJcbiAgICAgICAgICAgIHZtLnJlc2V0Q29sbGFwc2VkID0gIXZtLnJlc2V0Q29sbGFwc2VkO1xyXG4gICAgICAgICAgICB2bS5zZWxlY3RSZWNvcmQgPSAwOyAvL25lZWQgdG8gZ2VuZXJhdGUgYSBjaGFuZ2VcclxuICAgICAgICAgICAgaWYodm0uZmluYWxTdGF0ZSkge1xyXG4gICAgICAgICAgICAgICB2bS5maW5hbFJlY051bSsrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZtLmFkZEZvY3VzZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgdm0uc2V0VmFsaWQoZmFsc2UpO1xyXG4gICAgICAgICAgICB2bS51cGRhdGVFcnJvclN0YXRlKCk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICB2bS5zZXRTdGFydGluZ1NlcXVlbmNlPWZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgIGlmKGlzTmFOKHZtLnN0YXJ0aW5nU2VxdWVuY2UpIHx8dm0uc3RhcnRpbmdTZXF1ZW5jZSA9PT0gbnVsbCl7XHJcbiAgICAgICAgICAgICAgICB2bS5zdGFydGluZ1NlcXVlbmNlPTA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdm0uc2V0U2VxdWVuY2VWYWx1ZSh7c3RhcnQ6dm0uc3RhcnRpbmdTZXF1ZW5jZX0pO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZtLmlzU2VsZWN0ZWRSZWNvcmQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAodm0uc2VsZWN0UmVjb3JkID09PSAwICk7XHJcblxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZtLmlzQWRkRGlzYWJsZWQgPSBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgICAgICBpZiggdm0ubGlmZWN5Y2xlTGlzdC5sZW5ndGggPiAwIClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIC8qKiAgICBjb25zb2xlLmxvZyggdm0uZmluYWxTdGF0ZSApO1xyXG4gICAgICAgICAgIGlmKCB2bS5maW5hbFN0YXRlKVxyXG4gICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgdm0ubGlmZWN5Y2xlTGlzdCA9IFtdO1xyXG4gICAgICAgICAgICAgICB2bS5saWZlY3ljbGVMaXN0Lmxlbmd0aCA9IDA7XHJcbiAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICB9XHJcbiAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgaWYoIHZtLmxpZmVjeWNsZUxpc3QubGVuZ3RoID4gMCApXHJcbiAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgfVxyXG4gICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgKiovXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdm0uc2V0VmFsaWQgPSBmdW5jdGlvbiAoZGV0YWlsVmFsaWQpIHtcclxuICAgICAgICAgICAgdm0uaXNEZXRhaWxzVmFsaWQgPSBkZXRhaWxWYWxpZDtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2bS5vblVwZGF0ZUxpZmVjeWNsZVJlY29yZCA9IGZ1bmN0aW9uIChyZWNvcmQpIHtcclxuICAgICAgICAgICAgdmFyIGlkeCA9IHZtLmxpZmVjeWNsZUxpc3QuaW5kZXhPZihcclxuICAgICAgICAgICAgICAgICRmaWx0ZXIoJ2ZpbHRlcicpKHZtLmxpZmVjeWNsZUxpc3QsIHtzZXF1ZW5jZTogcmVjb3JkLnNlcXVlbmNlfSwgdHJ1ZSlbMF1cclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgcmVjb3JkLmRhdGVGaWxlZCA9IGNvbnZlcnREYXRlKHJlY29yZC5kYXRlRmlsZWQpO1xyXG4gICAgICAgICAgICByZWNvcmQuc3RhcnREYXRlID0gY29udmVydERhdGUocmVjb3JkLnN0YXJ0RGF0ZSk7XHJcbiAgICAgICAgICAgIHJlY29yZC5lbmREYXRlID0gY29udmVydERhdGUocmVjb3JkLmVuZERhdGUpO1xyXG4gICAgICAgICAgICByZWNvcmQuaXNTYXZlZCA9IHRydWU7XHJcbiAgICAgICAgICAgIHZtLmxpZmVjeWNsZUxpc3RbaWR4XSA9IGFuZ3VsYXIuY29weShyZWNvcmQpO1xyXG4gICAgICAgICAgICB2bS5zZXRWYWxpZCh0cnVlKTtcclxuICAgICAgICAgICAgdm0uc2VsZWN0UmVjb3JkID0gLTE7XHJcbiAgICAgICAgICAgIHZtLnJlc2V0Q29sbGFwc2VkID0gIXZtLnJlc2V0Q29sbGFwc2VkO1xyXG4gICAgICAgICAgICB2bS5hZGRGb2N1c2VkID0gdHJ1ZTtcclxuICAgICAgICAgICAgdm0udXBkYXRlRXJyb3JTdGF0ZSgpO1xyXG5cclxuICAgICAgICB9O1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBuZ2RvYyBtZXRob2QgZGV0ZXJtaW5lcyB0aGUgc3RhdGUgb2YgdGhlIGxpc3QgZXJyb3JzXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuICAgICAgICAgKi9cclxuICAgICAgLyogIHZtLnNob3dFcnJvciA9IGZ1bmN0aW9uIChpc1RvdWNoZWQsIGlzSW52YWxpZCkge1xyXG5cclxuICAgICAgICAgICAgaWYgKCh2bS5pc1BhcmVudERpcnR5ICYmIGlzSW52YWxpZCkgfHwgKHZtLnNob3dFcnJvcnMoKSAmJiBpc0ludmFsaWQpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZVxyXG4gICAgICAgIH07Ki9cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBDb252ZXJ0cyBkYXRlIHRvIEhDIHN0YW5kYXJkIFRPRDA6IHJlcGxhY2Ugd2l0aCBmaWx0ZXI/XHJcbiAgICAgICAgICogQHBhcmFtIHZhbHVlXHJcbiAgICAgICAgICogQHJldHVybnMgeyp9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZnVuY3Rpb24gY29udmVydERhdGUodmFsdWUpIHtcclxuICAgICAgICAgICAgaWYgKCF2YWx1ZSkgcmV0dXJuIHZhbHVlO1xyXG4gICAgICAgICAgICB2YXIgYURhdGUgPSBuZXcgRGF0ZSh2YWx1ZSk7XHJcbiAgICAgICAgICAgIHZhciBtb250aCA9ICsoYURhdGUuZ2V0TW9udGgoKSArIDEpO1xyXG4gICAgICAgICAgICBpZiAobW9udGggPCAxMCkge1xyXG4gICAgICAgICAgICAgICAgbW9udGggPSAnMCcgKyBtb250aDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgZGF5ID0gYURhdGUuZ2V0RGF0ZSgpO1xyXG4gICAgICAgICAgICBpZiAoZGF5IDwgMTApIHtcclxuICAgICAgICAgICAgICAgIGRheSA9ICcwJyArIGRheTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gYURhdGUuZ2V0RnVsbFllYXIoKSArICctJyArIG1vbnRoICsgJy0nICsgZGF5O1xyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICB9XHJcbn0pKCk7IiwiLyoqXHJcbiAqIENyZWF0ZWQgYnkgc3RldmVaaGFvIG9uIDA1LzI1LzIwMTguXHJcbiAqL1xyXG5cclxuKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgncmVxdWVzdGVyUmVjb3JkTW9kdWxlJyxcclxuICAgICAgICAgICAgWyAgICd1aS5zZWxlY3QnLFxyXG4gICAgICAgICAgICAgICAgJ2hwZmJDb25zdGFudHMnLFxyXG4gICAgICAgICAgICAgICAgJ2Vycm9yTWVzc2FnZU1vZHVsZSdcclxuICAgICAgICAgICAgXSlcclxufSkoKTtcclxuXHJcbihmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ3JlcXVlc3RlclJlY29yZE1vZHVsZScpXHJcbiAgICAgICAgLmNvbmZpZyhmdW5jdGlvbiAodWlTZWxlY3RDb25maWcpIHtcclxuICAgICAgICAgICAgLy9jaG9pY2VzOiBzZWxlY3QyLCBib290c3RyYXAsIHNlbGVjdGl6ZVxyXG4gICAgICAgICAgICB1aVNlbGVjdENvbmZpZy50aGVtZSA9ICdzZWxlY3QyJztcclxuICAgICAgICB9KVxyXG4gICAgICAgIC5jb21wb25lbnQoJ2NtcFJlcXVlc3RlclJlY29yZCcsIHtcclxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdhcHAvc2NyaXB0cy9jb21wb25lbnRzL3JlcXVlc3RlclJlY29yZC90cGwtcmVxdWVzdGVyLXJlY29yZF8yMDE5MDMyMl8xNTQ0Lmh0bWwnLFxyXG4gICAgICAgICAgICBjb250cm9sbGVyOiByZXF1ZXN0ZXJSZWNvcmRDb250cm9sbGVyLFxyXG4gICAgICAgICAgICBjb250cm9sbGVyQXM6J3JlcXVlc3RlclJlY0N0cmwnLFxyXG4gICAgICAgICAgICBiaW5kaW5nczoge1xyXG4gICAgICAgICAgICAgICAgcmVjb3JkOiAnPCcsXHJcbiAgICAgICAgICAgICAgICBvbkRlbGV0ZTogJyYnLFxyXG4gICAgICAgICAgICAgICAgc2hvd0Vycm9yczogJzwnLFxyXG4gICAgICAgICAgICAgICAgcmVxdWVzdGVyTGlzdDonPCdcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgIHJlcXVlc3RlclJlY29yZENvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywgJyR0cmFuc2xhdGUnXTtcclxuICAgIGZ1bmN0aW9uIHJlcXVlc3RlclJlY29yZENvbnRyb2xsZXIoJHNjb3BlLCAkdHJhbnNsYXRlKSB7XHJcbiAgICAgICAgdmFyIHZtID0gdGhpcztcclxuXHJcbiAgICAgICAgdm0ubW9kZWwgPSB7XCJzZXF1ZW5jZU51bWJlclwiOiBcIlwiLCBcInNvbGljaXRlZFJlcXVlc3RlclwiOiBcIlwiLCBcIm90aGVyUmVxdWVzdGVyRGV0YWlsc1wiOlwiXCIsIGRpc3BsYXk6IFwiXCJ9O1xyXG4gICAgICAgIHZtLmxhbmcgPSAkdHJhbnNsYXRlLnByb3Bvc2VkTGFuZ3VhZ2UoKSB8fCAkdHJhbnNsYXRlLnVzZSgpO1xyXG4gICAgICAgIHZtLnNob3dEZXRhaWxFcnJvcnM9ZmFsc2U7XHJcbiAgICAgICAgdm0ucmVxdWlyZWRPbmx5ID0gW3t0eXBlOiBcInJlcXVpcmVkXCIsIGRpc3BsYXlBbGlhczogXCJNU0dfRVJSX01BTkRcIn1dO1xyXG5cclxuICAgICAgICB2bS4kb25Jbml0ID0gZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgdm0uc2hvd0RldGFpbEVycm9ycz1mYWxzZTtcclxuICAgICAgICAgICAgX3NldElkTmFtZXMoKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2bS4kb25DaGFuZ2VzID0gZnVuY3Rpb24gKGNoYW5nZXMpIHtcclxuICAgICAgICAgIC8qICBpZihjaGFuZ2VzLnJlcXVlc3Rlckxpc3Qpe1xyXG4gICAgICAgICAgICAgICAgdm0ucmVxdWVzdGVycyA9IGNoYW5nZXMucmVxdWVzdGVyTGlzdC5jdXJyZW50VmFsdWU7XHJcbiAgICAgICAgICAgfSAqL1xyXG4gICAgICAgICAgICBpZiAoY2hhbmdlcy5yZWNvcmQgJiYgY2hhbmdlcy5yZWNvcmQuY3VycmVudFZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICB2bS5tb2RlbCA9IGNoYW5nZXMucmVjb3JkLmN1cnJlbnRWYWx1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZihjaGFuZ2VzLnNob3dFcnJvcnMpe1xyXG4gICAgICAgICAgICAgICAgdm0uc2hvd0RldGFpbEVycm9ycz1jaGFuZ2VzLnNob3dFcnJvcnMuY3VycmVudFZhbHVlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZtLmRlbGV0ZVJlY29yZCA9IGZ1bmN0aW9uKCkgIHtcclxuICAgICAgICAgICAgdm0ub25EZWxldGUoe2lkOiB2bS5tb2RlbC5zZXF1ZW5jZU51bWJlcn0pXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdm0uc2hvd0Vycm9yID0gZnVuY3Rpb24gKGN0cmwpIHtcclxuICAgICAgICAgICAgaWYoIWN0cmwpIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgcmV0dXJuICgoY3RybC4kaW52YWxpZCAmJiBjdHJsLiR0b3VjaGVkKSB8fCAoY3RybC4kaW52YWxpZCAmJiB2bS5zaG93RGV0YWlsRXJyb3JzKSApXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gX3NldElkTmFtZXMoKSB7XHJcbiAgICAgICAgICAgIHZhciBzY29wZUlkID0gXCJfXCIgKyAkc2NvcGUuJGlkO1xyXG4gICAgICAgICAgICB2bS5zb2xpY3RlZFJxSWQ9XCJzb2xpY2l0ZWRfcnFcIitzY29wZUlkO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSkoKTsiLCIvKipcclxuICogQ3JlYXRlZCBieSBTdGV2ZVpoYW8gb24gNS8yNS8yMDE4LlxyXG4gKi9cclxuKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgncmVxdWVzdGVyTGlzdE1vZHVsZScsIFsnZGF0YUxpc3RzJywgJ3JlcXVlc3RlclJlY29yZE1vZHVsZScsICd1aS5zZWxlY3QnLCAnaHBmYkNvbnN0YW50cyddKVxyXG59KSgpO1xyXG5cclxuKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgncmVxdWVzdGVyTGlzdE1vZHVsZScpXHJcbiAgICAgICAgLmNvbXBvbmVudCgnY21wUmVxdWVzdGVyTGlzdCcsIHtcclxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdhcHAvc2NyaXB0cy9jb21wb25lbnRzL3JlcXVlc3Rlckxpc3QvdHBsLXJlcXVlc3Rlci1saXN0XzIwMTkwMzIyXzE1NDQuaHRtbCcsXHJcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6IHJlcXVlc3Rlckxpc3RDb250cm9sbGVyLFxyXG4gICAgICAgICAgICBjb250cm9sbGVyQXM6ICdyZXF1ZXN0ZXJMaXN0Q3RybCcsXHJcbiAgICAgICAgICAgIGJpbmRpbmdzOiB7XHJcbiAgICAgICAgICAgICAgICBsaXN0SXRlbXM6ICc8JyxcclxuICAgICAgICAgICAgICAgIG9uVXBkYXRlOiAnJicsXHJcbiAgICAgICAgICAgICAgICBvbkRlbGV0ZTogJyYnLFxyXG4gICAgICAgICAgICAgICAgc2hvd0Vycm9yczonPCcsXHJcbiAgICAgICAgICAgICAgICB1cGRhdGVFcnJvclN1bW1hcnk6JyYnXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICByZXF1ZXN0ZXJMaXN0Q29udHJvbGxlci4kaW5qZWN0ID0gWyckZmlsdGVyJywgJ2dldENvbnRhY3RMaXN0cycsICckc2NvcGUnXTtcclxuXHJcbiAgICBmdW5jdGlvbiByZXF1ZXN0ZXJMaXN0Q29udHJvbGxlcigkZmlsdGVyLCBnZXRDb250YWN0TGlzdHMsICRzY29wZSkge1xyXG4gICAgICAgIHZhciB2bSA9IHRoaXM7XHJcbiAgICAgICAgdm0uYmFzZVJlcXVlc3RlcnMgPSBbXTtcclxuICAgICAgICB2bS5tb2RlbCA9IHt9O1xyXG4gICAgICAgIHZtLmlzRGV0YWlsVmFsaWQgPSB0cnVlO1xyXG4gICAgICAgIHZtLnJlc2V0VG9Db2xsYXBzZWQgPSB0cnVlO1xyXG4gICAgICAgIHZtLnNob3dEZXRhaWxFcnJvcnM9ZmFsc2U7XHJcbiAgICAgICAgdm0uc2VsZWN0UmVjb3JkID0gLTE7XHJcbiAgICAgICAgdm0uY29sdW1uRGVmID0gW1xyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBsYWJlbDogXCJSZXF1ZXN0ZXIgTmFtZVwiLFxyXG4gICAgICAgICAgICAgICAgYmluZGluZzogXCJzb2xpY2l0ZWRSZXF1ZXN0ZXJcIixcclxuICAgICAgICAgICAgICAgIHdpZHRoOiBcIjEwMFwiXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICBdO1xyXG5cclxuICAgICAgICB2bS5lbXB0eU1vZGVsID0ge1wic2VxdWVuY2VOdW1iZXJcIjogXCJcIiwgXCJzb2xpY2l0ZWRSZXF1ZXN0ZXJcIjogXCJcIiwgXCJvdGhlclJlcXVlc3RlckRldGFpbHNcIjpcIlwiLCBkaXNwbGF5OiBcIlwifTtcclxuXHJcblxyXG4gICAgICAgIHZtLiRvbkluaXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIF9zZXRJZE5hbWVzKCk7XHJcbiAgICAgICAgICAgIHZtLnNob3dEZXRhaWxFcnJvcnM9ZmFsc2U7XHJcbiAgICAgICAgICAgIGlmIChhbmd1bGFyLmlzVW5kZWZpbmVkKHZtLm1vZGVsLmxpc3QpKSB7XHJcbiAgICAgICAgICAgICAgICB2bS5tb2RlbC5saXN0ID0gW107XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGxvYWRDb250YWN0RGF0YSgpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZtLiRvbkNoYW5nZXMgPSBmdW5jdGlvbiAoY2hhbmdlcykge1xyXG4gICAgICAgICAgICBpZiAoY2hhbmdlcy5saXN0SXRlbXMpIHtcclxuICAgICAgICAgICAgICAgIHZtLm1vZGVsLmxpc3QgPSBjaGFuZ2VzLmxpc3RJdGVtcy5jdXJyZW50VmFsdWU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmKGNoYW5nZXMuc2hvd0Vycm9ycyl7XHJcbiAgICAgICAgICAgICAgICB2bS5zaG93RGV0YWlsRXJyb3JzPWNoYW5nZXMuc2hvd0Vycm9ycy5jdXJyZW50VmFsdWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2bS5hZGROZXcgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBtYXhJRCA9IGdldExpc3RNYXhJRCgpO1xyXG4gICAgICAgICAgICB2YXIgaXRlbSA9IGFuZ3VsYXIuY29weSh2bS5lbXB0eU1vZGVsKTtcclxuICAgICAgICAgICAgaXRlbS5zZXF1ZW5jZU51bWJlciA9IChnZXRMaXN0TWF4SUQoKSArIDEpO1xyXG4gICAgICAgICAgICAodm0ubW9kZWwubGlzdCkucHVzaChpdGVtKTtcclxuICAgICAgICAgICAgc2V0UmVjb3JkKC0xKTtcclxuICAgICAgICAgICAgdm0ucmVzZXRUb0NvbGxhcHNlZCA9ICF2bS5yZXNldFRvQ29sbGFwc2VkO1xyXG4gICAgICAgICAgICBzZXRSZWNvcmQodm0ubW9kZWwubGlzdC5sZW5ndGggLSAxKTtcclxuICAgICAgICAgICAgLy92bS5lZGl0UmVjb3JkKGl0ZW0pO1xyXG4gICAgICAgICAgICB2bS5vblVwZGF0ZSh7bGlzdDogdm0ubW9kZWwubGlzdH0pO1xyXG5cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBzZXRSZWNvcmQodmFsdWUpIHtcclxuICAgICAgICAgICAgdm0uc2VsZWN0UmVjb3JkID0gdmFsdWU7XHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdm0uZGVsZXRlUmVjb3JkID0gZnVuY3Rpb24gKF9pZCkge1xyXG5cclxuXHJcbiAgICAgICAgICAgIHZhciBpZHggPSB2bS5tb2RlbC5saXN0LmluZGV4T2YoXHJcbiAgICAgICAgICAgICAgICAkZmlsdGVyKCdmaWx0ZXInKSh2bS5tb2RlbC5saXN0LCB7c2VxdWVuY2VOdW1iZXI6IF9pZH0sIHRydWUpWzBdXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIGlmIChpZHggPCAwKSByZXR1cm47XHJcblxyXG4gICAgICAgICAgICB2bS5tb2RlbC5saXN0LnNwbGljZShpZHgsIDEpO1xyXG4gICAgICAgICAgICAgdm0ub25VcGRhdGUoe2xpc3Q6dm0ubW9kZWwubGlzdH0pO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGxvYWRDb250YWN0RGF0YSgpIHtcclxuICAgICAgICAgICAgZ2V0Q29udGFjdExpc3RzLmdldEludGVybmFsQ29udGFjdHNXaXRob3V0T3RoZXIoKVxyXG4gICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgICAgICAgICAgICAgICAgICB2bS5iYXNlUmVxdWVzdGVycyA9IGRhdGE7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGdldExpc3RNYXhJRCgpIHtcclxuXHJcbiAgICAgICAgICAgIHZhciBvdXQgPSAwO1xyXG4gICAgICAgICAgICB2YXIgbGlzdCA9IHZtLm1vZGVsLmxpc3Q7XHJcbiAgICAgICAgICAgIGlmIChsaXN0KSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAobGlzdFtpXS5zZXF1ZW5jZU51bWJlciA+IG91dCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvdXQgPSBsaXN0W2ldLnNlcXVlbmNlTnVtYmVyO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gb3V0O1xyXG5cclxuICAgICAgICB9XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogc2V0cyB0aGUgbmFtZXMgb2YgdGhlIGZpZWxkcy4gVXNlIHVuZGVyc2NvcmUgYXMgdGhlIHNlcGFyYXRvciBmb3IgdGhlIHNjb3BlIGlkLiBTY29wZSBpZCBtdXN0IGJlIGF0IGVuZFxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZnVuY3Rpb24gX3NldElkTmFtZXMoKSB7XHJcbiAgICAgICAgICAgIHZhciBzY29wZUlkID0gXCJfXCIgKyAkc2NvcGUuJGlkO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdm0uZGlzYWJsZUFkZEJ1dHRvbj1mdW5jdGlvbigpe1xyXG4gICAgICAgICAgICBpZih2bS5tb2RlbC5saXN0Lmxlbmd0aCA9PT0gMCkgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICByZXR1cm4odm0ucmVxdWVzdGVyTGlzdEZvcm0uJGludmFsaWQpO1xyXG4gICAgICAgIH07XHJcblxyXG5cclxuICAgICAgICAvKiAgJHNjb3BlLiR3YXRjaCgnY291bnRyeUxpc3RDdHJsLmNvdW50cnlMaXN0Rm9ybS4kZXJyb3InLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdm0udXBkYXRlRXJyb3JTdW1tYXJ5KCk7XHJcbiAgICAgICAgICAgICAgICB9LCB0cnVlKTsqL1xyXG4gICAgfVxyXG59KSgpOyIsIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IGRraWx0eSBvbiAxMi8wNy8yMDE2LlxyXG4gKi9cclxuXHJcbihmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgnZmlsZUlPJywgW10pO1xyXG5cclxufSkoKTtcclxuXHJcbihmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcbiAgICAvKipcclxuICAgICAqIEBuZ2RvYyBkaXJlY3RpdmUgLWF0dHJpYnV0ZSBkaXJlY3RpdmUgZm9yIGZpbGUgbG9hZC4gUGxhY2Ugb24gZmlsZSBpbnB1dCBlbGVtZW50XHJcbiAgICAgKiBhdHRyaWJ1dGUgbXVzdCBiZSBib3VuZCB0byBhIGZ1bmN0aW9uIHdpdGggYSBwYXJhbWV0ZXIgbmFtZWQgZmlsZUNvbnRlbnQuIE9uIGxvYWRcclxuICAgICAqIHRoZSBmdW5jdGlvbiB3aWxsIGJlIGNhbGxlZCB0byB1cGRhdGUgdmFsdWVzXHJcbiAgICAgKi9cclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKCdmaWxlSU8nKVxyXG4gICAgICAgIC5kaXJlY3RpdmUoJ2hwZmJGaWxlU2VsZWN0JywgbmdGaWxlU2VsZWN0KTtcclxuXHJcbiAgICBuZ0ZpbGVTZWxlY3QuJGluamVjdCA9IFsnaHBmYkZpbGVQcm9jZXNzaW5nJ107XHJcbiAgICBmdW5jdGlvbiBuZ0ZpbGVTZWxlY3QoaHBmYkZpbGVSZWFkZXIpIHtcclxuICAgICAgICB2YXIgZGlyZWN0aXZlID0ge1xyXG5cclxuICAgICAgICAgICAgbGluazogbGluayxcclxuICAgICAgICAgICAgcmVzdHJpY3Q6ICdBJyxcclxuICAgICAgICAgICAgc2NvcGU6IHtcclxuICAgICAgICAgICAgICAgIGhwZmJGaWxlU2VsZWN0OiBcIiZcIixcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9O1xyXG4gICAgICAgIHJldHVybiBkaXJlY3RpdmU7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGxpbmsoc2NvcGUsIGVsZW1lbnQsIGF0dHJzKSB7XHJcbiAgICAgICAgICAgIHNjb3BlLnJvb3RUYWcgPSBhdHRycy5yb290VGFnO1xyXG4gICAgICAgICAgICBlbGVtZW50LmJpbmQoXCJjaGFuZ2VcIiwgZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgICAgIHNjb3BlLmZpbGUgPSAoZS5zcmNFbGVtZW50IHx8IGUudGFyZ2V0KS5maWxlc1swXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaHBmYkZpbGVSZWFkZXIucmVhZEFzRGF0YVRleHQoc2NvcGUuZmlsZSwgc2NvcGUpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjb3BlLmhwZmJGaWxlU2VsZWN0KHtmaWxlQ29udGVudDogcmVzdWx0fSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcblxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH1cclxuXHJcbiAgICB9XHJcbn0pKCk7XHJcblxyXG4oZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG4gICAgLyoqXHJcbiAgICAgKiBAbmdkb2MgY29tcG9uZW50LSBmaWxlU2VsZWN0IFVJIGZvciBsb2FkaW5nIGZpbGVzIGludG8gYSBkYXRhIG1vZGVsXHJcbiAgICAgKiBAcGFyYW0gdXBkYXRlTW9kZWxSb290LSB0aGUgZnVuY3Rpb24gdG8gY2FsbCBhbmQgcGFzcyB0aGUgSlNPTiBtb2RlbFxyXG4gICAgICogQHBhcmFtIHJvb3RFbGVtIC0gdGhlIG5hbWUgb2YgdGhlIHJvb3QgZWxlbWVudC4gVXNlZCBmb3IgY29tcGFyaW5nIHRvIHRoZSBsb2FkZWQgZmlsZVxyXG4gICAgICovXHJcbiAgICBhbmd1bGFyLm1vZHVsZSgnZmlsZUlPJykuY29tcG9uZW50KCdocGZiRmlsZVNlbGVjdCcsIHtcclxuICAgICAgICB0ZW1wbGF0ZVVybDogJ2FwcC9zY3JpcHRzL2NvbXBvbmVudHMvZmlsZUlPL2ZpbGVTZWxlY3RfMjAxOTAzMjJfMTU0NC5odG1sJyxcclxuICAgICAgICBjb250cm9sbGVyOiBGaWxlU2VsZWN0Q29udHJvbGxlcixcclxuICAgICAgICBiaW5kaW5nczoge1xyXG4gICAgICAgICAgICB1cGRhdGVNb2RlbFJvb3Q6ICcmJyxcclxuICAgICAgICAgICAgcm9vdEVsZW06ICdAJyxcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcblxyXG4gICAgRmlsZVNlbGVjdENvbnRyb2xsZXIuJGluamVjdCA9IFsnaHBmYkZpbGVQcm9jZXNzaW5nJ107XHJcbiAgICBmdW5jdGlvbiBGaWxlU2VsZWN0Q29udHJvbGxlcihocGZiRmlsZVByb2Nlc3NpbmcpIHtcclxuICAgICAgICB2YXIgdm0gPSB0aGlzO1xyXG4gICAgICAgIHZtLmZpbGVUeXBlcyA9IFwiLnhtbCwgLmhjc2NcIjtcclxuICAgICAgICB2bS5tb2RlbENhbGxiYWNrID0gZnVuY3Rpb24gKGZpbGVDb250ZW50KSB7XHJcbiAgICAgICAgICAgIHZtLnN0YXR1cyA9IFwiXCI7XHJcbiAgICAgICAgICAgIGlmIChmaWxlQ29udGVudCkge1xyXG4gICAgICAgICAgICAgICAgdm0uc3RhdHVzID0gZmlsZUNvbnRlbnQubWVzc2FnZXM7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdm0udXBkYXRlTW9kZWxSb290KHtmaWxlQ29udGVudDogZmlsZUNvbnRlbnR9KTtcclxuICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KGZpbGVMb2FkKS50cmlnZ2VyKCdmb2N1cycpO1xyXG5cclxuICAgICAgICB9O1xyXG4gICAgfVxyXG59KSgpO1xyXG5cclxuKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBuZ2RvYyBjb21wb25lbnQgLSB0aGUgVUkgY29tcG9uZW50IGZvciBzYXZpbmcgYSBkYXRhIG1vZGVsXHJcbiAgICAgKiBAcGFyYW0ganNvblRvU2F2ZS0gdGhlIEpTT04gZGF0YSBtb2RlbCB0byBzYXZlXHJcbiAgICAgKiBAcGFyYW0gIHJvb3RUYWcgLSB0aGUgc3RyaW5nIG5hbWUgb2YgdGhlIHJvb3QgdGFnLiBOZWVkZWQgZm9yIGxvb2t1cHNcclxuICAgICAqIEBwYXJhbSBzYXZlVHlwZS0gdmFsaWQgdmFsdWVzIGFyZSAnanNvbicgb3IgJ3htbCdcclxuICAgICAqIEBwYXJhbSBidXR0b25MYWJlbCAtdGhlIGxhYmVsIGZvciB0aGUgc2F2ZSBidXR0b25cclxuICAgICAqL1xyXG4gICAgYW5ndWxhci5tb2R1bGUoJ2ZpbGVJTycpLmNvbXBvbmVudCgnaHBmYkZpbGVTYXZlJywge1xyXG4gICAgICAgIHRlbXBsYXRlVXJsOiAnYXBwL3NjcmlwdHMvY29tcG9uZW50cy9maWxlSU8vZmlsZVNhdmVfMjAxOTAzMjJfMTU0NC5odG1sJyxcclxuICAgICAgICBjb250cm9sbGVyOiBGaWxlV3JpdGVDb250cm9sbGVyLFxyXG4gICAgICAgIGJpbmRpbmdzOiB7XHJcbiAgICAgICAgICAgIGpzb25Ub1NhdmU6ICc8JyxcclxuICAgICAgICAgICAgcm9vdFRhZzogJ0AnLFxyXG4gICAgICAgICAgICBzYXZlVHlwZTogJ0AnLFxyXG4gICAgICAgICAgICBidXR0b25MYWJlbDogJ0AnLFxyXG4gICAgICAgICAgICBidXR0b25EaXNhYmxlZDonQCdcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcblxyXG4gICAgRmlsZVdyaXRlQ29udHJvbGxlci4kaW5qZWN0ID0gWydocGZiRmlsZVByb2Nlc3NpbmcnXTtcclxuICAgIC8qKlxyXG4gICAgICogQG5nZG9jIGNvbnRyb2xsZXIgLSBjb250cm9sbGVyIGZvciBmaWxlIHdyaXRpbmdcclxuICAgICAqIEBwYXJhbSBocGZiRmlsZVByb2Nlc3NpbmcgLSB0aGUgc2VydmljZSB0aGF0IGRvZXMgYWxsIHRoZSBmaWxlIGNyZWF0aW9uIGFuZCB2YWxpZGF0aW9uXHJcbiAgICAgKiBAY29uc3RydWN0ZXIgX2luaXQtIGluaXRpYWxpemVzIHN0YXRlIGFzIG5lZWRlZC4gVXBkYXRlcyBidXR0b24gZGlzYWJsZWRcclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gRmlsZVdyaXRlQ29udHJvbGxlcihocGZiRmlsZVByb2Nlc3NpbmcpIHtcclxuXHJcbiAgICAgICAgdmFyIHZtID0gdGhpcztcclxuICAgICAgICB2bS4kb25Jbml0ID1faW5pdDtcclxuICAgICAgICB2bS5nZW5lcmF0ZSA9IF9nZW5lcmF0ZUZpbGU7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIF9nZW5lcmF0ZUZpbGUoKXtcclxuICAgICAgICAgICAgaWYgKHZtLnNhdmVUeXBlLnRvVXBwZXJDYXNlKCkgPT09IFwiSlNPTlwiKSB7XHJcbiAgICAgICAgICAgICAgICBocGZiRmlsZVByb2Nlc3Npbmcud3JpdGVBc0pzb24odm0uanNvblRvU2F2ZSwgdm0uZmlsZU5hbWUsIHZtLnJvb3RUYWcpO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHZtLnNhdmVUeXBlLnRvVXBwZXJDYXNlKCkgPT09IFwiWE1MXCIpIHtcclxuICAgICAgICAgICAgICAgIGhwZmJGaWxlUHJvY2Vzc2luZy53cml0ZUFzWG1sKHZtLmpzb25Ub1NhdmUsIHZtLmZpbGVOYW1lLCB2bS5yb290VGFnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBmdW5jdGlvbiBfaW5pdCgpe1xyXG4gICAgICAgICAgIC8vZGlzYWJsZWQgc3RhdGVcclxuICAgICAgICAgICAgaWYoIXZtLmJ1dHRvbkRpc2FibGVkKXtcclxuICAgICAgICAgICAgICAgdm0uYnV0dG9uRGlzYWJsZWQ9ZmFsc2U7XHJcbiAgICAgICAgICAgIH1lbHNlIGlmKHZtLmJ1dHRvbkRpc2FibGVkLnRvTG93ZXJDYXNlKCk9PT1cInRydWVcIil7XHJcbiAgICAgICAgICAgICAgICB2bS5idXR0b25EaXNhYmxlZD10cnVlXHJcbiAgICAgICAgICAgIH1lbHNlIGlmKHZtLmJ1dHRvbkRpc2FibGVkLnRvTG93ZXJDYXNlKCk9PT1cImZhbHNlXCIpe1xyXG4gICAgICAgICAgICAgICAgdm0uYnV0dG9uRGlzYWJsZWQ9ZmFsc2U7XHJcbiAgICAgICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICAgICAgdm0uYnV0dG9uRGlzYWJsZWQ9ZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0pKCk7XHJcblxyXG5cclxuKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuICAgIC8qKlxyXG4gICAgICogQG5nZG9jIHNlcnZpY2UtIHByb2Nlc3NlcyBhbGwgZmlsZXMgZm9yIGxvYWQgYW5kIHdyaXRpbmdcclxuICAgICAqL1xyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ2ZpbGVJTycpXHJcbiAgICAgICAgLmZhY3RvcnkoJ2hwZmJGaWxlUHJvY2Vzc2luZycsIGZpbGVSZWFkZXIpO1xyXG5cclxuICAgIGZpbGVSZWFkZXIuJGluamVjdCA9IFsnJHEnXTtcclxuICAgIC8qIEBuZ0luamVjdCAqL1xyXG4gICAgZnVuY3Rpb24gZmlsZVJlYWRlcigkcSkge1xyXG4gICAgICAgIC8vY29uc3RhbnRzIHVzZWQgZm9yIG1lc3NhZ2luZ1xyXG4gICAgICAgIHZhciBtc2dfc3VjY2VzcyA9IFwiTVNHX1NVQ0NFU1NfTE9BRFwiOyAvL2xvYWQgd2FzIGEgc3VjY2Vzc1xyXG4gICAgICAgIHZhciBtc2dfZXJyX2pzb25wYXJzZSA9IFwiTVNHX0VSUl9KU09OUEFSU0VcIjsgLy9qc29uIHBhcnNpbmcgZXJyb3JcclxuICAgICAgICB2YXIgbXNnX2Vycl94bWxwYXJzZSA9IFwiTVNHX0VSUl9YTUxQQVJTRVwiOyAvL3htbCBwYXJzaW5nIGVycm9yXHJcbiAgICAgICAgdmFyIG1zZ19lcnJfbG9hZCA9IFwiTVNHX0VSUl9GSUxFX0xPQURcIjsgLy9maWxlIGxvYWQgZXJyb3JcclxuICAgICAgICB2YXIgbXNnX2Vycl9maWxlVHlwZSA9IFwiTVNHX0VSUl9GSUxFX1RZUEVcIjsgLy9maWxlIHR5cGUgZXJyb3JcclxuICAgICAgICB2YXIgbXNnX2Vycl9mb3JtVHlwZSA9IFwiTVNHX0VSUl9GT1JNX1RZUEVcIjsgLy8gdmFsaWQganNvbiBidXQgaW5jb3JyZWN0IHJvb3QgdGFnXHJcbiAgICAgICAgdmFyIG1zZ19lcnJfY2hlY2tzdW1fY29tcGFyZUZhaWwgPSBcIk1TR19FUlJfQ0hFQ0tTVU1fRkFJTFwiO1xyXG4gICAgICAgIHZhciBkcmFmdF9maWxlX3R5cGUgPSBcImhjc2NcIjsgLy8gdHlwZSBvZiBmaWxlIHN1ZmZpeCBmb3IgSlNPTiBmaWxlcy4gQ2FuIGNoYW5nZSB0byBwcm9jZXNzIG90aGVyIHR5cGVzXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQG5nT2JqZWN0OiB1c2VkIHRvIHN0b3JlIHRoZSBqc29uUmVzdWx0IGFuZCBhbnkgbWVzc2FnZXNcclxuICAgICAgICAgKiBAdHlwZSB7e2pzb25SZXN1bHQ6IHN0cmluZywgbWVzc2FnZXM6IHN0cmluZ319XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdmFyIGNvbnZlcnRSZXN1bHQgPSB7XHJcbiAgICAgICAgICAgIGpzb25SZXN1bHQ6IFwiXCIsXHJcbiAgICAgICAgICAgIG1lc3NhZ2VzOiBcIlwiXHJcbiAgICAgICAgfTtcclxuICAgICAgICB2YXIgc2VydmljZSA9IHtcclxuICAgICAgICAgICAgcmVhZEFzRGF0YVRleHQ6IHJlYWRBc0RhdGFUZXh0LFxyXG4gICAgICAgICAgICB3cml0ZUFzSnNvbjoganNvblRvRmlsZSxcclxuICAgICAgICAgICAgd3JpdGVBc1htbDogeG1sVG9GaWxlXHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4gc2VydmljZTtcclxuXHJcbiAgICAgICAgLy8vLy8vLy8vLy8vLy8vL1xyXG4gICAgICAgIGZ1bmN0aW9uIG9uTG9hZChyZWFkZXIsIGRlZmVycmVkLCBzY29wZSwgZmlsZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgc2NvcGUuJGFwcGx5KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZmlsZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3BsaXRGaWxlID0gZmlsZS5uYW1lLnNwbGl0KCcuJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmaWxlVHlwZSA9IHNwbGl0RmlsZVtzcGxpdEZpbGUubGVuZ3RoIC0gMV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgoZmlsZVR5cGUudG9Mb3dlckNhc2UoKSkgPT0gZHJhZnRfZmlsZV90eXBlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb252ZXJ0VG9KU09OT2JqZWN0cyhyZWFkZXIsIHNjb3BlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoZWNrUm9vdFRhZ01hdGNoKHJlYWRlciwgc2NvcGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogQXMgcGVyIG1lZXRpbmcgb2Ygb2N0IDIxXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVhZGVyLnBhcnNlUmVzdWx0Lmpzb25SZXN1bHQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21wYXJlSGFzaEluSnNvbihyZWFkZXIsIHNjb3BlLnJvb3RUYWcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSovXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoKGZpbGVUeXBlLnRvTG93ZXJDYXNlKCkgPT09IFwieG1sXCIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb252ZXJ0WE1MVG9KU09OT2JqZWN0cyhyZWFkZXIsIHNjb3BlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoZWNrUm9vdFRhZ01hdGNoKHJlYWRlciwgc2NvcGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogQXMgcGVyIG1lZXRpbmcgb2Ygb2N0IDIxXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVhZGVyLnBhcnNlUmVzdWx0Lmpzb25SZXN1bHQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21wYXJlSGFzaEluWE1MKHJlYWRlciwgc2NvcGUpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9Ki9cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb252ZXJ0UmVzdWx0LnBhcnNlUmVzdWx0ID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnZlcnRSZXN1bHQubWVzc2FnZXMgPSBtc2dfZXJyX2ZpbGVUeXBlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVhZGVyLnBhcnNlUmVzdWx0ID0gY29udmVydFJlc3VsdDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKHJlYWRlci5wYXJzZVJlc3VsdCk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gb25FcnJvcihyZWFkZXIsIGRlZmVycmVkLCBzY29wZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgc2NvcGUuJGFwcGx5KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAvL1RPRE8gbmVlZCB0byByZXZpZXcgcmVqZWN0IGNhc2VcclxuICAgICAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZWplY3QobXNnX2Vycl9sb2FkKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZ1bmN0aW9uIGdldFJlYWRlcihkZWZlcnJlZCwgc2NvcGUsIGZpbGUpIHtcclxuICAgICAgICAgICAgdmFyIHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7XHJcbiAgICAgICAgICAgIC8vZXh0ZW5kIHRoZSBmaWxlUmVhZGVyIG9iamVjdFxyXG4gICAgICAgICAgICByZWFkZXIub25sb2FkID0gb25Mb2FkKHJlYWRlciwgZGVmZXJyZWQsIHNjb3BlLCBmaWxlKTtcclxuICAgICAgICAgICAgcmVhZGVyLm9uRXJyb3IgPSBvbkVycm9yKHJlYWRlciwgZGVmZXJyZWQsIHNjb3BlKTtcclxuICAgICAgICAgICAgcmVhZGVyLnBhcnNlUmVzdWx0ID0gbnVsbDtcclxuICAgICAgICAgICAgcmV0dXJuIHJlYWRlcjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHJlYWRBc0RhdGFUZXh0KGZpbGUsIHNjb3BlKSB7XHJcbiAgICAgICAgICAgIHZhciBkZWZlcnJlZCA9ICRxLmRlZmVyKCk7XHJcbiAgICAgICAgICAgIHZhciByZWFkZXIgPSBnZXRSZWFkZXIoZGVmZXJyZWQsIHNjb3BlLCBmaWxlKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChmaWxlKSB7XHJcbiAgICAgICAgICAgICAgICByZWFkZXIucmVhZEFzVGV4dChmaWxlKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJlYWRlci5wYXJzZVJlc3VsdCA9IGNvbnZlcnRSZXN1bHQ7XHJcbiAgICAgICAgICAgICAgICByZWFkZXIucGFyc2VSZXN1bHQubWVzc2FnZXMgPSBcIlwiO1xyXG4gICAgICAgICAgICAgICAgcmVhZGVyLnBhcnNlUmVzdWx0Lmpzb25SZXN1bHQgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgLy9jYXNlIG9mIGNsZWFyaW5nIG91dCB0aGUgbWVzc2FnZXMgYXMgbm8gZmlsZSB3YXMgc2VsZWN0ZWRcclxuICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUocmVhZGVyLnBhcnNlUmVzdWx0KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGNvbnZlcnRUb0pTT05PYmplY3RzKHJlYWRlciwgc2NvcGUpIHtcclxuXHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICBjb252ZXJ0UmVzdWx0Lmpzb25SZXN1bHQgPSBKU09OLnBhcnNlKHJlYWRlci5yZXN1bHQpO1xyXG4gICAgICAgICAgICAgICAgY29udmVydFJlc3VsdC5qc29uUmVzdWx0W3Njb3BlLnJvb3RUYWddLmltcG9ydEZpbGVUeXBlID0gZHJhZnRfZmlsZV90eXBlO1xyXG4gICAgICAgICAgICAgICAgY29udmVydFJlc3VsdC5tZXNzYWdlcyA9IG1zZ19zdWNjZXNzO1xyXG4gICAgICAgICAgICAgICAgcmVhZGVyLnBhcnNlUmVzdWx0ID0gY29udmVydFJlc3VsdDtcclxuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICAgICAgY29udmVydFJlc3VsdC5qc29uUmVzdWx0ID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIGNvbnZlcnRSZXN1bHQubWVzc2FnZXMgPSBtc2dfZXJyX2pzb25wYXJzZTtcclxuICAgICAgICAgICAgICAgIHJlYWRlci5wYXJzZVJlc3VsdCA9IGNvbnZlcnRSZXN1bHQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBuZ2RvYyBtZXRob2QgY29udmVydHMgYSB2YWxpZCBYTUwgZmlsZSB0byBhIEpTT04gb2JqZWN0XHJcbiAgICAgICAgICogQHBhcmFtIHJlYWRlci0gdGhlIGV4dGVuZGVkIGZpbGUgcmVhZGVyIG9iamVjdFxyXG4gICAgICAgICAqIEByZXR1cm5zIG51bGxcclxuICAgICAgICAgKi9cclxuICAgICAgICBmdW5jdGlvbiBjb252ZXJ0WE1MVG9KU09OT2JqZWN0cyhyZWFkZXIsIHNjb3BlKSB7XHJcbiAgICAgICAgICAgIHZhciB4bWxDb25maWcgPSB7XHJcbiAgICAgICAgICAgICAgICBlc2NhcGVNb2RlOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgZW1wdHlOb2RlRm9ybTogXCJ0ZXh0XCIsXHJcbiAgICAgICAgICAgICAgICB1c2VEb3VibGVRdW90ZXM6IHRydWVcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgdmFyIHhtbENvbnZlcnRlciA9IG5ldyBYMkpTKHhtbENvbmZpZyk7XHJcbiAgICAgICAgICAgIC8vY29udmVydHMgWE1MIGFzIGEgc3RyaW5nIHRvIGEganNvblxyXG4gICAgICAgICAgICBjb252ZXJ0UmVzdWx0Lmpzb25SZXN1bHQgPSB4bWxDb252ZXJ0ZXIueG1sX3N0cjJqc29uKHJlYWRlci5yZXN1bHQpO1xyXG5cclxuICAgICAgICAgICAgaWYgKCFjb252ZXJ0UmVzdWx0Lmpzb25SZXN1bHQgfHwgIWNvbnZlcnRSZXN1bHQuanNvblJlc3VsdFtzY29wZS5yb290VGFnXSkge1xyXG4gICAgICAgICAgICAgICAgY29udmVydFJlc3VsdC5tZXNzYWdlcyA9IG1zZ19lcnJfeG1scGFyc2U7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjb252ZXJ0UmVzdWx0Lm1lc3NhZ2VzID0gbXNnX3N1Y2Nlc3M7XHJcbiAgICAgICAgICAgICAgICBjb252ZXJ0UmVzdWx0Lmpzb25SZXN1bHRbc2NvcGUucm9vdFRhZ10uaW1wb3J0RmlsZVR5cGUgPSBcInhtbFwiO1xyXG5cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZWFkZXIucGFyc2VSZXN1bHQgPSBjb252ZXJ0UmVzdWx0O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gY29udmVydEpTT05PYmplY3RzVG9YTUwoanNvbk9iaikge1xyXG4gICAgICAgICAgICB2YXIgeG1sQ29uZmlnID0ge1xyXG4gICAgICAgICAgICAgICAgZXNjYXBlTW9kZTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIGVtcHR5Tm9kZUZvcm06IFwidGV4dFwiLFxyXG4gICAgICAgICAgICAgICAgdXNlRG91YmxlUXVvdGVzOiB0cnVlXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHZhciBqc29uQ29udmVydGVyID0gbmV3IFgySlMoeG1sQ29uZmlnKTtcclxuICAgICAgICAgICAgdmFyIHhtbFJlc3VsdCA9IG51bGw7XHJcbiAgICAgICAgICAgIC8vY29udmVydHMgWE1MIGFzIGEgc3RyaW5nIHRvIGEganNvblxyXG4gICAgICAgICAgICB4bWxSZXN1bHQgPSBqc29uQ29udmVydGVyLmpzb24yeG1sX3N0cihqc29uT2JqKTtcclxuICAgICAgICAgICAgcmV0dXJuICh4bWxSZXN1bHQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQG5nRG9jIG1ldGhvZCAtIGNoZWNrcyBpZiB0aGUgcm9vdCB0YWcgbWF0Y2hlcyB0aGUgZXhwZWN0ZWQuIElmIGl0IGRvZXNuJ3QgbWF0Y2gsIGNsZWFycyB0aGUgZGF0YVxyXG4gICAgICAgICAqIGFuZCBzZXRzIHRoZSBlcnJvciBtZXNzYWdlXHJcbiAgICAgICAgICogQHBhcmFtIHJlYWRlciB0aGUgZmlsZSByZWFkZXIgb2JqZWN0IHRoYXQgaXMgdXNlZCB0byByZWFkIGluIGEgZmlsZVxyXG4gICAgICAgICAqIEBwYXJhbSBzY29wZSAtIHNjb3BlIG9mIHRoZSBzZXJ2aWNlXHJcbiAgICAgICAgICogIEByZXR1cm5zIG51bGxcclxuICAgICAgICAgKi9cclxuICAgICAgICBmdW5jdGlvbiBjaGVja1Jvb3RUYWdNYXRjaChyZWFkZXIsIHNjb3BlKSB7XHJcbiAgICAgICAgICAgIGlmICghc2NvcGUucm9vdFRhZyB8fCAhcmVhZGVyLnBhcnNlUmVzdWx0IHx8ICFyZWFkZXIucGFyc2VSZXN1bHQuanNvblJlc3VsdCkgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgaWYgKCFyZWFkZXIucGFyc2VSZXN1bHQuanNvblJlc3VsdFtzY29wZS5yb290VGFnXSkge1xyXG4gICAgICAgICAgICAgICAgcmVhZGVyLnBhcnNlUmVzdWx0Lmpzb25SZXN1bHQgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgcmVhZGVyLnBhcnNlUmVzdWx0Lm1lc3NhZ2VzID0gbXNnX2Vycl9mb3JtVHlwZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQG5nZG9jIG1ldGhvZCAtIGluc2VydHMgYSBoYXNoIHZhbHVlIGludG8gYSBqc29uIG9iamVjdC4gSGFzaCBpcyBjYWxjdWxhdGVkIG9uIHRoZSBlbnRpcmUganNvblxyXG4gICAgICAgICAqIEBwYXJhbSBqc29uT2JqLSB0aGUganNvbiBvYmplY3QgdG8gaGFzaFxyXG4gICAgICAgICAqIEBwYXJhbSByb290VGFnLSB0aGUgcm9vdCB0YWcgb2YgdGhlIGpzb25PYmplY3QuIFVzZWQgZm9yIGxvb2t1cHNcclxuICAgICAgICAgKi9cclxuICAgICAgICBmdW5jdGlvbiBpbnNlcnRIYXNoSW5Kc29uKGpzb25PYmosIHJvb3RUYWcpIHtcclxuICAgICAgICAgICAganNvbk9ialtyb290VGFnXS5kYXRhX2NoZWNrc3VtID0gXCJcIjtcclxuICAgICAgICAgICAgdmFyIGhhc2ggPSBDcnlwdG9KUy5TSEEyNTYoSlNPTi5zdHJpbmdpZnkoanNvbk9iaikpO1xyXG4gICAgICAgICAgICBqc29uT2JqW3Jvb3RUYWddLmRhdGFfY2hlY2tzdW0gPSBoYXNoLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBuZ2RvYyBtZXRob2QgLSBjb21wYXJlcyB0aGUgaGFzaCBpbiB0aGUgSlNPTiB0byB0aGUgY2FsY3VsYXRlZCBKU09OIGhhc2hcclxuICAgICAgICAgKiBAcGFyYW0gcmVhZGVyLSB0aGUgcmVhZGVyIGV4dGVuZGVkIG9iamVjdCB0aGF0IGNvbnRhaW5zIHRoZSBqc29uXHJcbiAgICAgICAgICogQHBhcmFtIHJvb3RUYWctIHRoZSByb290IHRhZyBvZiB0aGUganNvbk9iamVjdC4gVXNlZCBmb3IgbG9va3Vwc1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGZ1bmN0aW9uIGNvbXBhcmVIYXNoSW5Kc29uKHJlYWRlciwgcm9vdFRhZykge1xyXG4gICAgICAgICAgICB2YXIgY3VycmVudFRhZ1ZhbHVlID0gcmVhZGVyLnBhcnNlUmVzdWx0Lmpzb25SZXN1bHRbcm9vdFRhZ10uZGF0YV9jaGVja3N1bTtcclxuICAgICAgICAgICAgcmVhZGVyLnBhcnNlUmVzdWx0Lmpzb25SZXN1bHRbcm9vdFRhZ10uZGF0YV9jaGVja3N1bSA9IFwiXCI7XHJcbiAgICAgICAgICAgIHZhciBnZW5lcmF0ZWRIYXNoID0gQ3J5cHRvSlMuU0hBMjU2KEpTT04uc3RyaW5naWZ5KHJlYWRlci5wYXJzZVJlc3VsdC5qc29uUmVzdWx0KSk7XHJcbiAgICAgICAgICAgIGlmIChjdXJyZW50VGFnVmFsdWUgIT09IGdlbmVyYXRlZEhhc2gudG9TdHJpbmcoKSkge1xyXG4gICAgICAgICAgICAgICAgcmVhZGVyLnBhcnNlUmVzdWx0Lmpzb25SZXN1bHQgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgcmVhZGVyLnBhcnNlUmVzdWx0Lm1lc3NhZ2VzID0gbXNnX2Vycl9jaGVja3N1bV9jb21wYXJlRmFpbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAbmdkb2MgbWV0aG9kIC0gY29tcGFyZXMgdGhlIGhhc2ggaW4gdGhlIFhNTCB0byB0aGUgY2FsY3VsYXRlZCBYTUwgaGFzaFxyXG4gICAgICAgICAqIEBwYXJhbSByZWFkZXItIHRoZSByZWFkZXIgZXh0ZW5kZWQgb2JqZWN0IHRoYXQgY29udGFpbnMgdGhlIGpzb25cclxuICAgICAgICAgKiBAcGFyYW0gcm9vdFRhZy0gdGhlIHJvb3QgdGFnIG9mIHRoZSBqc29uT2JqZWN0LiBVc2VkIGZvciBsb29rdXBzXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZnVuY3Rpb24gY29tcGFyZUhhc2hJblhNTChyZWFkZXIsIHNjb3BlKSB7XHJcbiAgICAgICAgICAgIHZhciBjdXJyZW50VGFnVmFsdWUgPSByZWFkZXIucGFyc2VSZXN1bHQuanNvblJlc3VsdFtzY29wZS5yb290VGFnXS5kYXRhX2NoZWNrc3VtO1xyXG4gICAgICAgICAgICB2YXIgY29udmVydGVkVG9Kc29uPSByZWFkZXIucGFyc2VSZXN1bHQuanNvblJlc3VsdDtcclxuICAgICAgICAgICAvL3JlbW92ZSBjaGVja3N1bVxyXG4gICAgICAgICAgICBjb252ZXJ0ZWRUb0pzb25bc2NvcGUucm9vdFRhZ10uZGF0YV9jaGVja3N1bSA9IFwiXCI7XHJcbiAgICAgICAgICAgIC8vY29udmVydCB0byB4bWxcclxuICAgICAgICAgICAgdmFyIHhtbFJlc3VsdCA9IGNvbnZlcnRKU09OT2JqZWN0c1RvWE1MKGNvbnZlcnRlZFRvSnNvbik7XHJcbiAgICAgICAgICAgIHNjb3BlLmhhc2ggPSBDcnlwdG9KUy5TSEEyNTYoeG1sUmVzdWx0KTtcclxuICAgICAgICAgICAgaWYgKGN1cnJlbnRUYWdWYWx1ZSAhPT0gc2NvcGUuaGFzaC50b1N0cmluZygpKSB7XHJcbiAgICAgICAgICAgICAgICByZWFkZXIucGFyc2VSZXN1bHQuanNvblJlc3VsdCA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICByZWFkZXIucGFyc2VSZXN1bHQubWVzc2FnZXMgPSBtc2dfZXJyX2NoZWNrc3VtX2NvbXBhcmVGYWlsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBqc29uVG9GaWxlKGpzb25PYmosIGZpbGVOYW1lLCByb290VGFnKSB7XHJcbiAgICAgICAgICAgIGlmICghanNvbk9iaikgcmV0dXJuO1xyXG4gICAgICAgICAgICAvL2luc2VydEhhc2hJbkpzb24oanNvbk9iaiwgcm9vdFRhZykgYXMgcGVyIE9jdCAyMSBtZWV0aW5nIG5vIGNoZWNrc3VtXHJcbiAgICAgICAgICAgIHZhciBtYWtlU3RyU2F2ZSA9IEpTT04uc3RyaW5naWZ5KGpzb25PYmopO1xyXG4gICAgICAgICAgICB2YXIgYmxvYiA9IG5ldyBCbG9iKFttYWtlU3RyU2F2ZV0sIHt0eXBlOiBcInRleHQvcGxhaW47Y2hhcnNldD11dGYtOFwifSk7XHJcbiAgICAgICAgICAgIGlmICghZmlsZU5hbWUpIHtcclxuICAgICAgICAgICAgICAgIGZpbGVOYW1lID0gXCJocGZiRHJhZnQuXCIgKyBkcmFmdF9maWxlX3R5cGU7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBmaWxlTmFtZSArPSBcIi5cIiArIGRyYWZ0X2ZpbGVfdHlwZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBzYXZlQXMoYmxvYiwgZmlsZU5hbWUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAcGFyYW0ganNvbk9ialxyXG4gICAgICAgICAqIEBwYXJhbSBmaWxlTmFtZVxyXG4gICAgICAgICAqIEBwYXJhbSByb290VGFnXHJcbiAgICAgICAgICogQHBhcmFtIHhzbE5hbWUgLSAob3B0aW9uYWwpLiBUaGUgc3R5bGVzaGVldCBuYW1lLiBGb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkgZGVmYXVsdHMgdG8gUkVQX0NvbWJpbmVkXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZnVuY3Rpb24geG1sVG9GaWxlKGpzb25PYmosIGZpbGVOYW1lLCByb290VGFnLCB4c2xOYW1lKSB7XHJcbiAgICAgICAgICAgIGlmICghanNvbk9iaikgcmV0dXJuO1xyXG4gICAgICAgICAgICAvL0FzIHBlciBtZWV0aW5nIG9mIE9jdCAyMSwgaWdub3JlIGNoZWNrc3VtXHJcbiAgICAgICAgICAgIC8vY2xlYXIgb3V0IGFueSBwcmV2aW91cyB2YWx1ZSBpZiBpdCBleGlzdHNcclxuICAgICAgICAgICAgLy9qc29uT2JqW3Jvb3RUYWddLmRhdGFfY2hlY2tzdW0gPSBcIlwiO1xyXG4gICAgICAgICAgICB2YXIgeG1sUmVzdWx0ID0gY29udmVydEpTT05PYmplY3RzVG9YTUwoanNvbk9iaik7XHJcbiAgICAgICAgICAgIC8vVE9ETyB0aGlzIG5lZWRzIHRvIGJlIGNvbmZpZ3VyYWJsZVxyXG4gICAgICAgICAgICBpZigheHNsTmFtZSkge1xyXG4gICAgICAgICAgICAgICAgeG1sUmVzdWx0ID0gJzw/eG1sIHZlcnNpb249XCIxLjBcIiBlbmNvZGluZz1cIlVURi04XCI/PicgKyAnPD94bWwtc3R5bGVzaGVldCAgdHlwZT1cInRleHQveHNsXCIgaHJlZj1cIlJFUF9Db21iaW5lZC54c2xcIj8+JyArIHhtbFJlc3VsdDtcclxuICAgICAgICAgICAgfWVsc2V7XHJcblxyXG4gICAgICAgICAgICAgICAgeG1sUmVzdWx0ID0gJzw/eG1sIHZlcnNpb249XCIxLjBcIiBlbmNvZGluZz1cIlVURi04XCI/PicgKyAnPD94bWwtc3R5bGVzaGVldCAgdHlwZT1cInRleHQveHNsXCIgaHJlZj1cIicreHNsTmFtZSsnXCI/PicgKyB4bWxSZXN1bHQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAvLyB2YXIgaGFzaCA9IENyeXB0b0pTLlNIQTI1Nih4bWxSZXN1bHQpO1xyXG4gICAgICAgICAgICAvL2pzb25PYmpbcm9vdFRhZ10uZGF0YV9jaGVja3N1bSA9IGhhc2gudG9TdHJpbmcoKTtcclxuICAgICAgICAgICAgLy9yZWdlbmVyYXRlIHRoZSB4bWxcclxuICAgICAgICAgICAgLy94bWxSZXN1bHQgPSBjb252ZXJ0SlNPTk9iamVjdHNUb1hNTChqc29uT2JqKVxyXG4gICAgICAgICAgICB2YXIgYmxvYiA9IG5ldyBCbG9iKFt4bWxSZXN1bHRdLCB7dHlwZTogXCJ0ZXh0L3BsYWluO2NoYXJzZXQ9dXRmLThcIn0pO1xyXG4gICAgICAgICAgICBpZiAoIWZpbGVOYW1lKSB7XHJcbiAgICAgICAgICAgICAgICBmaWxlTmFtZSA9IFwiaHBmYlhNTC54bWxcIlxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgZmlsZU5hbWUgKz0gXCIueG1sXCI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgc2F2ZUFzKGJsb2IsIGZpbGVOYW1lKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0pKCk7XHJcblxyXG5cclxuXHJcblxyXG4iLCIvKipcclxuICogQ3JlYXRlZCBieSBka2lsdHkgb24gOC82LzIwMTYuXHJcbiAqL1xyXG4oZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKCdleHBhbmRpbmdUYWJsZScsIFtdKVxyXG59KSgpO1xyXG5cclxuKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgnZXhwYW5kaW5nVGFibGUnKVxyXG4gICAgICAgIC5jb21wb25lbnQoJ2NtcEV4cGFuZGluZ1RhYmxlJywge1xyXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2FwcC9zY3JpcHRzL2NvbXBvbmVudHMvZXhwYW5kaW5nVGFibGUvdHBsLWV4cGFuZGluZy10YWJsZV8yMDE5MDMyMl8xNTQ0Lmh0bWwnLFxyXG4gICAgICAgICAgICBjb250cm9sbGVyOiBleHBhbmRpbmdUYWJsZUN0cmwsXHJcbiAgICAgICAgICAgIGNvbnRyb2xsZXJBczogJ2V4cGFuZFRibEN0cmwnLFxyXG4gICAgICAgICAgICB0cmFuc2NsdWRlOnRydWUsXHJcbiAgICAgICAgICAgIGJpbmRpbmdzOiB7XHJcbiAgICAgICAgICAgICAgICB0aXRsZTogJ0AnLCAvKmRlcHJlY2F0ZWQqL1xyXG4gICAgICAgICAgICAgICAgbGlzdEl0ZW1zOiAnPCcsXHJcbiAgICAgICAgICAgICAgICBjb2x1bW5EZWY6JzwnLFxyXG4gICAgICAgICAgICAgICAgZGlzYWJsZVNlbGVjdGlvbjonPCcsXHJcbiAgICAgICAgICAgICAgICBzZWxlY3RSZWNvcmQ6ICc8JyxcclxuICAgICAgICAgICAgICAgIHJlc2V0VG9Db2xsYXBzZWQ6ICc8JyxcclxuICAgICAgICAgICAgICAgIGRpc2FibGVFcnJDb2x1bW46J0AnLFxyXG4gICAgICAgICAgICAgICAgdG5hbWU6J0AnXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIGV4cGFuZGluZ1RhYmxlQ3RybC4kaW5qZWN0ID0gWyckZmlsdGVyJywnJHNjb3BlJ107XHJcbiAgICBmdW5jdGlvbiBleHBhbmRpbmdUYWJsZUN0cmwoJGZpbHRlciwkc2NvcGUpIHtcclxuICAgICAgICB2YXIgdm0gPSB0aGlzO1xyXG4gICAgICAgIHZtLmZvY3VzZWQgPSBmYWxzZTtcclxuICAgICAgICB2bS5jb2x1bW5EZWZpbml0aW9ucz17fTtcclxuICAgICAgICB2bS5kaXNhYmxlRXhwYW5kPWZhbHNlO1xyXG4gICAgICAgIHZtLnRhYmxlUm93RXhwYW5kZWQgPSBmYWxzZTtcclxuICAgICAgICB2bS50YWJsZVJvd0luZGV4Q3VyckV4cGFuZGVkID0gXCJcIjtcclxuICAgICAgICB2bS50YWJsZVJvd0luZGV4UHJldkV4cGFuZGVkID0gXCJcIjtcclxuICAgICAgICB2bS5udW1iZXJDb2xzPTE7XHJcbiAgICAgICAgdm0uZGlzYWJsZUVycm9yQ29sPWZhbHNlO1xyXG4gICAgICAgIHZtLmRheURhdGFDb2xsYXBzZSA9IF9jcmVhdGVBcnJheSgwLCB0cnVlKTtcclxuICAgICAgICB2bS5mb3JtTmFtZT1cImV4cGFuZFRibEN0cmwudHJhbnNjbHVkZUZvcm1cIjtcclxuXHJcbiAgICAgICAgdm0uJG9uSW5pdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYodm0ubGlzdEl0ZW1zKSB7XHJcbiAgICAgICAgICAgICAgICB2bS5kYXlEYXRhQ29sbGFwc2UgPSBfY3JlYXRlQXJyYXkodm0ubGlzdEl0ZW1zLmxlbmd0aCwgdHJ1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2bS5nZXRFeHBhbmRlZFN0YXRlID0gZnVuY3Rpb24gKHJvdykge1xyXG4gICAgICAgICAgICBpZiAocm93ID09PSB2bS50YWJsZVJvd0luZGV4Q3VyckV4cGFuZGVkKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2VcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2bS4kb25DaGFuZ2VzID0gZnVuY3Rpb24gKGNoYW5nZXMpIHtcclxuXHJcblxyXG4gICAgICAgICAgICBpZiAoY2hhbmdlcy5saXN0SXRlbXMpIHtcclxuICAgICAgICAgICAgICAgIGlmKHZtLmxpc3RJdGVtcykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZtLmRheURhdGFDb2xsYXBzZSA9IF9jcmVhdGVBcnJheSh2bS5saXN0SXRlbXMubGVuZ3RoLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICAgICAgICAgIC8vc2hvdWxkIG5ldmVyIGhhcHBlblxyXG4gICAgICAgICAgICAgICAgICAgIHZtLmRheURhdGFDb2xsYXBzZSA9IF9jcmVhdGVBcnJheSgwLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHZtLnJlc2V0VGFibGVSb3coKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYoY2hhbmdlcy50bmFtZSl7XHJcbiAgICAgICAgICAgICAgICAvL2lmIHRoZSBiaW5kaW5nIGlzIG5vdCBkZWZpbmVkIHdpbGwgZmlyZSBhbmQgYmUgbnVsbFxyXG4gICAgICAgICAgICAgICAgaWYoY2hhbmdlcy50bmFtZS5jdXJyZW50VmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICB2bS5mb3JtTmFtZSA9IGNoYW5nZXMudG5hbWUuY3VycmVudFZhbHVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgIFJlc2V0cyB0aGUgdGFibGUgdG8gY29sbGFwc2VkLiBOb3RlIHRoaXMgIGlzIG5vdCBhIHRydWUgcmVzZXRcclxuICAgICAgICAgICAgIElmIGEgdmFsaWQgaW5kZXggaXMgc2VsZWN0ZWQsIHRvZ2dsZXMgKEV4cGFuZHMpIHRoZSByb3cgYWZ0ZXIgYSByZXNldC5cclxuICAgICAgICAgICAgIFRoaXMgYWxsb3dzIGV4cGFuZGluZyB0aGUgc2FtZSByb3cgaW5kZXggYWZ0ZXIgYSByb3cgaGFzIGJlZW4gYWRkZWQgYXQgdGhlIGJlZ2lubmluZ1xyXG4gICAgICAgICAgICAgRm9yIGEgdHJ1ZSByZXNldCwgZmlyc3Qgc2V0IHNlbGVjdCByZWNvcmQgdG8gLTFcclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIGlmKGNoYW5nZXMucmVzZXRUb0NvbGxhcHNlZCl7XHJcbiAgICAgICAgICAgICAgICAvLyBpZihjaGFuZ2VzLnJlc2V0VG9Db2xsYXBzZWQuY3VycmVudFZhbHVlKXtcclxuICAgICAgICAgICAgICAgICAgICB2bS5yZXNldFRhYmxlUm93KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFjaGFuZ2VzLnNlbGVjdFJlY29yZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVUYWJsZVJvdyh2bS5zZWxlY3RSZWNvcmQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmKGNoYW5nZXMuc2VsZWN0UmVjb3JkKXtcclxuICAgICAgICAgICAgICAgIHZhciBzZWxlY3RJbmRleD1wYXJzZUludChjaGFuZ2VzLnNlbGVjdFJlY29yZC5jdXJyZW50VmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgaWYoc2VsZWN0SW5kZXg+PTApIHtcclxuICAgICAgICAgICAgICAgICAgICB2bS5zZWxlY3RUYWJsZVJvdyhzZWxlY3RJbmRleCk7XHJcbiAgICAgICAgICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgICAgICAgICB2bS5yZXNldFRhYmxlUm93KCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYoY2hhbmdlcy5kaXNhYmxlU2VsZWN0aW9uKXtcclxuICAgICAgICAgICAgICAgIHZtLmRpc2FibGVFeHBhbmQ9Y2hhbmdlcy5kaXNhYmxlU2VsZWN0aW9uLmN1cnJlbnRWYWx1ZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYoY2hhbmdlcy5jb2x1bW5EZWYpIHtcclxuICAgICAgICAgICAgICAgIHZtLm51bWJlckNvbHM9Y2hhbmdlcy5jb2x1bW5EZWYuY3VycmVudFZhbHVlLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgIHZtLmNvbHVtbkRlZmluaXRpb25zID0gX3JlY2FsY3VsYXRlQ29sdW1uRGVmcyhjaGFuZ2VzLmNvbHVtbkRlZi5jdXJyZW50VmFsdWUsICh2bS5udW1iZXJDb2xzKSk7XHJcbiAgICAgICAgICAgICAgICBfc2V0TnVtYmVyQ29sdW1ucygpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYoY2hhbmdlcy5kaXNhYmxlRXJyQ29sdW1uKXtcclxuICAgICAgICAgICAgICAgIHZtLmRpc2FibGVFcnJvckNvbD1jaGFuZ2VzLmRpc2FibGVFcnJDb2x1bW4uY3VycmVudFZhbHVlO1xyXG4gICAgICAgICAgICAgICAgdm0ubnVtYmVyQ29scz12bS5jb2x1bW5EZWYubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgdm0uZGlzYWJsZUVycm9yQ29sPXRydWU7XHJcbiAgICAgICAgICAgICAgICBfc2V0TnVtYmVyQ29sdW1ucygpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIF9zZXROdW1iZXJDb2x1bW5zKCl7XHJcbiAgICAgICAgICAgIGlmKCB2bS5kaXNhYmxlRXJyb3JDb2wpe1xyXG4gICAgICAgICAgICAgICAgLy9jYXJldCBvbmx5XHJcbiAgICAgICAgICAgICAgICB2bS5udW1iZXJDb2xzPSB2bS5udW1iZXJDb2xzKzE7XHJcbiAgICAgICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICAgICAgLy9jYXJldCArIGVycm9yXHJcbiAgICAgICAgICAgICAvLyAgIHZtLm51bWJlckNvbHM9IHZtLm51bWJlckNvbHMrMjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogUmVjYWxjdWxhdGVzIHRoZSBjb2x1bW4gZGVmcyBiYXNlZCBvbiB0aGUgY2FyZXQgY29sdW1uIGFuZCB0aGUgZXJyb3IgY29sdW1uZVxyXG4gICAgICAgICAqIEFzc3VtZXMgdGhhdCB0aGUgY29sdW1uIGRlZmluaXRpb25zIHByb3ZpZGVkIHRvdGFsIDEwMCVcclxuICAgICAgICAgKiBAcGFyYW0gY29sRGVmc1xyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZnVuY3Rpb24gX3JlY2FsY3VsYXRlQ29sdW1uRGVmcyhjb2xEZWZzLG51bUNvbHMpe1xyXG4gICAgICAgICAgICB2YXIgY2FyZXRXaWR0aD0yO1xyXG4gICAgICAgICAgICB2YXIgZXJyb3JXaWR0aD01O1xyXG4gICAgICAgICAgICB2YXIgdG90YWxXaWR0aD1jYXJldFdpZHRoK2Vycm9yV2lkdGg7XHJcbiAgICAgICAgICAgIHZhciB0b1N1YnRyYWN0PXRvdGFsV2lkdGgvbnVtQ29scztcclxuICAgICAgICAgICAgdmFyIHJlc3VsdD1bXTtcclxuICAgICAgICAgICAgLy9kb250JyBib3RoZXIgcmVjYWxjIGlmIG9ubHkgdGhlIGNhcmV0XHJcbiAgICAgICAgICAgIGlmKHZtLmRpc2FibGVFcnJvckNvbCl7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gKGNvbERlZnMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZvcih2YXIgaT0wO2k8bnVtQ29scztpKyspe1xyXG4gICAgICAgICAgICAgICAgdmFyIG9uZURlZj1hbmd1bGFyLmNvcHkoY29sRGVmc1tpXSk7XHJcbiAgICAgICAgICAgICAgICBpZihvbmVEZWYud2lkdGg+dG9TdWJ0cmFjdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG9uZURlZi53aWR0aCA9IG9uZURlZi53aWR0aCAtIHRvU3VidHJhY3Q7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaChvbmVEZWYpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZ1bmN0aW9uIHVwZGF0ZVRhYmxlUm93KHRleHRJbmRleCkge1xyXG4gICAgICAgICAgICB2YXIgc2VsZWN0SW5kZXggPSBwYXJzZUludCh0ZXh0SW5kZXgpO1xyXG4gICAgICAgICAgICBpZiAoc2VsZWN0SW5kZXggPj0gMCkge1xyXG4gICAgICAgICAgICAgICAgdm0uc2VsZWN0VGFibGVSb3coc2VsZWN0SW5kZXgpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH1cclxuICAgICAgICAvL1RPRE8gZ2V0IHZhbHVlIGZyb20gYSBzZXJ2aWNlISFcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUcmFuc2xhdGVzIHdoZW4gYSBmb3JtIGlzIGludmFsaWQgdG8gbG9jYWxpemVkIHRleHRcclxuICAgICAgICAgKiBAcmV0dXJucyB7Kn1cclxuICAgICAgICAgKi9cclxuICAgICAgICB2bS5mb3JtSW5FcnJvcj1mdW5jdGlvbihhRm9ybSl7XHJcbiAgICAgICAgICAgIGlmKCFhRm9ybSkgcmV0dXJuICgnTicpOyAvL3Nob3VsZCBuZXZlciBoYXBwZW5cclxuICAgICAgICAgICAgaWYoYUZvcm0uJGludmFsaWQpe1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuICgnWScpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuICgnTicpXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVXRpbGl0eSBmdW5jdGlvbiBmb3IgZGV0ZXJtaW5pbmcgdGhlIG51bWJlciBvZiBjb2x1bW5zIHRvIGNyZWF0ZVxyXG4gICAgICAgICAqIEBwYXJhbSBteW9ialxyXG4gICAgICAgICAqIEByZXR1cm5zIHtudW1iZXJ9XHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBmdW5jdGlvbiBfZ2V0TnVtYmVyS2V5cyhteW9iail7XHJcbiAgICAgICAgICAgIHZhciBjb3VudCA9IDA7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGsgaW4gbXlvYmopIHtcclxuICAgICAgICAgICAgICAgIGlmIChteW9iai5oYXNPd25Qcm9wZXJ0eShrKSkgY291bnQrKztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gY291bnQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBzcGVjaWZpZWQgc2l6ZSBhbmQgZGVmYXVsdCB2YWx1ZXNcclxuICAgICAgICAgKiBAcGFyYW0gYXJyYXlTaXplXHJcbiAgICAgICAgICogQHBhcmFtIGluaXRpYWxWYWxcclxuICAgICAgICAgKiBAcmV0dXJucyB7QXJyYXl9XHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICAgZnVuY3Rpb24gX2NyZWF0ZUFycmF5KGFycmF5U2l6ZSxpbml0aWFsVmFsKXtcclxuICAgICAgICAgdmFyIGFuQXJyYXkgPSBbXTtcclxuICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnJheVNpemU7IGkrKykgYW5BcnJheS5wdXNoIChpbml0aWFsVmFsKTtcclxuICAgICAgICAgcmV0dXJuIGFuQXJyYXlcclxuICAgICAgICAgfVxyXG5cclxuICAgICAgICB2bS5kZWxldGVkUm93PWZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgIHZtLnRhYmxlUm93RXhwYW5kZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgdm0udGFibGVSb3dJbmRleEN1cnJFeHBhbmRlZCA9IFwiXCI7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAbmdkb2MgcmVzZXRzIHRoZSB0YWJsZSB0byBhIGNvbGxhcHNlZCBzdGF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHZtLnJlc2V0VGFibGVSb3cgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZtLnRhYmxlUm93SW5kZXhQcmV2RXhwYW5kZWQgPSBcIlwiO1xyXG4gICAgICAgICAgICB2bS50YWJsZVJvd0V4cGFuZGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHZtLnRhYmxlUm93SW5kZXhDdXJyRXhwYW5kZWQgPSBcIlwiO1xyXG4gICAgICAgICAgICBpZih2bS5saXN0SXRlbXMpIHtcclxuICAgICAgICAgICAgICAgIHZtLmRheURhdGFDb2xsYXBzZSA9IF9jcmVhdGVBcnJheSh2bS5saXN0SXRlbXMubGVuZ3RoLCB0cnVlKTtcclxuICAgICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgICAgICBfY3JlYXRlQXJyYXkoMCwgdHJ1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdm0uZGF5RGF0YUNvbGxhcHNlRm4gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyB2bS5saXN0SXRlbXMubGVuZ3RoIC0gMTsgaSArPSAxKSB7XHJcbiAgICAgICAgICAgICAgICB2bS5kYXlEYXRhQ29sbGFwc2UuYXBwZW5kKCd0cnVlJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIHZtLnNlbGVjdFRhYmxlUm93ID0gZnVuY3Rpb24gKGluZGV4KSB7XHJcbiAgICAgICAgICAgIC8vaWYgc2VsZWN0aW9uXHJcbiAgICAgICAgIGlmICh2bS5kaXNhYmxlRXhwYW5kKSByZXR1cm47XHJcbiAgICAgICAgICAgIGlmICh2bS5kYXlEYXRhQ29sbGFwc2UgPT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgICAgICB2bS5kYXlEYXRhQ29sbGFwc2UgPSB2bS5kYXlEYXRhQ29sbGFwc2VGbigpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICh2bS50YWJsZVJvd0V4cGFuZGVkID09PSBmYWxzZSAmJiB2bS50YWJsZVJvd0luZGV4Q3VyckV4cGFuZGVkID09PSBcIlwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdm0udGFibGVSb3dJbmRleFByZXZFeHBhbmRlZCA9IFwiXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgdm0udGFibGVSb3dFeHBhbmRlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgdm0udGFibGVSb3dJbmRleEN1cnJFeHBhbmRlZCA9IGluZGV4O1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIHZtLnN0b3JlSWRFeHBhbmRlZCA9IHN0b3JlSWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgdm0uZGF5RGF0YUNvbGxhcHNlW2luZGV4XSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh2bS50YWJsZVJvd0V4cGFuZGVkID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZtLnRhYmxlUm93SW5kZXhDdXJyRXhwYW5kZWQgPT09IGluZGV4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZtLnRhYmxlUm93RXhwYW5kZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdm0udGFibGVSb3dJbmRleEN1cnJFeHBhbmRlZCA9IFwiXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZtLmRheURhdGFDb2xsYXBzZVtpbmRleF0gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZtLnRhYmxlUm93SW5kZXhQcmV2RXhwYW5kZWQgPSB2bS50YWJsZVJvd0luZGV4Q3VyckV4cGFuZGVkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2bS50YWJsZVJvd0luZGV4Q3VyckV4cGFuZGVkID0gaW5kZXg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICB2bS5zdG9yZUlkRXhwYW5kZWQgPSBzdG9yZUlkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2bS5kYXlEYXRhQ29sbGFwc2Vbdm0udGFibGVSb3dJbmRleFByZXZFeHBhbmRlZF0gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2bS5kYXlEYXRhQ29sbGFwc2Vbdm0udGFibGVSb3dJbmRleEN1cnJFeHBhbmRlZF0gPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG5cclxuICAgIH1cclxuXHJcblxyXG5cclxufSkoKTtcclxuIiwiLyoqXHJcbiAqIENyZWF0ZWQgYnkgQWJkZXNzYW1hZCBvbiA3LzUvMjAxNi5cclxuICovXHJcblxyXG4oZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKCdjb250YWN0TW9kdWxlJywgW1xyXG4gICAgICAgICAgICAnZGF0YUxpc3RzJyxcclxuICAgICAgICAgICAgJ2hwZmJDb25zdGFudHMnLFxyXG4gICAgICAgICAgICAnZXJyb3JNZXNzYWdlTW9kdWxlJ1xyXG4gICAgICAgIF0pXHJcbn0pKCk7XHJcblxyXG4oZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKCdjb250YWN0TW9kdWxlJylcclxuICAgICAgICAuY29tcG9uZW50KCdjbXBDb250YWN0RGV0YWlscycse1xyXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2FwcC9zY3JpcHRzL2NvbXBvbmVudHMvY29udGFjdERldGFpbHMvdHBsLWNvbnRhY3QtZGV0YWlsc18yMDE5MDMyMl8xNTQ0Lmh0bWwnLFxyXG4gICAgICAgICAgICBjb250cm9sbGVyOiBjb250YWN0Q3RybCxcclxuICAgICAgICAgICAgY29udHJvbGxlckFzOiAnY29udEN0cmwnLFxyXG4gICAgICAgICAgICBiaW5kaW5nczoge1xyXG4gICAgICAgICAgICAgICAgY29udGFjdFJlY29yZDogJzwnLFxyXG4gICAgICAgICAgICAgICAgb25VcGRhdGU6ICcmJywgLy9zaG91bGQgYmUgcmVtb3ZlZCBub3QgdXNlZCwgZGVwcmVjYXRlZFxyXG4gICAgICAgICAgICAgICAgaXNBbWVuZDogJzwnLFxyXG4gICAgICAgICAgICAgICAgc2hvd0Vycm9yczogJyYnLFxyXG4gICAgICAgICAgICAgICAgZmF4TWFuZGF0b3J5OidAJyxcclxuICAgICAgICAgICAgICAgIHVwZGF0ZUVycm9yU3VtbWFyeTonJicsXHJcbiAgICAgICAgICAgICAgICBmaWVsZFN1ZmZpeDonPCdcclxuICAgICAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgY29udGFjdEN0cmwuJGluamVjdCA9IFsnZ2V0Q29udGFjdExpc3RzJywnRU5HTElTSCcsJ0ZSRU5DSCcsJyRzY29wZSddO1xyXG4gICAgZnVuY3Rpb24gY29udGFjdEN0cmwoIGdldENvbnRhY3RMaXN0cyxFTkdMSVNILEZSRU5DSCwkc2NvcGUpIHtcclxuICAgICAgICB2YXIgdm0gPSB0aGlzO1xyXG4gICAgICAgIHZtLmlzRWRpdGFibGUgPSB0cnVlO1xyXG4gICAgICAgIHZtLm5nTW9kZWxPcHRTZXR0aW5nID0ge3VwZGF0ZU9uOiAnYmx1cid9O1xyXG4gICAgICAgIHZtLnNhbHV0YXRpb25MaXN0ID0gZ2V0Q29udGFjdExpc3RzLmdldFNhbHV0YXRpb25MaXN0KCk7XHJcbiAgICAgICAgdm0ubGFuZ0NvcnJlc3Bwb25kPVtFTkdMSVNILEZSRU5DSF07XHJcbiAgICAgICAgdm0uZmF4UmVxdWlyZWQ9ZmFsc2U7IC8vZGVmYXVsdCB0byBmYWxzZSBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHlcclxuICAgICAgICB2bS5waG9uZVJlZz0vXFwoPyhbMC05XXszfSlcXCk/KFsgLi1dPykoWzAtOV17M30pXFwyKFswLTldezR9KS87XHJcbiAgICAgICAgdm0uY29udGFjdE1vZGVsID0ge1xyXG4gICAgICAgICAgICBzYWx1dGF0aW9uOiBcIlwiLFxyXG4gICAgICAgICAgICBnaXZlbk5hbWU6IFwiXCIsXHJcbiAgICAgICAgICAgIHN1cm5hbWU6IFwiXCIsXHJcbiAgICAgICAgICAgIGluaXRpYWxzOiBcIlwiLFxyXG4gICAgICAgICAgICB0aXRsZTogXCJcIixcclxuICAgICAgICAgICAgcGhvbmU6IFwiXCIsXHJcbiAgICAgICAgICAgIHBob25lRXh0OiBcIlwiLFxyXG4gICAgICAgICAgICBmYXg6IFwiXCJcclxuICAgICAgICB9O1xyXG4gICAgICAgIHZtLmlucHV0TW9kZWxPcHRpb25zPXt1cGRhdGVPbjogJ2JsdXInfTtcclxuICAgICAgICB2bS5mbGRJZD1cIlwiOyAvL3VzZWQgdG8gZHluYW1pY2FsbHkgZGlzdGluZ3Vpc2ggZmllbGRzIGRlZmF1bHQgdG8gZW1wdHkgZm9yIGJhY2t3YXJkcyBjb21wYXRcclxuICAgICAgICB2bS5yZXF1aXJlZE9ubHkgPSBbe3R5cGU6IFwicmVxdWlyZWRcIiwgZGlzcGxheUFsaWFzOiBcIk1TR19FUlJfTUFORFwifV07XHJcbiAgICAgICAgdm0uZW1haWxFcnJvcj1be3R5cGU6IFwicmVxdWlyZWRcIiwgZGlzcGxheUFsaWFzOiBcIk1TR19FUlJfTUFORFwifSx7dHlwZTogXCJlbWFpbFwiLCBkaXNwbGF5QWxpYXM6IFwiTVNHX0VSUl9FTUFJTF9GT1JNQVRcIn1dO1xyXG4gICAgICAgIHZtLnBob25lRXJyb3I9W3t0eXBlOiBcInJlcXVpcmVkXCIsIGRpc3BsYXlBbGlhczogXCJNU0dfRVJSX01BTkRcIn0se3R5cGU6IFwicGF0dGVyblwiLCBkaXNwbGF5QWxpYXM6IFwiTVNHX0VSUl9QSE9ORV9GT1JNQVRcIn1dO1xyXG4gICAgICAgIHZtLmZheEVycm9yPVt7dHlwZTogXCJyZXF1aXJlZFwiLCBkaXNwbGF5QWxpYXM6IFwiTVNHX0VSUl9NQU5EXCJ9LHt0eXBlOiBcInBhdHRlcm5cIiwgZGlzcGxheUFsaWFzOiBcIk1TR19FUlJfRkFYX0ZPUk1BVFwifV07XHJcbiAgICAgICAgdm0uJG9uSW5pdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICB2bS5sYW5nTGlzdD1bRU5HTElTSCxGUkVOQ0hdO1xyXG4gICAgICAgICAgICBfc2V0SWROYW1lcygpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZtLiRvbkNoYW5nZXM9ZnVuY3Rpb24oY2hhbmdlcyl7XHJcbiAgICAgICAgICAgIGlmKGNoYW5nZXMuY29udGFjdFJlY29yZCl7XHJcbiAgICAgICAgICAgICAgICB2bS5jb250YWN0TW9kZWwgPSBjaGFuZ2VzLmNvbnRhY3RSZWNvcmQuY3VycmVudFZhbHVlO1xyXG5cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoY2hhbmdlcy5pc0FtZW5kKSB7XHJcbiAgICAgICAgICAgICAgICB2bS5pc0VkaXRhYmxlID0gY2hhbmdlcy5pc0FtZW5kLmN1cnJlbnRWYWx1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZihjaGFuZ2VzLmZheE1hbmRhdG9yeSl7XHJcbiAgICAgICAgICAgICAgIHZtLmZheFJlcXVpcmVkPWNoYW5nZXMuZmF4TWFuZGF0b3J5LmN1cnJlbnRWYWx1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZihjaGFuZ2VzLmZpZWxkU3VmZml4KXtcclxuICAgICAgICAgICAgICAgIHZtLmZsZElkPWNoYW5nZXMuZmllbGRTdWZmaXguY3VycmVudFZhbHVlO1xyXG4gICAgICAgICAgICAgICAgaWYoIXZtLmZsZElkKXtcclxuICAgICAgICAgICAgICAgICAgICB2bS5mbGRJZD1cIlwiO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH07XHJcbiAgICAgICAgdm0uc2hvd0Vycm9yPWZ1bmN0aW9uKGN0cmwpe1xyXG4gICAgICAgICAgICBpZighY3RybCl7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYoKGN0cmwuJGludmFsaWQgJiYgY3RybC4kdG91Y2hlZCkgfHwgKHZtLnNob3dFcnJvcnMoKSYmY3RybC4kaW52YWxpZCApKXtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBfc2V0SWROYW1lcygpIHtcclxuICAgICAgICAgICAgdmFyIHNjb3BlSWQgPSB2bS5mbGRJZCsgXCJfXCIgKyAkc2NvcGUuJGlkO1xyXG4gICAgICAgICAgICB2bS5zYWx1dGF0aW9uSWQgPSBcInNhbHV0YXRpb25cIiArIHNjb3BlSWQ7XHJcbiAgICAgICAgICAgIHZtLmZpcnN0TmFtZUlkPVwiZmlyc3ROYW1lXCIgKyBzY29wZUlkO1xyXG4gICAgICAgICAgICB2bS5sYXN0TmFtZUlkPVwibGFzdE5hbWVcIiArIHNjb3BlSWQ7XHJcbiAgICAgICAgICAgIHZtLmxhbmdDb3JyZXNwb25kSWQ9XCJsYW5nQ29ycmVzcG9uZFwiICsgc2NvcGVJZDtcclxuICAgICAgICAgICAgdm0uam9iVGl0bGVJZD1cImpvYlRpdGxlXCIgKyBzY29wZUlkO1xyXG4gICAgICAgICAgICB2bS5mYXhJZD1cImZheF9udW1iZXJcIiArIHNjb3BlSWQ7XHJcbiAgICAgICAgICAgIHZtLnBob25lTnVtYmVySWQ9XCJwaG9uZU51bWJlclwiICsgc2NvcGVJZDtcclxuICAgICAgICAgICAgdm0ucGhvbmVFeHRJZD1cInBob25lRXh0XCIgKyBzY29wZUlkO1xyXG4gICAgICAgICAgICB2bS5jb250YWN0RW1haWxJZD1cImNvbnRhY3RFbWFpbFwiICsgc2NvcGVJZDtcclxuICAgICAgICB9XHJcbiAgICAgICAgJHNjb3BlLiR3YXRjaCgnY29udEN0cmwuY29udGFjdEZvcm0uJGVycm9yJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2bS51cGRhdGVFcnJvclN1bW1hcnkoKTtcclxuICAgICAgICB9LCB0cnVlKTtcclxuICAgIH1cclxuXHJcbn0pKCk7XHJcblxyXG4iLCIvKipcclxuICogQ3JlYXRlZCBieSBka2lsdHkgb24gMTYvMDgvMjAxNi5cclxuICovXHJcblxyXG4oZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKCd0cmFuc2FjdGlvbkluZm8nLFxyXG4gICAgICAgICAgICBbJ2xpZmVjeWNsZUxpc3QnLFxyXG4gICAgICAgICAgICAgICAgJ3JlcXVlc3Rlckxpc3RNb2R1bGUnLFxyXG4gICAgICAgICAgICAgICAgJ2ZpbHRlckxpc3RzJyxcclxuICAgICAgICAgICAgICAgICdocGZiQ29uc3RhbnRzJyxcclxuICAgICAgICAgICAgICAgICd1aS5ib290c3RyYXAnLFxyXG4gICAgICAgICAgICAgICAgJ2RhdGFMaXN0cycsXHJcbiAgICAgICAgICAgICAgICAndWkuc2VsZWN0JyxcclxuICAgICAgICAgICAgICAgICdhZGRyZXNzTW9kdWxlJyxcclxuICAgICAgICAgICAgICAgICdjb250YWN0TW9kdWxlJyxcclxuICAgICAgICAgICAgICAgICd0cmFuc2FjdGlvbkZlZXNNb2R1bGUnLFxyXG4gICAgICAgICAgICAgICAgJ2FsZXJ0TW9kdWxlJyxcclxuICAgICAgICAgICAgICAgICdlcnJvck1lc3NhZ2VNb2R1bGUnXHJcbiAgICAgICAgICAgIF0pXHJcbn0pKCk7XHJcblxyXG4oZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKCd0cmFuc2FjdGlvbkluZm8nKVxyXG4gICAgICAgIC5jb25maWcoZnVuY3Rpb24gKHVpU2VsZWN0Q29uZmlnKSB7XHJcbiAgICAgICAgICAgIC8vY2hvaWNlczogc2VsZWN0MiwgYm9vdHN0cmFwLCBzZWxlY3RpemVcclxuICAgICAgICAgICAgdWlTZWxlY3RDb25maWcudGhlbWUgPSAnc2VsZWN0Mic7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAuY29tcG9uZW50KCdjbXBUcmFuc2FjdGlvbkluZm8nLCB7XHJcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnYXBwL3NjcmlwdHMvY29tcG9uZW50cy90cmFuc2FjdGlvbkluZm8vdHBsLXRyYW5zYWN0aW9uLWluZm9fMjAxOTAzMjJfMTU0NC5odG1sJyxcclxuICAgICAgICAgICAgY29udHJvbGxlcjogdHJhbnNhY3Rpb25JbmZvQ3RybCxcclxuICAgICAgICAgICAgY29udHJvbGxlckFzOiAndHJhbnNJbmZvQ3RybCcsXHJcbiAgICAgICAgICAgIGJpbmRpbmdzOiB7XHJcbiAgICAgICAgICAgICAgICB0cmFuc2FjdGlvblJvb3Q6ICc8JyxcclxuICAgICAgICAgICAgICAgIC8vb25VcGRhdGU6ICcmJyxcclxuICAgICAgICAgICAgICAgIGlzQW1lbmQ6ICc8JyxcclxuICAgICAgICAgICAgICAgIGlzRmluYWw6ICc8JyxcclxuICAgICAgICAgICAgICAgIGdldFRyYW5zYWN0aW9uOiAnJicsXHJcbiAgICAgICAgICAgICAgICBzZXRTdGFydGluZ1NlcXVlbmNlOicmJyxcclxuICAgICAgICAgICAgICAgIGdldFJlcENvbnRhY3Q6ICcmJyxcclxuICAgICAgICAgICAgICAgIGdldEZlZTonJicsXHJcbiAgICAgICAgICAgICAgICByZXNldEVjdGQ6ICcmJyxcclxuICAgICAgICAgICAgICAgIGRlcHJlY2F0ZVNlcXVlbmNlOiAnJicsXHJcbiAgICAgICAgICAgICAgICBsYW5ndWFnZTonPCcsXHJcbiAgICAgICAgICAgICAgICBzZXF1ZW5jZVVwZGF0ZWQ6JzwnLFxyXG4gICAgICAgICAgICAgICAgZ2V0Q3VycmVudFNlcXVlbmNlOicmJyxcclxuICAgICAgICAgICAgICAgIHNob3dFcnJvclN1bW1hcnk6ICc8JyxcclxuICAgICAgICAgICAgICAgIHVwZGF0ZUVycm9yU3VtbWFyeTonJidcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgIHRyYW5zYWN0aW9uSW5mb0N0cmwuJGluamVjdCA9IFsnJHNjb3BlJywgJ09USEVSJywgJ1lFUycsICdOTycsICdORVcnLCAnRVhJU1RJTkcnLCAnZ2V0Q29udGFjdExpc3RzJywgJ2dldFJvbGVMaXN0cycsICdFTkdMSVNIJywgJ0ZSRU5DSCddO1xyXG4gICAgZnVuY3Rpb24gdHJhbnNhY3Rpb25JbmZvQ3RybCgkc2NvcGUsT1RIRVIsWUVTLE5PLE5FVyxFWElTVElORyxnZXRDb250YWN0TGlzdHMsZ2V0Um9sZUxpc3RzLEVOR0xJU0gsRlJFTkNIKSB7XHJcbiAgICAgICAgdmFyIHZtID0gdGhpcztcclxuICAgICAgICB2bS5uZ01vZGVsT3B0U2V0dGluZyA9IHt1cGRhdGVPbjogJ2JsdXInfTtcclxuICAgICAgICB2bS50cmFuc2FjdGlvbk1vZGVsID0ge1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgdm0ueWVzTm9MaXN0ID0gW1lFUywgTk9dO1xyXG4gICAgICAgIHZtLm5ld0V4aXN0aW5nTGlzdCA9IFtORVcsIEVYSVNUSU5HXTtcclxuICAgICAgICB2bS5zaG93TmV3QWN0aXZpdHlGaWVsZHMgPSBmYWxzZTtcclxuICAgICAgICB2bS5zaG93VGhpcmRQYXJ0eU5vdGUgPSBmYWxzZTtcclxuICAgICAgICB2bS5zaG93QWRtaW5TdWIgPSBmYWxzZTtcclxuICAgICAgICB2bS5zaG93RWN0ZFNlY3Rpb24gPSB0cnVlO1xyXG4gICAgICAgIHZtLnNob3dTb2xpY2l0ZWREZXRhaWwgPSBmYWxzZTtcclxuICAgICAgICB2bS5zaG93T3RoZXJTb2xpY2l0ZWREZXRhaWwgPSBmYWxzZTtcclxuICAgICAgICB2bS5hY3Rpdml0eUVkaXRhYmxlID0gdHJ1ZTtcclxuICAgICAgICB2bS5pc0VjdGQgPSBmYWxzZTtcclxuICAgICAgICB2bS5hbGVydHMgPSBbZmFsc2UsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIGZhbHNlXTtcclxuICAgICAgICB2bS5yZXF1ZXN0ZXJMaXN0ID0gW107XHJcbiAgICAgICAgdm0udXNlckxpc3QgPSBbXTtcclxuICAgICAgICB2bS5mb3JtVHlwZUxpc3QgPSBnZXRSb2xlTGlzdHMuZ2V0Rm9ybVR5cGVzKCk7XHJcbiAgICAgICAgdm0ubGFuZz1FTkdMSVNIO1xyXG4gICAgICAgIHZtLnNlcXVlbmNlQ2hhbmdlPWZhbHNlO1xyXG4gICAgICAgIHZtLnJlcXVpcmVkT25seSA9IFt7dHlwZTogXCJyZXF1aXJlZFwiLCBkaXNwbGF5QWxpYXM6IFwiTVNHX0VSUl9NQU5EXCJ9XTtcclxuICAgICAgICB2bS5taW41RXJyb3IgPSBbXHJcbiAgICAgICAgICAgIHt0eXBlOiBcInJlcXVpcmVkXCIsIGRpc3BsYXlBbGlhczogXCJNU0dfRVJSX01BTkRcIn0sXHJcbiAgICAgICAgICAgIHt0eXBlOiBcIm1pbmxlbmd0aFwiLCBkaXNwbGF5QWxpYXM6IFwiTVNHX0xFTkdUSF9NSU41XCJ9XHJcbiAgICAgICAgXTtcclxuICAgICAgICB2bS5taW43RXJyb3IgPSBbXHJcbiAgICAgICAgICAgIHt0eXBlOiBcInJlcXVpcmVkXCIsIGRpc3BsYXlBbGlhczogXCJNU0dfRVJSX01BTkRcIn0sXHJcbiAgICAgICAgICAgIHt0eXBlOiBcIm1pbmxlbmd0aFwiLCBkaXNwbGF5QWxpYXM6IFwiTVNHX0xFTkdUSF83XCJ9XHJcbiAgICAgICAgXTtcclxuICAgICAgICB2bS5zaG93U3VtbWFyeT1mYWxzZTtcclxuXHJcbiAgICAgICAgdm0uJG9uSW5pdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgX3NldElkTmFtZXMoKTtcclxuICAgICAgICAgICAgdm0udXBkYXRlQWN0aXZpdHlUeXBlKCk7XHJcbiAgICAgICAgICAgIHZtLnNldFRoaXJkUGFydHkoKTtcclxuICAgICAgICAgICAgdm0uc2V0QWRtaW5TdWJtaXNzaW9uKCk7XHJcbiAgICAgICAgICAgIHZtLnVwZGF0ZUVjdGRTdGF0ZSgpO1xyXG4gICAgICAgICAgICB2bS5zZXRTb2xpY2l0ZWRTdGF0ZSgpO1xyXG4gICAgICAgICAgICBsb2FkQWRtaW5TdWJEYXRhKCk7XHJcbiAgICAgICAgICAgLy8gbG9hZENvbnRhY3REYXRhKCk7XHJcbiAgICAgICAgICAgIGxvYWRVc2VyTGlzdERhdGEoKTtcclxuICAgICAgICAgICAgdm0uZmluYWxTdGF0ZT1mYWxzZTtcclxuICAgICAgICAgICAgdm0uZGlzcGxheVJlc2V0QnRuID0gZmFsc2U7XHJcbiAgICAgICAgfTtcclxuXHJcblxyXG4gICAgICAgIHZtLiRvbkNoYW5nZXMgPSBmdW5jdGlvbiAoY2hhbmdlcykge1xyXG4gICAgICAgICAgICBpZiAoY2hhbmdlcy50cmFuc2FjdGlvblJvb3QpIHtcclxuICAgICAgICAgICAgICAgIHZtLnRyYW5zYWN0aW9uTW9kZWwgPSBjaGFuZ2VzLnRyYW5zYWN0aW9uUm9vdC5jdXJyZW50VmFsdWU7XHJcbiAgICAgICAgICAgICAgICB2bS51cGRhdGVBY3Rpdml0eVR5cGUoKTtcclxuICAgICAgICAgICAgICAgIHZtLnNldFRoaXJkUGFydHkoKTtcclxuICAgICAgICAgICAgICAgIHZtLnNldEFkbWluU3VibWlzc2lvbigpO1xyXG4gICAgICAgICAgICAgICAgdm0udXBkYXRlRWN0ZFN0YXRlKCk7XHJcbiAgICAgICAgICAgICAgICB2bS5zZXRTb2xpY2l0ZWRTdGF0ZSgpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZihjaGFuZ2VzLmxhbmd1YWdlKXtcclxuXHJcbiAgICAgICAgICAgICAgICB2bS5sYW5nPWNoYW5nZXMubGFuZ3VhZ2UuY3VycmVudFZhbHVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmKGNoYW5nZXMuc2VxdWVuY2VVcGRhdGVkKXtcclxuICAgICAgICAgICAgICAgIHZtLnNlcXVlbmNlQ2hhbmdlPWNoYW5nZXMuc2VxdWVuY2VVcGRhdGVkLmN1cnJlbnRWYWx1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZihjaGFuZ2VzLnNob3dFcnJvclN1bW1hcnkpe1xyXG4gICAgICAgICAgICAgICAgdm0uc2hvd1N1bW1hcnk9Y2hhbmdlcy5zaG93RXJyb3JTdW1tYXJ5LmN1cnJlbnRWYWx1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZihjaGFuZ2VzLmlzRmluYWwpe1xyXG4gICAgICAgICAgICAgICAgdm0uZmluYWxTdGF0ZSA9IGNoYW5nZXMuaXNGaW5hbC5jdXJyZW50VmFsdWU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgLy8gaWYoY2hhbmdlcy5kaXNhYmxlRmluYWxYbWxCdG4pe1xyXG4gICAgICAgICAgICAgIC8vICB2bS5kaXNhYmxlRmluYWxYbWwgPSBjaGFuZ2VzLmRpc2FibGVGaW5hbFhtbEJ0bi5jdXJyZW50VmFsdWU7XHJcblxyXG4gICAgICAgICAgIC8vIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2bS5pc0ZlZXNJbmRpY2F0ZWQ9ZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB2bS50cmFuc2FjdGlvbk1vZGVsLmlzRmVlcyA9PT0gWUVTO1xyXG4gICAgICAgIH07XHJcblxyXG5cclxuXHJcbiAgICAgICAgdm0uZ2V0TmV3VHJhbnNhY3Rpb24gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAodm0uZ2V0VHJhbnNhY3Rpb24oKSk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdm0uc2V0U2VxdWVuY2U9ZnVuY3Rpb24oc3RhcnQpe1xyXG5cclxuICAgICAgICAgICAgaWYoaXNOYU4oc3RhcnQpIHx8c3RhcnQgPT09IG51bGwpe1xyXG4gICAgICAgICAgICAgICAgc3RhcnQ9MDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2bS5zZXRTdGFydGluZ1NlcXVlbmNlKHtzdGFydFZhbDpzdGFydH0pO1xyXG5cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2bS5nZXROZXdSZXBDb250YWN0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gKHZtLmdldFJlcENvbnRhY3QoKSk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdm0uc3VidHJhY3RTZXF1ZW5jZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdm0uZGVwcmVjYXRlU2VxdWVuY2UoKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvL3RlbXAgdXNlZCBmb3IgYXV0aW1hdGlvbiB0ZXN0aW5nLiBJZ25vcmUgZm9yIGNvZGluZ1xyXG4gICAgICAgIHZtLnNob3dGb3JtRXJyb3JzID0gZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICAgIC8vICByZXR1cm4gKHZtLnNob3dFcnJvcnMoKSlcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvL1RPRE8gOiBuZWVkZWQgZm9yIHN1YmNvbXBvbmVudHMsIHJlcGxhY2Ugd2l0aCBvbmUgd2F5IGJpbmRpbmc/XHJcbiAgICAgICAgdm0uc2hvd0Vycm9ycz1mdW5jdGlvbigpe1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuICB2bS5zaG93U3VtbWFyeTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2bS5zaG93RXJyb3IgPSBmdW5jdGlvbiAoY3RybCkge1xyXG4gICAgICAgICAgICBpZiAoIWN0cmwpIHJldHVybjtcclxuXHJcbiAgICAgICAgICAgIGlmICgoY3RybC4kaW52YWxpZCAmJiBjdHJsLiR0b3VjaGVkKSB8fCAodm0uc2hvd1N1bW1hcnkgJiYgY3RybC4kaW52YWxpZCApKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdm0udXBkYXRlQWN0aXZpdHlUeXBlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2bS5zaG93TmV3QWN0aXZpdHlGaWVsZHMgPSBpc05ld0FjdGl2aXR5KCk7XHJcbiAgICAgICAgICAgIGlmKCF2bS5zaG93TmV3QWN0aXZpdHlGaWVsZHMpe1xyXG4gICAgICAgICAgICAgICAgdm0udHJhbnNhY3Rpb25Nb2RlbC5pc1RoaXJkUGFydHkgPSBcIlwiO1xyXG4gICAgICAgICAgICAgICAgdm0udHJhbnNhY3Rpb25Nb2RlbC5pc1ByaW9yaXR5ID0gXCJcIjtcclxuICAgICAgICAgICAgICAgIHZtLnRyYW5zYWN0aW9uTW9kZWwuaXNOb2MgPSBcIlwiO1xyXG4gICAgICAgICAgICAgICAgdm0udHJhbnNhY3Rpb25Nb2RlbC5pc0FkbWluU3ViID0gXCJcIjtcclxuICAgICAgICAgICAgICAgIHZtLnRyYW5zYWN0aW9uTW9kZWwuc3ViVHlwZSA9IFwiXCI7XHJcbiAgICAgICAgICAgICAgICB2bS5zaG93VGhpcmRQYXJ0eU5vdGUgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIHZtLnNob3dBZG1pblN1YiA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZtLnNldFRoaXJkUGFydHkgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZtLnNob3dUaGlyZFBhcnR5Tm90ZSA9ICh2bS50cmFuc2FjdGlvbk1vZGVsLmlzVGhpcmRQYXJ0eSA9PT0gWUVTKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2bS51cGRhdGVFY3RkU3RhdGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmIChpc0VjdGRWYWx1ZSgpKSB7XHJcbiAgICAgICAgICAgICAgICB2bS5pc0VjdGQgPSB0cnVlO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdm0uaXNFY3RkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIHZtLnVwZGF0ZUZlZVN0YXRlPWZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICBpZih2bS50cmFuc2FjdGlvbk1vZGVsLmlzRmVlcyA9PT0gWUVTKXtcclxuICAgICAgICAgICAgICB2bS50cmFuc2FjdGlvbk1vZGVsLmZlZURldGFpbHMgPSB2bS5nZXRGZWUoKTtcclxuXHJcbiAgICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgICAvL2NsZWFyIG91dCBhbGwgdGhlIGZlZSBkZXRhaWxzXHJcbiAgICAgICAgICAgICAgdm0udHJhbnNhY3Rpb25Nb2RlbC5mZWVEZXRhaWxzID0gbnVsbDtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfTtcclxuICAgICAgICBmdW5jdGlvbiBpc0VjdGRWYWx1ZSgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHZtLnRyYW5zYWN0aW9uTW9kZWwuaXNFY3RkID09PSBZRVM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBpc1NvbGljaXRlZFZhbHVlKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdm0udHJhbnNhY3Rpb25Nb2RlbC5pc1NvbGljaXRlZCA9PT0gWUVTO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gaXNBY3Rpdml0eUNoYW5nZXNWYWx1ZSgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHZtLnRyYW5zYWN0aW9uTW9kZWwuaXNBY3Rpdml0eUNoYW5nZXMgPT09IFlFUztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGlzTmV3QWN0aXZpdHkoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB2bS50cmFuc2FjdGlvbk1vZGVsLnRyYW5zYWN0aW9uVHlwZSA9PT0gTkVXO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gbG9hZEFkbWluU3ViRGF0YSgpIHtcclxuICAgICAgICAgICAgZ2V0Q29udGFjdExpc3RzLmdldEFkbWluU3ViVHlwZSgpXHJcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZtLmFkbWluU3ViVHlwZUxpc3QgPSBkYXRhO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICBmdW5jdGlvbiBsb2FkTWl0aWdhdGlvbkRhdGEoKSB7XHJcbiAgICAgICAgICAgIGdldENvbnRhY3RMaXN0cy5nZXRNaXRpZ2F0aW9uVHlwZSgpXHJcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZtLm1pdGlnYXRpb25UeXBlTGlzdCA9IGRhdGE7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGxvYWRDb250YWN0RGF0YSgpIHtcclxuICAgICAgICAgICAgZ2V0Q29udGFjdExpc3RzLmdldEludGVybmFsQ29udGFjdHMoKVxyXG4gICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgICAgICAgICAgICAgICAgICB2bS5yZXF1ZXN0ZXJMaXN0ID0gZGF0YTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICAgKiovXHJcbiAgICAgICAgZnVuY3Rpb24gbG9hZFVzZXJMaXN0RGF0YSgpIHtcclxuICAgICAgICAgICAgZ2V0Q29udGFjdExpc3RzLmdldEludGVybmFsQ29udGFjdHNXaXRob3V0T3RoZXIoKVxyXG4gICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgICAgICAgICAgICAgICAgICB2bS51c2VyTGlzdCA9IGRhdGE7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAbmdkb2MgbWV0aG9kIHNldHMgdGhlIHZpc2liaWx0eSBvZiB0aGUgc29saWNpdGVkIHJlcXVlc3RlciBmaWVsZC4gQ2xlYXJzXHJcbiAgICAgICAgICogdGhlIGRhdGEgaWYgdGhlIGZpZWxkIGlzIGhpZGRlblxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHZtLnNldFNvbGljaXRlZFN0YXRlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAoaXNTb2xpY2l0ZWRWYWx1ZSgpKSB7XHJcbiAgICAgICAgICAgICAgICB2bS5zaG93U29saWNpdGVkRGV0YWlsID0gdHJ1ZTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHZtLnNob3dTb2xpY2l0ZWREZXRhaWwgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIHZtLnRyYW5zYWN0aW9uTW9kZWwuc29saWNpdGVkUmVxdWVzdGVyUmVvcmQgPSBbXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZtLnVwZGF0ZUFjdGl2aXR5Q2hhbmdlcyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdm0uYWN0aXZpdHlFZGl0YWJsZSA9IGlzQWN0aXZpdHlDaGFuZ2VzVmFsdWUoKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2bS51cGRhdGVSZXF1ZXN0ZXJMaXN0ID0gZnVuY3Rpb24obGlzdCl7XHJcbiAgICAgICAgICAgIGlmKCFsaXN0KSByZXR1cm47XHJcbiAgICAgICAgICAgIHZtLnRyYW5zYWN0aW9uTW9kZWwuc29saWNpdGVkUmVxdWVzdGVyUmVvcmQgPSBsaXN0O1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFNldHMgdGhlIHZpc2liaWxpdHkgYW5kIHN0YXRlIG9mIHRoZSByZWxhdGVkIGFjdGl2aXRpZXNcclxuICAgICAgICAgKi9cclxuICAgICAgICB2bS5zZXRBZG1pblN1Ym1pc3Npb24gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmICh2bS50cmFuc2FjdGlvbk1vZGVsLmlzQWRtaW5TdWIgPT09IFlFUykge1xyXG4gICAgICAgICAgICAgICAgdm0uc2hvd0FkbWluU3ViID0gdHJ1ZTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHZtLnNob3dBZG1pblN1YiA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgdm0udHJhbnNhY3Rpb25Nb2RlbC5zdWJUeXBlID0gXCJcIjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIE9wZW4gdGhlIGluc3RydWN0aW9uIGFsZXJ0c1xyXG4gICAgICAgICAqIEBwYXJhbSB2YWx1ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHZtLmFkZEluc3RydWN0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XHJcblxyXG4gICAgICAgICAgICBpZiAoYW5ndWxhci5pc1VuZGVmaW5lZCh2YWx1ZSkpIHJldHVybjtcclxuICAgICAgICAgICAgaWYgKHZhbHVlIDwgdm0uYWxlcnRzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgdm0uYWxlcnRzW3ZhbHVlXSA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBDbG9zZSB0aGUgaW5zdHJ1Y3Rpb24gYWxlcnRzXHJcbiAgICAgICAgICogQHBhcmFtIHZhbHVlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdm0uY2xvc2VBbGVydCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICBpZiAoYW5ndWxhci5pc1VuZGVmaW5lZCh2YWx1ZSkpIHJldHVybjtcclxuICAgICAgICAgICAgaWYgKHZhbHVlIDwgdm0uYWxlcnRzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgdm0uYWxlcnRzW3ZhbHVlXSA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLyoqKlxyXG4gICAgICAgICAqIHVzZWQgdG8gZGV0ZXJtaW5lIHRoZSBmb3JtIGxhbmd1YWdlXHJcbiAgICAgICAgICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdm0uaXNGcmVuY2g9ZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgcmV0dXJuKHZtLmxhbmc9PT1GUkVOQ0gpO1xyXG4gICAgICAgIH07XHJcblxyXG5cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQENsZWFyIHNwZWNpZmljIFZhbHVlcyAtIEJ1c2luZXNzIHdhbnRlZCB0aGVzZSB2YWx1ZXMgY2xlYXJlZCBvbiBSZXNldFxyXG4gICAgICAgICAqIENoYW5nZXMgdG8gcm93IDExLCAxMiwgMTMsIDE1LCAxNiwgMTcsIDIyLCAzNywgNDEsIDQzLCA0NCwgNDYsIDkzXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdm0ucmVzZXRTcGVjaWZpY1ZhbHVlcyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgIGlmKCB2bS5maW5hbFN0YXRlIClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAvLyB2bS50cmFuc2FjdGlvbk1vZGVsLmVjdGQucHJvZHVjdE5hbWU9IFwiXCI7IC8vMTEgLSBwcm9kdWN0IG5hbWUtIGp1c3QgaGlkZGVuXHJcbiAgICAgICAgICAgICAgICB2bS50cmFuc2FjdGlvbk1vZGVsLnRyYW5zYWN0aW9uVHlwZSA9IFwiXCI7IC8vMTIgLSBuZXcgb3IgZXhzaXRpbmdcclxuICAgICAgICAgICAgICAgIHZtLnVwZGF0ZUFjdGl2aXR5VHlwZSgpO1xyXG4gICAgICAgICAgICAgICAgdm0uc2V0VGhpcmRQYXJ0eSgpO1xyXG4gICAgICAgICAgICAgICAgdm0uc2V0QWRtaW5TdWJtaXNzaW9uKCk7XHJcbiAgICAgICAgICAgICAgICB2bS50cmFuc2FjdGlvbk1vZGVsLmlzU29saWNpdGVkID0gXCJcIjtcclxuICAgICAgICAgICAgICAgIHZtLnNldFNvbGljaXRlZFN0YXRlKCk7XHJcbiAgICAgICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICAgIHZtLnRyYW5zYWN0aW9uTW9kZWwuaXNUaGlyZFBhcnR5ID0gXCJcIjtcclxuICAgICAgICAgICAgICAgIHZtLnRyYW5zYWN0aW9uTW9kZWwuaXNQcmlvcml0eSA9IFwiXCI7XHJcbiAgICAgICAgICAgICAgICB2bS50cmFuc2FjdGlvbk1vZGVsLmlzTm9jID0gXCJcIjtcclxuICAgICAgICAgICAgICAgIHZtLnRyYW5zYWN0aW9uTW9kZWwuaXNBZG1pblN1YiA9IFwiXCI7XHJcbiAgICAgICAgICAgICAgICB2bS50cmFuc2FjdGlvbk1vZGVsLnN1YlR5cGUgPSBcIlwiO1xyXG4gICAgICAgICAgICAgICAgdm0uc2hvd1RoaXJkUGFydHlOb3RlID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB2bS5zaG93QWRtaW5TdWIgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICB2bS50cmFuc2FjdGlvbk1vZGVsLmlzU29saWNpdGVkID0gXCJcIjsgLy8zNyAtIHNvbGljaXRlZCBpbmZvcm1hdGlvblxyXG4gICAgICAgICAgICAgICAgIHZtLnRyYW5zYWN0aW9uTW9kZWwuc29saWNpdGVkUmVxdWVzdGVyUmVvcmQgPSBbXTsgLy80MSBzb2xpY2l0ZWQgaW5mb3JtYXRpb25cclxuICovXHJcbiAgICAgICAgICAgICAgICB2bS50cmFuc2FjdGlvbk1vZGVsLmVjdGQubGlmZWN5Y2xlUmVjb3JkID1bXTsgLy8yMiAtIFRyYW5zYWN0aW9uIERldGFpbHMgUmVjb3JkXHJcbiAgICAgICAgICAgICAgICB2bS50cmFuc2FjdGlvbk1vZGVsLnByb2plY3RNYW5hZ2VyMSA9IFwiXCI7IC8vNDMgLSBwcm9qZWN0TWFuYWdlcjFcclxuICAgICAgICAgICAgICAgIHZtLnRyYW5zYWN0aW9uTW9kZWwucHJvamVjdE1hbmFnZXIyID0gXCJcIjsgLy8gNDQgLXByb2plY3RNYW5hZ2VyMlxyXG4gICAgICAgICAgICAgICAgdm0udHJhbnNhY3Rpb25Nb2RlbC5pc0ZlZXMgPSBcIlwiOyAvLyA0NiAtIGZlZVxyXG4gICAgICAgICAgICAgICAgdm0udHJhbnNhY3Rpb25Nb2RlbC5mZWVEZXRhaWxzID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIHZtLnRyYW5zYWN0aW9uTW9kZWwuY29uZmlybUNvbnRhY3RWYWxpZCA9IGZhbHNlOyAvLzkzIGNvbmZpcm1hdGlvblxyXG4gICAgICAgICAgICAgICAgdm0udHJhbnNhY3Rpb25Nb2RlbC5yZXNldEJ0bkNsaWNrZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIE9uY2UgUmVzZXQgYnV0dG9uIGNsaWNrZWRcclxuICAgICAgICAgKiBIaWRlIC0gcHJvZHVjdE5hbWUsXHJcbiAgICAgICAgICovXHJcblxyXG4gICAgICAgIHZtLmRpc2FibGVQcm9kdWN0TmFtZSA9IGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgIHJldHVybiAodm0uZmluYWxTdGF0ZSk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgJHNjb3BlLiR3YXRjaCgndHJhbnNJbmZvQ3RybC50cmFuc0luZm9Gb3JtLiRlcnJvcicsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgLy92bS51cGRhdGVFcnJvclN1bW1hcnlTdGF0ZSgpO1xyXG4gICAgICAgICAgICB2bS51cGRhdGVFcnJvclN1bW1hcnkoKTtcclxuICAgICAgICB9LCB0cnVlKTtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gX3NldElkTmFtZXMoKXtcclxuICAgICAgICAgICAgdmFyIHNjb3BlSWQgPSBcIl9cIiArICRzY29wZS4kaWQ7XHJcbiAgICAgICAgICAgIHZtLmNvbXBhbnlJZD1cImNvbXBhbnlfaWRcIitzY29wZUlkO1xyXG4gICAgICAgICAgICB2bS5kb3NzaWVySWQ9XCJkb3NzaWVyX2lkXCIrc2NvcGVJZDtcclxuICAgICAgICAgICAgdm0ucHJvZHVjdE5hbWVJZD1cInByb2RfbmFtZVwiK3Njb3BlSWQ7XHJcbiAgICAgICAgICAgIHZtLmlzRWN0ZElkPVwiaXNfZWN0ZFwiK3Njb3BlSWQ7XHJcbiAgICAgICAgICAgIHZtLmlzU29saWNpdGVkSWQ9XCJpc19zb2xpY2l0ZWRcIitzY29wZUlkO1xyXG4gICAgICAgICAgICB2bS5zb2xpY3RlZFJxSWQ9XCJzb2xpY2l0ZWRfcnFcIitzY29wZUlkO1xyXG4gICAgICAgICAgICB2bS5zb2xpY2l0ZWRPdGhlcklkPVwic29saWNpdGVkX3JxX290aGVyXCIrc2NvcGVJZDtcclxuICAgICAgICAgICAgdm0uY29tcGFueU5hbWVJZD1cImNvbXBhbnlfbm9hYmJyZXZcIitzY29wZUlkO1xyXG4gICAgICAgICAgICB2bS5jb250YWN0U2FtZUlkPVwiY29uZmlybV9jb250YWN0X3ZhbGlkXCIrc2NvcGVJZDtcclxuICAgICAgICAgICAgdm0uaXNGZWVzSWQ9XCJpc19mZWVfdHJhbnNhY3Rpb25cIitzY29wZUlkO1xyXG4gICAgICAgICAgICB2bS50eXBlSWQ9XCJkb3NzaWVyX3R5cGVcIisgc2NvcGVJZDtcclxuICAgICAgICAgICAgdm0uaXNOZXdBY3Rpdml0eUlkPVwiaXNfbmV3X2FjdGl2aXR5XCIrIHNjb3BlSWQ7XHJcbiAgICAgICAgICAgIHZtLnRoaXJkUGFydHlJZCA9IFwiaXNfc2lnbmVkXzNyZF9wYXJ0eVwiICsgc2NvcGVJZDtcclxuICAgICAgICAgICAgdm0uaXNBZG1pblN1YklkID0gXCJpc19hZG1pbl9zdWJtaXNzaW9uXCIgKyBzY29wZUlkO1xyXG4gICAgICAgICAgICB2bS5hZG1pblN1YlR5cGVJZCA9IFwiYWRtaW5fc3ViX3R5cGVcIiArIHNjb3BlSWQ7XHJcbiAgICAgICAgICAgIHZtLmlzUHJpb3JpdHlJZCA9IFwiaXNfcHJpb3JpdHlcIiArIHNjb3BlSWQ7XHJcbiAgICAgICAgICAgIHZtLmlzTm9jSWQgPSBcImlzX25vY1wiICsgc2NvcGVJZDtcclxuICAgICAgICB9XHJcblxyXG59XHJcblxyXG59KVxyXG4oKTtcclxuXHJcbiIsIihmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgndHJhbnNhY3Rpb25NYWluTW9kdWxlJywgW1xyXG4gICAgICAgICAgICAndHJhbnNhY3Rpb25JbmZvJyxcclxuICAgICAgICAgICAgJ3RyYW5zYWN0aW9uU2VydmljZScsXHJcbiAgICAgICAgICAgICd0cmFuc2FjdGlvbkxvYWRTZXJ2aWNlJyxcclxuICAgICAgICAgICAgJ2ZpbGVJTycsXHJcbiAgICAgICAgICAgICdzZXJ2aWNlcycsXHJcbiAgICAgICAgICAgICdkYXRhTGlzdHMnLFxyXG4gICAgICAgICAgICAnZmlsdGVyTGlzdHMnLFxyXG4gICAgICAgICAgICAnbnVtYmVyRm9ybWF0JyxcclxuICAgICAgICAgICAgJ2Vycm9yU3VtbWFyeU1vZHVsZScsXHJcbiAgICAgICAgICAgICdlcnJvck1lc3NhZ2VNb2R1bGUnXHJcbiAgICAgICAgXSlcclxuXHJcbn0pKCk7XHJcblxyXG5cclxuKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKCd0cmFuc2FjdGlvbk1haW5Nb2R1bGUnKVxyXG4gICAgICAgIC5jb21wb25lbnQoJ2NtcFRyYW5zYWN0aW9uTWFpbicsIHtcclxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdhcHAvc2NyaXB0cy9jb21wb25lbnRzL3RyYW5zYWN0aW9uTWFpbi90cGwtdHJhbnNhY3Rpb24tbWFpbl8yMDE5MDMyMl8xNTQ0Lmh0bWwnLFxyXG4gICAgICAgICAgICBjb250cm9sbGVyOiBUcmFuc2FjdGlvbk1haW5DdHJsLFxyXG4gICAgICAgICAgICBjb250cm9sbGVyQXM6ICdtYWluJ1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgIFRyYW5zYWN0aW9uTWFpbkN0cmwuJGluamVjdCA9IFtcclxuICAgICAgICAnVHJhbnNhY3Rpb25TZXJ2aWNlJyxcclxuICAgICAgICAnaHBmYkZpbGVQcm9jZXNzaW5nJyxcclxuICAgICAgICAnJGZpbHRlcicsXHJcbiAgICAgICAgJyR0cmFuc2xhdGUnLFxyXG4gICAgICAgICckc2NvcGUnLFxyXG4gICAgICAgICdFTkdMSVNIJyxcclxuICAgICAgICAnRVhURVJOQUxfVFlQRSdcclxuICAgICAgICBdO1xyXG5cclxuICAgIGZ1bmN0aW9uIFRyYW5zYWN0aW9uTWFpbkN0cmwoVHJhbnNhY3Rpb25TZXJ2aWNlLCBocGZiRmlsZVByb2Nlc3NpbmcsICRmaWx0ZXIsICR0cmFuc2xhdGUsICRzY29wZSwgRU5HTElTSCwgRVhURVJOQUxfVFlQRSkge1xyXG5cclxuICAgICAgICB2YXIgdm0gPSB0aGlzO1xyXG4gICAgICAgIHZtLnNhdmVQcmVzc2VkID0gZmFsc2U7XHJcbiAgICAgICAgdm0udXNlclR5cGUgPSBFWFRFUk5BTF9UWVBFO1xyXG4gICAgICAgIHZtLnRyYW5zYWN0aW9uU2VydmljZSA9IG5ldyBUcmFuc2FjdGlvblNlcnZpY2UoKTtcclxuICAgICAgICB2bS5yb290VGFnID0gdm0udHJhbnNhY3Rpb25TZXJ2aWNlLmdldFJvb3RUYWcoKTtcclxuICAgICAgICB2bS50cmFuc2FjdGlvbiA9IHZtLnRyYW5zYWN0aW9uU2VydmljZS5nZXRNb2RlbEluZm8oKTtcclxuICAgICAgICB2bS5zaG93Q29udGVudCA9IF9sb2FkRmlsZUNvbnRlbnQ7XHJcbiAgICAgICAgdm0uYWxlcnRzID0gW2ZhbHNlLCBmYWxzZV07XHJcbiAgICAgICAgdm0ubGFuZyA9ICR0cmFuc2xhdGUucHJvcG9zZWRMYW5ndWFnZSgpIHx8ICR0cmFuc2xhdGUudXNlKCk7XHJcbiAgICAgICAgdm0uc2VxdWVuY2VVcGRhdGVkID0gZmFsc2U7XHJcbiAgICAgICAgdm0uaXNGaW5hbCA9IGZhbHNlO1xyXG5cclxuICAgICAgICB2bS51cGRhdGVTdW1tYXJ5ID0gMDsgLy9pbmNyZW1lbnQgdG8gc2VuZCBtZXNzYWdlIHRvIGVycm9yIHN1bW1hcmllc1xyXG5cclxuICAgICAgICB2bS5mb2N1c1N1bW1hcnkgPSAwOyAvL21lc3NhZ2luZyB0byBzZXQgZm9jdXMgb24gdGhlIGVycm9yIHN1bW1hcnlcclxuICAgICAgICB2bS5leGNsdXNpb25zID0geyAvLyB3aGVuIGVycm9yIHN1bW1hcnkgaGl0IHRoZXNlLCBhc3N1bWVzIHRoZXJlIGlzIGEgc3ViIHN1bW1hcnkgaWYgdHlwZSB4LnhcclxuICAgICAgICAgICAgXCJsaWZlY3ljbGVDdHJsLmxpZmVjeWNsZURldGFpbHNGb3JtXCI6XCJ0cnVlXCJcclxuICAgICAgICB9O1xyXG4gICAgICAgIHZtLnRyYW5zY2x1ZGVMaXN0ID0ge307IC8vc3BlY2lmaWMgdG8gZXhwYW5kaW5nIHRhYmxlIHRvIHRhZyByZWNvcmRzXHJcbiAgICAgICAgdm0uYWxpYXMgPSB7IC8vIGRvIHNvbWV0aGluZyBvdGhlciB0aGFuIGEgc2ltcGxlIGh5cGVybGlua1xyXG4gICAgICAgICAgICBcInNhdmVMaWZlUmVjXCI6IHtcclxuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcImJ1dHRvblNlYXJjaFwiLFxyXG4gICAgICAgICAgICAgICAgXCJidXR0b25OYW1lXCI6IFwic2F2ZUxpZmVjeWNsZVJlY1wiXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIFwib25lTGlmZVJlY1wiOiB7XHJcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJidXR0b25TZWFyY2hcIixcclxuICAgICAgICAgICAgICAgIFwiYnV0dG9uTmFtZVwiOiBcImFkZFRyYW5zYWN0aW9uUmVjXCJcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgXCJvbmVfcGF5bWVudF9tZXRob2RcIjoge1xyXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiZmllbGRzZXRcIixcclxuICAgICAgICAgICAgICAgIFwicGFyZW50XCI6IFwiZnNfcGF5bWVudF9tZXRob2RzXCJcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9O1xyXG4gICAgICAgIHZtLnJlcXVpcmVkT25seSA9IFt7dHlwZTogXCJyZXF1aXJlZFwiLCBkaXNwbGF5QWxpYXM6IFwiTVNHX0VSUl9NQU5EXCJ9XTtcclxuXHJcbiAgICAgICAgdm0uJG9uSW5pdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdm0udXBkYXRlU3VtbWFyeT12bS51cGRhdGVTdW1tYXJ5KzE7XHJcblxyXG4gICAgICAgICAgICB2bS51cGRhdGVTdW1tYXJ5PXZtLnVwZGF0ZVN1bW1hcnkrMTtcclxuICAgICAgICAgICAgX3NldElkTmFtZXMoKTtcclxuICAgICAgICB9O1xyXG5cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAbmdkb2MgbWV0aG9kIFNhdmVzIHRoZSBtb2RlbCBjb250ZW50IGluIEpTT04gZm9ybWF0XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdm0uc2F2ZUpzb24gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciB3cml0ZVJlc3VsdCA9IF90cmFuc2Zvcm1GaWxlKCk7XHJcbiAgICAgICAgICAgIHZtLnJvb3RUYWcgPSB2bS50cmFuc2FjdGlvblNlcnZpY2UuZ2V0Um9vdFRhZygpO1xyXG4gICAgICAgICAgICBocGZiRmlsZVByb2Nlc3Npbmcud3JpdGVBc0pzb24od3JpdGVSZXN1bHQsIF9nZXRGaWxlTmFtZSgpLCB2bS5yb290VGFnKTtcclxuICAgICAgICAgICAgdm0uc2F2ZVByZXNzZWQgPSB0cnVlO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQG5nZG9jIG1ldGhvZCAtIHNhdmVzIHRoZSBkYXRhIG1vZGVsIGFzIFhNTCBmb3JtYXRcclxuICAgICAgICAgKi9cclxuICAgICAgICB2bS5zYXZlWE1MID0gZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICAgICAgaWYodm0udHJhbnNhY3Rpb25FbnJvbEZvcm0uJGludmFsaWQpIHtcclxuXHJcbiAgICAgICAgICAgICAgICB2bS5mb2N1c1N1bW1hcnkrKztcclxuICAgICAgICAgICAgICAgIHZtLnVwZGF0ZUVycm9yU3VtbWFyeVN0YXRlKCk7XHJcbiAgICAgICAgICAgICAgICB2bS5zYXZlUHJlc3NlZCA9IHRydWU7XHJcbiAgICAgICAgICAgIH1lbHNlIHtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgd3JpdGVSZXN1bHQgPSBfdHJhbnNmb3JtRmlsZSgpO1xyXG4gICAgICAgICAgICAgICAgaHBmYkZpbGVQcm9jZXNzaW5nLndyaXRlQXNYbWwod3JpdGVSZXN1bHQsIF9nZXRGaWxlTmFtZSgpLCB2bS5yb290VGFnLFxyXG4gICAgICAgICAgICAgICAgICAgIHZtLnRyYW5zYWN0aW9uU2VydmljZS5nZXRYU0xGaWxlTmFtZSgpKTtcclxuICAgICAgICAgICAgICAgIHZtLnNhdmVQcmVzc2VkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuXHJcbiAgICAgICAgdm0udXBkYXRlRXJyb3JTdW1tYXJ5U3RhdGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZtLnVwZGF0ZVN1bW1hcnkgPSB2bS51cGRhdGVTdW1tYXJ5ICsgMTtcclxuICAgICAgICB9O1xyXG5cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gX2dldEZpbGVOYW1lKCkge1xyXG4gICAgICAgICAgICB2YXIgZGF0ZSA9IG5ldyBEYXRlKCk7XHJcbiAgICAgICAgICAgIHZhciBmaWxlbmFtZSA9IFwiSENSRVBSVFwiO1xyXG4gICAgICAgICAgICB2YXIgbW9udGggPSBkYXRlLmdldE1vbnRoKCkgKyAxO1xyXG4gICAgICAgICAgICB2YXIgZGF5ID0gZGF0ZS5nZXREYXRlKCk7XHJcbiAgICAgICAgICAgIHZhciBob3VycyA9IGRhdGUuZ2V0SG91cnMoKTtcclxuICAgICAgICAgICAgdmFyIG1pbnV0ZXMgPSBkYXRlLmdldE1pbnV0ZXMoKTtcclxuICAgICAgICAgICAgdmFyIHNlcGFyYXRvciA9IFwiLVwiO1xyXG5cclxuICAgICAgICAgICAgaWYgKG1vbnRoIDwgMTApIHtcclxuICAgICAgICAgICAgICAgIG1vbnRoID0gXCIwXCIgKyBtb250aDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoZGF5IDwgMTApIHtcclxuICAgICAgICAgICAgICAgIGRheSA9IFwiMFwiICsgZGF5O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChob3VycyA8IDEwKSB7XHJcbiAgICAgICAgICAgICAgICBob3VycyA9IFwiMFwiICsgaG91cnM7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKG1pbnV0ZXMgPCAxMCkge1xyXG4gICAgICAgICAgICAgICAgbWludXRlcyA9IFwiMFwiICsgbWludXRlcztcclxuICAgICAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgICAgIGZpbGVuYW1lID0gZmlsZW5hbWUgKyBzZXBhcmF0b3IgKyBkYXRlLmdldEZ1bGxZZWFyKCkgKyBzZXBhcmF0b3IgKyBtb250aCArIHNlcGFyYXRvciArIGRheSArIHNlcGFyYXRvciArIGhvdXJzICsgbWludXRlcztcclxuICAgICAgICAgICAgcmV0dXJuIChmaWxlbmFtZS50b0xvd2VyQ2FzZSgpKTtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAbmdkY2MgbWV0aG9kIHVwZGF0ZXMgZGF0YSBhbmQgaW5jcmVtZW50cyB2ZXJzaW9uIGJlZm9yZSBjcmVhdGluZyBqc29uXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZnVuY3Rpb24gX3RyYW5zZm9ybUZpbGUoKSB7XHJcbiAgICAgICAgICAgcmV0dXJuIHZtLnRyYW5zYWN0aW9uU2VydmljZS50cmFuc2Zvcm1Ub0ZpbGVPYmoodm0udHJhbnNhY3Rpb24pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gX2xvYWRGaWxlQ29udGVudChmaWxlQ29udGVudCkge1xyXG4gICAgICAgICAgICBpZiAoIWZpbGVDb250ZW50KXJldHVybjtcclxuICAgICAgICAgICAgLy92bS50cmFuc2FjdGlvblNlcnZpY2UgPSBuZXcgVHJhbnNhY3Rpb25TZXJ2aWNlKCk7XHJcbiAgICAgICAgICAgIHZhciByZXN1bHRKc29uID0gZmlsZUNvbnRlbnQuanNvblJlc3VsdDtcclxuXHJcbiAgICAgICAgICAgIGlmIChyZXN1bHRKc29uKSB7XHJcbiAgICAgICAgICAgICAgICB2bS50cmFuc2FjdGlvblNlcnZpY2UudHJhbnNmb3JtRnJvbUZpbGVPYmoocmVzdWx0SnNvbik7XHJcbiAgICAgICAgICAgICAgICB2bS50cmFuc2FjdGlvbiA9IHt9O1xyXG4gICAgICAgICAgICAgICAgLy8gYW5ndWxhci5leHRlbmQodm0udHJhbnNhY3Rpb24sIHZtLnRyYW5zYWN0aW9uU2VydmljZS5nZXRNb2RlbEluZm8oKSlcclxuICAgICAgICAgICAgICAgIHZtLnRyYW5zYWN0aW9uID0gdm0udHJhbnNhY3Rpb25TZXJ2aWNlLmdldE1vZGVsSW5mbygpO1xyXG4gICAgICAgICAgICAgICAgdm0uaXNGaW5hbCA9IHZtLnRyYW5zYWN0aW9uU2VydmljZS5pc0ZpbmFsO1xyXG4gICAgICAgICAgICAgICAgLy9kb2luZyB0aGlzIGFzIG1vZGVsIHdvbid0IHVwZGF0ZSBvdGhlcndpc2UuXHJcbiAgICAgICAgICAgICAgICAvL3RoaXMgcHJvY2VzcyBtb3ZlZCB0byBzZXJ2aWNlXHJcbiAgICAgICAgICAgICAgICAvL3ZtLnRyYW5zYWN0aW9uLnByb2plY3RNYW5hZ2VyMSA9IFwiXCI7XHJcbiAgICAgICAgICAgICAgICAvL3ZtLnRyYW5zYWN0aW9uLnByb2plY3RNYW5hZ2VyMiA9IFwiXCI7XHJcbiAgICAgICAgICAgICAgICAvL3ZtLnRyYW5zYWN0aW9uLmlzU29saWNpdGVkID0gXCJcIjtcclxuICAgICAgICAgICAgICAgIC8vdm0udHJhbnNhY3Rpb24uc29saWNpdGVkUmVxdWVzdGVyID0gXCJcIjtcclxuICAgICAgICAgICAgICAgIC8vdm0udHJhbnNhY3Rpb24uY29uZmlybUNvbnRhY3RWYWxpZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2bS5kaXNhYmxlRmluYWxYbWxCdG4gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmKHZtLmlzRmluYWwpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGlmKCB2bS50cmFuc2FjdGlvbi5yZXNldEJ0bkNsaWNrZWQpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2bS5nZXROZXdSZXBDb250YWN0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdm0udHJhbnNhY3Rpb25TZXJ2aWNlLmNyZWF0ZVJlcENvbnRhY3QoKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHZtLnNldFNlcXVlbmNlTnVtYmVyID0gZnVuY3Rpb24gKHN0YXJ0VmFsKSB7XHJcblxyXG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gdm0udHJhbnNhY3Rpb25TZXJ2aWNlLnNldFNlcXVlbmNlTnVtYmVyKHN0YXJ0VmFsKTtcclxuICAgICAgICAgICAgdm0uc2VxdWVuY2VVcGRhdGVkID0gIXZtLnNlcXVlbmNlVXBkYXRlZDtcclxuXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLy9UT0RPIHJlbW92ZT9cclxuICAgICAgICB2bS51cGRhdGVBZGRyZXNzUmVjb3JkID0gZnVuY3Rpb24gKGFkZHJlc3MpIHtcclxuICAgICAgICAgICAgaWYgKCFhZGRyZXNzKSByZXR1cm47XHJcbiAgICAgICAgICAgIHZhciBpZHggPSB2bS5jb21wYW55LmFkZHJlc3NMaXN0LmluZGV4T2YoXHJcbiAgICAgICAgICAgICAgICAkZmlsdGVyKCdmaWx0ZXInKSh2bS5jb21wYW55LmFkZHJlc3NMaXN0LCB7YWRkcmVzc0lEOiBhZGRyZXNzLmFkZHJlc3NJRH0sIHRydWUpWzBdXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIHZtLmNvbXBhbnkuYWRkcmVzc0xpc3RbaWR4XSA9IGFkZHJlc3M7XHJcbiAgICAgICAgICAgIHZhciB0ZW1wID0gdm0uY29tcGFueS5hZGRyZXNzTGlzdDtcclxuICAgICAgICAgICAgdm0uY29tcGFueS5hZGRyZXNzTGlzdCA9IFtdO1xyXG4gICAgICAgICAgICB2bS5jb21wYW55LmFkZHJlc3NMaXN0ID0gdGVtcDtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2bS5pc0V4dGVybiA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHZtLnVzZXJUeXBlID09IEVYVEVSTkFMX1RZUEU7XHJcblxyXG4gICAgICAgIH07XHJcbiAgICAgICAgdm0uc2hvd0Vycm9ycyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAvL3ZtLnRyYW5zYWN0aW9uRW5yb2xGb3JtLiRkaXJ0eSAmJiB2bS50cmFuc2FjdGlvbkVucm9sRm9ybS4kaW52YWxpZCAmJlxyXG5cclxuICAgICAgICAgICAgcmV0dXJuICggdm0uc2F2ZVByZXNzZWQpXHJcblxyXG4gICAgICAgIH07XHJcbiAgICAgICAgdm0uYWRkSW5zdHJ1Y3QgPSBmdW5jdGlvbiAodmFsdWUpIHtcclxuXHJcbiAgICAgICAgICAgIGlmIChhbmd1bGFyLmlzVW5kZWZpbmVkKHZhbHVlKSkgcmV0dXJuO1xyXG4gICAgICAgICAgICBpZiAodmFsdWUgPCB2bS5hbGVydHMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICB2bS5hbGVydHNbdmFsdWVdID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIENsb3NlcyB0aGUgaW5zdHJ1Y3Rpb24gYWxlcnRzXHJcbiAgICAgICAgICogQHBhcmFtIHZhbHVlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdm0uY2xvc2VBbGVydCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICBpZiAoYW5ndWxhci5pc1VuZGVmaW5lZCh2YWx1ZSkpIHJldHVybjtcclxuICAgICAgICAgICAgaWYgKHZhbHVlIDwgdm0uYWxlcnRzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgdm0uYWxlcnRzW3ZhbHVlXSA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogRGV0ZXJtaW5lcyBpZiB0aGUgbGFuZ3VhZ2UgdXNlZCBpcyBmcmVuY2hcclxuICAgICAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuICAgICAgICAgKi9cclxuICAgICAgICB2bS5pc0ZyZW5jaCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuICh2bS5sYW5nICE9PSBFTkdMSVNIKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBfc2V0SWROYW1lcygpe1xyXG4gICAgICAgICAgICB2YXIgc2NvcGVJZCA9IFwiX1wiICsgJHNjb3BlLiRpZDtcclxuICAgICAgICAgICAgdm0uZm9ybUlkPVwidHJhbnNhY3Rpb25fZm9ybVwiK3Njb3BlSWQ7XHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICB9XHJcbn0pKCk7XHJcblxyXG4iXX0=

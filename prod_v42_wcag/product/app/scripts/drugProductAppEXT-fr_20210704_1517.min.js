!function(){"use strict";function MainController($translate,getCountryAndProvinces){var vm=this;vm.formType="EXT"}angular.module("drugProductApp",["pascalprecht.translate","dossierLoadModule","drugProductModule","dataLists","translations"]).controller("MainController",MainController),MainController.$inject=["$translate","getCountryAndProvinces"]}(),function(){"use strict";angular.module("drugProductApp").config(["$translateProvider","$locationProvider","$httpProvider",function($translateProvider,$locationProvider,$httpProvider){$locationProvider.html5Mode({enabled:!0,requireBase:!1,rewriteLinks:!1}),$translateProvider.directivePriority(1),$translateProvider.preferredLanguage("fr"),$translateProvider.useLoader("customLoad"),$translateProvider.useSanitizeValueStrategy(null),$translateProvider.forceAsyncReload(!0),$httpProvider.defaults.headers.get||($httpProvider.defaults.headers.get={}),$httpProvider.defaults.headers.get["If-Modified-Since"]="Mon, 26 Jul 1997 05:00:00 GMT",$httpProvider.defaults.headers.get["Cache-Control"]="no-cache",$httpProvider.defaults.headers.get.Pragma="no-cache"}])}(),angular.module("translations",[]).config(["$translateProvider",function($translateProvider){$translateProvider.translations("en",{CITY:"City or Town",COUNTRY:"Country",PROVINCE:"Province",POSTAL:"Postal Code",PROVSTATE:"Province or State",STATE:"State",STREET:"Street Address",ZIP:"Zip Code",COMPANY:"Company",ADD_ADDRESS:"Add Address",CITY_TOWN:"City or Town",SAVE_ADDR:"Save Address",DELETE_ADDR:"Delete Address",ADDR_INFO:"Address Information",ADDR_DETAILS:"Address Details",ADDR_ROLE_LEGEND:"Select one or more roles for this company",ADDR_REP_ROLE_LEGEND:"Select one or more roles for this company representative",PRODUCTS_IMPORTED:"Imported Products",PRODUCT_TYPES:"Products imported by this Company",ALL_PRODUCTS:"All Products",SELECTED_PRODUCTS:"Some Products",IDENTIFY_PRODUCTS:"Provide the Dossier Identifiers for the products that are imported by this Company",ADD_DOSSIER_ID:"Add Dossier ID",COUNTRY_CHOOSE:"Choose a country",COUNTRY_SEARCH:"Select or Search for country",PROVINCELIST:"Province or State"}),$translateProvider.translations("fr",{CITY:"Ville",COUNTRY:"Pays",PROVINCE:"Province",POSTAL:"Code postal",PROVSTATE:"Province ou état",STATE:"État",STREET:"Rue",ZIP:"Code ZIP",COMPANY:"Compagnie",ADD_ADDRESS:"Ajouter Addresse",CITY_TOWN:"Ville",SAVE_ADDR:"Enregistrer l'adresse",DELETE_ADDR:"Supprimer Addresse",ADDR_INFO:"Information d'adresse",ADDR_DETAILS:"Détails de l'adresse",ADDR_ROLE_LEGEND:"Sélectionner un ou plusieurs rôles pour cette compagnie",ADDR_REP_ROLE_LEGEND:"Sélectionner un ou plusieurs rôles pour ce représentant de la compagnie",PRODUCTS_IMPORTED:"Produits importé",PRODUCT_TYPES:"Produits importé par cette compagnie",ALL_PRODUCTS:"Tous les produits",SELECTED_PRODUCTS:"Certain produits",IDENTIFY_PRODUCTS:"Fournir les numéros de dossier pour les produits importés par cette compagnie",ADD_DOSSIER_ID:"Ajouter un numéro de dossier",COUNTRY_CHOOSE:"Choisir un pays",COUNTRY_SEARCH:"Selectionner ou rechercher le pays",PROVINCELIST:"Province or State"}),$translateProvider.translations("en",{AB:"Alberta",BC:"British Columbia",MB:"Manitoba",NB:"New Brunswick",NL:"Newfoundland and Labrador",NT:"Northwest Territories",NS:"Nova Scotia",NU:"Nunavut",ON:"Ontario",PE:"Prince Edward Island",QC:"Quebec",SK:"Saskatchewan",YT:"Yukon",AL:"Alabama",AK:"Alaska",AZ:"Arizona",AR:"Arkansas",CA:"California",CO:"Colorado",CT:"Connecticut",DE:"Delaware",DC:"District of Columbia",FL:"Florida",GA:"Georgia",HI:"Hawaii",ID:"Idaho",IL:"Illinois",IN:"Indiana",IA:"Iowa",KS:"Kansas",KY:"Kentucky",LA:"Louisiana",ME:"Maine",MD:"Maryland",MA:"Massachusetts",MI:"Michigan",MN:"Minnesota",MS:"Mississippi",MOS:"Missouri",MT:"Montana",NE:"Nebraska",NV:"Nevada",NH:"New Hampshire",NJ:"New Jersey",NM:"New Mexico",NY:"New York",NC:"North Carolina",ND:"North Dakota",OH:"Ohio",OK:"Oklahoma",OR:"Oregon",PA:"Pennsylvania",RI:"Rhode Island",SC:"South Carolina",SD:"South Dakota",TN:"Tennessee",TX:"Texas",UT:"Utah",VT:"Vermont",VA:"Virginia",WA:"Washington",WV:"West Virginia",WI:"Wisconsin",WY:"Wyoming"}),$translateProvider.translations("fr",{AB:"Alberta",BC:"Colombie-Britannique",PE:"Île-du-Prince-Édouard",MB:"Manitoba",NB:"Nouveau-Brunswick",NS:"Nouvelle-Écosse",NU:"Nunavut",ON:"Ontario",QC:"Québec",SK:"Saskatchewan",NL:"Terre-Neuve et Labrador",NT:"Territoires du Nord-Ouest",YT:"Yukon",AL:"Alabama",AK:"Alaska",AZ:"Arizona",AR:"Arkansas",CA:"Californie",NC:"Caroline du nord",SC:"Caroline du sud",CO:"Colorado",CT:"Connecticut",ND:"Dakota du nord",SD:"Dakota du sud",DE:"Delaware",DC:"District de Columbia",FL:"Floride",GA:"Géorgie",HI:"Hawaii",ID:"Idaho",IL:"Illinois",IN:"Indiana",IA:"Iowa",KS:"Kansas",KY:"Kentucky",NY:"L'état de New York",WA:"L'état de washington",LA:"Louisiane",ME:"Maine",MD:"Maryland",MA:"Massachusetts",MI:"Michigan",MN:"Minnesota",MS:"Mississippi",MOS:"Missouri",MT:"Montana",NE:"Nebraska",NV:"Nevada",NH:"New Hampshire",NJ:"New Jersey",NM:"Nouveau-mexique",OH:"Ohio",OK:"Oklahoma",OR:"Oregon",PA:"Pennsylvanie",RI:"Rhode Island",TN:"Tennessee",TX:"Texas",UT:"Utah",VT:"Vermont",VA:"Virginie",WV:"Virginie-occidentale",WI:"Wisconsin",WY:"Wyoming"}),$translateProvider.translations("en",{AEROSOL:"Areosol",BOLUS:"Bolus",CAPSULE:"Capsule",CAPSULE_DELAYED_RELEASE:"Capsule, Delayed Release",CAPSULE_EXTENDED_RELEASE:"Capsule, Delayed Release",CREAM:"Cream",EMULSION:"Emulsion",GAS:"Gas",GEL:"Gel",IMPLANT:"Implant",LOTION:"Lotion",LOZENGE:"Lozenge",OINTMENT:"Ointment",PATCH:"Patch",PATCH_EXTENDED_RELEASE:"Patch Extended-Release",POWDER:"Powder",POWDER_FOR_SOLUTION:"Powder for Solution",POWDER_FOR_SUSPENSION:"Powder for Suspension",SHAMPOO:"Shampoo",SOLUTION:"Solution",SPRAY:"Spray",SPRAY_BAG_ON_VALVE:"Spray, Bag-On-Valve",SPRAY_METERED_DOSE:"Spray, Metered Dose",STICK:"Stick",STRIP:"Strip",SUPPOSITORY:"Suppository",SUSPENSION:"Suspension",SYRUP:"Syrup",TABLET:"Tablet",TABLET_CHEWABLE:"Tablet, Chewable",TABLET_DELAYED_RELEASE:"Tablet, Delayed Release",TABLET_EXTENDED_RELEASE:"Tablet, Extended Release",TABLET_ORALLY_DISINTEGRATING:"Tablet, Orally Disintegrating",WIPE:"Wipe"}),$translateProvider.translations("fr",{AEROSOL:"Aérosol",BOLUS:"Bol",CAPSULE:"Capsule",CAPSULE_DELAYED_RELEASE:"Capsule (à libération retardée)",CAPSULE_EXTENDED_RELEASE:"Capsule (à libération prolongée)",CREAM:"Crème",EMULSION:"Émulsion",GAS:"Gaz",GEL:"Gel",IMPLANT:"Implant",LOTION:"Lotion",LOZENGE:"Pastille",OINTMENT:"Pommade",PATCH:"Timbre",PATCH_EXTENDED_RELEASE:"Timbre (à libération prolongée)",POWDER:"Poudre",POWDER_FOR_SOLUTION:"Poudre pour solution",POWDER_FOR_SUSPENSION:"Poudre pour suspension",SHAMPOO:"Shampoing",SOLUTION:"Solution",SPRAY:"Pulvérisation",SPRAY_BAG_ON_VALVE:"Pulvérisation, sac-sur-valve",SPRAY_METERED_DOSE:"Pulvérisation, à dose mesurée",STICK:"Bâton",STRIP:"Bandelette",SUPPOSITORY:"Suppositoire",SUSPENSION:"Suspension",SYRUP:"Sirop",TABLET:"Comprimé",TABLET_CHEWABLE:"Comprimé (à croquer)",TABLET_DELAYED_RELEASE:"Comprimé (à libération retardée)",TABLET_EXTENDED_RELEASE:"Comprimé (à libération prolongée)",TABLET_ORALLY_DISINTEGRATING:"Comprimé (à désintégration orale)",WIPE:"Serviette"}),$translateProvider.translations("en",{LOAD_DOSSIER:"Load a Dossier Enrolment File",DOSSIER_HDING:"Regulatory Dossier Enrolment",INGRED_LIST:"Ingredients List",INGRED_NAME:"Ingredient or Material Name",SOURCED:"Source From",HUMAN:"Human",ANIMAL:"Animal",IS_ANIMAL_HUMAN:"Is there a Animal/Human Material?",TISSUES_ORIGIN:"Tissues or fluids of Origin",ADD_PRODUCT:"Add Product",AMEND_REF:"Amend Canadian Reference Product",BRAND_NAME:"Brand Name",MEDICINAL_INGREDIENT:" Medicinal Ingredient",STRENGTH:"Strength(s)",DOSAGE_FORM:"Dosage Form",DOSAGE_FORM_OTHER:"Dosage Form Other Details",CDN_REF_PRODUCT:" Canadian Reference Product",COMPANY_NAME:"Company Name",COUNTRY_NAME:"Country Name",SAVE:"Save",CANCEL:"Cancel",DELETE:"Delete",SCHED_A:"Schedule A Claims",DIN_FULL:"Drug Identification Number (DIN), if issued",THERA_CLASS:"Therapeutic Classifications",THERA_CLASS_ADD:"Add Therapeutic Classification",THERA_CLASS_NAME:"Therapeutic Classification Name",PROPNAME:"Brand or Proprietary or Product Name (should be the same as the brand name on the product label)",DRUG_PRODUCT:"Product Information",SIGNED_THIRD:"The submission will be signed or filed by a third party on behalf of the manufacturer or sponsor",INCLUDE_AUTH:"Please include the Third Party Authorization letter in the REP folder when submitting via the  Common Electonic Submissions Gateway (CESG)",RELATED_INFO:"Related Information",PROPER_NAME:"Proper, Common or Non-Proprietary Name",DRUG_USE:"Drug Use",SCHEDA_DESCRIPTION:"Provide information below for non prescription products that have associated Schedule A claims only.",DELETE_CLASS:"Delete Classification",SOURCED_ANIMAL:"Provide the animal types used for this ingredient",SPECIFY:"Please specify",DETAILS:"Details",REF_PRODUCTS:"Canadian Reference Product(s)",RADIOPHARM:"Radiopharmaceutical",VETERINARY:"Veterinary",DISINFECTANT:"Disinfectant",ADD_A:"Add a ",COUNTRY_MAN:"Country of Manufacture",DELETE_COUNTRY:"Delete Country",ADD_CRP:"Add Canadian Reference Product",IS_CDN_REF:"Is there a Canadian Reference Product or Canadian Reference Biologic Drug for Biosimilars?",INGRED_MAT_NAME:"Ingredient or Material Name",HELP_DOSSIER:"Dossier Information Instructions",HELP_thera:"Therapeutic Classification Instructions",HELP_REFPRODUCTS:"Reference Product Instructions",ADD_FORMULATION:"Add Formulation",SAVE_INSTRUCT:"Dossier File Save Instructions",DOSSIER_TYPE_HELP:"Dossier Type Instructions","REFPRODCTRL.PRODUCTDETAILSFORM":"in the Canadian Reference Product Record","CONTACTREC.CONTACTRECFORM":"in the regulatory enrolment process contact record",DOSSIER:"Dossier",FIELDID:"Dossier Id"}),$translateProvider.translations("fr",{LOAD_DOSSIER:"fr_Load a Dossier Enrolment File",DOSSIER_HDING:"fr_Regulatory Dossier Enrolment",INGRED_LIST:"fr_Ingredients List",INGRED_NAME:"Nom de l'ingrédient ou matériel",SOURCED:"Sourcer de",HUMAN:"Humain",ANIMAL:"Animal",IS_ANIMAL_HUMAN:"fr_Is there a Animal/Human Material?",TISSUES_ORIGIN:"fr_Tissues or fluids of Origin",ADD_PRODUCT:"fr_Add Product",AMEND_REF:"fr_Amend Canadian Reference Product",BRAND_NAME:"Marque nominative",MEDICINAL_INGREDIENT:"Ingrédient Médicinaux",STRENGTH:"Concentration",DOSAGE_FORM:"Forme posologique",DOSAGE_FORM_OTHER:"Autre détails de la forme posologie",CDN_REF_PRODUCT:" Canadian Reference Product",COMPANY_NAME:"Nom du fabricant ou promoteur",COUNTRY_NAME:"Nom du pays",SAVE:"Enregistrer",CANCEL:"fr_Cancel",DELETE:"Supprimer",SCHED_A:"fr_Schedule A Claims",DIN_FULL:"Numéro d’ID du médicament (DIN), si existant",THERA_CLASS:"fr_Therapeutic Classification(s)",THERA_CLASS_ADD:"fr_Add Therapeutic Classification",THERA_CLASS_NAME:"fr_Therapeutic Classification Name",PROPNAME:"fr_Brand or Proprietary or Product Name (should be the same as the brand name on the product label)",DRUG_PRODUCT:"Information sur le produit",SIGNED_THIRD:"fr_The submission will be signed or filed by a third party on behalf of the manufacturer or sponsor",INCLUDE_AUTH:"fr_Please include the Third Party Authorization letter in the REP folder when submitting via the  Common Electonic Submissions Gateway (CESG)",RELATED_INFO:"fr_Related Information",PROPER_NAME:"Nom propre, nom usuel ou nom générique",DRUG_USE:"Usage du médicament",SCHEDA_DESCRIPTION:"Fournissez les informations ci-dessous pour les produits sans ordonnance qui ont associé des revendications de l’annexe A seulement.",DELETE_CLASS:"fr_Delete Classification",SOURCED_ANIMAL:"fr_Provide the animal types used for this ingredient",SPECIFY:"fr_Please specify the Other",DETAILS:"fr_Details",REF_PRODUCTS:"fr_Canadian Reference Product(s)",RADIOPHARM:"Radiopharmaceutique",VETERINARY:"Vétérinaire",DISINFECTANT:"Type de désinfectant",ADD_A:"fr_Add a ",COUNTRY_MAN:"Pays de fabrication",DELETE_COUNTRY:"fr_Delete Country",ADD_CRP:"fr_Add Canadian Reference Product",IS_CDN_REF:"fr_Is there a Canadian Reference Product or Canadian Reference Biologic Drug for Biosimilars?",INGRED_MAT_NAME:"Nom de l'ingrédient ou matériel",HELP_DOSSIER:"fr_Dossier Instructions",HELP_thera:"fr_Therapeutic Classification Instructions",HELP_REFPRODUCTS:"fr_Reference Product Instructions",ADD_FORMULATION:"fr_Add Formulation",SAVE_INSTRUCT:"fr_Dossier File Save Instructions",DOSSIER_TYPE_HELP:"fr_Dossier Type Instructions","REFPRODCTRL.PRODUCTDETAILSFORM":"fr_in the Canadian Reference Product Record","CONTACTREC.CONTACTRECFORM":"fr_in the regulatory enrolment process contact record",DOSSIER:"fr_Dossier",FIELDID:"fr_Dossier Id"}),$translateProvider.translations("en",{Y:"Yes",N:"No",UNK:"Unknown",REQUIRED:"(required)",DOSSIER_NUMBER:"Dossier Identifier",SAVE:"Save",CANCEL:"Cancel",DELETE:"Delete",EDIT:"Edit",CAN_REF_PRODUCTS:"Canadian Reference Products",CAN_REF_PRODUCT:"Canadian Reference Product"}),$translateProvider.translations("fr",{Y:"Oui",N:"Non",UNK:"Inconnu",REQUIRED:"(requis)",DOSSIER_ID:"fr_Dossier ID",SAVE:"fr_Save",CANCEL:"fr_Cancel",DELETE:"Supprimer",EDIT:"fr_Edit",CAN_REF_PRODUCTS:"fr_Canadian Reference Products"}),$translateProvider.translations("en",{MSG_APP4_TYPE:"At least one source must be selected",MSG_ERR_ONE_SYSTEM:"At least one tissue or fluid of origin must be selected",MSG_ERR_ONE_ANIMAL:"At least one animal source must be selected",MSG_ERR_ONE_ANIMAL_TYPE:"At least one animal type must be selected",MSG_ERR_DRUG_USE:"At least one drug use must be selected",MSG_ONE_SCHEDA:"At least one disease or disorder must be selected",MSG_IS_REQUIRED:"is a required field.",MSG_ERR_INVALID_NUM:"This is not a valid number.",NO_ANIMAL:"At least one animal source must be selected",NO_ACTIVE:"At least one medicinal ingredient is required.",NO_CONTAINER:"At least one container type is required.",NO_FORMULATION:"At least one formulation is required.",NO_COUNTRY:"At least one country of manufacture record is required",NO_CTA_COUNTRY:"At least one country the investigational drug product was obtained from is required",NO_COUNTRY_ORIGIN:"At least one Country of Origin is required",NO_ROA:"At least one Route of Administation is required",NO_THERAVAL:"At least one therapeutic classification record must be provided",NO_TISSUE:"Require at least one Tissue or fluid source",MSG_ERR_ONE_COUNTRY:"At least one country of origin is required",MSG_ERR_ONE_TISSUE:"At least one Tissue or fluid source is required",MSG_ERR_ONE_CNTRY_ORIGIN:"At least one Country of origin is required",MSG_ERR_ONE_CDN_REF:"At least one Canadian Reference product is required",MSG_ERR_INVALID_NUM_MIN:"The value must be greater than or equal to -273",MSG_ERR_INVALID_NUM_MAX:"The value must be less than or equal to 999",MSG_ERR_INVALID_NUM_MIN0:"The value must be greater than or equal to 0",MSG_ERR_INVALID_NUM_MIN_LOWER:"The value must be greater than Lower Limit",MSG_TISSUE_SYS_USED:"This system has been already been selected, please select another."}),$translateProvider.translations("fr",{MSG_APP4_TYPE:"fr_At least one source must be selected",MSG_ERR_ONE_SYSTEM:"fr_At least one tissue or fluid of origin must be selected",MSG_ERR_ONE_ANIMAL:"fr_At least one animal source must be selected",MSG_ERR_ONE_ANIMAL_TYPE:"fr_At least one animal type must be selected",MSG_ERR_DRUG_USE:"fr_At least one drug use must be selected",MSG_ONE_SCHEDA:"fr_At least one disease or disorder must be selected",MSG_IS_REQUIRED:"fr_is a required field.",MSG_ERR_INVALID_NUM:"Il ne s’agit pas d’un numéro valide",NO_ANIMAL:"At moins une source animale doit être sélectionnée",NO_ACTIVE:"Au moins un ingrédient médicinal actif est nécessaire",NO_CONTAINER:"Au moins un type de contenant est requis",NO_FORMULATION:"fr_At least one formulation is required.",NO_COUNTRY:"Au moins un pays de fabrication est requis",NO_COUNTRY_ORIGIN:"Au moins un pays d’origine est requis",NO_ROA:"Au moins une voie d'administration est requise",NO_THERAVAL:"Au moins une classification thérapeutique est requise",NO_TISSUE:"Au moins une source de tissu ou de fluide est requise",MSG_ERR_ONE_COUNTRY:"fr_At least one country of origin is required",MSG_ERR_ONE_TISSUE:"Au moins une source de tissu ou de fluide est requise",MSG_ERR_ONE_CNTRY_ORIGIN:"fr_At least one Country of origin is required",MSG_ERR_ONE_CDN_REF:"fr_At least one Canadian Reference product is required",MSG_ERR_INVALID_NUM_MIN:"La valeur doit être supérieure ou égale à -273",MSG_ERR_INVALID_NUM_MAX:"La valeur doit être inférieure ou égale à 999",MSG_ERR_INVALID_NUM_MIN0:"La valeur doit être supérieure ou égale à 0",MSG_ERR_INVALID_NUM_MIN_LOWER:"La valeur doit être supérieure à la limite inférieure",MSG_TISSUE_SYS_USED:"Ce système a déjà été sélectionné, veuillez en sélectionner un autre"}),$translateProvider.translations("en",{NERVOUS_SYSTEM:"Nervous system",BRAIN:"Brain",BRAINSTEM:"Brain stem",CEREBELLUM:"Cerebellum",CEROFLUID:"Cerebrospinal fluid",DORSALROOT:"Dorsal root ganglia",DURAMATER:"Dura mater",HYPOTHALAMUS:"Hypothalamus",RETINA:"Retina or optic nerve",SPINALCORD:"Spinal cord",TRIGEMINAL:"Trigerminal ganglia",NERVOUS_OTHER:"Other nervous system",DIGESTIVE_SYSTEM:"Digestive system",APPENDIX:"Appendix",BILE:"Bile",DISTALILEUM:"Distal ileum",LARGEINTEST:"Large intestine",SALIVA:"Saliva or salivary gland",SMALLINTESTINE:"Small intestine other than distal ileum",STOMACH:"Stomach",DIGESTIVE_OTHER:"Other digestive system",REPRODUCT_SYSTEM:"Reproductive and urinary systems",MILK:"Milk or milk products",KIDNEY:"Kidney",COLOSTRUM:"Colostrum",MAMMARY:"Mammary glands",OVARIES:"Ovaries",PLACENTA:"Placenta",PLACENTAFLUID:"Placental fluid",SEMEN:"Semen",TESTES:"Testes",URINE:"Urine",REPROD_OTHER:"Other reproductive and urinary system",CARDIO_SYSTEM:"Cardio-Respiratory system",HEART:"Heart or pericardium",LUNG:"Lung",NASALFLUID:"Nasal fluid",TRACHEA:"Trachea",PLACENTALFLUID:"Placental fluid",CARDIO_OTHER:"Other cardio-respiratory system",IMMUNE_SYSTEM:"Immune system",LYMPH:"Lymph nodes",SPLEEN:"Spleen",THYMUS:"Thymus",TONSILS:"Tonsils",IMMUNE_OTHER:"Other immune system",SKINGLAND_SYSTEM:"Skin and Glandular system",ADRENAL:"Adrenal gland or tissue",HAIR:"Hair, feathers, hooves",LIVER:"Liver",PANCREAS:"Pancreas",PITUARYGLAND:"Pituitary gland",SKINHIDES:"Skin or hides",THYROID:"Thyroid or parathyroid",SKIN_OTHER:"Other skin or glandular system",MUSCULO_SYSTEM:"Musculo-Skeletal system",ABDOMEN:"Abdomen",SKULL:"Skull",BONES:"Bones other than vertebral column or skull",COLLAGEN:"Collagen",TENDONS:"Tendons or ligaments",VERTEBRALCOLUMN:"Vertebral column",MUSCLE:"Muscle",MUSCLE_OTHER:"Other musculo-skeletal system",OTHERTISSUE_SYSTEM:"Other tissues or Fluids of origin",ADIPOSE:"Adipose or omentum",ASCITES:"Acscites",ANTLERV:"Antler velvet",SERUM:"Serum",WHOLEBLOOD:"Whole blood",PLASMA:"Plasma",EMBRYONICTISS:"Embryonic tissue",FETALTISS:"Fetal tissue",BONEMARROW:"Bone marrow",EYESCORNEA:"Eyes or cornea",GALL:"Gall bladder",FLUIDS_OTHER:"Other types of tissues or fluids",NONHUMANPRIMATE_TYPE:"Non-human primate",AQUATIC_TYPE:"Aquatic species such as fish, molluscs and crustacean",AVIAN_TYPE:"Avian such as chicken, turkey and duck",BOVINE_TYPE:"Bovine such as cattle, bison",CANINE_TYPE:"Canine",CAPRINE_TYPE:"Caprine such as goat",CERVIDAE_TYPE:"Cervidae such as deer, elk(wapiti) and moose",EQUINE_TYPE:"Equine such as horse",FELINE_TYPE:"Feline such as cat",OVINE_TYPE:"Ovine",PORCINE_TYPE:"Porcine such as pig",RODENT_TYPE:"Rodents such as mouse, hamster, rat and rabbit",OTHERANIMAL_TYPE:"Other",CONTROLLEDPOP:"Controlled Population",BIOTECHDERIVED:"Biotechnology Derived Animal",CELLLINE:"Cell line",IS_AGE_KNOWN:"Is age of animals known?",AGEANIMALS:"Age of animals in months",COUNTRYORIGIN:"Country of origin",SPECIFY_THE:"Specify the other ",HUMAN_ANIMAL_SOURCE:"Human / Animal Sourced",APPENDIX4:"Human/Animal Sourced Ingredient/Material",HUMAN_ANIMAL_SOURCED_TAB:"Animal / Human Sourced section",MISSING_APPENDIX:"Missing Human/Animal Sourced Ingredient/Material",UNKNOWN_COUNTRY_DETAILS:"Unknown Country Details",ING_DETAILS:"Ingredient/Material ",ANIMAL_TYPE_LBL:"Provide the animal type details",ANIMAL_TYPE:"Animal Type",ANIMAL_DETAILS:"Provide the animal type details",ANIMAL_SOURCE:"Animal Source",ANIMAL_TYPE_DETAILS:"Animal Type Details",ANIMAL_SRCS:"Animal Sources",ANIMAL_CTRIES_ORIGIN:"Animal Countries of Origin",ANIMAL_SRC_ADD:"Add Animal Source",TISSUES_FLUIDS_LBL:"Tissues or Fluids Details",SYSTEM_TYPE:"System",SYSTEM_DETAILS:"System Details",SYSTEM_OTHER:"Other Details",TISSUES_FLUIDS_ADD:"Add Tissues or Fluids",TISSUES_FLUIDS_SRCS:"Tissues or Fluids sources",TISSUE_FLUID:"Tissue or Fluid",ANIMAL_SRC:"Animal Source",FS_TYPE:"Source From",EXTRA_APPENDIX:"Human /Animal Sourced Ingredients /Materials not Referenced in any Formulation",CARDIO_LEGEND:"Select one or more Cardio-Respiratory system selections",NERVOUS_LEGEND:"Select one or more Nervous system selections",OTHER_LEGEND:"Select one or more Other Tissues or Fluids system Selections",IMMUNE_LEGEND:"Select one or more Immune system selections",DIGESTIVE_LEGEND:"Select one or more Digestive system selections",REPRODUCTIVE_LEGEND:"Select one or more Reproductive and urinary system selections",MUSCLE_LEGEND:"Select one or more Musculo-Skeletal system selections",SKIN_LEGEND:"Select one or more Skin and Glandular system selections",CARDIO_DETAILS:"Other cardio-respiratory system  details",DIGESTIVE_DETAILS:"Other digestive system  details",IMMUNE_DETAILS:"Other immune system  details",MUSCLE_DETAILS:"Other musculo-skeletal system  details",NERVOUS_DETAILS:"Other nervous system  details",OTHERTISS_DETAILS:"Other tissue or fluids details",REPRODUCTIVE_DETAILS:"Other reproductive and urinary system details",SKIN_DETAILS:"Other skin and glandular system details",ADD_SOURCED:"Add Ingredient/Material",DELETE_SOURCED:"Delete Ingredient/Material","AP4CTRL.APPENDIXFORM":"in the Human/Animal Sourced section","CMP-APPENDIX-FOUR-RECORD":"in the Human / Animal Sourced",ADD_TISSUES_FLUIDS:"Add Tissues or Fluids",ADD_ANIMAL_SOURCES:"Add Animal Sources",ADD_COUNTRY_ORIGIN:"Add country of origin of the animals"}),$translateProvider.translations("fr",{NERVOUS_SYSTEM:"Système nerveux",BRAIN:"Cerveau",BRAINSTEM:"Tronc cérébral",CEREBELLUM:"Cervelet",CEROFLUID:"Liquide céphalorachidien (LCR)",DORSALROOT:"Ganglion de la racine dorsale",DURAMATER:"Dure-mère",HYPOTHALAMUS:"Hypothalamus",RETINA:"Rétine/nerf optique Moelle épinière",SPINALCORD:"Moelle épinière",TRIGEMINAL:"Ganglion de Gasser",NERVOUS_OTHER:"Autre système nerveux",DIGESTIVE_SYSTEM:"Système digestif",APPENDIX:"Appendice",BILE:"Bile",DISTALILEUM:"Iléon distal",LARGEINTEST:"Gros intestin",SALIVA:"Salive ou glande salivaire",SMALLINTESTINE:"Intestin grêle, autre que l’iléon distal",STOMACH:"Estomac",DIGESTIVE_OTHER:"Autres système digestif",REPRODUCT_SYSTEM:"Systèmes reproductif et urinaire",MILK:"Lait ou Produits laitiers",KIDNEY:"Reins",COLOSTRUM:"Colostrum",MAMMARY:"Glandes mammaires",OVARIES:"Ovaires",PLACENTA:"Placenta",PLACENTAFLUID:"Fluide du placenta",SEMEN:"Sperme",TESTES:"Testicules",URINE:"Sang",REPROD_OTHER:"Autre système reproducteur et urinaire ",CARDIO_SYSTEM:"Système cardio-respiratoire",HEART:"Cœur ou péricarde",LUNG:"Poumon",NASALFLUID:"Fluide nasal",TRACHEA:"Trachée",PLACENTALFLUID:"Fluide du placenta",CARDIO_OTHER:"Autre système cardio-respiratoire",IMMUNE_SYSTEM:"Système immunitaire",LYMPH:"Ganglions lymphatiques",SPLEEN:"Rate",THYMUS:"Thymus",TONSILS:"Amygdales",IMMUNE_OTHER:"Autre système immunitaire",SKINGLAND_SYSTEM:"Peau et système glandulaire",ADRENAL:"Glande ou tissu surrénalien",HAIR:"Cheveu, plumes, sabots",LIVER:"Foie",PANCREAS:"Pancréas",PITUARYGLAND:"Hypophyse",SKINHIDES:"Peau ou cuirs",THYROID:"Thyroïde ou parathyroïde",SKIN_OTHER:"Autres système de la peau ou système glandulaire",MUSCULO_SYSTEM:"Système musculo-squelettique",ABDOMEN:"Abdomen",SKULL:"Crâne",BONES:"Os autre que la colonne vertébrale et le crâne",COLLAGEN:"Collagène",TENDONS:"Tendons ou ligaments",VERTEBRALCOLUMN:"Colonne vertébrale",MUSCLE:"muscle",MUSCLE_OTHER:"autre système musculo-squelettique",MUSCLEDETAIL:"Veuillez spécifier le système musculosquelettique",OTHERTISSUE_SYSTEM:"Origine des autres tissus ou fluides",ADIPOSE:"Tissu adipeux/épiploon",ASCITES:"Ascite",ANTLERV:"Velours de cervidé",SERUM:"Sérum",WHOLEBLOOD:"Sang entier",PLASMA:"Plasma",EMBRYONICTISS:"Tissu embryonnaire",FETALTISS:"Tissu fœtal",BONEMARROW:"Moelle osseuse",EYESCORNEA:"Yeux ou cornée",GALL:"Vésicule biliaire",FLUIDS_OTHER:"Autres types de tissus ou de fluides",NONHUMANPRIMATE_TYPE:"Primates non humains",AQUATIC_TYPE:"Espèces aquatiques (p. ex. poisson, mollusques, crustacés)",AVIAN_TYPE:"Volaille (p. ex. poulet, dinde, canard)",BOVINE_TYPE:"Bovine (p. ex. bétail, bison)",CANINE_TYPE:"Canine",CAPRINE_TYPE:"Caprine (p. ex. chèvre)",CERVIDAE_TYPE:"Cervidés (p. ex. cerf, élan (wapiti), orignal)",EQUINE_TYPE:"Chevaline (p. ex. cheval)",FELINE_TYPE:"Féline (p. ex. chat)",OVINE_TYPE:"Ovine",PORCINE_TYPE:"Porcine (p. ex. cochon)",RODENT_TYPE:"Rongeurs (p. ex. souris, hamster, rat, lapin)",OTHERANIMAL_TYPE:"Autre",CONTROLLEDPOP:"Population contrôlée",BIOTECHDERIVED:"Animal dérivé de la biotechnologie",CELLLINE:"Lignée cellulaire",IS_AGE_KNOWN:"L'âge des animaux est-il connu?",AGEANIMALS:"L'âge des animaux en mois",COUNTRYORIGIN:"Pays d'origine des animaux",SPECIFY_THE:"Spécifiez l'autre",MISSING_APPENDIX:"L'ingrédient ou matériel source humaine ou d'animale absent",UNKNOWN_COUNTRY_DETAILS:"Détails du pays inconnu",ING_DETAILS:"L'ingrédient ou matériel ",APPENDIX4:"L'ingrédient ou matériel source humaine ou d'animale",ANIMAL_TYPE_LBL:"Fournir les details du type d’animal",ANIMAL_TYPE:"Type d'animal",ANIMAL_DETAILS:"Fournir les details du type d’animal",ANIMAL_SOURCE:"fr_Animal Source",ANIMAL_TYPE_DETAILS:"Details du type d’animal",ANIMAL_SRCS:"Sources d'animales",ANIMAL_CTRIES_ORIGIN:"Pays d'origines des animaux",ANIMAL_SRC_ADD:"fr_Add Animal Source",TISSUES_FLUIDS_LBL:" Tissus ou Fluides",SYSTEM_TYPE:"Système",SYSTEM_DETAILS:"Détails du système",SYSTEM_OTHER:"Autre détails",TISSUES_FLUIDS_ADD:"fr_Add Tissues or Fluids",TISSUES_FLUIDS_SRCS:"Origine des tissus ou fluides",ANIMAL_SRC:"fr_Animal Source",FS_TYPE:"Sourcer de",EXTRA_APPENDIX:"Enregistrements de source humaine /animale non référencés dans aucune formulation",CARDIO_DETAILS:"Autres détails du système cardio-respiratoire",DIGESTIVE_DETAILS:"Autres détails du système digestif",IMMUNE_DETAILS:"Autres détails du système immunitaire",MUSCLE_DETAILS:"Autres détails du système musculo-squelettique",NERVOUS_DETAILS:"Autres détails du système nerveux",OTHERTISS_DETAILS:"Autres détails de tissus ou de fluides",REPRODUCTIVE_DETAILS:"Autres détails du système reproducteur et urinaire",SKIN_DETAILS:"Autres détails de la peau et du système glandulaire",ADD_SOURCED:"Ajouter un ingrédient/matériel",DELETE_SOURCED:"Supprimer l'ingredient/matériel",HUMAN_ANIMAL_SOURCE:"Source d'animale ou humaine",ADD_TISSUES_FLUIDS:"Ajouter des tissus ou fluides",ADD_ANIMAL_SOURCES:"Ajouter des sources d'animales",ADD_COUNTRY_ORIGIN:"Ajouter un pays d'origine des animaux",CARDIO_LEGEND:"Sélectionnez une ou plusieurs sélections de système cardio-respiratoire",NERVOUS_LEGEND:"Sélectionnez une ou plusieurs sélections de système nerveux",OTHER_LEGEND:"Sélectionnez une ou plusieurs types sélections de tissus ou de fluides autre système",IMMUNE_LEGEND:"Sélectionnez une ou plusieurs sélections de système immunitaire",DIGESTIVE_LEGEND:"Sélectionnez une ou plusieurs de système digestif",REPRODUCTIVE_LEGEND:"Sélectionnez une ou plusieurs sélections de système reproducteur et urinaire.",MUSCLE_LEGEND:"Sélectionnez une ou plusieurs sélections de système musculo-squelettique",SKIN_LEGEND:"Sélectionnez une ou plusieurs sélections de système peau et glandulaire","AP4CTRL.APPENDIXFORM":"dans la section source animale / humaine",HUMAN_ANIMAL_SOURCED_TAB:"section source animale / humaine","CMP-APPENDIX-FOUR-RECORD":" dans la section source animale / humaine"}),$translateProvider.translations("en",{ACUTEALCOHOL:"Acute Alcoholism",ACUTEANXIETY:"Acute anxiety state",ACUTERESP:"Acute infectious respiratory syndromes",ACUTEINFLAM:"Acute inflammatory and debilitating arthiritis",ACUTEPSYCHOTIC:"Acute psychotic conditions",ADDICTION:"Addiction (except nicotine addiction)",ATERIOSCLEROSIS:"Ateriosclerosis",APPENDICITIS:"Appendicitis",ASTHMA:"Asthma",CANCER:"Cancer",HEARTCONGEST:"Congestive heart failure",CONVULSIONS:"Convulsions",DEMENTIA:"Dementia",DEPRESSION:"Depresssion",DIABETES:"Diabetes",GANGRENE:"Gangrene",GLAUCOMA:"Glaucoma",BLEEDINGDISORDERS:"Haematologic bleeding disorders",HEPATITIS:"Hepatitis",HYPERTENSION:"Hypertension",NAUSEAPREG:"Nausea and vomiting of pregnancy",OBESITY:"Obesity",RHEUMATICFEVER:"Rheumatic fever",SEPTICEMIA:"Septicemia",SEXDISEASE:"Sexually transmitted disease",STRANGHERNIA:"Strangulated hernia",THROMBOTICDISORDER:"Thrombotic and Embolic Disorder",THYROIDDISEASE:"Thyroid disease",UCLERGASTRO:"Ulcer of gastro-intestinal tract",SCHEDA_CLAIMS:"Please list the schedule A Claims and Indications associated with this product",SCHEDA_DISEASE:"Please check the diseases and disorders that apply to the claims made (select at least one)",ISSCHEDA:"This is a non-prescription drug to which one or more Schedule A claims apply",SCHEDA_DETAILS:"Schedule A Claim Details"}),$translateProvider.translations("fr",{ACUTEALCOHOL:"Alcoolisme aigu",ACUTEANXIETY:"État anxieux aigu",ACUTERESP:"Syndromes respiratoires infectieux aigus",ACUTEINFLAM:"Arthrite aiguë, inflammatoire et débilitante",ACUTEPSYCHOTIC:"Troubles psychotiques aigus",ADDICTION:"Dépendance (sauf la dépendance à la nicotine)",ATERIOSCLEROSIS:"Artériosclérose",APPENDICITIS:"Appendicite",ASTHMA:"Asthme",CANCER:"Cancer",HEARTCONGEST:"Insuffisance cardiaque congestive",CONVULSIONS:"Convulsions",DEMENTIA:"Démence",DEPRESSION:"Dépression",DIABETES:"Diabète",GANGRENE:"Gangrène",GLAUCOMA:"Glaucome",BLEEDINGDISORDERS:"Affections hématologiques hémorragiques",HEPATITIS:"Hépatite",HYPERTENSION:"Hypertension",NAUSEAPREG:"Nausées et vomissements liés à la grossesse",OBESITY:"Obésité",RHEUMATICFEVER:"Fièvre rhumatismale",SEPTICEMIA:"Septicémie",SEXDISEASE:"Maladies transmises sexuellement",STRANGHERNIA:"Hernie étranglée",THROMBOTICDISORDER:"Maladies thrombotiques et emboliques",THYROIDDISEASE:"Maladie thyroïdienne",UCLERGASTRO:"Ulcères des voies gastro-intestinales",SCHEDA_CLAIMS:"Indiquer les allégations et indications de l’annexe A associées avec ce produit",SCHEDA_DISEASE:"Cochez la maladie ou le trouble visé par les allégations (au moins une)",ISSCHEDA:"Ce médicament en vente libre auquel une ou plusieurs allégations de l’annexe A s’appliquent",SCHEDA_DETAILS:"Annexe A détails des allégations"}),$translateProvider.translations("en",{ING_NAME:"Ingredient Name",N_ING_NAME:"Ingredient Name",ING_ROLE:"Role",CAS_NUM:"Chemical Abstract Services(CAS)",CAS_FULL:"Chemical Abstract Services Number",STANDARD:"Standard",STRENGTH:"Strength",OPERATOR:"Operator",VALUE:"Value",EQUALS:"Equals",NOT_GREAT_THAN:"Not More Than",NOT_LESS_THAN:"Not Less Than",RANGE_LOWER_LIMIT:"Lower Limit",RANGE_UPPER_LIMIT:"Upper Limit",STRENGTH_OPERATOR:"Strength - Operator",STRENGTH_VALUE:"Strength - Value",STRENGTH_RANGE_LOWER_LIMIT:"Strength - Lower limit",STRENGTH_DATA2:"Strength - Upper limit",UNITS:"Units",UNIT:"Unit",UNIT_PRESENTATION:"Unit of Presentation",UNIT_MEASURE:"Unit of Measure",OTHER_UNIT_PRESENTATION:"Other Details",OTHER_UNIT_MEASURE:"Other Details",PER_STRENGTH:"Per",PER_VALUE:"Per Value",ISBASE:"Calculated as Base?",CAB_YES1:"Yes, my ingredient is supplied as a salt, but calculated as a base",CAB_YES2:"Yes, my ingredient is supplied as a base, and calculated as a base",CAB_NO:"No, my ingredient is supplied as a salt, and calculated as a salt",CAB_NO2:"No, my product is a biologic",CAB_NO3:"No, my ingredient is not a salt",IS_NANO_MATERIAL:"Is this a nanomaterial?",NANO_MATERIAL:"Nanomaterial",NANO_MATERIAL_OTHER:"Indicate the type of nanomaterial",ANIMAL_HUMAN_SOURCED:"Animal or Human Sourced?",
INGREDIENT_LIST:"Ingredient List",ROLE:"Role",INGREDIENT:"Ingredient",INGREDIENTS:"Ingredients",MED:"Medicinal Ingredient",NONMED:"Non-Medicinal Ingredient",VARIANT_NAME:"Formulation Variant Name (if applicable)",VARIANT_NAME_HEADER:"Formulation Variant Name",NMI_PROPRIETARY_INFO_CHKBX:"I attest that the details for this non-medicinal ingredient are unknown as they are proprietary information.",NMI_PROPRIETARY_INFO_LBL:"The proprietary information can be found in the following",NMI_PROPRIETARY_INFO_FLD_NOTE:"Note: if the referenced information is unacceptable, further details will be requested.",PURPOSE:"Purpose",CONTAINER_TYPE:"Container Type",PACKAGE_SIZE:"Package Size",MATERIAL_NAME:"Material Name",PRESENT_IN_FINAL:"Present in final Container",INGRED_DETAILS:"Ingredient Details",MEDICINAL_INGRED_DETAILS:"Medicinal (Active) Ingredient Details",NONMEDICINAL_INGRED_DETAILS:"Non-Medicinal Ingredient Details",CONTAINER_TYPE_DETAILS:"Container Type",MATERIAL_DETAILS:"Animal and / or Human Sourced Materials Details",CALCULATED_AS_BASE:"Calculated as Base?",SHELF_LIFE_NUMBERS:"Value",MIN_TEMP:"Minimum, Celsius",MAX_TEMP:"Maximum, Celsius",TEMP_RANGE:"Temperature Range",SHELF_LIFE:"Shelf Life",OTHER_SHELF_LIFE_CONSIDER:"Other Shelf Life Considerations",IN_FINAL_CONTAINER:"Present in Final Container?",OTHER_ROA_DETAILS:"Other",OTHER_ROA:"Other Route of Administration",ROA_LBL:"Route of Admin",ROA_LBL_ROA:"Route of Administration",ROA_ABREV:"ROA",FORMULATION:"Formulation",FORMULATIONS:"Formulations",FORMULATION_DETAILS:"Formulation",FORMULATION_NAME:"Formulation Name",FORM_ID:"Identifier",ANIMAL_CTRY_ORIGIN:"Country of Origin of the Animals",ADD_ROA:"Add Route of Administration",MEDICINAL_INGRED:"A. Medicinal (Active) Ingredients",NONMEDICINAL_INGRED:"B. Non-Medicinal Ingredients",IS_ANIMAL_HUMAN_MATERIAL:"Was Animal and/or Human Sourced Material (other than the ingredient listed in the formulation above) used at any stage in the manufacturing of the drug?",CONTAINER_TYPES:"Container Types, Package Size and Shelf Life",ANIMAL_HUMAN_HDING:"Animal and / or Human Sourced Materials used at any stage in the manufacture of the drug",ROA_TITLE:"Routes of Administration",COUNTRIES_MANUFACT:"Countries of manufacture for this product",IN_LIST:"In list",UNITS_SRCH:"Select or Search Units",SOURCED_INFO:"Please complete additional details related to this ingredient in section “12. Animal/Human Sourced Ingredient/Material”",SOURCED_INFO_MATERIAL:"Please complete additional details related to this material in section “12. Animal/Human Sourced Ingredient/Material”",DELETE_FORMULATION:"Delete Formulation",COPY_FORMULATION:"Copy formulation",ADD_FORMULATION:"Add formulation",SELECT_DOSAGE:"Select a dosage form",SELECT_ROA:"Choose a Route of Administration",ADD_INGREDIENT:"Add Ingredient",ADD_CONTAINER:"Add Container Type",ADD_ROUTES_ADMINISTRATION:"Add Routes of Administration",ADD_COUNTRY_MANUFACTURE:"Add Countries of manufacture",ADD_ANIMAL_HUMAN_MATERIAL:"Add Animal and / or Human Sourced Materials",ADD_MATERIAL:"Add Material",AH_SOURCED_INSTRUCT:"Animal / Human Sourced Instructions",INGREDIENT_NAME_INSTRUCT:"Ingredient Name Instructions",FORM_REC_INSTRUCT:"Formulation Record Instructions",MATERIALS_INSTRUCT:"Sourced Materials Instructions",COUNTRIES_MANUFACT_INSTRUCT:"Countries of manufacture Instructions",CONTAINER_INSTRUCT:"Container Type Instructions",PACKAGE_SIZE_INSTRUCT:"Package Size Instructions",SHELF_LIFE_INSTRUCT:"Shelf Life Instructions",STANDARD_INSTRUCT:"Standard Instructions",IS_NANO_INSTRUCT:"Is Nanomaterial Instructions",VARIANT_INSTRUCT:"Variant Name Instructions",PURPOSE_INSTRUCT:"Purpose Instructions",IMPORTER_INSTRUCT:"Importer Instructions","CMP-FORMULATION-RECORD":"in formulation","MIRCTRL.MATERIALINGRECORDFORM":"in the animal and / or human sourced materials details","INGRECCTRL.ACTIVEINGFORM":"in the medicinal ingredient details","NINGRECCTRL.NONMEDINGFORM":"in the non-medicinal ingredient details","CTRCTRL.CONTAINERTYPEFORM":"in the container type details","FORMULCTRL.FORMULATIONSFORM":"in the formulations section",INGREDIENT_INSTRUCT:"Ingredient Instructions",SHELF_LIFE_NUMBER:"Value",MATERIAL_INGREDIENT_LIST:"Material Ingredient List",ANIMAL_SOURCES:"Animal Sources"}),$translateProvider.translations("fr",{ING_NAME:"Nom de l’ingrédient",N_ING_NAME:"Nom de l’ingrédient",ING_ROLE:"Rôle",CAS_NUM:"Chemical Abstracts Service(CAS)",CAS_FULL:"Numéro Chemical Abstracts Service",STANDARD:"Norme",STRENGTH:"Concentration",OPERATOR:"Opérateur",VALUE:"Valeur",EQUALS:"Egale",NOT_GREAT_THAN:"Pas plus de",NOT_LESS_THAN:"Pas moins de",RANGE_LOWER_LIMIT:"Limite inférieure",RANGE_UPPER_LIMIT:"Limite supérieure",STRENGTH_OPERATOR:"Concentration - Opérateur",STRENGTH_VALUE:"Concentration - Valeur",STRENGTH_RANGE_LOWER_LIMIT:"Concentration - Limite inférieure",STRENGTH_DATA2:"Concentration - Limite supérieure",UNITS:"Unités",UNIT:"Unité",UNIT_PRESENTATION:"Unité de présentation",UNIT_MEASURE:"Unité de mesure",OTHER_UNIT_PRESENTATION:"Autre détails",OTHER_UNIT_MEASURE:"Autre détails",PER_STRENGTH:"Par",PER_VALUE:"Par Valeur",ISBASE:"Calculé sous forme de base?",CAB_YES1:"Oui, mon ingrédient est fourni comme un sel, mais calculé comme une base",CAB_YES2:"Oui, mon ingrédient est fourni comme une base, et calculé comme une base",CAB_NO:"Non, mon ingrédient est fourni comme un sel, et calculé comme un sel",CAB_NO2:"Non, mon product est un produit biologique",CAB_NO3:"Non, mon ingrédient n'est pas un sel",IS_NANO_MATERIAL:"Est-ce un nanomatériau?",NANO_MATERIAL:"Nanomatériau",NANO_MATERIAL_OTHER:"Indiquer le type de nanomatériau",ANIMAL_HUMAN_SOURCED:"Source d'animale ou humaine?",INGREDIENT_LIST:"Liste d'ingrédients",ROLE:"Rôle",INGREDIENT:"Ingrédient",INGREDIENTS:"Ingrédients",MED:"Ingrédient médicinal actif",NONMED:"Ingrédient non-médicinal actif",VARIANT_NAME:"Nom de la variante de la formulation (le cas échéant)",VARIANT_NAME_HEADER:"Nom de la variante de la formulation",NMI_PROPRIETARY_INFO_CHKBX:"J'atteste que les détails de cet ingrédient non médicinal sont inconnus car il s'agit d'informations exclusives.",NMI_PROPRIETARY_INFO_LBL:"Les informations exclusives peuvent être trouvées",NMI_PROPRIETARY_INFO_FLD_NOTE:"Remarque: si les informations référencées ne sont pas acceptables, des détails supplémentaires vous seront demandés.",PURPOSE_INSTRUCT:"Purpose Instructions",PURPOSE:"But",CONTAINER_TYPE:"Type de contenant",PACKAGE_SIZE:"Capacité de l'emballage",MATERIAL_NAME:"Nom du matériel",PRESENT_IN_FINAL:"Présence dans le contenant final",INGRED_DETAILS:"Ingrédient",MEDICINAL_INGRED_DETAILS:"fr_Medicinal (Active) Ingredient Details",NONMEDICINAL_INGRED_DETAILS:"Non-Medicinal Ingredient Details",CONTAINER_TYPE_DETAILS:"Type de contenant",MATERIAL_DETAILS:"Détail de matériaux de source d'animale et/ou humaine",CALCULATED_AS_BASE:"Calculé comme base?",SHELF_LIFE_NUMBERS:"Valeur",MIN_TEMP:"Minimum, Celsius",MAX_TEMP:"Maximum, Celsius",TEMP_RANGE:"Écart de température",SHELF_LIFE:"Durée de vie",OTHER_SHELF_LIFE_CONSIDER:" Autres considérations relatives à la durée de vie",IN_FINAL_CONTAINER:"Présence dans le contenant final?",OTHER_ROA_DETAILS:"Autre",OTHER_ROA:"Autre voie d'administration",ROA_LBL:"Voie d'admin",ROA_LBL_ROA:"Voie d'administration",ROA_ABREV:"fr_ROA",FORMULATION:"Formulation",FORMULATIONS:"Formulations",FORMULATION_DETAILS:"Formulation",FORMULATION_NAME:"Nom de la formulation",FORM_ID:"Numéro",ANIMAL_CTRY_ORIGIN:"Pays d'origine des animaux",ADD_ROA:"Ajouter une voie d'administration",MEDICINAL_INGRED:"fr_Medicinal (Active) Ingredients",NONMEDICINAL_INGRED:"fr_Non-Medicinal Ingredients",IS_ANIMAL_HUMAN_MATERIAL:"Est-ce un matériel(aux) de source humaine et/ou animale (autre que l’ingrédient figurant dans la formulation ci-dessus) était utilisé(s) à l’une ou l’autre étape de la fabrication du produit?",CONTAINER_TYPES:" Type de contenant, capacité de l'emballage et durée de vie",ANIMAL_HUMAN_HDING:"Matériel(aux) de source humaine et/ou animale utilisé à l’une ou l’autre étape de la fabrication du produit",ROA_TITLE:"Voie d'administration",COUNTRIES_MANUFACT:"Pays de fabricatin pour ce produit",IN_LIST:"Dans la liste",UNITS_SRCH:"fr_Select or Search Units",SOURCED_INFO:"Veuillez fournir des détails supplémentaires lié à cet ingrédient dans la section « 12. L'ingrédient ou matériel source humaine ou d'animale »",SOURCED_INFO_MATERIAL:"Veuillez fournir des détails supplémentaires lié à cet matière dans la section « 12. L'ingrédient ou matériel source humaine ou d'animale »",DELETE_FORMULATION:"Supprimer la formulation",COPY_FORMULATION:"Copier la formulation",ADD_FORMULATION:"Ajouter une formulation",SELECT_DOSAGE:"fr_Select a dosage form",SELECT_ROA:"fr_Choose a Route of Administration",ADD_CONTAINER:"Ajouter un type de contenant",ADD_INGREDIENT:"Ajouter un ingrédient",AH_SOURCED_INSTRUCT:"fr_Animal / Human Sourced Instructions",ADD_ROUTES_ADMINISTRATION:"Ajouter une voie d'administration",ADD_COUNTRY_MANUFACTURE:"Ajouter un pays de fabrication",ADD_ANIMAL_HUMAN_MATERIAL:"Ajouter matériaux de source humaine et/ou animale",ADD_MATERIAL:"fr_Add Material",INGREDIENT_NAME_INSTRUCT:"fr_Ingredient Name Instructions",FORM_REC_INSTRUCT:"fr_Formulation Record Instructions",MATERIALS_INSTRUCT:"fr_Sourced Materials Instructions",COUNTRIES_MANUFACT_INSTRUCT:"fr_Countries of manufacture Instructions",CONTAINER_INSTRUCT:"fr_Container Type Instructions",PACKAGE_SIZE_INSTRUCT:"fr_Package Size Instructions",SHELF_LIFE_INSTRUCT:"fr_Shelf Life Instructions",STANDARD_INSTRUCT:"fr_Standard Instructions",IS_NANO_INSTRUCT:"fr_Is Nanomaterial Instructions",VARIANT_INSTRUCT:"fr_Variant Name Instructions",IMPORTER_INSTRUCT:"fr_Importer Instructions","CMP-FORMULATION-RECORD":" dans la section formulation","INGRECCTRL.ACTIVEINGFORM":"dans les détails des ingrédients médicinaux","MIRCTRL.MATERIALINGRECORDFORM":"dans les détails de matériaux de source d'animale et/ou humaine","NINGRECCTRL.NONMEDINGFORM":"fr_in the nom-medicinal ingredient details","FORMULCTRL.FORMULATIONSFORM":"dans la section formulation",INGREDIENT_INSTRUCT:"Ingredient Instructions","CTRCTRL.CONTAINERTYPEFORM":"dans les détails du type de conteneur",SHELF_LIFE_NUMBER:"Valeur",MATERIAL_INGREDIENT_LIST:"Liste des ingrédients matériels",ANIMAL_SOURCES:"Sources d'animales"}),$translateProvider.translations("en",{Y:"Yes",N:"No",ADD:"Add",DELETEROW:"Delete Row",SELECTEDROW:"Selected Row",REQUIRED:"(required)",ROLES_SELECT:"Select one or more roles for this record",NEW:"New",AMEND:"Amend",APPROVED:"Approved",FINAL:"Final",CLICK_TOGGLE:"Click to toggle the collapse or expand details for this address.",AMEND_RECORD:"Amend Record",en:"English",fr:"French",ADD_RECORD:"Add Record",SAVE_RECORD:"Save Record",DELETE_RECORD:"Delete Record",COPY_RECORD:"Copy Record",DISCARD_CHANGES:"Discard Changes",REPSECONDARY:"Alternate Regulatory Enrolment Process contact",REPPRIMARY:"Regulatory Enrolment Process contact",MAILING:"Regulatory Mailing / Annual Contact Address",BILLING:"Billing Address",MANUFACTURER:"Manufacturer / Sponsor Mailing Address",IMPORTER_ADDRESS:"Canadian Importer Mailing Address",CAN_IMP:"Canadian Importer Contact",CONTACTMAILING:"Regulatory Mailing / Annual Contact",CONTACTBILLING:"Billing Contact",CONTACTMANUFACTURER:"Manufacturer / Sponsor Contact",CONTACT_IMPORTER:"Importer Contact",APPROVE_FINAL:"Generate Final XML",SAVE_DRAFT:"Save Draft XML",PRIMARY:"Primary",SECONDARY:"Alternate",TOGGLE_EXPAND:"Click to toggle collapse or expand details of row",CONTROL_NUMBER:"Control Number",REP_CONTACT_INFO:"Regulatory Enrolment Process Contact Information",SAVE_CONTACT:"Save Contact",DELETE_CONTACT:"Delete Contact",COMPANY_ID:"Company Identifier",DOSSIER_ID:"Dossier Identifier",IMPORTER:"Importer",IMPORTERID:"Importer Company Identifier",IMPORTER_COMPANY_NAME:"Importer Company Name",IMPORTER_COMPANY_ID_IF:"Importer Company Identifier (if applicable)",IMPORTER_COMPANY_NAME_IF:"Importer Company Name (if applicable)",ERRORS:"Errors",UNKNOWN:"Unknown",BIOLOGIC:"Biologic",PHARMACEUTICAL:"Pharmaceutical",VETERINARY:"Veterinary",CLINICAL_TRIAL:"Clinical Trial",HELP_FILE_LOAD:"file load instructions",EXPAND:"Expand",HELP_ACTIVITY_MAIN:"Activity Instructions",HELP_ACTIVITY_REP:"Regulatory Enrolment Process Contact Instructions",CALENDAR:"Pick date from calendar",HIDE_CALENDAR:"Hide Calendar (escape key)",OTHER:"Other",HELP_REP_CONTACT:"Regulatory Enrolment Process Contact Instructions",OTHER_UNITS:"Units other details",COMPANYNAME:"Company Name",FULLLEGALNAME:" (Full Legal Name)",BUSINESSNUMBER:"Business Number",ACOMPANYNAME:"Company Name (Full legal name - no abbreviations)",COPY:"Copy",DELETE:"Delete",SAVE_WORKING:"Save Working Copy",COMPANY_NOABBREV:"Company Name (Full Legal Name)",CLOSE_ALERT:"Collapse instructions",COLLAPSE:"Collapse",CONTROL_NUM:"Control Number",OTHER_DETAILS:"Other - specify",PROD_NAME:"Product Name",PROD_NAME_HELP:"Product Name Instructions",PROP_NAME_HELP:"Proper, Common or Non-proprietary Name Instructions",RELATED_INFO_HELP:"Related Information Instructions",DOSSIER_TYPE:"Dossier Type",LEAST_5_CHAR:" (5 characters)","5_OR_6_CHAR":" ( 5 or 6 characters)",LEAST_7_CHAR:" (7 characters)",INCLUDE_AREA_CODE:" (including area code)",LEAST_6_DIGIT:" (6 digits only)",LEAST_5_DIGIT:" (5 digits only)",LEAST_9_CHAR:" (9 characters)",INSTRUCTION:"Instruction",RETURN_INSTRUCTION:"Return to instruction reference ",PRIVACY_NOTICE_STATEMENT:"Privacy Notice Statement",SECURITY_DISCLAIMER:"Security Disclaimer",PRIVACY_STATEMENT:"By submitting your personal information, you are consenting to its collection, use and disclosure in accordance with the Privacy Notice Statement.",FOOTNOTE_INSTRUCTION:"Instructions for completing sections on form",SECTION_IS_NOT_VISIBLE:"[ This section may not be visible. ]",FAX_NOT_AVAILABLE:" (Use 0000000000 if not available)",NOT_APPLICABLE:"Not applicable",D21:"Biologic",D22:"Pharmaceutical",D24:"Veterinary",D26:"Clinical Trial",BROWSER:"Browser",TABLE_EXPANDED_STATE:"Expanded State",PROTECTED_B:'Protected "B" when completed',ROUTING_ID:"Routing Identifier",REFERRER:" referrer",CHAR_6_DIGITS:" (a lowercase letter followed by 6 numbers)",FORMAT_TYPE_MINLENGTH:"Incorrect format - less than minimum length",FORMAT_TYPE_PATTERN:"Incorrect format - must be a lowercase letter followed by six numbers"}),$translateProvider.translations("fr",{Y:"Oui",N:"Non",ADD:"fr_Add",DELETEROW:"fr_Delete Row",SELECTEDROW:"fr_Selected Row",REQUIRED:"(obligatoire)",ROLES_SELECT:"fr_Select one or more roles for this record",NEW:"Nouvelle",AMEND:"Modification",APPROVED:"fr_Approved",FINAL:"Finale",CLICK_TOGGLE:"fr_Click to toggle the collapse or expand details for this address.",AMEND_RECORD:"fr_Amend Record",en:"Anglais",fr:"Français",ADD_RECORD:"Ajouter un enregistrement",SAVE_RECORD:"Enregistrer",DELETE_RECORD:"Supprimer l'enregistrement",COPY_RECORD:"Copier",DISCARD_CHANGES:"Éliminer les modifications",REPSECONDARY:"Personne-resource supplémentaire pour le processus d'inscription réglemetaire",REPPRIMARY:"Personne-ressource pour le processus d'inscription réglementaire",MAILING:"Contact pour le l'address courrier réglementaire / adresse pour l'annuelle",BILLING:"Adresse de facturation",MANUFACTURER:"Adresse postale du fabricant / promoteur",IMPORTER_ADDRESS:"Adresse postale de l'importateur canadien",CONTACTMAILING:"Courrier réglementaire / adresse de personne-ressource pour l'annuelle",CAN_IMP:"Personne-ressource pour l'importateur canadien",CONTACTBILLING:"Personne-ressource de facturation",CONTACTMANUFACTURER:"Personne-ressource du fabricant/promoteur",CONTACT_IMPORTER:"Personne-ressource de l'importateur",APPROVE_FINAL:"Générer le XML finale",SAVE_DRAFT:"Enregistrer le brouillon XML",PRIMARY:"fr_Primary",SECONDARY:"fr_Alternate",TOGGLE_EXPAND:"Cliquez pour réduire ou ouvrir les détails de la ligne ",CONTROL_NUMBER:"Numéro de contrôle",REP_CONTACT_INFO:"fr_Main Contact Information",SAVE_CONTACT:"fr_Save Contact",DELETE_CONTACT:"fr_Delete Contact",COMPANY_ID:"Numéro de la compagnie",DOSSIER_ID:"Numéro de dossier",IMPORTER:"Importateur",IMPORTERID:"Numéro de compagnie de l'importateur",IMPORTER_COMPANY_NAME:"Nom de compagnie de l'importateur",IMPORTER_COMPANY_ID_IF:"fr_Importer Company Identification (if applicable)",IMPORTER_COMPANY_NAME_IF:"fr_Importer Company Name (if applicable)",ERRORS:"Erreurs",UNKNOWN:"Inconnu",BIOLOGIC:"fr_Biologic",PHARMACEUTICAL:"fr_Pharmaceutical",HELP_FILE_LOAD:"fr_File Load Instructions",EXPAND:"fr_Expand",HELP_ACTIVITY_MAIN:"fr_Activity Instructions",HELP_ACTIVITY_REP:"fr_Regulatory Enrolment Process Contact Instructions",CALENDAR:"fr_Pick date from calendar",HIDE_CALENDAR:"fr_Hide Calendar (escape key)",OTHER:"Autre",HELP_REP_CONTACT:"Regulatory Enrolment Process Contact Instructions",OTHER_UNITS:"Unités, autre détails",COMPANYNAME:"Nom de la compagnie",FULLLEGALNAME:" (nom légal complet)",BUSINESSNUMBER:"Numéro d'entreprise",ACOMPANYNAME:"Nom de la compagnie (nom légal complet, sans abbréviation)",COPY:"fr_Copy",DELETE:"Supprimer",SAVE_WORKING:"Enregistrer une copie de travail",COMPANY_NOABBREV:"Nom de la compagnie (nom légal complet)",CLOSE_ALERT:"Minimiser les instructions",COLLAPSE:"Minimiser les",CONTROL_NUM:"Numéro de contrôle",OTHER_DETAILS:"Autre détails",PROD_NAME:"Nom du produit",PROD_NAME_HELP:"fr_Product Name Instructions",PROP_NAME_HELP:"fr_Proper, Common or Non-proprietary Name Instructions",RELATED_INFO_HELP:"fr_Related Information Instructions",DOSSIER_TYPE:"Type de dossier",LEAST_5_CHAR:" fr_(at least 5 characters)","5_OR_6_CHAR":" (5 ou 6 caractères)",LEAST_7_CHAR:" (7 caractères)",INCLUDE_AREA_CODE:" (y compris indicatif régional)",LEAST_6_DIGIT:" (6 chiffres seulement)",LEAST_5_DIGIT:" (5 chiffres seulement)",LEAST_9_CHAR:" (9 caractères)",INSTRUCTION:"Instructions",RETURN_INSTRUCTION:"Revenir à la référence de l'instruction ",PRIVACY_STATEMENT_HELP:"fr_View Privacy Notice Statement",PRIVACY_NOTICE_STATEMENT:"Énoncé de confidentialité",SECURITY_DISCLAIMER:"Avis de non-responsabilité concernant la sécurité",PRIVACY_STATEMENT:"En soumettant vos renseignements personnels, vous consentez à sa collecte, à son utilisation et à sa divulgation conformément à l'énoncé de confidentialité.",FOOTNOTE_INSTRUCTION:"Instructions pour compléter les sections du formulaire",SECTION_IS_NOT_VISIBLE:"[ Cette section peut ne pas être visible. ]",FAX_NOT_AVAILABLE:" (Si pas disponible, utilisez 0000000000)",NOT_APPLICABLE:"fr_Not applicable",D21:"Biologique",D22:"Pharmaceutique",D24:"Vétérinaire",D26:"Essai clinique",BROWSER:"Navigateur",TABLE_EXPANDED_STATE:"État ouvert",PROTECTED_B:'Protégé "B" une fois rempli',ROUTING_ID:"Identificateur  d'acheminement",REFERRER:" référent",CHAR_6_DIGITS:" (composé d’une lettre minuscule suivie de six chiffres)",FORMAT_TYPE_MINLENGTH:"Format incorrect - moins que la longueur minimale",FORMAT_TYPE_PATTERN:"Format incorrect - composé d’une lettre minuscule suivie de six chiffres"}),$translateProvider.translations("en",{SELECT_LOAD:"Select a file to load",MSG_SUCCESS_LOAD:"The file was loaded successfully",MSG_ERR_JSONPARSE:"Error: there was an error parsing the working file.",MSG_ERR_XMLPARSE:"Error: there was an error parsing the draft XML file.",MSG_ERR_FILE_LOAD:"Error: there was a problem loading the file.",MSG_ERR_FILE_TYPE:"Error: An invalid file type was selected.",MSG_ERR_FORM_TYPE:"Error: the wrong form type was selected for this form.",MSG_ERR_CHECKSUM_FAIL:"Error: the checksum in the file does not match the calculated checksum",MSG_ERR_FILE_VERSION:"Error: An invalid file version was selected."}),$translateProvider.translations("fr",{SELECT_LOAD:"Sélectionnez un fichier à charger",MSG_SUCCESS_LOAD:"Le fichier a été chargé avec succès",MSG_ERR_JSONPARSE:"Erreur: il y a eu une erreur en analysant le fichier de travail.",MSG_ERR_XMLPARSE:"Erreur: il y avait une erreur d'analyse du projet de fichier XML,",MSG_ERR_FILE_LOAD:"Erreur: il y a eu un problème lors du chargement du fichier.",MSG_ERR_FILE_TYPE:"Erreur: un type de fichier invalide a été sélectionné.",MSG_ERR_FORM_TYPE:"Erreur: le type de formulaire incorrect a été sélectionné pour ce formulaire.",MSG_ERR_CHECKSUM_FAIL:"Erreur: La somme de contrôle dans le fichier ne correspond pas à la somme de contrôle calculée.",MSG_ERR_FILE_VERSION:"Erreur: un version de fichier invalide a été sélectionné."}),$translateProvider.translations("en",{APPL_STATUS:"Enrolment Status",ENROL_VERSION:"Enrolment Version",DATE_SAVED:"Date Last Saved",AMEND_ENROL:"Amend Enrolment",AMEND_MSG:"Edit records to be amended below.",REASON_AMEND:"Reason for filling"}),$translateProvider.translations("fr",{APPL_STATUS:"Statut de l'insciption",ENROL_VERSION:"Version de l'inscription",DATE_SAVED:" Date du dernier enregistrement",AMEND_ENROL:"Modifier l'inscription",AMEND_MSG:"Changer les enregistrements à modifier ci-dessous.",REASON_AMEND:"Raison de déposer"}),$translateProvider.translations("en",{MSG_ERR_MAND:"This field is required",MSG_ERR_EMAIL_FORMAT:"Please enter a valid email address.",MSG_ERR_ROLE:"This field is required",MSG_ERR_DISITYPE:"Please select at least one disinfectant type",MSG_ERR_ADDRESS:"Please select at least one address",MSG_ERR_CONTACT_NUM:"All the roles have to be used for the contacts",MSG_ERR_PHONE_FORMAT:"The format is not valid",MSG_ERR_FAX_FORMAT:"The format is not valid",MSG_ERR_ALLROLE:"The roles of manufacturer, mailing, billing, and primary REP contact  have not all been selected among the list of contacts",MSG_ERR_ADDRESSSROLE:"The roles of manufacturer, mailing, and billing have not all been selected among the list of addresses",MSG_ERR_POSTAL:"Please specify a valid postal code",MSG_ERR_ZIP:"Please specify a valid zip code.",MSG_ERR_DATE_FORMAT:"Please enter a valid date.",MANUFACT_SEL:"Role already Selected",MAIL_SEL:"Role already Selected",BILLING_SEL:"Role already Selected",IMPORTER_SEL:"Role already Selected",REPPRIM_SEL:"Role already Selected",REPALT_SEL:"Role already Selected",MSG_LENGTH_MIN5:"Must be five numbers.",MSG_LENGTH_6:"Less than minimum length.",MSG_LENGTH_6NUM:"Less than minimum length.",MSG_LENGTH_6NUM_CN:"Must be six numbers",MSG_LENGTH_8NUM:"Less than minimum length.",MSG_LENGTH_7:"Incorrect format - Less than minimum length.",MSG_LENGTH_7NUM:"Less than minimum length.",ONE_REP:"At least one contact is required.",MSG_ERR_NOTIF_SEL:"Please select at least one notifiable change.",MSG_ERR_MIN_POS:"Must be a positive number",MSG_ERR_MAX:"Exceeds the maximum",MSG_FORMAT_CHAR_6DIGITS:"ID should be a letter plus 6 digits.",MSG_ERR_DUPLICATED_SYSTEM:"Duplicated System.",MSG_FORMAT_ALPHA_NUMBERIC:"Incorrect format - must be lowercase letter followed by six numbers",MSG_ERR_INVALID_END_DATE:"End Date should not be earlier than Start Date.",MSG_DAY_MAX:"The value must be less than or equal to 999",MSG_HOUR_MAX:"The value must be less than or equal to 99"}),$translateProvider.translations("fr",{MSG_ERR_MAND:"Ce champ est obligatoire.",MSG_ERR_ROLE:"fr_Please select at least one role",MSG_ERR_DISITYPE:"Veuillez sélectionner au moins un type de désinfectant",MSG_ERR_ADDRESS:"fr_Please select at least one address",MSG_ERR_EMAIL_FORMAT:"Veuillez fournir une adresse courriel valide.",MSG_ERR_CONTACT_NUM:"fr_All the roles have to be used for the company contacts",MSG_ERR_PHONE_FORMAT:"Veuillez fournir un numéro de téléphone valide.",MSG_ERR_FAX_FORMAT:"Veuillez fournir un numéro de télécopieur valide.",MSG_ERR_ALLROLE:"fr_Across the contact records, the roles of manufacturer, mailing, billing, and REP primary contact must be selected",MSG_ERR_ADDRESSSROLE:"fr_The roles of manufacturer, mailing, and billing have not all been selected among the list of addresses",MSG_ERR_POSTAL:"Veuillez fournir un code postal valide",MSG_ERR_ZIP:"Veuillez fournir un code postal valide.",MSG_ERR_DATE_FORMAT:"Veuillez fournir une une date valide.",MANUFACT_SEL:"Rôle déjà sélectionné",MAIL_SEL:"Rôle déjà sélectionné",BILLING_SEL:"Rôle déjà sélectionné",IMPORTER_SEL:"fr_Importer Role already Selected",REPPRIM_SEL:"Rôle déjà sélectionné",REPALT_SEL:"Rôle déjà sélectionné",MSG_LENGTH_MIN5:"Veuillez fournir 5 chiffres.",MSG_LENGTH_6:"Veuillez fournir au moins 6 caractères.",MSG_LENGTH_6NUM:"Veuillez fournir 6 chiffres.",MSG_LENGTH_6NUM_CN:"Veuillez fournir 6 chiffres.",MSG_LENGTH_8NUM:"Veuillez fournir 8 chiffres.",MSG_LENGTH_7:"Format incorrect - Veuillez fournir 7 caractères.",MSG_LENGTH_7NUM:"Veuillez fournir  7 chiffres.",ONE_REP:"Au moins un contact est requis",MSG_ERR_NOTIF_SEL:"Sélectionnez au moins un changement de déclaration",MSG_ERR_MIN_POS:"Doit être un nombre positif",MSG_ERR_MAX:"Dépasse le maximum.",MSG_FORMAT_CHAR_6DIGITS:"fr_ID should be a letter plus 6 digits.",MSG_ERR_DUPLICATED_SYSTEM:"fr_Duplicated System.",MSG_FORMAT_ALPHA_NUMBERIC:"Format incorrect - composé d’une lettre suivie de six chiffres",MSG_ERR_INVALID_END_DATE:"La date de fin ne doit pas être antérieure à la date de début",MSG_DAY_MAX:"La valeur doit être inférieure ou égale à 999",MSG_HOUR_MAX:"La valeur doit être inférieure ou égale à 99"}),$translateProvider.translations("en",{FIRSTNAME:"First Name",LASTNAME:"Last Name",INITIALS:"Initials",LANGCORRESPOND:"Language of Correspondence",JOBTITLE:"Job Title",SALUTATION:"Salutation",SALUT_MR:"Mr.",SALUT_MS:"Ms.",SALUT_DR:"Dr.",SALUT_MRS:"Mrs.",ROLE_PRIMARY:"Primary",ROLE_SECONDARY:"Alternate",CONTACTEMAIL:"Email",FAX_NUMBER:"Fax Number",PHONE_EXT:"Phone Extension",ROLES:"Roles",PHONENUMBER:"Phone Number",CONTACT_INFO:"Company Representative Information",REP_CONTACT:"Regulatory Enrolment Process Contact",ONE_ROLE:"Role",CONTACT_DETAILS:"Company Representative Details",ADD_CONTACT:"Add REP Contact",CONTACT_ROLE_LEGEND:"Select one or more roles for this company representative",CONTACT_ROLE_INSTRUCT:"Company Representative Role Instructions",ADD_REPRES:"Add Company Representative",DELETE_REPRES:"Delete Company Rep.",SAVE_REPRES:"Save Company Rep.",IMP_COMPANY_NAME:"Canadian Importer Company Name"}),$translateProvider.translations("fr",{FIRSTNAME:"Prénom",LASTNAME:"Nom de famille",INITIALS:"Initiales",LANGCORRESPOND:"Langue de correspondance",JOBTITLE:"Titre",SALUTATION:"Appel",SALUT_MR:"M.",SALUT_MS:"Mme",SALUT_DR:"Dr.",SALUT_MRS:"Mlle",ROLE_PRIMARY:"Primaire",ROLE_SECONDARY:"Alterner",CONTACTEMAIL:"Courriel",FAX_NUMBER:"Numéro de télécopieur",PHONE_EXT:"Extension de téléphone",ADDR_ROLES:"Rôles",PHONENUMBER:"Numéro de téléphone",CONTACT_INFO:"Renseignements sur le représentant de la compagnie",REP_CONTACT:"Personne-ressource pour le PIR",ONE_ROLE:"Rôle",CONTACT_DETAILS:"Détails du représentant de la compagnie",ADD_CONTACT:"Ajouter la personne-ressource pour le PIR",CONTACT_ROLE_LEGEND:"Sélectionner un ou plusieurs rôles pour ce représentant de la compagnie",ADD_REPRES:"Ajouter un représentant de la compagnie",DELETE_REPRES:"Supprimer le représentant de la compagnie",SAVE_REPRES:"Enregistrer le représentant de la compagnie",ROLES:"Rôles",IMP_COMPANY_NAME:"Nom de la compagnie de l'importateur canadien"}),$translateProvider.translations("en",{FOR_THE:"The ",THERE_ARE_ERRORS:"There are errors",FORM_NOT_SAVED:"The form could not be saved because ",NOT_SAVED:" could not be saved because ",ERRORS_FOUND:" errors were found.",ERROR_FOUND:"error was found.",TYPE_REQUIRED:"This field is required.",TYPE_EMAIL:"Please enter a valid email address.",TYPE_DUPLICATEROLE:"This role has already been selected.",TYPE_DUPLICATESYS:"This system has already been selected.",TYPE_MIN:"Less than minimum value",TYPE_MINLENGTH:"Less than minimum length",POSTAL_FORMAT:"Please enter a valid format",TYPE_DATE:"Please enter a valid date",TYPE_NUMBER:"Please enter a valid number",TYPE_PATTERN:"Incorrect format",MSG_VALUE_MAX:"Value is not within valid limits",COMPANY_IN_USE:"The importer is in use for Company Representative Details, delete that record first."}),$translateProvider.translations("fr",{FOR_THE:"Pour le ",THERE_ARE_ERRORS:"Il y a des erreurs",FORM_NOT_SAVED:"Le formulaire n’a pas pu être enregistré car ",NOT_SAVED:" n’a pas pu être enregistré car ",ERRORS_FOUND:"erreurs ont été trouvées.",ERROR_FOUND:"erreur a été trouvée.",TYPE_REQUIRED:"Ce champ est obligatoire.",TYPE_EMAIL:"Veuillez fournir une adresse électronique valide.",TYPE_DUPLICATEROLE:"Ce rôle a déjà été sélectionné.",TYPE_DUPLICATESYS:"Ce système a été déjà sélectionné.",TYPE_MIN:"Moins que la valeur minimale.",TYPE_MINLENGTH:"Veuillez fournir au moins 5 chiffres.",POSTAL_FORMAT:"Entrez un format valide.",TYPE_DATE:"Veuillez fournir une une date valide.",TYPE_NUMBER:"Veuillez fournir un numéro valide.",TYPE_PATTERN:"Format incorrect",MSG_VALUE_MAX:"La valeur n'est pas dans les limites valides",COMPANY_IN_USE:"L'importateur est en cours d'utilisation pour les Détails du représentant de la compagnie, supprimez ce premier enregistrement."}),$translateProvider.translations("en",{PRODUCT_INFO_INSTRUCT:"Product Information Instructions",PROPER_NAME_INSTRUCT:"Proper, Common or Non-Proprietary Name Instructions",DRUG_USE_INSTRUCT:"Drug Use Instructions",PROP_INDI_INSTRUCT:"Proposed Indication Instructions",FORMULATION_INSTRUCT:"Formulation Instructions",LOAD_DRUGPROD:"Load Product Information XML File",INFO_DRUGPROD:"Drug Product Information",DRUGPROD:"Drug Product",TYPE_DRUGPROD:"Drug Product Type",DISINFECTANT_TYPE:"Disinfectant Type",DISI_TYPE_MISSING:"Disinfectant Type",SCHED_DIN:"Schedule A DIN Number",PROP_INDICATION:"Proposed Indication/Use/Dosage (including maximum daily dose)",SCHEDULE_PRESC_STATUS:"Schedule and Prescription status (check all that apply): The product is",SCHEDULE_C:"in Schedule C (radiopharmaceuticals) to the Food and Drugs Act",SCHEDULE_D:"included in Schedule D (biologics) to the Food and Drugs Act",PRESC_DRUG_LIST:"on the Prescription Drug List",REGULATED_CDSA:"regulated under the Controlled Drugs and Substances Act",NON_PRESC_DRUG:"a non-prescription drug",NON_PRESC_SCHEDULE_A:"a non-prescription drug to which one or more Schedule A claims apply",DRUG_ADMIN:"a drug permitted to be sold without a prescription but administered only under the supervision of a practitioner",ADDRESS_NOC:"Address to which the Drug Notification Form (DNF)/Notice of Compliance (NOC) are to be sent (when required):",ARE_CTA_IMPORTED:"Are clinical trial drugs imported into Canada?",ADDR_INSTRUCT:"Activity Address Instructions","FAKE.APPENDIX_MISSING_ERROR":"with the Human /Animal Sourced Records, missing source","FAKE.APPENDIX_EXTRA_ERROR":"with the Human /Animal Sourced Records, extra source",MANU_SPON:"Manufacturer/Sponsor",REGU_ANNU:"Regulatory Mailing/Annual Contact",CAN_IMP:"Canadian Importer",THIS_ACTIVITY:"Contact for this Regulatory Activity",HOSPITAL:"Hospital",FOOD_PROC:"Food Processing",MEDICAL_INST:"Medical Instruments",DOMESTIC:"Domestic",BARN:"Barn",INS_INDUS:"Institutional/Industrial",CONTACT_LENS:"Contact Lens",SAVE_INSTRUCT:"Product Information File Save Instructions",ADD_IMPORTER:"Add Importer",TYPE_MIN:"The value must be greater than or equal to 0",TYPE_MAX:"The value must be less than 999",CLINICAL_TRIAL:"Clinical Trial",PROTOCOL_NUMBER:"Protocol number",PROTOCOL_TITLE:"Protocol Title",CTA_COMPOSITION:"Anticipated Clinical Trial Composition",CTA_PHASE:"Phase of Clinical Trial",CTA_OTHER:"Other (please specify):",INFO_REB:"Information regarding Research Ethics Board that has refused to approve the protocol and/or informed consent form enclosed?",CTA_HAS_DIN:"Does the investigational drug product have a DIN/NOC in Canada",CTA_IS_MARKET:"Is the investigational drug product obtained from the Canadian market",CTA_COUNTRIES:"List the country(ies) the investigational drug product was obtained from",CTA_SRC_COUNTRY:"Summary of Source Country for investigational drug product",CTA_COUNTRY_NAME:"Country Name",VET_SPECIES_REMM:"Species and subtypes recommended for use",VET_SPECIES:"Species",VET_SUBTYPES:"Subtypes",VET_SPECIES_SUBTYPES:"Species and Subtypes",ADD_SPECIES:"Add Species",IS_TREAT_FP:"Is this used for the treatment of food-producing animals?",WITHDRAWAL:"Withdrawal time",
VET_DAYS:"Days",VET_HOURS:"Hours",CTPHASE1B:"Phase I - bioequivalence study (7-day administrative target)",CTPHASE1S:"Phase I - study in healthy humans (30-day default)",CTPHASE1O:"Phase I - other (30-day default)",CTPHASE2:"Phase II (30-day default)",CTPHASE3:"Phase III (30-day default)",CTPHASEOTHER:"Other",FMPP:"Female paediatric population (0-18 years of age)",MPP:"Male paediatric population (0-18 years of age)",FMAP:"Female adult population",MAP:"Male adult population",IMPORT_LETTER:"A letter of authorization signed by the clinical trial sponsor must be provided in section 1.2.1 for a third party to import the new drug(s) described in this clinical trial application or amendment. If the importer has not changed when a clinical trial application amendment (CTA-A) is filed, a letter of authorization does not need to be submitted.",EXPAND_ALL:"Expand All",COLLAPSE_ALL:"Collapse All",DRUGMARKETID_:"Which market(s) is the investigational drug product from?",LIST_DRUG_FROM:"List the country(ies) the investigational drug product was obtained from",COUNTRY_DIN:"Country",ADD_COUNTRY:"Add Country",CANADIAN:"Canadian",FOREIGN:"Foreign",NOT_MARKETED:"Not Marketed",DINID_:"Drug Identification Number (DIN)",NO_DIN_COUNTRY:"Require at least one country for investigation.",ROUTING_ID:"Routing Identifier",HT_LOAD_FILE_1:"When continuing with a working copy, the format of the file to load should be .hcsc.",HT_LOAD_FILE_2:"When viewing/updating a final XML file, the format of the file to load should be .xml.",HT_PROD_INFO_1:"Please only include information that is pertinent to this regulatory activity (i.e. if the dossier has 5 dosage forms, but this regulatory activity only applies to 1, only list the formulation for that 1 dosage form in this version of the product information XML file).",HT_PROD_INFO_1A:"The company identifier must be obtained from the final company XML file, issued by Health Canada.",HT_PROD_INFO_2:"The  dossier identifier can be obtained from Health Canada issued document. The format of a dossier identifier is a letter followed by six digits. (e.g. x######). ",HT_PROD_INFO_3:"Note: Each section with a Save Record button must be saved individually; otherwise incomplete information will be lost.",HT_COMP_ID_1:"The Company Identifier can be obtained from the latest Health Canada issued final company XML file, or the 'company code' found on the Annual Drug Notification Form (ADNF).",HT_COMP_ID_2:"Company identifier must be 5 digits, add leading zero when required.",HT_DOSSIER_TYPE_1:"Biologic dossier applies to all biologic products and radiopharmaceuticals.",HT_DOSSIER_TYPE_3:"Clinical Trial dossier applies to all pharmaceutical products for human use, biologic products and radiopharmaceuticals, non-prescription and ethical products, and disinfectants",HT_DOSSIER_TYPE_2:"Pharmaceutical dossier applies to all pharmaceutical products, non-prescription and ethical products, and disinfectants.",HT_DOSSIER_TYPE_4:"Veterinary dossier applies to all pharmaceuticals for veterinary use, non-prescription and ethical products",HT_PROD_NAME_1:"Only include the name of the products impacted by this regulatory activity. For multiple products, list and separate their product names with a semi-colon (;).",HT_PROD_NAME_2:"The product name is the name assigned by the manufacturer /sponsor to distinguish the drug (product) and under which the drug is to be sold/advertised. It is also the name used to identify the product in all correspondence related to the submission and on the product label(s) and Product Monograph and/or Package Insert, if applicable. If the brand name has not yet been determined, the proper or common name of the drug or the research code may be used.",HT_PROD_NAME_3:"For clinical trials: Please enter the name of the investigational product, and where there is more than one investigational product, all of them should be captured. An investigational product corresponds to a product involved in the conduct of a clinical trial. It could be a product not available in Canada, a product in development or a product already approved in Canada but used outside the approved indication.",HT_PROD_NAME_4:"The product name input in this field will only be reviewed with the initial transaction of a dossier (i.e. sequence 0000 for eCTD format). For all subsequent transactions, any changes to the product name should be captured and will be reviewed using the regulatory transaction template. Product name changes on this template will not be reviewed.",HT_PROP_COMM_NAME_1:"The proper name for a product is the name assigned to the drug in Section C.01.002 of the Food and Drug Regulations, or in boldface type in other Sections of the Regulations or the name of the drug in its finished form identified in the title of a monograph or in any of the official publications listed in Schedule B to the Food and Drugs Act. Example: Acetaminophen, Ferrous Sulphate Tablets.",HT_PROP_COMM_NAME_2:"The common name is the name by which a single ingredient drug is commonly known / designated in scientific or technical journals other than the publications referred to in Schedule B to the Food and Drugs Act. The common name includes the pharmaceutical form when used in relation to the finished drug product.",HT_PROP_COMM_NAME_3:"If there is no proper name and the drug is comprised of a single medicinal ingredient, enter the common name.",HT_PROP_COMM_NAME_4:"If there is no proper name and the drug is comprised of more than one medicinal ingredient, the proper name of the ingredients should be captured and separated by a forward slash (/).",HT_PROP_COMM_NAME_5:"If there are multiple finished products, list all proper, common or non-proprietary names included in the field 4. Product Name and separate them with a coma (,).",HT_PROP_COMM_NAME_6:"For a clinical trial all the active substances should be listed.",HT_CLINICAL_TRIAL:"Please do not include the Clinical Trial Site Information form in application. Update with CTSI instruction",HT_PROTOCOL_NUM:"The protocol number should remain the same for the duration of the trial. It is acceptable to indicate the version or amendment number of the protocol submitted at the time of application; however, the original protocol number must always be indicated.",HT_CT_DRUG_IMP:"For Clinical Trial Applications (CTA) and CTA-Amendments (CTA-A):",HT_CT_DRUG_IMP_1:"If clinicial trial drugs are to be imported into Canada, importers should be authorized by the sponsor, regardless of the sponsor's location. ",HT_CT_DRUG_IMP_2:"A third party authorization letter should be completed by the sponsor and submitted for each importer in Canada in section 1.2.1. List each applicable importer authorized to import the new drug for the purposes of the trial outlined in the application.  Canadian importer(s) must be located within Canada. Refer to the Guidance for Clinical Trial Sponsors: ",HT_CT_DRUG_IMP_3:"As additional importers are identified, additional third party authorization letters should be provided to Health Canada in section 1.2.1. If the importer has not changed when a CTA-A is filed, third party authorization letter does not need to be re-submitted.",HT_CT_DRUG_IMP_4:"Clinical Trial Applications",HT_CT_DRUG_IMP_5:"https://www.canada.ca/en/health-canada/services/drugs-health-products/drug-products/applications-submissions/guidance-documents/clinical-trials/guidance-clinical-trial-sponsors-clinical-trial-applications.html",HT_CT_DRUG_IMP_6:" for further details.",HT_DNF_NOC_1:"If DNF/NOC are to be sent to the manufacturer /sponsor, please ensure the information in your final company XML file is up to date.",HT_DNF_NOC_2:"In addition for importers, please ensure the applicable importers are identified in section 7 below.",HT_DNF_NOC_3:"If DNF/NOC are to be sent to the contact for this regulatory activity, the contact listed on the latest Regulatory Transaction XML file for this regulatory activity will used.",HT_IMPORTER_1:"When the manufacturer /sponsor is not located in Canada, a Canadian Importer must be identified.",HT_IMPORTER_3:"Only list the Importers associated with Drug Identification Numbers (DINs) identified in the formulation section below.",HT_ROUTING_ID_1:"The routing identifier is a unique identifier within the Common Electronic Submissions Gateway (CESG) used to identify specific gateway account, whether it uses the ",HT_ROUTING_ID_1_a:"Applicability Statement 2 (AS2)",HT_ROUTING_ID_1_b:"or ",HT_ROUTING_ID_1_c:"WebTrader interfaces.",HT_ROUTING_ID_2:"For the WebTrader users, the routing identifier is automatically assigned to each account by the system. It can be retrieved from the receipt message. Navigate to the WebTrader Inbox, click on “Receipt”, “View” document. Document Content page opens up and the routing identifier can be found under attribute: “X-Cyclone-To:”",HT_ROUTING_ID_3:"For the AS2 users, the routing identifier has to be created by the company. It is recommended that the company's data universal numbering system number be used, but any alpha-numeric text string is acceptable.",HT_ROUTING_ID_4:"The routing identifier could be the same for the manufacturer / sponsor contact and regulatory / annual contact. The Canadian importer would have a separate routing identifier.",HT_ROUTING_ID_5:"For any further questions on the routing identifier, please contact the ",HT_ROUTING_ID_5_a:"Food and Drug Administration",HT_ROUTING_ID_5_b:"Help Desk at ",HT_DRUG_USE:"Indicate whether the drug is intended for human use, veterinary use, as a radiopharmaceutical, as a disinfectant, or as a drug and medical device.",HT_DIN:"If there are multiple Drug Identification Numbers, separate them with a coma (,).",HT_PROP_INDI_1:"Indicate the proposed indication/use of the drug, e.g. for use in the treatment of angina and hypertension, to treat the symptoms of hay fever, for the prophylaxis of measles virus infection.",HT_PROP_INDI_2:"For a new drug, the proposed indication/use shall be a summary of the indication described in the product monograph. Key scientific terminology should be used for this section.",HT_PROP_INDI_3:"Referring to the product monograph will only be accepted if there's no change to the indication.",HT_PROP_INDI_4:'For Disinfectants, proposed indications as "disinfectant /sanitizer" or "toilet bowl cleaner" are not permitted.',HT_PROP_INDI_5:"Indicate the proposed dosage - (by age – include maximum daily dose).",HT_FORMULATION_1:"If the submission /application contains different formulations (e.g., multiple strengths), please add the product name (if unique) or the strength for proper identification.",HT_FORMULATION_2:"For consumer health products, if there are multiple products, please include each as a stand alone formulation in the same order if the product names listed in field 4. Product Name.",HT_FORMULATION_3:"The formulation identifier is auto generated by the template when you click on “Add Formulation”.",HT_FORMULATION_4:"Copy button: After saving ingredient / formulation details, you may choose to copy those details into a new ingredient / formulation record and change one or more fields as required. This will help minimize the amount of data entry for similar ingredients / formulations.",HT_FORMULATION_5:"For each ingredient/material identified as Animal/Human sourced, you must provide additional details by completing section 12 of this template.",HT_FOMU_DETAIL_1:"The formulation identifier is auto generated by the template when you click on “Add Formulations”.",HT_FOMU_DETAIL_2:"Copy button: After saving ingredient / formulation details, sponsors may choose to copy those details into a new ingredient / formulation record and change one or more fields as required. This will help minimize the amount of data entry for similar ingredients / formulations.",HT_INGREDIENTS_1:"A “Copy Record” button is available for duplicating the ingredient section. This is useful for non-medicinal ingredient that is present in different quantities in various variants. Be sure to update the appropriate fields (e.g. variant name, ingredient strength) and verify that the information in the remaining fields is accurate.",HT_INGREDIENTS_2:"Note: This feature is only available after creating the ingredient entry and expanding that entry. The “Copy Record” button is at the bottom of that section next to “Delete Record” button.",HT_INGREDIENTS_3:"For additional details like overages and adjustments, select “other” in the unit field for a free text field.",HT_INGREDIENTS_4:'For ingredients present in "quantum satis", the following should be selected: Operator: "equal", Value:  "1", and Units: "q.s."',HT_INGREDIENTS_5:'For ingredients used in adjusting pH, the following should be selected: Operator: "equal", Value:  "1", Units: "other", and Other unit details: "adjust pH"',HT_ING_NAME:"Sponsors should always select the medicinal ingredient name from the searchable list where possible. If the medicinal ingredient name is not found in the list, enter the new medicinal ingredient name in this field using the International Non Proprietary (INN) terminology, as it is the Health Canada’s standard to assign the preferred name to ingredients. If there is no existing INN terminology for the ingredient, you are required to use other recognized standards terminology in the following order: ",HT_ING_NAME_a:"United States Adopted Names,",HT_ING_NAME_b:"Martindale, Merck ",HT_ING_NAME_c:"Index,",HT_ING_NAME_d:"Hawley’s ",HT_ING_NAME_e:"Condensed Chemical Dictionary, ",HT_ING_NAME_f:"the ",HT_ING_NAME_g:"Handbook of Pharmaceutical Excipient, ",HT_ING_NAME_h:"International ",HT_ING_NAME_i:"Cosmetics Ingredient Dictionary and Handbook, ",HT_ING_NAME_j:"information available online.",HT_ING_NAME_1:"For clinical trials: For ingredient name of a drug in development where a standard terminology has not yet been established, the research code may be used.",HT_VARI_NAME_1:"For formulation variations pertaining to the same DIN (for example [e.g.] multiple flavourings, colours, fragrances), identify the variant name associated with each non-medicinal ingredient (NMI). Example:",HT_VARI_NAME_2:"If a NMI is the same quantity in all variants, then it only needs to be listed once and the variant name field should indicate “All variants”. ",HT_VARI_NAME_3:"If a NMI pertains to only one variant, then the variant name should be entered (e.g., apple flavour).",HT_VARI_NAME_4:"If the NMI is in various variants, at different quantities, the variant name field should be entered each time.",HT_PURPOSE:"Examples: preservative, colouring agent or capsule shell, etc.",HT_NMI_PROPRIETARY_INFO:"If uncertain whether the proprietary information reference source is acceptable, please contact the appropriate review bureau in advance of filing.\n\nFor more information regarding administrative cross-licensing agreements please refer to the Guidance Document: ",HT_NMI_PROPRIETARY_INFO_a:"Administrative Processing of Submissions and Applications Involving Human or Disinfectant Drugs.",HT_NMI_PROPRIETARY_INFO_b:"https://www.canada.ca/en/health-canada/services/drugs-health-products/drug-products/applications-submissions/guidance-documents/administrative-processing-human-disinfectant-drugs-2019.html",HT_NMI_PROPRIETARY_INFO_FIELD:"Acceptable examples: \nMaster Files Number XXXXXXXX\nCross licensing Agreement Control number XXXXXXX",HT_STANDARD:"Where the standard of manufacture of an ingredient complies with a Schedule B compendial standard, use the applicable abbreviation for that compendium, e.g. United States Pharmacopeia (USP), British Pharmacopoeia (BP). Where the specifications for ingredient manufacture deviate from and exceed, or are equivalent to the compendial standard, manufacturer's standard (Mfr Std) may be indicated. Please enter N/A if no compendial standard exists for the active ingredient.",HT_IS_NANO_1:"Select the appropriate option based on Health Canada's working definition of Nanomaterials:",HT_IS_NANO_2:"Health Canada considers any manufactured product, material, substance, ingredient, device, system or structure to be nanomaterial if:",HT_IS_NANO_3:"It is at or within the nanoscale in at least one spatial dimension, or;",HT_IS_NANO_4:"It is smaller or larger than the nanoscale in all spatial dimensions and exhibits one or more nanoscale phenomena.",HT_IS_NANO_5:"For the purposes of this definition:",HT_IS_NANO_6:"The term “nanoscale” means 1 to 100 nanometres, inclusive;",HT_IS_NANO_7:"The term “nanoscale phenomena” means properties of the product, material, substance, ingredient, device, system or structure which are attributable to its size and distinguishable from the chemical or physical properties of individual atoms, individual molecules and bulk material; and,",HT_IS_NANO_8:"The term “manufactured” includes engineering processes and control of matter and processes at the nanoscale.",HT_AH_SOURCED:"Select yes if this ingredient/material was human or animal sourced at any stage in the manufacture of the drug product including excipient or processing aid source from human and/or animal tissue.",HT_AH_SOURCED_1:"If “Yes” is selected, please ensure you are required to compete section 12 of this template.",HT_IS_AH_MAT_1:"Enter ",HT_IS_AH_MAT_1_a:"Chemical Abstracts Service (CAS) ",HT_IS_AH_MAT_1_b:"(if applicable), Material Name and Standard for the Human/Animal sourced material used in the manufacturing of the product.",HT_IS_AH_MAT_2:"Select the option “Yes” for the question “Present in Final Container” if the ingredient is present in the final container (based on the quality standard applicable for the product).",HT_CONT_TYPE_1:"Examples:",HT_CONT_TYPE_2:"bottle, 100 tablets",HT_CONT_TYPE_3:"tube, 50 gm",HT_CONT_TYPE_4:"vial, 5ml",HT_PACK_SIZE_1:"Multiple pack sizes per container type can be displayed  as:",HT_PACK_SIZE_2:"BOTTLE – 30",HT_PACK_SIZE_3:"CARTONS – 30, 100",HT_SHELF_LIFE:"The proposed expiry/shelf life is the length of time in years and months up to which the drug product maintains its labelled potency, purity and physical characteristics.",HT_CNTRY_MAN:"Provide the name of the country(ies) where the final dosage form of the drug product is manufactured /fabricated, e.g., if the drug product is in the dosage form of a tablet or solution, enter the country(ies) where the tablet or solution was fabricated. This may not necessarily be the country(ies) where the product is packaged/labeled.",HT_APPENDIX4_1:"List the Animal/Human-sourced material(s) for each individual drug product ingredient and/or material used at any stage in the manufacture of the drug product including excipient or processing aid source from human and/or animal tissue.",HT_APPENDIX4_2:"The “Ingredient or Material Name” field in this section is case-sensitive and must match exactly with the ingredient/material name listed in the formulation tab. If it does not match, the following errors may be displayed:“There are errors with the Human /Animal Sourced Records, missing source” or “There are errors with the Human /Animal Sourced Records, extra source”.",HT_GEN_XML_3:"A final product information XML file can be included in:",HT_GEN_XML_4:"For Human Drugs - section 1.2.1 of your transaction using REP.",HT_GEN_XML_5:"For Veterinary Drugs - section 1.5 of your transaction using REP",HT_GEN_XML_6:"Refer to the REP guidance document for detailed information on when it is required."}),$translateProvider.translations("fr",{LOAD_DRUGPROD:"Charger un fichier d’informations sur le produit",DISINFECTANT_TYPE:"Type de déinfectant",DISI_TYPE_MISSING:"Type de déinfectant",SCHED_DIN:"Numéro d’ID du médicament (DIN)",PROP_INDICATION:"Indication/emploi/posologie proposé (y compris la dose quotidienne maximale)",SCHEDULE_PRESC_STATUS:"Statut sur l'annexe et prescription (sélectionner tout ce qui s’applique): le produit est",SCHEDULE_C:"dans l'annexe C (produits radiopharmaceutiques) de la Loi sur les aliments et drogues",SCHEDULE_D:"figurant à l'annexe D (produits biologiques) de la Loi sur les aliments et drogues",PRESC_DRUG_LIST:"sur la liste des médicaments sur ordonnance",REGULATED_CDSA:"réglementé en vertu de la Loi réglementant certaines drogues et autres substances",NON_PRESC_DRUG:"un médicament sans ordonnance",NON_PRESC_SCHEDULE_A:"un médicament sans ordonnance auquel une ou plusieurs des réclamations de l'Annexe A s'appliquent",DRUG_ADMIN:"un médicament qui peut être vendu sans ordonnance, mais doit être administré uniquement sous la surveillance d’un praticien",ADDRESS_NOC:"Adresse où le formulaire de déclaration de médicament (FDM)/l’avis de conformité (AC) doivent être envoyés (lorsque nécessaire):",ARE_CTA_IMPORTED:"Les médicaments pour essais cliniques sont-ils importés au Canada?",MANU_SPON:"Fabricant ou promoteur",REGU_ANNU:"Courrier réglementaire / contact annuel",CAN_IMP:"Importateur canadien",THIS_ACTIVITY:"Personne-ressource pour cette activité réglementaire",HOSPITAL:"Hôpital",FOOD_PROC:"Préparation des aliments",MEDICAL_INST:"Instruments médicaux",DOMESTIC:"Domestique",BARN:"Grange","FAKE.APPENDIX_MISSING_ERROR":" avec les dossiers d'origine humaine / animale. Source manquante.","FAKE.APPENDIX_EXTRA_ERROR":" avec les dossiers d'origine humaine / animale. Source supplémentaire. ",INS_INDUS:"institutionnel ou industriel",CONTACT_LENS:"Contact Lens",SAVE_INSTRUCT:"Product Information File Save Instructions",ADD_IMPORTER:"Ajouter un importateur",TYPE_MIN:"La valeur doit être supérieure ou égale à 0",TYPE_MAX:"La valeur doit être inférieure à 999",CLINICAL_TRIAL:"Essai clinique",PROTOCOL_NUMBER:"Numéro de protocole",PROTOCOL_TITLE:"Titre du protocole",CTA_COMPOSITION:"Composition prévue de l'essai clinique",CTA_PHASE:"Phase de l'essai clinique",CTA_OTHER:"Autre (veuillez préciser):",INFO_REB:"Des informations concernant le Comité d'éthique de la recherche qui a refusé d'approuver le protocole et / ou le formulaire de consentement éclairé ci-joint?",CTA_HAS_DIN:"Le produit pharmaceutique expérimental a-t-il un DIN / NOC au Canada",CTA_IS_MARKET:"Le produit pharmaceutique expérimental est-il obtenu sur le marché canadien",CTA_COUNTRIES:"Énumérez le (s) pays où le produit médicamenteux expérimental a été obtenu",CTA_SRC_COUNTRY:"Résumé du pays d'origine du produit pharmaceutique expérimental",CTA_COUNTRY_NAME:"Nom du pays",VET_SPECIES_REMM:"Espèces et sous-types pour lesquels l’usage est recommandé",VET_SPECIES_SUBTYPES:"Espèces et sous-types",IS_TREAT_FP:"Est-il utilisé pour le traitement d’animaux producteurs d’aliments?",WITHDRAWAL:"Délai d'attente",VET_SPECIES:"Espèce",VET_SUBTYPES:"Sous-types",ADD_SPECIES:"Ajouter des espèces",VET_DAYS:"Jours",VET_HOURS:"Heures",CTPHASE1B:"Phase I - étude de bioéquivalence (objectif administratif de 7 jours)",CTPHASE1S:"Phase I - étude chez l'homme en bonne santé (défaut de 30 jours)",CTPHASE1O:"Phase I - autre (défaut de 30 jours)",CTPHASE2:"Phase II (30 jours par défaut)",CTPHASE3:"Phase III (30 jours par défaut)",CTPHASEOTHER:"Autre",FMPP:"Population pédiatrique féminine (0-18 ans)",MPP:"Population pédiatrique masculine (0-18 ans)",FMAP:"Population féminine adulte",MAP:"Population masculine adulte",IMPORT_LETTER:"Une lettre d'autorisation signée par le promoteur de l'essai clinique doit être fournie à la section 1.2.1 pour qu'une partie tiers puisse importer le ou les nouveaux médicaments décrits dans cette demande ou modification d'essai clinique. Si l'importateur n'a pas changé lors du dépôt d'une modification de la demande d'essai clinique (CTA-A), il n'est pas nécessaire de soumettre une lettre d'autorisation.",EXPAND_ALL:"Ouvre tout",COLLAPSE_ALL:"Réduire tout",DRUGMARKETID_:"De quel (s) marché (s) le médicament expérimental provient-il?",LIST_DRUG_FROM:"Énumérez le (s) pays où le produit médicamenteux expérimental a été obtenu",COUNTRY_DIN:"Pays",ADD_COUNTRY:"Ajouter pays",CANADIAN:"Canadien",FOREIGN:"Étranger",NOT_MARKETED:"Non commercialisé",DINID_:"Numéro d'identification du médicament (DIN)",NO_DIN_COUNTRY:"Exiger au moins un pays pour l'enquête.",ROUTING_ID:"Identificateur  d'acheminement","":"",HT_LOAD_FILE_1:"Lors de la production d’une copie de travail, le fichier doit être chargé en format .hcsc.",HT_LOAD_FILE_2:"Lors de la consultation ou de la mise à jour d’une version finale du fichier XML, le fichier doit être chargé en format .xml.",HT_PROD_INFO_1:"Veuillez inclure seulement les renseignements pertinents à cette activité de réglementation (c.-à-d., si le dossier comporte cinq formes posologiques, mais que cette activité de réglementation ne s’applique qu’à l’une d’entre elles, indiquez seulement la formulation correspondante à cette forme posologique dans cette version du fichier d’information sur le produit en format XML).",HT_PROD_INFO_1A:"Pour obtenir le numéro de la compagnie, consultez la version finale du fichier de compagnie (en format XML) délivré par Santé Canada.",HT_PROD_INFO_2:"Pour « obtenir le numéro du dossier », consultez les documents délivré par Santé Canada. Le numéro du dossier est composé d’une lettre minuscule suivie de six chiffres. (p. ex., x######).",HT_PROD_INFO_3:"Remarque : Toute section comportant un bouton « Enregistrer » doit être sauvegardée individuellement. Autrement, l’information incomplète sera perdue.",HT_COMP_ID_1:"L’identificateur de la compagnie peut être obtenu à partir du dernier fichier XML de compagnie émis par Santé Canada, ou du « code de compagnie » figurant dans le formulaire annuel de notification des médicaments (FADN).",HT_COMP_ID_2:"Le numéro de la compagnie doit être composé de 5 chiffres -  ajouter un zéro à la place, si nécessaire.",HT_DOSSIER_TYPE_1:"Le dossier biologique s’applique à tous les produits biologiques et radiopharmaceutiques.",HT_DOSSIER_TYPE_2:"Le dossier pharmaceutique s’applique à tous les produits pharmaceutiques avec ou sans ordonnance, les produits éthiques  et les désinfectants.",HT_DOSSIER_TYPE_3:"Le dossier d'essai clinique s'applique à tous les produits pharmaceutiques à usage humain, aux produits biologiques et radiopharmaceutiques, aux produits sans ordonnance et éthiques et aux désinfectants",HT_DOSSIER_TYPE_4:"Le dossier vétérinaire s'applique à tous les produits pharmaceutiques à usage vétérinaire, sans ordonnance et produits éthiques",HT_PROD_NAME_1:"Veuillez indiquer le nom des produits incluent dans cette activité réglementaire. Si plusieurs produits sont inclus, veuillez les énumérer et les séparer par un point virgule (;).",HT_PROD_NAME_2:"Le nom du produit est le nom assigné par le fabricant ou le promoteur afin de distinguer le médicament ou le produit sous lequel il est annoncé et vendu. Il est également utilisé pour identifier le produit dans toutes les correspondences en lien avec une soumission ou une application en plus de se retrouver sur l'étiquetage, la monographie de produit et l'encart, lorsqu'applicable. Si le nom du produit n'a pas encore été déterminé, le nom propre, le nom common ou le code de recherche du médicament ou du produit peut être utilisé.",HT_PROD_NAME_3:"L’entrée de nom de produit dans ce champ ne sera examinée qu’avec la transaction initiale d’un dossier (séquence 0000). Pour toutes les transactions de sous-séquence, toutes les modifications apportées au nom du produit doivent être capturées et seront examinées à l’aide du modèle d’informations sur le produit. Les modifications de nom de produit sur ce modèle ne seront pas examinées.",HT_PROD_NAME_4:"Le nom du produit saisi dans ce champ ne sera examiné qu'avec la transaction initiale d'un dossier (c'est-à-dire la séquence 0000 pour le format eCTD). Pour toutes les transactions ultérieures, toute modification du nom du produit doit être capturée et sera examinée à l'aide du modèle de transaction réglementaire. Les changements de nom de produit sur ce modèle ne seront pas examinés.",HT_PROP_COMM_NAME_1:"Le nom propre d’un produit est le nom qui lui est attribué à l’article C.01.002 du Règlement sur les aliments et drogues ou qui apparaît en caractères gras dans les autres articles du Règlement ou le nom du médicament dans sa forme finie mentionné dans le titre d’une monographie ou dans l’une des publications officielles figurant à l’annexe B de la Loi sur les aliments et drogues. Exemple : Acétaminophène, Comprimés de sulfate ferreux.",HT_PROP_COMM_NAME_2:"Le nom usuel est le nom sous lequel un médicament à ingrédient unique est communément connu ou désigné dans les revues scientifiques ou techniques autres que les publications mentionnées à l’annexe B de la Loi sur les aliments et drogues. Le nom usuel comprend la forme pharmaceutique lorsqu’il est utilisé pour désigner le médicament dans sa forme finie.",HT_PROP_COMM_NAME_3:"En l’absence d’un nom propre, et si le médicament est constitué d’un seul ingrédient médicinal, il faut inscrire le nom usuel.",HT_PROP_COMM_NAME_4:"En l’absence d’un nom propre, et si le médicament est constitué de plus d’un ingrédient médicinal, il faut indiquer les noms propres des ingrédients et les séparer par une barre oblique (/).",HT_PROP_COMM_NAME_5:"Si plusieurs produits sont inclus dans cette activité réglementaire, veuillez énumérer leur nom propre, leur nom commun ou leur dénomination commune et les séparer par une virgule (,).",HT_PROP_COMM_NAME_6:"Pour un essai clinique, toutes les substances actives doivent être répertoriées.",HT_CLINICAL_TRIAL:"Veuillez ne pas inclure le formulaire d'information sur le site d'essai clinique dans la demande. Mise à jour avec instruction SECD",HT_PROTOCOL_NUM:"Le numéro de protocole doit rester le même pendant la durée de l'essai. Il est acceptable d'indiquer la version ou le numéro de modification du protocole soumis au moment de la demande; cependant, le numéro de protocole d'origine doit toujours être indiqué.",HT_CT_DRUG_IMP:"Pour les demandes d'essais cliniques (CTA) et les modifications du CTA (CTA-A):",HT_CT_DRUG_IMP_1:"Si des médicaments d'essai clinique doivent être importés au Canada, les importateurs doivent être autorisés par le promoteur, peu importe l'endroit où il se trouve.",HT_CT_DRUG_IMP_2:"Une lettre d'autorisation d'une partie tiers doit être remplie par le promoteur et soumise pour chaque importateur au Canada à la section 1.2.1. Énumérez chaque importateur concerné autorisé à importer le nouveau médicament aux fins de l'essai décrit dans la demande. Les importateurs canadiens doivent être situés au Canada. Consultez le Guide à l'intention des promoteurs d'essais cliniques: ",HT_CT_DRUG_IMP_3:"À mesure que d'autres importateurs sont identifiés, des lettres d'autorisation de tiers supplémentaires devraient être fournies à Santé Canada à la section 1.2.1. Si l'importateur n'a pas changé lors du dépôt d'une CTA-A, la lettre d'autorisation d'un tiers n'a pas besoin d'être soumise à nouveau.",HT_CT_DRUG_IMP_4:"Demandes d'essais cliniques",HT_CT_DRUG_IMP_5:"https://www.canada.ca/fr/sante-canada/services/medicaments-produits-sante/medicaments/demandes-presentations/lignes-directrices/essais-cliniques/ligne-directrice-intention-promoteurs-essais-cliniques-demandes-essais-cliniques.html",HT_CT_DRUG_IMP_6:" pour plus de détails.",HT_DNF_NOC_1:"Si les FDM et les AC doivent être envoyés au fabricant ou au promoteur, il faut s’assurer que les renseignements fournis dans la version finale du fichier de compagnie (en format XML) sont à jour.",HT_DNF_NOC_2:"De plus, il faut s’assurer que les importateurs concernés sont nommés à la section 7 ci-dessous.",HT_DNF_NOC_3:"Si les FDM et les AC doivent être envoyés à la personne-ressource associée à cette activité de réglementation, le nom indiqué dans le dernier fichier de transaction réglementaire (en format XML) pour cette activité sera utilisé.",HT_IMPORTER_1:"Lorsque le fabricant ou le promoteur n’est pas situé au Canada, un importateur canadien doit être nommé",HT_IMPORTER_3:"Indiquez seulement les importateurs associés aux Numéro d’ID du médicament (DIN) indiqués dans la section ci-dessous.",HT_ROUTING_ID_1:"L'identificateur d'acheminement est un numéro unique à chaque compte créé sur le portail commun de demandes électroniques (PDE). Il est utilisé pour identifier le type de compte sur une des deux interfaces du portail soit l'",
HT_ROUTING_ID_1_a:"Applicability Statement 2 (AS2)",HT_ROUTING_ID_1_b:"ou le ",HT_ROUTING_ID_1_c:"WebTrader.",HT_ROUTING_ID_2:"Pour les utilisateurs de l’interface Webtrader, votre identificateur d’acheminement se retrouve dans l’avis de réception. Pour y accédez, veillez aller à la boîte de réception WebTrader et cliquez sur «Reçu» et «Afficher» le document. La page de Contenu du document affichera et l'identificateur d’acheminement se trouve sous l'attribut: «X-Cyclone-To:»",HT_ROUTING_ID_3:" Pour les utilisateurs de l'interface AS2, l'identificateur d'acheminement doit être créé par la compagnie. Il est recommandé que le numéro du système de numérotation universel de la compagnie soit utilisé. Cependant, il est important de noter d'une liste de caractères alphanumériques est tout aussi acceptable.",HT_ROUTING_ID_4:"Il est possible que la personne-ressource du  fabricant ou promoteur et la personne-ressource recevant le courrier de nature réglementaire et la notification annuelle aient le même identificateur d'acheminement. Cependant, il est important de noter que l'importateur canadien aura toujours un identificateur différent.",HT_ROUTING_ID_5:"Pour toutes autres questions sur l'identificateur d'acheminement, veuillez contacter directement le service de dépannage de la",HT_ROUTING_ID_5_a:"Food and Drug Administration",HT_ROUTING_ID_5_b:"au ",HT_DRUG_USE:"Indiquez s’il s’agit d’un médicament à usage humain ou vétérinaire, d’un produit radiopharmaceutique, d’un désinfectant ou de la combinaison d’un médicament et d’un instrument médical.",HT_DIN:"Si il y plusieurs numéro d'identification du médicament, veuillez les séparer par une virgule (,).",HT_PROP_INDI_1:"Précisez l’indication et l’utilisation proposées du médicament; p. ex., pour le traitement de l’angine de poitrine et de l’hypertension, pour traiter les symptômes du rhume des foins, pour la prophylaxie de l’infection par le virus de la rougeole.",HT_PROP_INDI_2:"Pour un nouveau médicament, l’indication et l’utilisation proposées doivent résumer l’indication décrite dans la monographie de produit. L’utilisation d’une terminologie scientifique clé est nécessaire pour cette section.",HT_PROP_INDI_3:"Une référence à la monographie de produit ne sera accepté que s’il n’y a pas de modification de l’indication.",HT_PROP_INDI_4:"Pour un produit désinfectant, les propositions d’indications telles que « désinfectant /assainisseur » ou « nettoyant pour cuvette » ne sont pas permises.",HT_PROP_INDI_5:"Précisez la posologie proposée - (par âge – y compris la dose quotidienne maximale).",HT_FORMULATION_1:"Si la soumission ou l'application inclut différentes formulations (p.ex. plusieurs concentrations), veuillez ajouter le nom du produit, si celui-ci est unique, ou sa concentration afin d'identifier chaque formulation.",HT_FORMULATION_2:"En ce qui concerne les produits de santé destinés aux consommateurs, si la soumission ou l'application en contient plusieurs, veuillez les inclure séparément dans le même ordre dans lequel ils sont énumérés dans le champs 4. Nom du produit.",HT_FORMULATION_3:"Lorsque vous cliquez sur le bouton « Ajouter une formulation », le numéro de la formulation est généré automatiquement par le modèle.",HT_FORMULATION_4:"Bouton « Copier » : Après avoir enregistré les renseignements sur l’ingrédient ou la formulation, vous pouvez les copier dans un nouveau dossier d’ingrédient ou de formulation et changer un ou plusieurs champs au besoin. Cela aidera à réduire au minimum la quantité de données saisies pour les ingrédients et les formulations semblables.",HT_FORMULATION_5:"Lorsqu’un ingrédient ou un matériel est identifié comme étant d’origine animale ou humaine, vous devez fournir des détails supplémentaires dans la section « 12. L'ingrédient ou matériel source humaine ou d'animale »,",HT_FOMU_DETAIL_1:"Le numéro de la formulation est généré automatiquement par le formulaire lorsque vous cliquez sur « Ajouter une formulation ».",HT_FOMU_DETAIL_2:"Bouton « Copier » : Après avoir enregistré les renseignements sur l’ingrédient ou la formulation, les promoteurs peuvent les copier dans un nouveau dossier d’ingrédient ou de formulation et changer un ou plusieurs champs au besoin. Cela aidera à réduire au minimum la quantité de données saisies pour les ingrédients et les formulations semblables.",HT_INGREDIENTS_1:"Le bouton « Copier » permet de dupliquer la section concernant les ingrédients. Ceci est utile pour les ingrédients non médicinaux présents en différentes quantités dans divers types de variantes. Veillez à ce que tous les champs concernés soient mis à jour (p. ex., le nom de la variante, le dosage) et vérifiez que tous les renseignements dans les champs restants sont exacts.",HT_INGREDIENTS_2:"Remarque : Cette fonction n'est disponible qu'après avoir créé l'entrée d'ingrédient et développé cette entrée dans le tableau. Le bouton « Copier » se trouve au bas de cette section à côté du bouton « Supprimer l'enregistrement».",HT_INGREDIENTS_3:"Pour des détails supplémentaires comme les dépassements et les ajustements, sélectionnez  « autre » dans le champ Unité pour compléter un champ de texte libre.",HT_INGREDIENTS_4:'Pour les ingrédients présents dans "quantum satis", les éléments suivants doivent être sélectionnés: Opérateur: "égal", Valeur: "1" et Unités: "q.s."',HT_INGREDIENTS_5:'Pour les ingrédients utilisés pour ajuster le pH, les éléments suivants doivent être sélectionnés: Opérateur: "égal", Valeur: "1", Unités: "autre", et Autres détails d\'unité: "Ajuster le pH"',HT_ING_NAME:"Dans la mesure du possible, les promoteurs doivent choisir le nom de l’ingrédient médicinal dans la liste consultable. Si le nom de l’ingrédient médical ne se trouve pas dans la liste, entrez son nouveau nom dans le champ approprié en utilisant la dénomination commune internationale (DCI). Il s’agit de la norme utilisée par Santé Canada pour déterminer le nom qui est privilégié pour les ingrédients. Si aucune DCI n’existe pour l’ingrédient, vous devez utiliser d’autres dénominations normalisées reconnues, dans l’ordre suivant : L’",HT_ING_NAME_a:"United States Adopted Names,",HT_ING_NAME_b:"le code de Martindale, le Merck ",HT_ING_NAME_c:"Index,",HT_ING_NAME_d:"le Hawle’s ",HT_ING_NAME_e:"Condensed Chemical Dictionary, ",HT_ING_NAME_f:"le ",HT_ING_NAME_g:"Handbook of Pharmaceutical Excipient, ",HT_ING_NAME_h:"l’International ",HT_ING_NAME_i:"Cosmetics Ingredient Dictionary and Handbook, ",HT_ING_NAME_j:"ainsi que de l’information disponible en ligne.",HT_ING_NAME_1:"Pour les essais cliniques: Pour le nom de l'ingrédient d'un médicament en développement où une terminologie standard n'a pas encore été établie, le code de recherche peut être utilisé.",HT_VARI_NAME_1:"Pour les variations de formulation relatives à un même DIN (p. ex., saveurs, couleurs et parfums différents), veuillez indiquer le nom de la variante associée à chaque ingrédient non-médical (INM). Exemple :",HT_VARI_NAME_2:"Si toutes les variantes contiennent la même quantité d’INM, ce dernier ne doit être énuméré qu’une seule fois et le champ du nom de la variante doit indiquer « Toutes les variantes ».",HT_VARI_NAME_3:"Si une variante contient seulement un INM, le nom de la variante doit être indiqué (p. ex. saveur de pomme).",HT_VARI_NAME_4:"Si plusieurs variantes contiennent le même INM, à différentes quantités, le nom de la variante doit être indiqué chaque fois.",HT_PURPOSE:"Exemples : agents de conservation, agents colorants ou enveloppes des capsules, etc.",HT_NMI_PROPRIETARY_INFO:"Si vous n'êtes pas certain que la source de référence des informations exclusives soit acceptable, veuillez contacter le bureau d'examen approprié avant le dépôt.\n\nPour plus d'informations sur les accords administratifs de licences croisées, veuillez consulter le document d'orientation: ",HT_NMI_PROPRIETARY_INFO_a:"Traitement administratif des soumissions et des demandes impliquant des médicaments à usage humain ou désinfectants.",HT_NMI_PROPRIETARY_INFO_b:"https://www.canada.ca/fr/sante-canada/services/medicaments-produits-sante/medicaments/demandes-presentations/lignes-directrices/traitement-administratif-humains-desinfectants-medicaments-2019.html",HT_NMI_PROPRIETARY_INFO_FIELD:"Exemples acceptables: \nNuméro des fichiers maîtres XXXXXXXX \nAccord de licence croisée Numéro de contrôle XXXXXXX",HT_STANDARD:"Lorsque la norme de fabrication d’un ingrédient est conforme à une norme officinale mentionnée à l’annexe B, utilisez l’abréviation de cette pharmacopée; p. ex., United States Pharmacopeia (USP), British Pharmacopoeia (BP). Lorsque les spécifications régissant la fabrication de l’ingrédient s’écartent de la norme officinale, et l’excèdent ou sont équivalentes à la même, la norme du fabricant (Mfr Std) peut être indiquée. Veuillez inscrire S.O. si aucune norme officinale n’existe pour l’ingrédient actif.",HT_IS_NANO_1:"Faites le choix approprié selon la définition pratique de nanomatériaux de Santé Canada :",HT_IS_NANO_2:"Santé Canada estime que tout produit, matériel, substance, ingrédient, dispositif, système ou structure fabriqués constitue un nanomatériau :",HT_IS_NANO_3:"s’il est à l’échelle nanométrique, ou dans les limites de celle-ci, dans au moins une dimension spatiale;",HT_IS_NANO_4:"s’il est plus petit ou plus grand que l’échelle nanométrique dans toutes les dimensions spatiales et affiche un ou plusieurs phénomènes à l’échelle nanométrique.",HT_IS_NANO_5:"Aux fins de la présente définition :",HT_IS_NANO_6:"le terme « à l’échelle nanométrique » signifie 1 à 100 nanomètres inclusivement;",HT_IS_NANO_7:"le terme « phénomène à l’échelle nanométrique » signifie des propriétés du produit, du matériau, de la substance, de l’ingrédient, du dispositif, du système ou de la structure qui sont attribuables à sa taille et qui sont faciles à distinguer des propriétés chimiques ou physiques des atomes, molécules et matériaux particuliers;",HT_IS_NANO_8:"le terme « fabriqué » comprend les processus techniques et les contrôles de la matière et des processus à l’échelle nanométrique.",HT_AH_SOURCED:"Sélectionnez l’option « Oui » si l’ingrédient ou le matériel a été d’origine humaine ou animale à une étape ou une autre de la fabrication du produit, y compris l’excipient ou l’additif provenant de tissus d’origine humaine ou animale.",HT_AH_SOURCED_1:"Si «Oui» est sélectionné, veuillez-vous assurer que vous êtes tenu de participer à la section 12 de ce modèle.",HT_IS_AH_MAT_1:"Indiquez le ",HT_IS_AH_MAT_1_a:"Chemical Abstracts Service (CAS) ",HT_IS_AH_MAT_1_b:"(le cas échéant), le nom du matériel et la norme pour le matériel d’origine humaine ou animale (autre que l’ingrédient figurant dans la formulation ci-dessus) utilisé dans la fabrication du produit.",HT_IS_AH_MAT_2:"Sélectionnez l’option « Oui » pour la question « Présence dans le contenant final » si l’ingrédient est présent dans le contenant final (selon la norme de qualité applicable au produit).",HT_CONT_TYPE_1:"Exemples :",HT_CONT_TYPE_2:"flacon de 100 comprimés",HT_CONT_TYPE_3:"tube de 50 g",HT_CONT_TYPE_4:"fiole de 5 ml",HT_PACK_SIZE_1:"Les différents formats pour le type de contenant peuvent être indiqués comme suit :",HT_PACK_SIZE_2:"FLACON – 30",HT_PACK_SIZE_3:"CARTONS – 30, 100",HT_SHELF_LIFE:"La date de péremption ou la durée de vie recommandée correspond à la période, en années et en mois, pendant laquelle le produit pharmaceutique conserve son activité, sa pureté et ses caractéristiques physiques indiquées sur l’étiquette.",HT_CNTRY_MAN:"Inscrivez le nom du ou des pays où la forme posologique finale du médicament est fabriquée. Par exemple, si la forme posologique du produit pharmaceutique est un comprimé ou une solution, indiquez le ou les pays où le comprimé ou la solution ont été fabriqués. Cela n’est pas nécessairement le ou les pays où le produit a été emballé ou étiqueté.",HT_APPENDIX4_1:"Énumérez le matériel d’origine animale ou humaine pour chaque ingrédient médicinal ou pour chaque matériel utilisé à une étape ou une autre de la fabrication du produit y compris l’excipient ou l’additif provenant de tissus d’origine humaine ou animale.",HT_APPENDIX4_2:"Dans cette section, le champ « Nom de l’ingrédient ou matériel » est sensible à la case et doit correspondre exactement au nom de l’ingrédient ou du matériel figurant à l’onglet « Formulation ». Dans le cas contraire, les messages d’erreur suivants peuvent s’afficher : « Les dossiers d’origine humaine ou animale comportent des erreurs. Source manquante. » ou « Les dossiers d’origine humaine ou animale comportent des erreurs. Source supplémentaire. » ",HT_GEN_XML_3:"Un fichier XML d'informations sur le produit final peut être inclus dans :",HT_GEN_XML_4:"Pour les drogues humaines - section 1.2.1 de votre transaction utilisant le PIR.",HT_GEN_XML_5:"Pour les médicaments vétérinaires - section 1.5 de votre transaction en utilisant le PIR.",HT_GEN_XML_6:"Reportez-vous au document d'orientation du PIR pour des informations détaillées sur le moment où cela est nécessaire."})}]),function(){"use strict";angular.module("updateLang",[])}(),function(){"use strict";function updateLangCtrl(){function link(scope,element,attrs){"CAS_NUMfr"==attrs.setCondition&&element.attr("lang","en")}var directive={link:link,restrict:"A",require:"?ngModel"};return directive}angular.module("updateLang").directive("updateLang",updateLangCtrl)}(),function(){"use strict";angular.module("numberFormat",[])}(),function(){"use strict";function digitsCtrl(){function link(scope,element,attrs,modelCtrl){modelCtrl.$parsers.push(function(inputValue){if(void 0==inputValue)return"";var isNumber=!1,max=-1,ignore=!1,tempVal=""+inputValue;attrs.type&&"number"===attrs.type&&(isNumber=!0),attrs.onlyMax&&(max=parseInt(attrs.onlyMax));var regexIntNeg=/[^0-9-]/g,integerReg=/[^0-9]/g,regexValue=integerReg;if("intNeg"==attrs.onlyDigits?regexValue=regexIntNeg:"false"===attrs.onlyDigits?ignore=!0:regexValue=integerReg,ignore)return inputValue;var transformedInput=tempVal.replace(regexValue,"");return max>0&&(transformedInput=transformedInput.substring(0,max)),transformedInput!==tempVal&&(isNumber&&transformedInput&&(transformedInput=parseFloat(transformedInput)),modelCtrl.$setViewValue(transformedInput),modelCtrl.$render()),transformedInput})}var directive={link:link,restrict:"A",require:"?ngModel"};return directive}angular.module("numberFormat").directive("onlyDigits",digitsCtrl)}(),function(){"use strict";angular.module("hpfbConstants",[]),angular.module("hpfbConstants").constant("SOFTWARE_VERSION","4.2.0").constant("PROD","PROD").constant("CANADA","CAN").constant("OTHER","OTHER").constant("YES","Y").constant("NO","N").constant("USA","USA").constant("UNKNOWN","UNKNOWN").constant("NEW","New").constant("EXISTING","Existing").constant("ENGLISH","en").constant("FRENCH","fr").constant("NEW_TYPE","NEW").constant("APPROVED_TYPE","FINAL").constant("DEPRECATED_APPROVED_TYPE","APPROVED").constant("AMEND_TYPE","AMEND").constant("INTERNAL_TYPE","INT").constant("EXTERNAL_TYPE","EXT").constant("PHARMA_TYPE","PHARMA").constant("RELATIVE_FOLDER_DATA","../data/").constant("CSP_XSL","CSP_Enrolment.xsl").constant("HCSC","hcsc").constant("XML","xml").constant("XSL_PREFIX","https://raw.githubusercontent.com/HealthCanada/HPFB/master/Regulatory-Enrolment-Process-REP/v_2_2/Style-Sheets/").constant("ADVANCE_FEE_PAYMENT_EN","https://www.canada.ca/content/dam/hc-sc/migration/hc-sc/dhp-mps/alt_formats/pdf/prodpharma/applic-demande/form/adv-pa-av2-eng.pdf").constant("ADVANCE_FEE_PAYMENT_FR","https://www.canada.ca/content/dam/hc-sc/migration/hc-sc/dhp-mps/alt_formats/pdf/prodpharma/applic-demande/form/adv-pa-av2-fra.pdf")}(),function(){"use strict";angular.module("filterLists",["hpfbConstants"])}(),function(){"use strict";function orderByTranslatedCountry($translate,$filter,CANADA,USA){return function(array,objKey){var result=[],translated=[];return angular.forEach(array,function(value){translated.push({key:value,label:$translate.instant(value)})}),result.push(CANADA),result.push(USA),angular.forEach($filter("orderBy")(translated,"label"),function(sortedObject){sortedObject.key!==CANADA&&sortedObject.key!==USA&&result.push(sortedObject.key)}),result}}function orderByTranslatedCountryAndLabel($translate,$filter,CANADA,USA){return function(array){var result=[],translated=[];return angular.forEach(array,function(value){translated.push({key:value,label:$translate.instant(value)})}),result.push({key:CANADA,label:$translate.instant(CANADA)}),result.push({key:USA,label:$translate.instant(USA)}),angular.forEach($filter("orderBy")(translated,"label"),function(sortedObject){sortedObject.key!==CANADA&&sortedObject.key!==USA&&result.push(sortedObject)}),result}}function findCountryObj(){return function(array,targetKey){for(var i=0;i<array.length;i++)if(array[i].key===targetKey)return array[i];return null}}function orderByTranslated($translate,$filter){return function(array){var result=[],translated=[];return angular.forEach(array,function(value){translated.push({key:value,label:$translate.instant(value)})}),angular.forEach($filter("orderBy")(translated,"label"),function(sortedObject){result.push(sortedObject.key)}),result}}function sequenceOrderBy($filter){return function(array){var result=[];return angular.forEach($filter("orderBy")(array,"sequence",!0),function(sortedObject){result.push(sortedObject)}),result}}function orderByTranslatedOtherFirst($translate,$filter,OTHER){return function(array){var result=[],translated=[];return angular.forEach(array,function(value){translated.push({key:value,label:$translate.instant(value)})}),result.push(OTHER),angular.forEach($filter("orderBy")(translated,"label"),function(sortedObject){sortedObject.key!==OTHER&&result.push(sortedObject.key)}),result}}function _orderByLocale(){return function(items,lang){return items.sort(function(a,b){return a[lang].localeCompare(b[lang],lang)}),items}}function _findById($filter){return function(array,searchJson){var initialResult=$filter("filter")(array,searchJson);if(!initialResult)return null;if(1===initialResult.length)return initialResult[0];for(var i=0;i<initialResult.length;i++)if(initialResult[i].id===searchJson.id)return initialResult[i];return null}}angular.module("filterLists").filter("orderByTranslatedCountry",orderByTranslatedCountry).filter("orderByTranslated",orderByTranslated).filter("orderByTranslatedOtherFirst",orderByTranslatedOtherFirst).filter("orderByCountryAndLabel",orderByTranslatedCountryAndLabel).filter("orderByLocale",_orderByLocale).filter("findCountryObject",findCountryObj).filter("findListItemById",_findById).filter("sequenceOrderDescending",sequenceOrderBy),orderByTranslatedCountry.$inject=["$translate","$filter","CANADA","USA"],orderByTranslated.$inject=["$translate","$filter"],orderByTranslatedOtherFirst.$inject=["$translate","$filter","OTHER"],_findById.$inject=["$filter"]}(),function(){"use strict";angular.module("dataLists",["hpfbConstants"])}(),function(){"use strict";function getService(UNKNOWN){function _getEnvString(){return vm.env?vm.env:"@@envValue"}function _setEnvString(value){vm.env=value.env}function _createCountryArray(translateJson){vm.countryList=translateJson}function _getUnknownCountryRec(){return{id:UNKNOWN,en:"Unknown",fr:"Inconnu"}}function getCountryValuesArray(){return vm.countryList}function getProvinceValuesArray(){return["AB","BC","MB","NB","NL","NT","NS","NU","ON","PE","QC","SK","YT"]}function getUSStatesValueArray(){return["AL","AK","AZ","AR","CA","CO","CT","DE","DC","FL","GA","HI","ID","IL","IN","IA","KS","KY","LA","ME","MD","MA","MI","MN","MS","MOS","MT","NE","NV","NH","NJ","NM","NY","NC","ND","OH","OK","OR","PA","RI","SC","SD","TN","TX","UT","VT","VA","WA","WV","WI","WY"]}var vm=this;vm.env="",vm.countryList=[];var service={getEnv:_getEnvString,setEnv:_setEnvString,getCountries:getCountryValuesArray,getProvinces:getProvinceValuesArray,getUSStates:getUSStatesValueArray,createCountryList:_createCountryArray,getUnknownCountryRecord:_getUnknownCountryRec};return service}angular.module("dataLists").factory("getCountryAndProvinces",getService),getService.inject=["UNKNOWN"]}(),function(){"use strict";function getSalService($filter,$q,$http,$translate,OTHER,FRENCH,RELATIVE_FOLDER_DATA){function getSalValuesArray(){return["SALUT_DR","SALUT_MR","SALUT_MRS","SALUT_MS"]}function getLanguagesValuesArray(){return["en","fr"]}function _createSortedArray(jsonList,lang){var result=[];return angular.forEach($filter("orderByLocale")(jsonList,lang),function(sortedObject){result.push(sortedObject)}),result}function _getAdminSubType(){return vm.adminSubTypeArray&&0!==vm.adminSubTypeArray.length?vm.adminSubTypeArray:_loadAdminType()}function _loadAdminType(){var deferred=$q.defer(),url=RELATIVE_FOLDER_DATA+"adminSubType.json";return $http.get(url).success(function(data,status,headers,config){var lang=$translate.proposedLanguage()||$translate.use(),newList=_createSortedArray(data,lang);vm.adminSubTypeArray=newList,deferred.resolve(newList)}).error(function(data,status,headers,config){deferred.reject(status)}),deferred.promise}var vm=this;vm.internalContacts=[],vm.adminSubTypeArray=[];var service={getSalutationList:getSalValuesArray,getLanguages:getLanguagesValuesArray,getAdminSubType:_getAdminSubType};return service}angular.module("dataLists").factory("getContactLists",getSalService),getSalService.$inject=["$filter","$q","$http","$translate","OTHER","FRENCH","RELATIVE_FOLDER_DATA"]}(),function(){"use strict";function getRolesService(){function getRoleValuesArray(){return["","ROLE_PRIMARY","ROLE_SECONDARY"]}function _getFormTypes(env){return env?[_biologic,_pharma,_veterinary]:[_biologic,_pharma,_clinical,_veterinary]}function _getBiologic(){return _biologic}function _getPharmaceutical(){return _pharma}function _getVeterinary(){return _veterinary}function _getClinicalTrial(){return _clinical}var _biologic="D21",_pharma="D22",_veterinary="D24",_clinical="D26",service={getContactRoles:getRoleValuesArray,getFormTypes:_getFormTypes,getBiologicType:_getBiologic,getPharmaType:_getPharmaceutical,getVeterinary:_getVeterinary,getClinicalTrial:_getClinicalTrial};return service}angular.module("dataLists").factory("getRoleLists",getRolesService)}(),function(){"use strict";angular.module("services",[])}(),function(){"use strict";function getTransactionSeq($http,$q){function yesNoArray(){return["Y","N"]}function _getEnvString(){return vm.env?vm.env:"@@envValue"}function _setEnvString(value){vm.env=value.env}function _createRaArray(value){vm.raTypeArray=value}function _createFeeArray(value){vm.feeTypeArray=value}function _createMitigationArray(value){vm.mitigationTypeArray=value}function getTransactionDescriptionsArray(){return vm.allActivities}function getActivityArray(){return vm.raTypeArray}function _getfeeTypeArray(){return vm.feeTypeArray}function _getMitigationTypeArray(){return vm.mitigationTypeArray}function getPresubArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE]}function getANDSArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.COMMENTS_NOC,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.INITIAL,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.SECOND_LANG_PM,vm.allActivities.PRISTINE_PM_2LANG,vm.allActivities.PUB_RELEASE_INFO,vm.allActivities.BE_CLARIF_RESPONSE,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.NOC_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.NON_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.CORR_PATENT_MED,vm.allActivities.ALLEGATION_NOTICE,vm.allActivities.FORM_IV,vm.allActivities.FORM_V,vm.allActivities.CONSENT_LTR,vm.allActivities.DATA_PROTECT_CORRESP,vm.allActivities.WITHDRAWAL_NOF_FORM]}function getEUNDSArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.BE_CLARIF_RESPONSE,vm.allActivities.CANCEL_LETTER,vm.allActivities.COMMENTS_NOC,vm.allActivities.COMMENTS_SUMMARY_BASIS,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.INITIAL,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.SECOND_LANG_PM,vm.allActivities.PRISTINE_PM_2LANG,vm.allActivities.PUB_RELEASE_INFO,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.NOC_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.NON_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.CORR_PATENT_MED,vm.allActivities.ALLEGATION_NOTICE,vm.allActivities.FORM_IV,vm.allActivities.FORM_V,vm.allActivities.CONSENT_LTR,vm.allActivities.DATA_PROTECT_CORRESP,vm.allActivities.WITHDRAWAL_NOF_FORM,vm.allActivities.NONCLIN_CLARIF_RESPONSE]}function getEUSNDSArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.BE_CLARIF_RESPONSE,vm.allActivities.CANCEL_LETTER,vm.allActivities.COMMENTS_NOC,vm.allActivities.COMMENTS_SUMMARY_BASIS,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.POST_NOC_CHANGE,vm.allActivities.SECOND_LANG_PM,vm.allActivities.PRISTINE_PM_2LANG,vm.allActivities.PUB_RELEASE_INFO,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.NOC_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.NON_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.CORR_PATENT_MED,vm.allActivities.ALLEGATION_NOTICE,vm.allActivities.FORM_IV,vm.allActivities.FORM_V,vm.allActivities.CONSENT_LTR,vm.allActivities.DATA_PROTECT_CORRESP,vm.allActivities.WITHDRAWAL_NOF_FORM,vm.allActivities.NONCLIN_CLARIF_RESPONSE]}function getLevel3Array(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.YEAR_LIST_OF_CHANGE,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE]}function getNDSArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.COMMENTS_NOC,vm.allActivities.COMMENTS_SUMMARY_BASIS,vm.allActivities.COMMENTS_REGULARTORY_DECISION,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.INITIAL,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.SECOND_LANG_PM,vm.allActivities.PRISTINE_PM_2LANG,vm.allActivities.PUB_RELEASE_INFO,vm.allActivities.BE_CLARIF_RESPONSE,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.NOC_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.NON_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.CORR_PATENT_MED,vm.allActivities.ALLEGATION_NOTICE,vm.allActivities.FORM_IV,vm.allActivities.FORM_V,vm.allActivities.CONSENT_LTR,vm.allActivities.DATA_PROTECT_CORRESP,vm.allActivities.WITHDRAWAL_NOF_FORM,vm.allActivities.NONCLIN_CLARIF_RESPONSE]}function _getNDSCVArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.COMMENTS_NOC,vm.allActivities.COMMENTS_SUMMARY_BASIS,vm.allActivities.COMMENTS_REGULARTORY_DECISION,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.INITIAL,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.SECOND_LANG_PM,vm.allActivities.PRISTINE_PM_2LANG,vm.allActivities.PUB_RELEASE_INFO,vm.allActivities.BE_CLARIF_RESPONSE,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.NOD_RESPONSE,vm.allActivities.NON_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.CORR_PATENT_MED,vm.allActivities.ALLEGATION_NOTICE,vm.allActivities.FORM_IV,vm.allActivities.FORM_V,vm.allActivities.CONSENT_LTR,vm.allActivities.DATA_PROTECT_CORRESP,vm.allActivities.WITHDRAWAL_NOF_FORM,vm.allActivities.NONCLIN_CLARIF_RESPONSE]}function getPSURCArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.COMMENTS_SUMMARY_BASIS,vm.allActivities.FOR_PERIOD,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.MEETING_MINUTES,vm.allActivities.MHPD_RQ_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.PHONE_RQ_RESPONSE]}function getPSURPVArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.FOR_PERIOD,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.MEETING_MINUTES,vm.allActivities.MHPD_RQ_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.CLIN_CLARIF_RESPONSE]}function getRMPPVArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.CSOtRMP,vm.allActivities.MEETING_MINUTES,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.MHPD_RQ_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.RMP_VERSION_DATE,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.UNSOLICITED_DATA]}function getSANDSArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.COMMENTS_NOC,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.POST_NOC_CHANGE,vm.allActivities.SECOND_LANG_PM,vm.allActivities.PRISTINE_PM_2LANG,vm.allActivities.PUB_RELEASE_INFO,vm.allActivities.BE_CLARIF_RESPONSE,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.NOC_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.NON_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.CORR_PATENT_MED,vm.allActivities.ALLEGATION_NOTICE,vm.allActivities.FORM_IV,vm.allActivities.FORM_V,vm.allActivities.CONSENT_LTR,vm.allActivities.WITHDRAWAL_NOF_FORM,vm.allActivities.DATA_PROTECT_CORRESP];
}function getSNDSArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.COMMENTS_NOC,vm.allActivities.COMMENTS_SUMMARY_BASIS,vm.allActivities.COMMENTS_REGULARTORY_DECISION,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.POST_NOC_CHANGE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.SECOND_LANG_PM,vm.allActivities.PRISTINE_PM_2LANG,vm.allActivities.PUB_RELEASE_INFO,vm.allActivities.BE_CLARIF_RESPONSE,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.NOC_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.NON_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.CORR_PATENT_MED,vm.allActivities.ALLEGATION_NOTICE,vm.allActivities.FORM_IV,vm.allActivities.FORM_V,vm.allActivities.CONSENT_LTR,vm.allActivities.DATA_PROTECT_CORRESP,vm.allActivities.WITHDRAWAL_NOF_FORM,vm.allActivities.NONCLIN_CLARIF_RESPONSE]}function getSNDSCArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.COMMENTS_NOC,vm.allActivities.COMMENTS_SUMMARY_BASIS,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_NOC_CHANGE,vm.allActivities.PUB_RELEASE_INFO,vm.allActivities.SECOND_LANG_PM,vm.allActivities.PRISTINE_PM_2LANG,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.NOC_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.NON_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.CORR_PATENT_MED,vm.allActivities.ALLEGATION_NOTICE,vm.allActivities.FORM_IV,vm.allActivities.FORM_V,vm.allActivities.CONSENT_LTR,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.WITHDRAWAL_NOF_FORM,vm.allActivities.DATA_PROTECT_CORRESP]}function getUDPVArray(){return[vm.allActivities.BENEFIT_RISK_ASSESS,vm.allActivities.CANCEL_LETTER,vm.allActivities.NOTIFICATION_CHANGE,vm.allActivities.POST_MARKET_SURV,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.MEETING_MINUTES,vm.allActivities.MHPD_RQ_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.RISK_COMMUN_DOC,vm.allActivities.UNSOLICITED_DATA]}function getUDRAArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.DIN_DISCONTINUED,vm.allActivities.ADVISEMENT_LETTER_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.MEETING_MINUTES,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.NOTIFICATION_INTERRUPT_SALE,vm.allActivities.NOC_COMPLIANCE_CFM,vm.allActivities.NOF_DRUG_SHORT,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.SEQUENCE_CLEANUP]}function getConsultArray(){return[vm.allActivities.PANDEMIC_APPL]}function _getMPNCArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.WRITTEN_CONSULT_REQ,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ]}function _getMPNDSArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.WRITTEN_CONSULT_REQ,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ]}function _getMPCOVArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ]}function _getMPSNDSArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.WRITTEN_CONSULT_REQ,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ]}function _getPANDArray(){return[vm.allActivities.BE_CLARIF_RESPONSE,vm.allActivities.CANCEL_LETTER,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.COMMENTS_NOC,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.INITIAL,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PANDEMIC_APPL,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.SECOND_LANG_PM,vm.allActivities.PRISTINE_PM_2LANG,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.NOC_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.NON_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.CORR_PATENT_MED,vm.allActivities.ALLEGATION_NOTICE,vm.allActivities.FORM_IV,vm.allActivities.FORM_V,vm.allActivities.CONSENT_LTR,vm.allActivities.DATA_PROTECT_CORRESP,vm.allActivities.NONCLIN_CLARIF_RESPONSE]}function _getPBRERCArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.COMMENTS_SUMMARY_BASIS,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.FOR_PERIOD,vm.allActivities.MEETING_MINUTES,vm.allActivities.MHPD_RQ_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.PHONE_RQ_RESPONSE]}function _getPBRERPVArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.FOR_PERIOD,vm.allActivities.MEETING_MINUTES,vm.allActivities.MHPD_RQ_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.CLIN_CLARIF_RESPONSE]}function _getPRNDSArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.MEETING_MINUTES,vm.allActivities.PRIORITY_REVIEW_RQ,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.RECON_DECIS_OTHER_INFO]}function _getPRSNDSArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.MEETING_MINUTES,vm.allActivities.PRIORITY_REVIEW_RQ,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.RECON_DECIS_OTHER_INFO]}function getYBPRArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.FOR_PERIOD,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.MEETING_MINUTES,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE]}function getDSurArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.FOR_PERIOD,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.MEETING_MINUTES,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.PHONE_RQ_RESPONSE]}function getDINAArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.CHANGE_TO_DIN,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.INITIAL,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.PRISTINE_PM_2LANG,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.BE_CLARIF_RESPONSE,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.NON_RESPONSE,vm.allActivities.WITHDRAWAL_NOF_FORM,vm.allActivities.NOD_RESPONSE]}function getV_DINVArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.CHANGE_TO_DIN,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.INITIAL,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.HSC_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QHSC_RQ_RESPONSE,vm.allActivities.CHSC_RQ_RESPONSE,vm.allActivities.QCHSC_RQ_RESPONSE,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.INITIAL_TEAT_SOLU_MONO,vm.allActivities.WITHDRAWAL_NOF_FORM,vm.allActivities.NOD_RESPONSE]}function getDINBArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.CHANGE_TO_DIN,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.INITIAL,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.PRISTINE_PM_2LANG,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.NON_RESPONSE,vm.allActivities.WITHDRAWAL_NOF_FORM,vm.allActivities.NOD_RESPONSE]}function getDINDArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.CHANGE_TO_DIN,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.INITIAL,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.NON_RESPONSE,vm.allActivities.WITHDRAWAL_NOF_FORM,vm.allActivities.NOD_RESPONSE]}function getDINFArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.CHANGE_TO_DIN,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.INITIAL,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.WITHDRAWAL_NOF_FORM,vm.allActivities.LABEL_PREAPPROVAL_2LANG]}function getMPDINArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.WRITTEN_CONSULT_REQ,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE]}function getPDCArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_AUTH_DIV1_CHANGE,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.PRISTINE_PM_2LANG,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.NOL_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO]}function getPDCBArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_AUTH_DIV1_CHANGE,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.PRISTINE_PM_2LANG,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.NOL_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO]}function _getIRSRPVArray(){return[vm.allActivities.ISSUE_SAFETY_REQUEST,vm.allActivities.MEETING_MINUTES,vm.allActivities.PRESUB_MEETING_RQ]}function _getPAPVArray(){return[vm.allActivities.MEETING_MINUTES,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.MHPD_RQ_RESPONSE,vm.allActivities.NOTIFICATION_CHANGE,vm.allActivities.PRESUB_MEETING_RQ]}function _getPSAPVArray(){return[vm.allActivities.ADV_COMP_REQ,vm.allActivities.PATIENT_SAFETY_INFO]}function _getRCPVArray(){return[vm.allActivities.DISSEM_LIST,vm.allActivities.RISK_COMMUN_DOC]}function _getREGPVArray(){return[vm.allActivities.BENEFIT_RISK_ASSESS,vm.allActivities.FOREIGN_SAFETY_NOTIFICATION,vm.allActivities.MEETING_MINUTES,vm.allActivities.RESSESS_ORDER,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.TEST_STUDIES_ORDER,vm.allActivities.MHPD_RQ_RESPONSE,vm.allActivities.TERM_COND_COMM]}function _getSANDSCArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.COMMENTS_NOC,vm.allActivities.COMMENTS_SUMMARY_BASIS,vm.allActivities.CONSENT_LTR,vm.allActivities.DATA_PROTECT_CORRESP,vm.allActivities.CORR_PATENT_MED,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.FORM_IV,vm.allActivities.FORM_V,vm.allActivities.MEETING_MINUTES,vm.allActivities.ALLEGATION_NOTICE,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.POST_NOC_CHANGE,vm.allActivities.PUB_RELEASE_INFO,vm.allActivities.SECOND_LANG_PM,vm.allActivities.PRISTINE_PM_2LANG,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.NOC_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.NON_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.WITHDRAWAL_NOF_FORM,vm.allActivities.UNSOLICITED_DATA]}function _getPostDINArray(){return[vm.allActivities.YEAR]}function _getEUANDSArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.BE_CLARIF_RESPONSE,vm.allActivities.CANCEL_LETTER,vm.allActivities.COMMENTS_NOC,vm.allActivities.COMMENTS_SUMMARY_BASIS,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.INITIAL,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.SECOND_LANG_PM,vm.allActivities.PRISTINE_PM_2LANG,vm.allActivities.PUB_RELEASE_INFO,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.NOC_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.NON_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.CORR_PATENT_MED,vm.allActivities.ALLEGATION_NOTICE,vm.allActivities.FORM_IV,vm.allActivities.FORM_V,vm.allActivities.CONSENT_LTR,vm.allActivities.DATA_PROTECT_CORRESP,vm.allActivities.WITHDRAWAL_NOF_FORM,vm.allActivities.NONCLIN_CLARIF_RESPONSE]}function _getEUSANDSArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.BE_CLARIF_RESPONSE,vm.allActivities.CANCEL_LETTER,vm.allActivities.COMMENTS_NOC,vm.allActivities.COMMENTS_SUMMARY_BASIS,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.SECOND_LANG_PM,vm.allActivities.PRISTINE_PM_2LANG,vm.allActivities.PUB_RELEASE_INFO,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.NOC_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.NON_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.CORR_PATENT_MED,vm.allActivities.ALLEGATION_NOTICE,vm.allActivities.FORM_IV,vm.allActivities.FORM_V,vm.allActivities.CONSENT_LTR,vm.allActivities.DATA_PROTECT_CORRESP,vm.allActivities.WITHDRAWAL_NOF_FORM,vm.allActivities.NONCLIN_CLARIF_RESPONSE]}function getV_AndsArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.CONSENT_LTR,vm.allActivities.DATA_PROTECT_CORRESP,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.CORR_PATENT_MED,vm.allActivities.FORM_IV,vm.allActivities.FORM_V,vm.allActivities.INITIAL,vm.allActivities.MEETING_MINUTES,vm.allActivities.ALLEGATION_NOTICE,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.HSC_RQ_RESPONSE,vm.allActivities.QHSC_RQ_RESPONSE,vm.allActivities.CHSC_RQ_RESPONSE,vm.allActivities.QCHSC_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.NON_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.WITHDRAWAL_NOF_FORM,vm.allActivities.UNSOLICITED_DATA]}function getCtaArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.INITIAL,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.NOL_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.CTN_ADMINISTRATIVE,vm.allActivities.CTN_APPENDIX,vm.allActivities.CTN_CONTACT,vm.allActivities.CTN_DATA,vm.allActivities.CTN_DEAR,vm.allActivities.CTN_DILUENT,vm.allActivities.CTN_DRUG_PROD,vm.allActivities.CTN_DRUG_SUBS,vm.allActivities.CTN_ENROLLMENT,vm.allActivities.CTN_ETHICS,vm.allActivities.CTN_IMPD_UPDATE,vm.allActivities.CTN_INFORMED,vm.allActivities.CTN_FORM_BROC_UPDATES,vm.allActivities.CTN_INVESTIGATOR,vm.allActivities.CTN_NEW_MANUFACTURING,vm.allActivities.CTN_NEW_PKG,vm.allActivities.CTN_NEW_QC,vm.allActivities.CTN_NEW_SUMM_ADF,vm.allActivities.CTN_PACKAGING_LABELLING,vm.allActivities.CTN_PROTOCOL_INFO_UPDATE,vm.allActivities.CTN_PROTOCOL_UPDATE,vm.allActivities.CTN_QOS,vm.allActivities.CTN_REFUSALS,vm.allActivities.CTN_REGULATORY,vm.allActivities.CTN_RESPONSE,vm.allActivities.CTN_SAFETY,vm.allActivities.CTN_SHELF_PD,vm.allActivities.CTN_SHELF_DS,vm.allActivities.CTN_SITE,vm.allActivities.CTN_SOURCE,vm.allActivities.CTN_STRAIN,vm.allActivities.CTN_STUDY_COMPLETION,vm.allActivities.CTN_STUDY_DISC,vm.allActivities.CTN_STUDY_EXT,vm.allActivities.CTN_STUDY_SUS,vm.allActivities.CTN_TRANS_OWN]}function getCta_aArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.NOL_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.CLINICAL,vm.allActivities.CLINICAL_QUALITY,vm.allActivities.QUALITY]}function getPreCtaArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ]}function getV_Level3Array(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.YEAR_LIST_OF_CHANGE]}function getV_MpdinArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ]}function getV_MpncArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ]}function getV_MpndsArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ]}function getV_MpsndsArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ]}function getV_MpandsArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ]}function getV_MpsandsArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ]}function getV_RccArray(){return[vm.allActivities.REQ_ACCEPTED]}function getV_NcArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.POST_NOC_CHANGE,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.HSC_RQ_RESPONSE,vm.allActivities.QHSC_RQ_RESPONSE,vm.allActivities.CHSC_RQ_RESPONSE,vm.allActivities.QCHSC_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.NOL_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.UNSOLICITED_DATA]}function getB_NcArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.POST_NOC_CHANGE,vm.allActivities.PRISTINE_PM_2LANG,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.NOL_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.SECOND_LANG_PM]}function getNcArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.PRISTINE_PM_2LANG,vm.allActivities.RECON_DECIS_LTR_INTENT,vm.allActivities.RECON_DECIS_RQ_RECON,vm.allActivities.RECON_DECIS_OTHER_INFO,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.NOL_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.SECOND_LANG_PM]}function _getV_NDSCVArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.CONSENT_LTR,vm.allActivities.DATA_PROTECT_CORRESP,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.CORR_PATENT_MED,vm.allActivities.FORM_IV,vm.allActivities.INITIAL,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.HSC_RQ_RESPONSE,vm.allActivities.QHSC_RQ_RESPONSE,vm.allActivities.CHSC_RQ_RESPONSE,vm.allActivities.QCHSC_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.ROLLING_INFO,vm.allActivities.WITHDRAWAL_NOF_FORM,vm.allActivities.UNSOLICITED_DATA]}function getV_NdsArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.CONSENT_LTR,vm.allActivities.DATA_PROTECT_CORRESP,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.CORR_PATENT_MED,vm.allActivities.FORM_IV,vm.allActivities.FORM_V,vm.allActivities.INITIAL,vm.allActivities.MEETING_MINUTES,vm.allActivities.ALLEGATION_NOTICE,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.HSC_RQ_RESPONSE,vm.allActivities.QHSC_RQ_RESPONSE,vm.allActivities.CHSC_RQ_RESPONSE,vm.allActivities.QCHSC_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.WITHDRAWAL_NOF_FORM,vm.allActivities.UNSOLICITED_DATA]}function getV_PsurPvArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.FOR_PERIOD,vm.allActivities.MEETING_MINUTES,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.HSC_RQ_RESPONSE,vm.allActivities.QHSC_RQ_RESPONSE,vm.allActivities.CHSC_RQ_RESPONSE,vm.allActivities.QCHSC_RQ_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA]}function getV_SandsArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.CONSENT_LTR,vm.allActivities.DATA_PROTECT_CORRESP,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.CORR_PATENT_MED,vm.allActivities.FORM_IV,vm.allActivities.FORM_V,vm.allActivities.MEETING_MINUTES,vm.allActivities.ALLEGATION_NOTICE,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.POST_NOC_CHANGE,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.HSC_RQ_RESPONSE,vm.allActivities.QHSC_RQ_RESPONSE,vm.allActivities.CHSC_RQ_RESPONSE,vm.allActivities.QCHSC_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.NON_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.WITHDRAWAL_NOF_FORM,vm.allActivities.UNSOLICITED_DATA]}function getV_SndsArray(){return[vm.allActivities.ADMINISTRATIVE,vm.allActivities.CANCEL_LETTER,vm.allActivities.CONSENT_LTR,vm.allActivities.DATA_PROTECT_CORRESP,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.CORR_PATENT_MED,vm.allActivities.FORM_IV,vm.allActivities.FORM_V,vm.allActivities.MEETING_MINUTES,vm.allActivities.ALLEGATION_NOTICE,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.POST_NOC_CHANGE,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.HSC_RQ_RESPONSE,vm.allActivities.QHSC_RQ_RESPONSE,vm.allActivities.CHSC_RQ_RESPONSE,vm.allActivities.QCHSC_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.NOD_RESPONSE,vm.allActivities.NON_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.SCREENING_ACCEPT_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.SDN_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.WITHDRAWAL_NOF_FORM,vm.allActivities.UNSOLICITED_DATA];
}function getV_UdraArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.MEETING_MINUTES,vm.allActivities.DIN_DISCONTINUED,vm.allActivities.NOTIFICATION_INTERRUPT_SALE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.QHSC_RQ_RESPONSE,vm.allActivities.CHSC_RQ_RESPONSE,vm.allActivities.QCHSC_RQ_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.UNSOLICITED_DATA]}function _getCoVir19Array(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.CLARIF_RESPONSE,vm.allActivities.SECOND_LANG_PM,vm.allActivities.PRISTINE_PM_2LANG,vm.allActivities.PUB_RELEASE_INFO,vm.allActivities.BE_CLARIF_RESPONSE,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.WITHDRAWAL_NOF_FORM,vm.allActivities.PANDEMIC_APPL,vm.allActivities.ROLLING_INFO]}function _getCoVir19AmdArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_ANTH_CHANGE,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.CLARIF_RESPONSE,vm.allActivities.SECOND_LANG_PM,vm.allActivities.PRISTINE_PM_2LANG,vm.allActivities.PUB_RELEASE_INFO,vm.allActivities.BE_CLARIF_RESPONSE,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.LABEL_PREAPPROVAL_2LANG,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.WITHDRAWAL_NOF_FORM,vm.allActivities.ROLLING_INFO]}function _getV_CoV19Array(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.MEETING_MINUTES,vm.allActivities.PANDEMIC_APPL,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.CLARIF_RESPONSE,vm.allActivities.HSC_RQ_RESPONSE,vm.allActivities.QHSC_RQ_RESPONSE,vm.allActivities.CHSC_RQ_RESPONSE,vm.allActivities.QCHSC_RQ_RESPONSE,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.WITHDRAWAL_NOF_FORM,vm.allActivities.ROLLING_INFO]}function _getV_CoV19AmdArray(){return[vm.allActivities.CANCEL_LETTER,vm.allActivities.DRUG_NOTIF_FORM,vm.allActivities.MEETING_MINUTES,vm.allActivities.POST_ANTH_CHANGE,vm.allActivities.POST_CLEARANCE_DATA,vm.allActivities.PRESUB_MEETING_PKG,vm.allActivities.PRESUB_MEETING_RQ,vm.allActivities.CLARIF_RESPONSE,vm.allActivities.HSC_RQ_RESPONSE,vm.allActivities.QHSC_RQ_RESPONSE,vm.allActivities.CHSC_RQ_RESPONSE,vm.allActivities.QCHSC_RQ_RESPONSE,vm.allActivities.CLIN_CLARIF_RESPONSE,vm.allActivities.EMAIL_RQ_RESPONSE,vm.allActivities.LABEL_CLARIF_RESPONSE,vm.allActivities.PROCESSING_CLARIF_RESPONSE,vm.allActivities.QUAL_CLIN_CLARIF_RESPONSE,vm.allActivities.QUAL_CLARIF_RESPONSE,vm.allActivities.SCREENING_CLARIF_RESPONSE,vm.allActivities.PHONE_RQ_RESPONSE,vm.allActivities.UNSOLICITED_DATA,vm.allActivities.WITHDRAWAL_NOF_FORM,vm.allActivities.ROLLING_INFO]}function _getActivityLeadArray(){return[vm.PHARMA,vm.BIOLOGICAL,vm.POSTMARKET,vm.CONSUMERHEALTH]}function _getActivityLeadD22Array(){return[vm.PHARMA,vm.POSTMARKET,vm.CONSUMERHEALTH]}function _getActivityLeadD21Array(){return[vm.BIOLOGICAL,vm.POSTMARKET]}function _getActivityLeadD24Array(){return[vm.VETERINARY]}function _getActivityLeadD26Array(){return[vm.CLINICAL_BIO,vm.CLINICAL_PHA]}function _getPharmaceutical(){return vm.D22}function _getBiologic(){return vm.D21}function _getVeterinary(){return vm.D24}function _getClinical(){return vm.D26}function _getBiologicalLead(){return vm.BIOLOGICAL}function _getPharmaLead(){return vm.PHARMA}function _getPostMarketLead(){return vm.POSTMARKET}function _getConsumHealthLead(){return vm.CONSUMERHEALTH}function _getVeterinaryLead(){return vm.VETERINARY}function _getClinicalBioLead(){return vm.CLINICAL_BIO}function _getClinicalPhaLead(){return vm.CLINICAL_PHA}function _getShelfLifeUnitsArray(){return[{id:"YR",en:"Years",fr:"Années"},{id:"MO",en:"Months",fr:"Mois"},{id:"DA",en:"Days",fr:"Jours"},{id:"HR",en:"Hours",fr:"Heures"},{id:"MI",en:"Minutes",fr:"Minutes"}]}var vm=this;vm.env="",vm.raTypeArray=[],vm.feeTypeArray=[],vm.mitigationTypeArray=[],vm.D21="D21",vm.D22="D22",vm.D24="D24",vm.D26="D26",vm.BIOLOGICAL="B14-20160301-02",vm.CONSUMERHEALTH="B14-20160301-06",vm.PHARMA="B14-20160301-09",vm.POSTMARKET="B14-20160301-10",vm.VETERINARY="B14-20160301-11",vm.CLINICAL_BIO="B14-20160301-02",vm.CLINICAL_PHA="B14-20160301-09",vm.allActivities={ADMINISTRATIVE:"ADMINISTRATIVE",BENEFIT_RISK_ASSESS:"BENEFIT_RISK_ASSESS",CANCEL_LETTER:"CANCEL_LETTER",CHANGE_TO_DIN:"CHANGE_TO_DIN",CLARIF_RESPONSE:"CLARIF_RESPONSE",COMMENTS_NOC:"COMMENTS_NOC",COMMENTS_SUMMARY_BASIS:"COMMENTS_SUMMARY_BASIS",COMMENTS_REGULARTORY_DECISION:"COMMENTS_REGULARTORY_DECISION",DIN_DISCONTINUED:"DIN_DISCONTINUED",DRUG_NOTIF_FORM:"DRUG_NOTIF_FORM",FOR_PERIOD:"FOR_PERIOD",INITIAL:"INITIAL",MEETING_MINUTES:"MEETING_MINUTES",NOTIFICATION_CHANGE:"NOTIFICATION_CHANGE",NOTIFICATION_INTERRUPT_SALE:"NOTIFICATION_INTERRUPT_SALE",PANDEMIC_APPL:"PANDEMIC_APPL",POST_CLEARANCE_DATA:"POST_CLEARANCE_DATA",POST_MARKET_SURV:"POST_MARKET_SURV",POST_NOC_CHANGE:"POST_NOC_CHANGE",POST_AUTH_DIV1_CHANGE:"POST_AUTH_DIV1_CHANGE",PRESUB_MEETING_PKG:"PRESUB_MEETING_PKG",PRESUB_MEETING_RQ:"PRESUB_MEETING_RQ",PRIORITY_REVIEW_RQ:"PRIORITY_REVIEW_RQ",SECOND_LANG_PM:"SECOND_LANG_PM",PRISTINE_PM_2LANG:"PRISTINE_PM_2LANG",ADVISEMENT_LETTER_RESPONSE:"ADVISEMENT_LETTER_RESPONSE",CLIN_CLARIF_RESPONSE:"CLIN_CLARIF_RESPONSE",EMAIL_RQ_RESPONSE:"EMAIL_RQ_RESPONSE",HSC_RQ_RESPONSE:"HSC_RQ_RESPONSE",QHSC_RQ_RESPONSE:"QHSC_RQ_RESPONSE",CHSC_RQ_RESPONSE:"CHSC_RQ_RESPONSE",QCHSC_RQ_RESPONSE:"QCHSC_RQ_RESPONSE",LABEL_CLARIF_RESPONSE:"LABEL_CLARIF_RESPONSE",MHPD_RQ_RESPONSE:"MHPD_RQ_RESPONSE",NOC_RESPONSE:"NOC_RESPONSE",NOD_RESPONSE:"NOD_RESPONSE",NOL_RESPONSE:"NOL_RESPONSE",NON_RESPONSE:"NON_RESPONSE",PROCESSING_CLARIF_RESPONSE:"PROCESSING_CLARIF_RESPONSE",QUAL_CLIN_CLARIF_RESPONSE:"QUAL_CLIN_CLARIF_RESPONSE",QUAL_CLARIF_RESPONSE:"QUAL_CLARIF_RESPONSE",RECON_DECIS_LTR_INTENT:"RECON_DECIS_LTR_INTENT",RECON_DECIS_RQ_RECON:"RECON_DECIS_RQ_RECON",RECON_DECIS_OTHER_INFO:"RECON_DECIS_OTHER_INFO",SCREENING_ACCEPT_RESPONSE:"SCREENING_ACCEPT_RESPONSE",SCREENING_CLARIF_RESPONSE:"SCREENING_CLARIF_RESPONSE",SDN_RESPONSE:"SDN_RESPONSE",LABEL_PREAPPROVAL_2LANG:"LABEL_PREAPPROVAL_2LANG",PHONE_RQ_RESPONSE:"PHONE_RQ_RESPONSE",RISK_COMMUN_DOC:"RISK_COMMUN_DOC",RMP_VERSION_DATE:"RMP_VERSION_DATE",UNSOLICITED_DATA:"UNSOLICITED_DATA",YEAR_LIST_OF_CHANGE:"YEAR_LIST_OF_CHANGE",BE_CLARIF_RESPONSE:"BE_CLARIF_RESPONSE",CORR_PATENT_MED:"CORR_PATENT_MED",ALLEGATION_NOTICE:"ALLEGATION_NOTICE",FORM_IV:"FORM_IV",FORM_V:"FORM_V",CONSENT_LTR:"CONSENT_LTR",DATA_PROTECT_CORRESP:"DATA_PROTECT_CORRESP",NONCLIN_CLARIF_RESPONSE:"NONCLIN_CLARIF_RESPONSE",SEQUENCE_CLEANUP:"SEQUENCE_CLEANUP",ADV_COMP_REQ:"ADV_COMP_REQ",CSOtRMP:"CSOtRMP",DISSEM_LIST:"DISSEM_LIST",FOREIGN_SAFETY_NOTIFICATION:"FOREIGN_SAFETY_NOTIFICATION",ISSUE_SAFETY_REQUEST:"ISSUE_SAFETY_REQUEST",PATIENT_SAFETY_INFO:"PATIENT_SAFETY_INFO",PUB_RELEASE_INFO:"PUB_RELEASE_INFO",RESSESS_ORDER:"RESSESS_ORDER",WRITTEN_CONSULT_REQ:"WRITTEN_CONSULT_REQ",TEST_STUDIES_ORDER:"TEST_STUDIES_ORDER",TERM_COND_COMM:"TERM_COND_COMM",YEAR:"YEAR",CTN_ADMINISTRATIVE:"CTN_ADMINISTRATIVE",CTN_APPENDIX:"CTN_APPENDIX",CTN_CONTACT:"CTN_CONTACT",CTN_DATA:"CTN_DATA",CTN_DEAR:"CTN_DEAR",CTN_DILUENT:"CTN_DILUENT",CTN_DRUG_PROD:"CTN_DRUG_PROD",CTN_DRUG_SUBS:"CTN_DRUG_SUBS",CTN_ENROLLMENT:"CTN_ENROLLMENT",CTN_ETHICS:"CTN_ETHICS",CTN_INFORMED:"CTN_INFORMED",CTN_INVESTIGATOR:"CTN_INVESTIGATOR",CTN_NEW_MANUFACTURING:"CTN_NEW_MANUFACTURING",CTN_NEW_PKG:"CTN_NEW_PKG",CTN_NEW_QC:"CTN_NEW_QC",CTN_PACKAGING_LABELLING:"CTN_PACKAGING_LABELLING",CTN_PROTOCOL_INFO_UPDATE:"CTN_PROTOCOL_INFO_UPDATE",CTN_PROTOCOL_UPDATE:"CTN_PROTOCOL_UPDATE",CTN_QOS:"CTN_QOS",CTN_REFUSALS:"CTN_REFUSALS",CTN_REGULATORY:"CTN_REGULATORY",CTN_RESPONSE:"CTN_RESPONSE",CTN_SAFETY:"CTN_SAFETY",CTN_SHELF_PD:"CTN_SHELF_PD",CTN_SHELF_DS:"CTN_SHELF_DS",CTN_SITE:"CTN_SITE",CTN_SOURCE:"CTN_SOURCE",CTN_STRAIN:"CTN_STRAIN",CTN_STUDY_COMPLETION:"CTN_STUDY_COMPLETION",CTN_STUDY_DISC:"CTN_STUDY_DISC",CTN_STUDY_EXT:"CTN_STUDY_EXT",CTN_STUDY_SUS:"CTN_STUDY_SUS",CTN_TRANS_OWN:"CTN_TRANS_OWN",CLINICAL:"CLINICAL",CLINICAL_QUALITY:"CLINICAL_QUALITY",QUALITY:"QUALITY",INITIAL_TEAT_SOLU_MONO:"INITIAL_TEAT_SOLU_MONO",REQ_ACCEPTED:"REQ_ACCEPTED",CTN_FORM_BROC_UPDATES:"CTN_FORM_BROC_UPDATES",CTN_IMPD_UPDATE:"CTN_IMPD_UPDATE",CTN_NEW_SUMM_ADF:"CTN_NEW_SUMM_ADF",COVIR_19:"COVIR-19",COVIR_19AMD:"COVIR-19AMD",NOC_COMPLIANCE_CFM:"NOC_COMPLIANCE_CFM",NOF_DRUG_SHORT:"NOF_DRUG_SHORT",POST_ANTH_CHANGE:"POST_ANTH_CHANGE",ROLLING_INFO:"ROLLING_INFO",WITHDRAWAL_NOF_FORM:"WITHDRAWAL_NOF_FORM"};var service={getEnv:_getEnvString,setEnv:_setEnvString,getTransactionDescriptions:getTransactionDescriptionsArray,getActivityTypes:getActivityArray,createRaTypes:_createRaArray,getPharmaceuticalValue:_getPharmaceutical,getBiologicValue:_getBiologic,getVeterinaryValue:_getVeterinary,getClinicalValue:_getClinical,getBiologicalLeadValue:_getBiologicalLead,getPharmaLeadValue:_getPharmaLead,getPostMarketLeadValue:_getPostMarketLead,getConsumHealthLeadValue:_getConsumHealthLead,getVeterinaryLeadValue:_getVeterinaryLead,getClinicalBioLeadValue:_getClinicalBioLead,getClinicalPhaLeadValue:_getClinicalPhaLead,getPresubTypes:getPresubArray,getAndsType:getANDSArray,getV_AndsType:getV_AndsArray,getCtaType:getCtaArray,getCta_aType:getCta_aArray,getPreCtaType:getPreCtaArray,getDinaType:getDINAArray,getV_DinvType:getV_DINVArray,getDinbType:getDINBArray,getDindType:getDINDArray,getDinfType:getDINFArray,getDSurType:getDSurArray,getEundsType:getEUNDSArray,getEusndsType:getEUSNDSArray,getLevel3Type:getLevel3Array,getV_Level3Type:getV_Level3Array,getMPDINType:getMPDINArray,getV_MpdinType:getV_MpdinArray,getNcType:getNcArray,getV_NcType:getV_NcArray,getB_NcType:getB_NcArray,getNdsType:getNDSArray,getV_NdsType:getV_NdsArray,getPdcType:getPDCArray,getPdcBType:getPDCBArray,getPresubType:getPresubArray,getpSurCType:getPSURCArray,getpSurPvType:getPSURPVArray,getV_PsurPvType:getV_PsurPvArray,getRmpPvType:getRMPPVArray,getSandsType:getSANDSArray,getV_SandsType:getV_SandsArray,getSndsType:getSNDSArray,getV_SndsType:getV_SndsArray,getSndsCType:getSNDSCArray,getUdpvType:getUDPVArray,getUdraType:getUDRAArray,getV_UdraType:getV_UdraArray,getYbprType:getYBPRArray,getConsultType:getConsultArray,getMPNCType:_getMPNCArray,getV_MpncType:getV_MpncArray,getMPNDSType:_getMPNDSArray,getMPCOVType:_getMPCOVArray,getV_MpndsType:getV_MpndsArray,getV_MpandsType:getV_MpandsArray,getV_MpsandsType:getV_MpsandsArray,getV_RccType:getV_RccArray,getMPSNDSType:_getMPSNDSArray,getV_MpsndsType:getV_MpsndsArray,getPANDType:_getPANDArray,getPBRERCType:_getPBRERCArray,getPBRERPVType:_getPBRERPVArray,getPRNDSType:_getPRNDSArray,getPRSNDSType:_getPRSNDSArray,getIRSRPVType:_getIRSRPVArray,getPAPVType:_getPAPVArray,getPSAPVType:_getPSAPVArray,getRCPVType:_getRCPVArray,getREGPVType:_getREGPVArray,getSANDSCType:_getSANDSCArray,getPostDINType:_getPostDINArray,getEUANDSType:_getEUANDSArray,getEUSANDSType:_getEUSANDSArray,getNDSCVType:_getNDSCVArray,getYesNoList:yesNoArray,getFeeList:_getfeeTypeArray,createFeeTypes:_createFeeArray,getMitigationList:_getMitigationTypeArray,createMitigationList:_createMitigationArray,getActivityLeadList:_getActivityLeadArray,getActivityLeadListByD22:_getActivityLeadD22Array,getActivityLeadListByD21:_getActivityLeadD21Array,getActivityLeadListByD24:_getActivityLeadD24Array,getActivityLeadListByD26:_getActivityLeadD26Array,getShelfLifeUnitsList:_getShelfLifeUnitsArray,getCOVIR19Type:_getCoVir19Array,getV_COV19Type:_getV_CoV19Array,getCOVID19AMDType:_getCoVir19AmdArray,getV_COV19AMDType:_getV_CoV19AmdArray,getVNDSCVType:_getV_NDSCVArray};return service}angular.module("services").factory("TransactionLists",getTransactionSeq),getTransactionSeq.inject=["$http","$q"]}(),function(){"use strict";angular.module("applicationInfoService",[])}(),function(){"use strict";function ApplicationInfoService(){function ApplicationInfoService(){}return ApplicationInfoService.prototype.getTodayDate=function(){function pad(n){return n<10?"0"+n:n}var d=new Date,isoDate=d.getFullYear()+"-"+pad(d.getMonth()+1)+"-"+pad(d.getDate());return isoDate},ApplicationInfoService.prototype.incrementMinorVersion=function(enrolmentVersion){var result;if(enrolmentVersion){var parts=enrolmentVersion.split("."),dec=parseInt(parts[1]);result=parts[0]+"."+(dec+1)}else result="0.1";return result},ApplicationInfoService.prototype.incrementMajorVersion=function(enrolmentVersion){var result;if(enrolmentVersion){var parts=enrolmentVersion.split("."),whole=parseInt(parts[0]);result=whole+1+".0"}else result="1.0";return result},ApplicationInfoService.prototype.getApplicationStatusList=function(){return["NEW","AMEND","FINAL"]},ApplicationInfoService.prototype.getApprovedType=function(){return"FINAL"},ApplicationInfoService.prototype.getAmendType=function(){return"AMEND"},ApplicationInfoService}angular.module("applicationInfoService").factory("ApplicationInfoService",ApplicationInfoService)}(),function(){"use strict";angular.module("drugProductService",["dossierDataLists","hpfbConstants","dataLists"])}(),function(){"use strict";function DrugProductService(DossierLists,$translate,$filter,getCountryAndProvinces,OTHER,UNKNOWN,YES,NO,XSL_PREFIX,PROD){function DrugProductService(){}function DrugProductService(formData){this.helpTextSequences=isForProd?{loadFileIndx:0,prodInfoIndx:0,compIdIndx:0,dossiTypeIndx:0,prodNameIndx:0,proComNameIndx:0,dnfNocAddrIndx:0,importerIndx:0,routingIdIndx:0,drugUseIndx:0,dinIndx:0,pudIndx:0,formuIndx:0,formuDetailIndx:0,ingredIndx:0,nmiProprietaryInfoIndx:0,nmiProprietaryInfoFieldIndx:0,ingNameIndx:0,variaNameIndx:0,purposeIndx:0,standardIndx:0,isNanoIndx:0,ahSourcedIndx:0,isMaterialIndx:0,contaTypeIndx:0,packSizeIndx:0,shelfLifeIndx:0,manuCntryIndx:0,haSIMIndx:0,genXmlIndx:0}:{loadFileIndx:0,prodInfoIndx:0,compIdIndx:0,dossiTypeIndx:0,prodNameIndx:0,proComNameIndx:0,clinicalIndx:0,protocolNoIndx:0,dnfNocAddrIndx:0,ctDrugImpIndx:0,importerIndx:0,routingIdIndx:0,drugUseIndx:0,dinIndx:0,pudIndx:0,formuIndx:0,formuDetailIndx:0,ingredIndx:0,nmiProprietaryInfoIndx:0,nmiProprietaryInfoFieldIndx:0,ingNameIndx:0,variaNameIndx:0,purposeIndx:0,standardIndx:0,isNanoIndx:0,ahSourcedIndx:0,isMaterialIndx:0,contaTypeIndx:0,packSizeIndx:0,shelfLifeIndx:0,manuCntryIndx:0,haSIMIndx:0,genXmlIndx:0};for(var keys=Object.keys(this.helpTextSequences),i=0;i<keys.length;i++)this.helpTextSequences[keys[i]]=i+1;angular.extend(this._default,formData)}function getDiseaseDisorderList(info,diseaseListModel){if(info&&diseaseListModel){for(var keys=Object.keys(info),i=0;i<keys.length;i++)diseaseListModel[keys[i]]="Y"===info[keys[i]];return diseaseListModel}}function getAppendix4IngredientList(info){var list=[],getCountries=function(input){var list=[];input instanceof Array||(input=[input]);for(var i=0;i<input.length;i++){var obj={id:i,country:"",display:"",unknownCountryDetails:""};input[i].country_with_unknown._id===UNKNOWN?obj.country=getCountryAndProvinces.getUnknownCountryRecord():obj.country=$filter("filter")(getCountryAndProvinces.getCountries(),{id:input[i].country_with_unknown._id})[0],obj.country&&(obj.display=obj.country[$translate.proposedLanguage()||$translate.use()]),obj.unknownCountryDetails=input[i].unknown_country_details,list.push(obj)}return list};if(angular.isDefined(info)){info instanceof Array||(info=[info]);for(var i=0;i<info.length;i++){var ing={};ing.id=Number(info[i].ingredient_id),ing.ingredientName=info[i].ingredient_name,ing.humanSourced="Y"===info[i].human_sourced,ing.animalSourced="Y"===info[i].animal_sourced;var tissues=info[i].tissues_fluids_section,srcAnimal=info[i].animal_sourced_section;if(tissues&&(ing.tissuesFluidsOrigin={},ing.tissuesFluidsOrigin.tissuesList=_getTissuesFluidsModel(tissues)),srcAnimal){ing.sourceAnimalDetails=createEmptyAnimalSourceModel(),ing.sourceAnimalDetails.isCellLine=info[i].animal_sourced_section.is_cell_line,ing.sourceAnimalDetails.isBiotechDerived=info[i].animal_sourced_section.is_biotech_derived,ing.sourceAnimalDetails.isControlledPop=info[i].animal_sourced_section.is_controlled_pop,ing.sourceAnimalDetails.isAgeKnown=info[i].animal_sourced_section.is_animal_age_known,ing.sourceAnimalDetails.ageAnimals=Number(info[i].animal_sourced_section.animal_age);var animalTypeList=info[i].animal_sourced_section.animal_src_record;animalTypeList instanceof Array||(animalTypeList=[animalTypeList]);for(var srcCount=0;srcCount<animalTypeList.length;srcCount++){var oneRec=animalTypeList[srcCount],animalRecord={};oneRec.animal_type?animalRecord.animalType=oneRec.animal_type._id:animalRecord.animalType="",animalRecord.animalDetail=oneRec.animal_detail,ing.sourceAnimalDetails.animalSrcList.push(animalRecord)}ing.sourceAnimalDetails.countryList=getCountries(info[i].animal_sourced_section.country_origin_list.country_origin)}list.push(ing)}}return list}function getFormulationList(list){var formulationList=[];return list&&0!==list.length?(list instanceof Array||(list=[list]),angular.forEach(list,function(item){var obj={formulationId:item.formulation_id,formulationName:item.formulation_name};if(item.dosage_form_group.dosage_form){var dflist=DossierLists.getDosageFormList(),dfid=item.dosage_form_group.dosage_form._id;"OTHER"!==dfid&&(dfid=DossierLists.getDosageFormPrefix()+dfid);var dosageFormObj=$filter("findListItemById")(dflist,{id:dfid});obj.dosageForm=dosageFormObj,obj.dosageFormHtml=dosageFormObj[$translate.proposedLanguage()||$translate.use()]}else obj.dosageForm=item.dosage_form_group.dosage_form;if(obj.dosageFormOther=item.dosage_form_group.dosage_form_other,item.formulation_ingredient?obj.activeIngList=getActiveIngList(item.formulation_ingredient):obj.activeIngList=[],item.container_group&&item.container_group.container_details?obj.containerTypes=getContainerTypeList(item.container_group.container_details):obj.containerTypes=[],item.is_animal_human_material?obj.isAnimalHumanMaterial=item.is_animal_human_material:obj.isAnimalHumanMaterial="",item.is_animal_human_material===YES&&item.material_ingredient?obj.animalHumanMaterials=getMaterialList(item.material_ingredient):obj.animalHumanMaterials=[],item.roa_group&&item.roa_group.roa_details?obj.routeAdmins=getRouteAdminList(item.roa_group.roa_details):obj.routeAdmins=[],item.country_group&&item.country_group.country_manufacturer){var countryArray=[];countryArray=item.country_group.country_manufacturer instanceof Array?item.country_group.country_manufacturer:[item.country_group.country_manufacturer],obj.countryList=getFormulationCountryList(countryArray),obj.noCountries=obj.countryList.length}else obj.countryList=[];if(item.drug_market)if(obj.drugMarket=item.drug_market,obj.din="",obj.dinCountryList=[],item.din)obj.din=item.din;else if(item.din_country_list&&item.din_country_list.length>0){var countryArray=[];countryArray=item.din_country_list instanceof Array?item.din_country_list:[item.din_country_list],obj.dinCountryList=getFormulationCountryList(countryArray),obj.noDinCountries=obj.dinCountryList.length}formulationList.push(obj)}),formulationList):formulationList}function stringToNumber(str){var n=null;return str&&""!=str.trim&&(n=Number(str)),n}function getActiveIngList(list){var resultList=[];return!list||list instanceof Array||(list=[list]),angular.forEach(list,function(item){var obj={ingRole:"",ingId:item.ingredient_id,variant:item.variant_name,purpose:item.purpose,ingLabel:item.ingredient_name,proprietaryAttestation:{attested:null,info:null},autoIngred:YES,cas:item.cas_number,humanAnimalSourced:item.is_human_animal_src,standard:item.ingred_standard,strength:{operator:"",data1:stringToNumber(item.strength.data1),data2:stringToNumber(item.strength.data2)},units:"",unitsHtml:"",otherUnits:item.units_other,per:"",perPresentationValue:Number(1),perMeasureValue:null,perPresUnits:"",perPresOtherUnits:"",perMeasUnits:"",perMeasUnitsHtml:"",perMeasOtherUnits:"",calcAsBase:item.is_base_calc._id,isNano:item.is_nanomaterial,nanoMaterial:"",nanoMaterialOther:item.nanomaterial_details};if(item.ingredient_role&&(obj.ingRole=item.ingredient_role._id,"NONMED"===obj.ingRole&&"proprietary_attestation"in item&&(obj.proprietaryAttestation.attested=item.proprietary_attestation._attested,obj.proprietaryAttestation.info=item.proprietary_attestation.__text)),item.strength){var opValue=item.strength.operator._id;obj.strength.operator=$filter("findListItemById")(DossierLists.getStrengthList(),{id:opValue})}if(item.units){var unitsValue=DossierLists.getUnitsPrefix()+item.units._id;item.units._id===OTHER&&(unitsValue=item.units._id),obj.units=$filter("findListItemById")(DossierLists.getUnitsList(),{id:unitsValue}),obj.unitsHtml=obj.units[$translate.proposedLanguage()||$translate.use()]}if(item.per){var perId=item.per._id;obj.per=$filter("findListItemById")(DossierLists.getPerList(),{id:perId})}if("UP"===item.per._id){obj.perPresentationValue=Number(item.per_value);var upValue=DossierLists.getUnitsPrefix()+item.per_units._id;item.per_units._id===OTHER&&(upValue=item.per_units._id),obj.perPresUnits=$filter("findListItemById")(DossierLists.getUnitsPresentationList(),{id:upValue}),obj.perPresOtherUnits=item.per_units_other_details}if("UM"===item.per._id){obj.perMeasureValue=Number(item.per_value);var unitsValue=DossierLists.getUnitsPrefix()+item.per_units._id;item.per_units._id===OTHER&&(unitsValue=item.per_units._id),obj.perMeasUnits=$filter("findListItemById")(DossierLists.getUnitsMeasureList(),{id:unitsValue}),obj.perMeasUnitsHtml=null==obj.perMeasUnits?"":obj.perMeasUnits[$translate.proposedLanguage()||$translate.use()],obj.perMeasOtherUnits=item.per_units_other_details}if(item.is_nanomaterial===YES){var nanoValue=DossierLists.getNanoPrefix()+item.nanomaterial._id;item.nanomaterial._id===OTHER&&(nanoValue=item.nanomaterial._id),obj.nanoMaterial=$filter("findListItemById")(DossierLists.getNanoMaterials(),{id:nanoValue})}obj.ingId?obj.autoIngred=YES:obj.autoIngred=NO,resultList.push(obj)}),resultList}function getContainerTypeList(list){var resultList=[];return list instanceof Array||(list=[list]),angular.forEach(list,function(item){var obj={containerType:item.container_type,packageSize:item.package_size,shelfLifeUnit:"",shelfLifeNumber:item.shelf_life_number?Number(item.shelf_life_number):"",tempMin:item.temperature_min?Number(item.temperature_min):"",tempMax:item.temperature_max?Number(item.temperature_max):"",otherShelflifeConsider:item.other_shelf_life_considerations};if(item.shelf_life_unit){var slUnitValue=item.shelf_life_unit._id;obj.shelfLifeUnit=$filter("findListItemById")(DossierLists.getShelfLifeUnitsList(),{id:slUnitValue})}resultList.push(obj)}),resultList}function getMaterialList(list){var resultList=[];return list instanceof Array||(list=[list]),angular.forEach(list,function(item){var obj={ingredientId:item.ingredient_id,ingredientName:item.ingredient_name,cas:item.cas_number,ingredientStandard:item.ingred_standard,inFinalContainer:item.in_final_container};resultList.push(obj)}),resultList}function getRouteAdminList(list){list instanceof Array||(list=[list]);var resultList=[],_id=0;return angular.forEach(list,function(item){var roaValue=DossierLists.getRoaPrefix()+item.roa._id;item.roa._id===OTHER&&(roaValue=item.roa._id);var roaObj=$filter("findListItemById")(DossierLists.getRoa(),{id:roaValue});_id+=1;var obj={id:_id,roa:roaObj,otherRoaDetails:item.roa_other,display:roaObj[$translate.proposedLanguage()||$translate.use()]};resultList.push(obj)}),resultList}function getFormulationCountryList(list){var resultList=[],_id=0;return list instanceof Array||(list=[list]),angular.forEach(list,function(item){_id+=1;var obj={id:_id,country:"",display:"",unknownCountryDetails:""};item._id===UNKNOWN?obj.country=getCountryAndProvinces.getUnknownCountryRecord():obj.country=$filter("filter")(getCountryAndProvinces.getCountries(),{id:item._id})[0],obj.country&&(obj.display=obj.country[$translate.proposedLanguage()||$translate.use()]),resultList.push(obj)}),resultList}function transformCtaCountryFromFile(countries){if(countries){var countryArray=[];return countryArray=countries instanceof Array?countries:[countries],getFormulationCountryList(countryArray)}return[]}function transformImpToFile(jsonObj){var importers=[];if(!jsonObj)return importers;jsonObj instanceof Array||(jsonObj=[jsonObj]);for(var i=0;i<jsonObj.length;i++){var record=_mapImporterRecToOutput(jsonObj[i]);if(1===jsonObj.length)return record;importers.push(record)}return importers}function transformImpFromFile(jsonObj){var importerRecord=[];if(!jsonObj)return importerRecord;jsonObj instanceof Array||(jsonObj=[jsonObj]);for(var i=0;i<jsonObj.length;i++){var record={};record.importerId=jsonObj[i].importer_id,record.importerName=jsonObj[i].importer_company_name,record.street=jsonObj[i].street_address,record.city=jsonObj[i].city,jsonObj[i].province_lov?record.stateList=jsonObj[i].province_lov._id:record.stateList="",record.stateText=jsonObj[i].province_text,record.country="",jsonObj[i].country._id&&(record.country=$filter("filter")(getCountryAndProvinces.getCountries(),{id:jsonObj[i].country._id})[0],record.countryHtml=record.country[$translate.proposedLanguage()||$translate.use()],record.countryDisplay=record.country.id),record.postalCode=jsonObj[i].postal_code,record.phone=jsonObj[i].phone_num,record.phoneExt=jsonObj[i].phone_ext,record.fax=jsonObj[i].fax_num,record.email=jsonObj[i].email,record.routingId=jsonObj[i].RoutingID,importerRecord.push(record)}return importerRecord}function _mapImporterRecToOutput(importerObj){var importerRec={},currentLang=$translate.proposedLanguage()||$translate.use();return importerObj&&(importerRec.importer_id=importerObj.importerId,importerRec.importer_company_name=importerObj.importerName,importerRec.street_address=importerObj.street,importerRec.city=importerObj.city,importerObj.stateList?importerRec.province_lov={_id:importerObj.stateList,__text:$translate.instant(importerObj.stateList,"","",currentLang)}:importerRec.province_lov="",importerRec.province_text=importerObj.stateText,importerRec.country="",importerObj.country&&(importerRec.country={_label_en:importerObj.country.en,_label_fr:importerObj.country.fr,_id:importerObj.country.id,__text:importerObj.country[currentLang]}),importerRec.postal_code=importerObj.postalCode,importerRec.phone_num=importerObj.phone,importerRec.phone_ext=importerObj.phoneExt,importerRec.fax_num=importerObj.fax,importerRec.email=importerObj.email,importerRec.RoutingID=importerObj.routingId),importerRec}function transformSpeciesFromFile(jsonObj){var speciesRecords=[],currentLang=$translate.proposedLanguage()||$translate.use();if(!jsonObj)return speciesRecords;jsonObj instanceof Array||(jsonObj=[jsonObj]);for(var i=0;i<jsonObj.length;i++){var record={};jsonObj[i].species&&jsonObj[i].species._id&&(record.species=$filter("filter")(DossierLists.getSpeciesList(),{id:jsonObj[i].species._id})[0]),jsonObj[i].subtypes&&jsonObj[i].subtypes._id&&(record.subtypes=$filter("filter")(DossierLists.getSubTypesList(),{id:jsonObj[i].subtypes._id})[0]),record.species&&record.subtypes?record.specSubt=record.species[currentLang]+", "+record.subtypes[currentLang]:record.specSubt="",record.isTreatFPA=jsonObj[i].is_treat_food_prod_animal,record.withdrawalDays=Number(jsonObj[i].withdrawal_days),record.withdrawalHours=Number(jsonObj[i].withdrawal_hours),record.timeCombined=jsonObj[i].withdrawal_days+" days and "+jsonObj[i].withdrawal_hours+" hours",speciesRecords.push(record)}return speciesRecords}function transformSpeciesToFile(jsonObj){var importers=[],currentLang=$translate.proposedLanguage()||$translate.use();if(!jsonObj)return importers;jsonObj instanceof Array||(jsonObj=[jsonObj]);for(var i=0;i<jsonObj.length;i++){var record={};if(record.species="",jsonObj[i].species&&(record.species={_label_en:jsonObj[i].species.en,_label_fr:jsonObj[i].species.fr,_id:jsonObj[i].species.id,__text:jsonObj[i].species[currentLang]}),record.subtypes="",jsonObj[i].subtypes&&(record.subtypes={_label_en:jsonObj[i].subtypes.en,_label_fr:jsonObj[i].subtypes.fr,_id:jsonObj[i].subtypes.id,__text:jsonObj[i].subtypes[currentLang]}),record.is_treat_food_prod_animal=jsonObj[i].isTreatFPA,record.withdrawal_days=jsonObj[i].withdrawalDays,record.withdrawal_hours=jsonObj[i].withdrawalHours,1===jsonObj.length)return[record];importers.push(record)}return importers}function appendix4IngredientListToOutput(info){var appendices=[],currentLang=$translate.proposedLanguage()||$translate.use();if(!angular.isDefined(info))return null;for(var i=0;i<info.length;i++){var ing={};if(ing.ingredient_id=info[i].id,ing.ingredient_name=info[i].ingredientName,ing.animal_sourced=info[i].animalSourced===!0?"Y":"N",ing.human_sourced=info[i].humanSourced===!0?"Y":"N",info[i].tissuesFluidsOrigin){ing.tissues_fluids_section={};for(var b=0;b<info[i].tissuesFluidsOrigin.tissuesList.length;b++){switch(info[i].tissuesFluidsOrigin.tissuesList[b].systemType){case DossierLists.getNervousSystemValue():ing.tissues_fluids_section.nervous_system=_nervousSystemToOutput(info[i].tissuesFluidsOrigin.tissuesList[b].system);break;case DossierLists.getDigestiveSystemValue():ing.tissues_fluids_section.digestive_system=_digestiveSystemToOutput(info[i].tissuesFluidsOrigin.tissuesList[b].system);break;case DossierLists.getImmuneSystemValue():ing.tissues_fluids_section.immune_system=_immuneSystemToOutput(info[i].tissuesFluidsOrigin.tissuesList[b].system);break;case DossierLists.getSkinSystemValue():ing.tissues_fluids_section.skin_system=_skinSystemToOutput(info[i].tissuesFluidsOrigin.tissuesList[b].system);break;case DossierLists.getMuscleSystemValue():ing.tissues_fluids_section.musculo_system=_muscleSystemToOutput(info[i].tissuesFluidsOrigin.tissuesList[b].system);break;case DossierLists.getOtherTissuesSystemValue():ing.tissues_fluids_section.other_system=_otherSystemToOutput(info[i].tissuesFluidsOrigin.tissuesList[b].system);break;case DossierLists.getReproductiveSystemValue():ing.tissues_fluids_section.reproductive_system=_reproductiveSystemToOutput(info[i].tissuesFluidsOrigin.tissuesList[b].system);break;case DossierLists.getCardioSystemValue():ing.tissues_fluids_section.cardio_system=_cardioSystemToOutput(info[i].tissuesFluidsOrigin.tissuesList[b].system)}}}if(info[i].sourceAnimalDetails){ing.animal_sourced_section=createEmptyAnimalSourceForOutput(),ing.animal_sourced_section.is_cell_line=info[i].sourceAnimalDetails.isCellLine,ing.animal_sourced_section.is_biotech_derived=info[i].sourceAnimalDetails.isBiotechDerived,ing.animal_sourced_section.is_controlled_pop=info[i].sourceAnimalDetails.isControlledPop,ing.animal_sourced_section.is_animal_age_known=info[i].sourceAnimalDetails.isAgeKnown,ing.animal_sourced_section.animal_age=info[i].sourceAnimalDetails.ageAnimals;for(var animalSrcObj=info[i].sourceAnimalDetails,srcCount=0;srcCount<animalSrcObj.animalSrcList.length;srcCount++){var oneRec=animalSrcObj.animalSrcList[srcCount],srcRecordOut={};
oneRec.animalType?srcRecordOut.animal_type={_id:oneRec.animalType,__text:$translate.instant(oneRec.animalType,"","",currentLang)}:srcRecordOut.animal_type="",srcRecordOut.animal_detail=oneRec.animalDetail,ing.animal_sourced_section.animal_src_record.push(srcRecordOut)}for(var countries=info[i].sourceAnimalDetails.countryList,v=0;v<countries.length;v++){var countryRecord={};countries[v].country&&(countryRecord.country_with_unknown={_id:"",_label_en:"",_label_fr:"",__text:""},countryRecord.country_with_unknown._id=countries[v].country.id,countryRecord.country_with_unknown._label_en=countries[v].country.en,countryRecord.country_with_unknown._label_fr=countries[v].country.fr,countryRecord.country_with_unknown.__text=countries[v].country[currentLang],countryRecord.unknown_country_details=countries[v].unknownCountryDetails,ing.animal_sourced_section.country_origin_list.country_origin.push(countryRecord))}}appendices.push(ing)}return appendices}function formulationListToOutput(list){var formulationList=[],currentLang=$translate.proposedLanguage()||$translate.use();return angular.forEach(list,function(item){var obj={formulation_name:item.formulationName,formulation_id:item.formulationId};if(obj.dosage_form_group={},item.dosageForm){var newDosage=item.dosageForm.id==OTHER?OTHER:item.dosageForm.id.substring(DossierLists.getDosageFormPrefix().length);obj.dosage_form_group.dosage_form={_id:newDosage,_label_en:item.dosageForm.en,_label_fr:item.dosageForm.fr,__text:item.dosageForm[currentLang]}}else obj.dosage_form_group.dosage_form="";obj.dosage_form_group.dosage_form_other=item.dosageFormOther,obj.roa_group={},item.routeAdmins&&item.routeAdmins.length>0&&(obj.roa_group.roa_details=routeAdminToOutput(item.routeAdmins)),obj.container_group={},item.containerTypes&&item.containerTypes.length>0&&(obj.container_group.container_details=containerTypeListToOutput(item.containerTypes)),obj.country_group={},item.countryList&&item.countryList.length>0&&(obj.country_group.country_manufacturer=formulationCountryListToOutput(item.countryList,currentLang)),item.activeIngList&&item.activeIngList.length>0&&(obj.formulation_ingredient=activeListToOutput(item.activeIngList)),item.isAnimalHumanMaterial&&(obj.is_animal_human_material=item.isAnimalHumanMaterial),item.animalHumanMaterials&&item.animalHumanMaterials.length>0&&(obj.material_ingredient=materialListToOutput(item.animalHumanMaterials)),item.drugMarket&&(obj.drug_market=item.drugMarket,item.din&&""!=item.din&&(obj.din=item.din),item.dinCountryList.length>0&&(obj.din_country_list=formulationCountryListToOutput(item.dinCountryList,currentLang))),formulationList.push(obj)}),formulationList}function activeListToOutput(activeList){var resultList=[],currentLang=$translate.proposedLanguage()||$translate.use();return angular.forEach(activeList,function(item){var ibcText=$translate.instant(item.calcAsBase,"","",currentLang),obj={ingredient_role:"",ingredient_id:item.ingId,variant_name:item.variant,purpose:item.purpose,ingredient_name:item.ingLabel,proprietary_attestation:"",cas_number:item.cas,ingred_standard:item.standard,is_human_animal_src:item.humanAnimalSourced,strength:"",units:"",units_other:item.otherUnits,per:"",per_value:"",per_units:"",per_units_other_details:"",is_base_calc:{_id:item.calcAsBase,__text:ibcText},is_nanomaterial:item.isNano,nanomaterial:"",nanomaterial_details:""};if(item.ingRole){var ingr=$filter("findListItemById")(DossierLists.getIngRoleList(),{id:item.ingRole});ingr&&(obj.ingredient_role={_id:ingr.id,__text:ingr[currentLang]},"NONMED"===ingr.id&&(obj.proprietary_attestation={_attested:item.proprietaryAttestation.attested,__text:item.proprietaryAttestation.info}))}if(item.strength){var data2Value="";item.strength.operator&&"RA"===item.strength.operator.id&&(data2Value=item.strength.data2),item.strength.operator?obj.strength={operator:{_id:item.strength.operator.id,_label_en:item.strength.operator.en,_label_fr:item.strength.operator.fr,__text:item.strength.operator[currentLang]},data1:item.strength.data1,data2:data2Value}:obj.strength={operator:{},data1:item.strength.data1,data2:data2Value}}item.per&&(obj.per={_id:item.per.id,_label_en:item.per.en,_label_fr:item.per.fr,__text:item.per[currentLang]}),obj.units=_unitsFldToOutput(item.units,DossierLists.getUnitsPrefix(),currentLang),"UP"===item.per.id?(obj.per_value=item.perPresentationValue,obj.per_units=_unitsFldToOutput(item.perPresUnits,DossierLists.getUnitsPrefix(),currentLang),obj.per_units_other_details=item.perPresOtherUnits):"UM"===item.per.id&&(obj.per_value=item.perMeasureValue,obj.per_units=_unitsFldToOutput(item.perMeasUnits,DossierLists.getUnitsPrefix(),currentLang),obj.per_units_other_details=item.perMeasOtherUnits),item.isNano===YES&&(obj.nanomaterial=_unitsFldToOutput(item.nanoMaterial,DossierLists.getNanoPrefix(),currentLang),obj.nanomaterial_details=item.nanoMaterialOther),resultList.push(obj)}),resultList}function _unitsFldToOutput(unitsObj,prefix,lang){var newObj={_id:"",_label_en:"",_label_fr:"",__text:""};if(!unitsObj||!prefix)return"";var newUnits=unitsObj.id==OTHER?OTHER:unitsObj.id.substring(prefix.length);return newObj._id=newUnits,newObj._label_en=unitsObj.en,newObj._label_fr=unitsObj.fr,newObj.__text=unitsObj[lang],newObj}function containerTypeListToOutput(containerList){var resultList=[],currentLang=$translate.proposedLanguage()||$translate.use();return angular.forEach(containerList,function(item){var obj={container_type:item.containerType,package_size:item.packageSize,shelf_life_unit:"",shelf_life_number:item.shelfLifeNumber,temperature_min:item.tempMin,temperature_max:item.tempMax,other_shelf_life_considerations:item.otherShelflifeConsider};item.shelfLifeUnit&&(obj.shelf_life_unit={_id:item.shelfLifeUnit.id,_label_en:item.shelfLifeUnit.en,_label_fr:item.shelfLifeUnit.fr,__text:item.shelfLifeUnit[currentLang]}),resultList.push(obj)}),resultList}function materialListToOutput(list){var resultList=[];return angular.forEach(list,function(item){var obj={ingredient_id:item.ingredientId,ingredient_name:item.ingredientName,cas_number:item.cas,ingred_standard:item.ingredientStandard,in_final_container:item.inFinalContainer};resultList.push(obj)}),resultList}function routeAdminToOutput(list){var resultList=[],currentLang=$translate.proposedLanguage()||$translate.use();return angular.forEach(list,function(item){if(angular.isObject(item.roa)){var newRoa=item.roa.id==OTHER?OTHER:item.roa.id.substring(DossierLists.getRoaPrefix().length),obj={roa:{_id:newRoa,_label_en:item.roa.en,_label_fr:item.roa.fr,__text:item.roa[currentLang]},roa_other:item.otherRoaDetails};resultList.push(obj)}}),resultList}function formulationCountryListToOutput(list,lang){var resultList=[];return angular.forEach(list,function(item){if(item.country.id){var country={_id:item.country.id,_label_en:item.country.en,_label_fr:item.country.fr,__text:item.country[lang]};resultList.push(country)}}),resultList}function scheduleAToOutput(jsonObj){for(var result=createEmptyScheduleAForOutput(),disorderList=jsonObj.diseaseDisorderList,keys=Object.keys(result),i=0;i<keys.length;i++)result[keys[i]]=disorderList[keys[i]]===!0?"Y":"N";return result.din_number=jsonObj.drugIdNumber,result.sched_a_claims_ind_details=jsonObj.scheduleAClaimsIndDetails,result}function createEmptyScheduleAForOutput(){var result={};return result.din_number="",result.acute_alcohol=noValue,result.acute_anxiety=noValue,result.acute_infectious=noValue,result.acute_inflammatory=noValue,result.acute_psychotic=noValue,result.addiction=noValue,result.ateriosclerosis=noValue,result.appendicitis=noValue,result.asthma=noValue,result.cancer=noValue,result.congest_heart_fail=noValue,result.convulsions=noValue,result.dementia=noValue,result.depression=noValue,result.diabetes=noValue,result.gangrene=noValue,result.glaucoma=noValue,result.haematologic_bleeding=noValue,result.hepatitis=noValue,result.hypertension=noValue,result.nausea_pregnancy=noValue,result.obesity=noValue,result.rheumatic_fever=noValue,result.septicemia=noValue,result.sex_transmit_disease=noValue,result.strangulated_hernia=noValue,result.thrombotic_embolic_disorder=noValue,result.thyroid_disease=noValue,result.ulcer_gastro=noValue,result.sched_a_claims_ind_details="",result}function getAppendiceData(appendices){var result={};if(!appendices)return result;for(var i=0;i<appendices.length;i++){var appendix=appendices[i];result[appendix.ingredientName]=i+1}return result}function getAnimalIngredients(formulations){for(var yesValue="Y",allAnimalSourcedNames=[],uniqueList={},i=0;i<formulations.length;i++){var oneFormulation=formulations[i];if(oneFormulation.activeIngList)for(var j=0;j<oneFormulation.activeIngList.length;j++){var oneActive=oneFormulation.activeIngList[j];oneActive&&oneActive.humanAnimalSourced===yesValue&&allAnimalSourcedNames.push(oneActive.ingLabel)}if(oneFormulation.nMedIngList)for(var j=0;j<oneFormulation.nMedIngList.length;j++){var oneActive=oneFormulation.nMedIngList[j];oneActive.humanAnimalSourced===yesValue&&allAnimalSourcedNames.push(oneActive.ingName)}if(oneFormulation.animalHumanMaterials)for(var j=0;j<oneFormulation.animalHumanMaterials.length;j++){var oneActive=oneFormulation.animalHumanMaterials[j];allAnimalSourcedNames.push(oneActive.ingredientName)}}return uniqueList=getUniqueList(allAnimalSourcedNames)}function getMissingAppendices(appendiceList,ingredientJsonList){for(var missingList=[],i=0;i<ingredientJsonList.length;i++)appendiceList.hasOwnProperty(ingredientJsonList[i])?appendiceList[ingredientJsonList[i]]=0:missingList.push(ingredientJsonList[i]);return missingList}function findExtraApppendices(appendixJson){for(var extraList=[],keys=Object.keys(appendixJson),i=0;i<keys.length;i++){var val=appendixJson[keys[i]];val>0&&extraList.push(keys[i])}return extraList}function getUniqueList(arr){for(var u={},a=[],i=0,l=arr.length;i<l;++i)u.hasOwnProperty(arr[i])||(a.push(arr[i]),u[arr[i]]=1);return a}function getDefaultSchedA(){var schedA={};return schedA.drugIdNumber="",schedA.scheduleAClaimsIndDetails="",schedA.diseaseDisorderList=getDefaultDiseaseDisorderList(),schedA}function getDefaultDiseaseDisorderList(){return{acute_alcohol:!1,acute_anxiety:!1,acute_infectious:!1,acute_inflammatory:!1,acute_psychotic:!1,addiction:!1,ateriosclerosis:!1,appendicitis:!1,asthma:!1,cancer:!1,congest_heart_fail:!1,convulsions:!1,dementia:!1,depression:!1,diabetes:!1,gangrene:!1,glaucoma:!1,haematologic_bleeding:!1,hepatitis:!1,hypertension:!1,nausea_pregnancy:!1,obesity:!1,rheumatic_fever:!1,septicemia:!1,sex_transmit_disease:!1,strangulated_hernia:!1,thrombotic_embolic_disorder:!1,thyroid_disease:!1,ulcer_gastro:!1}}function createEmptyAnimalSourceForOutput(){var record={};return record.animal_src_record=[],record.is_controlled_pop="",record.is_biotech_derived="",record.is_cell_line="",record.is_animal_age_known="",record.animal_age="",record.country_origin_list={},record.country_origin_list.country_origin=[],record}function createEmptyAnimalSourceModel(){var record={};return record.animalSrcList=[],record.isCellLine="",record.isBiotechDerived="",record.isControlledPop="",record.isAgeKnown="",record.ageAnimals="",record.countryList=[],record}function _createEmptyNervousSystemModel(){var record={};return record.brain=!1,record.brainStem=!1,record.cerebellum=!1,record.ceroFluid=!1,record.dorsalRoot=!1,record.duraMater=!1,record.hypothalamus=!1,record.retina=!1,record.spinalCord=!1,record.trigeminal=!1,record.otherNervous=!1,record.otherDetails="",record}function _createEmptyDigestiveSystemModel(){var record={};return record.appendix=!1,record.bile=!1,record.distalIleum=!1,record.largeIntestine=!1,record.salivaSalivary=!1,record.smallIntestine=!1,record.stomach=!1,record.otherDigestive=!1,record.otherDetails="",record}function _createEmptyImmuneSystemModel(){var record={};return record.lymphNodes=!1,record.spleen=!1,record.thymus=!1,record.tonsils=!1,record.otherImmune=!1,record.otherDetails="",record}function _createEmptyMuscleSystemModel(){var record={};return record.abdomen=!1,record.skull=!1,record.bones=!1,record.collagen=!1,record.tendonsLigaments=!1,record.vertebralColumn=!1,record.muscle=!1,record.otherMuscle=!1,record.otherDetails="",record}function _createEmptyReproductiveSystemModel(){var record={};return record.milkProducts=!1,record.kidney=!1,record.colostrum=!1,record.mammaryGlands=!1,record.ovaries=!1,record.placenta=!1,record.placentalFluid=!1,record.semen=!1,record.testes=!1,record.urine=!1,record.otherReproductive=!1,record.otherDetails="",record}function _createEmptySkinSystemModel(){var record={};return record.adrenalGland=!1,record.hairHoovesFeathers=!1,record.liver=!1,record.pancreas=!1,record.pituitary=!1,record.skinHides=!1,record.thyroidParathyroid=!1,record.otherSkin=!1,record.otherDetails="",record}function _createEmptyOtherSystemModel(){var record={};return record.adipose=!1,record.ascites=!1,record.antlerVelvet=!1,record.serum=!1,record.wholeBlood=!1,record.plasma=!1,record.embryonicTissue=!1,record.fetalTissue=!1,record.boneMarrow=!1,record.eyesCornea=!1,record.gallBladder=!1,record.otherFluids=!1,record.otherDetails="",record}function _createEmptyCardioSystemModel(){var record={};return record.heartPericardium=!1,record.lung=!1,record.nasalFluid=!1,record.trachea=!1,record.otherCardio=!1,record.otherDetails="",record}function _createEmptyNervousSystemforOutput(){var record={};return record.brain=noValue,record.brain_stem=noValue,record.cerebellum=noValue,record.cerebrospinal_fluid=noValue,record.dorsal_root_ganglia=noValue,record.dura_mater=noValue,record.hypothalamus=noValue,record.retina_optic=noValue,record.spinal_cord=noValue,record.trigerminal_ganglia=noValue,record.other_nervous=noValue,record.other_nervous_details="",record}function _createEmptyDigestiveSystemforOutput(){var record={};return record.appendix=noValue,record.bile=noValue,record.distal_ileum=noValue,record.large_intestine=noValue,record.saliva_salivary=noValue,record.small_intestine=noValue,record.stomach=noValue,record.other_digestive=noValue,record.other_digestive_details="",record}function _createEmptyMuscleSystemforOutput(){var record={};return record.abdomen=noValue,record.skull=noValue,record.bones=noValue,record.collagen=noValue,record.tendons_ligaments=noValue,record.vertebral_column=noValue,record.muscle=noValue,record.other_musculo_skeletal=noValue,record.other_musculo_skeletal_details="",record}function _createEmptyReproductiveSystemforOutput(){var record={};return record.milk_products=noValue,record.kidney=noValue,record.colostrum=noValue,record.mammary_glands=noValue,record.ovaries=noValue,record.placenta=noValue,record.placental_fluid=noValue,record.semen=noValue,record.testes=noValue,record.urine=noValue,record.other_reproductive=noValue,record.other_reproductive_details="",record}function _createEmptyCardioSystemforOutput(){var record={};return record.heart_pericardium=noValue,record.lung=noValue,record.nasal_fluid=noValue,record.trachea=noValue,record.other_cardio_respiratory=noValue,record.other_cardio_respiratory_details="",record}function _createEmptyImmuneSystemforOutput(){var record={};return record.lymph_nodes=noValue,record.spleen=noValue,record.thymus=noValue,record.tonsils=noValue,record.other_immune=noValue,record.other_immune_details="",record}function _createEmptySkinSystemforOutput(){var record={};return record.adrenal_gland=noValue,record.hair_hooves_feathers=noValue,record.liver=noValue,record.pancreas=noValue,record.pituitary=noValue,record.skin_hides=noValue,record.thyroid_parathyroid=noValue,record.other_skin_glandular=noValue,record.other_skin_glandular_details="",record}function _createEmptyOtherSystemforOutput(){var record={};return record.adipose=noValue,record.ascites=noValue,record.antler_velvet=noValue,record.serum=noValue,record.whole_blood=noValue,record.plasma=noValue,record.embryonic_tissue=noValue,record.fetal_tissue=noValue,record.bone_marrow=noValue,record.eyes_cornea=noValue,record.gall_bladder=noValue,record.other_fluids_tissues=noValue,record.other_fluids_tissues_details="",record}function _nervousSystemToOutput(jsonObj){var record=_createEmptyNervousSystemforOutput();return record.brain=jsonObj.brain===!0?yesValue:noValue,record.brain_stem=jsonObj.brainStem===!0?yesValue:noValue,record.cerebellum=jsonObj.cerebellum===!0?yesValue:noValue,record.cerebrospinal_fluid=jsonObj.ceroFluid===!0?yesValue:noValue,record.dorsal_root_ganglia=jsonObj.dorsalRoot===!0?yesValue:noValue,record.dura_mater=jsonObj.duraMater===!0?yesValue:noValue,record.hypothalamus=jsonObj.hypothalamus===!0?yesValue:noValue,record.retina_optic=jsonObj.retina===!0?yesValue:noValue,record.spinal_cord=jsonObj.spinalCord===!0?yesValue:noValue,record.trigerminal_ganglia=jsonObj.trigeminal===!0?yesValue:noValue,record.other_nervous=jsonObj.otherNervous===!0?yesValue:noValue,record.other_nervous_details=jsonObj.otherDetails,record}function _digestiveSystemToOutput(jsonObj){var record=_createEmptyDigestiveSystemforOutput();return record.appendix=jsonObj.appendix===!0?yesValue:noValue,record.bile=jsonObj.bile===!0?yesValue:noValue,record.distal_ileum=jsonObj.distalIleum===!0?yesValue:noValue,record.large_intestine=jsonObj.largeIntestine===!0?yesValue:noValue,record.saliva_salivary=jsonObj.salivaSalivary===!0?yesValue:noValue,record.small_intestine=jsonObj.smallIntestine===!0?yesValue:noValue,record.stomach=jsonObj.stomach===!0?yesValue:noValue,record.other_digestive=jsonObj.otherDigestive===!0?yesValue:noValue,record.other_digestive_details=jsonObj.otherDetails,record}function _muscleSystemToOutput(jsonObj){var record=_createEmptyMuscleSystemforOutput();return record.abdomen=jsonObj.abdomen===!0?yesValue:noValue,record.skull=jsonObj.skull===!0?yesValue:noValue,record.bones=jsonObj.bones===!0?yesValue:noValue,record.collagen=jsonObj.collagen===!0?yesValue:noValue,record.tendons_ligaments=jsonObj.tendonsLigaments===!0?yesValue:noValue,record.vertebral_column=jsonObj.vertebralColumn===!0?yesValue:noValue,record.muscle=jsonObj.muscle===!0?yesValue:noValue,record.other_musculo_skeletal=jsonObj.otherMuscle===!0?yesValue:noValue,record.other_musculo_skeletal_details=jsonObj.otherDetails,record}function _reproductiveSystemToOutput(jsonObj){var record=_createEmptyReproductiveSystemforOutput();return record.milk_products=jsonObj.milkProducts===!0?yesValue:noValue,record.kidney=jsonObj.kidney===!0?yesValue:noValue,record.colostrum=jsonObj.colostrum===!0?yesValue:noValue,record.mammary_glands=jsonObj.mammaryGlands===!0?yesValue:noValue,record.ovaries=jsonObj.ovaries===!0?yesValue:noValue,record.placenta=jsonObj.placenta===!0?yesValue:noValue,record.placental_fluid=jsonObj.placentalFluid===!0?yesValue:noValue,record.semen=jsonObj.semen===!0?yesValue:noValue,record.testes=jsonObj.testes===!0?yesValue:noValue,record.urine=jsonObj.urine===!0?yesValue:noValue,record.other_reproductive=jsonObj.otherReproductive===!0?yesValue:noValue,record.other_reproductive_details=jsonObj.otherDetails,record}function _cardioSystemToOutput(jsonObj){var record=_createEmptyCardioSystemforOutput();return record.heart_pericardium=jsonObj.heartPericardium===!0?yesValue:noValue,record.lung=jsonObj.lung===!0?yesValue:noValue,record.nasal_fluid=jsonObj.nasalFluid===!0?yesValue:noValue,record.trachea=jsonObj.trachea===!0?yesValue:noValue,record.other_cardio_respiratory=jsonObj.otherCardio===!0?yesValue:noValue,record.other_cardio_respiratory_details=jsonObj.otherDetails,record}function _immuneSystemToOutput(jsonObj){var record=_createEmptyImmuneSystemforOutput();return record.lymph_nodes=jsonObj.lymphNodes===!0?yesValue:noValue,record.spleen=jsonObj.spleen===!0?yesValue:noValue,record.thymus=jsonObj.thymus===!0?yesValue:noValue,record.tonsils=jsonObj.tonsils===!0?yesValue:noValue,record.other_immune=jsonObj.otherImmune===!0?yesValue:noValue,record.other_immune_details=jsonObj.otherDetails,record}function _otherSystemToOutput(jsonObj){var record=_createEmptyOtherSystemforOutput();return record.adipose=jsonObj.adipose===!0?yesValue:noValue,record.ascites=jsonObj.ascites===!0?yesValue:noValue,record.antler_velvet=jsonObj.antlerVelvet===!0?yesValue:noValue,record.serum=jsonObj.serum===!0?yesValue:noValue,record.whole_blood=jsonObj.wholeBlood===!0?yesValue:noValue,record.plasma=jsonObj.plasma===!0?yesValue:noValue,record.embryonic_tissue=jsonObj.embryonicTissue===!0?yesValue:noValue,record.fetal_tissue=jsonObj.fetalTissue===!0?yesValue:noValue,record.bone_marrow=jsonObj.boneMarrow===!0?yesValue:noValue,record.eyes_cornea=jsonObj.eyesCornea===!0?yesValue:noValue,record.gall_bladder=jsonObj.gallBladder===!0?yesValue:noValue,record.other_fluids_tissues=jsonObj.otherFluids===!0?yesValue:noValue,record.other_fluids_tissues_details=jsonObj.otherDetails,record}function _skinSystemToOutput(jsonObj){var record=_createEmptySkinSystemforOutput();return record.adrenal_gland=jsonObj.adrenalGland===!0?yesValue:noValue,record.hair_hooves_feathers=jsonObj.hairHoovesFeathers===!0?yesValue:noValue,record.liver=jsonObj.liver===!0?yesValue:noValue,record.pancreas=jsonObj.pancreas===!0?yesValue:noValue,record.pituitary=jsonObj.pituitary===!0?yesValue:noValue,record.skin_hides=jsonObj.skinHides===!0?yesValue:noValue,record.thyroid_parathyroid=jsonObj.thyroidParathyroid===!0?yesValue:noValue,record.other_skin_glandular=jsonObj.otherSkin===!0?yesValue:noValue,record.other_skin_glandular_details=jsonObj.otherDetails,record}function _createEmptyTissuesSystemRecord(){return{id:"",systemType:"",detailsConcat:"",system:{},otherDetails:""}}function _getTissuesFluidsModel(json){var result=[],index=1;if(angular.isUndefined(json))return result;if(json.cardio_system){var record=_createEmptyTissuesSystemRecord();record.id=index,index++,record.systemType=DossierLists.getCardioSystemValue(),record.system=_getCardioModel(json.cardio_system),record.otherDetails=record.system.otherDetails,record.detailsConcat=_getConcatTissues(record.system),result.push(record)}if(json.digestive_system){var record=_createEmptyTissuesSystemRecord();record.id=index,index++,record.systemType=DossierLists.getDigestiveSystemValue(),record.system=_getDigestiveModel(json.digestive_system),record.otherDetails=record.system.otherDetails,record.detailsConcat=_getConcatTissues(record.system),result.push(record)}if(json.immune_system){var record=_createEmptyTissuesSystemRecord();record.id=index,index++,record.systemType=DossierLists.getImmuneSystemValue(),record.system=_getImmuneModel(json.immune_system),record.otherDetails=record.system.otherDetails,record.detailsConcat=_getConcatTissues(record.system),result.push(record)}if(json.musculo_system){var record=_createEmptyTissuesSystemRecord();record.id=index,index++,record.systemType=DossierLists.getMuscleSystemValue(),record.system=_getMuscleSystemModel(json.musculo_system),record.otherDetails=record.system.otherDetails,record.detailsConcat=_getConcatTissues(record.system),result.push(record)}if(json.nervous_system){var record=_createEmptyTissuesSystemRecord();record.id=index,index++,record.systemType=DossierLists.getNervousSystemValue(),record.system=_getNervousModel(json.nervous_system),record.otherDetails=record.system.otherDetails,record.detailsConcat=_getConcatTissues(record.system),result.push(record)}if(json.other_system){var record=_createEmptyTissuesSystemRecord();record.id=index,index++,record.systemType=DossierLists.getOtherTissuesSystemValue(),record.system=_getOtherSystemModel(json.other_system),record.otherDetails=record.system.otherDetails,record.detailsConcat=_getConcatTissues(record.system),result.push(record)}if(json.reproductive_system){var record=_createEmptyTissuesSystemRecord();record.id=index,index++,record.systemType=DossierLists.getReproductiveSystemValue(),record.system=_getReproductiveModel(json.reproductive_system),record.otherDetails=record.system.otherDetails,record.detailsConcat=_getConcatTissues(record.system),result.push(record)}if(json.skin_system){var record=_createEmptyTissuesSystemRecord();record.id=index,index++,record.systemType=DossierLists.getSkinSystemValue(),record.system=_getSkinModel(json.skin_system),record.otherDetails=record.system.otherDetails,record.detailsConcat=_getConcatTissues(record.system),result.push(record)}return result}function _getCardioModel(json){var model=_createEmptyCardioSystemModel();return model.heartPericardium=json.heart_pericardium===yesValue,model.lung=json.lung===yesValue,model.nasalFluid=json.nasal_fluid===yesValue,model.trachea=json.trachea===yesValue,model.otherCardio=json.other_cardio_respiratory===yesValue,model.otherDetails=json.other_cardio_respiratory_details,model}function _getNervousModel(json){var model=_createEmptyNervousSystemModel();return model.brain=json.brain===yesValue,model.brainStem=json.brain_stem===yesValue,model.cerebellum=json.cerebellum===yesValue,model.ceroFluid=json.cerebrospinal_fluid===yesValue,model.dorsalRoot=json.dorsal_root_ganglia===yesValue,model.duraMater=json.dura_mater===yesValue,model.hypothalamus=json.hypothalamus===yesValue,model.retina=json.retina_optic===yesValue,model.spinalCord=json.spinal_cord===yesValue,model.trigeminal=json.trigerminal_ganglia===yesValue,model.otherNervous=json.other_nervous===yesValue,model.otherDetails=json.other_nervous_details,model}function _getReproductiveModel(json){var model=_createEmptyReproductiveSystemModel();return model.milkProducts=json.milk_products===yesValue,model.kidney=json.kidney===yesValue,model.colostrum=json.colostrum===yesValue,model.mammaryGlands=json.mammary_glands===yesValue,model.ovaries=json.ovaries===yesValue,model.placenta=json.placenta===yesValue,model.placentalFluid=json.placental_fluid===yesValue,model.semen=json.semen===yesValue,model.testes=json.testes===yesValue,model.urine=json.urine===yesValue,model.otherReproductive=json.other_reproductive===yesValue,model.otherDetails=json.other_reproductive_details,model}function _getSkinModel(json){var model=_createEmptySkinSystemModel();return model.adrenalGland=json.adrenal_gland===yesValue,model.hairHoovesFeathers=json.hair_hooves_feathers===yesValue,model.liver=json.liver===yesValue,model.pancreas=json.pancreas===yesValue,model.pituitary=json.pituitary===yesValue,model.skinHides=json.skin_hides===yesValue,model.thyroidParathyroid=json.thyroid_parathyroid===yesValue,model.otherSkin=json.other_skin_glandular===yesValue,model.otherDetails=json.other_skin_glandular_details,model}function _getImmuneModel(json){var model=_createEmptyImmuneSystemModel();return model.lymphNodes=json.lymph_nodes===yesValue,model.spleen=json.spleen===yesValue,model.thymus=json.thymus===yesValue,model.tonsils=json.tonsils===yesValue,model.otherImmune=json.other_immune===yesValue,model.otherDetails=json.other_immune_details,model}function _getDigestiveModel(json){var model=_createEmptyDigestiveSystemModel();return model.appendix=json.appendix===yesValue,model.bile=json.bile===yesValue,model.distalIleum=json.distal_ileum===yesValue,model.largeIntestine=json.large_intestine===yesValue,model.salivaSalivary=json.saliva_salivary===yesValue,model.smallIntestine=json.small_intestine===yesValue,model.stomach=json.stomach===yesValue,model.otherDigestive=json.other_digestive===yesValue,model.otherDetails=json.other_digestive_details,model}function _getOtherSystemModel(json){var model=_createEmptyOtherSystemModel();return model.adipose=json.adipose===yesValue,model.ascites=json.ascites===yesValue,model.antlerVelvet=json.antler_velvet===yesValue,model.serum=json.serum===yesValue,model.wholeBlood=json.whole_blood===yesValue,model.plasma=json.plasma===yesValue,model.embryonicTissue=json.embryonic_tissue===yesValue,model.fetalTissue=json.fetal_tissue===yesValue,model.boneMarrow=json.bone_marrow===yesValue,model.eyesCornea=json.eyes_cornea===yesValue,model.gallBladder=json.gall_bladder===yesValue,model.otherFluids=json.other_fluids_tissues===yesValue,model.otherDetails=json.other_fluids_tissues_details,model}function _getMuscleSystemModel(json){var model=_createEmptyMuscleSystemModel();return model.abdomen=json.abdomen===yesValue,model.skull=json.skull===yesValue,model.bones=json.bones===yesValue,model.collagen=json.collagen===yesValue,model.tendonsLigaments=json.tendons_ligaments===yesValue,model.vertebralColumn=json.vertebral_column===yesValue,model.muscle=json.muscle===yesValue,model.otherMuscle=json.other_musculo_skeletal===yesValue,model.otherDetails=json.other_musculo_skeletal_details,model}function _getConcatTissues(json){var labelLookup=DossierLists.getTissuesFluidsLabels(),result="",markupBreak="<br>";if(angular.isUndefined(json))return result;for(var keys=Object.keys(json),i=0;i<keys.length;i++){var val=json[keys[i]];if(val){var alias=labelLookup[keys[i]];if(alias){var currentLang=$translate.proposedLanguage()||$translate.use(),translateText=$translate.instant(alias,"","",currentLang);result=result+translateText+markupBreak}}}return keys.length>0&&(result=result.substring(0,result.length-markupBreak.length)),result}var yesValue=YES,noValue=NO,versions=DossierLists.getVer(),xslName="REP_PI_"+versions.PI.major+"_"+versions.PI.minor+".xsl",isForProd=PROD===DossierLists.getEnv();return DrugProductService.prototype={_default:{dossierID:"",companyID:"",dossierType:"",productName:"",properName:"",manu:!1,mailling:!1,thisActivity:!1,importer:!1,areDrugsImported:"",importerRecord:[],enrolmentVersion:"0.00",dateSaved:"",softwareVersion:versions.PI.major+"."+versions.PI.minor+"."+versions.PI.patch,xslFileName:xslName,dataChecksum:"",privacyStat:"",drugProduct:{drugUse:"",speciesRecord:[],disinfectantType:{hospital:!1,foodProcessing:!1,medicalInstruments:!1,domestic:!1,barn:!1,institutionalIndustrial:!1},scheduleSelected:"",isScheduleC:!1,isScheduleD:!1,isPrescriptionDrugList:!1,isRegulatedCDSA:!1,isNonPrescriptionDrug:!1,isScheduleA:!1,isDrugAdmin:!1,scheduleAGroup:getDefaultSchedA(),propIndication:"",formulations:[],appendixFourList:[]},clinicalTrial:{protocolNum:"",protocolTitle:"",composition:{fmpp:!1,mpp:!1,fmap:!1,map:!1},phase:{phase1Bio:!1,phase1Study:!1,phase1Other:!1,phase2:!1,phase3:!1,phaseOther:!1,ctaPhaseOtherDetails:""},isRefuseInfo:""}},getDefaultObject:function(){return this._default},getXSLFileName:function(){return this._default.xslFileName},loadFromFile:function(info){var rootTag=this.getRootTagName();if(!info)return this._default;if(!info[rootTag])return this._default;info=info[rootTag];var drugUseValue="";info.drug_use&&(drugUseValue=info.drug_use._id);var formModel={companyID:info.company_id,dossierID:info.dossier_id,dossierType:info.dossier_type._id,productName:info.product_name,properName:info.proper_name,clinicalTrial:{protocolNum:info.protocol_number,protocolTitle:info.protocol_title,composition:{fmpp:!!info.composition&&"Y"===info.composition.female_paediatric,mpp:!!info.composition&&"Y"===info.composition.male_paediatric,fmap:!!info.composition&&"Y"===info.composition.female_adult,map:!!info.composition&&"Y"===info.composition.male_adult},phase:{phase1Bio:!!info.phase&&"Y"===info.phase.phase_1_bioequivalence,phase1Study:!!info.phase&&"Y"===info.phase.phase_1_healthy,phase1Other:!!info.phase&&"Y"===info.phase.phase_1_other,phase2:!!info.phase&&"Y"===info.phase.phase_2,phase3:!!info.phase&&"Y"===info.phase.phase_3,phaseOther:!!info.phase&&"Y"===info.phase.other,ctaPhaseOtherDetails:info.phase?info.phase.other_details:""},isRefuseInfo:info.is_reb_info_refused,hasDinNoc:info.has_din_noc,isCanMarket:info.is_canadian_market,ctaSrcCountryList:transformCtaCountryFromFile(info.cta_source_countries)},manu:"Y"===info.manufacturer,mailling:"Y"===info.mailing,thisActivity:"Y"===info.this_activity,importer:"Y"===info.importer,areDrugsImported:info.are_drugs_imported,importerRecord:transformImpFromFile(info.importer_record),enrolmentVersion:info.enrolment_version,dateSaved:info.date_saved,softwareVersion:info.software_version,dataChecksum:info.data_checksum,drugProduct:{drugUse:$filter("findListItemById")(DossierLists.getDrugUseList(),{id:drugUseValue}),speciesRecord:transformSpeciesFromFile(info.species_record),disinfectantType:{hospital:"Y"===info.disinfectant_type.hospital,
foodProcessing:"Y"===info.disinfectant_type.food_processing,medicalInstruments:"Y"===info.disinfectant_type.medical_instruments,domestic:"Y"===info.disinfectant_type.domestic,barn:"Y"===info.disinfectant_type.barn,institutionalIndustrial:"Y"===info.disinfectant_type.institutional_industrial},isScheduleC:"Y"===info.is_sched_c,isScheduleD:"Y"===info.is_sched_d,isPrescriptionDrugList:"Y"===info.is_prescription_drug_list,isRegulatedCDSA:"Y"===info.is_regulated_cdsa,isNonPrescriptionDrug:"Y"===info.is_non_prescription_drug,isScheduleA:"Y"===info.is_sched_a,isDrugAdmin:"Y"===info.is_drug_admin,propIndication:info.proposed_indication,formulations:getFormulationList(info.formulation_group.formulation_details),appendixFourList:getAppendix4IngredientList(info.appendix4_group)}};return formModel.drugProduct.scheduleAGroup=getDefaultSchedA(),info.schedule_a_group&&(formModel.drugProduct.scheduleAGroup.drugIdNumber=info.schedule_a_group.din_number,formModel.drugProduct.scheduleAGroup.scheduleAClaimsIndDetails=info.schedule_a_group.sched_a_claims_ind_details,getDiseaseDisorderList(info.schedule_a_group,formModel.drugProduct.scheduleAGroup.diseaseDisorderList)),formModel},checkSelectedValues:function(obj,systemRole){var keys=Object.keys(obj),other="other"+systemRole,otherDetails="otherDetailes";if(1==obj[other]&&""==obj[otherDetails])return!1;for(var i=0;i<keys.length;i++)if(1==obj[keys[i]])return!0;return!1}},DrugProductService.prototype.formDataToOutput=function(jsonObj){if(!jsonObj)return null;var baseModel=(this.getRootTagName(),{});baseModel.enrolment_version=jsonObj.enrolmentVersion,baseModel.date_saved=jsonObj.dateSaved,baseModel.software_version=versions.PI.major+"."+versions.PI.minor+".0",baseModel.data_checksum="",baseModel.company_id=jsonObj.companyID,baseModel.dossier_id=jsonObj.dossierID;var currentLang=$translate.proposedLanguage()||$translate.use(),dt_text=$translate.instant(jsonObj.dossierType,"","",currentLang);if(baseModel.dossier_type={_id:jsonObj.dossierType,__text:dt_text},baseModel.product_name=jsonObj.productName,baseModel.proper_name=jsonObj.properName,jsonObj.dossierType&&"D26"===jsonObj.dossierType&&(baseModel.protocol_number=jsonObj.clinicalTrial.protocolNum,baseModel.protocol_title=jsonObj.clinicalTrial.protocolTitle,baseModel.composition={female_paediatric:jsonObj.clinicalTrial.composition.fmpp===!0?"Y":"N",male_paediatric:jsonObj.clinicalTrial.composition.mpp===!0?"Y":"N",female_adult:jsonObj.clinicalTrial.composition.fmap===!0?"Y":"N",male_adult:jsonObj.clinicalTrial.composition.map===!0?"Y":"N"},baseModel.phase={phase_1_bioequivalence:jsonObj.clinicalTrial.phase.phase1Bio===!0?"Y":"N",phase_1_healthy:jsonObj.clinicalTrial.phase.phase1Study===!0?"Y":"N",phase_1_other:jsonObj.clinicalTrial.phase.phase1Other===!0?"Y":"N",phase_2:jsonObj.clinicalTrial.phase.phase2===!0?"Y":"N",phase_3:jsonObj.clinicalTrial.phase.phase3===!0?"Y":"N",other:jsonObj.clinicalTrial.phase.phaseOther===!0?"Y":"N",other_details:jsonObj.clinicalTrial.phase.ctaPhaseOtherDetails},baseModel.is_reb_info_refused=jsonObj.clinicalTrial.isRefuseInfo,baseModel.has_din_noc=jsonObj.clinicalTrial.hasDinNoc,baseModel.is_canadian_market=jsonObj.clinicalTrial.isCanMarket,jsonObj.clinicalTrial.ctaSrcCountryList&&jsonObj.clinicalTrial.ctaSrcCountryList.length>0&&(baseModel.cta_source_countries=countryListToOutput(jsonObj.clinicalTrial.ctaSrcCountryList,currentLang))),baseModel.manufacturer=jsonObj.manu===!0?"Y":"N",baseModel.mailing=jsonObj.mailling===!0?"Y":"N",baseModel.this_activity=jsonObj.thisActivity===!0?"Y":"N",baseModel.importer=jsonObj.importer===!0?"Y":"N",baseModel.are_drugs_imported=jsonObj.areDrugsImported,baseModel.importer_record=transformImpToFile(jsonObj.importerRecord),jsonObj.drugProduct.drugUse?baseModel.drug_use={_id:jsonObj.drugProduct.drugUse.id,_label_en:jsonObj.drugProduct.drugUse.en,_label_fr:jsonObj.drugProduct.drugUse.fr,__text:jsonObj.drugProduct.drugUse[currentLang]}:baseModel.drug_use="",baseModel.species_record=transformSpeciesToFile(jsonObj.drugProduct.speciesRecord),baseModel.disinfectant_type={hospital:jsonObj.drugProduct.disinfectantType.hospital===!0?"Y":"N",food_processing:jsonObj.drugProduct.disinfectantType.foodProcessing===!0?"Y":"N",medical_instruments:jsonObj.drugProduct.disinfectantType.medicalInstruments===!0?"Y":"N",domestic:jsonObj.drugProduct.disinfectantType.domestic===!0?"Y":"N",barn:jsonObj.drugProduct.disinfectantType.barn===!0?"Y":"N",institutional_industrial:jsonObj.drugProduct.disinfectantType.institutionalIndustrial===!0?"Y":"N"},baseModel.is_sched_c=jsonObj.drugProduct.isScheduleC===!0?"Y":"N",baseModel.is_sched_d=jsonObj.drugProduct.isScheduleD===!0?"Y":"N",baseModel.is_prescription_drug_list=jsonObj.drugProduct.isPrescriptionDrugList===!0?"Y":"N",baseModel.is_regulated_cdsa=jsonObj.drugProduct.isRegulatedCDSA===!0?"Y":"N",baseModel.is_non_prescription_drug=jsonObj.drugProduct.isNonPrescriptionDrug===!0?"Y":"N",baseModel.is_sched_a=jsonObj.drugProduct.isScheduleA===!0?"Y":"N",baseModel.is_drug_admin=jsonObj.drugProduct.isDrugAdmin===!0?"Y":"N",baseModel.proposed_indication=jsonObj.drugProduct.propIndication,jsonObj.drugProduct.isScheduleA&&(baseModel.schedule_a_group=scheduleAToOutput(jsonObj.drugProduct.scheduleAGroup),console.log(baseModel.schedule_a_group)),jsonObj.drugProduct){var appendix4=appendix4IngredientListToOutput(jsonObj.drugProduct.appendixFourList);appendix4&&appendix4.length>0&&(baseModel.appendix4_group=appendix4);var formulations=formulationListToOutput(jsonObj.drugProduct.formulations);baseModel.formulation_group={},formulations&&(baseModel.formulation_group.formulation_details=formulations)}return{DRUG_PRODUCT_ENROL:baseModel}},DrugProductService.prototype.getMissingAppendix4=function(dossierModel){var missingAppendices=[],extraAppendices=[],results={};if(!dossierModel||!dossierModel.drugProduct)return missingAppendices;var appendices=getAppendiceData(dossierModel.drugProduct.appendixFourList),ingredients=getAnimalIngredients(dossierModel.drugProduct.formulations);return missingAppendices=getMissingAppendices(appendices,ingredients),extraAppendices=findExtraApppendices(appendices),results.missing=missingAppendices,results.extra=extraAppendices,results},DrugProductService.prototype.getDefaultDiseaseDisorderList=function(){return getDefaultDiseaseDisorderList()},DrugProductService.prototype.getDefaultNervousSystem=function(){return _createEmptyNervousSystemModel()},DrugProductService.prototype.getDefaultImmuneSystem=function(){return _createEmptyImmuneSystemModel()},DrugProductService.prototype.getDefaultDigestiveSystem=function(){return _createEmptyDigestiveSystemModel()},DrugProductService.prototype.getDefaultMuscleSystem=function(){return _createEmptyMuscleSystemModel()},DrugProductService.prototype.getDefaultOtherSystem=function(){return _createEmptyOtherSystemModel()},DrugProductService.prototype.getDefaultReproductiveSystem=function(){return _createEmptyReproductiveSystemModel()},DrugProductService.prototype.getDefaultCardioSystem=function(){return _createEmptyCardioSystemModel()},DrugProductService.prototype.getDefaultSkinSystem=function(){return _createEmptySkinSystemModel()},DrugProductService.prototype.getDefaultScheduleA=function(){return getDefaultSchedA()},DrugProductService.prototype.getRootTagName=function(){return"DRUG_PRODUCT_ENROL"},DrugProductService.prototype.getEmptyCtaModel=function(){var emptyCtaModel={protocolNum:"",protocolTitle:"",composition:{fmpp:!1,mpp:!1,fmap:!1,map:!1},phase:{phase1Bio:!1,phase1Study:!1,phase1Other:!1,phase2:!1,phase3:!1,phaseOther:!1,ctaPhaseOtherDetails:""},isRefuseInfo:"",hasDinNoc:"",isCanMarket:"",ctaSrcCountryList:[]};return emptyCtaModel},DrugProductService}angular.module("drugProductService").factory("DrugProductService",DrugProductService),DrugProductService.$inject=["DossierLists","$translate","$filter","getCountryAndProvinces","OTHER","UNKNOWN","YES","NO","XSL_PREFIX","PROD"]}(),function(){"use strict";angular.module("dossierLoadModule",["dataLists","dossierDataLists","hpfbConstants"])}(),function(){"use strict";angular.module("dossierLoadModule").factory("customLoad",["$http","$q","$filter","getCountryAndProvinces","DossierLists","OTHER","RELATIVE_FOLDER_DATA","CANADA","USA",function($http,$q,$filter,getCountryAndProvinces,DossierLists,OTHER,RELATIVE_FOLDER_DATA,CANADA,USA){function _createTranslateList(jsonList,lang){lang||(lang="en");for(var resultList={},i=0;i<jsonList.length;i++)resultList[jsonList[i].id]=jsonList[i][lang];return resultList}function _createNewSortedArrayWithOther(jsonList,prefix,lang){var newList=_createNewPrefixList(jsonList,prefix);lang||(lang="en");var result=_createSortedArray(newList,lang);return result.unshift({id:OTHER,en:"Other",fr:"Autre"}),result}function _createSortedArray(jsonList,lang){var result=[];return angular.forEach($filter("orderByLocale")(jsonList,lang),function(sortedObject){sortedObject.key!==OTHER&&result.push(sortedObject)}),result}function _createNewPrefixList(jsonList,prefix){for(var newList=[],i=0;i<jsonList.length;i++){var newRec=angular.copy(jsonList[i]);newRec.id=prefix+newRec.id,newList.push(newRec)}return newList}function _createSortedArrayNAFirst(jsonList,lang){var result=[],canadaRecord=null,usaRecord=null;return angular.forEach($filter("orderByLocale")(jsonList,lang),function(sortedObject){sortedObject.id===USA?usaRecord=sortedObject:sortedObject.id===CANADA?canadaRecord=sortedObject:result.push(sortedObject)}),usaRecord&&result.unshift(usaRecord),canadaRecord&&result.unshift(canadaRecord),result}return function(options){var deferred=$q.defer(),versionsUrl=RELATIVE_FOLDER_DATA+"versions.json",envUrl=RELATIVE_FOLDER_DATA+"env.json",roaUrl=RELATIVE_FOLDER_DATA+"roa.json",countryUrl=RELATIVE_FOLDER_DATA+"countries.json",nanoUrl=RELATIVE_FOLDER_DATA+"nanomaterials.json",unitsUrl=RELATIVE_FOLDER_DATA+"units.json",presentationUnitsUrl=RELATIVE_FOLDER_DATA+"presentationUnits.json",measureUnitsUrl=RELATIVE_FOLDER_DATA+"measureUnits.json",dosageFormUrl=RELATIVE_FOLDER_DATA+"dosageForm.json",activeUrl=RELATIVE_FOLDER_DATA+"activeIngred.json",speciesUrl=RELATIVE_FOLDER_DATA+"species.json",subtypesUrl=RELATIVE_FOLDER_DATA+"subTypes.json",resultTranslateList={};return $http.get(versionsUrl).then(function(response){DossierLists.setVer(response.data)}),$http.get(envUrl).then(function(response){DossierLists.setEnv(response.data)}),$http.get(unitsUrl).then(function(response){var newList=_createNewSortedArrayWithOther(response.data,DossierLists.getUnitsPrefix(),options.key);DossierLists.createUnitsList(newList)}),$http.get(presentationUnitsUrl).then(function(response){var newList=_createNewSortedArrayWithOther(response.data,DossierLists.getUnitsPrefix(),options.key);DossierLists.createUnitsPresentationList(newList)}),$http.get(measureUnitsUrl).then(function(response){var newList=_createNewSortedArrayWithOther(response.data,DossierLists.getUnitsPrefix(),options.key);DossierLists.createUnitsMeasureList(newList)}),$http.get(countryUrl).then(function(response){var newList=_createSortedArrayNAFirst(response.data,options.key),translateList=_createTranslateList(newList,options.key);getCountryAndProvinces.createCountryList(newList),angular.extend(resultTranslateList,translateList)}),$http.get(nanoUrl).then(function(response){var newList=_createNewSortedArrayWithOther(response.data,DossierLists.getNanoPrefix(),options.key),translateList=_createTranslateList(newList,options.key);DossierLists.createNanomaterialList(newList),angular.extend(resultTranslateList,translateList)}),$http.get(dosageFormUrl).then(function(response){var newList=_createNewSortedArrayWithOther(response.data,DossierLists.getDosageFormPrefix(),options.key),translateList=_createTranslateList(newList,options.key);DossierLists.createDosageFormList(newList),angular.extend(resultTranslateList,translateList);var newList2=_createNewSortedArrayWithOther(response.data,"",options.key),translateList2=_createTranslateList(newList2,options.key);angular.extend(resultTranslateList,translateList2)}),$http.get(activeUrl).then(function(response){DossierLists.setActiveList(response.data)}),$http.get(speciesUrl).then(function(response){DossierLists.setSpeciesList(response.data)}),$http.get(subtypesUrl).then(function(response){DossierLists.setSubTypesList(response.data)}),$http.get(roaUrl).then(function(response){var newList=_createNewSortedArrayWithOther(response.data,DossierLists.getRoaPrefix(),options.key),translateList=_createTranslateList(newList,options.key);DossierLists.createRoaList(newList),angular.extend(resultTranslateList,translateList)})["catch"](function(error){console.warn("An error occurred with Dossier List Load: "+error),deferred.reject(resultTranslateList)})["finally"](function(){deferred.resolve(resultTranslateList)}),deferred.promise}}])}(),function(){"use strict";angular.module("dossierDataLists",[])}(),function(){"use strict";function getService(){function _getVerString(){return vm.ver?vm.ver:"@@verValue"}function _setVerString(value){vm.ver=value.ver}function _getEnvString(){return vm.env?vm.env:{ver:{CO:{major:"4",minor:"2",patch:"0"},RT:{major:"4",minor:"2",patch:"0"},PI:{major:"4",minor:"2",patch:"0"},WET:{major:"v4",minor:"0",patch:"41"}}}}function _setEnvString(value){vm.env=value.env}function _setActiveArray(data){vm.activeList=data}function _setSpeciesArray(data){vm.speciesList=data}function _setSubTypesArray(data){vm.subTypesList=data}function _getActiveArray(){return vm.activeList}function _getSpeciesArray(){return vm.speciesList}function _getSubTypesArray(){return vm.subTypesList}function getDoseOtherValue(){return OTHER}function getYesValue(){return YES}function getUnknownValue(){return"UNLKNOWN"}function getOtherValue(){return getDoseOtherValue()}function _createNanoArray(translateJson){vm.nanoList=translateJson}function _createDosageFormArray(translateJson){vm.dosageFormList=translateJson}function _createUnitsPresentationArray(translateJson){vm.unitsPresentationList=translateJson}function _createUnitsMeasureArray(translateJson){vm.unitsMeasureList=translateJson}function _createRoaArray(translateJson){vm.roaList=translateJson}function _createUnitsArray(translateJson){vm.unitsList=translateJson}function _getUnitsArray(){return vm.unitsList}function _getRoaListPrefix(){return"ROA_"}function _getDosagePrefix(){return"DOSFORM_"}function _getUnitsPrefix(){return"UNITS_"}function _getNanoPrefix(){return"NANOMAT_"}function _getDrugUseArray(){var dul=_getCTADrugUseArray();return dul.concat(_getVetDrugUseArray())}function _getVetDrugUseArray(){return[{id:"VET",en:"Veterinary",fr:"Vétérinaire"}]}function _getCTADrugUseArray(){return[{id:"HUMAN",en:"Human",fr:"Humain"},{id:"RADIO",en:"Radiopharmaceutical",fr:"Radiopharmaceutique"},{id:"DISINFECT",en:"Disinfectant",fr:"Désinfectant"},{id:"DM",en:"Drug and Medical Device",fr:"Drogue et instrument médicale"}]}function _getDisinfectantTypeArray(){return[{id:"HOSPITAL",en:"Hospital",fr:"Hôpital"},{id:"FP",en:"Food Processing",fr:"Préparation des aliments"},{id:"MI",en:"Medical Instruments",fr:"Instruments médicaux"},{id:"DOMESTIC",en:"Domestic",fr:"Domestique"},{id:"BARN",en:"Barn",fr:"Grange"},{id:"II",en:"Institutional/Industrial",fr:"institutionnel ou industriel"}]}function _getIngRoleArray(){return[{id:"MED",en:"Medicinal Ingredient",fr:"Ingrédient médicinal actif"},{id:"NONMED",en:"Non-medicinal Ingredient",fr:"Ingrédient non-médicinal actif"}]}function _getPerArray(){return[{id:"UP",en:"Unit of Presentation",fr:"Unité de présentation"},{id:"UM",en:"Unit of Measure",fr:"Unité de mesure"}]}function _getStrengthArray(){return[{id:"EQ",en:"Equals",fr:"Egale"},{id:"NGT",en:"Not more than",fr:"Pas plus de"},{id:"NLT",en:"Not less than",fr:"Pas moins de"},{id:"RA",en:"Range",fr:"Gamme"}]}function _getShelfLifeUnitsArray(){return[{id:"YR",en:"Years",fr:"Années"},{id:"MO",en:"Months",fr:"Mois"},{id:"DA",en:"Days",fr:"Jours"},{id:"HR",en:"Hours",fr:"Heures"},{id:"MI",en:"Minutes",fr:"Minutes"}]}function _getDosageFormsArray(){return vm.dosageFormList}function _getUnitsPresentationArray(){return vm.unitsPresentationList}function _getUnitsMeasureArray(){return vm.unitsMeasureList}function getNanoMaterialArray(){return vm.nanoList}function getRoaArray(){return vm.roaList}function yesNoArray(){return["Y","N"]}function yesNoUnknownArray(){return["Y","N","UNKNOWN"]}function calAsBaseYesNoArray(){return["CAB_YES1","CAB_YES2","CAB_NO","CAB_NO2","CAB_NO3"]}function animalSourcesArray(){return["NONHUMANPRIMATE_TYPE","AQUATIC_TYPE","AVIAN_TYPE","BOVINE_TYPE","CANINE_TYPE","CAPRINE_TYPE","CERVIDAE_TYPE","EQUINE_TYPE","FELINE_TYPE","OVINE_TYPE","PORCINE_TYPE","RODENT_TYPE","OTHERANIMAL_TYPE"]}function tissuesSystemArray(){return[_getDigestiveSystemValue(),_getNervousSystemValue(),_getReproductiveSystemValue(),_getCardioSystemValue(),_getImmuneSystemValue(),_getSkinSystemValue(),_getMuscleSystemValue(),_getOtherTissuesSystemValue()]}function _getDigestiveSystemValue(){return"DIGESTIVE_SYSTEM"}function _getNervousSystemValue(){return"NERVOUS_SYSTEM"}function _getReproductiveSystemValue(){return"REPRODUCT_SYSTEM"}function _getCardioSystemValue(){return"CARDIO_SYSTEM"}function _getImmuneSystemValue(){return"IMMUNE_SYSTEM"}function _getSkinSystemValue(){return"SKINGLAND_SYSTEM"}function _getMuscleSystemValue(){return"MUSCULO_SYSTEM"}function _getOtherTissuesSystemValue(){return"OTHERTISSUE_SYSTEM"}function nervousSystemArray(){return["BRAIN","BRAINSTEM","CEREBELLUM","CEROFLUID","DORSALROOT","DURAMATER","HYPOTHALAMUS","RETINA","SPINALCORD","TRIGEMINAL","NERVOUS_OTHER"]}function digestiveSystemArray(){return["APPENDIX","BILE","DISTALILEUM","LARGEINTEST","SALIVA","SMALLINTESTINE","STOMACH","DIGESTIVE_OTHER"]}function reprodSystemArray(){return["MILK","KIDNEY","COLOSTRUM","MAMMARY","OVARIES","PLACENTA","PLACENTAFLUID","SEMEN","TESTES","URINE","REPROD_OTHER"]}function cardioSystemArray(){return["HEART","LUNG","NASALFLUID","TRACHEA","PLACENTALFLUID","CARDIO_OTHER"]}function immuneSystemArray(){return["LYMPH","SPLEEN","THYMUS","TONSILS","IMMUNE_OTHER"]}function skinSystemArray(){return["ADRENAL","HAIR","LIVER","PANCREAS","PITUARYGLAND","SKINHIDES","THYROID","SKIN_OTHER"]}function muscleSystemArray(){return["ABDOMEN","SKULL","BONES","COLLAGEN","TENDONS","VERTEBRALCOLUMN","MUSCLE_OTHER"]}function otherSystemArray(){return["ADIPOSE","ASCITES","ANTLERV","SERUM","WHOLEBLOOD","PLASMA","EMBRYONICTISS","FETALTISS","BONEMARROW","EYESCORNEA","GALL","FLUIDS_OTHER"]}function _getTissuesFluidsLabels(){return{brain:"BRAIN",brainStem:"BRAINSTEM",cerebellum:"CEREBELLUM",ceroFluid:"CEROFLUID",dorsalRoot:"DORSALROOT",duraMater:"DURAMATER",hypothalmus:"HYPOTHALAMUS",retina:"RETINA",spinalCord:"SPINALCORD",trigeminal:"TRIGEMINAL",appendix:"APPENDIX",bile:"BILE",distalIleum:"DISTALILEUM",largeIntestine:"LARGEINTEST",salivaSalivary:"SALIVA",smallIntestine:"SMALLINTESTINE",stomach:"STOMACH",milkProducts:"MILK",kidney:"KIDNEY",colostrum:"COLOSTRUM",mammaryGlands:"MAMMARY",ovaries:"OVARIES",placenta:"PLACENTA",placentalFluid:"PLACENTAFLUID",semen:"SEMEN",testes:"TESTES",urine:"URINE",heartPericardium:"HEART",lung:"LUNG",nasalFluid:"NASALFLUID",trachea:"TRACHEA",lymphNodes:"LYMPH",spleen:"SPLEEN",thymus:"THYMUS",tonsils:"TONSILS",adrenalGland:"ADRENAL",hairHoovesFeathers:"HAIR",liver:"LIVER",pancreas:"PANCREAS",pituitary:"PITUARYGLAND",skinHides:"SKINHIDES",thyroidParathyroid:"THYROID",abdomen:"ABDOMEN",skull:"SKULL",bones:"BONES",collagen:"COLLAGEN",tendonsLigaments:"TENDONS",vertebralColumn:"VERTEBRALCOLUMN",muscle:"MUSCLE",adipose:"ADIPOSE",ascites:"ASCITES",antlerVelvet:"ANTLERV",serum:"SERUM",wholeBlood:"WHOLEBLOOD",plasma:"PLASMA",embryonicTissue:"EMBRYONICTISS",fetalTissue:"FETALTISS",boneMarrow:"BONEMARROW",eyesCornea:"EYESCORNEA",gallBladder:"GALL"}}var OTHER="OTHER",YES="Y",vm=this;vm.env="",vm.ver=[],vm.roaList=[],vm.nanoList=[],vm.dosageFormList=[],vm.unitsPresentationList=[],vm.unitsMeasureList=[],vm.activeList=[],vm.speciesList=[],vm.subTypesList=[],vm.unitsList=[];var service={getVer:_getVerString,setVer:_setVerString,getEnv:_getEnvString,setEnv:_setEnvString,setActiveList:_setActiveArray,setSpeciesList:_setSpeciesArray,setSubTypesList:_setSubTypesArray,getActiveList:_getActiveArray,getSpeciesList:_getSpeciesArray,getSubTypesList:_getSubTypesArray,createRoaList:_createRoaArray,createUnitsList:_createUnitsArray,createUnitsPresentationList:_createUnitsPresentationArray,createUnitsMeasureList:_createUnitsMeasureArray,createNanomaterialList:_createNanoArray,createDosageFormList:_createDosageFormArray,getDosageFormList:_getDosageFormsArray,getUnitsPresentationList:_getUnitsPresentationArray,getUnitsMeasureList:_getUnitsMeasureArray,getDrugUseList:_getDrugUseArray,getVetDrugUseList:_getVetDrugUseArray,getCTADrugUseList:_getCTADrugUseArray,getDisinfectantTypeList:_getDisinfectantTypeArray,getIngRoleList:_getIngRoleArray,getPerList:_getPerArray,getStrengthList:_getStrengthArray,getUnitsList:_getUnitsArray,getShelfLifeUnitsList:_getShelfLifeUnitsArray,getDosageOther:getDoseOtherValue,getNanoMaterials:getNanoMaterialArray,getRoa:getRoaArray,getOtherValue:getOtherValue,getUnknownValue:getUnknownValue,getYesNoList:yesNoArray,getYesNoUnknownList:yesNoUnknownArray,getCalAsBaseYesNoList:calAsBaseYesNoArray,getAnimalSources:animalSourcesArray,getTissuesSystem:tissuesSystemArray,getNervousSystem:nervousSystemArray,getDigestiveSystem:digestiveSystemArray,getImmuneSystem:immuneSystemArray,getSkinSystem:skinSystemArray,getReprodSystem:reprodSystemArray,getOtherSystem:otherSystemArray,getMuscleSystem:muscleSystemArray,getCardioSystem:cardioSystemArray,getDigestiveSystemValue:_getDigestiveSystemValue,getNervousSystemValue:_getNervousSystemValue,getReproductiveSystemValue:_getReproductiveSystemValue,getCardioSystemValue:_getCardioSystemValue,getImmuneSystemValue:_getImmuneSystemValue,getSkinSystemValue:_getSkinSystemValue,getMuscleSystemValue:_getMuscleSystemValue,getOtherTissuesSystemValue:_getOtherTissuesSystemValue,getYesValue:getYesValue,getTissuesFluidsLabels:_getTissuesFluidsLabels,getRoaPrefix:_getRoaListPrefix,getDosageFormPrefix:_getDosagePrefix,getUnitsPrefix:_getUnitsPrefix,getNanoPrefix:_getNanoPrefix};return service}angular.module("dossierDataLists").factory("DossierLists",getService)}(),function(){"use strict";angular.module("dossierDataLists",[])}(),function(){"use strict";function getService(){function _getVerString(){return vm.ver?vm.ver:"@@verValue"}function _setVerString(value){vm.ver=value.ver}function _getEnvString(){return vm.env?vm.env:{ver:{CO:{major:"4",minor:"2",patch:"0"},RT:{major:"4",minor:"2",patch:"0"},PI:{major:"4",minor:"2",patch:"0"},WET:{major:"v4",minor:"0",patch:"41"}}}}function _setEnvString(value){vm.env=value.env}function _setActiveArray(data){vm.activeList=data}function _setSpeciesArray(data){vm.speciesList=data}function _setSubTypesArray(data){vm.subTypesList=data}function _getActiveArray(){return vm.activeList}function _getSpeciesArray(){return vm.speciesList}function _getSubTypesArray(){return vm.subTypesList}function getDoseOtherValue(){return OTHER}function getYesValue(){return YES}function getUnknownValue(){return"UNLKNOWN"}function getOtherValue(){return getDoseOtherValue()}function _createNanoArray(translateJson){vm.nanoList=translateJson}function _createDosageFormArray(translateJson){vm.dosageFormList=translateJson}function _createUnitsPresentationArray(translateJson){vm.unitsPresentationList=translateJson}function _createUnitsMeasureArray(translateJson){vm.unitsMeasureList=translateJson}function _createRoaArray(translateJson){vm.roaList=translateJson}function _createUnitsArray(translateJson){vm.unitsList=translateJson}function _getUnitsArray(){return vm.unitsList}function _getRoaListPrefix(){return"ROA_"}function _getDosagePrefix(){return"DOSFORM_"}function _getUnitsPrefix(){return"UNITS_"}function _getNanoPrefix(){return"NANOMAT_"}function _getDrugUseArray(){var dul=_getCTADrugUseArray();return dul.concat(_getVetDrugUseArray())}function _getVetDrugUseArray(){return[{id:"VET",en:"Veterinary",fr:"Vétérinaire"}]}function _getCTADrugUseArray(){return[{id:"HUMAN",en:"Human",fr:"Humain"},{id:"RADIO",en:"Radiopharmaceutical",fr:"Radiopharmaceutique"},{id:"DISINFECT",en:"Disinfectant",fr:"Désinfectant"},{id:"DM",en:"Drug and Medical Device",fr:"Drogue et instrument médicale"}]}function _getDisinfectantTypeArray(){return[{id:"HOSPITAL",en:"Hospital",fr:"Hôpital"},{id:"FP",en:"Food Processing",fr:"Préparation des aliments"},{id:"MI",en:"Medical Instruments",fr:"Instruments médicaux"},{id:"DOMESTIC",en:"Domestic",fr:"Domestique"},{id:"BARN",en:"Barn",fr:"Grange"},{id:"II",en:"Institutional/Industrial",fr:"institutionnel ou industriel"}]}function _getIngRoleArray(){return[{id:"MED",en:"Medicinal Ingredient",fr:"Ingrédient médicinal actif"},{id:"NONMED",en:"Non-medicinal Ingredient",fr:"Ingrédient non-médicinal actif"}]}function _getPerArray(){return[{id:"UP",en:"Unit of Presentation",fr:"Unité de présentation"},{id:"UM",en:"Unit of Measure",fr:"Unité de mesure"}]}function _getStrengthArray(){return[{id:"EQ",en:"Equals",fr:"Egale"},{id:"NGT",en:"Not more than",fr:"Pas plus de"},{id:"NLT",en:"Not less than",fr:"Pas moins de"},{id:"RA",en:"Range",fr:"Gamme"}]}function _getShelfLifeUnitsArray(){return[{id:"YR",en:"Years",fr:"Années"},{id:"MO",en:"Months",fr:"Mois"},{id:"DA",en:"Days",fr:"Jours"},{id:"HR",en:"Hours",fr:"Heures"},{id:"MI",en:"Minutes",fr:"Minutes"}]}function _getDosageFormsArray(){return vm.dosageFormList}function _getUnitsPresentationArray(){return vm.unitsPresentationList}function _getUnitsMeasureArray(){return vm.unitsMeasureList}function getNanoMaterialArray(){return vm.nanoList}function getRoaArray(){return vm.roaList}function yesNoArray(){return["Y","N"]}function yesNoUnknownArray(){return["Y","N","UNKNOWN"]}function calAsBaseYesNoArray(){return["CAB_YES1","CAB_YES2","CAB_NO","CAB_NO2","CAB_NO3"]}function animalSourcesArray(){return["NONHUMANPRIMATE_TYPE","AQUATIC_TYPE","AVIAN_TYPE","BOVINE_TYPE","CANINE_TYPE","CAPRINE_TYPE","CERVIDAE_TYPE","EQUINE_TYPE","FELINE_TYPE","OVINE_TYPE","PORCINE_TYPE","RODENT_TYPE","OTHERANIMAL_TYPE"]}function tissuesSystemArray(){return[_getDigestiveSystemValue(),_getNervousSystemValue(),_getReproductiveSystemValue(),_getCardioSystemValue(),_getImmuneSystemValue(),_getSkinSystemValue(),_getMuscleSystemValue(),_getOtherTissuesSystemValue()]}function _getDigestiveSystemValue(){return"DIGESTIVE_SYSTEM"}function _getNervousSystemValue(){return"NERVOUS_SYSTEM"}function _getReproductiveSystemValue(){return"REPRODUCT_SYSTEM"}function _getCardioSystemValue(){return"CARDIO_SYSTEM"}function _getImmuneSystemValue(){return"IMMUNE_SYSTEM"}function _getSkinSystemValue(){return"SKINGLAND_SYSTEM"}function _getMuscleSystemValue(){return"MUSCULO_SYSTEM"}function _getOtherTissuesSystemValue(){return"OTHERTISSUE_SYSTEM"}function nervousSystemArray(){return["BRAIN","BRAINSTEM","CEREBELLUM","CEROFLUID","DORSALROOT","DURAMATER","HYPOTHALAMUS","RETINA","SPINALCORD","TRIGEMINAL","NERVOUS_OTHER"]}function digestiveSystemArray(){return["APPENDIX","BILE","DISTALILEUM","LARGEINTEST","SALIVA","SMALLINTESTINE","STOMACH","DIGESTIVE_OTHER"]}function reprodSystemArray(){return["MILK","KIDNEY","COLOSTRUM","MAMMARY","OVARIES","PLACENTA","PLACENTAFLUID","SEMEN","TESTES","URINE","REPROD_OTHER"]}function cardioSystemArray(){return["HEART","LUNG","NASALFLUID","TRACHEA","PLACENTALFLUID","CARDIO_OTHER"]}function immuneSystemArray(){return["LYMPH","SPLEEN","THYMUS","TONSILS","IMMUNE_OTHER"]}function skinSystemArray(){return["ADRENAL","HAIR","LIVER","PANCREAS","PITUARYGLAND","SKINHIDES","THYROID","SKIN_OTHER"]}function muscleSystemArray(){return["ABDOMEN","SKULL","BONES","COLLAGEN","TENDONS","VERTEBRALCOLUMN","MUSCLE_OTHER"]}function otherSystemArray(){return["ADIPOSE","ASCITES","ANTLERV","SERUM","WHOLEBLOOD","PLASMA","EMBRYONICTISS","FETALTISS","BONEMARROW","EYESCORNEA","GALL","FLUIDS_OTHER"]}function _getTissuesFluidsLabels(){return{brain:"BRAIN",brainStem:"BRAINSTEM",cerebellum:"CEREBELLUM",ceroFluid:"CEROFLUID",dorsalRoot:"DORSALROOT",duraMater:"DURAMATER",hypothalmus:"HYPOTHALAMUS",retina:"RETINA",spinalCord:"SPINALCORD",trigeminal:"TRIGEMINAL",appendix:"APPENDIX",bile:"BILE",distalIleum:"DISTALILEUM",largeIntestine:"LARGEINTEST",salivaSalivary:"SALIVA",smallIntestine:"SMALLINTESTINE",stomach:"STOMACH",milkProducts:"MILK",kidney:"KIDNEY",colostrum:"COLOSTRUM",mammaryGlands:"MAMMARY",ovaries:"OVARIES",placenta:"PLACENTA",placentalFluid:"PLACENTAFLUID",semen:"SEMEN",testes:"TESTES",urine:"URINE",heartPericardium:"HEART",lung:"LUNG",nasalFluid:"NASALFLUID",trachea:"TRACHEA",lymphNodes:"LYMPH",spleen:"SPLEEN",thymus:"THYMUS",tonsils:"TONSILS",adrenalGland:"ADRENAL",hairHoovesFeathers:"HAIR",liver:"LIVER",pancreas:"PANCREAS",pituitary:"PITUARYGLAND",skinHides:"SKINHIDES",thyroidParathyroid:"THYROID",abdomen:"ABDOMEN",skull:"SKULL",bones:"BONES",collagen:"COLLAGEN",tendonsLigaments:"TENDONS",vertebralColumn:"VERTEBRALCOLUMN",muscle:"MUSCLE",adipose:"ADIPOSE",ascites:"ASCITES",antlerVelvet:"ANTLERV",serum:"SERUM",wholeBlood:"WHOLEBLOOD",plasma:"PLASMA",embryonicTissue:"EMBRYONICTISS",fetalTissue:"FETALTISS",boneMarrow:"BONEMARROW",eyesCornea:"EYESCORNEA",gallBladder:"GALL"}}var OTHER="OTHER",YES="Y",vm=this;vm.env="",vm.ver=[],vm.roaList=[],vm.nanoList=[],vm.dosageFormList=[],vm.unitsPresentationList=[],vm.unitsMeasureList=[],vm.activeList=[],vm.speciesList=[],vm.subTypesList=[],vm.unitsList=[];var service={getVer:_getVerString,setVer:_setVerString,getEnv:_getEnvString,setEnv:_setEnvString,setActiveList:_setActiveArray,setSpeciesList:_setSpeciesArray,setSubTypesList:_setSubTypesArray,getActiveList:_getActiveArray,getSpeciesList:_getSpeciesArray,getSubTypesList:_getSubTypesArray,createRoaList:_createRoaArray,createUnitsList:_createUnitsArray,createUnitsPresentationList:_createUnitsPresentationArray,createUnitsMeasureList:_createUnitsMeasureArray,createNanomaterialList:_createNanoArray,createDosageFormList:_createDosageFormArray,getDosageFormList:_getDosageFormsArray,getUnitsPresentationList:_getUnitsPresentationArray,getUnitsMeasureList:_getUnitsMeasureArray,getDrugUseList:_getDrugUseArray,getVetDrugUseList:_getVetDrugUseArray,getCTADrugUseList:_getCTADrugUseArray,getDisinfectantTypeList:_getDisinfectantTypeArray,getIngRoleList:_getIngRoleArray,getPerList:_getPerArray,getStrengthList:_getStrengthArray,getUnitsList:_getUnitsArray,getShelfLifeUnitsList:_getShelfLifeUnitsArray,getDosageOther:getDoseOtherValue,getNanoMaterials:getNanoMaterialArray,getRoa:getRoaArray,getOtherValue:getOtherValue,getUnknownValue:getUnknownValue,getYesNoList:yesNoArray,getYesNoUnknownList:yesNoUnknownArray,getCalAsBaseYesNoList:calAsBaseYesNoArray,getAnimalSources:animalSourcesArray,getTissuesSystem:tissuesSystemArray,getNervousSystem:nervousSystemArray,getDigestiveSystem:digestiveSystemArray,getImmuneSystem:immuneSystemArray,getSkinSystem:skinSystemArray,getReprodSystem:reprodSystemArray,getOtherSystem:otherSystemArray,getMuscleSystem:muscleSystemArray,getCardioSystem:cardioSystemArray,getDigestiveSystemValue:_getDigestiveSystemValue,getNervousSystemValue:_getNervousSystemValue,getReproductiveSystemValue:_getReproductiveSystemValue,getCardioSystemValue:_getCardioSystemValue,getImmuneSystemValue:_getImmuneSystemValue,getSkinSystemValue:_getSkinSystemValue,getMuscleSystemValue:_getMuscleSystemValue,getOtherTissuesSystemValue:_getOtherTissuesSystemValue,getYesValue:getYesValue,getTissuesFluidsLabels:_getTissuesFluidsLabels,getRoaPrefix:_getRoaListPrefix,getDosageFormPrefix:_getDosagePrefix,getUnitsPrefix:_getUnitsPrefix,getNanoPrefix:_getNanoPrefix};return service}angular.module("dossierDataLists").factory("DossierLists",getService)}(),function(){"use strict";angular.module("productInfoHelpText",["services","filterLists"])}(),function(){"use strict";function ProductInfoHelpTextCtrl($translate,$scope){var vm=this;vm.lang=$translate.proposedLanguage()||$translate.use(),vm.$onInit=function(){}}angular.module("productInfoHelpText").component("cmpProductInfoHelpText",{templateUrl:"app/scripts/components/productInfoHelpText/tpl-product-info-help-text_20210704_1517.html",
controller:ProductInfoHelpTextCtrl,controllerAs:"helpCtrl",bindings:{htIndxList:"<",isForProd:"<"}}),ProductInfoHelpTextCtrl.$inject=["$translate","$scope"]}(),function(){"use strict";angular.module("alertModule",[])}(),function(){"use strict";function alertController(){var vm=this;vm.alertVisible=!1,vm.closeMsgAlias="CLOSE_ALERT",vm.anchor=null,vm.$onInit=function(){vm.alertVisible=!1},vm.$onChanges=function(changes){changes.msg&&(vm.closeMsgAlias=changes.msg.currentValue),changes.uiState&&(vm.alertVisible=changes.uiState.currentValue),changes.myAnchor&&(vm.anchor=changes.myAnchor.currentValue)},vm.open=function(){vm.updateState()},vm.close=function(){vm.updateState(),vm.anchor&&document.getElementById(vm.anchor).focus()},vm.isAlertVisible=function(){return vm.alertVisible}}angular.module("alertModule").component("cmpAlert",{templateUrl:"app/scripts/components/alertComponent/tpl-alert_20210704_1517.html",transclude:!0,bindings:{uiState:"<",msg:"@",myAnchor:"<",updateState:"&",type:"@"},controller:alertController,controllerAs:"alertCtrl"}),alertController.$inject=[]}(),function(){"use strict";angular.module("errorSummaryModule",["focus-if"])}(),function(){"use strict";function errorSummaryController($scope,$location,$anchorScroll){function _isErrorSummaryVisible(){return vm.isVisible&&vm.errorArray&&vm.errorArray.length>0}function _hideRequiredRecordErrors(errors){var keys=Object.keys(errors);if(keys instanceof Array||(keys=[keys]),keys.indexOf("ingRecCtrl.activeIngForm")>-1)for(var i=0;i<keys.length;i++)if(keys[i].indexOf("no_active")>-1){delete errors[keys[i]];break}if(keys.indexOf("ctrCtrl.containerTypeForm")>-1)for(var i=0;i<keys.length;i++)if(keys[i].indexOf("no_container")>-1){delete errors[keys[i]];break}}function _getErr(errorObj,resultsList,parent){for(var keys=Object.keys(errorObj),i=0;i<keys.length;i++){var record=errorObj[keys[i]];record instanceof Array||(record=[record]);for(var j=0;j<record.length;j++){var numIndex=record[j].$name.lastIndexOf("_"),transcludeName="";if(numIndex>0&&(transcludeName=record[j].$name.substring(0,numIndex)),record[j].$invalid===!0&&record[j].$name.indexOf(".")>0)if(vm.exclusions&&vm.exclusions.hasOwnProperty(record[j].$name)){var tabIndex=vm.exclusions[record[j].$name].indexOf("tab_"),tabId=-1;tabIndex>-1&&(tabId=vm.exclusions[record[j].$name].substr(tabIndex+4),tabId=parseInt(tabId)),angular.merge(resultsList,_createSummaryRecord(record[j].$name,keys[i],parent,tabId))}else _getErr(record[j].$error,resultsList,record[j].$name);else if(vm.transcludeNames.hasOwnProperty(transcludeName)){var exIndex=record[j].$name.indexOf(transcludeName),expandIndex=record[j].$name.substring(exIndex+transcludeName.length+1);angular.merge(resultsList,_createExpanderRecord(record[j].$name,transcludeName,keys[i],parent,expandIndex))}else if(record[j].$invalid===!0&&!resultsList.hasOwnProperty(record[j].$name)){var result=_processRecord(record[j].$name,keys[i],parent);"SAVELIFEREC"===result[record[j].$name].translateKey&&(result[record[j].$name].type=""),angular.merge(resultsList,result)}}}}function _scrubFieldName(rawName){var separator="_",index=rawName.lastIndexOf(separator),cleanedName="";return cleanedName=index>-1?rawName.substring(0,index):rawName}function _getElementScope(rawName){var separator="_",nameSplit=rawName.split(separator),scopeId=parseInt(nameSplit[nameSplit.length-1]);return angular.isNumber(scopeId)||(scopeId=""),scopeId}function _processRecord(error_Name,errorType,parent){var result={},scrubName=_scrubFieldName(error_Name),scopeId=_getElementScope(error_Name),errorKey="TYPE_"+errorType.toUpperCase(),destId=error_Name;if(vm.alias&&vm.alias.hasOwnProperty(scrubName)){var aliasRec=vm.alias[scrubName];switch(aliasRec.type.toLowerCase()){case"fieldset":var searchId=aliasRec.parent+"_"+scopeId,destObj=$("#"+searchId).find("input:visible:first");destObj.length>0&&(destId=destObj[0].id);break;case"element":destId=aliasRec.target+"_"+scopeId;break;case"elementnoid":destId=aliasRec.target;break;case"pattern":"pattern"===errorType&&(errorKey=aliasRec.errorType);break;case"select2":var searchId=aliasRec.name+"_match"+scopeId,destObj=$("#"+searchId);destObj.length>0&&(destId=searchId);break;case"min":"min"===errorType&&(errorKey=aliasRec.errorType);break;case"max":"max"===errorType&&(errorKey=aliasRec.errorType);break;case"minlength":"minlength"===errorType&&(errorKey=aliasRec.errorType);break;case"maxlength":"maxlength"===errorType&&(errorKey=aliasRec.errorType);break;case"buttonsearch":errorKey="TYPE_REQUIRED",$.each($("button","#"+vm.startFormId),function(k){var temp_attr=$(this).attr("id");temp_attr&&temp_attr.indexOf(aliasRec.buttonName)>-1&&(destId=temp_attr)});break;default:console.warn("No type found "+aliasRec.type)}}return result[error_Name]||(result[error_Name]={name:destId,errorName:error_Name,translateKey:scrubName.toUpperCase(),type:errorKey,parent:parent,concat:parent+"."+error_Name,isSummary:!1}),result}function _sortErrorsByDomOrder(){var domFieldList={};$.each($("input, select, textarea, fieldset"),function(k){var temp_attr=$(this).attr("id");temp_attr&&(domFieldList[temp_attr]=k)});for(var keyList=Object.keys(domFieldList),p=0;p<keyList.length;p++){if(keyList[p].indexOf("focusser-")>-1){var parentName=angular.element(document.querySelector("#"+keyList[p])).parent().attr("name");parentName&&(keyList[p]=parentName)}vm.uniqueErrorList[keyList[p]]||(keyList.splice(p,1),p--)}for(var sortedDomJsonList={},v=0;v<keyList.length;v++)0==keyList[v].indexOf("no_")&&(keyList[v]=keyList[v].replace("no_","list_")),sortedDomJsonList[keyList[v]]=v;var newErrors=Object.keys(vm.uniqueErrorList).map(function(k){return vm.uniqueErrorList[k]}),notDefined={};if(newErrors.length>0)for(var i=0;i<newErrors.length;){var currRec=newErrors[i],targetName=currRec.errorName,destIndex=sortedDomJsonList[targetName];if(angular.isDefined(destIndex)&&destIndex!==i){var tempRec=angular.copy(newErrors[destIndex]);newErrors[destIndex]=angular.copy(currRec),newErrors[i]=angular.copy(tempRec)}else angular.isDefined(destIndex)||(notDefined[currRec.name]={rec:currRec,pos:i}),i++}return _sortUnknowns(notDefined,newErrors),newErrors}function _sortUnknowns(unknownJson,sortList){for(var unknownArray=Object.keys(unknownJson).map(function(k){return unknownJson[k]}),i=0;i<unknownArray.length;i++){var unknownRec=unknownArray[i],unknownName=unknownRec.rec.name,scopeIndex=_getElementScope(unknownName);if(angular.isNumber(scopeIndex))for(var g=sortList.length-1;g>=0;g--){var sortRec=sortList[g],sortScope=_getElementScope(sortRec.name);if(angular.isNumber(sortScope)&&sortScope===scopeIndex&&unknownName!==sortRec.name){sortList.move(unknownRec.pos,g+1);break}}}}function _createSummaryRecord(name,type,parent,tabId){var result={};return angular.isDefined(tabId)||(tabId=-1),result[name]={name:name,type:type,translateKey:name.toUpperCase(),parent:parent,concat:parent+"."+name,tabId:tabId,isSummary:!0},result}function _createExpanderRecord(name,transcludeName,type,parent,expanderIndex){var result={};return result[name]={name:name,type:type,translateKey:transcludeName.toUpperCase(),parent:parent,concat:parent+"."+name,isSummary:!0,toExpand:!0,exIndex:parseInt(expanderIndex)},result}var vm=this;vm.parentRef=null,vm.errorArray=[],vm.uniqueErrorList={},vm.isVisible=!1,vm.nameAddendum="",vm.rootError="",vm.isFocusInput=0,vm.exclusions={},vm.alias={},vm.transcludeNames={},vm.headingPreamble="",vm.headerLevel="",vm.startFormId="",vm.$onInit=function(){},vm.$onChanges=function(changes){changes.setHeadingLevel&&angular.isDefined(changes.setHeadingLevel.currentValue)&&(vm.headerLevel=changes.setHeadingLevel.currentValue.toLowerCase()),changes.nameSuffix&&(vm.nameAddendum="-"+changes.nameSuffix.currentValue),changes.formPreamble&&(vm.headingPreamble=changes.formPreamble.currentValue),changes.exclusionList&&(vm.exclusions=changes.exclusionList.currentValue),changes.aliasList&&(vm.alias=changes.aliasList.currentValue),changes.formRef&&vm.getErrorsSumm(changes.formRef.currentValue.$error,changes.formRef.currentValue.$name),changes.showErrors&&(vm.isVisible=changes.showErrors.currentValue),changes.updateErrors&&vm.formRef&&vm.isVisible&&vm.getErrorsSumm(vm.formRef.$error,vm.formRef.$name),changes.makeFocused&&changes.makeFocused.currentValue&&(vm.isFocusInput=vm.isFocusInput+1),changes.formId&&(vm.startFormId=changes.formId.currentValue),changes.transcludeList&&changes.transcludeList.currentValue&&(vm.transcludeNames=changes.transcludeList.currentValue)},vm.calcIsVisible=function(){var summaryIsVisible=_isErrorSummaryVisible();return summaryIsVisible||$scope.$emit("childErrorSummaryHide",+vm.nameAddendum),summaryIsVisible},vm.scrollTo=function(errorRecord){var hashId="";errorRecord&&(hashId=errorRecord.isSummary?"errors-summary-"+errorRecord.name:errorRecord.name,vm.expandRecord({index:errorRecord.exIndex}),$location.hash(hashId),$anchorScroll())},vm.selectVisibleTab=function(errorRecord){"errors-summary-"+errorRecord.name;vm.selectTab({index:errorRecord.tabId})},vm.isSummaryLink=function(errorRecord){return errorRecord.isSummary&&!angular.isDefined(errorRecord.toExpand)&&angular.isDefined(errorRecord.tabId)&&parseInt(errorRecord.tabId)<0},vm.isList=function(errorRecord){return errorRecord.name.indexOf("list_")>=0},vm.isTabLink=function(errorRecord){return errorRecord.isSummary&&angular.isDefined(errorRecord.tabId)&&parseInt(errorRecord.tabId)>-1},vm.isExpanderLink=function(errorRecord){return angular.isDefined(errorRecord.toExpand)},$scope.$on("childErrorSummaryHide",function(event,data){if(_isErrorSummaryVisible())for(var errorSummaryBroadcastName=data.message,i=0;i<vm.errorArray.length;i++){var errorRecord=errorArray[i];errorRecord.isSummary&&errorRecord.name===errorSummaryBroadcastName&&vm.errorArray.splice(i,1)}}),vm.getErrorsSumm=function(myformErrors,name){if(vm.errorArray=[],vm.uniqueErrorList={},_getErr(myformErrors,vm.uniqueErrorList,name),_hideRequiredRecordErrors(vm.uniqueErrorList),"COMPANY_FORM"==vm.formPreamble){vm.errorArray=Object.keys(vm.uniqueErrorList).map(function(k){return vm.uniqueErrorList[k]});for(var temp=vm.errorArray[0],i=0;i<vm.errorArray.length-1;i++)vm.errorArray[i]=vm.errorArray[i+1],"required"==vm.errorArray[i].type&&(vm.errorArray[i].type="TYPE_REQUIRED");vm.errorArray[vm.errorArray.length-1]=temp}else{var newErrors=_sortErrorsByDomOrder();angular.equals(vm.errorArray,newErrors)||(vm.errorArray=newErrors)}},Array.prototype.move=function(from,to){to<0&&(to=0),to>=this.length&&(to=this.length-1),this.splice(to,0,this.splice(from,1)[0])}}angular.module("errorSummaryModule").component("cmpErrorSummary",{templateUrl:"app/scripts/components/error-summary/tpl-error-summary_20210704_1517.html",controller:errorSummaryController,controllerAs:"errSummaryCtrl",bindings:{formRef:"<",showErrors:"<",updateErrors:"<",nameSuffix:"@",formPreamble:"@",makeFocused:"<",setHeadingLevel:"@",exclusionList:"<",transcludeList:"<",formId:"<",aliasList:"<",expandRecord:"&",selectTab:"&"}}),errorSummaryController.$inject=["$scope","$location","$anchorScroll"]}(),function(){"use strict";angular.module("errorMessageModule",[])}(),function(){"use strict";function errorMessageController(){var vm=this;vm.field_name="",vm.form_ref=null,vm.fieldRecords=[],vm.$onChanges=function(changes){changes.fieldName&&(vm.field_name=changes.fieldName.currentValue),changes.formRef&&(vm.form_ref=changes.formRef.currentValue),changes.errorTypes&&(vm.fieldRecords=changes.errorTypes.currentValue)},vm.showErrorMessage=function(){return!!vm.form_ref&&(angular.isUndefined(vm.fieldName)?(console.warn("No field name for: "+vm.form_ref.$name),!1):angular.isUndefined(vm.form_ref[vm.fieldName])?(console.warn("lookup undefined "+vm.form_ref.$name+"."+vm.fieldName),!1):vm.showError()&&vm.form_ref[vm.fieldName].$invalid||vm.form_ref[vm.fieldName].$touched&&vm.form_ref[vm.fieldName].$invalid)}}angular.module("errorMessageModule").component("cmpErrorMessage",{templateUrl:"app/scripts/components/error-message/tpl-error-message_20210704_1517.html",controller:errorMessageController,controllerAs:"errMessageCtrl",bindings:{fieldName:"<",formRef:"<",showError:"&",errorTypes:"<"}})}(),function(){"use strict";angular.module("expandingTable",[])}(),function(){"use strict";function expandingTableCtrl($filter,$scope,$translate){function _setNumberColumns(){vm.disableErrorCol&&(vm.numberCols=vm.numberCols+1)}function _recalculateColumnDefs(colDefs,numCols){var caretWidth=2,errorWidth=5,totalWidth=caretWidth+errorWidth,toSubtract=totalWidth/numCols,result=[];if(vm.disableErrorCol)return colDefs;for(var i=0;i<numCols;i++){var oneDef=angular.copy(colDefs[i]);oneDef.width>toSubtract&&(oneDef.width=oneDef.width-toSubtract),result.push(oneDef)}return result}function updateTableRow(textIndex){var selectIndex=parseInt(textIndex);selectIndex>=0&&vm.selectTableRow(selectIndex)}function _createArray(arraySize,initialVal){for(var anArray=[],i=0;i<arraySize;i++)anArray.push(initialVal);return anArray}var vm=this;vm.focused=!1,vm.columnDefinitions={},vm.disableExpand=!1,vm.tableRowExpanded=!1,vm.tableRowIndexCurrExpanded="",vm.tableRowIndexPrevExpanded="",vm.numberCols=1,vm.disableErrorCol=!1,vm.dayDataCollapse=_createArray(0,!0),vm.formName="expandTblCtrl.transcludeForm",vm.lang=$translate.proposedLanguage()||$translate.use(),vm.$onInit=function(){vm.listItems&&(vm.dayDataCollapse=_createArray(vm.listItems.length,!0))},vm.getExpandedState=function(row){return!(row!==vm.tableRowIndexCurrExpanded&&vm.dayDataCollapse[row]&&(!vm.transcludeForm[row]||vm.transcludeForm[row].$valid))},vm.$onChanges=function(changes){if(changes.listItems&&(vm.listItems?vm.dayDataCollapse=_createArray(vm.listItems.length,!0):vm.dayDataCollapse=_createArray(0,!0),vm.resetTableRow()),changes.tname&&changes.tname.currentValue&&(vm.formName=changes.tname.currentValue),changes.resetToCollapsed&&(vm.resetTableRow(),changes.selectRecord||updateTableRow(vm.selectRecord)),changes.selectRecord){var selectIndex=parseInt(changes.selectRecord.currentValue);selectIndex>=0?vm.selectTableRow(selectIndex):vm.resetTableRow()}changes.disableSelection&&(vm.disableExpand=changes.disableSelection.currentValue),changes.columnDef&&(vm.numberCols=changes.columnDef.currentValue.length,vm.columnDefinitions=_recalculateColumnDefs(changes.columnDef.currentValue,vm.numberCols),_setNumberColumns()),changes.disableErrColumn&&(vm.disableErrorCol=changes.disableErrColumn.currentValue,vm.numberCols=vm.columnDef.length,vm.disableErrorCol=!0,_setNumberColumns())},vm.formInError=function(aForm){return aForm&&aForm.$invalid?"Y":"N"},vm.deletedRow=function(){vm.tableRowExpanded=!1,vm.tableRowIndexCurrExpanded=""},vm.resetTableRow=function(){vm.tableRowIndexPrevExpanded="",vm.tableRowExpanded=!1,vm.tableRowIndexCurrExpanded="",vm.listItems?vm.dayDataCollapse=_createArray(vm.listItems.length,!0):_createArray(0,!0)},vm.dayDataCollapseFn=function(){for(var i=0;vm.listItems.length-1;i+=1)vm.dayDataCollapse.append("true")},vm.selectTableRow=function(index){vm.disableExpand||("undefined"===vm.dayDataCollapse?vm.dayDataCollapse=vm.dayDataCollapseFn():vm.tableRowExpanded===!1&&""===vm.tableRowIndexCurrExpanded?(vm.tableRowIndexPrevExpanded="",vm.tableRowExpanded=!0,vm.tableRowIndexCurrExpanded=index,vm.dayDataCollapse[index]=!1):vm.tableRowExpanded===!0&&(vm.tableRowIndexCurrExpanded===index?(vm.tableRowExpanded=!1,vm.tableRowIndexCurrExpanded="",vm.dayDataCollapse[index]=!0):(vm.tableRowIndexPrevExpanded=vm.tableRowIndexCurrExpanded,vm.tableRowIndexCurrExpanded=index,vm.dayDataCollapse[vm.tableRowIndexPrevExpanded]=!0,vm.dayDataCollapse[vm.tableRowIndexCurrExpanded]=!1)))},vm.isRequiredRecordSet=function(){return!(!vm.isRequiredRecord||vm.isInternal)},vm.isRecordShowsOutside=function(row){return vm.isInternal?!vm.dayDataCollapse[row]:(vm.transcludeForm[row]&&vm.transcludeForm[row].$invalid&&(vm.dayDataCollapse[row]=!1),!(vm.dayDataCollapse[row]&&(!vm.transcludeForm[row]||vm.transcludeForm[row].$valid))||vm.isRequiredRecordSet())},vm.isRecordShowsInside=function(row){return!vm.isInternal||!(vm.dayDataCollapse[row]&&vm.transcludeForm[row].$valid)}}angular.module("expandingTable").component("cmpExpandingTable",{templateUrl:"app/scripts/components/expandingTable/tpl-expanding-table_20210704_1517.html",controller:expandingTableCtrl,controllerAs:"expandTblCtrl",transclude:!0,bindings:{title:"@",preId:"@",listItems:"<",columnDef:"<",disableSelection:"<",isRequiredRecord:"<",isInternal:"<",selectRecord:"<",resetToCollapsed:"<",newRecordShown:"<",disableErrColumn:"@",tname:"@"}}),expandingTableCtrl.$inject=["$filter","$scope","$translate"]}(),function(){"use strict";angular.module("fileIO",[])}(),function(){"use strict";function ngFileSelect(hpfbFileReader){function link(scope,element,attrs){scope.rootTag=attrs.rootTag,element.bind("change",function(e){scope.file=(e.srcElement||e.target).files[0],hpfbFileReader.readAsDataText(scope.file,scope).then(function(result){scope.hpfbFileSelect({fileContent:result})})})}var directive={link:link,restrict:"A",scope:{hpfbFileSelect:"&"}};return directive}angular.module("fileIO").directive("hpfbFileSelect",ngFileSelect),ngFileSelect.$inject=["hpfbFileProcessing"]}(),function(){"use strict";function FileSelectController(hpfbFileProcessing){var vm=this;vm.fileTypes=".xml, .hcsc",vm.modelCallback=function(fileContent){if(vm.status="",fileContent&&fileContent.jsonResult){var versionArray=fileContent.jsonResult[vm.rootElem].software_version.split(".");vm.versionExpected&&vm.versionExpected!==versionArray[0]?(fileContent=null,vm.status="MSG_ERR_FILE_VERSION"):(vm.status=fileContent.messages,vm.updateModelRoot({fileContent:fileContent}))}else vm.status=fileContent.messages,vm.updateModelRoot({fileContent:fileContent});angular.element(fileLoad).trigger("focus")},angular.element(hpfbFileProcessingZone).on("dragover",function(e){e.stopPropagation(),e.preventDefault()}),angular.element(hpfbFileProcessingZone).on("dragenter",function(e){e.stopPropagation(),e.preventDefault(),e.originalEvent.dataTransfer.dropEffect="link"}),angular.element(hpfbFileProcessingZone).on("drop",function(e){e.stopPropagation(),e.preventDefault(),$("document").ready(function(){$("#fileLoad")[0].files=e.originalEvent.dataTransfer.files,$("#fileLoad").trigger("change")})})}angular.module("fileIO").component("hpfbFileSelect",{templateUrl:"app/scripts/components/fileIO/fileSelect_20210704_1517.html",controller:FileSelectController,bindings:{updateModelRoot:"&",rootElem:"@",versionExpected:"@"}}),FileSelectController.$inject=["hpfbFileProcessing"]}(),function(){"use strict";function FileWriteController(hpfbFileProcessing){function _generateFile(){"JSON"===vm.saveType.toUpperCase()?hpfbFileProcessing.writeAsJson(vm.jsonToSave,vm.fileName,vm.rootTag):"XML"===vm.saveType.toUpperCase()&&hpfbFileProcessing.writeAsXml(vm.jsonToSave,vm.fileName,vm.rootTag)}function _init(){vm.buttonDisabled?"true"===vm.buttonDisabled.toLowerCase()?vm.buttonDisabled=!0:"false"===vm.buttonDisabled.toLowerCase()?vm.buttonDisabled=!1:vm.buttonDisabled=!1:vm.buttonDisabled=!1}var vm=this;vm.$onInit=_init,vm.generate=_generateFile}angular.module("fileIO").component("hpfbFileSave",{templateUrl:"app/scripts/components/fileIO/fileSave_20210704_1517.html",controller:FileWriteController,bindings:{jsonToSave:"<",rootTag:"@",saveType:"@",buttonLabel:"@",buttonDisabled:"@"}}),FileWriteController.$inject=["hpfbFileProcessing"]}(),function(){"use strict";function fileReader($q){function onLoad(reader,deferred,scope,file){return function(){scope.$apply(function(){if(file){var splitFile=file.name.split("."),fileType=splitFile[splitFile.length-1];fileType.toLowerCase()==draft_file_type?(convertToJSONObjects(reader,scope),checkRootTagMatch(reader,scope)):"xml"===fileType.toLowerCase()?(convertXMLToJSONObjects(reader,scope),checkRootTagMatch(reader,scope)):(convertResult.parseResult=null,convertResult.messages=msg_err_fileType,reader.parseResult=convertResult)}deferred.resolve(reader.parseResult)})}}function onError(reader,deferred,scope){return function(){scope.$apply(function(){deferred.reject(msg_err_load)})}}function getReader(deferred,scope,file){var reader=new FileReader;return reader.onload=onLoad(reader,deferred,scope,file),reader.onError=onError(reader,deferred,scope),reader.parseResult=null,reader}function readAsDataText(file,scope){var deferred=$q.defer(),reader=getReader(deferred,scope,file);return file?reader.readAsText(file):(reader.parseResult=convertResult,reader.parseResult.messages="",reader.parseResult.jsonResult=null,deferred.resolve(reader.parseResult)),deferred.promise}function convertToJSONObjects(reader,scope){try{convertResult.jsonResult=JSON.parse(reader.result),convertResult.jsonResult[scope.rootTag].importFileType=draft_file_type,convertResult.messages=msg_success,reader.parseResult=convertResult}catch(e){convertResult.jsonResult=null,convertResult.messages=msg_err_jsonparse,reader.parseResult=convertResult}}function convertXMLToJSONObjects(reader,scope){var xmlConfig={escapeMode:!0,emptyNodeForm:"text",useDoubleQuotes:!0},xmlConverter=new X2JS(xmlConfig);convertResult.jsonResult=xmlConverter.xml_str2json(reader.result),convertResult.jsonResult&&convertResult.jsonResult[scope.rootTag]?(convertResult.messages=msg_success,convertResult.jsonResult[scope.rootTag].importFileType="xml"):convertResult.messages=msg_err_xmlparse,reader.parseResult=convertResult}function convertJSONObjectsToXML(jsonObj){var xmlConfig={escapeMode:!0,emptyNodeForm:"text",useDoubleQuotes:!0},jsonConverter=new X2JS(xmlConfig),xmlResult=null;return xmlResult=jsonConverter.json2xml_str(jsonObj)}function checkRootTagMatch(reader,scope){scope.rootTag&&reader.parseResult&&reader.parseResult.jsonResult&&(reader.parseResult.jsonResult[scope.rootTag]||(reader.parseResult.jsonResult=null,reader.parseResult.messages=msg_err_formType))}function jsonToFile(jsonObj,fileName,rootTag){if(jsonObj){var makeStrSave=JSON.stringify(jsonObj),blob=new Blob([makeStrSave],{type:"text/plain;charset=utf-8"});fileName?fileName+="."+draft_file_type:fileName="hpfbDraft."+draft_file_type,saveAs(blob,fileName)}}function xmlToFile(jsonObj,fileName,rootTag,xslName){if(jsonObj){var xmlResult=convertJSONObjectsToXML(jsonObj);xmlResult=xslName?'<?xml version="1.0" encoding="UTF-8"?><?xml-stylesheet  type="text/xsl" href="'+xslName+'"?>'+xmlResult:'<?xml version="1.0" encoding="UTF-8"?><?xml-stylesheet  type="text/xsl" href="REP_Combined.xsl"?>'+xmlResult;var blob=new Blob([xmlResult],{type:"text/plain;charset=utf-8"});fileName?fileName+=".xml":fileName="hpfbXML.xml",saveAs(blob,fileName)}}var msg_success="MSG_SUCCESS_LOAD",msg_err_jsonparse="MSG_ERR_JSONPARSE",msg_err_xmlparse="MSG_ERR_XMLPARSE",msg_err_load="MSG_ERR_FILE_LOAD",msg_err_fileType="MSG_ERR_FILE_TYPE",msg_err_formType="MSG_ERR_FORM_TYPE",draft_file_type="hcsc",convertResult={jsonResult:"",messages:""},service={readAsDataText:readAsDataText,writeAsJson:jsonToFile,writeAsXml:xmlToFile};return service}angular.module("fileIO").factory("hpfbFileProcessing",fileReader),fileReader.$inject=["$q"]}(),function(){"use strict";angular.module("nonMedIngRecordModule",["dossierDataLists","hpfbConstants","ui.select","errorSummaryModule","errorMessageModule"])}(),function(){"use strict";function nonMedIngRecCtrl(DossierLists,$scope,$translate,OTHER,YES){function _setIdNames(){var scopeId="_"+$scope.$id;vm.variantId="variant_name"+scopeId,vm.nmiFormId="nmiRecordForm"+scopeId,vm.ingredName="ing_name"+scopeId,vm.casId="cas"+scopeId,vm.standardId="standard"+scopeId,vm.strengthId="strength"+scopeId,vm.strengthData1Id=scopeId,vm.strengthData2Id="strength_data2"+scopeId,vm.unitsId="units"+scopeId,vm.otherUnitsId="other_units"+scopeId,vm.perMeasureUnitId="unit_measure"+scopeId,vm.perMeasureOtherUnitId="other_unit_measure"+scopeId,vm.perId="per_strength"+scopeId,vm.presentationId="unit_presentation"+scopeId,vm.isNanoMaterialId="is_nano_material"+scopeId,vm.nanoId="nano_material"+scopeId,vm.nanoOtherId="nano_material_other"+scopeId,vm.asBaseId="calculated_as_base"+scopeId,vm.animalHumanSrcId="animal_human_sourced"+scopeId}var vm=this;vm.nanoMaterialList=DossierLists.getNanoMaterials(),vm.yesNoList=DossierLists.getYesNoList(),vm.unitsList=DossierLists.getUnitsList(),vm.strengthList=DossierLists.getStrengthList(),vm.perList=DossierLists.getPerList(),vm.presentationList=DossierLists.getDosageFormList(),vm.lang=$translate.proposedLanguage()||$translate.use(),vm.requiredOnly=[{type:"required",displayAlias:"MSG_ERR_MAND"}],vm.numberMinError=[{type:"required",displayAlias:"MSG_ERR_MAND"},{type:"min",displayAlias:"MSG_ERR_INVALID_NUM_MIN0"},{type:"number",displayAlias:"MSG_ERR_INVALID_NUM"}],vm.numberMinLowerError=[{type:"required",displayAlias:"MSG_ERR_MAND"},{type:"min",displayAlias:"MSG_ERR_INVALID_NUM_MIN_LOWER"},{type:"number",displayAlias:"MSG_ERR_INVALID_NUM"}],vm.ingModel={varId:"",ingName:"",cas:"",standard:"",strength:{operator:"",data1:null,data2:null},units:"",otherUnits:"",per:"",unitsPresentation:"",perMeasureUnits:"",perMeasureOtherUnits:"",calcAsBase:"",isNano:"",nanoMaterial:"",nanoMaterialOther:"",humanAnimalSourced:""},vm.strengthData1Title="",vm.exclusions={},vm.alias={},vm.updateSummary=0,vm.showSummary=!1,vm.$onInit=function(){vm.savePressed=!1,vm.backup=angular.copy(vm.ingModel),_setIdNames(),vm.summaryName="cmp-non-med-ing-record_"+vm.recordIndex},vm.$onChanges=function(changes){changes.record&&changes.record.currentValue&&(vm.ingModel=angular.copy(changes.record.currentValue)),changes.showErrorSummary&&(vm.showSummary=changes.showErrorSummary.currentValue,vm.updateErrorSummaryState()),changes.errorSummaryUpdate&&vm.updateErrorSummaryState(),changes.recordIndex&&(vm.summaryName="cmp-non-med-ing-record_"+vm.recordIndex.currentValue)},vm.saveIng=function(){vm.nonMedIngForm.$valid?(vm.record?vm.onUpdate({ing:vm.ingModel}):vm.onAddIng({ing:vm.ingModel}),vm.nonMedIngForm.$setPristine(),vm.showSummary=!1,vm.updateErrorSummaryState()):(vm.showSummary=!0,vm.makeFocused(),vm.updateErrorSummaryState())},vm.makeFocused=function(){vm.focusSummary=vm.focusSummary+1},vm.discardChanges=function(){vm.ingModel=angular.copy(vm.backup),vm.nonMedIngForm.$setPristine(),vm.updateErrorSummaryState(),vm.onCancel()},vm["delete"]=function(){vm.record&&vm.onDelete()},vm.isAnimalHumanSourced=function(){return!!vm.ingModel&&vm.ingModel.humanAnimalSourced===YES},vm.copy=function(){var ingredientCopy=angular.copy(vm.ingModel);vm.onAddIng({ing:ingredientCopy})},vm.showError=function(ctrl){return!!ctrl&&(ctrl.$invalid&&ctrl.$touched||ctrl.$invalid&&vm.showSummary)},vm.isNanoOther=function(){return vm.ingModel.nanoMaterial.id===DossierLists.getOtherValue()||(vm.ingModel.nanoMaterialOther="",!1)},vm.isUnitsOther=function(){return!(!vm.ingModel||!vm.ingModel.units)&&(vm.ingModel.units.id===OTHER||(vm.ingModel.otherUnits="",!1))},vm.updateErrorSummaryState=function(){vm.updateSummary=vm.updateSummary+1},$scope.$watch("nIngRecCtrl.nonMedIngForm.$dirty",function(){vm.isDetailValid({state:!vm.nonMedIngForm.$dirty})},!0),vm.strengthSelectionUpdated=function(){if(""!==vm.ingModel.strength.operator.id)switch(vm.ingModel.strength.operator.id){case"EQ":vm.strengthData1Title="EQUALS";break;case"NGT":vm.strengthData1Title="NOT_GREAT_THAN";break;case"NLT":vm.strengthData1Title="NOT_LESS_THAN";break;case"RA":vm.strengthData1Title="RANGE_LOWER_LIMIT"}},vm.isPerPresentation=function(){return"UP"===vm.ingModel.per.id},vm.isPerMeasure=function(){return"UM"===vm.ingModel.per.id},vm.isStrengthSet=function(){var isSet=!1;if(void 0!==vm.ingModel.strength.operator.id&&""!==vm.ingModel.strength.operator.id){switch(isSet=!0,vm.ingModel.strength.operator.id){case"EQ":vm.strengthData1Title="EQUALS";break;case"NGT":vm.strengthData1Title="NOT_GREAT_THAN";break;case"NLT":vm.strengthData1Title="NOT_LESS_THAN";break;case"RA":vm.strengthData1Title="RANGE_LOWER_LIMIT"}vm.strengthData1Id="strength_"+vm.strengthData1Title+"_"+$scope.$id}return isSet},vm.isMeasureUnitsOther=function(){return!(!vm.ingModel||!vm.ingModel.perMeasureUnits)&&(vm.ingModel.perMeasureUnits.id===OTHER||(vm.ingModel.perMeasureOtherUnits="",!1))},vm.isRange=function(){return"RA"===vm.ingModel.strength.operator.id},vm.isNanoMaterial=function(){return vm.ingModel.isNano===YES},vm.unitsChange=function(){for(var found=!1,i=0;i<vm.unitsList.length;i++){var option=vm.unitsList[i];if(option[vm.lang]===vm.ingModel.unitsHtml){vm.ingModel.units=option,found=!0;break}}if(!found)for(var i=0;i<vm.unitsList.length;i++){var option=vm.unitList[i];if(option.id===vm.ingModel.units.id){vm.ingModel.unitsHtml=option[vm.lang];break}}},vm.perMeasUnitsChange=function(){for(var found=!1,i=0;i<vm.unitsList.length;i++){var option=vm.unitsList[i];if(option[vm.lang]===vm.ingModel.perMeasUnitsHtml){vm.ingModel.perMeasUnits=option,found=!0;break}}if(!found)for(var i=0;i<vm.unitsList.length;i++){var option=vm.unitsList[i];if(option.id===vm.ingModel.perMeasUnits.id){vm.ingModel.perMeasUnitsHtml=option[vm.lang];break}}}}angular.module("nonMedIngRecordModule").component("cmpNonMedIngRecord",{templateUrl:"app/scripts/components/formulations/tpl-non-med-ing-record_20210704_1517.html",controllerAs:"nIngRecCtrl",controller:nonMedIngRecCtrl,bindings:{deleteBtn:"<",record:"<",showErrors:"&",onAddIng:"&",onUpdate:"&",onDelete:"&",onCancel:"&",isDetailValid:"&",recordIndex:"<",errorSummaryUpdate:"<",showErrorSummary:"<"}}),nonMedIngRecCtrl.$inject=["DossierLists","$scope","$translate","OTHER","YES"]}(),function(){"use strict";angular.module("nonMedIngListModule",["expandingTable","nonMedIngRecordModule"])}(),function(){"use strict";function nonMedIngListCtrl(){function setRecord(value){vm.selectRecord=value}var vm=this;vm.isDetailValid=!0,vm.selectRecord=-1,vm.resetToCollapsed=!1,vm.newIngFormShown=!1,vm.$onInit=function(){vm.newIngFormShown=!1,vm.isDetailValid=!0,vm.selectRecord=-1,vm.colNames=[{label:"VARIANT_NAME",binding:"varId",width:"15"},{label:"NONMEDICINAL_INGREDIENT",binding:"ingName",width:"65"},{label:"CAS_NUM",binding:"cas",width:"15"},{label:"HUMAN_ANIMAL_SOURCE",binding:"humanAnimalSourced",width:"10"}],vm.ingList=[],vm.ingredients&&(vm.ingList=vm.ingredients)},vm.addIng=function(ing){vm.setValid(!0),vm.ingList.push(ing),vm.newIngFormShown=!1,vm.resetToCollapsed=!vm.resetToCollapsed,vm.onUpdate({list:vm.ingList}),setRecord(-1)},vm.updateIng=function(idx,ing){vm.ingList[idx]=angular.copy(ing),vm.onUpdate({list:vm.ingList}),vm.setValid(!0)},vm.deleteIng=function(idx){vm.ingList.splice(idx,1),vm.onUpdate({list:vm.ingList}),vm.setValid(!0),setRecord(-1),vm.resetToCollapsed=!vm.resetToCollapsed},vm.addNewIngredientState=function(){return vm.resetToCollapsed=!vm.resetToCollapsed,vm.newIngFormShown=!0,vm.unitsHtml="",vm.perMeasureUnitsHtml="",vm.setValid(!1),vm.newIngFormShown},vm.addNewDisabled=function(){return vm.newIngFormShown||!vm.isDetailValid},vm.setValid=function(value){vm.isDetailValid=value},vm.onNewCancel=function(){vm.setValid(!0),vm.newIngFormShown=!1}}angular.module("nonMedIngListModule").component("cmpNonMedIngList",{templateUrl:"app/scripts/components/formulations/tpl-non-med-ing-list_20210704_1517.html",controller:nonMedIngListCtrl,controllerAs:"nmilCtrl",bindings:{ingredients:"<",onUpdate:"&",errorSummaryUpdate:"<",showErrorSummary:"<"}})}(),function(){"use strict";angular.module("materialIngRecordModule",["dossierDataLists","hpfbConstants","errorSummaryModule","errorMessageModule"])}(),function(){"use strict";function materialIngRecCtrl(DossierLists,$scope,$translate,FRENCH){function _setIdNames(){var scopeId="_"+$scope.$id;vm.materialFormId="materialRecordForm"+scopeId,vm.nameId="material_name"+scopeId,vm.casId="cas_num"+scopeId,vm.standardId="standard"+scopeId,vm.inFinalId="in_final_container"+scopeId}var vm=this;vm.yesNoList=DossierLists.getYesNoList(),vm.requiredOnly=[{type:"required",displayAlias:"MSG_ERR_MAND"}],vm.updateSummary=0,vm.showSummary=!1,vm.focusSummary=0,vm.lang=$translate.proposedLanguage()||$translate.use(),vm.$onInit=function(){vm.mirModel={},vm.showSummary=!1,vm.summaryName="cmp-material-ing-record_"+vm.recordIndex,
_setIdNames(),vm.record&&(vm.mirModel=vm.record),vm.backup=angular.copy(vm.mirModel)},vm.$onChanges=function(changes){changes.showErrorSummary&&(vm.showSummary=changes.showErrorSummary.currentValue,vm.updateErrorSummaryState()),changes.errorSummaryUpdate&&vm.updateErrorSummaryState()},vm.showError=function(ctrl){return!!ctrl&&(ctrl.$invalid&&ctrl.$touched||vm.showSummary&&ctrl.$invalid)},vm.save=function(){vm.materialIngRecordForm.$valid?(vm.record?(vm.onUpdate({ing:vm.mirModel}),vm.materialIngRecordForm.$setPristine()):vm.onAddNew({ing:vm.mirModel}),vm.materialIngRecordForm.$setPristine(),vm.showSummary=!1):(vm.showSummary=!0,vm.makeFocused(),vm.updateErrorSummaryState())},vm.makeFocused=function(){vm.focusSummary=vm.focusSummary+1},vm.discardChanges=function(){vm.mirModel=angular.copy(vm.backup),vm.materialIngRecordForm.$setPristine(),vm.onCancel()},vm["delete"]=function(){vm.record&&vm.onDelete()},$scope.$watch("mirCtrl.materialIngRecordForm.$dirty",function(){vm.isDetailValid({state:!vm.materialIngRecordForm.$dirty})},!0),vm.updateErrorSummaryState=function(){vm.updateSummary=vm.updateSummary+1},vm.isFocus=!1,vm.isFrench=function(){return vm.lang===FRENCH}}angular.module("materialIngRecordModule").component("cmpMaterialIngRecord",{templateUrl:"app/scripts/components/formulations/tpl-material-ing-record_20210704_1517.html",controllerAs:"mirCtrl",controller:materialIngRecCtrl,bindings:{deleteBtn:"<",record:"<",showErrors:"&",onAddNew:"&",onUpdate:"&",onDelete:"&",onCancel:"&",isDetailValid:"&",recordIndex:"<",errorSummaryUpdate:"<",showErrorSummary:"<",isFocus:"<",cancelFocus:"&"}}),materialIngRecCtrl.$inject=["DossierLists","$scope","$translate","FRENCH"]}(),function(){"use strict";angular.module("materialIngListModule",["expandingTable","materialIngRecordModule"])}(),function(){"use strict";function materialIngListCtrl(){function setRecord(value){vm.selectRecord=value}var vm=this;vm.isDetailValid=!0,vm.selectRecord=-1,vm.resetToCollapsed=!1,vm.newIngFormShown=!1,vm.colNames=[{label:"MATERIAL_NAME",binding:"ingredientName",width:"70",isHtml:"true"},{label:"CAS_NUM",binding:"cas",width:"15",isHtml:"true"},{label:"PRESENT_IN_FINAL",binding:"inFinalContainer",width:"15"}],vm.$onInit=function(){vm.newIngFormShown=!1,vm.isDetailValid=!0,vm.selectRecord=-1,vm.ingList=[],vm.ingredients&&(vm.ingList=vm.ingredients)},vm.$onChanges=function(changes){changes.ingredients&&(vm.ingList=changes.ingredients.currentValue),changes.isFileLoaded&&changes.isFileLoaded.currentValue&&(vm.newIngFormShown=!1)},vm.$postLink=function(){vm.isFileLoaded||vm.addNewIngredientState()},vm.addNew=function(ing){vm.setValid(!0),vm.ingList.push(ing),vm.newIngFormShown=!1,vm.resetToCollapsed=!vm.resetToCollapsed,vm.onUpdate({list:vm.ingList}),setRecord(-1)},vm.updateIng=function(idx,ing){vm.ingList[idx]=angular.copy(ing),vm.onUpdate({list:vm.ingList}),vm.setValid(!0)},vm.deleteIng=function(idx){vm.ingList.splice(idx,1),vm.onUpdate({list:vm.ingList}),vm.setValid(!0),setRecord(-1),vm.resetToCollapsed=!vm.resetToCollapsed},vm.addNewIngredientState=function(){return vm.resetToCollapsed=!vm.resetToCollapsed,vm.newIngFormShown=!0,vm.setValid(!1),vm.newIngFormShown},vm.addNewDisabled=function(){return vm.newIngFormShown||!vm.isDetailValid},vm.setValid=function(value){vm.isDetailValid=value},vm.onNewCancel=function(){vm.setValid(!0),vm.newIngFormShown=!1},vm.setFocus=function(){vm.isFocus=!0},vm.cancelFocus=function(){vm.isFocus=!1}}angular.module("materialIngListModule").component("cmpMaterialIngList",{templateUrl:"app/scripts/components/formulations/tpl-material-ing-list_20210704_1517.html",controller:materialIngListCtrl,controllerAs:"milCtrl",bindings:{ingredients:"<",onUpdate:"&",errorSummaryUpdate:"<",isFileLoaded:"<",showErrorSummary:"<",isFocus:"<"}})}(),function(){"use strict";angular.module("formulationRecordModule",["activeIngListModule","nonMedIngListModule","containerTypeListModule","materialIngListModule","roaListModule","countryListModule","dossierDataLists","hpfbConstants","ui.select","errorSummaryModule","errorMessageModule","alertModule"])}(),function(){"use strict";function formulationRecCtrl(DossierLists,$translate,$scope,FRENCH,OTHER,PROD){function _setIdNames(){var scopeId="_"+$scope.$id;vm.formulationFormRecordId="formulationRecord"+scopeId,vm.formulNameId="formul_name"+scopeId,vm.dosageId="dosage_form"+scopeId,vm.dosageOtherId="dosage_form_other"+scopeId,vm.noActiveId="no_active"+scopeId,vm.noContainerId="no_container"+scopeId,vm.noRoaId="no_roa"+scopeId,vm.noCountryId="no_country"+scopeId,vm.isAnimalHumanMaterialId="is_animal_human_material"+scopeId,vm.dinId="dinId"+scopeId,vm.listDinCtryId="list_din_country"+scopeId,vm.noDinCountryId="no_din_country"+scopeId,vm.drugMarketId="drugMarketId"+scopeId,vm.dr91Ref="dr91_ref"+scopeId,vm.dr9cRef="dr9c_ref"+scopeId,vm.dr9dRef="dr9d_ref"+scopeId,vm.dr9gRef="dr9g_ref"+scopeId}var vm=this;vm.noCountries="",vm.noROAValues="",vm.noActiveValues="",vm.isDosageOther=!1,vm.dosageFormList=DossierLists.getDosageFormList(),vm.otherValue=DossierLists.getDosageOther(),vm.yesNoList=DossierLists.getYesNoList(),vm.isForProd=PROD===DossierLists.getEnv(),vm.updateSummary=0,vm.showSummary=!1,vm.alerts=[!1,!1,!1,!1],vm.summaryName="",vm.requiredOnly=[{type:"required",displayAlias:"MSG_ERR_MAND"}],vm.lang=$translate.proposedLanguage()||$translate.use(),vm.frmModel={isAnimalHumanMaterial:""},vm.exclusions={"ingRecCtrl.activeIngForm":"true","nIngRecCtrl.nonMedIngForm":"true","mirCtrl.materialIngRecordForm":"true","ctrCtrl.containerTypeForm":"true"},vm.alias={no_country:{type:"element",target:"list_country"},no_roa:{type:"element",target:"list_roa"},no_active:{type:"element",target:"list_active"},no_container:{type:"element",target:"list_container"},no_din_country:{type:"element",target:"list_din_country"}},vm.transcludeList={},vm.orderString=["A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z"],vm.$onInit=function(){_setIdNames(),vm.noCountry()},vm.$onChanges=function(changes){changes.record&&(vm.frmModel=changes.record.currentValue,vm.summaryName="cmp-formulation-record_"+(vm.frmModel.formulationId-1),vm.updateDosageForm()),changes.showErrorSummary&&(vm.showSummary=changes.showErrorSummary.currentValue,vm.updateErrorSummaryState()),changes.errorSummaryUpdate&&vm.updateErrorSummaryState(),changes.dossierType&&"D26"!=changes.dossierType.currentValue&&"D26"==changes.dossierType.previousValue&&(vm.frmModel.drugMarket="",vm.frmModel.din="",vm.frmModel.dinCountryList=[])},vm["delete"]=function(){vm.record&&vm.onDelete()},vm.copy=function(){if(vm.record){var formulationCopy=angular.copy(vm.record);vm.addCopy({record:formulationCopy})}},vm.showError=function(isInvalid,isTouched){return isInvalid&&isTouched||isInvalid&&vm.showSummary},vm.noCountry=function(){return vm.frmModel?vm.frmModel.countryList&&0!==vm.frmModel.countryList.length?(vm.frmModel.noCountries=vm.frmModel.countryList.length,!1):(vm.frmModel.noCountries="",!0):(vm.frmModel.noCountries="",!1)},vm.noDinCountry=function(){return vm.frmModel?vm.frmModel.dinCountryList&&0!==vm.frmModel.dinCountryList.length?(vm.frmModel.noDinCountries=vm.frmModel.dinCountryList.length,!1):(vm.frmModel.noDinCountries="",!0):(vm.frmModel.noDinCountries="",!1)},vm.noROA=function(){return vm.frmModel?vm.frmModel.routeAdmins&&0!==vm.frmModel.routeAdmins.length?(vm.noROAValues="values",!1):(vm.noROAValues="",!0):(vm.noROAValues="",!1)},vm.noContainers=function(){return vm.frmModel&&vm.frmModel.containerTypes&&0!==vm.frmModel.containerTypes.length?(vm.noContainerValues="values",!1):(vm.noContainerValues="",!0)},vm.updateActiveIngList=function(list){list&&(vm.frmModel.activeIngList=list,vm.recordChanged())},vm.updateNonMedIngList=function(list){list&&(vm.frmModel.nMedIngList=list,vm.recordChanged())},vm.updateContainerTypeList=function(list){list&&(vm.frmModel.containerTypes=list)},vm.updateMaterialList=function(list){list&&(vm.frmModel.animalHumanMaterials=list,vm.recordChanged())},vm.updateRoaList=function(list){list&&(vm.frmModel.routeAdmins=list)},vm.updateCountryList=function(list){list&&(vm.frmModel.countryList=list,vm.noCountry())},vm.updateDinCountryList=function(list){list&&(vm.frmModel.dinCountryList=list,vm.noDinCountry())},vm.deleteMaterialList=function(){vm.frmModel.animalHumanMaterials=[],vm.recordChanged()},vm.updateErrorSummaryState=function(){vm.updateSummary=vm.updateSummary+1},vm.addInstruct=function(value){angular.isUndefined(value)||value<vm.alerts.length&&(vm.alerts[value]=!0)},vm.closeAlert=function(value){angular.isUndefined(value)||value<vm.alerts.length&&(vm.alerts[value]=!1)},vm.isFrench=function(){return vm.lang===FRENCH},vm.dosageFormBlur=function(){vm.frmModel.dosageForm.id||(vm.frmModel.dosageFormHtml="",vm.frmModel.dosageFormOther="",vm.isDosageOther=!1)},vm.dosageFormChange=function(e){vm.frmModel.dosageForm={},vm.frmModel.dosageFormOther="",vm.isDosageOther=!1,vm.frmModel.dosageFormHtml=e;for(var i=0;i<vm.dosageFormList.length;i++){var option=vm.dosageFormList[i];if(option[vm.lang]===vm.frmModel.dosageFormHtml){vm.frmModel.dosageForm=option,vm.frmModel.dosageForm.id===vm.otherValue&&(vm.isDosageOther=!0);break}}$scope.$apply()},vm.updateDosageForm=function(){vm.frmModel.dosageForm&&vm.frmModel.dosageForm.id&&vm.frmModel.dosageForm.id==OTHER&&(vm.isDosageOther=!0)},vm.getFirstOrder=function(v){return vm.orderString[v-1]},vm.getNextOrder=function(v){return"D26"==vm.dossierType&&v>3&&v++,vm.orderString[v-2]},vm.clickDrugMarket=function(){"CANADIAN"==vm.frmModel.drugMarket?vm.frmModel.dinCountryList=[]:"CANADIAN"==vm.frmModel.drugMarket?vm.frmModel.din="":(vm.frmModel.din="",vm.frmModel.dinCountryList=[])},$scope.$watch("formulRecCtrl.formulationForm.$error",function(){vm.updateErrorSummary()},!0)}angular.module("formulationRecordModule").config(function(uiSelectConfig){uiSelectConfig.theme="select2"}).component("cmpFormulationRecord",{templateUrl:"app/scripts/components/formulations/tpl-formulation-record_20210704_1517.html",controllerAs:"formulRecCtrl",controller:formulationRecCtrl,bindings:{deleteBtn:"<",record:"<",onUpdate:"&",onDelete:"&",onCancel:"&",showErrors:"&",recordChanged:"&",addCopy:"&",errorSummaryUpdate:"<",isFileLoaded:"<",htIndxList:"<",showErrorSummary:"<",updateErrorSummary:"&",isFocus:"<",cancelFocus:"&",dossierType:"<"}}),formulationRecCtrl.$inject=["DossierLists","$translate","$scope","FRENCH","OTHER","PROD"]}(),function(){"use strict";angular.module("formulationsModule",["expandingTable","formulationRecordModule","errorSummaryModule"])}(),function(){"use strict";function formulationsCtrl($scope){function resetMe(){vm.resetToCollapsed=!vm.resetToCollapsed}function getMaxFormulationId(){var out=0,list=vm.formulationList;if(list)for(var i=0;i<list.length;i++)parseInt(list[i].formulationId)>out&&(out=parseInt(list[i].formulationId));return out}var vm=this;vm.isDetailValid=!0,vm.selectRecord=-1,vm.resetToCollapsed=!1,vm.noFormulations="",vm.updateSummary=0,vm.showSummary=!1,vm.requiredFlag=!0,vm.exclusions={},vm.transcludeList={"cmp-formulation-record":"true"},vm.alias={no_formulation:{type:"element",target:"list_formulation"}},vm.isFocus=!1,vm.$onInit=function(){vm.newFormShown=!1,vm.formulationListId="formulation-list-form",vm.colNames=[{label:"FORM_ID",binding:"formulationId",width:"15",isHtml:"true"},{label:"FORMULATION_NAME",binding:"formulationName",width:"85",isHtml:"true"}],vm.formulationList=[],vm.formulations&&(vm.formulationList=vm.formulations),vm.updateFormulationsError()},vm.$onChanges=function(changes){changes.formulations&&(vm.formulationList=changes.formulations.currentValue,vm.updateFormulationsError()),changes.showErrorSummary&&(vm.showSummary=changes.showErrorSummary.currentValue,vm.updateErrorSummaryState()),changes.errorSummaryUpdate&&vm.updateErrorSummaryState(),changes.isFileLoaded&&changes.isFileLoaded.currentValue&&(vm.requiredFlag=!1)},vm.$postLink=function(){vm.addNew()},vm.addNew=function(){var newRecord={formulationId:getMaxFormulationId()+1,formulationName:"",dosageForm:"",dosageFormHtml:"",dosageFormOther:"",activeIngList:[],nMedIngList:[],containerTypes:[],isAnimalHumanMaterial:"",animalHumanMaterials:[],routeAdmins:[],countryList:[]};vm.formulationList.push(newRecord),vm.setRecord(vm.formulationList.length-1),vm.resetToCollapsed=!vm.resetToCollapsed,vm.updateFormulationsError()},vm.addCopy=function(formulation){formulation&&(formulation.formulationId=getMaxFormulationId()+1,vm.formulationList.push(formulation),vm.requiredFlag=!1,vm.isFileLoaded=!0,vm.setRecord(-1))},vm.update=function(idx,frm){vm.formulationList[idx]=angular.copy(frm)},vm.updateFormulationRecord=function(){vm.recordChanged(),vm.requiredFlag=!1},vm["delete"]=function(idx){vm.formulationList.splice(idx,1)&&vm.setRecord(-1),vm.resetToCollapsed=!vm.resetToCollapsed,vm.updateFormulationsError(),vm.requiredFlag=!1},vm.updateFormulationsError=function(){return vm.formulationList&&vm.formulationList.length>0?(vm.noFormulations=vm.formulationList.length,!1):(vm.noFormulations="",!0)},vm.updateErrorSummaryState=function(){vm.updateSummary=vm.updateSummary+1},vm.setRecord=function(value){resetMe(),vm.selectRecord=-1,vm.selectRecord=value},vm.setFocus=function(){vm.isFocus=!0},vm.cancelFocus=function(){vm.isFocus=!1},$scope.$watch("formulCtrl.formulationsForm.$error",function(){vm.updateErrorSummary()},!0)}angular.module("formulationsModule").component("cmpFormulations",{templateUrl:"app/scripts/components/formulations/tpl-formulation-list_20210704_1517.html",controller:formulationsCtrl,controllerAs:"formulCtrl",bindings:{formulations:"<",recordChanged:"&",errorSummaryUpdate:"<",showErrorSummary:"<",isFileLoaded:"<",htIndxList:"<",updateErrorSummary:"&",dossierType:"<"}}),formulationsCtrl.$inject=["$scope"]}(),function(){"use strict";angular.module("containerTypeRecordModule",["dossierDataLists","hpfbConstants","errorSummaryModule","errorMessageModule"])}(),function(){"use strict";function containerTypeRecCtrl(DossierLists,$scope,$translate,FRENCH){function _setIdNames(){var scopeId="_"+$scope.$id;vm.containerFormId="containerRecordForm"+scopeId,vm.containerTypeId="container_type"+scopeId,vm.packageSizeId="package_size"+scopeId,vm.shelfLifeUnitId="shelf_life_unit"+scopeId,vm.shelfLifeNumberId="shelf_life_number"+scopeId,vm.tempMinId="min_temp"+scopeId,vm.tempMaxId="max_temp"+scopeId,vm.otherShelflifeConsiderId="other_shelf_life_considerations"+scopeId,vm.dr9e1Ref="dr9e1_ref"+scopeId,vm.dr9e2Ref="dr9e2_ref"+scopeId,vm.dr9e3Ref="dr9e3_ref"+scopeId}var vm=this;vm.lang=$translate.proposedLanguage()||$translate.use(),vm.selfLifeUnitsList=DossierLists.getShelfLifeUnitsList(),vm.ctModel={containerType:"",packageSize:"",shelfLifeUnit:void 0,shelfLifeNumber:void 0,tempMin:void 0,tempMax:void 0,otherShelflifeConsider:""},vm.backup=angular.copy(vm.ctModel),vm.requiredOnly=[{type:"required",displayAlias:"MSG_ERR_MAND"}],vm.numberInvalidMinMax=[{type:"min",displayAlias:"MSG_ERR_INVALID_NUM_MIN"},{type:"number",displayAlias:"TYPE_NUMBER"},{type:"max",displayAlias:"MSG_ERR_INVALID_NUM_MAX"}],vm.alias={min_temp:{type:"min",errorType:"MSG_ERR_INVALID_NUM_MIN"},max_temp:{type:"min",errorType:"MSG_ERR_INVALID_NUM_MIN"}},vm.updateSummary=0,vm.showSummary=!1,vm.focusSummary=0,vm.alerts=[!1,!1,!1],vm.$onInit=function(){_setIdNames()},vm.$onChanges=function(changes){changes.record&&changes.record.currentValue&&(vm.ctModel=angular.copy(changes.record.currentValue),vm.ctModel.shelfLifeUnit=angular.copy(changes.record.currentValue.shelfLifeUnit),vm.ctModel.shelfLifeNumber=changes.record.currentValue.shelfLifeNumber?Number(changes.record.currentValue.shelfLifeNumber):void 0,vm.ctModel.tempMin=changes.record.currentValue.tempMin?Number(changes.record.currentValue.tempMin):void 0,vm.ctModel.tempMax=changes.record.currentValue.tempMax?Number(changes.record.currentValue.tempMax):void 0,vm.backup=angular.copy(vm.ctModel)),changes.showErrorSummary&&(vm.showSummary=changes.showErrorSummary.currentValue,vm.updateErrorSummaryState()),changes.errorSummaryUpdate&&vm.updateErrorSummaryState()},vm.save=function(){vm.containerTypeForm.$valid?(vm.record?vm.onUpdate({cType:vm.ctModel}):vm.onAddIng({cType:vm.ctModel}),vm.containerTypeForm.$setPristine(),vm.showSummary=!1,vm.updateErrorSummaryState()):(vm.showSummary=!0,vm.makeFocused(),vm.updateErrorSummaryState(),window.location.hash="#errors-summary-ctrCtrl.containerTypeForm")},vm.discardChanges=function(){vm.ctModel=angular.copy(vm.backup),vm.containerTypeForm.$setPristine(),vm.onCancel()},vm["delete"]=function(){vm.record&&vm.onDelete()},vm.showError=function(ctrl){return!!ctrl&&(ctrl.$invalid&&ctrl.$touched||ctrl.$invalid&&vm.showSummary)},vm.addInstruct=function(value){angular.isUndefined(value)||value<vm.alerts.length&&(vm.alerts[value]=!0)},vm.closeAlert=function(value){angular.isUndefined(value)||value<vm.alerts.length&&(vm.alerts[value]=!1)},vm.isFrench=function(){return vm.lang===FRENCH},$scope.$watch("ctrCtrl.containerTypeForm.$dirty",function(){vm.isDetailValid({state:!vm.containerTypeForm.$dirty})},!0),$scope.$watch("ctrCtrl.containerTypeForm.$error",function(){vm.updateErrorSummaryState()},!0),vm.makeFocused=function(){vm.focusSummary=vm.focusSummary+1},vm.updateErrorSummaryState=function(){vm.updateSummary=vm.updateSummary+1}}angular.module("containerTypeRecordModule").component("cmpContainerTypeRecord",{templateUrl:"app/scripts/components/formulations/tpl-container-type-record_20210704_1517.html",controllerAs:"ctrCtrl",controller:containerTypeRecCtrl,bindings:{deleteBtn:"<",record:"<",onAddIng:"&",onUpdate:"&",onDelete:"&",onCancel:"&",showErrors:"&",isDetailValid:"&",recordIndex:"<",htIndxList:"<",errorSummaryUpdate:"<",showErrorSummary:"<",isFocus:"<",cancelFocus:"&"}}),containerTypeRecCtrl.$inject=["DossierLists","$scope","$translate","FRENCH"]}(),function(){"use strict";angular.module("containerTypeListModule",["expandingTable","containerTypeRecordModule"])}(),function(){"use strict";function containerTypeListCtrl($scope){function setRecord(value){vm.selectRecord=value}function _setIdNames(){var scopeId="_"+$scope.$id;vm.noContainerId="no_container"+scopeId}var vm=this;vm.isDetailValid=!0,vm.selectRecord=-1,vm.resetToCollapsed=!1,vm.isDetailValid=!0,vm.newIngFormShown=!1,vm.noContainerValues="",vm.isfocus=!1,vm.$onInit=function(){vm.selectRecord=-1,vm.resetToCollapsed=!1,vm.isDetailValid=!0,vm.newIngFormShown=!1,_setIdNames(),vm.colNames=[{label:"CONTAINER_TYPE",binding:"containerType",width:"50",isHtml:"true"},{label:"PACKAGE_SIZE",binding:"packageSize",width:"50",isHtml:"true"}],vm.containerList=[],vm.containers&&(vm.containerList=vm.containers)},vm.$onChanges=function(changes){changes.containers&&(vm.containerList=changes.containers.currentValue,vm.noContainers()),changes.isFileLoaded&&changes.isFileLoaded.currentValue&&(vm.newIngFormShown=!1)},vm.$postLink=function(){vm.isFileLoaded||vm.addNewIngredientState()},vm.addNew=function(ing){vm.setValid(!0),vm.containerList.push(ing),vm.newIngFormShown=!1,vm.resetToCollapsed=!vm.resetToCollapsed,vm.onUpdate({list:vm.containerList}),setRecord(-1),vm.noContainers(),vm.focus=!1},vm.updateRec=function(idx,ing){vm.containerList[idx]=angular.copy(ing),vm.resetToCollapsed=!vm.resetToCollapsed,vm.onUpdate({list:vm.containerList}),setRecord(-1),vm.setValid(!0)},vm.deleteRec=function(idx){vm.containerList.splice(idx,1),vm.onUpdate({list:vm.containerList}),vm.setValid(!0),vm.noContainers(),setRecord(-1),vm.resetToCollapsed=!vm.resetToCollapsed},vm.setValid=function(value){vm.isDetailValid=value},vm.addNewDisabled=function(){return vm.newIngFormShown||!vm.isDetailValid},vm.addNewIngredientState=function(){return vm.resetToCollapsed=!vm.resetToCollapsed,vm.newIngFormShown=!0,vm.setValid(!1),vm.noContainers(),vm.newIngFormShown},vm.setFocus=function(){vm.isFocus=!0},vm.cancelFocus=function(){vm.isfocus=!1},vm.onNewCancel=function(){vm.setValid(!0),vm.newIngFormShown=!1,vm.noContainers()},vm.noContainers=function(){return vm.containerList&&0!==vm.containerList.length?(vm.noContainerValues="values",!1):(vm.noContainerValues="",!0)}}angular.module("containerTypeListModule").component("cmpContainerTypeList",{templateUrl:"app/scripts/components/formulations/tpl-container-type-list_20210704_1517.html",controller:containerTypeListCtrl,controllerAs:"ctlCtrl",bindings:{containers:"<",onUpdate:"&",errorSummaryUpdate:"<",isFileLoaded:"<",htIndxList:"<",showErrorSummary:"<"}}),containerTypeListCtrl.$inject=["$scope"]}(),function(){"use strict";angular.module("activeIngRecordModule",["dossierDataLists","hpfbConstants","ui.select","errorSummaryModule","errorMessageModule"])}(),function(){"use strict";function activeIngRecCtrl(DossierLists,$scope,$translate,OTHER,YES,NO,ENGLISH,FRENCH){function _setIdNames(){var scopeId="_"+$scope.$id;vm.activeFormId="activeRecordForm"+scopeId,vm.ingredRoleId="ing_role"+scopeId,vm.ingredName="ing_name"+scopeId,vm.nIngredName="n_ing_name"+scopeId,vm.proprietaryAttestationCheckBox="proprietary_attestation_checkbox"+scopeId,vm.proprietaryAttestationInfo="nmi_proprietary_info_lbl"+scopeId,vm.casId="cas"+scopeId,vm.standardId="standard"+scopeId,vm.strengthId="strength_operator"+scopeId,vm.strengthData1Id=scopeId,vm.strengthData2Id="strength_data2"+scopeId,vm.unitsId="units"+scopeId,vm.otherUnitsId="other_units"+scopeId,vm.perMeasureUnitId="unit_measure"+scopeId,vm.perPresOtherUnitId="other_unit_presentation"+scopeId,vm.perMeasureOtherUnitId="other_unit_measure"+scopeId,vm.perId="per_strength"+scopeId,vm.perPreValueId="per_value"+scopeId,vm.perMeaValueId="per_value"+scopeId,vm.presentationId="unit_presentation"+scopeId,vm.isNanoMaterialId="is_nano_material"+scopeId,vm.nanoId="nano_material"+scopeId,vm.nanoOtherId="nano_material_other"+scopeId,vm.asBaseId="calculated_as_base"+scopeId,vm.animalHumanSrcId="animal_human_sourced"+scopeId,vm.purposeId="purpose"+scopeId,vm.dr9c1Ref="dr9c1_ref"+scopeId,vm.dr9c2Ref="dr9c2_ref"+scopeId,vm.dr9c3Ref="dr9c3_ref"+scopeId,vm.dr9c4Ref="dr9c4_ref"+scopeId,vm.dr9c5Ref="dr9c5_ref"+scopeId,vm.dr9c6Ref="dr9c6_ref"+scopeId,vm.dr9c7Ref="dr9c7_ref"+scopeId,vm.dr9c8Ref="dr9c8_ref"+scopeId}var vm=this;vm.ingRoleList=DossierLists.getIngRoleList(),vm.nanoMaterialList=DossierLists.getNanoMaterials(),vm.yesNoList=DossierLists.getYesNoList(),vm.calAsBaseYesNoList=DossierLists.getCalAsBaseYesNoList(),vm.activeList=DossierLists.getActiveList(),vm.unitsList=DossierLists.getUnitsList(),vm.strengthList=DossierLists.getStrengthList(),vm.perList=DossierLists.getPerList(),vm.presentationList=DossierLists.getUnitsPresentationList(),vm.measureList=DossierLists.getUnitsMeasureList(),vm.lang=$translate.proposedLanguage()||$translate.use(),vm.requiredOnly=[{type:"required",displayAlias:"MSG_ERR_MAND"}],vm.alerts=[!1,!1,!1,!1,!1,!1],vm.numberMinError=[{type:"required",displayAlias:"MSG_ERR_MAND"},{type:"min",displayAlias:"TYPE_MIN"},{type:"number",displayAlias:"TYPE_NUMBER"}],vm.numberMinLowerError=[{type:"required",displayAlias:"MSG_ERR_MAND"},{type:"min",displayAlias:"MSG_ERR_INVALID_NUM_MIN_LOWER"},{type:"number",displayAlias:"TYPE_NUMBER"}],vm.alias={strength_data2:{type:"min",errorType:"MSG_ERR_INVALID_NUM_MIN_LOWER"}},vm.ingModel={autoIngred:NO,ingRole:"",ingId:"",variant:"",purpose:"",ingLabel:"",proprietaryAttestation:{attested:"N",info:""},cas:"",standard:"",strength:{operator:"",data1:null,data2:null},units:"",unitsHtml:"",otherUnits:"",per:"",perPresentationValue:1,perMeasureValue:null,perPresUnits:"",perPresOtherUnits:"",perMeasUnits:"",perMeasUnitsHtml:"",perMeasOtherUnits:"",isNano:"",nanoMaterial:"",nanoMaterialOther:"",calcAsBase:"",humanAnimalSourced:"",focusOnIngRole:!1},vm.strengthData1Title="",vm.exclusions={},vm.updateSummary=0,vm.showSummary=!1,vm.focusSummary=0,vm.$onInit=function(){vm.showSummary=!1,vm.ingModel.focusOnIngRole=vm.isFocus,vm.backup=angular.copy(vm.ingModel),_setIdNames(),vm.activeList=vm.translateLabels(DossierLists.getActiveList())},vm.$onChanges=function(changes){changes.record&&changes.record.currentValue&&(vm.ingModel=angular.copy(changes.record.currentValue),vm.ingModel.ingId?vm.ingModel.autoIngred=YES:vm.ingModel.autoIngred=NO),changes.showErrorSummary&&(vm.showSummary=changes.showErrorSummary.currentValue,vm.updateErrorSummaryState()),changes.errorSummaryUpdate&&vm.updateErrorSummaryState(),changes.recordIndex&&(vm.summaryName="cmp-active-ing-record_"+vm.recordIndex.currentValue),(!vm.activeList||vm.activeList.length<=0)&&(vm.activeList=vm.translateLabels(DossierLists.getActiveList()))},vm.translateLabels=function(jsonObj){var result=[];if(!jsonObj)return result;for(var i=0;i<jsonObj.length;i++)jsonObj[i].label=jsonObj[i][$translate.proposedLanguage()||$translate.use()],result.push(jsonObj[i]);return result},vm.isAnimalHumanSourced=function(){return!!vm.ingModel&&vm.ingModel.humanAnimalSourced===YES},vm.ingredSelectionUpdated=function(item,model,label,event){item?(vm.ingModel.ingId=item.id,vm.ingModel.autoIngred=YES):(vm.ingModel.ingId="",vm.ingModel.autoIngred=NO)},vm.isRoleChosen=function(){return"MED"===vm.ingModel.ingRole||"NONMED"===vm.ingModel.ingRole},vm.isNMIProprietaryInfoChecked=function(){return"Y"===vm.ingModel.proprietaryAttestation.attested},vm.isMedIng=function(){return"MED"===vm.ingModel.ingRole},vm.isPerPresentation=function(){return"undefined"!=typeof vm.ingModel.per&&"UP"===vm.ingModel.per.id},vm.isPerMeasure=function(){return"undefined"!=typeof vm.ingModel.per&&"UM"===vm.ingModel.per.id},vm.isStrengthSet=function(){var isSet=!1;return null!=vm.ingModel.strength&&null!=vm.ingModel.strength.operator&&void 0!==vm.ingModel.strength.operator.id&&""!==vm.ingModel.strength.operator.id&&(isSet=!0,"RA"===vm.ingModel.strength.operator.id?vm.strengthData1Title="RANGE_LOWER_LIMIT":vm.strengthData1Title="VALUE",vm.strengthData1Id="strength_"+vm.strengthData1Title+"_"+$scope.$id),isSet},vm.isRange=function(){return null!=vm.ingModel.strength&&null!=vm.ingModel.strength.operator&&"RA"===vm.ingModel.strength.operator.id},vm.isNanoMaterial=function(){return vm.ingModel.isNano===YES},vm.saveIng=function(){vm.activeIngForm.$valid?(vm.record?vm.onUpdate({ing:vm.ingModel}):vm.onAddIng({ing:vm.ingModel}),vm.activeIngForm.$setPristine(),vm.showSummary=!1,vm.updateErrorSummaryState()):(vm.showSummary=!0,vm.makeFocused(),vm.updateErrorSummaryState(),window.location.hash="#errors-summary-ingRecCtrl.activeIngForm")},vm.makeFocused=function(){vm.focusSummary=vm.focusSummary+1},vm.discardChanges=function(){vm.ingModel=angular.copy(vm.backup),vm.activeIngForm.$setPristine(),vm.updateErrorSummaryState(),vm.onCancel()},vm["delete"]=function(){vm.record&&vm.onDelete()},vm.copy=function(){var ingredientCopy=angular.copy(vm.ingModel);vm.onAddIng({ing:ingredientCopy})},vm.showError=function(ctrl){return!!ctrl&&(ctrl.$invalid&&ctrl.$touched||ctrl.$invalid&&vm.showSummary)},vm.isNanoOther=function(){return vm.ingModel.nanoMaterial.id===DossierLists.getOtherValue()||(vm.ingModel.nanoMaterialOther="",!1)},vm.isUnitsOther=function(){return!(!vm.ingModel||!vm.ingModel.units)&&(vm.ingModel.units.id===OTHER||(vm.ingModel.otherUnits="",!1))},vm.isUnitsOtherDetail=function(){return!(!vm.ingModel||!vm.ingModel.units)&&(vm.ingModel.units.id===OTHER?""==vm.ingModel.otherUnits:(vm.ingModel.otherUnits="",!1))},vm.isPerPresUnitsOther=function(){return!(!vm.ingModel||!vm.ingModel.perPresUnits)&&(vm.ingModel.perPresUnits.id===OTHER||(vm.ingModel.perPresOtherUnits="",!1))},vm.isPerMeasUnitsOther=function(){return!(!vm.ingModel||!vm.ingModel.perMeasUnits)&&(vm.ingModel.perMeasUnits.id===OTHER||(vm.ingModel.perMeasOtherUnits="",!1))},vm.addInstruct=function(value){angular.isUndefined(value)||value<vm.alerts.length&&(vm.alerts[value]=!0)},vm.closeAlert=function(value){angular.isUndefined(value)||value<vm.alerts.length&&(vm.alerts[value]=!1)},vm.isFrench=function(){return vm.lang===FRENCH},vm.unitsBlur=function(){vm.ingModel.units.id||(vm.ingModel.unitsHtml="",vm.ingModel.otherUnits="")},vm.unitsChange=function(e){console.log(e),vm.ingModel.units={},vm.ingModel.unitsHtml=e;for(var i=0;i<vm.unitsList.length;i++){var option=vm.unitsList[i];if(option[vm.lang]===vm.ingModel.unitsHtml){vm.ingModel.units=option;break}}$scope.$apply()},vm.perMeasUnitsBlur=function(){vm.ingModel.perMeasUnits.id||(vm.ingModel.perMeasUnitsHtml="",vm.ingModel.perPresOtherUnits="")},vm.perMeasUnitsChange=function(e){vm.ingModel.perMeasUnits={},vm.ingModel.perMeasUnitsHtml=e;for(var i=0;i<vm.measureList.length;i++){var option=vm.measureList[i];if(option[vm.lang]===vm.ingModel.perMeasUnitsHtml){vm.ingModel.perMeasUnits=option;break}}$scope.$apply()},$scope.$watch("ingRecCtrl.activeIngForm.$dirty",function(){vm.isDetailValid({state:!vm.activeIngForm.$dirty})},!0),vm.updateErrorSummaryState=function(){vm.updateSummary=vm.updateSummary+1},$scope.$watch("ingRecCtrl.activeIngForm.$error",function(){vm.updateErrorSummaryState(),vm.updateErrorSummary()},!0)}angular.module("activeIngRecordModule").component("cmpActiveIngRecord",{templateUrl:"app/scripts/components/formulations/tpl-active-ing-record_20210704_1517.html",controllerAs:"ingRecCtrl",controller:activeIngRecCtrl,bindings:{deleteBtn:"<",record:"<",onAddIng:"&",onUpdate:"&",onDelete:"&",onCancel:"&",isDetailValid:"&",recordIndex:"<",htIndxList:"<",errorSummaryUpdate:"<",showErrorSummary:"<",updateErrorSummary:"&",isFocus:"<",cancelFocus:"&"}}),activeIngRecCtrl.$inject=["DossierLists","$scope","$translate","OTHER","YES","NO","ENGLISH","FRENCH"]}(),function(){"use strict";angular.module("activeIngListModule",["expandingTable","hpfbConstants","activeIngRecordModule"])}(),function(){"use strict";function activeIngListCtrl($scope,FRENCH){function setRecord(value){vm.selectRecord=value}function _setIdNames(){var scopeId="_"+$scope.$id;vm.noActiveId="no_active"+scopeId}var vm=this;vm.selectRecord=-1,vm.resetToCollapsed=!1,vm.isDetailValid=!0,vm.newIngFormShown=!1,vm.isDetailValid=!0,vm.selectRecord=-1,vm.alerts=[!1],vm.noActiveValues="",vm.isFocus=!1,vm.colNames=[],vm.miColNames=[{label:"ROLE",binding:"ingRole",width:"1"},{label:"INGREDIENT",binding:"ingLabel",width:"1"},{label:"HUMAN_ANIMAL_SOURCE",binding:"humanAnimalSourced",width:"1"}],vm.nmiColNames=[{label:"ROLE",binding:"ingRole",width:"1"},{label:"INGREDIENT",binding:"ingLabel",width:"1"},{label:"VARIANT_NAME_HEADER",binding:"variant",width:"1"},{label:"HUMAN_ANIMAL_SOURCE",binding:"humanAnimalSourced",width:"1"}],vm.ingList=[],vm.$onInit=function(){_setIdNames(),void 0===vm.ingList||0==vm.ingList.length?vm.colNames=vm.miColNames:vm.colNames=vm.nmiColNames},vm.$onChanges=function(changes){changes.ingredients&&changes.ingredients.currentValue&&(vm.ingList=vm.ingredients,vm.isDetailValid=!0,vm.noActives()),changes.isFileLoaded&&changes.isFileLoaded.currentValue&&(vm.newIngFormShown=!1)},vm.$postLink=function(){vm.isFileLoaded||vm.addNewIngredientState()},vm.addIng=function(ing){vm.setValid(!0),vm.ingList.push(ing),vm.newIngFormShown=!1,vm.resetToCollapsed=!vm.resetToCollapsed,vm.onUpdate({list:vm.ingList}),setRecord(-1),vm.noActives()},vm.updateIng=function(idx,ing){vm.ingList[idx]=angular.copy(ing),vm.onUpdate({list:vm.ingList}),vm.setValid(!0),setRecord(-1),vm.resetToCollapsed=!vm.resetToCollapsed,vm.noActives()},vm.deleteIng=function(idx){vm.ingList.splice(idx,1),vm.onUpdate({list:vm.ingList}),vm.setValid(!0),setRecord(-1),vm.resetToCollapsed=!vm.resetToCollapsed,vm.noActives()},vm.setValid=function(value){vm.isDetailValid=value},vm.addNewDisabled=function(){return vm.newIngFormShown||!vm.isDetailValid},vm.addNewIngredientState=function(){return vm.resetToCollapsed=!vm.resetToCollapsed,vm.newIngFormShown=!0,vm.setValid(!1),vm.perMeasUnitsHtml="",vm.unitsHtml="",vm.newIngFormShown},vm.onNewCancel=function(){vm.setValid(!0),vm.newIngFormShown=!1},vm.setFocus=function(){vm.isFocus=!0},vm.cancelFocus=function(){vm.isFocus=!1},$scope.$watch("ailCtrl.activeIngListForm.$error",function(){vm.updateErrorSummary()},!0),vm.noActives=function(){if(vm.ingList&&0!==vm.ingList.length){for(var i=0;i<vm.ingList.length;i++)if("MED"===vm.ingList[i].ingRole)return vm.noActiveValues="values",
!1;return vm.noActiveValues="",!0}return vm.noActiveValues="",!0},vm.addInstruct=function(value){angular.isUndefined(value)||value<vm.alerts.length&&(vm.alerts[value]=!0)},vm.closeAlert=function(value){angular.isUndefined(value)||value<vm.alerts.length&&(vm.alerts[value]=!1)},vm.isFrench=function(){return vm.lang===FRENCH}}angular.module("activeIngListModule").component("cmpActiveIngList",{templateUrl:"app/scripts/components/formulations/tpl-active-ing-list_20210704_1517.html",controller:activeIngListCtrl,controllerAs:"ailCtrl",bindings:{ingredients:"<",onUpdate:"&",errorSummaryUpdate:"<",isFileLoaded:"<",htIndxList:"<",showErrorSummary:"<",updateErrorSummary:"&"}}),activeIngListCtrl.$inject=["$scope","FRENCH"]}(),function(){"use strict";angular.module("tabModule",["tabsModule"])}(),function(){"use strict";function tabCtrl(){var vm=this;vm.$onInit=function(){vm.tab={title:vm.title,selected:!1},vm.tabs.addTab(vm.tab)}}angular.module("tabModule").component("cmpTab",{templateUrl:"app/scripts/components/tabs/tpl-tab_20210704_1517.html",controller:tabCtrl,controllerAs:"tabCtrl",bindings:{title:"@"},require:{tabs:"^^cmpTabs"},transclude:!0})}(),function(){"use strict";angular.module("tabsModule",["formulationsModule","hpfbConstants","appendixFourModule","alertModule"])}(),function(){"use strict";function tabsCtrl($scope,FRENCH){var vm=this;vm.showSummary=!1,vm.updateSummary=0,vm.alerts=[!1],vm.tabs=[{label:"FORMULATIONS",selected:!0,disabled:!1,errors:!0,form:{}},{label:"APPENDIX4",selected:!1,disabled:!1,errors:!1,form:{}}],vm.$onInit=function(){},vm.$onChanges=function(changes){if(changes.errorSummaryUpdate&&(vm.updateSummary=changes.errorSummaryUpdate.currentValue),changes.showErrorSummary&&(vm.showSummary=changes.showErrorSummary.currentValue),changes.setSelectedTab&&changes.setSelectedTab.currentValue){var index=changes.setSelectedTab.currentValue.id;index>-1&&vm.selectTab(index)}},vm.selectTab=function(idx){if(idx>vm.tabs.length)return void console.warn("Invalid tab index "+idx);for(var i=0;i<vm.tabs.length;i++)vm.tabs[i].selected=!1,idx!==i&&(vm.tabs[i].errors=vm.tabs[i].form.$invalid);vm.tabs[idx].selected=!0},vm.addInstruct=function(value){angular.isUndefined(value)||value<vm.alerts.length&&(vm.alerts[value]=!0)},vm.closeAlert=function(value){angular.isUndefined(value)||value<vm.alerts.length&&(vm.alerts[value]=!1)},vm.isFrench=function(){return vm.lang===FRENCH}}angular.module("tabsModule").component("cmpTabs",{templateUrl:"app/scripts/components/tabs/tpl-tabs_20210704_1517.html",controller:tabsCtrl,controllerAs:"tabsCtrl",bindings:{formulationList:"<",appendix4List:"<",recordChanged:"&",service:"<",errorSummaryUpdate:"<",showErrorSummary:"<",isFileLoaded:"<",updateErrorSummary:"&",setSelectedTab:"<"}}),tabsCtrl.$inject=["$scope","FRENCH"]}(),function(){"use strict";angular.module("scheduleAModule",["checkBoxListModule","errorMessageModule"])}(),function(){"use strict";function scheduleACtrl($scope){function _setIdNames(){var scopeId="_"+$scope.$id;vm.acuteAlcoholId="acute_alcohol"+scopeId,vm.acuteAnxietyId="acute_anxiety"+scopeId,vm.acuteInfectId="acute_infectious"+scopeId,vm.accuteInflamId="acute_inflammatory"+scopeId,vm.acutePsycoticId="acute_psychotic"+scopeId,vm.addictionId="addiction"+scopeId,vm.aterioId="ateriosclerosis"+scopeId,vm.appendId="appendicitis"+scopeId,vm.asthmaId="asthma"+scopeId,vm.cancerId="cancer"+scopeId,vm.congestId="congest_heart_fail"+scopeId,vm.convulId="convulsions"+scopeId,vm.dementId="dementia"+scopeId,vm.depressId="depression"+scopeId,vm.diabetesId="diabetes"+scopeId,vm.gangreneId="gangrene"+scopeId,vm.glaucomaId="glaucoma"+scopeId,vm.haemId="haematologic_bleeding"+scopeId,vm.hepatitisId="hepatitis"+scopeId,vm.hypertensionId="hypertension"+scopeId,vm.nausPregId="nausea_pregnancy"+scopeId,vm.obesityId="obesity"+scopeId,vm.rFeverId="rheumatic_fever"+scopeId,vm.septId="septicemia"+scopeId,vm.sexDiseasetId="sex_transmit_disease"+scopeId,vm.sHerniaId="strangulated_hernia"+scopeId,vm.thromDisorderId="thrombotic_embolic_disorder"+scopeId,vm.thyroidId="thyroid_disease"+scopeId,vm.ulcerGssId="ulcer_gastro"+scopeId,vm.schedIndId="scheda_claims"+scopeId,vm.oneSchedId="scheda_disease"+scopeId,vm.fsId="scheda_disease"+scopeId,vm.dinId="sched_din"+scopeId}var vm=this;vm.isClaim="",vm.expanderOpenState=!1,vm.disableExpander=!1,vm.requiredOnly=[{type:"required",displayAlias:"MSG_ERR_MAND"}],vm.oneRequired=[{type:"required",displayAlias:"MSG_ONE_SCHEDA"}],vm.errorMinLength=[{type:"minlength",displayAlias:"MSG_LENGTH_8NUM"}],vm.$onInit=function(){vm.model||(vm.model={drugIdNumber:"",scheduleAClaimsIndDetails:""}),_setIdNames()},vm.$onChanges=function(changes){changes.scheduleGroup&&(vm.model=changes.scheduleGroup.currentValue,vm.claimSelected()),changes.showErrors&&(vm.showErrorDetails=changes.showErrors.currentValue)},vm.claimSelected=function(){for(var keys=Object.keys(vm.model.diseaseDisorderList),i=0;i<keys.length;i++)if(vm.model.diseaseDisorderList[keys[i]])return vm.isClaim="selected",!0;return vm.isClaim="",!1},vm.noClaimSelected=function(){return!vm.claimSelected()},vm.showError=function(ctrl){return ctrl?ctrl.$invalid&&ctrl.$touched||ctrl.$invalid&&vm.showErrorDetails:(console.warn("No ctrl in cmp-schedule-a::showError"),!1)},vm.isOpenState=function(form){return form.$invalid?(vm.expanderOpenState=!0,vm.disableExpander=!0):vm.disableExpander=!1,vm.expanderOpenState},$scope.$watch("$ctrl.schedAForm.$invalid",function(){vm.expanderOpenState=!0,vm.disableExpander=!0},!0)}angular.module("scheduleAModule").component("cmpScheduleA",{templateUrl:"app/scripts/components/schedule-a/tpl-schedule-a_20210704_1517.html",controller:scheduleACtrl,controllerAs:"schedACtrl",bindings:{scheduleGroup:"<",htIndxList:"<",showErrors:"<"}}),scheduleACtrl.$inject=["$scope"]}(),function(){"use strict";angular.module("roaRecord",["ui.select","hpfbConstants","errorMessageModule"])}(),function(){"use strict";function roaRecordController(DossierLists,$translate,$scope,ENGLISH){function _setIdNames(){var scopeId="_"+$scope.$id;vm.roaId="roa_lbl"+scopeId,vm.unknownRoaId="other_roa_details"+scopeId}var vm=this;vm.roaList=DossierLists.getRoa(),vm.model={},vm.lang=$translate.proposedLanguage()||$translate.use(),vm.showDetailErrors=!1,vm.requiredOnly=[{type:"required",displayAlias:"MSG_ERR_MAND"}],vm.roaFilter="roaRecCtrl.model.display",vm.$onInit=function(){vm.lang=$translate.proposedLanguage()||$translate.use(),vm.lang||(vm.lang=ENGLISH),_setIdNames(),vm.showDetailErrors=!1},vm.$onChanges=function(changes){changes.record&&(vm.model=changes.record.currentValue),changes.showErrors&&(vm.showDetailErrors=changes.showErrors.currentValue)},vm.saveRecord=function(){for(var i=0;i<vm.roaList.length;i++){var option=vm.roaList[i];if(option[vm.lang]===vm.model.display){vm.model.roa=option;break}}vm.model.roa.id?(vm.clearFilter($scope),vm.updateRecord()):(vm.model.display="",vm.model.roa="",vm.showDetailErrors=!0)},vm.deleteRecord=function(){vm.onDelete({id:vm.model.id})},vm.showError=function(ctrl){return!!ctrl&&(ctrl.$invalid&&ctrl.$touched||ctrl.$invalid&&vm.showDetailErrors)},vm.isRoaOther=function(){return vm.model.display=vm.roaRecForm[vm.roaId].$viewValue,"Other"===vm.model.display||"Autre"===vm.model.display||(vm.model.otherRoaDetails="",!1)},vm.roaChange=function(e){vm.model.roa="",vm.model.display=e,vm.roaRecForm.$setDirty(!0),$scope.$apply()},vm.clearFilter=function($scope){$scope.roaFilter=""}}angular.module("roaRecord").config(function(uiSelectConfig){uiSelectConfig.theme="select2"}).component("cmpRoaRecord",{templateUrl:"app/scripts/components/route-admin/tpl-roa-record_20210704_1517.html",controller:roaRecordController,controllerAs:"roaRecCtrl",bindings:{record:"<",onDelete:"&",updateRecord:"&",resetMe:"&",showErrors:"<",isFocus:"<",cancelFocus:"&"}}),roaRecordController.$inject=["DossierLists","$translate","$scope","ENGLISH"]}(),function(){"use strict";angular.module("roaListModule",["roaRecord"])}(),function(){"use strict";function roaListCtrl($filter,$scope){function getMaxID(){var id=0;if(!vm.model||!vm.model.roaList)return id;for(var i=0;i<vm.model.roaList.length;i++)vm.model.roaList[i].id>id&&(id=vm.model.roaList[i].id);return id}function _setIdNames(){var scopeId="_"+$scope.$id;vm.noRoaId="no_roa"+scopeId}var vm=this;vm.selectRecord=-1,vm.isDetailValid=!0,vm.resetToCollapsed=!0,vm.noROAValues="",vm.showDetailErrors=!1,vm.requiredFlag=!0,vm.model={},vm.model.roaList=[],vm.isFocus=!1,vm.columnDef=[{label:"ROA_LBL",binding:"display",width:"40"},{label:"OTHER_ROA_DETAILS",binding:"otherRoaDetails",width:"60",isHtml:"true"}],vm.$onInit=function(){_setIdNames(),vm.showDetailErrors=!1},vm.$onChanges=function(changes){changes.records&&changes.records.currentValue&&(vm.model.roaList=changes.records.currentValue,vm.noROA()),changes.showErrors&&(vm.showDetailErrors=changes.showErrors.currentValue),changes.isFileLoaded&&changes.isFileLoaded.currentValue&&(vm.requiredFlag=!1)},vm.$postLink=function(){vm.isFileLoaded||vm.addNew()},vm.setValid=function(value){vm.isDetailValid=value},vm.addNew=function(){var maxID=getMaxID(),item={id:maxID+1,roa:"",otherRoaDetails:"",display:""};vm.model.roaList.push(item),vm.resetToCollapsed=!vm.resetToCollapsed,vm.selectRecord=vm.model.roaList.length-1,vm.noROA()},vm.noROA=function(){return vm.model.roaList&&0!==vm.model.roaList.length?(vm.noROAValues="values",!1):(vm.noROAValues="",!0)},vm.deleteRecord=function(recId){var idx=vm.model.roaList.indexOf($filter("filter")(vm.model.roaList,{id:recId},!0)[0]);vm.model.roaList.splice(idx,1),vm.noROA(),vm.requiredFlag=!1},vm.disableAddButton=function(){return!vm.noROA()&&(vm.resetToCollapsed=!vm.resetToCollapsed,vm.roaListForm.$invalid)},vm.setRecord=function(value){resetMe(),vm.selectRecord=value},vm.resetMe=function(){vm.requiredFlag=!1,vm.resetToCollapsed=!1},vm.updateRecord=function(){vm.selectRecord=-1,vm.requiredFlag=!1,vm.resetToCollapsed=!vm.resetToCollapsed},vm.onError=function(){vm.resetToCollapsed=!0},vm.setFocus=function(){vm.isFocus=!0},vm.cancelFocus=function(){vm.isFocus=!1}}angular.module("roaListModule").component("cmpRoaList",{templateUrl:"app/scripts/components/route-admin/tpl-roa-list_20210704_1517.html",bindings:{records:"<",showErrors:"<",isFileLoaded:"<",updateErrorSummary:"&"},controller:roaListCtrl,controllerAs:"roaCtrl"}),roaListCtrl.$inject=["$filter","$scope"]}(),function(){"use strict";angular.module("disinfectantTypeModule",["hpfbConstants"])}(),function(){"use strict";function disinfectantTypeCtrl(ENGLISH,$translate){var vm=this;vm.isReq=!0,vm.isSelected="",vm.alerts=[!1],vm.lang=$translate.proposedLanguage()||$translate.use(),vm.model={hospital:!1,foodProcessing:!1,medicalInstruments:!1,domestic:!1,barn:!1,institutionalIndustrial:!1},vm.$onInit=function(){vm.record&&(vm.model=vm.record)},vm.$onChanges=function(changes){changes.record&&(vm.model=changes.record.currentValue,vm.updateState(),vm.updateErrorSummary())},vm.updateState=function(){var obj=vm.model;for(var key in obj){var attrValue=obj[key];if(attrValue===!0)return vm.isSelected=!0,vm.updateErrorSummary(),!0}return vm.isSelected="",vm.updateErrorSummary(),!1},vm.showError=function(ctrl){return ctrl.$invalid||vm.showErrors()&&ctrl.$invalid},vm.showErrorMissing=function(){return vm.disiTypeForm.$touched&&!vm.isSelected||vm.showErrors()&&!vm.isSelected},vm.closeAlert=function(value){angular.isUndefined(value)||value<vm.alerts.length&&(vm.alerts[value]=!1)},vm.addInstruct=function(value){angular.isUndefined(value)||value<vm.alerts.length&&(vm.alerts[value]=!0)},vm.isFrench=function(){return vm.lang!==ENGLISH}}angular.module("disinfectantTypeModule").component("cmpDisinfectantType",{templateUrl:"app/scripts/components/disinfectantType/tpl-disinfectant-type_20210704_1517.html",controller:disinfectantTypeCtrl,controllerAs:"disiTypeCtrl",bindings:{record:"<",onUpdate:"&",showErrors:"&",updateErrorSummary:"&"}}),disinfectantTypeCtrl.$inject=["ENGLISH","$translate"]}(),function(){"use strict";angular.module("drugUseModule",["checkBoxListModule"])}(),function(){"use strict";function drugUseCtrl(){var self=this;self.$onInit=function(){self.commonName="drugUse",self.myList=[],self.listItems&&(self.myList=self.listItems)},self.$onChanges=function(changes){changes.listItems&&(self.myList=changes.listItems.currentValue)},self.isDrugUseSelected=function(){if(!self.myList)return!0;for(var i=0;i<self.myList.length;i++)if(self.myList[i].value)return!0;return!1},self.showNoRecordError=function(isInvalid){return self.parentDirty&&!self.isDrugUseSelected()||self.showListErrors()&&!self.isDrugUseSelected()}}angular.module("drugUseModule").component("cmpDrugUse",{templateUrl:"app/scripts/components/drug-use/tpl-drug-use_20210704_1517.html",controller:drugUseCtrl,controllerAs:"duCtrl",bindings:{listItems:"<",showListErrors:"&",parentDirty:"<"}})}(),function(){"use strict";angular.module("speciesRecordModule",["hpfbConstants","dossierDataLists","filterLists","errorMessageModule"])}(),function(){"use strict";function speciesRecordController(DossierLists,$translate,$scope){function _setIdNames(){var scopeId="_"+$scope.$id;vm.speciesId="VET_SPECIES"+scopeId,vm.subtypesId="VET_SUBTYPES"+scopeId,vm.isTreatFPAId="IS_TREAT_FP"+scopeId,vm.daysId="VET_DAYS"+scopeId,vm.hoursId="VET_HOURS"+scopeId,vm.withdrawalid="WITHDRAWAL"+scopeId}var vm=this;vm.lang=$translate.proposedLanguage()||$translate.use(),vm.speciesList=DossierLists.getSpeciesList(),vm.subtypesList=DossierLists.getSubTypesList(),vm.model={species:"",subtypes:"",specSubt:"",isTreatFPA:"",isTreatFPACasted:"",withdrawalDays:"",withdrawalHours:"",timeCombined:""},vm.updateSummary=0,vm.requiredOnly=[{type:"required",displayAlias:"MSG_ERR_MAND"}],vm.showDetailErrors=!1,vm.min5Error=[{type:"required",displayAlias:"MSG_ERR_MAND"},{type:"minlength",displayAlias:"MSG_LENGTH_MIN5"}],vm.dayError=[{type:"required",displayAlias:"MSG_ERR_MAND"},{type:"max",displayAlias:"MSG_DAY_MAX"},{type:"number",displayAlias:"TYPE_NUMBER"}],vm.hourError=[{type:"required",displayAlias:"MSG_ERR_MAND"},{type:"max",displayAlias:"MSG_HOUR_MAX"},{type:"number",displayAlias:"TYPE_NUMBER"}],vm.$onInit=function(){vm.showDetailErrors=!1,vm.record&&(vm.model=vm.record),_setIdNames()},vm.$onChanges=function(changes){changes.record&&changes.record.currentValue&&(vm.model=changes.record.currentValue),changes.showErrors&&(vm.showDetailErrors=changes.showErrors.currentValue)},vm.updateErrorSummaryState=function(){vm.updateSummary=vm.updateSummary+1},vm.saveRecord=function(){vm.speciesForm.$valid?(vm.model.specSubt=vm.model.species[vm.lang]+", "+vm.model.subtypes[vm.lang],vm.model.isTreatFPA&&("Y"===vm.model.isTreatFPA?"en"===vm.lang?vm.model.isTreatFPACasted="Yes":"fr"===vm.lang&&(vm.model.isTreatFPACasted="Oui"):"N"===vm.model.isTreatFPA&&("en"===vm.lang?vm.model.isTreatFPACasted="No":"fr"===vm.lang&&(vm.model.isTreatFPACasted="Non"),vm.model.withdrawalDays="",vm.model.withdrawalHours="")),vm.model.withdrawalDays?"en"===vm.lang?vm.model.timeCombined=vm.model.withdrawalDays+" days and "+vm.model.withdrawalHours+" hours":"fr"===vm.lang&&(vm.model.timeCombined=vm.model.withdrawalDays+" jours et "+vm.model.withdrawalHours+" heures"):vm.model.timeCombined="",vm.record&&vm.onUpdate({species:vm.model}),vm.speciesForm.$setPristine(),vm.showDetailErrors=!1,vm.updateErrorSummaryState(),vm.model.focusSpeciesId=!1):vm.showDetailErrors=!0},vm.deleteRecord=function(){vm.onDelete({id:vm.model.speciesId})},vm.showError=function(ctrl){return!!ctrl&&(ctrl.$invalid&&ctrl.$touched||ctrl.$invalid&&vm.showDetailErrors)}}angular.module("speciesRecordModule").component("cmpSpeciesRecord",{templateUrl:"app/scripts/components/speciesRecord/tpl-species-record_20210704_1517.html",controller:speciesRecordController,controllerAs:"speciesRecCtrl",bindings:{record:"<",onDelete:"&",onUpdate:"&",showErrors:"<",isFocus:"<",cancelFocus:"&"}}),speciesRecordController.$inject=["DossierLists","$translate","$scope"]}(),function(){"use strict";angular.module("speciesListModule",["dataLists","speciesRecordModule","ui.select","hpfbConstants"])}(),function(){"use strict";function speciesListController($filter,$scope){function setRecord(value){vm.selectRecord=value}function getNextSpeciesId(){for(var nextId=1,i=0;i<vm.model.list.length;i++)Number(vm.model.list[i].speciesId)>=nextId&&(nextId=Number(vm.model.list[i].speciesId)+1);return nextId}function _setIdNames(){"_"+$scope.$id}var vm=this;vm.model={},vm.isDetailValid=!0,vm.resetToCollapsed=!0,vm.showDetailErrors=!1,vm.selectRecord=-1,vm.isFocus=!1,vm.columnDef=[{label:"VET_SPECIES_SUBTYPES",binding:"specSubt",width:"40"},{label:"IS_TREAT_FP",binding:"isTreatFPACasted",width:"10",isHtml:"true"},{label:"WITHDRAWAL",binding:"timeCombined",width:"50",isHtml:"true"}],vm.emptyModel={speciesId:"",species:"",subtypes:"",specSubt:"",isTreatFPA:"",withdrawalDays:"",withdrawalHours:"",timeCombined:""},vm.$onInit=function(){_setIdNames(),vm.showDetailErrors=!1,angular.isUndefined(vm.model.list)&&(vm.model.list=[])},vm.$onChanges=function(changes){changes.listItems&&(vm.model.list=changes.listItems.currentValue),changes.showErrors&&(vm.showDetailErrors=changes.showErrors.currentValue)},vm.addNew=function(){var item=angular.copy(vm.emptyModel);vm.model.list&&vm.model.list.length>0?item.speciesId=getNextSpeciesId():item.speciesId=1,vm.model.list.push(item),setRecord(-1),vm.resetToCollapsed=!vm.resetToCollapsed,setRecord(vm.model.list.length-1),vm.onUpdate({list:vm.model.list})},vm.saveRecord=function(species){var idx=vm.model.list.indexOf($filter("filter")(vm.model.list,{speciesId:species.speciesId},!0)[0]);idx<0||(vm.selectRecord=-1,vm.requiredFlag=!1,vm.resetCollapsed=!vm.resetCollapsed,vm.model.list[idx]=species,vm.onUpdate({list:vm.model.list}))},vm.deleteRecord=function(_id){var idx=vm.model.list.indexOf($filter("filter")(vm.model.list,{speciesId:_id},!0)[0]);idx<0||(vm.model.list.splice(idx,1),vm.onUpdate({list:vm.model.list}))},vm.disableAddButton=function(){return 0!==vm.model.list.length&&vm.speciesListForm.$invalid},vm.setFocus=function(){vm.isFocus=!0},vm.cancelFocus=function(){vm.isFocus=!1}}angular.module("speciesListModule").component("cmpSpeciesList",{templateUrl:"app/scripts/components/speciesList/tpl-species-list_20210704_1517.html",controller:speciesListController,controllerAs:"speciesListCtrl",bindings:{listItems:"<",onUpdate:"&",onDelete:"&",showErrors:"<",updateErrorSummary:"&"}}),speciesListController.$inject=["$filter","$scope"]}(),function(){"use strict";angular.module("clinicalTrial",["numberFormat","filterLists","hpfbConstants","errorSummaryModule","countryListModule","errorMessageModule"])}(),function(){"use strict";function ctaCtrl($scope,$translate){function _setIdNames(){var scopeId="_"+$scope.$id;vm.protocolNumId="protocol_number"+scopeId,vm.protocolTitleId="protocol_title"+scopeId,vm.composId="cta_composition"+scopeId,vm.phaseId="cta_phase"+scopeId,vm.phaseOtherId="cta_other"+scopeId,vm.isInfoRebId="info_reb"+scopeId}var vm=this;vm.compositionKeys=["fmpp","mpp","fmap","map"],vm.phaseKeys=["phase1Bio","phase1Study","phase1Other","phase2","phase3","phaseOther"],vm.oneComposSelected="",vm.onePhaseSelected="",vm.updateSummary=0,vm.errorMsg="",vm.requiredOnly=[{type:"required",displayAlias:"MSG_ERR_MAND"}],vm.oneComposError=[{type:"required",displayAlias:"MSG_ERR_MAND"}],vm.onePhaseError=[{type:"required",displayAlias:"MSG_ERR_MAND"}],vm.$onInit=function(){_setIdNames()},vm.$onChanges=function(changes){changes.userType&&(vm.formType=changes.userType.currentValue),changes.record&&(vm.ctaModel=changes.record.currentValue),changes.isIncomplete&&(vm.setAsIncomplete=changes.isIncomplete.currentValue),changes.configureIdField&&_setConfigItems(changes.configureIdField.currentValue),changes.showErrors&&(vm.showDetailErrors=changes.showErrors.currentValue)},vm.isPhaseOther=function(){return!!vm.ctaModel&&vm.ctaModel.phase.phaseOther},vm.isCompositionSelected=function(){for(var composSelected=!1,i=0;i<vm.compositionKeys.length;i++)if(vm.ctaModel.composition[vm.compositionKeys[i]]===!0){composSelected=!0;break}return vm.oneComposSelected="",composSelected?(vm.oneComposSelected=!0,!0):(vm.oneComposSelected=!1,!1)},vm.isPhaseSelected=function(){for(var phaseSelected=!1,i=0;i<vm.phaseKeys.length;i++)if(vm.ctaModel.phase[vm.phaseKeys[i]]===!0){phaseSelected=!0;break}return vm.onePhaseSelected="",phaseSelected?(vm.onePhaseSelected=!0,!0):(vm.onePhaseSelected=!1,!1)},vm.isEmpty=function(aValue){return"undefined"==typeof aValue||null===aValue||""===aValue},vm.showError=function(ctrl){return!!ctrl&&(ctrl.$invalid&&ctrl.$touched||vm.showDetailErrors&&ctrl.$invalid)}}angular.module("clinicalTrial").component("cmpClinicalTrial",{templateUrl:"app/scripts/components/clinicalTrial/tpl-clinical-trial_20210704_1517.html",controller:ctaCtrl,controllerAs:"ctaCtrl",bindings:{record:"<",onUpdate:"&",updateErrorSummary:"&",isFileLoaded:"<",showErrors:"<",htIndxList:"<"}}),ctaCtrl.$inject=["$scope","$translate"]}(),function(){"use strict";angular.module("importerRecordModule",["hpfbConstants","dataLists","filterLists","errorMessageModule"])}(),function(){"use strict";function importerRecordController(getCountryAndProvinces,$translate,CANADA,USA,$scope){function _setIdNames(){var scopeId="_"+$scope.$id;vm.impId="importerid"+scopeId,vm.importerNameId="importer_company_name"+scopeId,vm.streetId="STREET"+scopeId,vm.cityId="CITY"+scopeId,vm.countryId="COUNTRY"+scopeId,vm.stateListId="province"+scopeId,vm.postalId="postal"+scopeId,vm.faxId="fax_number"+scopeId,vm.phoneNumberId="phoneNumber"+scopeId,vm.phoneExtId="phoneExt"+scopeId,vm.contactEmailId="contactEmail"+scopeId,vm.routingIdentifierId="routing_id"+scopeId,vm.co5aRefid="co5a_ref"+scopeId}var vm=this;vm.lang=$translate.proposedLanguage()||$translate.use(),vm.model={importerId:"",importerName:"",street:"",city:"",country:{id:"CAN",en:"Canada",fr:"Canada"},countryHtml:"Canada",countryDisplay:"CAN",stateLov:"",stateText:"",postalCode:"",phone:"",phoneExt:"",fax:"",email:"",routingId:""},vm.canadianPostalCodePattern="^(?!.*[DFIOQU])[A-VXYa-vxy][0-9][A-Za-z] ?[0-9][A-Za-z][0-9]$",vm.updateSummary=0,vm.countryList=getCountryAndProvinces.getCountries(),vm.fdId="",vm.phoneReg=/^([0-9]{10,25}$)/,vm.faxReg=/^([0-9]{10,25}$)/,vm.routingIdReg=/^([0-9A-Za-z-]*$)/,vm.emailReg=/^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$/,vm.requiredOnly=[{type:"required",displayAlias:"MSG_ERR_MAND"}],vm.postalErrorList=[{type:"required",displayAlias:"MSG_ERR_MAND"},{type:"pattern",displayAlias:"MSG_ERR_POSTAL"}],vm.showDetailErrors=!1,vm.min5Error=[{type:"required",displayAlias:"MSG_ERR_MAND"},{type:"minlength",displayAlias:"MSG_LENGTH_MIN5"}],vm.emailError=[{type:"required",displayAlias:"MSG_ERR_MAND"},{type:"pattern",displayAlias:"MSG_ERR_EMAIL_FORMAT"}],vm.phoneError=[{type:"required",displayAlias:"MSG_ERR_MAND"},{type:"pattern",displayAlias:"MSG_ERR_PHONE_FORMAT"}],vm.faxError=[{type:"required",displayAlias:"MSG_ERR_MAND"},{type:"pattern",displayAlias:"MSG_ERR_FAX_FORMAT"}],vm.routingIdError=[{type:"pattern",displayAlias:"MSG_ERR_PHONE_FORMAT"}],vm.$onInit=function(){vm.showDetailErrors=!1,vm.record&&(vm.model=vm.record,vm.provListLabel=getProvinceListLabel(),vm.postalLabel=getPostalLabel(),vm.provinces=getProvinceStateList()),_setIdNames()},vm.$onChanges=function(changes){changes.record&&changes.record.currentValue&&(vm.model=changes.record.currentValue),changes.showErrors&&(vm.showDetailErrors=changes.showErrors.currentValue)},vm.updateErrorSummaryState=function(){vm.updateSummary=vm.updateSummary+1},vm.postalCodeChanged=function(){var postal=vm.model.postalCode;postal&&(postal=postal.toUpperCase(),6==postal.length&&(postal=postal.substring(0,3)+" "+postal.substring(3,postal.length)),vm.model.postalCode=postal,vm.updateErrorSummaryState())};var getProvinceStateList=function(){return getCountryAndProvinces.getProvinces()},getProvinceListLabel=function(){var label=vm.model.country.id===USA?"STATE":"PROVINCE";return label},getPostalLabel=function(){var label=vm.model.country.id===USA?"ZIP":"POSTAL";return label};vm.saveRecord=function(){vm.importerForm.$valid?(vm.model.importerId="importerid_"+$scope.$id,vm.record&&vm.onUpdate({importer:vm.model}),vm.importerForm.$setPristine(),vm.showDetailErrors=!1,vm.updateErrorSummaryState(),vm.model.focusImporterId=!1):(vm.showDetailErrors=!0,vm.updateErrorSummaryState())},vm.deleteRecord=function(){vm.onDelete({id:vm.model.importerId})},vm.showError=function(ctrl){return!!ctrl&&(ctrl.$invalid&&ctrl.$touched||ctrl.$invalid&&vm.showDetailErrors)}}angular.module("importerRecordModule").component("cmpImporterRecord",{templateUrl:"app/scripts/components/importerRecord/tpl-importer-record_20210704_1517.html",controller:importerRecordController,controllerAs:"importerRecCtrl",bindings:{record:"<",onDelete:"&",onUpdate:"&",showErrors:"<",isFocus:"<",cancelFocus:"&",htIndxList:"<",updateErrorSummary:"&"}}),importerRecordController.$inject=["getCountryAndProvinces","$translate","CANADA","USA","$scope"]}(),function(){"use strict";angular.module("importerListModule",["dataLists","importerRecordModule","ui.select","hpfbConstants"])}(),function(){"use strict";function importerListController($filter,$scope){function setRecord(value){vm.selectRecord=value}function _setIdNames(){"_"+$scope.$id}var vm=this;vm.model={},vm.resetToCollapsed=!0,vm.showDetailErrors=!1,vm.selectRecord=-1,vm.isFocus=!1,vm.columnDef=[{label:"IMPORTER_COMPANY_NAME",binding:"importerName",width:"40",isHtml:"true"},{label:"STREET",binding:"street",width:"50",isHtml:"true"}],vm.emptyModel={importerId:"",importerName:"",street:"",city:"",country:{id:"CAN",en:"Canada",fr:"Canada"},countryHtml:"Canada",countryDisplay:"CAN",stateLov:"",stateText:"",postalCode:"",phone:"",phoneExt:"",fax:"",email:"",routingId:""},vm.$onInit=function(){_setIdNames(),vm.showDetailErrors=!1,angular.isUndefined(vm.model.list)&&(vm.model.list=[])},vm.$onChanges=function(changes){changes.listItems&&(vm.model.list=changes.listItems.currentValue),changes.showErrors&&(vm.showDetailErrors=changes.showErrors.currentValue)},vm.addNew=function(){var item=angular.copy(vm.emptyModel);vm.model.list.push(item),setRecord(-1),vm.resetToCollapsed=!vm.resetToCollapsed,setRecord(vm.model.list.length-1),vm.onUpdate({list:vm.model.list})},vm.saveRecord=function(importer){var idx=vm.model.list.indexOf($filter("filter")(vm.model.list,{importerId:importer.importerId},!0)[0]);idx<0||(vm.selectRecord=-1,vm.resetToCollapsed=!vm.resetToCollapsed,vm.model.list[idx]=importer,vm.onUpdate({list:vm.model.list}))},vm.deleteRecord=function(_id){var idx=vm.model.list.indexOf($filter("filter")(vm.model.list,{importerId:_id},!0)[0]);idx<0||(vm.model.list.splice(idx,1),vm.onUpdate({list:vm.model.list}))},vm.disableAddButton=function(){return 0!==vm.model.list.length&&vm.importerListForm.$invalid},vm.setFocus=function(){vm.isFocus=!0},vm.cancelFocus=function(){vm.isFocus=!1}}angular.module("importerListModule").component("cmpImporterList",{templateUrl:"app/scripts/components/importerList/tpl-importer-list_20210704_1517.html",controller:importerListController,controllerAs:"importerListCtrl",bindings:{listItems:"<",onUpdate:"&",onDelete:"&",showErrors:"<",htIndxList:"<",updateErrorSummary:"&"}}),importerListController.$inject=["$filter","$scope"]}(),function(){"use strict";angular.module("applicationInfo",["numberFormat","hpfbConstants","errorSummaryModule","errorMessageModule"])}(),function(){"use strict";function ApplInfoCtrl(NEW_TYPE,AMEND_TYPE,APPROVED_TYPE,EXTERNAL_TYPE,$scope,$translate){function _setConfigItems(configJson){vm.fieldIdLabel=configJson.label,vm.fieldLength=configJson.fieldLength,vm.tagName=configJson.tagName,configJson.minFieldLength?vm.minFieldLength=configJson.minFieldLength:vm.minFieldLength=configJson.fieldLength,vm.errorMsg=configJson.errorMsg,configJson.minErrorMsg?vm.minErrorMsg=configJson.minErrorMsg:vm.minErrorMsg=configJson.errorMsg,configJson.isNumber&&(vm.isNumber=configJson.isNumber),vm.isDossier=configJson.isDossier,angular.isUndefined(vm.isDossier)&&(vm.isDossier=!1)}function _setIdNames(){var scopeId="_"+$scope.$id;vm.fieldId="fieldId"+scopeId,vm.reasonAmend="reason_amend"+scopeId,vm.compId="company_id"+scopeId,vm.dossierId="dossier_id"+scopeId}var vm=this;vm.applTypes=[NEW_TYPE,AMEND_TYPE,APPROVED_TYPE],vm.formType=EXTERNAL_TYPE,vm.infoModel={applicationType:"NEW",applicationTypeText:"",enrolmentVersion:"0.0",dateSaved:"",reasonAmend:""},vm.fieldIdLabel="",vm.minFieldLength="",vm.isNumber=!1,vm.fieldLength="",vm.tagName="fieldId",vm.setAsIncomplete=!0,vm.errorMsg="",vm.maxErrorMsg="",vm.isDossier=!1,vm.isNumber=!1,vm.isAmend=!1,vm.requiredOnly=[{type:"required",displayAlias:"MSG_ERR_MAND"}],vm.min6Error=[{type:"required",displayAlias:"MSG_ERR_MAND"},{type:"minlength",displayAlias:"MSG_LENGTH_MIN5"}],vm.min7Error=[{type:"required",displayAlias:"MSG_ERR_MAND"},{type:"minlength",displayAlias:"MSG_LENGTH_MIN5"},{type:"pattern",displayAlias:"MSG_FORMAT_CHAR_6DIGITS"}],vm.$onInit=function(){vm.infoModel.applicationTypeText=$translate.instant(vm.infoModel.applicationType),_setIdNames()},vm.$onChanges=function(changes){changes.userType&&(vm.formType=changes.userType.currentValue),changes.record&&(vm.infoModel=changes.record.currentValue,vm.infoModel.applicationType===AMEND_TYPE?vm.isAmend=!0:vm.infoModel.applicationType!==APPROVED_TYPE||vm.isEmpty(vm.infoModel.reasonAmend)?vm.isAmend=!1:vm.isAmend=!0),changes.isIncomplete&&(vm.setAsIncomplete=changes.isIncomplete.currentValue),changes.configureIdField&&_setConfigItems(changes.configureIdField.currentValue),changes.showErrorSummary&&(vm.showSummary=changes.showErrorSummary.currentValue,vm.updateErrorSummaryState())},vm.showAmendMsg=function(){return!!vm.record&&vm.record.applicationType===AMEND_TYPE},vm.showAmendButton=function(){return!vm.isHide},vm.isExtern=function(){return vm.formType===EXTERNAL_TYPE},vm.setAmendState=function(){vm.setType({type:AMEND_TYPE}),vm.isAmend=!0},vm.isEmpty=function(aValue){return"undefined"==typeof aValue||null===aValue||""===aValue},vm.showError=function(ctrl){return!!ctrl&&(ctrl.$invalid&&ctrl.$touched||vm.showSummary&&ctrl.$invalid)}}angular.module("applicationInfo").component("cmpApplicationInfo",{templateUrl:"app/scripts/components/applicationInfo/tpl-application-info_20210704_1517.html",controller:ApplInfoCtrl,controllerAs:"infoCtrl",bindings:{record:"<",userType:"<",isIncomplete:"<",isHide:"<",configureIdField:"<",setType:"&",indexList:"<"}}),ApplInfoCtrl.$inject=["NEW_TYPE","AMEND_TYPE","APPROVED_TYPE","EXTERNAL_TYPE","$scope","$translate"]}(),function(){"use strict";var dependencies=["tabsModule","drugUseModule","scheduleAModule","importerListModule","speciesListModule","clinicalTrial","disinfectantTypeModule","dossierDataLists","dataLists","filterLists","fileIO","applicationInfoService","applicationInfo","ui.bootstrap","numberFormat","updateLang","ngMessages","ngAria","drugProductService","productInfoHelpText","ngSanitize","errorSummaryModule","errorMessageModule","alertModule"];angular.module("drugProductModule",dependencies)}(),function(){"use strict";function drugProductCtrl($scope,hpfbFileProcessing,ApplicationInfoService,DrugProductService,DossierLists,getRoleLists,YES,PROD,INTERNAL_TYPE,EXTERNAL_TYPE,APPROVED_TYPE,FRENCH,$translate,$anchorScroll,$location){function _loadFileContent(fileContent){if(fileContent){var resultJson=fileContent.jsonResult;resultJson&&(vm.model=vm.drugProductService.loadFromFile(resultJson),vm.dossierTypeChange(),vm.drugUseUpdate(),vm.model.drugProduct&&vm.setSceduleFieldset(),vm.drugProdForm.$setDirty()),getAppendix4Errors(),_setComplete(),vm.isFileLoaded=!0}}function getAppendix4Errors(){var appendixCheck=vm.drugProductService.getMissingAppendix4(vm.model);vm.errorAppendix=appendixCheck.missing,vm.extraAppendix=appendixCheck.extra,vm.appendixMissingError(),vm.appendixExtraError()}function _setComplete(){vm.isIncomplete=!vm.model.dossierID}function _transformFile(){return updateDate(),vm.isExtern()?vm.model.enrolmentVersion=vm.applicationInfoService.incrementMinorVersion(vm.model.enrolmentVersion):vm.drugProdForm.$pristine||(vm.model.enrolmentVersion=vm.applicationInfoService.incrementMajorVersion(vm.model.enrolmentVersion)),
vm.drugProductService.formDataToOutput(vm.model)}function _createFilename(){var date=new Date,filename="pi-"+vm.model.dossierID,month=date.getMonth()+1,day=date.getDate(),hours=date.getHours(),minutes=date.getMinutes(),separator="-";return month<10&&(month="0"+month),day<10&&(day="0"+day),hours<10&&(hours="0"+hours),minutes<10&&(minutes="0"+minutes),filename=filename+separator+date.getFullYear()+separator+month+separator+day+separator+hours+minutes,filename.toLowerCase()}function updateDate(){vm.model&&(vm.model.dateSaved=vm.applicationInfoService.getTodayDate())}function getAnimalIngredients(formulations){var yesValue="Y",allAnimalSourcedNames=[];if(void 0===formulations)return allAnimalSourcedNames;for(var i=0;i<formulations.length;i++){var oneFormulation=formulations[i];if(oneFormulation.activeIngList)for(var j=0;j<oneFormulation.activeIngList.length;j++){var oneActive=oneFormulation.activeIngList[j];oneActive&&oneActive.humanAnimalSourced===yesValue&&allAnimalSourcedNames.indexOf(oneActive.ingLabel)<0&&allAnimalSourcedNames.push(oneActive.ingLabel)}if(oneFormulation.nMedIngList)for(var j=0;j<oneFormulation.nMedIngList.length;j++){var oneActive=oneFormulation.nMedIngList[j];oneActive.humanAnimalSourced===yesValue&&allAnimalSourcedNames.indexOf(oneActive.ingName)<0&&allAnimalSourcedNames.push(oneActive.ingName)}if(oneFormulation.animalHumanMaterials)for(var j=0;j<oneFormulation.animalHumanMaterials.length;j++){var oneActive=oneFormulation.animalHumanMaterials[j];allAnimalSourcedNames.indexOf(oneActive.ingredientName)<0&&allAnimalSourcedNames.push(oneActive.ingredientName)}}return allAnimalSourcedNames}function _setIdNames(){var scopeId="_"+$scope.$id;vm.formId="drug_product_form"+scopeId,vm.dossierId="dossier_id"+scopeId,vm.compId="company_id"+scopeId,vm.typeId="dossier_type"+scopeId,vm.thirdId="signed_third"+scopeId,vm.prodNameId="prod_name"+scopeId,vm.properNameId="proper_name"+scopeId,vm.isRefId="is_cdn_ref"+scopeId,vm.noTheraId="no_theraVal"+scopeId,vm.drugUseId="drug_use"+scopeId,vm.propIndicationId="prop_Indication"+scopeId,vm.fsType="fs_type"+scopeId,vm.scheduleSelectedId="schedule_presc_status"+scopeId,vm.disiTypeId="disinfectant_type"+scopeId,vm.privacyStatementID="privacy_statement"+scopeId}function goToErrorSummary(){var masterError=angular.element(document.querySelector("#master-error"));masterError&&($location.hash("master-error"),$anchorScroll())}var vm=this;vm.showContent=_loadFileContent,vm.applicationInfoService=new ApplicationInfoService,vm.drugProductService=new DrugProductService,vm.userType=EXTERNAL_TYPE,vm.saveXMLLabel="APPROVE_FINAL",vm.yesNoList=DossierLists.getYesNoList(),vm.yesValue=YES,vm.isForProd=PROD===DossierLists.getEnv(),vm.formTypeList=getRoleLists.getFormTypes(vm.isForProd),vm.htIndxList=vm.drugProductService.helpTextSequences,vm.isIncomplete=!0,vm.formAmend=!1,vm.errorAppendix=[],vm.extraAppendix=[],vm.noThera="",vm.updateSummary=0,vm.showSummary=!1,vm.isFileLoaded=!1,vm.focusSummary=0,vm.exclusions={"formulCtrl.formulationsForm":"tab_0","contactRec.contactRecForm":"true","ap4Ctrl.appendixForm":"tab_1","refProdCtrl.productDetailsForm":"true","fake.appendix_extra_error":"true","fake.appendix_missing_error":"true"},vm.transcludeList={},vm.alias={no_theraVal:{type:"element",target:"addTheraClass"},one_rep:{type:"element",target:"addRepContactBtn"},msg_err_one_cdn_ref:{type:"elementNoId",target:"addRefProductBtn"},msg_one_scheda:{type:"fieldset",parent:"fs_schedAMissing"},disi_type_missing:{type:"fieldset",parent:"fs_disi_type_missing"},no_cta_country:{type:"element",target:"list_cta_country"},postal:{type:"pattern",errorType:"MSG_ERR_POSTAL"},contactEmail:{type:"pattern",errorType:"MSG_ERR_EMAIL_FORMAT"},phoneNumber:{type:"pattern",errorType:"MSG_ERR_PHONE_FORMAT"},fax_number:{type:"pattern",errorType:"MSG_ERR_FAX_FORMAT"},dossier_id:{type:"pattern",errorType:"FORMAT_TYPE_PATTERN"},VET_DAYS:{type:"max",errorType:"MSG_DAY_MAX"},VET_HOURS:{type:"max",errorType:"MSG_HOUR_MAX"}},vm.requiredOnly=[{type:"required",displayAlias:"MSG_ERR_MAND"}],vm.min5Error=[{type:"required",displayAlias:"MSG_ERR_MAND"},{type:"minlength",displayAlias:"MSG_LENGTH_MIN5"}],vm.min7Error=[{type:"required",displayAlias:"MSG_ERR_MAND"},{type:"minlength",displayAlias:"FORMAT_TYPE_MINLENGTH"},{type:"pattern",displayAlias:"FORMAT_TYPE_PATTERN"}],vm.alerts=[!1,!1,!1,!1,!1,!1,!1,!1,!1,!1,!1,!1],vm.lang=$translate.proposedLanguage()||$translate.use(),vm.rootTag="",vm.drugUseList=[],vm.disinfectantTypeList=[],vm.extraAppendixModel="none",vm.missingAppendixModel="none",vm.$onInit=function(){vm.showSummary=!1,vm.defaultDrugUseList=DossierLists.getDrugUseList(),vm.vetDrugUseList=DossierLists.getVetDrugUseList(),vm.ctaDrugUseList=DossierLists.getCTADrugUseList(),vm.drugUseList=vm.defaultDrugUseList,vm.disinfectantTypeList=DossierLists.getDisinfectantTypeList(),_setIdNames(),vm.model=vm.drugProductService.getDefaultObject(),vm.rootTag=vm.drugProductService.getRootTagName(),vm.setVisibleTabIndex=-1,$("#privacyNoticeStatement").trigger("wb-init.wb-details"),$("#securityDisclaimer").trigger("wb-init.wb-details"),$("#footnoteInstruction").trigger("wb-init.wb-details")},vm.$onChanges=function(changes){},vm.updateErrorSummaryState=function(){vm.updateSummary=vm.updateSummary+1},vm.appendixMissingError=function(){return!!(vm.errorAppendix&&vm.errorAppendix.length>0)&&(vm.missingAppendixModel="",!0)},vm.appendixExtraError=function(){return!!(vm.extraAppendix&&vm.extraAppendix.length>0)&&(vm.extraAppendixModel="",!0)},vm.thirdPartySignedChanged=function(){return vm.model.drugProduct.thirdPartySigned===YES},vm.recordsChanged=function(){getAppendix4Errors()},vm.isRefProducts=function(){return vm.model.isRefProducts===YES||(vm.model.drugProduct.canRefProducts=[],!1)},vm.setApplicationType=function(value){vm.model.applicationType=value,vm.formAmend=vm.model.applicationType===vm.applicationInfoService.getAmendType()},vm.cdnRefUpdated=function(list){},vm.disableJSONSave=function(){return!vm.isExtern()},$scope.$watch("drugProdCtrl.drugProdForm.$error",function(){vm.updateErrorSummaryState()},!0),vm.isExtern=function(){return vm.userType===EXTERNAL_TYPE},vm.showErrors=function(){return vm.showSummary},vm.showError=function(ctrl){return!!ctrl&&(ctrl.$invalid&&ctrl.$touched||vm.showSummary&&ctrl.$invalid)},vm.isSchedA=function(){return!!(vm.model&&vm.model.drugProduct&&vm.drugProductService)&&(!!vm.model.drugProduct.isScheduleA||(vm.model.drugProduct.scheduleAGroup=vm.drugProductService.getDefaultScheduleA(),!1))},vm.isDisinfectant=function(){return!!(vm.model&&vm.model.drugProduct&&vm.model.drugProduct.drugUse)&&"DISINFECT"===vm.model.drugProduct.drugUse.id},vm.isNotCTA=function(){return!(!vm.model||!vm.model.dossierType)&&"D26"!==vm.model.dossierType},vm.isCTA=function(){return!(!vm.model||!vm.model.dossierType||"D26"!==vm.model.dossierType)||(vm.drugProductService&&(vm.model.clinicalTrial=vm.drugProductService.getEmptyCtaModel()),!1)},vm.isVet=function(){return!!(vm.model&&vm.model.drugProduct&&vm.model.drugProduct.drugUse&&"VET"===vm.model.drugProduct.drugUse.id)||(vm.model&&vm.model.drugProduct&&(vm.model.drugProduct.speciesRecord=[]),!1)},vm.drugUseUpdate=function(){vm.isDisinfectant()||(vm.model.drugProduct.disinfectantType={hospital:!1,foodProcessing:!1,medicalInstruments:!1,domestic:!1,barn:!1,institutionalIndustrial:!1,contactLens:!1})},vm.dossierTypeChange=function(){vm.model&&vm.model.dossierType&&"D26"===vm.model.dossierType?(vm.drugUseList=vm.ctaDrugUseList,vm.model.manu=!1,vm.model.mailling=!1,vm.model.thisActivity=!1,vm.model.importer=!1,vm.model.importerRecord=[]):vm.model&&vm.model.dossierType&&"D24"===vm.model.dossierType?(vm.drugUseList=vm.vetDrugUseList,vm.model.areDrugsImported=""):(vm.drugUseList=vm.defaultDrugUseList,vm.model.areDrugsImported="")},vm.onDisiTypeUpdate=function(newRole){var aRole={};angular.extend(aRole,newRole),vm.addressModel.addressRole=aRole,vm.addressRecForm.$valid?(vm.isDetailValid({state:!0}),vm.addressRecForm.$setPristine(),vm.onUpdate({rec:vm.addressModel}),vm.showSummary=!1,vm.errorSummaryUpdate()):(vm.showSummary=!0,vm.updateErrorSummaryState(),vm.focusOnSummary())},vm.updateImporterList=function(list){list&&(vm.model.importerRecord=list)},vm.updateSpeciesList=function(list){list&&(vm.model.drugProduct.speciesRecord=list)},vm.updateCTAInfo=function(record){record&&(vm.model.clinicalTrial=record)},vm.setSceduleFieldset=function(){vm.model.drugProduct.isScheduleC||vm.model.drugProduct.isScheduleD||vm.model.drugProduct.isPrescriptionDrugList||vm.model.drugProduct.isRegulatedCDSA||vm.model.drugProduct.isNonPrescriptionDrug||vm.model.drugProduct.isScheduleA?vm.model.drugProduct.scheduleSelected="scheduleSelected":vm.model.drugProduct.scheduleSelected=""},vm.updateSceduleFieldset=function(value){value?vm.model.drugProduct.scheduleSelected="scheduleSelected":vm.model.drugProduct.isScheduleC||vm.model.drugProduct.isScheduleD||vm.model.drugProduct.isPrescriptionDrugList||vm.model.drugProduct.isRegulatedCDSA||vm.model.drugProduct.isNonPrescriptionDrug||vm.model.drugProduct.isScheduleA||(vm.model.drugProduct.scheduleSelected="")},vm.saveJson=function(){var writeResult=_transformFile();hpfbFileProcessing.writeAsJson(writeResult,_createFilename(),vm.drugProductService.getRootTagName())},vm.saveXML=function(){if(vm.drugProdForm.$invalid)vm.showSummary=!0,vm.focusSummary++,vm.updateErrorSummaryState(),goToErrorSummary();else{var writeResult=_transformFile();hpfbFileProcessing.writeAsXml(writeResult,_createFilename(),vm.drugProductService.getRootTagName(),vm.drugProductService.getXSLFileName()),vm.drugProdForm.$setPristine(),vm.showSummary=!1}},vm.noTheraRecs=function(){return vm.model&&vm.model.drugProduct?vm.model.drugProduct.therapeutic&&0!==vm.model.drugProduct.therapeutic.length?(vm.noThera=vm.model.drugProduct.therapeutic.length,!1):(vm.noThera="",!0):(vm.noThera="",!1)},vm.addInstruct=function(value){angular.isUndefined(value)||value<vm.alerts.length&&(vm.alerts[value]=!0)},vm.closeAlert=function(value){angular.isUndefined(value)||value<vm.alerts.length&&(vm.alerts[value]=!1)},vm.isFrench=function(){return vm.lang===FRENCH},vm.selectTab=function(index){var temp={id:index};vm.setVisibleTabIndex=temp},vm.humanAnimalIngredientNameList=function(){return getAnimalIngredients(vm.model.drugProduct.formulations)}}angular.module("drugProductModule").component("cmpDrugProduct",{templateUrl:"app/scripts/components/drugProduct/tpl-drug-product_20210704_1517.html",controller:drugProductCtrl,controllerAs:"drugProdCtrl",bindings:{dossierRecordInput:"<",onUpdateDossier:"&",onDeleteDossier:"&",formType:"@",service:"<"}}),drugProductCtrl.$inject=["$scope","hpfbFileProcessing","ApplicationInfoService","DrugProductService","DossierLists","getRoleLists","YES","PROD","INTERNAL_TYPE","EXTERNAL_TYPE","APPROVED_TYPE","FRENCH","$translate","$anchorScroll","$location"]}(),function(){"use strict";angular.module("srcCountryRecordModule",["ui.select","hpfbConstants","errorMessageModule"])}(),function(){"use strict";function srcCountryRecordController($scope,$filter,$translate,UNKNOWN){function _setIdNames(){var scopeId="_"+$scope.$id;vm.countryId="country_name"+scopeId,vm.unknownCountryId="unknown_country_details"+scopeId,vm.countryListId="srcCountryList"+scopeId}var vm=this;vm.model={id:"",country:"",unknownCountryDetails:"",display:""},vm.countries=[],vm.onChangeCount=0,vm.lang=$translate.proposedLanguage()||$translate.use(),vm.showDetailErrors=!1,vm.requiredOnly=[{type:"required",displayAlias:"MSG_ERR_MAND"}],vm.srcCountryFilter="srcCountryRecCtrl.model.display",vm.$onInit=function(){vm.showDetailErrors=!1,vm.countryList=vm.updateCountryList(),_setIdNames()},vm.countryChanged=function(value){for(var found=!1,i=0;i<vm.countries.length;i++)if(vm.countries[i][vm.lang]===vm.model.display){vm.model.country=vm.countries[i],found=!0;break}found?(vm.countryList=vm.updateCountryList(),vm.updateRecord(),vm.clearFilter($scope),vm.isUnknown&&$("#"+vm.countryId).focus()):(vm.model.display="",vm.model.country&&(vm.model.country={}),vm.onError())},vm.$onChanges=function(changes){changes.countryList&&vm.onChangeCount<2&&(vm.countries=changes.countryList.currentValue),changes.record&&changes.record.currentValue&&(vm.model=changes.record.currentValue),changes.showErrors&&(vm.showDetailErrors=changes.showErrors.currentValue)},vm.saveRecord=function(){0!==vm.model.country.length&&0!==vm.model.unknownCountryDetails.lengh||(vm.showDetailErrors=!0),vm.countryChanged()&&(vm.countryList=vm.updateCountryList(),vm.updateRecord(),vm.clearFilter($scope))},vm.deleteRecord=function(){vm.onDelete({id:vm.model.id})},vm.showError=function(ctrl){return!!ctrl&&(""==vm.model.country&&""!=vm.model.display||(ctrl.$invalid&&ctrl.$touched||ctrl.$invalid&&vm.showDetailErrors))},vm.isUnknown=function(){return!(!vm.model||!vm.model.country)&&vm.model.country.id===UNKNOWN},vm.clearFilter=function($scope){$scope.srcCountryFilter=""}}angular.module("srcCountryRecordModule").config(function(uiSelectConfig){uiSelectConfig.theme="select2"}).component("cmpSrcCountryRecord",{templateUrl:"app/scripts/components/source-country-list/tpl-src-country-record_20210704_1517.html",controller:srcCountryRecordController,controllerAs:"srcCountryRecCtrl",bindings:{record:"<",onDelete:"&",showErrors:"<",countryList:"<",updateCountryList:"<",updateRecord:"&",onError:"&",fieldsetLabel:"@",isFocus:"<",cancelFocus:"&"}}),srcCountryRecordController.$inject=["$scope","$filter","$translate","UNKNOWN"]}(),function(){"use strict";angular.module("srcCountryListModule",["dataLists","srcCountryRecordModule","ui.select","hpfbConstants"])}(),function(){"use strict";function srcCountryListController($filter,getCountryAndProvinces,UNKNOWN,$scope){function setUnknownCountryState(isUnknown){isUnknown?(vm.countryList=vm.baseCountries,vm.hasUnknown=!0,vm.columnDef=[{label:vm.fieldLabel,binding:"display",width:"50"},{label:"UNKNOWN_COUNTRY_DETAILS",binding:"unknownCountryDetails",width:"50",isHtml:"true"}]):(vm.countryList=vm.countries,vm.hasUnknown=!1,vm.emptyModel={id:"",country:"",unknownCountryDetails:"",display:""},vm.columnDef=[{label:vm.fieldLabel,binding:"display",width:"100"}])}function setRecord(value){vm.selectRecord=value}function getListMaxID(){var out=0,list=vm.model.list;if(list)for(var i=0;i<list.length;i++)list[i].id>out&&(out=list[i].id);return out}function _setIdNames(){var scopeId="_"+$scope.$id;vm.noCountryId="no_country"+scopeId}var vm=this,countries=getCountryAndProvinces.getCountries(),unknownRec=getCountryAndProvinces.getUnknownCountryRecord();vm.baseCountries=angular.copy(countries),vm.baseCountries.unshift(unknownRec),vm.countryList="",vm.model={},vm.isDetailValid=!0,vm.resetToCollapsed=!0,vm.noCountries="",vm.showDetailErrors=!1,vm.requiredFlag=!0,vm.selectRecord=-1,vm.isFocus=!1,vm.columnDef=[{label:vm.fieldLabel,binding:"display",width:"100"}],vm.hasUnknown=!1,vm.emptyModel={id:"",country:"",unknownCountryDetails:"",display:""},vm.$onInit=function(){_setIdNames(),vm.showDetailErrors=!1,angular.isUndefined(vm.model.list)&&(vm.model.list=[]),angular.isUndefined(vm.countryList)&&setUnknownCountryState(vm.withUnknown),vm.countryList=vm.updateCountryList()},vm.$onChanges=function(changes){changes.withUnknown&&setUnknownCountryState(changes.withUnknown.currentValue),changes.listItems&&(vm.model.list=changes.listItems.currentValue),changes.isFileLoaded&&changes.isFileLoaded.currentValue&&(vm.requiredFlag=!1)},vm.$postLink=function(){vm.isFileLoaded||vm.addNew()},vm.addNew=function(){var item=(getListMaxID(),angular.copy(vm.emptyModel));item.display="",item.id=getListMaxID()+1,vm.model.list.push(item),vm.resetToCollapsed=!vm.resetToCollapsed,setRecord(vm.model.list.length-1),vm.onUpdate({list:vm.model.list}),vm.countryList=vm.updateCountryList()},vm.deleteRecord=function(_id){var aList=vm.deleteRecFromList(vm.model.list,_id);vm.updateCountryList(),vm.onUpdate({list:aList}),vm.requiredFlag=!1},vm.deleteRecFromList=function(_list,_id){var idx=_list.indexOf($filter("filter")(_list,{id:_id},!0)[0]);return idx>=0&&_list.splice(idx,1),_list},vm.updateCountryList=function(){var base=angular.copy(vm.baseCountries);if(vm.model.list&&vm.model.list.length>0){for(var idx,j=0;j<vm.model.list.length;j++)vm.model.list[j].country&&vm.model.list[j].country.id&&vm.model.list[j].country.id!==UNKNOWN&&(idx=base.indexOf($filter("filter")(base,{id:vm.model.list[j].country.id},!0)[0]),idx>=0&&base.splice(idx,1));return vm.countryList=base,base}return null},vm.noCountry=function(){return vm.model.list&&0!==vm.model.list.length?(vm.noCountries="values",!1):(vm.noCountries="",!0)},vm.disableAddButton=function(){return!vm.noCountry()&&vm.countryListForm.$invalid},vm.updateRecord=function(){vm.selectRecord=-1,vm.requiredFlag=!1,vm.resetToCollapsed=!vm.resetToCollapsed},vm.setFocus=function(){vm.isFocus=!0},vm.cancelFocus=function(){vm.isFocus=!1}}angular.module("srcCountryListModule").component("cmpSrcCountryList",{templateUrl:"app/scripts/components/source-country-list/tpl-src-country-list_20210704_1517.html",controller:srcCountryListController,controllerAs:"srcCountryListCtrl",bindings:{withUnknown:"<",listItems:"<",onUpdate:"&",onDelete:"&",showErrors:"&",isFileLoaded:"<",fieldLabel:"@",updateErrorSummary:"&"}}),srcCountryListController.$inject=["$filter","getCountryAndProvinces","UNKNOWN","$scope"]}(),function(){"use strict";angular.module("countryRecordModule",["ui.select","hpfbConstants","errorMessageModule"])}(),function(){"use strict";function countryRecordController($scope,$filter,$translate,UNKNOWN){function _setIdNames(){var scopeId="_"+$scope.$id;vm.countryId="country_name"+scopeId,vm.unknownCountryId="unknown_country_details"+scopeId,vm.countryListId="countryListId"+scopeId}var vm=this;vm.model={id:"",country:"",unknownCountryDetails:"",display:""},vm.countries=[],vm.onChangeCount=0,vm.lang=$translate.proposedLanguage()||$translate.use(),vm.showDetailErrors=!1,vm.requiredOnly=[{type:"required",displayAlias:"MSG_ERR_MAND"}],vm.countryFilter="countryRecCtrl.model.display",vm.$onInit=function(){vm.showDetailErrors=!1,_setIdNames(),vm.countryList=vm.updateCountryList()},vm.countryChanged=function(){for(var found=!1,i=0;i<vm.countries.length;i++)if(vm.countries[i][vm.lang]===vm.model.display){vm.model.country=vm.countries[i],found=!0;break}return found||(vm.model.display="",vm.model.country={},vm.showDetailErrors=!0),found},vm.$onChanges=function(changes){changes.countryList&&(vm.countries=changes.countryList.currentValue),changes.record&&changes.record.currentValue&&(vm.model=changes.record.currentValue),changes.showErrors&&(vm.showDetailErrors=changes.showErrors.currentValue)},vm.saveRecord=function(){vm.countryChanged()&&(vm.countryList=vm.updateCountryList(),vm.updateRecord(),vm.clearFilter($scope))},vm.deleteRecord=function(){vm.clearFilter($scope),vm.onDelete({id:vm.model.id})},vm.showError=function(ctrl){return!!ctrl&&(""==vm.model.country&&""!=vm.model.display||(ctrl.$invalid&&ctrl.$touched||ctrl.$invalid&&vm.showDetailErrors))},vm.isUnknown=function(){return!(!vm.model||!vm.model.country)&&vm.model.country.id===UNKNOWN},vm.clearFilter=function($scope){$scope.countryFilter=""},vm.isRequired=function(){return""==vm.model.country?"":vm.model.display}}angular.module("countryRecordModule").config(function(uiSelectConfig){uiSelectConfig.theme="select2"}).component("cmpCountryRecord",{templateUrl:"app/scripts/components/country-list/tpl-country-record_20210704_1517.html",controller:countryRecordController,controllerAs:"countryRecCtrl",bindings:{record:"<",onDelete:"&",showErrors:"<",countryList:"<",updateCountryList:"<",updateRecord:"&",onError:"&",fieldsetLabel:"@",isFocus:"<",cancelFocus:"&"}}),countryRecordController.$inject=["$scope","$filter","$translate","UNKNOWN"]}(),function(){"use strict";angular.module("countryListModule",["dataLists","countryRecordModule","ui.select","hpfbConstants"])}(),function(){"use strict";function countryListController($filter,getCountryAndProvinces,UNKNOWN,$scope){function setUnknownCountryState(isUnknown){if(isUnknown){var unknownRec=getCountryAndProvinces.getUnknownCountryRecord();vm.countries.unshift(unknownRec),vm.countryList=vm.countries,vm.hasUnknown=!0,vm.columnDef=[{label:vm.fieldLabel,binding:"display",width:"50"},{label:"UNKNOWN_COUNTRY_DETAILS",binding:"unknownCountryDetails",width:"50",isHtml:"true"}]}else vm.countryList=vm.countries,vm.hasUnknown=!1,vm.emptyModel={id:"",country:"",unknownCountryDetails:"",display:""},vm.columnDef=[{label:vm.fieldLabel,binding:"display",width:"100"}]}function setRecord(value){vm.selectRecord=value}function getListMaxID(){var out=0,list=vm.model.list;if(list)for(var i=0;i<list.length;i++)list[i].id>out&&(out=list[i].id);return out}function _setIdNames(){var scopeId="_"+$scope.$id;vm.noCountryId="no_country"+scopeId}var vm=this;vm.baseCountries=getCountryAndProvinces.getCountries(),vm.countries=angular.copy(vm.baseCountries),vm.countryList="",vm.model={},vm.isDetailValid=!0,vm.resetToCollapsed=!0,vm.noCountries="",vm.showDetailErrors=!1,vm.requiredFlag=!0,vm.selectRecord=-1,vm.isFocus=!1,vm.columnDef=[{label:vm.fieldLabel,binding:"display",width:"100"}],vm.hasUnknown=!1,vm.emptyModel={id:"",country:"",unknownCountryDetails:"",display:""},vm.$onInit=function(){_setIdNames(),vm.showDetailErrors=!1,angular.isUndefined(vm.model.list)&&(vm.model.list=[]),angular.isUndefined(vm.countryList)&&setUnknownCountryState(vm.withUnknown),vm.countryList=vm.updateCountryList()},vm.$onChanges=function(changes){changes.withUnknown,changes.listItems&&(vm.model.list=changes.listItems.currentValue),changes.showErrors&&(vm.showDetailErrors=changes.showErrors.currentValue),changes.isFileLoaded&&changes.isFileLoaded.currentValue&&(vm.requiredFlag=!1)},vm.$postLink=function(){vm.isFileLoaded||(vm.requiredFlag=!0,vm.addNew())},vm.addNew=function(){var item=(getListMaxID(),angular.copy(vm.emptyModel));item.display="",item.id=getListMaxID()+1,vm.model.list.push(item),vm.resetToCollapsed=!vm.resetToCollapsed,setRecord(vm.model.list.length-1),vm.onUpdate({list:vm.model.list}),vm.countryList=vm.updateCountryList()},vm.deleteRecord=function(_id){var aList=vm.deleteRecFromList(vm.model.list,_id);vm.updateCountryList(),vm.onUpdate({list:aList}),vm.updateRecord()},vm.deleteRecFromList=function(_list,_id){var idx=_list.indexOf($filter("filter")(_list,{id:_id},!0)[0]);return idx>=0&&_list.splice(idx,1),_list},vm.updateCountryList=function(){var base=angular.copy(vm.baseCountries);if(vm.model.list&&vm.model.list.length>0){for(var idx,j=0;j<vm.model.list.length;j++)vm.model.list[j].country&&vm.model.list[j].country.id&&(idx=base.indexOf($filter("filter")(base,{id:vm.model.list[j].country.id},!0)[0]),idx>=0&&base.splice(idx,1));return vm.countryList=base,base}return null},vm.noCountry=function(){return vm.model.list&&0!==vm.model.list.length&&""!=vm.model.list[0].country?(vm.noCountries="values",!1):(vm.noCountries="",!0)},vm.disableAddButton=function(){return!vm.noCountry()&&vm.countryListForm.$invalid},vm.updateRecord=function(){vm.selectRecord=-1,vm.requiredFlag=!1,vm.resetToCollapsed=!vm.resetToCollapsed},vm.onError=function(){""==vm.model.list[0].country&&(vm.resetToCollapsed=!0)},vm.setFocus=function(){vm.isFocus=!0},vm.cancelFocus=function(){vm.isFocus=!1}}angular.module("countryListModule").component("cmpCountryList",{templateUrl:"app/scripts/components/country-list/tpl-country-list_20210704_1517.html",controller:countryListController,controllerAs:"countryListCtrl",bindings:{withUnknown:"<",listItems:"<",onUpdate:"&",onDelete:"&",showErrors:"<",fieldLabel:"@",isFileLoaded:"<",updateErrorSummary:"&",addButtonLabel:"@"}}),countryListController.$inject=["$filter","getCountryAndProvinces","UNKNOWN","$scope"]}(),function(){"use strict";angular.module("checkBoxListModule",[])}(),function(){"use strict";function checkBoxListCtrl(){var self=this;self.numberColumns=4,self.colWidth=3,self.$onInit=function(){},self.$onChanges=function(changes){changes.listItems&&(self.currentModel=changes.listItems.currentValue),changes.numberCols&&changes.numberCols.currentValue&&(self.numberColumns=changes.numberCols.currentValue,self.colWidth=Math.ceil(12/self.numberColumns))},self.someSelected=function(){var object=self.roleModel;return!!object&&Object.keys(object).some(function(key){return object[key]})},self.updateState=function(item){item.value||(item.value=!1,item.hasOtherDetails&&(item.otherText=""))}}angular.module("checkBoxListModule").component("cmpCheckboxList",{templateUrl:"app/scripts/components/checkbox-list/tpl-checkbox-list_20210704_1517.html",controller:checkBoxListCtrl,controllerAs:"chkl",bindings:{title:"@",commonName:"@",listItems:"<",numberCols:"@",onUpdate:"&"}})}(),function(){"use strict";angular.module("tissuesFluidsList",["tissuesFluidsRecord","expandingTable","errorSummaryModule","errorMessageModule"])}(),function(){"use strict";function tissuesFluidsListController($filter,$scope){function resetMe(){vm.requiredFlag=!1,vm.resetToCollapsed=!vm.resetToCollapsed}function getMaxID(){for(var id=0,i=0;i<vm.model.tissuesFluidsList.length;i++)vm.model.tissuesFluidsList[i].id>id&&(id=vm.model.tissuesFluidsList[i].id);return id}function _setIdNames(){var scopeId="_"+$scope.$id;vm.tissuesListFormRecordId="tissueListForm"+scopeId,vm.oneTissueId="no_tissue"+scopeId,vm.addTissuesRecId="addTissuesRec"+scopeId}var vm=this;vm.selectRecord=-1,vm.isDetailValid=!0,vm.resetToCollapsed=!0,vm.oneRecord="",vm.addBtn=0,vm.model={},vm.model.tissuesFluidsList=[],vm.columnDef=[{label:"SYSTEM_TYPE",binding:"systemType",width:"20"},{label:"SYSTEM_DETAILS",binding:"detailsConcat",width:"40",isHtml:"true"},{label:"SYSTEM_OTHER",binding:"otherDetails",width:"40",isHtml:"true"}],vm.exclusions={},vm.transcludeList={"cmp-tissues-fluids-record":"true"},vm.alias={no_tissue:{type:"elementnoid",target:"list_tissue"}},vm.updateSummary=0,vm.$onInit=function(){vm.isDetailValid=!0,vm.resetToCollapsed=!0,_setIdNames(),vm.noTissueRecs(),vm.transcludeList={"cmp-tissues-fluids-record":"true"}},vm.getRequiredFlag=function(){return vm.model.tissuesFluidsList.length<1},vm.requiredFlag=vm.getRequiredFlag(),vm.$onChanges=function(changes){changes.records&&(vm.model.tissuesFluidsList=changes.records.currentValue),changes.isFileLoaded&&changes.isFileLoaded.currentValue&&(vm.requiredFlag=!1,vm.oneRecord="selected")},vm.$postLink=function(){vm.isFileLoaded||vm.addNew()},vm.setValid=function(value){vm.isDetailValid=value},vm.addNew=function(){var maxID=getMaxID(),item={id:maxID+1,systemType:"",detailsConcat:"",system:{},otherDetails:""};vm.addBtn++,vm.model.tissuesFluidsList.push(item),vm.setRecord(vm.model.tissuesFluidsList.length-1),vm.resetToCollapsed=!vm.resetToCollapsed},vm.onUpdatesRecord=function(){vm.selectRecord=-1,vm.requiredFlag=!1,vm.resetToCollapsed=!vm.resetToCollapsed},vm.deleteRecord=function(recId){var idx=vm.model.tissuesFluidsList.indexOf($filter("filter")(vm.model.tissuesFluidsList,{id:recId},!0)[0]);vm.model.tissuesFluidsList.splice(idx,1),vm.requiredFlag=!1,vm.selectRecord=0},vm.setRecord=function(value){resetMe(),vm.selectRecord=-1,vm.selectRecord=value},vm.noTissueRecs=function(){return vm.model.tissuesFluidsList.length>0?(vm.oneRecord="selected",!1):(vm.oneRecord="",!0)},vm.disableAdd=function(){if(vm.noTissueRecs())return!1;if(vm.model.tissuesFluidsList)for(var keys=Object.keys(vm.model.tissuesFluidsList[vm.selectRecord<0?0:vm.selectRecord].system),i=0;i<keys.length;i++)if(vm.model.tissuesFluidsList[vm.selectRecord<0?0:vm.selectRecord].system[keys[i]])return!1;return vm.tissuesListForm.$invalid},vm.systemAlreadyUsed=function(systemVal){for(var systemExists=0,i=0;i<vm.model.tissuesFluidsList.length;i++)vm.model.tissuesFluidsList[i].systemType===systemVal&&systemExists++;return systemExists>1}}angular.module("tissuesFluidsList").component("cmpTissuesFluidsList",{templateUrl:"app/scripts/components/appendix-four/tpl-tissuesFluids-list_20210704_1517.html",bindings:{records:"<",showErrors:"&",service:"<",isFileLoaded:"<",updateErrorSummary:"&",isFocus:"<",cancelFocus:"&"},controller:tissuesFluidsListController,controllerAs:"tissuesListSrcCtrl"}),tissuesFluidsListController.$inject=["$filter","$scope"]}(),function(){"use strict";angular.module("tissuesFluidsRecord",["dossierDataLists","nervousModule","digestiveModule","cardioModule","immuneModule","muscleModule","otherTissuesModule","reprodModule","skinModule","errorMessageModule"])}(),function(){"use strict";function tissuesFluidsController(DossierLists,$translate,$filter,$scope){function _setIdNames(){var scopeId="_"+$scope.$id;vm.tissuesFormId="tissuesFluidsRecForm"+scopeId,vm.systemTypeId="system_type"+scopeId}var vm=this;vm.updateRecord=0,vm.systemList=DossierLists.getTissuesSystem(),vm.fluidsLists=DossierLists,vm.dosService="",vm.isUsed=!1,vm.selectedSystemList=[],vm.model={},vm.showDetailErrors=!1,vm.requiredOnly=[{type:"required",displayAlias:"MSG_ERR_MAND"},{type:"duplicateSys",displayAlias:"TYPE_DUPLICATESYS"}],vm.$onInit=function(){_setIdNames(),vm.showDetailErrors=!1},vm.$onChanges=function(changes){changes.record&&(vm.model=changes.record.currentValue),changes.service&&(vm.dosService=changes.service.currentValue),changes.addBtn&&(vm.resetToCollapsed=!0),changes.showErrors&&(vm.showDetailErrors=changes.showErrors.currentValue)},vm.saveRecord=function(){0!==vm.model.systemType.length&&vm.model.systemType.trim()||(vm.showDetailErrors=!0),vm.updateRecord=vm.updateRecord+1,vm.onUpdate({rec:vm.model})},vm.deleteRecord=function(){vm.onDelete({id:vm.model.id})},vm.showError=function(ctrl){return ctrl?ctrl.$invalid&&ctrl.$touched||ctrl.$invalid&&vm.showDetailErrors:(console.warn("No control found in tissuesFluids-record"),!1)},vm.systemChanged=function(ctrl){switch(vm.model.system={},vm.model.detailsConcat="",vm.isUsed=vm.systemUsed({value:vm.model.systemType}),ctrl.$setValidity("duplicateSys",!vm.isUsed),vm.isUsed&&(vm.model.system={},vm.otherDetails="",vm.model.detailsConcat=""),vm.model.systemType){case DossierLists.getNervousSystemValue():vm.model.system=vm.dosService.getDefaultNervousSystem();break;case DossierLists.getDigestiveSystemValue():vm.model.system=vm.dosService.getDefaultDigestiveSystem();break;case DossierLists.getImmuneSystemValue():vm.model.system=vm.dosService.getDefaultImmuneSystem();break;case DossierLists.getMuscleSystemValue():vm.model.system=vm.dosService.getDefaultMuscleSystem();break;case DossierLists.getOtherTissuesSystemValue():vm.model.system=vm.dosService.getDefaultOtherSystem();break;case DossierLists.getReproductiveSystemValue():vm.model.system=vm.dosService.getDefaultReproductiveSystem();break;case DossierLists.getSkinSystemValue():vm.model.system=vm.dosService.getDefaultSkinSystem();break;case DossierLists.getCardioSystemValue():vm.model.system=vm.dosService.getDefaultCardioSystem();break;default:vm.model.system={},vm.otherDetails="",vm.model.detailsConcat=""}vm.otherChanged()},vm.otherChanged=function(){vm.model.otherDetails=vm.model.system.otherDetails},vm.updateConcat=function(alias,toAdd){for(var currentLang=$translate.proposedLanguage()||$translate.use(),translateText=$translate.instant(alias,"","",currentLang),records=vm.model.detailsConcat.split("<br>"),index=-1,i=0;i<records.length;i++)if(records[i]==translateText){index=i;break}if(index===-1&&toAdd){records[0]?records.push(translateText):records[0]=translateText,records=$filter("orderBy")(records),vm.model.detailsConcat="",vm.model.detailsConcat=records[0];for(var s=1;s<records.length;s++)vm.model.detailsConcat=vm.model.detailsConcat+"<br>"+records[s]}else if(!toAdd&&index!==-1){for(var newConcat="",j=0;j<records.length;j++)j!==index&&(newConcat=newConcat+records[j]+"<br>");vm.model.detailsConcat=newConcat.substring(0,newConcat.length-4)}}}angular.module("tissuesFluidsRecord").component("cmpTissuesFluidsRecord",{templateUrl:"app/scripts/components/appendix-four/tpl-tissueFluids-record_20210704_1517.html",controller:tissuesFluidsController,controllerAs:"tissuesSrcCtrl",bindings:{record:"<",onUpdate:"&",onDelete:"&",showErrors:"<",
isFileLoaded:"<",service:"<",systemUsed:"&",addBtn:"<",isFocus:"<",cancelFocus:"&"}}),tissuesFluidsController.$inject=["DossierLists","$translate","$filter","$scope"]}(),function(){"use strict";angular.module("skinModule",["errorMessageModule","drugProductService"])}(),function(){"use strict";function skinSystemController($scope,DrugProductService){function _setIdNames(){var scopeId="_"+$scope.$id;vm.roleMissingId="roleMissing"+scopeId,vm.systemRoleId="skin_legend"+scopeId,vm.otherDetailsId="skin_details"+scopeId}var vm=this;vm.model={},vm.showError=!1,vm.isSelected="",vm.requiredOnly=[{type:"required",displayAlias:"MSG_ERR_MAND"}],vm.$onInit=function(){vm.drugProductService=new DrugProductService,vm.isSelected=1==vm.isFileLoaded&&vm.drugProductService.checkSelectedValues(vm.model,"Skin")?"selected":"",_setIdNames()},vm.$onChanges=function(changes){changes.record&&(vm.model=changes.record.currentValue,vm.updateErrorState()),changes.addBtn&&changes.addBtn.currentValue>1&&(vm.isSelected="selected"),changes.updateRecord&&(changes.updateRecord.currentValue>0&&(vm.showError=!0),vm.updateErrorState())},vm.updateErrorState=function(){for(var keys=Object.keys(vm.model),i=0;i<keys.length;i++){var val=vm.model[keys[i]];if(val)return void(vm.isSelected="selected")}vm.isSelected=""},vm.detailsChanged=function(alias,value){vm.concatUpdate({alias:alias,value:value}),value&&(vm.showError=!1),vm.updateErrorState()},vm.otherChanged=function(){var state=!1;return vm.model.otherSkin?state=!0:(state=!1,vm.model.otherDetails=""),vm.otherUpdate(),state},vm.showErrorMessage=function(isInvalid){return!(!isInvalid||!vm.showError)}}angular.module("skinModule").component("cmpSkinSystem",{templateUrl:"app/scripts/components/appendix-four/tpl-skin_20210704_1517.html",controllerAs:"sysCtrl",controller:skinSystemController,bindings:{record:"<",isFileLoaded:"<",updateRecord:"<",otherUpdate:"&",concatUpdate:"&",showErrors:"&",addBtn:"<"}}),skinSystemController.$inject=["$scope","DrugProductService"]}(),function(){"use strict";angular.module("reprodModule",["errorMessageModule","drugProductService"])}(),function(){"use strict";function reproductiveSystemController($scope,DrugProductService){function _setIdNames(){var scopeId="_"+$scope.$id;vm.roleMissingId="roleMissing"+scopeId,vm.systemRoleId="reproductive_legend"+scopeId,vm.otherDetailsId="reproductive_details"+scopeId}var vm=this;vm.model={},vm.showError=!1,vm.isSelected="",vm.requiredOnly=[{type:"required",displayAlias:"MSG_ERR_MAND"}],vm.$onInit=function(){vm.drugProductService=new DrugProductService,vm.isSelected=1==vm.isFileLoaded&&vm.drugProductService.checkSelectedValues(vm.model,"Reproductive")?"selected":"",_setIdNames()},vm.$onChanges=function(changes){changes.record&&(vm.model=changes.record.currentValue,vm.updateErrorState()),changes.addBtn&&changes.addBtn.currentValue>1&&(vm.isSelected="selected"),changes.updateRecord&&(changes.updateRecord.currentValue>0&&(vm.showError=!0),vm.updateErrorState())},vm.detailsChanged=function(alias,value){vm.concatUpdate({alias:alias,value:value}),value&&(vm.showError=!1),vm.updateErrorState()},vm.updateErrorState=function(){for(var keys=Object.keys(vm.model),i=0;i<keys.length;i++){var val=vm.model[keys[i]];if(val)return void(vm.isSelected="selected")}vm.isSelected=""},vm.showErrorMessage=function(isInvalid){return!(!isInvalid||!vm.showError)},vm.otherChanged=function(){var state=!1;return vm.model.otherReproductive?state=!0:(state=!1,vm.model.otherDetails=""),vm.otherUpdate(),state}}angular.module("reprodModule").component("cmpReproductiveSystem",{templateUrl:"app/scripts/components/appendix-four/tpl-reproductive_20210704_1517.html",controllerAs:"sysCtrl",controller:reproductiveSystemController,bindings:{record:"<",isFileLoaded:"<",updateRecord:"<",otherUpdate:"&",concatUpdate:"&",showErrors:"&",addBtn:"<"}}),reproductiveSystemController.$inject=["$scope","DrugProductService"]}(),function(){"use strict";angular.module("otherTissuesModule",["errorMessageModule","drugProductService"])}(),function(){"use strict";function otherTissueSystemController($scope,DrugProductService){function _setIdNames(){var scopeId="_"+$scope.$id;vm.roleMissingId="roleMissing"+scopeId,vm.systemRoleId="other_legend"+scopeId,vm.otherDetailsId="othertiss_details"+scopeId}var vm=this;vm.model={},vm.showError=!1,vm.isSelected="",vm.requiredOnly=[{type:"required",displayAlias:"MSG_ERR_MAND"}],vm.$onInit=function(){vm.drugProductService=new DrugProductService,vm.isSelected=1==vm.isFileLoaded&&vm.drugProductService.checkSelectedValues(vm.model,"Fluids")?"selected":"",_setIdNames()},vm.$onChanges=function(changes){changes.record&&(vm.model=changes.record.currentValue,vm.updateErrorState()),changes.addBtn&&changes.addBtn.currentValue>1&&(vm.isSelected="selected"),changes.updateRecord&&(changes.updateRecord.currentValue>0&&(vm.showError=!0),vm.updateErrorState())},vm.detailsChanged=function(alias,value){vm.concatUpdate({alias:alias,value:value}),value&&(vm.showError=!1),vm.updateErrorState()},vm.updateErrorState=function(){for(var keys=Object.keys(vm.model),i=0;i<keys.length;i++){var val=vm.model[keys[i]];if(val)return void(vm.isSelected="selected")}vm.isSelected=""},vm.showErrorMessage=function(isInvalid){return!(!isInvalid||!vm.showError)},vm.otherChanged=function(){var state=!1;return vm.model.otherFluids?state=!0:(state=!1,vm.model.otherDetails=""),vm.otherUpdate(),state}}angular.module("otherTissuesModule").component("cmpOtherTissuesSystem",{templateUrl:"app/scripts/components/appendix-four/tpl-other-tissue_20210704_1517.html",controllerAs:"sysCtrl",controller:otherTissueSystemController,bindings:{record:"<",isFileLoaded:"<",updateRecord:"<",otherUpdate:"&",concatUpdate:"&",showErrors:"&",addBtn:"<"}}),otherTissueSystemController.$inject=["$scope","DrugProductService"]}(),function(){"use strict";angular.module("nervousModule",["errorMessageModule","drugProductService"])}(),function(){"use strict";function nervousSystemController($scope,DrugProductService){function _setIdNames(){var scopeId="_"+$scope.$id;vm.roleMissingId="roleMissing"+scopeId,vm.systemRoleId="nervous_legend"+scopeId,vm.otherDetailsId="nervous_details"+scopeId}var vm=this;vm.model={},vm.showError=!1,vm.requiredOnly=[{type:"required",displayAlias:"MSG_ERR_MAND"}],vm.$onInit=function(){vm.drugProductService=new DrugProductService,vm.isSelected=1==vm.isFileLoaded&&vm.drugProductService.checkSelectedValues(vm.model,"Nervous")?"selected":"",_setIdNames()},vm.$onChanges=function(changes){changes.record&&(vm.model=changes.record.currentValue,vm.updateErrorState()),changes.addBtn&&changes.addBtn.currentValue>1&&(vm.isSelected="selected"),changes.updateRecord&&(changes.updateRecord.currentValue>0&&(vm.showError=!0),vm.updateErrorState())},vm.detailsChanged=function(alias,value){vm.concatUpdate({alias:alias,value:value}),value&&(vm.showError=!1),vm.updateErrorState()},vm.updateErrorState=function(){for(var keys=Object.keys(vm.model),i=0;i<keys.length;i++){var val=vm.model[keys[i]];if(val)return void(vm.isSelected="selected")}vm.isSelected=""},vm.showErrorMessage=function(isInvalid){return!(!isInvalid||!vm.showError)},vm.otherChanged=function(){var state=!1;return vm.model.otherNervous?state=!0:(state=!1,vm.model.otherDetails=""),vm.otherUpdate(),state}}angular.module("nervousModule").component("cmpNervousSystem",{templateUrl:"app/scripts/components/appendix-four/tpl-nervous_20210704_1517.html",controllerAs:"sysCtrl",controller:nervousSystemController,bindings:{record:"<",isFileLoaded:"<",updateRecord:"<",otherUpdate:"&",concatUpdate:"&",showErrors:"&",addBtn:"<"}}),nervousSystemController.$inject=["$scope","DrugProductService"]}(),function(){"use strict";angular.module("muscleModule",["errorMessageModule","drugProductService"])}(),function(){"use strict";function muscleSystemController($scope,DrugProductService){function _setIdNames(){var scopeId="_"+$scope.$id;vm.roleMissingId="roleMissing"+scopeId,vm.systemRoleId="muscle_legend"+scopeId,vm.otherDetailsId="muscle_details"+scopeId}var vm=this;vm.model={},vm.showError=!1,vm.requiredOnly=[{type:"required",displayAlias:"MSG_ERR_MAND"}],vm.$onInit=function(){vm.drugProductService=new DrugProductService,vm.isSelected=1==vm.isFileLoaded&&vm.drugProductService.checkSelectedValues(vm.model,"Muscle")?"selected":"",_setIdNames()},vm.$onChanges=function(changes){changes.record&&(vm.model=changes.record.currentValue,vm.updateErrorState()),changes.addBtn&&changes.addBtn.currentValue>1&&(vm.isSelected="selected"),changes.updateRecord&&(changes.updateRecord.currentValue>0&&(vm.showError=!0),vm.updateErrorState())},vm.detailsChanged=function(alias,value){vm.concatUpdate({alias:alias,value:value}),value&&(vm.showError=!1),vm.updateErrorState()},vm.updateErrorState=function(){for(var keys=Object.keys(vm.model),i=0;i<keys.length;i++){var val=vm.model[keys[i]];if(val)return void(vm.isSelected="selected")}vm.isSelected=""},vm.showErrorMessage=function(isInvalid){return!(!isInvalid||!vm.showError)},vm.otherChanged=function(){var state=!1;return vm.model.otherMuscle?state=!0:(state=!1,vm.model.otherDetails=""),vm.otherUpdate(),state}}angular.module("muscleModule").component("cmpMuscleSystem",{templateUrl:"app/scripts/components/appendix-four/tpl-muscle_20210704_1517.html",controllerAs:"sysCtrl",controller:muscleSystemController,bindings:{record:"<",isFileLoaded:"<",updateRecord:"<",otherUpdate:"&",concatUpdate:"&",showErrors:"&",addBtn:"<"}}),muscleSystemController.$inject=["$scope","DrugProductService"]}(),function(){"use strict";angular.module("immuneModule",["errorMessageModule","drugProductService"])}(),function(){"use strict";function immuneSystemController($scope,DrugProductService){function _setIdNames(){var scopeId="_"+$scope.$id;vm.roleMissingId="roleMissing"+scopeId,vm.systemRoleId="immune_legend"+scopeId,vm.otherDetailsId="immune_details"+scopeId}var vm=this;vm.model={},vm.showError=!1,vm.isSelected="",vm.requiredOnly=[{type:"required",displayAlias:"MSG_ERR_MAND"}],vm.$onInit=function(){vm.drugProductService=new DrugProductService,vm.isSelected=1==vm.isFileLoaded&&vm.drugProductService.checkSelectedValues(vm.model,"Immune")?"selected":"",_setIdNames()},vm.$onChanges=function(changes){changes.record&&(vm.model=changes.record.currentValue,vm.updateErrorState()),changes.addBtn&&changes.addBtn.currentValue>1&&(vm.isSelected="selected"),changes.updateRecord&&(changes.updateRecord.currentValue>0&&(vm.showError=!0),vm.updateErrorState())},vm.detailsChanged=function(alias,value){vm.concatUpdate({alias:alias,value:value}),value&&(vm.showError=!1),vm.updateErrorState()},vm.updateErrorState=function(){for(var keys=Object.keys(vm.model),i=0;i<keys.length;i++){var val=vm.model[keys[i]];if(val)return void(vm.isSelected="selected")}vm.isSelected=""},vm.showErrorMessage=function(isInvalid){return!(!isInvalid||!vm.showError)},vm.otherChanged=function(){var state=!1;return vm.model.otherImmune?state=!0:(state=!1,vm.model.otherDetails=""),vm.otherUpdate(),state}}angular.module("immuneModule").component("cmpImmuneSystem",{templateUrl:"app/scripts/components/appendix-four/tpl-immune_20210704_1517.html",controllerAs:"sysCtrl",controller:immuneSystemController,bindings:{record:"<",isFileLoaded:"<",updateRecord:"<",otherUpdate:"&",concatUpdate:"&",showErrors:"&",addBtn:"<"}}),immuneSystemController.$inject=["$scope","DrugProductService"]}(),function(){"use strict";angular.module("digestiveModule",["errorMessageModule","drugProductService"])}(),function(){"use strict";function digestiveSystemController($scope,DrugProductService){function _setIdNames(){var scopeId="_"+$scope.$id;vm.roleMissingId="roleMissing"+scopeId,vm.systemRoleId="digestive_legend"+scopeId,vm.otherDetailsId="digestive_details"+scopeId}var vm=this;vm.model={},vm.showError=!1,vm.isSelected="",vm.requiredOnly=[{type:"required",displayAlias:"MSG_ERR_MAND"}],vm.$onInit=function(){vm.drugProductService=new DrugProductService,vm.isSelected=1==vm.isFileLoaded&&vm.drugProductService.checkSelectedValues(vm.model,"Digestive")?"selected":"",_setIdNames()},vm.$onChanges=function(changes){changes.record&&(vm.model=changes.record.currentValue,vm.updateErrorState()),changes.addBtn&&changes.addBtn.currentValue>1&&(vm.isSelected="selected"),changes.updateRecord&&(changes.updateRecord.currentValue>0&&(vm.showError=!0),vm.updateErrorState())},vm.detailsChanged=function(alias,value){vm.concatUpdate({alias:alias,value:value}),value&&(vm.showError=!1),vm.updateErrorState()},vm.updateErrorState=function(){for(var keys=Object.keys(vm.model),i=0;i<keys.length;i++){var val=vm.model[keys[i]];if(val)return void(vm.isSelected="selected")}vm.isSelected=""},vm.showErrorMessage=function(isInvalid){return!(!isInvalid||!vm.showError)},vm.otherChanged=function(){var state=!1;return vm.model.otherDigestive?state=!0:(state=!1,vm.model.otherDetails=""),vm.otherUpdate(),state},vm.checkSelectedValues=function(){for(var keys=Object.keys(vm.model),i=0;i<keys.length;i++)if(startsWith(keys[i],"other")&&"otherDigestiveDetails"!=keys[i]){if(1==vm.model[keys[i]]&&""!=vm.model.otherDigestiveDetails)return!0;if(1==vm.model[keys[i]])return!0}return!1}}angular.module("digestiveModule").component("cmpDigestiveSystem",{templateUrl:"app/scripts/components/appendix-four/tpl-digestive_20210704_1517.html",controllerAs:"sysCtrl",controller:digestiveSystemController,bindings:{record:"<",isFileLoaded:"<",updateRecord:"<",otherUpdate:"&",concatUpdate:"&",showErrors:"&",addBtn:"<"}}),digestiveSystemController.$inject=["$scope","DrugProductService"]}(),function(){"use strict";angular.module("cardioModule",["errorMessageModule","drugProductService"])}(),function(){"use strict";function cardioSystemController($scope,DrugProductService){function _setIdNames(){var scopeId="_"+$scope.$id;vm.roleMissingId="roleMissing"+scopeId,vm.systemRoleId="cardio_legend"+scopeId,vm.otherDetailsId="cardio_details"+scopeId}var vm=this;vm.model={},vm.showError=!1,vm.isSelected="",vm.requiredOnly=[{type:"required",displayAlias:"MSG_ERR_MAND"}],vm.$onInit=function(){vm.drugProductService=new DrugProductService,vm.isSelected=1==vm.isFileLoaded&&vm.drugProductService.checkSelectedValues(vm.model,"Cardio")?"selected":"",_setIdNames()},vm.$onChanges=function(changes){changes.record&&(vm.model=changes.record.currentValue,vm.updateErrorState()),changes.addBtn&&changes.addBtn.currentValue>1&&(vm.isSelected="selected"),changes.updateRecord&&(changes.updateRecord.currentValue>0&&(vm.showError=!0),vm.updateErrorState())},vm.detailsChanged=function(alias,value){vm.concatUpdate({alias:alias,value:value}),value&&(vm.showError=!1),vm.updateErrorState()},vm.updateErrorState=function(){for(var keys=Object.keys(vm.model),i=0;i<keys.length;i++){var val=vm.model[keys[i]];if(val)return void(vm.isSelected="selected")}vm.isSelected=""},vm.otherChanged=function(){var state=!1;return vm.model.otherCardio?state=!0:(state=!1,vm.model.otherDetails=""),vm.otherUpdate(),state},vm.showErrorMessage=function(isInvalid){return!(!isInvalid||!vm.showError)}}angular.module("cardioModule").component("cmpCardioSystem",{templateUrl:"app/scripts/components/appendix-four/tpl-cardio_20210704_1517.html",controllerAs:"sysCtrl",controller:cardioSystemController,bindings:{record:"<",isFileLoaded:"<",updateRecord:"<",otherUpdate:"&",concatUpdate:"&",showErrors:"&",addBtn:"<"}}),cardioSystemController.$inject=["$scope","DrugProductService"]}(),function(){"use strict";angular.module("appendixFourModule",["expandingTable","errorSummaryModule","errorMessageModule","appendix4RecordModule"])}(),function(){"use strict";function appendixFourCtrl($scope,$anchorScroll,$location){function goToAppendx4Summary(){var appendix4Section=angular.element(document.querySelector("#appendix4-section"));appendix4Section&&($location.hash("appendix4-section"),$anchorScroll())}function getListMaxID(){var out=0,list=vm.ingredientList;if(list)for(var i=0;i<list.length;i++)list[i].id>out&&(out=list[i].id);return out}function resetMe(){vm.resetToCollapsed=!vm.resetToCollapsed}function _setIdNames(){var scopeId="_"+$scope.$id;vm.appendix4Id="appendix_form"+scopeId}var vm=this;vm.selectRecord=-1,vm.colNames=[{label:"INGRED_NAME",binding:"ingredientName",width:"98",isHtml:"true"}],vm.ingredientList=[],vm.updateSummary=0,vm.showSummary=!1,vm.focusSummary=0,vm.isFocus=!1,vm.exclusions={"tissuesListSrcCtrl.tissuesListForm":"true"},vm.transcludeList={"cmp-appendix-four-record":"true"},vm.alias={oneselected:{type:"elementnoid",target:"srcIngredList"}},vm.$onInit=function(){_setIdNames(),vm.newFormShown=!1,vm.isDetailValid=!0,vm.ingredientList||(vm.ingredientList=[]),vm.exclusions={}},vm.$onChanges=function(changes){changes.ingredients&&(vm.ingredientList=changes.ingredients.currentValue),changes.showErrorSummary&&(vm.showSummary=changes.showErrorSummary.currentValue),changes.errorSummaryUpdate&&vm.updateErrorSummaryState()},vm.addNew=function(){var newRecord={id:getListMaxID()+1,ingredientName:""};vm.ingredientList.push(newRecord),vm.setRecord(vm.ingredientList.length-1),goToAppendx4Summary()},vm.update=function(idx,ing){},vm["delete"]=function(idx){vm.ingredientList.splice(idx,1)&&(vm.resetToCollapsed=!0),vm.recordChanged()},vm.updateErrorSummaryState=function(){vm.updateSummary=vm.updateSummary+1},$scope.$watchCollection("ap4Ctrl.appendixForm.$error",function(newValue,oldValue){vm.updateErrorSummary()}),vm.setRecord=function(value){resetMe(),vm.selectRecord=-1,vm.selectRecord=value},vm.setFocus=function(){vm.isFocus=!0},vm.cancelFocus=function(){vm.isFocus=!1}}angular.module("appendixFourModule").component("cmpAppendixFour",{templateUrl:"app/scripts/components/appendix-four/tpl-appendix-four_20210704_1517.html",controller:appendixFourCtrl,controllerAs:"ap4Ctrl",bindings:{ingredients:"<",recordChanged:"&",service:"<",errorSummaryUpdate:"<",showErrorSummary:"<",isFileLoaded:"<",updateErrorSummary:"&",humanAnimalIngredientNameList:"&"}}),appendixFourCtrl.$inject=["$scope","$anchorScroll","$location"]}(),function(){"use strict";angular.module("appendix4RecordModule",["tissuesFluidsList","animalSourcedSection","errorSummaryModule","errorMessageModule"])}(),function(){"use strict";function app4RecCtrl($scope){function _setIdNames(){var scopeId="_"+$scope.$id;vm.appendixFormRecordId="appendix4FormRecord"+scopeId,vm.ingredNameId="ingred_mat_name"+scopeId,vm.oneTypeId="msg_app4_type"+scopeId,vm.fsType="fs_type"+scopeId}var vm=this;vm.isSourced="";var emptyFluidsTissues={tissuesList:[]},emptyAnimalSource={animalSrcList:[],isCellLine:"",isBiotechDerived:"",isControlledPop:"",ageAnimals:"",countryList:[]};vm.model={},vm.exclusions={},vm.transcludeList={},vm.alias={no_country_origin:{type:"elementnoid",target:"list_country_origin"},no_animal:{type:"elementnoid",target:"list_animal"},msg_app4_type:{type:"fieldset",parent:"fs_type"},roleMissing:{type:"fieldset",parent:"system_role"},no_tissue:{type:"elementnoid",target:"list_tissue"}},vm.showSummary=!1,vm.updateSummary=0,vm.summaryName="",vm.requiredOnly=[{type:"required",displayAlias:"MSG_ERR_MAND"}],vm.$onInit=function(){vm.isSourcedSelected(),_setIdNames(),vm.showErrors()},vm.$onChanges=function(changes){changes.record&&(vm.model=changes.record.currentValue,vm.isSourcedSelected(),vm.summaryName="cmp-appendix-four-record_"+(vm.model.id-1),vm.showErrors()),changes.showErrorSummary&&(vm.showSummary=changes.showErrorSummary.currentValue,vm.updateErrorSummaryState(),vm.showErrors()),changes.errorSummaryUpdate&&vm.updateErrorSummaryState()},vm.updateErrorSummaryState=function(){vm.updateSummary=vm.updateSummary+1},vm.isSourcedSelected=function(){var result=vm.model.humanSourced||vm.model.animalSourced;return result?vm.isSourced=result:vm.isSourced="",result},vm.noSelectionError=function(){return vm.appendix4RecForm.$dirty&&!vm.isSourcedSelected()||vm.showListErrors()&&!vm.isSourcedSelected()},vm.showError=function(isInvalid,isTouched){return isInvalid&&isTouched||isInvalid&&vm.showListErrors()},vm.save=function(){vm.record?vm.onUpdate({record:vm.model}):vm.onAddNew({record:vm.model})},vm.showErrors=function(){return vm.showSummary},vm["delete"]=function(){vm.record&&vm.onDelete()},vm.updateTissuesFluids=function(input){vm.model.tissuesFluidsOrigin=input,vm.onUpdate({record:vm.model})},vm.updateAnimalSourced=function(input){vm.model.sourceAnimalDetails=input,vm.onUpdate({record:vm.model})},vm.showTissuesFluids=function(){return vm.model.humanSourced||vm.model.animalSourced?(vm.model.tissuesFluidsOrigin||(vm.model.tissuesFluidsOrigin=angular.copy(emptyFluidsTissues)),!0):(vm.model.tissuesFluidsOrigin=null,!1)},vm.showAnimalSources=function(){vm.showTissuesFluids();return vm.model.animalSourced?(vm.model.sourceAnimalDetails||(vm.model.sourceAnimalDetails=angular.copy(emptyAnimalSource)),!0):(vm.model.sourceAnimalDetails=null,!1)},$scope.$watch("ap4RecCtrl.appendix4RecForm.$error",function(){vm.updateErrorSummaryState(),vm.isSourcedSelected()},!0)}angular.module("appendix4RecordModule").component("cmpAppendixFourRecord",{templateUrl:"app/scripts/components/appendix-four/tpl-appendix-four-record_20210704_1517.html",controllerAs:"ap4RecCtrl",controller:app4RecCtrl,bindings:{record:"<",showListErrors:"&",onAddNew:"&",onUpdate:"&",onDelete:"&",onCancel:"&",deleteBtn:"<",recordChanged:"&",service:"<",isFileLoaded:"<",errorSummaryUpdate:"<",showErrorSummary:"<",updateErrorSummary:"&",isFocus:"<",cancelFocus:"&",humanAnimalIngredientNameList:"&"}}),app4RecCtrl.$inject=["$scope"]}(),function(){"use strict";angular.module("animalSourcedSection",["animalSourcedList","srcCountryListModule","numberFormat","errorMessageModule"])}(),function(){"use strict";function animalSourcedSectionController($filter,DossierLists,$scope){function _setIdNames(){var scopeId="_"+$scope.$id;vm.oneAnimalId="no_animal"+scopeId,vm.animalSectionRecordId="anSectForm"+scopeId,vm.cellLineId="cellLine"+scopeId,vm.controlledPopId="controlledPop"+scopeId,vm.ageKnownId="is_age_known"+scopeId,vm.ageAnimalsId="ageAnimals"+scopeId,vm.isBiotechId="biotechderived"+scopeId,vm.noCountryId="no_country_origin"+scopeId}var vm=this;vm.yesNoUnknownList=DossierLists.getYesNoUnknownList(),vm.yesNoList=DossierLists.getYesNoList(),vm.model={},vm.model.animalSrcSection=[],vm.oneAnimal="",vm.oneCountry="",vm.requiredOnly=[{type:"required",displayAlias:"MSG_ERR_MAND"}],vm.numberErrors=[{type:"required",displayAlias:"MSG_ERR_MAND"},{type:"number",displayAlias:"TYPE_NUMBER"}],vm.$onInit=function(){_setIdNames(),vm.noAnimalSrc(),vm.noCountrySrc()},vm.$onChanges=function(changes){changes.records&&(vm.model=changes.records.currentValue)},vm.showError=function(ctrl){return ctrl?ctrl.$invalid&&ctrl.$touched||ctrl.$invalid&&vm.showErrors():(console.warn("No control animalSourced-section"),!1)},vm.updateCountryList=function(list){vm.model.countryList=list,vm.noCountrySrc()},vm.updateAnimalSourceList=function(list){vm.model.animalSrcList=list,vm.noAnimalSrc()},vm.noAnimalSrc=function(){return vm.model.animalSrcList.length>0?(vm.oneAnimal="selected",!1):(vm.oneAnimal="",!0)},vm.noCountrySrc=function(){return vm.model.countryList.length>0?(vm.oneCountry="selected",!1):(vm.oneCountry="",!0)},vm.isAnimalAgeKnown=function(){return"Y"===vm.model.isAgeKnown||(vm.model.ageAnimals=null,!1)},$scope.$watch("animalSectCtrl.anSectForm.$error",function(){vm.updateErrorSummary()},!0)}angular.module("animalSourcedSection").component("cmpAnimalSourcedSection",{templateUrl:"app/scripts/components/appendix-four/tpl-animalSourced-section_20210704_1517.html",bindings:{records:"<",isFileLoaded:"<",showErrors:"&",updateErrorSummary:"&"},controller:animalSourcedSectionController,controllerAs:"animalSectCtrl"}),animalSourcedSectionController.$inject=["$filter","DossierLists","$scope"]}(),function(){"use strict";angular.module("animalSourcedRecord",["errorMessageModule"])}(),function(){"use strict";function animalSourcedController(DossierLists,$scope){function _setIdNames(){var scopeId="_"+$scope.$id;vm.roleMissingId="roleMissing"+scopeId,vm.systemRoleId="system_role"+scopeId,vm.animalTypeId="animal_type"+scopeId,vm.animalTypeDetailId="animal_details"+scopeId}var vm=this;vm.showDetailErrors=!1,vm.updateRecord=0,vm.animalsList=DossierLists.getAnimalSources(),vm.yesNoUnknownList=DossierLists.getYesNoUnknownList(),vm.model={},vm.requiredOnly=[{type:"required",displayAlias:"MSG_ERR_MAND"}],vm.$onInit=function(){_setIdNames(),vm.showDetailErrors=!1},vm.$onChanges=function(changes){changes.record&&(vm.model=changes.record.currentValue),changes.showErrors&&(vm.showDetailErrors=changes.showErrors.currentValue)},vm.saveRecord=function(){0!==vm.model.animalType.length&&vm.model.animalType.trim()&&0!==vm.model.animalDetail.length&&vm.model.animalDetail.trim()||(vm.showDetailErrors=!0),vm.updateRecord=vm.updateRecord+1,vm.onUpdate({rec:vm.model})},vm.deleteRecord=function(){vm.onDelete({id:vm.model.id})},vm.showError=function(ctrl){return!!ctrl&&(ctrl.$invalid&&ctrl.$touched||ctrl.$invalid&&vm.showDetailErrors)}}angular.module("animalSourcedRecord").component("cmpAnimalSourcedRecord",{templateUrl:"app/scripts/components/appendix-four/tpl-animalSourced-record_20210704_1517.html",controller:animalSourcedController,controllerAs:"animalSrcCtrl",bindings:{record:"<",onUpdate:"&",onDelete:"&",showErrors:"<",isFocus:"<",cancelFocus:"&"}}),animalSourcedController.$inject=["DossierLists","$scope"]}(),function(){"use strict";angular.module("animalSourcedList",["animalSourcedRecord","expandingTable"])}(),function(){"use strict";function animalSourcedListController($filter){function getMaxID(){for(var id=0,i=0;i<vm.model.animalSrcList.length;i++)vm.model.animalSrcList[i].id>id&&(id=vm.model.animalSrcList[i].id);return id}var vm=this;vm.selectRecord=-1,vm.isDetailValid=!0,vm.resetToCollapsed=!0,vm.requiredFlag=!0,vm.oneRecord="",vm.model={},vm.model.animalSrcList=[],vm.isFocus=!1,vm.showDetailErrors=!1,vm.columnDef=[{label:"ANIMAL_TYPE",binding:"animalType",width:"40"},{label:"ANIMAL_TYPE_DETAILS",binding:"animalDetail",width:"60",isHtml:"true"}],vm.$onInit=function(){vm.isDetailValid=!0,vm.resetToCollapsed=!0,vm.showDetailErrors=!1,vm.oneRecord=""},vm.$onChanges=function(changes){changes.records&&(vm.model.animalSrcList=changes.records.currentValue),changes.isFileLoaded&&changes.isFileLoaded.currentValue&&(vm.requiredFlag=!1),changes.showErrors&&(vm.showDetailErrors=changes.showErrors.currentValue)},vm.$postLink=function(){vm.isFileLoaded||vm.addNew()},vm.setValid=function(value){vm.isDetailValid=value},vm.addNew=function(){var maxID=Number(getMaxID()),item={id:maxID+1,animalType:"",animalDetail:""};vm.model.animalSrcList.push(item),vm.selectRecord=vm.model.animalSrcList.length-1,vm.model.animalSrcList.length>1&&(vm.requiredFlag=!1),vm.onUpdate({list:vm.model.animalSrcList})},vm.onUpdatesRecord=function(){vm.selectRecord=-1,vm.requiredFlag=!1,vm.resetCollapsed=!vm.resetCollapsed},vm.deleteRecord=function(recId){var idx=vm.model.animalSrcList.indexOf($filter("filter")(vm.model.animalSrcList,{id:recId},!0)[0]);vm.model.animalSrcList.splice(idx,1),vm.onUpdate({list:vm.model.animalSrcList}),vm.requiredFlag=!1},vm.setFocus=function(){vm.isFocus=!0},vm.cancelFocus=function(){vm.isFocus=!1}}angular.module("animalSourcedList").component("cmpAnimalSourcedList",{templateUrl:"app/scripts/components/appendix-four/tpl-animalSourced-list_20210704_1517.html",bindings:{records:"<",isFileLoaded:"<",showErrors:"<",onUpdate:"&"},controller:animalSourcedListController,controllerAs:"animalListCtrl"}),animalSourcedListController.$inject=["$filter"]}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
